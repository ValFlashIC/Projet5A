
STM32H747I-DISCO_PeopleCounting_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  00100000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      0000ce1e  08100008  08100008  00100008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         000253f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00052678  080256a0  080256a0  000356a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08077d18  08077d18  00087d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08077d20  08077d20  00087d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08077d24  08077d24  00087d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000618e0  24000000  08077d28  00090000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uart_rx_buffer 00000020  240618e0  080d9608  000f18e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .uart_tx_buffer 00000400  24061900  080d9628  000f1900  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 ._user_heap_stack 00001400  24061d00  080d9a28  000f1d00  2**0
                  ALLOC
 12 .bss          0000fa80  30000000  30000000  00110000  2**5
                  ALLOC
 13 .sram_section 00000280  3000fa80  3000fa80  00110000  2**2
                  ALLOC
 14 .sdram_section 00de0ba0  d0000000  d0000000  00110000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0010ce26  2**0
                  CONTENTS, READONLY
 16 .debug_line   0006158a  00000000  00000000  0010ce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0009dbce  00000000  00000000  0016e3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000caf4  00000000  00000000  0020bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000023f8  00000000  00000000  00218aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001c384f  00000000  00000000  0021ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000a158  00000000  00000000  003de6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00053d75  00000000  00000000  003e8840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0004fd7a  00000000  00000000  0043c5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000ce  00000000  00000000  0048c32f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009854  00000000  00000000  0048c400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .stab         000000cc  00000000  00000000  00495c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  00495d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	30000000 	.word	0x30000000
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802567c 	.word	0x0802567c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	30000004 	.word	0x30000004
 80002dc:	0802567c 	.word	0x0802567c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9a2 	b.w	800070c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f83a 	bl	8000448 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	eef1 7a67 	vneg.f32	s15, s15
 80003f6:	b508      	push	{r3, lr}
 80003f8:	ee17 0a90 	vmov	r0, s15
 80003fc:	f000 f804 	bl	8000408 <__aeabi_f2ulz>
 8000400:	4240      	negs	r0, r0
 8000402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000406:	bd08      	pop	{r3, pc}

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000438 <__aeabi_f2ulz+0x30>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000440 <__aeabi_f2ulz+0x38>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000424:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee16 1a10 	vmov	r1, s12
 8000430:	ee17 0a90 	vmov	r0, s15
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	00000000 	.word	0x00000000
 800043c:	3df00000 	.word	0x3df00000
 8000440:	00000000 	.word	0x00000000
 8000444:	41f00000 	.word	0x41f00000

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	4604      	mov	r4, r0
 8000450:	468c      	mov	ip, r1
 8000452:	2b00      	cmp	r3, #0
 8000454:	f040 8083 	bne.w	800055e <__udivmoddi4+0x116>
 8000458:	428a      	cmp	r2, r1
 800045a:	4617      	mov	r7, r2
 800045c:	d947      	bls.n	80004ee <__udivmoddi4+0xa6>
 800045e:	fab2 f282 	clz	r2, r2
 8000462:	b142      	cbz	r2, 8000476 <__udivmoddi4+0x2e>
 8000464:	f1c2 0020 	rsb	r0, r2, #32
 8000468:	fa24 f000 	lsr.w	r0, r4, r0
 800046c:	4091      	lsls	r1, r2
 800046e:	4097      	lsls	r7, r2
 8000470:	ea40 0c01 	orr.w	ip, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800047a:	0c23      	lsrs	r3, r4, #16
 800047c:	fbbc f6f8 	udiv	r6, ip, r8
 8000480:	fa1f fe87 	uxth.w	lr, r7
 8000484:	fb08 c116 	mls	r1, r8, r6, ip
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f10e 	mul.w	r1, r6, lr
 8000490:	4299      	cmp	r1, r3
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x60>
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	f106 30ff 	add.w	r0, r6, #4294967295
 800049a:	f080 8119 	bcs.w	80006d0 <__udivmoddi4+0x288>
 800049e:	4299      	cmp	r1, r3
 80004a0:	f240 8116 	bls.w	80006d0 <__udivmoddi4+0x288>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	443b      	add	r3, r7
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	45a6      	cmp	lr, r4
 80004be:	d909      	bls.n	80004d4 <__udivmoddi4+0x8c>
 80004c0:	193c      	adds	r4, r7, r4
 80004c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c6:	f080 8105 	bcs.w	80006d4 <__udivmoddi4+0x28c>
 80004ca:	45a6      	cmp	lr, r4
 80004cc:	f240 8102 	bls.w	80006d4 <__udivmoddi4+0x28c>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004d8:	eba4 040e 	sub.w	r4, r4, lr
 80004dc:	2600      	movs	r6, #0
 80004de:	b11d      	cbz	r5, 80004e8 <__udivmoddi4+0xa0>
 80004e0:	40d4      	lsrs	r4, r2
 80004e2:	2300      	movs	r3, #0
 80004e4:	e9c5 4300 	strd	r4, r3, [r5]
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	b902      	cbnz	r2, 80004f2 <__udivmoddi4+0xaa>
 80004f0:	deff      	udf	#255	; 0xff
 80004f2:	fab2 f282 	clz	r2, r2
 80004f6:	2a00      	cmp	r2, #0
 80004f8:	d150      	bne.n	800059c <__udivmoddi4+0x154>
 80004fa:	1bcb      	subs	r3, r1, r7
 80004fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	2601      	movs	r6, #1
 8000506:	fbb3 fcfe 	udiv	ip, r3, lr
 800050a:	0c21      	lsrs	r1, r4, #16
 800050c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb08 f30c 	mul.w	r3, r8, ip
 8000518:	428b      	cmp	r3, r1
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0xe4>
 800051c:	1879      	adds	r1, r7, r1
 800051e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0xe2>
 8000524:	428b      	cmp	r3, r1
 8000526:	f200 80e9 	bhi.w	80006fc <__udivmoddi4+0x2b4>
 800052a:	4684      	mov	ip, r0
 800052c:	1ac9      	subs	r1, r1, r3
 800052e:	b2a3      	uxth	r3, r4
 8000530:	fbb1 f0fe 	udiv	r0, r1, lr
 8000534:	fb0e 1110 	mls	r1, lr, r0, r1
 8000538:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800053c:	fb08 f800 	mul.w	r8, r8, r0
 8000540:	45a0      	cmp	r8, r4
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x10c>
 8000544:	193c      	adds	r4, r7, r4
 8000546:	f100 33ff 	add.w	r3, r0, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x10a>
 800054c:	45a0      	cmp	r8, r4
 800054e:	f200 80d9 	bhi.w	8000704 <__udivmoddi4+0x2bc>
 8000552:	4618      	mov	r0, r3
 8000554:	eba4 0408 	sub.w	r4, r4, r8
 8000558:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800055c:	e7bf      	b.n	80004de <__udivmoddi4+0x96>
 800055e:	428b      	cmp	r3, r1
 8000560:	d909      	bls.n	8000576 <__udivmoddi4+0x12e>
 8000562:	2d00      	cmp	r5, #0
 8000564:	f000 80b1 	beq.w	80006ca <__udivmoddi4+0x282>
 8000568:	2600      	movs	r6, #0
 800056a:	e9c5 0100 	strd	r0, r1, [r5]
 800056e:	4630      	mov	r0, r6
 8000570:	4631      	mov	r1, r6
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	fab3 f683 	clz	r6, r3
 800057a:	2e00      	cmp	r6, #0
 800057c:	d14a      	bne.n	8000614 <__udivmoddi4+0x1cc>
 800057e:	428b      	cmp	r3, r1
 8000580:	d302      	bcc.n	8000588 <__udivmoddi4+0x140>
 8000582:	4282      	cmp	r2, r0
 8000584:	f200 80b8 	bhi.w	80006f8 <__udivmoddi4+0x2b0>
 8000588:	1a84      	subs	r4, r0, r2
 800058a:	eb61 0103 	sbc.w	r1, r1, r3
 800058e:	2001      	movs	r0, #1
 8000590:	468c      	mov	ip, r1
 8000592:	2d00      	cmp	r5, #0
 8000594:	d0a8      	beq.n	80004e8 <__udivmoddi4+0xa0>
 8000596:	e9c5 4c00 	strd	r4, ip, [r5]
 800059a:	e7a5      	b.n	80004e8 <__udivmoddi4+0xa0>
 800059c:	f1c2 0320 	rsb	r3, r2, #32
 80005a0:	fa20 f603 	lsr.w	r6, r0, r3
 80005a4:	4097      	lsls	r7, r2
 80005a6:	fa01 f002 	lsl.w	r0, r1, r2
 80005aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005ae:	40d9      	lsrs	r1, r3
 80005b0:	4330      	orrs	r0, r6
 80005b2:	0c03      	lsrs	r3, r0, #16
 80005b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005b8:	fa1f f887 	uxth.w	r8, r7
 80005bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80005c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c4:	fb06 f108 	mul.w	r1, r6, r8
 80005c8:	4299      	cmp	r1, r3
 80005ca:	fa04 f402 	lsl.w	r4, r4, r2
 80005ce:	d909      	bls.n	80005e4 <__udivmoddi4+0x19c>
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80005d6:	f080 808d 	bcs.w	80006f4 <__udivmoddi4+0x2ac>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 808a 	bls.w	80006f4 <__udivmoddi4+0x2ac>
 80005e0:	3e02      	subs	r6, #2
 80005e2:	443b      	add	r3, r7
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	b281      	uxth	r1, r0
 80005e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f4:	fb00 f308 	mul.w	r3, r0, r8
 80005f8:	428b      	cmp	r3, r1
 80005fa:	d907      	bls.n	800060c <__udivmoddi4+0x1c4>
 80005fc:	1879      	adds	r1, r7, r1
 80005fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000602:	d273      	bcs.n	80006ec <__udivmoddi4+0x2a4>
 8000604:	428b      	cmp	r3, r1
 8000606:	d971      	bls.n	80006ec <__udivmoddi4+0x2a4>
 8000608:	3802      	subs	r0, #2
 800060a:	4439      	add	r1, r7
 800060c:	1acb      	subs	r3, r1, r3
 800060e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000612:	e778      	b.n	8000506 <__udivmoddi4+0xbe>
 8000614:	f1c6 0c20 	rsb	ip, r6, #32
 8000618:	fa03 f406 	lsl.w	r4, r3, r6
 800061c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000620:	431c      	orrs	r4, r3
 8000622:	fa20 f70c 	lsr.w	r7, r0, ip
 8000626:	fa01 f306 	lsl.w	r3, r1, r6
 800062a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800062e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000632:	431f      	orrs	r7, r3
 8000634:	0c3b      	lsrs	r3, r7, #16
 8000636:	fbb1 f9fe 	udiv	r9, r1, lr
 800063a:	fa1f f884 	uxth.w	r8, r4
 800063e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000642:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000646:	fb09 fa08 	mul.w	sl, r9, r8
 800064a:	458a      	cmp	sl, r1
 800064c:	fa02 f206 	lsl.w	r2, r2, r6
 8000650:	fa00 f306 	lsl.w	r3, r0, r6
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x220>
 8000656:	1861      	adds	r1, r4, r1
 8000658:	f109 30ff 	add.w	r0, r9, #4294967295
 800065c:	d248      	bcs.n	80006f0 <__udivmoddi4+0x2a8>
 800065e:	458a      	cmp	sl, r1
 8000660:	d946      	bls.n	80006f0 <__udivmoddi4+0x2a8>
 8000662:	f1a9 0902 	sub.w	r9, r9, #2
 8000666:	4421      	add	r1, r4
 8000668:	eba1 010a 	sub.w	r1, r1, sl
 800066c:	b2bf      	uxth	r7, r7
 800066e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000672:	fb0e 1110 	mls	r1, lr, r0, r1
 8000676:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800067a:	fb00 f808 	mul.w	r8, r0, r8
 800067e:	45b8      	cmp	r8, r7
 8000680:	d907      	bls.n	8000692 <__udivmoddi4+0x24a>
 8000682:	19e7      	adds	r7, r4, r7
 8000684:	f100 31ff 	add.w	r1, r0, #4294967295
 8000688:	d22e      	bcs.n	80006e8 <__udivmoddi4+0x2a0>
 800068a:	45b8      	cmp	r8, r7
 800068c:	d92c      	bls.n	80006e8 <__udivmoddi4+0x2a0>
 800068e:	3802      	subs	r0, #2
 8000690:	4427      	add	r7, r4
 8000692:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000696:	eba7 0708 	sub.w	r7, r7, r8
 800069a:	fba0 8902 	umull	r8, r9, r0, r2
 800069e:	454f      	cmp	r7, r9
 80006a0:	46c6      	mov	lr, r8
 80006a2:	4649      	mov	r1, r9
 80006a4:	d31a      	bcc.n	80006dc <__udivmoddi4+0x294>
 80006a6:	d017      	beq.n	80006d8 <__udivmoddi4+0x290>
 80006a8:	b15d      	cbz	r5, 80006c2 <__udivmoddi4+0x27a>
 80006aa:	ebb3 020e 	subs.w	r2, r3, lr
 80006ae:	eb67 0701 	sbc.w	r7, r7, r1
 80006b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006b6:	40f2      	lsrs	r2, r6
 80006b8:	ea4c 0202 	orr.w	r2, ip, r2
 80006bc:	40f7      	lsrs	r7, r6
 80006be:	e9c5 2700 	strd	r2, r7, [r5]
 80006c2:	2600      	movs	r6, #0
 80006c4:	4631      	mov	r1, r6
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	462e      	mov	r6, r5
 80006cc:	4628      	mov	r0, r5
 80006ce:	e70b      	b.n	80004e8 <__udivmoddi4+0xa0>
 80006d0:	4606      	mov	r6, r0
 80006d2:	e6e9      	b.n	80004a8 <__udivmoddi4+0x60>
 80006d4:	4618      	mov	r0, r3
 80006d6:	e6fd      	b.n	80004d4 <__udivmoddi4+0x8c>
 80006d8:	4543      	cmp	r3, r8
 80006da:	d2e5      	bcs.n	80006a8 <__udivmoddi4+0x260>
 80006dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80006e0:	eb69 0104 	sbc.w	r1, r9, r4
 80006e4:	3801      	subs	r0, #1
 80006e6:	e7df      	b.n	80006a8 <__udivmoddi4+0x260>
 80006e8:	4608      	mov	r0, r1
 80006ea:	e7d2      	b.n	8000692 <__udivmoddi4+0x24a>
 80006ec:	4660      	mov	r0, ip
 80006ee:	e78d      	b.n	800060c <__udivmoddi4+0x1c4>
 80006f0:	4681      	mov	r9, r0
 80006f2:	e7b9      	b.n	8000668 <__udivmoddi4+0x220>
 80006f4:	4666      	mov	r6, ip
 80006f6:	e775      	b.n	80005e4 <__udivmoddi4+0x19c>
 80006f8:	4630      	mov	r0, r6
 80006fa:	e74a      	b.n	8000592 <__udivmoddi4+0x14a>
 80006fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000700:	4439      	add	r1, r7
 8000702:	e713      	b.n	800052c <__udivmoddi4+0xe4>
 8000704:	3802      	subs	r0, #2
 8000706:	443c      	add	r4, r7
 8000708:	e724      	b.n	8000554 <__udivmoddi4+0x10c>
 800070a:	bf00      	nop

0800070c <__aeabi_idiv0>:
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <Reset_Handler_m4>
	...

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800071a:	e003      	b.n	8000724 <LoopCopyDataInit>

0800071c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800071e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000722:	3104      	adds	r1, #4

08000724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800072c:	d3f6      	bcc.n	800071c <CopyDataInit>
  ldr  r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000730:	e002      	b.n	8000738 <LoopFillZerobss>

08000732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000734:	f842 3b04 	str.w	r3, [r2], #4

08000738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800073c:	d3f9      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800073e:	f003 fee9 	bl	8004514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f021 fd07 	bl	8022154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f003 fbef 	bl	8003f28 <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800074c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000750:	08077d28 	.word	0x08077d28
  ldr  r0, =_sdata
 8000754:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000758:	24001d34 	.word	0x24001d34
  ldr  r2, =_sbss
 800075c:	30000000 	.word	0x30000000
  ldr  r3, = _ebss
 8000760:	3000fa80 	.word	0x3000fa80

08000764 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC3_IRQHandler>
	...

08000768 <network_nms_comparator_out>:
{
    network_pp_outBuffer_t a = *(network_pp_outBuffer_t *)pa;
    network_pp_outBuffer_t b = *(network_pp_outBuffer_t *)pb;
    float32_t diff = 0;

    diff = b.conf - a.conf;
 8000768:	ed90 7a04 	vldr	s14, [r0, #16]
 800076c:	edd1 7a04 	vldr	s15, [r1, #16]
 8000770:	ee77 7ac7 	vsub.f32	s15, s15, s14

    if (diff < 0) return 1;
 8000774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077c:	d404      	bmi.n	8000788 <network_nms_comparator_out+0x20>
    else if (diff > 0) return -1;
 800077e:	bfcc      	ite	gt
 8000780:	f04f 30ff 	movgt.w	r0, #4294967295
 8000784:	2000      	movle	r0, #0
 8000786:	4770      	bx	lr
    if (diff < 0) return 1;
 8000788:	2001      	movs	r0, #1
    return 0;
}
 800078a:	4770      	bx	lr

0800078c <APP_Init>:
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{
 800078c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000790:	f04f 0e01 	mov.w	lr, #1
{
 8000794:	4604      	mov	r4, r0
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000796:	4a2d      	ldr	r2, [pc, #180]	; (800084c <APP_Init+0xc0>)
 8000798:	f646 1c8c 	movw	ip, #27020	; 0x698c
  App_Context_Ptr->Operating_Mode=NOMINAL;
 800079c:	f880 e000 	strb.w	lr, [r0]
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 80007a0:	f646 1094 	movw	r0, #27028	; 0x6994
 80007a4:	492a      	ldr	r1, [pc, #168]	; (8000850 <APP_Init+0xc4>)
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 80007a6:	f646 1798 	movw	r7, #27032	; 0x6998
  App_Context_Ptr->run_loop=1;
 80007aa:	f8c4 e004 	str.w	lr, [r4, #4]
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80007ae:	f646 199c 	movw	r9, #27036	; 0x699c
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 80007b2:	f844 200c 	str.w	r2, [r4, ip]
  App_Context_Ptr->Test_ContextPtr->ValidationContext.acc_num_object_detected=0;
 80007b6:	f04f 0c00 	mov.w	ip, #0
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 80007ba:	5021      	str	r1, [r4, r0]
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 80007bc:	f646 1890 	movw	r8, #27024	; 0x6990
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <APP_Init+0xc8>)
  App_Context_Ptr->People_ContextPtr=&People_Context;
 80007c2:	f646 1ba0 	movw	fp, #27040	; 0x69a0
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 80007c6:	4824      	ldr	r0, [pc, #144]	; (8000858 <APP_Init+0xcc>)
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 80007c8:	f04f 0a02 	mov.w	sl, #2
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_network");/*Caution: max size for the path must be 64 char! */
 80007cc:	4e23      	ldr	r6, [pc, #140]	; (800085c <APP_Init+0xd0>)
 80007ce:	f503 7570 	add.w	r5, r3, #960	; 0x3c0
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80007d2:	f844 3009 	str.w	r3, [r4, r9]
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 80007d6:	f04f 0904 	mov.w	r9, #4
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 80007da:	51e0      	str	r0, [r4, r7]
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_FLIP;
 80007dc:	f8c2 e01c 	str.w	lr, [r2, #28]
  App_Context_Ptr->Test_ContextPtr->ValidationContext.acc_num_object_detected=0;
 80007e0:	f8c3 c448 	str.w	ip, [r3, #1096]	; 0x448
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80007e4:	6384      	str	r4, [r0, #56]	; 0x38
  App_Context_Ptr->Camera_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80007e6:	6194      	str	r4, [r2, #24]
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80007e8:	f8c3 4530 	str.w	r4, [r3, #1328]	; 0x530
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80007ec:	60cc      	str	r4, [r1, #12]
  App_Context_Ptr->People_ContextPtr=&People_Context;
 80007ee:	4f1c      	ldr	r7, [pc, #112]	; (8000860 <APP_Init+0xd4>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_network");/*Caution: max size for the path must be 64 char! */
 80007f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007f6:	6836      	ldr	r6, [r6, #0]
  App_Context_Ptr->People_ContextPtr=&People_Context;
 80007f8:	f844 700b 	str.w	r7, [r4, fp]
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_network");/*Caution: max size for the path must be 64 char! */
 80007fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <APP_Init+0xd8>)
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.w = AI_NETWORK_WIDTH;
 8000800:	22f0      	movs	r2, #240	; 0xf0
  App_Context_Ptr->People_ContextPtr->nn_input_norm_scale=255.0f;
 8000802:	4919      	ldr	r1, [pc, #100]	; (8000868 <APP_Init+0xdc>)

  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8000804:	4620      	mov	r0, r4
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_network");/*Caution: max size for the path must be 64 char! */
 8000806:	602e      	str	r6, [r5, #0]
  App_Context_Ptr->People_ContextPtr->nn_output_buffer=nn_output_buff;
 8000808:	4d18      	ldr	r5, [pc, #96]	; (800086c <APP_Init+0xe0>)
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 800080a:	f844 3008 	str.w	r3, [r4, r8]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 800080e:	64dc      	str	r4, [r3, #76]	; 0x4c
  App_Context_Ptr->Preproc_ContextPtr->red_blue_swap = 1; /* See UM2611 section 3.2.6 Pixel data order */
 8000810:	f8c3 e008 	str.w	lr, [r3, #8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000814:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000818:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 800081c:	f8c3 a044 	str.w	sl, [r3, #68]	; 0x44
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000820:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  App_Context_Ptr->People_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000824:	627c      	str	r4, [r7, #36]	; 0x24
  App_Context_Ptr->People_ContextPtr->nn_input_norm_zp=0;
 8000826:	f8c7 c020 	str.w	ip, [r7, #32]
  App_Context_Ptr->People_ContextPtr->nn_output_buffer=nn_output_buff;
 800082a:	603d      	str	r5, [r7, #0]
  App_Context_Ptr->People_ContextPtr->nn_input_norm_scale=255.0f;
 800082c:	61f9      	str	r1, [r7, #28]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.h = AI_NETWORK_HEIGHT;
 800082e:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000832:	e9c3 2207 	strd	r2, r2, [r3, #28]
  Init_DataMemoryLayout(App_Context_Ptr);
 8000836:	f015 fbd9 	bl	8015fec <Init_DataMemoryLayout>
  /* Patch ai_utilities.c to prevent image corruption during PFC */
  uint8_t *pfc_dst_end = (uint8_t *) App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data + PFC_OUTPUT_BUFFER_SIZE;
 800083a:	f854 2008 	ldr.w	r2, [r4, r8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = pfc_dst_end - RESIZE_OUTPUT_BUFFER_SIZE;
 800083e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000840:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000844:	6493      	str	r3, [r2, #72]	; 0x48

}
 8000846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800084a:	bf00      	nop
 800084c:	3000ef7c 	.word	0x3000ef7c
 8000850:	3000ef9c 	.word	0x3000ef9c
 8000854:	3000f0e0 	.word	0x3000f0e0
 8000858:	3000f620 	.word	0x3000f620
 800085c:	08025770 	.word	0x08025770
 8000860:	3000fa08 	.word	0x3000fa08
 8000864:	3000efac 	.word	0x3000efac
 8000868:	437f0000 	.word	0x437f0000
 800086c:	30000020 	.word	0x30000020

08000870 <APP_GetNextReadyFrame>:
 * @param App_Context_Ptr pointer to application context
*/
void APP_GetNextReadyFrame(AppContext_TypeDef *App_Context_Ptr)
{
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000870:	f646 138c 	movw	r3, #27020	; 0x698c
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000874:	f646 119c 	movw	r1, #27036	; 0x699c
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000878:	58c2      	ldr	r2, [r0, r3]
{
 800087a:	b570      	push	{r4, r5, r6, lr}
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 800087c:	7803      	ldrb	r3, [r0, #0]
{
 800087e:	4606      	mov	r6, r0
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000880:	5840      	ldr	r0, [r0, r1]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000882:	2b02      	cmp	r3, #2
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8000884:	e9d2 4500 	ldrd	r4, r5, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000888:	d02a      	beq.n	80008e0 <APP_GetNextReadyFrame+0x70>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 800088a:	2b03      	cmp	r3, #3
 800088c:	d021      	beq.n	80008d2 <APP_GetNextReadyFrame+0x62>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 800088e:	7d13      	ldrb	r3, [r2, #20]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0fc      	beq.n	800088e <APP_GetNextReadyFrame+0x1e>
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, CAM_FRAME_BUFFER_SIZE, INVALIDATE);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800089a:	4620      	mov	r0, r4
 800089c:	f003 faec 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
  }

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80008a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80008a4:	f017 fdee 	bl	8018484 <UTIL_LCD_Clear>
  DISPLAY_CameraCaptureBuffer(App_Context_Ptr->Display_ContextPtr, (uint16_t *)cam_capture_buff);
 80008a8:	f646 1394 	movw	r3, #27028	; 0x6994
 80008ac:	4621      	mov	r1, r4
 80008ae:	58f0      	ldr	r0, [r6, r3]
 80008b0:	f000 fd80 	bl	80013b4 <DISPLAY_CameraCaptureBuffer>

  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80008b4:	1ce3      	adds	r3, r4, #3
 80008b6:	1b5b      	subs	r3, r3, r5
 80008b8:	2b06      	cmp	r3, #6
 80008ba:	d919      	bls.n	80008f0 <APP_GetNextReadyFrame+0x80>
 80008bc:	4623      	mov	r3, r4
 80008be:	462a      	mov	r2, r5
 80008c0:	f504 3016 	add.w	r0, r4, #153600	; 0x25800
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80008c4:	f853 1b04 	ldr.w	r1, [r3], #4
 80008c8:	4283      	cmp	r3, r0
 80008ca:	f842 1b04 	str.w	r1, [r2], #4
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80008ce:	d1f9      	bne.n	80008c4 <APP_GetNextReadyFrame+0x54>
  }

}
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 80008d2:	7903      	ldrb	r3, [r0, #4]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d1da      	bne.n	800088e <APP_GetNextReadyFrame+0x1e>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 80008d8:	4621      	mov	r1, r4
 80008da:	f002 fc09 	bl	80030f0 <TEST_GetNextDumpInput>
 80008de:	e7df      	b.n	80008a0 <APP_GetNextReadyFrame+0x30>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 80008e0:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1d2      	bne.n	800088e <APP_GetNextReadyFrame+0x1e>
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 80008e8:	4621      	mov	r1, r4
 80008ea:	f002 fc5f 	bl	80031ac <TEST_GetNextValidationInput>
 80008ee:	e7d7      	b.n	80008a0 <APP_GetNextReadyFrame+0x30>
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <APP_GetNextReadyFrame+0x98>)
 80008f2:	1e6a      	subs	r2, r5, #1
 80008f4:	1e63      	subs	r3, r4, #1
 80008f6:	4420      	add	r0, r4
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80008f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80008fc:	4283      	cmp	r3, r0
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80008fe:	f802 1f01 	strb.w	r1, [r2, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000902:	d1f9      	bne.n	80008f8 <APP_GetNextReadyFrame+0x88>
}
 8000904:	bd70      	pop	{r4, r5, r6, pc}
 8000906:	bf00      	nop
 8000908:	000257ff 	.word	0x000257ff

0800090c <APP_StartNewFrameAcquisition>:
/**
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
*/
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
 800090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 800090e:	7803      	ldrb	r3, [r0, #0]
{
 8000910:	4604      	mov	r4, r0
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000912:	2b01      	cmp	r3, #1
 8000914:	d00a      	beq.n	800092c <APP_StartNewFrameAcquisition+0x20>
 8000916:	2b04      	cmp	r3, #4
 8000918:	d008      	beq.n	800092c <APP_StartNewFrameAcquisition+0x20>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 800091a:	2b03      	cmp	r3, #3
 800091c:	d000      	beq.n	8000920 <APP_StartNewFrameAcquisition+0x14>
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
  //  __enable_irq();
  }
}
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8000920:	f646 139c 	movw	r3, #27036	; 0x699c
 8000924:	58c3      	ldr	r3, [r0, r3]
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d0f8      	beq.n	800091e <APP_StartNewFrameAcquisition+0x12>
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 800092c:	f646 168c 	movw	r6, #27020	; 0x698c
 8000930:	2500      	movs	r5, #0
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000932:	f646 1298 	movw	r2, #27032	; 0x6998
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000936:	59a3      	ldr	r3, [r4, r6]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000938:	58a7      	ldr	r7, [r4, r2]
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 800093a:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 800093c:	f008 fac6 	bl	8008ecc <HAL_GetTick>
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000940:	59a3      	ldr	r3, [r4, r6]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000942:	4602      	mov	r2, r0
    BSP_CAMERA_Resume(0);
 8000944:	4628      	mov	r0, r5
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000946:	61ba      	str	r2, [r7, #24]
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000948:	751d      	strb	r5, [r3, #20]
}
 800094a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    BSP_CAMERA_Resume(0);
 800094e:	f007 bae5 	b.w	8007f1c <BSP_CAMERA_Resume>
 8000952:	bf00      	nop

08000954 <APP_FramePreprocess>:
/**
 * @brief Run preprocessing stages on captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4604      	mov	r4, r0
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8000958:	f015 fb64 	bl	8016024 <Run_Preprocessing>
  
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->nn_input_buffer);
 800095c:	f646 12a0 	movw	r2, #27040	; 0x69a0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000960:	f646 139c 	movw	r3, #27036	; 0x699c
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
  TestRunCtxt_Ptr->src_width_size= AI_NETWORK_IN_1_WIDTH;
  TestRunCtxt_Ptr->src_height_size= AI_NETWORK_IN_1_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000964:	2104      	movs	r1, #4
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000966:	4e12      	ldr	r6, [pc, #72]	; (80009b0 <APP_FramePreprocess+0x5c>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->nn_input_buffer);
 8000968:	58a5      	ldr	r5, [r4, r2]
  TestRunCtxt_Ptr->src_width_size= AI_NETWORK_IN_1_WIDTH;
 800096a:	22f0      	movs	r2, #240	; 0xf0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 800096c:	58e0      	ldr	r0, [r4, r3]
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
  TestRunCtxt_Ptr->PerformCapture=1;
 800096e:	2301      	movs	r3, #1
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->nn_input_buffer);
 8000970:	686d      	ldr	r5, [r5, #4]
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000972:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000976:	490f      	ldr	r1, [pc, #60]	; (80009b4 <APP_FramePreprocess+0x60>)
  TestRunCtxt_Ptr->src_width_size= AI_NETWORK_IN_1_WIDTH;
 8000978:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
  TestRunCtxt_Ptr->src_height_size= AI_NETWORK_IN_1_HEIGHT;
 800097c:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
  TestRunCtxt_Ptr->PerformCapture=1;
 8000980:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8000984:	f880 3514 	strb.w	r3, [r0, #1300]	; 0x514
  TestRunCtxt_Ptr->rb_swap=1;
 8000988:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 800098c:	f8c0 64fc 	str.w	r6, [r0, #1276]	; 0x4fc
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->nn_input_buffer);
 8000990:	f8c0 54f8 	str.w	r5, [r0, #1272]	; 0x4f8
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000994:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);  
 8000998:	7821      	ldrb	r1, [r4, #0]
 800099a:	f002 fc77 	bl	800328c <TEST_Run>
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 800099e:	f646 1398 	movw	r3, #27032	; 0x6998
 80009a2:	58e4      	ldr	r4, [r4, r3]
 80009a4:	4620      	mov	r0, r4
 80009a6:	f003 f9a9 	bl	8003cfc <UTILS_GetTimeStamp>
 80009aa:	6120      	str	r0, [r4, #16]
}
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	bf00      	nop
 80009b0:	2400006c 	.word	0x2400006c
 80009b4:	0002a300 	.word	0x0002a300

080009b8 <APP_Postprocess>:
/**
 * @brief  Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 80009b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr) - App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 80009bc:	f646 1698 	movw	r6, #27032	; 0x6998
{
 80009c0:	4604      	mov	r4, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 80009c2:	f646 139c 	movw	r3, #27036	; 0x699c
{
 80009c6:	b093      	sub	sp, #76	; 0x4c
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr) - App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 80009c8:	5980      	ldr	r0, [r0, r6]
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 80009ca:	58e5      	ldr	r5, [r4, r3]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr) - App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 80009cc:	f003 f996 	bl	8003cfc <UTILS_GetTimeStamp>
 80009d0:	59a1      	ldr	r1, [r4, r6]
  
  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80009d2:	f646 128c 	movw	r2, #27020	; 0x698c
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr) - App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 80009d6:	690b      	ldr	r3, [r1, #16]
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80009d8:	58a2      	ldr	r2, [r4, r2]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr) - App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 80009da:	1ac0      	subs	r0, r0, r3
 80009dc:	6108      	str	r0, [r1, #16]
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80009de:	7d13      	ldrb	r3, [r2, #20]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0fc      	beq.n	80009de <APP_Postprocess+0x26>

  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 80009e4:	4608      	mov	r0, r1
  TestRunCtxt_Ptr->src_size=(AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer));
  
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80009e6:	f646 169c 	movw	r6, #27036	; 0x699c
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 80009ea:	f003 fa77 	bl	8003edc <UTILS_Compute_ExecutionTiming>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->output.pOutBuff);
 80009ee:	f646 12a0 	movw	r2, #27040	; 0x69a0
  TestRunCtxt_Ptr->src_width_size=0;
 80009f2:	2300      	movs	r3, #0
  TestRunCtxt_Ptr->src_size=(AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer));
 80009f4:	f44f 7134 	mov.w	r1, #720	; 0x2d0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->output.pOutBuff);
 80009f8:	58a2      	ldr	r2, [r4, r2]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 80009fa:	4fa8      	ldr	r7, [pc, #672]	; (8000c9c <APP_Postprocess+0x2e4>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->output.pOutBuff);
 80009fc:	6d90      	ldr	r0, [r2, #88]	; 0x58
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 80009fe:	2202      	movs	r2, #2
  TestRunCtxt_Ptr->src_width_size=0;
 8000a00:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->People_ContextPtr->output.pOutBuff);
 8000a04:	f8c5 04f8 	str.w	r0, [r5, #1272]	; 0x4f8
  TestRunCtxt_Ptr->src_height_size=0;
 8000a08:	f8c5 3504 	str.w	r3, [r5, #1284]	; 0x504
  TestRunCtxt_Ptr->PerformCapture=0;
 8000a0c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
  TestRunCtxt_Ptr->rb_swap=0;
 8000a10:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8000a14:	f885 2514 	strb.w	r2, [r5, #1300]	; 0x514
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8000a18:	f8c5 74fc 	str.w	r7, [r5, #1276]	; 0x4fc
  TestRunCtxt_Ptr->src_size=(AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer));
 8000a1c:	f8c5 150c 	str.w	r1, [r5, #1292]	; 0x50c
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8000a20:	59a0      	ldr	r0, [r4, r6]
 8000a22:	7821      	ldrb	r1, [r4, #0]
 8000a24:	f002 fc32 	bl	800328c <TEST_Run>


  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8000a28:	7823      	ldrb	r3, [r4, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d005      	beq.n	8000a3a <APP_Postprocess+0x82>

      BSP_LED_Toggle(LED_BLUE);
    }
    else
    {
      TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 8000a2e:	59a0      	ldr	r0, [r4, r6]
 8000a30:	f002 febe 	bl	80037b0 <TEST_PostProcess>
    }
}
 8000a34:	b013      	add	sp, #76	; 0x4c
 8000a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  occurrence_number--;
 8000a3a:	4a99      	ldr	r2, [pc, #612]	; (8000ca0 <APP_Postprocess+0x2e8>)
 8000a3c:	6813      	ldr	r3, [r2, #0]
  if (occurrence_number == 0)
 8000a3e:	1e5d      	subs	r5, r3, #1
 8000a40:	d006      	beq.n	8000a50 <APP_Postprocess+0x98>
  occurrence_number--;
 8000a42:	6015      	str	r5, [r2, #0]
      BSP_LED_Toggle(LED_BLUE);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f006 f9c7 	bl	8006dd8 <BSP_LED_Toggle>
}
 8000a4a:	b013      	add	sp, #76	; 0x4c
 8000a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8000a50:	4628      	mov	r0, r5
 8000a52:	f006 fa1b 	bl	8006e8c <BSP_PB_GetState>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	f040 8092 	bne.w	8000b80 <APP_Postprocess+0x1c8>
 8000a5c:	46e8      	mov	r8, sp
    BSP_LED_Off(LED_GREEN);
 8000a5e:	2000      	movs	r0, #0
      pOutBuff = App_Context_Ptr->People_ContextPtr->output.pOutBuff;
 8000a60:	f646 19a0 	movw	r9, #27040	; 0x69a0
    BSP_LED_Off(LED_GREEN);
 8000a64:	f006 f9a8 	bl	8006db8 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f006 f9a5 	bl	8006db8 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f006 f9a2 	bl	8006db8 <BSP_LED_Off>
    BSP_LED_On(LED_RED);
 8000a74:	2002      	movs	r0, #2
 8000a76:	f006 f98f 	bl	8006d98 <BSP_LED_On>
      pOutBuff = App_Context_Ptr->People_ContextPtr->output.pOutBuff;
 8000a7a:	f854 2009 	ldr.w	r2, [r4, r9]
 8000a7e:	e9d2 5316 	ldrd	r5, r3, [r2, #88]	; 0x58
      for (int32_t i = 0; i < App_Context_Ptr->People_ContextPtr->output.nb_detect; ++i)
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	dd08      	ble.n	8000a98 <APP_Postprocess+0xe0>
 8000a86:	44a1      	add	r9, r4
 8000a88:	2600      	movs	r6, #0
        if (pOutBuff->class_index == class_idx)
 8000a8a:	696f      	ldr	r7, [r5, #20]
 8000a8c:	2f00      	cmp	r7, #0
 8000a8e:	d05e      	beq.n	8000b4e <APP_Postprocess+0x196>
      for (int32_t i = 0; i < App_Context_Ptr->People_ContextPtr->output.nb_detect; ++i)
 8000a90:	3601      	adds	r6, #1
        pOutBuff++;
 8000a92:	3518      	adds	r5, #24
      for (int32_t i = 0; i < App_Context_Ptr->People_ContextPtr->output.nb_detect; ++i)
 8000a94:	429e      	cmp	r6, r3
 8000a96:	dbf8      	blt.n	8000a8a <APP_Postprocess+0xd2>
    hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a98:	2500      	movs	r5, #0
 8000a9a:	4982      	ldr	r1, [pc, #520]	; (8000ca4 <APP_Postprocess+0x2ec>)
    if (App_Context_Ptr->People_ContextPtr->output.nb_detect == 0)
 8000a9c:	f646 17a0 	movw	r7, #27040	; 0x69a0
    BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8000aa0:	4b81      	ldr	r3, [pc, #516]	; (8000ca8 <APP_Postprocess+0x2f0>)
    hlcd_dma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000aa2:	658d      	str	r5, [r1, #88]	; 0x58
    BSP_LCD_DrawBitmap(0, 640, 15, (uint8_t *)stlogo);
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000aac:	f007 fbe6 	bl	800827c <BSP_LCD_DrawBitmap>
    if (App_Context_Ptr->People_ContextPtr->output.nb_detect == 0)
 8000ab0:	59e3      	ldr	r3, [r4, r7]
 8000ab2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	f000 80e1 	beq.w	8000c7c <APP_Postprocess+0x2c4>
    else if (App_Context_Ptr->People_ContextPtr->output.nb_detect == 1)
 8000aba:	2e01      	cmp	r6, #1
      BSP_LCD_DrawBitmap(0, 680, 200, (uint8_t *)busy_bmp);
 8000abc:	4628      	mov	r0, r5
 8000abe:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <APP_Postprocess+0x2f4>)
 8000ac0:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8000ac4:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    else if (App_Context_Ptr->People_ContextPtr->output.nb_detect == 1)
 8000ac8:	f000 80af 	beq.w	8000c2a <APP_Postprocess+0x272>
      BSP_LCD_DrawBitmap(0, 680, 200, (uint8_t *)busy_bmp);
 8000acc:	f007 fbd6 	bl	800827c <BSP_LCD_DrawBitmap>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8000ad0:	4877      	ldr	r0, [pc, #476]	; (8000cb0 <APP_Postprocess+0x2f8>)
 8000ad2:	f017 fc67 	bl	80183a4 <UTIL_LCD_SetTextColor>
      sprintf(msg, "%ld persons", App_Context_Ptr->People_ContextPtr->output.nb_detect);
 8000ad6:	59e3      	ldr	r3, [r4, r7]
 8000ad8:	4976      	ldr	r1, [pc, #472]	; (8000cb4 <APP_Postprocess+0x2fc>)
 8000ada:	4640      	mov	r0, r8
 8000adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ade:	f022 fa57 	bl	8022f90 <siprintf>
      UTIL_LCD_DisplayStringAt(320, LINE(13), (uint8_t *)msg, CENTER_MODE);
 8000ae2:	f017 fc77 	bl	80183d4 <UTIL_LCD_GetFont>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	4642      	mov	r2, r8
 8000aea:	88c1      	ldrh	r1, [r0, #6]
 8000aec:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000af0:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8000af4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8000af8:	f017 fdac 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f017 fc50 	bl	80183a4 <UTIL_LCD_SetTextColor>
    sprintf(msg, "%.1f fps", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 8000b04:	f646 1398 	movw	r3, #27032	; 0x6998
 8000b08:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8000cb8 <APP_Postprocess+0x300>
 8000b0c:	4640      	mov	r0, r8
 8000b0e:	58e3      	ldr	r3, [r4, r3]
 8000b10:	496a      	ldr	r1, [pc, #424]	; (8000cbc <APP_Postprocess+0x304>)
 8000b12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000b22:	ec53 2b17 	vmov	r2, r3, d7
 8000b26:	f022 fa33 	bl	8022f90 <siprintf>
    UTIL_LCD_DisplayStringAt(320, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 8000b2a:	f017 fc53 	bl	80183d4 <UTIL_LCD_GetFont>
 8000b2e:	88c1      	ldrh	r1, [r0, #6]
 8000b30:	2301      	movs	r3, #1
 8000b32:	4642      	mov	r2, r8
 8000b34:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000b38:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000b3c:	4099      	lsls	r1, r3
 8000b3e:	f017 fd89 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 8000b42:	f646 1394 	movw	r3, #27028	; 0x6994
 8000b46:	58e0      	ldr	r0, [r4, r3]
 8000b48:	f000 fc12 	bl	8001370 <DISPLAY_Refresh>
 8000b4c:	e77a      	b.n	8000a44 <APP_Postprocess+0x8c>
          DISPLAY_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height);
 8000b4e:	462b      	mov	r3, r5
 8000b50:	edd5 1a03 	vldr	s3, [r5, #12]
 8000b54:	ed95 1a02 	vldr	s2, [r5, #8]
      for (int32_t i = 0; i < App_Context_Ptr->People_ContextPtr->output.nb_detect; ++i)
 8000b58:	3601      	adds	r6, #1
          DISPLAY_DrawBBox(pOutBuff->x_center, pOutBuff->y_center, pOutBuff->width, pOutBuff->height);
 8000b5a:	edd5 0a01 	vldr	s1, [r5, #4]
 8000b5e:	3518      	adds	r5, #24
 8000b60:	ed93 0a00 	vldr	s0, [r3]
 8000b64:	f000 fbc6 	bl	80012f4 <DISPLAY_DrawBBox>
          BSP_LED_Off(LED_RED);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f006 f925 	bl	8006db8 <BSP_LED_Off>
          BSP_LED_On(LED_GREEN);
 8000b6e:	4638      	mov	r0, r7
 8000b70:	f006 f912 	bl	8006d98 <BSP_LED_On>
 8000b74:	f8d9 3000 	ldr.w	r3, [r9]
 8000b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      for (int32_t i = 0; i < App_Context_Ptr->People_ContextPtr->output.nb_detect; ++i)
 8000b7a:	42b3      	cmp	r3, r6
 8000b7c:	dc85      	bgt.n	8000a8a <APP_Postprocess+0xd2>
 8000b7e:	e78b      	b.n	8000a98 <APP_Postprocess+0xe0>
      display_mode  = (display_mode + 1) % 4;
 8000b80:	4a4f      	ldr	r2, [pc, #316]	; (8000cc0 <APP_Postprocess+0x308>)
 8000b82:	6813      	ldr	r3, [r2, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	f003 0603 	and.w	r6, r3, #3
      switch (display_mode)
 8000b8a:	2e02      	cmp	r6, #2
      display_mode  = (display_mode + 1) % 4;
 8000b8c:	6016      	str	r6, [r2, #0]
      switch (display_mode)
 8000b8e:	d068      	beq.n	8000c62 <APP_Postprocess+0x2aa>
 8000b90:	2e03      	cmp	r6, #3
 8000b92:	d05c      	beq.n	8000c4e <APP_Postprocess+0x296>
 8000b94:	2e01      	cmp	r6, #1
 8000b96:	d052      	beq.n	8000c3e <APP_Postprocess+0x286>
        sprintf(msg, "Normal CAMERA mode");
 8000b98:	4f4a      	ldr	r7, [pc, #296]	; (8000cc4 <APP_Postprocess+0x30c>)
 8000b9a:	46e8      	mov	r8, sp
        mirror_flip = CAMERA_MIRRORFLIP_NONE;
 8000b9c:	462e      	mov	r6, r5
        sprintf(msg, "Normal CAMERA mode");
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000ba2:	683f      	ldr	r7, [r7, #0]
 8000ba4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000baa:	f825 7b02 	strh.w	r7, [r5], #2
 8000bae:	f885 c000 	strb.w	ip, [r5]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000bb2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
      sprintf(msg, "Please release button");
 8000bb6:	4645      	mov	r5, r8
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000bb8:	f017 fc64 	bl	8018484 <UTIL_LCD_Clear>
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 8000bbc:	f017 fc0a 	bl	80183d4 <UTIL_LCD_GetFont>
 8000bc0:	88c1      	ldrh	r1, [r0, #6]
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8000bcc:	f017 fd42 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      CAMERA_Set_MirrorFlip(App_Context_Ptr->Camera_ContextPtr, mirror_flip);
 8000bd0:	f646 138c 	movw	r3, #27020	; 0x698c
 8000bd4:	4631      	mov	r1, r6
      sprintf(msg, "Please release button");
 8000bd6:	4e3c      	ldr	r6, [pc, #240]	; (8000cc8 <APP_Postprocess+0x310>)
      CAMERA_Set_MirrorFlip(App_Context_Ptr->Camera_ContextPtr, mirror_flip);
 8000bd8:	58e0      	ldr	r0, [r4, r3]
 8000bda:	f000 f9b7 	bl	8000f4c <CAMERA_Set_MirrorFlip>
      sprintf(msg, "Please release button");
 8000bde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8000be6:	f845 0b04 	str.w	r0, [r5], #4
 8000bea:	8029      	strh	r1, [r5, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 8000bec:	f017 fbf2 	bl	80183d4 <UTIL_LCD_GetFont>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	88c9      	ldrh	r1, [r1, #6]
 8000bf8:	4642      	mov	r2, r8
 8000bfa:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000bfe:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8000c02:	f017 fd27 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 8000c06:	f646 1394 	movw	r3, #27028	; 0x6994
 8000c0a:	58e0      	ldr	r0, [r4, r3]
 8000c0c:	f000 fbb0 	bl	8001370 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f006 f93b 	bl	8006e8c <BSP_PB_GetState>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d1fa      	bne.n	8000c10 <APP_Postprocess+0x258>
      HAL_Delay(200);
 8000c1a:	20c8      	movs	r0, #200	; 0xc8
 8000c1c:	f008 f95c 	bl	8008ed8 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000c20:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c24:	f017 fc2e 	bl	8018484 <UTIL_LCD_Clear>
 8000c28:	e719      	b.n	8000a5e <APP_Postprocess+0xa6>
      BSP_LCD_DrawBitmap(0, 680, 200, (uint8_t *)busy_bmp);
 8000c2a:	f007 fb27 	bl	800827c <BSP_LCD_DrawBitmap>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <APP_Postprocess+0x2f8>)
 8000c30:	f017 fbb8 	bl	80183a4 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(320, LINE(13), (uint8_t *)"1 person", CENTER_MODE);
 8000c34:	f017 fbce 	bl	80183d4 <UTIL_LCD_GetFont>
 8000c38:	4633      	mov	r3, r6
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <APP_Postprocess+0x314>)
 8000c3c:	e755      	b.n	8000aea <APP_Postprocess+0x132>
        sprintf(msg, "Flip CAMERA mode");
 8000c3e:	4f24      	ldr	r7, [pc, #144]	; (8000cd0 <APP_Postprocess+0x318>)
 8000c40:	46e8      	mov	r8, sp
 8000c42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000c44:	4645      	mov	r5, r8
 8000c46:	683f      	ldr	r7, [r7, #0]
 8000c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4a:	702f      	strb	r7, [r5, #0]
        break;
 8000c4c:	e7b1      	b.n	8000bb2 <APP_Postprocess+0x1fa>
        sprintf(msg, "Mirror and Flip CAMERA mode");
 8000c4e:	46e8      	mov	r8, sp
 8000c50:	4f20      	ldr	r7, [pc, #128]	; (8000cd4 <APP_Postprocess+0x31c>)
 8000c52:	4645      	mov	r5, r8
 8000c54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c58:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000c5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        break;
 8000c60:	e7a7      	b.n	8000bb2 <APP_Postprocess+0x1fa>
        sprintf(msg, "Mirror CAMERA mode");
 8000c62:	4d1d      	ldr	r5, [pc, #116]	; (8000cd8 <APP_Postprocess+0x320>)
 8000c64:	46e8      	mov	r8, sp
 8000c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c68:	682f      	ldr	r7, [r5, #0]
 8000c6a:	4645      	mov	r5, r8
 8000c6c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	f825 7b02 	strh.w	r7, [r5], #2
 8000c76:	f885 c000 	strb.w	ip, [r5]
        break;
 8000c7a:	e79a      	b.n	8000bb2 <APP_Postprocess+0x1fa>
      BSP_LCD_DrawBitmap(0, 680, 200, (uint8_t *)free_bmp);
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <APP_Postprocess+0x324>)
 8000c7e:	22c8      	movs	r2, #200	; 0xc8
 8000c80:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8000c84:	4630      	mov	r0, r6
 8000c86:	f007 faf9 	bl	800827c <BSP_LCD_DrawBitmap>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8000c8a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000c8e:	f017 fb89 	bl	80183a4 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(320, LINE(13), (uint8_t *)"Vacant", CENTER_MODE);
 8000c92:	f017 fb9f 	bl	80183d4 <UTIL_LCD_GetFont>
 8000c96:	2301      	movs	r3, #1
 8000c98:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <APP_Postprocess+0x328>)
 8000c9a:	e726      	b.n	8000aea <APP_Postprocess+0x132>
 8000c9c:	2400008c 	.word	0x2400008c
 8000ca0:	24000000 	.word	0x24000000
 8000ca4:	3000f814 	.word	0x3000f814
 8000ca8:	081000a8 	.word	0x081000a8
 8000cac:	08025830 	.word	0x08025830
 8000cb0:	ffff0000 	.word	0xffff0000
 8000cb4:	08025818 	.word	0x08025818
 8000cb8:	447a0000 	.word	0x447a0000
 8000cbc:	08025824 	.word	0x08025824
 8000cc0:	3000001c 	.word	0x3000001c
 8000cc4:	080257d8 	.word	0x080257d8
 8000cc8:	080257ec 	.word	0x080257ec
 8000ccc:	0802580c 	.word	0x0802580c
 8000cd0:	08025794 	.word	0x08025794
 8000cd4:	080257bc 	.word	0x080257bc
 8000cd8:	080257a8 	.word	0x080257a8
 8000cdc:	08028abc 	.word	0x08028abc
 8000ce0:	08025804 	.word	0x08025804

08000ce4 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8000ce4:	6802      	ldr	r2, [r0, #0]
 8000ce6:	68d3      	ldr	r3, [r2, #12]
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 8000cee:	f003 b909 	b.w	8003f04 <Error_Handler>
 8000cf2:	bf00      	nop

08000cf4 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000cf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8000cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cf8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000cfa:	2a02      	cmp	r2, #2
 8000cfc:	d006      	beq.n	8000d0c <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8000d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d0a:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 8000d0c:	f003 b8fa 	b.w	8003f04 <Error_Handler>

08000d10 <DCMI_DMALineXferCplt>:
{
 8000d10:	b530      	push	{r4, r5, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d12:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 8000d14:	b083      	sub	sp, #12
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8000d16:	2501      	movs	r5, #1
 8000d18:	4909      	ldr	r1, [pc, #36]	; (8000d40 <DCMI_DMALineXferCplt+0x30>)
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8000d1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 8000d1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8000d1e:	009b      	lsls	r3, r3, #2
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 8000d20:	6ba4      	ldr	r4, [r4, #56]	; 0x38
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <DCMI_DMALineXferCplt+0x34>)
 8000d24:	fb03 2204 	mla	r2, r3, r4, r2
 8000d28:	9500      	str	r5, [sp, #0]
 8000d2a:	f00b fe13 	bl	800c954 <HAL_MDMA_Start_IT>
 8000d2e:	b908      	cbnz	r0, 8000d34 <DCMI_DMALineXferCplt+0x24>
}
 8000d30:	b003      	add	sp, #12
 8000d32:	bd30      	pop	{r4, r5, pc}
 8000d34:	b003      	add	sp, #12
 8000d36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Error_Handler();
 8000d3a:	f003 b8e3 	b.w	8003f04 <Error_Handler>
 8000d3e:	bf00      	nop
 8000d40:	3000fa80 	.word	0x3000fa80
 8000d44:	3000ef10 	.word	0x3000ef10

08000d48 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 8000d48:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 8000d4c:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8000d4e:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 8000d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d58:	3201      	adds	r2, #1
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8000d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	d000      	beq.n	8000d64 <DCMI_MDMAFrameXferCplt+0x1c>
}
 8000d62:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68d1      	ldr	r1, [r2, #12]
 8000d68:	f041 0101 	orr.w	r1, r1, #1
 8000d6c:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000d6e:	6812      	ldr	r2, [r2, #0]
 8000d70:	f012 0202 	ands.w	r2, r2, #2
 8000d74:	d003      	beq.n	8000d7e <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8000d7c:	4770      	bx	lr
      hdcmi->XferCount = 0;
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	3000f6b0 	.word	0x3000f6b0

08000d88 <CAMERA_Init>:
  Camera_Context_Ptr->new_frame_ready=0;
 8000d88:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000d8a:	4a64      	ldr	r2, [pc, #400]	; (8000f1c <CAMERA_Init+0x194>)
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000d8c:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
{
 8000d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Camera_Context_Ptr->vsync_it=0;
 8000d94:	6083      	str	r3, [r0, #8]
{
 8000d96:	b082      	sub	sp, #8
  Camera_Context_Ptr->new_frame_ready=0;
 8000d98:	7503      	strb	r3, [r0, #20]
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8000d9a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  hmdma.Instance = MDMA_Channel0;
 8000d9e:	4c60      	ldr	r4, [pc, #384]	; (8000f20 <CAMERA_Init+0x198>)
{
 8000da0:	4606      	mov	r6, r0
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8000da2:	f240 2702 	movw	r7, #514	; 0x202
  Camera_Context_Ptr->Tvsync_evt=0;
 8000da6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000daa:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000dae:	f640 0008 	movw	r0, #2056	; 0x808
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000db2:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000db4:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8000db8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.SourceBlockAddressOffset = 0;
 8000dba:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000dbc:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000dc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000dc4:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.DestBlockAddressOffset   = 0;
 8000dc8:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000dca:	f002 0301 	and.w	r3, r2, #1
  hmdma.Instance = MDMA_Channel0;
 8000dce:	4a55      	ldr	r2, [pc, #340]	; (8000f24 <CAMERA_Init+0x19c>)
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8000dd0:	6065      	str	r5, [r4, #4]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000dd2:	2520      	movs	r5, #32
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	9b01      	ldr	r3, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000dd8:	2380      	movs	r3, #128	; 0x80
  hmdma.Instance = MDMA_Channel0;
 8000dda:	6022      	str	r2, [r4, #0]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8000ddc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000de0:	f8c4 c008 	str.w	ip, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000de4:	61e5      	str	r5, [r4, #28]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000de6:	6261      	str	r1, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8000de8:	6322      	str	r2, [r4, #48]	; 0x30
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000dea:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000dec:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 8000dee:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000df0:	e9c4 7005 	strd	r7, r0, [r4, #20]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8000df4:	4620      	mov	r0, r4
 8000df6:	f00b fd33 	bl	800c860 <HAL_MDMA_Init>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	f040 8085 	bne.w	8000f0a <CAMERA_Init+0x182>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	210f      	movs	r1, #15
 8000e04:	207a      	movs	r0, #122	; 0x7a
 8000e06:	f008 f89b 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e0a:	207a      	movs	r0, #122	; 0x7a
 8000e0c:	f008 f8d2 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f007 f8ff 	bl	8008014 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 8000e16:	20c8      	movs	r0, #200	; 0xc8
 8000e18:	f008 f85e 	bl	8008ed8 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4610      	mov	r0, r2
 8000e22:	f006 fe35 	bl	8007a90 <BSP_CAMERA_Init>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d16c      	bne.n	8000f04 <CAMERA_Init+0x17c>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <CAMERA_Init+0x1a0>)
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 8000e2c:	f245 6140 	movw	r1, #22080	; 0x5640
 8000e30:	483e      	ldr	r0, [pc, #248]	; (8000f2c <CAMERA_Init+0x1a4>)
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e38:	6013      	str	r3, [r2, #0]
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 8000e40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e44:	6013      	str	r3, [r2, #0]
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 8000e46:	6803      	ldr	r3, [r0, #0]
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d04b      	beq.n	8000ee4 <CAMERA_Init+0x15c>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 8000e4c:	69f1      	ldr	r1, [r6, #28]
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f007 f8bc 	bl	8007fcc <BSP_CAMERA_SetMirrorFlip>
 8000e54:	4607      	mov	r7, r0
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d143      	bne.n	8000ee2 <CAMERA_Init+0x15a>
  __HAL_LOCK(hdcmi);
 8000e5a:	4d35      	ldr	r5, [pc, #212]	; (8000f30 <CAMERA_Init+0x1a8>)
  HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f008 f83b 	bl	8008ed8 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 8000e62:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d056      	beq.n	8000f18 <CAMERA_Init+0x190>
  __HAL_DCMI_ENABLE(hdcmi);
 8000e6a:	682b      	ldr	r3, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000e6c:	2202      	movs	r2, #2
  __HAL_LOCK(hdcmi);
 8000e6e:	f04f 0801 	mov.w	r8, #1
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 8000e72:	6836      	ldr	r6, [r6, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000e74:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8000e78:	4619      	mov	r1, r3
  __HAL_LOCK(hdcmi);
 8000e7a:	f885 8034 	strb.w	r8, [r5, #52]	; 0x34
  hdcmi->XferSize = line_size / 4U;
 8000e7e:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
  __HAL_DCMI_ENABLE(hdcmi);
 8000e82:	681a      	ldr	r2, [r3, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8000e84:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_ENABLE(hdcmi);
 8000e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e8a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	f022 0202 	bic.w	r2, r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8000e94:	681a      	ldr	r2, [r3, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <CAMERA_Init+0x1ac>)
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8000e98:	f841 2b28 	str.w	r2, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8000e9c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8000e9e:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <CAMERA_Init+0x1b0>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000ea0:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <CAMERA_Init+0x1b4>)
  hdcmi->XferCount = 0;
 8000ea2:	63af      	str	r7, [r5, #56]	; 0x38
  hdcmi->pBuffPtr = (uint32_t) pData;
 8000ea4:	646e      	str	r6, [r5, #68]	; 0x44
  hdcmi->XferSize = line_size / 4U;
 8000ea6:	f8c5 c03c 	str.w	ip, [r5, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8000eaa:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8000eae:	4e24      	ldr	r6, [pc, #144]	; (8000f40 <CAMERA_Init+0x1b8>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000eb0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8000eb2:	6507      	str	r7, [r0, #80]	; 0x50
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8000eb4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8000eb6:	6462      	str	r2, [r4, #68]	; 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <CAMERA_Init+0x1bc>)
  hdcmi->XferTransferNumber = num_lines;
 8000eba:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8000ebe:	6566      	str	r6, [r4, #84]	; 0x54
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8000ec0:	f008 ff2a 	bl	8009d18 <HAL_DMA_Start_IT>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	bb18      	cbnz	r0, 8000f10 <CAMERA_Init+0x188>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8000ec8:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8000eca:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8000ecc:	680a      	ldr	r2, [r1, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8000ed4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  HAL_Delay(200);
 8000ed8:	f007 fffe 	bl	8008ed8 <HAL_Delay>
}
 8000edc:	b002      	add	sp, #8
 8000ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(1);
 8000ee2:	e7fe      	b.n	8000ee2 <CAMERA_Init+0x15a>
    OV5640_Object_t *pObj = Camera_CompObj;
 8000ee4:	4918      	ldr	r1, [pc, #96]	; (8000f48 <CAMERA_Init+0x1c0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8000ee6:	25c0      	movs	r5, #192	; 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f10d 0203 	add.w	r2, sp, #3
    OV5640_Object_t *pObj = Camera_CompObj;
 8000eee:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8000ef0:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8000ef4:	f88d 5003 	strb.w	r5, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8000ef8:	3018      	adds	r0, #24
 8000efa:	f005 fa7b 	bl	80063f4 <ov5640_write_reg>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d0a4      	beq.n	8000e4c <CAMERA_Init+0xc4>
      while(1);
 8000f02:	e7fe      	b.n	8000f02 <CAMERA_Init+0x17a>
    Error_Handler();
 8000f04:	f002 fffe 	bl	8003f04 <Error_Handler>
 8000f08:	e78f      	b.n	8000e2a <CAMERA_Init+0xa2>
    Error_Handler();
 8000f0a:	f002 fffb 	bl	8003f04 <Error_Handler>
 8000f0e:	e777      	b.n	8000e00 <CAMERA_Init+0x78>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	64eb      	str	r3, [r5, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 8000f14:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
    while(1);
 8000f18:	e7fe      	b.n	8000f18 <CAMERA_Init+0x190>
 8000f1a:	bf00      	nop
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	3000ef10 	.word	0x3000ef10
 8000f24:	52000040 	.word	0x52000040
 8000f28:	40020458 	.word	0x40020458
 8000f2c:	3000f700 	.word	0x3000f700
 8000f30:	3000f6b0 	.word	0x3000f6b0
 8000f34:	08000d11 	.word	0x08000d11
 8000f38:	08000d49 	.word	0x08000d49
 8000f3c:	08000cf5 	.word	0x08000cf5
 8000f40:	08000ce5 	.word	0x08000ce5
 8000f44:	3000fa80 	.word	0x3000fa80
 8000f48:	300080d4 	.word	0x300080d4

08000f4c <CAMERA_Set_MirrorFlip>:
{
 8000f4c:	b508      	push	{r3, lr}
 8000f4e:	4603      	mov	r3, r0
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 8000f50:	2000      	movs	r0, #0
  Camera_Context_Ptr->mirror_flip = MirrorFlip;
 8000f52:	61d9      	str	r1, [r3, #28]
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 8000f54:	f007 f83a 	bl	8007fcc <BSP_CAMERA_SetMirrorFlip>
 8000f58:	b900      	cbnz	r0, 8000f5c <CAMERA_Set_MirrorFlip+0x10>
}
 8000f5a:	bd08      	pop	{r3, pc}
    while(1);
 8000f5c:	e7fe      	b.n	8000f5c <CAMERA_Set_MirrorFlip+0x10>
 8000f5e:	bf00      	nop

08000f60 <CAMERA_Enable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 8000f60:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <CAMERA_Enable_TestBar_Mode+0x58>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <CAMERA_Enable_TestBar_Mode+0x5c>)
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	2b01      	cmp	r3, #1
{ 
 8000f6a:	b510      	push	{r4, lr}
 8000f6c:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8000f6e:	d906      	bls.n	8000f7e <CAMERA_Enable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <CAMERA_Enable_TestBar_Mode+0x60>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 8000f72:	2101      	movs	r1, #1
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f005 f9e7 	bl	8006348 <OV5640_ColorbarModeConfig>
 8000f7a:	b1b8      	cbz	r0, 8000fac <CAMERA_Enable_TestBar_Mode+0x4c>
      while(1);
 8000f7c:	e7fe      	b.n	8000f7c <CAMERA_Enable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <CAMERA_Enable_TestBar_Mode+0x60>)
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000f80:	2301      	movs	r3, #1
 8000f82:	218d      	movs	r1, #141	; 0x8d
 8000f84:	6814      	ldr	r4, [r2, #0]
 8000f86:	f10d 0207 	add.w	r2, sp, #7
 8000f8a:	3418      	adds	r4, #24
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f005 fec5 	bl	8006d1c <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8000f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000f96:	4620      	mov	r0, r4
 8000f98:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8000f9c:	f043 0410 	orr.w	r4, r3, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000fa0:	218d      	movs	r1, #141	; 0x8d
 8000fa2:	2301      	movs	r3, #1
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8000fa4:	f88d 4007 	strb.w	r4, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000fa8:	f005 fec0 	bl	8006d2c <ov9655_write_reg>
  HAL_Delay(500);
 8000fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb0:	f007 ff92 	bl	8008ed8 <HAL_Delay>
}
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd10      	pop	{r4, pc}
 8000fb8:	3000f700 	.word	0x3000f700
 8000fbc:	ffff69aa 	.word	0xffff69aa
 8000fc0:	300080d4 	.word	0x300080d4

08000fc4 <CAMERA_Disable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 8000fc4:	4a18      	ldr	r2, [pc, #96]	; (8001028 <CAMERA_Disable_TestBar_Mode+0x64>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <CAMERA_Disable_TestBar_Mode+0x68>)
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	2b01      	cmp	r3, #1
{ 
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8000fd2:	d906      	bls.n	8000fe2 <CAMERA_Disable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <CAMERA_Disable_TestBar_Mode+0x6c>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_DISABLE) != OV5640_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	f005 f9b5 	bl	8006348 <OV5640_ColorbarModeConfig>
 8000fde:	b1e0      	cbz	r0, 800101a <CAMERA_Disable_TestBar_Mode+0x56>
      while(1);
 8000fe0:	e7fe      	b.n	8000fe0 <CAMERA_Disable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <CAMERA_Disable_TestBar_Mode+0x6c>)
    tmp=0x00;
 8000fe4:	2100      	movs	r1, #0
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000fe6:	2301      	movs	r3, #1
    OV9655_Object_t *pObj = Camera_CompObj;
 8000fe8:	6814      	ldr	r4, [r2, #0]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000fea:	f10d 0207 	add.w	r2, sp, #7
    tmp=0x00;
 8000fee:	f88d 1007 	strb.w	r1, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8000ff2:	218d      	movs	r1, #141	; 0x8d
 8000ff4:	3418      	adds	r4, #24
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f005 fe98 	bl	8006d2c <ov9655_write_reg>
    HAL_Delay(300);
 8000ffc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001000:	f007 ff6a 	bl	8008ed8 <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL3, &tmp, 1);
 8001004:	4620      	mov	r0, r4
 8001006:	f10d 0207 	add.w	r2, sp, #7
 800100a:	2301      	movs	r3, #1
 800100c:	210c      	movs	r1, #12
 800100e:	f005 fe8d 	bl	8006d2c <ov9655_write_reg>
    HAL_Delay(300);
 8001012:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001016:	f007 ff5f 	bl	8008ed8 <HAL_Delay>
  HAL_Delay(500);
 800101a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101e:	f007 ff5b 	bl	8008ed8 <HAL_Delay>
}
 8001022:	b002      	add	sp, #8
 8001024:	bd10      	pop	{r4, pc}
 8001026:	bf00      	nop
 8001028:	3000f700 	.word	0x3000f700
 800102c:	ffff69aa 	.word	0xffff69aa
 8001030:	300080d4 	.word	0x300080d4

08001034 <BSP_CAMERA_FrameEventCallback>:
{
 8001034:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001036:	4c0d      	ldr	r4, [pc, #52]	; (800106c <BSP_CAMERA_FrameEventCallback+0x38>)
 8001038:	69a2      	ldr	r2, [r4, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103a:	b672      	cpsid	i
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 800103c:	f646 1398 	movw	r3, #27032	; 0x6998
  CameraContext.new_frame_ready = 1;
 8001040:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 8001042:	58d6      	ldr	r6, [r2, r3]
  CameraContext.new_frame_ready = 1;
 8001044:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 8001046:	f007 ff41 	bl	8008ecc <HAL_GetTick>
 800104a:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 800104c:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 800104e:	f007 ff3d 	bl	8008ecc <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 8001052:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 8001054:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 8001056:	1ac3      	subs	r3, r0, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d801      	bhi.n	8001060 <BSP_CAMERA_FrameEventCallback+0x2c>
    CameraContext.vsync_it =2;
 800105c:	2302      	movs	r3, #2
 800105e:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 8001060:	2000      	movs	r0, #0
 8001062:	f006 ff4b 	bl	8007efc <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 8001066:	b662      	cpsie	i
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}
 800106a:	bf00      	nop
 800106c:	3000ef7c 	.word	0x3000ef7c

08001070 <BSP_CAMERA_VsyncEventCallback>:
{ 
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001072:	4c1b      	ldr	r4, [pc, #108]	; (80010e0 <BSP_CAMERA_VsyncEventCallback+0x70>)
 8001074:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8001076:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001078:	f007 ff28 	bl	8008ecc <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 800107c:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 800107e:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001080:	b1ab      	cbz	r3, 80010ae <BSP_CAMERA_VsyncEventCallback+0x3e>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001082:	2b01      	cmp	r3, #1
 8001084:	d007      	beq.n	8001096 <BSP_CAMERA_VsyncEventCallback+0x26>
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	1ac0      	subs	r0, r0, r3
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800108a:	2802      	cmp	r0, #2
 800108c:	d801      	bhi.n	8001092 <BSP_CAMERA_VsyncEventCallback+0x22>
    CameraContext.vsync_it =2;
 800108e:	2302      	movs	r3, #2
 8001090:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001092:	b662      	cpsie	i
}
 8001094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001096:	7d23      	ldrb	r3, [r4, #20]
 8001098:	b9c3      	cbnz	r3, 80010cc <BSP_CAMERA_VsyncEventCallback+0x5c>
 800109a:	68e3      	ldr	r3, [r4, #12]
 800109c:	1ac0      	subs	r0, r0, r3
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 800109e:	f646 1398 	movw	r3, #27032	; 0x6998
    CameraContext.vsync_it ++;
 80010a2:	2202      	movs	r2, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 80010a4:	58eb      	ldr	r3, [r5, r3]
    CameraContext.vsync_it ++;
 80010a6:	60a2      	str	r2, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	621a      	str	r2, [r3, #32]
    CameraContext.vsync_it ++;
 80010ac:	e7ed      	b.n	800108a <BSP_CAMERA_VsyncEventCallback+0x1a>
    CameraContext.vsync_it ++;
 80010ae:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80010b0:	f646 1698 	movw	r6, #27032	; 0x6998
    CameraContext.vsync_it ++;
 80010b4:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80010b6:	59af      	ldr	r7, [r5, r6]
 80010b8:	f007 ff08 	bl	8008ecc <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80010bc:	59aa      	ldr	r2, [r5, r6]
 80010be:	6923      	ldr	r3, [r4, #16]
 80010c0:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80010c2:	61f8      	str	r0, [r7, #28]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80010c4:	68e0      	ldr	r0, [r4, #12]
 80010c6:	6211      	str	r1, [r2, #32]
 80010c8:	1a18      	subs	r0, r3, r0
 80010ca:	e7de      	b.n	800108a <BSP_CAMERA_VsyncEventCallback+0x1a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 80010cc:	7d23      	ldrb	r3, [r4, #20]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	68e3      	ldr	r3, [r4, #12]
 80010d2:	eba0 0003 	sub.w	r0, r0, r3
 80010d6:	d1d8      	bne.n	800108a <BSP_CAMERA_VsyncEventCallback+0x1a>
 80010d8:	2802      	cmp	r0, #2
 80010da:	d8da      	bhi.n	8001092 <BSP_CAMERA_VsyncEventCallback+0x22>
 80010dc:	e7df      	b.n	800109e <BSP_CAMERA_VsyncEventCallback+0x2e>
 80010de:	bf00      	nop
 80010e0:	3000ef7c 	.word	0x3000ef7c

080010e4 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 80010e4:	f002 bf0e 	b.w	8003f04 <Error_Handler>

080010e8 <DISPLAY_Init>:
 * @brief  Dispaly Initialization
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
void DISPLAY_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_sync=0;
 80010ec:	2500      	movs	r5, #0
{
 80010ee:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80010f0:	4f20      	ldr	r7, [pc, #128]	; (8001174 <DISPLAY_Init+0x8c>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80010f2:	4e21      	ldr	r6, [pc, #132]	; (8001178 <DISPLAY_Init+0x90>)
{
 80010f4:	b087      	sub	sp, #28
  Display_Context_Ptr->lcd_sync=0;
 80010f6:	60a5      	str	r5, [r4, #8]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80010f8:	2101      	movs	r1, #1
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80010fa:	6813      	ldr	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80010fc:	4628      	mov	r0, r5
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80010fe:	683f      	ldr	r7, [r7, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001100:	6836      	ldr	r6, [r6, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001102:	f023 0301 	bic.w	r3, r3, #1
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001106:	e9c4 7600 	strd	r7, r6, [r4]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 800110a:	6013      	str	r3, [r2, #0]

  config.X0          = 0;
 800110c:	2600      	movs	r6, #0
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 800110e:	f007 fd27 	bl	8008b60 <BSP_LCD_Init>
  config.X0          = 0;
 8001112:	f44f 7348 	mov.w	r3, #800	; 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001116:	6820      	ldr	r0, [r4, #0]
  config.X0          = 0;
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 800111e:	4629      	mov	r1, r5
  config.X0          = 0;
 8001120:	e9cd 2300 	strd	r2, r3, [sp]
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001124:	e9cd 5004 	strd	r5, r0, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001128:	466a      	mov	r2, sp
 800112a:	4628      	mov	r0, r5
  config.X0          = 0;
 800112c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001130:	f007 fd22 	bl	8008b78 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <DISPLAY_Init+0x94>)
 8001136:	f017 f8f3 	bl	8018320 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 800113a:	4628      	mov	r0, r5
 800113c:	f017 f922 	bl	8018384 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8001140:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001144:	f017 f936 	bl	80183b4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f017 f92a 	bl	80183a4 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <DISPLAY_Init+0x98>)
 8001152:	f017 f937 	bl	80183c4 <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <DISPLAY_Init+0x9c>)
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <DISPLAY_Init+0xa0>)
 800115a:	2534      	movs	r5, #52	; 0x34
 800115c:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800115e:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001160:	6862      	ldr	r2, [r4, #4]
 8001162:	fb05 0303 	mla	r3, r5, r3, r0
 8001166:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001168:	f00b fb60 	bl	800c82c <HAL_LTDC_Reload>
}
 800116c:	b007      	add	sp, #28
 800116e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001170:	52004000 	.word	0x52004000
 8001174:	24000004 	.word	0x24000004
 8001178:	24000008 	.word	0x24000008
 800117c:	0802cc1c 	.word	0x0802cc1c
 8001180:	2400019c 	.word	0x2400019c
 8001184:	3000f7dc 	.word	0x3000f7dc
 8001188:	3000f734 	.word	0x3000f734

0800118c <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	4605      	mov	r5, r0
 8001190:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001192:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001196:	f017 f975 	bl	8018484 <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <DISPLAY_WelcomeScreen+0x13c>)
 800119c:	224d      	movs	r2, #77	; 0x4d
 800119e:	2132      	movs	r1, #50	; 0x32
 80011a0:	2000      	movs	r0, #0
 80011a2:	f007 f86b 	bl	800827c <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <DISPLAY_WelcomeScreen+0x140>)
 80011a8:	2255      	movs	r2, #85	; 0x55
 80011aa:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80011ae:	2000      	movs	r0, #0
 80011b0:	f007 f864 	bl	800827c <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 80011b4:	f017 f90e 	bl	80183d4 <UTIL_LCD_GetFont>
 80011b8:	88c1      	ldrh	r1, [r0, #6]
 80011ba:	2301      	movs	r3, #1
 80011bc:	4a44      	ldr	r2, [pc, #272]	; (80012d0 <DISPLAY_WelcomeScreen+0x144>)
 80011be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80011c2:	2000      	movs	r0, #0
 80011c4:	4099      	lsls	r1, r3
 80011c6:	f017 fa45 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.1.0", CENTER_MODE);
 80011ca:	f017 f903 	bl	80183d4 <UTIL_LCD_GetFont>
 80011ce:	88c1      	ldrh	r1, [r0, #6]
 80011d0:	2301      	movs	r3, #1
 80011d2:	4a40      	ldr	r2, [pc, #256]	; (80012d4 <DISPLAY_WelcomeScreen+0x148>)
 80011d4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80011d8:	2000      	movs	r0, #0
 80011da:	f017 fa3b 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 80011de:	f017 f8f9 	bl	80183d4 <UTIL_LCD_GetFont>
 80011e2:	88c1      	ldrh	r1, [r0, #6]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4a3c      	ldr	r2, [pc, #240]	; (80012d8 <DISPLAY_WelcomeScreen+0x14c>)
 80011e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80011ec:	2000      	movs	r0, #0
 80011ee:	4099      	lsls	r1, r3
 80011f0:	f017 fa30 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 80011f4:	f017 f8ee 	bl	80183d4 <UTIL_LCD_GetFont>
 80011f8:	88c1      	ldrh	r1, [r0, #6]
 80011fa:	2301      	movs	r3, #1
 80011fc:	4a37      	ldr	r2, [pc, #220]	; (80012dc <DISPLAY_WelcomeScreen+0x150>)
 80011fe:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8001202:	2000      	movs	r0, #0
 8001204:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8001208:	f017 fa24 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 800120c:	f017 f8e2 	bl	80183d4 <UTIL_LCD_GetFont>
 8001210:	88c1      	ldrh	r1, [r0, #6]
 8001212:	2301      	movs	r3, #1
 8001214:	4a32      	ldr	r2, [pc, #200]	; (80012e0 <DISPLAY_WelcomeScreen+0x154>)
 8001216:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800121a:	2000      	movs	r0, #0
 800121c:	0089      	lsls	r1, r1, #2
 800121e:	f017 fa19 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 8001222:	f017 f8d7 	bl	80183d4 <UTIL_LCD_GetFont>
 8001226:	88c1      	ldrh	r1, [r0, #6]
 8001228:	2301      	movs	r3, #1
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <DISPLAY_WelcomeScreen+0x158>)
 800122c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001230:	2000      	movs	r0, #0
 8001232:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001236:	f017 fa0d 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 800123a:	f017 f8cb 	bl	80183d4 <UTIL_LCD_GetFont>
 800123e:	88c1      	ldrh	r1, [r0, #6]
 8001240:	2301      	movs	r3, #1
 8001242:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <DISPLAY_WelcomeScreen+0x15c>)
 8001244:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001248:	2000      	movs	r0, #0
 800124a:	4099      	lsls	r1, r3
 800124c:	f017 fa02 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8001250:	f017 f8c0 	bl	80183d4 <UTIL_LCD_GetFont>
 8001254:	88c1      	ldrh	r1, [r0, #6]
 8001256:	2301      	movs	r3, #1
 8001258:	4a24      	ldr	r2, [pc, #144]	; (80012ec <DISPLAY_WelcomeScreen+0x160>)
 800125a:	2000      	movs	r0, #0
 800125c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001260:	f017 f9f8 	bl	8018654 <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 8001264:	2300      	movs	r3, #0
 8001266:	60ab      	str	r3, [r5, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001268:	68ab      	ldr	r3, [r5, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0fc      	beq.n	8001268 <DISPLAY_WelcomeScreen+0xdc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 800126e:	2202      	movs	r2, #2
 8001270:	491f      	ldr	r1, [pc, #124]	; (80012f0 <DISPLAY_WelcomeScreen+0x164>)
 8001272:	6868      	ldr	r0, [r5, #4]
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001274:	2700      	movs	r7, #0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001276:	f002 fdff 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800127a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800127e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001282:	9706      	str	r7, [sp, #24]
 8001284:	9705      	str	r7, [sp, #20]
 8001286:	463b      	mov	r3, r7
 8001288:	9102      	str	r1, [sp, #8]
 800128a:	463a      	mov	r2, r7
  int magic_menu = 0;
 800128c:	463e      	mov	r6, r7
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800128e:	2405      	movs	r4, #5
 8001290:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8001294:	e9cd 1000 	strd	r1, r0, [sp]
 8001298:	e9d5 1000 	ldrd	r1, r0, [r5]
 800129c:	f002 fd30 	bl	8003d00 <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 80012a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a4:	f007 fe18 	bl	8008ed8 <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80012a8:	2000      	movs	r0, #0
 80012aa:	f005 fdef 	bl	8006e8c <BSP_PB_GetState>
      magic_menu = 1;
 80012ae:	2800      	cmp	r0, #0
 80012b0:	bf18      	it	ne
 80012b2:	2601      	movne	r6, #1
  for (int i = 0; i < 5; i++)
 80012b4:	3c01      	subs	r4, #1
 80012b6:	d1f3      	bne.n	80012a0 <DISPLAY_WelcomeScreen+0x114>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80012b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012bc:	f017 f8e2 	bl	8018484 <UTIL_LCD_Clear>
}
 80012c0:	4630      	mov	r0, r6
 80012c2:	b009      	add	sp, #36	; 0x24
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	081000a8 	.word	0x081000a8
 80012cc:	081082f0 	.word	0x081082f0
 80012d0:	08100008 	.word	0x08100008
 80012d4:	08100020 	.word	0x08100020
 80012d8:	08100028 	.word	0x08100028
 80012dc:	08100038 	.word	0x08100038
 80012e0:	08100054 	.word	0x08100054
 80012e4:	0810006c 	.word	0x0810006c
 80012e8:	08100080 	.word	0x08100080
 80012ec:	081000a0 	.word	0x081000a0
 80012f0:	00177000 	.word	0x00177000

080012f4 <DISPLAY_DrawBBox>:
  uint32_t box_center_x = (uint32_t) (x_center * CAM_RES_WIDTH * 2 * (CAM_RES_WIDTH / 240));
 80012f4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001364 <DISPLAY_DrawBBox+0x70>
  uint32_t box_center_y = (uint32_t) (y_center * CAM_RES_HEIGHT * 2);
 80012f8:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8001368 <DISPLAY_DrawBBox+0x74>
  uint32_t box_center_x = (uint32_t) (x_center * CAM_RES_WIDTH * 2 * (CAM_RES_WIDTH / 240));
 80012fc:	ee20 0a07 	vmul.f32	s0, s0, s14
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, UTIL_LCD_COLOR_RED);
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <DISPLAY_DrawBBox+0x78>)
  uint32_t box_center_y = (uint32_t) (y_center * CAM_RES_HEIGHT * 2);
 8001302:	ee60 0aa7 	vmul.f32	s1, s1, s15
  uint32_t box_h = (uint32_t) (height * CAM_RES_HEIGHT * 2);
 8001306:	ee61 1aa7 	vmul.f32	s3, s3, s15
  uint32_t box_w = (uint32_t) (width * CAM_RES_WIDTH * 2);
 800130a:	ee21 1a07 	vmul.f32	s2, s2, s14
  uint32_t box_center_x = (uint32_t) (x_center * CAM_RES_WIDTH * 2 * (CAM_RES_WIDTH / 240));
 800130e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
{
 8001312:	b530      	push	{r4, r5, lr}
  uint32_t box_center_x = (uint32_t) (x_center * CAM_RES_WIDTH * 2 * (CAM_RES_WIDTH / 240));
 8001314:	ee17 4a90 	vmov	r4, s15
  uint32_t box_w = (uint32_t) (width * CAM_RES_WIDTH * 2);
 8001318:	eefc 7ac1 	vcvt.u32.f32	s15, s2
{
 800131c:	b083      	sub	sp, #12
  uint32_t box_w = (uint32_t) (width * CAM_RES_WIDTH * 2);
 800131e:	ee17 2a90 	vmov	r2, s15
  uint32_t box_center_y = (uint32_t) (y_center * CAM_RES_HEIGHT * 2);
 8001322:	eefc 7ae0 	vcvt.u32.f32	s15, s1
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, UTIL_LCD_COLOR_RED);
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	eba4 0052 	sub.w	r0, r4, r2, lsr #1
  uint32_t box_center_y = (uint32_t) (y_center * CAM_RES_HEIGHT * 2);
 800132c:	ee17 5a90 	vmov	r5, s15
  uint32_t box_h = (uint32_t) (height * CAM_RES_HEIGHT * 2);
 8001330:	eefc 7ae1 	vcvt.u32.f32	s15, s3
 8001334:	ee17 3a90 	vmov	r3, s15
  UTIL_LCD_DrawRect(box_x, box_y, box_w, box_h, UTIL_LCD_COLOR_RED);
 8001338:	eba5 0153 	sub.w	r1, r5, r3, lsr #1
 800133c:	f017 fa72 	bl	8018824 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawHLine(box_center_x - 5, box_center_y, 10, UTIL_LCD_COLOR_GREEN);
 8001340:	4629      	mov	r1, r5
 8001342:	1f60      	subs	r0, r4, #5
 8001344:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8001348:	220a      	movs	r2, #10
 800134a:	f017 f84b 	bl	80183e4 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, UTIL_LCD_COLOR_GREEN);
 800134e:	1f69      	subs	r1, r5, #5
 8001350:	4620      	mov	r0, r4
 8001352:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8001356:	220a      	movs	r2, #10
}
 8001358:	b003      	add	sp, #12
 800135a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  UTIL_LCD_DrawVLine(box_center_x, box_center_y - 5, 10, UTIL_LCD_COLOR_GREEN);
 800135e:	f017 b869 	b.w	8018434 <UTIL_LCD_DrawVLine>
 8001362:	bf00      	nop
 8001364:	44200000 	.word	0x44200000
 8001368:	43f00000 	.word	0x43f00000
 800136c:	ffff0000 	.word	0xffff0000

08001370 <DISPLAY_Refresh>:
{
 8001370:	b510      	push	{r4, lr}
  Display_Context_Ptr->lcd_sync =0;
 8001372:	2300      	movs	r3, #0
{
 8001374:	b088      	sub	sp, #32
 8001376:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 8001378:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 800137a:	68a3      	ldr	r3, [r4, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0fc      	beq.n	800137a <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001380:	6860      	ldr	r0, [r4, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	490a      	ldr	r1, [pc, #40]	; (80013b0 <DISPLAY_Refresh+0x40>)
 8001386:	f002 fd77 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800138a:	2300      	movs	r3, #0
 800138c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001390:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001394:	461a      	mov	r2, r3
 8001396:	9102      	str	r1, [sp, #8]
 8001398:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800139c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80013a0:	e9cd 1000 	strd	r1, r0, [sp]
 80013a4:	e9d4 1000 	ldrd	r1, r0, [r4]
 80013a8:	f002 fcaa 	bl	8003d00 <UTILS_Dma2d_Memcpy>
                     LCD_RES_HEIGHT, LCD_RES_WIDTH, DMA2D_INPUT_ARGB8888, DMA2D_OUTPUT_ARGB8888, 0, 0);
}
 80013ac:	b008      	add	sp, #32
 80013ae:	bd10      	pop	{r4, pc}
 80013b0:	00177000 	.word	0x00177000

080013b4 <DISPLAY_CameraCaptureBuffer>:
 * @brief Upscale and display image to LCD write buffer (top left)
 *
 * @param Display_Context_Ptr pointer to display context
 */
void DISPLAY_CameraCaptureBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint16_t* cam_buffer)
{
 80013b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t *lcd_buffer = (uint32_t *) Display_Context_Ptr->lcd_frame_write_buff;
 80013b8:	6844      	ldr	r4, [r0, #4]
 80013ba:	f04f 0c00 	mov.w	ip, #0
  int rowlcd = 0;
  int collcd = 0;

  /*Upscale to VGA, left aligned for display*/
  for (int row = 0; row < CAM_RES_HEIGHT; row++)
 80013be:	f8df e07c 	ldr.w	lr, [pc, #124]	; 800143c <DISPLAY_CameraCaptureBuffer+0x88>
 80013c2:	1d27      	adds	r7, r4, #4
 80013c4:	f504 6648 	add.w	r6, r4, #3200	; 0xc80
 80013c8:	f604 4584 	addw	r5, r4, #3204	; 0xc84
{
 80013cc:	4608      	mov	r0, r1
 80013ce:	2200      	movs	r2, #0
    {
      uint8_t r8;
      uint8_t g8;
      uint8_t b8;

      uint16_t pixel = *cam_buffer++;
 80013d0:	f830 8b02 	ldrh.w	r8, [r0], #2
      /* Extract R:5 G:6 B:5 components */
      uint32_t red   = ((pixel & 0xf800u) >> 11);
      uint32_t green = ((pixel & 0x07e0u) >>  5);
      uint32_t blue  = ((pixel & 0x001fu) >>  0);
 80013d4:	f008 0a1f 	and.w	sl, r8, #31
      uint32_t green = ((pixel & 0x07e0u) >>  5);
 80013d8:	f3c8 1b45 	ubfx	fp, r8, #5, #6

      /* Convert */
      /* Left shift and copy MSBs to LSBs to improve conversion linearity */
      red   = (red   << 3) | (red   >> 2);
      green = (green << 2) | (green >> 4);
 80013dc:	f3c8 2941 	ubfx	r9, r8, #9, #2
      blue  = (blue  << 3) | (blue  >> 2);
 80013e0:	f3c8 0382 	ubfx	r3, r8, #2, #3
      green = (green << 2) | (green >> 4);
 80013e4:	ea49 098b 	orr.w	r9, r9, fp, lsl #2
      r8 = (uint8_t) red;
      g8 = (uint8_t) green;
      b8 = (uint8_t) blue;

      uint32_t argb_pix = 0xFF000000 | (r8 << 16) | (g8 << 8) | b8;
 80013e8:	ea43 03ca 	orr.w	r3, r3, sl, lsl #3
      uint32_t red   = ((pixel & 0xf800u) >> 11);
 80013ec:	ea4f 2ad8 	mov.w	sl, r8, lsr #11
      red   = (red   << 3) | (red   >> 2);
 80013f0:	ea4f 3858 	mov.w	r8, r8, lsr #13
      uint32_t argb_pix = 0xFF000000 | (r8 << 16) | (g8 << 8) | b8;
 80013f4:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
      red   = (red   << 3) | (red   >> 2);
 80013f8:	ea48 08ca 	orr.w	r8, r8, sl, lsl #3
      uint32_t argb_pix = 0xFF000000 | (r8 << 16) | (g8 << 8) | b8;
 80013fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
      lcd_buffer[rowlcd * LCD_RES_WIDTH + collcd] = argb_pix;
 8001404:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
      lcd_buffer[rowlcd * LCD_RES_WIDTH + collcd + 1] = argb_pix;
 8001408:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
      lcd_buffer[(rowlcd + 1) * LCD_RES_WIDTH + collcd] = argb_pix;
 800140c:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
      lcd_buffer[(rowlcd + 1) * LCD_RES_WIDTH + collcd + 1] = argb_pix;
 8001410:	f845 3022 	str.w	r3, [r5, r2, lsl #2]

      collcd += 2;
 8001414:	3202      	adds	r2, #2
    for (int col = 0; col < CAM_RES_WIDTH; col++)
 8001416:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800141a:	d1d9      	bne.n	80013d0 <DISPLAY_CameraCaptureBuffer+0x1c>
 800141c:	f50c 6cc8 	add.w	ip, ip, #1600	; 0x640
 8001420:	f501 7120 	add.w	r1, r1, #640	; 0x280
  for (int row = 0; row < CAM_RES_HEIGHT; row++)
 8001424:	f504 54c8 	add.w	r4, r4, #6400	; 0x1900
 8001428:	f507 57c8 	add.w	r7, r7, #6400	; 0x1900
 800142c:	45f4      	cmp	ip, lr
 800142e:	f506 56c8 	add.w	r6, r6, #6400	; 0x1900
 8001432:	f505 55c8 	add.w	r5, r5, #6400	; 0x1900
 8001436:	d1c9      	bne.n	80013cc <DISPLAY_CameraCaptureBuffer+0x18>
    }
    collcd = 0;
    rowlcd += 2;
  }

}
 8001438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800143c:	0005dc00 	.word	0x0005dc00

08001440 <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <HAL_LTDC_ReloadEventCallback+0xc>)
 8001442:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001444:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 8001446:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001448:	f00b b9f0 	b.w	800c82c <HAL_LTDC_Reload>
 800144c:	3000ef9c 	.word	0x3000ef9c

08001450 <PREPROC_ImageResize>:
/**
 * @brief Performs image (or selected Region Of Interest) resizing
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
 8001450:	b510      	push	{r4, lr}
  image_t *src_img = &Preproc_Context_Ptr->Resize_Src_Img;
 8001452:	f100 042c 	add.w	r4, r0, #44	; 0x2c
{
 8001456:	b082      	sub	sp, #8
  image_t *dst_img = &Preproc_Context_Ptr->Resize_Dst_Img;
 8001458:	f100 013c 	add.w	r1, r0, #60	; 0x3c
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 800145c:	4620      	mov	r0, r4
 800145e:	9101      	str	r1, [sp, #4]
 8001460:	f014 fee0 	bl	8016224 <Image_CheckResizeMemoryLayout>

  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 8001464:	9901      	ldr	r1, [sp, #4]
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 8001466:	4602      	mov	r2, r0
  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 8001468:	4620      	mov	r0, r4
 800146a:	f016 fc79 	bl	8017d60 <STM32Ipl_Downscale>
 800146e:	b908      	cbnz	r0, 8001474 <PREPROC_ImageResize+0x24>
  {
    while (1);
  }
}
 8001470:	b002      	add	sp, #8
 8001472:	bd10      	pop	{r4, pc}
    while (1);
 8001474:	e7fe      	b.n	8001474 <PREPROC_ImageResize+0x24>
 8001476:	bf00      	nop

08001478 <PREPROC_PixelFormatConversion>:
  image_t *src_img = &Preproc_Context_Ptr->Pfc_Src_Img;
  image_t *dst_img = &Preproc_Context_Ptr->Pfc_Dst_Img;
  uint32_t rb_swap = Preproc_Context_Ptr->red_blue_swap;

#if PIXEL_FMT_CONV == HW_PFC
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001478:	6942      	ldr	r2, [r0, #20]
 800147a:	2a02      	cmp	r2, #2
 800147c:	d000      	beq.n	8001480 <PREPROC_PixelFormatConversion+0x8>
                       1,
                       rb_swap);
  }
  else
  {
    while (1);
 800147e:	e7fe      	b.n	800147e <PREPROC_PixelFormatConversion+0x6>
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001482:	2b04      	cmp	r3, #4
 8001484:	d1fb      	bne.n	800147e <PREPROC_PixelFormatConversion+0x6>
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001486:	2101      	movs	r1, #1
 8001488:	2300      	movs	r3, #0
{
 800148a:	b570      	push	{r4, r5, r6, lr}
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 800148c:	6886      	ldr	r6, [r0, #8]
{
 800148e:	b088      	sub	sp, #32
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001490:	69c5      	ldr	r5, [r0, #28]
 8001492:	9203      	str	r2, [sp, #12]
 8001494:	461a      	mov	r2, r3
 8001496:	8a04      	ldrh	r4, [r0, #16]
 8001498:	9606      	str	r6, [sp, #24]
 800149a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800149e:	8981      	ldrh	r1, [r0, #12]
 80014a0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80014a4:	9100      	str	r1, [sp, #0]
 80014a6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80014a8:	6980      	ldr	r0, [r0, #24]
 80014aa:	f002 fc29 	bl	8003d00 <UTILS_Dma2d_Memcpy>
    while (1);
  }
#else
 #error PFC method not valid!
#endif
}
 80014ae:	b008      	add	sp, #32
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
 80014b2:	bf00      	nop

080014b4 <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 80014b4:	1e53      	subs	r3, r2, #1
 80014b6:	d414      	bmi.n	80014e2 <PREPROC_Pixel_RB_Swap+0x2e>
 80014b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80014bc:	4410      	add	r0, r2
 80014be:	4411      	add	r1, r2
{
 80014c0:	b410      	push	{r4}
  {
    tmp_r=pivot[i].r;
    
    dest[i].r = pivot[i].b;
 80014c2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
  for (int i = pixels-1; i >= 0; i--)
 80014c6:	3b01      	subs	r3, #1
    tmp_r=pivot[i].r;
 80014c8:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    dest[i].r = pivot[i].b;
 80014cc:	3903      	subs	r1, #3
 80014ce:	700a      	strb	r2, [r1, #0]
    dest[i].b = tmp_r;
    dest[i].g = pivot[i].g;
 80014d0:	3803      	subs	r0, #3
    dest[i].b = tmp_r;
 80014d2:	708c      	strb	r4, [r1, #2]
    dest[i].g = pivot[i].g;
 80014d4:	7842      	ldrb	r2, [r0, #1]
 80014d6:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	d1f2      	bne.n	80014c2 <PREPROC_Pixel_RB_Swap+0xe>
  }
}
 80014dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	4770      	bx	lr

080014e4 <UartCmd_Run_Validation>:
  /***Resume the camera capture in NOMINAL mode****/
  BSP_CAMERA_Resume(0);
}

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 80014e4:	b430      	push	{r4, r5}
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;

#ifdef OBJECTDETECT  
  Test_Context_Ptr->ValidationContext.acc_num_object_detected=0;
 80014e6:	2300      	movs	r3, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80014e8:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 80014ea:	2402      	movs	r4, #2
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 80014ec:	4906      	ldr	r1, [pc, #24]	; (8001508 <UartCmd_Run_Validation+0x24>)
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80014ee:	f8d0 2530 	ldr.w	r2, [r0, #1328]	; 0x530
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80014f2:	f8c0 5450 	str.w	r5, [r0, #1104]	; 0x450
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 80014f6:	f880 4454 	strb.w	r4, [r0, #1108]	; 0x454
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 80014fa:	f8c0 144c 	str.w	r1, [r0, #1100]	; 0x44c
  Test_Context_Ptr->ValidationContext.acc_num_object_detected=0;
 80014fe:	f8c0 3448 	str.w	r3, [r0, #1096]	; 0x448
#endif
  
  App_Cxt_Ptr->run_loop = 0;
 8001502:	6053      	str	r3, [r2, #4]
}
 8001504:	bc30      	pop	{r4, r5}
 8001506:	4770      	bx	lr
 8001508:	d0cb0b80 	.word	0xd0cb0b80

0800150c <UartCmd_Launch_Dump>:
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}


static void UartCmd_Launch_Dump(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 800150c:	b430      	push	{r4, r5}
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800150e:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
  
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001512:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001514:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 8001516:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001518:	f8c0 5450 	str.w	r5, [r0, #1104]	; 0x450
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 800151c:	f880 4454 	strb.w	r4, [r0, #1108]	; 0x454
  App_Cxt_Ptr->run_loop = 0;
 8001520:	605a      	str	r2, [r3, #4]
  
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001522:	780b      	ldrb	r3, [r1, #0]
 8001524:	f880 3455 	strb.w	r3, [r0, #1109]	; 0x455
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001528:	784b      	ldrb	r3, [r1, #1]
  
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 800152a:	42ab      	cmp	r3, r5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 800152c:	f880 3456 	strb.w	r3, [r0, #1110]	; 0x456
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001530:	d101      	bne.n	8001536 <UartCmd_Launch_Dump+0x2a>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001532:	4b02      	ldr	r3, [pc, #8]	; (800153c <UartCmd_Launch_Dump+0x30>)
 8001534:	6003      	str	r3, [r0, #0]
}
 8001536:	bc30      	pop	{r4, r5}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	d0cb4420 	.word	0xd0cb4420

08001540 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001540:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
  App_Cxt_Ptr->run_loop = 0;
 8001542:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001544:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001546:	2404      	movs	r4, #4
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001548:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800154c:	f8c0 5450 	str.w	r5, [r0, #1104]	; 0x450
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001550:	f880 4454 	strb.w	r4, [r0, #1108]	; 0x454
  App_Cxt_Ptr->run_loop = 0;
 8001554:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001556:	780b      	ldrb	r3, [r1, #0]
 8001558:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 800155c:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001560:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001564:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001568:	f8c0 3464 	str.w	r3, [r0, #1124]	; 0x464
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 800156c:	bc30      	pop	{r4, r5}
 800156e:	4770      	bx	lr

08001570 <UartCmd_Set_Camera_Mode>:
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}

static void UartCmd_Set_Camera_Mode(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001570:	b510      	push	{r4, lr}
  /******************************SET_CAMERA_MODE_CMD**********************
  *Configure the camera in test bar or normal mode.
  *This command has one parameter:
  *Camera mode: 0x00=Normal, 0x01= Test bar
  ***********************************************************************************/
  if(*(data_buffer) == 0x00)
 8001572:	780b      	ldrb	r3, [r1, #0]
{
 8001574:	4604      	mov	r4, r0
  if(*(data_buffer) == 0x00)
 8001576:	b14b      	cbz	r3, 800158c <UartCmd_Set_Camera_Mode+0x1c>
  {
    CAMERA_Disable_TestBar_Mode(NULL);
  }
  else if(*(data_buffer) == 0x01)
 8001578:	2b01      	cmp	r3, #1
 800157a:	d00f      	beq.n	800159c <UartCmd_Set_Camera_Mode+0x2c>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800157c:	f204 406c 	addw	r0, r4, #1132	; 0x46c
 8001580:	220a      	movs	r2, #10
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <UartCmd_Set_Camera_Mode+0x34>)
 8001584:	f00e fd76 	bl	8010074 <HAL_UART_Receive_DMA>
 8001588:	b920      	cbnz	r0, 8001594 <UartCmd_Set_Camera_Mode+0x24>
}
 800158a:	bd10      	pop	{r4, pc}
    CAMERA_Disable_TestBar_Mode(NULL);
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fd19 	bl	8000fc4 <CAMERA_Disable_TestBar_Mode>
 8001592:	e7f3      	b.n	800157c <UartCmd_Set_Camera_Mode+0xc>
}
 8001594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001598:	f002 bcb4 	b.w	8003f04 <Error_Handler>
    CAMERA_Enable_TestBar_Mode(NULL);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fcdf 	bl	8000f60 <CAMERA_Enable_TestBar_Mode>
 80015a2:	e7eb      	b.n	800157c <UartCmd_Set_Camera_Mode+0xc>
 80015a4:	240618e0 	.word	0x240618e0

080015a8 <UartCmd_Write_Camera_Register>:
  OV9655_Object_t *pObj=Camera_CompObj;
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <UartCmd_Write_Camera_Register+0x44>)
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 80015aa:	2301      	movs	r3, #1
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 80015ae:	6816      	ldr	r6, [r2, #0]
{
 80015b0:	b082      	sub	sp, #8
  uint8_t tmp=*(data_buffer+1);
 80015b2:	784d      	ldrb	r5, [r1, #1]
{
 80015b4:	4604      	mov	r4, r0
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 80015b6:	f10d 0207 	add.w	r2, sp, #7
 80015ba:	7809      	ldrb	r1, [r1, #0]
 80015bc:	f106 0018 	add.w	r0, r6, #24
  uint8_t tmp=*(data_buffer+1);
 80015c0:	f88d 5007 	strb.w	r5, [sp, #7]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 80015c4:	f005 fbb2 	bl	8006d2c <ov9655_write_reg>
  HAL_Delay(300);
 80015c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015cc:	f007 fc84 	bl	8008ed8 <HAL_Delay>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80015d0:	f204 406c 	addw	r0, r4, #1132	; 0x46c
 80015d4:	220a      	movs	r2, #10
 80015d6:	4906      	ldr	r1, [pc, #24]	; (80015f0 <UartCmd_Write_Camera_Register+0x48>)
 80015d8:	f00e fd4c 	bl	8010074 <HAL_UART_Receive_DMA>
 80015dc:	b908      	cbnz	r0, 80015e2 <UartCmd_Write_Camera_Register+0x3a>
}
 80015de:	b002      	add	sp, #8
 80015e0:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80015e2:	f002 fc8f 	bl	8003f04 <Error_Handler>
}
 80015e6:	b002      	add	sp, #8
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
 80015ea:	bf00      	nop
 80015ec:	300080d4 	.word	0x300080d4
 80015f0:	240618e0 	.word	0x240618e0

080015f4 <UartCmd_Run_NonRegression>:
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4603      	mov	r3, r0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80015f8:	2401      	movs	r4, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 80015fa:	f240 2203 	movw	r2, #515	; 0x203
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80015fe:	2002      	movs	r0, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001600:	f8c3 4450 	str.w	r4, [r3, #1104]	; 0x450
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001604:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001608:	f44f 7238 	mov.w	r2, #736	; 0x2e0
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 800160c:	f883 4456 	strb.w	r4, [r3, #1110]	; 0x456
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001610:	4e17      	ldr	r6, [pc, #92]	; (8001670 <UartCmd_Run_NonRegression+0x7c>)
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001612:	680d      	ldr	r5, [r1, #0]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001614:	2100      	movs	r1, #0
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001616:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 800161a:	f8c3 5458 	str.w	r5, [r3, #1112]	; 0x458
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 800161e:	f646 158c 	movw	r5, #27020	; 0x698c
  Test_Context_Ptr->NonReg_FirstRun=1;
 8001622:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
  Test_Context_Ptr->DumpContext.dump_state = 1;
 8001626:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 800162a:	7118      	strb	r0, [r3, #4]
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 800162c:	601e      	str	r6, [r3, #0]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 800162e:	4811      	ldr	r0, [pc, #68]	; (8001674 <UartCmd_Run_NonRegression+0x80>)
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001630:	f8d3 4530 	ldr.w	r4, [r3, #1328]	; 0x530
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001634:	f020 fdea 	bl	802220c <memset>
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001638:	2303      	movs	r3, #3
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 800163a:	5960      	ldr	r0, [r4, r5]
  App_Cxt_Ptr->Operating_Mode=DUMP;
 800163c:	7023      	strb	r3, [r4, #0]
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 800163e:	f7ff fc8f 	bl	8000f60 <CAMERA_Enable_TestBar_Mode>
  while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001642:	5962      	ldr	r2, [r4, r5]
 8001644:	7d13      	ldrb	r3, [r2, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0fc      	beq.n	8001644 <UartCmd_Run_NonRegression+0x50>
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 800164a:	2500      	movs	r5, #0
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 800164c:	f646 1398 	movw	r3, #27032	; 0x6998
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001650:	6095      	str	r5, [r2, #8]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001652:	58e6      	ldr	r6, [r4, r3]
 8001654:	f007 fc3a 	bl	8008ecc <HAL_GetTick>
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001658:	f646 138c 	movw	r3, #27020	; 0x698c
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 800165c:	4602      	mov	r2, r0
  BSP_CAMERA_Resume(0);
 800165e:	4628      	mov	r0, r5
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001660:	58e3      	ldr	r3, [r4, r3]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001662:	61b2      	str	r2, [r6, #24]
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001664:	751d      	strb	r5, [r3, #20]
}
 8001666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_CAMERA_Resume(0);
 800166a:	f006 bc57 	b.w	8007f1c <BSP_CAMERA_Resume>
 800166e:	bf00      	nop
 8001670:	d0cb4420 	.word	0xd0cb4420
 8001674:	d0cb08a0 	.word	0xd0cb08a0

08001678 <count_dir.isra.0>:
static uint32_t count_dir(const char *path, AppContext_TypeDef *app)
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	4605      	mov	r5, r0
 800167c:	b08e      	sub	sp, #56	; 0x38
 800167e:	460e      	mov	r6, r1
  res = f_opendir(&dir, path);
 8001680:	a801      	add	r0, sp, #4
 8001682:	4629      	mov	r1, r5
 8001684:	f014 f8d8 	bl	8015838 <f_opendir>
  if (res != FR_OK)
 8001688:	b9c8      	cbnz	r0, 80016be <count_dir.isra.0+0x46>
 800168a:	4d1b      	ldr	r5, [pc, #108]	; (80016f8 <count_dir.isra.0+0x80>)
 800168c:	4604      	mov	r4, r0
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800168e:	462e      	mov	r6, r5
 8001690:	4631      	mov	r1, r6
 8001692:	a801      	add	r0, sp, #4
 8001694:	f014 f9d6 	bl	8015a44 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001698:	b958      	cbnz	r0, 80016b2 <count_dir.isra.0+0x3a>
 800169a:	7dab      	ldrb	r3, [r5, #22]
 800169c:	b14b      	cbz	r3, 80016b2 <count_dir.isra.0+0x3a>
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 800169e:	7a2b      	ldrb	r3, [r5, #8]
 80016a0:	06db      	lsls	r3, r3, #27
 80016a2:	d5f5      	bpl.n	8001690 <count_dir.isra.0+0x18>
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80016a4:	4631      	mov	r1, r6
 80016a6:	a801      	add	r0, sp, #4
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 80016a8:	3401      	adds	r4, #1
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80016aa:	f014 f9cb 	bl	8015a44 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d0f3      	beq.n	800169a <count_dir.isra.0+0x22>
  f_closedir(&dir);
 80016b2:	a801      	add	r0, sp, #4
 80016b4:	f014 f994 	bl	80159e0 <f_closedir>
}
 80016b8:	4620      	mov	r0, r4
 80016ba:	b00e      	add	sp, #56	; 0x38
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not open directory", CENTER_MODE);
 80016be:	f016 fe89 	bl	80183d4 <UTIL_LCD_GetFont>
 80016c2:	88c4      	ldrh	r4, [r0, #6]
 80016c4:	2301      	movs	r3, #1
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <count_dir.isra.0+0x84>)
 80016c8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80016cc:	2000      	movs	r0, #0
 80016ce:	fa04 f103 	lsl.w	r1, r4, r3
 80016d2:	f016 ffbf 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80016d6:	f016 fe7d 	bl	80183d4 <UTIL_LCD_GetFont>
 80016da:	88c1      	ldrh	r1, [r0, #6]
 80016dc:	462a      	mov	r2, r5
 80016de:	2301      	movs	r3, #1
 80016e0:	2000      	movs	r0, #0
 80016e2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80016e6:	f016 ffb5 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80016ea:	6830      	ldr	r0, [r6, #0]
 80016ec:	f7ff fe40 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80016f0:	2002      	movs	r0, #2
 80016f2:	f005 fb51 	bl	8006d98 <BSP_LED_On>
    while (1);
 80016f6:	e7fe      	b.n	80016f6 <count_dir.isra.0+0x7e>
 80016f8:	30007144 	.word	0x30007144
 80016fc:	0802bdb0 	.word	0x0802bdb0

08001700 <write_txt.isra.0>:
static void write_txt(char *path, char *content, BYTE flags, AppContext_TypeDef *app)
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	4605      	mov	r5, r0
 8001704:	b082      	sub	sp, #8
 8001706:	460c      	mov	r4, r1
  if (f_open(&File, path, flags) != FR_OK)
 8001708:	481c      	ldr	r0, [pc, #112]	; (800177c <write_txt.isra.0+0x7c>)
 800170a:	4629      	mov	r1, r5
static void write_txt(char *path, char *content, BYTE flags, AppContext_TypeDef *app)
 800170c:	461e      	mov	r6, r3
  if (f_open(&File, path, flags) != FR_OK)
 800170e:	f013 f923 	bl	8014958 <f_open>
 8001712:	b1d8      	cbz	r0, 800174c <write_txt.isra.0+0x4c>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create file", CENTER_MODE);
 8001714:	f016 fe5e 	bl	80183d4 <UTIL_LCD_GetFont>
 8001718:	88c1      	ldrh	r1, [r0, #6]
 800171a:	2301      	movs	r3, #1
 800171c:	4a18      	ldr	r2, [pc, #96]	; (8001780 <write_txt.isra.0+0x80>)
 800171e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001722:	2000      	movs	r0, #0
 8001724:	4099      	lsls	r1, r3
 8001726:	f016 ff95 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 800172a:	f016 fe53 	bl	80183d4 <UTIL_LCD_GetFont>
 800172e:	88c1      	ldrh	r1, [r0, #6]
 8001730:	462a      	mov	r2, r5
 8001732:	2301      	movs	r3, #1
 8001734:	2000      	movs	r0, #0
 8001736:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800173a:	f016 ff8b 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 800173e:	6830      	ldr	r0, [r6, #0]
 8001740:	f7ff fe16 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001744:	2002      	movs	r0, #2
 8001746:	f005 fb27 	bl	8006d98 <BSP_LED_On>
    while (1);
 800174a:	e7fe      	b.n	800174a <write_txt.isra.0+0x4a>
  res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 800174c:	4620      	mov	r0, r4
 800174e:	f7fe fdd1 	bl	80002f4 <strlen>
 8001752:	ab01      	add	r3, sp, #4
 8001754:	4602      	mov	r2, r0
 8001756:	4621      	mov	r1, r4
 8001758:	4808      	ldr	r0, [pc, #32]	; (800177c <write_txt.isra.0+0x7c>)
 800175a:	f013 fcb3 	bl	80150c4 <f_write>
  if (res != FR_OK)
 800175e:	b100      	cbz	r0, 8001762 <write_txt.isra.0+0x62>
    while (1);
 8001760:	e7fe      	b.n	8001760 <write_txt.isra.0+0x60>
  if (byteswritten != strlen(content))
 8001762:	4620      	mov	r0, r4
 8001764:	f7fe fdc6 	bl	80002f4 <strlen>
 8001768:	9b01      	ldr	r3, [sp, #4]
 800176a:	4298      	cmp	r0, r3
 800176c:	d000      	beq.n	8001770 <write_txt.isra.0+0x70>
    while (1);
 800176e:	e7fe      	b.n	800176e <write_txt.isra.0+0x6e>
  f_close(&File);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <write_txt.isra.0+0x7c>)
 8001772:	f013 fe07 	bl	8015384 <f_close>
}
 8001776:	b002      	add	sp, #8
 8001778:	bd70      	pop	{r4, r5, r6, pc}
 800177a:	bf00      	nop
 800177c:	30006bc8 	.word	0x30006bc8
 8001780:	0802bdd0 	.word	0x0802bdd0

08001784 <write_raw.isra.0>:
static void write_raw(char *path, uint8_t *buffer, size_t length, AppContext_TypeDef *app)
 8001784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001788:	4605      	mov	r5, r0
 800178a:	b082      	sub	sp, #8
 800178c:	4617      	mov	r7, r2
 800178e:	4688      	mov	r8, r1
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001790:	220a      	movs	r2, #10
 8001792:	482a      	ldr	r0, [pc, #168]	; (800183c <write_raw.isra.0+0xb8>)
 8001794:	4629      	mov	r1, r5
static void write_raw(char *path, uint8_t *buffer, size_t length, AppContext_TypeDef *app)
 8001796:	461e      	mov	r6, r3
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001798:	f013 f8de 	bl	8014958 <f_open>
  if (res != FR_OK)
 800179c:	b1e8      	cbz	r0, 80017da <write_raw.isra.0+0x56>
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot create file on uSD", CENTER_MODE);
 800179e:	f016 fe19 	bl	80183d4 <UTIL_LCD_GetFont>
 80017a2:	88c1      	ldrh	r1, [r0, #6]
 80017a4:	2301      	movs	r3, #1
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <write_raw.isra.0+0xbc>)
 80017a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80017ac:	2000      	movs	r0, #0
 80017ae:	0089      	lsls	r1, r1, #2
 80017b0:	f016 ff50 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 80017b4:	f016 fe0e 	bl	80183d4 <UTIL_LCD_GetFont>
 80017b8:	88c1      	ldrh	r1, [r0, #6]
 80017ba:	462a      	mov	r2, r5
 80017bc:	2301      	movs	r3, #1
 80017be:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80017c2:	2000      	movs	r0, #0
 80017c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80017c8:	f016 ff44 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80017cc:	6830      	ldr	r0, [r6, #0]
 80017ce:	f7ff fdcf 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f005 fae0 	bl	8006d98 <BSP_LED_On>
    while (1);
 80017d8:	e7fe      	b.n	80017d8 <write_raw.isra.0+0x54>
  __ASM volatile ("cpsid i" : : : "memory");
 80017da:	4604      	mov	r4, r0
 80017dc:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 80017de:	4817      	ldr	r0, [pc, #92]	; (800183c <write_raw.isra.0+0xb8>)
 80017e0:	4641      	mov	r1, r8
 80017e2:	ab01      	add	r3, sp, #4
 80017e4:	463a      	mov	r2, r7
 80017e6:	f013 fc6d 	bl	80150c4 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 80017ea:	b662      	cpsie	i
  f_close(&File);
 80017ec:	4813      	ldr	r0, [pc, #76]	; (800183c <write_raw.isra.0+0xb8>)
 80017ee:	f013 fdc9 	bl	8015384 <f_close>
  if (byteswritten != length)
 80017f2:	9b01      	ldr	r3, [sp, #4]
 80017f4:	429f      	cmp	r7, r3
 80017f6:	d102      	bne.n	80017fe <write_raw.isra.0+0x7a>
}
 80017f8:	b002      	add	sp, #8
 80017fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 80017fe:	f016 fde9 	bl	80183d4 <UTIL_LCD_GetFont>
 8001802:	88c1      	ldrh	r1, [r0, #6]
 8001804:	2301      	movs	r3, #1
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <write_raw.isra.0+0xc0>)
 8001808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800180c:	4620      	mov	r0, r4
 800180e:	0089      	lsls	r1, r1, #2
 8001810:	f016 ff20 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001814:	f016 fdde 	bl	80183d4 <UTIL_LCD_GetFont>
 8001818:	4603      	mov	r3, r0
 800181a:	4620      	mov	r0, r4
 800181c:	462a      	mov	r2, r5
 800181e:	88d9      	ldrh	r1, [r3, #6]
 8001820:	2301      	movs	r3, #1
 8001822:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001826:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800182a:	f016 ff13 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 800182e:	6830      	ldr	r0, [r6, #0]
 8001830:	f7ff fd9e 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001834:	2002      	movs	r0, #2
 8001836:	f005 faaf 	bl	8006d98 <BSP_LED_On>
    while (1);
 800183a:	e7fe      	b.n	800183a <write_raw.isra.0+0xb6>
 800183c:	30006998 	.word	0x30006998
 8001840:	0802bdf0 	.word	0x0802bdf0
 8001844:	0802be0c 	.word	0x0802be0c

08001848 <write_bmp.isra.0>:
static void write_bmp(char *path, image_t *img, AppContext_TypeDef *app)
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	460f      	mov	r7, r1
 800184c:	4605      	mov	r5, r0
 800184e:	4616      	mov	r6, r2
  if (strcmp(&path[strlen(path) - 4], ".bmp") != 0)
 8001850:	f7fe fd50 	bl	80002f4 <strlen>
 8001854:	3804      	subs	r0, #4
 8001856:	4916      	ldr	r1, [pc, #88]	; (80018b0 <write_bmp.isra.0+0x68>)
 8001858:	4428      	add	r0, r5
 800185a:	f7fe fd41 	bl	80002e0 <strcmp>
 800185e:	b100      	cbz	r0, 8001862 <write_bmp.isra.0+0x1a>
    while (1); /* Format not supported */
 8001860:	e7fe      	b.n	8001860 <write_bmp.isra.0+0x18>
  if (STM32Ipl_WriteImage(img, path) != stm32ipl_err_Ok)
 8001862:	4604      	mov	r4, r0
 8001864:	4629      	mov	r1, r5
 8001866:	4638      	mov	r0, r7
 8001868:	f016 f9b6 	bl	8017bd8 <STM32Ipl_WriteImage>
 800186c:	b900      	cbnz	r0, 8001870 <write_bmp.isra.0+0x28>
}
 800186e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001870:	f016 fdb0 	bl	80183d4 <UTIL_LCD_GetFont>
 8001874:	88c1      	ldrh	r1, [r0, #6]
 8001876:	2301      	movs	r3, #1
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <write_bmp.isra.0+0x6c>)
 800187a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800187e:	4620      	mov	r0, r4
 8001880:	0089      	lsls	r1, r1, #2
 8001882:	f016 fee7 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001886:	f016 fda5 	bl	80183d4 <UTIL_LCD_GetFont>
 800188a:	4603      	mov	r3, r0
 800188c:	4620      	mov	r0, r4
 800188e:	462a      	mov	r2, r5
 8001890:	88d9      	ldrh	r1, [r3, #6]
 8001892:	2301      	movs	r3, #1
 8001894:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001898:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800189c:	f016 feda 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80018a0:	6830      	ldr	r0, [r6, #0]
 80018a2:	f7ff fd65 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80018a6:	2002      	movs	r0, #2
 80018a8:	f005 fa76 	bl	8006d98 <BSP_LED_On>
    while (1);
 80018ac:	e7fe      	b.n	80018ac <write_bmp.isra.0+0x64>
 80018ae:	bf00      	nop
 80018b0:	0802c1ec 	.word	0x0802c1ec
 80018b4:	0802be0c 	.word	0x0802be0c

080018b8 <UartCmd_Upload_NonRegression_Report>:
{
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80018bc:	2202      	movs	r2, #2
 80018be:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <UartCmd_Upload_NonRegression_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80018c4:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80018c8:	f002 fad6 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80018cc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80018d0:	490b      	ldr	r1, [pc, #44]	; (8001900 <UartCmd_Upload_NonRegression_Report+0x48>)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f00e fb7e 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 80018d8:	b958      	cbnz	r0, 80018f2 <UartCmd_Upload_NonRegression_Report+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80018da:	4620      	mov	r0, r4
 80018dc:	f00e fda4 	bl	8010428 <HAL_UART_GetState>
 80018e0:	2820      	cmp	r0, #32
 80018e2:	d1fa      	bne.n	80018da <UartCmd_Upload_NonRegression_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80018e4:	4620      	mov	r0, r4
 80018e6:	220a      	movs	r2, #10
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <UartCmd_Upload_NonRegression_Report+0x4c>)
 80018ea:	f00e fbc3 	bl	8010074 <HAL_UART_Receive_DMA>
 80018ee:	b918      	cbnz	r0, 80018f8 <UartCmd_Upload_NonRegression_Report+0x40>
}
 80018f0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80018f2:	f002 fb07 	bl	8003f04 <Error_Handler>
 80018f6:	e7f0      	b.n	80018da <UartCmd_Upload_NonRegression_Report+0x22>
}
 80018f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80018fc:	f002 bb02 	b.w	8003f04 <Error_Handler>
 8001900:	d0cb08a0 	.word	0xd0cb08a0
 8001904:	240618e0 	.word	0x240618e0

08001908 <UartCmd_Upload_Timing_Report>:
{
 8001908:	b510      	push	{r4, lr}
 800190a:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800190c:	2202      	movs	r2, #2
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001912:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001916:	f002 faaf 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800191a:	2214      	movs	r2, #20
 800191c:	490b      	ldr	r1, [pc, #44]	; (800194c <UartCmd_Upload_Timing_Report+0x44>)
 800191e:	4620      	mov	r0, r4
 8001920:	f00e fb58 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001924:	b958      	cbnz	r0, 800193e <UartCmd_Upload_Timing_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001926:	4620      	mov	r0, r4
 8001928:	f00e fd7e 	bl	8010428 <HAL_UART_GetState>
 800192c:	2820      	cmp	r0, #32
 800192e:	d1fa      	bne.n	8001926 <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001930:	4620      	mov	r0, r4
 8001932:	220a      	movs	r2, #10
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <UartCmd_Upload_Timing_Report+0x48>)
 8001936:	f00e fb9d 	bl	8010074 <HAL_UART_Receive_DMA>
 800193a:	b918      	cbnz	r0, 8001944 <UartCmd_Upload_Timing_Report+0x3c>
}
 800193c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800193e:	f002 fae1 	bl	8003f04 <Error_Handler>
 8001942:	e7f0      	b.n	8001926 <UartCmd_Upload_Timing_Report+0x1e>
}
 8001944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001948:	f002 badc 	b.w	8003f04 <Error_Handler>
 800194c:	d0de0b20 	.word	0xd0de0b20
 8001950:	240618e0 	.word	0x240618e0

08001954 <UartCmd_Get_Dump_Output_Data_Size>:
{
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4604      	mov	r4, r0
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001958:	4d12      	ldr	r5, [pc, #72]	; (80019a4 <UartCmd_Get_Dump_Output_Data_Size+0x50>)
 800195a:	f646 1378 	movw	r3, #27000	; 0x6978
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800195e:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001960:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001964:	4628      	mov	r0, r5
 8001966:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 800196a:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800196c:	f002 fa84 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001970:	4629      	mov	r1, r5
 8001972:	2202      	movs	r2, #2
 8001974:	4620      	mov	r0, r4
 8001976:	f00e fb2d 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 800197a:	b958      	cbnz	r0, 8001994 <UartCmd_Get_Dump_Output_Data_Size+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800197c:	4620      	mov	r0, r4
 800197e:	f00e fd53 	bl	8010428 <HAL_UART_GetState>
 8001982:	2820      	cmp	r0, #32
 8001984:	d1fa      	bne.n	800197c <UartCmd_Get_Dump_Output_Data_Size+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001986:	4620      	mov	r0, r4
 8001988:	220a      	movs	r2, #10
 800198a:	4907      	ldr	r1, [pc, #28]	; (80019a8 <UartCmd_Get_Dump_Output_Data_Size+0x54>)
 800198c:	f00e fb72 	bl	8010074 <HAL_UART_Receive_DMA>
 8001990:	b918      	cbnz	r0, 800199a <UartCmd_Get_Dump_Output_Data_Size+0x46>
}
 8001992:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001994:	f002 fab6 	bl	8003f04 <Error_Handler>
 8001998:	e7f0      	b.n	800197c <UartCmd_Get_Dump_Output_Data_Size+0x28>
}
 800199a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800199e:	f002 bab1 	b.w	8003f04 <Error_Handler>
 80019a2:	bf00      	nop
 80019a4:	24061900 	.word	0x24061900
 80019a8:	240618e0 	.word	0x240618e0

080019ac <UartCmd_Get_Validation_Report_Size>:
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = Test_Context_Ptr->ValidationContext.acc_num_object_detected*sizeof(struct network_pp_outBuffer) + ONBOARD_VALID_NUM_FILE_PER_DIR*4;
 80019b0:	4d14      	ldr	r5, [pc, #80]	; (8001a04 <UartCmd_Get_Validation_Report_Size+0x58>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80019b2:	2202      	movs	r2, #2
 80019b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((uint32_t*)aTxBuffer) = Test_Context_Ptr->ValidationContext.acc_num_object_detected*sizeof(struct network_pp_outBuffer) + ONBOARD_VALID_NUM_FILE_PER_DIR*4;
 80019b8:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80019bc:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80019c0:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = Test_Context_Ptr->ValidationContext.acc_num_object_detected*sizeof(struct network_pp_outBuffer) + ONBOARD_VALID_NUM_FILE_PER_DIR*4;
 80019c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	3350      	adds	r3, #80	; 0x50
 80019ca:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80019cc:	f002 fa54 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80019d0:	4629      	mov	r1, r5
 80019d2:	4620      	mov	r0, r4
 80019d4:	2204      	movs	r2, #4
 80019d6:	f00e fafd 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 80019da:	b958      	cbnz	r0, 80019f4 <UartCmd_Get_Validation_Report_Size+0x48>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80019dc:	4620      	mov	r0, r4
 80019de:	f00e fd23 	bl	8010428 <HAL_UART_GetState>
 80019e2:	2820      	cmp	r0, #32
 80019e4:	d1fa      	bne.n	80019dc <UartCmd_Get_Validation_Report_Size+0x30>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80019e6:	4620      	mov	r0, r4
 80019e8:	220a      	movs	r2, #10
 80019ea:	4907      	ldr	r1, [pc, #28]	; (8001a08 <UartCmd_Get_Validation_Report_Size+0x5c>)
 80019ec:	f00e fb42 	bl	8010074 <HAL_UART_Receive_DMA>
 80019f0:	b918      	cbnz	r0, 80019fa <UartCmd_Get_Validation_Report_Size+0x4e>
}
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80019f4:	f002 fa86 	bl	8003f04 <Error_Handler>
 80019f8:	e7f0      	b.n	80019dc <UartCmd_Get_Validation_Report_Size+0x30>
}
 80019fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80019fe:	f002 ba81 	b.w	8003f04 <Error_Handler>
 8001a02:	bf00      	nop
 8001a04:	24061900 	.word	0x24061900
 8001a08:	240618e0 	.word	0x240618e0

08001a0c <UartCmd_Upload_Dump_Output_Data>:
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4604      	mov	r4, r0
 8001a10:	2202      	movs	r2, #2
 8001a12:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <UartCmd_Upload_Dump_Output_Data+0x48>)
 8001a18:	f204 446c 	addw	r4, r4, #1132	; 0x46c
 8001a1c:	f002 fa2c 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
 8001a20:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001a24:	490b      	ldr	r1, [pc, #44]	; (8001a54 <UartCmd_Upload_Dump_Output_Data+0x48>)
 8001a26:	4620      	mov	r0, r4
 8001a28:	f00e fad4 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001a2c:	b958      	cbnz	r0, 8001a46 <UartCmd_Upload_Dump_Output_Data+0x3a>
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f00e fcfa 	bl	8010428 <HAL_UART_GetState>
 8001a34:	2820      	cmp	r0, #32
 8001a36:	d1fa      	bne.n	8001a2e <UartCmd_Upload_Dump_Output_Data+0x22>
 8001a38:	4620      	mov	r0, r4
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	4906      	ldr	r1, [pc, #24]	; (8001a58 <UartCmd_Upload_Dump_Output_Data+0x4c>)
 8001a3e:	f00e fb19 	bl	8010074 <HAL_UART_Receive_DMA>
 8001a42:	b918      	cbnz	r0, 8001a4c <UartCmd_Upload_Dump_Output_Data+0x40>
 8001a44:	bd10      	pop	{r4, pc}
 8001a46:	f002 fa5d 	bl	8003f04 <Error_Handler>
 8001a4a:	e7f0      	b.n	8001a2e <UartCmd_Upload_Dump_Output_Data+0x22>
 8001a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a50:	f002 ba58 	b.w	8003f04 <Error_Handler>
 8001a54:	d0cb08a0 	.word	0xd0cb08a0
 8001a58:	240618e0 	.word	0x240618e0

08001a5c <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5e:	4d32      	ldr	r5, [pc, #200]	; (8001b28 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8001a60:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001a62:	2202      	movs	r2, #2
 8001a64:	4931      	ldr	r1, [pc, #196]	; (8001b2c <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8001a66:	4628      	mov	r0, r5
 8001a68:	4f31      	ldr	r7, [pc, #196]	; (8001b30 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001a6a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001a6e:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001a72:	f002 fa01 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f00e faa9 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001a82:	2800      	cmp	r0, #0
 8001a84:	d142      	bne.n	8001b0c <UartCmd_Upload_NonRegression_Debug_Report+0xb0>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001a86:	4620      	mov	r0, r4
 8001a88:	f00e fcce 	bl	8010428 <HAL_UART_GetState>
 8001a8c:	2820      	cmp	r0, #32
 8001a8e:	d1fa      	bne.n	8001a86 <UartCmd_Upload_NonRegression_Debug_Report+0x2a>
    for(i=0;i<dma_xfer_num;i++)
 8001a90:	4435      	add	r5, r6
 8001a92:	42af      	cmp	r7, r5
 8001a94:	d1ef      	bne.n	8001a76 <UartCmd_Upload_NonRegression_Debug_Report+0x1a>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001a96:	f246 3279 	movw	r2, #25465	; 0x6379
 8001a9a:	4925      	ldr	r1, [pc, #148]	; (8001b30 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f00e fa99 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d13c      	bne.n	8001b20 <UartCmd_Upload_NonRegression_Debug_Report+0xc4>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f00e fcbe 	bl	8010428 <HAL_UART_GetState>
 8001aac:	2820      	cmp	r0, #32
 8001aae:	d1fa      	bne.n	8001aa6 <UartCmd_Upload_NonRegression_Debug_Report+0x4a>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ab0:	4d20      	ldr	r5, [pc, #128]	; (8001b34 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001ab2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001ab6:	4e20      	ldr	r6, [pc, #128]	; (8001b38 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ab8:	2202      	movs	r2, #2
 8001aba:	491c      	ldr	r1, [pc, #112]	; (8001b2c <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8001abc:	4628      	mov	r0, r5
 8001abe:	f002 f9db 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f00e fa83 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001ace:	b9d0      	cbnz	r0, 8001b06 <UartCmd_Upload_NonRegression_Debug_Report+0xaa>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f00e fca9 	bl	8010428 <HAL_UART_GetState>
 8001ad6:	2820      	cmp	r0, #32
 8001ad8:	d1fa      	bne.n	8001ad0 <UartCmd_Upload_NonRegression_Debug_Report+0x74>
    for(i=0;i<dma_xfer_num;i++)
 8001ada:	443d      	add	r5, r7
 8001adc:	42b5      	cmp	r5, r6
 8001ade:	d1f0      	bne.n	8001ac2 <UartCmd_Upload_NonRegression_Debug_Report+0x66>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001ae0:	f246 3279 	movw	r2, #25465	; 0x6379
 8001ae4:	4914      	ldr	r1, [pc, #80]	; (8001b38 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f00e fa74 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001aec:	b9a8      	cbnz	r0, 8001b1a <UartCmd_Upload_NonRegression_Debug_Report+0xbe>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f00e fc9a 	bl	8010428 <HAL_UART_GetState>
 8001af4:	2820      	cmp	r0, #32
 8001af6:	d1fa      	bne.n	8001aee <UartCmd_Upload_NonRegression_Debug_Report+0x92>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001af8:	4620      	mov	r0, r4
 8001afa:	220a      	movs	r2, #10
 8001afc:	490f      	ldr	r1, [pc, #60]	; (8001b3c <UartCmd_Upload_NonRegression_Debug_Report+0xe0>)
 8001afe:	f00e fab9 	bl	8010074 <HAL_UART_Receive_DMA>
 8001b02:	b930      	cbnz	r0, 8001b12 <UartCmd_Upload_NonRegression_Debug_Report+0xb6>
}
 8001b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8001b06:	f002 f9fd 	bl	8003f04 <Error_Handler>
 8001b0a:	e7e1      	b.n	8001ad0 <UartCmd_Upload_NonRegression_Debug_Report+0x74>
 8001b0c:	f002 f9fa 	bl	8003f04 <Error_Handler>
 8001b10:	e7b9      	b.n	8001a86 <UartCmd_Upload_NonRegression_Debug_Report+0x2a>
}
 8001b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8001b16:	f002 b9f5 	b.w	8003f04 <Error_Handler>
        Error_Handler();
 8001b1a:	f002 f9f3 	bl	8003f04 <Error_Handler>
 8001b1e:	e7e6      	b.n	8001aee <UartCmd_Upload_NonRegression_Debug_Report+0x92>
 8001b20:	f002 f9f0 	bl	8003f04 <Error_Handler>
 8001b24:	e7bf      	b.n	8001aa6 <UartCmd_Upload_NonRegression_Debug_Report+0x4a>
 8001b26:	bf00      	nop
 8001b28:	d0cb4420 	.word	0xd0cb4420
 8001b2c:	00096380 	.word	0x00096380
 8001b30:	d0d44417 	.word	0xd0d44417
 8001b34:	d0d4a7a0 	.word	0xd0d4a7a0
 8001b38:	d0dda797 	.word	0xd0dda797
 8001b3c:	240618e0 	.word	0x240618e0

08001b40 <UartCmd_Get_Valid_Output_Size>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4604      	mov	r4, r0
 8001b44:	4d14      	ldr	r5, [pc, #80]	; (8001b98 <UartCmd_Get_Valid_Output_Size+0x58>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 8001b50:	f204 446c 	addw	r4, r4, #1132	; 0x46c
 8001b54:	4628      	mov	r0, r5
 8001b56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	3350      	adds	r3, #80	; 0x50
 8001b5e:	602b      	str	r3, [r5, #0]
 8001b60:	f002 f98a 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
 8001b64:	4629      	mov	r1, r5
 8001b66:	4620      	mov	r0, r4
 8001b68:	2204      	movs	r2, #4
 8001b6a:	f00e fa33 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001b6e:	b958      	cbnz	r0, 8001b88 <UartCmd_Get_Valid_Output_Size+0x48>
 8001b70:	4620      	mov	r0, r4
 8001b72:	f00e fc59 	bl	8010428 <HAL_UART_GetState>
 8001b76:	2820      	cmp	r0, #32
 8001b78:	d1fa      	bne.n	8001b70 <UartCmd_Get_Valid_Output_Size+0x30>
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	4907      	ldr	r1, [pc, #28]	; (8001b9c <UartCmd_Get_Valid_Output_Size+0x5c>)
 8001b80:	f00e fa78 	bl	8010074 <HAL_UART_Receive_DMA>
 8001b84:	b918      	cbnz	r0, 8001b8e <UartCmd_Get_Valid_Output_Size+0x4e>
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	f002 f9bc 	bl	8003f04 <Error_Handler>
 8001b8c:	e7f0      	b.n	8001b70 <UartCmd_Get_Valid_Output_Size+0x30>
 8001b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b92:	f002 b9b7 	b.w	8003f04 <Error_Handler>
 8001b96:	bf00      	nop
 8001b98:	24061900 	.word	0x24061900
 8001b9c:	240618e0 	.word	0x240618e0

08001ba0 <UartCmd_Get_NonRegression_Report_Size>:
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer);
 8001ba4:	4d12      	ldr	r5, [pc, #72]	; (8001bf0 <UartCmd_Get_NonRegression_Report_Size+0x50>)
 8001ba6:	f44f 7334 	mov.w	r3, #720	; 0x2d0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001baa:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001bac:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((uint32_t*)aTxBuffer) = AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer);
 8001bb6:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001bb8:	f002 f95e 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f00e fa07 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001bc6:	b958      	cbnz	r0, 8001be0 <UartCmd_Get_NonRegression_Report_Size+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f00e fc2d 	bl	8010428 <HAL_UART_GetState>
 8001bce:	2820      	cmp	r0, #32
 8001bd0:	d1fa      	bne.n	8001bc8 <UartCmd_Get_NonRegression_Report_Size+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <UartCmd_Get_NonRegression_Report_Size+0x54>)
 8001bd8:	f00e fa4c 	bl	8010074 <HAL_UART_Receive_DMA>
 8001bdc:	b918      	cbnz	r0, 8001be6 <UartCmd_Get_NonRegression_Report_Size+0x46>
}
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001be0:	f002 f990 	bl	8003f04 <Error_Handler>
 8001be4:	e7f0      	b.n	8001bc8 <UartCmd_Get_NonRegression_Report_Size+0x28>
}
 8001be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001bea:	f002 b98b 	b.w	8003f04 <Error_Handler>
 8001bee:	bf00      	nop
 8001bf0:	24061900 	.word	0x24061900
 8001bf4:	240618e0 	.word	0x240618e0

08001bf8 <UartCmd_Get_Timing_Report_Size>:
{
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8001bfc:	4d11      	ldr	r5, [pc, #68]	; (8001c44 <UartCmd_Get_Timing_Report_Size+0x4c>)
 8001bfe:	2314      	movs	r3, #20
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001c00:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001c02:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001c06:	4628      	mov	r0, r5
 8001c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8001c0c:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001c0e:	f002 f933 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001c12:	4629      	mov	r1, r5
 8001c14:	2204      	movs	r2, #4
 8001c16:	4620      	mov	r0, r4
 8001c18:	f00e f9dc 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001c1c:	b958      	cbnz	r0, 8001c36 <UartCmd_Get_Timing_Report_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f00e fc02 	bl	8010428 <HAL_UART_GetState>
 8001c24:	2820      	cmp	r0, #32
 8001c26:	d1fa      	bne.n	8001c1e <UartCmd_Get_Timing_Report_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001c28:	4620      	mov	r0, r4
 8001c2a:	220a      	movs	r2, #10
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <UartCmd_Get_Timing_Report_Size+0x50>)
 8001c2e:	f00e fa21 	bl	8010074 <HAL_UART_Receive_DMA>
 8001c32:	b918      	cbnz	r0, 8001c3c <UartCmd_Get_Timing_Report_Size+0x44>
}
 8001c34:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001c36:	f002 f965 	bl	8003f04 <Error_Handler>
 8001c3a:	e7f0      	b.n	8001c1e <UartCmd_Get_Timing_Report_Size+0x26>
}
 8001c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001c40:	f002 b960 	b.w	8003f04 <Error_Handler>
 8001c44:	24061900 	.word	0x24061900
 8001c48:	240618e0 	.word	0x240618e0

08001c4c <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 8001c4c:	b538      	push	{r3, r4, r5, lr}
 8001c4e:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8001c50:	4d11      	ldr	r5, [pc, #68]	; (8001c98 <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001c54:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001c56:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8001c60:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001c62:	f002 f909 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001c66:	4629      	mov	r1, r5
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f00e f9b2 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001c70:	b958      	cbnz	r0, 8001c8a <UartCmd_Get_NonRegression_Debug_Report_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001c72:	4620      	mov	r0, r4
 8001c74:	f00e fbd8 	bl	8010428 <HAL_UART_GetState>
 8001c78:	2820      	cmp	r0, #32
 8001c7a:	d1fa      	bne.n	8001c72 <UartCmd_Get_NonRegression_Debug_Report_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	220a      	movs	r2, #10
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x54>)
 8001c82:	f00e f9f7 	bl	8010074 <HAL_UART_Receive_DMA>
 8001c86:	b918      	cbnz	r0, 8001c90 <UartCmd_Get_NonRegression_Debug_Report_Size+0x44>
}
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001c8a:	f002 f93b 	bl	8003f04 <Error_Handler>
 8001c8e:	e7f0      	b.n	8001c72 <UartCmd_Get_NonRegression_Debug_Report_Size+0x26>
}
 8001c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001c94:	f002 b936 	b.w	8003f04 <Error_Handler>
 8001c98:	24061900 	.word	0x24061900
 8001c9c:	0012c6e0 	.word	0x0012c6e0
 8001ca0:	240618e0 	.word	0x240618e0

08001ca4 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8001ca8:	4d11      	ldr	r5, [pc, #68]	; (8001cf0 <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001cac:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001cae:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8001cb8:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001cba:	f002 f8dd 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f00e f986 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001cc8:	b958      	cbnz	r0, 8001ce2 <UartCmd_Get_Dump_Whole_Data_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f00e fbac 	bl	8010428 <HAL_UART_GetState>
 8001cd0:	2820      	cmp	r0, #32
 8001cd2:	d1fa      	bne.n	8001cca <UartCmd_Get_Dump_Whole_Data_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	220a      	movs	r2, #10
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <UartCmd_Get_Dump_Whole_Data_Size+0x54>)
 8001cda:	f00e f9cb 	bl	8010074 <HAL_UART_Receive_DMA>
 8001cde:	b918      	cbnz	r0, 8001ce8 <UartCmd_Get_Dump_Whole_Data_Size+0x44>
}
 8001ce0:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001ce2:	f002 f90f 	bl	8003f04 <Error_Handler>
 8001ce6:	e7f0      	b.n	8001cca <UartCmd_Get_Dump_Whole_Data_Size+0x26>
}
 8001ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001cec:	f002 b90a 	b.w	8003f04 <Error_Handler>
 8001cf0:	24061900 	.word	0x24061900
 8001cf4:	00096370 	.word	0x00096370
 8001cf8:	240618e0 	.word	0x240618e0

08001cfc <UartCmd_Get_Validation_Final_Accuracy>:
{
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4604      	mov	r4, r0
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001d00:	4d12      	ldr	r5, [pc, #72]	; (8001d4c <UartCmd_Get_Validation_Final_Accuracy+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d02:	2202      	movs	r2, #2
 8001d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001d08:	f204 4344 	addw	r3, r4, #1092	; 0x444
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001d0c:	f204 446c 	addw	r4, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d10:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d16:	f002 f8af 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	2204      	movs	r2, #4
 8001d20:	f00e f958 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001d24:	b958      	cbnz	r0, 8001d3e <UartCmd_Get_Validation_Final_Accuracy+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f00e fb7e 	bl	8010428 <HAL_UART_GetState>
 8001d2c:	2820      	cmp	r0, #32
 8001d2e:	d1fa      	bne.n	8001d26 <UartCmd_Get_Validation_Final_Accuracy+0x2a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001d30:	4620      	mov	r0, r4
 8001d32:	220a      	movs	r2, #10
 8001d34:	4906      	ldr	r1, [pc, #24]	; (8001d50 <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 8001d36:	f00e f99d 	bl	8010074 <HAL_UART_Receive_DMA>
 8001d3a:	b918      	cbnz	r0, 8001d44 <UartCmd_Get_Validation_Final_Accuracy+0x48>
}
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001d3e:	f002 f8e1 	bl	8003f04 <Error_Handler>
 8001d42:	e7f0      	b.n	8001d26 <UartCmd_Get_Validation_Final_Accuracy+0x2a>
}
 8001d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001d48:	f002 b8dc 	b.w	8003f04 <Error_Handler>
 8001d4c:	24061900 	.word	0x24061900
 8001d50:	240618e0 	.word	0x240618e0

08001d54 <UartCmd_Upload_Valid_Output>:
 8001d54:	f8d0 2448 	ldr.w	r2, [r0, #1096]	; 0x448
 8001d58:	f643 01a0 	movw	r1, #14496	; 0x38a0
 8001d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	00d4      	lsls	r4, r2, #3
 8001d64:	3450      	adds	r4, #80	; 0x50
 8001d66:	428c      	cmp	r4, r1
 8001d68:	d900      	bls.n	8001d6c <UartCmd_Upload_Valid_Output+0x18>
 8001d6a:	e7fe      	b.n	8001d6a <UartCmd_Upload_Valid_Output+0x16>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2202      	movs	r2, #2
 8001d70:	480e      	ldr	r0, [pc, #56]	; (8001dac <UartCmd_Upload_Valid_Output+0x58>)
 8001d72:	f203 456c 	addw	r5, r3, #1132	; 0x46c
 8001d76:	f002 f87f 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <UartCmd_Upload_Valid_Output+0x58>)
 8001d7c:	b2a2      	uxth	r2, r4
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f00e f928 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001d84:	b978      	cbnz	r0, 8001da6 <UartCmd_Upload_Valid_Output+0x52>
 8001d86:	4628      	mov	r0, r5
 8001d88:	f00e fb4e 	bl	8010428 <HAL_UART_GetState>
 8001d8c:	2820      	cmp	r0, #32
 8001d8e:	d1fa      	bne.n	8001d86 <UartCmd_Upload_Valid_Output+0x32>
 8001d90:	4628      	mov	r0, r5
 8001d92:	220a      	movs	r2, #10
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <UartCmd_Upload_Valid_Output+0x5c>)
 8001d96:	f00e f96d 	bl	8010074 <HAL_UART_Receive_DMA>
 8001d9a:	b900      	cbnz	r0, 8001d9e <UartCmd_Upload_Valid_Output+0x4a>
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
 8001d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001da2:	f002 b8af 	b.w	8003f04 <Error_Handler>
 8001da6:	f002 f8ad 	bl	8003f04 <Error_Handler>
 8001daa:	e7ec      	b.n	8001d86 <UartCmd_Upload_Valid_Output+0x32>
 8001dac:	d0cb0b80 	.word	0xd0cb0b80
 8001db0:	240618e0 	.word	0x240618e0

08001db4 <UartCmd_Trigger_Capture>:
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8001db6:	f890 2454 	ldrb.w	r2, [r0, #1108]	; 0x454
{
 8001dba:	4603      	mov	r3, r0
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8001dbc:	2a04      	cmp	r2, #4
 8001dbe:	d108      	bne.n	8001dd2 <UartCmd_Trigger_Capture+0x1e>
 8001dc0:	f8d0 2460 	ldr.w	r2, [r0, #1120]	; 0x460
 8001dc4:	b92a      	cbnz	r2, 8001dd2 <UartCmd_Trigger_Capture+0x1e>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f8c0 2450 	str.w	r2, [r0, #1104]	; 0x450
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8001dcc:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
}
 8001dd0:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8001dd2:	4d14      	ldr	r5, [pc, #80]	; (8001e24 <UartCmd_Trigger_Capture+0x70>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001dd4:	f203 446c 	addw	r4, r3, #1132	; 0x46c
    *(aTxBuffer) = CMD_ERROR_EVT;
 8001dd8:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
    *(aTxBuffer) = CMD_ERROR_EVT;
 8001de2:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001de4:	f002 f848 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001de8:	4629      	mov	r1, r5
 8001dea:	4620      	mov	r0, r4
 8001dec:	2201      	movs	r2, #1
 8001dee:	f00e f8f1 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8001df2:	b978      	cbnz	r0, 8001e14 <UartCmd_Trigger_Capture+0x60>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001df4:	4620      	mov	r0, r4
 8001df6:	f00e fb17 	bl	8010428 <HAL_UART_GetState>
 8001dfa:	2820      	cmp	r0, #32
 8001dfc:	d1fa      	bne.n	8001df4 <UartCmd_Trigger_Capture+0x40>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001dfe:	4620      	mov	r0, r4
 8001e00:	220a      	movs	r2, #10
 8001e02:	4909      	ldr	r1, [pc, #36]	; (8001e28 <UartCmd_Trigger_Capture+0x74>)
 8001e04:	f00e f936 	bl	8010074 <HAL_UART_Receive_DMA>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d0e1      	beq.n	8001dd0 <UartCmd_Trigger_Capture+0x1c>
}
 8001e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001e10:	f002 b878 	b.w	8003f04 <Error_Handler>
      Error_Handler();
 8001e14:	f002 f876 	bl	8003f04 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f00e fb05 	bl	8010428 <HAL_UART_GetState>
 8001e1e:	2820      	cmp	r0, #32
 8001e20:	d1e8      	bne.n	8001df4 <UartCmd_Trigger_Capture+0x40>
 8001e22:	e7ec      	b.n	8001dfe <UartCmd_Trigger_Capture+0x4a>
 8001e24:	24061900 	.word	0x24061900
 8001e28:	240618e0 	.word	0x240618e0

08001e2c <OnBoardValidInit>:
{
 8001e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e30:	4604      	mov	r4, r0
  char msg[64];
  
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/
  
  sprintf(msg, "%s", App_Cxt_Ptr->Test_ContextPtr->ValidationContext.class_path);
 8001e32:	f646 139c 	movw	r3, #27036	; 0x699c
{
 8001e36:	b094      	sub	sp, #80	; 0x50
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001e38:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
  sprintf(msg, "%s", App_Cxt_Ptr->Test_ContextPtr->ValidationContext.class_path);
 8001e3c:	a804      	add	r0, sp, #16
 8001e3e:	58f9      	ldr	r1, [r7, r3]
 8001e40:	f501 7170 	add.w	r1, r1, #960	; 0x3c0
 8001e44:	f021 f8cd 	bl	8022fe2 <strcpy>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001e48:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e4c:	f016 fb1a 	bl	8018484 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	2332      	movs	r3, #50	; 0x32
 8001e56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e5a:	9100      	str	r1, [sp, #0]
 8001e5c:	20c8      	movs	r0, #200	; 0xc8
 8001e5e:	210a      	movs	r1, #10
 8001e60:	f016 fce0 	bl	8018824 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 8001e64:	f016 fab6 	bl	80183d4 <UTIL_LCD_GetFont>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	88c1      	ldrh	r1, [r0, #6]
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	4a6f      	ldr	r2, [pc, #444]	; (800202c <OnBoardValidInit+0x200>)
 8001e70:	f016 fbf0 	bl	8018654 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 8001e74:	f016 faae 	bl	80183d4 <UTIL_LCD_GetFont>
 8001e78:	88c1      	ldrh	r1, [r0, #6]
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <OnBoardValidInit+0x204>)
 8001e7e:	0089      	lsls	r1, r1, #2
 8001e80:	200f      	movs	r0, #15
 8001e82:	f016 fbe7 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)msg, LEFT_MODE);
 8001e86:	f016 faa5 	bl	80183d4 <UTIL_LCD_GetFont>
 8001e8a:	88c1      	ldrh	r1, [r0, #6]
 8001e8c:	aa04      	add	r2, sp, #16
 8001e8e:	2303      	movs	r3, #3
 8001e90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e94:	200f      	movs	r0, #15
 8001e96:	f016 fbdd 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 8001e9a:	f016 fa9b 	bl	80183d4 <UTIL_LCD_GetFont>
 8001e9e:	88c1      	ldrh	r1, [r0, #6]
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	4a64      	ldr	r2, [pc, #400]	; (8002034 <OnBoardValidInit+0x208>)
 8001ea4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ea8:	200f      	movs	r0, #15
 8001eaa:	0049      	lsls	r1, r1, #1
 8001eac:	f016 fbd2 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 8001eb0:	f016 fa90 	bl	80183d4 <UTIL_LCD_GetFont>
 8001eb4:	88c1      	ldrh	r1, [r0, #6]
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <OnBoardValidInit+0x20c>)
 8001eba:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001ebe:	200f      	movs	r0, #15
 8001ec0:	f016 fbc8 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 8001ec4:	f016 fa86 	bl	80183d4 <UTIL_LCD_GetFont>
 8001ec8:	2303      	movs	r3, #3
 8001eca:	88c1      	ldrh	r1, [r0, #6]
 8001ecc:	200f      	movs	r0, #15
 8001ece:	4a5b      	ldr	r2, [pc, #364]	; (800203c <OnBoardValidInit+0x210>)
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	f016 fbbf 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 8001ed6:	f016 fa7d 	bl	80183d4 <UTIL_LCD_GetFont>
 8001eda:	88c1      	ldrh	r1, [r0, #6]
 8001edc:	2303      	movs	r3, #3
 8001ede:	4a58      	ldr	r2, [pc, #352]	; (8002040 <OnBoardValidInit+0x214>)
 8001ee0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001ee4:	200f      	movs	r0, #15
 8001ee6:	f016 fbb5 	bl	8018654 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 8001eea:	f016 fa73 	bl	80183d4 <UTIL_LCD_GetFont>
 8001eee:	88c1      	ldrh	r1, [r0, #6]
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	4a54      	ldr	r2, [pc, #336]	; (8002044 <OnBoardValidInit+0x218>)
 8001ef4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ef8:	200f      	movs	r0, #15
 8001efa:	0089      	lsls	r1, r1, #2
 8001efc:	f016 fbaa 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 8001f00:	f016 fa68 	bl	80183d4 <UTIL_LCD_GetFont>
 8001f04:	88c1      	ldrh	r1, [r0, #6]
 8001f06:	2303      	movs	r3, #3
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <OnBoardValidInit+0x21c>)
 8001f0a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001f0e:	200f      	movs	r0, #15
 8001f10:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8001f14:	f016 fb9e 	bl	8018654 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8001f18:	f646 1394 	movw	r3, #27028	; 0x6994
 8001f1c:	58f8      	ldr	r0, [r7, r3]
 8001f1e:	f7ff fa27 	bl	8001370 <DISPLAY_Refresh>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8001f22:	e002      	b.n	8001f2a <OnBoardValidInit+0xfe>
 8001f24:	f004 ffb2 	bl	8006e8c <BSP_PB_GetState>
 8001f28:	b918      	cbnz	r0, 8001f32 <OnBoardValidInit+0x106>
 8001f2a:	f8d4 0450 	ldr.w	r0, [r4, #1104]	; 0x450
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d0f8      	beq.n	8001f24 <OnBoardValidInit+0xf8>
  BSP_CAMERA_DeInit(0);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f005 fd00 	bl	8007938 <BSP_CAMERA_DeInit>
  sd_error = BSP_SD_Init(0);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f006 fe7f 	bl	8008c3c <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 8001f3e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001f42:	d013      	beq.n	8001f6c <OnBoardValidInit+0x140>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8001f44:	f016 fa46 	bl	80183d4 <UTIL_LCD_GetFont>
 8001f48:	88c1      	ldrh	r1, [r0, #6]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4a3f      	ldr	r2, [pc, #252]	; (800204c <OnBoardValidInit+0x220>)
 8001f4e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001f52:	2000      	movs	r0, #0
 8001f54:	4099      	lsls	r1, r3
 8001f56:	f016 fb7d 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8001f5a:	f646 1394 	movw	r3, #27028	; 0x6994
 8001f5e:	58f8      	ldr	r0, [r7, r3]
 8001f60:	f7ff fa06 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001f64:	2002      	movs	r0, #2
 8001f66:	f004 ff17 	bl	8006d98 <BSP_LED_On>
    while (1)
 8001f6a:	e7fe      	b.n	8001f6a <OnBoardValidInit+0x13e>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8001f6c:	a904      	add	r1, sp, #16
 8001f6e:	4838      	ldr	r0, [pc, #224]	; (8002050 <OnBoardValidInit+0x224>)
 8001f70:	f014 f812 	bl	8015f98 <FATFS_LinkDriver>
 8001f74:	4602      	mov	r2, r0
 8001f76:	b118      	cbz	r0, 8001f80 <OnBoardValidInit+0x154>
    BSP_LED_On(LED_RED);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f004 ff0d 	bl	8006d98 <BSP_LED_On>
    while (1);
 8001f7e:	e7fe      	b.n	8001f7e <OnBoardValidInit+0x152>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8001f80:	a904      	add	r1, sp, #16
 8001f82:	4834      	ldr	r0, [pc, #208]	; (8002054 <OnBoardValidInit+0x228>)
 8001f84:	f012 fc8a 	bl	801489c <f_mount>
 8001f88:	4605      	mov	r5, r0
 8001f8a:	bb98      	cbnz	r0, 8001ff4 <OnBoardValidInit+0x1c8>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 8001f8c:	f504 7870 	add.w	r8, r4, #960	; 0x3c0
 8001f90:	a804      	add	r0, sp, #16
  DIR *dir = &Test_Context_Ptr->ValidationContext.dataset_dir;
 8001f92:	f504 7692 	add.w	r6, r4, #292	; 0x124
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 8001f96:	4641      	mov	r1, r8
 8001f98:	f021 f823 	bl	8022fe2 <strcpy>
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8001f9c:	f646 1194 	movw	r1, #27028	; 0x6994
 8001fa0:	a804      	add	r0, sp, #16
 8001fa2:	4439      	add	r1, r7
 8001fa4:	f7ff fb68 	bl	8001678 <count_dir.isra.0>
 8001fa8:	4602      	mov	r2, r0
  BSP_LED_On(LED_GREEN);
 8001faa:	4628      	mov	r0, r5
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8001fac:	9203      	str	r2, [sp, #12]
  BSP_LED_On(LED_GREEN);
 8001fae:	f004 fef3 	bl	8006d98 <BSP_LED_On>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001fb2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001fb6:	f016 fa65 	bl	8018484 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 8001fba:	4827      	ldr	r0, [pc, #156]	; (8002058 <OnBoardValidInit+0x22c>)
 8001fbc:	f016 fa02 	bl	80183c4 <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 8001fc0:	9a03      	ldr	r2, [sp, #12]
 8001fc2:	4926      	ldr	r1, [pc, #152]	; (800205c <OnBoardValidInit+0x230>)
 8001fc4:	4826      	ldr	r0, [pc, #152]	; (8002060 <OnBoardValidInit+0x234>)
 8001fc6:	f020 ffe3 	bl	8022f90 <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8001fca:	f016 fa03 	bl	80183d4 <UTIL_LCD_GetFont>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	88d1      	ldrh	r1, [r2, #6]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <OnBoardValidInit+0x234>)
 8001fd8:	f016 fb3c 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  f_opendir(dir, valid_dir_path);
 8001fdc:	a904      	add	r1, sp, #16
 8001fde:	4630      	mov	r0, r6
 8001fe0:	f013 fc2a 	bl	8015838 <f_opendir>
  res = f_readdir(dir, &Test_Context_Ptr->ValidationContext.fno);
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 8001fea:	f013 fd2b 	bl	8015a44 <f_readdir>
  if (res != FR_OK)
 8001fee:	4605      	mov	r5, r0
 8001ff0:	b120      	cbz	r0, 8001ffc <OnBoardValidInit+0x1d0>
    while (1);
 8001ff2:	e7fe      	b.n	8001ff2 <OnBoardValidInit+0x1c6>
    BSP_LED_On(LED_RED);
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f004 fecf 	bl	8006d98 <BSP_LED_On>
    while (1);
 8001ffa:	e7fe      	b.n	8001ffa <OnBoardValidInit+0x1ce>
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 8001ffc:	f504 6680 	add.w	r6, r4, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002000:	4641      	mov	r1, r8
 8002002:	4630      	mov	r0, r6
 8002004:	f020 ffe4 	bl	8022fd0 <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002008:	232f      	movs	r3, #47	; 0x2f
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 800200a:	f504 71b7 	add.w	r1, r4, #366	; 0x16e
 800200e:	3001      	adds	r0, #1
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002010:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002014:	f020 ffe5 	bl	8022fe2 <strcpy>
  res = f_opendir(&Test_Context_Ptr->ValidationContext.class_dir, Test_Context_Ptr->ValidationContext.tmp_class_path);
 8002018:	4631      	mov	r1, r6
 800201a:	f504 701c 	add.w	r0, r4, #624	; 0x270
 800201e:	f013 fc0b 	bl	8015838 <f_opendir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 8002022:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
}
 8002026:	b014      	add	sp, #80	; 0x50
 8002028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800202c:	0802be20 	.word	0x0802be20
 8002030:	0802be34 	.word	0x0802be34
 8002034:	0802be64 	.word	0x0802be64
 8002038:	0802be80 	.word	0x0802be80
 800203c:	0802beac 	.word	0x0802beac
 8002040:	0802bed8 	.word	0x0802bed8
 8002044:	0802bee0 	.word	0x0802bee0
 8002048:	0802bf00 	.word	0x0802bf00
 800204c:	0802bf30 	.word	0x0802bf30
 8002050:	0802c2a4 	.word	0x0802c2a4
 8002054:	30006df8 	.word	0x30006df8
 8002058:	24000194 	.word	0x24000194
 800205c:	0802bf4c 	.word	0x0802bf4c
 8002060:	30007378 	.word	0x30007378

08002064 <UartCmd_Trigger_Dump>:
{
 8002064:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002066:	f890 2454 	ldrb.w	r2, [r0, #1108]	; 0x454
{
 800206a:	4603      	mov	r3, r0
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 800206c:	2a03      	cmp	r2, #3
 800206e:	d028      	beq.n	80020c2 <UartCmd_Trigger_Dump+0x5e>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002070:	4d1c      	ldr	r5, [pc, #112]	; (80020e4 <UartCmd_Trigger_Dump+0x80>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002072:	f200 446c 	addw	r4, r0, #1132	; 0x46c
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002076:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002078:	2202      	movs	r2, #2
 800207a:	4628      	mov	r0, r5
 800207c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002080:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002082:	f001 fef9 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	2201      	movs	r2, #1
 800208c:	f00d ffa2 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002090:	b978      	cbnz	r0, 80020b2 <UartCmd_Trigger_Dump+0x4e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002092:	4620      	mov	r0, r4
 8002094:	f00e f9c8 	bl	8010428 <HAL_UART_GetState>
 8002098:	2820      	cmp	r0, #32
 800209a:	d1fa      	bne.n	8002092 <UartCmd_Trigger_Dump+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800209c:	4620      	mov	r0, r4
 800209e:	220a      	movs	r2, #10
 80020a0:	4911      	ldr	r1, [pc, #68]	; (80020e8 <UartCmd_Trigger_Dump+0x84>)
 80020a2:	f00d ffe7 	bl	8010074 <HAL_UART_Receive_DMA>
 80020a6:	b900      	cbnz	r0, 80020aa <UartCmd_Trigger_Dump+0x46>
}
 80020a8:	bd38      	pop	{r3, r4, r5, pc}
 80020aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80020ae:	f001 bf29 	b.w	8003f04 <Error_Handler>
      Error_Handler();
 80020b2:	f001 ff27 	bl	8003f04 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80020b6:	4620      	mov	r0, r4
 80020b8:	f00e f9b6 	bl	8010428 <HAL_UART_GetState>
 80020bc:	2820      	cmp	r0, #32
 80020be:	d1e8      	bne.n	8002092 <UartCmd_Trigger_Dump+0x2e>
 80020c0:	e7ec      	b.n	800209c <UartCmd_Trigger_Dump+0x38>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 80020c2:	880c      	ldrh	r4, [r1, #0]
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80020c4:	2001      	movs	r0, #1
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80020c6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80020ca:	2100      	movs	r1, #0
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80020cc:	f8c3 0450 	str.w	r0, [r3, #1104]	; 0x450
    Test_Context_Ptr->DumpContext.dump_state = 1;
 80020d0:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 80020d4:	f8c3 4458 	str.w	r4, [r3, #1112]	; 0x458
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <UartCmd_Trigger_Dump+0x88>)
}
 80020da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80020de:	f020 b895 	b.w	802220c <memset>
 80020e2:	bf00      	nop
 80020e4:	24061900 	.word	0x24061900
 80020e8:	240618e0 	.word	0x240618e0
 80020ec:	d0cb08a0 	.word	0xd0cb08a0

080020f0 <UartCmd_Upload_Validation_Report>:
  Uart_Tx(Test_Context_Ptr, (uint8_t*)validation_output_buff, sizeof(validation_output_buff), Test_Context_Ptr->ValidationContext.acc_num_object_detected*sizeof(struct network_pp_outBuffer) + ONBOARD_VALID_NUM_FILE_PER_DIR*4);
 80020f0:	f8d0 2448 	ldr.w	r2, [r0, #1096]	; 0x448
  if(TxDataTransferSize > TxDataBufSize)
 80020f4:	f643 01a0 	movw	r1, #14496	; 0x38a0
  Uart_Tx(Test_Context_Ptr, (uint8_t*)validation_output_buff, sizeof(validation_output_buff), Test_Context_Ptr->ValidationContext.acc_num_object_detected*sizeof(struct network_pp_outBuffer) + ONBOARD_VALID_NUM_FILE_PER_DIR*4);
 80020f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
  Uart_Tx(Test_Context_Ptr, (uint8_t*)validation_output_buff, sizeof(validation_output_buff), Test_Context_Ptr->ValidationContext.acc_num_object_detected*sizeof(struct network_pp_outBuffer) + ONBOARD_VALID_NUM_FILE_PER_DIR*4);
 80020fe:	00d4      	lsls	r4, r2, #3
 8002100:	3450      	adds	r4, #80	; 0x50
  if(TxDataTransferSize > TxDataBufSize)
 8002102:	428c      	cmp	r4, r1
 8002104:	d900      	bls.n	8002108 <UartCmd_Upload_Validation_Report+0x18>
    while(1);
 8002106:	e7fe      	b.n	8002106 <UartCmd_Upload_Validation_Report+0x16>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002108:	4603      	mov	r3, r0
 800210a:	2202      	movs	r2, #2
 800210c:	480e      	ldr	r0, [pc, #56]	; (8002148 <UartCmd_Upload_Validation_Report+0x58>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800210e:	f203 456c 	addw	r5, r3, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002112:	f001 feb1 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002116:	490c      	ldr	r1, [pc, #48]	; (8002148 <UartCmd_Upload_Validation_Report+0x58>)
 8002118:	b2a2      	uxth	r2, r4
 800211a:	4628      	mov	r0, r5
 800211c:	f00d ff5a 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002120:	b978      	cbnz	r0, 8002142 <UartCmd_Upload_Validation_Report+0x52>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002122:	4628      	mov	r0, r5
 8002124:	f00e f980 	bl	8010428 <HAL_UART_GetState>
 8002128:	2820      	cmp	r0, #32
 800212a:	d1fa      	bne.n	8002122 <UartCmd_Upload_Validation_Report+0x32>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800212c:	4628      	mov	r0, r5
 800212e:	220a      	movs	r2, #10
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <UartCmd_Upload_Validation_Report+0x5c>)
 8002132:	f00d ff9f 	bl	8010074 <HAL_UART_Receive_DMA>
 8002136:	b900      	cbnz	r0, 800213a <UartCmd_Upload_Validation_Report+0x4a>
}
 8002138:	bd38      	pop	{r3, r4, r5, pc}
 800213a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800213e:	f001 bee1 	b.w	8003f04 <Error_Handler>
      Error_Handler();
 8002142:	f001 fedf 	bl	8003f04 <Error_Handler>
 8002146:	e7ec      	b.n	8002122 <UartCmd_Upload_Validation_Report+0x32>
 8002148:	d0cb0b80 	.word	0xd0cb0b80
 800214c:	240618e0 	.word	0x240618e0

08002150 <MemoryDumpInit>:
{
 8002150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002154:	4dc0      	ldr	r5, [pc, #768]	; (8002458 <MemoryDumpInit+0x308>)
{
 8002156:	b094      	sub	sp, #80	; 0x50
 8002158:	4604      	mov	r4, r0
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800215a:	f04f 37ff 	mov.w	r7, #4294967295
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 800215e:	ae04      	add	r6, sp, #16
 8002160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002162:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002164:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002168:	222b      	movs	r2, #43	; 0x2b
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800216a:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 800216e:	f846 0b04 	str.w	r0, [r6], #4
 8002172:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8002176:	7031      	strb	r1, [r6, #0]
 8002178:	2100      	movs	r1, #0
 800217a:	f020 f847 	bl	802220c <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800217e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002182:	f016 f97f 	bl	8018484 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002186:	2332      	movs	r3, #50	; 0x32
 8002188:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800218c:	210a      	movs	r1, #10
 800218e:	20c8      	movs	r0, #200	; 0xc8
 8002190:	9700      	str	r7, [sp, #0]
 8002192:	f016 fb47 	bl	8018824 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 8002196:	f016 f91d 	bl	80183d4 <UTIL_LCD_GetFont>
 800219a:	2301      	movs	r3, #1
 800219c:	88c1      	ldrh	r1, [r0, #6]
 800219e:	2000      	movs	r0, #0
 80021a0:	4aae      	ldr	r2, [pc, #696]	; (800245c <MemoryDumpInit+0x30c>)
 80021a2:	f016 fa57 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80021a6:	f016 f915 	bl	80183d4 <UTIL_LCD_GetFont>
 80021aa:	88c1      	ldrh	r1, [r0, #6]
 80021ac:	2301      	movs	r3, #1
 80021ae:	4aac      	ldr	r2, [pc, #688]	; (8002460 <MemoryDumpInit+0x310>)
 80021b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021b4:	2000      	movs	r0, #0
 80021b6:	f016 fa4d 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 80021ba:	f016 f90b 	bl	80183d4 <UTIL_LCD_GetFont>
 80021be:	88c1      	ldrh	r1, [r0, #6]
 80021c0:	2301      	movs	r3, #1
 80021c2:	4aa8      	ldr	r2, [pc, #672]	; (8002464 <MemoryDumpInit+0x314>)
 80021c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80021c8:	2000      	movs	r0, #0
 80021ca:	4099      	lsls	r1, r3
 80021cc:	f016 fa42 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80021d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80021d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80021d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80021dc:	4608      	mov	r0, r1
 80021de:	9700      	str	r7, [sp, #0]
 80021e0:	f016 fa88 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80021e4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80021e8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80021ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80021f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021f4:	9700      	str	r7, [sp, #0]
 80021f6:	f016 fa7d 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80021fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80021fe:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002202:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002206:	461a      	mov	r2, r3
 8002208:	9700      	str	r7, [sp, #0]
 800220a:	f016 fa73 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800220e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002212:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002216:	9700      	str	r7, [sp, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4608      	mov	r0, r1
 800221c:	f016 fa6a 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002220:	f016 f8d8 	bl	80183d4 <UTIL_LCD_GetFont>
 8002224:	2301      	movs	r3, #1
 8002226:	88c1      	ldrh	r1, [r0, #6]
 8002228:	2000      	movs	r0, #0
 800222a:	4a8f      	ldr	r2, [pc, #572]	; (8002468 <MemoryDumpInit+0x318>)
 800222c:	4099      	lsls	r1, r3
 800222e:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002232:	f016 fa0f 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 8002236:	f016 f8cd 	bl	80183d4 <UTIL_LCD_GetFont>
 800223a:	88c1      	ldrh	r1, [r0, #6]
 800223c:	2303      	movs	r3, #3
 800223e:	4a8b      	ldr	r2, [pc, #556]	; (800246c <MemoryDumpInit+0x31c>)
 8002240:	1049      	asrs	r1, r1, #1
 8002242:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8002246:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 800224a:	f016 fa03 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 800224e:	f016 f8c1 	bl	80183d4 <UTIL_LCD_GetFont>
 8002252:	88c1      	ldrh	r1, [r0, #6]
 8002254:	2303      	movs	r3, #3
 8002256:	4a86      	ldr	r2, [pc, #536]	; (8002470 <MemoryDumpInit+0x320>)
 8002258:	1049      	asrs	r1, r1, #1
 800225a:	20c8      	movs	r0, #200	; 0xc8
 800225c:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002260:	f016 f9f8 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002264:	f646 1394 	movw	r3, #27028	; 0x6994
 8002268:	58e8      	ldr	r0, [r5, r3]
 800226a:	f7ff f881 	bl	8001370 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 800226e:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06d      	beq.n	8002352 <MemoryDumpInit+0x202>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 8002276:	f894 3455 	ldrb.w	r3, [r4, #1109]	; 0x455
 800227a:	2b02      	cmp	r3, #2
 800227c:	f000 808a 	beq.w	8002394 <MemoryDumpInit+0x244>
 8002280:	2b03      	cmp	r3, #3
 8002282:	d060      	beq.n	8002346 <MemoryDumpInit+0x1f6>
 8002284:	2b01      	cmp	r3, #1
 8002286:	d05e      	beq.n	8002346 <MemoryDumpInit+0x1f6>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002288:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800228c:	2b01      	cmp	r3, #1
 800228e:	d073      	beq.n	8002378 <MemoryDumpInit+0x228>
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002290:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002292:	220a      	movs	r2, #10
 8002294:	4977      	ldr	r1, [pc, #476]	; (8002474 <MemoryDumpInit+0x324>)
 8002296:	f204 406c 	addw	r0, r4, #1132	; 0x46c
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800229a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800229e:	f00d fee9 	bl	8010074 <HAL_UART_Receive_DMA>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d173      	bne.n	800238e <MemoryDumpInit+0x23e>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80022a6:	2000      	movs	r0, #0
 80022a8:	f006 fcc8 	bl	8008c3c <BSP_SD_Init>
 80022ac:	b198      	cbz	r0, 80022d6 <MemoryDumpInit+0x186>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80022ae:	f016 f891 	bl	80183d4 <UTIL_LCD_GetFont>
 80022b2:	88c1      	ldrh	r1, [r0, #6]
 80022b4:	2301      	movs	r3, #1
 80022b6:	4a70      	ldr	r2, [pc, #448]	; (8002478 <MemoryDumpInit+0x328>)
 80022b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80022bc:	2000      	movs	r0, #0
 80022be:	4099      	lsls	r1, r3
 80022c0:	f016 f9c8 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80022c4:	f646 1394 	movw	r3, #27028	; 0x6994
 80022c8:	58e8      	ldr	r0, [r5, r3]
 80022ca:	f7ff f851 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f004 fd62 	bl	8006d98 <BSP_LED_On>
    while (1);
 80022d4:	e7fe      	b.n	80022d4 <MemoryDumpInit+0x184>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80022d6:	4869      	ldr	r0, [pc, #420]	; (800247c <MemoryDumpInit+0x32c>)
 80022d8:	a903      	add	r1, sp, #12
 80022da:	f013 fe5d 	bl	8015f98 <FATFS_LinkDriver>
 80022de:	4602      	mov	r2, r0
 80022e0:	b118      	cbz	r0, 80022ea <MemoryDumpInit+0x19a>
    BSP_LED_On(LED_RED);
 80022e2:	2002      	movs	r0, #2
 80022e4:	f004 fd58 	bl	8006d98 <BSP_LED_On>
    while (1);
 80022e8:	e7fe      	b.n	80022e8 <MemoryDumpInit+0x198>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80022ea:	a903      	add	r1, sp, #12
 80022ec:	4864      	ldr	r0, [pc, #400]	; (8002480 <MemoryDumpInit+0x330>)
 80022ee:	f012 fad5 	bl	801489c <f_mount>
 80022f2:	4607      	mov	r7, r0
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d16a      	bne.n	80023ce <MemoryDumpInit+0x27e>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80022f8:	4b62      	ldr	r3, [pc, #392]	; (8002484 <MemoryDumpInit+0x334>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80022fa:	f204 561c 	addw	r6, r4, #1308	; 0x51c
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80022fe:	f104 0822 	add.w	r8, r4, #34	; 0x22
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002302:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002306:	4630      	mov	r0, r6
 8002308:	f00c fcb6 	bl	800ec78 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 800230c:	4630      	mov	r0, r6
 800230e:	f00c fc77 	bl	800ec00 <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <MemoryDumpInit+0x338>)
 8002314:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  res = f_mkdir(path);
 800231c:	4640      	mov	r0, r8
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 800231e:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 8002322:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 8002326:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  res = f_mkdir(path);
 800232a:	f013 fbf7 	bl	8015b1c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 800232e:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 8002332:	d150      	bne.n	80023d6 <MemoryDumpInit+0x286>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 8002334:	7923      	ldrb	r3, [r4, #4]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d06c      	beq.n	8002414 <MemoryDumpInit+0x2c4>
    BSP_SD_DeInit(0);
 800233a:	4630      	mov	r0, r6
 800233c:	f006 fc40 	bl	8008bc0 <BSP_SD_DeInit>
}
 8002340:	b014      	add	sp, #80	; 0x50
 8002342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 8002346:	7123      	strb	r3, [r4, #4]
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002348:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 800234c:	2b01      	cmp	r3, #1
 800234e:	d19f      	bne.n	8002290 <MemoryDumpInit+0x140>
 8002350:	e012      	b.n	8002378 <MemoryDumpInit+0x228>
    HAL_Delay(200);
 8002352:	20c8      	movs	r0, #200	; 0xc8
 8002354:	f006 fdc0 	bl	8008ed8 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002358:	2100      	movs	r1, #0
 800235a:	4608      	mov	r0, r1
 800235c:	f004 fe3a 	bl	8006fd4 <BSP_JOY_GetState>
 8002360:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 8002362:	2b02      	cmp	r3, #2
 8002364:	d9f8      	bls.n	8002358 <MemoryDumpInit+0x208>
    switch (joy_state)
 8002366:	2b08      	cmp	r3, #8
 8002368:	d026      	beq.n	80023b8 <MemoryDumpInit+0x268>
 800236a:	2b10      	cmp	r3, #16
 800236c:	d021      	beq.n	80023b2 <MemoryDumpInit+0x262>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d199      	bne.n	80022a6 <MemoryDumpInit+0x156>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 8002372:	2303      	movs	r3, #3
 8002374:	7123      	strb	r3, [r4, #4]
   break;
 8002376:	e796      	b.n	80022a6 <MemoryDumpInit+0x156>
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002378:	2100      	movs	r1, #0
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 800237a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
      Test_Context_Ptr->DumpContext.dump_state = 1;
 800237e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002382:	f8c4 1468 	str.w	r1, [r4, #1128]	; 0x468
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002386:	4841      	ldr	r0, [pc, #260]	; (800248c <MemoryDumpInit+0x33c>)
 8002388:	f01f ff40 	bl	802220c <memset>
 800238c:	e78b      	b.n	80022a6 <MemoryDumpInit+0x156>
    Error_Handler();
 800238e:	f001 fdb9 	bl	8003f04 <Error_Handler>
 8002392:	e788      	b.n	80022a6 <MemoryDumpInit+0x156>
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8002394:	f646 168c 	movw	r6, #27020	; 0x698c
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8002398:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800239a:	59a8      	ldr	r0, [r5, r6]
 800239c:	f7fe fcf4 	bl	8000d88 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80023a0:	59a8      	ldr	r0, [r5, r6]
 80023a2:	f7fe fddd 	bl	8000f60 <CAMERA_Enable_TestBar_Mode>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80023a6:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	f47f af70 	bne.w	8002290 <MemoryDumpInit+0x140>
 80023b0:	e7e2      	b.n	8002378 <MemoryDumpInit+0x228>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	7123      	strb	r3, [r4, #4]
      break;
 80023b6:	e776      	b.n	80022a6 <MemoryDumpInit+0x156>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80023b8:	2302      	movs	r3, #2
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80023ba:	f646 168c 	movw	r6, #27020	; 0x698c
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80023be:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80023c0:	59a8      	ldr	r0, [r5, r6]
 80023c2:	f7fe fce1 	bl	8000d88 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80023c6:	59a8      	ldr	r0, [r5, r6]
 80023c8:	f7fe fdca 	bl	8000f60 <CAMERA_Enable_TestBar_Mode>
      break;
 80023cc:	e76b      	b.n	80022a6 <MemoryDumpInit+0x156>
    BSP_LED_On(LED_RED);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f004 fce2 	bl	8006d98 <BSP_LED_On>
    while (1);
 80023d4:	e7fe      	b.n	80023d4 <MemoryDumpInit+0x284>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80023d6:	f015 fffd 	bl	80183d4 <UTIL_LCD_GetFont>
 80023da:	88c1      	ldrh	r1, [r0, #6]
 80023dc:	2301      	movs	r3, #1
 80023de:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <MemoryDumpInit+0x340>)
 80023e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80023e4:	4638      	mov	r0, r7
 80023e6:	4099      	lsls	r1, r3
 80023e8:	f016 f934 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80023ec:	f015 fff2 	bl	80183d4 <UTIL_LCD_GetFont>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4642      	mov	r2, r8
 80023f4:	4638      	mov	r0, r7
 80023f6:	88d9      	ldrh	r1, [r3, #6]
 80023f8:	2301      	movs	r3, #1
 80023fa:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80023fe:	f016 f929 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002402:	f646 1394 	movw	r3, #27028	; 0x6994
 8002406:	58e8      	ldr	r0, [r5, r3]
 8002408:	f7fe ffb2 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800240c:	2002      	movs	r0, #2
 800240e:	f004 fcc3 	bl	8006d98 <BSP_LED_On>
    while (1);
 8002412:	e7fe      	b.n	8002412 <MemoryDumpInit+0x2c2>
  res = f_stat(path, &fno);
 8002414:	491f      	ldr	r1, [pc, #124]	; (8002494 <MemoryDumpInit+0x344>)
 8002416:	a804      	add	r0, sp, #16
 8002418:	f013 fb50 	bl	8015abc <f_stat>
  if (res != FR_OK)
 800241c:	4604      	mov	r4, r0
 800241e:	2800      	cmp	r0, #0
 8002420:	d13c      	bne.n	800249c <MemoryDumpInit+0x34c>
    nbr_dir = count_dir(dump_dir_path, App_Cxt_Ptr);
 8002422:	f646 1694 	movw	r6, #27028	; 0x6994
 8002426:	a804      	add	r0, sp, #16
 8002428:	19a9      	adds	r1, r5, r6
 800242a:	f7ff f925 	bl	8001678 <count_dir.isra.0>
    if (nbr_dir != 0)
 800242e:	2800      	cmp	r0, #0
 8002430:	d086      	beq.n	8002340 <MemoryDumpInit+0x1f0>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002432:	f015 ffcf 	bl	80183d4 <UTIL_LCD_GetFont>
 8002436:	4602      	mov	r2, r0
 8002438:	2301      	movs	r3, #1
 800243a:	4620      	mov	r0, r4
 800243c:	88d1      	ldrh	r1, [r2, #6]
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <MemoryDumpInit+0x348>)
 8002440:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002444:	4099      	lsls	r1, r3
 8002446:	f016 f905 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800244a:	59a8      	ldr	r0, [r5, r6]
 800244c:	f7fe ff90 	bl	8001370 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002450:	2002      	movs	r0, #2
 8002452:	f004 fca1 	bl	8006d98 <BSP_LED_On>
      while (1)
 8002456:	e7fe      	b.n	8002456 <MemoryDumpInit+0x306>
 8002458:	080256a0 	.word	0x080256a0
 800245c:	0802bf60 	.word	0x0802bf60
 8002460:	0802bf78 	.word	0x0802bf78
 8002464:	0802bfa0 	.word	0x0802bfa0
 8002468:	0802bd8c 	.word	0x0802bd8c
 800246c:	0802bd98 	.word	0x0802bd98
 8002470:	0802bda8 	.word	0x0802bda8
 8002474:	240618e0 	.word	0x240618e0
 8002478:	0802bf30 	.word	0x0802bf30
 800247c:	0802c2a4 	.word	0x0802c2a4
 8002480:	30006df8 	.word	0x30006df8
 8002484:	48021800 	.word	0x48021800
 8002488:	0802bfbc 	.word	0x0802bfbc
 800248c:	d0cb08a0 	.word	0xd0cb08a0
 8002490:	0802bfcc 	.word	0x0802bfcc
 8002494:	3000702c 	.word	0x3000702c
 8002498:	0802c010 	.word	0x0802c010
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not find directory", CENTER_MODE);
 800249c:	f015 ff9a 	bl	80183d4 <UTIL_LCD_GetFont>
 80024a0:	88c1      	ldrh	r1, [r0, #6]
 80024a2:	2301      	movs	r3, #1
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <MemoryDumpInit+0x38c>)
 80024a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80024aa:	4630      	mov	r0, r6
 80024ac:	4099      	lsls	r1, r3
 80024ae:	f016 f8d1 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80024b2:	f015 ff8f 	bl	80183d4 <UTIL_LCD_GetFont>
 80024b6:	4603      	mov	r3, r0
 80024b8:	aa04      	add	r2, sp, #16
 80024ba:	4630      	mov	r0, r6
 80024bc:	88d9      	ldrh	r1, [r3, #6]
 80024be:	2301      	movs	r3, #1
 80024c0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80024c4:	f016 f8c6 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(app->Display_ContextPtr);
 80024c8:	f646 1394 	movw	r3, #27028	; 0x6994
 80024cc:	58e8      	ldr	r0, [r5, r3]
 80024ce:	f7fe ff4f 	bl	8001370 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80024d2:	2002      	movs	r0, #2
 80024d4:	f004 fc60 	bl	8006d98 <BSP_LED_On>
      while (1);
 80024d8:	e7fe      	b.n	80024d8 <MemoryDumpInit+0x388>
 80024da:	bf00      	nop
 80024dc:	0802bff0 	.word	0x0802bff0

080024e0 <UartCmd_Read_Camera_Register>:
{
 80024e0:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
 80024e4:	460f      	mov	r7, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80024e6:	7809      	ldrb	r1, [r1, #0]
{
 80024e8:	b083      	sub	sp, #12
 80024ea:	4682      	mov	sl, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80024ec:	787e      	ldrb	r6, [r7, #1]
 80024ee:	1a76      	subs	r6, r6, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80024f0:	3601      	adds	r6, #1
 80024f2:	d017      	beq.n	8002524 <UartCmd_Read_Camera_Register+0x44>
 80024f4:	2400      	movs	r4, #0
 80024f6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002574 <UartCmd_Read_Camera_Register+0x94>
 80024fa:	4d1c      	ldr	r5, [pc, #112]	; (800256c <UartCmd_Read_Camera_Register+0x8c>)
 80024fc:	e000      	b.n	8002500 <UartCmd_Read_Camera_Register+0x20>
 80024fe:	5d39      	ldrb	r1, [r7, r4]
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 8002500:	f8d9 0000 	ldr.w	r0, [r9]
 8002504:	2301      	movs	r3, #1
 8002506:	f10d 0207 	add.w	r2, sp, #7
 800250a:	3018      	adds	r0, #24
 800250c:	f004 fc06 	bl	8006d1c <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 8002510:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002514:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 8002516:	552a      	strb	r2, [r5, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002518:	b2dc      	uxtb	r4, r3
 800251a:	42b4      	cmp	r4, r6
 800251c:	d3ef      	bcc.n	80024fe <UartCmd_Read_Camera_Register+0x1e>
  if(TxDataTransferSize > TxDataBufSize)
 800251e:	2ee0      	cmp	r6, #224	; 0xe0
 8002520:	d900      	bls.n	8002524 <UartCmd_Read_Camera_Register+0x44>
    while(1);
 8002522:	e7fe      	b.n	8002522 <UartCmd_Read_Camera_Register+0x42>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002524:	f20a 4a6c 	addw	sl, sl, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002528:	2202      	movs	r2, #2
 800252a:	21e0      	movs	r1, #224	; 0xe0
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <UartCmd_Read_Camera_Register+0x8c>)
 800252e:	f001 fca3 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002532:	4650      	mov	r0, sl
 8002534:	b2b2      	uxth	r2, r6
 8002536:	490d      	ldr	r1, [pc, #52]	; (800256c <UartCmd_Read_Camera_Register+0x8c>)
 8002538:	f00d fd4c 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 800253c:	b990      	cbnz	r0, 8002564 <UartCmd_Read_Camera_Register+0x84>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800253e:	4650      	mov	r0, sl
 8002540:	f00d ff72 	bl	8010428 <HAL_UART_GetState>
 8002544:	2820      	cmp	r0, #32
 8002546:	d1fa      	bne.n	800253e <UartCmd_Read_Camera_Register+0x5e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002548:	4650      	mov	r0, sl
 800254a:	220a      	movs	r2, #10
 800254c:	4908      	ldr	r1, [pc, #32]	; (8002570 <UartCmd_Read_Camera_Register+0x90>)
 800254e:	f00d fd91 	bl	8010074 <HAL_UART_Receive_DMA>
 8002552:	b910      	cbnz	r0, 800255a <UartCmd_Read_Camera_Register+0x7a>
}
 8002554:	b003      	add	sp, #12
 8002556:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
    Error_Handler();
 800255a:	f001 fcd3 	bl	8003f04 <Error_Handler>
}
 800255e:	b003      	add	sp, #12
 8002560:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
      Error_Handler();
 8002564:	f001 fcce 	bl	8003f04 <Error_Handler>
 8002568:	e7e9      	b.n	800253e <UartCmd_Read_Camera_Register+0x5e>
 800256a:	bf00      	nop
 800256c:	3000f000 	.word	0x3000f000
 8002570:	240618e0 	.word	0x240618e0
 8002574:	300080d4 	.word	0x300080d4

08002578 <FrameCaptureInit>:
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800257a:	f04f 35ff 	mov.w	r5, #4294967295
{
 800257e:	b085      	sub	sp, #20
 8002580:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002582:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002586:	f8d4 6530 	ldr.w	r6, [r4, #1328]	; 0x530
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800258a:	f015 ff7b 	bl	8018484 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800258e:	2332      	movs	r3, #50	; 0x32
 8002590:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002594:	210a      	movs	r1, #10
 8002596:	20c8      	movs	r0, #200	; 0xc8
 8002598:	9500      	str	r5, [sp, #0]
 800259a:	f016 f943 	bl	8018824 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 800259e:	f015 ff19 	bl	80183d4 <UTIL_LCD_GetFont>
 80025a2:	2301      	movs	r3, #1
 80025a4:	88c1      	ldrh	r1, [r0, #6]
 80025a6:	2000      	movs	r0, #0
 80025a8:	4a96      	ldr	r2, [pc, #600]	; (8002804 <FrameCaptureInit+0x28c>)
 80025aa:	f016 f853 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80025ae:	f015 ff11 	bl	80183d4 <UTIL_LCD_GetFont>
 80025b2:	88c1      	ldrh	r1, [r0, #6]
 80025b4:	2301      	movs	r3, #1
 80025b6:	4a94      	ldr	r2, [pc, #592]	; (8002808 <FrameCaptureInit+0x290>)
 80025b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80025bc:	2000      	movs	r0, #0
 80025be:	f016 f849 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 80025c2:	f015 ff07 	bl	80183d4 <UTIL_LCD_GetFont>
 80025c6:	88c1      	ldrh	r1, [r0, #6]
 80025c8:	2301      	movs	r3, #1
 80025ca:	4a90      	ldr	r2, [pc, #576]	; (800280c <FrameCaptureInit+0x294>)
 80025cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80025d0:	2000      	movs	r0, #0
 80025d2:	4099      	lsls	r1, r3
 80025d4:	f016 f83e 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80025d8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80025dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025e4:	4608      	mov	r0, r1
 80025e6:	9500      	str	r5, [sp, #0]
 80025e8:	f016 f884 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80025ec:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80025f0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80025f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025fc:	9500      	str	r5, [sp, #0]
 80025fe:	f016 f879 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002602:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002606:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800260a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800260e:	461a      	mov	r2, r3
 8002610:	9500      	str	r5, [sp, #0]
 8002612:	f016 f86f 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002616:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800261a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800261e:	9500      	str	r5, [sp, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4608      	mov	r0, r1
 8002624:	f016 f866 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002628:	f015 fed4 	bl	80183d4 <UTIL_LCD_GetFont>
 800262c:	2301      	movs	r3, #1
 800262e:	88c1      	ldrh	r1, [r0, #6]
 8002630:	2000      	movs	r0, #0
 8002632:	4a77      	ldr	r2, [pc, #476]	; (8002810 <FrameCaptureInit+0x298>)
 8002634:	4099      	lsls	r1, r3
 8002636:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 800263a:	f016 f80b 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 800263e:	f015 fec9 	bl	80183d4 <UTIL_LCD_GetFont>
 8002642:	88c1      	ldrh	r1, [r0, #6]
 8002644:	2301      	movs	r3, #1
 8002646:	4a73      	ldr	r2, [pc, #460]	; (8002814 <FrameCaptureInit+0x29c>)
 8002648:	2000      	movs	r0, #0
 800264a:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 800264e:	f016 f801 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002652:	f646 1394 	movw	r3, #27028	; 0x6994
 8002656:	58f0      	ldr	r0, [r6, r3]
 8002658:	f7fe fe8a 	bl	8001370 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 800265c:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8002660:	2b00      	cmp	r3, #0
 8002662:	d04c      	beq.n	80026fe <FrameCaptureInit+0x186>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 8002664:	f894 345c 	ldrb.w	r3, [r4, #1116]	; 0x45c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d045      	beq.n	80026f8 <FrameCaptureInit+0x180>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d043      	beq.n	80026f8 <FrameCaptureInit+0x180>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002670:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002672:	220a      	movs	r2, #10
 8002674:	4968      	ldr	r1, [pc, #416]	; (8002818 <FrameCaptureInit+0x2a0>)
 8002676:	f204 406c 	addw	r0, r4, #1132	; 0x46c
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800267a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800267e:	f00d fcf9 	bl	8010074 <HAL_UART_Receive_DMA>
 8002682:	2800      	cmp	r0, #0
 8002684:	d174      	bne.n	8002770 <FrameCaptureInit+0x1f8>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <FrameCaptureInit+0x2a4>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002688:	f204 551c 	addw	r5, r4, #1308	; 0x51c
  Test_Context_Ptr->RngHandle.Instance = RNG;
 800268c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002690:	4628      	mov	r0, r5
 8002692:	f00c faf1 	bl	800ec78 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002696:	4628      	mov	r0, r5
 8002698:	f00c fab2 	bl	800ec00 <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 800269c:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 80026a0:	4628      	mov	r0, r5
 80026a2:	f00c fb03 	bl	800ecac <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 80026a6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80026aa:	495d      	ldr	r1, [pc, #372]	; (8002820 <FrameCaptureInit+0x2a8>)
 80026ac:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80026b0:	f020 fc6e 	bl	8022f90 <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80026b4:	2000      	movs	r0, #0
 80026b6:	f006 fac1 	bl	8008c3c <BSP_SD_Init>
 80026ba:	b948      	cbnz	r0, 80026d0 <FrameCaptureInit+0x158>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80026bc:	4859      	ldr	r0, [pc, #356]	; (8002824 <FrameCaptureInit+0x2ac>)
 80026be:	a903      	add	r1, sp, #12
 80026c0:	f013 fc6a 	bl	8015f98 <FATFS_LinkDriver>
 80026c4:	4602      	mov	r2, r0
 80026c6:	b3a8      	cbz	r0, 8002734 <FrameCaptureInit+0x1bc>
    BSP_LED_On(LED_RED);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f004 fb65 	bl	8006d98 <BSP_LED_On>
    while (1);
 80026ce:	e7fe      	b.n	80026ce <FrameCaptureInit+0x156>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80026d0:	f015 fe80 	bl	80183d4 <UTIL_LCD_GetFont>
 80026d4:	88c1      	ldrh	r1, [r0, #6]
 80026d6:	2301      	movs	r3, #1
 80026d8:	4a53      	ldr	r2, [pc, #332]	; (8002828 <FrameCaptureInit+0x2b0>)
 80026da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80026de:	2000      	movs	r0, #0
 80026e0:	4099      	lsls	r1, r3
 80026e2:	f015 ffb7 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80026e6:	f646 1394 	movw	r3, #27028	; 0x6994
 80026ea:	58f0      	ldr	r0, [r6, r3]
 80026ec:	f7fe fe40 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80026f0:	2002      	movs	r0, #2
 80026f2:	f004 fb51 	bl	8006d98 <BSP_LED_On>
    while (1);
 80026f6:	e7fe      	b.n	80026f6 <FrameCaptureInit+0x17e>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 80026f8:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80026fc:	e7b8      	b.n	8002670 <FrameCaptureInit+0xf8>
    HAL_Delay(200);
 80026fe:	20c8      	movs	r0, #200	; 0xc8
 8002700:	f006 fbea 	bl	8008ed8 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002704:	2100      	movs	r1, #0
 8002706:	4608      	mov	r0, r1
 8002708:	f004 fc64 	bl	8006fd4 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 800270c:	f010 0ff7 	tst.w	r0, #247	; 0xf7
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002710:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002712:	d0f7      	beq.n	8002704 <FrameCaptureInit+0x18c>
 8002714:	2b04      	cmp	r3, #4
 8002716:	d0f5      	beq.n	8002704 <FrameCaptureInit+0x18c>
 8002718:	f1a3 0201 	sub.w	r2, r3, #1
 800271c:	fab2 f282 	clz	r2, r2
 8002720:	0952      	lsrs	r2, r2, #5
 8002722:	2a00      	cmp	r2, #0
 8002724:	d1ee      	bne.n	8002704 <FrameCaptureInit+0x18c>
    switch (joy_state)
 8002726:	2b02      	cmp	r3, #2
 8002728:	d025      	beq.n	8002776 <FrameCaptureInit+0x1fe>
 800272a:	2b10      	cmp	r3, #16
 800272c:	d1ab      	bne.n	8002686 <FrameCaptureInit+0x10e>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_RAW;
 800272e:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
      break;
 8002732:	e7a8      	b.n	8002686 <FrameCaptureInit+0x10e>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002734:	a903      	add	r1, sp, #12
 8002736:	483d      	ldr	r0, [pc, #244]	; (800282c <FrameCaptureInit+0x2b4>)
 8002738:	f012 f8b0 	bl	801489c <f_mount>
 800273c:	4605      	mov	r5, r0
 800273e:	b9f0      	cbnz	r0, 800277e <FrameCaptureInit+0x206>
  char *capture_session_dir_path = Test_Context_Ptr->CaptureContext.capture_folder_name;
 8002740:	f104 07de 	add.w	r7, r4, #222	; 0xde
  sprintf(capture_session_dir_path, "/Camera_Capture/CAM_CAPTURE_SESS_%X", capture_session_id);
 8002744:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002748:	4939      	ldr	r1, [pc, #228]	; (8002830 <FrameCaptureInit+0x2b8>)
 800274a:	4638      	mov	r0, r7
 800274c:	f020 fc20 	bl	8022f90 <siprintf>
  res = f_mkdir(path);
 8002750:	4838      	ldr	r0, [pc, #224]	; (8002834 <FrameCaptureInit+0x2bc>)
 8002752:	f013 f9e3 	bl	8015b1c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002756:	f010 04f7 	ands.w	r4, r0, #247	; 0xf7
 800275a:	d114      	bne.n	8002786 <FrameCaptureInit+0x20e>
  res = f_mkdir(path);
 800275c:	4638      	mov	r0, r7
 800275e:	f013 f9dd 	bl	8015b1c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002762:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 8002766:	d12d      	bne.n	80027c4 <FrameCaptureInit+0x24c>
  BSP_SD_DeInit(0);
 8002768:	f006 fa2a 	bl	8008bc0 <BSP_SD_DeInit>
}
 800276c:	b005      	add	sp, #20
 800276e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002770:	f001 fbc8 	bl	8003f04 <Error_Handler>
 8002774:	e787      	b.n	8002686 <FrameCaptureInit+0x10e>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002776:	2301      	movs	r3, #1
 8002778:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 800277c:	e783      	b.n	8002686 <FrameCaptureInit+0x10e>
    BSP_LED_On(LED_RED);
 800277e:	2002      	movs	r0, #2
 8002780:	f004 fb0a 	bl	8006d98 <BSP_LED_On>
    while (1);
 8002784:	e7fe      	b.n	8002784 <FrameCaptureInit+0x20c>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002786:	f015 fe25 	bl	80183d4 <UTIL_LCD_GetFont>
 800278a:	88c1      	ldrh	r1, [r0, #6]
 800278c:	2301      	movs	r3, #1
 800278e:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <FrameCaptureInit+0x2c0>)
 8002790:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002794:	4628      	mov	r0, r5
 8002796:	4099      	lsls	r1, r3
 8002798:	f015 ff5c 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 800279c:	f015 fe1a 	bl	80183d4 <UTIL_LCD_GetFont>
 80027a0:	4602      	mov	r2, r0
 80027a2:	2301      	movs	r3, #1
 80027a4:	4628      	mov	r0, r5
 80027a6:	88d1      	ldrh	r1, [r2, #6]
 80027a8:	4a22      	ldr	r2, [pc, #136]	; (8002834 <FrameCaptureInit+0x2bc>)
 80027aa:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80027ae:	f015 ff51 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80027b2:	f646 1394 	movw	r3, #27028	; 0x6994
 80027b6:	58f0      	ldr	r0, [r6, r3]
 80027b8:	f7fe fdda 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80027bc:	2002      	movs	r0, #2
 80027be:	f004 faeb 	bl	8006d98 <BSP_LED_On>
    while (1);
 80027c2:	e7fe      	b.n	80027c2 <FrameCaptureInit+0x24a>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80027c4:	f015 fe06 	bl	80183d4 <UTIL_LCD_GetFont>
 80027c8:	88c1      	ldrh	r1, [r0, #6]
 80027ca:	2301      	movs	r3, #1
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <FrameCaptureInit+0x2c0>)
 80027ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80027d2:	4620      	mov	r0, r4
 80027d4:	4099      	lsls	r1, r3
 80027d6:	f015 ff3d 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80027da:	f015 fdfb 	bl	80183d4 <UTIL_LCD_GetFont>
 80027de:	4603      	mov	r3, r0
 80027e0:	463a      	mov	r2, r7
 80027e2:	4620      	mov	r0, r4
 80027e4:	88d9      	ldrh	r1, [r3, #6]
 80027e6:	2301      	movs	r3, #1
 80027e8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80027ec:	f015 ff32 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80027f0:	f646 1394 	movw	r3, #27028	; 0x6994
 80027f4:	58f0      	ldr	r0, [r6, r3]
 80027f6:	f7fe fdbb 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80027fa:	2002      	movs	r0, #2
 80027fc:	f004 facc 	bl	8006d98 <BSP_LED_On>
    while (1);
 8002800:	e7fe      	b.n	8002800 <FrameCaptureInit+0x288>
 8002802:	bf00      	nop
 8002804:	0802c040 	.word	0x0802c040
 8002808:	0802bf78 	.word	0x0802bf78
 800280c:	0802c054 	.word	0x0802c054
 8002810:	0802bd84 	.word	0x0802bd84
 8002814:	0802bd88 	.word	0x0802bd88
 8002818:	240618e0 	.word	0x240618e0
 800281c:	48021800 	.word	0x48021800
 8002820:	0802c080 	.word	0x0802c080
 8002824:	0802c2a4 	.word	0x0802c2a4
 8002828:	0802bf30 	.word	0x0802bf30
 800282c:	30006df8 	.word	0x30006df8
 8002830:	0802c08c 	.word	0x0802c08c
 8002834:	0802c0b0 	.word	0x0802c0b0
 8002838:	0802bfcc 	.word	0x0802bfcc

0800283c <UartCmd_Upload_Dump_Whole_Data>:
{
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 800283e:	780b      	ldrb	r3, [r1, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d050      	beq.n	80028e6 <UartCmd_Upload_Dump_Whole_Data+0xaa>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002844:	2b01      	cmp	r3, #1
 8002846:	d01e      	beq.n	8002886 <UartCmd_Upload_Dump_Whole_Data+0x4a>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002848:	4d45      	ldr	r5, [pc, #276]	; (8002960 <UartCmd_Upload_Dump_Whole_Data+0x124>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800284a:	f200 446c 	addw	r4, r0, #1132	; 0x46c
    *(aTxBuffer) = CMD_ERROR_EVT;
 800284e:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002850:	2202      	movs	r2, #2
 8002852:	4628      	mov	r0, r5
 8002854:	f44f 6180 	mov.w	r1, #1024	; 0x400
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002858:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800285a:	f001 fb0d 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800285e:	4629      	mov	r1, r5
 8002860:	4620      	mov	r0, r4
 8002862:	2201      	movs	r2, #1
 8002864:	f00d fbb6 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002868:	2800      	cmp	r0, #0
 800286a:	d170      	bne.n	800294e <UartCmd_Upload_Dump_Whole_Data+0x112>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800286c:	4620      	mov	r0, r4
 800286e:	f00d fddb 	bl	8010428 <HAL_UART_GetState>
 8002872:	2820      	cmp	r0, #32
 8002874:	d1fa      	bne.n	800286c <UartCmd_Upload_Dump_Whole_Data+0x30>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002876:	4620      	mov	r0, r4
 8002878:	220a      	movs	r2, #10
 800287a:	493a      	ldr	r1, [pc, #232]	; (8002964 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 800287c:	f00d fbfa 	bl	8010074 <HAL_UART_Receive_DMA>
 8002880:	2800      	cmp	r0, #0
 8002882:	d15d      	bne.n	8002940 <UartCmd_Upload_Dump_Whole_Data+0x104>
}
 8002884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002886:	4d38      	ldr	r5, [pc, #224]	; (8002968 <UartCmd_Upload_Dump_Whole_Data+0x12c>)
 8002888:	f200 446c 	addw	r4, r0, #1132	; 0x46c
 800288c:	2202      	movs	r2, #2
 800288e:	4937      	ldr	r1, [pc, #220]	; (800296c <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002890:	4628      	mov	r0, r5
 8002892:	4f37      	ldr	r7, [pc, #220]	; (8002970 <UartCmd_Upload_Dump_Whole_Data+0x134>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002894:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002898:	f001 faee 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 800289c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a0:	4629      	mov	r1, r5
 80028a2:	4620      	mov	r0, r4
 80028a4:	f00d fb96 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 80028a8:	b9d0      	cbnz	r0, 80028e0 <UartCmd_Upload_Dump_Whole_Data+0xa4>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80028aa:	4620      	mov	r0, r4
 80028ac:	f00d fdbc 	bl	8010428 <HAL_UART_GetState>
 80028b0:	2820      	cmp	r0, #32
 80028b2:	d1fa      	bne.n	80028aa <UartCmd_Upload_Dump_Whole_Data+0x6e>
    for(i=0;i<dma_xfer_num;i++)
 80028b4:	4435      	add	r5, r6
 80028b6:	42bd      	cmp	r5, r7
 80028b8:	d1f0      	bne.n	800289c <UartCmd_Upload_Dump_Whole_Data+0x60>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 80028ba:	f246 3279 	movw	r2, #25465	; 0x6379
 80028be:	492c      	ldr	r1, [pc, #176]	; (8002970 <UartCmd_Upload_Dump_Whole_Data+0x134>)
 80028c0:	4620      	mov	r0, r4
 80028c2:	f00d fb87 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d144      	bne.n	8002954 <UartCmd_Upload_Dump_Whole_Data+0x118>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f00d fdac 	bl	8010428 <HAL_UART_GetState>
 80028d0:	2820      	cmp	r0, #32
 80028d2:	d0d0      	beq.n	8002876 <UartCmd_Upload_Dump_Whole_Data+0x3a>
 80028d4:	4620      	mov	r0, r4
 80028d6:	f00d fda7 	bl	8010428 <HAL_UART_GetState>
 80028da:	2820      	cmp	r0, #32
 80028dc:	d1f5      	bne.n	80028ca <UartCmd_Upload_Dump_Whole_Data+0x8e>
 80028de:	e7ca      	b.n	8002876 <UartCmd_Upload_Dump_Whole_Data+0x3a>
        Error_Handler();
 80028e0:	f001 fb10 	bl	8003f04 <Error_Handler>
 80028e4:	e7e1      	b.n	80028aa <UartCmd_Upload_Dump_Whole_Data+0x6e>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80028e6:	4d23      	ldr	r5, [pc, #140]	; (8002974 <UartCmd_Upload_Dump_Whole_Data+0x138>)
 80028e8:	f200 446c 	addw	r4, r0, #1132	; 0x46c
 80028ec:	2202      	movs	r2, #2
 80028ee:	491f      	ldr	r1, [pc, #124]	; (800296c <UartCmd_Upload_Dump_Whole_Data+0x130>)
 80028f0:	4628      	mov	r0, r5
 80028f2:	4f21      	ldr	r7, [pc, #132]	; (8002978 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80028f4:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80028f8:	f001 fabe 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80028fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002900:	4629      	mov	r1, r5
 8002902:	4620      	mov	r0, r4
 8002904:	f00d fb66 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002908:	b9f0      	cbnz	r0, 8002948 <UartCmd_Upload_Dump_Whole_Data+0x10c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800290a:	4620      	mov	r0, r4
 800290c:	f00d fd8c 	bl	8010428 <HAL_UART_GetState>
 8002910:	2820      	cmp	r0, #32
 8002912:	d1fa      	bne.n	800290a <UartCmd_Upload_Dump_Whole_Data+0xce>
    for(i=0;i<dma_xfer_num;i++)
 8002914:	4435      	add	r5, r6
 8002916:	42af      	cmp	r7, r5
 8002918:	d1f0      	bne.n	80028fc <UartCmd_Upload_Dump_Whole_Data+0xc0>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 800291a:	f246 3279 	movw	r2, #25465	; 0x6379
 800291e:	4916      	ldr	r1, [pc, #88]	; (8002978 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
 8002920:	4620      	mov	r0, r4
 8002922:	f00d fb57 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002926:	b9c0      	cbnz	r0, 800295a <UartCmd_Upload_Dump_Whole_Data+0x11e>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002928:	4620      	mov	r0, r4
 800292a:	f00d fd7d 	bl	8010428 <HAL_UART_GetState>
 800292e:	2820      	cmp	r0, #32
 8002930:	d1fa      	bne.n	8002928 <UartCmd_Upload_Dump_Whole_Data+0xec>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002932:	4620      	mov	r0, r4
 8002934:	220a      	movs	r2, #10
 8002936:	490b      	ldr	r1, [pc, #44]	; (8002964 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002938:	f00d fb9c 	bl	8010074 <HAL_UART_Receive_DMA>
 800293c:	2800      	cmp	r0, #0
 800293e:	d0a1      	beq.n	8002884 <UartCmd_Upload_Dump_Whole_Data+0x48>
}
 8002940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002944:	f001 bade 	b.w	8003f04 <Error_Handler>
        Error_Handler();
 8002948:	f001 fadc 	bl	8003f04 <Error_Handler>
 800294c:	e7dd      	b.n	800290a <UartCmd_Upload_Dump_Whole_Data+0xce>
      Error_Handler();
 800294e:	f001 fad9 	bl	8003f04 <Error_Handler>
 8002952:	e78b      	b.n	800286c <UartCmd_Upload_Dump_Whole_Data+0x30>
        Error_Handler();
 8002954:	f001 fad6 	bl	8003f04 <Error_Handler>
 8002958:	e7b7      	b.n	80028ca <UartCmd_Upload_Dump_Whole_Data+0x8e>
 800295a:	f001 fad3 	bl	8003f04 <Error_Handler>
 800295e:	e7e3      	b.n	8002928 <UartCmd_Upload_Dump_Whole_Data+0xec>
 8002960:	24061900 	.word	0x24061900
 8002964:	240618e0 	.word	0x240618e0
 8002968:	d0d4a7a0 	.word	0xd0d4a7a0
 800296c:	00096380 	.word	0x00096380
 8002970:	d0dda797 	.word	0xd0dda797
 8002974:	d0cb4420 	.word	0xd0cb4420
 8002978:	d0d44417 	.word	0xd0d44417

0800297c <Validation_PostProcess>:
 * @brief Post process for the VALIDATION mode
 *
 * @param TestContext_Ptr pointer to test context
 */
static void Validation_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
 800297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef OBJECTDETECT
  char msgtmp[255];
  char pathtmp[255];
  extern int network_nms_comparator_out(const void *pa, const void *pb);

  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8002980:	f8d0 9440 	ldr.w	r9, [r0, #1088]	; 0x440
{
 8002984:	4604      	mov	r4, r0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8002986:	f8d0 6530 	ldr.w	r6, [r0, #1328]	; 0x530
{
 800298a:	ed2d 8b08 	vpush	{d8-d11}
 800298e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8002992:	f1b9 0f00 	cmp.w	r9, #0
 8002996:	d060      	beq.n	8002a5a <Validation_PostProcess+0xde>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
  }
  else
  {   
    /*********************************/
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8002998:	f8d0 7450 	ldr.w	r7, [r0, #1104]	; 0x450
 800299c:	2f00      	cmp	r7, #0
 800299e:	d03a      	beq.n	8002a16 <Validation_PostProcess+0x9a>
    {
      /*Command execution completed => return to NOMINAL mode*/
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80029a0:	f04f 0801 	mov.w	r8, #1
      
      /*Set run_loop to zero*/
      App_Cxt_Ptr->run_loop = 0;
 80029a4:	2000      	movs	r0, #0
      
      /*SD de-init rerquired before the subsequent call to CAMERA_Init() following goto RESTART*/
      BSP_SD_DeInit(0);
      
      /**Sent "CMD_COMPLETE_SUCCESS_EVT" Event to Host**/
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80029a6:	4faa      	ldr	r7, [pc, #680]	; (8002c50 <Validation_PostProcess+0x2d4>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80029a8:	f204 456c 	addw	r5, r4, #1132	; 0x46c
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80029ac:	f884 8454 	strb.w	r8, [r4, #1108]	; 0x454
      App_Cxt_Ptr->run_loop = 0;
 80029b0:	6070      	str	r0, [r6, #4]
      BSP_SD_DeInit(0);
 80029b2:	f006 f905 	bl	8008bc0 <BSP_SD_DeInit>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80029b6:	2202      	movs	r2, #2
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80029b8:	4638      	mov	r0, r7
 80029ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80029be:	703a      	strb	r2, [r7, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80029c0:	f001 fa5a 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80029c4:	4642      	mov	r2, r8
 80029c6:	4639      	mov	r1, r7
 80029c8:	4628      	mov	r0, r5
 80029ca:	f00d fb03 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	f040 8102 	bne.w	8002bd8 <Validation_PostProcess+0x25c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80029d4:	4628      	mov	r0, r5
 80029d6:	f00d fd27 	bl	8010428 <HAL_UART_GetState>
 80029da:	2820      	cmp	r0, #32
 80029dc:	d1fa      	bne.n	80029d4 <Validation_PostProcess+0x58>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80029de:	4628      	mov	r0, r5
 80029e0:	220a      	movs	r2, #10
 80029e2:	499c      	ldr	r1, [pc, #624]	; (8002c54 <Validation_PostProcess+0x2d8>)
 80029e4:	f00d fb46 	bl	8010074 <HAL_UART_Receive_DMA>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	f040 812b 	bne.w	8002c44 <Validation_PostProcess+0x2c8>
      Uart_Rx(TestContext_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
      
      /**write the execution timings to the execution_timings_buff located in external memory**/
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
      {
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80029ee:	f646 1298 	movw	r2, #27032	; 0x6998
 80029f2:	4b99      	ldr	r3, [pc, #612]	; (8002c58 <Validation_PostProcess+0x2dc>)
 80029f4:	58b2      	ldr	r2, [r6, r2]
 80029f6:	6811      	ldr	r1, [r2, #0]
 80029f8:	6019      	str	r1, [r3, #0]
 80029fa:	6851      	ldr	r1, [r2, #4]
 80029fc:	6059      	str	r1, [r3, #4]
 80029fe:	6891      	ldr	r1, [r2, #8]
 8002a00:	6099      	str	r1, [r3, #8]
 8002a02:	68d1      	ldr	r1, [r2, #12]
 8002a04:	60d9      	str	r1, [r3, #12]
 8002a06:	6912      	ldr	r2, [r2, #16]
 8002a08:	611a      	str	r2, [r3, #16]
        BSP_LED_Toggle(LED_GREEN);
      };
    }
  }
#endif /* OBJECTDETECT */
}
 8002a0a:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 8002a0e:	ecbd 8b08 	vpop	{d8-d11}
 8002a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sprintf(msgtmp, "Onboard Validation completed");
 8002a16:	4d91      	ldr	r5, [pc, #580]	; (8002c5c <Validation_PostProcess+0x2e0>)
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002a18:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002a1c:	f015 fd32 	bl	8018484 <UTIL_LCD_Clear>
      sprintf(msgtmp, "Onboard Validation completed");
 8002a20:	ac0c      	add	r4, sp, #48	; 0x30
 8002a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a2a:	c407      	stmia	r4!, {r0, r1, r2}
 8002a2c:	7023      	strb	r3, [r4, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)msgtmp, CENTER_MODE);
 8002a2e:	f015 fcd1 	bl	80183d4 <UTIL_LCD_GetFont>
 8002a32:	4601      	mov	r1, r0
 8002a34:	2301      	movs	r3, #1
 8002a36:	4638      	mov	r0, r7
 8002a38:	88c9      	ldrh	r1, [r1, #6]
 8002a3a:	aa0c      	add	r2, sp, #48	; 0x30
 8002a3c:	4099      	lsls	r1, r3
 8002a3e:	f015 fe09 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002a42:	f646 1394 	movw	r3, #27028	; 0x6994
 8002a46:	58f0      	ldr	r0, [r6, r3]
 8002a48:	f7fe fc92 	bl	8001370 <DISPLAY_Refresh>
        HAL_Delay(100);
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	f006 fa43 	bl	8008ed8 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f004 f9c0 	bl	8006dd8 <BSP_LED_Toggle>
      while (1)
 8002a58:	e7f8      	b.n	8002a4c <Validation_PostProcess+0xd0>
    strcpy(pathtmp, TestContext_Ptr->ValidationContext.tmp_class_path);
 8002a5a:	af4c      	add	r7, sp, #304	; 0x130
    strcat(pathtmp, TestContext_Ptr->ValidationContext.img_fno.fname);
 8002a5c:	f200 25ba 	addw	r5, r0, #698	; 0x2ba
    strcpy(pathtmp, TestContext_Ptr->ValidationContext.tmp_class_path);
 8002a60:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 8002a64:	f646 1b94 	movw	fp, #27028	; 0x6994
 8002a68:	4638      	mov	r0, r7
    network_pp_outBuffer_t *pOutBuff = App_Cxt_Ptr->People_ContextPtr->output.pOutBuff;
 8002a6a:	f646 18a0 	movw	r8, #27040	; 0x69a0
    strcpy(pathtmp, TestContext_Ptr->ValidationContext.tmp_class_path);
 8002a6e:	f020 faaf 	bl	8022fd0 <stpcpy>
    strcat(pathtmp, "/");
 8002a72:	232f      	movs	r3, #47	; 0x2f
    strcat(pathtmp, TestContext_Ptr->ValidationContext.img_fno.fname);
 8002a74:	4629      	mov	r1, r5
 8002a76:	3001      	adds	r0, #1
    strcat(pathtmp, "/");
 8002a78:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(pathtmp, TestContext_Ptr->ValidationContext.img_fno.fname);
 8002a7c:	44b3      	add	fp, r6
 8002a7e:	f020 faa7 	bl	8022fd0 <stpcpy>
    strcat(pathtmp," \n");
 8002a82:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <Validation_PostProcess+0x2e4>)
 8002a84:	881a      	ldrh	r2, [r3, #0]
 8002a86:	789b      	ldrb	r3, [r3, #2]
 8002a88:	8002      	strh	r2, [r0, #0]
 8002a8a:	7083      	strb	r3, [r0, #2]
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)pathtmp, LEFT_MODE);
 8002a8c:	f015 fca2 	bl	80183d4 <UTIL_LCD_GetFont>
 8002a90:	463a      	mov	r2, r7
 8002a92:	2303      	movs	r3, #3
 8002a94:	88c1      	ldrh	r1, [r0, #6]
 8002a96:	4648      	mov	r0, r9
 8002a98:	f015 fddc 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    strcpy(pathtmp,TestContext_Ptr->ValidationContext.img_fno.fname);
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4638      	mov	r0, r7
    strcat(pathtmp, ".txt");
 8002aa0:	4d70      	ldr	r5, [pc, #448]	; (8002c64 <Validation_PostProcess+0x2e8>)
    strcpy(pathtmp,TestContext_Ptr->ValidationContext.img_fno.fname);
 8002aa2:	f020 fa95 	bl	8022fd0 <stpcpy>
 8002aa6:	4603      	mov	r3, r0
    strcat(pathtmp, ".txt");
 8002aa8:	4638      	mov	r0, r7
    pathtmp[strlen(pathtmp)-4]='\0';
 8002aaa:	f803 9c04 	strb.w	r9, [r3, #-4]
    strcat(pathtmp, ".txt");
 8002aae:	f7fd fc21 	bl	80002f4 <strlen>
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	f895 c004 	ldrb.w	ip, [r5, #4]
 8002ab8:	6828      	ldr	r0, [r5, #0]
    write_txt(pathtmp, "", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002aba:	465b      	mov	r3, fp
    strcat(pathtmp, ".txt");
 8002abc:	187d      	adds	r5, r7, r1
    write_txt(pathtmp, "", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002abe:	220a      	movs	r2, #10
    strcat(pathtmp, ".txt");
 8002ac0:	5078      	str	r0, [r7, r1]
    write_txt(pathtmp, "", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002ac2:	4638      	mov	r0, r7
    strcat(pathtmp, ".txt");
 8002ac4:	f885 c004 	strb.w	ip, [r5, #4]
    write_txt(pathtmp, "", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002ac8:	4967      	ldr	r1, [pc, #412]	; (8002c68 <Validation_PostProcess+0x2ec>)
 8002aca:	f7fe fe19 	bl	8001700 <write_txt.isra.0>
    network_pp_outBuffer_t *pOutBuff = App_Cxt_Ptr->People_ContextPtr->output.pOutBuff;
 8002ace:	f856 1008 	ldr.w	r1, [r6, r8]
    qsort(pOutBuff, App_Cxt_Ptr->People_ContextPtr->output.nb_detect, sizeof(network_pp_outBuffer_t),
 8002ad2:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <Validation_PostProcess+0x2f0>)
 8002ad4:	2218      	movs	r2, #24
 8002ad6:	e9d1 5116 	ldrd	r5, r1, [r1, #88]	; 0x58
 8002ada:	4628      	mov	r0, r5
 8002adc:	f020 f8c3 	bl	8022c66 <qsort>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8002ae0:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d17a      	bne.n	8002bde <Validation_PostProcess+0x262>
    for (int32_t i = 0; i < App_Cxt_Ptr->People_ContextPtr->output.nb_detect; i++)
 8002ae8:	f856 3008 	ldr.w	r3, [r6, r8]
 8002aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	f340 80ab 	ble.w	8002c4a <Validation_PostProcess+0x2ce>
 8002af4:	f646 13a0 	movw	r3, #27040	; 0x69a0
 8002af8:	f105 0917 	add.w	r9, r5, #23
{
 8002afc:	f04f 0a00 	mov.w	sl, #0
 8002b00:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8002b04:	18f3      	adds	r3, r6, r3
      sprintf(msgtmp, "%.f%% x:%.1fy:%.1f", (conf * 100), x_center, y_center);
 8002b06:	eddf ba5a 	vldr	s23, [pc, #360]	; 8002c70 <Validation_PostProcess+0x2f4>
 8002b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b0c:	e009      	b.n	8002b22 <Validation_PostProcess+0x1a6>
    for (int32_t i = 0; i < App_Cxt_Ptr->People_ContextPtr->output.nb_detect; i++)
 8002b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b10:	f10a 0a01 	add.w	sl, sl, #1
      pOutBuff++;
 8002b14:	3518      	adds	r5, #24
    for (int32_t i = 0; i < App_Cxt_Ptr->People_ContextPtr->output.nb_detect; i++)
 8002b16:	f109 0918 	add.w	r9, r9, #24
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b1e:	4552      	cmp	r2, sl
 8002b20:	dd6e      	ble.n	8002c00 <Validation_PostProcess+0x284>
      float32_t width = pOutBuff->width;
 8002b22:	edd5 9a02 	vldr	s19, [r5, #8]
      float32_t y_center = pOutBuff->y_center;
 8002b26:	ed95 8a01 	vldr	s16, [r5, #4]
      float32_t height = pOutBuff->height;
 8002b2a:	ed95 ba03 	vldr	s22, [r5, #12]
      DISPLAY_DrawBBox(x_center, y_center, width, height);
 8002b2e:	eeb0 1a69 	vmov.f32	s2, s19
      float32_t x_center = pOutBuff->x_center;
 8002b32:	ed95 0a00 	vldr	s0, [r5]
      DISPLAY_DrawBBox(x_center, y_center, width, height);
 8002b36:	eef0 0a48 	vmov.f32	s1, s16
      float32_t conf = pOutBuff->conf;
 8002b3a:	ed95 9a04 	vldr	s18, [r5, #16]
      DISPLAY_DrawBBox(x_center, y_center, width, height);
 8002b3e:	eef0 1a4b 	vmov.f32	s3, s22
      sprintf(msgtmp, "%.f%% x:%.1fy:%.1f", (conf * 100), x_center, y_center);
 8002b42:	eeb7 aac0 	vcvt.f64.f32	d10, s0
      DISPLAY_DrawBBox(x_center, y_center, width, height);
 8002b46:	f7fe fbd5 	bl	80012f4 <DISPLAY_DrawBBox>
      sprintf(msgtmp, "%.f%% x:%.1fy:%.1f", (conf * 100), x_center, y_center);
 8002b4a:	ee69 7a2b 	vmul.f32	s15, s18, s23
 8002b4e:	4949      	ldr	r1, [pc, #292]	; (8002c74 <Validation_PostProcess+0x2f8>)
 8002b50:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8002b54:	4640      	mov	r0, r8
 8002b56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b5a:	ed8d ab00 	vstr	d10, [sp]
 8002b5e:	ec53 2b17 	vmov	r2, r3, d7
 8002b62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002b66:	f020 fa13 	bl	8022f90 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i - 1), (uint8_t *)msgtmp,
 8002b6a:	f015 fc33 	bl	80183d4 <UTIL_LCD_GetFont>
 8002b6e:	f10a 0c0a 	add.w	ip, sl, #10
 8002b72:	88c1      	ldrh	r1, [r0, #6]
 8002b74:	2303      	movs	r3, #3
 8002b76:	4642      	mov	r2, r8
 8002b78:	2000      	movs	r0, #0
 8002b7a:	fb0c f101 	mul.w	r1, ip, r1
 8002b7e:	f015 fd69 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      sprintf(msgtmp, "%i %f %f %f %f %f\n", (int) pOutBuff->class_index, conf, x_center, y_center, width, height);
 8002b82:	eeb7 6ae9 	vcvt.f64.f32	d6, s19
 8002b86:	eeb7 5acb 	vcvt.f64.f32	d5, s22
 8002b8a:	696a      	ldr	r2, [r5, #20]
 8002b8c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <Validation_PostProcess+0x2fc>)
 8002b92:	4640      	mov	r0, r8
 8002b94:	ed8d 5b08 	vstr	d5, [sp, #32]
 8002b98:	ed8d 6b06 	vstr	d6, [sp, #24]
 8002b9c:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002ba0:	ed8d ab02 	vstr	d10, [sp, #8]
 8002ba4:	ed8d 9b00 	vstr	d9, [sp]
 8002ba8:	f020 f9f2 	bl	8022f90 <siprintf>
      write_txt(pathtmp, "", FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8002bac:	465b      	mov	r3, fp
 8002bae:	2232      	movs	r2, #50	; 0x32
 8002bb0:	492d      	ldr	r1, [pc, #180]	; (8002c68 <Validation_PostProcess+0x2ec>)
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	f7fe fda4 	bl	8001700 <write_txt.isra.0>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8002bb8:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0a6      	beq.n	8002b0e <Validation_PostProcess+0x192>
 8002bc0:	1e6b      	subs	r3, r5, #1
          *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(pOutBuff) + j);
 8002bc2:	f8d4 244c 	ldr.w	r2, [r4, #1100]	; 0x44c
 8002bc6:	1c51      	adds	r1, r2, #1
 8002bc8:	f8c4 144c 	str.w	r1, [r4, #1100]	; 0x44c
 8002bcc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
        for (int j=0; j<sizeof(struct network_pp_outBuffer); j++)
 8002bd0:	4599      	cmp	r9, r3
          *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(pOutBuff) + j);
 8002bd2:	7011      	strb	r1, [r2, #0]
        for (int j=0; j<sizeof(struct network_pp_outBuffer); j++)
 8002bd4:	d1f5      	bne.n	8002bc2 <Validation_PostProcess+0x246>
 8002bd6:	e79a      	b.n	8002b0e <Validation_PostProcess+0x192>
      Error_Handler();
 8002bd8:	f001 f994 	bl	8003f04 <Error_Handler>
 8002bdc:	e6fa      	b.n	80029d4 <Validation_PostProcess+0x58>
      *(temp)++=App_Cxt_Ptr->People_ContextPtr->output.nb_detect;
 8002bde:	f856 2008 	ldr.w	r2, [r6, r8]
 8002be2:	f8d4 344c 	ldr.w	r3, [r4, #1100]	; 0x44c
 8002be6:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002be8:	f843 1b04 	str.w	r1, [r3], #4
      if(((uint32_t)temp%4 != 0))
 8002bec:	0799      	lsls	r1, r3, #30
 8002bee:	d128      	bne.n	8002c42 <Validation_PostProcess+0x2c6>
    for (int32_t i = 0; i < App_Cxt_Ptr->People_ContextPtr->output.nb_detect; i++)
 8002bf0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
      TestContext_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t* )temp;
 8002bf2:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    for (int32_t i = 0; i < App_Cxt_Ptr->People_ContextPtr->output.nb_detect; i++)
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	f73f af7c 	bgt.w	8002af4 <Validation_PostProcess+0x178>
 8002bfc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8002c00:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8002c04:	b123      	cbz	r3, 8002c10 <Validation_PostProcess+0x294>
      TestContext_Ptr->ValidationContext.acc_num_object_detected+=App_Cxt_Ptr->People_ContextPtr->output.nb_detect;
 8002c06:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    sprintf(msgtmp, "nb_detect %i :", (int) (App_Cxt_Ptr->People_ContextPtr->output.nb_detect));
 8002c10:	491a      	ldr	r1, [pc, #104]	; (8002c7c <Validation_PostProcess+0x300>)
 8002c12:	4640      	mov	r0, r8
 8002c14:	f020 f9bc 	bl	8022f90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY-2), (uint8_t *)msgtmp, LEFT_MODE);
 8002c18:	f015 fbdc 	bl	80183d4 <UTIL_LCD_GetFont>
 8002c1c:	88c1      	ldrh	r1, [r0, #6]
 8002c1e:	4642      	mov	r2, r8
 8002c20:	2303      	movs	r3, #3
 8002c22:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002c26:	2000      	movs	r0, #0
 8002c28:	f015 fd14 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002c2c:	f646 1394 	movw	r3, #27028	; 0x6994
 8002c30:	58f0      	ldr	r0, [r6, r3]
 8002c32:	f7fe fb9d 	bl	8001370 <DISPLAY_Refresh>
}
 8002c36:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 8002c3a:	ecbd 8b08 	vpop	{d8-d11}
 8002c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while(1);
 8002c42:	e7fe      	b.n	8002c42 <Validation_PostProcess+0x2c6>
    Error_Handler();
 8002c44:	f001 f95e 	bl	8003f04 <Error_Handler>
 8002c48:	e6d1      	b.n	80029ee <Validation_PostProcess+0x72>
 8002c4a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8002c4e:	e7df      	b.n	8002c10 <Validation_PostProcess+0x294>
 8002c50:	24061900 	.word	0x24061900
 8002c54:	240618e0 	.word	0x240618e0
 8002c58:	d0de0b20 	.word	0xd0de0b20
 8002c5c:	0802c104 	.word	0x0802c104
 8002c60:	0802c0c0 	.word	0x0802c0c0
 8002c64:	0802c0c4 	.word	0x0802c0c4
 8002c68:	0802c44c 	.word	0x0802c44c
 8002c6c:	08000769 	.word	0x08000769
 8002c70:	42c80000 	.word	0x42c80000
 8002c74:	0802c0cc 	.word	0x0802c0cc
 8002c78:	0802c0e0 	.word	0x0802c0e0
 8002c7c:	0802c0f4 	.word	0x0802c0f4

08002c80 <TEST_Init>:
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002c84:	2300      	movs	r3, #0
{
 8002c86:	4604      	mov	r4, r0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002c88:	2201      	movs	r2, #1
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002c8a:	2600      	movs	r6, #0
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002c8c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002c90:	2700      	movs	r7, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002c92:	7122      	strb	r2, [r4, #4]
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002c94:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002c98:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002c9c:	2100      	movs	r1, #0
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002c9e:	f884 2454 	strb.w	r2, [r4, #1108]	; 0x454
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002ca2:	f504 6e8e 	add.w	lr, r4, #1136	; 0x470
  Test_Context_Ptr->CaptureContext.capture_file_format=DATA_FORMAT_RAW;
 8002ca6:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002caa:	2200      	movs	r2, #0
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002cac:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002cb0:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002cb4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002cb8:	f204 486c 	addw	r8, r4, #1132	; 0x46c
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002cbc:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
{
 8002cc0:	b090      	sub	sp, #64	; 0x40
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002cc2:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
  Test_Context_Ptr->NonReg_FirstRun=0;
 8002cc6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 8002cca:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002cce:	2300      	movs	r3, #0
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002cd0:	4d41      	ldr	r5, [pc, #260]	; (8002dd8 <TEST_Init+0x158>)
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002cd2:	e9c4 2344 	strd	r2, r3, [r4, #272]	; 0x110
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002cd6:	f8c4 546c 	str.w	r5, [r4, #1132]	; 0x46c
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002cda:	f504 658f 	add.w	r5, r4, #1144	; 0x478
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002cde:	e9c4 2346 	strd	r2, r3, [r4, #280]	; 0x118
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002ce2:	e9c4 6702 	strd	r6, r7, [r4, #8]
  Test_Context_Ptr->CaptureContext.capture_state=0;
 8002ce6:	e9c4 6730 	strd	r6, r7, [r4, #192]	; 0xc0
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002cea:	f504 6391 	add.w	r3, r4, #1160	; 0x488
 8002cee:	e9ce 0100 	strd	r0, r1, [lr]
 8002cf2:	200c      	movs	r0, #12
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	e9c5 6700 	strd	r6, r7, [r5]
 8002cfa:	e9cc 0100 	strd	r0, r1, [ip]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002cfe:	4640      	mov	r0, r8
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002d00:	e9c3 6700 	strd	r6, r7, [r3]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002d04:	f00d fc52 	bl	80105ac <HAL_UART_Init>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d15c      	bne.n	8002dc6 <TEST_Init+0x146>
  char alive_msg[64]="Board ON & UART link OK \n";
 8002d0c:	4f33      	ldr	r7, [pc, #204]	; (8002ddc <TEST_Init+0x15c>)
 8002d0e:	466e      	mov	r6, sp
  strcpy((char*)aTxBuffer, alive_msg);
 8002d10:	4d33      	ldr	r5, [pc, #204]	; (8002de0 <TEST_Init+0x160>)
  char alive_msg[64]="Board ON & UART link OK \n";
 8002d12:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002d14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d16:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002d1a:	c603      	stmia	r6!, {r0, r1}
 8002d1c:	8032      	strh	r2, [r6, #0]
  strcpy((char*)aTxBuffer, alive_msg);
 8002d1e:	466e      	mov	r6, sp
  char alive_msg[64]="Board ON & UART link OK \n";
 8002d20:	2100      	movs	r1, #0
 8002d22:	2226      	movs	r2, #38	; 0x26
 8002d24:	f10d 001a 	add.w	r0, sp, #26
 8002d28:	f01f fa70 	bl	802220c <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8002d2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d30:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002d34:	c503      	stmia	r5!, {r0, r1}
 8002d36:	4628      	mov	r0, r5
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
  strcpy((char*)aTxBuffer, alive_msg);
 8002d3c:	f820 2918 	strh.w	r2, [r0], #-24
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d40:	2202      	movs	r2, #2
 8002d42:	f001 f899 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d46:	f1a5 0118 	sub.w	r1, r5, #24
 8002d4a:	2219      	movs	r2, #25
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	f00d f941 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d13d      	bne.n	8002dd2 <TEST_Init+0x152>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d56:	4640      	mov	r0, r8
 8002d58:	f00d fb66 	bl	8010428 <HAL_UART_GetState>
 8002d5c:	2820      	cmp	r0, #32
 8002d5e:	d1fa      	bne.n	8002d56 <TEST_Init+0xd6>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002d60:	4640      	mov	r0, r8
 8002d62:	220a      	movs	r2, #10
 8002d64:	491f      	ldr	r1, [pc, #124]	; (8002de4 <TEST_Init+0x164>)
 8002d66:	f00d f985 	bl	8010074 <HAL_UART_Receive_DMA>
 8002d6a:	bb78      	cbnz	r0, 8002dcc <TEST_Init+0x14c>
  Test_ComIf_Init(Test_Context_Ptr);
  
  /*Compute the total char size for the array Test_buffer_names[]*/
  for (int i=0; i<APP_BUFF_NUM; i++)
  {
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8002d6c:	481e      	ldr	r0, [pc, #120]	; (8002de8 <TEST_Init+0x168>)
 8002d6e:	f7fd fac1 	bl	80002f4 <strlen>
 8002d72:	f8d4 5538 	ldr.w	r5, [r4, #1336]	; 0x538
 8002d76:	4607      	mov	r7, r0
 8002d78:	481c      	ldr	r0, [pc, #112]	; (8002dec <TEST_Init+0x16c>)
 8002d7a:	443d      	add	r5, r7
 8002d7c:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 8002d80:	f7fd fab8 	bl	80002f4 <strlen>
 8002d84:	4607      	mov	r7, r0
 8002d86:	481a      	ldr	r0, [pc, #104]	; (8002df0 <TEST_Init+0x170>)
 8002d88:	442f      	add	r7, r5
 8002d8a:	f8c4 7538 	str.w	r7, [r4, #1336]	; 0x538
 8002d8e:	f7fd fab1 	bl	80002f4 <strlen>
 8002d92:	4605      	mov	r5, r0
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <TEST_Init+0x174>)
 8002d96:	442f      	add	r7, r5
 8002d98:	f8c4 7538 	str.w	r7, [r4, #1336]	; 0x538
 8002d9c:	f7fd faaa 	bl	80002f4 <strlen>
 8002da0:	4605      	mov	r5, r0
 8002da2:	4815      	ldr	r0, [pc, #84]	; (8002df8 <TEST_Init+0x178>)
 8002da4:	443d      	add	r5, r7
 8002da6:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 8002daa:	f7fd faa3 	bl	80002f4 <strlen>
 8002dae:	4603      	mov	r3, r0
  }

  /* Init IPL heap memory for image read/write operations */
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8002db0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002db4:	4811      	ldr	r0, [pc, #68]	; (8002dfc <TEST_Init+0x17c>)
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8002db6:	441d      	add	r5, r3
 8002db8:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
}
 8002dbc:	b010      	add	sp, #64	; 0x40
 8002dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8002dc2:	f013 ba45 	b.w	8016250 <STM32Ipl_InitLib>
    Error_Handler();
 8002dc6:	f001 f89d 	bl	8003f04 <Error_Handler>
 8002dca:	e79f      	b.n	8002d0c <TEST_Init+0x8c>
    Error_Handler();
 8002dcc:	f001 f89a 	bl	8003f04 <Error_Handler>
 8002dd0:	e7cc      	b.n	8002d6c <TEST_Init+0xec>
      Error_Handler();
 8002dd2:	f001 f897 	bl	8003f04 <Error_Handler>
 8002dd6:	e7be      	b.n	8002d56 <TEST_Init+0xd6>
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	080256e0 	.word	0x080256e0
 8002de0:	24061900 	.word	0x24061900
 8002de4:	240618e0 	.word	0x240618e0
 8002de8:	2400000c 	.word	0x2400000c
 8002dec:	2400002c 	.word	0x2400002c
 8002df0:	2400004c 	.word	0x2400004c
 8002df4:	2400006c 	.word	0x2400006c
 8002df8:	2400008c 	.word	0x2400008c
 8002dfc:	d0977000 	.word	0xd0977000

08002e00 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 8002e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002e04:	f200 456c 	addw	r5, r0, #1132	; 0x46c
{
 8002e08:	4604      	mov	r4, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f00d fb0c 	bl	8010428 <HAL_UART_GetState>
 8002e10:	2820      	cmp	r0, #32
 8002e12:	d001      	beq.n	8002e18 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002e18:	f8d4 6450 	ldr.w	r6, [r4, #1104]	; 0x450
 8002e1c:	2e00      	cmp	r6, #0
 8002e1e:	d1f9      	bne.n	8002e14 <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 8002e20:	4f27      	ldr	r7, [pc, #156]	; (8002ec0 <TEST_CmdIf_Check+0xc0>)
 8002e22:	4601      	mov	r1, r0
 8002e24:	2201      	movs	r2, #1
 8002e26:	4638      	mov	r0, r7
 8002e28:	f001 f826 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 8002e2c:	783b      	ldrb	r3, [r7, #0]
 8002e2e:	2b18      	cmp	r3, #24
 8002e30:	d820      	bhi.n	8002e74 <TEST_CmdIf_Check+0x74>
      *(aTxBuffer) = CMD_ACK_EVT;
 8002e32:	4824      	ldr	r0, [pc, #144]	; (8002ec4 <TEST_CmdIf_Check+0xc4>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e34:	2202      	movs	r2, #2
 8002e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
      *(aTxBuffer) = CMD_ACK_EVT;
 8002e3a:	7006      	strb	r6, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e3c:	f001 f81c 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002e40:	4820      	ldr	r0, [pc, #128]	; (8002ec4 <TEST_CmdIf_Check+0xc4>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	4601      	mov	r1, r0
 8002e46:	4628      	mov	r0, r5
 8002e48:	f00d f8c4 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002e4c:	bba0      	cbnz	r0, 8002eb8 <TEST_CmdIf_Check+0xb8>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f00d faea 	bl	8010428 <HAL_UART_GetState>
 8002e54:	2820      	cmp	r0, #32
 8002e56:	d1fa      	bne.n	8002e4e <TEST_CmdIf_Check+0x4e>
      HAL_Delay(500);
 8002e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e5c:	f006 f83c 	bl	8008ed8 <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8002e60:	783d      	ldrb	r5, [r7, #0]
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <TEST_CmdIf_Check+0xc8>)
 8002e64:	4620      	mov	r0, r4
 8002e66:	2200      	movs	r2, #0
 8002e68:	4918      	ldr	r1, [pc, #96]	; (8002ecc <TEST_CmdIf_Check+0xcc>)
 8002e6a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
 8002e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8002e72:	4718      	bx	r3
      *(aTxBuffer) = CMD_NACK_EVT;
 8002e74:	4c13      	ldr	r4, [pc, #76]	; (8002ec4 <TEST_CmdIf_Check+0xc4>)
 8002e76:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e7e:	4620      	mov	r0, r4
      *(aTxBuffer) = CMD_NACK_EVT;
 8002e80:	7026      	strb	r6, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e82:	f000 fff9 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002e86:	4632      	mov	r2, r6
 8002e88:	4621      	mov	r1, r4
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f00d f8a2 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8002e90:	b978      	cbnz	r0, 8002eb2 <TEST_CmdIf_Check+0xb2>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e92:	4628      	mov	r0, r5
 8002e94:	f00d fac8 	bl	8010428 <HAL_UART_GetState>
 8002e98:	2820      	cmp	r0, #32
 8002e9a:	d1fa      	bne.n	8002e92 <TEST_CmdIf_Check+0x92>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <TEST_CmdIf_Check+0xc0>)
 8002ea2:	f00d f8e7 	bl	8010074 <HAL_UART_Receive_DMA>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d0b4      	beq.n	8002e14 <TEST_CmdIf_Check+0x14>
}
 8002eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8002eae:	f001 b829 	b.w	8003f04 <Error_Handler>
      Error_Handler();
 8002eb2:	f001 f827 	bl	8003f04 <Error_Handler>
 8002eb6:	e7ec      	b.n	8002e92 <TEST_CmdIf_Check+0x92>
 8002eb8:	f001 f824 	bl	8003f04 <Error_Handler>
 8002ebc:	e7c7      	b.n	8002e4e <TEST_CmdIf_Check+0x4e>
 8002ebe:	bf00      	nop
 8002ec0:	240618e0 	.word	0x240618e0
 8002ec4:	24061900 	.word	0x24061900
 8002ec8:	0802c22c 	.word	0x0802c22c
 8002ecc:	240618e1 	.word	0x240618e1

08002ed0 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 8002ed0:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002ed2:	f04f 35ff 	mov.w	r5, #4294967295
{
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002eda:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002ede:	f8d4 6530 	ldr.w	r6, [r4, #1328]	; 0x530
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002ee2:	f015 facf 	bl	8018484 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002ee6:	2332      	movs	r3, #50	; 0x32
 8002ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002eec:	210a      	movs	r1, #10
 8002eee:	20c8      	movs	r0, #200	; 0xc8
 8002ef0:	9500      	str	r5, [sp, #0]
 8002ef2:	f015 fc97 	bl	8018824 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 8002ef6:	f015 fa6d 	bl	80183d4 <UTIL_LCD_GetFont>
 8002efa:	2301      	movs	r3, #1
 8002efc:	88c1      	ldrh	r1, [r0, #6]
 8002efe:	2000      	movs	r0, #0
 8002f00:	4a74      	ldr	r2, [pc, #464]	; (80030d4 <TEST_MainMenu+0x204>)
 8002f02:	f015 fba7 	bl	8018654 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8002f06:	f015 fa65 	bl	80183d4 <UTIL_LCD_GetFont>
 8002f0a:	88c1      	ldrh	r1, [r0, #6]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <TEST_MainMenu+0x208>)
 8002f10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002f14:	2000      	movs	r0, #0
 8002f16:	f015 fb9d 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 8002f1a:	f015 fa5b 	bl	80183d4 <UTIL_LCD_GetFont>
 8002f1e:	88c1      	ldrh	r1, [r0, #6]
 8002f20:	2301      	movs	r3, #1
 8002f22:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <TEST_MainMenu+0x20c>)
 8002f24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002f28:	2000      	movs	r0, #0
 8002f2a:	4099      	lsls	r1, r3
 8002f2c:	f015 fb92 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8002f30:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002f34:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002f38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	9500      	str	r5, [sp, #0]
 8002f40:	f015 fbd8 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002f44:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002f48:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002f4c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f54:	9500      	str	r5, [sp, #0]
 8002f56:	f015 fbcd 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002f5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f5e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002f62:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002f66:	461a      	mov	r2, r3
 8002f68:	9500      	str	r5, [sp, #0]
 8002f6a:	f015 fbc3 	bl	80186f4 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002f6e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002f72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002f76:	9500      	str	r5, [sp, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	f015 fbba 	bl	80186f4 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002f80:	f015 fa28 	bl	80183d4 <UTIL_LCD_GetFont>
 8002f84:	2301      	movs	r3, #1
 8002f86:	88c1      	ldrh	r1, [r0, #6]
 8002f88:	2000      	movs	r0, #0
 8002f8a:	4a55      	ldr	r2, [pc, #340]	; (80030e0 <TEST_MainMenu+0x210>)
 8002f8c:	4099      	lsls	r1, r3
 8002f8e:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002f92:	f015 fb5f 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 8002f96:	f015 fa1d 	bl	80183d4 <UTIL_LCD_GetFont>
 8002f9a:	88c1      	ldrh	r1, [r0, #6]
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <TEST_MainMenu+0x214>)
 8002fa0:	1049      	asrs	r1, r1, #1
 8002fa2:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8002fa6:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002faa:	f015 fb53 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 8002fae:	f015 fa11 	bl	80183d4 <UTIL_LCD_GetFont>
 8002fb2:	88c1      	ldrh	r1, [r0, #6]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4a4c      	ldr	r2, [pc, #304]	; (80030e8 <TEST_MainMenu+0x218>)
 8002fb8:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f015 fb49 	bl	8018654 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 8002fc2:	f015 fa07 	bl	80183d4 <UTIL_LCD_GetFont>
 8002fc6:	88c1      	ldrh	r1, [r0, #6]
 8002fc8:	2303      	movs	r3, #3
 8002fca:	4a48      	ldr	r2, [pc, #288]	; (80030ec <TEST_MainMenu+0x21c>)
 8002fcc:	1049      	asrs	r1, r1, #1
 8002fce:	2096      	movs	r0, #150	; 0x96
 8002fd0:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002fd4:	f015 fb3e 	bl	8018654 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002fd8:	f646 1394 	movw	r3, #27028	; 0x6994
 8002fdc:	58f0      	ldr	r0, [r6, r3]
 8002fde:	f7fe f9c7 	bl	8001370 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002fe2:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8002fe6:	b143      	cbz	r3, 8002ffa <TEST_MainMenu+0x12a>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 8002fe8:	f894 3454 	ldrb.w	r3, [r4, #1108]	; 0x454
 8002fec:	442b      	add	r3, r5
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d827      	bhi.n	8003042 <TEST_MainMenu+0x172>
 8002ff2:	e8df f003 	tbb	[pc, r3]
 8002ff6:	2f21      	.short	0x2f21
 8002ff8:	283b      	.short	0x283b
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	f003 ffe9 	bl	8006fd4 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE)
 8003002:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 8003006:	d0f8      	beq.n	8002ffa <TEST_MainMenu+0x12a>
    }

    switch (joy_state)
 8003008:	3b02      	subs	r3, #2
 800300a:	2b0e      	cmp	r3, #14
 800300c:	d80e      	bhi.n	800302c <TEST_MainMenu+0x15c>
 800300e:	e8df f003 	tbb	[pc, r3]
 8003012:	0d49      	.short	0x0d49
 8003014:	0d0d0d3b 	.word	0x0d0d0d3b
 8003018:	0d0d0d08 	.word	0x0d0d0d08
 800301c:	0d0d0d0d 	.word	0x0d0d0d0d
 8003020:	59          	.byte	0x59
 8003021:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 8003022:	4620      	mov	r0, r4
 8003024:	f7ff faa8 	bl	8002578 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003028:	2304      	movs	r3, #4
 800302a:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 800302c:	20c8      	movs	r0, #200	; 0xc8
  }
}
 800302e:	b002      	add	sp, #8
 8003030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003034:	f005 bf50 	b.w	8008ed8 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003038:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 800303a:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 800303c:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 800303e:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
}
 8003042:	b002      	add	sp, #8
 8003044:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff fa96 	bl	8002578 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 800304c:	2304      	movs	r3, #4
 800304e:	7033      	strb	r3, [r6, #0]
}
 8003050:	b002      	add	sp, #8
 8003052:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 8003054:	4620      	mov	r0, r4
 8003056:	f7fe fee9 	bl	8001e2c <OnBoardValidInit>
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800305a:	f646 138c 	movw	r3, #27020	; 0x698c
      App_Cxt_Ptr->Operating_Mode=VALID;
 800305e:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003060:	2201      	movs	r2, #1
 8003062:	58f3      	ldr	r3, [r6, r3]
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003064:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003066:	751a      	strb	r2, [r3, #20]
}
 8003068:	b002      	add	sp, #8
 800306a:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 800306c:	4620      	mov	r0, r4
 800306e:	f7ff f86f 	bl	8002150 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003072:	2303      	movs	r3, #3
 8003074:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003076:	7923      	ldrb	r3, [r4, #4]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d1e2      	bne.n	8003042 <TEST_MainMenu+0x172>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800307c:	f646 138c 	movw	r3, #27020	; 0x698c
 8003080:	2201      	movs	r2, #1
 8003082:	58f3      	ldr	r3, [r6, r3]
 8003084:	751a      	strb	r2, [r3, #20]
 8003086:	e7dc      	b.n	8003042 <TEST_MainMenu+0x172>
      MemoryDumpInit(Test_Context_Ptr);
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff f861 	bl	8002150 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 800308e:	2303      	movs	r3, #3
 8003090:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003092:	7923      	ldrb	r3, [r4, #4]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d1c9      	bne.n	800302c <TEST_MainMenu+0x15c>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003098:	f646 138c 	movw	r3, #27020	; 0x698c
 800309c:	2201      	movs	r2, #1
 800309e:	58f3      	ldr	r3, [r6, r3]
 80030a0:	751a      	strb	r2, [r3, #20]
 80030a2:	e7c3      	b.n	800302c <TEST_MainMenu+0x15c>
      OnBoardValidInit(Test_Context_Ptr);
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7fe fec1 	bl	8001e2c <OnBoardValidInit>
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80030aa:	f646 138c 	movw	r3, #27020	; 0x698c
      App_Cxt_Ptr->Operating_Mode=VALID;
 80030ae:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80030b0:	2201      	movs	r2, #1
 80030b2:	58f3      	ldr	r3, [r6, r3]
    HAL_Delay(200);
 80030b4:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 80030b6:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80030b8:	751a      	strb	r2, [r3, #20]
}
 80030ba:	b002      	add	sp, #8
 80030bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80030c0:	f005 bf0a 	b.w	8008ed8 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80030c4:	2301      	movs	r3, #1
    HAL_Delay(200);
 80030c6:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80030c8:	7033      	strb	r3, [r6, #0]
}
 80030ca:	b002      	add	sp, #8
 80030cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80030d0:	f005 bf02 	b.w	8008ed8 <HAL_Delay>
 80030d4:	0802c124 	.word	0x0802c124
 80030d8:	0802bf78 	.word	0x0802bf78
 80030dc:	0802c134 	.word	0x0802c134
 80030e0:	0802bd48 	.word	0x0802bd48
 80030e4:	0802bd54 	.word	0x0802bd54
 80030e8:	0802bd64 	.word	0x0802bd64
 80030ec:	0802bd78 	.word	0x0802bd78

080030f0 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 80030f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  image_t tmp_img;
  image_t dum_img;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
#elif CAMERA_CAPTURE_RES == QVGA_320_240_RES
  char class_path[64]=  "/dump_src_image_qvga";
 80030f2:	4d2b      	ldr	r5, [pc, #172]	; (80031a0 <TEST_GetNextDumpInput+0xb0>)
{
 80030f4:	b0a7      	sub	sp, #156	; 0x9c
 80030f6:	4607      	mov	r7, r0
 80030f8:	460e      	mov	r6, r1
  char class_path[64]=  "/dump_src_image_qvga";
 80030fa:	ac16      	add	r4, sp, #88	; 0x58
 80030fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003100:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003104:	222b      	movs	r2, #43	; 0x2b
 8003106:	f844 0b04 	str.w	r0, [r4], #4
 800310a:	f10d 006d 	add.w	r0, sp, #109	; 0x6d
 800310e:	7021      	strb	r1, [r4, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	f01f f87b 	bl	802220c <memset>
#endif
  FRESULT res;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;

  res = f_opendir(&class_dir, class_path);
 8003116:	a916      	add	r1, sp, #88	; 0x58
 8003118:	a809      	add	r0, sp, #36	; 0x24
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800311a:	f8d7 5530 	ldr.w	r5, [r7, #1328]	; 0x530
  res = f_opendir(&class_dir, class_path);
 800311e:	f012 fb8b 	bl	8015838 <f_opendir>
  if (res != FR_OK)
 8003122:	b100      	cbz	r0, 8003126 <TEST_GetNextDumpInput+0x36>
  {
    while (1);
 8003124:	e7fe      	b.n	8003124 <TEST_GetNextDumpInput+0x34>
  }

  /* Find next image file in current class directory */
  res = f_readdir(&class_dir, &img_fno);
 8003126:	4c1f      	ldr	r4, [pc, #124]	; (80031a4 <TEST_GetNextDumpInput+0xb4>)
 8003128:	a809      	add	r0, sp, #36	; 0x24
 800312a:	4621      	mov	r1, r4
 800312c:	f012 fc8a 	bl	8015a44 <f_readdir>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 8003130:	7da3      	ldrb	r3, [r4, #22]
 8003132:	b903      	cbnz	r3, 8003136 <TEST_GetNextDumpInput+0x46>
  {
    while (1); /* error: end of dir or not a file */
 8003134:	e7fe      	b.n	8003134 <TEST_GetNextDumpInput+0x44>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 8003136:	7a23      	ldrb	r3, [r4, #8]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	4303      	orrs	r3, r0
 800313e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003142:	d1f7      	bne.n	8003134 <TEST_GetNextDumpInput+0x44>
  }

  strcpy(tmp_msg, class_path);
 8003144:	4f18      	ldr	r7, [pc, #96]	; (80031a8 <TEST_GetNextDumpInput+0xb8>)
 8003146:	a916      	add	r1, sp, #88	; 0x58
 8003148:	4638      	mov	r0, r7
 800314a:	f01f ff41 	bl	8022fd0 <stpcpy>
  strcat(tmp_msg, "/");
 800314e:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 8003150:	f104 0116 	add.w	r1, r4, #22
 8003154:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 8003156:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 800315a:	f01f ff42 	bl	8022fe2 <strcpy>

  /* Read the image to DestBuffPtr */
  if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 800315e:	4639      	mov	r1, r7
 8003160:	a801      	add	r0, sp, #4
 8003162:	f013 fc09 	bl	8016978 <STM32Ipl_ReadImage>
 8003166:	b100      	cbz	r0, 800316a <TEST_GetNextDumpInput+0x7a>
  {
    while(1);
 8003168:	e7fe      	b.n	8003168 <TEST_GetNextDumpInput+0x78>
  }
  dum_img.data = DestBuffPtr;
  dum_img.w = tmp_img.w;
 800316a:	9b02      	ldr	r3, [sp, #8]
  dum_img.h = tmp_img.h;
  dum_img.bpp = tmp_img.bpp;
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 800316c:	a905      	add	r1, sp, #20
  dum_img.w = tmp_img.w;
 800316e:	9a03      	ldr	r2, [sp, #12]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003170:	a801      	add	r0, sp, #4
  dum_img.w = tmp_img.w;
 8003172:	9306      	str	r3, [sp, #24]
 8003174:	9b01      	ldr	r3, [sp, #4]
  dum_img.data = DestBuffPtr;
 8003176:	9608      	str	r6, [sp, #32]
  dum_img.w = tmp_img.w;
 8003178:	9207      	str	r2, [sp, #28]
 800317a:	9305      	str	r3, [sp, #20]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 800317c:	f013 f8d8 	bl	8016330 <STM32Ipl_CopyData>
 8003180:	b100      	cbz	r0, 8003184 <TEST_GetNextDumpInput+0x94>
  {
    while (1); // Invalid dim or format
 8003182:	e7fe      	b.n	8003182 <TEST_GetNextDumpInput+0x92>
  }
  STM32Ipl_ReleaseData(&tmp_img);
 8003184:	a801      	add	r0, sp, #4
 8003186:	f013 f873 	bl	8016270 <STM32Ipl_ReleaseData>

  f_closedir(&class_dir);
 800318a:	a809      	add	r0, sp, #36	; 0x24
 800318c:	f012 fc28 	bl	80159e0 <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003190:	f646 138c 	movw	r3, #27020	; 0x698c
 8003194:	2201      	movs	r2, #1
 8003196:	58eb      	ldr	r3, [r5, r3]
 8003198:	751a      	strb	r2, [r3, #20]
}
 800319a:	b027      	add	sp, #156	; 0x9c
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319e:	bf00      	nop
 80031a0:	080256a0 	.word	0x080256a0
 80031a4:	30007260 	.word	0x30007260
 80031a8:	30007378 	.word	0x30007378

080031ac <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 80031ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#endif
  static FILINFO *fno;
  image_t tmp_img;
  image_t val_img;
  FRESULT res;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80031b0:	f8d0 7530 	ldr.w	r7, [r0, #1328]	; 0x530
#ifdef OBJECTDETECT
/*image is will be pointed depending if we wanted to be post processed or not*/  
#if DIRECT_TO_NN_INPUT ==1
  DestBuffPtr = (uint8_t *)App_Cxt_Ptr->People_ContextPtr->nn_input_buffer;
#else
  DestBuffPtr = App_Cxt_Ptr->Camera_ContextPtr->camera_capture_buffer;
 80031b4:	f646 168c 	movw	r6, #27020	; 0x698c
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  dir = &TestContext_Ptr->ValidationContext.class_dir;
 80031b8:	f500 751c 	add.w	r5, r0, #624	; 0x270
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80031bc:	f500 7129 	add.w	r1, r0, #676	; 0x2a4
 80031c0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003288 <TEST_GetNextValidationInput+0xdc>
{
 80031c4:	b089      	sub	sp, #36	; 0x24
  DestBuffPtr = App_Cxt_Ptr->Camera_ContextPtr->camera_capture_buffer;
 80031c6:	59bb      	ldr	r3, [r7, r6]
{
 80031c8:	4604      	mov	r4, r0
  res = f_readdir(dir, fno); /* Read a directory item */
 80031ca:	4628      	mov	r0, r5
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80031cc:	f8c9 1000 	str.w	r1, [r9]
  DestBuffPtr = App_Cxt_Ptr->Camera_ContextPtr->camera_capture_buffer;
 80031d0:	f8d3 8000 	ldr.w	r8, [r3]
  res = f_readdir(dir, fno); /* Read a directory item */
 80031d4:	f012 fc36 	bl	8015a44 <f_readdir>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 80031d8:	b918      	cbnz	r0, 80031e2 <TEST_GetNextValidationInput+0x36>
 80031da:	f8d9 3000 	ldr.w	r3, [r9]
 80031de:	7d9a      	ldrb	r2, [r3, #22]
 80031e0:	b992      	cbnz	r2, 8003208 <TEST_GetNextValidationInput+0x5c>

  } /* End for each file in class directory */
  else
  {
    /*Close class directory*/
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 80031e2:	4628      	mov	r0, r5
 80031e4:	f012 fbfc 	bl	80159e0 <f_closedir>
#ifdef OBJECTDETECT
    /* Program has Looped through all class dirs*/

      /******Moved here from the postprocess() to avoid going thru the main appli while(1) loop again after the validation is completed******/
      /* End of validation */
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80031e8:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 80031ec:	bb7b      	cbnz	r3, 800324e <TEST_GetNextValidationInput+0xa2>
        HAL_Delay(1000);

      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80031ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80031f2:	f015 f947 	bl	8018484 <UTIL_LCD_Clear>

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80031f6:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 80031fa:	bb1b      	cbnz	r3, 8003244 <TEST_GetNextValidationInput+0x98>
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.validation_completed =1;
    }
#endif /* OBJECTDETECT */

  }
}
 8003202:	b009      	add	sp, #36	; 0x24
 8003204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003208:	7a1b      	ldrb	r3, [r3, #8]
 800320a:	06db      	lsls	r3, r3, #27
 800320c:	d4e9      	bmi.n	80031e2 <TEST_GetNextValidationInput+0x36>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800320e:	4d1d      	ldr	r5, [pc, #116]	; (8003284 <TEST_GetNextValidationInput+0xd8>)
    BSP_LED_Toggle(LED_BLUE);
 8003210:	2003      	movs	r0, #3
 8003212:	f003 fde1 	bl	8006dd8 <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003216:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800321a:	f015 f933 	bl	8018484 <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800321e:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8003222:	4628      	mov	r0, r5
 8003224:	f01f fed4 	bl	8022fd0 <stpcpy>
    strcat(tmp_msg, "/");
 8003228:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800322a:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
 800322e:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 8003230:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003234:	f01f fed5 	bl	8022fe2 <strcpy>
    if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 8003238:	4629      	mov	r1, r5
 800323a:	4668      	mov	r0, sp
 800323c:	f013 fb9c 	bl	8016978 <STM32Ipl_ReadImage>
 8003240:	b150      	cbz	r0, 8003258 <TEST_GetNextValidationInput+0xac>
      while(1);
 8003242:	e7fe      	b.n	8003242 <TEST_GetNextValidationInput+0x96>
        HAL_Delay(1000);
 8003244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003248:	f005 fe46 	bl	8008ed8 <HAL_Delay>
 800324c:	e7d6      	b.n	80031fc <TEST_GetNextValidationInput+0x50>
        HAL_Delay(1000);
 800324e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003252:	f005 fe41 	bl	8008ed8 <HAL_Delay>
 8003256:	e7ca      	b.n	80031ee <TEST_GetNextValidationInput+0x42>
    val_img.w = tmp_img.w;
 8003258:	9b01      	ldr	r3, [sp, #4]
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 800325a:	a904      	add	r1, sp, #16
    val_img.w = tmp_img.w;
 800325c:	9a02      	ldr	r2, [sp, #8]
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 800325e:	4668      	mov	r0, sp
    val_img.w = tmp_img.w;
 8003260:	9305      	str	r3, [sp, #20]
 8003262:	9b00      	ldr	r3, [sp, #0]
    val_img.data = DestBuffPtr;
 8003264:	f8cd 801c 	str.w	r8, [sp, #28]
    val_img.w = tmp_img.w;
 8003268:	9206      	str	r2, [sp, #24]
 800326a:	9304      	str	r3, [sp, #16]
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 800326c:	f013 f860 	bl	8016330 <STM32Ipl_CopyData>
 8003270:	b100      	cbz	r0, 8003274 <TEST_GetNextValidationInput+0xc8>
      while (1); /* Invalid dimensions or format */
 8003272:	e7fe      	b.n	8003272 <TEST_GetNextValidationInput+0xc6>
    STM32Ipl_ReleaseData(&tmp_img);
 8003274:	4668      	mov	r0, sp
 8003276:	f012 fffb 	bl	8016270 <STM32Ipl_ReleaseData>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 800327a:	59bb      	ldr	r3, [r7, r6]
 800327c:	2201      	movs	r2, #1
 800327e:	751a      	strb	r2, [r3, #20]
 8003280:	e7bf      	b.n	8003202 <TEST_GetNextValidationInput+0x56>
 8003282:	bf00      	nop
 8003284:	30007378 	.word	0x30007378
 8003288:	3000725c 	.word	0x3000725c

0800328c <TEST_Run>:
  char msg[70];
  uint8_t sd_error;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 800328c:	2903      	cmp	r1, #3
{
 800328e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	b0be      	sub	sp, #248	; 0xf8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003296:	f8d0 5530 	ldr.w	r5, [r0, #1328]	; 0x530
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 800329a:	d03c      	beq.n	8003316 <TEST_Run+0x8a>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 800329c:	2904      	cmp	r1, #4
 800329e:	d002      	beq.n	80032a6 <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 80032a0:	b03e      	add	sp, #248	; 0xf8
 80032a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 80032a6:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d1f8      	bne.n	80032a0 <TEST_Run+0x14>
 80032ae:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
 80032b2:	2900      	cmp	r1, #0
 80032b4:	d0f4      	beq.n	80032a0 <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 80032b6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	f000 8142 	beq.w	8003544 <TEST_Run+0x2b8>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d1ed      	bne.n	80032a0 <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80032c4:	f646 138c 	movw	r3, #27020	; 0x698c
 80032c8:	58ea      	ldr	r2, [r5, r3]
 80032ca:	7d13      	ldrb	r3, [r2, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0fc      	beq.n	80032ca <TEST_Run+0x3e>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 80032d0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f000 8254 	beq.w	8003782 <TEST_Run+0x4f6>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 80032da:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f000 8243 	beq.w	800376a <TEST_Run+0x4de>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 80bf 	bne.w	8003468 <TEST_Run+0x1dc>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80032ea:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80032ee:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80032f2:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80032f6:	a818      	add	r0, sp, #96	; 0x60
 80032f8:	9100      	str	r1, [sp, #0]
 80032fa:	49cd      	ldr	r1, [pc, #820]	; (8003630 <TEST_Run+0x3a4>)
 80032fc:	f01f fe48 	bl	8022f90 <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003300:	f646 1394 	movw	r3, #27028	; 0x6994
 8003304:	a818      	add	r0, sp, #96	; 0x60
 8003306:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 800330a:	442b      	add	r3, r5
 800330c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
 8003310:	f7fe fa38 	bl	8001784 <write_raw.isra.0>
}
 8003314:	e7c4      	b.n	80032a0 <TEST_Run+0x14>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003316:	f8d0 34f8 	ldr.w	r3, [r0, #1272]	; 0x4f8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0c0      	beq.n	80032a0 <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 800331e:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003322:	2e01      	cmp	r6, #1
 8003324:	d037      	beq.n	8003396 <TEST_Run+0x10a>
 8003326:	2e02      	cmp	r6, #2
 8003328:	d1ba      	bne.n	80032a0 <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 800332a:	f646 189c 	movw	r8, #27036	; 0x699c
 800332e:	f855 3008 	ldr.w	r3, [r5, r8]
 8003332:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 8003336:	2a00      	cmp	r2, #0
 8003338:	f000 808b 	beq.w	8003452 <TEST_Run+0x1c6>
 800333c:	f893 3456 	ldrb.w	r3, [r3, #1110]	; 0x456
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 8086 	bne.w	8003452 <TEST_Run+0x1c6>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003346:	44a8      	add	r8, r5
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003348:	2600      	movs	r6, #0
 800334a:	e007      	b.n	800335c <TEST_Run+0xd0>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 800334c:	f8d8 2000 	ldr.w	r2, [r8]
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003358:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 800335a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 800335c:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8003360:	4638      	mov	r0, r7
 8003362:	f7fc ffc7 	bl	80002f4 <strlen>
 8003366:	42b0      	cmp	r0, r6
 8003368:	d8f0      	bhi.n	800334c <TEST_Run+0xc0>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 800336a:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d096      	beq.n	80032a0 <TEST_Run+0x14>
 8003372:	f646 109c 	movw	r0, #27036	; 0x699c
 8003376:	2300      	movs	r3, #0
 8003378:	4428      	add	r0, r5
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 800337a:	6801      	ldr	r1, [r0, #0]
 800337c:	f8d4 54f8 	ldr.w	r5, [r4, #1272]	; 0x4f8
 8003380:	680a      	ldr	r2, [r1, #0]
 8003382:	1c56      	adds	r6, r2, #1
 8003384:	600e      	str	r6, [r1, #0]
 8003386:	5ce9      	ldrb	r1, [r5, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003388:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 800338a:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 800338c:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 8003390:	429a      	cmp	r2, r3
 8003392:	d8f2      	bhi.n	800337a <TEST_Run+0xee>
 8003394:	e784      	b.n	80032a0 <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 8003396:	2000      	movs	r0, #0
 8003398:	f003 fd0e 	bl	8006db8 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 800339c:	2002      	movs	r0, #2
 800339e:	f003 fcfb 	bl	8006d98 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 80033a2:	f015 f817 	bl	80183d4 <UTIL_LCD_GetFont>
 80033a6:	2302      	movs	r3, #2
 80033a8:	88c1      	ldrh	r1, [r0, #6]
 80033aa:	2000      	movs	r0, #0
 80033ac:	4aa1      	ldr	r2, [pc, #644]	; (8003634 <TEST_Run+0x3a8>)
 80033ae:	f015 f951 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80033b2:	68aa      	ldr	r2, [r5, #8]
 80033b4:	49a0      	ldr	r1, [pc, #640]	; (8003638 <TEST_Run+0x3ac>)
 80033b6:	a806      	add	r0, sp, #24
 80033b8:	f01f fdea 	bl	8022f90 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 80033bc:	f015 f80a 	bl	80183d4 <UTIL_LCD_GetFont>
 80033c0:	88c1      	ldrh	r1, [r0, #6]
 80033c2:	aa06      	add	r2, sp, #24
 80033c4:	4633      	mov	r3, r6
 80033c6:	0109      	lsls	r1, r1, #4
 80033c8:	2000      	movs	r0, #0
 80033ca:	f015 f943 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80033ce:	f646 1394 	movw	r3, #27028	; 0x6994
 80033d2:	58e8      	ldr	r0, [r5, r3]
 80033d4:	f7fd ffcc 	bl	8001370 <DISPLAY_Refresh>
      HAL_Delay(200);
 80033d8:	20c8      	movs	r0, #200	; 0xc8
 80033da:	f005 fd7d 	bl	8008ed8 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80033de:	f646 138c 	movw	r3, #27020	; 0x698c
 80033e2:	58ea      	ldr	r2, [r5, r3]
 80033e4:	7d13      	ldrb	r3, [r2, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0fc      	beq.n	80033e4 <TEST_Run+0x158>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 80033ea:	f646 189c 	movw	r8, #27036	; 0x699c
 80033ee:	f855 3008 	ldr.w	r3, [r5, r8]
 80033f2:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	d039      	beq.n	800346e <TEST_Run+0x1e2>
 80033fa:	f893 2456 	ldrb.w	r2, [r3, #1110]	; 0x456
 80033fe:	2a01      	cmp	r2, #1
 8003400:	d135      	bne.n	800346e <TEST_Run+0x1e2>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003402:	44a8      	add	r8, r5
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003404:	2600      	movs	r6, #0
 8003406:	e007      	b.n	8003418 <TEST_Run+0x18c>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003408:	f8d8 2000 	ldr.w	r2, [r8]
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	6011      	str	r1, [r2, #0]
 8003412:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003414:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003416:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003418:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 800341c:	4638      	mov	r0, r7
 800341e:	f7fc ff69 	bl	80002f4 <strlen>
 8003422:	42b0      	cmp	r0, r6
 8003424:	d8f0      	bhi.n	8003408 <TEST_Run+0x17c>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003426:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d04d      	beq.n	80034ca <TEST_Run+0x23e>
 800342e:	f646 109c 	movw	r0, #27036	; 0x699c
 8003432:	2300      	movs	r3, #0
 8003434:	4428      	add	r0, r5
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003436:	6801      	ldr	r1, [r0, #0]
 8003438:	f8d4 54f8 	ldr.w	r5, [r4, #1272]	; 0x4f8
 800343c:	680a      	ldr	r2, [r1, #0]
 800343e:	1c56      	adds	r6, r2, #1
 8003440:	600e      	str	r6, [r1, #0]
 8003442:	5ce9      	ldrb	r1, [r5, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003444:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003446:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003448:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 800344c:	429a      	cmp	r2, r3
 800344e:	d8f2      	bhi.n	8003436 <TEST_Run+0x1aa>
 8003450:	e03b      	b.n	80034ca <TEST_Run+0x23e>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003452:	f894 3514 	ldrb.w	r3, [r4, #1300]	; 0x514
 8003456:	2b01      	cmp	r3, #1
 8003458:	f000 80ce 	beq.w	80035f8 <TEST_Run+0x36c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80c2 	beq.w	80035e6 <TEST_Run+0x35a>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8003462:	2b02      	cmp	r3, #2
 8003464:	f000 80f8 	beq.w	8003658 <TEST_Run+0x3cc>
          Error_Handler(); /* DumpFormat no supported */
 8003468:	f000 fd4c 	bl	8003f04 <Error_Handler>
 800346c:	e718      	b.n	80032a0 <TEST_Run+0x14>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 800346e:	791b      	ldrb	r3, [r3, #4]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d12e      	bne.n	80034d2 <TEST_Run+0x246>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003474:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003478:	f104 0654 	add.w	r6, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 800347c:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8003480:	f00b fc14 	bl	800ecac <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003484:	68a2      	ldr	r2, [r4, #8]
 8003486:	496d      	ldr	r1, [pc, #436]	; (800363c <TEST_Run+0x3b0>)
 8003488:	f104 0010 	add.w	r0, r4, #16
 800348c:	f01f fd80 	bl	8022f90 <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003490:	68a3      	ldr	r3, [r4, #8]
 8003492:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8003496:	496a      	ldr	r1, [pc, #424]	; (8003640 <TEST_Run+0x3b4>)
 8003498:	4630      	mov	r0, r6
 800349a:	f01f fd79 	bl	8022f90 <siprintf>
  res = f_mkdir(path);
 800349e:	4630      	mov	r0, r6
 80034a0:	f012 fb3c 	bl	8015b1c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 80034a4:	f010 0ff7 	tst.w	r0, #247	; 0xf7
 80034a8:	d12e      	bne.n	8003508 <TEST_Run+0x27c>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 80034aa:	f894 3514 	ldrb.w	r3, [r4, #1300]	; 0x514
 80034ae:	f646 1794 	movw	r7, #27028	; 0x6994
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	442f      	add	r7, r5
 80034b6:	f000 80f0 	beq.w	800369a <TEST_Run+0x40e>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80dd 	beq.w	800367a <TEST_Run+0x3ee>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	f000 8106 	beq.w	80036d2 <TEST_Run+0x446>
          Error_Handler(); /* DumpFormat no supported */
 80034c6:	f000 fd1d 	bl	8003f04 <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 80034ca:	2302      	movs	r3, #2
 80034cc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 80034d0:	e6e6      	b.n	80032a0 <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f004 fa30 	bl	8007938 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80034d8:	2000      	movs	r0, #0
 80034da:	f005 fbaf 	bl	8008c3c <BSP_SD_Init>
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0c8      	beq.n	8003474 <TEST_Run+0x1e8>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80034e2:	f014 ff77 	bl	80183d4 <UTIL_LCD_GetFont>
 80034e6:	88c1      	ldrh	r1, [r0, #6]
 80034e8:	4a56      	ldr	r2, [pc, #344]	; (8003644 <TEST_Run+0x3b8>)
 80034ea:	2301      	movs	r3, #1
 80034ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80034f0:	2000      	movs	r0, #0
 80034f2:	0089      	lsls	r1, r1, #2
 80034f4:	f015 f8ae 	bl	8018654 <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80034f8:	f646 1394 	movw	r3, #27028	; 0x6994
 80034fc:	58e8      	ldr	r0, [r5, r3]
 80034fe:	f7fd ff37 	bl	8001370 <DISPLAY_Refresh>
            Error_Handler();
 8003502:	f000 fcff 	bl	8003f04 <Error_Handler>
 8003506:	e7b5      	b.n	8003474 <TEST_Run+0x1e8>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8003508:	f014 ff64 	bl	80183d4 <UTIL_LCD_GetFont>
 800350c:	88c1      	ldrh	r1, [r0, #6]
 800350e:	2301      	movs	r3, #1
 8003510:	4a4d      	ldr	r2, [pc, #308]	; (8003648 <TEST_Run+0x3bc>)
 8003512:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003516:	2000      	movs	r0, #0
 8003518:	4099      	lsls	r1, r3
 800351a:	f015 f89b 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 800351e:	f014 ff59 	bl	80183d4 <UTIL_LCD_GetFont>
 8003522:	88c1      	ldrh	r1, [r0, #6]
 8003524:	4632      	mov	r2, r6
 8003526:	2301      	movs	r3, #1
 8003528:	2000      	movs	r0, #0
 800352a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800352e:	f015 f891 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8003532:	f646 1394 	movw	r3, #27028	; 0x6994
 8003536:	58e8      	ldr	r0, [r5, r3]
 8003538:	f7fd ff1a 	bl	8001370 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800353c:	2002      	movs	r0, #2
 800353e:	f003 fc2b 	bl	8006d98 <BSP_LED_On>
    while (1);
 8003542:	e7fe      	b.n	8003542 <TEST_Run+0x2b6>
      BSP_LED_Off(LED_GREEN);
 8003544:	2000      	movs	r0, #0
 8003546:	f003 fc37 	bl	8006db8 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 800354a:	2002      	movs	r0, #2
 800354c:	f003 fc24 	bl	8006d98 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 8003550:	f014 ff40 	bl	80183d4 <UTIL_LCD_GetFont>
 8003554:	4a3d      	ldr	r2, [pc, #244]	; (800364c <TEST_Run+0x3c0>)
 8003556:	88c1      	ldrh	r1, [r0, #6]
 8003558:	2302      	movs	r3, #2
 800355a:	2000      	movs	r0, #0
 800355c:	f015 f87a 	bl	8018654 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003560:	f646 1394 	movw	r3, #27028	; 0x6994
 8003564:	58e8      	ldr	r0, [r5, r3]
 8003566:	f7fd ff03 	bl	8001370 <DISPLAY_Refresh>
      HAL_Delay(200);
 800356a:	20c8      	movs	r0, #200	; 0xc8
 800356c:	f005 fcb4 	bl	8008ed8 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003570:	f646 138c 	movw	r3, #27020	; 0x698c
 8003574:	58ea      	ldr	r2, [r5, r3]
 8003576:	7d13      	ldrb	r3, [r2, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0fc      	beq.n	8003576 <TEST_Run+0x2ea>
      BSP_CAMERA_DeInit(0);
 800357c:	2000      	movs	r0, #0
 800357e:	f004 f9db 	bl	8007938 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003582:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003586:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003588:	3301      	adds	r3, #1
 800358a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 800358e:	f005 fb55 	bl	8008c3c <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8003592:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003596:	f040 80aa 	bne.w	80036ee <TEST_Run+0x462>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 800359a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f000 80d7 	beq.w	8003752 <TEST_Run+0x4c6>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 80035a4:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	f000 80b3 	beq.w	8003714 <TEST_Run+0x488>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 808c 	bne.w	80036cc <TEST_Run+0x440>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80035b4:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80035b8:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80035bc:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80035c0:	a818      	add	r0, sp, #96	; 0x60
 80035c2:	9100      	str	r1, [sp, #0]
 80035c4:	491a      	ldr	r1, [pc, #104]	; (8003630 <TEST_Run+0x3a4>)
 80035c6:	f01f fce3 	bl	8022f90 <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 80035ca:	f646 1394 	movw	r3, #27028	; 0x6994
 80035ce:	a818      	add	r0, sp, #96	; 0x60
 80035d0:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 80035d4:	442b      	add	r3, r5
 80035d6:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
 80035da:	f7fe f8d3 	bl	8001784 <write_raw.isra.0>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 80035de:	2302      	movs	r3, #2
 80035e0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 80035e4:	e65c      	b.n	80032a0 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80035e6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80035ea:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80035ee:	4918      	ldr	r1, [pc, #96]	; (8003650 <TEST_Run+0x3c4>)
 80035f0:	a818      	add	r0, sp, #96	; 0x60
 80035f2:	f01f fccd 	bl	8022f90 <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 80035f6:	e683      	b.n	8003300 <TEST_Run+0x74>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80035f8:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80035fc:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003600:	4914      	ldr	r1, [pc, #80]	; (8003654 <TEST_Run+0x3c8>)
 8003602:	a818      	add	r0, sp, #96	; 0x60
 8003604:	f01f fcc4 	bl	8022f90 <siprintf>
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003608:	f646 1294 	movw	r2, #27028	; 0x6994
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800360c:	f8d4 7504 	ldr.w	r7, [r4, #1284]	; 0x504
 8003610:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003614:	a818      	add	r0, sp, #96	; 0x60
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003616:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800361a:	442a      	add	r2, r5
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800361c:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003620:	a906      	add	r1, sp, #24
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003622:	9309      	str	r3, [sp, #36]	; 0x24
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003624:	9506      	str	r5, [sp, #24]
 8003626:	e9cd 7607 	strd	r7, r6, [sp, #28]
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800362a:	f7fe f90d 	bl	8001848 <write_bmp.isra.0>
 800362e:	e637      	b.n	80032a0 <TEST_Run+0x14>
 8003630:	0802c1f4 	.word	0x0802c1f4
 8003634:	0802c150 	.word	0x0802c150
 8003638:	0802c15c 	.word	0x0802c15c
 800363c:	0802c080 	.word	0x0802c080
 8003640:	0802c170 	.word	0x0802c170
 8003644:	0802bf30 	.word	0x0802bf30
 8003648:	0802bfcc 	.word	0x0802bfcc
 800364c:	0802c1d4 	.word	0x0802c1d4
 8003650:	0802c18c 	.word	0x0802c18c
 8003654:	0802c1c8 	.word	0x0802c1c8
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003658:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 800365c:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003660:	494d      	ldr	r1, [pc, #308]	; (8003798 <TEST_Run+0x50c>)
 8003662:	a818      	add	r0, sp, #96	; 0x60
 8003664:	f01f fc94 	bl	8022f90 <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8003668:	f646 1394 	movw	r3, #27028	; 0x6994
 800366c:	a818      	add	r0, sp, #96	; 0x60
 800366e:	220a      	movs	r2, #10
 8003670:	442b      	add	r3, r5
 8003672:	494a      	ldr	r1, [pc, #296]	; (800379c <TEST_Run+0x510>)
 8003674:	f7fe f844 	bl	8001700 <write_txt.isra.0>
 8003678:	e612      	b.n	80032a0 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800367a:	4632      	mov	r2, r6
 800367c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8003680:	a818      	add	r0, sp, #96	; 0x60
 8003682:	4947      	ldr	r1, [pc, #284]	; (80037a0 <TEST_Run+0x514>)
 8003684:	f01f fc84 	bl	8022f90 <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003688:	463b      	mov	r3, r7
 800368a:	a818      	add	r0, sp, #96	; 0x60
 800368c:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
 8003690:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
 8003694:	f7fe f876 	bl	8001784 <write_raw.isra.0>
 8003698:	e717      	b.n	80034ca <TEST_Run+0x23e>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800369a:	4632      	mov	r2, r6
 800369c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80036a0:	a818      	add	r0, sp, #96	; 0x60
 80036a2:	4940      	ldr	r1, [pc, #256]	; (80037a4 <TEST_Run+0x518>)
 80036a4:	f01f fc74 	bl	8022f90 <siprintf>
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80036a8:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
 80036ac:	f8d4 5508 	ldr.w	r5, [r4, #1288]	; 0x508
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80036b0:	463a      	mov	r2, r7
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80036b2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80036b6:	a818      	add	r0, sp, #96	; 0x60
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80036b8:	f8d4 74f8 	ldr.w	r7, [r4, #1272]	; 0x4f8
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80036bc:	a902      	add	r1, sp, #8
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80036be:	9302      	str	r3, [sp, #8]
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80036c0:	9705      	str	r7, [sp, #20]
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80036c2:	e9cd 6503 	strd	r6, r5, [sp, #12]
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80036c6:	f7fe f8bf 	bl	8001848 <write_bmp.isra.0>
 80036ca:	e6fe      	b.n	80034ca <TEST_Run+0x23e>
        Error_Handler(); /* Capture Format no supported */
 80036cc:	f000 fc1a 	bl	8003f04 <Error_Handler>
 80036d0:	e785      	b.n	80035de <TEST_Run+0x352>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80036d2:	4632      	mov	r2, r6
 80036d4:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80036d8:	a818      	add	r0, sp, #96	; 0x60
 80036da:	492f      	ldr	r1, [pc, #188]	; (8003798 <TEST_Run+0x50c>)
 80036dc:	f01f fc58 	bl	8022f90 <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 80036e0:	463b      	mov	r3, r7
 80036e2:	a818      	add	r0, sp, #96	; 0x60
 80036e4:	220a      	movs	r2, #10
 80036e6:	492d      	ldr	r1, [pc, #180]	; (800379c <TEST_Run+0x510>)
 80036e8:	f7fe f80a 	bl	8001700 <write_txt.isra.0>
 80036ec:	e6ed      	b.n	80034ca <TEST_Run+0x23e>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80036ee:	f014 fe71 	bl	80183d4 <UTIL_LCD_GetFont>
 80036f2:	88c1      	ldrh	r1, [r0, #6]
 80036f4:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <TEST_Run+0x51c>)
 80036f6:	2301      	movs	r3, #1
 80036f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80036fc:	2000      	movs	r0, #0
 80036fe:	0089      	lsls	r1, r1, #2
 8003700:	f014 ffa8 	bl	8018654 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003704:	f646 1394 	movw	r3, #27028	; 0x6994
 8003708:	58e8      	ldr	r0, [r5, r3]
 800370a:	f7fd fe31 	bl	8001370 <DISPLAY_Refresh>
        Error_Handler();
 800370e:	f000 fbf9 	bl	8003f04 <Error_Handler>
 8003712:	e742      	b.n	800359a <TEST_Run+0x30e>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003714:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003718:	f104 02de 	add.w	r2, r4, #222	; 0xde
 800371c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8003720:	a818      	add	r0, sp, #96	; 0x60
 8003722:	9100      	str	r1, [sp, #0]
 8003724:	4921      	ldr	r1, [pc, #132]	; (80037ac <TEST_Run+0x520>)
 8003726:	f01f fc33 	bl	8022f90 <siprintf>
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800372a:	f646 1294 	movw	r2, #27028	; 0x6994
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800372e:	f8d4 7504 	ldr.w	r7, [r4, #1284]	; 0x504
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003732:	a818      	add	r0, sp, #96	; 0x60
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003734:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003738:	442a      	add	r2, r5
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 800373a:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800373e:	a906      	add	r1, sp, #24
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003740:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003746:	9506      	str	r5, [sp, #24]
 8003748:	e9cd 7607 	strd	r7, r6, [sp, #28]
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800374c:	f7fe f87c 	bl	8001848 <write_bmp.isra.0>
 8003750:	e745      	b.n	80035de <TEST_Run+0x352>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 8003752:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
 8003756:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 800375a:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
 800375e:	4608      	mov	r0, r1
 8003760:	fb02 f203 	mul.w	r2, r2, r3
 8003764:	f7fd fea6 	bl	80014b4 <PREPROC_Pixel_RB_Swap>
 8003768:	e71c      	b.n	80035a4 <TEST_Run+0x318>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800376a:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 800376e:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003772:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8003776:	a818      	add	r0, sp, #96	; 0x60
 8003778:	9100      	str	r1, [sp, #0]
 800377a:	490c      	ldr	r1, [pc, #48]	; (80037ac <TEST_Run+0x520>)
 800377c:	f01f fc08 	bl	8022f90 <siprintf>
 8003780:	e742      	b.n	8003608 <TEST_Run+0x37c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 8003782:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8003786:	4608      	mov	r0, r1
 8003788:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
 800378c:	fb02 f203 	mul.w	r2, r2, r3
 8003790:	f7fd fe90 	bl	80014b4 <PREPROC_Pixel_RB_Swap>
 8003794:	e5a1      	b.n	80032da <TEST_Run+0x4e>
 8003796:	bf00      	nop
 8003798:	0802c198 	.word	0x0802c198
 800379c:	0802c1a4 	.word	0x0802c1a4
 80037a0:	0802c18c 	.word	0x0802c18c
 80037a4:	0802c180 	.word	0x0802c180
 80037a8:	0802bf30 	.word	0x0802bf30
 80037ac:	0802c1e4 	.word	0x0802c1e4

080037b0 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80037b0:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
{
 80037b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 80037b8:	781f      	ldrb	r7, [r3, #0]
{
 80037ba:	b097      	sub	sp, #92	; 0x5c
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 80037bc:	2f04      	cmp	r7, #4
 80037be:	d007      	beq.n	80037d0 <TEST_PostProcess+0x20>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 80037c0:	2f03      	cmp	r7, #3
 80037c2:	d04d      	beq.n	8003860 <TEST_PostProcess+0xb0>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 80037c4:	2f02      	cmp	r7, #2
 80037c6:	f000 80b6 	beq.w	8003936 <TEST_PostProcess+0x186>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 80037ca:	b017      	add	sp, #92	; 0x5c
 80037cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80037d0:	f646 129c 	movw	r2, #27036	; 0x699c
 80037d4:	589c      	ldr	r4, [r3, r2]
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 80037d6:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80037da:	f8d4 6530 	ldr.w	r6, [r4, #1328]	; 0x530
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 80037de:	b305      	cbz	r5, 8003822 <TEST_PostProcess+0x72>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 80037e0:	2d02      	cmp	r5, #2
 80037e2:	d1f2      	bne.n	80037ca <TEST_PostProcess+0x1a>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 80037e4:	2000      	movs	r0, #0
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80037e6:	f646 158c 	movw	r5, #27020	; 0x698c
    TestContext_Ptr->CaptureContext.capture_state = 0;
 80037ea:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 80037ee:	f005 f9e7 	bl	8008bc0 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80037f2:	5970      	ldr	r0, [r6, r5]
 80037f4:	f7fd fac8 	bl	8000d88 <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 80037f8:	5972      	ldr	r2, [r6, r5]
 80037fa:	7d13      	ldrb	r3, [r2, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0fc      	beq.n	80037fa <TEST_PostProcess+0x4a>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8003800:	2600      	movs	r6, #0
    BSP_CAMERA_Resume(0);
 8003802:	4630      	mov	r0, r6
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8003804:	7516      	strb	r6, [r2, #20]
    BSP_CAMERA_Resume(0);
 8003806:	f004 fb89 	bl	8007f1c <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800380a:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8107 	bne.w	8003a22 <TEST_PostProcess+0x272>
    BSP_LED_On(LED_GREEN);
 8003814:	2000      	movs	r0, #0
 8003816:	f003 fabf 	bl	8006d98 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 800381a:	2002      	movs	r0, #2
 800381c:	f003 facc 	bl	8006db8 <BSP_LED_Off>
 8003820:	e7d3      	b.n	80037ca <TEST_PostProcess+0x1a>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 8003822:	f014 fdd7 	bl	80183d4 <UTIL_LCD_GetFont>
 8003826:	2303      	movs	r3, #3
 8003828:	88c1      	ldrh	r1, [r0, #6]
 800382a:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 800382e:	4628      	mov	r0, r5
 8003830:	f014 ff10 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 8003834:	f014 fdce 	bl	80183d4 <UTIL_LCD_GetFont>
 8003838:	2302      	movs	r3, #2
 800383a:	88c1      	ldrh	r1, [r0, #6]
 800383c:	4628      	mov	r0, r5
 800383e:	4aca      	ldr	r2, [pc, #808]	; (8003b68 <TEST_PostProcess+0x3b8>)
 8003840:	f014 ff08 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003844:	f646 1394 	movw	r3, #27028	; 0x6994
 8003848:	58f0      	ldr	r0, [r6, r3]
 800384a:	f7fd fd91 	bl	8001370 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800384e:	4628      	mov	r0, r5
 8003850:	f003 fb1c 	bl	8006e8c <BSP_PB_GetState>
 8003854:	2800      	cmp	r0, #0
 8003856:	d0b8      	beq.n	80037ca <TEST_PostProcess+0x1a>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 8003858:	2301      	movs	r3, #1
 800385a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800385e:	e7b4      	b.n	80037ca <TEST_PostProcess+0x1a>
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8003860:	f646 129c 	movw	r2, #27036	; 0x699c
 8003864:	589d      	ldr	r5, [r3, r2]
  if(TestContext_Ptr->DumpContext.dump_state==0)
 8003866:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800386a:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
  if(TestContext_Ptr->DumpContext.dump_state==0)
 800386e:	2c00      	cmp	r4, #0
 8003870:	d069      	beq.n	8003946 <TEST_PostProcess+0x196>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 8003872:	2c02      	cmp	r4, #2
 8003874:	d1a9      	bne.n	80037ca <TEST_PostProcess+0x1a>
  network_pp_outBuffer_t *pOutBuff = App_Cxt_Ptr->People_ContextPtr->output.pOutBuff;
 8003876:	f646 12a0 	movw	r2, #27040	; 0x69a0
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 800387a:	792b      	ldrb	r3, [r5, #4]
  network_pp_outBuffer_t *pOutBuff = App_Cxt_Ptr->People_ContextPtr->output.pOutBuff;
 800387c:	58b2      	ldr	r2, [r6, r2]
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 800387e:	2b03      	cmp	r3, #3
  network_pp_outBuffer_t *pOutBuff = App_Cxt_Ptr->People_ContextPtr->output.pOutBuff;
 8003880:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003882:	9202      	str	r2, [sp, #8]
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003884:	f000 80c2 	beq.w	8003a0c <TEST_PostProcess+0x25c>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8003888:	f8d5 3450 	ldr.w	r3, [r5, #1104]	; 0x450
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a6 	beq.w	80039de <TEST_PostProcess+0x22e>
 8003892:	2b01      	cmp	r3, #1
 8003894:	f895 3456 	ldrb.w	r3, [r5, #1110]	; 0x456
 8003898:	f000 809e 	beq.w	80039d8 <TEST_PostProcess+0x228>
    TestContext_Ptr->DumpContext.dump_state = 0;
 800389c:	2200      	movs	r2, #0
 800389e:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f000 80e1 	beq.w	8003a6a <TEST_PostProcess+0x2ba>
 80038a8:	f8d5 8458 	ldr.w	r8, [r5, #1112]	; 0x458
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 80038ac:	2702      	movs	r7, #2
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 80038ae:	f1b8 0f00 	cmp.w	r8, #0
 80038b2:	f000 8104 	beq.w	8003abe <TEST_PostProcess+0x30e>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 80038b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ba:	4598      	cmp	r8, r3
 80038bc:	f000 816e 	beq.w	8003b9c <TEST_PostProcess+0x3ec>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 80038c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80038c4:	f8c5 3458 	str.w	r3, [r5, #1112]	; 0x458
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 80038c8:	f014 fd84 	bl	80183d4 <UTIL_LCD_GetFont>
 80038cc:	2303      	movs	r3, #3
 80038ce:	88c1      	ldrh	r1, [r0, #6]
 80038d0:	f105 0210 	add.w	r2, r5, #16
 80038d4:	2000      	movs	r0, #0
 80038d6:	f014 febd 	bl	8018654 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 80038da:	f014 fd7b 	bl	80183d4 <UTIL_LCD_GetFont>
 80038de:	2302      	movs	r3, #2
 80038e0:	88c1      	ldrh	r1, [r0, #6]
 80038e2:	2000      	movs	r0, #0
 80038e4:	4aa1      	ldr	r2, [pc, #644]	; (8003b6c <TEST_PostProcess+0x3bc>)
 80038e6:	f014 feb5 	bl	8018654 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80038ea:	f646 1394 	movw	r3, #27028	; 0x6994
 80038ee:	58f0      	ldr	r0, [r6, r3]
 80038f0:	f7fd fd3e 	bl	8001370 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80038fa:	9c02      	ldr	r4, [sp, #8]
 80038fc:	4b9c      	ldr	r3, [pc, #624]	; (8003b70 <TEST_PostProcess+0x3c0>)
 80038fe:	1ce2      	adds	r2, r4, #3
 8003900:	1ad2      	subs	r2, r2, r3
 8003902:	2a06      	cmp	r2, #6
 8003904:	f240 8118 	bls.w	8003b38 <TEST_PostProcess+0x388>
 8003908:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
        dump_output_buff[i] = *((uint8_t *)(pOutBuff) + i);
 800390c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003910:	f843 2b04 	str.w	r2, [r3], #4
      for(uint32_t i=0; i<(AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer));i++)
 8003914:	428b      	cmp	r3, r1
 8003916:	d1f9      	bne.n	800390c <TEST_PostProcess+0x15c>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8003918:	f646 1298 	movw	r2, #27032	; 0x6998
 800391c:	4b95      	ldr	r3, [pc, #596]	; (8003b74 <TEST_PostProcess+0x3c4>)
 800391e:	58b2      	ldr	r2, [r6, r2]
 8003920:	6811      	ldr	r1, [r2, #0]
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	6851      	ldr	r1, [r2, #4]
 8003926:	6059      	str	r1, [r3, #4]
 8003928:	6891      	ldr	r1, [r2, #8]
 800392a:	6099      	str	r1, [r3, #8]
 800392c:	68d1      	ldr	r1, [r2, #12]
 800392e:	60d9      	str	r1, [r3, #12]
 8003930:	6912      	ldr	r2, [r2, #16]
 8003932:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 8003934:	e76e      	b.n	8003814 <TEST_PostProcess+0x64>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8003936:	f646 129c 	movw	r2, #27036	; 0x699c
 800393a:	5898      	ldr	r0, [r3, r2]
 800393c:	f7ff f81e 	bl	800297c <Validation_PostProcess>
}
 8003940:	b017      	add	sp, #92	; 0x5c
 8003942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8003946:	f014 fd45 	bl	80183d4 <UTIL_LCD_GetFont>
 800394a:	463b      	mov	r3, r7
 800394c:	88c1      	ldrh	r1, [r0, #6]
 800394e:	f105 0210 	add.w	r2, r5, #16
 8003952:	4620      	mov	r0, r4
 8003954:	f014 fe7e 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8003958:	f014 fd3c 	bl	80183d4 <UTIL_LCD_GetFont>
 800395c:	2302      	movs	r3, #2
 800395e:	88c1      	ldrh	r1, [r0, #6]
 8003960:	4620      	mov	r0, r4
 8003962:	4a82      	ldr	r2, [pc, #520]	; (8003b6c <TEST_PostProcess+0x3bc>)
 8003964:	f014 fe76 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003968:	ed96 7a04 	vldr	s14, [r6, #16]
 800396c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8003b98 <TEST_PostProcess+0x3e8>
 8003970:	a804      	add	r0, sp, #16
 8003972:	68f2      	ldr	r2, [r6, #12]
 8003974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003978:	497f      	ldr	r1, [pc, #508]	; (8003b78 <TEST_PostProcess+0x3c8>)
 800397a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800397e:	ed8d 7b00 	vstr	d7, [sp]
 8003982:	f01f fb05 	bl	8022f90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003986:	f014 fd25 	bl	80183d4 <UTIL_LCD_GetFont>
 800398a:	88c1      	ldrh	r1, [r0, #6]
 800398c:	2301      	movs	r3, #1
 800398e:	aa04      	add	r2, sp, #16
 8003990:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003994:	4620      	mov	r0, r4
 8003996:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800399a:	f014 fe5b 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 800399e:	68b2      	ldr	r2, [r6, #8]
 80039a0:	4976      	ldr	r1, [pc, #472]	; (8003b7c <TEST_PostProcess+0x3cc>)
 80039a2:	a804      	add	r0, sp, #16
 80039a4:	f01f faf4 	bl	8022f90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 80039a8:	f014 fd14 	bl	80183d4 <UTIL_LCD_GetFont>
 80039ac:	88c1      	ldrh	r1, [r0, #6]
 80039ae:	aa04      	add	r2, sp, #16
 80039b0:	2301      	movs	r3, #1
 80039b2:	4620      	mov	r0, r4
 80039b4:	0109      	lsls	r1, r1, #4
 80039b6:	f014 fe4d 	bl	8018654 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80039ba:	f646 1394 	movw	r3, #27028	; 0x6994
 80039be:	58f0      	ldr	r0, [r6, r3]
 80039c0:	f7fd fcd6 	bl	8001370 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80039c4:	4620      	mov	r0, r4
 80039c6:	f003 fa61 	bl	8006e8c <BSP_PB_GetState>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	f43f aefd 	beq.w	80037ca <TEST_PostProcess+0x1a>
      TestContext_Ptr->DumpContext.dump_state = 1;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80039d6:	e6f8      	b.n	80037ca <TEST_PostProcess+0x1a>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f47f af5f 	bne.w	800389c <TEST_PostProcess+0xec>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80039de:	f646 188c 	movw	r8, #27020	; 0x698c
        BSP_SD_DeInit(0);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f005 f8ec 	bl	8008bc0 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80039e8:	f856 0008 	ldr.w	r0, [r6, r8]
 80039ec:	f7fd f9cc 	bl	8000d88 <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 80039f0:	792b      	ldrb	r3, [r5, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	f000 813c 	beq.w	8003c70 <TEST_PostProcess+0x4c0>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 80039f8:	f646 138c 	movw	r3, #27020	; 0x698c
 80039fc:	58f2      	ldr	r2, [r6, r3]
 80039fe:	7d13      	ldrb	r3, [r2, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0fc      	beq.n	80039fe <TEST_PostProcess+0x24e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8003a04:	2000      	movs	r0, #0
 8003a06:	7510      	strb	r0, [r2, #20]
        BSP_CAMERA_Resume(0);
 8003a08:	f004 fa88 	bl	8007f1c <BSP_CAMERA_Resume>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8d5 2450 	ldr.w	r2, [r5, #1104]	; 0x450
 8003a12:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003a16:	2a00      	cmp	r2, #0
 8003a18:	f43f aefc 	beq.w	8003814 <TEST_PostProcess+0x64>
 8003a1c:	f895 3456 	ldrb.w	r3, [r5, #1110]	; 0x456
 8003a20:	e73f      	b.n	80038a2 <TEST_PostProcess+0xf2>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8003a22:	4f57      	ldr	r7, [pc, #348]	; (8003b80 <TEST_PostProcess+0x3d0>)
 8003a24:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003a26:	f204 456c 	addw	r5, r4, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a2e:	4638      	mov	r0, r7
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 8003a30:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8003a34:	703a      	strb	r2, [r7, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003a36:	f000 fa1f 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f00c fac8 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f040 808b 	bne.w	8003b60 <TEST_PostProcess+0x3b0>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f00c fcec 	bl	8010428 <HAL_UART_GetState>
 8003a50:	2820      	cmp	r0, #32
 8003a52:	d1fa      	bne.n	8003a4a <TEST_PostProcess+0x29a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003a54:	4628      	mov	r0, r5
 8003a56:	220a      	movs	r2, #10
 8003a58:	494a      	ldr	r1, [pc, #296]	; (8003b84 <TEST_PostProcess+0x3d4>)
 8003a5a:	f00c fb0b 	bl	8010074 <HAL_UART_Receive_DMA>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	f43f aed8 	beq.w	8003814 <TEST_PostProcess+0x64>
    Error_Handler();
 8003a64:	f000 fa4e 	bl	8003f04 <Error_Handler>
    BSP_LED_On(LED_GREEN);
 8003a68:	e6d4      	b.n	8003814 <TEST_PostProcess+0x64>
        if(TestContext_Ptr->NonReg_FirstRun == 0)
 8003a6a:	f8d5 8534 	ldr.w	r8, [r5, #1332]	; 0x534
 8003a6e:	f1b8 0f00 	cmp.w	r8, #0
 8003a72:	d16b      	bne.n	8003b4c <TEST_PostProcess+0x39c>
 8003a74:	9a02      	ldr	r2, [sp, #8]
 8003a76:	4b44      	ldr	r3, [pc, #272]	; (8003b88 <TEST_PostProcess+0x3d8>)
 8003a78:	1e51      	subs	r1, r2, #1
        uint32_t issue_ocurence=0;
 8003a7a:	4642      	mov	r2, r8
 8003a7c:	f503 7e34 	add.w	lr, r3, #720	; 0x2d0
            if(dump_output_buff[i] != *((uint8_t *)(pOutBuff) + i))
 8003a80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003a84:	f811 cf01 	ldrb.w	ip, [r1, #1]!
              issue_ocurence =1;
 8003a88:	4584      	cmp	ip, r0
 8003a8a:	bf18      	it	ne
 8003a8c:	2201      	movne	r2, #1
          for(uint32_t i=0; i<(AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer));i++)
 8003a8e:	4573      	cmp	r3, lr
 8003a90:	d1f6      	bne.n	8003a80 <TEST_PostProcess+0x2d0>
          if(issue_ocurence == 1)
 8003a92:	2a01      	cmp	r2, #1
 8003a94:	f000 80fa 	beq.w	8003c8c <TEST_PostProcess+0x4dc>
 8003a98:	f8d5 8458 	ldr.w	r8, [r5, #1112]	; 0x458
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8003a9c:	2702      	movs	r7, #2
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8003a9e:	f8d5 2538 	ldr.w	r2, [r5, #1336]	; 0x538
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <TEST_PostProcess+0x3dc>)
 8003aa4:	493a      	ldr	r1, [pc, #232]	; (8003b90 <TEST_PostProcess+0x3e0>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	682a      	ldr	r2, [r5, #0]
 8003aaa:	1858      	adds	r0, r3, r1
 8003aac:	4282      	cmp	r2, r0
 8003aae:	f000 80ea 	beq.w	8003c86 <TEST_PostProcess+0x4d6>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8003ab2:	4838      	ldr	r0, [pc, #224]	; (8003b94 <TEST_PostProcess+0x3e4>)
 8003ab4:	4403      	add	r3, r0
 8003ab6:	429a      	cmp	r2, r3
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8003ab8:	bf08      	it	eq
 8003aba:	6029      	streq	r1, [r5, #0]
 8003abc:	e6f7      	b.n	80038ae <TEST_PostProcess+0xfe>
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8003abe:	f04f 0901 	mov.w	r9, #1
        *(aTxBuffer) = cmd_status;
 8003ac2:	482f      	ldr	r0, [pc, #188]	; (8003b80 <TEST_PostProcess+0x3d0>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8003aca:	f885 9454 	strb.w	r9, [r5, #1108]	; 0x454
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003ace:	f205 486c 	addw	r8, r5, #1132	; 0x46c
        *(aTxBuffer) = cmd_status;
 8003ad2:	7007      	strb	r7, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003ad4:	f000 f9d0 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003ad8:	4829      	ldr	r0, [pc, #164]	; (8003b80 <TEST_PostProcess+0x3d0>)
 8003ada:	464a      	mov	r2, r9
 8003adc:	4601      	mov	r1, r0
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f00c fa78 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f040 80c8 	bne.w	8003c7a <TEST_PostProcess+0x4ca>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003aea:	4640      	mov	r0, r8
 8003aec:	f00c fc9c 	bl	8010428 <HAL_UART_GetState>
 8003af0:	2820      	cmp	r0, #32
 8003af2:	d1fa      	bne.n	8003aea <TEST_PostProcess+0x33a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003af4:	4640      	mov	r0, r8
 8003af6:	220a      	movs	r2, #10
 8003af8:	4922      	ldr	r1, [pc, #136]	; (8003b84 <TEST_PostProcess+0x3d4>)
 8003afa:	f00c fabb 	bl	8010074 <HAL_UART_Receive_DMA>
 8003afe:	2800      	cmp	r0, #0
 8003b00:	f040 80be 	bne.w	8003c80 <TEST_PostProcess+0x4d0>
        CAMERA_Disable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8003b04:	f646 138c 	movw	r3, #27020	; 0x698c
 8003b08:	58f0      	ldr	r0, [r6, r3]
 8003b0a:	f7fd fa5b 	bl	8000fc4 <CAMERA_Disable_TestBar_Mode>
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003b0e:	2201      	movs	r2, #1
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 8003b10:	2300      	movs	r3, #0
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003b12:	7032      	strb	r2, [r6, #0]
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 8003b14:	f8d5 2468 	ldr.w	r2, [r5, #1128]	; 0x468
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 8003b18:	f8c5 3450 	str.w	r3, [r5, #1104]	; 0x450
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 8003b1c:	2a01      	cmp	r2, #1
          App_Cxt_Ptr->run_loop = 0;
 8003b1e:	bf18      	it	ne
 8003b20:	6073      	strne	r3, [r6, #4]
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 8003b22:	f895 0456 	ldrb.w	r0, [r5, #1110]	; 0x456
          TestContext_Ptr->UartContext.uart_host_nonreg_run=0;
 8003b26:	bf08      	it	eq
 8003b28:	f8c5 3468 	streq.w	r3, [r5, #1128]	; 0x468
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f47f aee4 	bne.w	80038fa <TEST_PostProcess+0x14a>
          BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 8003b32:	f005 f845 	bl	8008bc0 <BSP_SD_DeInit>
 8003b36:	e6e0      	b.n	80038fa <TEST_PostProcess+0x14a>
 8003b38:	3c01      	subs	r4, #1
 8003b3a:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
        dump_output_buff[i] = *((uint8_t *)(pOutBuff) + i);
 8003b3e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8003b42:	f803 2b01 	strb.w	r2, [r3], #1
      for(uint32_t i=0; i<(AI_PEOPLEDETECT_NETWORK_PP_MAX_BOXES_LIMIT*sizeof(struct network_pp_outBuffer));i++)
 8003b46:	428b      	cmp	r3, r1
 8003b48:	d1f9      	bne.n	8003b3e <TEST_PostProcess+0x38e>
 8003b4a:	e6e5      	b.n	8003918 <TEST_PostProcess+0x168>
        if(TestContext_Ptr->NonReg_FirstRun==1)
 8003b4c:	f1b8 0f01 	cmp.w	r8, #1
 8003b50:	d1a2      	bne.n	8003a98 <TEST_PostProcess+0x2e8>
          TestContext_Ptr->NonReg_FirstRun=0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8d5 8458 	ldr.w	r8, [r5, #1112]	; 0x458
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8003b58:	2702      	movs	r7, #2
          TestContext_Ptr->NonReg_FirstRun=0;
 8003b5a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
 8003b5e:	e79e      	b.n	8003a9e <TEST_PostProcess+0x2ee>
      Error_Handler();
 8003b60:	f000 f9d0 	bl	8003f04 <Error_Handler>
 8003b64:	e771      	b.n	8003a4a <TEST_PostProcess+0x29a>
 8003b66:	bf00      	nop
 8003b68:	0802c204 	.word	0x0802c204
 8003b6c:	0802c214 	.word	0x0802c214
 8003b70:	d0cb08a0 	.word	0xd0cb08a0
 8003b74:	d0de0b20 	.word	0xd0de0b20
 8003b78:	0802c220 	.word	0x0802c220
 8003b7c:	0802c15c 	.word	0x0802c15c
 8003b80:	24061900 	.word	0x24061900
 8003b84:	240618e0 	.word	0x240618e0
 8003b88:	d0cb089f 	.word	0xd0cb089f
 8003b8c:	000962d0 	.word	0x000962d0
 8003b90:	d0cb4420 	.word	0xd0cb4420
 8003b94:	d0d4a7a0 	.word	0xd0d4a7a0
 8003b98:	42c80000 	.word	0x42c80000
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003b9c:	ed96 7a04 	vldr	s14, [r6, #16]
 8003ba0:	a804      	add	r0, sp, #16
 8003ba2:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8003b98 <TEST_PostProcess+0x3e8>
          for(int i=0;i<strlen(msg);i++)
 8003ba6:	f04f 0b00 	mov.w	fp, #0
 8003baa:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8003ca4 <TEST_PostProcess+0x4f4>
 8003bae:	4681      	mov	r9, r0
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb4:	68f2      	ldr	r2, [r6, #12]
 8003bb6:	493a      	ldr	r1, [pc, #232]	; (8003ca0 <TEST_PostProcess+0x4f0>)
          for(int i=0;i<strlen(msg);i++)
 8003bb8:	46d0      	mov	r8, sl
 8003bba:	9003      	str	r0, [sp, #12]
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003bbc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003bc0:	ed8d 7b00 	vstr	d7, [sp]
 8003bc4:	f01f f9e4 	bl	8022f90 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8003bc8:	e003      	b.n	8003bd2 <TEST_PostProcess+0x422>
            *(aTxBuffer + i) = msg[i];
 8003bca:	f819 2b01 	ldrb.w	r2, [r9], #1
 8003bce:	f808 2b01 	strb.w	r2, [r8], #1
          for(int i=0;i<strlen(msg);i++)
 8003bd2:	a804      	add	r0, sp, #16
 8003bd4:	f7fc fb8e 	bl	80002f4 <strlen>
 8003bd8:	4558      	cmp	r0, fp
 8003bda:	4607      	mov	r7, r0
 8003bdc:	f10b 0b01 	add.w	fp, fp, #1
 8003be0:	d8f3      	bhi.n	8003bca <TEST_PostProcess+0x41a>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003be2:	4830      	ldr	r0, [pc, #192]	; (8003ca4 <TEST_PostProcess+0x4f4>)
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8003be4:	2320      	movs	r3, #32
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003be6:	2202      	movs	r2, #2
 8003be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8003bec:	55c3      	strb	r3, [r0, r7]
 8003bee:	4604      	mov	r4, r0
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003bf0:	f205 486c 	addw	r8, r5, #1132	; 0x46c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003bf4:	f000 f940 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8003bf8:	1c7a      	adds	r2, r7, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	f00c f9e8 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d145      	bne.n	8003c94 <TEST_PostProcess+0x4e4>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003c08:	4640      	mov	r0, r8
 8003c0a:	f00c fc0d 	bl	8010428 <HAL_UART_GetState>
 8003c0e:	2820      	cmp	r0, #32
 8003c10:	d1fa      	bne.n	8003c08 <TEST_PostProcess+0x458>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003c12:	68b2      	ldr	r2, [r6, #8]
 8003c14:	a804      	add	r0, sp, #16
 8003c16:	4924      	ldr	r1, [pc, #144]	; (8003ca8 <TEST_PostProcess+0x4f8>)
          for(int i=0;i<strlen(msg);i++)
 8003c18:	f04f 0900 	mov.w	r9, #0
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003c1c:	f01f f9b8 	bl	8022f90 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8003c20:	e005      	b.n	8003c2e <TEST_PostProcess+0x47e>
            *(aTxBuffer + i) = msg[i];
 8003c22:	9a03      	ldr	r2, [sp, #12]
 8003c24:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003c28:	9203      	str	r2, [sp, #12]
 8003c2a:	f80a 3b01 	strb.w	r3, [sl], #1
          for(int i=0;i<strlen(msg);i++)
 8003c2e:	a804      	add	r0, sp, #16
 8003c30:	f7fc fb60 	bl	80002f4 <strlen>
 8003c34:	4548      	cmp	r0, r9
 8003c36:	4607      	mov	r7, r0
 8003c38:	f109 0901 	add.w	r9, r9, #1
 8003c3c:	d8f1      	bhi.n	8003c22 <TEST_PostProcess+0x472>
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8003c3e:	4c19      	ldr	r4, [pc, #100]	; (8003ca4 <TEST_PostProcess+0x4f4>)
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8003c40:	210d      	movs	r1, #13
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003c42:	2202      	movs	r2, #2
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8003c44:	1823      	adds	r3, r4, r0
 8003c46:	200a      	movs	r0, #10
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8003c48:	55e1      	strb	r1, [r4, r7]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8003c4e:	7058      	strb	r0, [r3, #1]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 f911 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8003c56:	1cba      	adds	r2, r7, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	f00c f9b9 	bl	800ffd4 <HAL_UART_Transmit_DMA>
 8003c62:	b9d0      	cbnz	r0, 8003c9a <TEST_PostProcess+0x4ea>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003c64:	4640      	mov	r0, r8
 8003c66:	f00c fbdf 	bl	8010428 <HAL_UART_GetState>
 8003c6a:	2820      	cmp	r0, #32
 8003c6c:	d1fa      	bne.n	8003c64 <TEST_PostProcess+0x4b4>
 8003c6e:	e62b      	b.n	80038c8 <TEST_PostProcess+0x118>
          CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8003c70:	f856 0008 	ldr.w	r0, [r6, r8]
 8003c74:	f7fd f974 	bl	8000f60 <CAMERA_Enable_TestBar_Mode>
 8003c78:	e6be      	b.n	80039f8 <TEST_PostProcess+0x248>
      Error_Handler();
 8003c7a:	f000 f943 	bl	8003f04 <Error_Handler>
 8003c7e:	e734      	b.n	8003aea <TEST_PostProcess+0x33a>
    Error_Handler();
 8003c80:	f000 f940 	bl	8003f04 <Error_Handler>
 8003c84:	e73e      	b.n	8003b04 <TEST_PostProcess+0x354>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <TEST_PostProcess+0x4fc>)
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	e610      	b.n	80038ae <TEST_PostProcess+0xfe>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c5 3458 	str.w	r3, [r5, #1112]	; 0x458
            cmd_status=CMD_COMPLETE_FAILURE_EVT;
 8003c92:	e704      	b.n	8003a9e <TEST_PostProcess+0x2ee>
      Error_Handler();
 8003c94:	f000 f936 	bl	8003f04 <Error_Handler>
 8003c98:	e7b6      	b.n	8003c08 <TEST_PostProcess+0x458>
 8003c9a:	f000 f933 	bl	8003f04 <Error_Handler>
 8003c9e:	e7e1      	b.n	8003c64 <TEST_PostProcess+0x4b4>
 8003ca0:	0802c220 	.word	0x0802c220
 8003ca4:	24061900 	.word	0x24061900
 8003ca8:	0802c15c 	.word	0x0802c15c
 8003cac:	d0d4a7a0 	.word	0xd0d4a7a0

08003cb0 <HAL_UART_ErrorCallback>:
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  while(1);
 8003cb0:	e7fe      	b.n	8003cb0 <HAL_UART_ErrorCallback>
 8003cb2:	bf00      	nop

08003cb4 <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8003cb8:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8003cba:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8003cbc:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8003cc0:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8003cc4:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8003cc8:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8003ccc:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 8003cd0:	f003 f834 	bl	8006d3c <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f003 f831 	bl	8006d3c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003cda:	2002      	movs	r0, #2
 8003cdc:	f003 f82e 	bl	8006d3c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	f003 f82b 	bl	8006d3c <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	4620      	mov	r0, r4
 8003cea:	221f      	movs	r2, #31
 8003cec:	f003 f8e0 	bl	8006eb0 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4620      	mov	r0, r4
}
 8003cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8003cf8:	f003 b87e 	b.w	8006df8 <BSP_PB_Init>

08003cfc <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 8003cfc:	f005 b8e6 	b.w	8008ecc <HAL_GetTick>

08003d00 <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	b087      	sub	sp, #28
 8003d06:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003d08:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8003d0c:	2e04      	cmp	r6, #4
 8003d0e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8003d12:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8003d16:	e9dd 5712 	ldrd	r5, r7, [sp, #72]	; 0x48
 8003d1a:	e9dd 4b15 	ldrd	r4, fp, [sp, #84]	; 0x54
 8003d1e:	9105      	str	r1, [sp, #20]
 8003d20:	d82c      	bhi.n	8003d7c <UTILS_Dma2d_Memcpy+0x7c>
 8003d22:	4824      	ldr	r0, [pc, #144]	; (8003db4 <UTILS_Dma2d_Memcpy+0xb4>)
 8003d24:	fb05 2203 	mla	r2, r5, r3, r2
 8003d28:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 8003d2c:	fb03 f902 	mul.w	r9, r3, r2
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8003d30:	4821      	ldr	r0, [pc, #132]	; (8003db8 <UTILS_Dma2d_Memcpy+0xb8>)
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
  hlcd_dma2d.Init.ColorMode = output_color_format;

  /* Output offset in pixels == nb of pixels to be added at end of line to come to the  */
  /* first pixel of the next line : on the output side of the DMA2D computation         */
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8003d32:	eba5 050a 	sub.w	r5, r5, sl
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8003d36:	f006 ff8b 	bl	800ac50 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8003d3a:	2c00      	cmp	r4, #0
 8003d3c:	4c1e      	ldr	r4, [pc, #120]	; (8003db8 <UTILS_Dma2d_Memcpy+0xb8>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;
 8003d3e:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8003d42:	bf14      	ite	ne
 8003d44:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8003d48:	2200      	moveq	r2, #0
  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8003d4a:	f1bb 0100 	subs.w	r1, fp, #0
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8003d4e:	f04f 0801 	mov.w	r8, #1
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8003d52:	60e5      	str	r5, [r4, #12]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003d54:	f04f 05ff 	mov.w	r5, #255	; 0xff
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8003d58:	bf18      	it	ne
 8003d5a:	2101      	movne	r1, #1

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003d5c:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8003d5e:	64a7      	str	r7, [r4, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8003d60:	65a1      	str	r1, [r4, #88]	; 0x58
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003d62:	6525      	str	r5, [r4, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003d64:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8003d66:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
  hlcd_dma2d.Init.ColorMode = output_color_format;
 8003d6a:	60a6      	str	r6, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8003d6c:	6062      	str	r2, [r4, #4]
  hlcd_dma2d.XferCpltCallback = NULL;
 8003d6e:	6223      	str	r3, [r4, #32]
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003d70:	f006 ff2a 	bl	800abc8 <HAL_DMA2D_Init>
 8003d74:	b128      	cbz	r0, 8003d82 <UTILS_Dma2d_Memcpy+0x82>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8003d76:	b007      	add	sp, #28
 8003d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8003d7c:	f04f 0900 	mov.w	r9, #0
 8003d80:	e7d6      	b.n	8003d30 <UTILS_Dma2d_Memcpy+0x30>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003d82:	4641      	mov	r1, r8
 8003d84:	4620      	mov	r0, r4
 8003d86:	f007 f975 	bl	800b074 <HAL_DMA2D_ConfigLayer>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d1f3      	bne.n	8003d76 <UTILS_Dma2d_Memcpy+0x76>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8003d8e:	9b05      	ldr	r3, [sp, #20]
 8003d90:	4620      	mov	r0, r4
 8003d92:	9a04      	ldr	r2, [sp, #16]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	4653      	mov	r3, sl
 8003d98:	444a      	add	r2, r9
 8003d9a:	9903      	ldr	r1, [sp, #12]
 8003d9c:	f006 ffde 	bl	800ad5c <HAL_DMA2D_Start>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d1e8      	bne.n	8003d76 <UTILS_Dma2d_Memcpy+0x76>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8003da4:	4620      	mov	r0, r4
 8003da6:	211e      	movs	r1, #30
}
 8003da8:	b007      	add	sp, #28
 8003daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8003dae:	f007 b831 	b.w	800ae14 <HAL_DMA2D_PollForTransfer>
 8003db2:	bf00      	nop
 8003db4:	0802c290 	.word	0x0802c290
 8003db8:	3000f814 	.word	0x3000f814

08003dbc <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8003dbc:	2100      	movs	r1, #0
{
 8003dbe:	b538      	push	{r3, r4, r5, lr}
 8003dc0:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	f003 f906 	bl	8006fd4 <BSP_JOY_GetState>
 8003dc8:	b2c0      	uxtb	r0, r0
 8003dca:	1e83      	subs	r3, r0, #2
 8003dcc:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28

  switch (Joystick_Ctx_Ptr->joyState)
 8003dd0:	2b0e      	cmp	r3, #14
 8003dd2:	d809      	bhi.n	8003de8 <UTILS_Joystick_Check+0x2c>
 8003dd4:	e8df f003 	tbb	[pc, r3]
 8003dd8:	081c082f 	.word	0x081c082f
 8003ddc:	08290808 	.word	0x08290808
 8003de0:	08080808 	.word	0x08080808
 8003de4:	0808      	.short	0x0808
 8003de6:	23          	.byte	0x23
 8003de7:	00          	.byte	0x00

    default:
      break;
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8003de8:	2810      	cmp	r0, #16
 8003dea:	d817      	bhi.n	8003e1c <UTILS_Joystick_Check+0x60>
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <UTILS_Joystick_Check+0xb8>)
 8003dee:	40c3      	lsrs	r3, r0
 8003df0:	07db      	lsls	r3, r3, #31
 8003df2:	d529      	bpl.n	8003e48 <UTILS_Joystick_Check+0x8c>
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8003df4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003df6:	2000      	movs	r0, #0
 8003df8:	f004 f8a0 	bl	8007f3c <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8003dfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f004 f8c0 	bl	8007f84 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8003e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e06:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8003e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8003e0c:	f004 bec4 	b.w	8008b98 <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8003e10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e12:	1cda      	adds	r2, r3, #3
 8003e14:	da15      	bge.n	8003e42 <UTILS_Joystick_Check+0x86>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8003e16:	2300      	movs	r3, #0
 8003e18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8003e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e20:	2b63      	cmp	r3, #99	; 0x63
 8003e22:	dcf8      	bgt.n	8003e16 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 8003e24:	330a      	adds	r3, #10
 8003e26:	6363      	str	r3, [r4, #52]	; 0x34
 8003e28:	e7e4      	b.n	8003df4 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 8003e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	dcf2      	bgt.n	8003e16 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast++;
 8003e30:	3301      	adds	r3, #1
 8003e32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e34:	e7de      	b.n	8003df4 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8003e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	ddec      	ble.n	8003e16 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8003e3c:	3b0a      	subs	r3, #10
 8003e3e:	6363      	str	r3, [r4, #52]	; 0x34
 8003e40:	e7d8      	b.n	8003df4 <UTILS_Joystick_Check+0x38>
        Joystick_Ctx_Ptr->camContrast--;
 8003e42:	3b01      	subs	r3, #1
 8003e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e46:	e7d5      	b.n	8003df4 <UTILS_Joystick_Check+0x38>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8003e48:	2801      	cmp	r0, #1
 8003e4a:	d1e7      	bne.n	8003e1c <UTILS_Joystick_Check+0x60>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8003e4c:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8003e4e:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8003e50:	4629      	mov	r1, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8003e52:	6363      	str	r3, [r4, #52]	; 0x34
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8003e54:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8003e56:	62e5      	str	r5, [r4, #44]	; 0x2c
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8003e58:	6325      	str	r5, [r4, #48]	; 0x30
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8003e5a:	f004 f86f 	bl	8007f3c <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8003e5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003e60:	4628      	mov	r0, r5
 8003e62:	f004 f88f 	bl	8007f84 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8003e66:	4628      	mov	r0, r5
 8003e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 8003e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8003e6e:	f004 be93 	b.w	8008b98 <BSP_LCD_SetBrightness>
 8003e72:	bf00      	nop
 8003e74:	00010114 	.word	0x00010114

08003e78 <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 8003e78:	ea40 0301 	orr.w	r3, r0, r1
 8003e7c:	06db      	lsls	r3, r3, #27
 8003e7e:	d104      	bne.n	8003e8a <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8003e80:	2a01      	cmp	r2, #1
 8003e82:	d003      	beq.n	8003e8c <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 8003e84:	2a02      	cmp	r2, #2
 8003e86:	d016      	beq.n	8003eb6 <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 8003e88:	4770      	bx	lr
    while(1);
 8003e8a:	e7fe      	b.n	8003e8a <UTILS_DCache_Coherency_Maintenance+0x12>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e8c:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8003e90:	2900      	cmp	r1, #0
 8003e92:	dd0b      	ble.n	8003eac <UTILS_DCache_Coherency_Maintenance+0x34>
 8003e94:	1e4b      	subs	r3, r1, #1
 8003e96:	f100 0220 	add.w	r2, r0, #32
      SCB->DCIMVAC = op_addr;
 8003e9a:	490f      	ldr	r1, [pc, #60]	; (8003ed8 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8003e9c:	f023 031f 	bic.w	r3, r3, #31
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003ea6:	3020      	adds	r0, #32
    while (op_size > 0) {
 8003ea8:	4283      	cmp	r3, r0
 8003eaa:	d1fa      	bne.n	8003ea2 <UTILS_DCache_Coherency_Maintenance+0x2a>
 8003eac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003eb0:	f3bf 8f6f 	isb	sy
}
 8003eb4:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 8003eb6:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	ddf6      	ble.n	8003eac <UTILS_DCache_Coherency_Maintenance+0x34>
 8003ebe:	1e4b      	subs	r3, r1, #1
 8003ec0:	f100 0220 	add.w	r2, r0, #32
      SCB->DCCMVAC = op_addr;
 8003ec4:	4904      	ldr	r1, [pc, #16]	; (8003ed8 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8003ec6:	f023 031f 	bic.w	r3, r3, #31
 8003eca:	4413      	add	r3, r2
 8003ecc:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003ed0:	3020      	adds	r0, #32
    while (op_size > 0) {
 8003ed2:	4298      	cmp	r0, r3
 8003ed4:	d1fa      	bne.n	8003ecc <UTILS_DCache_Coherency_Maintenance+0x54>
 8003ed6:	e7e9      	b.n	8003eac <UTILS_DCache_Coherency_Maintenance+0x34>
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <UTILS_Compute_ExecutionTiming>:
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8003edc:	6901      	ldr	r1, [r0, #16]
 8003ede:	6882      	ldr	r2, [r0, #8]
{
 8003ee0:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8003ee2:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8003ee6:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8003ee8:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 8003eea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8003eec:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8003eee:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8003ef0:	d203      	bcs.n	8003efa <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8003ef2:	68c3      	ldr	r3, [r0, #12]
 8003ef4:	6845      	ldr	r5, [r0, #4]
 8003ef6:	442b      	add	r3, r5
 8003ef8:	4413      	add	r3, r2
 8003efa:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif
  
  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8003efc:	60a1      	str	r1, [r4, #8]
}
 8003efe:	bc30      	pop	{r4, r5}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8003f04:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8003f06:	2000      	movs	r0, #0
 8003f08:	f002 ff56 	bl	8006db8 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f002 ff53 	bl	8006db8 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8003f12:	2002      	movs	r0, #2
 8003f14:	f002 ff50 	bl	8006db8 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f002 ff4d 	bl	8006db8 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 8003f1e:	2002      	movs	r0, #2
 8003f20:	f002 ff3a 	bl	8006d98 <BSP_LED_On>
  while (1)
 8003f24:	e7fe      	b.n	8003f24 <Error_Handler+0x20>
 8003f26:	bf00      	nop

08003f28 <main>:
{
 8003f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2c:	b09f      	sub	sp, #124	; 0x7c
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8003f2e:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
  HAL_MPU_Disable();
 8003f32:	f005 f879 	bl	8009028 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003f36:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8003f38:	4a94      	ldr	r2, [pc, #592]	; (800418c <main+0x264>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003f3a:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8003f3c:	4b94      	ldr	r3, [pc, #592]	; (8004190 <main+0x268>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003f3e:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8003f42:	940b      	str	r4, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8003f44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003f48:	f005 f890 	bl	800906c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003f4c:	2004      	movs	r0, #4
 8003f4e:	f005 f87b 	bl	8009048 <HAL_MPU_Enable>
 8003f52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f56:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003f5a:	4b8e      	ldr	r3, [pc, #568]	; (8004194 <main+0x26c>)
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f66:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f70:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f76:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003f7a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003f7e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003f82:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f86:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003f8a:	f3c0 314e 	ubfx	r1, r0, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f8e:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8003f92:	0149      	lsls	r1, r1, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f94:	ea01 0506 	and.w	r5, r1, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f98:	4602      	mov	r2, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f9a:	ea45 7482 	orr.w	r4, r5, r2, lsl #30
      } while (ways-- != 0U);
 8003f9e:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003fa0:	f8c3 4260 	str.w	r4, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8003fa4:	1c54      	adds	r4, r2, #1
 8003fa6:	d1f8      	bne.n	8003f9a <main+0x72>
    } while(sets-- != 0U);
 8003fa8:	3920      	subs	r1, #32
 8003faa:	f111 0f20 	cmn.w	r1, #32
 8003fae:	d1f1      	bne.n	8003f94 <main+0x6c>
 8003fb0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fba:	615a      	str	r2, [r3, #20]
 8003fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fc0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8003fc4:	f004 ff46 	bl	8008e54 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003fc8:	2004      	movs	r0, #4
 8003fca:	f008 fdfb 	bl	800cbc4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fce:	4a72      	ldr	r2, [pc, #456]	; (8004198 <main+0x270>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fd6:	4b71      	ldr	r3, [pc, #452]	; (800419c <main+0x274>)
 8003fd8:	f021 0101 	bic.w	r1, r1, #1
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8003fdc:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fe0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fe2:	f002 0201 	and.w	r2, r2, #1
 8003fe6:	9200      	str	r2, [sp, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fee:	619a      	str	r2, [r3, #24]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	9b00      	ldr	r3, [sp, #0]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8003ffa:	6983      	ldr	r3, [r0, #24]
 8003ffc:	049b      	lsls	r3, r3, #18
 8003ffe:	d5fc      	bpl.n	8003ffa <main+0xd2>
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004000:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004002:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004004:	2601      	movs	r6, #1
 8004006:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 5;
 800400a:	2505      	movs	r5, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 800400c:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800400e:	2204      	movs	r2, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004010:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8004012:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004014:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004016:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004018:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 5;
 800401a:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 160;
 800401c:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800401e:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004020:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004024:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004026:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800402a:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800402c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004030:	f008 fe88 	bl	800cd44 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 8004034:	2800      	cmp	r0, #0
 8004036:	f040 80a7 	bne.w	8004188 <main+0x260>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 800403a:	223f      	movs	r2, #63	; 0x3f
 800403c:	2303      	movs	r3, #3
 800403e:	2600      	movs	r6, #0
 8004040:	2708      	movs	r7, #8
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004042:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004044:	2540      	movs	r5, #64	; 0x40
 8004046:	2440      	movs	r4, #64	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004048:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 800404a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800404e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004058:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800405c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004060:	f009 fa0a 	bl	800d478 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 8004064:	2800      	cmp	r0, #0
 8004066:	f040 808f 	bne.w	8004188 <main+0x260>
  __HAL_RCC_CSI_ENABLE();
 800406a:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <main+0x278>)
  DISPLAY_Init(App_Context.Display_ContextPtr);
 800406c:	f646 1994 	movw	r9, #27028	; 0x6994
  APP_Init(&App_Context);
 8004070:	4d4c      	ldr	r5, [pc, #304]	; (80041a4 <main+0x27c>)
    App_Context.run_loop = 1;
 8004072:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_CSI_ENABLE();
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4e4b      	ldr	r6, [pc, #300]	; (80041a8 <main+0x280>)
    APP_GetNextReadyFrame(&App_Context);
 800407a:	462c      	mov	r4, r5
  __HAL_RCC_CSI_ENABLE();
 800407c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    UTIL_LCD_SetFont(&Font24);
 8004080:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80041b0 <main+0x288>
 8004084:	f1a6 0804 	sub.w	r8, r6, #4
 8004088:	1d37      	adds	r7, r6, #4
  __HAL_RCC_CSI_ENABLE();
 800408a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004090:	f042 0202 	orr.w	r2, r2, #2
 8004094:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004098:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800409c:	f002 0202 	and.w	r2, r2, #2
 80040a0:	9201      	str	r2, [sp, #4]
 80040a2:	9a01      	ldr	r2, [sp, #4]
  HAL_EnableCompensationCell();
 80040a4:	f004 ff30 	bl	8008f08 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 80040a8:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <main+0x278>)
  APP_Init(&App_Context);
 80040aa:	4628      	mov	r0, r5
  __HAL_RCC_CRC_CLK_ENABLE();
 80040ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80040b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80040b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c0:	930a      	str	r3, [sp, #40]	; 0x28
 80040c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  APP_Init(&App_Context);
 80040c4:	f7fc fb62 	bl	800078c <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 80040c8:	f646 139c 	movw	r3, #27036	; 0x699c
 80040cc:	58e8      	ldr	r0, [r5, r3]
 80040ce:	f7fe fdd7 	bl	8002c80 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 80040d2:	f646 1398 	movw	r3, #27032	; 0x6998
 80040d6:	58e8      	ldr	r0, [r5, r3]
 80040d8:	f7ff fdec 	bl	8003cb4 <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 80040dc:	f855 0009 	ldr.w	r0, [r5, r9]
 80040e0:	f7fd f802 	bl	80010e8 <DISPLAY_Init>
  People_Init(App_Context.People_ContextPtr);
 80040e4:	f646 13a0 	movw	r3, #27040	; 0x69a0
 80040e8:	58e8      	ldr	r0, [r5, r3]
 80040ea:	f014 fd49 	bl	8018b80 <People_Init>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 80040ee:	f855 0009 	ldr.w	r0, [r5, r9]
 80040f2:	f7fd f84b 	bl	800118c <DISPLAY_WelcomeScreen>
 80040f6:	4681      	mov	r9, r0
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 80040f8:	6830      	ldr	r0, [r6, #0]
 80040fa:	f1b9 0f00 	cmp.w	r9, #0
 80040fe:	d130      	bne.n	8004162 <main+0x23a>
 8004100:	f8d0 3450 	ldr.w	r3, [r0, #1104]	; 0x450
 8004104:	2b01      	cmp	r3, #1
 8004106:	d02c      	beq.n	8004162 <main+0x23a>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004108:	782b      	ldrb	r3, [r5, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d02e      	beq.n	800416c <main+0x244>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d02c      	beq.n	800416c <main+0x244>
 8004112:	2b03      	cmp	r3, #3
 8004114:	d02f      	beq.n	8004176 <main+0x24e>
  while(App_Context.run_loop)
 8004116:	686b      	ldr	r3, [r5, #4]
 8004118:	b1c3      	cbz	r3, 800414c <main+0x224>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 800411a:	f8d8 0000 	ldr.w	r0, [r8]
 800411e:	f7ff fe4d 	bl	8003dbc <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 8004122:	6830      	ldr	r0, [r6, #0]
 8004124:	f7fe fe6c 	bl	8002e00 <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 8004128:	4620      	mov	r0, r4
 800412a:	f7fc fba1 	bl	8000870 <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 800412e:	4620      	mov	r0, r4
 8004130:	f7fc fbec 	bl	800090c <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 8004134:	4620      	mov	r0, r4
 8004136:	f7fc fc0d 	bl	8000954 <APP_FramePreprocess>
    People_Run(App_Context.People_ContextPtr);
 800413a:	6838      	ldr	r0, [r7, #0]
 800413c:	f014 fe06 	bl	8018d4c <People_Run>
    APP_Postprocess(&App_Context);
 8004140:	4620      	mov	r0, r4
 8004142:	f7fc fc39 	bl	80009b8 <APP_Postprocess>
  while(App_Context.run_loop)
 8004146:	686b      	ldr	r3, [r5, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <main+0x1f2>
    People_Deinit();
 800414c:	f014 fcef 	bl	8018b2e <People_Deinit>
    UTIL_LCD_SetFont(&Font24);
 8004150:	4650      	mov	r0, sl
    App_Context.run_loop = 1;
 8004152:	f8c5 b004 	str.w	fp, [r5, #4]
    UTIL_LCD_SetFont(&Font24);
 8004156:	f014 f935 	bl	80183c4 <UTIL_LCD_SetFont>
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 800415a:	6830      	ldr	r0, [r6, #0]
 800415c:	f1b9 0f00 	cmp.w	r9, #0
 8004160:	d0ce      	beq.n	8004100 <main+0x1d8>
    TEST_MainMenu(App_Context.Test_ContextPtr);
 8004162:	f7fe feb5 	bl	8002ed0 <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004166:	782b      	ldrb	r3, [r5, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d1d0      	bne.n	800410e <main+0x1e6>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <main+0x284>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	f7fc fe0a 	bl	8000d88 <CAMERA_Init>
 8004174:	e7cf      	b.n	8004116 <main+0x1ee>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004176:	6833      	ldr	r3, [r6, #0]
 8004178:	791b      	ldrb	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d1cb      	bne.n	8004116 <main+0x1ee>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <main+0x284>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f7fc fe01 	bl	8000d88 <CAMERA_Init>
 8004186:	e7c6      	b.n	8004116 <main+0x1ee>
    Error_Handler();
 8004188:	f7ff febc 	bl	8003f04 <Error_Handler>
 800418c:	03010018 	.word	0x03010018
 8004190:	01010000 	.word	0x01010000
 8004194:	e000ed00 	.word	0xe000ed00
 8004198:	58000400 	.word	0x58000400
 800419c:	58024800 	.word	0x58024800
 80041a0:	58024400 	.word	0x58024400
 80041a4:	3000856c 	.word	0x3000856c
 80041a8:	3000ef08 	.word	0x3000ef08
 80041ac:	3000eef8 	.word	0x3000eef8
 80041b0:	2400019c 	.word	0x2400019c

080041b4 <SD_initialize>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 80041b4:	2301      	movs	r3, #1
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80041b6:	2000      	movs	r0, #0
{
 80041b8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80041ba:	4c07      	ldr	r4, [pc, #28]	; (80041d8 <SD_initialize+0x24>)
 80041bc:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 80041be:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80041c0:	f004 fe04 	bl	8008dcc <BSP_SD_GetCardState>
 80041c4:	b918      	cbnz	r0, 80041ce <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 80041c6:	7823      	ldrb	r3, [r4, #0]
 80041c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80041cc:	7023      	strb	r3, [r4, #0]
  return Stat;
 80041ce:	7823      	ldrb	r3, [r4, #0]
 80041d0:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 80041d2:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 80041d4:	7820      	ldrb	r0, [r4, #0]
}
 80041d6:	bd10      	pop	{r4, pc}
 80041d8:	240000ac 	.word	0x240000ac

080041dc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80041dc:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 80041de:	2000      	movs	r0, #0
 80041e0:	f004 fdc8 	bl	8008d74 <BSP_SD_ReadBlocks>
 80041e4:	b108      	cbz	r0, 80041ea <SD_read+0xe>
  DRESULT res = RES_ERROR;
 80041e6:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 80041e8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 80041ea:	2000      	movs	r0, #0
 80041ec:	f004 fdee 	bl	8008dcc <BSP_SD_GetCardState>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d0f9      	beq.n	80041e8 <SD_read+0xc>
 80041f4:	2000      	movs	r0, #0
 80041f6:	f004 fde9 	bl	8008dcc <BSP_SD_GetCardState>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1f5      	bne.n	80041ea <SD_read+0xe>
 80041fe:	e7f3      	b.n	80041e8 <SD_read+0xc>

08004200 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <SD_ioctl+0x5c>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	07db      	lsls	r3, r3, #31
 8004206:	d412      	bmi.n	800422e <SD_ioctl+0x2e>
 8004208:	4608      	mov	r0, r1
{
 800420a:	b510      	push	{r4, lr}
 800420c:	4614      	mov	r4, r2
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	2903      	cmp	r1, #3
 8004212:	d821      	bhi.n	8004258 <SD_ioctl+0x58>
 8004214:	e8df f001 	tbb	[pc, r1]
 8004218:	0d170209 	.word	0x0d170209
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0, &CardInfo);
 800421c:	a901      	add	r1, sp, #4
 800421e:	2000      	movs	r0, #0
 8004220:	f004 fde0 	bl	8008de4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004224:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8004226:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004228:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 800422a:	b00a      	add	sp, #40	; 0x28
 800422c:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800422e:	2003      	movs	r0, #3
}
 8004230:	4770      	bx	lr
    BSP_SD_GetCardInfo(0, &CardInfo);
 8004232:	a901      	add	r1, sp, #4
 8004234:	2000      	movs	r0, #0
 8004236:	f004 fdd5 	bl	8008de4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800423a:	9b08      	ldr	r3, [sp, #32]
 800423c:	2000      	movs	r0, #0
 800423e:	0a5b      	lsrs	r3, r3, #9
 8004240:	6023      	str	r3, [r4, #0]
}
 8004242:	b00a      	add	sp, #40	; 0x28
 8004244:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8004246:	a901      	add	r1, sp, #4
 8004248:	2000      	movs	r0, #0
 800424a:	f004 fdcb 	bl	8008de4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800424e:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8004250:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004252:	8023      	strh	r3, [r4, #0]
}
 8004254:	b00a      	add	sp, #40	; 0x28
 8004256:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004258:	2004      	movs	r0, #4
 800425a:	e7e6      	b.n	800422a <SD_ioctl+0x2a>
 800425c:	240000ac 	.word	0x240000ac

08004260 <SD_write>:
{
 8004260:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 8004262:	2000      	movs	r0, #0
 8004264:	f004 fd9c 	bl	8008da0 <BSP_SD_WriteBlocks>
 8004268:	b108      	cbz	r0, 800426e <SD_write+0xe>
  DRESULT res = RES_ERROR;
 800426a:	2001      	movs	r0, #1
}
 800426c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 800426e:	2000      	movs	r0, #0
 8004270:	f004 fdac 	bl	8008dcc <BSP_SD_GetCardState>
 8004274:	2800      	cmp	r0, #0
 8004276:	d0f9      	beq.n	800426c <SD_write+0xc>
 8004278:	2000      	movs	r0, #0
 800427a:	f004 fda7 	bl	8008dcc <BSP_SD_GetCardState>
 800427e:	2800      	cmp	r0, #0
 8004280:	d1f5      	bne.n	800426e <SD_write+0xe>
 8004282:	e7f3      	b.n	800426c <SD_write+0xc>

08004284 <SD_status>:
{
 8004284:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004286:	2301      	movs	r3, #1
 8004288:	4c05      	ldr	r4, [pc, #20]	; (80042a0 <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 800428a:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 800428c:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 800428e:	f004 fd9d 	bl	8008dcc <BSP_SD_GetCardState>
 8004292:	b918      	cbnz	r0, 800429c <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8004294:	7823      	ldrb	r3, [r4, #0]
 8004296:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800429a:	7023      	strb	r3, [r4, #0]
  return Stat;
 800429c:	7820      	ldrb	r0, [r4, #0]
}
 800429e:	bd10      	pop	{r4, pc}
 80042a0:	240000ac 	.word	0x240000ac

080042a4 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80042a8:	b500      	push	{lr}
 80042aa:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80042ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80042b0:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80042b4:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80042b6:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80042b8:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80042ba:	f009 fbcf 	bl	800da5c <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_RNG_MspInit+0x38>)
 80042c0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80042c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80042cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	9b01      	ldr	r3, [sp, #4]
}
 80042d8:	b033      	add	sp, #204	; 0xcc
 80042da:	f85d fb04 	ldr.w	pc, [sp], #4
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400

080042e4 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RNG_MspDeInit+0x1c>)
 80042e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 80042f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80042fe:	4770      	bx	lr
 8004300:	58024400 	.word	0x58024400

08004304 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8004308:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004464 <HAL_UART_MspInit+0x160>
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 800430c:	2701      	movs	r7, #1
{
 800430e:	b0bb      	sub	sp, #236	; 0xec
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004310:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8004312:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
{
 8004316:	4606      	mov	r6, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8004318:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800431a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8004468 <HAL_UART_MspInit+0x164>
  USARTx_TX_GPIO_CLK_ENABLE();
 800431e:	433b      	orrs	r3, r7
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004320:	2507      	movs	r5, #7

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8004322:	f44f 6880 	mov.w	r8, #1024	; 0x400
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004326:	f04f 0b03 	mov.w	fp, #3
  USARTx_TX_GPIO_CLK_ENABLE();
 800432a:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 800432e:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
 8004332:	403b      	ands	r3, r7
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8004338:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
 800433c:	433b      	orrs	r3, r7
 800433e:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8004342:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8004346:	970a      	str	r7, [sp, #40]	; 0x28
  USARTx_RX_GPIO_CLK_ENABLE();
 8004348:	403b      	ands	r3, r7
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800434a:	9429      	str	r4, [sp, #164]	; 0xa4
  USARTx_RX_GPIO_CLK_ENABLE();
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8004350:	f009 fb84 	bl	800da5c <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 8004354:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8004358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435c:	2302      	movs	r3, #2
  USARTx_CLK_ENABLE();
 800435e:	f041 0110 	orr.w	r1, r1, #16
 8004362:	f8ca 10f0 	str.w	r1, [sl, #240]	; 0xf0
 8004366:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
 800436a:	f001 0110 	and.w	r1, r1, #16
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9902      	ldr	r1, [sp, #8]
  DMAx_CLK_ENABLE();
 8004372:	f8da 10d8 	ldr.w	r1, [sl, #216]	; 0xd8
 8004376:	4339      	orrs	r1, r7
 8004378:	f8ca 10d8 	str.w	r1, [sl, #216]	; 0xd8
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800437c:	a904      	add	r1, sp, #16
  DMAx_CLK_ENABLE();
 800437e:	f8da 00d8 	ldr.w	r0, [sl, #216]	; 0xd8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004382:	9508      	str	r5, [sp, #32]
  DMAx_CLK_ENABLE();
 8004384:	4038      	ands	r0, r7
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8004386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800446c <HAL_UART_MspInit+0x168>
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800438a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800438e:	2201      	movs	r2, #1
 8004390:	2303      	movs	r3, #3
  DMAx_CLK_ENABLE();
 8004392:	9003      	str	r0, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8004394:	4648      	mov	r0, r9
  DMAx_CLK_ENABLE();
 8004396:	f8dd c00c 	ldr.w	ip, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800439a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800439e:	f007 fab9 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80043a2:	a904      	add	r1, sp, #16
 80043a4:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80043a6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80043a8:	f8cd 8010 	str.w	r8, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80043ac:	f007 fab2 	bl	800b914 <HAL_GPIO_Init>
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80043b0:	482a      	ldr	r0, [pc, #168]	; (800445c <HAL_UART_MspInit+0x158>)
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80043b2:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80043b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 80043ba:	212a      	movs	r1, #42	; 0x2a
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80043bc:	2240      	movs	r2, #64	; 0x40

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 80043be:	4d28      	ldr	r5, [pc, #160]	; (8004460 <HAL_UART_MspInit+0x15c>)
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80043c0:	f8ca 0000 	str.w	r0, [sl]
  HAL_DMA_Init(&hdma_tx);
 80043c4:	4650      	mov	r0, sl
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80043c6:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80043ca:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80043ce:	e9ca 1201 	strd	r1, r2, [sl, #4]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80043d2:	e9ca 4803 	strd	r4, r8, [sl, #12]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80043d6:	e9ca 4405 	strd	r4, r4, [sl, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80043da:	e9ca 4407 	strd	r4, r4, [sl, #28]
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80043de:	e9ca b90a 	strd	fp, r9, [sl, #40]	; 0x28
  HAL_DMA_Init(&hdma_tx);
 80043e2:	f005 f903 	bl	80095ec <HAL_DMA_Init>
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 80043e6:	f8df c088 	ldr.w	ip, [pc, #136]	; 8004470 <HAL_UART_MspInit+0x16c>
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80043ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 80043ee:	2129      	movs	r1, #41	; 0x29
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80043f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

  HAL_DMA_Init(&hdma_rx);
 80043f4:	4628      	mov	r0, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80043f6:	f8c6 a074 	str.w	sl, [r6, #116]	; 0x74
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80043fa:	632b      	str	r3, [r5, #48]	; 0x30
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80043fc:	622a      	str	r2, [r5, #32]
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80043fe:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004402:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8004406:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8004408:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 800440c:	e9c5 c100 	strd	ip, r1, [r5]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004410:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004414:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004418:	e9c5 4b09 	strd	r4, fp, [r5, #36]	; 0x24
  HAL_DMA_Init(&hdma_rx);
 800441c:	f005 f8e6 	bl	80095ec <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8004420:	463a      	mov	r2, r7
 8004422:	4621      	mov	r1, r4
 8004424:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8004426:	67b5      	str	r5, [r6, #120]	; 0x78
 8004428:	63ae      	str	r6, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 800442a:	f004 fd89 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800442e:	202f      	movs	r0, #47	; 0x2f
 8004430:	f004 fdc0 	bl	8008fb4 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8004434:	4622      	mov	r2, r4
 8004436:	4621      	mov	r1, r4
 8004438:	2010      	movs	r0, #16
 800443a:	f004 fd81 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 800443e:	2010      	movs	r0, #16
 8004440:	f004 fdb8 	bl	8008fb4 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8004444:	463a      	mov	r2, r7
 8004446:	4621      	mov	r1, r4
 8004448:	2025      	movs	r0, #37	; 0x25
 800444a:	f004 fd79 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800444e:	2025      	movs	r0, #37	; 0x25
 8004450:	f004 fdb0 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
}
 8004454:	b03b      	add	sp, #236	; 0xec
 8004456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445a:	bf00      	nop
 800445c:	400200b8 	.word	0x400200b8
 8004460:	30007578 	.word	0x30007578
 8004464:	58024400 	.word	0x58024400
 8004468:	58020000 	.word	0x58020000
 800446c:	300075f0 	.word	0x300075f0
 8004470:	40020088 	.word	0x40020088

08004474 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004478:	e7fe      	b.n	8004478 <HardFault_Handler>
 800447a:	bf00      	nop

0800447c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800447c:	e7fe      	b.n	800447c <MemManage_Handler>
 800447e:	bf00      	nop

08004480 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004480:	e7fe      	b.n	8004480 <BusFault_Handler>
 8004482:	bf00      	nop

08004484 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004484:	e7fe      	b.n	8004484 <UsageFault_Handler>
 8004486:	bf00      	nop

08004488 <SVC_Handler>:
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop

0800448c <DebugMon_Handler>:
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop

08004490 <PendSV_Handler>:
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop

08004494 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004494:	f004 bd0e 	b.w	8008eb4 <HAL_IncTick>

08004498 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 8004498:	2000      	movs	r0, #0
 800449a:	f003 bdf3 	b.w	8008084 <BSP_CAMERA_DMA_IRQHandler>
 800449e:	bf00      	nop

080044a0 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f003 bde9 	b.w	8008078 <BSP_CAMERA_IRQHandler>
 80044a6:	bf00      	nop

080044a8 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <MDMA_IRQHandler+0x8>)
 80044aa:	f008 bacd 	b.w	800ca48 <HAL_MDMA_IRQHandler>
 80044ae:	bf00      	nop
 80044b0:	3000ef10 	.word	0x3000ef10

080044b4 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <DSI_IRQHandler+0x8>)
 80044b6:	f006 bf0f 	b.w	800b2d8 <HAL_DSI_IRQHandler>
 80044ba:	bf00      	nop
 80044bc:	3000f7f8 	.word	0x3000f7f8

080044c0 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <DMA2D_IRQHandler+0x8>)
 80044c2:	f006 bd41 	b.w	800af48 <HAL_DMA2D_IRQHandler>
 80044c6:	bf00      	nop
 80044c8:	3000f814 	.word	0x3000f814

080044cc <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 80044cc:	4a03      	ldr	r2, [pc, #12]	; (80044dc <DMA1_Stream5_IRQHandler+0x10>)
 80044ce:	f646 139c 	movw	r3, #27036	; 0x699c
 80044d2:	58d3      	ldr	r3, [r2, r3]
 80044d4:	f8d3 04e4 	ldr.w	r0, [r3, #1252]	; 0x4e4
 80044d8:	f006 b816 	b.w	800a508 <HAL_DMA_IRQHandler>
 80044dc:	3000856c 	.word	0x3000856c

080044e0 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <DMA1_Stream7_IRQHandler+0x10>)
 80044e2:	f646 139c 	movw	r3, #27036	; 0x699c
 80044e6:	58d3      	ldr	r3, [r2, r3]
 80044e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80044ec:	f006 b80c 	b.w	800a508 <HAL_DMA_IRQHandler>
 80044f0:	3000856c 	.word	0x3000856c

080044f4 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <USART1_IRQHandler+0x10>)
 80044f6:	f646 139c 	movw	r3, #27036	; 0x699c
 80044fa:	58d0      	ldr	r0, [r2, r3]
 80044fc:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8004500:	f00b be8e 	b.w	8010220 <HAL_UART_IRQHandler>
 8004504:	3000856c 	.word	0x3000856c

08004508 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8004508:	4801      	ldr	r0, [pc, #4]	; (8004510 <LTDC_IRQHandler+0x8>)
 800450a:	f008 b869 	b.w	800c5e0 <HAL_LTDC_IRQHandler>
 800450e:	bf00      	nop
 8004510:	3000f734 	.word	0x3000f734

08004514 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004514:	4988      	ldr	r1, [pc, #544]	; (8004738 <SystemInit+0x224>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004516:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8004518:	4b88      	ldr	r3, [pc, #544]	; (800473c <SystemInit+0x228>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800451a:	4889      	ldr	r0, [pc, #548]	; (8004740 <SystemInit+0x22c>)
{
 800451c:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800451e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 8004522:	b082      	sub	sp, #8

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8004524:	4d87      	ldr	r5, [pc, #540]	; (8004744 <SystemInit+0x230>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004526:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800452a:	4e87      	ldr	r6, [pc, #540]	; (8004748 <SystemInit+0x234>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800452c:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8004530:	690c      	ldr	r4, [r1, #16]
 8004532:	f044 0404 	orr.w	r4, r4, #4
 8004536:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 8004538:	681c      	ldr	r4, [r3, #0]
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800453a:	4984      	ldr	r1, [pc, #528]	; (800474c <SystemInit+0x238>)
  RCC->CR |= RCC_CR_HSION;
 800453c:	f044 0401 	orr.w	r4, r4, #1
 8004540:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004542:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	4020      	ands	r0, r4
 8004548:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800454a:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800454c:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800454e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8004556:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004566:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8004568:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800456a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800456c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004570:	626b      	str	r3, [r5, #36]	; 0x24
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004572:	6833      	ldr	r3, [r6, #0]
 8004574:	4019      	ands	r1, r3
 8004576:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800457a:	d202      	bcs.n	8004582 <SystemInit+0x6e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800457c:	4b74      	ldr	r3, [pc, #464]	; (8004750 <SystemInit+0x23c>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 8004582:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8004584:	486d      	ldr	r0, [pc, #436]	; (800473c <SystemInit+0x228>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 8004586:	4973      	ldr	r1, [pc, #460]	; (8004754 <SystemInit+0x240>)
 8004588:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
  __IO uint32_t tmp = 0;
 800458c:	9300      	str	r3, [sp, #0]
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 800458e:	f04f 34cc 	mov.w	r4, #3435973836	; 0xcccccccc
  RCC->AHB4ENR |= 0x000001F8;
 8004592:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
  GPIOI->AFR[1] = 0x00000CC0;
 8004596:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
  GPIOD->AFR[1] = 0xCC000CCC;
 800459a:	4f6f      	ldr	r7, [pc, #444]	; (8004758 <SystemInit+0x244>)
  RCC->AHB4ENR |= 0x000001F8;
 800459c:	f442 72fc 	orr.w	r2, r2, #504	; 0x1f8
  GPIOD->MODER = 0xAFEAFFFA;
 80045a0:	4e6e      	ldr	r6, [pc, #440]	; (800475c <SystemInit+0x248>)
  RCC->AHB4ENR |= 0x000001F8;
 80045a2:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 80045a6:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80045aa:	f002 0210 	and.w	r2, r2, #16
 80045ae:	9200      	str	r2, [sp, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80045b0:	4a6b      	ldr	r2, [pc, #428]	; (8004760 <SystemInit+0x24c>)
  GPIOD->AFR[0] = 0x000000CC;
 80045b2:	f8c1 c020 	str.w	ip, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 80045b6:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOE->AFR[0] = 0xC00000CC;
 80045b8:	f1a7 270c 	sub.w	r7, r7, #201329664	; 0xc000c00
  GPIOD->MODER = 0xAFEAFFFA;
 80045bc:	600e      	str	r6, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80045be:	608a      	str	r2, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 80045c0:	4e68      	ldr	r6, [pc, #416]	; (8004764 <SystemInit+0x250>)
  GPIOE->AFR[0] = 0xC00000CC;
 80045c2:	4a69      	ldr	r2, [pc, #420]	; (8004768 <SystemInit+0x254>)
  GPIOD->OTYPER = 0x00000000;
 80045c4:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 80045c6:	60ce      	str	r6, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 80045c8:	6217      	str	r7, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 80045ca:	4e68      	ldr	r6, [pc, #416]	; (800476c <SystemInit+0x258>)
  GPIOE->OSPEEDR = 0xFFFFC00F;
 80045cc:	4968      	ldr	r1, [pc, #416]	; (8004770 <SystemInit+0x25c>)
  GPIOE->PUPDR = 0x55554005;
 80045ce:	4f69      	ldr	r7, [pc, #420]	; (8004774 <SystemInit+0x260>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 80045d0:	6254      	str	r4, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 80045d2:	6016      	str	r6, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 80045d4:	6091      	str	r1, [r2, #8]
  GPIOF->AFR[0] = 0x00CCCCCC;
 80045d6:	4e68      	ldr	r6, [pc, #416]	; (8004778 <SystemInit+0x264>)
  GPIOE->OTYPER = 0x00000000;
 80045d8:	6053      	str	r3, [r2, #4]
  GPIOF->AFR[0] = 0x00CCCCCC;
 80045da:	4968      	ldr	r1, [pc, #416]	; (800477c <SystemInit+0x268>)
  GPIOE->PUPDR = 0x55554005;
 80045dc:	60d7      	str	r7, [r2, #12]
  GPIOF->AFR[1] = 0xCCCCC000;
 80045de:	4f68      	ldr	r7, [pc, #416]	; (8004780 <SystemInit+0x26c>)
  GPIOF->MODER = 0xAABFFAAA;
 80045e0:	4a68      	ldr	r2, [pc, #416]	; (8004784 <SystemInit+0x270>)
  GPIOF->AFR[0] = 0x00CCCCCC;
 80045e2:	620e      	str	r6, [r1, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 80045e4:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 80045e6:	600a      	str	r2, [r1, #0]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 80045e8:	4a67      	ldr	r2, [pc, #412]	; (8004788 <SystemInit+0x274>)
  GPIOF->PUPDR = 0x55400555;
 80045ea:	4f68      	ldr	r7, [pc, #416]	; (800478c <SystemInit+0x278>)
  GPIOF->OSPEEDR = 0xFFC00FFF;
 80045ec:	608a      	str	r2, [r1, #8]
  GPIOG->AFR[0] = 0x00CCCCCC;
 80045ee:	4a68      	ldr	r2, [pc, #416]	; (8004790 <SystemInit+0x27c>)
  GPIOF->OTYPER = 0x00000000;
 80045f0:	604b      	str	r3, [r1, #4]
  GPIOF->PUPDR = 0x55400555;
 80045f2:	60cf      	str	r7, [r1, #12]
    WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 80045f4:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
  GPIOG->AFR[0] = 0x00CCCCCC;
 80045f8:	6216      	str	r6, [r2, #32]
  GPIOG->MODER = 0xBFFEFAAA;
 80045fa:	4966      	ldr	r1, [pc, #408]	; (8004794 <SystemInit+0x280>)
  GPIOG->AFR[1] = 0xC000000C;
 80045fc:	4e66      	ldr	r6, [pc, #408]	; (8004798 <SystemInit+0x284>)
 80045fe:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8004600:	6011      	str	r1, [r2, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8004602:	f501 2182 	add.w	r1, r1, #266240	; 0x41000
  GPIOG->PUPDR = 0x40010555;
 8004606:	4e65      	ldr	r6, [pc, #404]	; (800479c <SystemInit+0x288>)
  GPIOG->OSPEEDR = 0xC0030FFF;
 8004608:	f201 5155 	addw	r1, r1, #1365	; 0x555
 800460c:	6091      	str	r1, [r2, #8]
  GPIOH->AFR[0] = 0xCCC00000;
 800460e:	4964      	ldr	r1, [pc, #400]	; (80047a0 <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8004610:	6053      	str	r3, [r2, #4]
  GPIOG->PUPDR = 0x40010555;
 8004612:	60d6      	str	r6, [r2, #12]
  GPIOH->AFR[0] = 0xCCC00000;
 8004614:	4a63      	ldr	r2, [pc, #396]	; (80047a4 <SystemInit+0x290>)
  GPIOH->MODER = 0xAAAAABFF;
 8004616:	4e64      	ldr	r6, [pc, #400]	; (80047a8 <SystemInit+0x294>)
  GPIOH->AFR[0] = 0xCCC00000;
 8004618:	620a      	str	r2, [r1, #32]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 800461a:	4a64      	ldr	r2, [pc, #400]	; (80047ac <SystemInit+0x298>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 800461c:	624c      	str	r4, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 800461e:	600e      	str	r6, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8004620:	608a      	str	r2, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8004622:	4e63      	ldr	r6, [pc, #396]	; (80047b0 <SystemInit+0x29c>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8004624:	4a63      	ldr	r2, [pc, #396]	; (80047b4 <SystemInit+0x2a0>)
  GPIOH->OTYPER = 0x00000000;
 8004626:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8004628:	60ce      	str	r6, [r1, #12]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 800462a:	f240 1665 	movw	r6, #357	; 0x165
  GPIOI->AFR[0] = 0xCCCCCCCC;
 800462e:	6214      	str	r4, [r2, #32]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8004630:	2109      	movs	r1, #9
  GPIOI->AFR[1] = 0x00000CC0;
 8004632:	6255      	str	r5, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8004634:	f5a5 15a3 	sub.w	r5, r5, #1335296	; 0x146000
  GPIOI->OSPEEDR = 0x003CFFFF;
 8004638:	4c5f      	ldr	r4, [pc, #380]	; (80047b8 <SystemInit+0x2a4>)
  GPIOI->MODER = 0xFFEBAAAA;
 800463a:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 800463e:	6015      	str	r5, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8004640:	6094      	str	r4, [r2, #8]
  GPIOI->PUPDR = 0x00145555;
 8004642:	4c5e      	ldr	r4, [pc, #376]	; (80047bc <SystemInit+0x2a8>)
  GPIOI->OTYPER = 0x00000000;
 8004644:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8004646:	60d4      	str	r4, [r2, #12]
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8004648:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800464c:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 800464e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8004652:	4d5c      	ldr	r5, [pc, #368]	; (80047c4 <SystemInit+0x2b0>)
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8004654:	4c5c      	ldr	r4, [pc, #368]	; (80047c8 <SystemInit+0x2b4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8004656:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800465a:	601f      	str	r7, [r3, #0]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 800465c:	605e      	str	r6, [r3, #4]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 800465e:	609d      	str	r5, [r3, #8]
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8004660:	60dc      	str	r4, [r3, #12]
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8004662:	6119      	str	r1, [r3, #16]
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8004664:	699a      	ldr	r2, [r3, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8004666:	f012 0220 	ands.w	r2, r2, #32
 800466a:	d008      	beq.n	800467e <SystemInit+0x16a>
 800466c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004670:	e001      	b.n	8004676 <SystemInit+0x162>
 8004672:	3901      	subs	r1, #1
 8004674:	d054      	beq.n	8004720 <SystemInit+0x20c>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8004676:	699a      	ldr	r2, [r3, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8004678:	f012 0220 	ands.w	r2, r2, #32
 800467c:	d1f9      	bne.n	8004672 <SystemInit+0x15e>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	9a01      	ldr	r2, [sp, #4]
 8004682:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004686:	d253      	bcs.n	8004730 <SystemInit+0x21c>
  while ((tmpreg != 0) && (timeout-- > 0))
 8004688:	2200      	movs	r2, #0
  for (index = 0; index < 1000; index++)
 800468a:	9b01      	ldr	r3, [sp, #4]
 800468c:	3301      	adds	r3, #1
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	9b01      	ldr	r3, [sp, #4]
 8004692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004696:	d3f8      	bcc.n	800468a <SystemInit+0x176>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8004698:	4b49      	ldr	r3, [pc, #292]	; (80047c0 <SystemInit+0x2ac>)
 800469a:	210a      	movs	r1, #10
 800469c:	6119      	str	r1, [r3, #16]
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 800469e:	b142      	cbz	r2, 80046b2 <SystemInit+0x19e>
  while ((tmpreg != 0) && (timeout-- > 0))
 80046a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80046a4:	4a46      	ldr	r2, [pc, #280]	; (80047c0 <SystemInit+0x2ac>)
 80046a6:	e001      	b.n	80046ac <SystemInit+0x198>
  while ((tmpreg != 0) && (timeout-- > 0))
 80046a8:	3b01      	subs	r3, #1
 80046aa:	d01f      	beq.n	80046ec <SystemInit+0x1d8>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80046ac:	6991      	ldr	r1, [r2, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 80046ae:	068c      	lsls	r4, r1, #26
 80046b0:	d4fa      	bmi.n	80046a8 <SystemInit+0x194>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80046b2:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <SystemInit+0x2ac>)
 80046b4:	22eb      	movs	r2, #235	; 0xeb
 80046b6:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <SystemInit+0x2ac>)
 80046ba:	4a44      	ldr	r2, [pc, #272]	; (80047cc <SystemInit+0x2b8>)
 80046bc:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80046be:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80046c0:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80046c4:	4942      	ldr	r1, [pc, #264]	; (80047d0 <SystemInit+0x2bc>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046c6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80046ca:	695d      	ldr	r5, [r3, #20]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046cc:	481a      	ldr	r0, [pc, #104]	; (8004738 <SystemInit+0x224>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80046ce:	432a      	orrs	r2, r5
 80046d0:	615a      	str	r2, [r3, #20]
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 80046d2:	685a      	ldr	r2, [r3, #4]
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 80046d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046d8:	605a      	str	r2, [r3, #4]
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80046da:	680b      	ldr	r3, [r1, #0]
 80046dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046e0:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 80046e2:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046e4:	6084      	str	r4, [r0, #8]
}
 80046e6:	b002      	add	sp, #8
 80046e8:	bcf0      	pop	{r4, r5, r6, r7}
 80046ea:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80046ec:	20eb      	movs	r0, #235	; 0xeb
 80046ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80046f2:	4933      	ldr	r1, [pc, #204]	; (80047c0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80046f4:	6110      	str	r0, [r2, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 80046f6:	e001      	b.n	80046fc <SystemInit+0x1e8>
 80046f8:	3b01      	subs	r3, #1
 80046fa:	d005      	beq.n	8004708 <SystemInit+0x1f4>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80046fc:	698a      	ldr	r2, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 80046fe:	0690      	lsls	r0, r2, #26
 8004700:	d4fa      	bmi.n	80046f8 <SystemInit+0x1e4>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8004702:	4b32      	ldr	r3, [pc, #200]	; (80047cc <SystemInit+0x2b8>)
 8004704:	610b      	str	r3, [r1, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8004706:	e7da      	b.n	80046be <SystemInit+0x1aa>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8004708:	4a30      	ldr	r2, [pc, #192]	; (80047cc <SystemInit+0x2b8>)
 800470a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800470e:	482c      	ldr	r0, [pc, #176]	; (80047c0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8004710:	610a      	str	r2, [r1, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8004712:	e001      	b.n	8004718 <SystemInit+0x204>
 8004714:	3b01      	subs	r3, #1
 8004716:	d0d2      	beq.n	80046be <SystemInit+0x1aa>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8004718:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 800471a:	0692      	lsls	r2, r2, #26
 800471c:	d5cf      	bpl.n	80046be <SystemInit+0x1aa>
 800471e:	e7f9      	b.n	8004714 <SystemInit+0x200>
  for (index = 0; index < 1000; index++)
 8004720:	9101      	str	r1, [sp, #4]
 8004722:	9901      	ldr	r1, [sp, #4]
 8004724:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004728:	d3af      	bcc.n	800468a <SystemInit+0x176>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 800472a:	220a      	movs	r2, #10
 800472c:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 800472e:	e7b7      	b.n	80046a0 <SystemInit+0x18c>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8004730:	220a      	movs	r2, #10
 8004732:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8004734:	e7bd      	b.n	80046b2 <SystemInit+0x19e>
 8004736:	bf00      	nop
 8004738:	e000ed00 	.word	0xe000ed00
 800473c:	58024400 	.word	0x58024400
 8004740:	eaf6ed7f 	.word	0xeaf6ed7f
 8004744:	580000c0 	.word	0x580000c0
 8004748:	5c001000 	.word	0x5c001000
 800474c:	ffff0000 	.word	0xffff0000
 8004750:	51008108 	.word	0x51008108
 8004754:	58020c00 	.word	0x58020c00
 8004758:	cc000ccc 	.word	0xcc000ccc
 800475c:	afeafffa 	.word	0xafeafffa
 8004760:	f03f000f 	.word	0xf03f000f
 8004764:	50150005 	.word	0x50150005
 8004768:	58021000 	.word	0x58021000
 800476c:	aaaabffa 	.word	0xaaaabffa
 8004770:	ffffc00f 	.word	0xffffc00f
 8004774:	55554005 	.word	0x55554005
 8004778:	00cccccc 	.word	0x00cccccc
 800477c:	58021400 	.word	0x58021400
 8004780:	ccccc000 	.word	0xccccc000
 8004784:	aabffaaa 	.word	0xaabffaaa
 8004788:	ffc00fff 	.word	0xffc00fff
 800478c:	55400555 	.word	0x55400555
 8004790:	58021800 	.word	0x58021800
 8004794:	bffefaaa 	.word	0xbffefaaa
 8004798:	c000000c 	.word	0xc000000c
 800479c:	40010555 	.word	0x40010555
 80047a0:	58021c00 	.word	0x58021c00
 80047a4:	ccc00000 	.word	0xccc00000
 80047a8:	aaaaabff 	.word	0xaaaaabff
 80047ac:	fffffc00 	.word	0xfffffc00
 80047b0:	55555400 	.word	0x55555400
 80047b4:	58022000 	.word	0x58022000
 80047b8:	003cffff 	.word	0x003cffff
 80047bc:	00145555 	.word	0x00145555
 80047c0:	52004140 	.word	0x52004140
 80047c4:	00105000 	.word	0x00105000
 80047c8:	01010351 	.word	0x01010351
 80047cc:	0004400c 	.word	0x0004400c
 80047d0:	52004000 	.word	0x52004000

080047d4 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop

080047dc <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80047de:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	600b      	str	r3, [r1, #0]
}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	30007668 	.word	0x30007668

080047ec <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80047ec:	4b02      	ldr	r3, [pc, #8]	; (80047f8 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 80047ee:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	600b      	str	r3, [r1, #0]
}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	30007668 	.word	0x30007668

080047fc <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <OTM8009A_GetXSize+0x1c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	b123      	cbz	r3, 800480c <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8004802:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004806:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004808:	600b      	str	r3, [r1, #0]
}
 800480a:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 800480c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004810:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8004812:	600b      	str	r3, [r1, #0]
}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	30007668 	.word	0x30007668

0800481c <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <OTM8009A_GetYSize+0x1c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	b123      	cbz	r3, 800482c <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004822:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004826:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004828:	600b      	str	r3, [r1, #0]
}
 800482a:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 800482c:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8004830:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004832:	600b      	str	r3, [r1, #0]
}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	30007668 	.word	0x30007668

0800483c <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop

0800484c <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800486c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800486e:	6884      	ldr	r4, [r0, #8]
 8004870:	8800      	ldrh	r0, [r0, #0]
 8004872:	46a4      	mov	ip, r4
}
 8004874:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004878:	4760      	bx	ip
 800487a:	bf00      	nop

0800487c <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800487c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800487e:	6844      	ldr	r4, [r0, #4]
 8004880:	8800      	ldrh	r0, [r0, #0]
 8004882:	46a4      	mov	ip, r4
}
 8004884:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004888:	4760      	bx	ip
 800488a:	bf00      	nop

0800488c <OTM8009A_Init>:
{
 800488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004890:	2300      	movs	r3, #0
 8004892:	f100 0710 	add.w	r7, r0, #16
{
 8004896:	b082      	sub	sp, #8
 8004898:	4680      	mov	r8, r0
 800489a:	4689      	mov	r9, r1
 800489c:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800489e:	4619      	mov	r1, r3
 80048a0:	4ae0      	ldr	r2, [pc, #896]	; (8004c24 <OTM8009A_Init+0x398>)
 80048a2:	4638      	mov	r0, r7
 80048a4:	f000 fcd6 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048a8:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048aa:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048ac:	4ade      	ldr	r2, [pc, #888]	; (8004c28 <OTM8009A_Init+0x39c>)
 80048ae:	21ff      	movs	r1, #255	; 0xff
 80048b0:	4638      	mov	r0, r7
 80048b2:	f000 fccf 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048b8:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048ba:	4adc      	ldr	r2, [pc, #880]	; (8004c2c <OTM8009A_Init+0x3a0>)
 80048bc:	4619      	mov	r1, r3
 80048be:	4638      	mov	r0, r7
 80048c0:	f000 fcc8 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80048c4:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048c6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048ca:	4ad9      	ldr	r2, [pc, #868]	; (8004c30 <OTM8009A_Init+0x3a4>)
 80048cc:	21ff      	movs	r1, #255	; 0xff
 80048ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048d0:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048d2:	f000 fcbf 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048da:	4ad4      	ldr	r2, [pc, #848]	; (8004c2c <OTM8009A_Init+0x3a0>)
 80048dc:	4619      	mov	r1, r3
 80048de:	4638      	mov	r0, r7
 80048e0:	f000 fcb8 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80048e4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048e6:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80048e8:	2300      	movs	r3, #0
 80048ea:	4ad2      	ldr	r2, [pc, #840]	; (8004c34 <OTM8009A_Init+0x3a8>)
 80048ec:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80048ee:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80048f0:	4638      	mov	r0, r7
 80048f2:	f000 fcaf 	bl	8005254 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80048f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80048fa:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 80048fc:	4798      	blx	r3
 80048fe:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004904:	4798      	blx	r3
 8004906:	1b00      	subs	r0, r0, r4
 8004908:	2809      	cmp	r0, #9
 800490a:	d9f9      	bls.n	8004900 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800490c:	2300      	movs	r3, #0
 800490e:	4aca      	ldr	r2, [pc, #808]	; (8004c38 <OTM8009A_Init+0x3ac>)
 8004910:	4638      	mov	r0, r7
 8004912:	4619      	mov	r1, r3
 8004914:	f000 fc9e 	bl	8005254 <otm8009a_write_reg>
 8004918:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800491a:	2300      	movs	r3, #0
 800491c:	4ac7      	ldr	r2, [pc, #796]	; (8004c3c <OTM8009A_Init+0x3b0>)
 800491e:	21c4      	movs	r1, #196	; 0xc4
 8004920:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004922:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004924:	f000 fc96 	bl	8005254 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004928:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800492c:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800492e:	4798      	blx	r3
 8004930:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004932:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004936:	4798      	blx	r3
 8004938:	1b40      	subs	r0, r0, r5
 800493a:	2809      	cmp	r0, #9
 800493c:	d9f9      	bls.n	8004932 <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800493e:	2300      	movs	r3, #0
 8004940:	4abf      	ldr	r2, [pc, #764]	; (8004c40 <OTM8009A_Init+0x3b4>)
 8004942:	4638      	mov	r0, r7
 8004944:	4619      	mov	r1, r3
 8004946:	f000 fc85 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800494a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800494c:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800494e:	4abd      	ldr	r2, [pc, #756]	; (8004c44 <OTM8009A_Init+0x3b8>)
 8004950:	21c5      	movs	r1, #197	; 0xc5
 8004952:	4638      	mov	r0, r7
 8004954:	f000 fc7e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004958:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800495a:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800495c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800495e:	4619      	mov	r1, r3
 8004960:	4ab9      	ldr	r2, [pc, #740]	; (8004c48 <OTM8009A_Init+0x3bc>)
 8004962:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004964:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004966:	f000 fc75 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800496a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800496c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800496e:	4ab7      	ldr	r2, [pc, #732]	; (8004c4c <OTM8009A_Init+0x3c0>)
 8004970:	21c5      	movs	r1, #197	; 0xc5
 8004972:	4638      	mov	r0, r7
 8004974:	f000 fc6e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004978:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800497a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800497c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800497e:	4619      	mov	r1, r3
 8004980:	4ab3      	ldr	r2, [pc, #716]	; (8004c50 <OTM8009A_Init+0x3c4>)
 8004982:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004984:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004986:	f000 fc65 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800498a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800498c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800498e:	4ab1      	ldr	r2, [pc, #708]	; (8004c54 <OTM8009A_Init+0x3c8>)
 8004990:	21c0      	movs	r1, #192	; 0xc0
 8004992:	4638      	mov	r0, r7
 8004994:	f000 fc5e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004998:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800499a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800499c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800499e:	4619      	mov	r1, r3
 80049a0:	4aa0      	ldr	r2, [pc, #640]	; (8004c24 <OTM8009A_Init+0x398>)
 80049a2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80049a4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049a6:	f000 fc55 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049ac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049ae:	4aaa      	ldr	r2, [pc, #680]	; (8004c58 <OTM8009A_Init+0x3cc>)
 80049b0:	21d9      	movs	r1, #217	; 0xd9
 80049b2:	4638      	mov	r0, r7
 80049b4:	f000 fc4e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80049ba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049be:	4619      	mov	r1, r3
 80049c0:	4aa6      	ldr	r2, [pc, #664]	; (8004c5c <OTM8009A_Init+0x3d0>)
 80049c2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80049c4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049c6:	f000 fc45 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049cc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049ce:	4aa4      	ldr	r2, [pc, #656]	; (8004c60 <OTM8009A_Init+0x3d4>)
 80049d0:	21c1      	movs	r1, #193	; 0xc1
 80049d2:	4638      	mov	r0, r7
 80049d4:	f000 fc3e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80049da:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049de:	4619      	mov	r1, r3
 80049e0:	4aa0      	ldr	r2, [pc, #640]	; (8004c64 <OTM8009A_Init+0x3d8>)
 80049e2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80049e4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049e6:	f000 fc35 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80049ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049ec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80049ee:	4a9e      	ldr	r2, [pc, #632]	; (8004c68 <OTM8009A_Init+0x3dc>)
 80049f0:	21c1      	movs	r1, #193	; 0xc1
 80049f2:	4638      	mov	r0, r7
 80049f4:	f000 fc2e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80049f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80049fa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80049fc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80049fe:	4619      	mov	r1, r3
 8004a00:	4a9a      	ldr	r2, [pc, #616]	; (8004c6c <OTM8009A_Init+0x3e0>)
 8004a02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a04:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a06:	f000 fc25 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a0c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a0e:	4a98      	ldr	r2, [pc, #608]	; (8004c70 <OTM8009A_Init+0x3e4>)
 8004a10:	21c5      	movs	r1, #197	; 0xc5
 8004a12:	4638      	mov	r0, r7
 8004a14:	f000 fc1e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a1a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4a94      	ldr	r2, [pc, #592]	; (8004c74 <OTM8009A_Init+0x3e8>)
 8004a22:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a24:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a26:	f000 fc15 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a2c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a2e:	4a87      	ldr	r2, [pc, #540]	; (8004c4c <OTM8009A_Init+0x3c0>)
 8004a30:	21c5      	movs	r1, #197	; 0xc5
 8004a32:	4638      	mov	r0, r7
 8004a34:	f000 fc0e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a3a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a3c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4a78      	ldr	r2, [pc, #480]	; (8004c24 <OTM8009A_Init+0x398>)
 8004a42:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a44:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a46:	f000 fc05 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a4a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a4c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a4e:	4a8a      	ldr	r2, [pc, #552]	; (8004c78 <OTM8009A_Init+0x3ec>)
 8004a50:	21d8      	movs	r1, #216	; 0xd8
 8004a52:	4638      	mov	r0, r7
 8004a54:	f000 fbfe 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a5a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a5c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4a86      	ldr	r2, [pc, #536]	; (8004c7c <OTM8009A_Init+0x3f0>)
 8004a62:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004a64:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a66:	f000 fbf5 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a6c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a6e:	4a84      	ldr	r2, [pc, #528]	; (8004c80 <OTM8009A_Init+0x3f4>)
 8004a70:	21c5      	movs	r1, #197	; 0xc5
 8004a72:	4638      	mov	r0, r7
 8004a74:	f000 fbee 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004a7a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a7c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4a80      	ldr	r2, [pc, #512]	; (8004c84 <OTM8009A_Init+0x3f8>)
 8004a82:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004a84:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a86:	f000 fbe5 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004a8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a8c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004a8e:	4a7e      	ldr	r2, [pc, #504]	; (8004c88 <OTM8009A_Init+0x3fc>)
 8004a90:	21c0      	movs	r1, #192	; 0xc0
 8004a92:	4638      	mov	r0, r7
 8004a94:	f000 fbde 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004a98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004a9a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004a9c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <OTM8009A_Init+0x400>)
 8004aa2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004aa4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004aa6:	f000 fbd5 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004aaa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004aac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004aae:	4a78      	ldr	r2, [pc, #480]	; (8004c90 <OTM8009A_Init+0x404>)
 8004ab0:	21c5      	movs	r1, #197	; 0xc5
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f000 fbce 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ab8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004aba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004abc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4a66      	ldr	r2, [pc, #408]	; (8004c5c <OTM8009A_Init+0x3d0>)
 8004ac2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ac4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ac6:	f000 fbc5 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004aca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004acc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ace:	4a71      	ldr	r2, [pc, #452]	; (8004c94 <OTM8009A_Init+0x408>)
 8004ad0:	21c4      	movs	r1, #196	; 0xc4
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f000 fbbe 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ad8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ada:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004adc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4a60      	ldr	r2, [pc, #384]	; (8004c64 <OTM8009A_Init+0x3d8>)
 8004ae2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ae4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ae6:	f000 fbb5 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004aea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004aec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004aee:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <OTM8009A_Init+0x40c>)
 8004af0:	21c1      	movs	r1, #193	; 0xc1
 8004af2:	4638      	mov	r0, r7
 8004af4:	f000 fbae 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004af8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004afa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004afc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004afe:	4619      	mov	r1, r3
 8004b00:	4a66      	ldr	r2, [pc, #408]	; (8004c9c <OTM8009A_Init+0x410>)
 8004b02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b04:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b06:	f000 fba5 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b0a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b0c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b0e:	4a64      	ldr	r2, [pc, #400]	; (8004ca0 <OTM8009A_Init+0x414>)
 8004b10:	21b3      	movs	r1, #179	; 0xb3
 8004b12:	4638      	mov	r0, r7
 8004b14:	f000 fb9e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b1a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4a42      	ldr	r2, [pc, #264]	; (8004c2c <OTM8009A_Init+0x3a0>)
 8004b22:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b24:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b26:	f000 fb95 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b2a:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b2c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ca4 <OTM8009A_Init+0x418>)
 8004b30:	21ce      	movs	r1, #206	; 0xce
 8004b32:	4638      	mov	r0, r7
 8004b34:	f000 fb8e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b3a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b3c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4a59      	ldr	r2, [pc, #356]	; (8004ca8 <OTM8009A_Init+0x41c>)
 8004b42:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004b44:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b46:	f000 fb85 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b4a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b4c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b4e:	4a57      	ldr	r2, [pc, #348]	; (8004cac <OTM8009A_Init+0x420>)
 8004b50:	21ce      	movs	r1, #206	; 0xce
 8004b52:	4638      	mov	r0, r7
 8004b54:	f000 fb7e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004b5a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b5c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4a53      	ldr	r2, [pc, #332]	; (8004cb0 <OTM8009A_Init+0x424>)
 8004b62:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004b64:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b66:	f000 fb75 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b6a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b6c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b6e:	4a51      	ldr	r2, [pc, #324]	; (8004cb4 <OTM8009A_Init+0x428>)
 8004b70:	21ce      	movs	r1, #206	; 0xce
 8004b72:	4638      	mov	r0, r7
 8004b74:	f000 fb6e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b7a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b7c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4a4d      	ldr	r2, [pc, #308]	; (8004cb8 <OTM8009A_Init+0x42c>)
 8004b82:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004b84:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b86:	f000 fb65 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004b8a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b8c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004b8e:	4a4b      	ldr	r2, [pc, #300]	; (8004cbc <OTM8009A_Init+0x430>)
 8004b90:	21cf      	movs	r1, #207	; 0xcf
 8004b92:	4638      	mov	r0, r7
 8004b94:	f000 fb5e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004b98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b9a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004b9c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4a47      	ldr	r2, [pc, #284]	; (8004cc0 <OTM8009A_Init+0x434>)
 8004ba2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ba4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ba6:	f000 fb55 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004baa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bae:	4a45      	ldr	r2, [pc, #276]	; (8004cc4 <OTM8009A_Init+0x438>)
 8004bb0:	21cf      	movs	r1, #207	; 0xcf
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f000 fb4e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bb8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004bba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bbc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	; (8004c2c <OTM8009A_Init+0x3a0>)
 8004bc2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004bc4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bc6:	f000 fb45 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004bca:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bcc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004bce:	4a3e      	ldr	r2, [pc, #248]	; (8004cc8 <OTM8009A_Init+0x43c>)
 8004bd0:	21cb      	movs	r1, #203	; 0xcb
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f000 fb3e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bd8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bda:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004bdc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bde:	4619      	mov	r1, r3
 8004be0:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <OTM8009A_Init+0x440>)
 8004be2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004be4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004be6:	f000 fb35 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004bea:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004bee:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <OTM8009A_Init+0x444>)
 8004bf0:	21cb      	movs	r1, #203	; 0xcb
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f000 fb2e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bf8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004bfa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004bfc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <OTM8009A_Init+0x41c>)
 8004c02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c04:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c06:	f000 fb25 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c0a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c0c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c0e:	4a31      	ldr	r2, [pc, #196]	; (8004cd4 <OTM8009A_Init+0x448>)
 8004c10:	21cb      	movs	r1, #203	; 0xcb
 8004c12:	4638      	mov	r0, r7
 8004c14:	f000 fb1e 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c1a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c1e:	4619      	mov	r1, r3
 8004c20:	e05a      	b.n	8004cd8 <OTM8009A_Init+0x44c>
 8004c22:	bf00      	nop
 8004c24:	0802c401 	.word	0x0802c401
 8004c28:	0802c2d0 	.word	0x0802c2d0
 8004c2c:	0802c402 	.word	0x0802c402
 8004c30:	0802c35c 	.word	0x0802c35c
 8004c34:	0802c403 	.word	0x0802c403
 8004c38:	0802c404 	.word	0x0802c404
 8004c3c:	0802c405 	.word	0x0802c405
 8004c40:	0802c406 	.word	0x0802c406
 8004c44:	0802c407 	.word	0x0802c407
 8004c48:	0802c408 	.word	0x0802c408
 8004c4c:	0802c409 	.word	0x0802c409
 8004c50:	0802c40a 	.word	0x0802c40a
 8004c54:	0802c40b 	.word	0x0802c40b
 8004c58:	0802c40c 	.word	0x0802c40c
 8004c5c:	0802c40d 	.word	0x0802c40d
 8004c60:	0802c40e 	.word	0x0802c40e
 8004c64:	0802c40f 	.word	0x0802c40f
 8004c68:	0802c410 	.word	0x0802c410
 8004c6c:	0802c411 	.word	0x0802c411
 8004c70:	0802c412 	.word	0x0802c412
 8004c74:	0802c413 	.word	0x0802c413
 8004c78:	0802c3d0 	.word	0x0802c3d0
 8004c7c:	0802c414 	.word	0x0802c414
 8004c80:	0802c415 	.word	0x0802c415
 8004c84:	0802c416 	.word	0x0802c416
 8004c88:	0802c417 	.word	0x0802c417
 8004c8c:	0802c418 	.word	0x0802c418
 8004c90:	0802c419 	.word	0x0802c419
 8004c94:	0802c41a 	.word	0x0802c41a
 8004c98:	0802c41b 	.word	0x0802c41b
 8004c9c:	0802c41c 	.word	0x0802c41c
 8004ca0:	0802c3d4 	.word	0x0802c3d4
 8004ca4:	0802c3d8 	.word	0x0802c3d8
 8004ca8:	0802c41d 	.word	0x0802c41d
 8004cac:	0802c3e0 	.word	0x0802c3e0
 8004cb0:	0802c41e 	.word	0x0802c41e
 8004cb4:	0802c3f0 	.word	0x0802c3f0
 8004cb8:	0802c41f 	.word	0x0802c41f
 8004cbc:	0802c2d4 	.word	0x0802c2d4
 8004cc0:	0802c420 	.word	0x0802c420
 8004cc4:	0802c42d 	.word	0x0802c42d
 8004cc8:	0802c2e0 	.word	0x0802c2e0
 8004ccc:	0802c421 	.word	0x0802c421
 8004cd0:	0802c2ec 	.word	0x0802c2ec
 8004cd4:	0802c2fc 	.word	0x0802c2fc
 8004cd8:	4ad1      	ldr	r2, [pc, #836]	; (8005020 <OTM8009A_Init+0x794>)
 8004cda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004cdc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004cde:	f000 fab9 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004ce2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ce4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004ce6:	4acf      	ldr	r2, [pc, #828]	; (8005024 <OTM8009A_Init+0x798>)
 8004ce8:	21cb      	movs	r1, #203	; 0xcb
 8004cea:	4638      	mov	r0, r7
 8004cec:	f000 fab2 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004cf0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004cf2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004cf4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4acb      	ldr	r2, [pc, #812]	; (8005028 <OTM8009A_Init+0x79c>)
 8004cfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004cfc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004cfe:	f000 faa9 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d02:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d04:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d06:	4ac9      	ldr	r2, [pc, #804]	; (800502c <OTM8009A_Init+0x7a0>)
 8004d08:	21cb      	movs	r1, #203	; 0xcb
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f000 faa2 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d12:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d14:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d16:	4619      	mov	r1, r3
 8004d18:	4ac5      	ldr	r2, [pc, #788]	; (8005030 <OTM8009A_Init+0x7a4>)
 8004d1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d1c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d1e:	f000 fa99 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d22:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d24:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d26:	4ac3      	ldr	r2, [pc, #780]	; (8005034 <OTM8009A_Init+0x7a8>)
 8004d28:	21cb      	movs	r1, #203	; 0xcb
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f000 fa92 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d32:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d34:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d36:	4619      	mov	r1, r3
 8004d38:	4abf      	ldr	r2, [pc, #764]	; (8005038 <OTM8009A_Init+0x7ac>)
 8004d3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d3c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d3e:	f000 fa89 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d42:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d44:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d46:	4abd      	ldr	r2, [pc, #756]	; (800503c <OTM8009A_Init+0x7b0>)
 8004d48:	21cb      	movs	r1, #203	; 0xcb
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f000 fa82 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d52:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d54:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d56:	4619      	mov	r1, r3
 8004d58:	4ab9      	ldr	r2, [pc, #740]	; (8005040 <OTM8009A_Init+0x7b4>)
 8004d5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d5c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d5e:	f000 fa79 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d62:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d64:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d66:	4ab7      	ldr	r2, [pc, #732]	; (8005044 <OTM8009A_Init+0x7b8>)
 8004d68:	21cb      	movs	r1, #203	; 0xcb
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f000 fa72 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d72:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d74:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d76:	4619      	mov	r1, r3
 8004d78:	4ab3      	ldr	r2, [pc, #716]	; (8005048 <OTM8009A_Init+0x7bc>)
 8004d7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d7c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d7e:	f000 fa69 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004d82:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d84:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004d86:	4ab1      	ldr	r2, [pc, #708]	; (800504c <OTM8009A_Init+0x7c0>)
 8004d88:	21cc      	movs	r1, #204	; 0xcc
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f000 fa62 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004d90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d92:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004d94:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004d96:	4619      	mov	r1, r3
 8004d98:	4aad      	ldr	r2, [pc, #692]	; (8005050 <OTM8009A_Init+0x7c4>)
 8004d9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004d9c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004d9e:	f000 fa59 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004da2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004da4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004da6:	4aab      	ldr	r2, [pc, #684]	; (8005054 <OTM8009A_Init+0x7c8>)
 8004da8:	21cc      	movs	r1, #204	; 0xcc
 8004daa:	4638      	mov	r0, r7
 8004dac:	f000 fa52 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004db0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004db2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004db4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004db6:	4619      	mov	r1, r3
 8004db8:	4aa7      	ldr	r2, [pc, #668]	; (8005058 <OTM8009A_Init+0x7cc>)
 8004dba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004dbc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dbe:	f000 fa49 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004dc2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dc4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004dc6:	4aa5      	ldr	r2, [pc, #660]	; (800505c <OTM8009A_Init+0x7d0>)
 8004dc8:	21cc      	movs	r1, #204	; 0xcc
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f000 fa42 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004dd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004dd2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004dd4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4a91      	ldr	r2, [pc, #580]	; (8005020 <OTM8009A_Init+0x794>)
 8004dda:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004ddc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004dde:	f000 fa39 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004de2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004de4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004de6:	4a9e      	ldr	r2, [pc, #632]	; (8005060 <OTM8009A_Init+0x7d4>)
 8004de8:	21cc      	movs	r1, #204	; 0xcc
 8004dea:	4638      	mov	r0, r7
 8004dec:	f000 fa32 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004df0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004df2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004df4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004df6:	4619      	mov	r1, r3
 8004df8:	4a8b      	ldr	r2, [pc, #556]	; (8005028 <OTM8009A_Init+0x79c>)
 8004dfa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004dfc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004dfe:	f000 fa29 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e02:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e04:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e06:	4a97      	ldr	r2, [pc, #604]	; (8005064 <OTM8009A_Init+0x7d8>)
 8004e08:	21cc      	movs	r1, #204	; 0xcc
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f000 fa22 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e12:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e14:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e16:	4619      	mov	r1, r3
 8004e18:	4a85      	ldr	r2, [pc, #532]	; (8005030 <OTM8009A_Init+0x7a4>)
 8004e1a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e1c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e1e:	f000 fa19 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e22:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e24:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e26:	4a90      	ldr	r2, [pc, #576]	; (8005068 <OTM8009A_Init+0x7dc>)
 8004e28:	21cc      	movs	r1, #204	; 0xcc
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f000 fa12 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e32:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e34:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e36:	4619      	mov	r1, r3
 8004e38:	4a8c      	ldr	r2, [pc, #560]	; (800506c <OTM8009A_Init+0x7e0>)
 8004e3a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e3c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e3e:	f000 fa09 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e44:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e46:	4a8a      	ldr	r2, [pc, #552]	; (8005070 <OTM8009A_Init+0x7e4>)
 8004e48:	21c5      	movs	r1, #197	; 0xc5
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f000 fa02 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e52:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e54:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e56:	4619      	mov	r1, r3
 8004e58:	4a86      	ldr	r2, [pc, #536]	; (8005074 <OTM8009A_Init+0x7e8>)
 8004e5a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004e5c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e5e:	f000 f9f9 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e64:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e66:	4a84      	ldr	r2, [pc, #528]	; (8005078 <OTM8009A_Init+0x7ec>)
 8004e68:	21f5      	movs	r1, #245	; 0xf5
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f000 f9f2 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004e72:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e74:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e76:	4619      	mov	r1, r3
 8004e78:	4a80      	ldr	r2, [pc, #512]	; (800507c <OTM8009A_Init+0x7f0>)
 8004e7a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004e7c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e7e:	f000 f9e9 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004e82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e84:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004e86:	4a7e      	ldr	r2, [pc, #504]	; (8005080 <OTM8009A_Init+0x7f4>)
 8004e88:	21c6      	movs	r1, #198	; 0xc6
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f000 f9e2 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004e92:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004e94:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e96:	4619      	mov	r1, r3
 8004e98:	4a7a      	ldr	r2, [pc, #488]	; (8005084 <OTM8009A_Init+0x7f8>)
 8004e9a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004e9c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e9e:	f000 f9d9 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004ea2:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ea4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004ea6:	4a78      	ldr	r2, [pc, #480]	; (8005088 <OTM8009A_Init+0x7fc>)
 8004ea8:	21ff      	movs	r1, #255	; 0xff
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 f9d2 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eb2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eb4:	4a73      	ldr	r2, [pc, #460]	; (8005084 <OTM8009A_Init+0x7f8>)
 8004eb6:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004eb8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f000 f9ca 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ec0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004ec2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ec4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <OTM8009A_Init+0x7f8>)
 8004eca:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ecc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ece:	f000 f9c1 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004ed2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ed4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004ed6:	4a6d      	ldr	r2, [pc, #436]	; (800508c <OTM8009A_Init+0x800>)
 8004ed8:	21e1      	movs	r1, #225	; 0xe1
 8004eda:	4638      	mov	r0, r7
 8004edc:	f000 f9ba 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ee0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ee2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004ee4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4a66      	ldr	r2, [pc, #408]	; (8005084 <OTM8009A_Init+0x7f8>)
 8004eea:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004eec:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eee:	f000 f9b1 	bl	8005254 <otm8009a_write_reg>
 8004ef2:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	4a66      	ldr	r2, [pc, #408]	; (8005090 <OTM8009A_Init+0x804>)
 8004ef8:	21e2      	movs	r1, #226	; 0xe2
 8004efa:	4638      	mov	r0, r7
 8004efc:	f000 f9aa 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f00:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f02:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f04:	2300      	movs	r3, #0
 8004f06:	4a63      	ldr	r2, [pc, #396]	; (8005094 <OTM8009A_Init+0x808>)
 8004f08:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f0a:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	f000 f9a1 	bl	8005254 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004f12:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f16:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004f18:	4798      	blx	r3
 8004f1a:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f20:	4798      	blx	r3
 8004f22:	1b40      	subs	r0, r0, r5
 8004f24:	2877      	cmp	r0, #119	; 0x77
 8004f26:	d9f9      	bls.n	8004f1c <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8004f28:	f1b9 0f00 	cmp.w	r9, #0
 8004f2c:	d074      	beq.n	8005018 <OTM8009A_Init+0x78c>
 8004f2e:	f1b9 0f02 	cmp.w	r9, #2
 8004f32:	d14f      	bne.n	8004fd4 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004f34:	2300      	movs	r3, #0
 8004f36:	4a58      	ldr	r2, [pc, #352]	; (8005098 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004f38:	213a      	movs	r1, #58	; 0x3a
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	f000 f98a 	bl	8005254 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004f40:	4d56      	ldr	r5, [pc, #344]	; (800509c <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004f42:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004f46:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004f48:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004f4c:	d046      	beq.n	8004fdc <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004f52:	2300      	movs	r3, #0
 8004f54:	4a52      	ldr	r2, [pc, #328]	; (80050a0 <OTM8009A_Init+0x814>)
 8004f56:	2151      	movs	r1, #81	; 0x51
 8004f58:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004f5a:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004f5c:	f000 f97a 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f60:	4a50      	ldr	r2, [pc, #320]	; (80050a4 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004f62:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f66:	4653      	mov	r3, sl
 8004f68:	2153      	movs	r1, #83	; 0x53
 8004f6a:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004f6c:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f70:	f000 f970 	bl	8005254 <otm8009a_write_reg>
 8004f74:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004f76:	4653      	mov	r3, sl
 8004f78:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <OTM8009A_Init+0x81c>)
 8004f7a:	2155      	movs	r1, #85	; 0x55
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f000 f969 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004f82:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004f84:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004f86:	4653      	mov	r3, sl
 8004f88:	4a48      	ldr	r2, [pc, #288]	; (80050ac <OTM8009A_Init+0x820>)
 8004f8a:	215e      	movs	r1, #94	; 0x5e
 8004f8c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004f8e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004f90:	f000 f960 	bl	8005254 <otm8009a_write_reg>
 8004f94:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004f96:	4653      	mov	r3, sl
 8004f98:	4a45      	ldr	r2, [pc, #276]	; (80050b0 <OTM8009A_Init+0x824>)
 8004f9a:	2129      	movs	r1, #41	; 0x29
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f000 f959 	bl	8005254 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004fa2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004fa4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fa6:	4653      	mov	r3, sl
 8004fa8:	4651      	mov	r1, sl
 8004faa:	4a36      	ldr	r2, [pc, #216]	; (8005084 <OTM8009A_Init+0x7f8>)
 8004fac:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004fae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fb0:	f000 f950 	bl	8005254 <otm8009a_write_reg>
 8004fb4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004fb6:	4653      	mov	r3, sl
 8004fb8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004fbc:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <OTM8009A_Init+0x828>)
 8004fbe:	212c      	movs	r1, #44	; 0x2c
 8004fc0:	f000 f948 	bl	8005254 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8004fc4:	42c4      	cmn	r4, r0
}
 8004fc6:	bf14      	ite	ne
 8004fc8:	f04f 30ff 	movne.w	r0, #4294967295
 8004fcc:	4650      	moveq	r0, sl
 8004fce:	b002      	add	sp, #8
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004fd4:	f1ba 0f01 	cmp.w	sl, #1
 8004fd8:	4d30      	ldr	r5, [pc, #192]	; (800509c <OTM8009A_Init+0x810>)
 8004fda:	d1b8      	bne.n	8004f4e <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004fdc:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f10d 0207 	add.w	r2, sp, #7
 8004fe4:	2136      	movs	r1, #54	; 0x36
 8004fe6:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004fe8:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004fec:	f000 f932 	bl	8005254 <otm8009a_write_reg>
 8004ff0:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	4a30      	ldr	r2, [pc, #192]	; (80050b8 <OTM8009A_Init+0x82c>)
 8004ff6:	212a      	movs	r1, #42	; 0x2a
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f000 f92b 	bl	8005254 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004ffe:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005000:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005002:	2304      	movs	r3, #4
 8005004:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <OTM8009A_Init+0x830>)
 8005006:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005008:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800500a:	4638      	mov	r0, r7
 800500c:	f000 f922 	bl	8005254 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005010:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005014:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005016:	e79c      	b.n	8004f52 <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005018:	464b      	mov	r3, r9
 800501a:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <OTM8009A_Init+0x834>)
 800501c:	e78c      	b.n	8004f38 <OTM8009A_Init+0x6ac>
 800501e:	bf00      	nop
 8005020:	0802c41e 	.word	0x0802c41e
 8005024:	0802c30c 	.word	0x0802c30c
 8005028:	0802c41f 	.word	0x0802c41f
 800502c:	0802c318 	.word	0x0802c318
 8005030:	0802c420 	.word	0x0802c420
 8005034:	0802c328 	.word	0x0802c328
 8005038:	0802c422 	.word	0x0802c422
 800503c:	0802c338 	.word	0x0802c338
 8005040:	0802c423 	.word	0x0802c423
 8005044:	0802c344 	.word	0x0802c344
 8005048:	0802c402 	.word	0x0802c402
 800504c:	0802c350 	.word	0x0802c350
 8005050:	0802c421 	.word	0x0802c421
 8005054:	0802c360 	.word	0x0802c360
 8005058:	0802c41d 	.word	0x0802c41d
 800505c:	0802c370 	.word	0x0802c370
 8005060:	0802c380 	.word	0x0802c380
 8005064:	0802c38c 	.word	0x0802c38c
 8005068:	0802c39c 	.word	0x0802c39c
 800506c:	0802c40d 	.word	0x0802c40d
 8005070:	0802c42e 	.word	0x0802c42e
 8005074:	0802c42f 	.word	0x0802c42f
 8005078:	0802c430 	.word	0x0802c430
 800507c:	0802c431 	.word	0x0802c431
 8005080:	0802c432 	.word	0x0802c432
 8005084:	0802c401 	.word	0x0802c401
 8005088:	0802c3ac 	.word	0x0802c3ac
 800508c:	0802c3b0 	.word	0x0802c3b0
 8005090:	0802c3c0 	.word	0x0802c3c0
 8005094:	0802c424 	.word	0x0802c424
 8005098:	0802c425 	.word	0x0802c425
 800509c:	30007668 	.word	0x30007668
 80050a0:	0802c427 	.word	0x0802c427
 80050a4:	0802c428 	.word	0x0802c428
 80050a8:	0802c429 	.word	0x0802c429
 80050ac:	0802c42a 	.word	0x0802c42a
 80050b0:	0802c42b 	.word	0x0802c42b
 80050b4:	0802c42c 	.word	0x0802c42c
 80050b8:	0802c2c8 	.word	0x0802c2c8
 80050bc:	0802c2cc 	.word	0x0802c2cc
 80050c0:	0802c426 	.word	0x0802c426

080050c4 <OTM8009A_SetBrightness>:
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050c6:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80050ca:	4e0b      	ldr	r6, [pc, #44]	; (80050f8 <OTM8009A_SetBrightness+0x34>)
{
 80050cc:	b082      	sub	sp, #8
 80050ce:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050d0:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80050d4:	2300      	movs	r3, #0
 80050d6:	f10d 0207 	add.w	r2, sp, #7
 80050da:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050dc:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80050de:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80050e0:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80050e4:	f000 f8b6 	bl	8005254 <otm8009a_write_reg>
 80050e8:	b918      	cbnz	r0, 80050f2 <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <OTM8009A_SetBrightness+0x38>)
 80050ec:	609d      	str	r5, [r3, #8]
}
 80050ee:	b002      	add	sp, #8
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 80050f2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80050f6:	e7fa      	b.n	80050ee <OTM8009A_SetBrightness+0x2a>
 80050f8:	51eb851f 	.word	0x51eb851f
 80050fc:	30007668 	.word	0x30007668

08005100 <OTM8009A_DisplayOn>:
{
 8005100:	b500      	push	{lr}
 8005102:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005104:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8005106:	2129      	movs	r1, #41	; 0x29
 8005108:	3010      	adds	r0, #16
 800510a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800510e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8005112:	f000 f89f 	bl	8005254 <otm8009a_write_reg>
 8005116:	3800      	subs	r0, #0
 8005118:	bf18      	it	ne
 800511a:	2001      	movne	r0, #1
}
 800511c:	4240      	negs	r0, r0
 800511e:	b003      	add	sp, #12
 8005120:	f85d fb04 	ldr.w	pc, [sp], #4

08005124 <OTM8009A_DisplayOff>:
{
 8005124:	b500      	push	{lr}
 8005126:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005128:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 800512a:	2128      	movs	r1, #40	; 0x28
 800512c:	3010      	adds	r0, #16
 800512e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8005132:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8005136:	f000 f88d 	bl	8005254 <otm8009a_write_reg>
 800513a:	3800      	subs	r0, #0
 800513c:	bf18      	it	ne
 800513e:	2001      	movne	r0, #1
}
 8005140:	4240      	negs	r0, r0
 8005142:	b003      	add	sp, #12
 8005144:	f85d fb04 	ldr.w	pc, [sp], #4

08005148 <OTM8009A_SetOrientation>:
{
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800514a:	2360      	movs	r3, #96	; 0x60
{
 800514c:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800514e:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8005150:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005152:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8005156:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800515a:	d83e      	bhi.n	80051da <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800515c:	d020      	beq.n	80051a0 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800515e:	f100 0510 	add.w	r5, r0, #16
 8005162:	4633      	mov	r3, r6
 8005164:	f10d 0207 	add.w	r2, sp, #7
 8005168:	2136      	movs	r1, #54	; 0x36
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f872 	bl	8005254 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005170:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8005172:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005174:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <OTM8009A_SetOrientation+0x98>)
 8005176:	212a      	movs	r1, #42	; 0x2a
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f86b 	bl	8005254 <otm8009a_write_reg>
 800517e:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005180:	2304      	movs	r3, #4
 8005182:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005184:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <OTM8009A_SetOrientation+0x9c>)
 8005188:	212b      	movs	r1, #43	; 0x2b
 800518a:	f000 f863 	bl	8005254 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005190:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005192:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8005194:	3800      	subs	r0, #0
 8005196:	bf18      	it	ne
 8005198:	2001      	movne	r0, #1
 800519a:	4240      	negs	r0, r0
}
 800519c:	b003      	add	sp, #12
 800519e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80051a0:	f100 0510 	add.w	r5, r0, #16
 80051a4:	4633      	mov	r3, r6
 80051a6:	460f      	mov	r7, r1
 80051a8:	f10d 0206 	add.w	r2, sp, #6
 80051ac:	2136      	movs	r1, #54	; 0x36
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f850 	bl	8005254 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051b4:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80051b6:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <OTM8009A_SetOrientation+0x98>)
 80051ba:	212a      	movs	r1, #42	; 0x2a
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 f849 	bl	8005254 <otm8009a_write_reg>
 80051c2:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051c4:	2304      	movs	r3, #4
 80051c6:	4628      	mov	r0, r5
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <OTM8009A_SetOrientation+0x9c>)
 80051ca:	212b      	movs	r1, #43	; 0x2b
 80051cc:	f000 f842 	bl	8005254 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051d0:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051d4:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80051d6:	601f      	str	r7, [r3, #0]
 80051d8:	e7dc      	b.n	8005194 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80051da:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80051de:	e7dd      	b.n	800519c <OTM8009A_SetOrientation+0x54>
 80051e0:	0802c2c8 	.word	0x0802c2c8
 80051e4:	0802c2cc 	.word	0x0802c2cc
 80051e8:	30007668 	.word	0x30007668

080051ec <OTM8009A_ReadID>:
{ 
 80051ec:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80051ee:	3010      	adds	r0, #16
 80051f0:	21da      	movs	r1, #218	; 0xda
{ 
 80051f2:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80051f4:	2300      	movs	r3, #0
 80051f6:	f000 f825 	bl	8005244 <otm8009a_read_reg>
 80051fa:	3800      	subs	r0, #0
 80051fc:	bf18      	it	ne
 80051fe:	2001      	movne	r0, #1
}  
 8005200:	4240      	negs	r0, r0
 8005202:	bd08      	pop	{r3, pc}

08005204 <OTM8009A_DrawVLine>:
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop

0800520c <OTM8009A_GetPixel>:
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop

08005214 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005214:	b178      	cbz	r0, 8005236 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005216:	684a      	ldr	r2, [r1, #4]
 8005218:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 800521a:	2000      	movs	r0, #0
{
 800521c:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 800521e:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005222:	4906      	ldr	r1, [pc, #24]	; (800523c <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005224:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8005228:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800522c:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8005230:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005232:	611a      	str	r2, [r3, #16]
}
 8005234:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005236:	f04f 30ff 	mov.w	r0, #4294967295
}
 800523a:	4770      	bx	lr
 800523c:	0800486d 	.word	0x0800486d
 8005240:	0800487d 	.word	0x0800487d

08005244 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8005244:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005246:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800524a:	46a4      	mov	ip, r4
}
 800524c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005250:	4760      	bx	ip
 8005252:	bf00      	nop

08005254 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005254:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005256:	6804      	ldr	r4, [r0, #0]
 8005258:	6880      	ldr	r0, [r0, #8]
 800525a:	46a4      	mov	ip, r4
}
 800525c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005260:	4760      	bx	ip
 8005262:	bf00      	nop

08005264 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8005264:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8005272:	2000      	movs	r0, #0
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop

08005280 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8005280:	b160      	cbz	r0, 800529c <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8005282:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8005284:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8005286:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8005288:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800528a:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 800528c:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800528e:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8005290:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8005292:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8005294:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8005296:	e9c1 3305 	strd	r3, r3, [r1, #20]
    ret = OV5640_OK;
 800529a:	4770      	bx	lr
    ret = OV5640_ERROR;
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop

080052a4 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80052a4:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052a6:	6904      	ldr	r4, [r0, #16]
 80052a8:	8900      	ldrh	r0, [r0, #8]
 80052aa:	46a4      	mov	ip, r4
}
 80052ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052b0:	4760      	bx	ip
 80052b2:	bf00      	nop

080052b4 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80052b4:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052b6:	68c4      	ldr	r4, [r0, #12]
 80052b8:	8900      	ldrh	r0, [r0, #8]
 80052ba:	46a4      	mov	ip, r4
}
 80052bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052c0:	4760      	bx	ip
 80052c2:	bf00      	nop

080052c4 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 80052c4:	2904      	cmp	r1, #4
 80052c6:	d869      	bhi.n	800539c <OV5640_SetResolution+0xd8>
    switch (Resolution)
 80052c8:	3901      	subs	r1, #1
{
 80052ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052cc:	f100 0418 	add.w	r4, r0, #24
 80052d0:	b083      	sub	sp, #12
  if (Resolution > OV5640_R800x480)
 80052d2:	2600      	movs	r6, #0
 80052d4:	2903      	cmp	r1, #3
 80052d6:	d864      	bhi.n	80053a2 <OV5640_SetResolution+0xde>
 80052d8:	e8df f001 	tbb	[pc, r1]
 80052dc:	02192f45 	.word	0x02192f45
          if (ret != OV5640_ERROR)
 80052e0:	f10d 0507 	add.w	r5, sp, #7
 80052e4:	4f3a      	ldr	r7, [pc, #232]	; (80053d0 <OV5640_SetResolution+0x10c>)
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80052e6:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80052ea:	2301      	movs	r3, #1
 80052ec:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80052f0:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80052f2:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80052f6:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80052f8:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_WVGA[index][1];
 80052fa:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 80052fe:	f001 f879 	bl	80063f4 <ov5640_write_reg>
 8005302:	2800      	cmp	r0, #0
 8005304:	d047      	beq.n	8005396 <OV5640_SetResolution+0xd2>
    ret = OV5640_ERROR;
 8005306:	f04f 30ff 	mov.w	r0, #4294967295
}
 800530a:	b003      	add	sp, #12
 800530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (ret != OV5640_ERROR)
 800530e:	f10d 0507 	add.w	r5, sp, #7
 8005312:	4f30      	ldr	r7, [pc, #192]	; (80053d4 <OV5640_SetResolution+0x110>)
            tmp = (uint8_t)OV5640_VGA[index][1];
 8005314:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8005318:	2301      	movs	r3, #1
 800531a:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800531e:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_VGA[index][1];
 8005320:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8005324:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8005326:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_VGA[index][1];
 8005328:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800532c:	f001 f862 	bl	80063f4 <ov5640_write_reg>
 8005330:	2800      	cmp	r0, #0
 8005332:	d1e8      	bne.n	8005306 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8005334:	2e04      	cmp	r6, #4
 8005336:	d1ed      	bne.n	8005314 <OV5640_SetResolution+0x50>
 8005338:	e02a      	b.n	8005390 <OV5640_SetResolution+0xcc>
          if (ret != OV5640_ERROR)
 800533a:	f10d 0507 	add.w	r5, sp, #7
 800533e:	4f26      	ldr	r7, [pc, #152]	; (80053d8 <OV5640_SetResolution+0x114>)
            tmp = (uint8_t)OV5640_480x272[index][1];
 8005340:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8005344:	2301      	movs	r3, #1
 8005346:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800534a:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_480x272[index][1];
 800534c:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8005350:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8005352:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_480x272[index][1];
 8005354:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8005358:	f001 f84c 	bl	80063f4 <ov5640_write_reg>
 800535c:	2800      	cmp	r0, #0
 800535e:	d1d2      	bne.n	8005306 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8005360:	2e04      	cmp	r6, #4
 8005362:	d1ed      	bne.n	8005340 <OV5640_SetResolution+0x7c>
 8005364:	e014      	b.n	8005390 <OV5640_SetResolution+0xcc>
          if (ret != OV5640_ERROR)
 8005366:	f10d 0507 	add.w	r5, sp, #7
 800536a:	4f1c      	ldr	r7, [pc, #112]	; (80053dc <OV5640_SetResolution+0x118>)
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800536c:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8005370:	2301      	movs	r3, #1
 8005372:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8005376:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8005378:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800537c:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800537e:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8005380:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8005384:	f001 f836 	bl	80063f4 <ov5640_write_reg>
 8005388:	2800      	cmp	r0, #0
 800538a:	d1bc      	bne.n	8005306 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800538c:	2e04      	cmp	r6, #4
 800538e:	d1ed      	bne.n	800536c <OV5640_SetResolution+0xa8>
  if (Resolution > OV5640_R800x480)
 8005390:	2000      	movs	r0, #0
}
 8005392:	b003      	add	sp, #12
 8005394:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8005396:	2e04      	cmp	r6, #4
 8005398:	d1a5      	bne.n	80052e6 <OV5640_SetResolution+0x22>
 800539a:	e7f9      	b.n	8005390 <OV5640_SetResolution+0xcc>
    ret = OV5640_ERROR;
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80053a0:	4770      	bx	lr
          if (ret != OV5640_ERROR)
 80053a2:	4f0f      	ldr	r7, [pc, #60]	; (80053e0 <OV5640_SetResolution+0x11c>)
 80053a4:	f10d 0507 	add.w	r5, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80053a8:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80053ac:	2301      	movs	r3, #1
 80053ae:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80053b2:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80053b4:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80053b8:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80053ba:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80053bc:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80053c0:	f001 f818 	bl	80063f4 <ov5640_write_reg>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d19e      	bne.n	8005306 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80053c8:	2e04      	cmp	r6, #4
 80053ca:	d1ed      	bne.n	80053a8 <OV5640_SetResolution+0xe4>
 80053cc:	e7e0      	b.n	8005390 <OV5640_SetResolution+0xcc>
 80053ce:	bf00      	nop
 80053d0:	0802c914 	.word	0x0802c914
 80053d4:	0802c904 	.word	0x0802c904
 80053d8:	0802c450 	.word	0x0802c450
 80053dc:	0802c8f4 	.word	0x0802c8f4
 80053e0:	0802c8e4 	.word	0x0802c8e4

080053e4 <OV5640_SetLightMode>:
{
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80053e6:	f100 0618 	add.w	r6, r0, #24
{
 80053ea:	b083      	sub	sp, #12
  tmp = 0x00;
 80053ec:	2400      	movs	r4, #0
{
 80053ee:	460d      	mov	r5, r1
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80053f0:	f10d 0207 	add.w	r2, sp, #7
 80053f4:	2301      	movs	r3, #1
 80053f6:	f243 4106 	movw	r1, #13318	; 0x3406
 80053fa:	4630      	mov	r0, r6
  tmp = 0x00;
 80053fc:	f88d 4007 	strb.w	r4, [sp, #7]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8005400:	f000 fff8 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005404:	4604      	mov	r4, r0
 8005406:	b110      	cbz	r0, 800540e <OV5640_SetLightMode+0x2a>
}
 8005408:	4620      	mov	r0, r4
 800540a:	b003      	add	sp, #12
 800540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x46;
 800540e:	2446      	movs	r4, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8005410:	2301      	movs	r3, #1
 8005412:	f10d 0207 	add.w	r2, sp, #7
 8005416:	f245 1190 	movw	r1, #20880	; 0x5190
 800541a:	4630      	mov	r0, r6
    tmp = 0x46;
 800541c:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8005420:	f000 ffe8 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005424:	4604      	mov	r4, r0
 8005426:	2800      	cmp	r0, #0
 8005428:	d1ee      	bne.n	8005408 <OV5640_SetLightMode+0x24>
    tmp = 0xF8;
 800542a:	24f8      	movs	r4, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800542c:	2301      	movs	r3, #1
 800542e:	f10d 0207 	add.w	r2, sp, #7
 8005432:	f245 1191 	movw	r1, #20881	; 0x5191
 8005436:	4630      	mov	r0, r6
    tmp = 0xF8;
 8005438:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800543c:	f000 ffda 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005440:	4604      	mov	r4, r0
 8005442:	2800      	cmp	r0, #0
 8005444:	d1e0      	bne.n	8005408 <OV5640_SetLightMode+0x24>
    tmp = 0x04;
 8005446:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8005448:	2301      	movs	r3, #1
 800544a:	f10d 0207 	add.w	r2, sp, #7
 800544e:	f245 1192 	movw	r1, #20882	; 0x5192
 8005452:	4630      	mov	r0, r6
    tmp = 0x04;
 8005454:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8005458:	f000 ffcc 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800545c:	4604      	mov	r4, r0
 800545e:	2800      	cmp	r0, #0
 8005460:	d1d2      	bne.n	8005408 <OV5640_SetLightMode+0x24>
    switch (LightMode)
 8005462:	1e69      	subs	r1, r5, #1
  if (ret == OV5640_OK)
 8005464:	2500      	movs	r5, #0
 8005466:	2907      	cmp	r1, #7
 8005468:	f200 8082 	bhi.w	8005570 <OV5640_SetLightMode+0x18c>
 800546c:	e8df f001 	tbb	[pc, r1]
 8005470:	27804563 	.word	0x27804563
 8005474:	04808080 	.word	0x04808080
 8005478:	4f57      	ldr	r7, [pc, #348]	; (80055d8 <OV5640_SetLightMode+0x1f4>)
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800547a:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800547e:	2301      	movs	r3, #1
 8005480:	f10d 0207 	add.w	r2, sp, #7
 8005484:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8005488:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800548c:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800548e:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8005492:	f000 ffaf 	bl	80063f4 <ov5640_write_reg>
 8005496:	2800      	cmp	r0, #0
 8005498:	f000 8094 	beq.w	80055c4 <OV5640_SetLightMode+0x1e0>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800549c:	2d06      	cmp	r5, #6
 800549e:	d009      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054a0:	2d05      	cmp	r5, #5
 80054a2:	f105 0302 	add.w	r3, r5, #2
 80054a6:	d005      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	f103 0302 	add.w	r3, r3, #2
 80054ae:	d001      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d1f9      	bne.n	80054a8 <OV5640_SetLightMode+0xc4>
  if (ret == OV5640_OK)
 80054b4:	f04f 34ff 	mov.w	r4, #4294967295
}
 80054b8:	4620      	mov	r0, r4
 80054ba:	b003      	add	sp, #12
 80054bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054be:	4f47      	ldr	r7, [pc, #284]	; (80055dc <OV5640_SetLightMode+0x1f8>)
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80054c0:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80054c4:	2301      	movs	r3, #1
 80054c6:	f10d 0207 	add.w	r2, sp, #7
 80054ca:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80054ce:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80054d2:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80054d4:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80054d8:	f000 ff8c 	bl	80063f4 <ov5640_write_reg>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d06c      	beq.n	80055ba <OV5640_SetLightMode+0x1d6>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80054e0:	2d06      	cmp	r5, #6
 80054e2:	d0e7      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054e4:	2d05      	cmp	r5, #5
 80054e6:	f105 0302 	add.w	r3, r5, #2
 80054ea:	d0e3      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054ec:	2b06      	cmp	r3, #6
 80054ee:	f103 0302 	add.w	r3, r3, #2
 80054f2:	d0df      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054f4:	2b07      	cmp	r3, #7
 80054f6:	d1f9      	bne.n	80054ec <OV5640_SetLightMode+0x108>
 80054f8:	e7dc      	b.n	80054b4 <OV5640_SetLightMode+0xd0>
 80054fa:	4f39      	ldr	r7, [pc, #228]	; (80055e0 <OV5640_SetLightMode+0x1fc>)
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80054fc:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8005500:	2301      	movs	r3, #1
 8005502:	f10d 0207 	add.w	r2, sp, #7
 8005506:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800550a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800550e:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8005510:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8005514:	f000 ff6e 	bl	80063f4 <ov5640_write_reg>
 8005518:	2800      	cmp	r0, #0
 800551a:	d058      	beq.n	80055ce <OV5640_SetLightMode+0x1ea>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800551c:	2d06      	cmp	r5, #6
 800551e:	d0c9      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005520:	2d05      	cmp	r5, #5
 8005522:	f105 0302 	add.w	r3, r5, #2
 8005526:	d0c5      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005528:	2b06      	cmp	r3, #6
 800552a:	f103 0302 	add.w	r3, r3, #2
 800552e:	d0c1      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005530:	2b07      	cmp	r3, #7
 8005532:	d1f9      	bne.n	8005528 <OV5640_SetLightMode+0x144>
 8005534:	e7be      	b.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005536:	4f2b      	ldr	r7, [pc, #172]	; (80055e4 <OV5640_SetLightMode+0x200>)
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8005538:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800553c:	2301      	movs	r3, #1
 800553e:	f10d 0207 	add.w	r2, sp, #7
 8005542:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8005546:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800554a:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800554c:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8005550:	f000 ff50 	bl	80063f4 <ov5640_write_reg>
 8005554:	b368      	cbz	r0, 80055b2 <OV5640_SetLightMode+0x1ce>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8005556:	2d06      	cmp	r5, #6
 8005558:	d0ac      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 800555a:	2d05      	cmp	r5, #5
 800555c:	f105 0302 	add.w	r3, r5, #2
 8005560:	d0a8      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005562:	2b06      	cmp	r3, #6
 8005564:	f103 0302 	add.w	r3, r3, #2
 8005568:	d0a4      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 800556a:	2b07      	cmp	r3, #7
 800556c:	d1f9      	bne.n	8005562 <OV5640_SetLightMode+0x17e>
 800556e:	e7a1      	b.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005570:	4f1d      	ldr	r7, [pc, #116]	; (80055e8 <OV5640_SetLightMode+0x204>)
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8005572:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005576:	2301      	movs	r3, #1
 8005578:	f10d 0207 	add.w	r2, sp, #7
 800557c:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8005580:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8005584:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8005586:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800558a:	f000 ff33 	bl	80063f4 <ov5640_write_reg>
 800558e:	b160      	cbz	r0, 80055aa <OV5640_SetLightMode+0x1c6>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8005590:	2d06      	cmp	r5, #6
 8005592:	d08f      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 8005594:	2d05      	cmp	r5, #5
 8005596:	f105 0302 	add.w	r3, r5, #2
 800559a:	d08b      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 800559c:	2b06      	cmp	r3, #6
 800559e:	f103 0302 	add.w	r3, r3, #2
 80055a2:	d087      	beq.n	80054b4 <OV5640_SetLightMode+0xd0>
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d1f9      	bne.n	800559c <OV5640_SetLightMode+0x1b8>
 80055a8:	e784      	b.n	80054b4 <OV5640_SetLightMode+0xd0>
 80055aa:	3501      	adds	r5, #1
 80055ac:	2d07      	cmp	r5, #7
 80055ae:	d1e0      	bne.n	8005572 <OV5640_SetLightMode+0x18e>
 80055b0:	e72a      	b.n	8005408 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80055b2:	3501      	adds	r5, #1
 80055b4:	2d07      	cmp	r5, #7
 80055b6:	d1bf      	bne.n	8005538 <OV5640_SetLightMode+0x154>
 80055b8:	e726      	b.n	8005408 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80055ba:	3501      	adds	r5, #1
 80055bc:	2d07      	cmp	r5, #7
 80055be:	f47f af7f 	bne.w	80054c0 <OV5640_SetLightMode+0xdc>
 80055c2:	e721      	b.n	8005408 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80055c4:	3501      	adds	r5, #1
 80055c6:	2d07      	cmp	r5, #7
 80055c8:	f47f af57 	bne.w	800547a <OV5640_SetLightMode+0x96>
 80055cc:	e71c      	b.n	8005408 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80055ce:	3501      	adds	r5, #1
 80055d0:	2d07      	cmp	r5, #7
 80055d2:	d193      	bne.n	80054fc <OV5640_SetLightMode+0x118>
 80055d4:	e718      	b.n	8005408 <OV5640_SetLightMode+0x24>
 80055d6:	bf00      	nop
 80055d8:	0802c874 	.word	0x0802c874
 80055dc:	0802c890 	.word	0x0802c890
 80055e0:	0802c8ac 	.word	0x0802c8ac
 80055e4:	0802c8c8 	.word	0x0802c8c8
 80055e8:	0802c858 	.word	0x0802c858

080055ec <OV5640_SetColorEffect>:
  switch (Effect)
 80055ec:	3901      	subs	r1, #1
{
 80055ee:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80055f0:	f100 0418 	add.w	r4, r0, #24
{
 80055f4:	b083      	sub	sp, #12
 80055f6:	291f      	cmp	r1, #31
 80055f8:	d821      	bhi.n	800563e <OV5640_SetColorEffect+0x52>
 80055fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80055fe:	0033      	.short	0x0033
 8005600:	00200062 	.word	0x00200062
 8005604:	00200091 	.word	0x00200091
 8005608:	00200020 	.word	0x00200020
 800560c:	002000ad 	.word	0x002000ad
 8005610:	00200020 	.word	0x00200020
 8005614:	00200020 	.word	0x00200020
 8005618:	00200020 	.word	0x00200020
 800561c:	002000d6 	.word	0x002000d6
 8005620:	00200020 	.word	0x00200020
 8005624:	00200020 	.word	0x00200020
 8005628:	00200020 	.word	0x00200020
 800562c:	00200020 	.word	0x00200020
 8005630:	00200020 	.word	0x00200020
 8005634:	00200020 	.word	0x00200020
 8005638:	00200020 	.word	0x00200020
 800563c:	0108      	.short	0x0108
      tmp = 0x7F;
 800563e:	257f      	movs	r5, #127	; 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005640:	2301      	movs	r3, #1
 8005642:	4620      	mov	r0, r4
 8005644:	f10d 0207 	add.w	r2, sp, #7
 8005648:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0x7F;
 800564c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005650:	f000 fed0 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005654:	4605      	mov	r5, r0
 8005656:	2800      	cmp	r0, #0
 8005658:	f000 80f8 	beq.w	800584c <OV5640_SetColorEffect+0x260>
        ret = OV5640_ERROR;
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005660:	b003      	add	sp, #12
 8005662:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8005664:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005666:	2301      	movs	r3, #1
 8005668:	4620      	mov	r0, r4
 800566a:	f10d 0207 	add.w	r2, sp, #7
 800566e:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8005672:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005676:	f000 febd 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800567a:	2800      	cmp	r0, #0
 800567c:	d1ee      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800567e:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005680:	2301      	movs	r3, #1
 8005682:	f10d 0207 	add.w	r2, sp, #7
 8005686:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800568a:	4620      	mov	r0, r4
        tmp = 0x18;
 800568c:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005690:	f000 feb0 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005694:	2800      	cmp	r0, #0
 8005696:	d1e1      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8005698:	25a0      	movs	r5, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800569a:	2301      	movs	r3, #1
 800569c:	f10d 0207 	add.w	r2, sp, #7
 80056a0:	f245 5183 	movw	r1, #21891	; 0x5583
 80056a4:	4620      	mov	r0, r4
        tmp = 0xA0;
 80056a6:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80056aa:	f000 fea3 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d1d4      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80056b2:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80056b4:	f10d 0207 	add.w	r2, sp, #7
 80056b8:	4620      	mov	r0, r4
 80056ba:	2301      	movs	r3, #1
 80056bc:	f245 5184 	movw	r1, #21892	; 0x5584
 80056c0:	e0ba      	b.n	8005838 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 80056c2:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80056c4:	2301      	movs	r3, #1
 80056c6:	4620      	mov	r0, r4
 80056c8:	f10d 0207 	add.w	r2, sp, #7
 80056cc:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 80056d0:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80056d4:	f000 fe8e 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80056d8:	2800      	cmp	r0, #0
 80056da:	d1bf      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80056dc:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80056de:	2301      	movs	r3, #1
 80056e0:	f10d 0207 	add.w	r2, sp, #7
 80056e4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80056e8:	4620      	mov	r0, r4
        tmp = 0x18;
 80056ea:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80056ee:	f000 fe81 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d1b2      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 80056f6:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80056f8:	2301      	movs	r3, #1
 80056fa:	f10d 0207 	add.w	r2, sp, #7
 80056fe:	f245 5183 	movw	r1, #21891	; 0x5583
 8005702:	4620      	mov	r0, r4
        tmp = 0x80;
 8005704:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005708:	f000 fe74 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800570c:	2800      	cmp	r0, #0
 800570e:	d1a5      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 8005710:	25c0      	movs	r5, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8005712:	f10d 0207 	add.w	r2, sp, #7
 8005716:	4620      	mov	r0, r4
 8005718:	2301      	movs	r3, #1
 800571a:	f245 5184 	movw	r1, #21892	; 0x5584
 800571e:	e08b      	b.n	8005838 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 8005720:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005722:	2301      	movs	r3, #1
 8005724:	4620      	mov	r0, r4
 8005726:	f10d 0207 	add.w	r2, sp, #7
 800572a:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 800572e:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005732:	f000 fe5f 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005736:	2800      	cmp	r0, #0
 8005738:	d190      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800573a:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800573c:	2301      	movs	r3, #1
 800573e:	f10d 0207 	add.w	r2, sp, #7
 8005742:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8005746:	4620      	mov	r0, r4
        tmp = 0x18;
 8005748:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800574c:	f000 fe52 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005750:	2800      	cmp	r0, #0
 8005752:	d183      	bne.n	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8005754:	2560      	movs	r5, #96	; 0x60
 8005756:	e01c      	b.n	8005792 <OV5640_SetColorEffect+0x1a6>
      tmp = 0xFF;
 8005758:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800575a:	2301      	movs	r3, #1
 800575c:	4620      	mov	r0, r4
 800575e:	f10d 0207 	add.w	r2, sp, #7
 8005762:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8005766:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800576a:	f000 fe43 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800576e:	2800      	cmp	r0, #0
 8005770:	f47f af74 	bne.w	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8005774:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005776:	2301      	movs	r3, #1
 8005778:	f10d 0207 	add.w	r2, sp, #7
 800577c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8005780:	4620      	mov	r0, r4
        tmp = 0x18;
 8005782:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005786:	f000 fe35 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800578a:	2800      	cmp	r0, #0
 800578c:	f47f af66 	bne.w	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8005790:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005792:	2301      	movs	r3, #1
 8005794:	f10d 0207 	add.w	r2, sp, #7
 8005798:	f245 5183 	movw	r1, #21891	; 0x5583
 800579c:	4620      	mov	r0, r4
        tmp = 0x80;
 800579e:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80057a2:	f000 fe27 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057a6:	b358      	cbz	r0, 8005800 <OV5640_SetColorEffect+0x214>
 80057a8:	e758      	b.n	800565c <OV5640_SetColorEffect+0x70>
      tmp = 0xFF;
 80057aa:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80057ac:	2301      	movs	r3, #1
 80057ae:	4620      	mov	r0, r4
 80057b0:	f10d 0207 	add.w	r2, sp, #7
 80057b4:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 80057b8:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80057bc:	f000 fe1a 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f47f af4b 	bne.w	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80057c6:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80057c8:	2301      	movs	r3, #1
 80057ca:	f10d 0207 	add.w	r2, sp, #7
 80057ce:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80057d2:	4620      	mov	r0, r4
        tmp = 0x18;
 80057d4:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80057d8:	f000 fe0c 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057dc:	2800      	cmp	r0, #0
 80057de:	f47f af3d 	bne.w	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80057e2:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80057e4:	2301      	movs	r3, #1
 80057e6:	f10d 0207 	add.w	r2, sp, #7
 80057ea:	f245 5183 	movw	r1, #21891	; 0x5583
 80057ee:	4620      	mov	r0, r4
        tmp = 0x40;
 80057f0:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80057f4:	f000 fdfe 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80057f8:	2800      	cmp	r0, #0
 80057fa:	f47f af2f 	bne.w	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 80057fe:	25a0      	movs	r5, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8005800:	f10d 0207 	add.w	r2, sp, #7
 8005804:	4620      	mov	r0, r4
 8005806:	2301      	movs	r3, #1
 8005808:	f245 5184 	movw	r1, #21892	; 0x5584
 800580c:	e014      	b.n	8005838 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 800580e:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005810:	2301      	movs	r3, #1
 8005812:	f10d 0207 	add.w	r2, sp, #7
 8005816:	4620      	mov	r0, r4
 8005818:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 800581c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005820:	f000 fde8 	bl	80063f4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8005824:	2800      	cmp	r0, #0
 8005826:	f47f af19 	bne.w	800565c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 800582a:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800582c:	4620      	mov	r0, r4
 800582e:	2301      	movs	r3, #1
 8005830:	f10d 0207 	add.w	r2, sp, #7
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005834:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
        tmp = 0x00;
 8005838:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800583c:	f000 fdda 	bl	80063f4 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8005840:	3800      	subs	r0, #0
 8005842:	bf18      	it	ne
 8005844:	2001      	movne	r0, #1
 8005846:	4240      	negs	r0, r0
}
 8005848:	b003      	add	sp, #12
 800584a:	bd30      	pop	{r4, r5, pc}
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800584c:	f10d 0207 	add.w	r2, sp, #7
 8005850:	4620      	mov	r0, r4
 8005852:	2301      	movs	r3, #1
 8005854:	e7ee      	b.n	8005834 <OV5640_SetColorEffect+0x248>
 8005856:	bf00      	nop

08005858 <OV5640_SetBrightness>:
{
 8005858:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800585a:	4b2c      	ldr	r3, [pc, #176]	; (800590c <OV5640_SetBrightness+0xb4>)
{
 800585c:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800585e:	f100 0518 	add.w	r5, r0, #24
{
 8005862:	460e      	mov	r6, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8005864:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8005866:	27ff      	movs	r7, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8005868:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800586c:	2301      	movs	r3, #1
  tmp = 0xFF;
 800586e:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8005872:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005874:	4628      	mov	r0, r5
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8005876:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005878:	f245 0101 	movw	r1, #20481	; 0x5001
 800587c:	f10d 0203 	add.w	r2, sp, #3
 8005880:	f000 fdb8 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005884:	b108      	cbz	r0, 800588a <OV5640_SetBrightness+0x32>
}
 8005886:	b005      	add	sp, #20
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = brightness_level[Level + 4];
 800588a:	a804      	add	r0, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800588c:	2301      	movs	r3, #1
 800588e:	f10d 0203 	add.w	r2, sp, #3
 8005892:	f245 5187 	movw	r1, #21895	; 0x5587
    tmp = brightness_level[Level + 4];
 8005896:	4430      	add	r0, r6
 8005898:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800589c:	4628      	mov	r0, r5
    tmp = brightness_level[Level + 4];
 800589e:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80058a2:	f000 fda7 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d1ed      	bne.n	8005886 <OV5640_SetBrightness+0x2e>
    tmp = 0x04;
 80058aa:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80058ac:	2301      	movs	r3, #1
 80058ae:	f10d 0203 	add.w	r2, sp, #3
 80058b2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80058b6:	4628      	mov	r0, r5
    tmp = 0x04;
 80058b8:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80058bc:	f000 fd9a 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d1e0      	bne.n	8005886 <OV5640_SetBrightness+0x2e>
    if (Level < 0)
 80058c4:	2e00      	cmp	r6, #0
 80058c6:	db10      	blt.n	80058ea <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 80058c8:	2409      	movs	r4, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80058ca:	f10d 0203 	add.w	r2, sp, #3
 80058ce:	4628      	mov	r0, r5
 80058d0:	2301      	movs	r3, #1
 80058d2:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x09;
 80058d6:	f88d 4003 	strb.w	r4, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80058da:	f000 fd8b 	bl	80063f4 <ov5640_write_reg>
 80058de:	3800      	subs	r0, #0
 80058e0:	bf18      	it	ne
 80058e2:	2001      	movne	r0, #1
 80058e4:	4240      	negs	r0, r0
}
 80058e6:	b005      	add	sp, #20
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp = 0x01;
 80058ea:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80058ec:	f10d 0203 	add.w	r2, sp, #3
 80058f0:	4628      	mov	r0, r5
 80058f2:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x01;
 80058f6:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80058fa:	f000 fd7b 	bl	80063f4 <ov5640_write_reg>
 80058fe:	3800      	subs	r0, #0
 8005900:	bf18      	it	ne
 8005902:	2001      	movne	r0, #1
 8005904:	4240      	negs	r0, r0
}
 8005906:	b005      	add	sp, #20
 8005908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800590a:	bf00      	nop
 800590c:	08025720 	.word	0x08025720

08005910 <OV5640_SetSaturation>:
{
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8005912:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <OV5640_SetSaturation+0xa8>)
{
 8005914:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005916:	f100 0518 	add.w	r5, r0, #24
{
 800591a:	460e      	mov	r6, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800591c:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 800591e:	27ff      	movs	r7, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8005920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005924:	2301      	movs	r3, #1
  tmp = 0xFF;
 8005926:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800592a:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800592c:	4628      	mov	r0, r5
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800592e:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005930:	f245 0101 	movw	r1, #20481	; 0x5001
 8005934:	f10d 0203 	add.w	r2, sp, #3
 8005938:	f000 fd5c 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800593c:	b118      	cbz	r0, 8005946 <OV5640_SetSaturation+0x36>
    ret = OV5640_ERROR;
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005942:	b005      	add	sp, #20
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = saturation_level[Level + 4];
 8005946:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005948:	f10d 0203 	add.w	r2, sp, #3
 800594c:	f245 5183 	movw	r1, #21891	; 0x5583
 8005950:	4628      	mov	r0, r5
    tmp = saturation_level[Level + 4];
 8005952:	441e      	add	r6, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8005954:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8005956:	f816 4c08 	ldrb.w	r4, [r6, #-8]
 800595a:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800595e:	f000 fd49 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005962:	2800      	cmp	r0, #0
 8005964:	d1eb      	bne.n	800593e <OV5640_SetSaturation+0x2e>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8005966:	2301      	movs	r3, #1
 8005968:	f10d 0203 	add.w	r2, sp, #3
 800596c:	f245 5184 	movw	r1, #21892	; 0x5584
 8005970:	4628      	mov	r0, r5
 8005972:	f000 fd3f 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005976:	2800      	cmp	r0, #0
 8005978:	d1e1      	bne.n	800593e <OV5640_SetSaturation+0x2e>
    tmp = 0x02;
 800597a:	2402      	movs	r4, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800597c:	2301      	movs	r3, #1
 800597e:	f10d 0203 	add.w	r2, sp, #3
 8005982:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8005986:	4628      	mov	r0, r5
    tmp = 0x02;
 8005988:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800598c:	f000 fd32 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005990:	2800      	cmp	r0, #0
 8005992:	d1d4      	bne.n	800593e <OV5640_SetSaturation+0x2e>
    tmp = 0x41;
 8005994:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005996:	f10d 0203 	add.w	r2, sp, #3
 800599a:	4628      	mov	r0, r5
 800599c:	2301      	movs	r3, #1
 800599e:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 80059a2:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80059a6:	f000 fd25 	bl	80063f4 <ov5640_write_reg>
  if (ret != OV5640_OK)
 80059aa:	3800      	subs	r0, #0
 80059ac:	bf18      	it	ne
 80059ae:	2001      	movne	r0, #1
 80059b0:	4240      	negs	r0, r0
}
 80059b2:	b005      	add	sp, #20
 80059b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	0802572c 	.word	0x0802572c

080059bc <OV5640_SetContrast>:
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80059be:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <OV5640_SetContrast+0xa8>)
{
 80059c0:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059c2:	f100 0518 	add.w	r5, r0, #24
{
 80059c6:	460e      	mov	r6, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80059c8:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 80059ca:	27ff      	movs	r7, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80059cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059d0:	2301      	movs	r3, #1
  tmp = 0xFF;
 80059d2:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80059d6:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059d8:	4628      	mov	r0, r5
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80059da:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80059dc:	f245 0101 	movw	r1, #20481	; 0x5001
 80059e0:	f10d 0203 	add.w	r2, sp, #3
 80059e4:	f000 fd06 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80059e8:	b118      	cbz	r0, 80059f2 <OV5640_SetContrast+0x36>
    ret = OV5640_ERROR;
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80059ee:	b005      	add	sp, #20
 80059f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x04;
 80059f2:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80059f4:	2301      	movs	r3, #1
 80059f6:	f10d 0203 	add.w	r2, sp, #3
 80059fa:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80059fe:	4628      	mov	r0, r5
    tmp = 0x04;
 8005a00:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005a04:	f000 fcf6 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1ee      	bne.n	80059ea <OV5640_SetContrast+0x2e>
    tmp = contrast_level[Level + 4];
 8005a0c:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8005a0e:	f10d 0203 	add.w	r2, sp, #3
 8005a12:	f245 5186 	movw	r1, #21894	; 0x5586
 8005a16:	4628      	mov	r0, r5
    tmp = contrast_level[Level + 4];
 8005a18:	441e      	add	r6, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8005a1a:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8005a1c:	f816 4c08 	ldrb.w	r4, [r6, #-8]
 8005a20:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8005a24:	f000 fce6 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d1de      	bne.n	80059ea <OV5640_SetContrast+0x2e>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f10d 0203 	add.w	r2, sp, #3
 8005a32:	f245 5185 	movw	r1, #21893	; 0x5585
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 fcdc 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d1d4      	bne.n	80059ea <OV5640_SetContrast+0x2e>
    tmp = 0x41;
 8005a40:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005a42:	f10d 0203 	add.w	r2, sp, #3
 8005a46:	4628      	mov	r0, r5
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8005a4e:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005a52:	f000 fccf 	bl	80063f4 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8005a56:	3800      	subs	r0, #0
 8005a58:	bf18      	it	ne
 8005a5a:	2001      	movne	r0, #1
 8005a5c:	4240      	negs	r0, r0
}
 8005a5e:	b005      	add	sp, #20
 8005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a62:	bf00      	nop
 8005a64:	0802c434 	.word	0x0802c434

08005a68 <OV5640_SetHueDegree>:
{
 8005a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005a6c:	4b33      	ldr	r3, [pc, #204]	; (8005b3c <OV5640_SetHueDegree+0xd4>)
{
 8005a6e:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005a70:	f100 0418 	add.w	r4, r0, #24
{
 8005a74:	4688      	mov	r8, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005a76:	f103 060c 	add.w	r6, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005a7a:	af01      	add	r7, sp, #4
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005a7c:	ad04      	add	r5, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005a7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8005a82:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <OV5640_SetHueDegree+0xd8>)
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8005a84:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005a88:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8005a8c:	ae0a      	add	r6, sp, #40	; 0x28
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8005a8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8005a92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8005a96:	25ff      	movs	r5, #255	; 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005a98:	2301      	movs	r3, #1
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8005a9a:	e906 0007 	stmdb	r6, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f10d 0203 	add.w	r2, sp, #3
 8005aa4:	f245 0101 	movw	r1, #20481	; 0x5001
  tmp = 0xFF;
 8005aa8:	f88d 5003 	strb.w	r5, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8005aac:	f000 fca2 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005ab0:	b120      	cbz	r0, 8005abc <OV5640_SetHueDegree+0x54>
    ret = OV5640_ERROR;
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005ab6:	b00a      	add	sp, #40	; 0x28
 8005ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x01;
 8005abc:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005abe:	f10d 0203 	add.w	r2, sp, #3
 8005ac2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4633      	mov	r3, r6
    tmp = 0x01;
 8005aca:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8005ace:	f000 fc91 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d1ed      	bne.n	8005ab2 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8005ad6:	a80a      	add	r0, sp, #40	; 0x28
 8005ad8:	f108 0506 	add.w	r5, r8, #6
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8005adc:	4633      	mov	r3, r6
 8005ade:	f10d 0203 	add.w	r2, sp, #3
    tmp = hue_degree_ctrl1[Degree + 6];
 8005ae2:	4405      	add	r5, r0
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8005ae4:	f245 5181 	movw	r1, #21889	; 0x5581
 8005ae8:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 8005aea:	f815 7c24 	ldrb.w	r7, [r5, #-36]
 8005aee:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8005af2:	f000 fc7f 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1db      	bne.n	8005ab2 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 8005afa:	f815 7c18 	ldrb.w	r7, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8005afe:	4633      	mov	r3, r6
 8005b00:	f10d 0203 	add.w	r2, sp, #3
 8005b04:	f245 5182 	movw	r1, #21890	; 0x5582
 8005b08:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 8005b0a:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8005b0e:	f000 fc71 	bl	80063f4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1cd      	bne.n	8005ab2 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8005b16:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005b1a:	4633      	mov	r3, r6
 8005b1c:	f10d 0203 	add.w	r2, sp, #3
 8005b20:	4620      	mov	r0, r4
 8005b22:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = hue_degree_ctrl8[Degree + 6];
 8005b26:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8005b2a:	f000 fc63 	bl	80063f4 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8005b2e:	3800      	subs	r0, #0
 8005b30:	bf18      	it	ne
 8005b32:	2001      	movne	r0, #1
 8005b34:	4240      	negs	r0, r0
}
 8005b36:	b00a      	add	sp, #40	; 0x28
 8005b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b3c:	08025738 	.word	0x08025738
 8005b40:	0802c440 	.word	0x0802c440

08005b44 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8005b44:	2902      	cmp	r1, #2
{
 8005b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8005b4e:	d902      	bls.n	8005b56 <OV5640_SetPixelFormat+0x12>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8005b50:	1fcb      	subs	r3, r1, #7
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d82f      	bhi.n	8005bb6 <OV5640_SetPixelFormat+0x72>
    switch (PixelFormat)
 8005b56:	3901      	subs	r1, #1
 8005b58:	f104 0718 	add.w	r7, r4, #24
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005b5c:	f10d 0507 	add.w	r5, sp, #7
 8005b60:	2907      	cmp	r1, #7
 8005b62:	f200 8089 	bhi.w	8005c78 <OV5640_SetPixelFormat+0x134>
 8005b66:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005b6a:	0008      	.short	0x0008
 8005b6c:	008700b1 	.word	0x008700b1
 8005b70:	00870087 	.word	0x00870087
 8005b74:	00da0087 	.word	0x00da0087
 8005b78:	002c      	.short	0x002c
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005b7a:	2623      	movs	r6, #35	; 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4638      	mov	r0, r7
 8005b80:	462a      	mov	r2, r5
 8005b82:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005b86:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005b8a:	f000 fc33 	bl	80063f4 <ov5640_write_reg>
 8005b8e:	b990      	cbnz	r0, 8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005b90:	6963      	ldr	r3, [r4, #20]
 8005b92:	4798      	blx	r3
 8005b94:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005b96:	6963      	ldr	r3, [r4, #20]
 8005b98:	4798      	blx	r3
 8005b9a:	4286      	cmp	r6, r0
 8005b9c:	d0fb      	beq.n	8005b96 <OV5640_SetPixelFormat+0x52>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005b9e:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8005ba8:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8005bac:	f000 fc22 	bl	80063f4 <ov5640_write_reg>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f000 80fa 	beq.w	8005daa <OV5640_SetPixelFormat+0x266>
    ret = OV5640_ERROR;
 8005bb6:	f04f 36ff 	mov.w	r6, #4294967295
}
 8005bba:	4630      	mov	r0, r6
 8005bbc:	b002      	add	sp, #8
 8005bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005bc2:	2630      	movs	r6, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	462a      	mov	r2, r5
 8005bca:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005bce:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005bd2:	f000 fc0f 	bl	80063f4 <ov5640_write_reg>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f000 80ca 	beq.w	8005d70 <OV5640_SetPixelFormat+0x22c>
              ret = OV5640_ERROR;
 8005bdc:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005be0:	2301      	movs	r3, #1
 8005be2:	462a      	mov	r2, r5
 8005be4:	f643 0121 	movw	r1, #14369	; 0x3821
 8005be8:	4638      	mov	r0, r7
 8005bea:	f000 fbfb 	bl	80063e4 <ov5640_read_reg>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d1e1      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
        tmp |= (1 << 5);
 8005bf2:	f89d 4007 	ldrb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	462a      	mov	r2, r5
 8005bfa:	f643 0121 	movw	r1, #14369	; 0x3821
        tmp |= (1 << 5);
 8005bfe:	f044 0420 	orr.w	r4, r4, #32
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005c02:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 8005c04:	f88d 4007 	strb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8005c08:	f000 fbf4 	bl	80063f4 <ov5640_write_reg>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d1d2      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c10:	2301      	movs	r3, #1
 8005c12:	462a      	mov	r2, r5
 8005c14:	f243 0102 	movw	r1, #12290	; 0x3002
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f000 fbe3 	bl	80063e4 <ov5640_read_reg>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d1c9      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8005c22:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c26:	2301      	movs	r3, #1
 8005c28:	462a      	mov	r2, r5
 8005c2a:	f243 0102 	movw	r1, #12290	; 0x3002
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8005c2e:	f024 041c 	bic.w	r4, r4, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c32:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8005c34:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8005c38:	f000 fbdc 	bl	80063f4 <ov5640_write_reg>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1ba      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c40:	2301      	movs	r3, #1
 8005c42:	462a      	mov	r2, r5
 8005c44:	f243 0106 	movw	r1, #12294	; 0x3006
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f000 fbcb 	bl	80063e4 <ov5640_read_reg>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d1b1      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
                tmp |= ((1 << 5) | (1 << 3));
 8005c52:	f89d 4007 	ldrb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c56:	462a      	mov	r2, r5
 8005c58:	4638      	mov	r0, r7
 8005c5a:	2301      	movs	r3, #1
                tmp |= ((1 << 5) | (1 << 3));
 8005c5c:	f044 0428 	orr.w	r4, r4, #40	; 0x28
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c60:	f243 0106 	movw	r1, #12294	; 0x3006
                tmp |= ((1 << 5) | (1 << 3));
 8005c64:	f88d 4007 	strb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8005c68:	f000 fbc4 	bl	80063f4 <ov5640_write_reg>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d1a2      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
}
 8005c70:	4630      	mov	r0, r6
 8005c72:	b002      	add	sp, #8
 8005c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005c78:	266f      	movs	r6, #111	; 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	462a      	mov	r2, r5
 8005c80:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005c84:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005c88:	f000 fbb4 	bl	80063f4 <ov5640_write_reg>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d192      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005c90:	6963      	ldr	r3, [r4, #20]
 8005c92:	4798      	blx	r3
 8005c94:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005c96:	6963      	ldr	r3, [r4, #20]
 8005c98:	4798      	blx	r3
 8005c9a:	42b0      	cmp	r0, r6
 8005c9c:	d0fb      	beq.n	8005c96 <OV5640_SetPixelFormat+0x152>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005c9e:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8005ca8:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8005cac:	f000 fba2 	bl	80063f4 <ov5640_write_reg>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d180      	bne.n	8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005cb4:	6963      	ldr	r3, [r4, #20]
 8005cb6:	4798      	blx	r3
 8005cb8:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005cba:	6963      	ldr	r3, [r4, #20]
 8005cbc:	4798      	blx	r3
 8005cbe:	4285      	cmp	r5, r0
 8005cc0:	d0fb      	beq.n	8005cba <OV5640_SetPixelFormat+0x176>
{
 8005cc2:	2600      	movs	r6, #0
}
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	b002      	add	sp, #8
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005ccc:	2630      	movs	r6, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	462a      	mov	r2, r5
 8005cd4:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005cd8:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cdc:	f000 fb8a 	bl	80063f4 <ov5640_write_reg>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f47f af68 	bne.w	8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005ce6:	6963      	ldr	r3, [r4, #20]
 8005ce8:	4798      	blx	r3
 8005cea:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005cec:	6963      	ldr	r3, [r4, #20]
 8005cee:	4798      	blx	r3
 8005cf0:	42b0      	cmp	r0, r6
 8005cf2:	d0fb      	beq.n	8005cec <OV5640_SetPixelFormat+0x1a8>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005cf4:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8005d00:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8005d04:	f000 fb76 	bl	80063f4 <ov5640_write_reg>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f47f af54 	bne.w	8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	4798      	blx	r3
 8005d12:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d14:	6963      	ldr	r3, [r4, #20]
 8005d16:	4798      	blx	r3
 8005d18:	4285      	cmp	r5, r0
 8005d1a:	d0fb      	beq.n	8005d14 <OV5640_SetPixelFormat+0x1d0>
 8005d1c:	e7d1      	b.n	8005cc2 <OV5640_SetPixelFormat+0x17e>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d1e:	2610      	movs	r6, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005d20:	2301      	movs	r3, #1
 8005d22:	4638      	mov	r0, r7
 8005d24:	462a      	mov	r2, r5
 8005d26:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d2a:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005d2e:	f000 fb61 	bl	80063f4 <ov5640_write_reg>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f47f af3f 	bne.w	8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005d38:	6963      	ldr	r3, [r4, #20]
 8005d3a:	4798      	blx	r3
 8005d3c:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d3e:	6963      	ldr	r3, [r4, #20]
 8005d40:	4798      	blx	r3
 8005d42:	42b0      	cmp	r0, r6
 8005d44:	d0fb      	beq.n	8005d3e <OV5640_SetPixelFormat+0x1fa>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d46:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8005d52:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8005d56:	f000 fb4d 	bl	80063f4 <ov5640_write_reg>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f47f af2b 	bne.w	8005bb6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8005d60:	6963      	ldr	r3, [r4, #20]
 8005d62:	4798      	blx	r3
 8005d64:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d66:	6963      	ldr	r3, [r4, #20]
 8005d68:	4798      	blx	r3
 8005d6a:	4285      	cmp	r5, r0
 8005d6c:	d0fb      	beq.n	8005d66 <OV5640_SetPixelFormat+0x222>
 8005d6e:	e7a8      	b.n	8005cc2 <OV5640_SetPixelFormat+0x17e>
  tickstart = pObj->IO.GetTick();
 8005d70:	6963      	ldr	r3, [r4, #20]
 8005d72:	4798      	blx	r3
 8005d74:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005d76:	6963      	ldr	r3, [r4, #20]
 8005d78:	4798      	blx	r3
 8005d7a:	42b0      	cmp	r0, r6
 8005d7c:	d0fb      	beq.n	8005d76 <OV5640_SetPixelFormat+0x232>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005d7e:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005d80:	2301      	movs	r3, #1
 8005d82:	462a      	mov	r2, r5
 8005d84:	f245 011f 	movw	r1, #20511	; 0x501f
 8005d88:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8005d8a:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8005d8e:	f000 fb31 	bl	80063f4 <ov5640_write_reg>
 8005d92:	4606      	mov	r6, r0
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f47f af21 	bne.w	8005bdc <OV5640_SetPixelFormat+0x98>
  tickstart = pObj->IO.GetTick();
 8005d9a:	6963      	ldr	r3, [r4, #20]
 8005d9c:	4798      	blx	r3
 8005d9e:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005da0:	6963      	ldr	r3, [r4, #20]
 8005da2:	4798      	blx	r3
 8005da4:	4580      	cmp	r8, r0
 8005da6:	d0fb      	beq.n	8005da0 <OV5640_SetPixelFormat+0x25c>
 8005da8:	e71a      	b.n	8005be0 <OV5640_SetPixelFormat+0x9c>
  tickstart = pObj->IO.GetTick();
 8005daa:	6963      	ldr	r3, [r4, #20]
 8005dac:	4798      	blx	r3
 8005dae:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005db0:	6963      	ldr	r3, [r4, #20]
 8005db2:	4798      	blx	r3
 8005db4:	4285      	cmp	r5, r0
 8005db6:	d0fb      	beq.n	8005db0 <OV5640_SetPixelFormat+0x26c>
 8005db8:	e783      	b.n	8005cc2 <OV5640_SetPixelFormat+0x17e>
 8005dba:	bf00      	nop

08005dbc <OV5640_GetResolution>:
{
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8005dbe:	f100 0418 	add.w	r4, r0, #24
{
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	f10d 0207 	add.w	r2, sp, #7
 8005dcc:	f643 0108 	movw	r1, #14344	; 0x3808
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fb07 	bl	80063e4 <ov5640_read_reg>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d150      	bne.n	8005e7c <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 8005dda:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8005dde:	2301      	movs	r3, #1
 8005de0:	f10d 0207 	add.w	r2, sp, #7
 8005de4:	f643 0109 	movw	r1, #14345	; 0x3809
 8005de8:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 8005dea:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8005dec:	f000 fafa 	bl	80063e4 <ov5640_read_reg>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d143      	bne.n	8005e7c <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 8005df4:	f89d 6007 	ldrb.w	r6, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f10d 0207 	add.w	r2, sp, #7
 8005dfe:	f643 010a 	movw	r1, #14346	; 0x380a
 8005e02:	4620      	mov	r0, r4
      x_size |= tmp;
 8005e04:	4335      	orrs	r5, r6
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8005e06:	f000 faed 	bl	80063e4 <ov5640_read_reg>
 8005e0a:	bbb8      	cbnz	r0, 8005e7c <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 8005e0c:	f89d 6007 	ldrb.w	r6, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8005e10:	f10d 0207 	add.w	r2, sp, #7
 8005e14:	4620      	mov	r0, r4
 8005e16:	2301      	movs	r3, #1
 8005e18:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 8005e1c:	0236      	lsls	r6, r6, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8005e1e:	f000 fae1 	bl	80063e4 <ov5640_read_reg>
 8005e22:	bb58      	cbnz	r0, 8005e7c <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 8005e24:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8005e28:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
          y_size |= tmp;
 8005e2c:	ea43 0306 	orr.w	r3, r3, r6
          if ((x_size == 800U) && (y_size == 480U))
 8005e30:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8005e34:	fab2 f282 	clz	r2, r2
 8005e38:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005e3c:	d104      	bne.n	8005e48 <OV5640_GetResolution+0x8c>
 8005e3e:	b11a      	cbz	r2, 8005e48 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 8005e40:	2304      	movs	r3, #4
 8005e42:	603b      	str	r3, [r7, #0]
}
 8005e44:	b003      	add	sp, #12
 8005e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8005e48:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 8005e4c:	d104      	bne.n	8005e58 <OV5640_GetResolution+0x9c>
 8005e4e:	b11a      	cbz	r2, 8005e58 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 8005e50:	2303      	movs	r3, #3
 8005e52:	603b      	str	r3, [r7, #0]
}
 8005e54:	b003      	add	sp, #12
 8005e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8005e58:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 8005e5c:	d106      	bne.n	8005e6c <OV5640_GetResolution+0xb0>
 8005e5e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8005e62:	d103      	bne.n	8005e6c <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 8005e64:	2302      	movs	r3, #2
 8005e66:	603b      	str	r3, [r7, #0]
}
 8005e68:	b003      	add	sp, #12
 8005e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 8005e6c:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8005e70:	d108      	bne.n	8005e84 <OV5640_GetResolution+0xc8>
 8005e72:	2bf0      	cmp	r3, #240	; 0xf0
 8005e74:	d106      	bne.n	8005e84 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 8005e76:	2301      	movs	r3, #1
 8005e78:	603b      	str	r3, [r7, #0]
            ret = OV5640_OK;
 8005e7a:	e7e3      	b.n	8005e44 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005e80:	b003      	add	sp, #12
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8005e84:	2da0      	cmp	r5, #160	; 0xa0
 8005e86:	d1f9      	bne.n	8005e7c <OV5640_GetResolution+0xc0>
 8005e88:	2b78      	cmp	r3, #120	; 0x78
 8005e8a:	d1f7      	bne.n	8005e7c <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	603b      	str	r3, [r7, #0]
  return ret;
 8005e90:	e7d8      	b.n	8005e44 <OV5640_GetResolution+0x88>
 8005e92:	bf00      	nop

08005e94 <OV5640_ReadID>:
{
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8005e96:	4606      	mov	r6, r0
{
 8005e98:	b083      	sub	sp, #12
  tmp = 0x80;
 8005e9a:	2580      	movs	r5, #128	; 0x80
{
 8005e9c:	460f      	mov	r7, r1
  pObj->IO.Init();
 8005e9e:	f856 3b18 	ldr.w	r3, [r6], #24
{
 8005ea2:	4604      	mov	r4, r0
  pObj->IO.Init();
 8005ea4:	4798      	blx	r3
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8005ea6:	f10d 0207 	add.w	r2, sp, #7
 8005eaa:	4630      	mov	r0, r6
 8005eac:	2301      	movs	r3, #1
 8005eae:	f243 0108 	movw	r1, #12296	; 0x3008
  tmp = 0x80;
 8005eb2:	f88d 5007 	strb.w	r5, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8005eb6:	f000 fa9d 	bl	80063f4 <ov5640_write_reg>
 8005eba:	bb28      	cbnz	r0, 8005f08 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 8005ebc:	6963      	ldr	r3, [r4, #20]
 8005ebe:	4798      	blx	r3
 8005ec0:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8005ec2:	6963      	ldr	r3, [r4, #20]
 8005ec4:	4798      	blx	r3
 8005ec6:	1b43      	subs	r3, r0, r5
 8005ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ecc:	d3f9      	bcc.n	8005ec2 <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f10d 0207 	add.w	r2, sp, #7
 8005ed4:	f243 010a 	movw	r1, #12298	; 0x300a
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 fa83 	bl	80063e4 <ov5640_read_reg>
 8005ede:	b998      	cbnz	r0, 8005f08 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 8005ee0:	f89d 4007 	ldrb.w	r4, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8005ee4:	f10d 0207 	add.w	r2, sp, #7
 8005ee8:	4630      	mov	r0, r6
 8005eea:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 8005eec:	0224      	lsls	r4, r4, #8
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8005eee:	f243 010b 	movw	r1, #12299	; 0x300b
      *Id = (uint32_t)tmp << 8U;
 8005ef2:	603c      	str	r4, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8005ef4:	f000 fa76 	bl	80063e4 <ov5640_read_reg>
 8005ef8:	b930      	cbnz	r0, 8005f08 <OV5640_ReadID+0x74>
        *Id |= tmp;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	603b      	str	r3, [r7, #0]
}
 8005f04:	b003      	add	sp, #12
 8005f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	e7fa      	b.n	8005f04 <OV5640_ReadID+0x70>
 8005f0e:	bf00      	nop

08005f10 <OV5640_MirrorFlipConfig>:
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005f12:	f100 0418 	add.w	r4, r0, #24
{
 8005f16:	b082      	sub	sp, #8
  uint8_t tmp3820 = 0;
 8005f18:	2600      	movs	r6, #0
{
 8005f1a:	460d      	mov	r5, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005f1c:	f10d 0206 	add.w	r2, sp, #6
 8005f20:	2301      	movs	r3, #1
 8005f22:	f643 0120 	movw	r1, #14368	; 0x3820
 8005f26:	4620      	mov	r0, r4
  uint8_t tmp3820 = 0;
 8005f28:	f88d 6006 	strb.w	r6, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005f2c:	f000 fa5a 	bl	80063e4 <ov5640_read_reg>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d174      	bne.n	800601e <OV5640_MirrorFlipConfig+0x10e>
    tmp3820 &= 0xF9U;
 8005f34:	f89d 6006 	ldrb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f643 0121 	movw	r1, #14369	; 0x3821
 8005f3e:	f10d 0207 	add.w	r2, sp, #7
    tmp3820 &= 0xF9U;
 8005f42:	f026 0606 	bic.w	r6, r6, #6
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005f46:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 8005f48:	f88d 6006 	strb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005f4c:	f000 fa4a 	bl	80063e4 <ov5640_read_reg>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d164      	bne.n	800601e <OV5640_MirrorFlipConfig+0x10e>
      tmp3821 &= 0xF9U;
 8005f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8005f58:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 8005f5a:	f023 0306 	bic.w	r3, r3, #6
 8005f5e:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 8005f62:	d01b      	beq.n	8005f9c <OV5640_MirrorFlipConfig+0x8c>
 8005f64:	2d03      	cmp	r5, #3
 8005f66:	d04a      	beq.n	8005ffe <OV5640_MirrorFlipConfig+0xee>
 8005f68:	2d01      	cmp	r5, #1
 8005f6a:	d034      	beq.n	8005fd6 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005f6c:	f10d 0206 	add.w	r2, sp, #6
 8005f70:	2301      	movs	r3, #1
 8005f72:	f643 0120 	movw	r1, #14368	; 0x3820
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 fa3c 	bl	80063f4 <ov5640_write_reg>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d14e      	bne.n	800601e <OV5640_MirrorFlipConfig+0x10e>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005f80:	f10d 0207 	add.w	r2, sp, #7
 8005f84:	4620      	mov	r0, r4
 8005f86:	2301      	movs	r3, #1
 8005f88:	f643 0121 	movw	r1, #14369	; 0x3821
 8005f8c:	f000 fa32 	bl	80063f4 <ov5640_write_reg>
 8005f90:	3800      	subs	r0, #0
 8005f92:	bf18      	it	ne
 8005f94:	2001      	movne	r0, #1
 8005f96:	4240      	negs	r0, r0
}
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005f9c:	f10d 0206 	add.w	r2, sp, #6
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f643 0120 	movw	r1, #14368	; 0x3820
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 fa24 	bl	80063f4 <ov5640_write_reg>
 8005fac:	bbb8      	cbnz	r0, 800601e <OV5640_MirrorFlipConfig+0x10e>
            tmp3821 |= 0x06U;
 8005fae:	f89d 1007 	ldrb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f10d 0207 	add.w	r2, sp, #7
 8005fb8:	2301      	movs	r3, #1
            tmp3821 |= 0x06U;
 8005fba:	f041 0406 	orr.w	r4, r1, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005fbe:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8005fc2:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005fc6:	f000 fa15 	bl	80063f4 <ov5640_write_reg>
 8005fca:	3800      	subs	r0, #0
 8005fcc:	bf18      	it	ne
 8005fce:	2001      	movne	r0, #1
 8005fd0:	4240      	negs	r0, r0
}
 8005fd2:	b002      	add	sp, #8
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
          tmp3820 |= 0x06U;
 8005fd6:	f89d 6006 	ldrb.w	r6, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005fda:	f10d 0206 	add.w	r2, sp, #6
 8005fde:	462b      	mov	r3, r5
 8005fe0:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 8005fe4:	f046 0606 	orr.w	r6, r6, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005fe8:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8005fea:	f88d 6006 	strb.w	r6, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8005fee:	f000 fa01 	bl	80063f4 <ov5640_write_reg>
 8005ff2:	b9a0      	cbnz	r0, 800601e <OV5640_MirrorFlipConfig+0x10e>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	f10d 0207 	add.w	r2, sp, #7
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	e7c4      	b.n	8005f88 <OV5640_MirrorFlipConfig+0x78>
          tmp3820 |= 0x06U;
 8005ffe:	f89d 5006 	ldrb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8006002:	f10d 0206 	add.w	r2, sp, #6
 8006006:	2301      	movs	r3, #1
 8006008:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 800600c:	f045 0506 	orr.w	r5, r5, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8006010:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8006012:	f88d 5006 	strb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8006016:	f000 f9ed 	bl	80063f4 <ov5640_write_reg>
 800601a:	2800      	cmp	r0, #0
 800601c:	d0c7      	beq.n	8005fae <OV5640_MirrorFlipConfig+0x9e>
    ret = OV5640_ERROR;
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	e7b9      	b.n	8005f98 <OV5640_MirrorFlipConfig+0x88>

08006024 <OV5640_NightModeConfig>:
{
 8006024:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8006026:	2200      	movs	r2, #0
{
 8006028:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 800602a:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 800602c:	f88d 2007 	strb.w	r2, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8006030:	d01e      	beq.n	8006070 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8006032:	f100 0418 	add.w	r4, r0, #24
 8006036:	2301      	movs	r3, #1
 8006038:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800603c:	f10d 0207 	add.w	r2, sp, #7
 8006040:	4620      	mov	r0, r4
 8006042:	f000 f9cf 	bl	80063e4 <ov5640_read_reg>
 8006046:	b9f8      	cbnz	r0, 8006088 <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 8006048:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800604c:	4620      	mov	r0, r4
 800604e:	f10d 0207 	add.w	r2, sp, #7
 8006052:	2301      	movs	r3, #1
      tmp &= 0xFBU;
 8006054:	f021 0404 	bic.w	r4, r1, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8006058:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 800605c:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8006060:	f000 f9c8 	bl	80063f4 <ov5640_write_reg>
 8006064:	3800      	subs	r0, #0
 8006066:	bf18      	it	ne
 8006068:	2001      	movne	r0, #1
 800606a:	4240      	negs	r0, r0
}
 800606c:	b002      	add	sp, #8
 800606e:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8006070:	f100 0418 	add.w	r4, r0, #24
 8006074:	460d      	mov	r5, r1
 8006076:	460b      	mov	r3, r1
 8006078:	f10d 0207 	add.w	r2, sp, #7
 800607c:	f243 0138 	movw	r1, #12344	; 0x3038
 8006080:	4620      	mov	r0, r4
 8006082:	f000 f9b7 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006086:	b118      	cbz	r0, 8006090 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
}
 800608c:	b002      	add	sp, #8
 800608e:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8006090:	462b      	mov	r3, r5
 8006092:	f10d 0207 	add.w	r2, sp, #7
 8006096:	f243 0139 	movw	r1, #12345	; 0x3039
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f9aa 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d1f1      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 80060a4:	267c      	movs	r6, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80060a6:	462b      	mov	r3, r5
 80060a8:	f10d 0207 	add.w	r2, sp, #7
 80060ac:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80060b0:	4620      	mov	r0, r4
      tmp = 0x7C;
 80060b2:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80060b6:	f000 f99d 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d1e4      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80060be:	462b      	mov	r3, r5
 80060c0:	f10d 0207 	add.w	r2, sp, #7
 80060c4:	f643 2108 	movw	r1, #14856	; 0x3a08
 80060c8:	4620      	mov	r0, r4
      tmp = 0x01;
 80060ca:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80060ce:	f000 f991 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d1d8      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 80060d6:	2627      	movs	r6, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 80060d8:	462b      	mov	r3, r5
 80060da:	f10d 0207 	add.w	r2, sp, #7
 80060de:	f643 2109 	movw	r1, #14857	; 0x3a09
 80060e2:	4620      	mov	r0, r4
      tmp = 0x27;
 80060e4:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 80060e8:	f000 f984 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80060ec:	4606      	mov	r6, r0
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1ca      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80060f2:	462b      	mov	r3, r5
 80060f4:	f10d 0207 	add.w	r2, sp, #7
 80060f8:	f643 210a 	movw	r1, #14858	; 0x3a0a
 80060fc:	4620      	mov	r0, r4
      tmp = 0x00;
 80060fe:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8006102:	f000 f977 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006106:	2800      	cmp	r0, #0
 8006108:	d1be      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 800610a:	26f6      	movs	r6, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800610c:	462b      	mov	r3, r5
 800610e:	f10d 0207 	add.w	r2, sp, #7
 8006112:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8006116:	4620      	mov	r0, r4
      tmp = 0xF6;
 8006118:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800611c:	f000 f96a 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006120:	2800      	cmp	r0, #0
 8006122:	d1b1      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 8006124:	2604      	movs	r6, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8006126:	462b      	mov	r3, r5
 8006128:	f10d 0207 	add.w	r2, sp, #7
 800612c:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8006130:	4620      	mov	r0, r4
      tmp = 0x04;
 8006132:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8006136:	f000 f95d 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800613a:	2800      	cmp	r0, #0
 800613c:	d1a4      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800613e:	462b      	mov	r3, r5
 8006140:	f10d 0207 	add.w	r2, sp, #7
 8006144:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8006148:	4620      	mov	r0, r4
 800614a:	f000 f953 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800614e:	2800      	cmp	r0, #0
 8006150:	d19a      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 8006152:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8006154:	2301      	movs	r3, #1
 8006156:	f10d 0207 	add.w	r2, sp, #7
 800615a:	f643 2102 	movw	r1, #14850	; 0x3a02
 800615e:	4620      	mov	r0, r4
      tmp = 0x0B;
 8006160:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8006164:	f000 f946 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006168:	2800      	cmp	r0, #0
 800616a:	d18d      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 800616c:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 800616e:	2301      	movs	r3, #1
 8006170:	f10d 0207 	add.w	r2, sp, #7
 8006174:	f643 2103 	movw	r1, #14851	; 0x3a03
 8006178:	4620      	mov	r0, r4
      tmp = 0x88;
 800617a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 800617e:	f000 f939 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006182:	2800      	cmp	r0, #0
 8006184:	d180      	bne.n	8006088 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8006186:	2301      	movs	r3, #1
 8006188:	f10d 0207 	add.w	r2, sp, #7
 800618c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8006190:	4620      	mov	r0, r4
      tmp = 0x0B;
 8006192:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8006196:	f000 f92d 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800619a:	2800      	cmp	r0, #0
 800619c:	f47f af74 	bne.w	8006088 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80061a0:	f10d 0207 	add.w	r2, sp, #7
 80061a4:	4620      	mov	r0, r4
 80061a6:	2301      	movs	r3, #1
 80061a8:	f643 2115 	movw	r1, #14869	; 0x3a15
      tmp = 0x88;
 80061ac:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80061b0:	f000 f920 	bl	80063f4 <ov5640_write_reg>
    if (ret != OV5640_OK)
 80061b4:	3800      	subs	r0, #0
 80061b6:	bf18      	it	ne
 80061b8:	2001      	movne	r0, #1
 80061ba:	4240      	negs	r0, r0
}
 80061bc:	b002      	add	sp, #8
 80061be:	bd70      	pop	{r4, r5, r6, pc}

080061c0 <OV5640_ZoomConfig>:
{
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	460d      	mov	r5, r1
 80061c6:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80061c8:	a901      	add	r1, sp, #4
 80061ca:	f7ff fdf7 	bl	8005dbc <OV5640_GetResolution>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d13a      	bne.n	8006248 <OV5640_ZoomConfig+0x88>
    if (zoom == OV5640_ZOOM_x1)
 80061d2:	2d44      	cmp	r5, #68	; 0x44
 80061d4:	d026      	beq.n	8006224 <OV5640_ZoomConfig+0x64>
      switch (res)
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d91f      	bls.n	800621c <OV5640_ZoomConfig+0x5c>
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d100      	bne.n	80061e2 <OV5640_ZoomConfig+0x22>
          zoom = zoom >> 2U;
 80061e0:	08ad      	lsrs	r5, r5, #2
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80061e2:	3418      	adds	r4, #24
      tmp = 0x00;
 80061e4:	2600      	movs	r6, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80061e6:	2301      	movs	r3, #1
 80061e8:	f10d 0203 	add.w	r2, sp, #3
 80061ec:	4620      	mov	r0, r4
 80061ee:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x00;
 80061f2:	f88d 6003 	strb.w	r6, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80061f6:	f000 f8fd 	bl	80063f4 <ov5640_write_reg>
 80061fa:	bb28      	cbnz	r0, 8006248 <OV5640_ZoomConfig+0x88>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 80061fc:	f10d 0203 	add.w	r2, sp, #3
 8006200:	4620      	mov	r0, r4
 8006202:	2301      	movs	r3, #1
 8006204:	f245 6101 	movw	r1, #22017	; 0x5601
        tmp = (uint8_t)zoom;
 8006208:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800620c:	f000 f8f2 	bl	80063f4 <ov5640_write_reg>
 8006210:	1b80      	subs	r0, r0, r6
 8006212:	bf18      	it	ne
 8006214:	2001      	movne	r0, #1
 8006216:	4240      	negs	r0, r0
}
 8006218:	b002      	add	sp, #8
 800621a:	bd70      	pop	{r4, r5, r6, pc}
      switch (res)
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0e0      	beq.n	80061e2 <OV5640_ZoomConfig+0x22>
          zoom = zoom >> 1U;
 8006220:	086d      	lsrs	r5, r5, #1
          break;
 8006222:	e7de      	b.n	80061e2 <OV5640_ZoomConfig+0x22>
      tmp = 0x10;
 8006224:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8006226:	f104 0018 	add.w	r0, r4, #24
 800622a:	2301      	movs	r3, #1
 800622c:	f10d 0203 	add.w	r2, sp, #3
 8006230:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x10;
 8006234:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8006238:	f000 f8dc 	bl	80063f4 <ov5640_write_reg>
 800623c:	3800      	subs	r0, #0
 800623e:	bf18      	it	ne
 8006240:	2001      	movne	r0, #1
 8006242:	4240      	negs	r0, r0
}
 8006244:	b002      	add	sp, #8
 8006246:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV5640_ERROR;
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	e7e4      	b.n	8006218 <OV5640_ZoomConfig+0x58>
 800624e:	bf00      	nop

08006250 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 8006250:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006254:	bb83      	cbnz	r3, 80062b8 <OV5640_Init+0x68>
    if ((Resolution > OV5640_R800x480) ||
 8006256:	2904      	cmp	r1, #4
{
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	468a      	mov	sl, r1
 800625e:	b082      	sub	sp, #8
    if ((Resolution > OV5640_R800x480) ||
 8006260:	d825      	bhi.n	80062ae <OV5640_Init+0x5e>
 8006262:	2a02      	cmp	r2, #2
 8006264:	4680      	mov	r8, r0
 8006266:	4691      	mov	r9, r2
 8006268:	d902      	bls.n	8006270 <OV5640_Init+0x20>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800626a:	1fd3      	subs	r3, r2, #7
 800626c:	2b01      	cmp	r3, #1
 800626e:	d81e      	bhi.n	80062ae <OV5640_Init+0x5e>
        if (ret != OV5640_ERROR)
 8006270:	f108 0718 	add.w	r7, r8, #24
{
 8006274:	2400      	movs	r4, #0
 8006276:	4e22      	ldr	r6, [pc, #136]	; (8006300 <OV5640_Init+0xb0>)
          tmp = (uint8_t)OV5640_Common[index][1];
 8006278:	eb06 0584 	add.w	r5, r6, r4, lsl #2
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800627c:	2301      	movs	r3, #1
 800627e:	f10d 0206 	add.w	r2, sp, #6
 8006282:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
          tmp = (uint8_t)OV5640_Common[index][1];
 8006286:	886d      	ldrh	r5, [r5, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8006288:	4638      	mov	r0, r7
          tmp = (uint8_t)OV5640_Common[index][1];
 800628a:	f88d 5006 	strb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800628e:	f000 f8b1 	bl	80063f4 <ov5640_write_reg>
 8006292:	b198      	cbz	r0, 80062bc <OV5640_Init+0x6c>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8006294:	2cfd      	cmp	r4, #253	; 0xfd
 8006296:	d00a      	beq.n	80062ae <OV5640_Init+0x5e>
 8006298:	2cfc      	cmp	r4, #252	; 0xfc
 800629a:	f104 0302 	add.w	r3, r4, #2
 800629e:	d102      	bne.n	80062a6 <OV5640_Init+0x56>
 80062a0:	e005      	b.n	80062ae <OV5640_Init+0x5e>
 80062a2:	2bfe      	cmp	r3, #254	; 0xfe
 80062a4:	d003      	beq.n	80062ae <OV5640_Init+0x5e>
 80062a6:	2bfd      	cmp	r3, #253	; 0xfd
 80062a8:	f103 0302 	add.w	r3, r3, #2
 80062ac:	d1f9      	bne.n	80062a2 <OV5640_Init+0x52>
          ret = OV5640_ERROR;
 80062ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80062b2:	b002      	add	sp, #8
 80062b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int32_t ret = OV5640_OK;
 80062b8:	2000      	movs	r0, #0
}
 80062ba:	4770      	bx	lr
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80062bc:	3401      	adds	r4, #1
 80062be:	2cfe      	cmp	r4, #254	; 0xfe
 80062c0:	d1da      	bne.n	8006278 <OV5640_Init+0x28>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80062c2:	4651      	mov	r1, sl
 80062c4:	4640      	mov	r0, r8
 80062c6:	f7fe fffd 	bl	80052c4 <OV5640_SetResolution>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d1ef      	bne.n	80062ae <OV5640_Init+0x5e>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	f7ff fc37 	bl	8005b44 <OV5640_SetPixelFormat>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d1e9      	bne.n	80062ae <OV5640_Init+0x5e>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80062da:	2422      	movs	r4, #34	; 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80062dc:	4638      	mov	r0, r7
 80062de:	2301      	movs	r3, #1
 80062e0:	f10d 0207 	add.w	r2, sp, #7
 80062e4:	f244 7140 	movw	r1, #18240	; 0x4740
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80062e8:	f88d 4007 	strb.w	r4, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80062ec:	f000 f882 	bl	80063f4 <ov5640_write_reg>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1dc      	bne.n	80062ae <OV5640_Init+0x5e>
          pObj->IsInitialized = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
}
 80062fa:	b002      	add	sp, #8
 80062fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006300:	0802c460 	.word	0x0802c460

08006304 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8006304:	b1c0      	cbz	r0, 8006338 <OV5640_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006306:	68ca      	ldr	r2, [r1, #12]
{
 8006308:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 800630a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800630e:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8006310:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8006314:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8006318:	4909      	ldr	r1, [pc, #36]	; (8006340 <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800631a:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800631c:	4a09      	ldr	r2, [pc, #36]	; (8006344 <OV5640_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 800631e:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8006320:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006322:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8006326:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if (pObj->IO.Init != NULL)
 800632a:	b10b      	cbz	r3, 8006330 <OV5640_RegisterBusIO+0x2c>
}
 800632c:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 800632e:	4718      	bx	r3
}
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	bc70      	pop	{r4, r5, r6}
 8006336:	4770      	bx	lr
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	080052a5 	.word	0x080052a5
 8006344:	080052b5 	.word	0x080052b5

08006348 <OV5640_ColorbarModeConfig>:
  uint8_t tmp = 0x40;
 8006348:	2340      	movs	r3, #64	; 0x40
{
 800634a:	b530      	push	{r4, r5, lr}
 800634c:	b083      	sub	sp, #12
  uint8_t tmp = 0x40;
 800634e:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8006352:	1e4b      	subs	r3, r1, #1
 8006354:	2b01      	cmp	r3, #1
 8006356:	d922      	bls.n	800639e <OV5640_ColorbarModeConfig+0x56>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006358:	f100 0418 	add.w	r4, r0, #24
    tmp = 0x10;
 800635c:	2510      	movs	r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800635e:	2301      	movs	r3, #1
 8006360:	f10d 0207 	add.w	r2, sp, #7
 8006364:	4620      	mov	r0, r4
 8006366:	f245 5184 	movw	r1, #21892	; 0x5584
    tmp = 0x10;
 800636a:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800636e:	f000 f841 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8006372:	4605      	mov	r5, r0
 8006374:	b118      	cbz	r0, 800637e <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 8006376:	f04f 30ff 	mov.w	r0, #4294967295
}
 800637a:	b003      	add	sp, #12
 800637c:	bd30      	pop	{r4, r5, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 800637e:	f10d 0207 	add.w	r2, sp, #7
 8006382:	4620      	mov	r0, r4
 8006384:	2301      	movs	r3, #1
 8006386:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = 0x00;
 800638a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 800638e:	f000 f831 	bl	80063f4 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8006392:	3800      	subs	r0, #0
 8006394:	bf18      	it	ne
 8006396:	2001      	movne	r0, #1
 8006398:	4240      	negs	r0, r0
}
 800639a:	b003      	add	sp, #12
 800639c:	bd30      	pop	{r4, r5, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800639e:	f100 0418 	add.w	r4, r0, #24
 80063a2:	460d      	mov	r5, r1
 80063a4:	2301      	movs	r3, #1
 80063a6:	f245 5184 	movw	r1, #21892	; 0x5584
 80063aa:	4620      	mov	r0, r4
 80063ac:	f10d 0207 	add.w	r2, sp, #7
 80063b0:	f000 f820 	bl	80063f4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d1de      	bne.n	8006376 <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80063b8:	2d02      	cmp	r5, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80063ba:	4620      	mov	r0, r4
 80063bc:	f10d 0207 	add.w	r2, sp, #7
 80063c0:	f04f 0301 	mov.w	r3, #1
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80063c4:	bf0c      	ite	eq
 80063c6:	248c      	moveq	r4, #140	; 0x8c
 80063c8:	2480      	movne	r4, #128	; 0x80
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80063ca:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80063ce:	f88d 4007 	strb.w	r4, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80063d2:	f000 f80f 	bl	80063f4 <ov5640_write_reg>
    if (ret != OV5640_OK)
 80063d6:	3800      	subs	r0, #0
 80063d8:	bf18      	it	ne
 80063da:	2001      	movne	r0, #1
 80063dc:	4240      	negs	r0, r0
}
 80063de:	b003      	add	sp, #12
 80063e0:	bd30      	pop	{r4, r5, pc}
 80063e2:	bf00      	nop

080063e4 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80063e4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80063e6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80063ea:	46a4      	mov	ip, r4
}
 80063ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80063f0:	4760      	bx	ip
 80063f2:	bf00      	nop

080063f4 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80063f4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80063f6:	6804      	ldr	r4, [r0, #0]
 80063f8:	6880      	ldr	r0, [r0, #8]
 80063fa:	46a4      	mov	ip, r4
}
 80063fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8006400:	4760      	bx	ip
 8006402:	bf00      	nop

08006404 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8006404:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006408:	2b01      	cmp	r3, #1
 800640a:	d102      	bne.n	8006412 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8006412:	2000      	movs	r0, #0
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop

08006418 <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop

08006420 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8006420:	b168      	cbz	r0, 800643e <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8006422:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8006424:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8006426:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8006428:	4610      	mov	r0, r2
    Capabilities->Config_Contrast      = 1;
 800642a:	614b      	str	r3, [r1, #20]
    Capabilities->Config_MirrorFlip    = 1;
 800642c:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 800642e:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8006430:	600b      	str	r3, [r1, #0]
    Capabilities->Config_SpecialEffect = 1;
 8006432:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 8006434:	618a      	str	r2, [r1, #24]
    Capabilities->Config_LightMode     = 0;
 8006436:	604a      	str	r2, [r1, #4]
    Capabilities->Config_Saturation    = 0;
 8006438:	610a      	str	r2, [r1, #16]
    Capabilities->Config_Zoom          = 0;
 800643a:	620a      	str	r2, [r1, #32]
    ret = OV9655_OK;
 800643c:	4770      	bx	lr
    ret = OV9655_ERROR;
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8006442:	4770      	bx	lr

08006444 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8006454:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006456:	6904      	ldr	r4, [r0, #16]
 8006458:	8900      	ldrh	r0, [r0, #8]
 800645a:	46a4      	mov	ip, r4
}
 800645c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006460:	4760      	bx	ip
 8006462:	bf00      	nop

08006464 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8006464:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006466:	68c4      	ldr	r4, [r0, #12]
 8006468:	8900      	ldrh	r0, [r0, #8]
 800646a:	46a4      	mov	ip, r4
}
 800646c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006470:	4760      	bx	ip
 8006472:	bf00      	nop

08006474 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8006474:	2903      	cmp	r1, #3
{
 8006476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647a:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 800647c:	d831      	bhi.n	80064e2 <OV9655_SetResolution+0x6e>
    switch (Resolution)
 800647e:	2901      	cmp	r1, #1
 8006480:	4604      	mov	r4, r0
 8006482:	d034      	beq.n	80064ee <OV9655_SetResolution+0x7a>
 8006484:	3902      	subs	r1, #2
 8006486:	2600      	movs	r6, #0
 8006488:	2901      	cmp	r1, #1
 800648a:	d864      	bhi.n	8006556 <OV9655_SetResolution+0xe2>
 800648c:	f10d 0907 	add.w	r9, sp, #7
 8006490:	f100 0a18 	add.w	sl, r0, #24
 8006494:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8006640 <OV9655_SetResolution+0x1cc>
          tmp = OV9655_VGA[index][1];
 8006498:	eb0b 0046 	add.w	r0, fp, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 800649c:	2301      	movs	r3, #1
 800649e:	464a      	mov	r2, r9
 80064a0:	f81b 1016 	ldrb.w	r1, [fp, r6, lsl #1]
          tmp = OV9655_VGA[index][1];
 80064a4:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80064a6:	4650      	mov	r0, sl
          tmp = OV9655_VGA[index][1];
 80064a8:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80064ac:	f000 fc3e 	bl	8006d2c <ov9655_write_reg>
 80064b0:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 80064b2:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80064b4:	4680      	mov	r8, r0
 80064b6:	bf18      	it	ne
 80064b8:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 80064ba:	4798      	blx	r3
 80064bc:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80064be:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80064c0:	6963      	ldr	r3, [r4, #20]
 80064c2:	4798      	blx	r3
 80064c4:	1b40      	subs	r0, r0, r5
 80064c6:	2801      	cmp	r0, #1
 80064c8:	d9fa      	bls.n	80064c0 <OV9655_SetResolution+0x4c>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80064ca:	3601      	adds	r6, #1
 80064cc:	2e93      	cmp	r6, #147	; 0x93
 80064ce:	d00a      	beq.n	80064e6 <OV9655_SetResolution+0x72>
        if(ret != OV9655_ERROR)
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	d0e0      	beq.n	8006498 <OV9655_SetResolution+0x24>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80064d6:	2e92      	cmp	r6, #146	; 0x92
 80064d8:	f106 0602 	add.w	r6, r6, #2
 80064dc:	d001      	beq.n	80064e2 <OV9655_SetResolution+0x6e>
 80064de:	2e93      	cmp	r6, #147	; 0x93
 80064e0:	d1f9      	bne.n	80064d6 <OV9655_SetResolution+0x62>
    ret = OV9655_ERROR;
 80064e2:	f04f 37ff 	mov.w	r7, #4294967295
}
 80064e6:	4638      	mov	r0, r7
 80064e8:	b003      	add	sp, #12
 80064ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (Resolution)
 80064ee:	2600      	movs	r6, #0
 80064f0:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8006644 <OV9655_SetResolution+0x1d0>
 80064f4:	f10d 0907 	add.w	r9, sp, #7
 80064f8:	f100 0a18 	add.w	sl, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 80064fc:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006500:	2301      	movs	r3, #1
 8006502:	464a      	mov	r2, r9
 8006504:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8006508:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800650a:	4650      	mov	r0, sl
          tmp = OV9655_QVGA_QQVGA[index][1];
 800650c:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006510:	f000 fc0c 	bl	8006d2c <ov9655_write_reg>
 8006514:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8006516:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006518:	4683      	mov	fp, r0
 800651a:	bf18      	it	ne
 800651c:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 800651e:	4798      	blx	r3
 8006520:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006522:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006524:	6963      	ldr	r3, [r4, #20]
 8006526:	4798      	blx	r3
 8006528:	1b40      	subs	r0, r0, r5
 800652a:	2801      	cmp	r0, #1
 800652c:	d9fa      	bls.n	8006524 <OV9655_SetResolution+0xb0>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 800652e:	3601      	adds	r6, #1
 8006530:	2e91      	cmp	r6, #145	; 0x91
 8006532:	d043      	beq.n	80065bc <OV9655_SetResolution+0x148>
        if(ret != OV9655_ERROR)
 8006534:	f1bb 0f00 	cmp.w	fp, #0
 8006538:	d0e0      	beq.n	80064fc <OV9655_SetResolution+0x88>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 800653a:	2e90      	cmp	r6, #144	; 0x90
 800653c:	f106 0602 	add.w	r6, r6, #2
 8006540:	d001      	beq.n	8006546 <OV9655_SetResolution+0xd2>
 8006542:	2e91      	cmp	r6, #145	; 0x91
 8006544:	d1f9      	bne.n	800653a <OV9655_SetResolution+0xc6>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8006546:	2500      	movs	r5, #0
 8006548:	2d04      	cmp	r5, #4
 800654a:	f105 0502 	add.w	r5, r5, #2
 800654e:	d0c8      	beq.n	80064e2 <OV9655_SetResolution+0x6e>
 8006550:	2d05      	cmp	r5, #5
 8006552:	d1f9      	bne.n	8006548 <OV9655_SetResolution+0xd4>
 8006554:	e7c5      	b.n	80064e2 <OV9655_SetResolution+0x6e>
 8006556:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8006644 <OV9655_SetResolution+0x1d0>
 800655a:	f10d 0907 	add.w	r9, sp, #7
 800655e:	f100 0a18 	add.w	sl, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8006562:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006566:	2301      	movs	r3, #1
 8006568:	464a      	mov	r2, r9
 800656a:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 800656e:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006570:	4650      	mov	r0, sl
          tmp = OV9655_QVGA_QQVGA[index][1];
 8006572:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006576:	f000 fbd9 	bl	8006d2c <ov9655_write_reg>
 800657a:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 800657c:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800657e:	4683      	mov	fp, r0
 8006580:	bf18      	it	ne
 8006582:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8006584:	4798      	blx	r3
 8006586:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006588:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800658a:	6963      	ldr	r3, [r4, #20]
 800658c:	4798      	blx	r3
 800658e:	1b40      	subs	r0, r0, r5
 8006590:	2801      	cmp	r0, #1
 8006592:	d9fa      	bls.n	800658a <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8006594:	3601      	adds	r6, #1
 8006596:	2e91      	cmp	r6, #145	; 0x91
 8006598:	d031      	beq.n	80065fe <OV9655_SetResolution+0x18a>
        if(ret != OV9655_ERROR)
 800659a:	f1bb 0f00 	cmp.w	fp, #0
 800659e:	d0e0      	beq.n	8006562 <OV9655_SetResolution+0xee>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80065a0:	2e90      	cmp	r6, #144	; 0x90
 80065a2:	f106 0602 	add.w	r6, r6, #2
 80065a6:	d001      	beq.n	80065ac <OV9655_SetResolution+0x138>
 80065a8:	2e91      	cmp	r6, #145	; 0x91
 80065aa:	d1f9      	bne.n	80065a0 <OV9655_SetResolution+0x12c>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 80065ac:	2500      	movs	r5, #0
 80065ae:	2d04      	cmp	r5, #4
 80065b0:	f105 0502 	add.w	r5, r5, #2
 80065b4:	d095      	beq.n	80064e2 <OV9655_SetResolution+0x6e>
 80065b6:	2d05      	cmp	r5, #5
 80065b8:	d1f9      	bne.n	80065ae <OV9655_SetResolution+0x13a>
 80065ba:	e792      	b.n	80064e2 <OV9655_SetResolution+0x6e>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80065bc:	2500      	movs	r5, #0
          tmp = OV9655_QVGA[index][1];
 80065be:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006648 <OV9655_SetResolution+0x1d4>
        if(ret != OV9655_ERROR)
 80065c2:	2f00      	cmp	r7, #0
 80065c4:	d1c0      	bne.n	8006548 <OV9655_SetResolution+0xd4>
          tmp = OV9655_QVGA[index][1];
 80065c6:	eb08 0045 	add.w	r0, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80065ca:	2301      	movs	r3, #1
 80065cc:	464a      	mov	r2, r9
 80065ce:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
          tmp = OV9655_QVGA[index][1];
 80065d2:	7846      	ldrb	r6, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80065d4:	4650      	mov	r0, sl
          tmp = OV9655_QVGA[index][1];
 80065d6:	f88d 6007 	strb.w	r6, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80065da:	f000 fba7 	bl	8006d2c <ov9655_write_reg>
 80065de:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 80065e0:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80065e2:	bf18      	it	ne
 80065e4:	2001      	movne	r0, #1
 80065e6:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 80065e8:	4798      	blx	r3
 80065ea:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80065ec:	6963      	ldr	r3, [r4, #20]
 80065ee:	4798      	blx	r3
 80065f0:	1b80      	subs	r0, r0, r6
 80065f2:	2801      	cmp	r0, #1
 80065f4:	d9fa      	bls.n	80065ec <OV9655_SetResolution+0x178>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80065f6:	3501      	adds	r5, #1
 80065f8:	2d05      	cmp	r5, #5
 80065fa:	d1e2      	bne.n	80065c2 <OV9655_SetResolution+0x14e>
 80065fc:	e773      	b.n	80064e6 <OV9655_SetResolution+0x72>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 80065fe:	2500      	movs	r5, #0
          tmp = OV9655_QQVGA[index][1];
 8006600:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800664c <OV9655_SetResolution+0x1d8>
        if(ret != OV9655_ERROR)
 8006604:	2f00      	cmp	r7, #0
 8006606:	d1d2      	bne.n	80065ae <OV9655_SetResolution+0x13a>
          tmp = OV9655_QQVGA[index][1];
 8006608:	eb08 0045 	add.w	r0, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800660c:	2301      	movs	r3, #1
 800660e:	464a      	mov	r2, r9
 8006610:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
          tmp = OV9655_QQVGA[index][1];
 8006614:	7846      	ldrb	r6, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006616:	4650      	mov	r0, sl
          tmp = OV9655_QQVGA[index][1];
 8006618:	f88d 6007 	strb.w	r6, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800661c:	f000 fb86 	bl	8006d2c <ov9655_write_reg>
 8006620:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8006622:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8006624:	bf18      	it	ne
 8006626:	2001      	movne	r0, #1
 8006628:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 800662a:	4798      	blx	r3
 800662c:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800662e:	6963      	ldr	r3, [r4, #20]
 8006630:	4798      	blx	r3
 8006632:	1b80      	subs	r0, r0, r6
 8006634:	2801      	cmp	r0, #1
 8006636:	d9fa      	bls.n	800662e <OV9655_SetResolution+0x1ba>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8006638:	3501      	adds	r5, #1
 800663a:	2d05      	cmp	r5, #5
 800663c:	d1e2      	bne.n	8006604 <OV9655_SetResolution+0x190>
 800663e:	e752      	b.n	80064e6 <OV9655_SetResolution+0x72>
 8006640:	0802ca6c 	.word	0x0802ca6c
 8006644:	0802c948 	.word	0x0802c948
 8006648:	0802c93c 	.word	0x0802c93c
 800664c:	0802c930 	.word	0x0802c930

08006650 <OV9655_SetColorEffect>:
{
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	3901      	subs	r1, #1
 8006656:	b084      	sub	sp, #16
 8006658:	9001      	str	r0, [sp, #4]
 800665a:	291f      	cmp	r1, #31
 800665c:	d821      	bhi.n	80066a2 <OV9655_SetColorEffect+0x52>
 800665e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006662:	0073      	.short	0x0073
 8006664:	002000bd 	.word	0x002000bd
 8006668:	002000fa 	.word	0x002000fa
 800666c:	00200020 	.word	0x00200020
 8006670:	00200146 	.word	0x00200146
 8006674:	00200020 	.word	0x00200020
 8006678:	00200020 	.word	0x00200020
 800667c:	00200020 	.word	0x00200020
 8006680:	00200165 	.word	0x00200165
 8006684:	00200020 	.word	0x00200020
 8006688:	00200020 	.word	0x00200020
 800668c:	00200020 	.word	0x00200020
 8006690:	00200020 	.word	0x00200020
 8006694:	00200020 	.word	0x00200020
 8006698:	00200020 	.word	0x00200020
 800669c:	00200020 	.word	0x00200020
 80066a0:	019f      	.short	0x019f
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066a2:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 80066a6:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066a8:	2301      	movs	r3, #1
 80066aa:	f10d 020f 	add.w	r2, sp, #15
 80066ae:	213a      	movs	r1, #58	; 0x3a
 80066b0:	4648      	mov	r0, r9
    tmp = 0x80;
 80066b2:	f04f 0a80 	mov.w	sl, #128	; 0x80
    tmp = 0xCC;
 80066b6:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066ba:	f000 fb37 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80066be:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80066c2:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80066c4:	2301      	movs	r3, #1
 80066c6:	214f      	movs	r1, #79	; 0x4f
 80066c8:	4648      	mov	r0, r9
    tmp = 0x80;
 80066ca:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80066ce:	f000 fb2d 	bl	8006d2c <ov9655_write_reg>
 80066d2:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80066d4:	f10d 020f 	add.w	r2, sp, #15
 80066d8:	2301      	movs	r3, #1
 80066da:	2150      	movs	r1, #80	; 0x50
 80066dc:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80066de:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80066e0:	f000 fb24 	bl	8006d2c <ov9655_write_reg>
    tmp = 0x00;
 80066e4:	f04f 0c00 	mov.w	ip, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80066e8:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80066ea:	f10d 020f 	add.w	r2, sp, #15
 80066ee:	2301      	movs	r3, #1
 80066f0:	2151      	movs	r1, #81	; 0x51
 80066f2:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80066f4:	44b0      	add	r8, r6
    tmp = 0x00;
 80066f6:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80066fa:	f000 fb17 	bl	8006d2c <ov9655_write_reg>
 80066fe:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006700:	f10d 020f 	add.w	r2, sp, #15
 8006704:	4648      	mov	r0, r9
 8006706:	2301      	movs	r3, #1
 8006708:	2152      	movs	r1, #82	; 0x52
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800670a:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800670c:	f000 fb0e 	bl	8006d2c <ov9655_write_reg>
 8006710:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006712:	f10d 020f 	add.w	r2, sp, #15
 8006716:	4648      	mov	r0, r9
 8006718:	2301      	movs	r3, #1
 800671a:	2153      	movs	r1, #83	; 0x53
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800671c:	4426      	add	r6, r4
    tmp = 0x80;
 800671e:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006722:	f000 fb03 	bl	8006d2c <ov9655_write_reg>
 8006726:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006728:	f10d 020f 	add.w	r2, sp, #15
 800672c:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800672e:	4434      	add	r4, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8006730:	2301      	movs	r3, #1
 8006732:	2154      	movs	r1, #84	; 0x54
 8006734:	f000 fafa 	bl	8006d2c <ov9655_write_reg>
 8006738:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 800673a:	3800      	subs	r0, #0
 800673c:	bf18      	it	ne
 800673e:	2001      	movne	r0, #1
}
 8006740:	4240      	negs	r0, r0
 8006742:	b004      	add	sp, #16
 8006744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006748:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 800674c:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800674e:	2301      	movs	r3, #1
 8006750:	f10d 020f 	add.w	r2, sp, #15
 8006754:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8006756:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800675a:	4648      	mov	r0, r9
    tmp = 0x00;
 800675c:	2400      	movs	r4, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800675e:	f000 fae5 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006762:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006766:	9001      	str	r0, [sp, #4]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006768:	2301      	movs	r3, #1
 800676a:	214f      	movs	r1, #79	; 0x4f
 800676c:	4648      	mov	r0, r9
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800676e:	9f01      	ldr	r7, [sp, #4]
    tmp = 0x60;
 8006770:	2660      	movs	r6, #96	; 0x60
    tmp = 0x00;
 8006772:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006776:	f000 fad9 	bl	8006d2c <ov9655_write_reg>
 800677a:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800677c:	f10d 020f 	add.w	r2, sp, #15
 8006780:	2301      	movs	r3, #1
 8006782:	2150      	movs	r1, #80	; 0x50
 8006784:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006786:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006788:	f000 fad0 	bl	8006d2c <ov9655_write_reg>
 800678c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800678e:	f10d 020f 	add.w	r2, sp, #15
 8006792:	2301      	movs	r3, #1
 8006794:	2151      	movs	r1, #81	; 0x51
 8006796:	4648      	mov	r0, r9
 8006798:	f000 fac8 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800679c:	4447      	add	r7, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800679e:	4605      	mov	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80067a0:	f10d 020f 	add.w	r2, sp, #15
 80067a4:	2301      	movs	r3, #1
 80067a6:	2152      	movs	r1, #82	; 0x52
 80067a8:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80067aa:	442f      	add	r7, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80067ac:	f000 fabe 	bl	8006d2c <ov9655_write_reg>
 80067b0:	4605      	mov	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80067b2:	f10d 020f 	add.w	r2, sp, #15
 80067b6:	2301      	movs	r3, #1
 80067b8:	2153      	movs	r1, #83	; 0x53
 80067ba:	4648      	mov	r0, r9
 80067bc:	f000 fab6 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80067c0:	443d      	add	r5, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80067c2:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80067c4:	f10d 020f 	add.w	r2, sp, #15
 80067c8:	4648      	mov	r0, r9
 80067ca:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80067cc:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80067ce:	2154      	movs	r1, #84	; 0x54
    tmp = 0x60;
 80067d0:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80067d4:	f000 faaa 	bl	8006d2c <ov9655_write_reg>
 80067d8:	4420      	add	r0, r4
    break;
 80067da:	e7ae      	b.n	800673a <OV9655_SetColorEffect+0xea>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067dc:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 80067e0:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067e2:	2301      	movs	r3, #1
 80067e4:	f10d 020f 	add.w	r2, sp, #15
 80067e8:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 80067ea:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067ee:	4648      	mov	r0, r9
    tmp = 0x60;
 80067f0:	2460      	movs	r4, #96	; 0x60
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067f2:	f000 fa9b 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80067f6:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80067fa:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80067fc:	2301      	movs	r3, #1
 80067fe:	214f      	movs	r1, #79	; 0x4f
 8006800:	4648      	mov	r0, r9
    tmp = 0x60;
 8006802:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006806:	f000 fa91 	bl	8006d2c <ov9655_write_reg>
 800680a:	4680      	mov	r8, r0
    tmp = 0x00;
 800680c:	2400      	movs	r4, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800680e:	f10d 020f 	add.w	r2, sp, #15
 8006812:	4648      	mov	r0, r9
 8006814:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006816:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006818:	2150      	movs	r1, #80	; 0x50
    tmp = 0x00;
 800681a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800681e:	f000 fa85 	bl	8006d2c <ov9655_write_reg>
 8006822:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006824:	f10d 020f 	add.w	r2, sp, #15
 8006828:	2301      	movs	r3, #1
 800682a:	2151      	movs	r1, #81	; 0x51
 800682c:	4648      	mov	r0, r9
 800682e:	f000 fa7d 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006832:	44b0      	add	r8, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006834:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006836:	f10d 020f 	add.w	r2, sp, #15
 800683a:	2301      	movs	r3, #1
 800683c:	2152      	movs	r1, #82	; 0x52
 800683e:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006840:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006842:	f000 fa73 	bl	8006d2c <ov9655_write_reg>
 8006846:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006848:	f10d 020f 	add.w	r2, sp, #15
 800684c:	4648      	mov	r0, r9
 800684e:	2301      	movs	r3, #1
 8006850:	2153      	movs	r1, #83	; 0x53
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006852:	4426      	add	r6, r4
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8006854:	e765      	b.n	8006722 <OV9655_SetColorEffect+0xd2>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006856:	f100 0a18 	add.w	sl, r0, #24
    tmp = 0xCC;
 800685a:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800685c:	2301      	movs	r3, #1
 800685e:	f10d 020f 	add.w	r2, sp, #15
 8006862:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 8006864:	f04f 0900 	mov.w	r9, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006868:	4650      	mov	r0, sl
    tmp = 0xCC;
 800686a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800686e:	f000 fa5d 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006872:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006876:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006878:	2301      	movs	r3, #1
 800687a:	214f      	movs	r1, #79	; 0x4f
 800687c:	4650      	mov	r0, sl
    tmp = 0x00;
 800687e:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006882:	f000 fa53 	bl	8006d2c <ov9655_write_reg>
 8006886:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006888:	f10d 020f 	add.w	r2, sp, #15
 800688c:	2301      	movs	r3, #1
 800688e:	2150      	movs	r1, #80	; 0x50
 8006890:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006892:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006894:	f000 fa4a 	bl	8006d2c <ov9655_write_reg>
 8006898:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800689a:	f10d 020f 	add.w	r2, sp, #15
 800689e:	2301      	movs	r3, #1
 80068a0:	2151      	movs	r1, #81	; 0x51
 80068a2:	4650      	mov	r0, sl
 80068a4:	f000 fa42 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80068a8:	44b0      	add	r8, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80068aa:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80068ac:	f10d 020f 	add.w	r2, sp, #15
 80068b0:	2301      	movs	r3, #1
 80068b2:	2152      	movs	r1, #82	; 0x52
 80068b4:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80068b6:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80068b8:	f000 fa38 	bl	8006d2c <ov9655_write_reg>
    tmp = 0x80;
 80068bc:	2780      	movs	r7, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80068be:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80068c0:	f10d 020f 	add.w	r2, sp, #15
 80068c4:	2301      	movs	r3, #1
 80068c6:	2153      	movs	r1, #83	; 0x53
 80068c8:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80068ca:	4426      	add	r6, r4
    tmp = 0x80;
 80068cc:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80068d0:	f000 fa2c 	bl	8006d2c <ov9655_write_reg>
 80068d4:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80068d6:	f10d 020f 	add.w	r2, sp, #15
 80068da:	4650      	mov	r0, sl
 80068dc:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80068de:	4434      	add	r4, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80068e0:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 80068e2:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80068e6:	f000 fa21 	bl	8006d2c <ov9655_write_reg>
 80068ea:	4420      	add	r0, r4
    break;
 80068ec:	e725      	b.n	800673a <OV9655_SetColorEffect+0xea>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80068ee:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 80068f2:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80068f4:	2301      	movs	r3, #1
 80068f6:	f10d 020f 	add.w	r2, sp, #15
 80068fa:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 80068fc:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006900:	4648      	mov	r0, r9
    tmp = 0x00;
 8006902:	2400      	movs	r4, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006904:	f000 fa12 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006908:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800690c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800690e:	2301      	movs	r3, #1
 8006910:	214f      	movs	r1, #79	; 0x4f
 8006912:	4648      	mov	r0, r9
    tmp = 0x00;
 8006914:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006918:	f000 fa08 	bl	8006d2c <ov9655_write_reg>
 800691c:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800691e:	f10d 020f 	add.w	r2, sp, #15
 8006922:	4648      	mov	r0, r9
 8006924:	2301      	movs	r3, #1
 8006926:	2150      	movs	r1, #80	; 0x50
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006928:	44b8      	add	r8, r7
 800692a:	e778      	b.n	800681e <OV9655_SetColorEffect+0x1ce>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800692c:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8006930:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006932:	2301      	movs	r3, #1
 8006934:	f10d 020f 	add.w	r2, sp, #15
 8006938:	213a      	movs	r1, #58	; 0x3a
 800693a:	4648      	mov	r0, r9
    tmp = 0x00;
 800693c:	f04f 0a00 	mov.w	sl, #0
    tmp = 0xCC;
 8006940:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8006944:	f000 f9f2 	bl	8006d2c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006948:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800694c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800694e:	2301      	movs	r3, #1
 8006950:	214f      	movs	r1, #79	; 0x4f
 8006952:	4648      	mov	r0, r9
    tmp = 0x00;
 8006954:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006958:	f000 f9e8 	bl	8006d2c <ov9655_write_reg>
 800695c:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800695e:	f10d 020f 	add.w	r2, sp, #15
 8006962:	2301      	movs	r3, #1
 8006964:	2150      	movs	r1, #80	; 0x50
 8006966:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8006968:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800696a:	f000 f9df 	bl	8006d2c <ov9655_write_reg>
    tmp = 0x20;
 800696e:	f04f 0c20 	mov.w	ip, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8006972:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006974:	f10d 020f 	add.w	r2, sp, #15
 8006978:	2301      	movs	r3, #1
 800697a:	2151      	movs	r1, #81	; 0x51
 800697c:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800697e:	44b0      	add	r8, r6
    tmp = 0x20;
 8006980:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006984:	f000 f9d2 	bl	8006d2c <ov9655_write_reg>
    tmp = 0xF0;
 8006988:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800698c:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800698e:	f10d 020f 	add.w	r2, sp, #15
 8006992:	4648      	mov	r0, r9
 8006994:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8006996:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8006998:	2152      	movs	r1, #82	; 0x52
    tmp = 0xF0;
 800699a:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800699e:	e6b5      	b.n	800670c <OV9655_SetColorEffect+0xbc>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80069a0:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xEC;
 80069a4:	24ec      	movs	r4, #236	; 0xec
 80069a6:	e67f      	b.n	80066a8 <OV9655_SetColorEffect+0x58>

080069a8 <OV9655_SetBrightness>:
{
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	b084      	sub	sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80069ac:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <OV9655_SetBrightness+0x38>)
{
 80069ae:	4606      	mov	r6, r0
  tmp = brightness_level[Level + 4];
 80069b0:	ab04      	add	r3, sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80069b2:	ac01      	add	r4, sp, #4
  tmp = brightness_level[Level + 4];
 80069b4:	185d      	adds	r5, r3, r1
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80069b6:	2301      	movs	r3, #1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80069b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80069ba:	c403      	stmia	r4!, {r0, r1}
 80069bc:	7022      	strb	r2, [r4, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80069be:	f106 0018 	add.w	r0, r6, #24
  tmp = brightness_level[Level + 4];
 80069c2:	f815 4c08 	ldrb.w	r4, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80069c6:	f10d 0203 	add.w	r2, sp, #3
 80069ca:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 80069cc:	f88d 4003 	strb.w	r4, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80069d0:	f000 f9ac 	bl	8006d2c <ov9655_write_reg>
 80069d4:	3800      	subs	r0, #0
 80069d6:	bf18      	it	ne
 80069d8:	2001      	movne	r0, #1
}
 80069da:	4240      	negs	r0, r0
 80069dc:	b004      	add	sp, #16
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	08025750 	.word	0x08025750

080069e4 <OV9655_SetContrast>:
{
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	b084      	sub	sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80069e8:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <OV9655_SetContrast+0x38>)
{
 80069ea:	4606      	mov	r6, r0
  tmp = contrast_level[Level + 4];
 80069ec:	ab04      	add	r3, sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80069ee:	ac01      	add	r4, sp, #4
  tmp = contrast_level[Level + 4];
 80069f0:	185d      	adds	r5, r3, r1
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80069f2:	2301      	movs	r3, #1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80069f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80069f6:	c403      	stmia	r4!, {r0, r1}
 80069f8:	7022      	strb	r2, [r4, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80069fa:	f106 0018 	add.w	r0, r6, #24
  tmp = contrast_level[Level + 4];
 80069fe:	f815 4c08 	ldrb.w	r4, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8006a02:	f10d 0203 	add.w	r2, sp, #3
 8006a06:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 8006a08:	f88d 4003 	strb.w	r4, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8006a0c:	f000 f98e 	bl	8006d2c <ov9655_write_reg>
 8006a10:	3800      	subs	r0, #0
 8006a12:	bf18      	it	ne
 8006a14:	2001      	movne	r0, #1
}
 8006a16:	4240      	negs	r0, r0
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	0802c924 	.word	0x0802c924

08006a20 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8006a20:	f031 0302 	bics.w	r3, r1, #2
{
 8006a24:	b530      	push	{r4, r5, lr}
 8006a26:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8006a28:	d177      	bne.n	8006b1a <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006a2a:	f100 0418 	add.w	r4, r0, #24
 8006a2e:	460d      	mov	r5, r1
 8006a30:	2301      	movs	r3, #1
 8006a32:	2112      	movs	r1, #18
 8006a34:	4620      	mov	r0, r4
 8006a36:	f10d 0207 	add.w	r2, sp, #7
 8006a3a:	f000 f96f 	bl	8006d1c <ov9655_read_reg>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d16b      	bne.n	8006b1a <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8006a42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 8006a46:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8006a48:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 8006a4c:	d029      	beq.n	8006aa2 <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 8006a4e:	f043 0503 	orr.w	r5, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006a52:	f10d 0207 	add.w	r2, sp, #7
 8006a56:	2301      	movs	r3, #1
 8006a58:	2112      	movs	r1, #18
 8006a5a:	4620      	mov	r0, r4
      tmp |= 0x03U;
 8006a5c:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006a60:	f000 f964 	bl	8006d2c <ov9655_write_reg>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d158      	bne.n	8006b1a <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f10d 0207 	add.w	r2, sp, #7
 8006a6e:	2140      	movs	r1, #64	; 0x40
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 f953 	bl	8006d1c <ov9655_read_reg>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d14f      	bne.n	8006b1a <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 8006a7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f10d 0207 	add.w	r2, sp, #7
 8006a84:	2301      	movs	r3, #1
        tmp |= 0x10U;
 8006a86:	f041 0410 	orr.w	r4, r1, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006a8a:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 8006a8c:	f88d 4007 	strb.w	r4, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006a90:	f000 f94c 	bl	8006d2c <ov9655_write_reg>
 8006a94:	3800      	subs	r0, #0
 8006a96:	bf18      	it	ne
 8006a98:	2001      	movne	r0, #1
 8006a9a:	4245      	negs	r5, r0
}
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	b003      	add	sp, #12
 8006aa0:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 8006aa2:	f043 0502 	orr.w	r5, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006aa6:	f10d 0207 	add.w	r2, sp, #7
 8006aaa:	2301      	movs	r3, #1
 8006aac:	2112      	movs	r1, #18
 8006aae:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8006ab0:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006ab4:	f000 f93a 	bl	8006d2c <ov9655_write_reg>
 8006ab8:	bb78      	cbnz	r0, 8006b1a <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8006aba:	2301      	movs	r3, #1
 8006abc:	f10d 0207 	add.w	r2, sp, #7
 8006ac0:	213a      	movs	r1, #58	; 0x3a
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f92a 	bl	8006d1c <ov9655_read_reg>
 8006ac8:	bb38      	cbnz	r0, 8006b1a <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8006aca:	f89d 5007 	ldrb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f10d 0207 	add.w	r2, sp, #7
 8006ad4:	213a      	movs	r1, #58	; 0x3a
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8006ad6:	f025 052c 	bic.w	r5, r5, #44	; 0x2c
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8006ada:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8006adc:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8006ae0:	f000 f924 	bl	8006d2c <ov9655_write_reg>
 8006ae4:	b9c8      	cbnz	r0, 8006b1a <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f10d 0207 	add.w	r2, sp, #7
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f914 	bl	8006d1c <ov9655_read_reg>
 8006af4:	4605      	mov	r5, r0
 8006af6:	b9a8      	cbnz	r0, 8006b24 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8006af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006afc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b00:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006b04:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8006b08:	f10d 0207 	add.w	r2, sp, #7
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	2301      	movs	r3, #1
 8006b10:	2140      	movs	r1, #64	; 0x40
 8006b12:	f000 f90b 	bl	8006d2c <ov9655_write_reg>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d0c0      	beq.n	8006a9c <OV9655_SetPixelFormat+0x7c>
              ret = OV9655_ERROR;
 8006b1a:	f04f 35ff 	mov.w	r5, #4294967295
}
 8006b1e:	4628      	mov	r0, r5
 8006b20:	b003      	add	sp, #12
 8006b22:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 8006b24:	f04f 35ff 	mov.w	r5, #4294967295
 8006b28:	e7ee      	b.n	8006b08 <OV9655_SetPixelFormat+0xe8>
 8006b2a:	bf00      	nop

08006b2c <OV9655_GetResolution>:
{
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8006b32:	2301      	movs	r3, #1
 8006b34:	3018      	adds	r0, #24
 8006b36:	f10d 0207 	add.w	r2, sp, #7
 8006b3a:	2132      	movs	r1, #50	; 0x32
 8006b3c:	f000 f8ee 	bl	8006d1c <ov9655_read_reg>
 8006b40:	b938      	cbnz	r0, 8006b52 <OV9655_GetResolution+0x26>
    switch (tmp)
 8006b42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b46:	2ba4      	cmp	r3, #164	; 0xa4
 8006b48:	d007      	beq.n	8006b5a <OV9655_GetResolution+0x2e>
 8006b4a:	2bff      	cmp	r3, #255	; 0xff
 8006b4c:	d00c      	beq.n	8006b68 <OV9655_GetResolution+0x3c>
 8006b4e:	2b12      	cmp	r3, #18
 8006b50:	d006      	beq.n	8006b60 <OV9655_GetResolution+0x34>
    ret = OV9655_ERROR;
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006b56:	b002      	add	sp, #8
 8006b58:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 8006b5a:	6020      	str	r0, [r4, #0]
}
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 8006b60:	2301      	movs	r3, #1
 8006b62:	6023      	str	r3, [r4, #0]
}
 8006b64:	b002      	add	sp, #8
 8006b66:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	6023      	str	r3, [r4, #0]
}
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <OV9655_ReadID>:
{
 8006b70:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8006b72:	4604      	mov	r4, r0
{
 8006b74:	b083      	sub	sp, #12
 8006b76:	460d      	mov	r5, r1
  pObj->IO.Init();
 8006b78:	f854 3b18 	ldr.w	r3, [r4], #24
 8006b7c:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 8006b7e:	f10d 0207 	add.w	r2, sp, #7
 8006b82:	4620      	mov	r0, r4
 8006b84:	2301      	movs	r3, #1
 8006b86:	210a      	movs	r1, #10
 8006b88:	f000 f8c8 	bl	8006d1c <ov9655_read_reg>
 8006b8c:	b990      	cbnz	r0, 8006bb4 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 8006b8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8006b92:	4620      	mov	r0, r4
 8006b94:	f10d 0207 	add.w	r2, sp, #7
 8006b98:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 8006b9a:	020c      	lsls	r4, r1, #8
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8006b9c:	210b      	movs	r1, #11
      *Id = (uint32_t)tmp << 8U;
 8006b9e:	602c      	str	r4, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8006ba0:	f000 f8bc 	bl	8006d1c <ov9655_read_reg>
 8006ba4:	b930      	cbnz	r0, 8006bb4 <OV9655_ReadID+0x44>
        *Id |= tmp;
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	602b      	str	r3, [r5, #0]
}
 8006bb0:	b003      	add	sp, #12
 8006bb2:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	e7fa      	b.n	8006bb0 <OV9655_ReadID+0x40>
 8006bba:	bf00      	nop

08006bbc <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8006bbc:	2903      	cmp	r1, #3
 8006bbe:	d824      	bhi.n	8006c0a <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006bc0:	2301      	movs	r3, #1
{
 8006bc2:	b570      	push	{r4, r5, r6, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006bc4:	f100 0418 	add.w	r4, r0, #24
{
 8006bc8:	b082      	sub	sp, #8
 8006bca:	460e      	mov	r6, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006bcc:	211e      	movs	r1, #30
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f10d 0207 	add.w	r2, sp, #7
 8006bd4:	f000 f8a2 	bl	8006d1c <ov9655_read_reg>
 8006bd8:	b9a0      	cbnz	r0, 8006c04 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8006bda:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006bde:	4620      	mov	r0, r4
 8006be0:	f10d 0207 	add.w	r2, sp, #7
 8006be4:	2301      	movs	r3, #1
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8006be6:	f025 0530 	bic.w	r5, r5, #48	; 0x30
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006bea:	211e      	movs	r1, #30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 8006bec:	ea45 1406 	orr.w	r4, r5, r6, lsl #4
 8006bf0:	f88d 4007 	strb.w	r4, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8006bf4:	f000 f89a 	bl	8006d2c <ov9655_write_reg>
 8006bf8:	3800      	subs	r0, #0
 8006bfa:	bf18      	it	ne
 8006bfc:	2001      	movne	r0, #1
 8006bfe:	4240      	negs	r0, r0
}
 8006c00:	b002      	add	sp, #8
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e7fa      	b.n	8006c00 <OV9655_MirrorFlipConfig+0x44>
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006c0e:	4770      	bx	lr

08006c10 <OV9655_NightModeConfig>:
{
 8006c10:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8006c12:	f100 0418 	add.w	r4, r0, #24
{
 8006c16:	b083      	sub	sp, #12
 8006c18:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f10d 0207 	add.w	r2, sp, #7
 8006c20:	213b      	movs	r1, #59	; 0x3b
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 f87a 	bl	8006d1c <ov9655_read_reg>
 8006c28:	b9b0      	cbnz	r0, 8006c58 <OV9655_NightModeConfig+0x48>
    if(Cmd == NIGHT_MODE_ENABLE)
 8006c2a:	2d01      	cmp	r5, #1
      tmp |= 0x80U;
 8006c2c:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8006c30:	f10d 0207 	add.w	r2, sp, #7
 8006c34:	4620      	mov	r0, r4
      tmp |= 0x80U;
 8006c36:	bf0c      	ite	eq
 8006c38:	f045 0580 	orreq.w	r5, r5, #128	; 0x80
      tmp &= 0x7FU;
 8006c3c:	f005 057f 	andne.w	r5, r5, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8006c40:	2301      	movs	r3, #1
 8006c42:	213b      	movs	r1, #59	; 0x3b
 8006c44:	f88d 5007 	strb.w	r5, [sp, #7]
 8006c48:	f000 f870 	bl	8006d2c <ov9655_write_reg>
 8006c4c:	3800      	subs	r0, #0
 8006c4e:	bf18      	it	ne
 8006c50:	2001      	movne	r0, #1
 8006c52:	4240      	negs	r0, r0
}
 8006c54:	b003      	add	sp, #12
 8006c56:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006c5c:	e7fa      	b.n	8006c54 <OV9655_NightModeConfig+0x44>
 8006c5e:	bf00      	nop

08006c60 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 8006c60:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006c64:	bb5b      	cbnz	r3, 8006cbe <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8006c66:	2903      	cmp	r1, #3
{
 8006c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c6a:	460e      	mov	r6, r1
 8006c6c:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8006c6e:	d828      	bhi.n	8006cc2 <OV9655_Init+0x62>
 8006c70:	f032 0302 	bics.w	r3, r2, #2
 8006c74:	4617      	mov	r7, r2
 8006c76:	d124      	bne.n	8006cc2 <OV9655_Init+0x62>
      tmp = 0x80U;
 8006c78:	2580      	movs	r5, #128	; 0x80
 8006c7a:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f10d 0207 	add.w	r2, sp, #7
 8006c82:	2112      	movs	r1, #18
 8006c84:	3018      	adds	r0, #24
      tmp = 0x80U;
 8006c86:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8006c8a:	f000 f84f 	bl	8006d2c <ov9655_write_reg>
 8006c8e:	b9c0      	cbnz	r0, 8006cc2 <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 8006c90:	6963      	ldr	r3, [r4, #20]
 8006c92:	4798      	blx	r3
 8006c94:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006c96:	6963      	ldr	r3, [r4, #20]
 8006c98:	4798      	blx	r3
 8006c9a:	1b43      	subs	r3, r0, r5
 8006c9c:	2bc7      	cmp	r3, #199	; 0xc7
 8006c9e:	d9fa      	bls.n	8006c96 <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff fbe6 	bl	8006474 <OV9655_SetResolution>
 8006ca8:	b958      	cbnz	r0, 8006cc2 <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8006caa:	4639      	mov	r1, r7
 8006cac:	4620      	mov	r0, r4
 8006cae:	f7ff feb7 	bl	8006a20 <OV9655_SetPixelFormat>
 8006cb2:	b930      	cbnz	r0, 8006cc2 <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8006cba:	b003      	add	sp, #12
 8006cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 8006cbe:	2000      	movs	r0, #0
}
 8006cc0:	4770      	bx	lr
      ret = OV9655_ERROR;
 8006cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc6:	e7f8      	b.n	8006cba <OV9655_Init+0x5a>

08006cc8 <OV9655_SetHueDegree>:
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop

08006cd0 <OV9655_ZoomConfig>:
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop

08006cd8 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 8006cd8:	b1c0      	cbz	r0, 8006d0c <OV9655_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006cda:	68ca      	ldr	r2, [r1, #12]
{
 8006cdc:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 8006cde:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8006ce2:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8006ce4:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8006ce8:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8006cec:	4909      	ldr	r1, [pc, #36]	; (8006d14 <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006cee:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8006cf0:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <OV9655_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 8006cf2:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8006cf4:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006cf6:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8006cfa:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if(pObj->IO.Init != NULL)
 8006cfe:	b10b      	cbz	r3, 8006d04 <OV9655_RegisterBusIO+0x2c>
}
 8006d00:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 8006d02:	4718      	bx	r3
}
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	bc70      	pop	{r4, r5, r6}
 8006d0a:	4770      	bx	lr
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	08006455 	.word	0x08006455
 8006d18:	08006465 	.word	0x08006465

08006d1c <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8006d1c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006d1e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006d22:	46a4      	mov	ip, r4
}
 8006d24:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006d28:	4760      	bx	ip
 8006d2a:	bf00      	nop

08006d2c <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8006d2c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8006d2e:	6804      	ldr	r4, [r0, #0]
 8006d30:	6880      	ldr	r0, [r0, #8]
 8006d32:	46a4      	mov	ip, r4
}
 8006d34:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8006d38:	4760      	bx	ip
 8006d3a:	bf00      	nop

08006d3c <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8006d3c:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <BSP_LED_Init+0x50>)
{
 8006d3e:	4603      	mov	r3, r0
  LEDx_GPIO_CLK_ENABLE();
 8006d40:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
{
 8006d44:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE();
 8006d46:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8006d4a:	4d11      	ldr	r5, [pc, #68]	; (8006d90 <BSP_LED_Init+0x54>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006d4c:	4e11      	ldr	r6, [pc, #68]	; (8006d94 <BSP_LED_Init+0x58>)
{
 8006d4e:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE();
 8006d50:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d54:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8006d56:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006d5a:	a903      	add	r1, sp, #12
  LEDx_GPIO_CLK_ENABLE();
 8006d5c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006d60:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d64:	2603      	movs	r6, #3
  LEDx_GPIO_CLK_ENABLE();
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8006d6a:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006d6c:	9001      	str	r0, [sp, #4]
  LEDx_GPIO_CLK_ENABLE();
 8006d6e:	9302      	str	r3, [sp, #8]
 8006d70:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d72:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d74:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006d78:	f004 fdcc 	bl	800b914 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8006d7c:	9801      	ldr	r0, [sp, #4]
 8006d7e:	4622      	mov	r2, r4
 8006d80:	b2a9      	uxth	r1, r5
 8006d82:	f004 ffb9 	bl	800bcf8 <HAL_GPIO_WritePin>
 return ret;
}
 8006d86:	2000      	movs	r0, #0
 8006d88:	b008      	add	sp, #32
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	0802cbfc 	.word	0x0802cbfc
 8006d94:	0802cc0c 	.word	0x0802cc0c

08006d98 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 8006d98:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8006d9a:	4905      	ldr	r1, [pc, #20]	; (8006db0 <BSP_LED_On+0x18>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <BSP_LED_On+0x1c>)
 8006da0:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 8006da4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006da8:	f004 ffa6 	bl	800bcf8 <HAL_GPIO_WritePin>
  return ret;
}
 8006dac:	2000      	movs	r0, #0
 8006dae:	bd08      	pop	{r3, pc}
 8006db0:	0802cbfc 	.word	0x0802cbfc
 8006db4:	0802cc0c 	.word	0x0802cc0c

08006db8 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 8006db8:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8006dba:	4905      	ldr	r1, [pc, #20]	; (8006dd0 <BSP_LED_Off+0x18>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <BSP_LED_Off+0x1c>)
 8006dc0:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 8006dc4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006dc8:	f004 ff96 	bl	800bcf8 <HAL_GPIO_WritePin>
  return ret;
}
 8006dcc:	2000      	movs	r0, #0
 8006dce:	bd08      	pop	{r3, pc}
 8006dd0:	0802cbfc 	.word	0x0802cbfc
 8006dd4:	0802cc0c 	.word	0x0802cc0c

08006dd8 <BSP_LED_Toggle>:
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8006dd8:	4a05      	ldr	r2, [pc, #20]	; (8006df0 <BSP_LED_Toggle+0x18>)
{
 8006dda:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <BSP_LED_Toggle+0x1c>)
 8006dde:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 8006de2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006de6:	f004 ff8b 	bl	800bd00 <HAL_GPIO_TogglePin>
  return ret;
}
 8006dea:	2000      	movs	r0, #0
 8006dec:	bd08      	pop	{r3, pc}
 8006dee:	bf00      	nop
 8006df0:	0802cbfc 	.word	0x0802cbfc
 8006df4:	0802cc0c 	.word	0x0802cc0c

08006df8 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8006df8:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <BSP_PB_Init+0x7c>)
  gpio_init_structure.Pin = BUTTON_PIN [Button];
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;

  if(ButtonMode == BUTTON_MODE_GPIO)
 8006dfa:	460b      	mov	r3, r1
  gpio_init_structure.Pull = GPIO_NOPULL;
 8006dfc:	2102      	movs	r1, #2
{
 8006dfe:	b570      	push	{r4, r5, r6, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8006e00:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
{
 8006e04:	b088      	sub	sp, #32
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8006e06:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{
 8006e0a:	4605      	mov	r5, r0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8006e0c:	f044 0404 	orr.w	r4, r4, #4
  gpio_init_structure.Pull = GPIO_NOPULL;
 8006e10:	2000      	movs	r0, #0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8006e12:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8006e16:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8006e1a:	9602      	str	r6, [sp, #8]
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8006e1c:	f002 0204 	and.w	r2, r2, #4
 8006e20:	9201      	str	r2, [sp, #4]
 8006e22:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8006e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8006e28:	b93b      	cbnz	r3, 8006e3a <BSP_PB_Init+0x42>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8006e2a:	a902      	add	r1, sp, #8
 8006e2c:	4812      	ldr	r0, [pc, #72]	; (8006e78 <BSP_PB_Init+0x80>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006e2e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8006e30:	f004 fd70 	bl	800b914 <HAL_GPIO_Init>
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  return BSP_ERROR_NONE;
}
 8006e34:	2000      	movs	r0, #0
 8006e36:	b008      	add	sp, #32
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8006e3a:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <BSP_PB_Init+0x84>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006e3c:	a902      	add	r1, sp, #8
 8006e3e:	480e      	ldr	r0, [pc, #56]	; (8006e78 <BSP_PB_Init+0x80>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8006e40:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006e42:	f004 fd67 	bl	800b914 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8006e46:	480e      	ldr	r0, [pc, #56]	; (8006e80 <BSP_PB_Init+0x88>)
 8006e48:	490e      	ldr	r1, [pc, #56]	; (8006e84 <BSP_PB_Init+0x8c>)
 8006e4a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f004 fd5a 	bl	800b908 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8006e54:	4628      	mov	r0, r5
 8006e56:	4a0c      	ldr	r2, [pc, #48]	; (8006e88 <BSP_PB_Init+0x90>)
 8006e58:	2100      	movs	r1, #0
 8006e5a:	f004 fd4d 	bl	800b8f8 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006e5e:	2200      	movs	r2, #0
 8006e60:	210f      	movs	r1, #15
 8006e62:	2028      	movs	r0, #40	; 0x28
 8006e64:	f002 f86c 	bl	8008f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006e68:	2028      	movs	r0, #40	; 0x28
 8006e6a:	f002 f8a3 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b008      	add	sp, #32
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	58024400 	.word	0x58024400
 8006e78:	58020800 	.word	0x58020800
 8006e7c:	11110000 	.word	0x11110000
 8006e80:	3000f65c 	.word	0x3000f65c
 8006e84:	1670000d 	.word	0x1670000d
 8006e88:	08006ea5 	.word	0x08006ea5

08006e8c <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e90:	4802      	ldr	r0, [pc, #8]	; (8006e9c <BSP_PB_GetState+0x10>)
{
 8006e92:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006e94:	f004 ff2a 	bl	800bcec <HAL_GPIO_ReadPin>
}
 8006e98:	bd08      	pop	{r3, pc}
 8006e9a:	bf00      	nop
 8006e9c:	58020800 	.word	0x58020800

08006ea0 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop

08006ea4 <BUTTON_WAKEUP_EXTI_Callback>:
  BSP_PB_Callback(BUTTON_WAKEUP);
 8006ea4:	2000      	movs	r0, #0
{
 8006ea6:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 8006ea8:	f7ff fffa 	bl	8006ea0 <BSP_PB_Callback>
}
 8006eac:	bd08      	pop	{r3, pc}
 8006eae:	bf00      	nop

08006eb0 <BSP_JOY_Init>:
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 8006eb0:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006fc8 <BSP_JOY_Init+0x118>
{
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JoyPinsMask |= (uint32_t)JoyPins;
 8006eb8:	f8dc 3000 	ldr.w	r3, [ip]
 8006ebc:	fab0 f880 	clz	r8, r0
{
 8006ec0:	b08f      	sub	sp, #60	; 0x3c
 8006ec2:	4615      	mov	r5, r2
  JoyPinsMask |= (uint32_t)JoyPins;
 8006ec4:	4313      	orrs	r3, r2
{
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	ea4f 1858 	mov.w	r8, r8, lsr #5

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8006ecc:	2400      	movs	r4, #0
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8006ece:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8006fcc <BSP_JOY_Init+0x11c>
        gpio_init_structure.Pull = GPIO_PULLUP;
 8006ed2:	2601      	movs	r6, #1
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ed4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8006fd0 <BSP_JOY_Init+0x120>
        gpio_init_structure.Pull = GPIO_PULLUP;
 8006ed8:	2703      	movs	r7, #3
  JoyPinsMask |= (uint32_t)JoyPins;
 8006eda:	f8cc 3000 	str.w	r3, [ip]
    key_pressed = 1UL << joykey;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 8006ee2:	43ab      	bics	r3, r5
 8006ee4:	d102      	bne.n	8006eec <BSP_JOY_Init+0x3c>
 8006ee6:	f1b8 0f00 	cmp.w	r8, #0
 8006eea:	d106      	bne.n	8006efa <BSP_JOY_Init+0x4a>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8006eec:	3401      	adds	r4, #1
 8006eee:	2c05      	cmp	r4, #5
 8006ef0:	d1f5      	bne.n	8006ede <BSP_JOY_Init+0x2e>
      }
    }
  }

  return ret;
}
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	b00f      	add	sp, #60	; 0x3c
 8006ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 8006efa:	4b2c      	ldr	r3, [pc, #176]	; (8006fac <BSP_JOY_Init+0xfc>)
 8006efc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 8006f10:	2c00      	cmp	r4, #0
 8006f12:	d03e      	beq.n	8006f92 <BSP_JOY_Init+0xe2>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 8006f14:	2c01      	cmp	r4, #1
 8006f16:	d03f      	beq.n	8006f98 <BSP_JOY_Init+0xe8>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8006f18:	2c02      	cmp	r4, #2
 8006f1a:	d040      	beq.n	8006f9e <BSP_JOY_Init+0xee>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 8006f1c:	2c03      	cmp	r4, #3
 8006f1e:	d041      	beq.n	8006fa4 <BSP_JOY_Init+0xf4>
            JOY1_UP_GPIO_CLK_ENABLE();
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	9b07      	ldr	r3, [sp, #28]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8006f24:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8006f28:	a908      	add	r1, sp, #32
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8006f2a:	9308      	str	r3, [sp, #32]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8006f2c:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <BSP_JOY_Init+0x100>)
        gpio_init_structure.Pull = GPIO_PULLUP;
 8006f2e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
        if (JoyMode == JOY_MODE_GPIO)
 8006f32:	f1b9 0f00 	cmp.w	r9, #0
 8006f36:	d106      	bne.n	8006f46 <BSP_JOY_Init+0x96>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8006f38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006f3c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8006f40:	f004 fce8 	bl	800b914 <HAL_GPIO_Init>
 8006f44:	e7d2      	b.n	8006eec <BSP_JOY_Init+0x3c>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8006f46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006f4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8006f4e:	f004 fce1 	bl	800b914 <HAL_GPIO_Init>
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <BSP_JOY_Init+0x104>)
 8006f54:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <BSP_JOY_Init+0x108>)
 8006f56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f5a:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	f004 fcd1 	bl	800b908 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <BSP_JOY_Init+0x10c>)
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8006f72:	f004 fcc1 	bl	800b8f8 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 8006f76:	4912      	ldr	r1, [pc, #72]	; (8006fc0 <BSP_JOY_Init+0x110>)
 8006f78:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <BSP_JOY_Init+0x114>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f931 0014 	ldrsh.w	r0, [r1, r4, lsl #1]
 8006f80:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8006f84:	9001      	str	r0, [sp, #4]
 8006f86:	f001 ffdb 	bl	8008f40 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 8006f8a:	9801      	ldr	r0, [sp, #4]
 8006f8c:	f002 f812 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
 8006f90:	e7ac      	b.n	8006eec <BSP_JOY_Init+0x3c>
          JOY1_SEL_GPIO_CLK_ENABLE();
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	e7c5      	b.n	8006f24 <BSP_JOY_Init+0x74>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	e7c2      	b.n	8006f24 <BSP_JOY_Init+0x74>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	9b05      	ldr	r3, [sp, #20]
 8006fa2:	e7bf      	b.n	8006f24 <BSP_JOY_Init+0x74>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 8006fa4:	9306      	str	r3, [sp, #24]
 8006fa6:	9b06      	ldr	r3, [sp, #24]
 8006fa8:	e7bc      	b.n	8006f24 <BSP_JOY_Init+0x74>
 8006faa:	bf00      	nop
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	0802cbc0 	.word	0x0802cbc0
 8006fb4:	30007678 	.word	0x30007678
 8006fb8:	0802cbd4 	.word	0x0802cbd4
 8006fbc:	0802cbe8 	.word	0x0802cbe8
 8006fc0:	0802cba8 	.word	0x0802cba8
 8006fc4:	0802cb94 	.word	0x0802cb94
 8006fc8:	30007674 	.word	0x30007674
 8006fcc:	0802cbb4 	.word	0x0802cbb4
 8006fd0:	11310000 	.word	0x11310000

08006fd4 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 8006fd4:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 8006fd6:	4d21      	ldr	r5, [pc, #132]	; (800705c <BSP_JOY_GetState+0x88>)
 8006fd8:	fab0 f480 	clz	r4, r0
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	0964      	lsrs	r4, r4, #5
    {
      if(JOY == JOY1)
 8006fe0:	07db      	lsls	r3, r3, #31
 8006fe2:	d500      	bpl.n	8006fe6 <BSP_JOY_GetState+0x12>
 8006fe4:	b98c      	cbnz	r4, 800700a <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8006fe6:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8006fe8:	0798      	lsls	r0, r3, #30
 8006fea:	d500      	bpl.n	8006fee <BSP_JOY_GetState+0x1a>
 8006fec:	b9ac      	cbnz	r4, 800701a <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8006fee:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8006ff0:	0759      	lsls	r1, r3, #29
 8006ff2:	d500      	bpl.n	8006ff6 <BSP_JOY_GetState+0x22>
 8006ff4:	b9cc      	cbnz	r4, 800702a <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8006ff6:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8006ff8:	071a      	lsls	r2, r3, #28
 8006ffa:	d500      	bpl.n	8006ffe <BSP_JOY_GetState+0x2a>
 8006ffc:	b9ec      	cbnz	r4, 800703a <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8006ffe:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8007000:	06db      	lsls	r3, r3, #27
 8007002:	d500      	bpl.n	8007006 <BSP_JOY_GetState+0x32>
 8007004:	bb0c      	cbnz	r4, 800704a <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 8007006:	2000      	movs	r0, #0

}
 8007008:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800700a:	2104      	movs	r1, #4
 800700c:	4814      	ldr	r0, [pc, #80]	; (8007060 <BSP_JOY_GetState+0x8c>)
 800700e:	f004 fe6d 	bl	800bcec <HAL_GPIO_ReadPin>
 8007012:	2801      	cmp	r0, #1
 8007014:	d0e7      	beq.n	8006fe6 <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 8007016:	2001      	movs	r0, #1
}
 8007018:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800701a:	2108      	movs	r1, #8
 800701c:	4810      	ldr	r0, [pc, #64]	; (8007060 <BSP_JOY_GetState+0x8c>)
 800701e:	f004 fe65 	bl	800bcec <HAL_GPIO_ReadPin>
 8007022:	2801      	cmp	r0, #1
 8007024:	d0e3      	beq.n	8006fee <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 8007026:	2002      	movs	r0, #2
}
 8007028:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800702a:	2110      	movs	r1, #16
 800702c:	480c      	ldr	r0, [pc, #48]	; (8007060 <BSP_JOY_GetState+0x8c>)
 800702e:	f004 fe5d 	bl	800bcec <HAL_GPIO_ReadPin>
 8007032:	2801      	cmp	r0, #1
 8007034:	d0df      	beq.n	8006ff6 <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 8007036:	2004      	movs	r0, #4
}
 8007038:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800703a:	2120      	movs	r1, #32
 800703c:	4808      	ldr	r0, [pc, #32]	; (8007060 <BSP_JOY_GetState+0x8c>)
 800703e:	f004 fe55 	bl	800bcec <HAL_GPIO_ReadPin>
 8007042:	2801      	cmp	r0, #1
 8007044:	d0db      	beq.n	8006ffe <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 8007046:	2008      	movs	r0, #8
}
 8007048:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800704a:	2140      	movs	r1, #64	; 0x40
 800704c:	4804      	ldr	r0, [pc, #16]	; (8007060 <BSP_JOY_GetState+0x8c>)
 800704e:	f004 fe4d 	bl	800bcec <HAL_GPIO_ReadPin>
 8007052:	2801      	cmp	r0, #1
 8007054:	d0d7      	beq.n	8007006 <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 8007056:	2010      	movs	r0, #16
}
 8007058:	bd38      	pop	{r3, r4, r5, pc}
 800705a:	bf00      	nop
 800705c:	30007674 	.word	0x30007674
 8007060:	58022800 	.word	0x58022800

08007064 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop

08007068 <JOY1_UP_EXTI_Callback>:
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_UP);
 8007068:	2110      	movs	r1, #16
 800706a:	2000      	movs	r0, #0
{
 800706c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 800706e:	f7ff fff9 	bl	8007064 <BSP_JOY_Callback>
}
 8007072:	bd08      	pop	{r3, pc}

08007074 <JOY1_RIGHT_EXTI_Callback>:
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8007074:	2108      	movs	r1, #8
 8007076:	2000      	movs	r0, #0
{
 8007078:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 800707a:	f7ff fff3 	bl	8007064 <BSP_JOY_Callback>
}
 800707e:	bd08      	pop	{r3, pc}

08007080 <JOY1_LEFT_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8007080:	2104      	movs	r1, #4
 8007082:	2000      	movs	r0, #0
{
 8007084:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8007086:	f7ff ffed 	bl	8007064 <BSP_JOY_Callback>
}
 800708a:	bd08      	pop	{r3, pc}

0800708c <JOY1_DOWN_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 800708c:	2102      	movs	r1, #2
 800708e:	2000      	movs	r0, #0
{
 8007090:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8007092:	f7ff ffe7 	bl	8007064 <BSP_JOY_Callback>
}
 8007096:	bd08      	pop	{r3, pc}

08007098 <JOY1_SEL_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8007098:	2101      	movs	r1, #1
 800709a:	2000      	movs	r0, #0
{
 800709c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 800709e:	f7ff ffe1 	bl	8007064 <BSP_JOY_Callback>
}
 80070a2:	bd08      	pop	{r3, pc}

080070a4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80070a4:	4a10      	ldr	r2, [pc, #64]	; (80070e8 <BSP_I2C4_DeInit+0x44>)
{
 80070a6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80070a8:	6813      	ldr	r3, [r2, #0]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80070ae:	b10b      	cbz	r3, 80070b4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80070b0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80070b2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80070b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070b8:	480c      	ldr	r0, [pc, #48]	; (80070ec <BSP_I2C4_DeInit+0x48>)
 80070ba:	f004 fd49 	bl	800bb50 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80070be:	480b      	ldr	r0, [pc, #44]	; (80070ec <BSP_I2C4_DeInit+0x48>)
 80070c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070c4:	f004 fd44 	bl	800bb50 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80070c8:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80070ca:	480a      	ldr	r0, [pc, #40]	; (80070f4 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80070cc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80070d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80070d8:	f004 ff24 	bl	800bf24 <HAL_I2C_DeInit>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d0e7      	beq.n	80070b0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80070e0:	f06f 0007 	mvn.w	r0, #7
}
 80070e4:	bd08      	pop	{r3, pc}
 80070e6:	bf00      	nop
 80070e8:	300076a0 	.word	0x300076a0
 80070ec:	58020c00 	.word	0x58020c00
 80070f0:	58024400 	.word	0x58024400
 80070f4:	3000f664 	.word	0x3000f664

080070f8 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 80070f8:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80070fa:	2201      	movs	r2, #1
{
 80070fc:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80070fe:	6041      	str	r1, [r0, #4]
{
 8007100:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007102:	6203      	str	r3, [r0, #32]
  hI2c->Init.OwnAddress1      = 0;
 8007104:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8007108:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800710c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007110:	f004 feb2 	bl	800be78 <HAL_I2C_Init>
 8007114:	b108      	cbz	r0, 800711a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8007116:	2001      	movs	r0, #1
}
 8007118:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800711a:	4601      	mov	r1, r0
 800711c:	4620      	mov	r0, r4
 800711e:	f005 f98f 	bl	800c440 <HAL_I2CEx_ConfigAnalogFilter>
 8007122:	2800      	cmp	r0, #0
 8007124:	d1f7      	bne.n	8007116 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007126:	4601      	mov	r1, r0
 8007128:	4620      	mov	r0, r4
 800712a:	f005 f9b5 	bl	800c498 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800712e:	3800      	subs	r0, #0
 8007130:	bf18      	it	ne
 8007132:	2001      	movne	r0, #1
}
 8007134:	bd10      	pop	{r4, pc}
 8007136:	bf00      	nop

08007138 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8007138:	4b95      	ldr	r3, [pc, #596]	; (8007390 <BSP_I2C4_Init+0x258>)
  hbus_i2c4.Instance = BUS_I2C4;
 800713a:	4896      	ldr	r0, [pc, #600]	; (8007394 <BSP_I2C4_Init+0x25c>)
  if (I2c4InitCounter == 0U)
 800713c:	681a      	ldr	r2, [r3, #0]
{
 800713e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007142:	b09d      	sub	sp, #116	; 0x74
  if (I2c4InitCounter == 0U)
 8007144:	4611      	mov	r1, r2
 8007146:	9200      	str	r2, [sp, #0]
  hbus_i2c4.Instance = BUS_I2C4;
 8007148:	4a93      	ldr	r2, [pc, #588]	; (8007398 <BSP_I2C4_Init+0x260>)
 800714a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800714c:	b119      	cbz	r1, 8007156 <BSP_I2C4_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800714e:	2000      	movs	r0, #0
}
 8007150:	b01d      	add	sp, #116	; 0x74
 8007152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800715a:	f005 f96b 	bl	800c434 <HAL_I2C_GetState>
 800715e:	2800      	cmp	r0, #0
 8007160:	d1f5      	bne.n	800714e <BSP_I2C4_Init+0x16>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007162:	4c8e      	ldr	r4, [pc, #568]	; (800739c <BSP_I2C4_Init+0x264>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8007164:	2600      	movs	r6, #0
 8007166:	2702      	movs	r7, #2
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007168:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800716a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800716e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8007172:	f04f 0912 	mov.w	r9, #18
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007176:	a916      	add	r1, sp, #88	; 0x58
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007178:	f043 0308 	orr.w	r3, r3, #8
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800717c:	4888      	ldr	r0, [pc, #544]	; (80073a0 <BSP_I2C4_Init+0x268>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800717e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8007182:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007186:	f003 0308 	and.w	r3, r3, #8
 800718a:	9313      	str	r3, [sp, #76]	; 0x4c
 800718c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800718e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007192:	f043 0308 	orr.w	r3, r3, #8
 8007196:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800719a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800719e:	951a      	str	r5, [sp, #104]	; 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	9314      	str	r3, [sp, #80]	; 0x50
 80071a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80071a8:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 80071ac:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80071b0:	f004 fbb0 	bl	800b914 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80071b4:	2312      	movs	r3, #18
 80071b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80071ba:	a916      	add	r1, sp, #88	; 0x58
 80071bc:	4878      	ldr	r0, [pc, #480]	; (80073a0 <BSP_I2C4_Init+0x268>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80071be:	951a      	str	r5, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80071c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80071c4:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80071c8:	f004 fba4 	bl	800b914 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80071cc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80071d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80071d8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80071dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e0:	9315      	str	r3, [sp, #84]	; 0x54
 80071e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_FORCE_RESET();
 80071e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80071e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ec:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 80071f0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80071f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80071fc:	f006 faee 	bl	800d7dc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8007200:	2800      	cmp	r0, #0
 8007202:	f000 81bf 	beq.w	8007584 <BSP_I2C4_Init+0x44c>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007206:	4b67      	ldr	r3, [pc, #412]	; (80073a4 <BSP_I2C4_Init+0x26c>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007208:	f06f 011d 	mvn.w	r1, #29
 800720c:	4c66      	ldr	r4, [pc, #408]	; (80073a8 <BSP_I2C4_Init+0x270>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800720e:	f640 12f6 	movw	r2, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007212:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007216:	f8dd e000 	ldr.w	lr, [sp]
 800721a:	6825      	ldr	r5, [r4, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800721c:	2610      	movs	r6, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800721e:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80073ac <BSP_I2C4_Init+0x274>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007222:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8007226:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800722a:	4604      	mov	r4, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800722c:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007230:	4681      	mov	r9, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007232:	1acb      	subs	r3, r1, r3
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007234:	9002      	str	r0, [sp, #8]
  if (tsdadel_min <= 0)
 8007236:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800723a:	0062      	lsls	r2, r4, #1
 800723c:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007240:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8007244:	9211      	str	r2, [sp, #68]	; 0x44
 8007246:	462b      	mov	r3, r5
 8007248:	4654      	mov	r4, sl
 800724a:	4672      	mov	r2, lr
 800724c:	9010      	str	r0, [sp, #64]	; 0x40
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800724e:	9001      	str	r0, [sp, #4]
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007250:	2100      	movs	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8007252:	ebb4 0f49 	cmp.w	r4, r9, lsl #1
 8007256:	eb09 0549 	add.w	r5, r9, r9, lsl #1
 800725a:	4648      	mov	r0, r9
 800725c:	bf94      	ite	ls
 800725e:	f04f 0801 	movls.w	r8, #1
 8007262:	4688      	movhi	r8, r1
 8007264:	ebbb 0f49 	cmp.w	fp, r9, lsl #1
 8007268:	46ae      	mov	lr, r5
 800726a:	f008 0701 	and.w	r7, r8, #1
 800726e:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8007272:	bf38      	it	cc
 8007274:	2700      	movcc	r7, #0
 8007276:	42ac      	cmp	r4, r5
 8007278:	bf8c      	ite	hi
 800727a:	2500      	movhi	r5, #0
 800727c:	2501      	movls	r5, #1
 800727e:	45f3      	cmp	fp, lr
 8007280:	9703      	str	r7, [sp, #12]
 8007282:	bf38      	it	cc
 8007284:	2500      	movcc	r5, #0
 8007286:	ebb4 0f89 	cmp.w	r4, r9, lsl #2
 800728a:	bf94      	ite	ls
 800728c:	f04f 0801 	movls.w	r8, #1
 8007290:	4688      	movhi	r8, r1
 8007292:	ebbb 0f89 	cmp.w	fp, r9, lsl #2
 8007296:	9504      	str	r5, [sp, #16]
 8007298:	f008 0701 	and.w	r7, r8, #1
 800729c:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 80072a0:	bf38      	it	cc
 80072a2:	2700      	movcc	r7, #0
 80072a4:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
 80072a8:	4544      	cmp	r4, r8
 80072aa:	9705      	str	r7, [sp, #20]
 80072ac:	bf8c      	ite	hi
 80072ae:	2700      	movhi	r7, #0
 80072b0:	2701      	movls	r7, #1
 80072b2:	45c3      	cmp	fp, r8
 80072b4:	bf38      	it	cc
 80072b6:	2700      	movcc	r7, #0
 80072b8:	ebb4 0f4e 	cmp.w	r4, lr, lsl #1
 80072bc:	9706      	str	r7, [sp, #24]
 80072be:	eb09 0748 	add.w	r7, r9, r8, lsl #1
 80072c2:	970b      	str	r7, [sp, #44]	; 0x2c
 80072c4:	bf94      	ite	ls
 80072c6:	2701      	movls	r7, #1
 80072c8:	460f      	movhi	r7, r1
 80072ca:	ebbb 0f4e 	cmp.w	fp, lr, lsl #1
 80072ce:	9707      	str	r7, [sp, #28]
 80072d0:	eb09 078e 	add.w	r7, r9, lr, lsl #2
 80072d4:	970c      	str	r7, [sp, #48]	; 0x30
 80072d6:	9f07      	ldr	r7, [sp, #28]
 80072d8:	f007 0701 	and.w	r7, r7, #1
 80072dc:	bf38      	it	cc
 80072de:	2700      	movcc	r7, #0
 80072e0:	4554      	cmp	r4, sl
 80072e2:	9707      	str	r7, [sp, #28]
 80072e4:	bf8c      	ite	hi
 80072e6:	2700      	movhi	r7, #0
 80072e8:	2701      	movls	r7, #1
 80072ea:	45d3      	cmp	fp, sl
 80072ec:	bf38      	it	cc
 80072ee:	2700      	movcc	r7, #0
 80072f0:	ebb4 0fc9 	cmp.w	r4, r9, lsl #3
 80072f4:	9708      	str	r7, [sp, #32]
 80072f6:	bf94      	ite	ls
 80072f8:	2701      	movls	r7, #1
 80072fa:	460f      	movhi	r7, r1
 80072fc:	ebbb 0fc9 	cmp.w	fp, r9, lsl #3
 8007300:	f007 0701 	and.w	r7, r7, #1
 8007304:	bf38      	it	cc
 8007306:	2700      	movcc	r7, #0
 8007308:	42ac      	cmp	r4, r5
 800730a:	9709      	str	r7, [sp, #36]	; 0x24
 800730c:	bf8c      	ite	hi
 800730e:	2700      	movhi	r7, #0
 8007310:	2701      	movls	r7, #1
 8007312:	45ab      	cmp	fp, r5
 8007314:	bf38      	it	cc
 8007316:	2700      	movcc	r7, #0
 8007318:	ebb4 0f48 	cmp.w	r4, r8, lsl #1
 800731c:	463d      	mov	r5, r7
 800731e:	970a      	str	r7, [sp, #40]	; 0x28
 8007320:	bf98      	it	ls
 8007322:	2501      	movls	r5, #1
 8007324:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007326:	bf88      	it	hi
 8007328:	460d      	movhi	r5, r1
 800732a:	ebbb 0f48 	cmp.w	fp, r8, lsl #1
 800732e:	f005 0501 	and.w	r5, r5, #1
 8007332:	bf38      	it	cc
 8007334:	2500      	movcc	r5, #0
 8007336:	42bc      	cmp	r4, r7
 8007338:	950d      	str	r5, [sp, #52]	; 0x34
 800733a:	463d      	mov	r5, r7
 800733c:	bf8c      	ite	hi
 800733e:	2500      	movhi	r5, #0
 8007340:	2501      	movls	r5, #1
 8007342:	45bb      	cmp	fp, r7
 8007344:	bf38      	it	cc
 8007346:	2500      	movcc	r5, #0
 8007348:	ebb4 0f8e 	cmp.w	r4, lr, lsl #2
 800734c:	950b      	str	r5, [sp, #44]	; 0x2c
 800734e:	bf94      	ite	ls
 8007350:	2501      	movls	r5, #1
 8007352:	460d      	movhi	r5, r1
 8007354:	ebbb 0f8e 	cmp.w	fp, lr, lsl #2
 8007358:	f005 0501 	and.w	r5, r5, #1
 800735c:	bf38      	it	cc
 800735e:	2500      	movcc	r5, #0
 8007360:	950e      	str	r5, [sp, #56]	; 0x38
 8007362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007364:	42ac      	cmp	r4, r5
 8007366:	462f      	mov	r7, r5
 8007368:	bf8c      	ite	hi
 800736a:	2700      	movhi	r7, #0
 800736c:	2701      	movls	r7, #1
 800736e:	45ab      	cmp	fp, r5
 8007370:	bf38      	it	cc
 8007372:	2700      	movcc	r7, #0
 8007374:	ebb4 0f4a 	cmp.w	r4, sl, lsl #1
 8007378:	bf94      	ite	ls
 800737a:	2501      	movls	r5, #1
 800737c:	460d      	movhi	r5, r1
 800737e:	ebbb 0f4a 	cmp.w	fp, sl, lsl #1
 8007382:	970c      	str	r7, [sp, #48]	; 0x30
 8007384:	f005 0501 	and.w	r5, r5, #1
 8007388:	bf38      	it	cc
 800738a:	2500      	movcc	r5, #0
 800738c:	950f      	str	r5, [sp, #60]	; 0x3c
 800738e:	e013      	b.n	80073b8 <BSP_I2C4_Init+0x280>
 8007390:	300076a0 	.word	0x300076a0
 8007394:	3000f664 	.word	0x3000f664
 8007398:	58001c00 	.word	0x58001c00
 800739c:	58024400 	.word	0x58024400
 80073a0:	58020c00 	.word	0x58020c00
 80073a4:	3b9aca00 	.word	0x3b9aca00
 80073a8:	300080a4 	.word	0x300080a4
 80073ac:	300076a4 	.word	0x300076a4
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80073b0:	2910      	cmp	r1, #16
 80073b2:	4448      	add	r0, r9
 80073b4:	f000 822b 	beq.w	800780e <BSP_I2C4_Init+0x6d6>
      if (tscldel >= (uint32_t)tscldel_min)
 80073b8:	f240 3779 	movw	r7, #889	; 0x379
 80073bc:	460d      	mov	r5, r1
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80073be:	3101      	adds	r1, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80073c0:	42b8      	cmp	r0, r7
 80073c2:	d9f5      	bls.n	80073b0 <BSP_I2C4_Init+0x278>
            if(presc != prev_presc)
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	f040 80e7 	bne.w	8007598 <BSP_I2C4_Init+0x460>
 80073ca:	4296      	cmp	r6, r2
 80073cc:	f000 80e4 	beq.w	8007598 <BSP_I2C4_Init+0x460>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073d0:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80073d4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80073d6:	f04f 0a00 	mov.w	sl, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073da:	4666      	mov	r6, ip
 80073dc:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80073e0:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073e2:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80073e6:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80073ea:	f200 819c 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 80073ee:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80073f0:	4296      	cmp	r6, r2
 80073f2:	d013      	beq.n	800741c <BSP_I2C4_Init+0x2e4>
 80073f4:	9f03      	ldr	r7, [sp, #12]
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	f000 80ef 	beq.w	80075da <BSP_I2C4_Init+0x4a2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073fc:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8007400:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007402:	f04f 0a02 	mov.w	sl, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007406:	4666      	mov	r6, ip
 8007408:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800740c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800740e:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007412:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007416:	f200 8186 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 800741a:	4616      	mov	r6, r2
            if(presc != prev_presc)
 800741c:	42b2      	cmp	r2, r6
 800741e:	f000 815e 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
 8007422:	9f05      	ldr	r7, [sp, #20]
 8007424:	2f00      	cmp	r7, #0
 8007426:	f000 80ef 	beq.w	8007608 <BSP_I2C4_Init+0x4d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800742a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800742e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007430:	f04f 0a04 	mov.w	sl, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007434:	4666      	mov	r6, ip
 8007436:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800743a:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800743c:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007440:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007444:	f200 816f 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 8007448:	4616      	mov	r6, r2
            if(presc != prev_presc)
 800744a:	42b2      	cmp	r2, r6
 800744c:	f000 8147 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
 8007450:	9f07      	ldr	r7, [sp, #28]
 8007452:	2f00      	cmp	r7, #0
 8007454:	f000 80ed 	beq.w	8007632 <BSP_I2C4_Init+0x4fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007458:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800745c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800745e:	f04f 0a06 	mov.w	sl, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007462:	4666      	mov	r6, ip
 8007464:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007468:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800746a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800746e:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007472:	f200 8158 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 8007476:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8007478:	42b2      	cmp	r2, r6
 800747a:	f000 8130 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
 800747e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007480:	2f00      	cmp	r7, #0
 8007482:	f000 80eb 	beq.w	800765c <BSP_I2C4_Init+0x524>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007486:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800748a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800748c:	f04f 0a08 	mov.w	sl, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007490:	4666      	mov	r6, ip
 8007492:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007496:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007498:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800749c:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80074a0:	f200 8141 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 80074a4:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80074a6:	42b2      	cmp	r2, r6
 80074a8:	f000 8119 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
 80074ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	f000 80e9 	beq.w	8007686 <BSP_I2C4_Init+0x54e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074b4:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80074b8:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80074ba:	270a      	movs	r7, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074bc:	4666      	mov	r6, ip
 80074be:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80074c2:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074c4:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80074c8:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80074cc:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80074d0:	f200 8129 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 80074d4:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80074d6:	42b2      	cmp	r2, r6
 80074d8:	f000 8101 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
 80074dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80074de:	2f00      	cmp	r7, #0
 80074e0:	f000 80e7 	beq.w	80076b2 <BSP_I2C4_Init+0x57a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074e4:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80074e8:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80074ea:	270c      	movs	r7, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074ec:	4666      	mov	r6, ip
 80074ee:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80074f2:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80074f4:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80074f8:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80074fc:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007500:	f200 8111 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 8007504:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8007506:	42b2      	cmp	r2, r6
 8007508:	f000 80e9 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
 800750c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800750e:	2f00      	cmp	r7, #0
 8007510:	f000 80e5 	beq.w	80076de <BSP_I2C4_Init+0x5a6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007514:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8007518:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800751a:	4666      	mov	r6, ip
 800751c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007520:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007522:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007526:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800752a:	f04f 050e 	mov.w	r5, #14
 800752e:	f8ce 5008 	str.w	r5, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007532:	f200 80f8 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 8007536:	4616      	mov	r6, r2
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007538:	e73a      	b.n	80073b0 <BSP_I2C4_Init+0x278>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	f10e 0e14 	add.w	lr, lr, #20
 8007540:	9a07      	ldr	r2, [sp, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	4293      	cmp	r3, r2
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	f040 810c 	bne.w	8007764 <BSP_I2C4_Init+0x62c>
        if (idx < I2C_VALID_TIMING_NBR)
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	2b7f      	cmp	r3, #127	; 0x7f
 8007550:	d818      	bhi.n	8007584 <BSP_I2C4_Init+0x44c>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007558:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 800755c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007560:	6862      	ldr	r2, [r4, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8007562:	7c23      	ldrb	r3, [r4, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007564:	0510      	lsls	r0, r2, #20
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007566:	68a1      	ldr	r1, [r4, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007568:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800756c:	68e2      	ldr	r2, [r4, #12]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800756e:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007572:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8007574:	0212      	lsls	r2, r2, #8
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007576:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007578:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800757c:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800757e:	430b      	orrs	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8007584:	9900      	ldr	r1, [sp, #0]
 8007586:	48ab      	ldr	r0, [pc, #684]	; (8007834 <BSP_I2C4_Init+0x6fc>)
 8007588:	f7ff fdb6 	bl	80070f8 <MX_I2C4_Init>
 800758c:	2800      	cmp	r0, #0
 800758e:	f43f adde 	beq.w	800714e <BSP_I2C4_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 8007592:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007596:	e5db      	b.n	8007150 <BSP_I2C4_Init+0x18>
            if(presc != prev_presc)
 8007598:	454c      	cmp	r4, r9
 800759a:	bf8c      	ite	hi
 800759c:	f04f 0e00 	movhi.w	lr, #0
 80075a0:	f04f 0e01 	movls.w	lr, #1
 80075a4:	45cb      	cmp	fp, r9
 80075a6:	bf38      	it	cc
 80075a8:	f04f 0e00 	movcc.w	lr, #0
 80075ac:	f1be 0f00 	cmp.w	lr, #0
 80075b0:	f43f af1e 	beq.w	80073f0 <BSP_I2C4_Init+0x2b8>
 80075b4:	4296      	cmp	r6, r2
 80075b6:	f43f af31 	beq.w	800741c <BSP_I2C4_Init+0x2e4>
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80075ba:	f04f 0a01 	mov.w	sl, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80075be:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 80075c2:	4666      	mov	r6, ip
              I2c_valid_timing_nbr ++;
 80075c4:	4453      	add	r3, sl
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80075c6:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
 80075ca:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80075ce:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80075d0:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80075d4:	f200 80a7 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 80075d8:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80075da:	4296      	cmp	r6, r2
 80075dc:	f43f af1e 	beq.w	800741c <BSP_I2C4_Init+0x2e4>
 80075e0:	9f04      	ldr	r7, [sp, #16]
 80075e2:	2f00      	cmp	r7, #0
 80075e4:	f43f af1a 	beq.w	800741c <BSP_I2C4_Init+0x2e4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80075e8:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80075ec:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80075ee:	f04f 0a03 	mov.w	sl, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80075f2:	4666      	mov	r6, ip
 80075f4:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80075f8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80075fa:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80075fe:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007602:	f200 8090 	bhi.w	8007726 <BSP_I2C4_Init+0x5ee>
 8007606:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8007608:	42b2      	cmp	r2, r6
 800760a:	d068      	beq.n	80076de <BSP_I2C4_Init+0x5a6>
 800760c:	9f06      	ldr	r7, [sp, #24]
 800760e:	2f00      	cmp	r7, #0
 8007610:	f43f af1b 	beq.w	800744a <BSP_I2C4_Init+0x312>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007614:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8007618:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800761a:	f04f 0a05 	mov.w	sl, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800761e:	4666      	mov	r6, ip
 8007620:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007624:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007626:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800762a:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800762e:	d87a      	bhi.n	8007726 <BSP_I2C4_Init+0x5ee>
 8007630:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8007632:	42b2      	cmp	r2, r6
 8007634:	d053      	beq.n	80076de <BSP_I2C4_Init+0x5a6>
 8007636:	9f08      	ldr	r7, [sp, #32]
 8007638:	2f00      	cmp	r7, #0
 800763a:	f43f af1d 	beq.w	8007478 <BSP_I2C4_Init+0x340>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800763e:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8007642:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007644:	f04f 0a07 	mov.w	sl, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007648:	4666      	mov	r6, ip
 800764a:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800764e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007650:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007654:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007658:	d865      	bhi.n	8007726 <BSP_I2C4_Init+0x5ee>
 800765a:	4616      	mov	r6, r2
            if(presc != prev_presc)
 800765c:	42b2      	cmp	r2, r6
 800765e:	d03e      	beq.n	80076de <BSP_I2C4_Init+0x5a6>
 8007660:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007662:	2f00      	cmp	r7, #0
 8007664:	f43f af1f 	beq.w	80074a6 <BSP_I2C4_Init+0x36e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007668:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800766c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800766e:	f04f 0a09 	mov.w	sl, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007672:	4666      	mov	r6, ip
 8007674:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007678:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800767a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800767e:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007682:	d850      	bhi.n	8007726 <BSP_I2C4_Init+0x5ee>
 8007684:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8007686:	42b2      	cmp	r2, r6
 8007688:	d029      	beq.n	80076de <BSP_I2C4_Init+0x5a6>
 800768a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800768c:	2f00      	cmp	r7, #0
 800768e:	f43f af22 	beq.w	80074d6 <BSP_I2C4_Init+0x39e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007692:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8007696:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007698:	270b      	movs	r7, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800769a:	4666      	mov	r6, ip
 800769c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80076a0:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80076a2:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80076a6:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80076aa:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80076ae:	d83a      	bhi.n	8007726 <BSP_I2C4_Init+0x5ee>
 80076b0:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80076b2:	42b2      	cmp	r2, r6
 80076b4:	d013      	beq.n	80076de <BSP_I2C4_Init+0x5a6>
 80076b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	f43f af24 	beq.w	8007506 <BSP_I2C4_Init+0x3ce>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80076be:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80076c2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80076c4:	270d      	movs	r7, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80076c6:	4666      	mov	r6, ip
 80076c8:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80076cc:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80076ce:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80076d2:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80076d6:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80076da:	d824      	bhi.n	8007726 <BSP_I2C4_Init+0x5ee>
 80076dc:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80076de:	9f01      	ldr	r7, [sp, #4]
 80076e0:	42bc      	cmp	r4, r7
 80076e2:	46be      	mov	lr, r7
 80076e4:	bf8c      	ite	hi
 80076e6:	f04f 0e00 	movhi.w	lr, #0
 80076ea:	f04f 0e01 	movls.w	lr, #1
 80076ee:	45bb      	cmp	fp, r7
 80076f0:	bf38      	it	cc
 80076f2:	f04f 0e00 	movcc.w	lr, #0
 80076f6:	f1be 0f00 	cmp.w	lr, #0
 80076fa:	f43f ae59 	beq.w	80073b0 <BSP_I2C4_Init+0x278>
 80076fe:	42b2      	cmp	r2, r6
 8007700:	f43f ae56 	beq.w	80073b0 <BSP_I2C4_Init+0x278>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007704:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8007708:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800770a:	4666      	mov	r6, ip
 800770c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007710:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007712:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007716:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800771a:	f04f 050f 	mov.w	r5, #15
 800771e:	f8ce 5008 	str.w	r5, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007722:	f67f af08 	bls.w	8007536 <BSP_I2C4_Init+0x3fe>
 8007726:	4a44      	ldr	r2, [pc, #272]	; (8007838 <BSP_I2C4_Init+0x700>)
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	960b      	str	r6, [sp, #44]	; 0x2c
 800772c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800772e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007730:	f241 200c 	movw	r0, #4620	; 0x120c
 8007734:	f640 739f 	movw	r3, #3999	; 0xf9f
 8007738:	4c40      	ldr	r4, [pc, #256]	; (800783c <BSP_I2C4_Init+0x704>)
 800773a:	4611      	mov	r1, r2
 800773c:	f8df e100 	ldr.w	lr, [pc, #256]	; 8007840 <BSP_I2C4_Init+0x708>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007740:	f242 7b10 	movw	fp, #10000	; 0x2710
 8007744:	3132      	adds	r1, #50	; 0x32
 8007746:	9108      	str	r1, [sp, #32]
 8007748:	1a81      	subs	r1, r0, r2
 800774a:	9109      	str	r1, [sp, #36]	; 0x24
 800774c:	9902      	ldr	r1, [sp, #8]
 800774e:	428b      	cmp	r3, r1
 8007750:	bf38      	it	cc
 8007752:	460b      	movcc	r3, r1
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	1913      	adds	r3, r2, r4
 8007758:	930a      	str	r3, [sp, #40]	; 0x28
 800775a:	2300      	movs	r3, #0
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	9303      	str	r3, [sp, #12]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007764:	9b02      	ldr	r3, [sp, #8]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007766:	2400      	movs	r4, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007768:	f8de 0000 	ldr.w	r0, [lr]
 800776c:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	1a1f      	subs	r7, r3, r0
 8007774:	9b08      	ldr	r3, [sp, #32]
 8007776:	181a      	adds	r2, r3, r0
 8007778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777a:	007f      	lsls	r7, r7, #1
 800777c:	4403      	add	r3, r0
 800777e:	9306      	str	r3, [sp, #24]
 8007780:	e006      	b.n	8007790 <BSP_I2C4_Init+0x658>
 8007782:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8007786:	4402      	add	r2, r0
 8007788:	eba7 0700 	sub.w	r7, r7, r0
 800778c:	f43f aed5 	beq.w	800753a <BSP_I2C4_Init+0x402>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007790:	f241 235c 	movw	r3, #4700	; 0x125c
 8007794:	46a0      	mov	r8, r4
 8007796:	f1a2 0532 	sub.w	r5, r2, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800779a:	3401      	adds	r4, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800779c:	429a      	cmp	r2, r3
 800779e:	d9f0      	bls.n	8007782 <BSP_I2C4_Init+0x64a>
 80077a0:	9b02      	ldr	r3, [sp, #8]
 80077a2:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 80077a6:	d2ec      	bcs.n	8007782 <BSP_I2C4_Init+0x64a>
 80077a8:	f242 4c4a 	movw	ip, #9290	; 0x244a
 80077ac:	9b06      	ldr	r3, [sp, #24]
 80077ae:	463e      	mov	r6, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80077b0:	2100      	movs	r1, #0
 80077b2:	4413      	add	r3, r2
 80077b4:	ebac 0c05 	sub.w	ip, ip, r5
 80077b8:	4692      	mov	sl, r2
 80077ba:	9405      	str	r4, [sp, #20]
 80077bc:	e005      	b.n	80077ca <BSP_I2C4_Init+0x692>
 80077be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80077c2:	eba6 0600 	sub.w	r6, r6, r0
 80077c6:	4403      	add	r3, r0
 80077c8:	d01e      	beq.n	8007808 <BSP_I2C4_Init+0x6d0>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80077ca:	eb0c 0503 	add.w	r5, ip, r3
 80077ce:	9c04      	ldr	r4, [sp, #16]
 80077d0:	460a      	mov	r2, r1
 80077d2:	f203 6983 	addw	r9, r3, #1667	; 0x683
 80077d6:	42a5      	cmp	r5, r4
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80077d8:	f101 0101 	add.w	r1, r1, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80077dc:	d9ef      	bls.n	80077be <BSP_I2C4_Init+0x686>
 80077de:	f241 0447 	movw	r4, #4167	; 0x1047
 80077e2:	45a1      	cmp	r9, r4
 80077e4:	d8eb      	bhi.n	80077be <BSP_I2C4_Init+0x686>
            if (error < 0)
 80077e6:	ea33 0523 	bics.w	r5, r3, r3, asr #32
 80077ea:	bf28      	it	cs
 80077ec:	4635      	movcs	r5, r6
            if ((uint32_t)error < prev_error)
 80077ee:	45ab      	cmp	fp, r5
 80077f0:	d9e5      	bls.n	80077be <BSP_I2C4_Init+0x686>
              I2c_valid_timing[count].sclh = sclh;
 80077f2:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80077f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
              I2c_valid_timing[count].sclh = sclh;
 80077f8:	46ab      	mov	fp, r5
 80077fa:	eba6 0600 	sub.w	r6, r6, r0
 80077fe:	4403      	add	r3, r0
 8007800:	9403      	str	r4, [sp, #12]
 8007802:	e9ce 2803 	strd	r2, r8, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007806:	d1e0      	bne.n	80077ca <BSP_I2C4_Init+0x692>
 8007808:	9c05      	ldr	r4, [sp, #20]
 800780a:	4652      	mov	r2, sl
 800780c:	e7b9      	b.n	8007782 <BSP_I2C4_Init+0x64a>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800780e:	9902      	ldr	r1, [sp, #8]
 8007810:	3201      	adds	r2, #1
 8007812:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007814:	4489      	add	r9, r1
 8007816:	9901      	ldr	r1, [sp, #4]
 8007818:	2a10      	cmp	r2, #16
 800781a:	4401      	add	r1, r0
 800781c:	9101      	str	r1, [sp, #4]
 800781e:	f47f ad17 	bne.w	8007250 <BSP_I2C4_Init+0x118>
 8007822:	4a05      	ldr	r2, [pc, #20]	; (8007838 <BSP_I2C4_Init+0x700>)
 8007824:	9307      	str	r3, [sp, #28]
 8007826:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007828:	2b00      	cmp	r3, #0
 800782a:	f43f aeab 	beq.w	8007584 <BSP_I2C4_Init+0x44c>
 800782e:	4b04      	ldr	r3, [pc, #16]	; (8007840 <BSP_I2C4_Init+0x708>)
 8007830:	930b      	str	r3, [sp, #44]	; 0x2c
 8007832:	e77c      	b.n	800772e <BSP_I2C4_Init+0x5f6>
 8007834:	3000f664 	.word	0x3000f664
 8007838:	300080a4 	.word	0x300080a4
 800783c:	ffffdbb6 	.word	0xffffdbb6
 8007840:	300076a4 	.word	0x300076a4

08007844 <BSP_I2C4_WriteReg>:
{
 8007844:	b530      	push	{r4, r5, lr}
 8007846:	460d      	mov	r5, r1
 8007848:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800784a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800784e:	4601      	mov	r1, r0
 8007850:	9200      	str	r2, [sp, #0]
 8007852:	462a      	mov	r2, r5
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	2301      	movs	r3, #1
 8007858:	4808      	ldr	r0, [pc, #32]	; (800787c <BSP_I2C4_WriteReg+0x38>)
 800785a:	9402      	str	r4, [sp, #8]
 800785c:	f004 fb7c 	bl	800bf58 <HAL_I2C_Mem_Write>
 8007860:	b908      	cbnz	r0, 8007866 <BSP_I2C4_WriteReg+0x22>
}
 8007862:	b005      	add	sp, #20
 8007864:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <BSP_I2C4_WriteReg+0x38>)
 8007868:	f004 fde8 	bl	800c43c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800786c:	2804      	cmp	r0, #4
 800786e:	bf0c      	ite	eq
 8007870:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8007874:	f06f 0003 	mvnne.w	r0, #3
 8007878:	e7f3      	b.n	8007862 <BSP_I2C4_WriteReg+0x1e>
 800787a:	bf00      	nop
 800787c:	3000f664 	.word	0x3000f664

08007880 <BSP_I2C4_ReadReg>:
{
 8007880:	b530      	push	{r4, r5, lr}
 8007882:	460d      	mov	r5, r1
 8007884:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007886:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800788a:	4601      	mov	r1, r0
 800788c:	9200      	str	r2, [sp, #0]
 800788e:	462a      	mov	r2, r5
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	2301      	movs	r3, #1
 8007894:	4808      	ldr	r0, [pc, #32]	; (80078b8 <BSP_I2C4_ReadReg+0x38>)
 8007896:	9402      	str	r4, [sp, #8]
 8007898:	f004 fc8e 	bl	800c1b8 <HAL_I2C_Mem_Read>
 800789c:	b908      	cbnz	r0, 80078a2 <BSP_I2C4_ReadReg+0x22>
}
 800789e:	b005      	add	sp, #20
 80078a0:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80078a2:	4805      	ldr	r0, [pc, #20]	; (80078b8 <BSP_I2C4_ReadReg+0x38>)
 80078a4:	f004 fdca 	bl	800c43c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80078a8:	2804      	cmp	r0, #4
 80078aa:	bf0c      	ite	eq
 80078ac:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80078b0:	f06f 0003 	mvnne.w	r0, #3
 80078b4:	e7f3      	b.n	800789e <BSP_I2C4_ReadReg+0x1e>
 80078b6:	bf00      	nop
 80078b8:	3000f664 	.word	0x3000f664

080078bc <BSP_I2C4_WriteReg16>:
{
 80078bc:	b530      	push	{r4, r5, lr}
 80078be:	460d      	mov	r5, r1
 80078c0:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80078c2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80078c6:	4601      	mov	r1, r0
 80078c8:	9200      	str	r2, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	2302      	movs	r3, #2
 80078d0:	4808      	ldr	r0, [pc, #32]	; (80078f4 <BSP_I2C4_WriteReg16+0x38>)
 80078d2:	9402      	str	r4, [sp, #8]
 80078d4:	f004 fb40 	bl	800bf58 <HAL_I2C_Mem_Write>
 80078d8:	b908      	cbnz	r0, 80078de <BSP_I2C4_WriteReg16+0x22>
}
 80078da:	b005      	add	sp, #20
 80078dc:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80078de:	4805      	ldr	r0, [pc, #20]	; (80078f4 <BSP_I2C4_WriteReg16+0x38>)
 80078e0:	f004 fdac 	bl	800c43c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80078e4:	2804      	cmp	r0, #4
 80078e6:	bf0c      	ite	eq
 80078e8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80078ec:	f06f 0003 	mvnne.w	r0, #3
 80078f0:	e7f3      	b.n	80078da <BSP_I2C4_WriteReg16+0x1e>
 80078f2:	bf00      	nop
 80078f4:	3000f664 	.word	0x3000f664

080078f8 <BSP_I2C4_ReadReg16>:
{
 80078f8:	b530      	push	{r4, r5, lr}
 80078fa:	460d      	mov	r5, r1
 80078fc:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80078fe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007902:	4601      	mov	r1, r0
 8007904:	9200      	str	r2, [sp, #0]
 8007906:	462a      	mov	r2, r5
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	2302      	movs	r3, #2
 800790c:	4808      	ldr	r0, [pc, #32]	; (8007930 <BSP_I2C4_ReadReg16+0x38>)
 800790e:	9402      	str	r4, [sp, #8]
 8007910:	f004 fc52 	bl	800c1b8 <HAL_I2C_Mem_Read>
 8007914:	b908      	cbnz	r0, 800791a <BSP_I2C4_ReadReg16+0x22>
}
 8007916:	b005      	add	sp, #20
 8007918:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800791a:	4805      	ldr	r0, [pc, #20]	; (8007930 <BSP_I2C4_ReadReg16+0x38>)
 800791c:	f004 fd8e 	bl	800c43c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007920:	2804      	cmp	r0, #4
 8007922:	bf0c      	ite	eq
 8007924:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8007928:	f06f 0003 	mvnne.w	r0, #3
 800792c:	e7f3      	b.n	8007916 <BSP_I2C4_ReadReg16+0x1e>
 800792e:	bf00      	nop
 8007930:	3000f664 	.word	0x3000f664

08007934 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8007934:	f001 baca 	b.w	8008ecc <HAL_GetTick>

08007938 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 8007938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800793c:	b089      	sub	sp, #36	; 0x24
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800793e:	2800      	cmp	r0, #0
 8007940:	d174      	bne.n	8007a2c <BSP_CAMERA_DeInit+0xf4>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 8007942:	4e3c      	ldr	r6, [pc, #240]	; (8007a34 <BSP_CAMERA_DeInit+0xfc>)
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d06d      	beq.n	8007a26 <BSP_CAMERA_DeInit+0xee>
 800794a:	4f3b      	ldr	r7, [pc, #236]	; (8007a38 <BSP_CAMERA_DeInit+0x100>)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d069      	beq.n	8007a26 <BSP_CAMERA_DeInit+0xee>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 8007952:	4c3a      	ldr	r4, [pc, #232]	; (8007a3c <BSP_CAMERA_DeInit+0x104>)
 8007954:	4b3a      	ldr	r3, [pc, #232]	; (8007a40 <BSP_CAMERA_DeInit+0x108>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8007956:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 8007958:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800795a:	f001 fc0f 	bl	800917c <HAL_DCMI_Stop>
 800795e:	2800      	cmp	r0, #0
 8007960:	d15b      	bne.n	8007a1a <BSP_CAMERA_DeInit+0xe2>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 8007962:	4620      	mov	r0, r4
 8007964:	f001 fd26 	bl	80093b4 <HAL_DCMI_DisableCrop>
 8007968:	2800      	cmp	r0, #0
 800796a:	d156      	bne.n	8007a1a <BSP_CAMERA_DeInit+0xe2>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 800796c:	4620      	mov	r0, r4
 800796e:	f001 fbf9 	bl	8009164 <HAL_DCMI_DeInit>
 8007972:	2800      	cmp	r0, #0
 8007974:	d151      	bne.n	8007a1a <BSP_CAMERA_DeInit+0xe2>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8007976:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 8007978:	4d32      	ldr	r5, [pc, #200]	; (8007a44 <BSP_CAMERA_DeInit+0x10c>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800797a:	f001 fb29 	bl	8008fd0 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 800797e:	203b      	movs	r0, #59	; 0x3b
 8007980:	f001 fb26 	bl	8008fd0 <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 8007984:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007986:	f002 f8ab 	bl	8009ae0 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 800798a:	2150      	movs	r1, #80	; 0x50
 800798c:	482e      	ldr	r0, [pc, #184]	; (8007a48 <BSP_CAMERA_DeInit+0x110>)
 800798e:	f004 f8df 	bl	800bb50 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 8007992:	f44f 7160 	mov.w	r1, #896	; 0x380
 8007996:	482d      	ldr	r0, [pc, #180]	; (8007a4c <BSP_CAMERA_DeInit+0x114>)
 8007998:	f004 f8da 	bl	800bb50 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800799c:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 80079a0:	482b      	ldr	r0, [pc, #172]	; (8007a50 <BSP_CAMERA_DeInit+0x118>)
 80079a2:	f004 f8d5 	bl	800bb50 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 80079a6:	2108      	movs	r1, #8
 80079a8:	482a      	ldr	r0, [pc, #168]	; (8007a54 <BSP_CAMERA_DeInit+0x11c>)
 80079aa:	f004 f8d1 	bl	800bb50 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 80079ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079b2:	4829      	ldr	r0, [pc, #164]	; (8007a58 <BSP_CAMERA_DeInit+0x120>)
 80079b4:	f004 f8cc 	bl	800bb50 <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 80079b8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 80079bc:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	4798      	blx	r3
 80079cc:	4604      	mov	r4, r0
 80079ce:	bb38      	cbnz	r0, 8007a20 <BSP_CAMERA_DeInit+0xe8>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80079d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80079d4:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 80079d8:	2701      	movs	r7, #1
 80079da:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80079de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80079e2:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80079e6:	a902      	add	r1, sp, #8
 80079e8:	481c      	ldr	r0, [pc, #112]	; (8007a5c <BSP_CAMERA_DeInit+0x124>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80079ea:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80079ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80079f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80079fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079fe:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007a02:	f003 ff87 	bl	800b914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8007a06:	2201      	movs	r2, #1
 8007a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a0c:	4813      	ldr	r0, [pc, #76]	; (8007a5c <BSP_CAMERA_DeInit+0x124>)
 8007a0e:	f004 f973 	bl	800bcf8 <HAL_GPIO_WritePin>
}
 8007a12:	4620      	mov	r0, r4
 8007a14:	b009      	add	sp, #36	; 0x24
 8007a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007a1a:	f06f 0403 	mvn.w	r4, #3
 8007a1e:	e7f8      	b.n	8007a12 <BSP_CAMERA_DeInit+0xda>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a20:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8007a24:	e7f5      	b.n	8007a12 <BSP_CAMERA_DeInit+0xda>
      ret = BSP_ERROR_NO_INIT;
 8007a26:	f04f 34ff 	mov.w	r4, #4294967295
 8007a2a:	e7f2      	b.n	8007a12 <BSP_CAMERA_DeInit+0xda>
    ret = BSP_ERROR_WRONG_PARAM;
 8007a2c:	f06f 0401 	mvn.w	r4, #1
 8007a30:	e7ef      	b.n	8007a12 <BSP_CAMERA_DeInit+0xda>
 8007a32:	bf00      	nop
 8007a34:	300080d4 	.word	0x300080d4
 8007a38:	300080d8 	.word	0x300080d8
 8007a3c:	3000f6b0 	.word	0x3000f6b0
 8007a40:	48020000 	.word	0x48020000
 8007a44:	58024400 	.word	0x58024400
 8007a48:	58020000 	.word	0x58020000
 8007a4c:	58020400 	.word	0x58020400
 8007a50:	58020800 	.word	0x58020800
 8007a54:	58020c00 	.word	0x58020c00
 8007a58:	58021800 	.word	0x58021800
 8007a5c:	58022400 	.word	0x58022400

08007a60 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 8007a60:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <MX_DCMI_Init+0x28>)
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8007a62:	2120      	movs	r1, #32
{
 8007a64:	b570      	push	{r4, r5, r6, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 8007a66:	6815      	ldr	r5, [r2, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8007a68:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8007a6a:	2200      	movs	r2, #0
  hdcmi->Instance              = DCMI;
 8007a6c:	4e07      	ldr	r6, [pc, #28]	; (8007a8c <MX_DCMI_Init+0x2c>)
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8007a6e:	6081      	str	r1, [r0, #8]
  hdcmi->Instance              = DCMI;
 8007a70:	6006      	str	r6, [r0, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8007a72:	6142      	str	r2, [r0, #20]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8007a74:	6042      	str	r2, [r0, #4]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8007a76:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8007a78:	e9c0 4503 	strd	r4, r5, [r0, #12]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 8007a7c:	f001 fb20 	bl	80090c0 <HAL_DCMI_Init>
}
 8007a80:	3800      	subs	r0, #0
 8007a82:	bf18      	it	ne
 8007a84:	2001      	movne	r0, #1
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	300080dc 	.word	0x300080dc
 8007a8c:	48020000 	.word	0x48020000

08007a90 <BSP_CAMERA_Init>:
{
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	b095      	sub	sp, #84	; 0x54
 8007a96:	9203      	str	r2, [sp, #12]
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f040 8217 	bne.w	8007ecc <BSP_CAMERA_Init+0x43c>
  __HAL_RCC_DCMI_CLK_ENABLE();
 8007a9e:	4dcc      	ldr	r5, [pc, #816]	; (8007dd0 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8007aa0:	f04f 0a50 	mov.w	sl, #80	; 0x50
 8007aa4:	f04f 0b02 	mov.w	fp, #2
 8007aa8:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_DCMI_CLK_ENABLE();
 8007aac:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8007ab0:	f04f 0903 	mov.w	r9, #3
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007ab4:	270d      	movs	r7, #13
 8007ab6:	4606      	mov	r6, r0
  __HAL_RCC_DCMI_CLK_ENABLE();
 8007ab8:	f042 0201 	orr.w	r2, r2, #1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8007abc:	48c5      	ldr	r0, [pc, #788]	; (8007dd4 <BSP_CAMERA_Init+0x344>)
 8007abe:	460c      	mov	r4, r1
 8007ac0:	a90e      	add	r1, sp, #56	; 0x38
  __HAL_RCC_DCMI_CLK_ENABLE();
 8007ac2:	f8c5 20dc 	str.w	r2, [r5, #220]	; 0xdc
 8007ac6:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
 8007aca:	f002 0201 	and.w	r2, r2, #1
 8007ace:	9205      	str	r2, [sp, #20]
 8007ad0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007ad2:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8007ad6:	f042 0202 	orr.w	r2, r2, #2
 8007ada:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
 8007ade:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8007ae2:	f002 0202 	and.w	r2, r2, #2
 8007ae6:	9206      	str	r2, [sp, #24]
 8007ae8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aea:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8007af6:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007afa:	f002 0201 	and.w	r2, r2, #1
 8007afe:	9207      	str	r2, [sp, #28]
 8007b00:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b02:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b06:	f042 0202 	orr.w	r2, r2, #2
 8007b0a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8007b0e:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b12:	f002 0202 	and.w	r2, r2, #2
 8007b16:	9208      	str	r2, [sp, #32]
 8007b18:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b1a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b1e:	f042 0204 	orr.w	r2, r2, #4
 8007b22:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8007b26:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b2a:	f002 0204 	and.w	r2, r2, #4
 8007b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b32:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b36:	f042 0208 	orr.w	r2, r2, #8
 8007b3a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8007b3e:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b42:	f002 0208 	and.w	r2, r2, #8
 8007b46:	920a      	str	r2, [sp, #40]	; 0x28
 8007b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b4a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8007b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b52:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8007b56:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007b5a:	9712      	str	r7, [sp, #72]	; 0x48
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b5c:	f002 0240 	and.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8007b60:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8007b64:	f44f 7a60 	mov.w	sl, #896	; 0x380
 8007b68:	f04f 0b02 	mov.w	fp, #2
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8007b70:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8007b74:	f003 fece 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8007b78:	a90e      	add	r1, sp, #56	; 0x38
 8007b7a:	4897      	ldr	r0, [pc, #604]	; (8007dd8 <BSP_CAMERA_Init+0x348>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007b7c:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8007b7e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8007b82:	f44f 6a2c 	mov.w	sl, #2752	; 0xac0
 8007b86:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8007b8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8007b8e:	f003 fec1 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007b92:	a90e      	add	r1, sp, #56	; 0x38
 8007b94:	4891      	ldr	r0, [pc, #580]	; (8007ddc <BSP_CAMERA_Init+0x34c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007b96:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8007b98:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8007b9c:	f04f 0a08 	mov.w	sl, #8
 8007ba0:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8007ba4:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007ba8:	f003 feb4 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007bac:	a90e      	add	r1, sp, #56	; 0x38
 8007bae:	488c      	ldr	r0, [pc, #560]	; (8007de0 <BSP_CAMERA_Init+0x350>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007bb0:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8007bb2:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8007bb6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8007bba:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8007bbe:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007bc2:	f003 fea7 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007bc6:	a90e      	add	r1, sp, #56	; 0x38
 8007bc8:	4886      	ldr	r0, [pc, #536]	; (8007de4 <BSP_CAMERA_Init+0x354>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8007bca:	9712      	str	r7, [sp, #72]	; 0x48
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007bcc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8007bd0:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007bd4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007bd8:	f003 fe9c 	bl	800b914 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8007bdc:	4b82      	ldr	r3, [pc, #520]	; (8007de8 <BSP_CAMERA_Init+0x358>)
 8007bde:	f04f 0e4b 	mov.w	lr, #75	; 0x4b
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8007be2:	f04f 0904 	mov.w	r9, #4
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8007be6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8007bee:	f8c3 e004 	str.w	lr, [r3, #4]
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007bf2:	f04f 0e03 	mov.w	lr, #3
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8007bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8007bfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8007bfe:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8007e14 <BSP_CAMERA_Init+0x384>
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8007c02:	61d9      	str	r1, [r3, #28]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8007c04:	210f      	movs	r1, #15
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8007c06:	6218      	str	r0, [r3, #32]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8007c08:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007c0a:	62de      	str	r6, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8007c0c:	631e      	str	r6, [r3, #48]	; 0x30
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007c0e:	619f      	str	r7, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8007c10:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8007c14:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007c18:	e9c3 9e09 	strd	r9, lr, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 8007c1c:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8007e18 <BSP_CAMERA_Init+0x388>
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007c20:	e9c3 a204 	strd	sl, r2, [r3, #16]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8007c24:	4632      	mov	r2, r6
  hdma_handler.Instance                 = DMA2_Stream3;
 8007c26:	f8c3 e000 	str.w	lr, [r3]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8007c2a:	e9c3 6602 	strd	r6, r6, [r3, #8]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8007c2e:	f001 f987 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8007c32:	204e      	movs	r0, #78	; 0x4e
 8007c34:	f001 f9be 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8007c38:	4632      	mov	r2, r6
 8007c3a:	210f      	movs	r1, #15
 8007c3c:	203b      	movs	r0, #59	; 0x3b
 8007c3e:	f001 f97f 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007c42:	203b      	movs	r0, #59	; 0x3b
 8007c44:	f001 f9b6 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8007c48:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8007c4c:	f001 fcce 	bl	80095ec <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8007c50:	4640      	mov	r0, r8
 8007c52:	f7ff ff05 	bl	8007a60 <MX_DCMI_Init>
 8007c56:	4682      	mov	sl, r0
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f040 80b4 	bne.w	8007dc6 <BSP_CAMERA_Init+0x336>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007c5e:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c68:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007c6c:	f440 7c00 	orr.w	ip, r0, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007c70:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007c74:	a90e      	add	r1, sp, #56	; 0x38
 8007c76:	485d      	ldr	r0, [pc, #372]	; (8007dec <BSP_CAMERA_Init+0x35c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007c78:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 8007c7c:	f8d5 50e0 	ldr.w	r5, [r5, #224]	; 0xe0
  static OV9655_Object_t   OV9655Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007c80:	f8df b198 	ldr.w	fp, [pc, #408]	; 8007e1c <BSP_CAMERA_Init+0x38c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007c84:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8007c88:	950c      	str	r5, [sp, #48]	; 0x30
 8007c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  IOCtx.Init        = BSP_I2C4_Init;
 8007c8c:	4d58      	ldr	r5, [pc, #352]	; (8007df0 <BSP_CAMERA_Init+0x360>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007c8e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007c96:	f003 fe3d 	bl	800b914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4853      	ldr	r0, [pc, #332]	; (8007dec <BSP_CAMERA_Init+0x35c>)
 8007ca0:	f004 f82a 	bl	800bcf8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8007ca4:	2064      	movs	r0, #100	; 0x64
 8007ca6:	f001 f917 	bl	8008ed8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8007caa:	4652      	mov	r2, sl
 8007cac:	4639      	mov	r1, r7
 8007cae:	484f      	ldr	r0, [pc, #316]	; (8007dec <BSP_CAMERA_Init+0x35c>)
 8007cb0:	f004 f822 	bl	800bcf8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8007cb4:	2014      	movs	r0, #20
 8007cb6:	f001 f90f 	bl	8008ed8 <HAL_Delay>
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8007cba:	4f4e      	ldr	r7, [pc, #312]	; (8007df4 <BSP_CAMERA_Init+0x364>)
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8007cbc:	2160      	movs	r1, #96	; 0x60
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007cbe:	4a4e      	ldr	r2, [pc, #312]	; (8007df8 <BSP_CAMERA_Init+0x368>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007cc0:	4b4e      	ldr	r3, [pc, #312]	; (8007dfc <BSP_CAMERA_Init+0x36c>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8007cc2:	4638      	mov	r0, r7
  IOCtx.GetTick     = BSP_GetTick;
 8007cc4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007e20 <BSP_CAMERA_Init+0x390>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8007cc8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8007ccc:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007cce:	9212      	str	r2, [sp, #72]	; 0x48
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007cd0:	9311      	str	r3, [sp, #68]	; 0x44
  IOCtx.GetTick     = BSP_GetTick;
 8007cd2:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007cd6:	e9cd 5b0e 	strd	r5, fp, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8007cda:	f7fe fffd 	bl	8006cd8 <OV9655_RegisterBusIO>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f040 80a6 	bne.w	8007e30 <BSP_CAMERA_Init+0x3a0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 8007ce4:	4d46      	ldr	r5, [pc, #280]	; (8007e00 <BSP_CAMERA_Init+0x370>)
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7fe ff41 	bl	8006b70 <OV9655_ReadID>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f040 809e 	bne.w	8007e30 <BSP_CAMERA_Init+0x3a0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 8007cf4:	682a      	ldr	r2, [r5, #0]
 8007cf6:	4b43      	ldr	r3, [pc, #268]	; (8007e04 <BSP_CAMERA_Init+0x374>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	f200 8098 	bhi.w	8007e30 <BSP_CAMERA_Init+0x3a0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8007d00:	f8df c120 	ldr.w	ip, [pc, #288]	; 8007e24 <BSP_CAMERA_Init+0x394>
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8007d04:	4638      	mov	r0, r7
      Camera_CompObj = &OV9655Obj;
 8007d06:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8007e28 <BSP_CAMERA_Init+0x398>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8007d0a:	4621      	mov	r1, r4
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8007d0c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8007e2c <BSP_CAMERA_Init+0x39c>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8007d10:	9a03      	ldr	r2, [sp, #12]
 8007d12:	f8dc 3000 	ldr.w	r3, [ip]
      Camera_CompObj = &OV9655Obj;
 8007d16:	f8c8 7000 	str.w	r7, [r8]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8007d1a:	f8c9 c000 	str.w	ip, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8007d1e:	4798      	blx	r3
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f040 8085 	bne.w	8007e30 <BSP_CAMERA_Init+0x3a0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 8007d26:	f8d9 3000 	ldr.w	r3, [r9]
 8007d2a:	f8d8 0000 	ldr.w	r0, [r8]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4935      	ldr	r1, [pc, #212]	; (8007e08 <BSP_CAMERA_Init+0x378>)
 8007d32:	4798      	blx	r3
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d17b      	bne.n	8007e30 <BSP_CAMERA_Init+0x3a0>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 8007d38:	682a      	ldr	r2, [r5, #0]
 8007d3a:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <BSP_CAMERA_Init+0x374>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d839      	bhi.n	8007db6 <BSP_CAMERA_Init+0x326>
          if(Resolution == CAMERA_R480x272)
 8007d42:	2c02      	cmp	r4, #2
 8007d44:	f000 80af 	beq.w	8007ea6 <BSP_CAMERA_Init+0x416>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007d48:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <BSP_CAMERA_Init+0x340>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007d4a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 8007d4e:	f04f 0901 	mov.w	r9, #1
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007d52:	a90e      	add	r1, sp, #56	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007d54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007d58:	4824      	ldr	r0, [pc, #144]	; (8007dec <BSP_CAMERA_Init+0x35c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007d62:	2200      	movs	r2, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d6c:	930d      	str	r3, [sp, #52]	; 0x34
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007d6e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007d70:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8007d72:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d76:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8007d7a:	f003 fdcb 	bl	800b914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d84:	4819      	ldr	r0, [pc, #100]	; (8007dec <BSP_CAMERA_Init+0x35c>)
 8007d86:	f003 ffb7 	bl	800bcf8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8007d8a:	2064      	movs	r0, #100	; 0x64
 8007d8c:	f001 f8a4 	bl	8008ed8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8007d90:	2200      	movs	r2, #0
 8007d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d96:	4815      	ldr	r0, [pc, #84]	; (8007dec <BSP_CAMERA_Init+0x35c>)
 8007d98:	f003 ffae 	bl	800bcf8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8007d9c:	2014      	movs	r0, #20
 8007d9e:	f001 f89b 	bl	8008ed8 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 8007da2:	682a      	ldr	r2, [r5, #0]
 8007da4:	4b19      	ldr	r3, [pc, #100]	; (8007e0c <BSP_CAMERA_Init+0x37c>)
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8007da6:	2000      	movs	r0, #0
          Camera_Ctx[Instance].Resolution  = Resolution;
 8007da8:	e9c3 2400 	strd	r2, r4, [r3]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8007dac:	9a03      	ldr	r2, [sp, #12]
 8007dae:	609a      	str	r2, [r3, #8]
}
 8007db0:	b015      	add	sp, #84	; 0x54
 8007db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8007db6:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <BSP_CAMERA_Init+0x380>)
 8007db8:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8007dba:	4816      	ldr	r0, [pc, #88]	; (8007e14 <BSP_CAMERA_Init+0x384>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8007dbc:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8007dbe:	f7ff fe4f 	bl	8007a60 <MX_DCMI_Init>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d0c0      	beq.n	8007d48 <BSP_CAMERA_Init+0x2b8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007dc6:	f06f 0003 	mvn.w	r0, #3
}
 8007dca:	b015      	add	sp, #84	; 0x54
 8007dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	58020000 	.word	0x58020000
 8007dd8:	58020400 	.word	0x58020400
 8007ddc:	58020800 	.word	0x58020800
 8007de0:	58020c00 	.word	0x58020c00
 8007de4:	58021800 	.word	0x58021800
 8007de8:	30008130 	.word	0x30008130
 8007dec:	58022400 	.word	0x58022400
 8007df0:	08007139 	.word	0x08007139
 8007df4:	30008108 	.word	0x30008108
 8007df8:	08007881 	.word	0x08007881
 8007dfc:	08007845 	.word	0x08007845
 8007e00:	300080a8 	.word	0x300080a8
 8007e04:	ffff69aa 	.word	0xffff69aa
 8007e08:	300080ac 	.word	0x300080ac
 8007e0c:	3000f700 	.word	0x3000f700
 8007e10:	300080dc 	.word	0x300080dc
 8007e14:	3000f6b0 	.word	0x3000f6b0
 8007e18:	40020458 	.word	0x40020458
 8007e1c:	080070a5 	.word	0x080070a5
 8007e20:	08007935 	.word	0x08007935
 8007e24:	24000148 	.word	0x24000148
 8007e28:	300080d4 	.word	0x300080d4
 8007e2c:	300080d8 	.word	0x300080d8
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8007e30:	2378      	movs	r3, #120	; 0x78
  IOCtx.Init        = BSP_I2C4_Init;
 8007e32:	4a28      	ldr	r2, [pc, #160]	; (8007ed4 <BSP_CAMERA_Init+0x444>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8007e34:	4f28      	ldr	r7, [pc, #160]	; (8007ed8 <BSP_CAMERA_Init+0x448>)
 8007e36:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.Init        = BSP_I2C4_Init;
 8007e38:	920e      	str	r2, [sp, #56]	; 0x38
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8007e3a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8007e3e:	4638      	mov	r0, r7
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8007e40:	4a26      	ldr	r2, [pc, #152]	; (8007edc <BSP_CAMERA_Init+0x44c>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8007e42:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <BSP_CAMERA_Init+0x450>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8007e44:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  IOCtx.GetTick     = BSP_GetTick;
 8007e48:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8007e4c:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8007e50:	f7fe fa58 	bl	8006304 <OV5640_RegisterBusIO>
 8007e54:	bb20      	cbnz	r0, 8007ea0 <BSP_CAMERA_Init+0x410>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 8007e56:	4d23      	ldr	r5, [pc, #140]	; (8007ee4 <BSP_CAMERA_Init+0x454>)
 8007e58:	4638      	mov	r0, r7
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f7fe f81a 	bl	8005e94 <OV5640_ReadID>
 8007e60:	b9f0      	cbnz	r0, 8007ea0 <BSP_CAMERA_Init+0x410>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 8007e62:	682a      	ldr	r2, [r5, #0]
 8007e64:	f245 6340 	movw	r3, #22080	; 0x5640
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d119      	bne.n	8007ea0 <BSP_CAMERA_Init+0x410>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8007e6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <BSP_CAMERA_Init+0x458>)
      Camera_CompObj = &OV5640Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007e6e:	4638      	mov	r0, r7
      Camera_CompObj = &OV5640Obj;
 8007e70:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8007ef4 <BSP_CAMERA_Init+0x464>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007e74:	4621      	mov	r1, r4
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8007e76:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007ef8 <BSP_CAMERA_Init+0x468>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007e7a:	9a03      	ldr	r2, [sp, #12]
 8007e7c:	f8d3 a000 	ldr.w	sl, [r3]
      Camera_CompObj = &OV5640Obj;
 8007e80:	f8c8 7000 	str.w	r7, [r8]
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8007e84:	f8c9 3000 	str.w	r3, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8007e88:	47d0      	blx	sl
 8007e8a:	b948      	cbnz	r0, 8007ea0 <BSP_CAMERA_Init+0x410>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 8007e8c:	f8d9 3000 	ldr.w	r3, [r9]
 8007e90:	f8d8 0000 	ldr.w	r0, [r8]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	4915      	ldr	r1, [pc, #84]	; (8007eec <BSP_CAMERA_Init+0x45c>)
 8007e98:	4798      	blx	r3
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	f43f af4c 	beq.w	8007d38 <BSP_CAMERA_Init+0x2a8>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ea0:	f06f 0006 	mvn.w	r0, #6
 8007ea4:	e784      	b.n	8007db0 <BSP_CAMERA_Init+0x320>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 8007ea6:	f240 100f 	movw	r0, #271	; 0x10f
 8007eaa:	f240 33bf 	movw	r3, #959	; 0x3bf
 8007eae:	2268      	movs	r2, #104	; 0x68
 8007eb0:	2150      	movs	r1, #80	; 0x50
 8007eb2:	9000      	str	r0, [sp, #0]
 8007eb4:	480e      	ldr	r0, [pc, #56]	; (8007ef0 <BSP_CAMERA_Init+0x460>)
 8007eb6:	f001 fa5f 	bl	8009378 <HAL_DCMI_ConfigCrop>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d183      	bne.n	8007dc6 <BSP_CAMERA_Init+0x336>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 8007ebe:	480c      	ldr	r0, [pc, #48]	; (8007ef0 <BSP_CAMERA_Init+0x460>)
 8007ec0:	f001 fa92 	bl	80093e8 <HAL_DCMI_EnableCrop>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f47f af7e 	bne.w	8007dc6 <BSP_CAMERA_Init+0x336>
 8007eca:	e73d      	b.n	8007d48 <BSP_CAMERA_Init+0x2b8>
    ret = BSP_ERROR_WRONG_PARAM;
 8007ecc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007ed0:	e76e      	b.n	8007db0 <BSP_CAMERA_Init+0x320>
 8007ed2:	bf00      	nop
 8007ed4:	08007139 	.word	0x08007139
 8007ed8:	300080e0 	.word	0x300080e0
 8007edc:	080078f9 	.word	0x080078f9
 8007ee0:	080078bd 	.word	0x080078bd
 8007ee4:	300080a8 	.word	0x300080a8
 8007ee8:	24000104 	.word	0x24000104
 8007eec:	300080ac 	.word	0x300080ac
 8007ef0:	3000f6b0 	.word	0x3000f6b0
 8007ef4:	300080d4 	.word	0x300080d4
 8007ef8:	300080d8 	.word	0x300080d8

08007efc <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007efc:	b948      	cbnz	r0, 8007f12 <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8007efe:	4806      	ldr	r0, [pc, #24]	; (8007f18 <BSP_CAMERA_Suspend+0x1c>)
{
 8007f00:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8007f02:	f001 f97d 	bl	8009200 <HAL_DCMI_Suspend>
 8007f06:	2800      	cmp	r0, #0
    return BSP_ERROR_PERIPH_FAILURE;
 8007f08:	bf0c      	ite	eq
 8007f0a:	2000      	moveq	r0, #0
 8007f0c:	f06f 0003 	mvnne.w	r0, #3
}
 8007f10:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007f12:	f06f 0001 	mvn.w	r0, #1
}
 8007f16:	4770      	bx	lr
 8007f18:	3000f6b0 	.word	0x3000f6b0

08007f1c <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007f1c:	b948      	cbnz	r0, 8007f32 <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8007f1e:	4806      	ldr	r0, [pc, #24]	; (8007f38 <BSP_CAMERA_Resume+0x1c>)
{
 8007f20:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8007f22:	f001 f9b1 	bl	8009288 <HAL_DCMI_Resume>
 8007f26:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 8007f28:	bf14      	ite	ne
 8007f2a:	f06f 0003 	mvnne.w	r0, #3
 8007f2e:	2000      	moveq	r0, #0
}
 8007f30:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007f32:	f06f 0001 	mvn.w	r0, #1
}
 8007f36:	4770      	bx	lr
 8007f38:	3000f6b0 	.word	0x3000f6b0

08007f3c <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 8007f3c:	b988      	cbnz	r0, 8007f62 <BSP_CAMERA_SetBrightness+0x26>
{
 8007f3e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Brightness == 0U)
 8007f40:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <BSP_CAMERA_SetBrightness+0x38>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	b183      	cbz	r3, 8007f68 <BSP_CAMERA_SetBrightness+0x2c>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <BSP_CAMERA_SetBrightness+0x3c>)
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <BSP_CAMERA_SetBrightness+0x40>)
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6810      	ldr	r0, [r2, #0]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	4798      	blx	r3
 8007f56:	2800      	cmp	r0, #0
 8007f58:	db09      	blt.n	8007f6e <BSP_CAMERA_SetBrightness+0x32>
    Camera_Ctx[Instance].Brightness = Brightness;
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 8007f5c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 8007f5e:	615d      	str	r5, [r3, #20]
}
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007f62:	f06f 0001 	mvn.w	r0, #1
}
 8007f66:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8007f68:	f06f 000a 	mvn.w	r0, #10
}
 8007f6c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f6e:	f06f 0004 	mvn.w	r0, #4
}
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	300080ac 	.word	0x300080ac
 8007f78:	300080d8 	.word	0x300080d8
 8007f7c:	300080d4 	.word	0x300080d4
 8007f80:	3000f700 	.word	0x3000f700

08007f84 <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 8007f84:	b988      	cbnz	r0, 8007faa <BSP_CAMERA_SetContrast+0x26>
{
 8007f86:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Contrast == 0U)
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <BSP_CAMERA_SetContrast+0x38>)
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	b183      	cbz	r3, 8007fb0 <BSP_CAMERA_SetContrast+0x2c>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <BSP_CAMERA_SetContrast+0x3c>)
 8007f90:	4604      	mov	r4, r0
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <BSP_CAMERA_SetContrast+0x40>)
 8007f94:	460d      	mov	r5, r1
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6810      	ldr	r0, [r2, #0]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	4798      	blx	r3
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	db09      	blt.n	8007fb6 <BSP_CAMERA_SetContrast+0x32>
    Camera_Ctx[Instance].Contrast = Contrast;
 8007fa2:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 8007fa4:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 8007fa6:	61dd      	str	r5, [r3, #28]
}
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007faa:	f06f 0001 	mvn.w	r0, #1
}
 8007fae:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8007fb0:	f06f 000a 	mvn.w	r0, #10
}
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fb6:	f06f 0004 	mvn.w	r0, #4
}
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	300080ac 	.word	0x300080ac
 8007fc0:	300080d8 	.word	0x300080d8
 8007fc4:	300080d4 	.word	0x300080d4
 8007fc8:	3000f700 	.word	0x3000f700

08007fcc <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8007fcc:	b988      	cbnz	r0, 8007ff2 <BSP_CAMERA_SetMirrorFlip+0x26>
{
 8007fce:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <BSP_CAMERA_SetMirrorFlip+0x38>)
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	b183      	cbz	r3, 8007ff8 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4a0c      	ldr	r2, [pc, #48]	; (800800c <BSP_CAMERA_SetMirrorFlip+0x40>)
 8007fdc:	460d      	mov	r5, r1
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6810      	ldr	r0, [r2, #0]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	4798      	blx	r3
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	db09      	blt.n	8007ffe <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 8007fec:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 8007fee:	625d      	str	r5, [r3, #36]	; 0x24
}
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007ff2:	f06f 0001 	mvn.w	r0, #1
}
 8007ff6:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8007ff8:	f06f 000a 	mvn.w	r0, #10
}
 8007ffc:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ffe:	f06f 0004 	mvn.w	r0, #4
}
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	300080ac 	.word	0x300080ac
 8008008:	300080d8 	.word	0x300080d8
 800800c:	300080d4 	.word	0x300080d4
 8008010:	3000f700 	.word	0x3000f700

08008014 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8008014:	bb48      	cbnz	r0, 800806a <BSP_CAMERA_PwrDown+0x56>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <BSP_CAMERA_PwrDown+0x5c>)
 8008018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800801c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8008020:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008024:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8008028:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800802a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800802e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8008032:	2701      	movs	r7, #1
 8008034:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008038:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800803c:	f04f 0902 	mov.w	r9, #2
 8008040:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008042:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008044:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008046:	480b      	ldr	r0, [pc, #44]	; (8008074 <BSP_CAMERA_PwrDown+0x60>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008048:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800804a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800804e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008052:	f003 fc5f 	bl	800b914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8008056:	2201      	movs	r2, #1
 8008058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800805c:	4805      	ldr	r0, [pc, #20]	; (8008074 <BSP_CAMERA_PwrDown+0x60>)
 800805e:	f003 fe4b 	bl	800bcf8 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8008062:	4620      	mov	r0, r4
}
 8008064:	b008      	add	sp, #32
 8008066:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800806a:	f06f 0001 	mvn.w	r0, #1
}
 800806e:	4770      	bx	lr
 8008070:	58024400 	.word	0x58024400
 8008074:	58022400 	.word	0x58022400

08008078 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <BSP_CAMERA_IRQHandler+0x8>)
 800807a:	f001 b92f 	b.w	80092dc <HAL_DCMI_IRQHandler>
 800807e:	bf00      	nop
 8008080:	3000f6b0 	.word	0x3000f6b0

08008084 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8008084:	4b01      	ldr	r3, [pc, #4]	; (800808c <BSP_CAMERA_DMA_IRQHandler+0x8>)
 8008086:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008088:	f002 ba3e 	b.w	800a508 <HAL_DMA_IRQHandler>
 800808c:	3000f6b0 	.word	0x3000f6b0

08008090 <BSP_CAMERA_LineEventCallback>:
}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop

08008094 <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 8008094:	2000      	movs	r0, #0
{
 8008096:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 8008098:	f7ff fffa 	bl	8008090 <BSP_CAMERA_LineEventCallback>
}
 800809c:	bd08      	pop	{r3, pc}
 800809e:	bf00      	nop

080080a0 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 80080a0:	2000      	movs	r0, #0
{
 80080a2:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 80080a4:	f7f8 ffc6 	bl	8001034 <BSP_CAMERA_FrameEventCallback>
}
 80080a8:	bd08      	pop	{r3, pc}
 80080aa:	bf00      	nop

080080ac <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 80080ac:	2000      	movs	r0, #0
{
 80080ae:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 80080b0:	f7f8 ffde 	bl	8001070 <BSP_CAMERA_VsyncEventCallback>
}
 80080b4:	bd08      	pop	{r3, pc}
 80080b6:	bf00      	nop

080080b8 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 80080b8:	2000      	movs	r0, #0
{
 80080ba:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 80080bc:	f7f9 f812 	bl	80010e4 <BSP_CAMERA_ErrorCallback>
}
 80080c0:	bd08      	pop	{r3, pc}
 80080c2:	bf00      	nop

080080c4 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80080c4:	b910      	cbnz	r0, 80080cc <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <BSP_LCD_SetActiveLayer+0x10>)
 80080c8:	6099      	str	r1, [r3, #8]
 80080ca:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80080cc:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	3000f7dc 	.word	0x3000f7dc

080080d8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80080d8:	b918      	cbnz	r0, 80080e2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <BSP_LCD_GetPixelFormat+0x10>)
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	600b      	str	r3, [r1, #0]
 80080e0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80080e2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80080e6:	4770      	bx	lr
 80080e8:	3000f7dc 	.word	0x3000f7dc

080080ec <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80080ec:	b948      	cbnz	r0, 8008102 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <BSP_LCD_GetXSize+0x1c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f4:	b11b      	cbz	r3, 80080fe <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80080f6:	4b05      	ldr	r3, [pc, #20]	; (800810c <BSP_LCD_GetXSize+0x20>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	600b      	str	r3, [r1, #0]
 80080fc:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80080fe:	4618      	mov	r0, r3
  }

  return ret;
}
 8008100:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8008102:	f06f 0001 	mvn.w	r0, #1
 8008106:	4770      	bx	lr
 8008108:	300081ac 	.word	0x300081ac
 800810c:	3000f7dc 	.word	0x3000f7dc

08008110 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8008110:	b948      	cbnz	r0, 8008126 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8008112:	4b06      	ldr	r3, [pc, #24]	; (800812c <BSP_LCD_GetYSize+0x1c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008118:	b11b      	cbz	r3, 8008122 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800811a:	4b05      	ldr	r3, [pc, #20]	; (8008130 <BSP_LCD_GetYSize+0x20>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	600b      	str	r3, [r1, #0]
 8008120:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8008122:	4618      	mov	r0, r3
  }

  return ret;
}
 8008124:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8008126:	f06f 0001 	mvn.w	r0, #1
 800812a:	4770      	bx	lr
 800812c:	300081ac 	.word	0x300081ac
 8008130:	3000f7dc 	.word	0x3000f7dc

08008134 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	e9dd 7408 	ldrd	r7, r4, [sp, #32]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800813c:	b324      	cbz	r4, 8008188 <BSP_LCD_FillRGBRect+0x54>
 800813e:	b31f      	cbz	r7, 8008188 <BSP_LCD_FillRGBRect+0x54>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008140:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8008144:	4d1a      	ldr	r5, [pc, #104]	; (80081b0 <BSP_LCD_FillRGBRect+0x7c>)
 8008146:	eb04 0802 	add.w	r8, r4, r2
 800814a:	440f      	add	r7, r1
 800814c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8008150:	f8df e060 	ldr.w	lr, [pc, #96]	; 80081b4 <BSP_LCD_FillRGBRect+0x80>
 8008154:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
 8008158:	460c      	mov	r4, r1
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800815a:	68a8      	ldr	r0, [r5, #8]
 800815c:	f8d3 9000 	ldr.w	r9, [r3]
 8008160:	fb0c e000 	mla	r0, ip, r0, lr
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008164:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008168:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800816a:	b986      	cbnz	r6, 800818e <BSP_LCD_FillRGBRect+0x5a>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800816c:	682e      	ldr	r6, [r5, #0]
 800816e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8008170:	fb06 4602 	mla	r6, r6, r2, r4
 8008174:	3401      	adds	r4, #1
 8008176:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 800817a:	42bc      	cmp	r4, r7
      pData += Lcd_Ctx[Instance].BppFactor;
 800817c:	6928      	ldr	r0, [r5, #16]
 800817e:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8008180:	d1eb      	bne.n	800815a <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
 8008182:	3201      	adds	r2, #1
 8008184:	4542      	cmp	r2, r8
 8008186:	d1e7      	bne.n	8008158 <BSP_LCD_FillRGBRect+0x24>
}
 8008188:	2000      	movs	r0, #0
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800818e:	682e      	ldr	r6, [r5, #0]
 8008190:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
 8008194:	fb06 4602 	mla	r6, r6, r2, r4
 8008198:	3401      	adds	r4, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800819a:	6928      	ldr	r0, [r5, #16]
    for(j = 0; j < Width; j++)
 800819c:	42a7      	cmp	r7, r4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800819e:	f829 a016 	strh.w	sl, [r9, r6, lsl #1]
      pData += Lcd_Ctx[Instance].BppFactor;
 80081a2:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 80081a4:	d1d9      	bne.n	800815a <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
 80081a6:	3201      	adds	r2, #1
 80081a8:	4542      	cmp	r2, r8
 80081aa:	d1d5      	bne.n	8008158 <BSP_LCD_FillRGBRect+0x24>
 80081ac:	e7ec      	b.n	8008188 <BSP_LCD_FillRGBRect+0x54>
 80081ae:	bf00      	nop
 80081b0:	3000f7dc 	.word	0x3000f7dc
 80081b4:	3000f734 	.word	0x3000f734

080081b8 <BSP_LCD_ReadPixel>:
{
 80081b8:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80081ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80081be:	4e10      	ldr	r6, [pc, #64]	; (8008200 <BSP_LCD_ReadPixel+0x48>)
 80081c0:	4f10      	ldr	r7, [pc, #64]	; (8008204 <BSP_LCD_ReadPixel+0x4c>)
 80081c2:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80081c6:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80081ca:	0080      	lsls	r0, r0, #2
 80081cc:	68ac      	ldr	r4, [r5, #8]
 80081ce:	fb0c 7404 	mla	r4, ip, r4, r7
 80081d2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80081d4:	b94d      	cbnz	r5, 80081ea <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80081d6:	5830      	ldr	r0, [r6, r0]
 80081d8:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80081da:	fb00 1202 	mla	r2, r0, r2, r1
}
 80081de:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80081e0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 80081e4:	bcf0      	pop	{r4, r5, r6, r7}
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80081ea:	5835      	ldr	r5, [r6, r0]
 80081ec:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80081ee:	fb05 1202 	mla	r2, r5, r2, r1
 80081f2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 80081f6:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80081f8:	b292      	uxth	r2, r2
}
 80081fa:	bcf0      	pop	{r4, r5, r6, r7}
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	4770      	bx	lr
 8008200:	3000f7dc 	.word	0x3000f7dc
 8008204:	3000f734 	.word	0x3000f734

08008208 <BSP_LCD_WritePixel>:
{
 8008208:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800820a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800820e:	4e0f      	ldr	r6, [pc, #60]	; (800824c <BSP_LCD_WritePixel+0x44>)
 8008210:	4f0f      	ldr	r7, [pc, #60]	; (8008250 <BSP_LCD_WritePixel+0x48>)
 8008212:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8008216:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800821a:	0080      	lsls	r0, r0, #2
 800821c:	68ac      	ldr	r4, [r5, #8]
 800821e:	fb0c 7404 	mla	r4, ip, r4, r7
 8008222:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8008224:	b945      	cbnz	r5, 8008238 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008226:	5830      	ldr	r0, [r6, r0]
 8008228:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 800822a:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 800822e:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008230:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8008234:	bcf0      	pop	{r4, r5, r6, r7}
 8008236:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008238:	5835      	ldr	r5, [r6, r0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800823e:	fb05 1202 	mla	r2, r5, r2, r1
}
 8008242:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008244:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8008248:	2000      	movs	r0, #0
 800824a:	4770      	bx	lr
 800824c:	3000f7dc 	.word	0x3000f7dc
 8008250:	3000f734 	.word	0x3000f734

08008254 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8008254:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8008256:	2406      	movs	r4, #6
{
 8008258:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800825a:	9101      	str	r1, [sp, #4]
 800825c:	4601      	mov	r1, r0
 800825e:	9202      	str	r2, [sp, #8]
 8008260:	9400      	str	r4, [sp, #0]
 8008262:	4805      	ldr	r0, [pc, #20]	; (8008278 <DSI_IO_Read+0x24>)
 8008264:	f003 faaa 	bl	800b7bc <HAL_DSI_Read>
 8008268:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 800826a:	bf14      	ite	ne
 800826c:	f06f 0007 	mvnne.w	r0, #7
 8008270:	2000      	moveq	r0, #0
 8008272:	b004      	add	sp, #16
 8008274:	bd10      	pop	{r4, pc}
 8008276:	bf00      	nop
 8008278:	3000f7f8 	.word	0x3000f7f8

0800827c <BSP_LCD_DrawBitmap>:
{
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8008280:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8008284:	4e4f      	ldr	r6, [pc, #316]	; (80083c4 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8008286:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8008288:	f04f 0934 	mov.w	r9, #52	; 0x34
 800828c:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8008290:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8008294:	f8df e138 	ldr.w	lr, [pc, #312]	; 80083d0 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8008298:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800829a:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800829e:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80082a2:	68b9      	ldr	r1, [r7, #8]
{
 80082a4:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082a6:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80082a8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80082ac:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082b0:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80082b4:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082b8:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80082ba:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80082be:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082c2:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80082c6:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80082c8:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80082cc:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80082d0:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80082d4:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80082d6:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80082da:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082de:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80082e2:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80082e4:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 80082e8:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082ea:	4465      	add	r5, ip
 80082ec:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80082ee:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80082f0:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80082f2:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 80082f6:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80082fa:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80082fc:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8008300:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8008302:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8008306:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8008308:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 800830c:	d957      	bls.n	80083be <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800830e:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8008312:	2c08      	cmp	r4, #8
 8008314:	bf34      	ite	cc
 8008316:	f04f 0b02 	movcc.w	fp, #2
 800831a:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800831e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8008322:	9c03      	ldr	r4, [sp, #12]
 8008324:	f10a 35ff 	add.w	r5, sl, #4294967295
 8008328:	fb04 f909 	mul.w	r9, r4, r9
 800832c:	fb09 1505 	mla	r5, r9, r5, r1
 8008330:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8008332:	f1ba 0f00 	cmp.w	sl, #0
 8008336:	d03e      	beq.n	80083b6 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008338:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 800833a:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800833e:	2700      	movs	r7, #0
 8008340:	4c21      	ldr	r4, [pc, #132]	; (80083c8 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008342:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8008346:	e006      	b.n	8008356 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8008348:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 800834a:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800834c:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800834e:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8008350:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8008354:	d02f      	beq.n	80083b6 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008356:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8008358:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800835a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800835e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008362:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8008364:	4919      	ldr	r1, [pc, #100]	; (80083cc <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8008366:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 800836a:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800836e:	bf18      	it	ne
 8008370:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008372:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8008374:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8008376:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800837a:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800837e:	4812      	ldr	r0, [pc, #72]	; (80083c8 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8008380:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008384:	f002 fc20 	bl	800abc8 <HAL_DMA2D_Init>
 8008388:	2800      	cmp	r0, #0
 800838a:	d1dd      	bne.n	8008348 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800838c:	2101      	movs	r1, #1
 800838e:	480e      	ldr	r0, [pc, #56]	; (80083c8 <BSP_LCD_DrawBitmap+0x14c>)
 8008390:	f002 fe70 	bl	800b074 <HAL_DMA2D_ConfigLayer>
 8008394:	2800      	cmp	r0, #0
 8008396:	d1d7      	bne.n	8008348 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8008398:	2001      	movs	r0, #1
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	4642      	mov	r2, r8
 800839e:	4629      	mov	r1, r5
 80083a0:	9000      	str	r0, [sp, #0]
 80083a2:	4809      	ldr	r0, [pc, #36]	; (80083c8 <BSP_LCD_DrawBitmap+0x14c>)
 80083a4:	f002 fcda 	bl	800ad5c <HAL_DMA2D_Start>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d1cd      	bne.n	8008348 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80083ac:	2132      	movs	r1, #50	; 0x32
 80083ae:	4806      	ldr	r0, [pc, #24]	; (80083c8 <BSP_LCD_DrawBitmap+0x14c>)
 80083b0:	f002 fd30 	bl	800ae14 <HAL_DMA2D_PollForTransfer>
 80083b4:	e7c8      	b.n	8008348 <BSP_LCD_DrawBitmap+0xcc>
}
 80083b6:	2000      	movs	r0, #0
 80083b8:	b005      	add	sp, #20
 80083ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80083be:	f04f 0b00 	mov.w	fp, #0
 80083c2:	e7ac      	b.n	800831e <BSP_LCD_DrawBitmap+0xa2>
 80083c4:	3000f7dc 	.word	0x3000f7dc
 80083c8:	3000f814 	.word	0x3000f814
 80083cc:	52001000 	.word	0x52001000
 80083d0:	3000f734 	.word	0x3000f734

080083d4 <BSP_LCD_DrawVLine>:
{
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80083d8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084c0 <BSP_LCD_DrawVLine+0xec>
{
 80083dc:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80083de:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
{
 80083e2:	4616      	mov	r6, r2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80083e4:	eb02 0e05 	add.w	lr, r2, r5
{
 80083e8:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80083ea:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80083ee:	f85c 8023 	ldr.w	r8, [ip, r3, lsl #2]
 80083f2:	00c3      	lsls	r3, r0, #3
 80083f4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80084c4 <BSP_LCD_DrawVLine+0xf0>
 80083f8:	f04f 0a34 	mov.w	sl, #52	; 0x34
{
 80083fc:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 80083fe:	1a18      	subs	r0, r3, r0
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8008400:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008404:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8008408:	458e      	cmp	lr, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800840a:	fb0a 9202 	mla	r2, sl, r2, r9
 800840e:	f8d4 a010 	ldr.w	sl, [r4, #16]
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8008412:	bf88      	it	hi
 8008414:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008416:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800841a:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800841e:	f108 32ff 	add.w	r2, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008422:	2902      	cmp	r1, #2
{
 8008424:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008426:	d013      	beq.n	8008450 <BSP_LCD_DrawVLine+0x7c>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008428:	2100      	movs	r1, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800842a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 80084c8 <BSP_LCD_DrawVLine+0xf4>
 800842e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8008432:	4b22      	ldr	r3, [pc, #136]	; (80084bc <BSP_LCD_DrawVLine+0xe8>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008434:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8008436:	f8cb 1008 	str.w	r1, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800843a:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800843e:	e9cb 3c00 	strd	r3, ip, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008442:	f002 fbc1 	bl	800abc8 <HAL_DMA2D_Init>
 8008446:	b310      	cbz	r0, 800848e <BSP_LCD_DrawVLine+0xba>
}
 8008448:	2000      	movs	r0, #0
 800844a:	b003      	add	sp, #12
 800844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8008450:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8008454:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8008458:	f004 0c1f 	and.w	ip, r4, #31
 800845c:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 8008460:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8008464:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8008468:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800846c:	3421      	adds	r4, #33	; 0x21
 800846e:	eb0c 130c 	add.w	r3, ip, ip, lsl #4
 8008472:	3017      	adds	r0, #23
 8008474:	09a4      	lsrs	r4, r4, #6
 8008476:	0980      	lsrs	r0, r0, #6
 8008478:	0224      	lsls	r4, r4, #8
 800847a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800847e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8008482:	3317      	adds	r3, #23
 8008484:	ea44 1493 	orr.w	r4, r4, r3, lsr #6
 8008488:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
    break;
 800848c:	e7cd      	b.n	800842a <BSP_LCD_DrawVLine+0x56>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800848e:	2101      	movs	r1, #1
 8008490:	4658      	mov	r0, fp
 8008492:	f002 fdef 	bl	800b074 <HAL_DMA2D_ConfigLayer>
 8008496:	2800      	cmp	r0, #0
 8008498:	d1d6      	bne.n	8008448 <BSP_LCD_DrawVLine+0x74>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800849a:	fb06 7208 	mla	r2, r6, r8, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800849e:	4621      	mov	r1, r4
 80084a0:	2301      	movs	r3, #1
 80084a2:	4658      	mov	r0, fp
 80084a4:	fb0a 9202 	mla	r2, sl, r2, r9
 80084a8:	9500      	str	r5, [sp, #0]
 80084aa:	f002 fc57 	bl	800ad5c <HAL_DMA2D_Start>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d1ca      	bne.n	8008448 <BSP_LCD_DrawVLine+0x74>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80084b2:	4658      	mov	r0, fp
 80084b4:	2119      	movs	r1, #25
 80084b6:	f002 fcad 	bl	800ae14 <HAL_DMA2D_PollForTransfer>
 80084ba:	e7c5      	b.n	8008448 <BSP_LCD_DrawVLine+0x74>
 80084bc:	52001000 	.word	0x52001000
 80084c0:	3000f7dc 	.word	0x3000f7dc
 80084c4:	3000f734 	.word	0x3000f734
 80084c8:	3000f814 	.word	0x3000f814

080084cc <DSI_IO_Write>:
  if(Size <= 1U)
 80084cc:	2b01      	cmp	r3, #1
{
 80084ce:	b530      	push	{r4, r5, lr}
 80084d0:	460d      	mov	r5, r1
 80084d2:	b083      	sub	sp, #12
 80084d4:	4601      	mov	r1, r0
  if(Size <= 1U)
 80084d6:	d909      	bls.n	80084ec <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80084d8:	480a      	ldr	r0, [pc, #40]	; (8008504 <DSI_IO_Write+0x38>)
 80084da:	e9cd 5200 	strd	r5, r2, [sp]
 80084de:	2239      	movs	r2, #57	; 0x39
 80084e0:	f003 f8fc 	bl	800b6dc <HAL_DSI_LongWrite>
 80084e4:	b958      	cbnz	r0, 80084fe <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 80084e6:	2000      	movs	r0, #0
}
 80084e8:	b003      	add	sp, #12
 80084ea:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80084ec:	5cd0      	ldrb	r0, [r2, r3]
 80084ee:	462b      	mov	r3, r5
 80084f0:	2215      	movs	r2, #21
 80084f2:	9000      	str	r0, [sp, #0]
 80084f4:	4803      	ldr	r0, [pc, #12]	; (8008504 <DSI_IO_Write+0x38>)
 80084f6:	f003 f8c5 	bl	800b684 <HAL_DSI_ShortWrite>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d0f3      	beq.n	80084e6 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 80084fe:	f06f 0007 	mvn.w	r0, #7
 8008502:	e7f1      	b.n	80084e8 <DSI_IO_Write+0x1c>
 8008504:	3000f7f8 	.word	0x3000f7f8

08008508 <BSP_LCD_FillRect>:
{
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800850c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8008510:	4d30      	ldr	r5, [pc, #192]	; (80085d4 <BSP_LCD_FillRect+0xcc>)
{
 8008512:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008514:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80085e0 <BSP_LCD_FillRect+0xd8>
 8008518:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 800851c:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 8008520:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008522:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
 8008526:	68a3      	ldr	r3, [r4, #8]
{
 8008528:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 800852a:	68e1      	ldr	r1, [r4, #12]
{
 800852c:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800852e:	fb0e c303 	mla	r3, lr, r3, ip
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8008532:	eba9 0206 	sub.w	r2, r9, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008536:	2902      	cmp	r1, #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8008538:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800853c:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
{
 8008540:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008542:	d010      	beq.n	8008566 <BSP_LCD_FillRect+0x5e>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008544:	2100      	movs	r1, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8008546:	4c24      	ldr	r4, [pc, #144]	; (80085d8 <BSP_LCD_FillRect+0xd0>)
 8008548:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 800854c:	4b23      	ldr	r3, [pc, #140]	; (80085dc <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800854e:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8008550:	60a1      	str	r1, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008552:	60e2      	str	r2, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8008554:	e9c4 3c00 	strd	r3, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008558:	f002 fb36 	bl	800abc8 <HAL_DMA2D_Init>
 800855c:	b310      	cbz	r0, 80085a4 <BSP_LCD_FillRect+0x9c>
}
 800855e:	2000      	movs	r0, #0
 8008560:	b003      	add	sp, #12
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8008566:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800856a:	f3c5 20c4 	ubfx	r0, r5, #11, #5
 800856e:	f005 041f 	and.w	r4, r5, #31
 8008572:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 8008576:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800857a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800857e:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8008582:	3521      	adds	r5, #33	; 0x21
 8008584:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8008588:	3017      	adds	r0, #23
 800858a:	09ad      	lsrs	r5, r5, #6
 800858c:	0980      	lsrs	r0, r0, #6
 800858e:	022d      	lsls	r5, r5, #8
 8008590:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8008594:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8008598:	3317      	adds	r3, #23
 800859a:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 800859e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 80085a2:	e7d0      	b.n	8008546 <BSP_LCD_FillRect+0x3e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80085a4:	2101      	movs	r1, #1
 80085a6:	4620      	mov	r0, r4
 80085a8:	f002 fd64 	bl	800b074 <HAL_DMA2D_ConfigLayer>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1d6      	bne.n	800855e <BSP_LCD_FillRect+0x56>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80085b0:	990c      	ldr	r1, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80085b2:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80085b6:	4633      	mov	r3, r6
 80085b8:	4620      	mov	r0, r4
 80085ba:	9100      	str	r1, [sp, #0]
 80085bc:	4629      	mov	r1, r5
 80085be:	fb0b a202 	mla	r2, fp, r2, sl
 80085c2:	f002 fbcb 	bl	800ad5c <HAL_DMA2D_Start>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d1c9      	bne.n	800855e <BSP_LCD_FillRect+0x56>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80085ca:	4620      	mov	r0, r4
 80085cc:	2119      	movs	r1, #25
 80085ce:	f002 fc21 	bl	800ae14 <HAL_DMA2D_PollForTransfer>
 80085d2:	e7c4      	b.n	800855e <BSP_LCD_FillRect+0x56>
 80085d4:	3000f7dc 	.word	0x3000f7dc
 80085d8:	3000f814 	.word	0x3000f814
 80085dc:	52001000 	.word	0x52001000
 80085e0:	3000f734 	.word	0x3000f734

080085e4 <BSP_LCD_DrawHLine>:
{
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80085e8:	4c36      	ldr	r4, [pc, #216]	; (80086c4 <BSP_LCD_DrawHLine+0xe0>)
{
 80085ea:	469b      	mov	fp, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80085ec:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80085f0:	f04f 0934 	mov.w	r9, #52	; 0x34
 80085f4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80086d0 <BSP_LCD_DrawHLine+0xec>
{
 80085f8:	4617      	mov	r7, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80085fa:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80085fe:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8008602:	00c3      	lsls	r3, r0, #3
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8008604:	eb01 0c0b 	add.w	ip, r1, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008608:	68aa      	ldr	r2, [r5, #8]
{
 800860a:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 800860c:	1a18      	subs	r0, r3, r0
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800860e:	45e0      	cmp	r8, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008610:	fb09 e202 	mla	r2, r9, r2, lr
 8008614:	f8d5 a010 	ldr.w	sl, [r5, #16]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008618:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800861c:	bf38      	it	cc
 800861e:	eba8 0b01 	subcc.w	fp, r8, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008622:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
{
 8008626:	460e      	mov	r6, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 8008628:	68e2      	ldr	r2, [r4, #12]
{
 800862a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 800862c:	2a02      	cmp	r2, #2
 800862e:	d011      	beq.n	8008654 <BSP_LCD_DrawHLine+0x70>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008630:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8008632:	4c25      	ldr	r4, [pc, #148]	; (80086c8 <BSP_LCD_DrawHLine+0xe4>)
 8008634:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008638:	2100      	movs	r1, #0
  hlcd_dma2d.Instance = DMA2D;
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <BSP_LCD_DrawHLine+0xe8>)
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800863c:	e9c4 0201 	strd	r0, r2, [r4, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008640:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8008642:	60e1      	str	r1, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8008644:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008646:	f002 fabf 	bl	800abc8 <HAL_DMA2D_Init>
 800864a:	b310      	cbz	r0, 8008692 <BSP_LCD_DrawHLine+0xae>
}
 800864c:	2000      	movs	r0, #0
 800864e:	b003      	add	sp, #12
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8008654:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8008658:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800865c:	f005 001f 	and.w	r0, r5, #31
 8008660:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 8008664:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8008668:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800866c:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8008670:	3521      	adds	r5, #33	; 0x21
 8008672:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8008676:	3117      	adds	r1, #23
 8008678:	09ad      	lsrs	r5, r5, #6
 800867a:	0989      	lsrs	r1, r1, #6
 800867c:	022d      	lsls	r5, r5, #8
 800867e:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8008682:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8008686:	3317      	adds	r3, #23
 8008688:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 800868c:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8008690:	e7cf      	b.n	8008632 <BSP_LCD_DrawHLine+0x4e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8008692:	2101      	movs	r1, #1
 8008694:	4620      	mov	r0, r4
 8008696:	f002 fced 	bl	800b074 <HAL_DMA2D_ConfigLayer>
 800869a:	2800      	cmp	r0, #0
 800869c:	d1d6      	bne.n	800864c <BSP_LCD_DrawHLine+0x68>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800869e:	fb07 6208 	mla	r2, r7, r8, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80086a2:	2601      	movs	r6, #1
 80086a4:	465b      	mov	r3, fp
 80086a6:	4629      	mov	r1, r5
 80086a8:	fb0a 9202 	mla	r2, sl, r2, r9
 80086ac:	4620      	mov	r0, r4
 80086ae:	9600      	str	r6, [sp, #0]
 80086b0:	f002 fb54 	bl	800ad5c <HAL_DMA2D_Start>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d1c9      	bne.n	800864c <BSP_LCD_DrawHLine+0x68>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80086b8:	4620      	mov	r0, r4
 80086ba:	2119      	movs	r1, #25
 80086bc:	f002 fbaa 	bl	800ae14 <HAL_DMA2D_PollForTransfer>
 80086c0:	e7c4      	b.n	800864c <BSP_LCD_DrawHLine+0x68>
 80086c2:	bf00      	nop
 80086c4:	3000f7dc 	.word	0x3000f7dc
 80086c8:	3000f814 	.word	0x3000f814
 80086cc:	52001000 	.word	0x52001000
 80086d0:	3000f734 	.word	0x3000f734

080086d4 <MX_DSIHOST_DSI_Init>:
{
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdsi->Instance = DSI;
 80086d8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 80086dc:	b09f      	sub	sp, #124	; 0x7c
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80086de:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 80086e0:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80086e4:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 80086e6:	f04f 0b64 	mov.w	fp, #100	; 0x64
 80086ea:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 80086ee:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80086f0:	60c6      	str	r6, [r0, #12]
{
 80086f2:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80086f4:	4669      	mov	r1, sp
{
 80086f6:	4604      	mov	r4, r0
 80086f8:	4690      	mov	r8, r2
 80086fa:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80086fc:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 80086fe:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLNDIV = 100;
 8008702:	e9cd bc00 	strd	fp, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8008706:	f002 fd25 	bl	800b154 <HAL_DSI_Init>
 800870a:	b118      	cbz	r0, 8008714 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 800870c:	4630      	mov	r0, r6
}
 800870e:	b01f      	add	sp, #124	; 0x7c
 8008710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8008714:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008718:	4a22      	ldr	r2, [pc, #136]	; (80087a4 <MX_DSIHOST_DSI_Init+0xd0>)
 800871a:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800871c:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800871e:	fb03 2207 	mla	r2, r3, r7, r2
 8008722:	4b21      	ldr	r3, [pc, #132]	; (80087a8 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8008724:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8008726:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8008728:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 800872c:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8008730:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8008734:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8008738:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 800873a:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800873c:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800873e:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8008740:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8008742:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8008746:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800874a:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800874e:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8008750:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8008752:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8008756:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8008758:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 800875c:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800875e:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8008762:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8008766:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800876a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800876e:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8008770:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8008774:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8008776:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800877a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800877e:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8008782:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8008784:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8008788:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 800878c:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8008790:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8008794:	f002 fe16 	bl	800b3c4 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8008798:	3800      	subs	r0, #0
 800879a:	bf18      	it	ne
 800879c:	2001      	movne	r0, #1
}
 800879e:	b01f      	add	sp, #124	; 0x7c
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	0042c1d8 	.word	0x0042c1d8
 80087a8:	4c751ce3 	.word	0x4c751ce3

080087ac <MX_LTDC_Init>:
{
 80087ac:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 80087ae:	4d0e      	ldr	r5, [pc, #56]	; (80087e8 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80087b0:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80087b4:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80087b6:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 80087b8:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80087ba:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80087bc:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80087be:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80087c0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80087c2:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80087c4:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80087c6:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80087c8:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80087ca:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80087cc:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80087ce:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 80087d0:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 80087d2:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80087d6:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 80087d8:	6181      	str	r1, [r0, #24]
}
 80087da:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80087dc:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80087e0:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 80087e4:	f003 be84 	b.w	800c4f0 <HAL_LTDC_Init>
 80087e8:	50001000 	.word	0x50001000

080087ec <MX_LTDC_ConfigLayer>:
{
 80087ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ee:	4613      	mov	r3, r2
 80087f0:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 80087f2:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80087f4:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 80087f6:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80087f8:	f04f 0c07 	mov.w	ip, #7
  pLayerCfg.Alpha = 255;
 80087fc:	9405      	str	r4, [sp, #20]
  pLayerCfg.Backcolor.Blue = 0;
 80087fe:	2500      	movs	r5, #0
  pLayerCfg.WindowY0 = Config->Y0;
 8008800:	9102      	str	r1, [sp, #8]
  pLayerCfg.Alpha0 = 0;
 8008802:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008806:	f8cd c020 	str.w	ip, [sp, #32]
  pLayerCfg.Backcolor.Blue = 0;
 800880a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Red = 0;
 800880e:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  pLayerCfg.WindowX1 = Config->X1;
 8008812:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8008816:	9400      	str	r4, [sp, #0]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8008818:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 800881a:	9601      	str	r6, [sp, #4]
  pLayerCfg.WindowY1 = Config->Y1;
 800881c:	68de      	ldr	r6, [r3, #12]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800881e:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8008820:	1a71      	subs	r1, r6, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8008822:	9603      	str	r6, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8008824:	2600      	movs	r6, #0
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8008826:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.FBStartAdress = Config->Address;
 8008828:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.Alpha0 = 0;
 800882c:	e9cd 6706 	strd	r6, r7, [sp, #24]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8008830:	9104      	str	r1, [sp, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8008832:	4669      	mov	r1, sp
  pLayerCfg.FBStartAdress = Config->Address;
 8008834:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8008836:	f003 ff35 	bl	800c6a4 <HAL_LTDC_ConfigLayer>
}
 800883a:	b00f      	add	sp, #60	; 0x3c
 800883c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883e:	bf00      	nop

08008840 <MX_LTDC_ClockConfig>:
{
 8008840:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8008842:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8008846:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8008848:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800884a:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800884c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8008850:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8008852:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8008854:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8008856:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8008858:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800885a:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800885c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800885e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8008862:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8008866:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800886a:	f005 f8f7 	bl	800da5c <HAL_RCCEx_PeriphCLKConfig>
}
 800886e:	b031      	add	sp, #196	; 0xc4
 8008870:	bd30      	pop	{r4, r5, pc}
 8008872:	bf00      	nop

08008874 <BSP_LCD_InitEx>:
{
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8008878:	2901      	cmp	r1, #1
{
 800887a:	b095      	sub	sp, #84	; 0x54
 800887c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800887e:	f200 814d 	bhi.w	8008b1c <BSP_LCD_InitEx+0x2a8>
 8008882:	f1b0 0b00 	subs.w	fp, r0, #0
 8008886:	bf18      	it	ne
 8008888:	f04f 0b01 	movne.w	fp, #1
 800888c:	2800      	cmp	r0, #0
 800888e:	f040 8145 	bne.w	8008b1c <BSP_LCD_InitEx+0x2a8>
 8008892:	4689      	mov	r9, r1
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8008894:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8008896:	2901      	cmp	r1, #1
 8008898:	f200 8140 	bhi.w	8008b1c <BSP_LCD_InitEx+0x2a8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800889c:	2a02      	cmp	r2, #2
 800889e:	461d      	mov	r5, r3
 80088a0:	f000 810a 	beq.w	8008ab8 <BSP_LCD_InitEx+0x244>
      Lcd_Ctx[Instance].BppFactor = 4U;
 80088a4:	2004      	movs	r0, #4
      dsi_pixel_format = DSI_RGB888;
 80088a6:	2305      	movs	r3, #5
  LCD_RESET_GPIO_CLK_ENABLE();
 80088a8:	4c9e      	ldr	r4, [pc, #632]	; (8008b24 <BSP_LCD_InitEx+0x2b0>)
 80088aa:	4e9f      	ldr	r6, [pc, #636]	; (8008b28 <BSP_LCD_InitEx+0x2b4>)
 80088ac:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 80088ae:	2301      	movs	r3, #1
    Lcd_Ctx[Instance].XSize  = Width;
 80088b0:	6035      	str	r5, [r6, #0]
  LCD_RESET_GPIO_CLK_ENABLE();
 80088b2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 80088b6:	6130      	str	r0, [r6, #16]
 80088b8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80088bc:	60f2      	str	r2, [r6, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 80088be:	6077      	str	r7, [r6, #4]
  LCD_RESET_GPIO_CLK_ENABLE();
 80088c0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80088c4:	a90e      	add	r1, sp, #56	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 80088c6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80088ca:	4898      	ldr	r0, [pc, #608]	; (8008b2c <BSP_LCD_InitEx+0x2b8>)
  LCD_RESET_GPIO_CLK_ENABLE();
 80088cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
    hlcd_ltdc.Instance = LTDC;
 80088d0:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8008b58 <BSP_LCD_InitEx+0x2e4>
    hlcd_dsi.Instance = DSI;
 80088d4:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008b5c <BSP_LCD_InitEx+0x2e8>
  LCD_RESET_GPIO_CLK_ENABLE();
 80088d8:	9208      	str	r2, [sp, #32]
 80088da:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 80088dc:	2208      	movs	r2, #8
 80088de:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80088e2:	2303      	movs	r3, #3
 80088e4:	2201      	movs	r2, #1
 80088e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80088ea:	f003 f813 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80088ee:	2200      	movs	r2, #0
 80088f0:	2108      	movs	r1, #8
 80088f2:	488e      	ldr	r0, [pc, #568]	; (8008b2c <BSP_LCD_InitEx+0x2b8>)
 80088f4:	f003 fa00 	bl	800bcf8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80088f8:	2014      	movs	r0, #20
 80088fa:	f000 faed 	bl	8008ed8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80088fe:	2201      	movs	r2, #1
 8008900:	2108      	movs	r1, #8
 8008902:	488a      	ldr	r0, [pc, #552]	; (8008b2c <BSP_LCD_InitEx+0x2b8>)
 8008904:	f003 f9f8 	bl	800bcf8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8008908:	200a      	movs	r0, #10
 800890a:	f000 fae5 	bl	8008ed8 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800890e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8008912:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008914:	a90e      	add	r1, sp, #56	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800891a:	4885      	ldr	r0, [pc, #532]	; (8008b30 <BSP_LCD_InitEx+0x2bc>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800891c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8008920:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008924:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8008928:	9206      	str	r2, [sp, #24]
 800892a:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800892c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008930:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008934:	2302      	movs	r3, #2
 8008936:	2200      	movs	r2, #0
 8008938:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800893c:	f002 ffea 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008940:	2201      	movs	r2, #1
 8008942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008946:	487a      	ldr	r0, [pc, #488]	; (8008b30 <BSP_LCD_InitEx+0x2bc>)
 8008948:	f003 f9d6 	bl	800bcf8 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800894c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008950:	2002      	movs	r0, #2
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8008952:	2300      	movs	r3, #0
  LCD_TE_GPIO_CLK_ENABLE();
 8008954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8008958:	a90e      	add	r1, sp, #56	; 0x38
  LCD_TE_GPIO_CLK_ENABLE();
 800895a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800895e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008962:	9011      	str	r0, [sp, #68]	; 0x44
  LCD_TE_GPIO_CLK_ENABLE();
 8008964:	f402 7200 	and.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8008968:	4871      	ldr	r0, [pc, #452]	; (8008b30 <BSP_LCD_InitEx+0x2bc>)
  LCD_TE_GPIO_CLK_ENABLE();
 800896a:	9207      	str	r2, [sp, #28]
 800896c:	9a07      	ldr	r2, [sp, #28]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800896e:	2204      	movs	r2, #4
 8008970:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8008974:	f002 ffce 	bl	800b914 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8008978:	2201      	movs	r2, #1
 800897a:	2104      	movs	r1, #4
 800897c:	486c      	ldr	r0, [pc, #432]	; (8008b30 <BSP_LCD_InitEx+0x2bc>)
 800897e:	f003 f9bb 	bl	800bcf8 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8008982:	2200      	movs	r2, #0
 8008984:	210f      	movs	r1, #15
 8008986:	2058      	movs	r0, #88	; 0x58
 8008988:	f000 fada 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800898c:	2058      	movs	r0, #88	; 0x58
 800898e:	f000 fb11 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8008992:	2200      	movs	r2, #0
 8008994:	210f      	movs	r1, #15
 8008996:	205a      	movs	r0, #90	; 0x5a
 8008998:	f000 fad2 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800899c:	205a      	movs	r0, #90	; 0x5a
 800899e:	f000 fb09 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 80089a2:	2200      	movs	r2, #0
 80089a4:	210f      	movs	r1, #15
 80089a6:	207b      	movs	r0, #123	; 0x7b
 80089a8:	f000 faca 	bl	8008f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80089ac:	207b      	movs	r0, #123	; 0x7b
 80089ae:	f000 fb01 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80089b2:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
    hlcd_ltdc.Instance = LTDC;
 80089b6:	495f      	ldr	r1, [pc, #380]	; (8008b34 <BSP_LCD_InitEx+0x2c0>)
    hlcd_dsi.Instance = DSI;
 80089b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    hlcd_dma2d.Instance = DMA2D;
 80089bc:	4a5e      	ldr	r2, [pc, #376]	; (8008b38 <BSP_LCD_InitEx+0x2c4>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80089be:	f04c 0c08 	orr.w	ip, ip, #8
    hlcd_ltdc.Instance = LTDC;
 80089c2:	f8c8 1000 	str.w	r1, [r8]
    hlcd_dma2d.Instance = DMA2D;
 80089c6:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
    hlcd_dsi.Instance = DSI;
 80089ca:	f8ca 0000 	str.w	r0, [sl]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80089ce:	4650      	mov	r0, sl
    hlcd_dma2d.Instance = DMA2D;
 80089d0:	6011      	str	r1, [r2, #0]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 80089d2:	463a      	mov	r2, r7
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	4629      	mov	r1, r5
    __HAL_RCC_LTDC_CLK_ENABLE();
 80089d8:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
 80089dc:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 80089e0:	f00c 0c08 	and.w	ip, ip, #8
 80089e4:	f8cd c014 	str.w	ip, [sp, #20]
 80089e8:	f8dd c014 	ldr.w	ip, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 80089ec:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 80089f0:	f04c 0c08 	orr.w	ip, ip, #8
 80089f4:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80089f8:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 80089fc:	f02c 0c08 	bic.w	ip, ip, #8
 8008a00:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008a04:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
 8008a08:	f04c 0c10 	orr.w	ip, ip, #16
 8008a0c:	f8c4 c0d4 	str.w	ip, [r4, #212]	; 0xd4
 8008a10:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
 8008a14:	f00c 0c10 	and.w	ip, ip, #16
 8008a18:	f8cd c010 	str.w	ip, [sp, #16]
 8008a1c:	f8dd c010 	ldr.w	ip, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8008a20:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 8008a24:	f04c 0c10 	orr.w	ip, ip, #16
 8008a28:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8008a2c:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 8008a30:	f02c 0c10 	bic.w	ip, ip, #16
 8008a34:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 8008a38:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 8008a3c:	f04c 0c10 	orr.w	ip, ip, #16
 8008a40:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
 8008a44:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 8008a48:	f00c 0c10 	and.w	ip, ip, #16
 8008a4c:	f8cd c00c 	str.w	ip, [sp, #12]
 8008a50:	f8dd c00c 	ldr.w	ip, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 8008a54:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 8008a58:	f04c 0c10 	orr.w	ip, ip, #16
 8008a5c:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8008a60:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 8008a64:	f02c 0c10 	bic.w	ip, ip, #16
 8008a68:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8008a6c:	f7ff fe32 	bl	80086d4 <MX_DSIHOST_DSI_Init>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d14e      	bne.n	8008b12 <BSP_LCD_InitEx+0x29e>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8008a74:	4640      	mov	r0, r8
 8008a76:	f7ff fee3 	bl	8008840 <MX_LTDC_ClockConfig>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d149      	bne.n	8008b12 <BSP_LCD_InitEx+0x29e>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8008a7e:	4629      	mov	r1, r5
 8008a80:	463a      	mov	r2, r7
 8008a82:	4640      	mov	r0, r8
 8008a84:	f7ff fe92 	bl	80087ac <MX_LTDC_Init>
 8008a88:	4601      	mov	r1, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d141      	bne.n	8008b12 <BSP_LCD_InitEx+0x29e>
      config.Address     = LCD_LAYER_0_ADDRESS;
 8008a8e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8008a92:	aa0e      	add	r2, sp, #56	; 0x38
 8008a94:	4640      	mov	r0, r8
      config.X1          = Width;
 8008a96:	e9cd 150e 	strd	r1, r5, [sp, #56]	; 0x38
      config.Y1          = Height;
 8008a9a:	e9cd 1710 	strd	r1, r7, [sp, #64]	; 0x40
      config.Address     = LCD_LAYER_0_ADDRESS;
 8008a9e:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8008aa2:	f7ff fea3 	bl	80087ec <MX_LTDC_ConfigLayer>
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	b150      	cbz	r0, 8008ac0 <BSP_LCD_InitEx+0x24c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8008aaa:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	61b3      	str	r3, [r6, #24]
}
 8008ab2:	b015      	add	sp, #84	; 0x54
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 8008ab8:	465b      	mov	r3, fp
      Lcd_Ctx[Instance].BppFactor = 2U;
 8008aba:	4610      	mov	r0, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8008abc:	4693      	mov	fp, r2
 8008abe:	e6f3      	b.n	80088a8 <BSP_LCD_InitEx+0x34>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8008ac0:	4650      	mov	r0, sl
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8008ac2:	4d1e      	ldr	r5, [pc, #120]	; (8008b3c <BSP_LCD_InitEx+0x2c8>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 8008ac4:	f002 fdb6 	bl	800b634 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8008ac8:	2104      	movs	r1, #4
 8008aca:	4650      	mov	r0, sl
 8008acc:	f002 fd9e 	bl	800b60c <HAL_DSI_ConfigFlowControl>
  IOCtx.WriteReg    = DSI_IO_Write;
 8008ad0:	4b1b      	ldr	r3, [pc, #108]	; (8008b40 <BSP_LCD_InitEx+0x2cc>)
  IOCtx.GetTick     = BSP_GetTick;
 8008ad2:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <BSP_LCD_InitEx+0x2d0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8008ad4:	4628      	mov	r0, r5
  IOCtx.WriteReg    = DSI_IO_Write;
 8008ad6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8008ad8:	a90a      	add	r1, sp, #40	; 0x28
  IOCtx.ReadReg     = DSI_IO_Read;
 8008ada:	4b1b      	ldr	r3, [pc, #108]	; (8008b48 <BSP_LCD_InitEx+0x2d4>)
  IOCtx.Address     = 0;
 8008adc:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  IOCtx.GetTick     = BSP_GetTick;
 8008ae0:	920d      	str	r2, [sp, #52]	; 0x34
  IOCtx.ReadReg     = DSI_IO_Read;
 8008ae2:	930c      	str	r3, [sp, #48]	; 0x30
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8008ae4:	f7fc fb96 	bl	8005214 <OTM8009A_RegisterBusIO>
 8008ae8:	b980      	cbnz	r0, 8008b0c <BSP_LCD_InitEx+0x298>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8008aea:	4c18      	ldr	r4, [pc, #96]	; (8008b4c <BSP_LCD_InitEx+0x2d8>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8008aec:	4628      	mov	r0, r5
 8008aee:	a909      	add	r1, sp, #36	; 0x24
    Lcd_CompObj = &OTM8009AObj;
 8008af0:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8008af2:	f7fc fb7b 	bl	80051ec <OTM8009A_ReadID>
 8008af6:	b948      	cbnz	r0, 8008b0c <BSP_LCD_InitEx+0x298>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8008af8:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <BSP_LCD_InitEx+0x2dc>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8008afa:	464a      	mov	r2, r9
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8008afc:	4d15      	ldr	r5, [pc, #84]	; (8008b54 <BSP_LCD_InitEx+0x2e0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8008afe:	4659      	mov	r1, fp
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8008b04:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8008b06:	47a0      	blx	r4
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d0d0      	beq.n	8008aae <BSP_LCD_InitEx+0x23a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b0c:	f06f 0006 	mvn.w	r0, #6
 8008b10:	e7cd      	b.n	8008aae <BSP_LCD_InitEx+0x23a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b12:	f06f 0003 	mvn.w	r0, #3
}
 8008b16:	b015      	add	sp, #84	; 0x54
 8008b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008b1c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8008b20:	e7c7      	b.n	8008ab2 <BSP_LCD_InitEx+0x23e>
 8008b22:	bf00      	nop
 8008b24:	58024400 	.word	0x58024400
 8008b28:	3000f7dc 	.word	0x3000f7dc
 8008b2c:	58021800 	.word	0x58021800
 8008b30:	58022400 	.word	0x58022400
 8008b34:	50001000 	.word	0x50001000
 8008b38:	3000f814 	.word	0x3000f814
 8008b3c:	300081b0 	.word	0x300081b0
 8008b40:	080084cd 	.word	0x080084cd
 8008b44:	08007935 	.word	0x08007935
 8008b48:	08008255 	.word	0x08008255
 8008b4c:	300081a8 	.word	0x300081a8
 8008b50:	240000b8 	.word	0x240000b8
 8008b54:	300081ac 	.word	0x300081ac
 8008b58:	3000f734 	.word	0x3000f734
 8008b5c:	3000f7f8 	.word	0x3000f7f8

08008b60 <BSP_LCD_Init>:
{
 8008b60:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8008b62:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8008b66:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8008b68:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	9400      	str	r4, [sp, #0]
 8008b70:	f7ff fe80 	bl	8008874 <BSP_LCD_InitEx>
}
 8008b74:	b002      	add	sp, #8
 8008b76:	bd10      	pop	{r4, pc}

08008b78 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 8008b78:	b948      	cbnz	r0, 8008b8e <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 8008b7a:	4806      	ldr	r0, [pc, #24]	; (8008b94 <BSP_LCD_ConfigLayer+0x1c>)
{
 8008b7c:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 8008b7e:	f7ff fe35 	bl	80087ec <MX_LTDC_ConfigLayer>
 8008b82:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008b84:	bf0c      	ite	eq
 8008b86:	2000      	moveq	r0, #0
 8008b88:	f06f 0003 	mvnne.w	r0, #3
}
 8008b8c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008b8e:	f06f 0001 	mvn.w	r0, #1
}
 8008b92:	4770      	bx	lr
 8008b94:	3000f734 	.word	0x3000f734

08008b98 <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 8008b98:	b958      	cbnz	r0, 8008bb2 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 8008b9a:	4a07      	ldr	r2, [pc, #28]	; (8008bb8 <BSP_LCD_SetBrightness+0x20>)
{
 8008b9c:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 8008b9e:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <BSP_LCD_SetBrightness+0x24>)
 8008ba0:	6810      	ldr	r0, [r2, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	4798      	blx	r3
 8008ba8:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008baa:	bf18      	it	ne
 8008bac:	f06f 0003 	mvnne.w	r0, #3
}
 8008bb0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008bb2:	f06f 0001 	mvn.w	r0, #1
}
 8008bb6:	4770      	bx	lr
 8008bb8:	300081a8 	.word	0x300081a8
 8008bbc:	300081ac 	.word	0x300081ac

08008bc0 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 8008bc0:	b9d0      	cbnz	r0, 8008bf8 <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 8008bc2:	4810      	ldr	r0, [pc, #64]	; (8008c04 <BSP_SD_DeInit+0x44>)
{
 8008bc4:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 8008bc6:	f006 fbab 	bl	800f320 <HAL_SD_DeInit>
 8008bca:	4604      	mov	r4, r0
 8008bcc:	b9b8      	cbnz	r0, 8008bfe <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8008bce:	2031      	movs	r0, #49	; 0x31
 8008bd0:	f000 f9fe 	bl	8008fd0 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8008bd4:	4a0c      	ldr	r2, [pc, #48]	; (8008c08 <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8008bd6:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8008bda:	480c      	ldr	r0, [pc, #48]	; (8008c0c <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8008bdc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8008be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8008be8:	f002 ffb2 	bl	800bb50 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8008bec:	2104      	movs	r1, #4
 8008bee:	4808      	ldr	r0, [pc, #32]	; (8008c10 <BSP_SD_DeInit+0x50>)
 8008bf0:	f002 ffae 	bl	800bb50 <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 8008bf4:	4620      	mov	r0, r4
}
 8008bf6:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008bf8:	f06f 0001 	mvn.w	r0, #1
}
 8008bfc:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008bfe:	f06f 0003 	mvn.w	r0, #3
}
 8008c02:	bd10      	pop	{r4, pc}
 8008c04:	3000f87c 	.word	0x3000f87c
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	58020800 	.word	0x58020800
 8008c10:	58020c00 	.word	0x58020c00

08008c14 <MX_SDMMC1_SD_Init>:
{
 8008c14:	b538      	push	{r3, r4, r5, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c16:	2200      	movs	r2, #0
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 8008c18:	2104      	movs	r1, #4
  hsd->Instance                 = SDMMC1;
 8008c1a:	4d07      	ldr	r5, [pc, #28]	; (8008c38 <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 8008c1c:	2402      	movs	r4, #2
  hsd->Instance                 = SDMMC1;
 8008c1e:	6005      	str	r5, [r0, #0]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 8008c20:	e9c0 1405 	strd	r1, r4, [r0, #20]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c24:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c28:	e9c0 2203 	strd	r2, r2, [r0, #12]
  if(HAL_SD_Init(hsd) != HAL_OK)
 8008c2c:	f006 fff4 	bl	800fc18 <HAL_SD_Init>
}
 8008c30:	3800      	subs	r0, #0
 8008c32:	bf18      	it	ne
 8008c34:	2001      	movne	r0, #1
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	52007000 	.word	0x52007000

08008c3c <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f040 8088 	bne.w	8008d52 <BSP_SD_Init+0x116>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 8008c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c46:	4846      	ldr	r0, [pc, #280]	; (8008d60 <BSP_SD_Init+0x124>)
{
 8008c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	b08d      	sub	sp, #52	; 0x34
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 8008c4e:	f003 f84d 	bl	800bcec <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 8008c52:	4605      	mov	r5, r0
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d177      	bne.n	8008d48 <BSP_SD_Init+0x10c>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c58:	4c42      	ldr	r4, [pc, #264]	; (8008d64 <BSP_SD_Init+0x128>)
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 8008c5a:	220c      	movs	r2, #12
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 8008c5c:	f44f 5688 	mov.w	r6, #4352	; 0x1100
 8008c60:	2702      	movs	r7, #2
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c62:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 8008c66:	f04f 0801 	mov.w	r8, #1
 8008c6a:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008c6e:	a906      	add	r1, sp, #24
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008c74:	483c      	ldr	r0, [pc, #240]	; (8008d68 <BSP_SD_Init+0x12c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c76:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8008c7a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8008c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c86:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008c8a:	f043 0302 	orr.w	r3, r3, #2
 8008c8e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008c92:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	9302      	str	r3, [sp, #8]
 8008c9c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c9e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008ca2:	f043 0304 	orr.w	r3, r3, #4
 8008ca6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008caa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008cae:	f003 0304 	and.w	r3, r3, #4
 8008cb2:	9303      	str	r3, [sp, #12]
 8008cb4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cb6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008cba:	f043 0308 	orr.w	r3, r3, #8
 8008cbe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008cc2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 8008cc6:	920a      	str	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cc8:	f003 0308 	and.w	r3, r3, #8
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 8008cd0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cd4:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008cd8:	f002 fe1c 	bl	800b914 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 8008cdc:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008cde:	a906      	add	r1, sp, #24
 8008ce0:	4822      	ldr	r0, [pc, #136]	; (8008d6c <BSP_SD_Init+0x130>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8008ce2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008ce4:	f002 fe16 	bl	800b914 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 8008ce8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8008cec:	f44f 7680 	mov.w	r6, #256	; 0x100
 8008cf0:	2700      	movs	r7, #0
 8008cf2:	f04f 0801 	mov.w	r8, #1
  SD_DETECT_GPIO_CLK_ENABLE();
 8008cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8008cfa:	f04f 0902 	mov.w	r9, #2
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8008cfe:	a906      	add	r1, sp, #24
 8008d00:	4817      	ldr	r0, [pc, #92]	; (8008d60 <BSP_SD_Init+0x124>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8008d02:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008d06:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0e:	9305      	str	r3, [sp, #20]
 8008d10:	9b05      	ldr	r3, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8008d12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d16:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8008d1a:	f002 fdfb 	bl	800b914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 8008d1e:	462a      	mov	r2, r5
 8008d20:	210e      	movs	r1, #14
 8008d22:	2031      	movs	r0, #49	; 0x31
 8008d24:	f000 f90c 	bl	8008f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8008d28:	2031      	movs	r0, #49	; 0x31
 8008d2a:	f000 f943 	bl	8008fb4 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 8008d2e:	4810      	ldr	r0, [pc, #64]	; (8008d70 <BSP_SD_Init+0x134>)
 8008d30:	f7ff ff70 	bl	8008c14 <MX_SDMMC1_SD_Init>
 8008d34:	4604      	mov	r4, r0
 8008d36:	b978      	cbnz	r0, 8008d58 <BSP_SD_Init+0x11c>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 8008d38:	2102      	movs	r1, #2
 8008d3a:	480d      	ldr	r0, [pc, #52]	; (8008d70 <BSP_SD_Init+0x134>)
 8008d3c:	f006 ffd2 	bl	800fce4 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 8008d40:	4620      	mov	r0, r4
}
 8008d42:	b00d      	add	sp, #52	; 0x34
 8008d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d48:	f06f 0006 	mvn.w	r0, #6
}
 8008d4c:	b00d      	add	sp, #52	; 0x34
 8008d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008d52:	f06f 0001 	mvn.w	r0, #1
}
 8008d56:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008d58:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008d5c:	e7f1      	b.n	8008d42 <BSP_SD_Init+0x106>
 8008d5e:	bf00      	nop
 8008d60:	58022000 	.word	0x58022000
 8008d64:	58024400 	.word	0x58024400
 8008d68:	58020800 	.word	0x58020800
 8008d6c:	58020c00 	.word	0x58020c00
 8008d70:	3000f87c 	.word	0x3000f87c

08008d74 <BSP_SD_ReadBlocks>:
{
 8008d74:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8008d76:	2464      	movs	r4, #100	; 0x64
{
 8008d78:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8008d7a:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 8008d7e:	b950      	cbnz	r0, 8008d96 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8008d80:	4806      	ldr	r0, [pc, #24]	; (8008d9c <BSP_SD_ReadBlocks+0x28>)
 8008d82:	9400      	str	r4, [sp, #0]
 8008d84:	f006 f8c2 	bl	800ef0c <HAL_SD_ReadBlocks>
 8008d88:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2000      	moveq	r0, #0
 8008d8e:	f06f 0003 	mvnne.w	r0, #3
}
 8008d92:	b002      	add	sp, #8
 8008d94:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008d96:	f06f 0001 	mvn.w	r0, #1
 8008d9a:	e7fa      	b.n	8008d92 <BSP_SD_ReadBlocks+0x1e>
 8008d9c:	3000f87c 	.word	0x3000f87c

08008da0 <BSP_SD_WriteBlocks>:
{
 8008da0:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8008da2:	2464      	movs	r4, #100	; 0x64
{
 8008da4:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8008da6:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 8008daa:	b950      	cbnz	r0, 8008dc2 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8008dac:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <BSP_SD_WriteBlocks+0x28>)
 8008dae:	9400      	str	r4, [sp, #0]
 8008db0:	f006 f9ca 	bl	800f148 <HAL_SD_WriteBlocks>
 8008db4:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008db6:	bf0c      	ite	eq
 8008db8:	2000      	moveq	r0, #0
 8008dba:	f06f 0003 	mvnne.w	r0, #3
}
 8008dbe:	b002      	add	sp, #8
 8008dc0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008dc2:	f06f 0001 	mvn.w	r0, #1
 8008dc6:	e7fa      	b.n	8008dbe <BSP_SD_WriteBlocks+0x1e>
 8008dc8:	3000f87c 	.word	0x3000f87c

08008dcc <BSP_SD_GetCardState>:
{
 8008dcc:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008dce:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <BSP_SD_GetCardState+0x14>)
 8008dd0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 8008dd4:	f007 f8ea 	bl	800ffac <HAL_SD_GetCardState>
}
 8008dd8:	3804      	subs	r0, #4
 8008dda:	bf18      	it	ne
 8008ddc:	2001      	movne	r0, #1
 8008dde:	bd08      	pop	{r3, pc}
 8008de0:	3000f87c 	.word	0x3000f87c

08008de4 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 8008de4:	b948      	cbnz	r0, 8008dfa <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8008de6:	4806      	ldr	r0, [pc, #24]	; (8008e00 <BSP_SD_GetCardInfo+0x1c>)
{
 8008de8:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8008dea:	f006 fe5b 	bl	800faa4 <HAL_SD_GetCardInfo>
 8008dee:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008df0:	bf0c      	ite	eq
 8008df2:	2000      	moveq	r0, #0
 8008df4:	f06f 0003 	mvnne.w	r0, #3
}
 8008df8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008dfa:	f06f 0001 	mvn.w	r0, #1
}
 8008dfe:	4770      	bx	lr
 8008e00:	3000f87c 	.word	0x3000f87c

08008e04 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop

08008e08 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008e08:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <HAL_InitTick+0x40>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	b90b      	cbnz	r3, 8008e12 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8008e0e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008e10:	4770      	bx	lr
{
 8008e12:	b510      	push	{r4, lr}
 8008e14:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <HAL_InitTick+0x44>)
 8008e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e20:	6810      	ldr	r0, [r2, #0]
 8008e22:	fbb0 f0f3 	udiv	r0, r0, r3
 8008e26:	f000 f8e7 	bl	8008ff8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e2a:	2c0f      	cmp	r4, #15
 8008e2c:	d800      	bhi.n	8008e30 <HAL_InitTick+0x28>
 8008e2e:	b108      	cbz	r0, 8008e34 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8008e30:	2001      	movs	r0, #1
}
 8008e32:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e34:	2200      	movs	r2, #0
 8008e36:	4621      	mov	r1, r4
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	f000 f880 	bl	8008f40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e40:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <HAL_InitTick+0x48>)
 8008e42:	2000      	movs	r0, #0
 8008e44:	601c      	str	r4, [r3, #0]
}
 8008e46:	bd10      	pop	{r4, pc}
 8008e48:	2400018c 	.word	0x2400018c
 8008e4c:	240000b0 	.word	0x240000b0
 8008e50:	24000190 	.word	0x24000190

08008e54 <HAL_Init>:
{
 8008e54:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e56:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e58:	4c12      	ldr	r4, [pc, #72]	; (8008ea4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e5a:	f000 f85d 	bl	8008f18 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e5e:	4d12      	ldr	r5, [pc, #72]	; (8008ea8 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e60:	f004 fa6a 	bl	800d338 <HAL_RCC_GetSysClockFreq>
 8008e64:	4b11      	ldr	r3, [pc, #68]	; (8008eac <HAL_Init+0x58>)
 8008e66:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e68:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e6a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e6c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e6e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e72:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e74:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e76:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e78:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8008e7c:	4c0c      	ldr	r4, [pc, #48]	; (8008eb0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e7e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e82:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008e88:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e8a:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e8c:	f7ff ffbc 	bl	8008e08 <HAL_InitTick>
 8008e90:	b110      	cbz	r0, 8008e98 <HAL_Init+0x44>
    return HAL_ERROR;
 8008e92:	2401      	movs	r4, #1
}
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	4604      	mov	r4, r0
  HAL_MspInit();
 8008e9a:	f7fb fa03 	bl	80042a4 <HAL_MspInit>
}
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	bf00      	nop
 8008ea4:	0802c2b8 	.word	0x0802c2b8
 8008ea8:	240000b4 	.word	0x240000b4
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	240000b0 	.word	0x240000b0

08008eb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008eb4:	4a03      	ldr	r2, [pc, #12]	; (8008ec4 <HAL_IncTick+0x10>)
 8008eb6:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <HAL_IncTick+0x14>)
 8008eb8:	6811      	ldr	r1, [r2, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	440b      	add	r3, r1
 8008ebe:	6013      	str	r3, [r2, #0]
}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	3000f904 	.word	0x3000f904
 8008ec8:	2400018c 	.word	0x2400018c

08008ecc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008ecc:	4b01      	ldr	r3, [pc, #4]	; (8008ed4 <HAL_GetTick+0x8>)
 8008ece:	6818      	ldr	r0, [r3, #0]
}
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	3000f904 	.word	0x3000f904

08008ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008edc:	f7ff fff6 	bl	8008ecc <HAL_GetTick>
 8008ee0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ee2:	1c63      	adds	r3, r4, #1
 8008ee4:	d002      	beq.n	8008eec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ee6:	4b04      	ldr	r3, [pc, #16]	; (8008ef8 <HAL_Delay+0x20>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008eec:	f7ff ffee 	bl	8008ecc <HAL_GetTick>
 8008ef0:	1b43      	subs	r3, r0, r5
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	d3fa      	bcc.n	8008eec <HAL_Delay+0x14>
  {
  }
}
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	2400018c 	.word	0x2400018c

08008efc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8008efc:	4b01      	ldr	r3, [pc, #4]	; (8008f04 <HAL_GetREVID+0x8>)
 8008efe:	6818      	ldr	r0, [r3, #0]
}
 8008f00:	0c00      	lsrs	r0, r0, #16
 8008f02:	4770      	bx	lr
 8008f04:	5c001000 	.word	0x5c001000

08008f08 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8008f08:	4a02      	ldr	r2, [pc, #8]	; (8008f14 <HAL_EnableCompensationCell+0xc>)
 8008f0a:	6a13      	ldr	r3, [r2, #32]
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
 8008f10:	6213      	str	r3, [r2, #32]
}
 8008f12:	4770      	bx	lr
 8008f14:	58000400 	.word	0x58000400

08008f18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f18:	4907      	ldr	r1, [pc, #28]	; (8008f38 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f1a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008f1c:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f1e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f20:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f24:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f26:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8008f2a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f30:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8008f32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008f34:	60cb      	str	r3, [r1, #12]
 8008f36:	4770      	bx	lr
 8008f38:	e000ed00 	.word	0xe000ed00
 8008f3c:	05fa0000 	.word	0x05fa0000

08008f40 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f40:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <HAL_NVIC_SetPriority+0x68>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f48:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f4a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f4e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f50:	2d04      	cmp	r5, #4
 8008f52:	bf28      	it	cs
 8008f54:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f56:	2c06      	cmp	r4, #6
 8008f58:	d919      	bls.n	8008f8e <HAL_NVIC_SetPriority+0x4e>
 8008f5a:	3b03      	subs	r3, #3
 8008f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f60:	409c      	lsls	r4, r3
 8008f62:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f66:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008f6a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f6c:	fa04 f405 	lsl.w	r4, r4, r5
 8008f70:	ea21 0104 	bic.w	r1, r1, r4
 8008f74:	fa01 f103 	lsl.w	r1, r1, r3
 8008f78:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008f7c:	db0a      	blt.n	8008f94 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f7e:	0109      	lsls	r1, r1, #4
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <HAL_NVIC_SetPriority+0x6c>)
 8008f82:	b2c9      	uxtb	r1, r1
 8008f84:	4403      	add	r3, r0
 8008f86:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008f8a:	bc30      	pop	{r4, r5}
 8008f8c:	4770      	bx	lr
 8008f8e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f90:	4613      	mov	r3, r2
 8008f92:	e7e8      	b.n	8008f66 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f94:	f000 000f 	and.w	r0, r0, #15
 8008f98:	0109      	lsls	r1, r1, #4
 8008f9a:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <HAL_NVIC_SetPriority+0x70>)
 8008f9c:	b2c9      	uxtb	r1, r1
 8008f9e:	4403      	add	r3, r0
 8008fa0:	7619      	strb	r1, [r3, #24]
 8008fa2:	bc30      	pop	{r4, r5}
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	e000ed00 	.word	0xe000ed00
 8008fac:	e000e100 	.word	0xe000e100
 8008fb0:	e000ecfc 	.word	0xe000ecfc

08008fb4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	db07      	blt.n	8008fc8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fb8:	f000 011f 	and.w	r1, r0, #31
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	0940      	lsrs	r0, r0, #5
 8008fc0:	4a02      	ldr	r2, [pc, #8]	; (8008fcc <HAL_NVIC_EnableIRQ+0x18>)
 8008fc2:	408b      	lsls	r3, r1
 8008fc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	e000e100 	.word	0xe000e100

08008fd0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	db0d      	blt.n	8008ff0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fd4:	0943      	lsrs	r3, r0, #5
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f000 001f 	and.w	r0, r0, #31
 8008fdc:	4905      	ldr	r1, [pc, #20]	; (8008ff4 <HAL_NVIC_DisableIRQ+0x24>)
 8008fde:	3320      	adds	r3, #32
 8008fe0:	fa02 f000 	lsl.w	r0, r2, r0
 8008fe4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008fe8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008fec:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	e000e100 	.word	0xe000e100

08008ff8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ff8:	3801      	subs	r0, #1
 8008ffa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008ffe:	d20d      	bcs.n	800901c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009002:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009004:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009006:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009008:	25f0      	movs	r5, #240	; 0xf0
 800900a:	4c06      	ldr	r4, [pc, #24]	; (8009024 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800900c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800900e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009010:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009016:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8009018:	bc30      	pop	{r4, r5}
 800901a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800901c:	2001      	movs	r0, #1
 800901e:	4770      	bx	lr
 8009020:	e000e010 	.word	0xe000e010
 8009024:	e000ed00 	.word	0xe000ed00

08009028 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8009028:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800902c:	4a04      	ldr	r2, [pc, #16]	; (8009040 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800902e:	2000      	movs	r0, #0
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009032:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009038:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800903a:	6048      	str	r0, [r1, #4]
}
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	e000ed00 	.word	0xe000ed00
 8009044:	e000ed90 	.word	0xe000ed90

08009048 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009048:	4a06      	ldr	r2, [pc, #24]	; (8009064 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800904a:	f040 0001 	orr.w	r0, r0, #1
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <HAL_MPU_Enable+0x20>)
 8009050:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009052:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8009054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009058:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800905a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800905e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8009062:	4770      	bx	lr
 8009064:	e000ed00 	.word	0xe000ed00
 8009068:	e000ed90 	.word	0xe000ed90

0800906c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800906c:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <HAL_MPU_ConfigRegion+0x4c>)
 800906e:	7843      	ldrb	r3, [r0, #1]
 8009070:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8009072:	7801      	ldrb	r1, [r0, #0]
 8009074:	b1e9      	cbz	r1, 80090b2 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8009076:	6843      	ldr	r3, [r0, #4]
{
 8009078:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800907a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800907c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800907e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009080:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009082:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009084:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009086:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800908a:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800908c:	430b      	orrs	r3, r1
 800908e:	7a01      	ldrb	r1, [r0, #8]
 8009090:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009094:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009096:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800909a:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800909c:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80090a0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80090a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80090a8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80090ac:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80090ae:	6113      	str	r3, [r2, #16]
}
 80090b0:	4770      	bx	lr
    MPU->RBAR = 0x00;
 80090b2:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80090b4:	6111      	str	r1, [r2, #16]
 80090b6:	4770      	bx	lr
 80090b8:	e000ed90 	.word	0xe000ed90

080090bc <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d048      	beq.n	8009156 <HAL_DCMI_Init+0x96>
{
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80090c6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80090ca:	4604      	mov	r4, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d03f      	beq.n	8009150 <HAL_DCMI_Init+0x90>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80090d0:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80090d2:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80090d4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d135      	bne.n	8009148 <HAL_DCMI_Init+0x88>
 80090dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80090de:	6861      	ldr	r1, [r4, #4]
 80090e0:	6960      	ldr	r0, [r4, #20]
 80090e2:	430b      	orrs	r3, r1
 80090e4:	6a26      	ldr	r6, [r4, #32]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80090e6:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80090e8:	ea43 0300 	orr.w	r3, r3, r0
 80090ec:	68a0      	ldr	r0, [r4, #8]
 80090ee:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
 80090f2:	ea43 0305 	orr.w	r3, r3, r5
 80090f6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80090f8:	ea43 0302 	orr.w	r3, r3, r2
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80090fc:	6822      	ldr	r2, [r4, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80090fe:	ea43 0300 	orr.w	r3, r3, r0
 8009102:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009104:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8009108:	6816      	ldr	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800910a:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800910e:	4d13      	ldr	r5, [pc, #76]	; (800915c <HAL_DCMI_Init+0x9c>)
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8009110:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8009114:	ea05 0506 	and.w	r5, r5, r6
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8009118:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800911a:	6015      	str	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800911c:	ea43 0300 	orr.w	r3, r3, r0
 8009120:	6810      	ldr	r0, [r2, #0]
 8009122:	ea43 0300 	orr.w	r3, r3, r0
 8009126:	ea43 0307 	orr.w	r3, r3, r7
 800912a:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800912c:	d101      	bne.n	8009132 <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800912e:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8009130:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009132:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8009134:	2100      	movs	r1, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8009136:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009138:	f043 031e 	orr.w	r3, r3, #30
  return HAL_OK;
 800913c:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800913e:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8009140:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8009142:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8009146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8009148:	2200      	movs	r2, #0
 800914a:	4617      	mov	r7, r2
 800914c:	6262      	str	r2, [r4, #36]	; 0x24
 800914e:	e7c6      	b.n	80090de <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 8009150:	f7ff ffb4 	bl	80090bc <HAL_DCMI_MspInit>
 8009154:	e7bc      	b.n	80090d0 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 8009156:	2001      	movs	r0, #1
}
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	ffe0f007 	.word	0xffe0f007

08009160 <HAL_DCMI_MspDeInit>:
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop

08009164 <HAL_DCMI_DeInit>:
{
 8009164:	b510      	push	{r4, lr}
 8009166:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 8009168:	f7ff fffa 	bl	8009160 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800916c:	2000      	movs	r0, #0
 800916e:	64e0      	str	r0, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 8009170:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_RESET;
 8009174:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop

0800917c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800917c:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800917e:	4b1e      	ldr	r3, [pc, #120]	; (80091f8 <HAL_DCMI_Stop+0x7c>)
 8009180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009184:	491d      	ldr	r1, [pc, #116]	; (80091fc <HAL_DCMI_Stop+0x80>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800918c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009190:	0a5b      	lsrs	r3, r3, #9
  __HAL_LOCK(hdcmi);
 8009192:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009194:	fb02 f203 	mul.w	r2, r2, r3
  __HAL_LOCK(hdcmi);
 8009198:	d02a      	beq.n	80091f0 <HAL_DCMI_Stop+0x74>
 800919a:	4605      	mov	r5, r0

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800919c:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800919e:	2001      	movs	r0, #1

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80091a0:	6829      	ldr	r1, [r5, #0]
  __HAL_LOCK(hdcmi);
 80091a2:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80091a6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80091aa:	680b      	ldr	r3, [r1, #0]
 80091ac:	f023 0301 	bic.w	r3, r3, #1
 80091b0:	600b      	str	r3, [r1, #0]
 80091b2:	e003      	b.n	80091bc <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80091b4:	680b      	ldr	r3, [r1, #0]
 80091b6:	f013 0301 	ands.w	r3, r3, #1
 80091ba:	d017      	beq.n	80091ec <HAL_DCMI_Stop+0x70>
    if (count == 0U)
 80091bc:	3a01      	subs	r2, #1
 80091be:	d1f9      	bne.n	80091b4 <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80091c0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      status = HAL_TIMEOUT;
 80091c2:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80091c4:	f043 0320 	orr.w	r3, r3, #32
 80091c8:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80091ca:	680b      	ldr	r3, [r1, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80091cc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 80091ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091d2:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80091d4:	f000 ff4a 	bl	800a06c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80091d8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80091da:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80091dc:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80091de:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 80091e0:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 80091e2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 80091e6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80091ec:	461c      	mov	r4, r3
 80091ee:	e7ec      	b.n	80091ca <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 80091f0:	2402      	movs	r4, #2
}
 80091f2:	4620      	mov	r0, r4
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	bf00      	nop
 80091f8:	240000b0 	.word	0x240000b0
 80091fc:	10624dd3 	.word	0x10624dd3

08009200 <HAL_DCMI_Suspend>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009200:	4b1f      	ldr	r3, [pc, #124]	; (8009280 <HAL_DCMI_Suspend+0x80>)
 8009202:	6819      	ldr	r1, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8009204:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8009208:	2b01      	cmp	r3, #1
 800920a:	d036      	beq.n	800927a <HAL_DCMI_Suspend+0x7a>
 800920c:	4602      	mov	r2, r0
 800920e:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8009210:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 8009214:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8009218:	2b02      	cmp	r3, #2
 800921a:	d004      	beq.n	8009226 <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800921c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800921e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8009220:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

  /* Return function status */
  return status;
}
 8009224:	4770      	bx	lr
{
 8009226:	b430      	push	{r4, r5}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8009228:	6810      	ldr	r0, [r2, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800922a:	2405      	movs	r4, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800922c:	4d15      	ldr	r5, [pc, #84]	; (8009284 <HAL_DCMI_Suspend+0x84>)
 800922e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8009232:	f882 4035 	strb.w	r4, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009236:	fba5 5101 	umull	r5, r1, r5, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800923a:	6804      	ldr	r4, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800923c:	0a49      	lsrs	r1, r1, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800923e:	f024 0401 	bic.w	r4, r4, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009242:	fb03 f301 	mul.w	r3, r3, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8009246:	6004      	str	r4, [r0, #0]
 8009248:	e002      	b.n	8009250 <HAL_DCMI_Suspend+0x50>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800924a:	6801      	ldr	r1, [r0, #0]
 800924c:	07c9      	lsls	r1, r1, #31
 800924e:	d50e      	bpl.n	800926e <HAL_DCMI_Suspend+0x6e>
      if (count == 0U)
 8009250:	3b01      	subs	r3, #1
 8009252:	d1fa      	bne.n	800924a <HAL_DCMI_Suspend+0x4a>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8009254:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 8009256:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 8009258:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800925a:	f043 0320 	orr.w	r3, r3, #32
 800925e:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 8009260:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 8009262:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 8009266:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800926a:	bc30      	pop	{r4, r5}
 800926c:	4770      	bx	lr
  __HAL_UNLOCK(hdcmi);
 800926e:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009270:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8009272:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 8009276:	bc30      	pop	{r4, r5}
 8009278:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800927a:	2002      	movs	r0, #2
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	240000b0 	.word	0x240000b0
 8009284:	10624dd3 	.word	0x10624dd3

08009288 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8009288:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800928c:	2b01      	cmp	r3, #1
 800928e:	d013      	beq.n	80092b8 <HAL_DCMI_Resume+0x30>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8009290:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 8009294:	2201      	movs	r2, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8009296:	2b05      	cmp	r3, #5
  __HAL_LOCK(hdcmi);
 8009298:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800929c:	d107      	bne.n	80092ae <HAL_DCMI_Resume+0x26>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800929e:	2302      	movs	r3, #2

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80092a0:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 80092a2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80092a6:	6813      	ldr	r3, [r2, #0]
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6013      	str	r3, [r2, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80092ae:	2300      	movs	r3, #0
 80092b0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80092b4:	4618      	mov	r0, r3
 80092b6:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 80092b8:	2002      	movs	r0, #2
}
 80092ba:	4770      	bx	lr

080092bc <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80092be:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80092c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80092c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d006      	beq.n	80092d6 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80092c8:	2301      	movs	r3, #1
 80092ca:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80092ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80092d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d4:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80092d6:	f7fe feef 	bl	80080b8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80092da:	bd08      	pop	{r3, pc}

080092dc <HAL_DCMI_IRQHandler>:
{
 80092dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80092de:	6803      	ldr	r3, [r0, #0]
{
 80092e0:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80092e2:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80092e4:	0769      	lsls	r1, r5, #29
 80092e6:	d437      	bmi.n	8009358 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80092e8:	07aa      	lsls	r2, r5, #30
 80092ea:	d425      	bmi.n	8009338 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80092ec:	06eb      	lsls	r3, r5, #27
 80092ee:	d41c      	bmi.n	800932a <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80092f0:	0728      	lsls	r0, r5, #28
 80092f2:	d413      	bmi.n	800931c <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80092f4:	07e9      	lsls	r1, r5, #31
 80092f6:	d510      	bpl.n	800931a <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	0792      	lsls	r2, r2, #30
 80092fe:	d503      	bpl.n	8009308 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	f022 021e 	bic.w	r2, r2, #30
 8009306:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8009308:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800930a:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800930c:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800930e:	f022 0201 	bic.w	r2, r2, #1
 8009312:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8009314:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009316:	f7fe fec3 	bl	80080a0 <HAL_DCMI_FrameEventCallback>
}
 800931a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8009320:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8009322:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8009324:	f7fe fec2 	bl	80080ac <HAL_DCMI_VsyncEventCallback>
 8009328:	e7e4      	b.n	80092f4 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800932e:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8009330:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8009332:	f7fe feaf 	bl	8008094 <HAL_DCMI_LineEventCallback>
 8009336:	e7db      	b.n	80092f0 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800933c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800933e:	2104      	movs	r1, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009340:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8009342:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009344:	4a0b      	ldr	r2, [pc, #44]	; (8009374 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8009346:	f043 0301 	orr.w	r3, r3, #1
 800934a:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800934c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009350:	6502      	str	r2, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8009352:	f001 f80b 	bl	800a36c <HAL_DMA_Abort_IT>
 8009356:	e7c9      	b.n	80092ec <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8009358:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800935a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800935c:	4905      	ldr	r1, [pc, #20]	; (8009374 <HAL_DCMI_IRQHandler+0x98>)
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800935e:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8009360:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009362:	f043 0302 	orr.w	r3, r3, #2
 8009366:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8009368:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800936c:	6501      	str	r1, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800936e:	f000 fffd 	bl	800a36c <HAL_DMA_Abort_IT>
 8009372:	e7b9      	b.n	80092e8 <HAL_DCMI_IRQHandler+0xc>
 8009374:	080092bd 	.word	0x080092bd

08009378 <HAL_DCMI_ConfigCrop>:
{
 8009378:	b470      	push	{r4, r5, r6}
 800937a:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 800937c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009380:	2801      	cmp	r0, #1
 8009382:	d013      	beq.n	80093ac <HAL_DCMI_ConfigCrop+0x34>
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8009384:	9803      	ldr	r0, [sp, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009386:	2602      	movs	r6, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8009388:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800938c:	2501      	movs	r5, #1
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800938e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  __HAL_UNLOCK(hdcmi);
 8009392:	2100      	movs	r1, #0
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8009394:	6820      	ldr	r0, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009396:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800939a:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800939c:	6202      	str	r2, [r0, #32]
  return HAL_OK;
 800939e:	4608      	mov	r0, r1
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80093a0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 80093a4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
}
 80093a8:	bc70      	pop	{r4, r5, r6}
 80093aa:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 80093ac:	2002      	movs	r0, #2
}
 80093ae:	bc70      	pop	{r4, r5, r6}
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop

080093b4 <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 80093b4:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80093b8:	2a01      	cmp	r2, #1
 80093ba:	d012      	beq.n	80093e2 <HAL_DCMI_DisableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80093bc:	2202      	movs	r2, #2
 80093be:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 80093c0:	2100      	movs	r1, #0
{
 80093c2:	b430      	push	{r4, r5}
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 80093c4:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 80093c6:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80093c8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 80093cc:	4608      	mov	r0, r1
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	f022 0204 	bic.w	r2, r2, #4
 80093d4:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 80093d6:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 80093da:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80093de:	bc30      	pop	{r4, r5}
 80093e0:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 80093e2:	2002      	movs	r0, #2
}
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop

080093e8 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 80093e8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80093ec:	2a01      	cmp	r2, #1
 80093ee:	d012      	beq.n	8009416 <HAL_DCMI_EnableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80093f0:	2202      	movs	r2, #2
 80093f2:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 80093f4:	2100      	movs	r1, #0
{
 80093f6:	b430      	push	{r4, r5}
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 80093f8:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 80093fa:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80093fc:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 8009400:	4608      	mov	r0, r1
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	f042 0204 	orr.w	r2, r2, #4
 8009408:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800940a:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800940e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8009412:	bc30      	pop	{r4, r5}
 8009414:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 8009416:	2002      	movs	r0, #2
}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800941c:	6802      	ldr	r2, [r0, #0]
 800941e:	4b35      	ldr	r3, [pc, #212]	; (80094f4 <DMA_CalcBaseAndBitshift+0xd8>)
 8009420:	4935      	ldr	r1, [pc, #212]	; (80094f8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8009422:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009424:	4c35      	ldr	r4, [pc, #212]	; (80094fc <DMA_CalcBaseAndBitshift+0xe0>)
 8009426:	4d36      	ldr	r5, [pc, #216]	; (8009500 <DMA_CalcBaseAndBitshift+0xe4>)
 8009428:	42a2      	cmp	r2, r4
 800942a:	bf18      	it	ne
 800942c:	429a      	cmpne	r2, r3
 800942e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8009432:	bf0c      	ite	eq
 8009434:	2301      	moveq	r3, #1
 8009436:	2300      	movne	r3, #0
 8009438:	428a      	cmp	r2, r1
 800943a:	bf08      	it	eq
 800943c:	f043 0301 	orreq.w	r3, r3, #1
 8009440:	3148      	adds	r1, #72	; 0x48
 8009442:	42aa      	cmp	r2, r5
 8009444:	bf08      	it	eq
 8009446:	f043 0301 	orreq.w	r3, r3, #1
 800944a:	3548      	adds	r5, #72	; 0x48
 800944c:	42a2      	cmp	r2, r4
 800944e:	bf08      	it	eq
 8009450:	f043 0301 	orreq.w	r3, r3, #1
 8009454:	3448      	adds	r4, #72	; 0x48
 8009456:	428a      	cmp	r2, r1
 8009458:	bf08      	it	eq
 800945a:	f043 0301 	orreq.w	r3, r3, #1
 800945e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8009462:	42aa      	cmp	r2, r5
 8009464:	bf08      	it	eq
 8009466:	f043 0301 	orreq.w	r3, r3, #1
 800946a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800946e:	42a2      	cmp	r2, r4
 8009470:	bf08      	it	eq
 8009472:	f043 0301 	orreq.w	r3, r3, #1
 8009476:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800947a:	428a      	cmp	r2, r1
 800947c:	bf08      	it	eq
 800947e:	f043 0301 	orreq.w	r3, r3, #1
 8009482:	3148      	adds	r1, #72	; 0x48
 8009484:	42aa      	cmp	r2, r5
 8009486:	bf08      	it	eq
 8009488:	f043 0301 	orreq.w	r3, r3, #1
 800948c:	3548      	adds	r5, #72	; 0x48
 800948e:	42a2      	cmp	r2, r4
 8009490:	bf08      	it	eq
 8009492:	f043 0301 	orreq.w	r3, r3, #1
 8009496:	3448      	adds	r4, #72	; 0x48
 8009498:	428a      	cmp	r2, r1
 800949a:	bf08      	it	eq
 800949c:	f043 0301 	orreq.w	r3, r3, #1
 80094a0:	3148      	adds	r1, #72	; 0x48
 80094a2:	42aa      	cmp	r2, r5
 80094a4:	bf08      	it	eq
 80094a6:	f043 0301 	orreq.w	r3, r3, #1
 80094aa:	42a2      	cmp	r2, r4
 80094ac:	bf08      	it	eq
 80094ae:	f043 0301 	orreq.w	r3, r3, #1
 80094b2:	428a      	cmp	r2, r1
 80094b4:	bf08      	it	eq
 80094b6:	f043 0301 	orreq.w	r3, r3, #1
 80094ba:	b913      	cbnz	r3, 80094c2 <DMA_CalcBaseAndBitshift+0xa6>
 80094bc:	4b11      	ldr	r3, [pc, #68]	; (8009504 <DMA_CalcBaseAndBitshift+0xe8>)
 80094be:	429a      	cmp	r2, r3
 80094c0:	d113      	bne.n	80094ea <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80094c2:	b2d3      	uxtb	r3, r2
 80094c4:	4910      	ldr	r1, [pc, #64]	; (8009508 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80094c6:	4c11      	ldr	r4, [pc, #68]	; (800950c <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80094c8:	3b10      	subs	r3, #16
 80094ca:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 80094ce:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80094d2:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80094d6:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80094da:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80094dc:	bf88      	it	hi
 80094de:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80094e0:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80094e2:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	bc30      	pop	{r4, r5}
 80094e8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80094ea:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 80094ee:	6583      	str	r3, [r0, #88]	; 0x58
 80094f0:	e7f8      	b.n	80094e4 <DMA_CalcBaseAndBitshift+0xc8>
 80094f2:	bf00      	nop
 80094f4:	40020010 	.word	0x40020010
 80094f8:	40020040 	.word	0x40020040
 80094fc:	40020028 	.word	0x40020028
 8009500:	40020058 	.word	0x40020058
 8009504:	400204b8 	.word	0x400204b8
 8009508:	aaaaaaab 	.word	0xaaaaaaab
 800950c:	0802cc48 	.word	0x0802cc48
 8009510:	fffffc00 	.word	0xfffffc00

08009514 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009514:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009516:	4a29      	ldr	r2, [pc, #164]	; (80095bc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8009518:	4929      	ldr	r1, [pc, #164]	; (80095c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800951a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800951c:	4d29      	ldr	r5, [pc, #164]	; (80095c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800951e:	4c2a      	ldr	r4, [pc, #168]	; (80095c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8009520:	42ab      	cmp	r3, r5
 8009522:	bf18      	it	ne
 8009524:	4293      	cmpne	r3, r2
 8009526:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800952a:	bf0c      	ite	eq
 800952c:	2201      	moveq	r2, #1
 800952e:	2200      	movne	r2, #0
 8009530:	42a3      	cmp	r3, r4
 8009532:	bf08      	it	eq
 8009534:	f042 0201 	orreq.w	r2, r2, #1
 8009538:	343c      	adds	r4, #60	; 0x3c
 800953a:	428b      	cmp	r3, r1
 800953c:	bf08      	it	eq
 800953e:	f042 0201 	orreq.w	r2, r2, #1
 8009542:	313c      	adds	r1, #60	; 0x3c
 8009544:	42ab      	cmp	r3, r5
 8009546:	bf08      	it	eq
 8009548:	f042 0201 	orreq.w	r2, r2, #1
 800954c:	42a3      	cmp	r3, r4
 800954e:	bf08      	it	eq
 8009550:	f042 0201 	orreq.w	r2, r2, #1
 8009554:	428b      	cmp	r3, r1
 8009556:	bf08      	it	eq
 8009558:	f042 0201 	orreq.w	r2, r2, #1
 800955c:	b912      	cbnz	r2, 8009564 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800955e:	4a1b      	ldr	r2, [pc, #108]	; (80095cc <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d113      	bne.n	800958c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009564:	b2db      	uxtb	r3, r3
 8009566:	4d1a      	ldr	r5, [pc, #104]	; (80095d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009568:	4a1a      	ldr	r2, [pc, #104]	; (80095d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800956a:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800956c:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800956e:	4c1a      	ldr	r4, [pc, #104]	; (80095d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009570:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009574:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009576:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800957a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800957e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009580:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009584:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009586:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009588:	bc30      	pop	{r4, r5}
 800958a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800958c:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800958e:	4913      	ldr	r1, [pc, #76]	; (80095dc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009590:	4c13      	ldr	r4, [pc, #76]	; (80095e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009592:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009594:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009596:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009598:	fba4 2302 	umull	r2, r3, r4, r2
 800959c:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80095a0:	d800      	bhi.n	80095a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 80095a2:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80095a4:	4a0f      	ldr	r2, [pc, #60]	; (80095e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80095a6:	f003 051f 	and.w	r5, r3, #31
 80095aa:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095ac:	4c0e      	ldr	r4, [pc, #56]	; (80095e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80095ae:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80095b0:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095b2:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80095b4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80095b6:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80095b8:	6602      	str	r2, [r0, #96]	; 0x60
}
 80095ba:	e7e5      	b.n	8009588 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 80095bc:	58025408 	.word	0x58025408
 80095c0:	58025444 	.word	0x58025444
 80095c4:	5802541c 	.word	0x5802541c
 80095c8:	58025430 	.word	0x58025430
 80095cc:	58025494 	.word	0x58025494
 80095d0:	cccccccd 	.word	0xcccccccd
 80095d4:	16009600 	.word	0x16009600
 80095d8:	58025880 	.word	0x58025880
 80095dc:	bffdfbf0 	.word	0xbffdfbf0
 80095e0:	aaaaaaab 	.word	0xaaaaaaab
 80095e4:	10008200 	.word	0x10008200
 80095e8:	40020880 	.word	0x40020880

080095ec <HAL_DMA_Init>:
{
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80095f0:	f7ff fc6c 	bl	8008ecc <HAL_GetTick>
  if(hdma == NULL)
 80095f4:	2c00      	cmp	r4, #0
 80095f6:	f000 818a 	beq.w	800990e <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	4605      	mov	r5, r0
 80095fe:	4a95      	ldr	r2, [pc, #596]	; (8009854 <HAL_DMA_Init+0x268>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d049      	beq.n	8009698 <HAL_DMA_Init+0xac>
 8009604:	3218      	adds	r2, #24
 8009606:	4293      	cmp	r3, r2
 8009608:	d046      	beq.n	8009698 <HAL_DMA_Init+0xac>
 800960a:	3230      	adds	r2, #48	; 0x30
 800960c:	4892      	ldr	r0, [pc, #584]	; (8009858 <HAL_DMA_Init+0x26c>)
 800960e:	4993      	ldr	r1, [pc, #588]	; (800985c <HAL_DMA_Init+0x270>)
 8009610:	4283      	cmp	r3, r0
 8009612:	bf18      	it	ne
 8009614:	4293      	cmpne	r3, r2
 8009616:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800961a:	bf0c      	ite	eq
 800961c:	2201      	moveq	r2, #1
 800961e:	2200      	movne	r2, #0
 8009620:	428b      	cmp	r3, r1
 8009622:	bf08      	it	eq
 8009624:	f042 0201 	orreq.w	r2, r2, #1
 8009628:	3130      	adds	r1, #48	; 0x30
 800962a:	4283      	cmp	r3, r0
 800962c:	bf08      	it	eq
 800962e:	f042 0201 	orreq.w	r2, r2, #1
 8009632:	3030      	adds	r0, #48	; 0x30
 8009634:	428b      	cmp	r3, r1
 8009636:	bf08      	it	eq
 8009638:	f042 0201 	orreq.w	r2, r2, #1
 800963c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009640:	4283      	cmp	r3, r0
 8009642:	bf08      	it	eq
 8009644:	f042 0201 	orreq.w	r2, r2, #1
 8009648:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800964c:	428b      	cmp	r3, r1
 800964e:	bf08      	it	eq
 8009650:	f042 0201 	orreq.w	r2, r2, #1
 8009654:	3130      	adds	r1, #48	; 0x30
 8009656:	4283      	cmp	r3, r0
 8009658:	bf08      	it	eq
 800965a:	f042 0201 	orreq.w	r2, r2, #1
 800965e:	3030      	adds	r0, #48	; 0x30
 8009660:	428b      	cmp	r3, r1
 8009662:	bf08      	it	eq
 8009664:	f042 0201 	orreq.w	r2, r2, #1
 8009668:	3130      	adds	r1, #48	; 0x30
 800966a:	4283      	cmp	r3, r0
 800966c:	bf08      	it	eq
 800966e:	f042 0201 	orreq.w	r2, r2, #1
 8009672:	3030      	adds	r0, #48	; 0x30
 8009674:	428b      	cmp	r3, r1
 8009676:	bf08      	it	eq
 8009678:	f042 0201 	orreq.w	r2, r2, #1
 800967c:	3130      	adds	r1, #48	; 0x30
 800967e:	4283      	cmp	r3, r0
 8009680:	bf08      	it	eq
 8009682:	f042 0201 	orreq.w	r2, r2, #1
 8009686:	428b      	cmp	r3, r1
 8009688:	bf08      	it	eq
 800968a:	f042 0201 	orreq.w	r2, r2, #1
 800968e:	b91a      	cbnz	r2, 8009698 <HAL_DMA_Init+0xac>
 8009690:	4a73      	ldr	r2, [pc, #460]	; (8009860 <HAL_DMA_Init+0x274>)
 8009692:	4293      	cmp	r3, r2
 8009694:	f040 81a1 	bne.w	80099da <HAL_DMA_Init+0x3ee>
    hdma->State = HAL_DMA_STATE_BUSY;
 8009698:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800969a:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800969c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80096a0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e006      	b.n	80096bc <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80096ae:	f7ff fc0d 	bl	8008ecc <HAL_GetTick>
 80096b2:	1b43      	subs	r3, r0, r5
 80096b4:	2b05      	cmp	r3, #5
 80096b6:	f200 8111 	bhi.w	80098dc <HAL_DMA_Init+0x2f0>
 80096ba:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	07d0      	lsls	r0, r2, #31
 80096c0:	d4f5      	bmi.n	80096ae <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 80096c2:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096c6:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80096c8:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80096ca:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096cc:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096d0:	430a      	orrs	r2, r1
 80096d2:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80096d4:	4e63      	ldr	r6, [pc, #396]	; (8009864 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 80096d6:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096da:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80096dc:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096de:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 80096e2:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096e4:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096e6:	4960      	ldr	r1, [pc, #384]	; (8009868 <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 80096e8:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096ec:	4e5f      	ldr	r6, [pc, #380]	; (800986c <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096ee:	f000 8110 	beq.w	8009912 <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80096f2:	6836      	ldr	r6, [r6, #0]
 80096f4:	4031      	ands	r1, r6
 80096f6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80096fa:	f080 80c3 	bcs.w	8009884 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80096fe:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009700:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009702:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8009706:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009708:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800970a:	4620      	mov	r0, r4
 800970c:	f7ff fe86 	bl	800941c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009710:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009712:	233f      	movs	r3, #63	; 0x3f
 8009714:	f002 021f 	and.w	r2, r2, #31
 8009718:	4093      	lsls	r3, r2
 800971a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800971c:	6822      	ldr	r2, [r4, #0]
 800971e:	4b4d      	ldr	r3, [pc, #308]	; (8009854 <HAL_DMA_Init+0x268>)
 8009720:	4953      	ldr	r1, [pc, #332]	; (8009870 <HAL_DMA_Init+0x284>)
 8009722:	4d4d      	ldr	r5, [pc, #308]	; (8009858 <HAL_DMA_Init+0x26c>)
 8009724:	428a      	cmp	r2, r1
 8009726:	bf18      	it	ne
 8009728:	429a      	cmpne	r2, r3
 800972a:	4852      	ldr	r0, [pc, #328]	; (8009874 <HAL_DMA_Init+0x288>)
 800972c:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8009730:	bf0c      	ite	eq
 8009732:	2301      	moveq	r3, #1
 8009734:	2300      	movne	r3, #0
 8009736:	42aa      	cmp	r2, r5
 8009738:	bf08      	it	eq
 800973a:	f043 0301 	orreq.w	r3, r3, #1
 800973e:	3548      	adds	r5, #72	; 0x48
 8009740:	4282      	cmp	r2, r0
 8009742:	bf08      	it	eq
 8009744:	f043 0301 	orreq.w	r3, r3, #1
 8009748:	3048      	adds	r0, #72	; 0x48
 800974a:	428a      	cmp	r2, r1
 800974c:	bf08      	it	eq
 800974e:	f043 0301 	orreq.w	r3, r3, #1
 8009752:	3148      	adds	r1, #72	; 0x48
 8009754:	42aa      	cmp	r2, r5
 8009756:	bf08      	it	eq
 8009758:	f043 0301 	orreq.w	r3, r3, #1
 800975c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8009760:	4282      	cmp	r2, r0
 8009762:	bf08      	it	eq
 8009764:	f043 0301 	orreq.w	r3, r3, #1
 8009768:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800976c:	428a      	cmp	r2, r1
 800976e:	bf08      	it	eq
 8009770:	f043 0301 	orreq.w	r3, r3, #1
 8009774:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8009778:	42aa      	cmp	r2, r5
 800977a:	bf08      	it	eq
 800977c:	f043 0301 	orreq.w	r3, r3, #1
 8009780:	3548      	adds	r5, #72	; 0x48
 8009782:	4282      	cmp	r2, r0
 8009784:	bf08      	it	eq
 8009786:	f043 0301 	orreq.w	r3, r3, #1
 800978a:	3048      	adds	r0, #72	; 0x48
 800978c:	428a      	cmp	r2, r1
 800978e:	bf08      	it	eq
 8009790:	f043 0301 	orreq.w	r3, r3, #1
 8009794:	3148      	adds	r1, #72	; 0x48
 8009796:	42aa      	cmp	r2, r5
 8009798:	bf08      	it	eq
 800979a:	f043 0301 	orreq.w	r3, r3, #1
 800979e:	3548      	adds	r5, #72	; 0x48
 80097a0:	4282      	cmp	r2, r0
 80097a2:	bf08      	it	eq
 80097a4:	f043 0301 	orreq.w	r3, r3, #1
 80097a8:	3048      	adds	r0, #72	; 0x48
 80097aa:	428a      	cmp	r2, r1
 80097ac:	bf08      	it	eq
 80097ae:	f043 0301 	orreq.w	r3, r3, #1
 80097b2:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 80097b6:	42aa      	cmp	r2, r5
 80097b8:	bf08      	it	eq
 80097ba:	f043 0301 	orreq.w	r3, r3, #1
 80097be:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 80097c2:	4d2d      	ldr	r5, [pc, #180]	; (8009878 <HAL_DMA_Init+0x28c>)
 80097c4:	4282      	cmp	r2, r0
 80097c6:	bf08      	it	eq
 80097c8:	f043 0301 	orreq.w	r3, r3, #1
 80097cc:	482b      	ldr	r0, [pc, #172]	; (800987c <HAL_DMA_Init+0x290>)
 80097ce:	428a      	cmp	r2, r1
 80097d0:	bf08      	it	eq
 80097d2:	f043 0301 	orreq.w	r3, r3, #1
 80097d6:	313c      	adds	r1, #60	; 0x3c
 80097d8:	42aa      	cmp	r2, r5
 80097da:	bf08      	it	eq
 80097dc:	f043 0301 	orreq.w	r3, r3, #1
 80097e0:	353c      	adds	r5, #60	; 0x3c
 80097e2:	4282      	cmp	r2, r0
 80097e4:	bf08      	it	eq
 80097e6:	f043 0301 	orreq.w	r3, r3, #1
 80097ea:	303c      	adds	r0, #60	; 0x3c
 80097ec:	428a      	cmp	r2, r1
 80097ee:	bf08      	it	eq
 80097f0:	f043 0301 	orreq.w	r3, r3, #1
 80097f4:	313c      	adds	r1, #60	; 0x3c
 80097f6:	42aa      	cmp	r2, r5
 80097f8:	bf08      	it	eq
 80097fa:	f043 0301 	orreq.w	r3, r3, #1
 80097fe:	4282      	cmp	r2, r0
 8009800:	bf08      	it	eq
 8009802:	f043 0301 	orreq.w	r3, r3, #1
 8009806:	428a      	cmp	r2, r1
 8009808:	bf08      	it	eq
 800980a:	f043 0301 	orreq.w	r3, r3, #1
 800980e:	b913      	cbnz	r3, 8009816 <HAL_DMA_Init+0x22a>
 8009810:	4b1b      	ldr	r3, [pc, #108]	; (8009880 <HAL_DMA_Init+0x294>)
 8009812:	429a      	cmp	r2, r3
 8009814:	d118      	bne.n	8009848 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009816:	4620      	mov	r0, r4
 8009818:	f7ff fe7c 	bl	8009514 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800981c:	68a3      	ldr	r3, [r4, #8]
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d069      	beq.n	80098f6 <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8009826:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009828:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800982a:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800982e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009830:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009832:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009834:	d866      	bhi.n	8009904 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009836:	1e50      	subs	r0, r2, #1
 8009838:	2807      	cmp	r0, #7
 800983a:	d97c      	bls.n	8009936 <HAL_DMA_Init+0x34a>
 800983c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800983e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009842:	2000      	movs	r0, #0
 8009844:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009846:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009848:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800984a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800984c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800984e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009854:	40020010 	.word	0x40020010
 8009858:	40020040 	.word	0x40020040
 800985c:	40020070 	.word	0x40020070
 8009860:	400204b8 	.word	0x400204b8
 8009864:	fe10803f 	.word	0xfe10803f
 8009868:	ffff0000 	.word	0xffff0000
 800986c:	5c001000 	.word	0x5c001000
 8009870:	40020028 	.word	0x40020028
 8009874:	40020058 	.word	0x40020058
 8009878:	5802541c 	.word	0x5802541c
 800987c:	58025430 	.word	0x58025430
 8009880:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009884:	6861      	ldr	r1, [r4, #4]
 8009886:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 800988a:	2e1f      	cmp	r6, #31
 800988c:	d92d      	bls.n	80098ea <HAL_DMA_Init+0x2fe>
 800988e:	394f      	subs	r1, #79	; 0x4f
 8009890:	2903      	cmp	r1, #3
 8009892:	d801      	bhi.n	8009898 <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8009894:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009898:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800989a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800989c:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800989e:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 80098a2:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80098a6:	f47f af2f 	bne.w	8009708 <HAL_DMA_Init+0x11c>
 80098aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80098ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80098ae:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80098b0:	2e00      	cmp	r6, #0
 80098b2:	f43f af29 	beq.w	8009708 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d173      	bne.n	80099a2 <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 80098ba:	2a01      	cmp	r2, #1
 80098bc:	f000 8088 	beq.w	80099d0 <HAL_DMA_Init+0x3e4>
 80098c0:	f032 0202 	bics.w	r2, r2, #2
 80098c4:	f47f af20 	bne.w	8009708 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098c8:	01f2      	lsls	r2, r6, #7
 80098ca:	f57f af1d 	bpl.w	8009708 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 80098ce:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80098d0:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80098d2:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80098d4:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80098d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80098dc:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80098de:	2303      	movs	r3, #3
        return HAL_ERROR;
 80098e0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80098e2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80098e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80098e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80098ea:	4970      	ldr	r1, [pc, #448]	; (8009aac <HAL_DMA_Init+0x4c0>)
 80098ec:	fa21 f606 	lsr.w	r6, r1, r6
 80098f0:	07f1      	lsls	r1, r6, #31
 80098f2:	d5d1      	bpl.n	8009898 <HAL_DMA_Init+0x2ac>
 80098f4:	e7ce      	b.n	8009894 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80098f6:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098f8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80098fa:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80098fe:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009900:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009902:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8009904:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8009906:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800990a:	6763      	str	r3, [r4, #116]	; 0x74
 800990c:	e79c      	b.n	8009848 <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 800990e:	2001      	movs	r0, #1
}
 8009910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009912:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009916:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009918:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800991a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800991e:	ea46 0707 	orr.w	r7, r6, r7
 8009922:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009926:	d2ad      	bcs.n	8009884 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009928:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800992a:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800992c:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8009930:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009934:	e7ba      	b.n	80098ac <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009936:	6821      	ldr	r1, [r4, #0]
 8009938:	4b5d      	ldr	r3, [pc, #372]	; (8009ab0 <HAL_DMA_Init+0x4c4>)
 800993a:	4e5e      	ldr	r6, [pc, #376]	; (8009ab4 <HAL_DMA_Init+0x4c8>)
 800993c:	4d5e      	ldr	r5, [pc, #376]	; (8009ab8 <HAL_DMA_Init+0x4cc>)
 800993e:	42b1      	cmp	r1, r6
 8009940:	bf18      	it	ne
 8009942:	4299      	cmpne	r1, r3
 8009944:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8009948:	bf0c      	ite	eq
 800994a:	2301      	moveq	r3, #1
 800994c:	2300      	movne	r3, #0
 800994e:	42a9      	cmp	r1, r5
 8009950:	bf08      	it	eq
 8009952:	f043 0301 	orreq.w	r3, r3, #1
 8009956:	3528      	adds	r5, #40	; 0x28
 8009958:	42b1      	cmp	r1, r6
 800995a:	bf08      	it	eq
 800995c:	f043 0301 	orreq.w	r3, r3, #1
 8009960:	3628      	adds	r6, #40	; 0x28
 8009962:	42a9      	cmp	r1, r5
 8009964:	bf08      	it	eq
 8009966:	f043 0301 	orreq.w	r3, r3, #1
 800996a:	3528      	adds	r5, #40	; 0x28
 800996c:	42b1      	cmp	r1, r6
 800996e:	bf08      	it	eq
 8009970:	f043 0301 	orreq.w	r3, r3, #1
 8009974:	42a9      	cmp	r1, r5
 8009976:	bf08      	it	eq
 8009978:	f043 0301 	orreq.w	r3, r3, #1
 800997c:	b93b      	cbnz	r3, 800998e <HAL_DMA_Init+0x3a2>
 800997e:	4b4f      	ldr	r3, [pc, #316]	; (8009abc <HAL_DMA_Init+0x4d0>)
 8009980:	4299      	cmp	r1, r3
 8009982:	d004      	beq.n	800998e <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009984:	4b4e      	ldr	r3, [pc, #312]	; (8009ac0 <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009986:	494f      	ldr	r1, [pc, #316]	; (8009ac4 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800998c:	e003      	b.n	8009996 <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800998e:	4b4e      	ldr	r3, [pc, #312]	; (8009ac8 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009990:	494e      	ldr	r1, [pc, #312]	; (8009acc <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009996:	2201      	movs	r2, #1
 8009998:	4082      	lsls	r2, r0
 800999a:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800999e:	6762      	str	r2, [r4, #116]	; 0x74
 80099a0:	e74f      	b.n	8009842 <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80099a2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80099a6:	d004      	beq.n	80099b2 <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 80099a8:	2a02      	cmp	r2, #2
 80099aa:	d990      	bls.n	80098ce <HAL_DMA_Init+0x2e2>
 80099ac:	2a03      	cmp	r2, #3
 80099ae:	d08b      	beq.n	80098c8 <HAL_DMA_Init+0x2dc>
 80099b0:	e6aa      	b.n	8009708 <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 80099b2:	2a03      	cmp	r2, #3
 80099b4:	f63f aea8 	bhi.w	8009708 <HAL_DMA_Init+0x11c>
 80099b8:	a001      	add	r0, pc, #4	; (adr r0, 80099c0 <HAL_DMA_Init+0x3d4>)
 80099ba:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80099be:	bf00      	nop
 80099c0:	080098cf 	.word	0x080098cf
 80099c4:	080098c9 	.word	0x080098c9
 80099c8:	080098cf 	.word	0x080098cf
 80099cc:	080099d1 	.word	0x080099d1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099d0:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 80099d4:	f47f ae98 	bne.w	8009708 <HAL_DMA_Init+0x11c>
 80099d8:	e779      	b.n	80098ce <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80099da:	4a35      	ldr	r2, [pc, #212]	; (8009ab0 <HAL_DMA_Init+0x4c4>)
 80099dc:	4935      	ldr	r1, [pc, #212]	; (8009ab4 <HAL_DMA_Init+0x4c8>)
 80099de:	4836      	ldr	r0, [pc, #216]	; (8009ab8 <HAL_DMA_Init+0x4cc>)
 80099e0:	428b      	cmp	r3, r1
 80099e2:	bf18      	it	ne
 80099e4:	4293      	cmpne	r3, r2
 80099e6:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80099ea:	4d39      	ldr	r5, [pc, #228]	; (8009ad0 <HAL_DMA_Init+0x4e4>)
 80099ec:	bf0c      	ite	eq
 80099ee:	2201      	moveq	r2, #1
 80099f0:	2200      	movne	r2, #0
 80099f2:	4283      	cmp	r3, r0
 80099f4:	bf08      	it	eq
 80099f6:	f042 0201 	orreq.w	r2, r2, #1
 80099fa:	303c      	adds	r0, #60	; 0x3c
 80099fc:	428b      	cmp	r3, r1
 80099fe:	bf08      	it	eq
 8009a00:	f042 0201 	orreq.w	r2, r2, #1
 8009a04:	313c      	adds	r1, #60	; 0x3c
 8009a06:	42ab      	cmp	r3, r5
 8009a08:	bf08      	it	eq
 8009a0a:	f042 0201 	orreq.w	r2, r2, #1
 8009a0e:	4283      	cmp	r3, r0
 8009a10:	bf08      	it	eq
 8009a12:	f042 0201 	orreq.w	r2, r2, #1
 8009a16:	428b      	cmp	r3, r1
 8009a18:	bf08      	it	eq
 8009a1a:	f042 0201 	orreq.w	r2, r2, #1
 8009a1e:	b912      	cbnz	r2, 8009a26 <HAL_DMA_Init+0x43a>
 8009a20:	4a26      	ldr	r2, [pc, #152]	; (8009abc <HAL_DMA_Init+0x4d0>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d13a      	bne.n	8009a9c <HAL_DMA_Init+0x4b0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a26:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8009a28:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009a2a:	4f2a      	ldr	r7, [pc, #168]	; (8009ad4 <HAL_DMA_Init+0x4e8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a2c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a30:	68a2      	ldr	r2, [r4, #8]
    __HAL_UNLOCK(hdma);
 8009a32:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a36:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009a38:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009a3a:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a3e:	d02b      	beq.n	8009a98 <HAL_DMA_Init+0x4ac>
 8009a40:	2a80      	cmp	r2, #128	; 0x80
 8009a42:	bf0c      	ite	eq
 8009a44:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8009a48:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a4a:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a4c:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009a4e:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a50:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a52:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a54:	f8df c084 	ldr.w	ip, [pc, #132]	; 8009adc <HAL_DMA_Init+0x4f0>
 8009a58:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a5c:	69a6      	ldr	r6, [r4, #24]
 8009a5e:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a62:	69e5      	ldr	r5, [r4, #28]
 8009a64:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a68:	4e1b      	ldr	r6, [pc, #108]	; (8009ad8 <HAL_DMA_Init+0x4ec>)
 8009a6a:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8009a6e:	441e      	add	r6, r3
 8009a70:	6a25      	ldr	r5, [r4, #32]
 8009a72:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8009a76:	fbac 6506 	umull	r6, r5, ip, r6
 8009a7a:	433a      	orrs	r2, r7
 8009a7c:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a7e:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a80:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009a82:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a84:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a86:	f7ff fcc9 	bl	800941c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009a8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f002 021f 	and.w	r2, r2, #31
 8009a92:	4093      	lsls	r3, r2
 8009a94:	6043      	str	r3, [r0, #4]
 8009a96:	e641      	b.n	800971c <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a98:	2110      	movs	r1, #16
 8009a9a:	e7d6      	b.n	8009a4a <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a9c:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009a9e:	2303      	movs	r3, #3
    return HAL_ERROR;
 8009aa0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009aa2:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009aa4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	c3c0003f 	.word	0xc3c0003f
 8009ab0:	58025408 	.word	0x58025408
 8009ab4:	5802541c 	.word	0x5802541c
 8009ab8:	58025430 	.word	0x58025430
 8009abc:	58025494 	.word	0x58025494
 8009ac0:	1000823f 	.word	0x1000823f
 8009ac4:	40020940 	.word	0x40020940
 8009ac8:	1600963f 	.word	0x1600963f
 8009acc:	58025940 	.word	0x58025940
 8009ad0:	58025458 	.word	0x58025458
 8009ad4:	fffe000f 	.word	0xfffe000f
 8009ad8:	a7fdabf8 	.word	0xa7fdabf8
 8009adc:	cccccccd 	.word	0xcccccccd

08009ae0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f000 80f5 	beq.w	8009cd0 <HAL_DMA_DeInit+0x1f0>
  __HAL_DMA_DISABLE(hdma);
 8009ae6:	6802      	ldr	r2, [r0, #0]
 8009ae8:	4b7d      	ldr	r3, [pc, #500]	; (8009ce0 <HAL_DMA_DeInit+0x200>)
 8009aea:	497e      	ldr	r1, [pc, #504]	; (8009ce4 <HAL_DMA_DeInit+0x204>)
 8009aec:	428a      	cmp	r2, r1
 8009aee:	bf18      	it	ne
 8009af0:	429a      	cmpne	r2, r3
 8009af2:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8009af6:	bf0c      	ite	eq
 8009af8:	2301      	moveq	r3, #1
 8009afa:	2300      	movne	r3, #0
{
 8009afc:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(hdma);
 8009afe:	4d7a      	ldr	r5, [pc, #488]	; (8009ce8 <HAL_DMA_DeInit+0x208>)
 8009b00:	4604      	mov	r4, r0
 8009b02:	487a      	ldr	r0, [pc, #488]	; (8009cec <HAL_DMA_DeInit+0x20c>)
 8009b04:	42aa      	cmp	r2, r5
 8009b06:	bf08      	it	eq
 8009b08:	f043 0301 	orreq.w	r3, r3, #1
 8009b0c:	3548      	adds	r5, #72	; 0x48
 8009b0e:	4282      	cmp	r2, r0
 8009b10:	bf08      	it	eq
 8009b12:	f043 0301 	orreq.w	r3, r3, #1
 8009b16:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8009b1a:	428a      	cmp	r2, r1
 8009b1c:	bf08      	it	eq
 8009b1e:	f043 0301 	orreq.w	r3, r3, #1
 8009b22:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8009b26:	42aa      	cmp	r2, r5
 8009b28:	bf08      	it	eq
 8009b2a:	f043 0301 	orreq.w	r3, r3, #1
 8009b2e:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8009b32:	4282      	cmp	r2, r0
 8009b34:	bf08      	it	eq
 8009b36:	f043 0301 	orreq.w	r3, r3, #1
 8009b3a:	3048      	adds	r0, #72	; 0x48
 8009b3c:	428a      	cmp	r2, r1
 8009b3e:	bf08      	it	eq
 8009b40:	f043 0301 	orreq.w	r3, r3, #1
 8009b44:	3148      	adds	r1, #72	; 0x48
 8009b46:	42aa      	cmp	r2, r5
 8009b48:	bf08      	it	eq
 8009b4a:	f043 0301 	orreq.w	r3, r3, #1
 8009b4e:	3548      	adds	r5, #72	; 0x48
 8009b50:	4282      	cmp	r2, r0
 8009b52:	bf08      	it	eq
 8009b54:	f043 0301 	orreq.w	r3, r3, #1
 8009b58:	3048      	adds	r0, #72	; 0x48
 8009b5a:	428a      	cmp	r2, r1
 8009b5c:	bf08      	it	eq
 8009b5e:	f043 0301 	orreq.w	r3, r3, #1
 8009b62:	3148      	adds	r1, #72	; 0x48
 8009b64:	42aa      	cmp	r2, r5
 8009b66:	bf08      	it	eq
 8009b68:	f043 0301 	orreq.w	r3, r3, #1
 8009b6c:	4282      	cmp	r2, r0
 8009b6e:	bf08      	it	eq
 8009b70:	f043 0301 	orreq.w	r3, r3, #1
 8009b74:	428a      	cmp	r2, r1
 8009b76:	bf08      	it	eq
 8009b78:	f043 0301 	orreq.w	r3, r3, #1
 8009b7c:	b933      	cbnz	r3, 8009b8c <HAL_DMA_DeInit+0xac>
 8009b7e:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8009b82:	4b5b      	ldr	r3, [pc, #364]	; (8009cf0 <HAL_DMA_DeInit+0x210>)
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bf18      	it	ne
 8009b88:	428a      	cmpne	r2, r1
 8009b8a:	d165      	bne.n	8009c58 <HAL_DMA_DeInit+0x178>
 8009b8c:	6811      	ldr	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8009b8e:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8009b90:	2521      	movs	r5, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009b92:	4620      	mov	r0, r4
  __HAL_DMA_DISABLE(hdma);
 8009b94:	f021 0101 	bic.w	r1, r1, #1
 8009b98:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8009b9a:	6013      	str	r3, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8009b9c:	6053      	str	r3, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8009b9e:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8009ba0:	60d3      	str	r3, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8009ba2:	6113      	str	r3, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8009ba4:	6155      	str	r5, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009ba6:	f7ff fc39 	bl	800941c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009baa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009bac:	233f      	movs	r3, #63	; 0x3f
 8009bae:	f002 021f 	and.w	r2, r2, #31
 8009bb2:	4093      	lsls	r3, r2
 8009bb4:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff fcac 	bl	8009514 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 8009bbc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009bbe:	b123      	cbz	r3, 8009bca <HAL_DMA_DeInit+0xea>
      hdma->DMAmuxChannel->CCR = 0U;
 8009bc0:	2000      	movs	r0, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bc2:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 8009bc6:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bc8:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009bca:	6861      	ldr	r1, [r4, #4]
 8009bcc:	1e4b      	subs	r3, r1, #1
 8009bce:	2b07      	cmp	r3, #7
 8009bd0:	d910      	bls.n	8009bf4 <HAL_DMA_DeInit+0x114>
    hdma->DMAmuxRequestGen = 0U;
 8009bd2:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bd4:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8009bd6:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009bd8:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 8009bda:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8009bde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 8009be2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 8009be6:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8009bea:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 8009bee:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	4a3f      	ldr	r2, [pc, #252]	; (8009cf4 <HAL_DMA_DeInit+0x214>)
 8009bf8:	4e3f      	ldr	r6, [pc, #252]	; (8009cf8 <HAL_DMA_DeInit+0x218>)
 8009bfa:	4d40      	ldr	r5, [pc, #256]	; (8009cfc <HAL_DMA_DeInit+0x21c>)
 8009bfc:	42b0      	cmp	r0, r6
 8009bfe:	bf18      	it	ne
 8009c00:	4290      	cmpne	r0, r2
 8009c02:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8009c06:	bf0c      	ite	eq
 8009c08:	2201      	moveq	r2, #1
 8009c0a:	2200      	movne	r2, #0
 8009c0c:	42a8      	cmp	r0, r5
 8009c0e:	bf08      	it	eq
 8009c10:	f042 0201 	orreq.w	r2, r2, #1
 8009c14:	3528      	adds	r5, #40	; 0x28
 8009c16:	42b0      	cmp	r0, r6
 8009c18:	bf08      	it	eq
 8009c1a:	f042 0201 	orreq.w	r2, r2, #1
 8009c1e:	3628      	adds	r6, #40	; 0x28
 8009c20:	42a8      	cmp	r0, r5
 8009c22:	bf08      	it	eq
 8009c24:	f042 0201 	orreq.w	r2, r2, #1
 8009c28:	3528      	adds	r5, #40	; 0x28
 8009c2a:	42b0      	cmp	r0, r6
 8009c2c:	bf08      	it	eq
 8009c2e:	f042 0201 	orreq.w	r2, r2, #1
 8009c32:	42a8      	cmp	r0, r5
 8009c34:	bf08      	it	eq
 8009c36:	f042 0201 	orreq.w	r2, r2, #1
 8009c3a:	b912      	cbnz	r2, 8009c42 <HAL_DMA_DeInit+0x162>
 8009c3c:	4a30      	ldr	r2, [pc, #192]	; (8009d00 <HAL_DMA_DeInit+0x220>)
 8009c3e:	4290      	cmp	r0, r2
 8009c40:	d148      	bne.n	8009cd4 <HAL_DMA_DeInit+0x1f4>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c42:	4a30      	ldr	r2, [pc, #192]	; (8009d04 <HAL_DMA_DeInit+0x224>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009c44:	4d30      	ldr	r5, [pc, #192]	; (8009d08 <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c46:	440a      	add	r2, r1
 8009c48:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009c4a:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009c4c:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009c4e:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009c52:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c54:	606b      	str	r3, [r5, #4]
 8009c56:	e7bc      	b.n	8009bd2 <HAL_DMA_DeInit+0xf2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009c58:	4b26      	ldr	r3, [pc, #152]	; (8009cf4 <HAL_DMA_DeInit+0x214>)
 8009c5a:	4927      	ldr	r1, [pc, #156]	; (8009cf8 <HAL_DMA_DeInit+0x218>)
 8009c5c:	4d27      	ldr	r5, [pc, #156]	; (8009cfc <HAL_DMA_DeInit+0x21c>)
 8009c5e:	428a      	cmp	r2, r1
 8009c60:	bf18      	it	ne
 8009c62:	429a      	cmpne	r2, r3
 8009c64:	4829      	ldr	r0, [pc, #164]	; (8009d0c <HAL_DMA_DeInit+0x22c>)
 8009c66:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8009c6a:	bf0c      	ite	eq
 8009c6c:	2301      	moveq	r3, #1
 8009c6e:	2300      	movne	r3, #0
 8009c70:	42aa      	cmp	r2, r5
 8009c72:	bf08      	it	eq
 8009c74:	f043 0301 	orreq.w	r3, r3, #1
 8009c78:	353c      	adds	r5, #60	; 0x3c
 8009c7a:	4282      	cmp	r2, r0
 8009c7c:	bf08      	it	eq
 8009c7e:	f043 0301 	orreq.w	r3, r3, #1
 8009c82:	303c      	adds	r0, #60	; 0x3c
 8009c84:	428a      	cmp	r2, r1
 8009c86:	bf08      	it	eq
 8009c88:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 8009c8c:	6811      	ldr	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009c8e:	42aa      	cmp	r2, r5
 8009c90:	bf08      	it	eq
 8009c92:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 8009c96:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009c9a:	4282      	cmp	r2, r0
 8009c9c:	bf08      	it	eq
 8009c9e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 8009ca2:	6011      	str	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009ca4:	b913      	cbnz	r3, 8009cac <HAL_DMA_DeInit+0x1cc>
 8009ca6:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <HAL_DMA_DeInit+0x220>)
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d10f      	bne.n	8009ccc <HAL_DMA_DeInit+0x1ec>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8009cac:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009cae:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8009cb0:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8009cb2:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8009cb4:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8009cb6:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8009cb8:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009cba:	f7ff fbaf 	bl	800941c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009cbe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f002 021f 	and.w	r2, r2, #31
 8009cc6:	4093      	lsls	r3, r2
 8009cc8:	6043      	str	r3, [r0, #4]
 8009cca:	e774      	b.n	8009bb6 <HAL_DMA_DeInit+0xd6>
    return HAL_ERROR;
 8009ccc:	2001      	movs	r0, #1
}
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009cd0:	2001      	movs	r0, #1
}
 8009cd2:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009cd4:	4a0e      	ldr	r2, [pc, #56]	; (8009d10 <HAL_DMA_DeInit+0x230>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009cd6:	4d0f      	ldr	r5, [pc, #60]	; (8009d14 <HAL_DMA_DeInit+0x234>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009cd8:	440a      	add	r2, r1
 8009cda:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009cdc:	e7b5      	b.n	8009c4a <HAL_DMA_DeInit+0x16a>
 8009cde:	bf00      	nop
 8009ce0:	40020058 	.word	0x40020058
 8009ce4:	40020040 	.word	0x40020040
 8009ce8:	40020070 	.word	0x40020070
 8009cec:	40020088 	.word	0x40020088
 8009cf0:	40020028 	.word	0x40020028
 8009cf4:	58025408 	.word	0x58025408
 8009cf8:	5802541c 	.word	0x5802541c
 8009cfc:	58025430 	.word	0x58025430
 8009d00:	58025494 	.word	0x58025494
 8009d04:	1600963f 	.word	0x1600963f
 8009d08:	58025940 	.word	0x58025940
 8009d0c:	58025444 	.word	0x58025444
 8009d10:	1000823f 	.word	0x1000823f
 8009d14:	40020940 	.word	0x40020940

08009d18 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f000 818a 	beq.w	800a032 <HAL_DMA_Start_IT+0x31a>
{
 8009d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d22:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8009d24:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009d28:	2801      	cmp	r0, #1
 8009d2a:	f000 8184 	beq.w	800a036 <HAL_DMA_Start_IT+0x31e>
 8009d2e:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d30:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8009d34:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 8009d36:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d3a:	d007      	beq.n	8009d4c <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8009d3c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8009d42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009d46:	6563      	str	r3, [r4, #84]	; 0x54
}
 8009d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8009d4c:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d4e:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 8009d52:	4858      	ldr	r0, [pc, #352]	; (8009eb4 <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d54:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 8009d56:	4e58      	ldr	r6, [pc, #352]	; (8009eb8 <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d58:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d5c:	42b5      	cmp	r5, r6
 8009d5e:	bf18      	it	ne
 8009d60:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 8009d62:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8009ec0 <HAL_DMA_Start_IT+0x1a8>
 8009d66:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d6a:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8009d6c:	bf0c      	ite	eq
 8009d6e:	2001      	moveq	r0, #1
 8009d70:	2000      	movne	r0, #0
 8009d72:	4f52      	ldr	r7, [pc, #328]	; (8009ebc <HAL_DMA_Start_IT+0x1a4>)
 8009d74:	4565      	cmp	r5, ip
 8009d76:	bf08      	it	eq
 8009d78:	f040 0001 	orreq.w	r0, r0, #1
 8009d7c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8009d80:	42b5      	cmp	r5, r6
 8009d82:	bf08      	it	eq
 8009d84:	f040 0001 	orreq.w	r0, r0, #1
 8009d88:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8009d8c:	4565      	cmp	r5, ip
 8009d8e:	bf08      	it	eq
 8009d90:	f040 0001 	orreq.w	r0, r0, #1
 8009d94:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 8009d98:	42bd      	cmp	r5, r7
 8009d9a:	bf08      	it	eq
 8009d9c:	f040 0001 	orreq.w	r0, r0, #1
 8009da0:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8009da4:	42b5      	cmp	r5, r6
 8009da6:	bf08      	it	eq
 8009da8:	f040 0001 	orreq.w	r0, r0, #1
 8009dac:	3648      	adds	r6, #72	; 0x48
 8009dae:	4565      	cmp	r5, ip
 8009db0:	bf08      	it	eq
 8009db2:	f040 0001 	orreq.w	r0, r0, #1
 8009db6:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8009dba:	42bd      	cmp	r5, r7
 8009dbc:	bf08      	it	eq
 8009dbe:	f040 0001 	orreq.w	r0, r0, #1
 8009dc2:	3748      	adds	r7, #72	; 0x48
 8009dc4:	42b5      	cmp	r5, r6
 8009dc6:	bf08      	it	eq
 8009dc8:	f040 0001 	orreq.w	r0, r0, #1
 8009dcc:	3648      	adds	r6, #72	; 0x48
 8009dce:	4565      	cmp	r5, ip
 8009dd0:	bf08      	it	eq
 8009dd2:	f040 0001 	orreq.w	r0, r0, #1
 8009dd6:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8009dda:	42bd      	cmp	r5, r7
 8009ddc:	bf08      	it	eq
 8009dde:	f040 0001 	orreq.w	r0, r0, #1
 8009de2:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 8009de6:	42b5      	cmp	r5, r6
 8009de8:	bf08      	it	eq
 8009dea:	f040 0001 	orreq.w	r0, r0, #1
 8009dee:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 8009df2:	4565      	cmp	r5, ip
 8009df4:	bf14      	ite	ne
 8009df6:	4682      	movne	sl, r0
 8009df8:	f040 0a01 	orreq.w	sl, r0, #1
 8009dfc:	42b5      	cmp	r5, r6
 8009dfe:	bf18      	it	ne
 8009e00:	42bd      	cmpne	r5, r7
 8009e02:	bf0c      	ite	eq
 8009e04:	2601      	moveq	r6, #1
 8009e06:	2600      	movne	r6, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_DMA_Start_IT+0xf8>
 8009e0a:	f1ba 0f00 	cmp.w	sl, #0
 8009e0e:	d059      	beq.n	8009ec4 <HAL_DMA_Start_IT+0x1ac>
 8009e10:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e12:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8009e16:	f027 0701 	bic.w	r7, r7, #1
 8009e1a:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e1c:	2e00      	cmp	r6, #0
 8009e1e:	f000 8084 	beq.w	8009f2a <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e22:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8009e24:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 8009e28:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009e2a:	f1be 0f00 	cmp.w	lr, #0
 8009e2e:	d002      	beq.n	8009e36 <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e30:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 8009e34:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e36:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8009e38:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e3c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e40:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e44:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e48:	fa09 f707 	lsl.w	r7, r9, r7
 8009e4c:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e50:	682f      	ldr	r7, [r5, #0]
 8009e52:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 8009e56:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009e58:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e5a:	f000 80ef 	beq.w	800a03c <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009e5e:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009e60:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e62:	b91e      	cbnz	r6, 8009e6c <HAL_DMA_Start_IT+0x154>
 8009e64:	f1ba 0f00 	cmp.w	sl, #0
 8009e68:	f000 80ee 	beq.w	800a048 <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009e6c:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009e6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009e70:	f023 031e 	bic.w	r3, r3, #30
 8009e74:	f043 0316 	orr.w	r3, r3, #22
 8009e78:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009e7a:	b11a      	cbz	r2, 8009e84 <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	f043 0308 	orr.w	r3, r3, #8
 8009e82:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009e84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	03d2      	lsls	r2, r2, #15
 8009e8a:	d503      	bpl.n	8009e94 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e92:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8009e94:	f1be 0f00 	cmp.w	lr, #0
 8009e98:	d005      	beq.n	8009ea6 <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009e9a:	f8de 3000 	ldr.w	r3, [lr]
 8009e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ea2:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 8009ea6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009eaa:	f043 0301 	orr.w	r3, r3, #1
 8009eae:	602b      	str	r3, [r5, #0]
}
 8009eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb4:	40020040 	.word	0x40020040
 8009eb8:	40020058 	.word	0x40020058
 8009ebc:	400200b8 	.word	0x400200b8
 8009ec0:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009ec4:	4f65      	ldr	r7, [pc, #404]	; (800a05c <HAL_DMA_Start_IT+0x344>)
 8009ec6:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800a064 <HAL_DMA_Start_IT+0x34c>
 8009eca:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800a068 <HAL_DMA_Start_IT+0x350>
 8009ece:	4575      	cmp	r5, lr
 8009ed0:	bf18      	it	ne
 8009ed2:	42bd      	cmpne	r5, r7
 8009ed4:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 8009ed8:	bf0c      	ite	eq
 8009eda:	2701      	moveq	r7, #1
 8009edc:	2700      	movne	r7, #0
 8009ede:	4565      	cmp	r5, ip
 8009ee0:	bf08      	it	eq
 8009ee2:	f047 0701 	orreq.w	r7, r7, #1
 8009ee6:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8009eea:	4575      	cmp	r5, lr
 8009eec:	bf08      	it	eq
 8009eee:	f047 0701 	orreq.w	r7, r7, #1
 8009ef2:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8009ef6:	4565      	cmp	r5, ip
 8009ef8:	bf08      	it	eq
 8009efa:	f047 0701 	orreq.w	r7, r7, #1
 8009efe:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8009f02:	4575      	cmp	r5, lr
 8009f04:	bf08      	it	eq
 8009f06:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8009f0a:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f0e:	4565      	cmp	r5, ip
 8009f10:	bf08      	it	eq
 8009f12:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8009f16:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f1a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8009f1e:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f22:	b917      	cbnz	r7, 8009f2a <HAL_DMA_Start_IT+0x212>
 8009f24:	4f4e      	ldr	r7, [pc, #312]	; (800a060 <HAL_DMA_Start_IT+0x348>)
 8009f26:	42bd      	cmp	r5, r7
 8009f28:	d10d      	bne.n	8009f46 <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f2a:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8009f2c:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 8009f30:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009f32:	f1be 0f00 	cmp.w	lr, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f38:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 8009f3c:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f3e:	f1ba 0f00 	cmp.w	sl, #0
 8009f42:	f47f af78 	bne.w	8009e36 <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009f46:	4f47      	ldr	r7, [pc, #284]	; (800a064 <HAL_DMA_Start_IT+0x34c>)
 8009f48:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800a05c <HAL_DMA_Start_IT+0x344>
 8009f4c:	f8df e118 	ldr.w	lr, [pc, #280]	; 800a068 <HAL_DMA_Start_IT+0x350>
 8009f50:	4545      	cmp	r5, r8
 8009f52:	bf18      	it	ne
 8009f54:	42bd      	cmpne	r5, r7
 8009f56:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8009f5a:	bf0c      	ite	eq
 8009f5c:	2701      	moveq	r7, #1
 8009f5e:	2700      	movne	r7, #0
 8009f60:	4575      	cmp	r5, lr
 8009f62:	bf08      	it	eq
 8009f64:	f047 0701 	orreq.w	r7, r7, #1
 8009f68:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8009f6c:	4545      	cmp	r5, r8
 8009f6e:	bf08      	it	eq
 8009f70:	f047 0701 	orreq.w	r7, r7, #1
 8009f74:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8009f78:	4575      	cmp	r5, lr
 8009f7a:	bf08      	it	eq
 8009f7c:	f047 0701 	orreq.w	r7, r7, #1
 8009f80:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8009f84:	4545      	cmp	r5, r8
 8009f86:	bf08      	it	eq
 8009f88:	f047 0701 	orreq.w	r7, r7, #1
 8009f8c:	4575      	cmp	r5, lr
 8009f8e:	bf08      	it	eq
 8009f90:	f047 0701 	orreq.w	r7, r7, #1
 8009f94:	b917      	cbnz	r7, 8009f9c <HAL_DMA_Start_IT+0x284>
 8009f96:	4f32      	ldr	r7, [pc, #200]	; (800a060 <HAL_DMA_Start_IT+0x348>)
 8009f98:	42bd      	cmp	r5, r7
 8009f9a:	d155      	bne.n	800a048 <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009f9c:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8009f9e:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fa2:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009fa6:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009faa:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009fae:	fa0e f707 	lsl.w	r7, lr, r7
 8009fb2:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009fb6:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fb8:	d043      	beq.n	800a042 <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009fba:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009fbc:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009fbe:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009fc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009fc2:	f023 030e 	bic.w	r3, r3, #14
 8009fc6:	f043 030a 	orr.w	r3, r3, #10
 8009fca:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009fcc:	2a00      	cmp	r2, #0
 8009fce:	d02d      	beq.n	800a02c <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	f043 0304 	orr.w	r3, r3, #4
 8009fd6:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009fd8:	4b20      	ldr	r3, [pc, #128]	; (800a05c <HAL_DMA_Start_IT+0x344>)
 8009fda:	4a22      	ldr	r2, [pc, #136]	; (800a064 <HAL_DMA_Start_IT+0x34c>)
 8009fdc:	4922      	ldr	r1, [pc, #136]	; (800a068 <HAL_DMA_Start_IT+0x350>)
 8009fde:	4295      	cmp	r5, r2
 8009fe0:	bf18      	it	ne
 8009fe2:	429d      	cmpne	r5, r3
 8009fe4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8009fe8:	bf0c      	ite	eq
 8009fea:	2301      	moveq	r3, #1
 8009fec:	2300      	movne	r3, #0
 8009fee:	428d      	cmp	r5, r1
 8009ff0:	bf08      	it	eq
 8009ff2:	f043 0301 	orreq.w	r3, r3, #1
 8009ff6:	3128      	adds	r1, #40	; 0x28
 8009ff8:	4295      	cmp	r5, r2
 8009ffa:	bf08      	it	eq
 8009ffc:	f043 0301 	orreq.w	r3, r3, #1
 800a000:	3228      	adds	r2, #40	; 0x28
 800a002:	428d      	cmp	r5, r1
 800a004:	bf08      	it	eq
 800a006:	f043 0301 	orreq.w	r3, r3, #1
 800a00a:	3128      	adds	r1, #40	; 0x28
 800a00c:	4295      	cmp	r5, r2
 800a00e:	bf08      	it	eq
 800a010:	f043 0301 	orreq.w	r3, r3, #1
 800a014:	3228      	adds	r2, #40	; 0x28
 800a016:	428d      	cmp	r5, r1
 800a018:	bf08      	it	eq
 800a01a:	f043 0301 	orreq.w	r3, r3, #1
 800a01e:	4295      	cmp	r5, r2
 800a020:	bf08      	it	eq
 800a022:	f043 0301 	orreq.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	f43f af3d 	beq.w	8009ea6 <HAL_DMA_Start_IT+0x18e>
 800a02c:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 800a030:	e728      	b.n	8009e84 <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 800a032:	2001      	movs	r0, #1
}
 800a034:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800a036:	2002      	movs	r0, #2
}
 800a038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a03c:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a03e:	60e9      	str	r1, [r5, #12]
 800a040:	e70f      	b.n	8009e62 <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a042:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a044:	60e9      	str	r1, [r5, #12]
 800a046:	e7ba      	b.n	8009fbe <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a048:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800a04a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a04c:	f023 030e 	bic.w	r3, r3, #14
 800a050:	f043 030a 	orr.w	r3, r3, #10
 800a054:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800a056:	2a00      	cmp	r2, #0
 800a058:	d1ba      	bne.n	8009fd0 <HAL_DMA_Start_IT+0x2b8>
 800a05a:	e7bd      	b.n	8009fd8 <HAL_DMA_Start_IT+0x2c0>
 800a05c:	5802541c 	.word	0x5802541c
 800a060:	58025494 	.word	0x58025494
 800a064:	58025408 	.word	0x58025408
 800a068:	58025430 	.word	0x58025430

0800a06c <HAL_DMA_Abort>:
{
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800a070:	f7fe ff2c 	bl	8008ecc <HAL_GetTick>
  if(hdma == NULL)
 800a074:	2d00      	cmp	r5, #0
 800a076:	f000 8128 	beq.w	800a2ca <HAL_DMA_Abort+0x25e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a07a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800a07e:	2b02      	cmp	r3, #2
 800a080:	f040 80e1 	bne.w	800a246 <HAL_DMA_Abort+0x1da>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a084:	682c      	ldr	r4, [r5, #0]
 800a086:	4606      	mov	r6, r0
 800a088:	4b91      	ldr	r3, [pc, #580]	; (800a2d0 <HAL_DMA_Abort+0x264>)
 800a08a:	4992      	ldr	r1, [pc, #584]	; (800a2d4 <HAL_DMA_Abort+0x268>)
 800a08c:	4a92      	ldr	r2, [pc, #584]	; (800a2d8 <HAL_DMA_Abort+0x26c>)
 800a08e:	428c      	cmp	r4, r1
 800a090:	bf18      	it	ne
 800a092:	429c      	cmpne	r4, r3
 800a094:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800a098:	4890      	ldr	r0, [pc, #576]	; (800a2dc <HAL_DMA_Abort+0x270>)
 800a09a:	bf0c      	ite	eq
 800a09c:	2301      	moveq	r3, #1
 800a09e:	2300      	movne	r3, #0
 800a0a0:	4294      	cmp	r4, r2
 800a0a2:	bf08      	it	eq
 800a0a4:	f043 0301 	orreq.w	r3, r3, #1
 800a0a8:	3248      	adds	r2, #72	; 0x48
 800a0aa:	428c      	cmp	r4, r1
 800a0ac:	bf08      	it	eq
 800a0ae:	f043 0301 	orreq.w	r3, r3, #1
 800a0b2:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800a0b6:	4284      	cmp	r4, r0
 800a0b8:	bf08      	it	eq
 800a0ba:	f043 0301 	orreq.w	r3, r3, #1
 800a0be:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800a0c2:	4294      	cmp	r4, r2
 800a0c4:	bf08      	it	eq
 800a0c6:	f043 0301 	orreq.w	r3, r3, #1
 800a0ca:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800a0ce:	428c      	cmp	r4, r1
 800a0d0:	bf08      	it	eq
 800a0d2:	f043 0301 	orreq.w	r3, r3, #1
 800a0d6:	3148      	adds	r1, #72	; 0x48
 800a0d8:	4284      	cmp	r4, r0
 800a0da:	bf08      	it	eq
 800a0dc:	f043 0301 	orreq.w	r3, r3, #1
 800a0e0:	3048      	adds	r0, #72	; 0x48
 800a0e2:	4294      	cmp	r4, r2
 800a0e4:	bf08      	it	eq
 800a0e6:	f043 0301 	orreq.w	r3, r3, #1
 800a0ea:	3248      	adds	r2, #72	; 0x48
 800a0ec:	428c      	cmp	r4, r1
 800a0ee:	bf08      	it	eq
 800a0f0:	f043 0301 	orreq.w	r3, r3, #1
 800a0f4:	3148      	adds	r1, #72	; 0x48
 800a0f6:	4284      	cmp	r4, r0
 800a0f8:	bf08      	it	eq
 800a0fa:	f043 0301 	orreq.w	r3, r3, #1
 800a0fe:	3048      	adds	r0, #72	; 0x48
 800a100:	4294      	cmp	r4, r2
 800a102:	bf08      	it	eq
 800a104:	f043 0301 	orreq.w	r3, r3, #1
 800a108:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800a10c:	428c      	cmp	r4, r1
 800a10e:	bf08      	it	eq
 800a110:	f043 0301 	orreq.w	r3, r3, #1
 800a114:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800a118:	4284      	cmp	r4, r0
 800a11a:	bf08      	it	eq
 800a11c:	f043 0301 	orreq.w	r3, r3, #1
 800a120:	428c      	cmp	r4, r1
 800a122:	bf18      	it	ne
 800a124:	4294      	cmpne	r4, r2
 800a126:	bf0c      	ite	eq
 800a128:	2201      	moveq	r2, #1
 800a12a:	2200      	movne	r2, #0
 800a12c:	d002      	beq.n	800a134 <HAL_DMA_Abort+0xc8>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 8090 	beq.w	800a254 <HAL_DMA_Abort+0x1e8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a134:	6821      	ldr	r1, [r4, #0]
 800a136:	f021 011e 	bic.w	r1, r1, #30
 800a13a:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a13c:	6961      	ldr	r1, [r4, #20]
 800a13e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a142:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a144:	2a00      	cmp	r2, #0
 800a146:	f000 80b0 	beq.w	800a2aa <HAL_DMA_Abort+0x23e>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a14a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800a14c:	6813      	ldr	r3, [r2, #0]
 800a14e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a152:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	f023 0301 	bic.w	r3, r3, #1
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	e005      	b.n	800a16a <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a15e:	f7fe feb5 	bl	8008ecc <HAL_GetTick>
 800a162:	1b83      	subs	r3, r0, r6
 800a164:	2b05      	cmp	r3, #5
 800a166:	f200 80a6 	bhi.w	800a2b6 <HAL_DMA_Abort+0x24a>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	07db      	lsls	r3, r3, #31
 800a16e:	d4f6      	bmi.n	800a15e <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a170:	682a      	ldr	r2, [r5, #0]
 800a172:	4b57      	ldr	r3, [pc, #348]	; (800a2d0 <HAL_DMA_Abort+0x264>)
 800a174:	4957      	ldr	r1, [pc, #348]	; (800a2d4 <HAL_DMA_Abort+0x268>)
 800a176:	4c58      	ldr	r4, [pc, #352]	; (800a2d8 <HAL_DMA_Abort+0x26c>)
 800a178:	428a      	cmp	r2, r1
 800a17a:	bf18      	it	ne
 800a17c:	429a      	cmpne	r2, r3
 800a17e:	4858      	ldr	r0, [pc, #352]	; (800a2e0 <HAL_DMA_Abort+0x274>)
 800a180:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800a184:	bf0c      	ite	eq
 800a186:	2301      	moveq	r3, #1
 800a188:	2300      	movne	r3, #0
 800a18a:	42a2      	cmp	r2, r4
 800a18c:	bf08      	it	eq
 800a18e:	f043 0301 	orreq.w	r3, r3, #1
 800a192:	3448      	adds	r4, #72	; 0x48
 800a194:	4282      	cmp	r2, r0
 800a196:	bf08      	it	eq
 800a198:	f043 0301 	orreq.w	r3, r3, #1
 800a19c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800a1a0:	428a      	cmp	r2, r1
 800a1a2:	bf08      	it	eq
 800a1a4:	f043 0301 	orreq.w	r3, r3, #1
 800a1a8:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800a1ac:	42a2      	cmp	r2, r4
 800a1ae:	bf08      	it	eq
 800a1b0:	f043 0301 	orreq.w	r3, r3, #1
 800a1b4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800a1b8:	4282      	cmp	r2, r0
 800a1ba:	bf08      	it	eq
 800a1bc:	f043 0301 	orreq.w	r3, r3, #1
 800a1c0:	3048      	adds	r0, #72	; 0x48
 800a1c2:	428a      	cmp	r2, r1
 800a1c4:	bf08      	it	eq
 800a1c6:	f043 0301 	orreq.w	r3, r3, #1
 800a1ca:	3148      	adds	r1, #72	; 0x48
 800a1cc:	42a2      	cmp	r2, r4
 800a1ce:	bf08      	it	eq
 800a1d0:	f043 0301 	orreq.w	r3, r3, #1
 800a1d4:	3448      	adds	r4, #72	; 0x48
 800a1d6:	4282      	cmp	r2, r0
 800a1d8:	bf08      	it	eq
 800a1da:	f043 0301 	orreq.w	r3, r3, #1
 800a1de:	3048      	adds	r0, #72	; 0x48
 800a1e0:	428a      	cmp	r2, r1
 800a1e2:	bf08      	it	eq
 800a1e4:	f043 0301 	orreq.w	r3, r3, #1
 800a1e8:	3148      	adds	r1, #72	; 0x48
 800a1ea:	42a2      	cmp	r2, r4
 800a1ec:	bf08      	it	eq
 800a1ee:	f043 0301 	orreq.w	r3, r3, #1
 800a1f2:	4282      	cmp	r2, r0
 800a1f4:	bf08      	it	eq
 800a1f6:	f043 0301 	orreq.w	r3, r3, #1
 800a1fa:	428a      	cmp	r2, r1
 800a1fc:	bf08      	it	eq
 800a1fe:	f043 0301 	orreq.w	r3, r3, #1
 800a202:	b933      	cbnz	r3, 800a212 <HAL_DMA_Abort+0x1a6>
 800a204:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800a208:	4b36      	ldr	r3, [pc, #216]	; (800a2e4 <HAL_DMA_Abort+0x278>)
 800a20a:	429a      	cmp	r2, r3
 800a20c:	bf18      	it	ne
 800a20e:	428a      	cmpne	r2, r1
 800a210:	d172      	bne.n	800a2f8 <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a212:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800a214:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a216:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a218:	f002 021f 	and.w	r2, r2, #31
 800a21c:	4093      	lsls	r3, r2
 800a21e:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800a220:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a222:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800a226:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800a228:	b133      	cbz	r3, 800a238 <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a22a:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a22c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800a22e:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a234:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a236:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800a238:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800a23a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800a23c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800a240:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800a244:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a246:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800a248:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a24a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a24c:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800a24e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800a252:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a254:	4a24      	ldr	r2, [pc, #144]	; (800a2e8 <HAL_DMA_Abort+0x27c>)
 800a256:	4925      	ldr	r1, [pc, #148]	; (800a2ec <HAL_DMA_Abort+0x280>)
 800a258:	4825      	ldr	r0, [pc, #148]	; (800a2f0 <HAL_DMA_Abort+0x284>)
 800a25a:	428c      	cmp	r4, r1
 800a25c:	bf18      	it	ne
 800a25e:	4294      	cmpne	r4, r2
 800a260:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800a264:	bf0c      	ite	eq
 800a266:	2201      	moveq	r2, #1
 800a268:	2200      	movne	r2, #0
 800a26a:	4284      	cmp	r4, r0
 800a26c:	bf08      	it	eq
 800a26e:	f042 0201 	orreq.w	r2, r2, #1
 800a272:	3028      	adds	r0, #40	; 0x28
 800a274:	428c      	cmp	r4, r1
 800a276:	bf08      	it	eq
 800a278:	f042 0201 	orreq.w	r2, r2, #1
 800a27c:	3128      	adds	r1, #40	; 0x28
 800a27e:	4284      	cmp	r4, r0
 800a280:	bf08      	it	eq
 800a282:	f042 0201 	orreq.w	r2, r2, #1
 800a286:	3028      	adds	r0, #40	; 0x28
 800a288:	428c      	cmp	r4, r1
 800a28a:	bf08      	it	eq
 800a28c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a290:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a292:	4284      	cmp	r4, r0
 800a294:	bf08      	it	eq
 800a296:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a29a:	f021 010e 	bic.w	r1, r1, #14
 800a29e:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a2a0:	b91a      	cbnz	r2, 800a2aa <HAL_DMA_Abort+0x23e>
 800a2a2:	4a14      	ldr	r2, [pc, #80]	; (800a2f4 <HAL_DMA_Abort+0x288>)
 800a2a4:	4294      	cmp	r4, r2
 800a2a6:	f47f af55 	bne.w	800a154 <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a2aa:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a2ac:	680a      	ldr	r2, [r1, #0]
 800a2ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2b2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800a2b4:	e74e      	b.n	800a154 <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2b6:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800a2b8:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800a2ba:	2303      	movs	r3, #3
        return HAL_ERROR;
 800a2bc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2be:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800a2c0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800a2c4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800a2c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a2ca:	2001      	movs	r0, #1
}
 800a2cc:	bd70      	pop	{r4, r5, r6, pc}
 800a2ce:	bf00      	nop
 800a2d0:	40020058 	.word	0x40020058
 800a2d4:	40020040 	.word	0x40020040
 800a2d8:	40020070 	.word	0x40020070
 800a2dc:	400200a0 	.word	0x400200a0
 800a2e0:	40020088 	.word	0x40020088
 800a2e4:	40020028 	.word	0x40020028
 800a2e8:	5802541c 	.word	0x5802541c
 800a2ec:	58025408 	.word	0x58025408
 800a2f0:	58025430 	.word	0x58025430
 800a2f4:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a2f8:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800a2fc:	4b18      	ldr	r3, [pc, #96]	; (800a360 <HAL_DMA_Abort+0x2f4>)
 800a2fe:	4819      	ldr	r0, [pc, #100]	; (800a364 <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a300:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a302:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800a306:	42a2      	cmp	r2, r4
 800a308:	bf18      	it	ne
 800a30a:	429a      	cmpne	r2, r3
 800a30c:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 800a310:	bf0c      	ite	eq
 800a312:	2301      	moveq	r3, #1
 800a314:	2300      	movne	r3, #0
 800a316:	4282      	cmp	r2, r0
 800a318:	bf08      	it	eq
 800a31a:	f043 0301 	orreq.w	r3, r3, #1
 800a31e:	3028      	adds	r0, #40	; 0x28
 800a320:	42a2      	cmp	r2, r4
 800a322:	bf08      	it	eq
 800a324:	f043 0301 	orreq.w	r3, r3, #1
 800a328:	3428      	adds	r4, #40	; 0x28
 800a32a:	4282      	cmp	r2, r0
 800a32c:	bf08      	it	eq
 800a32e:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a332:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a334:	42a2      	cmp	r2, r4
 800a336:	bf08      	it	eq
 800a338:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a33c:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a340:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a342:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a344:	42a2      	cmp	r2, r4
 800a346:	bf08      	it	eq
 800a348:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a34c:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a34e:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a350:	2b00      	cmp	r3, #0
 800a352:	f47f af65 	bne.w	800a220 <HAL_DMA_Abort+0x1b4>
 800a356:	4b04      	ldr	r3, [pc, #16]	; (800a368 <HAL_DMA_Abort+0x2fc>)
 800a358:	429a      	cmp	r2, r3
 800a35a:	f43f af61 	beq.w	800a220 <HAL_DMA_Abort+0x1b4>
 800a35e:	e76b      	b.n	800a238 <HAL_DMA_Abort+0x1cc>
 800a360:	5802541c 	.word	0x5802541c
 800a364:	58025430 	.word	0x58025430
 800a368:	58025494 	.word	0x58025494

0800a36c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d060      	beq.n	800a432 <HAL_DMA_Abort_IT+0xc6>
{
 800a370:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a372:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800a376:	4603      	mov	r3, r0
 800a378:	2a02      	cmp	r2, #2
 800a37a:	d156      	bne.n	800a42a <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a37c:	6801      	ldr	r1, [r0, #0]
 800a37e:	4a59      	ldr	r2, [pc, #356]	; (800a4e4 <HAL_DMA_Abort_IT+0x178>)
 800a380:	4291      	cmp	r1, r2
 800a382:	d049      	beq.n	800a418 <HAL_DMA_Abort_IT+0xac>
 800a384:	3218      	adds	r2, #24
 800a386:	4291      	cmp	r1, r2
 800a388:	d046      	beq.n	800a418 <HAL_DMA_Abort_IT+0xac>
 800a38a:	3230      	adds	r2, #48	; 0x30
 800a38c:	4856      	ldr	r0, [pc, #344]	; (800a4e8 <HAL_DMA_Abort_IT+0x17c>)
 800a38e:	4c57      	ldr	r4, [pc, #348]	; (800a4ec <HAL_DMA_Abort_IT+0x180>)
 800a390:	4281      	cmp	r1, r0
 800a392:	bf18      	it	ne
 800a394:	4291      	cmpne	r1, r2
 800a396:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800a39a:	4d55      	ldr	r5, [pc, #340]	; (800a4f0 <HAL_DMA_Abort_IT+0x184>)
 800a39c:	bf0c      	ite	eq
 800a39e:	2201      	moveq	r2, #1
 800a3a0:	2200      	movne	r2, #0
 800a3a2:	42a1      	cmp	r1, r4
 800a3a4:	bf08      	it	eq
 800a3a6:	f042 0201 	orreq.w	r2, r2, #1
 800a3aa:	3448      	adds	r4, #72	; 0x48
 800a3ac:	4281      	cmp	r1, r0
 800a3ae:	bf08      	it	eq
 800a3b0:	f042 0201 	orreq.w	r2, r2, #1
 800a3b4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800a3b8:	42a9      	cmp	r1, r5
 800a3ba:	bf08      	it	eq
 800a3bc:	f042 0201 	orreq.w	r2, r2, #1
 800a3c0:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800a3c4:	42a1      	cmp	r1, r4
 800a3c6:	bf08      	it	eq
 800a3c8:	f042 0201 	orreq.w	r2, r2, #1
 800a3cc:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800a3d0:	4281      	cmp	r1, r0
 800a3d2:	bf08      	it	eq
 800a3d4:	f042 0201 	orreq.w	r2, r2, #1
 800a3d8:	3048      	adds	r0, #72	; 0x48
 800a3da:	42a9      	cmp	r1, r5
 800a3dc:	bf08      	it	eq
 800a3de:	f042 0201 	orreq.w	r2, r2, #1
 800a3e2:	3548      	adds	r5, #72	; 0x48
 800a3e4:	42a1      	cmp	r1, r4
 800a3e6:	bf08      	it	eq
 800a3e8:	f042 0201 	orreq.w	r2, r2, #1
 800a3ec:	3448      	adds	r4, #72	; 0x48
 800a3ee:	4281      	cmp	r1, r0
 800a3f0:	bf08      	it	eq
 800a3f2:	f042 0201 	orreq.w	r2, r2, #1
 800a3f6:	3048      	adds	r0, #72	; 0x48
 800a3f8:	42a9      	cmp	r1, r5
 800a3fa:	bf08      	it	eq
 800a3fc:	f042 0201 	orreq.w	r2, r2, #1
 800a400:	42a1      	cmp	r1, r4
 800a402:	bf08      	it	eq
 800a404:	f042 0201 	orreq.w	r2, r2, #1
 800a408:	4281      	cmp	r1, r0
 800a40a:	bf08      	it	eq
 800a40c:	f042 0201 	orreq.w	r2, r2, #1
 800a410:	b912      	cbnz	r2, 800a418 <HAL_DMA_Abort_IT+0xac>
 800a412:	4a38      	ldr	r2, [pc, #224]	; (800a4f4 <HAL_DMA_Abort_IT+0x188>)
 800a414:	4291      	cmp	r1, r2
 800a416:	d10e      	bne.n	800a436 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800a418:	2204      	movs	r2, #4
  return HAL_OK;
 800a41a:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800a41c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a420:	680b      	ldr	r3, [r1, #0]
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	600b      	str	r3, [r1, #0]
}
 800a428:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a42a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800a42c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a42e:	655a      	str	r2, [r3, #84]	; 0x54
}
 800a430:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a432:	2001      	movs	r0, #1
}
 800a434:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a436:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800a43a:	4a2f      	ldr	r2, [pc, #188]	; (800a4f8 <HAL_DMA_Abort_IT+0x18c>)
 800a43c:	482f      	ldr	r0, [pc, #188]	; (800a4fc <HAL_DMA_Abort_IT+0x190>)
 800a43e:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800a442:	4d2f      	ldr	r5, [pc, #188]	; (800a500 <HAL_DMA_Abort_IT+0x194>)
 800a444:	42a1      	cmp	r1, r4
 800a446:	bf18      	it	ne
 800a448:	4291      	cmpne	r1, r2
 800a44a:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800a44e:	bf0c      	ite	eq
 800a450:	2201      	moveq	r2, #1
 800a452:	2200      	movne	r2, #0
 800a454:	4281      	cmp	r1, r0
 800a456:	bf08      	it	eq
 800a458:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a45c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a45e:	42a9      	cmp	r1, r5
 800a460:	bf08      	it	eq
 800a462:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a466:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a46a:	3528      	adds	r5, #40	; 0x28
 800a46c:	42a1      	cmp	r1, r4
 800a46e:	bf08      	it	eq
 800a470:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a474:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a476:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800a478:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a47a:	42a9      	cmp	r1, r5
 800a47c:	bf08      	it	eq
 800a47e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800a482:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a486:	42a1      	cmp	r1, r4
 800a488:	bf08      	it	eq
 800a48a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800a48e:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a490:	b912      	cbnz	r2, 800a498 <HAL_DMA_Abort_IT+0x12c>
 800a492:	4a1c      	ldr	r2, [pc, #112]	; (800a504 <HAL_DMA_Abort_IT+0x198>)
 800a494:	4291      	cmp	r1, r2
 800a496:	d117      	bne.n	800a4c8 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a498:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a49a:	2101      	movs	r1, #1
 800a49c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a49e:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a4a0:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4a4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a4a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a4aa:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4ac:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a4ae:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800a4b0:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a4b4:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4b6:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800a4b8:	b132      	cbz	r2, 800a4c8 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a4ba:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a4bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a4be:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a4c0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a4c4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a4c6:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800a4c8:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800a4ca:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800a4cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800a4ce:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a4d2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800a4d6:	b11a      	cbz	r2, 800a4e0 <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4790      	blx	r2
  return HAL_OK;
 800a4dc:	4620      	mov	r0, r4
}
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800a4e0:	4610      	mov	r0, r2
}
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	40020010 	.word	0x40020010
 800a4e8:	40020040 	.word	0x40020040
 800a4ec:	40020070 	.word	0x40020070
 800a4f0:	400200a0 	.word	0x400200a0
 800a4f4:	400204b8 	.word	0x400204b8
 800a4f8:	5802541c 	.word	0x5802541c
 800a4fc:	58025430 	.word	0x58025430
 800a500:	58025444 	.word	0x58025444
 800a504:	58025494 	.word	0x58025494

0800a508 <HAL_DMA_IRQHandler>:
{
 800a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a50c:	4a9f      	ldr	r2, [pc, #636]	; (800a78c <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 800a50e:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a510:	4e9f      	ldr	r6, [pc, #636]	; (800a790 <HAL_DMA_IRQHandler+0x288>)
{
 800a512:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a514:	6803      	ldr	r3, [r0, #0]
{
 800a516:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800a518:	499e      	ldr	r1, [pc, #632]	; (800a794 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a51a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a51c:	4293      	cmp	r3, r2
 800a51e:	bf18      	it	ne
 800a520:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 800a522:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a524:	bf08      	it	eq
 800a526:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a528:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 800a52a:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a52c:	bf18      	it	ne
 800a52e:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 800a530:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a532:	d04a      	beq.n	800a5ca <HAL_DMA_IRQHandler+0xc2>
 800a534:	3230      	adds	r2, #48	; 0x30
 800a536:	f8df e26c 	ldr.w	lr, [pc, #620]	; 800a7a4 <HAL_DMA_IRQHandler+0x29c>
 800a53a:	4897      	ldr	r0, [pc, #604]	; (800a798 <HAL_DMA_IRQHandler+0x290>)
 800a53c:	4573      	cmp	r3, lr
 800a53e:	bf18      	it	ne
 800a540:	4293      	cmpne	r3, r2
 800a542:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a546:	bf0c      	ite	eq
 800a548:	2201      	moveq	r2, #1
 800a54a:	2200      	movne	r2, #0
 800a54c:	4283      	cmp	r3, r0
 800a54e:	bf08      	it	eq
 800a550:	f042 0201 	orreq.w	r2, r2, #1
 800a554:	3030      	adds	r0, #48	; 0x30
 800a556:	4573      	cmp	r3, lr
 800a558:	bf08      	it	eq
 800a55a:	f042 0201 	orreq.w	r2, r2, #1
 800a55e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800a562:	4283      	cmp	r3, r0
 800a564:	bf08      	it	eq
 800a566:	f042 0201 	orreq.w	r2, r2, #1
 800a56a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a56e:	4573      	cmp	r3, lr
 800a570:	bf08      	it	eq
 800a572:	f042 0201 	orreq.w	r2, r2, #1
 800a576:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800a57a:	4283      	cmp	r3, r0
 800a57c:	bf08      	it	eq
 800a57e:	f042 0201 	orreq.w	r2, r2, #1
 800a582:	3030      	adds	r0, #48	; 0x30
 800a584:	4573      	cmp	r3, lr
 800a586:	bf08      	it	eq
 800a588:	f042 0201 	orreq.w	r2, r2, #1
 800a58c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800a590:	4283      	cmp	r3, r0
 800a592:	bf08      	it	eq
 800a594:	f042 0201 	orreq.w	r2, r2, #1
 800a598:	3030      	adds	r0, #48	; 0x30
 800a59a:	4573      	cmp	r3, lr
 800a59c:	bf08      	it	eq
 800a59e:	f042 0201 	orreq.w	r2, r2, #1
 800a5a2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800a5a6:	4283      	cmp	r3, r0
 800a5a8:	bf08      	it	eq
 800a5aa:	f042 0201 	orreq.w	r2, r2, #1
 800a5ae:	3030      	adds	r0, #48	; 0x30
 800a5b0:	4573      	cmp	r3, lr
 800a5b2:	bf08      	it	eq
 800a5b4:	f042 0201 	orreq.w	r2, r2, #1
 800a5b8:	4283      	cmp	r3, r0
 800a5ba:	bf08      	it	eq
 800a5bc:	f042 0201 	orreq.w	r2, r2, #1
 800a5c0:	b91a      	cbnz	r2, 800a5ca <HAL_DMA_IRQHandler+0xc2>
 800a5c2:	4a76      	ldr	r2, [pc, #472]	; (800a79c <HAL_DMA_IRQHandler+0x294>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	f040 820b 	bne.w	800a9e0 <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5ca:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	f001 0c1f 	and.w	ip, r1, #31
 800a5d4:	fa02 f20c 	lsl.w	r2, r2, ip
 800a5d8:	4217      	tst	r7, r2
 800a5da:	f040 818d 	bne.w	800a8f8 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5de:	fa27 f20c 	lsr.w	r2, r7, ip
 800a5e2:	07d2      	lsls	r2, r2, #31
 800a5e4:	d50c      	bpl.n	800a600 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a5e6:	695a      	ldr	r2, [r3, #20]
 800a5e8:	0610      	lsls	r0, r2, #24
 800a5ea:	d509      	bpl.n	800a600 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	fa02 f20c 	lsl.w	r2, r2, ip
 800a5f2:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a5f4:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800a5f8:	f042 0202 	orr.w	r2, r2, #2
 800a5fc:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a600:	f04f 0e04 	mov.w	lr, #4
 800a604:	fa0e f00c 	lsl.w	r0, lr, ip
 800a608:	4238      	tst	r0, r7
 800a60a:	d05b      	beq.n	800a6c4 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a60c:	2e00      	cmp	r6, #0
 800a60e:	d14f      	bne.n	800a6b0 <HAL_DMA_IRQHandler+0x1a8>
 800a610:	4a63      	ldr	r2, [pc, #396]	; (800a7a0 <HAL_DMA_IRQHandler+0x298>)
 800a612:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800a7a4 <HAL_DMA_IRQHandler+0x29c>
 800a616:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800a798 <HAL_DMA_IRQHandler+0x290>
 800a61a:	454b      	cmp	r3, r9
 800a61c:	bf18      	it	ne
 800a61e:	4293      	cmpne	r3, r2
 800a620:	f109 0948 	add.w	r9, r9, #72	; 0x48
 800a624:	bf0c      	ite	eq
 800a626:	2201      	moveq	r2, #1
 800a628:	2200      	movne	r2, #0
 800a62a:	4543      	cmp	r3, r8
 800a62c:	bf08      	it	eq
 800a62e:	f042 0201 	orreq.w	r2, r2, #1
 800a632:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a636:	454b      	cmp	r3, r9
 800a638:	bf08      	it	eq
 800a63a:	f042 0201 	orreq.w	r2, r2, #1
 800a63e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800a642:	4543      	cmp	r3, r8
 800a644:	bf08      	it	eq
 800a646:	f042 0201 	orreq.w	r2, r2, #1
 800a64a:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800a64e:	454b      	cmp	r3, r9
 800a650:	bf08      	it	eq
 800a652:	f042 0201 	orreq.w	r2, r2, #1
 800a656:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800a65a:	4543      	cmp	r3, r8
 800a65c:	bf08      	it	eq
 800a65e:	f042 0201 	orreq.w	r2, r2, #1
 800a662:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a666:	454b      	cmp	r3, r9
 800a668:	bf08      	it	eq
 800a66a:	f042 0201 	orreq.w	r2, r2, #1
 800a66e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800a672:	4543      	cmp	r3, r8
 800a674:	bf08      	it	eq
 800a676:	f042 0201 	orreq.w	r2, r2, #1
 800a67a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a67e:	454b      	cmp	r3, r9
 800a680:	bf08      	it	eq
 800a682:	f042 0201 	orreq.w	r2, r2, #1
 800a686:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800a68a:	4543      	cmp	r3, r8
 800a68c:	bf08      	it	eq
 800a68e:	f042 0201 	orreq.w	r2, r2, #1
 800a692:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a696:	454b      	cmp	r3, r9
 800a698:	bf08      	it	eq
 800a69a:	f042 0201 	orreq.w	r2, r2, #1
 800a69e:	4543      	cmp	r3, r8
 800a6a0:	bf08      	it	eq
 800a6a2:	f042 0201 	orreq.w	r2, r2, #1
 800a6a6:	b91a      	cbnz	r2, 800a6b0 <HAL_DMA_IRQHandler+0x1a8>
 800a6a8:	4a3c      	ldr	r2, [pc, #240]	; (800a79c <HAL_DMA_IRQHandler+0x294>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	f040 822f 	bne.w	800ab0e <HAL_DMA_IRQHandler+0x606>
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	0792      	lsls	r2, r2, #30
 800a6b4:	d506      	bpl.n	800a6c4 <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6b6:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6b8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800a6bc:	f042 0204 	orr.w	r2, r2, #4
 800a6c0:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a6ca:	ea1c 0f07 	tst.w	ip, r7
 800a6ce:	d06f      	beq.n	800a7b0 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	d146      	bne.n	800a762 <HAL_DMA_IRQHandler+0x25a>
 800a6d4:	4a32      	ldr	r2, [pc, #200]	; (800a7a0 <HAL_DMA_IRQHandler+0x298>)
 800a6d6:	4833      	ldr	r0, [pc, #204]	; (800a7a4 <HAL_DMA_IRQHandler+0x29c>)
 800a6d8:	4e2f      	ldr	r6, [pc, #188]	; (800a798 <HAL_DMA_IRQHandler+0x290>)
 800a6da:	4283      	cmp	r3, r0
 800a6dc:	bf18      	it	ne
 800a6de:	4293      	cmpne	r3, r2
 800a6e0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800a6e4:	bf0c      	ite	eq
 800a6e6:	2201      	moveq	r2, #1
 800a6e8:	2200      	movne	r2, #0
 800a6ea:	42b3      	cmp	r3, r6
 800a6ec:	bf08      	it	eq
 800a6ee:	f042 0201 	orreq.w	r2, r2, #1
 800a6f2:	3630      	adds	r6, #48	; 0x30
 800a6f4:	4283      	cmp	r3, r0
 800a6f6:	bf08      	it	eq
 800a6f8:	f042 0201 	orreq.w	r2, r2, #1
 800a6fc:	3030      	adds	r0, #48	; 0x30
 800a6fe:	42b3      	cmp	r3, r6
 800a700:	bf08      	it	eq
 800a702:	f042 0201 	orreq.w	r2, r2, #1
 800a706:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800a70a:	4283      	cmp	r3, r0
 800a70c:	bf08      	it	eq
 800a70e:	f042 0201 	orreq.w	r2, r2, #1
 800a712:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a716:	42b3      	cmp	r3, r6
 800a718:	bf08      	it	eq
 800a71a:	f042 0201 	orreq.w	r2, r2, #1
 800a71e:	3630      	adds	r6, #48	; 0x30
 800a720:	4283      	cmp	r3, r0
 800a722:	bf08      	it	eq
 800a724:	f042 0201 	orreq.w	r2, r2, #1
 800a728:	3030      	adds	r0, #48	; 0x30
 800a72a:	42b3      	cmp	r3, r6
 800a72c:	bf08      	it	eq
 800a72e:	f042 0201 	orreq.w	r2, r2, #1
 800a732:	3630      	adds	r6, #48	; 0x30
 800a734:	4283      	cmp	r3, r0
 800a736:	bf08      	it	eq
 800a738:	f042 0201 	orreq.w	r2, r2, #1
 800a73c:	3030      	adds	r0, #48	; 0x30
 800a73e:	42b3      	cmp	r3, r6
 800a740:	bf08      	it	eq
 800a742:	f042 0201 	orreq.w	r2, r2, #1
 800a746:	3630      	adds	r6, #48	; 0x30
 800a748:	4283      	cmp	r3, r0
 800a74a:	bf08      	it	eq
 800a74c:	f042 0201 	orreq.w	r2, r2, #1
 800a750:	42b3      	cmp	r3, r6
 800a752:	bf08      	it	eq
 800a754:	f042 0201 	orreq.w	r2, r2, #1
 800a758:	b91a      	cbnz	r2, 800a762 <HAL_DMA_IRQHandler+0x25a>
 800a75a:	4a10      	ldr	r2, [pc, #64]	; (800a79c <HAL_DMA_IRQHandler+0x294>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	f040 81de 	bne.w	800ab1e <HAL_DMA_IRQHandler+0x616>
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800a768:	b312      	cbz	r2, 800a7b0 <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a76a:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	0352      	lsls	r2, r2, #13
 800a772:	f100 818b 	bmi.w	800aa8c <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	05d6      	lsls	r6, r2, #23
 800a77a:	d403      	bmi.n	800a784 <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	f022 0208 	bic.w	r2, r2, #8
 800a782:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800a784:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800a788:	b193      	cbz	r3, 800a7b0 <HAL_DMA_IRQHandler+0x2a8>
 800a78a:	e00d      	b.n	800a7a8 <HAL_DMA_IRQHandler+0x2a0>
 800a78c:	40020028 	.word	0x40020028
 800a790:	40020010 	.word	0x40020010
 800a794:	240000b0 	.word	0x240000b0
 800a798:	40020070 	.word	0x40020070
 800a79c:	400204b8 	.word	0x400204b8
 800a7a0:	40020058 	.word	0x40020058
 800a7a4:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	4798      	blx	r3
 800a7ac:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a7b0:	f001 011f 	and.w	r1, r1, #31
 800a7b4:	2620      	movs	r6, #32
 800a7b6:	408e      	lsls	r6, r1
 800a7b8:	423e      	tst	r6, r7
 800a7ba:	d06a      	beq.n	800a892 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a7bc:	f8da 2000 	ldr.w	r2, [sl]
 800a7c0:	4ba7      	ldr	r3, [pc, #668]	; (800aa60 <HAL_DMA_IRQHandler+0x558>)
 800a7c2:	48a8      	ldr	r0, [pc, #672]	; (800aa64 <HAL_DMA_IRQHandler+0x55c>)
 800a7c4:	4fa8      	ldr	r7, [pc, #672]	; (800aa68 <HAL_DMA_IRQHandler+0x560>)
 800a7c6:	4282      	cmp	r2, r0
 800a7c8:	bf18      	it	ne
 800a7ca:	429a      	cmpne	r2, r3
 800a7cc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a7d0:	bf0c      	ite	eq
 800a7d2:	2301      	moveq	r3, #1
 800a7d4:	2300      	movne	r3, #0
 800a7d6:	42ba      	cmp	r2, r7
 800a7d8:	bf08      	it	eq
 800a7da:	f043 0301 	orreq.w	r3, r3, #1
 800a7de:	3730      	adds	r7, #48	; 0x30
 800a7e0:	4282      	cmp	r2, r0
 800a7e2:	bf08      	it	eq
 800a7e4:	f043 0301 	orreq.w	r3, r3, #1
 800a7e8:	3030      	adds	r0, #48	; 0x30
 800a7ea:	42ba      	cmp	r2, r7
 800a7ec:	bf08      	it	eq
 800a7ee:	f043 0301 	orreq.w	r3, r3, #1
 800a7f2:	3730      	adds	r7, #48	; 0x30
 800a7f4:	4282      	cmp	r2, r0
 800a7f6:	bf08      	it	eq
 800a7f8:	f043 0301 	orreq.w	r3, r3, #1
 800a7fc:	3030      	adds	r0, #48	; 0x30
 800a7fe:	42ba      	cmp	r2, r7
 800a800:	bf08      	it	eq
 800a802:	f043 0301 	orreq.w	r3, r3, #1
 800a806:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800a80a:	4282      	cmp	r2, r0
 800a80c:	bf08      	it	eq
 800a80e:	f043 0301 	orreq.w	r3, r3, #1
 800a812:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a816:	42ba      	cmp	r2, r7
 800a818:	bf08      	it	eq
 800a81a:	f043 0301 	orreq.w	r3, r3, #1
 800a81e:	3730      	adds	r7, #48	; 0x30
 800a820:	4282      	cmp	r2, r0
 800a822:	bf08      	it	eq
 800a824:	f043 0301 	orreq.w	r3, r3, #1
 800a828:	3030      	adds	r0, #48	; 0x30
 800a82a:	42ba      	cmp	r2, r7
 800a82c:	bf08      	it	eq
 800a82e:	f043 0301 	orreq.w	r3, r3, #1
 800a832:	3730      	adds	r7, #48	; 0x30
 800a834:	4282      	cmp	r2, r0
 800a836:	bf08      	it	eq
 800a838:	f043 0301 	orreq.w	r3, r3, #1
 800a83c:	3030      	adds	r0, #48	; 0x30
 800a83e:	42ba      	cmp	r2, r7
 800a840:	bf08      	it	eq
 800a842:	f043 0301 	orreq.w	r3, r3, #1
 800a846:	3730      	adds	r7, #48	; 0x30
 800a848:	4282      	cmp	r2, r0
 800a84a:	bf08      	it	eq
 800a84c:	f043 0301 	orreq.w	r3, r3, #1
 800a850:	42ba      	cmp	r2, r7
 800a852:	bf08      	it	eq
 800a854:	f043 0301 	orreq.w	r3, r3, #1
 800a858:	b91b      	cbnz	r3, 800a862 <HAL_DMA_IRQHandler+0x35a>
 800a85a:	4b84      	ldr	r3, [pc, #528]	; (800aa6c <HAL_DMA_IRQHandler+0x564>)
 800a85c:	429a      	cmp	r2, r3
 800a85e:	f040 8173 	bne.w	800ab48 <HAL_DMA_IRQHandler+0x640>
 800a862:	6813      	ldr	r3, [r2, #0]
 800a864:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a868:	b19b      	cbz	r3, 800a892 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a86a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a86c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 800a870:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a872:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a874:	f000 8114 	beq.w	800aaa0 <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a878:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a87c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a87e:	f000 812d 	beq.w	800aadc <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a882:	031c      	lsls	r4, r3, #12
 800a884:	f140 8138 	bpl.w	800aaf8 <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 800a888:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800a88c:	b10b      	cbz	r3, 800a892 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 800a88e:	4650      	mov	r0, sl
 800a890:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a892:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 80df 	beq.w	800aa5a <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a89c:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800a8a0:	07d8      	lsls	r0, r3, #31
 800a8a2:	d51f      	bpl.n	800a8e4 <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 800a8a4:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 800a8a8:	2404      	movs	r4, #4
 800a8aa:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	f023 0301 	bic.w	r3, r3, #1
 800a8b4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a8b6:	4b6e      	ldr	r3, [pc, #440]	; (800aa70 <HAL_DMA_IRQHandler+0x568>)
 800a8b8:	fba3 3505 	umull	r3, r5, r3, r5
 800a8bc:	0aad      	lsrs	r5, r5, #10
 800a8be:	e002      	b.n	800a8c6 <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a8c0:	6813      	ldr	r3, [r2, #0]
 800a8c2:	07d9      	lsls	r1, r3, #31
 800a8c4:	d504      	bpl.n	800a8d0 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	42ab      	cmp	r3, r5
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	d9f7      	bls.n	800a8c0 <HAL_DMA_IRQHandler+0x3b8>
        __HAL_UNLOCK(hdma);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800a8da:	bf4c      	ite	mi
 800a8dc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800a8de:	2301      	movpl	r3, #1
 800a8e0:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800a8e4:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80b6 	beq.w	800aa5a <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 800a8ee:	4650      	mov	r0, sl
}
 800a8f0:	b002      	add	sp, #8
 800a8f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 800a8f6:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	0740      	lsls	r0, r0, #29
 800a8fc:	d50a      	bpl.n	800a914 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a8fe:	6818      	ldr	r0, [r3, #0]
 800a900:	f020 0004 	bic.w	r0, r0, #4
 800a904:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a906:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a908:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800a90c:	f042 0201 	orr.w	r2, r2, #1
 800a910:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a914:	fa27 f20c 	lsr.w	r2, r7, ip
 800a918:	07d2      	lsls	r2, r2, #31
 800a91a:	f57f ae71 	bpl.w	800a600 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a91e:	4a55      	ldr	r2, [pc, #340]	; (800aa74 <HAL_DMA_IRQHandler+0x56c>)
 800a920:	4851      	ldr	r0, [pc, #324]	; (800aa68 <HAL_DMA_IRQHandler+0x560>)
 800a922:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800aa88 <HAL_DMA_IRQHandler+0x580>
 800a926:	4283      	cmp	r3, r0
 800a928:	bf18      	it	ne
 800a92a:	4293      	cmpne	r3, r2
 800a92c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800a930:	bf0c      	ite	eq
 800a932:	2201      	moveq	r2, #1
 800a934:	2200      	movne	r2, #0
 800a936:	4543      	cmp	r3, r8
 800a938:	bf08      	it	eq
 800a93a:	f042 0201 	orreq.w	r2, r2, #1
 800a93e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a942:	4283      	cmp	r3, r0
 800a944:	bf08      	it	eq
 800a946:	f042 0201 	orreq.w	r2, r2, #1
 800a94a:	3030      	adds	r0, #48	; 0x30
 800a94c:	4543      	cmp	r3, r8
 800a94e:	bf08      	it	eq
 800a950:	f042 0201 	orreq.w	r2, r2, #1
 800a954:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800a958:	4283      	cmp	r3, r0
 800a95a:	bf08      	it	eq
 800a95c:	f042 0201 	orreq.w	r2, r2, #1
 800a960:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a964:	4543      	cmp	r3, r8
 800a966:	bf08      	it	eq
 800a968:	f042 0201 	orreq.w	r2, r2, #1
 800a96c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a970:	4283      	cmp	r3, r0
 800a972:	bf08      	it	eq
 800a974:	f042 0201 	orreq.w	r2, r2, #1
 800a978:	3030      	adds	r0, #48	; 0x30
 800a97a:	4543      	cmp	r3, r8
 800a97c:	bf08      	it	eq
 800a97e:	f042 0201 	orreq.w	r2, r2, #1
 800a982:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a986:	4283      	cmp	r3, r0
 800a988:	bf08      	it	eq
 800a98a:	f042 0201 	orreq.w	r2, r2, #1
 800a98e:	3030      	adds	r0, #48	; 0x30
 800a990:	4543      	cmp	r3, r8
 800a992:	bf08      	it	eq
 800a994:	f042 0201 	orreq.w	r2, r2, #1
 800a998:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800a99c:	4283      	cmp	r3, r0
 800a99e:	bf08      	it	eq
 800a9a0:	f042 0201 	orreq.w	r2, r2, #1
 800a9a4:	3030      	adds	r0, #48	; 0x30
 800a9a6:	4543      	cmp	r3, r8
 800a9a8:	bf08      	it	eq
 800a9aa:	f042 0201 	orreq.w	r2, r2, #1
 800a9ae:	4283      	cmp	r3, r0
 800a9b0:	bf08      	it	eq
 800a9b2:	f042 0201 	orreq.w	r2, r2, #1
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	f47f ae15 	bne.w	800a5e6 <HAL_DMA_IRQHandler+0xde>
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	f47f ae12 	bne.w	800a5e6 <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a9c2:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a9c4:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a9c6:	fa02 f20c 	lsl.w	r2, r2, ip
 800a9ca:	423a      	tst	r2, r7
 800a9cc:	f040 809f 	bne.w	800ab0e <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	fa02 fc0c 	lsl.w	ip, r2, ip
 800a9d6:	ea17 0f0c 	tst.w	r7, ip
 800a9da:	f43f aee9 	beq.w	800a7b0 <HAL_DMA_IRQHandler+0x2a8>
 800a9de:	e679      	b.n	800a6d4 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a9e0:	4a25      	ldr	r2, [pc, #148]	; (800aa78 <HAL_DMA_IRQHandler+0x570>)
 800a9e2:	4e26      	ldr	r6, [pc, #152]	; (800aa7c <HAL_DMA_IRQHandler+0x574>)
 800a9e4:	4d26      	ldr	r5, [pc, #152]	; (800aa80 <HAL_DMA_IRQHandler+0x578>)
 800a9e6:	42b3      	cmp	r3, r6
 800a9e8:	bf18      	it	ne
 800a9ea:	4293      	cmpne	r3, r2
 800a9ec:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a9f0:	bf0c      	ite	eq
 800a9f2:	2201      	moveq	r2, #1
 800a9f4:	2200      	movne	r2, #0
 800a9f6:	42ab      	cmp	r3, r5
 800a9f8:	bf08      	it	eq
 800a9fa:	f042 0201 	orreq.w	r2, r2, #1
 800a9fe:	3528      	adds	r5, #40	; 0x28
 800aa00:	42b3      	cmp	r3, r6
 800aa02:	bf08      	it	eq
 800aa04:	f042 0201 	orreq.w	r2, r2, #1
 800aa08:	3628      	adds	r6, #40	; 0x28
 800aa0a:	42ab      	cmp	r3, r5
 800aa0c:	bf08      	it	eq
 800aa0e:	f042 0201 	orreq.w	r2, r2, #1
 800aa12:	3528      	adds	r5, #40	; 0x28
 800aa14:	42b3      	cmp	r3, r6
 800aa16:	bf08      	it	eq
 800aa18:	f042 0201 	orreq.w	r2, r2, #1
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	bf08      	it	eq
 800aa20:	f042 0201 	orreq.w	r2, r2, #1
 800aa24:	b912      	cbnz	r2, 800aa2c <HAL_DMA_IRQHandler+0x524>
 800aa26:	4a17      	ldr	r2, [pc, #92]	; (800aa84 <HAL_DMA_IRQHandler+0x57c>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d116      	bne.n	800aa5a <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800aa2c:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 800aa30:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800aa32:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800aa34:	f005 051f 	and.w	r5, r5, #31
 800aa38:	40ae      	lsls	r6, r5
 800aa3a:	420e      	tst	r6, r1
 800aa3c:	d073      	beq.n	800ab26 <HAL_DMA_IRQHandler+0x61e>
 800aa3e:	0757      	lsls	r7, r2, #29
 800aa40:	d571      	bpl.n	800ab26 <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa42:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800aa44:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa46:	f140 809f 	bpl.w	800ab88 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800aa4a:	03d1      	lsls	r1, r2, #15
 800aa4c:	f100 80a2 	bmi.w	800ab94 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa50:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f47f af4a 	bne.w	800a8ee <HAL_DMA_IRQHandler+0x3e6>
}
 800aa5a:	b002      	add	sp, #8
 800aa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa60:	40020010 	.word	0x40020010
 800aa64:	40020028 	.word	0x40020028
 800aa68:	40020040 	.word	0x40020040
 800aa6c:	400204b8 	.word	0x400204b8
 800aa70:	1b4e81b5 	.word	0x1b4e81b5
 800aa74:	40020058 	.word	0x40020058
 800aa78:	58025408 	.word	0x58025408
 800aa7c:	5802541c 	.word	0x5802541c
 800aa80:	58025430 	.word	0x58025430
 800aa84:	58025494 	.word	0x58025494
 800aa88:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	031b      	lsls	r3, r3, #12
 800aa90:	f57f ae78 	bpl.w	800a784 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800aa94:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f47f ae85 	bne.w	800a7a8 <HAL_DMA_IRQHandler+0x2a0>
 800aa9e:	e687      	b.n	800a7b0 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aaa0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aaa4:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aaa8:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aaaa:	6953      	ldr	r3, [r2, #20]
 800aaac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aab0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aab2:	b33d      	cbz	r5, 800ab04 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aab4:	6813      	ldr	r3, [r2, #0]
 800aab6:	f023 0308 	bic.w	r3, r3, #8
 800aaba:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aabc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800aabe:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 800aac0:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aac2:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800aac6:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aaca:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800aacc:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800aad0:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f47f af0a 	bne.w	800a8ee <HAL_DMA_IRQHandler+0x3e6>
 800aada:	e7be      	b.n	800aa5a <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aadc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800aae0:	f47f aed2 	bne.w	800a888 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aae4:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800aae6:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aae8:	f021 0110 	bic.w	r1, r1, #16
 800aaec:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 800aaee:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800aaf2:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 800aaf6:	e6c7      	b.n	800a888 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 800aaf8:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f47f aec6 	bne.w	800a88e <HAL_DMA_IRQHandler+0x386>
 800ab02:	e6c6      	b.n	800a892 <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab04:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1d3      	bne.n	800aab4 <HAL_DMA_IRQHandler+0x5ac>
 800ab0c:	e7d6      	b.n	800aabc <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab0e:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ab10:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab12:	fa02 fc0c 	lsl.w	ip, r2, ip
 800ab16:	ea17 0f0c 	tst.w	r7, ip
 800ab1a:	f43f ae49 	beq.w	800a7b0 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800ab24:	e620      	b.n	800a768 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ab26:	2602      	movs	r6, #2
 800ab28:	40ae      	lsls	r6, r5
 800ab2a:	420e      	tst	r6, r1
 800ab2c:	d010      	beq.n	800ab50 <HAL_DMA_IRQHandler+0x648>
 800ab2e:	0797      	lsls	r7, r2, #30
 800ab30:	d50e      	bpl.n	800ab50 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ab32:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab34:	0414      	lsls	r4, r2, #16
 800ab36:	d533      	bpl.n	800aba0 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ab38:	03d0      	lsls	r0, r2, #15
 800ab3a:	d43d      	bmi.n	800abb8 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 800ab3c:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f47f aed4 	bne.w	800a8ee <HAL_DMA_IRQHandler+0x3e6>
 800ab46:	e788      	b.n	800aa5a <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ab48:	6813      	ldr	r3, [r2, #0]
 800ab4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ab4e:	e68b      	b.n	800a868 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ab50:	2608      	movs	r6, #8
 800ab52:	40ae      	lsls	r6, r5
 800ab54:	420e      	tst	r6, r1
 800ab56:	d080      	beq.n	800aa5a <HAL_DMA_IRQHandler+0x552>
 800ab58:	0711      	lsls	r1, r2, #28
 800ab5a:	f57f af7e 	bpl.w	800aa5a <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab5e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ab60:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800ab62:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab64:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ab68:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab6c:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800ab6e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ab72:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ab74:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800ab78:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800ab7c:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f47f aeb4 	bne.w	800a8ee <HAL_DMA_IRQHandler+0x3e6>
 800ab86:	e768      	b.n	800aa5a <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ab88:	0692      	lsls	r2, r2, #26
 800ab8a:	d403      	bmi.n	800ab94 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	f022 0204 	bic.w	r2, r2, #4
 800ab92:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800ab94:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f aea8 	bne.w	800a8ee <HAL_DMA_IRQHandler+0x3e6>
 800ab9e:	e75c      	b.n	800aa5a <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aba0:	f012 0220 	ands.w	r2, r2, #32
 800aba4:	d108      	bne.n	800abb8 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aba6:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800aba8:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800abaa:	f021 010a 	bic.w	r1, r1, #10
 800abae:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800abb0:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800abb4:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800abb8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f47f ae96 	bne.w	800a8ee <HAL_DMA_IRQHandler+0x3e6>
 800abc2:	e74a      	b.n	800aa5a <HAL_DMA_IRQHandler+0x552>

0800abc4 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop

0800abc8 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800abc8:	2800      	cmp	r0, #0
 800abca:	d036      	beq.n	800ac3a <HAL_DMA2D_Init+0x72>
{
 800abcc:	b570      	push	{r4, r5, r6, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800abce:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800abd2:	4604      	mov	r4, r0
 800abd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800abd8:	b353      	cbz	r3, 800ac30 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800abda:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800abdc:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800abde:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800abe0:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800abe2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800abe6:	4916      	ldr	r1, [pc, #88]	; (800ac40 <HAL_DMA2D_Init+0x78>)
 800abe8:	681e      	ldr	r6, [r3, #0]
 800abea:	6862      	ldr	r2, [r4, #4]
 800abec:	4031      	ands	r1, r6
 800abee:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800abf0:	4814      	ldr	r0, [pc, #80]	; (800ac44 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800abf2:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800abf4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800abf6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800abf8:	69a1      	ldr	r1, [r4, #24]
 800abfa:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800abfc:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800abfe:	4912      	ldr	r1, [pc, #72]	; (800ac48 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800ac00:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ac02:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800ac04:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ac06:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800ac08:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ac0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac0c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800ac0e:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ac10:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800ac12:	0552      	lsls	r2, r2, #21
 800ac14:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ac16:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800ac18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ac1a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800ac1e:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800ac20:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800ac24:	430a      	orrs	r2, r1
 800ac26:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ac28:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ac2a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800ac30:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800ac34:	f7ff ffc6 	bl	800abc4 <HAL_DMA2D_MspInit>
 800ac38:	e7cf      	b.n	800abda <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800ac3a:	2001      	movs	r0, #1
}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	fff8ffbf 	.word	0xfff8ffbf
 800ac44:	fffffef8 	.word	0xfffffef8
 800ac48:	ffff0000 	.word	0xffff0000

0800ac4c <HAL_DMA2D_MspDeInit>:
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop

0800ac50 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d06b      	beq.n	800ad2c <HAL_DMA2D_DeInit+0xdc>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800ac54:	4b40      	ldr	r3, [pc, #256]	; (800ad58 <HAL_DMA2D_DeInit+0x108>)
 800ac56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800ac5a:	b570      	push	{r4, r5, r6, lr}
 800ac5c:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800ac5e:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800ac60:	06d8      	lsls	r0, r3, #27
 800ac62:	d508      	bpl.n	800ac76 <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	07d9      	lsls	r1, r3, #31
 800ac68:	d418      	bmi.n	800ac9c <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800ac6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac6c:	069a      	lsls	r2, r3, #26
 800ac6e:	d45f      	bmi.n	800ad30 <HAL_DMA2D_DeInit+0xe0>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800ac70:	69e3      	ldr	r3, [r4, #28]
 800ac72:	069b      	lsls	r3, r3, #26
 800ac74:	d431      	bmi.n	800acda <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800ac76:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800ac78:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800ac7a:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800ac7c:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800ac7e:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800ac80:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800ac82:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800ac84:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800ac86:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800ac88:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800ac8a:	f7ff ffdf 	bl	800ac4c <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ac8e:	666e      	str	r6, [r5, #100]	; 0x64
  return HAL_OK;
 800ac90:	4630      	mov	r0, r6
  __HAL_UNLOCK(hdma2d);
 800ac92:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800ac96:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
}
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	f023 0305 	bic.w	r3, r3, #5
 800aca2:	f043 0304 	orr.w	r3, r3, #4
 800aca6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aca8:	f7fe f910 	bl	8008ecc <HAL_GetTick>
 800acac:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800acae:	e005      	b.n	800acbc <HAL_DMA2D_DeInit+0x6c>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800acb0:	f7fe f90c 	bl	8008ecc <HAL_GetTick>
 800acb4:	1b83      	subs	r3, r0, r6
 800acb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acba:	d82b      	bhi.n	800ad14 <HAL_DMA2D_DeInit+0xc4>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800acbc:	682c      	ldr	r4, [r5, #0]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f013 0301 	ands.w	r3, r3, #1
 800acc4:	d1f4      	bne.n	800acb0 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800acc6:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800acc8:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800acca:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800acce:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800acd0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800acd4:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  return HAL_OK;
 800acd8:	e7cd      	b.n	800ac76 <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	f043 0304 	orr.w	r3, r3, #4
 800ace0:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800ace2:	f7fe f8f3 	bl	8008ecc <HAL_GetTick>
 800ace6:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800ace8:	e005      	b.n	800acf6 <HAL_DMA2D_DeInit+0xa6>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800acea:	f7fe f8ef 	bl	8008ecc <HAL_GetTick>
 800acee:	1b80      	subs	r0, r0, r6
 800acf0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800acf4:	d80e      	bhi.n	800ad14 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800acf6:	69e3      	ldr	r3, [r4, #28]
 800acf8:	f013 0320 	ands.w	r3, r3, #32
 800acfc:	d1f5      	bne.n	800acea <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800acfe:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad00:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800ad08:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800ad0a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad0e:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  return HAL_OK;
 800ad12:	e7b0      	b.n	800ac76 <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ad14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ad16:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800ad18:	2100      	movs	r1, #0
            return HAL_ERROR;
 800ad1a:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ad1c:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800ad20:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ad24:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ad26:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800ad2c:	2001      	movs	r0, #1
}
 800ad2e:	4770      	bx	lr
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	f043 0304 	orr.w	r3, r3, #4
 800ad36:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ad38:	f7fe f8c8 	bl	8008ecc <HAL_GetTick>
 800ad3c:	4606      	mov	r6, r0
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800ad3e:	e005      	b.n	800ad4c <HAL_DMA2D_DeInit+0xfc>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800ad40:	f7fe f8c4 	bl	8008ecc <HAL_GetTick>
 800ad44:	1b80      	subs	r0, r0, r6
 800ad46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ad4a:	d8e3      	bhi.n	800ad14 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800ad4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4e:	f013 0320 	ands.w	r3, r3, #32
 800ad52:	d1f5      	bne.n	800ad40 <HAL_DMA2D_DeInit+0xf0>
 800ad54:	e7d3      	b.n	800acfe <HAL_DMA2D_DeInit+0xae>
 800ad56:	bf00      	nop
 800ad58:	58024400 	.word	0x58024400

0800ad5c <HAL_DMA2D_Start>:
{
 800ad5c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma2d);
 800ad5e:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800ad62:	2c01      	cmp	r4, #1
 800ad64:	d03a      	beq.n	800addc <HAL_DMA2D_Start+0x80>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800ad66:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma2d);
 800ad68:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad6a:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800ad6c:	9f04      	ldr	r7, [sp, #16]
  __HAL_LOCK(hdma2d);
 800ad6e:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad72:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800ad76:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ad7a:	6c65      	ldr	r5, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800ad7c:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800ad7e:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800ad82:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800ad86:	ea43 0305 	orr.w	r3, r3, r5
 800ad8a:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800ad8c:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800ad8e:	d00a      	beq.n	800ada6 <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800ad90:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800ad94:	d025      	beq.n	800ade2 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800ad96:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800ad98:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800ad9a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800ad9c:	f043 0301 	orr.w	r3, r3, #1
 800ada0:	6023      	str	r3, [r4, #0]
}
 800ada2:	bcf0      	pop	{r4, r5, r6, r7}
 800ada4:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800ada6:	6883      	ldr	r3, [r0, #8]
 800ada8:	b1b3      	cbz	r3, 800add8 <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d026      	beq.n	800adfc <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800adae:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800adb0:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800adb4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800adb8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800adba:	d022      	beq.n	800ae02 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800adbc:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800adbe:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800adc2:	d010      	beq.n	800ade6 <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800adc4:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800adc6:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800adc8:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800adca:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800adcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800add0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800add4:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800add8:	63a1      	str	r1, [r4, #56]	; 0x38
 800adda:	e7dd      	b.n	800ad98 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800addc:	2002      	movs	r0, #2
}
 800adde:	bcf0      	pop	{r4, r5, r6, r7}
 800ade0:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800ade2:	6161      	str	r1, [r4, #20]
 800ade4:	e7d8      	b.n	800ad98 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800ade6:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 800ade8:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800adea:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 800adec:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800adee:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800adf2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800adf6:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800adfa:	e7ed      	b.n	800add8 <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800adfc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800ae00:	e7ea      	b.n	800add8 <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800ae02:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 800ae04:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800ae06:	02c9      	lsls	r1, r1, #11
 800ae08:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800ae0c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800ae10:	e7e2      	b.n	800add8 <HAL_DMA2D_Start+0x7c>
 800ae12:	bf00      	nop

0800ae14 <HAL_DMA2D_PollForTransfer>:
{
 800ae14:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800ae16:	2300      	movs	r3, #0
{
 800ae18:	b082      	sub	sp, #8
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800ae1e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ae20:	6803      	ldr	r3, [r0, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	07d6      	lsls	r6, r2, #31
 800ae26:	d40f      	bmi.n	800ae48 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800ae28:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800ae2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ae2c:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800ae2e:	0691      	lsls	r1, r2, #26
 800ae30:	d432      	bmi.n	800ae98 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800ae32:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800ae34:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae36:	2101      	movs	r1, #1
  return HAL_OK;
 800ae38:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800ae3a:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800ae3c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae40:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
}
 800ae44:	b002      	add	sp, #8
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800ae48:	f7fe f840 	bl	8008ecc <HAL_GetTick>
 800ae4c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ae4e:	1c6a      	adds	r2, r5, #1
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	d147      	bne.n	800aee4 <HAL_DMA2D_PollForTransfer+0xd0>
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	0796      	lsls	r6, r2, #30
 800ae58:	d4e6      	bmi.n	800ae28 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800ae5e:	9a01      	ldr	r2, [sp, #4]
 800ae60:	f012 0f21 	tst.w	r2, #33	; 0x21
 800ae64:	d0f6      	beq.n	800ae54 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ae66:	9a01      	ldr	r2, [sp, #4]
 800ae68:	0690      	lsls	r0, r2, #26
 800ae6a:	d503      	bpl.n	800ae74 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ae6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae6e:	f042 0202 	orr.w	r2, r2, #2
 800ae72:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ae74:	9a01      	ldr	r2, [sp, #4]
 800ae76:	07d1      	lsls	r1, r2, #31
 800ae78:	d503      	bpl.n	800ae82 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ae7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae7c:	f042 0201 	orr.w	r2, r2, #1
 800ae80:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ae82:	2521      	movs	r5, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800ae84:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800ae86:	2200      	movs	r2, #0
        return HAL_ERROR;
 800ae88:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ae8a:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800ae8c:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800ae90:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800ae94:	b002      	add	sp, #8
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800ae98:	f7fe f818 	bl	8008ecc <HAL_GetTick>
 800ae9c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800ae9e:	1c68      	adds	r0, r5, #1
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	d13b      	bne.n	800af1c <HAL_DMA2D_PollForTransfer+0x108>
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	06d1      	lsls	r1, r2, #27
 800aea8:	d4c3      	bmi.n	800ae32 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800aeae:	9a01      	ldr	r2, [sp, #4]
 800aeb0:	f012 0f29 	tst.w	r2, #41	; 0x29
 800aeb4:	d0f6      	beq.n	800aea4 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800aeb6:	9a01      	ldr	r2, [sp, #4]
 800aeb8:	0712      	lsls	r2, r2, #28
 800aeba:	d503      	bpl.n	800aec4 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800aebc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aebe:	f042 0204 	orr.w	r2, r2, #4
 800aec2:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800aec4:	9a01      	ldr	r2, [sp, #4]
 800aec6:	0696      	lsls	r6, r2, #26
 800aec8:	d503      	bpl.n	800aed2 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aeca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aecc:	f042 0202 	orr.w	r2, r2, #2
 800aed0:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800aed2:	9a01      	ldr	r2, [sp, #4]
 800aed4:	07d5      	lsls	r5, r2, #31
 800aed6:	d503      	bpl.n	800aee0 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800aed8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeda:	f042 0201 	orr.w	r2, r2, #1
 800aede:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800aee0:	2529      	movs	r5, #41	; 0x29
 800aee2:	e7cf      	b.n	800ae84 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	0790      	lsls	r0, r2, #30
 800aee8:	d49e      	bmi.n	800ae28 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800aeee:	9a01      	ldr	r2, [sp, #4]
 800aef0:	f012 0f21 	tst.w	r2, #33	; 0x21
 800aef4:	d1b7      	bne.n	800ae66 <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800aef6:	f7fd ffe9 	bl	8008ecc <HAL_GetTick>
 800aefa:	1b80      	subs	r0, r0, r6
 800aefc:	42a8      	cmp	r0, r5
 800aefe:	d801      	bhi.n	800af04 <HAL_DMA2D_PollForTransfer+0xf0>
 800af00:	2d00      	cmp	r5, #0
 800af02:	d1a4      	bne.n	800ae4e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800af04:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800af06:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800af08:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800af0a:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800af0e:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800af10:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800af14:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800af16:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800af1a:	e793      	b.n	800ae44 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	06d2      	lsls	r2, r2, #27
 800af20:	d487      	bmi.n	800ae32 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800af26:	9a01      	ldr	r2, [sp, #4]
 800af28:	f012 0f29 	tst.w	r2, #41	; 0x29
 800af2c:	d1c3      	bne.n	800aeb6 <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800af2e:	f7fd ffcd 	bl	8008ecc <HAL_GetTick>
 800af32:	1b80      	subs	r0, r0, r6
 800af34:	42a8      	cmp	r0, r5
 800af36:	d8e5      	bhi.n	800af04 <HAL_DMA2D_PollForTransfer+0xf0>
 800af38:	2d00      	cmp	r5, #0
 800af3a:	d1b0      	bne.n	800ae9e <HAL_DMA2D_PollForTransfer+0x8a>
 800af3c:	e7e2      	b.n	800af04 <HAL_DMA2D_PollForTransfer+0xf0>
 800af3e:	bf00      	nop

0800af40 <HAL_DMA2D_LineEventCallback>:
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop

0800af44 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop

0800af48 <HAL_DMA2D_IRQHandler>:
{
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800af4a:	6803      	ldr	r3, [r0, #0]
{
 800af4c:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800af4e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800af50:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800af52:	07e9      	lsls	r1, r5, #31
 800af54:	d501      	bpl.n	800af5a <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800af56:	05f2      	lsls	r2, r6, #23
 800af58:	d456      	bmi.n	800b008 <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800af5a:	06af      	lsls	r7, r5, #26
 800af5c:	d501      	bpl.n	800af62 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800af5e:	04b0      	lsls	r0, r6, #18
 800af60:	d43b      	bmi.n	800afda <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800af62:	0729      	lsls	r1, r5, #28
 800af64:	d501      	bpl.n	800af6a <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800af66:	0532      	lsls	r2, r6, #20
 800af68:	d421      	bmi.n	800afae <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800af6a:	076b      	lsls	r3, r5, #29
 800af6c:	d501      	bpl.n	800af72 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800af6e:	0577      	lsls	r7, r6, #21
 800af70:	d475      	bmi.n	800b05e <HAL_DMA2D_IRQHandler+0x116>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800af72:	07a8      	lsls	r0, r5, #30
 800af74:	d501      	bpl.n	800af7a <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800af76:	05b1      	lsls	r1, r6, #22
 800af78:	d404      	bmi.n	800af84 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800af7a:	06ea      	lsls	r2, r5, #27
 800af7c:	d501      	bpl.n	800af82 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800af7e:	04f3      	lsls	r3, r6, #19
 800af80:	d45a      	bmi.n	800b038 <HAL_DMA2D_IRQHandler+0xf0>
}
 800af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800af84:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800af86:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800af88:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800af8a:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af92:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800af94:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 800af96:	6a23      	ldr	r3, [r4, #32]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800af98:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800af9a:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800af9e:	6662      	str	r2, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800afa0:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferCpltCallback != NULL)
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d0e8      	beq.n	800af7a <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800afa8:	4620      	mov	r0, r4
 800afaa:	4798      	blx	r3
 800afac:	e7e5      	b.n	800af7a <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800afae:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800afb0:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800afb2:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afba:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800afbc:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800afbe:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800afc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800afc2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800afc6:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 800afc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800afca:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800afcc:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d0ca      	beq.n	800af6a <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800afd4:	4620      	mov	r0, r4
 800afd6:	4790      	blx	r2
 800afd8:	e7c7      	b.n	800af6a <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800afda:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800afdc:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800afde:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe6:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800afe8:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800afea:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800afec:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800afee:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aff2:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 800aff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aff8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800affa:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800affe:	2a00      	cmp	r2, #0
 800b000:	d0af      	beq.n	800af62 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800b002:	4620      	mov	r0, r4
 800b004:	4790      	blx	r2
 800b006:	e7ac      	b.n	800af62 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b008:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b00a:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b00e:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800b012:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 800b018:	6a41      	ldr	r1, [r0, #36]	; 0x24
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b01a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b01c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800b01e:	ea42 020e 	orr.w	r2, r2, lr
 800b022:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b024:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b028:	f880 c061 	strb.w	ip, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800b02c:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800b030:	2900      	cmp	r1, #0
 800b032:	d092      	beq.n	800af5a <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800b034:	4788      	blx	r1
 800b036:	e790      	b.n	800af5a <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b038:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b03a:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b03c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800b03e:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b040:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b042:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b044:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b048:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b04a:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b04c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800b04e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b052:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b054:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b058:	f7ff ff74 	bl	800af44 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b05e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b060:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b062:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b06a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b06c:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b06e:	f7ff ff67 	bl	800af40 <HAL_DMA2D_LineEventCallback>
 800b072:	e77e      	b.n	800af72 <HAL_DMA2D_IRQHandler+0x2a>

0800b074 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800b074:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800b078:	2a01      	cmp	r2, #1
 800b07a:	d063      	beq.n	800b144 <HAL_DMA2D_ConfigLayer+0xd0>
 800b07c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800b07e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b082:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800b084:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800b088:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800b08a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b08c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800b090:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800b094:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800b096:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800b098:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800b09a:	0512      	lsls	r2, r2, #20
 800b09c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800b09e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b0a2:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800b0a6:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b0a8:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800b0aa:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b0ae:	d922      	bls.n	800b0f6 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800b0b0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b0b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800b0b6:	b981      	cbnz	r1, 800b0da <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b0b8:	6818      	ldr	r0, [r3, #0]
 800b0ba:	4923      	ldr	r1, [pc, #140]	; (800b148 <HAL_DMA2D_ConfigLayer+0xd4>)
 800b0bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b0be:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b0c0:	4029      	ands	r1, r5
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b0c6:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800b0c8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b0ca:	2101      	movs	r1, #1
  return HAL_OK;
 800b0cc:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b0ce:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800b0d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800b0d6:	bc70      	pop	{r4, r5, r6}
 800b0d8:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800b0da:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b0dc:	681c      	ldr	r4, [r3, #0]
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800b0de:	d129      	bne.n	800b134 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b0e0:	69e6      	ldr	r6, [r4, #28]
 800b0e2:	491a      	ldr	r1, [pc, #104]	; (800b14c <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800b0e4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b0e6:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b0e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b0ea:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b0f2:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b0f4:	e7e8      	b.n	800b0c8 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800b0f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b0f8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800b0fc:	4322      	orrs	r2, r4
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800b0fe:	b161      	cbz	r1, 800b11a <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	4c11      	ldr	r4, [pc, #68]	; (800b148 <HAL_DMA2D_ConfigLayer+0xd4>)
 800b104:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800b106:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b108:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b10a:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800b10c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b110:	4322      	orrs	r2, r4
 800b112:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b114:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800b116:	620d      	str	r5, [r1, #32]
 800b118:	e7d6      	b.n	800b0c8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b11a:	6819      	ldr	r1, [r3, #0]
 800b11c:	4c0a      	ldr	r4, [pc, #40]	; (800b148 <HAL_DMA2D_ConfigLayer+0xd4>)
 800b11e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800b120:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b122:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b124:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800b126:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b12a:	4322      	orrs	r2, r4
 800b12c:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b12e:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800b130:	6288      	str	r0, [r1, #40]	; 0x28
 800b132:	e7c9      	b.n	800b0c8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b134:	69e5      	ldr	r5, [r4, #28]
 800b136:	4904      	ldr	r1, [pc, #16]	; (800b148 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b138:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b13a:	4029      	ands	r1, r5
 800b13c:	430a      	orrs	r2, r1
 800b13e:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b140:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b142:	e7c1      	b.n	800b0c8 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 800b144:	2002      	movs	r0, #2
}
 800b146:	4770      	bx	lr
 800b148:	00ccfff0 	.word	0x00ccfff0
 800b14c:	00c0fff0 	.word	0x00c0fff0

0800b150 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop

0800b154 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800b154:	2800      	cmp	r0, #0
 800b156:	f000 80b3 	beq.w	800b2c0 <HAL_DSI_Init+0x16c>
{
 800b15a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800b15c:	7c43      	ldrb	r3, [r0, #17]
{
 800b15e:	b083      	sub	sp, #12
 800b160:	460d      	mov	r5, r1
 800b162:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 80a8 	beq.w	800b2ba <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 800b16a:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800b16c:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800b16e:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800b170:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800b172:	9200      	str	r2, [sp, #0]
 800b174:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800b178:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b17c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800b180:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800b18c:	f7fd fe9e 	bl	8008ecc <HAL_GetTick>
 800b190:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b192:	e006      	b.n	800b1a2 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b194:	f7fd fe9a 	bl	8008ecc <HAL_GetTick>
 800b198:	1b83      	subs	r3, r0, r6
 800b19a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b19e:	f200 8089 	bhi.w	800b2b4 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b1a8:	04d1      	lsls	r1, r2, #19
 800b1aa:	d5f3      	bpl.n	800b194 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800b1ac:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b1ae:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b1b0:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800b1b4:	682e      	ldr	r6, [r5, #0]
 800b1b6:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b1b8:	4942      	ldr	r1, [pc, #264]	; (800b2c4 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800b1ba:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800b1be:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b1c0:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800b1c2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b1c6:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800b1ca:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b1d4:	9001      	str	r0, [sp, #4]
 800b1d6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800b1e2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800b1ee:	f7fd fe6d 	bl	8008ecc <HAL_GetTick>
 800b1f2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b1f4:	e005      	b.n	800b202 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b1f6:	f7fd fe69 	bl	8008ecc <HAL_GetTick>
 800b1fa:	1b80      	subs	r0, r0, r6
 800b1fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b200:	d858      	bhi.n	800b2b4 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b208:	05d2      	lsls	r2, r2, #23
 800b20a:	d5f4      	bpl.n	800b1f6 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b20c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b210:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b214:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 800b216:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b218:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b21c:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b21e:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b222:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800b226:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b22a:	f022 0203 	bic.w	r2, r2, #3
 800b22e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b232:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b236:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b238:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b23a:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b23c:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b240:	bf38      	it	cc
 800b242:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b244:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b248:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b24c:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b24e:	f020 0003 	bic.w	r0, r0, #3
 800b252:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b256:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b25a:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b25c:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b25e:	682d      	ldr	r5, [r5, #0]
 800b260:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b268:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b26a:	fb0c f505 	mul.w	r5, ip, r5
 800b26e:	4a16      	ldr	r2, [pc, #88]	; (800b2c8 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b270:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b274:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b278:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b27a:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b27c:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b27e:	ea46 060e 	orr.w	r6, r6, lr
 800b282:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 800b284:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800b286:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b28a:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800b28e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800b292:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 800b296:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800b298:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 800b29c:	432a      	orrs	r2, r5
 800b29e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800b2a2:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b2a6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800b2aa:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800b2ac:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800b2ae:	7466      	strb	r6, [r4, #17]
}
 800b2b0:	b003      	add	sp, #12
 800b2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800b2b4:	2003      	movs	r0, #3
}
 800b2b6:	b003      	add	sp, #12
 800b2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 800b2ba:	f7ff ff49 	bl	800b150 <HAL_DSI_MspInit>
 800b2be:	e754      	b.n	800b16a <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800b2c0:	2001      	movs	r0, #1
}
 800b2c2:	4770      	bx	lr
 800b2c4:	fffc8603 	.word	0xfffc8603
 800b2c8:	003d0900 	.word	0x003d0900

0800b2cc <HAL_DSI_TearingEffectCallback>:
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop

0800b2d0 <HAL_DSI_EndOfRefreshCallback>:
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop

0800b2d4 <HAL_DSI_ErrorCallback>:
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop

0800b2d8 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b2d8:	6803      	ldr	r3, [r0, #0]
 800b2da:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b2de:	07d1      	lsls	r1, r2, #31
{
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b2e4:	d503      	bpl.n	800b2ee <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800b2e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b2ea:	07d2      	lsls	r2, r2, #31
 800b2ec:	d462      	bmi.n	800b3b4 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800b2ee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b2f2:	0791      	lsls	r1, r2, #30
 800b2f4:	d503      	bpl.n	800b2fe <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800b2f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b2fa:	0792      	lsls	r2, r2, #30
 800b2fc:	d44f      	bmi.n	800b39e <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800b2fe:	69a3      	ldr	r3, [r4, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d04b      	beq.n	800b39c <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800b304:	6821      	ldr	r1, [r4, #0]
 800b306:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b30a:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800b30e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b312:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b314:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b318:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b31a:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b31c:	b119      	cbz	r1, 800b326 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800b31e:	6961      	ldr	r1, [r4, #20]
 800b320:	f041 0101 	orr.w	r1, r1, #1
 800b324:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800b326:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800b32a:	d003      	beq.n	800b334 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800b32c:	6962      	ldr	r2, [r4, #20]
 800b32e:	f042 0202 	orr.w	r2, r2, #2
 800b332:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800b334:	07d8      	lsls	r0, r3, #31
 800b336:	d503      	bpl.n	800b340 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800b338:	6962      	ldr	r2, [r4, #20]
 800b33a:	f042 0204 	orr.w	r2, r2, #4
 800b33e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800b340:	0799      	lsls	r1, r3, #30
 800b342:	d503      	bpl.n	800b34c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800b344:	6962      	ldr	r2, [r4, #20]
 800b346:	f042 0208 	orr.w	r2, r2, #8
 800b34a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800b34c:	f013 0f0c 	tst.w	r3, #12
 800b350:	d003      	beq.n	800b35a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800b352:	6962      	ldr	r2, [r4, #20]
 800b354:	f042 0210 	orr.w	r2, r2, #16
 800b358:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800b35a:	06da      	lsls	r2, r3, #27
 800b35c:	d503      	bpl.n	800b366 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800b35e:	6962      	ldr	r2, [r4, #20]
 800b360:	f042 0220 	orr.w	r2, r2, #32
 800b364:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800b366:	0698      	lsls	r0, r3, #26
 800b368:	d503      	bpl.n	800b372 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800b36a:	6962      	ldr	r2, [r4, #20]
 800b36c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b370:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800b372:	0659      	lsls	r1, r3, #25
 800b374:	d503      	bpl.n	800b37e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800b376:	6962      	ldr	r2, [r4, #20]
 800b378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b37c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800b37e:	061a      	lsls	r2, r3, #24
 800b380:	d503      	bpl.n	800b38a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800b382:	6962      	ldr	r2, [r4, #20]
 800b384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b388:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800b38a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800b38e:	d003      	beq.n	800b398 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800b390:	6963      	ldr	r3, [r4, #20]
 800b392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b396:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800b398:	6963      	ldr	r3, [r4, #20]
 800b39a:	b93b      	cbnz	r3, 800b3ac <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800b39c:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b39e:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b3a0:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b3a2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b3a6:	f7ff ff93 	bl	800b2d0 <HAL_DSI_EndOfRefreshCallback>
 800b3aa:	e7a8      	b.n	800b2fe <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7ff ff91 	bl	800b2d4 <HAL_DSI_ErrorCallback>
}
 800b3b2:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800b3ba:	f7ff ff87 	bl	800b2cc <HAL_DSI_TearingEffectCallback>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	e795      	b.n	800b2ee <HAL_DSI_IRQHandler+0x16>
 800b3c2:	bf00      	nop

0800b3c4 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b3c4:	7c03      	ldrb	r3, [r0, #16]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	f000 8113 	beq.w	800b5f2 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800b3cc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800b3ce:	2201      	movs	r2, #1
{
 800b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800b3d4:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 800b3d6:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800b3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800b3da:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800b3dc:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800b3e0:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800b3e4:	4e84      	ldr	r6, [pc, #528]	; (800b5f8 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800b3e6:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800b3e8:	4d84      	ldr	r5, [pc, #528]	; (800b5fc <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800b3ea:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800b3ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800b3f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b3f4:	f022 0201 	bic.w	r2, r2, #1
 800b3f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800b3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3fe:	f022 0203 	bic.w	r2, r2, #3
 800b402:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800b404:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800b406:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800b40a:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800b40e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800b410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b412:	ea06 0602 	and.w	r6, r6, r2
 800b416:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800b418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b41a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800b41e:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800b422:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800b424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b426:	ea02 0205 	and.w	r2, r2, r5
 800b42a:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800b42c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800b42e:	ea47 0708 	orr.w	r7, r7, r8
 800b432:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800b434:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800b436:	ea06 0605 	and.w	r6, r6, r5
 800b43a:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800b43c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800b43e:	ea45 050e 	orr.w	r5, r5, lr
 800b442:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b444:	68dd      	ldr	r5, [r3, #12]
 800b446:	f025 0503 	bic.w	r5, r5, #3
 800b44a:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	ea42 020c 	orr.w	r2, r2, ip
 800b452:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b454:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800b456:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b458:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800b45c:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b460:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800b462:	ea42 0206 	orr.w	r2, r2, r6
 800b466:	695d      	ldr	r5, [r3, #20]
 800b468:	ea42 0207 	orr.w	r2, r2, r7
 800b46c:	ea42 0205 	orr.w	r2, r2, r5
 800b470:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b472:	691a      	ldr	r2, [r3, #16]
 800b474:	f022 020f 	bic.w	r2, r2, #15
 800b478:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800b47a:	691a      	ldr	r2, [r3, #16]
 800b47c:	ea42 0200 	orr.w	r2, r2, r0
 800b480:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b482:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b486:	f022 020e 	bic.w	r2, r2, #14
 800b48a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800b48e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b492:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800b496:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800b49a:	d107      	bne.n	800b4ac <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800b49c:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800b49e:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800b4a0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800b4a4:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	432a      	orrs	r2, r5
 800b4aa:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800b4ac:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b4ae:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800b4b0:	4a53      	ldr	r2, [pc, #332]	; (800b600 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800b4b2:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800b4b4:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b4b6:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800b4ba:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800b4be:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800b4c0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800b4c2:	4f50      	ldr	r7, [pc, #320]	; (800b604 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800b4c4:	4305      	orrs	r5, r0
 800b4c6:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800b4c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b4ca:	4010      	ands	r0, r2
 800b4cc:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b4ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800b4d0:	484d      	ldr	r0, [pc, #308]	; (800b608 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b4d2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800b4d6:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800b4da:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800b4dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4de:	4017      	ands	r7, r2
 800b4e0:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800b4e2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800b4e4:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800b4e8:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800b4ec:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800b4ee:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800b4f0:	4005      	ands	r5, r0
 800b4f2:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800b4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4f6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800b4fa:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800b4fe:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800b500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b502:	4002      	ands	r2, r0
 800b504:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800b506:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800b508:	4a3b      	ldr	r2, [pc, #236]	; (800b5f8 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800b50a:	ea47 070e 	orr.w	r7, r7, lr
 800b50e:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800b510:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800b512:	4007      	ands	r7, r0

  return HAL_OK;
 800b514:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800b516:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800b518:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800b51a:	ea45 050c 	orr.w	r5, r5, ip
 800b51e:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800b520:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800b522:	402a      	ands	r2, r5
 800b524:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800b526:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800b528:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800b52a:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800b52e:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800b530:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800b534:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800b536:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800b538:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 800b53c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800b53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b540:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800b544:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800b548:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800b54a:	699f      	ldr	r7, [r3, #24]
 800b54c:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 800b550:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800b552:	699d      	ldr	r5, [r3, #24]
 800b554:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800b558:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800b55c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800b55e:	699d      	ldr	r5, [r3, #24]
 800b560:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800b564:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800b566:	699a      	ldr	r2, [r3, #24]
 800b568:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800b56c:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800b570:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800b572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b578:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800b57a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800b57c:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800b580:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800b584:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800b586:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800b588:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800b58c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800b58e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800b590:	ea45 050e 	orr.w	r5, r5, lr
 800b594:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800b596:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800b598:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800b59c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800b59e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5a0:	ea42 020c 	orr.w	r2, r2, ip
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800b5a6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800b5a8:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800b5aa:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800b5ae:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800b5b2:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800b5b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5b6:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800b5b8:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800b5be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800b5c6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800b5c8:	ea45 050e 	orr.w	r5, r5, lr
 800b5cc:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800b5ce:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800b5d0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800b5d4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800b5d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b5d8:	ea41 010c 	orr.w	r1, r1, ip
 800b5dc:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800b5de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b5e0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b5e4:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800b5e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5e8:	433a      	orrs	r2, r7
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800b5ec:	7426      	strb	r6, [r4, #16]
}
 800b5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 800b5f2:	2002      	movs	r0, #2
}
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	ffffc000 	.word	0xffffc000
 800b5fc:	ffffe000 	.word	0xffffe000
 800b600:	fffff000 	.word	0xfffff000
 800b604:	ffff8000 	.word	0xffff8000
 800b608:	fffffc00 	.word	0xfffffc00

0800b60c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b60c:	7c02      	ldrb	r2, [r0, #16]
 800b60e:	2a01      	cmp	r2, #1
 800b610:	d00e      	beq.n	800b630 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b612:	6802      	ldr	r2, [r0, #0]
 800b614:	4603      	mov	r3, r0
{
 800b616:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b618:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b61a:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b61c:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 800b620:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b622:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b624:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800b626:	4321      	orrs	r1, r4
 800b628:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800b62a:	741d      	strb	r5, [r3, #16]
}
 800b62c:	bc30      	pop	{r4, r5}
 800b62e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b630:	2002      	movs	r0, #2
}
 800b632:	4770      	bx	lr

0800b634 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b634:	7c03      	ldrb	r3, [r0, #16]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d021      	beq.n	800b67e <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800b63a:	6803      	ldr	r3, [r0, #0]
 800b63c:	2100      	movs	r1, #0
 800b63e:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800b640:	4608      	mov	r0, r1
{
 800b642:	b410      	push	{r4}
 800b644:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800b646:	9100      	str	r1, [sp, #0]
 800b648:	685c      	ldr	r4, [r3, #4]
 800b64a:	f044 0401 	orr.w	r4, r4, #1
 800b64e:	605c      	str	r4, [r3, #4]
 800b650:	685c      	ldr	r4, [r3, #4]
 800b652:	f004 0401 	and.w	r4, r4, #1
 800b656:	9400      	str	r4, [sp, #0]
 800b658:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b65a:	9101      	str	r1, [sp, #4]
 800b65c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800b660:	f044 0408 	orr.w	r4, r4, #8
 800b664:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 800b668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800b66c:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b66e:	f003 0308 	and.w	r3, r3, #8
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	9b01      	ldr	r3, [sp, #4]
}
 800b676:	b003      	add	sp, #12
 800b678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b67c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b67e:	2002      	movs	r0, #2
}
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop

0800b684 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b68a:	7c03      	ldrb	r3, [r0, #16]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d022      	beq.n	800b6d6 <HAL_DSI_ShortWrite+0x52>
 800b690:	2301      	movs	r3, #1
 800b692:	4604      	mov	r4, r0
 800b694:	460f      	mov	r7, r1
 800b696:	4615      	mov	r5, r2
 800b698:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b69a:	f7fd fc17 	bl	8008ecc <HAL_GetTick>
 800b69e:	4681      	mov	r9, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b6a0:	e006      	b.n	800b6b0 <HAL_DSI_ShortWrite+0x2c>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800b6a2:	f7fd fc13 	bl	8008ecc <HAL_GetTick>
 800b6a6:	eba0 0609 	sub.w	r6, r0, r9
 800b6aa:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 800b6ae:	d810      	bhi.n	800b6d2 <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b6b0:	6826      	ldr	r6, [r4, #0]
 800b6b2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b6b4:	07db      	lsls	r3, r3, #31
 800b6b6:	d5f4      	bpl.n	800b6a2 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b6b8:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
 800b6bc:	9a08      	ldr	r2, [sp, #32]
  return HAL_OK;
 800b6be:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b6c0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800b6c4:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800b6c8:	66f2      	str	r2, [r6, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	7423      	strb	r3, [r4, #16]

  return status;
}
 800b6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800b6d2:	2003      	movs	r0, #3
 800b6d4:	e7f9      	b.n	800b6ca <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 800b6d6:	2002      	movs	r0, #2
}
 800b6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b6dc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800b6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	4699      	mov	r9, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b6e2:	7c03      	ldrb	r3, [r0, #16]
{
 800b6e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  __HAL_LOCK(hdsi);
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d061      	beq.n	800b7ae <HAL_DSI_LongWrite+0xd2>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	468a      	mov	sl, r1
 800b6f0:	4693      	mov	fp, r2
 800b6f2:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6f4:	f7fd fbea 	bl	8008ecc <HAL_GetTick>
 800b6f8:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b6fa:	e006      	b.n	800b70a <HAL_DSI_LongWrite+0x2e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b6fc:	f7fd fbe6 	bl	8008ecc <HAL_GetTick>
 800b700:	eba0 0508 	sub.w	r5, r0, r8
 800b704:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800b708:	d84d      	bhi.n	800b7a6 <HAL_DSI_LongWrite+0xca>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800b70e:	f014 0401 	ands.w	r4, r4, #1
 800b712:	d0f3      	beq.n	800b6fc <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b714:	464b      	mov	r3, r9
 800b716:	2b03      	cmp	r3, #3
 800b718:	bf28      	it	cs
 800b71a:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 800b71c:	f1b9 0f00 	cmp.w	r9, #0
 800b720:	d048      	beq.n	800b7b4 <HAL_DSI_LongWrite+0xd8>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b722:	7831      	ldrb	r1, [r6, #0]
  for (count = 0U; count < nbBytes; count++)
 800b724:	f1b9 0f01 	cmp.w	r9, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b728:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b72a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800b72e:	d908      	bls.n	800b742 <HAL_DSI_LongWrite+0x66>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b730:	7870      	ldrb	r0, [r6, #1]
  for (count = 0U; count < nbBytes; count++)
 800b732:	f1b9 0f02 	cmp.w	r9, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b736:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800b73a:	d902      	bls.n	800b742 <HAL_DSI_LongWrite+0x66>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b73c:	78b0      	ldrb	r0, [r6, #2]
 800b73e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800b742:	441e      	add	r6, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b744:	ebb9 0303 	subs.w	r3, r9, r3
  hdsi->Instance->GPDR = fifoword;
 800b748:	6711      	str	r1, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800b74a:	d017      	beq.n	800b77c <HAL_DSI_LongWrite+0xa0>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	4618      	mov	r0, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b750:	7831      	ldrb	r1, [r6, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b752:	bf28      	it	cs
 800b754:	2004      	movcs	r0, #4
    for (count = 0U; count < nbBytes; count++)
 800b756:	2b01      	cmp	r3, #1
 800b758:	d00c      	beq.n	800b774 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b75a:	7874      	ldrb	r4, [r6, #1]
    for (count = 0U; count < nbBytes; count++)
 800b75c:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b75e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    for (count = 0U; count < nbBytes; count++)
 800b762:	d007      	beq.n	800b774 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b764:	78b4      	ldrb	r4, [r6, #2]
    for (count = 0U; count < nbBytes; count++)
 800b766:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b768:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    for (count = 0U; count < nbBytes; count++)
 800b76c:	d902      	bls.n	800b774 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b76e:	78f4      	ldrb	r4, [r6, #3]
 800b770:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
  while (uicounter != 0U)
 800b774:	1a1b      	subs	r3, r3, r0
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800b776:	4406      	add	r6, r0
    hdsi->Instance->GPDR = fifoword;
 800b778:	6711      	str	r1, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800b77a:	d1e7      	bne.n	800b74c <HAL_DSI_LongWrite+0x70>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b77c:	f109 0901 	add.w	r9, r9, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b780:	ea4b 138a 	orr.w	r3, fp, sl, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b784:	2100      	movs	r1, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b786:	ea4f 2a09 	mov.w	sl, r9, lsl #8

  return HAL_OK;
 800b78a:	4608      	mov	r0, r1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b78c:	46d1      	mov	r9, sl
 800b78e:	fa1f fa8a 	uxth.w	sl, sl
 800b792:	f409 097f 	and.w	r9, r9, #16711680	; 0xff0000
 800b796:	ea43 030a 	orr.w	r3, r3, sl
 800b79a:	ea43 0309 	orr.w	r3, r3, r9
 800b79e:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800b7a0:	7439      	strb	r1, [r7, #16]
}
 800b7a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_TIMEOUT;
 800b7a6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b7a8:	743c      	strb	r4, [r7, #16]
}
 800b7aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hdsi);
 800b7ae:	2002      	movs	r0, #2
}
 800b7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hdsi->Instance->GPDR = fifoword;
 800b7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b6:	6713      	str	r3, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800b7b8:	e7e0      	b.n	800b77c <HAL_DSI_LongWrite+0xa0>
 800b7ba:	bf00      	nop

0800b7bc <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800b7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c0:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b7c2:	7c03      	ldrb	r3, [r0, #16]
{
 800b7c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	f000 8088 	beq.w	800b8de <HAL_DSI_Read+0x122>
 800b7ce:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800b7d0:	2c02      	cmp	r4, #2
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	460f      	mov	r7, r1
 800b7d6:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800b7d8:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800b7da:	d810      	bhi.n	800b7fe <HAL_DSI_Read+0x42>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b7dc:	f1b9 0f06 	cmp.w	r9, #6
 800b7e0:	d02b      	beq.n	800b83a <HAL_DSI_Read+0x7e>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800b7e2:	f1b9 0f04 	cmp.w	r9, #4
 800b7e6:	d066      	beq.n	800b8b6 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800b7e8:	f1b9 0f14 	cmp.w	r9, #20
 800b7ec:	d07a      	beq.n	800b8e4 <HAL_DSI_Read+0x128>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800b7ee:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800b7f2:	d066      	beq.n	800b8c2 <HAL_DSI_Read+0x106>
      __HAL_UNLOCK(hdsi);
 800b7f4:	2300      	movs	r3, #0
      return HAL_ERROR;
 800b7f6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800b7f8:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800b7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800b7fe:	f7fd fb65 	bl	8008ecc <HAL_GetTick>
 800b802:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b804:	e006      	b.n	800b814 <HAL_DSI_Read+0x58>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800b806:	f7fd fb61 	bl	8008ecc <HAL_GetTick>
 800b80a:	eba0 0008 	sub.w	r0, r0, r8
 800b80e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b812:	d8ef      	bhi.n	800b7f4 <HAL_DSI_Read+0x38>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b818:	07d1      	lsls	r1, r2, #31
 800b81a:	d5f4      	bpl.n	800b806 <HAL_DSI_Read+0x4a>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b81c:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b81e:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b822:	4611      	mov	r1, r2
 800b824:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800b828:	b289      	uxth	r1, r1
 800b82a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800b82e:	ea42 0201 	orr.w	r2, r2, r1
 800b832:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800b836:	66da      	str	r2, [r3, #108]	; 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b838:	d1d3      	bne.n	800b7e2 <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800b83c:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b83e:	021b      	lsls	r3, r3, #8
 800b840:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 800b844:	f047 0706 	orr.w	r7, r7, #6
 800b848:	66d7      	str	r7, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800b84a:	f7fd fb3f 	bl	8008ecc <HAL_GetTick>
 800b84e:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 800b850:	e005      	b.n	800b85e <HAL_DSI_Read+0xa2>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b852:	f7fd fb3b 	bl	8008ecc <HAL_GetTick>
 800b856:	1bc1      	subs	r1, r0, r7
 800b858:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800b85c:	d822      	bhi.n	800b8a4 <HAL_DSI_Read+0xe8>
  while (((int32_t)(datasize)) > 0)
 800b85e:	2c00      	cmp	r4, #0
 800b860:	dd25      	ble.n	800b8ae <HAL_DSI_Read+0xf2>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800b866:	06ca      	lsls	r2, r1, #27
 800b868:	d4f3      	bmi.n	800b852 <HAL_DSI_Read+0x96>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b86a:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b86e:	4622      	mov	r2, r4
 800b870:	bf28      	it	cs
 800b872:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800b874:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b876:	ea4f 2113 	mov.w	r1, r3, lsr #8
 800b87a:	7033      	strb	r3, [r6, #0]
 800b87c:	ea4f 4013 	mov.w	r0, r3, lsr #16
 800b880:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800b884:	d006      	beq.n	800b894 <HAL_DSI_Read+0xd8>
 800b886:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b888:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800b88a:	d003      	beq.n	800b894 <HAL_DSI_Read+0xd8>
 800b88c:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b88e:	70b0      	strb	r0, [r6, #2]
 800b890:	bf88      	it	hi
 800b892:	70f3      	strbhi	r3, [r6, #3]
      for (count = 0U; count < nbbytes; count++)
 800b894:	4416      	add	r6, r2
 800b896:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b898:	f7fd fb18 	bl	8008ecc <HAL_GetTick>
 800b89c:	1bc1      	subs	r1, r0, r7
 800b89e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800b8a2:	d9dc      	bls.n	800b85e <HAL_DSI_Read+0xa2>
      __HAL_UNLOCK(hdsi);
 800b8a4:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b8a6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b8a8:	742b      	strb	r3, [r5, #16]
}
 800b8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	7428      	strb	r0, [r5, #16]
}
 800b8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8b6:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800b8b8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8ba:	f047 0704 	orr.w	r7, r7, #4
 800b8be:	66df      	str	r7, [r3, #108]	; 0x6c
}
 800b8c0:	e7c3      	b.n	800b84a <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8c4:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b8c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8c8:	7852      	ldrb	r2, [r2, #1]
 800b8ca:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b8d0:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b8d6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800b8da:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800b8dc:	e7b5      	b.n	800b84a <HAL_DSI_Read+0x8e>
  __HAL_LOCK(hdsi);
 800b8de:	2002      	movs	r0, #2
}
 800b8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8e6:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b8e8:	7811      	ldrb	r1, [r2, #0]
 800b8ea:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b8ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b8f0:	f043 0314 	orr.w	r3, r3, #20
 800b8f4:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800b8f6:	e7a8      	b.n	800b84a <HAL_DSI_Read+0x8e>

0800b8f8 <HAL_EXTI_RegisterCallback>:
  if (hexti == NULL)
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800b8f8:	b919      	cbnz	r1, 800b902 <HAL_EXTI_RegisterCallback+0xa>
 800b8fa:	b110      	cbz	r0, 800b902 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800b8fc:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8fe:	2000      	movs	r0, #0
      break;
 800b900:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800b902:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop

0800b908 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800b908:	b110      	cbz	r0, 800b910 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800b90a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800b90c:	2000      	movs	r0, #0
 800b90e:	4770      	bx	lr
    return HAL_ERROR;
 800b910:	2001      	movs	r0, #1
  }
}
 800b912:	4770      	bx	lr

0800b914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b918:	680e      	ldr	r6, [r1, #0]
{
 800b91a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b91c:	2e00      	cmp	r6, #0
 800b91e:	f000 80d3 	beq.w	800bac8 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 800b922:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b924:	f8df a220 	ldr.w	sl, [pc, #544]	; 800bb48 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b928:	f8df b220 	ldr.w	fp, [pc, #544]	; 800bb4c <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b92c:	46b1      	mov	r9, r6
 800b92e:	e020      	b.n	800b972 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800b930:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b932:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b936:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b93a:	f04f 0e0f 	mov.w	lr, #15
 800b93e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b942:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b944:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b948:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 800b94c:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b94e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b952:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b956:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b95a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800b95e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800b960:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b962:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b964:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800b966:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800b968:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b96a:	fa39 f203 	lsrs.w	r2, r9, r3
 800b96e:	f000 80ab 	beq.w	800bac8 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b972:	2201      	movs	r2, #1
 800b974:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800b976:	ea12 0809 	ands.w	r8, r2, r9
 800b97a:	d0f5      	beq.n	800b968 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b97c:	684c      	ldr	r4, [r1, #4]
 800b97e:	005f      	lsls	r7, r3, #1
 800b980:	f024 0c10 	bic.w	ip, r4, #16
 800b984:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b988:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b98a:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b98e:	f200 809e 	bhi.w	800bace <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b992:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800b996:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b99a:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b99c:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b99e:	ea2e 0e05 	bic.w	lr, lr, r5
 800b9a2:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b9a4:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b9a6:	68ce      	ldr	r6, [r1, #12]
 800b9a8:	40be      	lsls	r6, r7
 800b9aa:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b9ae:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800b9b0:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800b9b4:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9b8:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b9bc:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800b9be:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800b9c0:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9c2:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b9c6:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b9c8:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b9cc:	fa02 f207 	lsl.w	r2, r2, r7
 800b9d0:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 800b9d4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9d6:	d0ab      	beq.n	800b930 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 800b9d8:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9da:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b9de:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9e0:	fa02 f707 	lsl.w	r7, r2, r7
 800b9e4:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800b9e6:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b9e8:	00e6      	lsls	r6, r4, #3
 800b9ea:	d5bd      	bpl.n	800b968 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9ec:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800b9f0:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b9f4:	f003 0203 	and.w	r2, r3, #3
 800b9f8:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9fa:	f046 0602 	orr.w	r6, r6, #2
 800b9fe:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ba02:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba04:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 800ba08:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800ba0c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ba10:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba14:	f006 0602 	and.w	r6, r6, #2
 800ba18:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ba1a:	4e42      	ldr	r6, [pc, #264]	; (800bb24 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba1c:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ba1e:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800ba20:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ba22:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ba26:	d020      	beq.n	800ba6a <HAL_GPIO_Init+0x156>
 800ba28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800ba2c:	42b0      	cmp	r0, r6
 800ba2e:	d056      	beq.n	800bade <HAL_GPIO_Init+0x1ca>
 800ba30:	4e3d      	ldr	r6, [pc, #244]	; (800bb28 <HAL_GPIO_Init+0x214>)
 800ba32:	42b0      	cmp	r0, r6
 800ba34:	d058      	beq.n	800bae8 <HAL_GPIO_Init+0x1d4>
 800ba36:	4e3d      	ldr	r6, [pc, #244]	; (800bb2c <HAL_GPIO_Init+0x218>)
 800ba38:	42b0      	cmp	r0, r6
 800ba3a:	d04b      	beq.n	800bad4 <HAL_GPIO_Init+0x1c0>
 800ba3c:	4e3c      	ldr	r6, [pc, #240]	; (800bb30 <HAL_GPIO_Init+0x21c>)
 800ba3e:	42b0      	cmp	r0, r6
 800ba40:	d05c      	beq.n	800bafc <HAL_GPIO_Init+0x1e8>
 800ba42:	4e3c      	ldr	r6, [pc, #240]	; (800bb34 <HAL_GPIO_Init+0x220>)
 800ba44:	42b0      	cmp	r0, r6
 800ba46:	d05e      	beq.n	800bb06 <HAL_GPIO_Init+0x1f2>
 800ba48:	4e3b      	ldr	r6, [pc, #236]	; (800bb38 <HAL_GPIO_Init+0x224>)
 800ba4a:	42b0      	cmp	r0, r6
 800ba4c:	d051      	beq.n	800baf2 <HAL_GPIO_Init+0x1de>
 800ba4e:	4e3b      	ldr	r6, [pc, #236]	; (800bb3c <HAL_GPIO_Init+0x228>)
 800ba50:	42b0      	cmp	r0, r6
 800ba52:	d05d      	beq.n	800bb10 <HAL_GPIO_Init+0x1fc>
 800ba54:	4e3a      	ldr	r6, [pc, #232]	; (800bb40 <HAL_GPIO_Init+0x22c>)
 800ba56:	42b0      	cmp	r0, r6
 800ba58:	d05f      	beq.n	800bb1a <HAL_GPIO_Init+0x206>
 800ba5a:	4e3a      	ldr	r6, [pc, #232]	; (800bb44 <HAL_GPIO_Init+0x230>)
 800ba5c:	42b0      	cmp	r0, r6
 800ba5e:	bf0c      	ite	eq
 800ba60:	2609      	moveq	r6, #9
 800ba62:	260a      	movne	r6, #10
 800ba64:	fa06 f202 	lsl.w	r2, r6, r2
 800ba68:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ba6a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800ba6c:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 800ba70:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ba74:	03e5      	lsls	r5, r4, #15
    position++;
 800ba76:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800ba7a:	bf54      	ite	pl
 800ba7c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800ba7e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800ba82:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ba86:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800ba88:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800ba8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800ba90:	bf54      	ite	pl
 800ba92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800ba94:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ba98:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800ba9a:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800ba9e:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 800baa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800baa4:	bf54      	ite	pl
 800baa6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800baa8:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800baac:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800baae:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800bab2:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800bab4:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800bab6:	bf54      	ite	pl
 800bab8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800baba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800babe:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bac0:	fa39 f203 	lsrs.w	r2, r9, r3
 800bac4:	f47f af55 	bne.w	800b972 <HAL_GPIO_Init+0x5e>
  }
}
 800bac8:	b005      	add	sp, #20
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	40bd      	lsls	r5, r7
 800bad0:	43ed      	mvns	r5, r5
 800bad2:	e775      	b.n	800b9c0 <HAL_GPIO_Init+0xac>
 800bad4:	2603      	movs	r6, #3
 800bad6:	fa06 f202 	lsl.w	r2, r6, r2
 800bada:	4315      	orrs	r5, r2
 800badc:	e7c5      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bade:	2601      	movs	r6, #1
 800bae0:	fa06 f202 	lsl.w	r2, r6, r2
 800bae4:	4315      	orrs	r5, r2
 800bae6:	e7c0      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bae8:	2602      	movs	r6, #2
 800baea:	fa06 f202 	lsl.w	r2, r6, r2
 800baee:	4315      	orrs	r5, r2
 800baf0:	e7bb      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800baf2:	2606      	movs	r6, #6
 800baf4:	fa06 f202 	lsl.w	r2, r6, r2
 800baf8:	4315      	orrs	r5, r2
 800bafa:	e7b6      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bafc:	2604      	movs	r6, #4
 800bafe:	fa06 f202 	lsl.w	r2, r6, r2
 800bb02:	4315      	orrs	r5, r2
 800bb04:	e7b1      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bb06:	2605      	movs	r6, #5
 800bb08:	fa06 f202 	lsl.w	r2, r6, r2
 800bb0c:	4315      	orrs	r5, r2
 800bb0e:	e7ac      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bb10:	2607      	movs	r6, #7
 800bb12:	fa06 f202 	lsl.w	r2, r6, r2
 800bb16:	4315      	orrs	r5, r2
 800bb18:	e7a7      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bb1a:	2608      	movs	r6, #8
 800bb1c:	fa06 f202 	lsl.w	r2, r6, r2
 800bb20:	4315      	orrs	r5, r2
 800bb22:	e7a2      	b.n	800ba6a <HAL_GPIO_Init+0x156>
 800bb24:	58020000 	.word	0x58020000
 800bb28:	58020800 	.word	0x58020800
 800bb2c:	58020c00 	.word	0x58020c00
 800bb30:	58021000 	.word	0x58021000
 800bb34:	58021400 	.word	0x58021400
 800bb38:	58021800 	.word	0x58021800
 800bb3c:	58021c00 	.word	0x58021c00
 800bb40:	58022000 	.word	0x58022000
 800bb44:	58022400 	.word	0x58022400
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	58000080 	.word	0x58000080

0800bb50 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800bb50:	2900      	cmp	r1, #0
 800bb52:	f000 80ac 	beq.w	800bcae <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
 800bb56:	2300      	movs	r3, #0
{
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800bcd0 <HAL_GPIO_DeInit+0x180>
 800bb60:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bb62:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800bcd4 <HAL_GPIO_DeInit+0x184>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800bb66:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800bcd8 <HAL_GPIO_DeInit+0x188>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bb6a:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bcdc <HAL_GPIO_DeInit+0x18c>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800bb6e:	f04f 0e01 	mov.w	lr, #1
 800bb72:	fa0e f403 	lsl.w	r4, lr, r3
    if (iocurrent != 0x00U)
 800bb76:	ea14 0c01 	ands.w	ip, r4, r1
 800bb7a:	d073      	beq.n	800bc64 <HAL_GPIO_DeInit+0x114>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bb7c:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bb80:	f003 0203 	and.w	r2, r3, #3
 800bb84:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bb86:	4548      	cmp	r0, r9
 800bb88:	4455      	add	r5, sl
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bb8a:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bb8e:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bb90:	fa06 f602 	lsl.w	r6, r6, r2
 800bb94:	ea07 0706 	and.w	r7, r7, r6
 800bb98:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bb9a:	d023      	beq.n	800bbe4 <HAL_GPIO_DeInit+0x94>
 800bb9c:	4558      	cmp	r0, fp
 800bb9e:	d06a      	beq.n	800bc76 <HAL_GPIO_DeInit+0x126>
 800bba0:	4f46      	ldr	r7, [pc, #280]	; (800bcbc <HAL_GPIO_DeInit+0x16c>)
 800bba2:	42b8      	cmp	r0, r7
 800bba4:	d06a      	beq.n	800bc7c <HAL_GPIO_DeInit+0x12c>
 800bba6:	4f46      	ldr	r7, [pc, #280]	; (800bcc0 <HAL_GPIO_DeInit+0x170>)
 800bba8:	42b8      	cmp	r0, r7
 800bbaa:	d071      	beq.n	800bc90 <HAL_GPIO_DeInit+0x140>
 800bbac:	4f45      	ldr	r7, [pc, #276]	; (800bcc4 <HAL_GPIO_DeInit+0x174>)
 800bbae:	42b8      	cmp	r0, r7
 800bbb0:	d073      	beq.n	800bc9a <HAL_GPIO_DeInit+0x14a>
 800bbb2:	4f45      	ldr	r7, [pc, #276]	; (800bcc8 <HAL_GPIO_DeInit+0x178>)
 800bbb4:	42b8      	cmp	r0, r7
 800bbb6:	d066      	beq.n	800bc86 <HAL_GPIO_DeInit+0x136>
 800bbb8:	4f44      	ldr	r7, [pc, #272]	; (800bccc <HAL_GPIO_DeInit+0x17c>)
 800bbba:	42b8      	cmp	r0, r7
 800bbbc:	d059      	beq.n	800bc72 <HAL_GPIO_DeInit+0x122>
 800bbbe:	f8df e120 	ldr.w	lr, [pc, #288]	; 800bce0 <HAL_GPIO_DeInit+0x190>
 800bbc2:	4570      	cmp	r0, lr
 800bbc4:	d074      	beq.n	800bcb0 <HAL_GPIO_DeInit+0x160>
 800bbc6:	f8df e11c 	ldr.w	lr, [pc, #284]	; 800bce4 <HAL_GPIO_DeInit+0x194>
 800bbca:	4570      	cmp	r0, lr
 800bbcc:	d06a      	beq.n	800bca4 <HAL_GPIO_DeInit+0x154>
 800bbce:	f8df e118 	ldr.w	lr, [pc, #280]	; 800bce8 <HAL_GPIO_DeInit+0x198>
 800bbd2:	4570      	cmp	r0, lr
 800bbd4:	bf14      	ite	ne
 800bbd6:	f04f 0e0a 	movne.w	lr, #10
 800bbda:	f04f 0e09 	moveq.w	lr, #9
 800bbde:	fa0e f202 	lsl.w	r2, lr, r2
 800bbe2:	e000      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	9f01      	ldr	r7, [sp, #4]
 800bbe8:	4297      	cmp	r7, r2
 800bbea:	d119      	bne.n	800bc20 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800bbec:	f8d8 7000 	ldr.w	r7, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bbf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800bbf4:	ea27 070c 	bic.w	r7, r7, ip
 800bbf8:	f8c8 7000 	str.w	r7, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800bbfc:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bc00:	ea27 070c 	bic.w	r7, r7, ip
 800bc04:	f8c8 7004 	str.w	r7, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800bc08:	6817      	ldr	r7, [r2, #0]
 800bc0a:	ea27 070c 	bic.w	r7, r7, ip
 800bc0e:	6017      	str	r7, [r2, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800bc10:	6857      	ldr	r7, [r2, #4]
 800bc12:	ea27 070c 	bic.w	r7, r7, ip
 800bc16:	6057      	str	r7, [r2, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bc18:	68aa      	ldr	r2, [r5, #8]
 800bc1a:	ea22 0606 	bic.w	r6, r2, r6
 800bc1e:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bc20:	005a      	lsls	r2, r3, #1
 800bc22:	2603      	movs	r6, #3
 800bc24:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bc28:	270f      	movs	r7, #15
 800bc2a:	fa23 f506 	lsr.w	r5, r3, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bc2e:	4096      	lsls	r6, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bc30:	f003 0207 	and.w	r2, r3, #7
 800bc34:	eb00 0585 	add.w	r5, r0, r5, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bc38:	ea4c 0c06 	orr.w	ip, ip, r6
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bc3c:	0092      	lsls	r2, r2, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bc3e:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bc42:	4097      	lsls	r7, r2
 800bc44:	6a2a      	ldr	r2, [r5, #32]
 800bc46:	ea22 0207 	bic.w	r2, r2, r7
 800bc4a:	622a      	str	r2, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bc4c:	68c2      	ldr	r2, [r0, #12]
 800bc4e:	ea22 0206 	bic.w	r2, r2, r6
 800bc52:	60c2      	str	r2, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc54:	6842      	ldr	r2, [r0, #4]
 800bc56:	ea22 0404 	bic.w	r4, r2, r4
 800bc5a:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bc5c:	6882      	ldr	r2, [r0, #8]
 800bc5e:	ea22 0606 	bic.w	r6, r2, r6
 800bc62:	6086      	str	r6, [r0, #8]
    }

    position++;
 800bc64:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800bc66:	fa31 f203 	lsrs.w	r2, r1, r3
 800bc6a:	d180      	bne.n	800bb6e <HAL_GPIO_DeInit+0x1e>
  }
}
 800bc6c:	b003      	add	sp, #12
 800bc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc72:	f04f 0e06 	mov.w	lr, #6
 800bc76:	fa0e f202 	lsl.w	r2, lr, r2
 800bc7a:	e7b4      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bc7c:	f04f 0e02 	mov.w	lr, #2
 800bc80:	fa0e f202 	lsl.w	r2, lr, r2
 800bc84:	e7af      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bc86:	f04f 0e05 	mov.w	lr, #5
 800bc8a:	fa0e f202 	lsl.w	r2, lr, r2
 800bc8e:	e7aa      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bc90:	f04f 0e03 	mov.w	lr, #3
 800bc94:	fa0e f202 	lsl.w	r2, lr, r2
 800bc98:	e7a5      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bc9a:	f04f 0e04 	mov.w	lr, #4
 800bc9e:	fa0e f202 	lsl.w	r2, lr, r2
 800bca2:	e7a0      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bca4:	f04f 0e08 	mov.w	lr, #8
 800bca8:	fa0e f202 	lsl.w	r2, lr, r2
 800bcac:	e79b      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bcae:	4770      	bx	lr
 800bcb0:	f04f 0e07 	mov.w	lr, #7
 800bcb4:	fa0e f202 	lsl.w	r2, lr, r2
 800bcb8:	e795      	b.n	800bbe6 <HAL_GPIO_DeInit+0x96>
 800bcba:	bf00      	nop
 800bcbc:	58020800 	.word	0x58020800
 800bcc0:	58020c00 	.word	0x58020c00
 800bcc4:	58021000 	.word	0x58021000
 800bcc8:	58021400 	.word	0x58021400
 800bccc:	58021800 	.word	0x58021800
 800bcd0:	58000400 	.word	0x58000400
 800bcd4:	58020000 	.word	0x58020000
 800bcd8:	58000080 	.word	0x58000080
 800bcdc:	58020400 	.word	0x58020400
 800bce0:	58021c00 	.word	0x58021c00
 800bce4:	58022000 	.word	0x58022000
 800bce8:	58022400 	.word	0x58022400

0800bcec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bcec:	6903      	ldr	r3, [r0, #16]
 800bcee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800bcf0:	bf14      	ite	ne
 800bcf2:	2001      	movne	r0, #1
 800bcf4:	2000      	moveq	r0, #0
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bcf8:	b902      	cbnz	r2, 800bcfc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bcfa:	0409      	lsls	r1, r1, #16
 800bcfc:	6181      	str	r1, [r0, #24]
  }
}
 800bcfe:	4770      	bx	lr

0800bd00 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800bd00:	6943      	ldr	r3, [r0, #20]
 800bd02:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bd06:	bf08      	it	eq
 800bd08:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd0a:	6181      	str	r1, [r0, #24]
  }
}
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop

0800bd10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	4604      	mov	r4, r0
 800bd14:	460d      	mov	r5, r1
 800bd16:	4616      	mov	r6, r2
 800bd18:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	d12c      	bne.n	800bd78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800bd1e:	699a      	ldr	r2, [r3, #24]
 800bd20:	0790      	lsls	r0, r2, #30
 800bd22:	d427      	bmi.n	800bd74 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	06d1      	lsls	r1, r2, #27
 800bd28:	d5f9      	bpl.n	800bd1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd2a:	699a      	ldr	r2, [r3, #24]
 800bd2c:	0691      	lsls	r1, r2, #26
 800bd2e:	d5fc      	bpl.n	800bd2a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd30:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd32:	2110      	movs	r1, #16
 800bd34:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd36:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bd38:	699a      	ldr	r2, [r3, #24]
 800bd3a:	0790      	lsls	r0, r2, #30
 800bd3c:	d501      	bpl.n	800bd42 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800bd3e:	2200      	movs	r2, #0
 800bd40:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	07d1      	lsls	r1, r2, #31
 800bd46:	d403      	bmi.n	800bd50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bd48:	699a      	ldr	r2, [r3, #24]
 800bd4a:	f042 0201 	orr.w	r2, r2, #1
 800bd4e:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd50:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd52:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800bd54:	4e1b      	ldr	r6, [pc, #108]	; (800bdc4 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800bd56:	2520      	movs	r5, #32
      return HAL_ERROR;
 800bd58:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800bd5a:	4032      	ands	r2, r6
 800bd5c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd5e:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd60:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd64:	f043 0304 	orr.w	r3, r3, #4
 800bd68:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bd6a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd6e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800bd74:	2000      	movs	r0, #0
}
 800bd76:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bd78:	699a      	ldr	r2, [r3, #24]
 800bd7a:	0792      	lsls	r2, r2, #30
 800bd7c:	d4fa      	bmi.n	800bd74 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	06d0      	lsls	r0, r2, #27
 800bd82:	d41b      	bmi.n	800bdbc <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd84:	f7fd f8a2 	bl	8008ecc <HAL_GetTick>
 800bd88:	1b80      	subs	r0, r0, r6
 800bd8a:	42a8      	cmp	r0, r5
 800bd8c:	d801      	bhi.n	800bd92 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800bd8e:	2d00      	cmp	r5, #0
 800bd90:	d1c2      	bne.n	800bd18 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd92:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd94:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd96:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800bd98:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd9a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bd9c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bda0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bda2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bda6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdac:	f7fd f88e 	bl	8008ecc <HAL_GetTick>
 800bdb0:	1b80      	subs	r0, r0, r6
 800bdb2:	4285      	cmp	r5, r0
 800bdb4:	d3ed      	bcc.n	800bd92 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	d0eb      	beq.n	800bd92 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800bdba:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bdbc:	6999      	ldr	r1, [r3, #24]
 800bdbe:	068a      	lsls	r2, r1, #26
 800bdc0:	d5f4      	bpl.n	800bdac <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 800bdc2:	e7b5      	b.n	800bd30 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800bdc4:	fe00e800 	.word	0xfe00e800

0800bdc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	4604      	mov	r4, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	6999      	ldr	r1, [r3, #24]
 800bdd4:	068a      	lsls	r2, r1, #26
 800bdd6:	d449      	bmi.n	800be6c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdd8:	6999      	ldr	r1, [r3, #24]
 800bdda:	06ca      	lsls	r2, r1, #27
 800bddc:	d526      	bpl.n	800be2c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 800bdde:	1c68      	adds	r0, r5, #1
 800bde0:	d138      	bne.n	800be54 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bde2:	699a      	ldr	r2, [r3, #24]
 800bde4:	0691      	lsls	r1, r2, #26
 800bde6:	d5fc      	bpl.n	800bde2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bde8:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdea:	2110      	movs	r1, #16
 800bdec:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdee:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bdf0:	699a      	ldr	r2, [r3, #24]
 800bdf2:	0790      	lsls	r0, r2, #30
 800bdf4:	d501      	bpl.n	800bdfa <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bdfa:	699a      	ldr	r2, [r3, #24]
 800bdfc:	07d1      	lsls	r1, r2, #31
 800bdfe:	d403      	bmi.n	800be08 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be00:	699a      	ldr	r2, [r3, #24]
 800be02:	f042 0201 	orr.w	r2, r2, #1
 800be06:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800be08:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be0a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800be0c:	4e18      	ldr	r6, [pc, #96]	; (800be70 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 800be0e:	2520      	movs	r5, #32
      return HAL_ERROR;
 800be10:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800be12:	4032      	ands	r2, r6
 800be14:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be16:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800be18:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be1c:	f043 0304 	orr.w	r3, r3, #4
 800be20:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be22:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be26:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be2c:	f7fd f84e 	bl	8008ecc <HAL_GetTick>
 800be30:	1b80      	subs	r0, r0, r6
 800be32:	42a8      	cmp	r0, r5
 800be34:	d801      	bhi.n	800be3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800be36:	2d00      	cmp	r5, #0
 800be38:	d1ca      	bne.n	800bdd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be3c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be3e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800be40:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be42:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800be44:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be48:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be4e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800be52:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800be54:	699a      	ldr	r2, [r3, #24]
 800be56:	0692      	lsls	r2, r2, #26
 800be58:	d4c6      	bmi.n	800bde8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be5a:	f7fd f837 	bl	8008ecc <HAL_GetTick>
 800be5e:	1b80      	subs	r0, r0, r6
 800be60:	4285      	cmp	r5, r0
 800be62:	d3ea      	bcc.n	800be3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800be64:	2d00      	cmp	r5, #0
 800be66:	d0e8      	beq.n	800be3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	e7b8      	b.n	800bdde <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800be6c:	2000      	movs	r0, #0
}
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
 800be70:	fe00e800 	.word	0xfe00e800

0800be74 <HAL_I2C_MspInit>:
}
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop

0800be78 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800be78:	2800      	cmp	r0, #0
 800be7a:	d04d      	beq.n	800bf18 <HAL_I2C_Init+0xa0>
{
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800be7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800be82:	4604      	mov	r4, r0
 800be84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d040      	beq.n	800bf0e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800be8c:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be8e:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be90:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800be94:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be98:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800be9a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800bea0:	f021 0101 	bic.w	r1, r1, #1
 800bea4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bea6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800beae:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800beb0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800beb2:	d028      	beq.n	800bf06 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800beb4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800beb8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800beba:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bebc:	d102      	bne.n	800bec4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bec2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bec4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bec6:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bec8:	4814      	ldr	r0, [pc, #80]	; (800bf1c <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 800beca:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800becc:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bece:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bed0:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bed4:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bed6:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bed8:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800beda:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bedc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bee0:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bee2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bee6:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bee8:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 800beea:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800beec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800beee:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	f042 0201 	orr.w	r2, r2, #1
 800bef6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bef8:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800befa:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800befe:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800bf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bf06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf0a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bf0c:	e7da      	b.n	800bec4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800bf0e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800bf12:	f7ff ffaf 	bl	800be74 <HAL_I2C_MspInit>
 800bf16:	e7b9      	b.n	800be8c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800bf18:	2001      	movs	r0, #1
}
 800bf1a:	4770      	bx	lr
 800bf1c:	02008000 	.word	0x02008000

0800bf20 <HAL_I2C_MspDeInit>:
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop

0800bf24 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800bf24:	b1b0      	cbz	r0, 800bf54 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800bf26:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bf28:	2324      	movs	r3, #36	; 0x24
{
 800bf2a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bf2c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800bf30:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800bf32:	6813      	ldr	r3, [r2, #0]
 800bf34:	f023 0301 	bic.w	r3, r3, #1
 800bf38:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800bf3a:	f7ff fff1 	bl	800bf20 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800bf42:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800bf44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800bf48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf4c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800bf52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bf54:	2001      	movs	r0, #1
}
 800bf56:	4770      	bx	lr

0800bf58 <HAL_I2C_Mem_Write>:
{
 800bf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf5e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800bf62:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf66:	2b20      	cmp	r3, #32
{
 800bf68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf6a:	f040 80b0 	bne.w	800c0ce <HAL_I2C_Mem_Write+0x176>
    if ((pData == NULL) || (Size == 0U))
 800bf6e:	9b08      	ldr	r3, [sp, #32]
 800bf70:	4604      	mov	r4, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 80a5 	beq.w	800c0c2 <HAL_I2C_Mem_Write+0x16a>
 800bf78:	f1ba 0f00 	cmp.w	sl, #0
 800bf7c:	f000 80a1 	beq.w	800c0c2 <HAL_I2C_Mem_Write+0x16a>
    __HAL_LOCK(hi2c);
 800bf80:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	f000 80a2 	beq.w	800c0ce <HAL_I2C_Mem_Write+0x176>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	460e      	mov	r6, r1
 800bf8e:	4690      	mov	r8, r2
 800bf90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bf94:	f7fc ff9a 	bl	8008ecc <HAL_GetTick>
 800bf98:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800bf9a:	e005      	b.n	800bfa8 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf9c:	f7fc ff96 	bl	8008ecc <HAL_GetTick>
 800bfa0:	1b40      	subs	r0, r0, r5
 800bfa2:	2819      	cmp	r0, #25
 800bfa4:	f200 80af 	bhi.w	800c106 <HAL_I2C_Mem_Write+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfa8:	f8d4 c000 	ldr.w	ip, [r4]
 800bfac:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800bfb0:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800bfb4:	d1f2      	bne.n	800bf9c <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfb6:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bfb8:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 800bfba:	9808      	ldr	r0, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bfbc:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfc0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bfc4:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 800c1b0 <HAL_I2C_Mem_Write+0x258>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bfc8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfcc:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfce:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bfd0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bfd4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 800bfd8:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bfda:	fa5f f089 	uxtb.w	r0, r9
 800bfde:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800bfe2:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bfe4:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800c1b4 <HAL_I2C_Mem_Write+0x25c>
 800bfe8:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfec:	4639      	mov	r1, r7
 800bfee:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bff0:	4333      	orrs	r3, r6
 800bff2:	ea43 0e0e 	orr.w	lr, r3, lr
 800bff6:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bffa:	f7ff fe89 	bl	800bd10 <I2C_WaitOnTXISFlagUntilTimeout>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d171      	bne.n	800c0e6 <HAL_I2C_Mem_Write+0x18e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c002:	f1b9 0f01 	cmp.w	r9, #1
 800c006:	d00a      	beq.n	800c01e <HAL_I2C_Mem_Write+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c008:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800c00c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c00e:	462a      	mov	r2, r5
 800c010:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c012:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff fe7b 	bl	800bd10 <I2C_WaitOnTXISFlagUntilTimeout>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d163      	bne.n	800c0e6 <HAL_I2C_Mem_Write+0x18e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c01e:	fa5f f288 	uxtb.w	r2, r8
 800c022:	6821      	ldr	r1, [r4, #0]
 800c024:	628a      	str	r2, [r1, #40]	; 0x28
 800c026:	1c78      	adds	r0, r7, #1
 800c028:	f040 8089 	bne.w	800c13e <HAL_I2C_Mem_Write+0x1e6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c02c:	698b      	ldr	r3, [r1, #24]
 800c02e:	061a      	lsls	r2, r3, #24
 800c030:	d5fc      	bpl.n	800c02c <HAL_I2C_Mem_Write+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c034:	b29b      	uxth	r3, r3
 800c036:	2bff      	cmp	r3, #255	; 0xff
 800c038:	f240 8090 	bls.w	800c15c <HAL_I2C_Mem_Write+0x204>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c03c:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c03e:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c040:	4a58      	ldr	r2, [pc, #352]	; (800c1a4 <HAL_I2C_Mem_Write+0x24c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c042:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c044:	4013      	ands	r3, r2
 800c046:	4a58      	ldr	r2, [pc, #352]	; (800c1a8 <HAL_I2C_Mem_Write+0x250>)
 800c048:	4333      	orrs	r3, r6
 800c04a:	431a      	orrs	r2, r3
 800c04c:	604a      	str	r2, [r1, #4]
 800c04e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800c1a4 <HAL_I2C_Mem_Write+0x24c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c052:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c056:	f8df 9150 	ldr.w	r9, [pc, #336]	; 800c1a8 <HAL_I2C_Mem_Write+0x250>
 800c05a:	e004      	b.n	800c066 <HAL_I2C_Mem_Write+0x10e>
    while (hi2c->XferCount > 0U);
 800c05c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c05e:	b29b      	uxth	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8089 	beq.w	800c178 <HAL_I2C_Mem_Write+0x220>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c066:	462a      	mov	r2, r5
 800c068:	4639      	mov	r1, r7
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff fe50 	bl	800bd10 <I2C_WaitOnTXISFlagUntilTimeout>
 800c070:	2800      	cmp	r0, #0
 800c072:	d171      	bne.n	800c158 <HAL_I2C_Mem_Write+0x200>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c074:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c076:	6821      	ldr	r1, [r4, #0]
 800c078:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800c07c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c07e:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800c080:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c082:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800c084:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c086:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800c088:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c08a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c08c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c08e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c090:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c092:	b292      	uxth	r2, r2
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1e1      	bne.n	800c05c <HAL_I2C_Mem_Write+0x104>
 800c098:	2a00      	cmp	r2, #0
 800c09a:	d0df      	beq.n	800c05c <HAL_I2C_Mem_Write+0x104>
 800c09c:	1c78      	adds	r0, r7, #1
 800c09e:	d127      	bne.n	800c0f0 <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0a0:	698b      	ldr	r3, [r1, #24]
 800c0a2:	061a      	lsls	r2, r3, #24
 800c0a4:	d5fc      	bpl.n	800c0a0 <HAL_I2C_Mem_Write+0x148>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	2bff      	cmp	r3, #255	; 0xff
 800c0ac:	d939      	bls.n	800c122 <HAL_I2C_Mem_Write+0x1ca>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c0ae:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0b0:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c0b4:	ea03 0308 	and.w	r3, r3, r8
 800c0b8:	4333      	orrs	r3, r6
 800c0ba:	ea43 0309 	orr.w	r3, r3, r9
 800c0be:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c0c0:	e7cc      	b.n	800c05c <HAL_I2C_Mem_Write+0x104>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800c0c6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c0c8:	6463      	str	r3, [r4, #68]	; 0x44
}
 800c0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800c0ce:	2002      	movs	r0, #2
}
 800c0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0d6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0d8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0de:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c0e6:	2300      	movs	r3, #0
      return HAL_ERROR;
 800c0e8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800c0ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800c0ee:	e7ec      	b.n	800c0ca <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0f0:	698b      	ldr	r3, [r1, #24]
 800c0f2:	061b      	lsls	r3, r3, #24
 800c0f4:	d4d7      	bmi.n	800c0a6 <HAL_I2C_Mem_Write+0x14e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0f6:	f7fc fee9 	bl	8008ecc <HAL_GetTick>
 800c0fa:	1b40      	subs	r0, r0, r5
 800c0fc:	4287      	cmp	r7, r0
 800c0fe:	d302      	bcc.n	800c106 <HAL_I2C_Mem_Write+0x1ae>
 800c100:	b10f      	cbz	r7, 800c106 <HAL_I2C_Mem_Write+0x1ae>
 800c102:	6821      	ldr	r1, [r4, #0]
 800c104:	e7ca      	b.n	800c09c <HAL_I2C_Mem_Write+0x144>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c106:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c108:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c10a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c10c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c10e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c110:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c114:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c116:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c11a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
 800c122:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c124:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800c126:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c128:	ea03 0308 	and.w	r3, r3, r8
 800c12c:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
 800c12e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c130:	4333      	orrs	r3, r6
 800c132:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c13a:	604b      	str	r3, [r1, #4]
}
 800c13c:	e78e      	b.n	800c05c <HAL_I2C_Mem_Write+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c13e:	698b      	ldr	r3, [r1, #24]
 800c140:	061b      	lsls	r3, r3, #24
 800c142:	f53f af76 	bmi.w	800c032 <HAL_I2C_Mem_Write+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c146:	f7fc fec1 	bl	8008ecc <HAL_GetTick>
 800c14a:	1b40      	subs	r0, r0, r5
 800c14c:	4287      	cmp	r7, r0
 800c14e:	d3c1      	bcc.n	800c0d4 <HAL_I2C_Mem_Write+0x17c>
 800c150:	2f00      	cmp	r7, #0
 800c152:	d0bf      	beq.n	800c0d4 <HAL_I2C_Mem_Write+0x17c>
 800c154:	6821      	ldr	r1, [r4, #0]
 800c156:	e766      	b.n	800c026 <HAL_I2C_Mem_Write+0xce>
        return HAL_ERROR;
 800c158:	2001      	movs	r0, #1
 800c15a:	e7b6      	b.n	800c0ca <HAL_I2C_Mem_Write+0x172>
      hi2c->XferSize = hi2c->XferCount;
 800c15c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c15e:	4811      	ldr	r0, [pc, #68]	; (800c1a4 <HAL_I2C_Mem_Write+0x24c>)
 800c160:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 800c162:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c164:	4003      	ands	r3, r0
 800c166:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
 800c168:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c16a:	4333      	orrs	r3, r6
 800c16c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c174:	604b      	str	r3, [r1, #4]
}
 800c176:	e76a      	b.n	800c04e <HAL_I2C_Mem_Write+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c178:	462a      	mov	r2, r5
 800c17a:	4639      	mov	r1, r7
 800c17c:	4620      	mov	r0, r4
 800c17e:	f7ff fe23 	bl	800bdc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c182:	2800      	cmp	r0, #0
 800c184:	d1e8      	bne.n	800c158 <HAL_I2C_Mem_Write+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c18a:	4d08      	ldr	r5, [pc, #32]	; (800c1ac <HAL_I2C_Mem_Write+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c18c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	402a      	ands	r2, r5
 800c192:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c194:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c198:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c19c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c1a0:	e793      	b.n	800c0ca <HAL_I2C_Mem_Write+0x172>
 800c1a2:	bf00      	nop
 800c1a4:	fc009c00 	.word	0xfc009c00
 800c1a8:	01ff0000 	.word	0x01ff0000
 800c1ac:	fe00e800 	.word	0xfe00e800
 800c1b0:	fc009800 	.word	0xfc009800
 800c1b4:	81002000 	.word	0x81002000

0800c1b8 <HAL_I2C_Mem_Read>:
{
 800c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1bc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c1c2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1c6:	2b20      	cmp	r3, #32
{
 800c1c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1ca:	f040 80b3 	bne.w	800c334 <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
 800c1ce:	9b08      	ldr	r3, [sp, #32]
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 80a8 	beq.w	800c328 <HAL_I2C_Mem_Read+0x170>
 800c1d8:	f1ba 0f00 	cmp.w	sl, #0
 800c1dc:	f000 80a4 	beq.w	800c328 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
 800c1e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	f000 80a5 	beq.w	800c334 <HAL_I2C_Mem_Read+0x17c>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	4690      	mov	r8, r2
 800c1f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c1f4:	f7fc fe6a 	bl	8008ecc <HAL_GetTick>
 800c1f8:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800c1fa:	e005      	b.n	800c208 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1fc:	f7fc fe66 	bl	8008ecc <HAL_GetTick>
 800c200:	1b80      	subs	r0, r0, r6
 800c202:	2819      	cmp	r0, #25
 800c204:	f200 8082 	bhi.w	800c30c <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c208:	f8d4 c000 	ldr.w	ip, [r4]
 800c20c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c210:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800c214:	d1f2      	bne.n	800c1fc <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c216:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c218:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 800c21a:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c21c:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c220:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c224:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800c418 <HAL_I2C_Mem_Read+0x260>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c228:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c22c:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c22e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800c230:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c234:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 800c238:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c23a:	fa5f f089 	uxtb.w	r0, r9
 800c23e:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800c242:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c244:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 800c428 <HAL_I2C_Mem_Read+0x270>
 800c248:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c24c:	4629      	mov	r1, r5
 800c24e:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c250:	433b      	orrs	r3, r7
 800c252:	ea43 0e0e 	orr.w	lr, r3, lr
 800c256:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c25a:	f7ff fd59 	bl	800bd10 <I2C_WaitOnTXISFlagUntilTimeout>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d174      	bne.n	800c34c <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c262:	f1b9 0f01 	cmp.w	r9, #1
 800c266:	d00a      	beq.n	800c27e <HAL_I2C_Mem_Read+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c268:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800c26c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c26e:	4632      	mov	r2, r6
 800c270:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c272:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c274:	4620      	mov	r0, r4
 800c276:	f7ff fd4b 	bl	800bd10 <I2C_WaitOnTXISFlagUntilTimeout>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d166      	bne.n	800c34c <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c27e:	fa5f f288 	uxtb.w	r2, r8
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	629a      	str	r2, [r3, #40]	; 0x28
 800c286:	1c68      	adds	r0, r5, #1
 800c288:	f040 8091 	bne.w	800c3ae <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c28c:	699a      	ldr	r2, [r3, #24]
 800c28e:	0651      	lsls	r1, r2, #25
 800c290:	d5fc      	bpl.n	800c28c <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c292:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c294:	b292      	uxth	r2, r2
 800c296:	2aff      	cmp	r2, #255	; 0xff
 800c298:	f240 8096 	bls.w	800c3c8 <HAL_I2C_Mem_Read+0x210>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c29c:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c29e:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c2a0:	495d      	ldr	r1, [pc, #372]	; (800c418 <HAL_I2C_Mem_Read+0x260>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2a2:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c2a4:	400a      	ands	r2, r1
 800c2a6:	495d      	ldr	r1, [pc, #372]	; (800c41c <HAL_I2C_Mem_Read+0x264>)
 800c2a8:	433a      	orrs	r2, r7
 800c2aa:	4311      	orrs	r1, r2
 800c2ac:	6059      	str	r1, [r3, #4]
 800c2ae:	1c68      	adds	r0, r5, #1
 800c2b0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800c42c <HAL_I2C_Mem_Read+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2b4:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c2b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c430 <HAL_I2C_Mem_Read+0x278>
 800c2bc:	d11c      	bne.n	800c2f8 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2be:	699a      	ldr	r2, [r3, #24]
 800c2c0:	0751      	lsls	r1, r2, #29
 800c2c2:	d5fc      	bpl.n	800c2be <HAL_I2C_Mem_Read+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c2c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c2ca:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c2cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c2ce:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800c2d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c2d2:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c2d4:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800c2d6:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800c2d8:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c2da:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2dc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c2de:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2e0:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800c2e2:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2e4:	b90b      	cbnz	r3, 800c2ea <HAL_I2C_Mem_Read+0x132>
 800c2e6:	2900      	cmp	r1, #0
 800c2e8:	d13f      	bne.n	800c36a <HAL_I2C_Mem_Read+0x1b2>
    while (hi2c->XferCount > 0U);
 800c2ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d07b      	beq.n	800c3ea <HAL_I2C_Mem_Read+0x232>
 800c2f2:	1c68      	adds	r0, r5, #1
 800c2f4:	6823      	ldr	r3, [r4, #0]
 800c2f6:	d0e2      	beq.n	800c2be <HAL_I2C_Mem_Read+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2f8:	699a      	ldr	r2, [r3, #24]
 800c2fa:	0752      	lsls	r2, r2, #29
 800c2fc:	d4e2      	bmi.n	800c2c4 <HAL_I2C_Mem_Read+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2fe:	f7fc fde5 	bl	8008ecc <HAL_GetTick>
 800c302:	1b80      	subs	r0, r0, r6
 800c304:	4285      	cmp	r5, r0
 800c306:	d301      	bcc.n	800c30c <HAL_I2C_Mem_Read+0x154>
 800c308:	2d00      	cmp	r5, #0
 800c30a:	d1f2      	bne.n	800c2f2 <HAL_I2C_Mem_Read+0x13a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c30c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c30e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c310:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c312:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c314:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c316:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c31a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c31c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c320:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c328:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800c32c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c32e:	6463      	str	r3, [r4, #68]	; 0x44
}
 800c330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800c334:	2002      	movs	r0, #2
}
 800c336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c33a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c33c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c33e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c340:	430b      	orrs	r3, r1
 800c342:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c344:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c348:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c34c:	2300      	movs	r3, #0
      return HAL_ERROR;
 800c34e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800c350:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800c354:	e7ec      	b.n	800c330 <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c356:	6993      	ldr	r3, [r2, #24]
 800c358:	061b      	lsls	r3, r3, #24
 800c35a:	d40c      	bmi.n	800c376 <HAL_I2C_Mem_Read+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c35c:	f7fc fdb6 	bl	8008ecc <HAL_GetTick>
 800c360:	1b80      	subs	r0, r0, r6
 800c362:	4285      	cmp	r5, r0
 800c364:	d3d2      	bcc.n	800c30c <HAL_I2C_Mem_Read+0x154>
 800c366:	2d00      	cmp	r5, #0
 800c368:	d0d0      	beq.n	800c30c <HAL_I2C_Mem_Read+0x154>
 800c36a:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c36c:	6822      	ldr	r2, [r4, #0]
 800c36e:	d1f2      	bne.n	800c356 <HAL_I2C_Mem_Read+0x19e>
 800c370:	6993      	ldr	r3, [r2, #24]
 800c372:	0619      	lsls	r1, r3, #24
 800c374:	d5fc      	bpl.n	800c370 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c376:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c378:	b29b      	uxth	r3, r3
 800c37a:	2bff      	cmp	r3, #255	; 0xff
 800c37c:	d909      	bls.n	800c392 <HAL_I2C_Mem_Read+0x1da>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c37e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c380:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c384:	ea03 0308 	and.w	r3, r3, r8
 800c388:	433b      	orrs	r3, r7
 800c38a:	ea43 0309 	orr.w	r3, r3, r9
 800c38e:	6053      	str	r3, [r2, #4]
}
 800c390:	e7ab      	b.n	800c2ea <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = hi2c->XferCount;
 800c392:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c394:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800c396:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c398:	ea03 0308 	and.w	r3, r3, r8
 800c39c:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 800c39e:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c3a0:	433b      	orrs	r3, r7
 800c3a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c3a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c3aa:	6053      	str	r3, [r2, #4]
}
 800c3ac:	e79d      	b.n	800c2ea <HAL_I2C_Mem_Read+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3ae:	699a      	ldr	r2, [r3, #24]
 800c3b0:	0652      	lsls	r2, r2, #25
 800c3b2:	f53f af6e 	bmi.w	800c292 <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3b6:	f7fc fd89 	bl	8008ecc <HAL_GetTick>
 800c3ba:	1b80      	subs	r0, r0, r6
 800c3bc:	4285      	cmp	r5, r0
 800c3be:	d3bc      	bcc.n	800c33a <HAL_I2C_Mem_Read+0x182>
 800c3c0:	2d00      	cmp	r5, #0
 800c3c2:	d0ba      	beq.n	800c33a <HAL_I2C_Mem_Read+0x182>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	e75e      	b.n	800c286 <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = hi2c->XferCount;
 800c3c8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c3ca:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800c418 <HAL_I2C_Mem_Read+0x260>
 800c3ce:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800c3d0:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c3d2:	4813      	ldr	r0, [pc, #76]	; (800c420 <HAL_I2C_Mem_Read+0x268>)
 800c3d4:	ea02 020c 	and.w	r2, r2, ip
 800c3d8:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 800c3dc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c3de:	433a      	orrs	r2, r7
 800c3e0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800c3e4:	4310      	orrs	r0, r2
 800c3e6:	6058      	str	r0, [r3, #4]
}
 800c3e8:	e761      	b.n	800c2ae <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3ea:	4632      	mov	r2, r6
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7ff fcea 	bl	800bdc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c3f4:	b968      	cbnz	r0, 800c412 <HAL_I2C_Mem_Read+0x25a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c3fa:	4d0a      	ldr	r5, [pc, #40]	; (800c424 <HAL_I2C_Mem_Read+0x26c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c3fc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	402a      	ands	r2, r5
 800c402:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c404:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c408:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c40c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c410:	e78e      	b.n	800c330 <HAL_I2C_Mem_Read+0x178>
      return HAL_ERROR;
 800c412:	2001      	movs	r0, #1
 800c414:	e78c      	b.n	800c330 <HAL_I2C_Mem_Read+0x178>
 800c416:	bf00      	nop
 800c418:	fc009800 	.word	0xfc009800
 800c41c:	81ff2400 	.word	0x81ff2400
 800c420:	82002400 	.word	0x82002400
 800c424:	fe00e800 	.word	0xfe00e800
 800c428:	80002000 	.word	0x80002000
 800c42c:	fc009c00 	.word	0xfc009c00
 800c430:	01ff0000 	.word	0x01ff0000

0800c434 <HAL_I2C_GetState>:
  return hi2c->State;
 800c434:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop

0800c43c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800c43c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800c43e:	4770      	bx	lr

0800c440 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c440:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800c444:	2a20      	cmp	r2, #32
 800c446:	d121      	bne.n	800c48c <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 800c448:	4603      	mov	r3, r0
{
 800c44a:	b470      	push	{r4, r5, r6}
 800c44c:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c44e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800c452:	2a01      	cmp	r2, #1
 800c454:	d01c      	beq.n	800c490 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c456:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c458:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c45a:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c45c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c460:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800c462:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800c464:	f024 0401 	bic.w	r4, r4, #1
 800c468:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c46a:	6814      	ldr	r4, [r2, #0]
 800c46c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800c470:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800c472:	6814      	ldr	r4, [r2, #0]
 800c474:	4321      	orrs	r1, r4
 800c476:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c478:	6811      	ldr	r1, [r2, #0]
 800c47a:	f041 0101 	orr.w	r1, r1, #1
 800c47e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c480:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c484:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c488:	bc70      	pop	{r4, r5, r6}
 800c48a:	4770      	bx	lr
    return HAL_BUSY;
 800c48c:	2002      	movs	r0, #2
}
 800c48e:	4770      	bx	lr
    return HAL_BUSY;
 800c490:	2002      	movs	r0, #2
}
 800c492:	bc70      	pop	{r4, r5, r6}
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop

0800c498 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c498:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800c49c:	2a20      	cmp	r2, #32
 800c49e:	d120      	bne.n	800c4e2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800c4a0:	4603      	mov	r3, r0
{
 800c4a2:	b470      	push	{r4, r5, r6}
 800c4a4:	b2d6      	uxtb	r6, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4a6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800c4aa:	2a01      	cmp	r2, #1
 800c4ac:	d01b      	beq.n	800c4e6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c4ae:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4b0:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4b2:	2500      	movs	r5, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4b4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c4b8:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800c4ba:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 800c4bc:	f024 0401 	bic.w	r4, r4, #1
 800c4c0:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800c4c2:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800c4c4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800c4c8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800c4cc:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c4ce:	6811      	ldr	r1, [r2, #0]
 800c4d0:	f041 0101 	orr.w	r1, r1, #1
 800c4d4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c4d6:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c4da:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c4de:	bc70      	pop	{r4, r5, r6}
 800c4e0:	4770      	bx	lr
    return HAL_BUSY;
 800c4e2:	2002      	movs	r0, #2
}
 800c4e4:	4770      	bx	lr
    return HAL_BUSY;
 800c4e6:	2002      	movs	r0, #2
}
 800c4e8:	bc70      	pop	{r4, r5, r6}
 800c4ea:	4770      	bx	lr

0800c4ec <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop

0800c4f0 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d06d      	beq.n	800c5d0 <HAL_LTDC_Init+0xe0>
{
 800c4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c4f6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c500:	2b00      	cmp	r3, #0
 800c502:	d060      	beq.n	800c5c6 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c504:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c506:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c508:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c50a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c50c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c510:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c512:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c514:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c518:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c51c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c51e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c520:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c522:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c526:	4e2b      	ldr	r6, [pc, #172]	; (800c5d4 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c528:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c52a:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c52c:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800c52e:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c530:	4302      	orrs	r2, r0
 800c532:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c534:	689a      	ldr	r2, [r3, #8]
 800c536:	4032      	ands	r2, r6
 800c538:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c53a:	6898      	ldr	r0, [r3, #8]
 800c53c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c540:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c542:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c546:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c54a:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c54c:	68d8      	ldr	r0, [r3, #12]
 800c54e:	4030      	ands	r0, r6
 800c550:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c558:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c55a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c55e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c562:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c564:	691a      	ldr	r2, [r3, #16]
 800c566:	4032      	ands	r2, r6
 800c568:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c56a:	6918      	ldr	r0, [r3, #16]
 800c56c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c570:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c572:	ea40 000c 	orr.w	r0, r0, ip
 800c576:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c578:	6958      	ldr	r0, [r3, #20]
 800c57a:	4006      	ands	r6, r0
 800c57c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c57e:	695a      	ldr	r2, [r3, #20]
 800c580:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c582:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c586:	4302      	orrs	r2, r0
 800c588:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c58a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c58c:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c590:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c594:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c598:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c59a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c59c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800c5a0:	4302      	orrs	r2, r0
  return HAL_OK;
 800c5a2:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c5a4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800c5a8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800c5ac:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c5ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5b0:	f042 0206 	orr.w	r2, r2, #6
 800c5b4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800c5b6:	699a      	ldr	r2, [r3, #24]
 800c5b8:	432a      	orrs	r2, r5
 800c5ba:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c5bc:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800c5c0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800c5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800c5c6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800c5ca:	f7ff ff8f 	bl	800c4ec <HAL_LTDC_MspInit>
 800c5ce:	e799      	b.n	800c504 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800c5d0:	2001      	movs	r0, #1
}
 800c5d2:	4770      	bx	lr
 800c5d4:	f000f800 	.word	0xf000f800

0800c5d8 <HAL_LTDC_ErrorCallback>:
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop

0800c5dc <HAL_LTDC_LineEventCallback>:
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop

0800c5e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c5e2:	6803      	ldr	r3, [r0, #0]
{
 800c5e4:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c5e6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c5e8:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c5ea:	0769      	lsls	r1, r5, #29
 800c5ec:	d501      	bpl.n	800c5f2 <HAL_LTDC_IRQHandler+0x12>
 800c5ee:	0772      	lsls	r2, r6, #29
 800c5f0:	d41d      	bmi.n	800c62e <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c5f2:	07ab      	lsls	r3, r5, #30
 800c5f4:	d501      	bpl.n	800c5fa <HAL_LTDC_IRQHandler+0x1a>
 800c5f6:	07b7      	lsls	r7, r6, #30
 800c5f8:	d42d      	bmi.n	800c656 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c5fa:	07e8      	lsls	r0, r5, #31
 800c5fc:	d501      	bpl.n	800c602 <HAL_LTDC_IRQHandler+0x22>
 800c5fe:	07f1      	lsls	r1, r6, #31
 800c600:	d440      	bmi.n	800c684 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c602:	072a      	lsls	r2, r5, #28
 800c604:	d501      	bpl.n	800c60a <HAL_LTDC_IRQHandler+0x2a>
 800c606:	0733      	lsls	r3, r6, #28
 800c608:	d400      	bmi.n	800c60c <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c60c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c60e:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800c610:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800c612:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c616:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c618:	f022 0208 	bic.w	r2, r2, #8
 800c61c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c61e:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800c620:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c624:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c628:	f7f4 ff0a 	bl	8001440 <HAL_LTDC_ReloadEventCallback>
}
 800c62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c630:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800c632:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c634:	f022 0204 	bic.w	r2, r2, #4
 800c638:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c63a:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c63c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800c640:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c64c:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800c650:	f7ff ffc2 	bl	800c5d8 <HAL_LTDC_ErrorCallback>
 800c654:	e7cd      	b.n	800c5f2 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c656:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c658:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c65a:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c65c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c65e:	f022 0202 	bic.w	r2, r2, #2
 800c662:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 800c664:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c666:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 800c668:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c66a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800c66e:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c672:	f043 0302 	orr.w	r3, r3, #2
 800c676:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c67a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800c67e:	f7ff ffab 	bl	800c5d8 <HAL_LTDC_ErrorCallback>
 800c682:	e7ba      	b.n	800c5fa <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c684:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c686:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 800c688:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 800c68a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c68c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c68e:	f022 0201 	bic.w	r2, r2, #1
 800c692:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c694:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800c696:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c69a:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800c69e:	f7ff ff9d 	bl	800c5dc <HAL_LTDC_LineEventCallback>
 800c6a2:	e7ae      	b.n	800c602 <HAL_LTDC_IRQHandler+0x22>

0800c6a4 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c6a4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	f000 80b7 	beq.w	800c81c <HAL_LTDC_ConfigLayer+0x178>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c6ae:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c6b2:	2302      	movs	r3, #2
{
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c6b8:	f04f 0834 	mov.w	r8, #52	; 0x34
 800c6bc:	460d      	mov	r5, r1
 800c6be:	4689      	mov	r9, r1
  __HAL_LOCK(hltdc);
 800c6c0:	f04f 0101 	mov.w	r1, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c6c4:	fb08 0202 	mla	r2, r8, r2, r0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c6c8:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hltdc);
 800c6ca:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c6d4:	f102 0838 	add.w	r8, r2, #56	; 0x38
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c6d8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c6dc:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c6e0:	f8df e144 	ldr.w	lr, [pc, #324]	; 800c828 <HAL_LTDC_ConfigLayer+0x184>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c6e4:	eb07 040c 	add.w	r4, r7, ip
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c6e8:	f3ca 4a0b 	ubfx	sl, sl, #16, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c6ec:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c6f0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800c6f4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c6f8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800c6fc:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c700:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c704:	6862      	ldr	r2, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c706:	f8d9 3000 	ldr.w	r3, [r9]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c70a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c70e:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c712:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c714:	6062      	str	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c716:	68f9      	ldr	r1, [r7, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c718:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c71a:	f8d5 8000 	ldr.w	r8, [r5]
 800c71e:	f3c1 410b 	ubfx	r1, r1, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c722:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c726:	f108 0001 	add.w	r0, r8, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c72a:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c72c:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c72e:	6928      	ldr	r0, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c730:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c732:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c736:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c73a:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c73c:	68f9      	ldr	r1, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c73e:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c742:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c746:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c74a:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c74c:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c750:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c754:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800c758:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800c75c:	445a      	add	r2, fp
 800c75e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c762:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	f022 0207 	bic.w	r2, r2, #7
 800c76a:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c76c:	6120      	str	r0, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c76e:	69a2      	ldr	r2, [r4, #24]
 800c770:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c772:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c776:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c77a:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c77c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800c780:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800c784:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c788:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c78a:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c78e:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c790:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c794:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c796:	6962      	ldr	r2, [r4, #20]
 800c798:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c79c:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c79e:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c7a2:	69e2      	ldr	r2, [r4, #28]
 800c7a4:	ea02 0e0e 	and.w	lr, r2, lr
 800c7a8:	f8c4 e01c 	str.w	lr, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c7ac:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c7ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c7b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c7b6:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c7b8:	bb28      	cbnz	r0, 800c806 <HAL_LTDC_ConfigLayer+0x162>
  {
    tmp = 4U;
 800c7ba:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7bc:	eba3 0308 	sub.w	r3, r3, r8
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c7c0:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7c4:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c7c8:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7ca:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c7ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7d0:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c7d2:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c7da:	4a12      	ldr	r2, [pc, #72]	; (800c824 <HAL_LTDC_ConfigLayer+0x180>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c7dc:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 800c7de:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c7e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800c7e4:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c7e6:	401a      	ands	r2, r3
 800c7e8:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c7ea:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c7ee:	f857 300c 	ldr.w	r3, [r7, ip]
 800c7f2:	432b      	orrs	r3, r5
 800c7f4:	f847 300c 	str.w	r3, [r7, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c7f8:	627d      	str	r5, [r7, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c7fa:	f886 50a1 	strb.w	r5, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c7fe:	f886 10a0 	strb.w	r1, [r6, #160]	; 0xa0
}
 800c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c806:	2801      	cmp	r0, #1
 800c808:	d00a      	beq.n	800c820 <HAL_LTDC_ConfigLayer+0x17c>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c80a:	1e82      	subs	r2, r0, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c80c:	2a02      	cmp	r2, #2
 800c80e:	d903      	bls.n	800c818 <HAL_LTDC_ConfigLayer+0x174>
 800c810:	2807      	cmp	r0, #7
 800c812:	d001      	beq.n	800c818 <HAL_LTDC_ConfigLayer+0x174>
    tmp = 1U;
 800c814:	2201      	movs	r2, #1
 800c816:	e7d1      	b.n	800c7bc <HAL_LTDC_ConfigLayer+0x118>
    tmp = 2U;
 800c818:	2202      	movs	r2, #2
 800c81a:	e7cf      	b.n	800c7bc <HAL_LTDC_ConfigLayer+0x118>
  __HAL_LOCK(hltdc);
 800c81c:	2002      	movs	r0, #2
}
 800c81e:	4770      	bx	lr
    tmp = 3U;
 800c820:	2203      	movs	r2, #3
 800c822:	e7cb      	b.n	800c7bc <HAL_LTDC_ConfigLayer+0x118>
 800c824:	fffff800 	.word	0xfffff800
 800c828:	fffff8f8 	.word	0xfffff8f8

0800c82c <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800c82c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800c830:	2a01      	cmp	r2, #1
 800c832:	d013      	beq.n	800c85c <HAL_LTDC_Reload+0x30>
 800c834:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c836:	2002      	movs	r0, #2
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c838:	681a      	ldr	r2, [r3, #0]
{
 800c83a:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c83c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c840:	2500      	movs	r5, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c842:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800c844:	2601      	movs	r6, #1
  return HAL_OK;
 800c846:	4628      	mov	r0, r5
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c848:	f044 0408 	orr.w	r4, r4, #8
 800c84c:	6354      	str	r4, [r2, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 800c84e:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c850:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c854:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
}
 800c858:	bc70      	pop	{r4, r5, r6}
 800c85a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800c85c:	2002      	movs	r0, #2
}
 800c85e:	4770      	bx	lr

0800c860 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c864:	f7fc fb32 	bl	8008ecc <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c868:	2c00      	cmp	r4, #0
 800c86a:	d05a      	beq.n	800c922 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c86c:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c86e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800c870:	2100      	movs	r1, #0
 800c872:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c874:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800c878:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	f022 0201 	bic.w	r2, r2, #1
 800c882:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c884:	e005      	b.n	800c892 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800c886:	f7fc fb21 	bl	8008ecc <HAL_GetTick>
 800c88a:	1b43      	subs	r3, r0, r5
 800c88c:	2b05      	cmp	r3, #5
 800c88e:	d841      	bhi.n	800c914 <HAL_MDMA_Init+0xb4>
 800c890:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	07d2      	lsls	r2, r2, #31
 800c896:	d4f6      	bmi.n	800c886 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c898:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800c89c:	69e1      	ldr	r1, [r4, #28]
 800c89e:	4302      	orrs	r2, r0
 800c8a0:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c8a8:	432a      	orrs	r2, r5
 800c8aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800c8ac:	4302      	orrs	r2, r0
 800c8ae:	68a0      	ldr	r0, [r4, #8]
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c8b4:	432a      	orrs	r2, r5
 800c8b6:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c8b8:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c8ba:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c8bc:	6920      	ldr	r0, [r4, #16]
 800c8be:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c8c0:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c8c2:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c8c6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c8ca:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c8cc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c8ce:	d103      	bne.n	800c8d8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c8d0:	691a      	ldr	r2, [r3, #16]
 800c8d2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800c8d6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c8d8:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c8da:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c8dc:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 800c8de:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c8e0:	db30      	blt.n	800c944 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c8e2:	b292      	uxth	r2, r2
 800c8e4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c8e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c8e8:	2a00      	cmp	r2, #0
 800c8ea:	db1c      	blt.n	800c926 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c8ec:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c8ee:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c8f2:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800c8f6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c8f8:	d021      	beq.n	800c93e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c8fa:	b2c9      	uxtb	r1, r1
 800c8fc:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c8fe:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800c900:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800c902:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800c904:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c906:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800c908:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800c90a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800c90e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800c912:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c914:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c916:	2303      	movs	r3, #3
      return HAL_ERROR;
 800c918:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c91a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c91c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c920:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c922:	2001      	movs	r0, #1
}
 800c924:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c926:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c928:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c92a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c92e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800c932:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c934:	6a18      	ldr	r0, [r3, #32]
 800c936:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800c93a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c93c:	d1dd      	bne.n	800c8fa <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800c93e:	2200      	movs	r2, #0
 800c940:	629a      	str	r2, [r3, #40]	; 0x28
 800c942:	e7dc      	b.n	800c8fe <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c944:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c946:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c948:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c94c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c94e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c950:	621a      	str	r2, [r3, #32]
 800c952:	e7c8      	b.n	800c8e6 <HAL_MDMA_Init+0x86>

0800c954 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800c954:	2800      	cmp	r0, #0
 800c956:	d06a      	beq.n	800ca2e <HAL_MDMA_Start_IT+0xda>
{
 800c958:	b4f0      	push	{r4, r5, r6, r7}
 800c95a:	4604      	mov	r4, r0
  __HAL_LOCK(hmdma);
 800c95c:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800c960:	2801      	cmp	r0, #1
 800c962:	d06d      	beq.n	800ca40 <HAL_MDMA_Start_IT+0xec>
 800c964:	2501      	movs	r5, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c966:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800c96a:	42a8      	cmp	r0, r5
  __HAL_LOCK(hmdma);
 800c96c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c970:	d005      	beq.n	800c97e <HAL_MDMA_Start_IT+0x2a>
    __HAL_UNLOCK(hmdma);
 800c972:	2300      	movs	r3, #0
    return HAL_BUSY;
 800c974:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
 800c976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c97a:	bcf0      	pop	{r4, r5, r6, r7}
 800c97c:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800c97e:	6825      	ldr	r5, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800c980:	2602      	movs	r6, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c982:	2000      	movs	r0, #0
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c984:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800c988:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800c98c:	f04f 0c1f 	mov.w	ip, #31
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c990:	66a0      	str	r0, [r4, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c992:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
 800c996:	68ef      	ldr	r7, [r5, #12]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c998:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c99c:	9e04      	ldr	r6, [sp, #16]
    __HAL_MDMA_DISABLE(hmdma);
 800c99e:	f027 0701 	bic.w	r7, r7, #1
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c9a2:	f106 36ff 	add.w	r6, r6, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 800c9a6:	60ef      	str	r7, [r5, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c9a8:	696f      	ldr	r7, [r5, #20]
 800c9aa:	ea00 0007 	and.w	r0, r0, r7
 800c9ae:	ea43 0300 	orr.w	r3, r3, r0
 800c9b2:	616b      	str	r3, [r5, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c9b4:	696b      	ldr	r3, [r5, #20]
 800c9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9ba:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 800c9be:	616b      	str	r3, [r5, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800c9c0:	f8c5 c004 	str.w	ip, [r5, #4]
  hmdma->Instance->CDAR = DstAddress;
 800c9c4:	61ea      	str	r2, [r5, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800c9c6:	61a9      	str	r1, [r5, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800c9c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9ca:	bf0c      	ite	eq
 800c9cc:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800c9d0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c9d4:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800c9d8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800c9da:	62ab      	str	r3, [r5, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800c9dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9de:	bf0c      	ite	eq
 800c9e0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800c9e4:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 800c9e8:	62ab      	str	r3, [r5, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800c9ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c9ec:	626b      	str	r3, [r5, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800c9ee:	68eb      	ldr	r3, [r5, #12]
 800c9f0:	f043 0306 	orr.w	r3, r3, #6
 800c9f4:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800c9f6:	b11a      	cbz	r2, 800ca00 <HAL_MDMA_Start_IT+0xac>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800c9f8:	68eb      	ldr	r3, [r5, #12]
 800c9fa:	f043 0310 	orr.w	r3, r3, #16
 800c9fe:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ca00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ca02:	b11b      	cbz	r3, 800ca0c <HAL_MDMA_Start_IT+0xb8>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ca04:	68eb      	ldr	r3, [r5, #12]
 800ca06:	f043 0308 	orr.w	r3, r3, #8
 800ca0a:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800ca0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ca0e:	b11b      	cbz	r3, 800ca18 <HAL_MDMA_Start_IT+0xc4>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800ca10:	68eb      	ldr	r3, [r5, #12]
 800ca12:	f043 0320 	orr.w	r3, r3, #32
 800ca16:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800ca18:	68eb      	ldr	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ca1a:	6862      	ldr	r2, [r4, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800ca1c:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ca20:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800ca24:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ca26:	d004      	beq.n	800ca32 <HAL_MDMA_Start_IT+0xde>
  return HAL_OK;
 800ca28:	2000      	movs	r0, #0
}
 800ca2a:	bcf0      	pop	{r4, r5, r6, r7}
 800ca2c:	4770      	bx	lr
    return HAL_ERROR;
 800ca2e:	2001      	movs	r0, #1
}
 800ca30:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ca32:	68eb      	ldr	r3, [r5, #12]
  return HAL_OK;
 800ca34:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ca36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca3a:	60eb      	str	r3, [r5, #12]
}
 800ca3c:	bcf0      	pop	{r4, r5, r6, r7}
 800ca3e:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 800ca40:	2002      	movs	r0, #2
}
 800ca42:	bcf0      	pop	{r4, r5, r6, r7}
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop

0800ca48 <HAL_MDMA_IRQHandler>:
{
 800ca48:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t count = 0;
 800ca4a:	2300      	movs	r3, #0
{
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	b082      	sub	sp, #8
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ca50:	4a59      	ldr	r2, [pc, #356]	; (800cbb8 <HAL_MDMA_IRQHandler+0x170>)
 800ca52:	2101      	movs	r1, #1
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ca54:	f04f 40a4 	mov.w	r0, #1375731712	; 0x52000000
  __IO uint32_t count = 0;
 800ca58:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ca5a:	6823      	ldr	r3, [r4, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ca5c:	6800      	ldr	r0, [r0, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ca5e:	441a      	add	r2, r3
 800ca60:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800ca64:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ca68:	4202      	tst	r2, r0
 800ca6a:	f000 80a2 	beq.w	800cbb2 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ca6e:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ca70:	4952      	ldr	r1, [pc, #328]	; (800cbbc <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ca72:	07d2      	lsls	r2, r2, #31
  uint32_t timeout = SystemCoreClock / 9600U;
 800ca74:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ca76:	d529      	bpl.n	800cacc <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	0796      	lsls	r6, r2, #30
 800ca7c:	d526      	bpl.n	800cacc <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800ca7e:	68da      	ldr	r2, [r3, #12]
 800ca80:	f022 0202 	bic.w	r2, r2, #2
 800ca84:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800ca86:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800ca88:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800ca8a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800ca8c:	bf54      	ite	pl
 800ca8e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800ca92:	f041 0102 	orrmi.w	r1, r1, #2
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800ca96:	0596      	lsls	r6, r2, #22
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800ca98:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800ca9a:	d503      	bpl.n	800caa4 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800ca9c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800ca9e:	f041 0104 	orr.w	r1, r1, #4
 800caa2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800caa4:	05d0      	lsls	r0, r2, #23
 800caa6:	d503      	bpl.n	800cab0 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800caa8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800caaa:	f041 0108 	orr.w	r1, r1, #8
 800caae:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800cab0:	0551      	lsls	r1, r2, #21
 800cab2:	d503      	bpl.n	800cabc <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800cab4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800cab6:	f041 0110 	orr.w	r1, r1, #16
 800caba:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800cabc:	0516      	lsls	r6, r2, #20
 800cabe:	d503      	bpl.n	800cac8 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800cac0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800cac2:	f042 0220 	orr.w	r2, r2, #32
 800cac6:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800cac8:	2201      	movs	r2, #1
 800caca:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	06d0      	lsls	r0, r2, #27
 800cad0:	d509      	bpl.n	800cae6 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	0691      	lsls	r1, r2, #26
 800cad6:	d506      	bpl.n	800cae6 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800cad8:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800cada:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800cadc:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800cade:	b112      	cbz	r2, 800cae6 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800cae0:	4620      	mov	r0, r4
 800cae2:	4790      	blx	r2
 800cae4:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	0712      	lsls	r2, r2, #28
 800caea:	d509      	bpl.n	800cb00 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	06d6      	lsls	r6, r2, #27
 800caf0:	d506      	bpl.n	800cb00 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800caf2:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800caf4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800caf6:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800caf8:	b112      	cbz	r2, 800cb00 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800cafa:	4620      	mov	r0, r4
 800cafc:	4790      	blx	r2
 800cafe:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	0750      	lsls	r0, r2, #29
 800cb04:	d509      	bpl.n	800cb1a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800cb06:	68da      	ldr	r2, [r3, #12]
 800cb08:	0711      	lsls	r1, r2, #28
 800cb0a:	d506      	bpl.n	800cb1a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800cb0c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800cb0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800cb10:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800cb12:	b112      	cbz	r2, 800cb1a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800cb14:	4620      	mov	r0, r4
 800cb16:	4790      	blx	r2
 800cb18:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	0792      	lsls	r2, r2, #30
 800cb1e:	d516      	bpl.n	800cb4e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	0756      	lsls	r6, r2, #29
 800cb24:	d513      	bpl.n	800cb4e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800cb26:	68da      	ldr	r2, [r3, #12]
 800cb28:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800cb2c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800cb2e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800cb32:	2a04      	cmp	r2, #4
 800cb34:	d034      	beq.n	800cba0 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800cb36:	2602      	movs	r6, #2
      __HAL_UNLOCK(hmdma);
 800cb38:	2000      	movs	r0, #0
      hmdma->State = HAL_MDMA_STATE_READY;
 800cb3a:	2101      	movs	r1, #1
      if(hmdma->XferCpltCallback != NULL)
 800cb3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800cb3e:	605e      	str	r6, [r3, #4]
      __HAL_UNLOCK(hmdma);
 800cb40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800cb44:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800cb48:	b10a      	cbz	r2, 800cb4e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	4790      	blx	r2
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800cb4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d02e      	beq.n	800cbb2 <HAL_MDMA_IRQHandler+0x16a>
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cb54:	2304      	movs	r3, #4
    __HAL_MDMA_DISABLE(hmdma);
 800cb56:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cb58:	4a19      	ldr	r2, [pc, #100]	; (800cbc0 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cb5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800cb5e:	fba2 3205 	umull	r3, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 800cb62:	68cb      	ldr	r3, [r1, #12]
 800cb64:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800cb68:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800cb6a:	60cb      	str	r3, [r1, #12]
 800cb6c:	e002      	b.n	800cb74 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800cb6e:	68cb      	ldr	r3, [r1, #12]
 800cb70:	07d8      	lsls	r0, r3, #31
 800cb72:	d504      	bpl.n	800cb7e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800cb74:	9b01      	ldr	r3, [sp, #4]
 800cb76:	3301      	adds	r3, #1
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	d9f7      	bls.n	800cb6e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cb84:	68cb      	ldr	r3, [r1, #12]
 800cb86:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800cb88:	bf4c      	ite	mi
 800cb8a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800cb8c:	2301      	movpl	r3, #1
 800cb8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800cb92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cb94:	b16b      	cbz	r3, 800cbb2 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800cb96:	4620      	mov	r0, r4
}
 800cb98:	b002      	add	sp, #8
 800cb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hmdma->XferErrorCallback(hmdma);
 800cb9e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800cba0:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800cba2:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800cba4:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 800cba6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800cbaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1f1      	bne.n	800cb96 <HAL_MDMA_IRQHandler+0x14e>
}
 800cbb2:	b002      	add	sp, #8
 800cbb4:	bd70      	pop	{r4, r5, r6, pc}
 800cbb6:	bf00      	nop
 800cbb8:	adffffc0 	.word	0xadffffc0
 800cbbc:	240000b0 	.word	0x240000b0
 800cbc0:	1b4e81b5 	.word	0x1b4e81b5

0800cbc4 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cbc4:	4a1c      	ldr	r2, [pc, #112]	; (800cc38 <HAL_PWREx_ConfigSupply+0x74>)
 800cbc6:	68d3      	ldr	r3, [r2, #12]
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cbce:	68d3      	ldr	r3, [r2, #12]
{
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cbd4:	d005      	beq.n	800cbe2 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cbd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cbda:	1a18      	subs	r0, r3, r0
 800cbdc:	bf18      	it	ne
 800cbde:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800cbe0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cbe2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cbe6:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cbe8:	4303      	orrs	r3, r0
 800cbea:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800cbec:	f7fc f96e 	bl	8008ecc <HAL_GetTick>
 800cbf0:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cbf2:	e005      	b.n	800cc00 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cbf4:	f7fc f96a 	bl	8008ecc <HAL_GetTick>
 800cbf8:	1b43      	subs	r3, r0, r5
 800cbfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbfe:	d819      	bhi.n	800cc34 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cc00:	6873      	ldr	r3, [r6, #4]
 800cc02:	049a      	lsls	r2, r3, #18
 800cc04:	d5f6      	bpl.n	800cbf4 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800cc06:	f1a4 031d 	sub.w	r3, r4, #29
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d905      	bls.n	800cc1a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800cc0e:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800cc12:	2801      	cmp	r0, #1
 800cc14:	d901      	bls.n	800cc1a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800cc16:	2000      	movs	r0, #0
}
 800cc18:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800cc1a:	f7fc f957 	bl	8008ecc <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cc1e:	4d06      	ldr	r5, [pc, #24]	; (800cc38 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800cc20:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cc22:	68eb      	ldr	r3, [r5, #12]
 800cc24:	03db      	lsls	r3, r3, #15
 800cc26:	d4f6      	bmi.n	800cc16 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cc28:	f7fc f950 	bl	8008ecc <HAL_GetTick>
 800cc2c:	1b00      	subs	r0, r0, r4
 800cc2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cc32:	d9f6      	bls.n	800cc22 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 800cc34:	2001      	movs	r0, #1
}
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
 800cc38:	58024800 	.word	0x58024800

0800cc3c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc3c:	4b3b      	ldr	r3, [pc, #236]	; (800cd2c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800cc3e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800cc42:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cc44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800cc46:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800cc4a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cc4e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 800cc50:	d038      	beq.n	800ccc4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cc52:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cc56:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc5a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cc5e:	fb01 f105 	mul.w	r1, r1, r5
 800cc62:	2a01      	cmp	r2, #1
 800cc64:	ee07 1a90 	vmov	s15, r1
 800cc68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800cc6c:	d002      	beq.n	800cc74 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800cc6e:	2a02      	cmp	r2, #2
 800cc70:	d04e      	beq.n	800cd10 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800cc72:	b34a      	cbz	r2, 800ccc8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cc74:	ee07 0a90 	vmov	s15, r0
 800cc78:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800cd30 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800cc7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc82:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800cc86:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800cd34 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800cc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc8e:	ee06 3a90 	vmov	s13, r3
 800cc92:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800cc96:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cc9a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cc9e:	eee7 6a25 	vfma.f32	s13, s14, s11
 800cca2:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800cca6:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800cca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccaa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ccae:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ccb0:	ee07 3a90 	vmov	s15, r3
 800ccb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ccb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800ccc4:	bc30      	pop	{r4, r5}
 800ccc6:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	0692      	lsls	r2, r2, #26
 800cccc:	d527      	bpl.n	800cd1e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ccce:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ccd0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ccd4:	4a18      	ldr	r2, [pc, #96]	; (800cd38 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ccd6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ccda:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ccde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cce4:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cce6:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800cd34 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800ccea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccee:	ee06 2a10 	vmov	s12, r2
 800ccf2:	ee06 3a90 	vmov	s13, r3
 800ccf6:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800ccfa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ccfe:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800cd02:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cd06:	eee7 6a05 	vfma.f32	s13, s14, s10
 800cd0a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800cd0e:	e7ca      	b.n	800cca6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd10:	ee07 0a90 	vmov	s15, r0
 800cd14:	eddf 6a09 	vldr	s13, [pc, #36]	; 800cd3c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800cd18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd1c:	e7b0      	b.n	800cc80 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd1e:	ee07 0a90 	vmov	s15, r0
 800cd22:	eddf 6a07 	vldr	s13, [pc, #28]	; 800cd40 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800cd26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd2a:	e7a9      	b.n	800cc80 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800cd2c:	58024400 	.word	0x58024400
 800cd30:	4a742400 	.word	0x4a742400
 800cd34:	39000000 	.word	0x39000000
 800cd38:	03d09000 	.word	0x03d09000
 800cd3c:	4bbebc20 	.word	0x4bbebc20
 800cd40:	4c742400 	.word	0x4c742400

0800cd44 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f000 81fb 	beq.w	800d140 <HAL_RCC_OscConfig+0x3fc>
{
 800cd4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd4c:	6803      	ldr	r3, [r0, #0]
 800cd4e:	4604      	mov	r4, r0
 800cd50:	07d9      	lsls	r1, r3, #31
 800cd52:	d530      	bpl.n	800cdb6 <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd54:	49a4      	ldr	r1, [pc, #656]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cd56:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cd58:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd5a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cd5e:	2a10      	cmp	r2, #16
 800cd60:	f000 812e 	beq.w	800cfc0 <HAL_RCC_OscConfig+0x27c>
 800cd64:	2a18      	cmp	r2, #24
 800cd66:	f000 8126 	beq.w	800cfb6 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd6a:	6863      	ldr	r3, [r4, #4]
 800cd6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd70:	f000 8169 	beq.w	800d046 <HAL_RCC_OscConfig+0x302>
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 8181 	beq.w	800d07c <HAL_RCC_OscConfig+0x338>
 800cd7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd7e:	4b9a      	ldr	r3, [pc, #616]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	f000 827c 	beq.w	800d27e <HAL_RCC_OscConfig+0x53a>
 800cd86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800cd94:	f7fc f89a 	bl	8008ecc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd98:	4e93      	ldr	r6, [pc, #588]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd9a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800cd9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cda0:	e005      	b.n	800cdae <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cda2:	f7fc f893 	bl	8008ecc <HAL_GetTick>
 800cda6:	1b40      	subs	r0, r0, r5
 800cda8:	42b8      	cmp	r0, r7
 800cdaa:	f200 8165 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cdae:	6833      	ldr	r3, [r6, #0]
 800cdb0:	039b      	lsls	r3, r3, #14
 800cdb2:	d5f6      	bpl.n	800cda2 <HAL_RCC_OscConfig+0x5e>
 800cdb4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cdb6:	0799      	lsls	r1, r3, #30
 800cdb8:	d521      	bpl.n	800cdfe <HAL_RCC_OscConfig+0xba>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdba:	4a8b      	ldr	r2, [pc, #556]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cdbc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cdbe:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cdc0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800cdc4:	f040 80a8 	bne.w	800cf18 <HAL_RCC_OscConfig+0x1d4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cdc8:	4b87      	ldr	r3, [pc, #540]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	075b      	lsls	r3, r3, #29
 800cdce:	d503      	bpl.n	800cdd8 <HAL_RCC_OscConfig+0x94>
 800cdd0:	68e3      	ldr	r3, [r4, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 80ed 	beq.w	800cfb2 <HAL_RCC_OscConfig+0x26e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdd8:	f7fc f890 	bl	8008efc <HAL_GetREVID>
 800cddc:	f241 0303 	movw	r3, #4099	; 0x1003
 800cde0:	4298      	cmp	r0, r3
 800cde2:	f200 818b 	bhi.w	800d0fc <HAL_RCC_OscConfig+0x3b8>
 800cde6:	6922      	ldr	r2, [r4, #16]
 800cde8:	2a40      	cmp	r2, #64	; 0x40
 800cdea:	f000 8250 	beq.w	800d28e <HAL_RCC_OscConfig+0x54a>
 800cdee:	497e      	ldr	r1, [pc, #504]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cdf0:	684b      	ldr	r3, [r1, #4]
 800cdf2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cdf6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800cdfa:	604b      	str	r3, [r1, #4]
 800cdfc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cdfe:	06d9      	lsls	r1, r3, #27
 800ce00:	d456      	bmi.n	800ceb0 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce02:	071d      	lsls	r5, r3, #28
 800ce04:	d517      	bpl.n	800ce36 <HAL_RCC_OscConfig+0xf2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce06:	6963      	ldr	r3, [r4, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 80b4 	beq.w	800cf76 <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 800ce0e:	4b76      	ldr	r3, [pc, #472]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800ce10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce12:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800ce14:	f042 0201 	orr.w	r2, r2, #1
 800ce18:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ce1a:	f7fc f857 	bl	8008ecc <HAL_GetTick>
 800ce1e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce20:	e005      	b.n	800ce2e <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce22:	f7fc f853 	bl	8008ecc <HAL_GetTick>
 800ce26:	1b40      	subs	r0, r0, r5
 800ce28:	2802      	cmp	r0, #2
 800ce2a:	f200 8125 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce2e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800ce30:	0798      	lsls	r0, r3, #30
 800ce32:	d5f6      	bpl.n	800ce22 <HAL_RCC_OscConfig+0xde>
 800ce34:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce36:	069a      	lsls	r2, r3, #26
 800ce38:	d517      	bpl.n	800ce6a <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ce3a:	69a3      	ldr	r3, [r4, #24]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 8136 	beq.w	800d0ae <HAL_RCC_OscConfig+0x36a>
      __HAL_RCC_HSI48_ENABLE();
 800ce42:	4b69      	ldr	r3, [pc, #420]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800ce44:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce46:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 800ce48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800ce4e:	f7fc f83d 	bl	8008ecc <HAL_GetTick>
 800ce52:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce54:	e005      	b.n	800ce62 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ce56:	f7fc f839 	bl	8008ecc <HAL_GetTick>
 800ce5a:	1b40      	subs	r0, r0, r5
 800ce5c:	2802      	cmp	r0, #2
 800ce5e:	f200 810b 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ce62:	6833      	ldr	r3, [r6, #0]
 800ce64:	049f      	lsls	r7, r3, #18
 800ce66:	d5f6      	bpl.n	800ce56 <HAL_RCC_OscConfig+0x112>
 800ce68:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce6a:	0759      	lsls	r1, r3, #29
 800ce6c:	f100 80b2 	bmi.w	800cfd4 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce72:	b1d8      	cbz	r0, 800ceac <HAL_RCC_OscConfig+0x168>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ce74:	4b5c      	ldr	r3, [pc, #368]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800ce76:	691a      	ldr	r2, [r3, #16]
 800ce78:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800ce7c:	2a18      	cmp	r2, #24
 800ce7e:	f000 81d0 	beq.w	800d222 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_PLL_DISABLE();
 800ce82:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce84:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce86:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800ce88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ce8c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce8e:	f000 8163 	beq.w	800d158 <HAL_RCC_OscConfig+0x414>
        tickstart = HAL_GetTick();
 800ce92:	f7fc f81b 	bl	8008ecc <HAL_GetTick>
 800ce96:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce98:	e005      	b.n	800cea6 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce9a:	f7fc f817 	bl	8008ecc <HAL_GetTick>
 800ce9e:	1b00      	subs	r0, r0, r4
 800cea0:	2802      	cmp	r0, #2
 800cea2:	f200 80e9 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	019b      	lsls	r3, r3, #6
 800ceaa:	d4f6      	bmi.n	800ce9a <HAL_RCC_OscConfig+0x156>
  return HAL_OK;
 800ceac:	2000      	movs	r0, #0
}
 800ceae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ceb0:	4a4d      	ldr	r2, [pc, #308]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800ceb2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ceb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ceb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ceba:	2b08      	cmp	r3, #8
 800cebc:	d072      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x260>
 800cebe:	2b18      	cmp	r3, #24
 800cec0:	d06c      	beq.n	800cf9c <HAL_RCC_OscConfig+0x258>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800cec2:	69e3      	ldr	r3, [r4, #28]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 8105 	beq.w	800d0d4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_ENABLE();
 800ceca:	4b47      	ldr	r3, [pc, #284]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cecc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cece:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 800ced0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ced4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ced6:	f7fb fff9 	bl	8008ecc <HAL_GetTick>
 800ceda:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cedc:	e005      	b.n	800ceea <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cede:	f7fb fff5 	bl	8008ecc <HAL_GetTick>
 800cee2:	1b40      	subs	r0, r0, r5
 800cee4:	2802      	cmp	r0, #2
 800cee6:	f200 80c7 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ceea:	6833      	ldr	r3, [r6, #0]
 800ceec:	05db      	lsls	r3, r3, #23
 800ceee:	d5f6      	bpl.n	800cede <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cef0:	f7fc f804 	bl	8008efc <HAL_GetREVID>
 800cef4:	f241 0303 	movw	r3, #4099	; 0x1003
 800cef8:	4298      	cmp	r0, r3
 800cefa:	f200 81f1 	bhi.w	800d2e0 <HAL_RCC_OscConfig+0x59c>
 800cefe:	6a22      	ldr	r2, [r4, #32]
 800cf00:	6873      	ldr	r3, [r6, #4]
 800cf02:	2a20      	cmp	r2, #32
 800cf04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cf08:	bf0c      	ite	eq
 800cf0a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800cf0e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800cf12:	6073      	str	r3, [r6, #4]
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	e774      	b.n	800ce02 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cf18:	2b18      	cmp	r3, #24
 800cf1a:	f000 810d 	beq.w	800d138 <HAL_RCC_OscConfig+0x3f4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cf1e:	68e2      	ldr	r2, [r4, #12]
 800cf20:	2a00      	cmp	r2, #0
 800cf22:	f000 80f5 	beq.w	800d110 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cf26:	4930      	ldr	r1, [pc, #192]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cf28:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf2a:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cf2c:	f023 0319 	bic.w	r3, r3, #25
 800cf30:	4313      	orrs	r3, r2
 800cf32:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800cf34:	f7fb ffca 	bl	8008ecc <HAL_GetTick>
 800cf38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf3a:	e005      	b.n	800cf48 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cf3c:	f7fb ffc6 	bl	8008ecc <HAL_GetTick>
 800cf40:	1b40      	subs	r0, r0, r5
 800cf42:	2802      	cmp	r0, #2
 800cf44:	f200 8098 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf48:	6833      	ldr	r3, [r6, #0]
 800cf4a:	075f      	lsls	r7, r3, #29
 800cf4c:	d5f6      	bpl.n	800cf3c <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf4e:	f7fb ffd5 	bl	8008efc <HAL_GetREVID>
 800cf52:	f241 0303 	movw	r3, #4099	; 0x1003
 800cf56:	4298      	cmp	r0, r3
 800cf58:	f200 81cb 	bhi.w	800d2f2 <HAL_RCC_OscConfig+0x5ae>
 800cf5c:	6922      	ldr	r2, [r4, #16]
 800cf5e:	6873      	ldr	r3, [r6, #4]
 800cf60:	2a40      	cmp	r2, #64	; 0x40
 800cf62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cf66:	bf0c      	ite	eq
 800cf68:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800cf6c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800cf70:	6073      	str	r3, [r6, #4]
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	e743      	b.n	800cdfe <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 800cf76:	4b1c      	ldr	r3, [pc, #112]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cf78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cf7a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800cf7c:	f022 0201 	bic.w	r2, r2, #1
 800cf80:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800cf82:	f7fb ffa3 	bl	8008ecc <HAL_GetTick>
 800cf86:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cf88:	e004      	b.n	800cf94 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cf8a:	f7fb ff9f 	bl	8008ecc <HAL_GetTick>
 800cf8e:	1b40      	subs	r0, r0, r5
 800cf90:	2802      	cmp	r0, #2
 800cf92:	d871      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cf94:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800cf96:	0799      	lsls	r1, r3, #30
 800cf98:	d4f7      	bmi.n	800cf8a <HAL_RCC_OscConfig+0x246>
 800cf9a:	e74b      	b.n	800ce34 <HAL_RCC_OscConfig+0xf0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cf9c:	f002 0203 	and.w	r2, r2, #3
 800cfa0:	2a01      	cmp	r2, #1
 800cfa2:	d18e      	bne.n	800cec2 <HAL_RCC_OscConfig+0x17e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cfa4:	4b10      	ldr	r3, [pc, #64]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	05da      	lsls	r2, r3, #23
 800cfaa:	d552      	bpl.n	800d052 <HAL_RCC_OscConfig+0x30e>
 800cfac:	69e3      	ldr	r3, [r4, #28]
 800cfae:	2b80      	cmp	r3, #128	; 0x80
 800cfb0:	d04f      	beq.n	800d052 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800cfb2:	2001      	movs	r0, #1
}
 800cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cfb6:	f001 0103 	and.w	r1, r1, #3
 800cfba:	2902      	cmp	r1, #2
 800cfbc:	f47f aed5 	bne.w	800cd6a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cfc0:	4a09      	ldr	r2, [pc, #36]	; (800cfe8 <HAL_RCC_OscConfig+0x2a4>)
 800cfc2:	6812      	ldr	r2, [r2, #0]
 800cfc4:	0392      	lsls	r2, r2, #14
 800cfc6:	f57f aef6 	bpl.w	800cdb6 <HAL_RCC_OscConfig+0x72>
 800cfca:	6862      	ldr	r2, [r4, #4]
 800cfcc:	2a00      	cmp	r2, #0
 800cfce:	f47f aef2 	bne.w	800cdb6 <HAL_RCC_OscConfig+0x72>
 800cfd2:	e7ee      	b.n	800cfb2 <HAL_RCC_OscConfig+0x26e>
    PWR->CR1 |= PWR_CR1_DBP;
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <HAL_RCC_OscConfig+0x2a8>)
 800cfd6:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cfd8:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800cfda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfde:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800cfe0:	f7fb ff74 	bl	8008ecc <HAL_GetTick>
 800cfe4:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cfe6:	e008      	b.n	800cffa <HAL_RCC_OscConfig+0x2b6>
 800cfe8:	58024400 	.word	0x58024400
 800cfec:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cff0:	f7fb ff6c 	bl	8008ecc <HAL_GetTick>
 800cff4:	1b40      	subs	r0, r0, r5
 800cff6:	2864      	cmp	r0, #100	; 0x64
 800cff8:	d83e      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cffa:	6833      	ldr	r3, [r6, #0]
 800cffc:	05da      	lsls	r2, r3, #23
 800cffe:	d5f7      	bpl.n	800cff0 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d000:	68a3      	ldr	r3, [r4, #8]
 800d002:	2b01      	cmp	r3, #1
 800d004:	f000 817e 	beq.w	800d304 <HAL_RCC_OscConfig+0x5c0>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8149 	beq.w	800d2a0 <HAL_RCC_OscConfig+0x55c>
 800d00e:	2b05      	cmp	r3, #5
 800d010:	4bb0      	ldr	r3, [pc, #704]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d014:	f000 8185 	beq.w	800d322 <HAL_RCC_OscConfig+0x5de>
 800d018:	f022 0201 	bic.w	r2, r2, #1
 800d01c:	671a      	str	r2, [r3, #112]	; 0x70
 800d01e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d020:	f022 0204 	bic.w	r2, r2, #4
 800d024:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d026:	f7fb ff51 	bl	8008ecc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d02a:	4eaa      	ldr	r6, [pc, #680]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d02c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d030:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d032:	e004      	b.n	800d03e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d034:	f7fb ff4a 	bl	8008ecc <HAL_GetTick>
 800d038:	1b40      	subs	r0, r0, r5
 800d03a:	42b8      	cmp	r0, r7
 800d03c:	d81c      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d03e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d040:	079b      	lsls	r3, r3, #30
 800d042:	d5f7      	bpl.n	800d034 <HAL_RCC_OscConfig+0x2f0>
 800d044:	e714      	b.n	800ce70 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d046:	4aa3      	ldr	r2, [pc, #652]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d048:	6813      	ldr	r3, [r2, #0]
 800d04a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d04e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d050:	e6a0      	b.n	800cd94 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d052:	f7fb ff53 	bl	8008efc <HAL_GetREVID>
 800d056:	f241 0303 	movw	r3, #4099	; 0x1003
 800d05a:	4298      	cmp	r0, r3
 800d05c:	d872      	bhi.n	800d144 <HAL_RCC_OscConfig+0x400>
 800d05e:	6a22      	ldr	r2, [r4, #32]
 800d060:	2a20      	cmp	r2, #32
 800d062:	f000 8155 	beq.w	800d310 <HAL_RCC_OscConfig+0x5cc>
 800d066:	499b      	ldr	r1, [pc, #620]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d068:	684b      	ldr	r3, [r1, #4]
 800d06a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d06e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800d072:	604b      	str	r3, [r1, #4]
 800d074:	6823      	ldr	r3, [r4, #0]
 800d076:	e6c4      	b.n	800ce02 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800d078:	2003      	movs	r0, #3
}
 800d07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d07c:	4b95      	ldr	r3, [pc, #596]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d07e:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d082:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d084:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d086:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d092:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d094:	f7fb ff1a 	bl	8008ecc <HAL_GetTick>
 800d098:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d09a:	e004      	b.n	800d0a6 <HAL_RCC_OscConfig+0x362>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d09c:	f7fb ff16 	bl	8008ecc <HAL_GetTick>
 800d0a0:	1b40      	subs	r0, r0, r5
 800d0a2:	42b8      	cmp	r0, r7
 800d0a4:	d8e8      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d0a6:	6833      	ldr	r3, [r6, #0]
 800d0a8:	0398      	lsls	r0, r3, #14
 800d0aa:	d4f7      	bmi.n	800d09c <HAL_RCC_OscConfig+0x358>
 800d0ac:	e682      	b.n	800cdb4 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSI48_DISABLE();
 800d0ae:	4b89      	ldr	r3, [pc, #548]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d0b0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0b2:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 800d0b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d0b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800d0ba:	f7fb ff07 	bl	8008ecc <HAL_GetTick>
 800d0be:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0c0:	e004      	b.n	800d0cc <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d0c2:	f7fb ff03 	bl	8008ecc <HAL_GetTick>
 800d0c6:	1b40      	subs	r0, r0, r5
 800d0c8:	2802      	cmp	r0, #2
 800d0ca:	d8d5      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0cc:	6833      	ldr	r3, [r6, #0]
 800d0ce:	0498      	lsls	r0, r3, #18
 800d0d0:	d4f7      	bmi.n	800d0c2 <HAL_RCC_OscConfig+0x37e>
 800d0d2:	e6c9      	b.n	800ce68 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_DISABLE();
 800d0d4:	4b7f      	ldr	r3, [pc, #508]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d0d8:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800d0da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d0e0:	f7fb fef4 	bl	8008ecc <HAL_GetTick>
 800d0e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d0e6:	e004      	b.n	800d0f2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d0e8:	f7fb fef0 	bl	8008ecc <HAL_GetTick>
 800d0ec:	1b40      	subs	r0, r0, r5
 800d0ee:	2802      	cmp	r0, #2
 800d0f0:	d8c2      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d0f2:	6833      	ldr	r3, [r6, #0]
 800d0f4:	05df      	lsls	r7, r3, #23
 800d0f6:	d4f7      	bmi.n	800d0e8 <HAL_RCC_OscConfig+0x3a4>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	e682      	b.n	800ce02 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0fc:	4a75      	ldr	r2, [pc, #468]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d0fe:	6921      	ldr	r1, [r4, #16]
 800d100:	6853      	ldr	r3, [r2, #4]
 800d102:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d106:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d10a:	6053      	str	r3, [r2, #4]
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	e676      	b.n	800cdfe <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 800d110:	4b70      	ldr	r3, [pc, #448]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d112:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d114:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800d116:	f022 0201 	bic.w	r2, r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d11c:	f7fb fed6 	bl	8008ecc <HAL_GetTick>
 800d120:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d122:	e004      	b.n	800d12e <HAL_RCC_OscConfig+0x3ea>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d124:	f7fb fed2 	bl	8008ecc <HAL_GetTick>
 800d128:	1b40      	subs	r0, r0, r5
 800d12a:	2802      	cmp	r0, #2
 800d12c:	d8a4      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d12e:	6833      	ldr	r3, [r6, #0]
 800d130:	0758      	lsls	r0, r3, #29
 800d132:	d4f7      	bmi.n	800d124 <HAL_RCC_OscConfig+0x3e0>
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	e662      	b.n	800cdfe <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d138:	0792      	lsls	r2, r2, #30
 800d13a:	f47f aef0 	bne.w	800cf1e <HAL_RCC_OscConfig+0x1da>
 800d13e:	e643      	b.n	800cdc8 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800d140:	2001      	movs	r0, #1
}
 800d142:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d144:	4a63      	ldr	r2, [pc, #396]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d146:	6a21      	ldr	r1, [r4, #32]
 800d148:	68d3      	ldr	r3, [r2, #12]
 800d14a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800d14e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d152:	60d3      	str	r3, [r2, #12]
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	e654      	b.n	800ce02 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800d158:	f7fb feb8 	bl	8008ecc <HAL_GetTick>
 800d15c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d15e:	e004      	b.n	800d16a <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d160:	f7fb feb4 	bl	8008ecc <HAL_GetTick>
 800d164:	1b80      	subs	r0, r0, r6
 800d166:	2802      	cmp	r0, #2
 800d168:	d886      	bhi.n	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d16a:	682b      	ldr	r3, [r5, #0]
 800d16c:	0199      	lsls	r1, r3, #6
 800d16e:	d4f7      	bmi.n	800d160 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d170:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d172:	4b59      	ldr	r3, [pc, #356]	; (800d2d8 <HAL_RCC_OscConfig+0x594>)
 800d174:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d176:	4013      	ands	r3, r2
 800d178:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d17a:	4958      	ldr	r1, [pc, #352]	; (800d2dc <HAL_RCC_OscConfig+0x598>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d17c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d17e:	4e55      	ldr	r6, [pc, #340]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d180:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d184:	62ab      	str	r3, [r5, #40]	; 0x28
 800d186:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800d188:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800d18c:	3f01      	subs	r7, #1
 800d18e:	1e50      	subs	r0, r2, #1
 800d190:	3b01      	subs	r3, #1
 800d192:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d194:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800d198:	025b      	lsls	r3, r3, #9
 800d19a:	0400      	lsls	r0, r0, #16
 800d19c:	3a01      	subs	r2, #1
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800d1a4:	0612      	lsls	r2, r2, #24
 800d1a6:	4303      	orrs	r3, r0
 800d1a8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d1ac:	433b      	orrs	r3, r7
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800d1b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1b4:	f023 0301 	bic.w	r3, r3, #1
 800d1b8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d1ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800d1bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d1be:	4011      	ands	r1, r2
 800d1c0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800d1c4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d1c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d1ca:	f023 030c 	bic.w	r3, r3, #12
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d1d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d1d6:	f023 0302 	bic.w	r3, r3, #2
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d1de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1e4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d1ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d1f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800d1f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d1f8:	f043 0301 	orr.w	r3, r3, #1
 800d1fc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d204:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d206:	f7fb fe61 	bl	8008ecc <HAL_GetTick>
 800d20a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d20c:	e005      	b.n	800d21a <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d20e:	f7fb fe5d 	bl	8008ecc <HAL_GetTick>
 800d212:	1b00      	subs	r0, r0, r4
 800d214:	2802      	cmp	r0, #2
 800d216:	f63f af2f 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d21a:	6833      	ldr	r3, [r6, #0]
 800d21c:	019a      	lsls	r2, r3, #6
 800d21e:	d5f6      	bpl.n	800d20e <HAL_RCC_OscConfig+0x4ca>
 800d220:	e644      	b.n	800ceac <HAL_RCC_OscConfig+0x168>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d222:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d226:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d228:	f43f ae41 	beq.w	800ceae <HAL_RCC_OscConfig+0x16a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d22c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d230:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d232:	428b      	cmp	r3, r1
 800d234:	f47f aebd 	bne.w	800cfb2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d238:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d23c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d23e:	429a      	cmp	r2, r3
 800d240:	f47f aeb7 	bne.w	800cfb2 <HAL_RCC_OscConfig+0x26e>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d244:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d246:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800d24a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d24c:	429a      	cmp	r2, r3
 800d24e:	f47f aeb0 	bne.w	800cfb2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d254:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800d258:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d25a:	429a      	cmp	r2, r3
 800d25c:	f47f aea9 	bne.w	800cfb2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d260:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d262:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800d266:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d268:	429a      	cmp	r2, r3
 800d26a:	f47f aea2 	bne.w	800cfb2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d26e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d270:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800d274:	3801      	subs	r0, #1
  return HAL_OK;
 800d276:	1a28      	subs	r0, r5, r0
 800d278:	bf18      	it	ne
 800d27a:	2001      	movne	r0, #1
}
 800d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d27e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	e582      	b.n	800cd94 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d28e:	4a11      	ldr	r2, [pc, #68]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
 800d290:	6853      	ldr	r3, [r2, #4]
 800d292:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d29a:	6053      	str	r3, [r2, #4]
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	e5ae      	b.n	800cdfe <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2a0:	4b0c      	ldr	r3, [pc, #48]	; (800d2d4 <HAL_RCC_OscConfig+0x590>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d2a2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d2a8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2aa:	f022 0201 	bic.w	r2, r2, #1
 800d2ae:	671a      	str	r2, [r3, #112]	; 0x70
 800d2b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d2b2:	f022 0204 	bic.w	r2, r2, #4
 800d2b6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d2b8:	f7fb fe08 	bl	8008ecc <HAL_GetTick>
 800d2bc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d2be:	e005      	b.n	800d2cc <HAL_RCC_OscConfig+0x588>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d2c0:	f7fb fe04 	bl	8008ecc <HAL_GetTick>
 800d2c4:	1b40      	subs	r0, r0, r5
 800d2c6:	42b8      	cmp	r0, r7
 800d2c8:	f63f aed6 	bhi.w	800d078 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d2cc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d2ce:	0798      	lsls	r0, r3, #30
 800d2d0:	d4f6      	bmi.n	800d2c0 <HAL_RCC_OscConfig+0x57c>
 800d2d2:	e5cd      	b.n	800ce70 <HAL_RCC_OscConfig+0x12c>
 800d2d4:	58024400 	.word	0x58024400
 800d2d8:	fffffc0c 	.word	0xfffffc0c
 800d2dc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d2e0:	68f3      	ldr	r3, [r6, #12]
 800d2e2:	6a22      	ldr	r2, [r4, #32]
 800d2e4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800d2e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d2ec:	60f3      	str	r3, [r6, #12]
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	e587      	b.n	800ce02 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2f2:	6873      	ldr	r3, [r6, #4]
 800d2f4:	6922      	ldr	r2, [r4, #16]
 800d2f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d2fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d2fe:	6073      	str	r3, [r6, #4]
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	e57c      	b.n	800cdfe <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d304:	4a0b      	ldr	r2, [pc, #44]	; (800d334 <HAL_RCC_OscConfig+0x5f0>)
 800d306:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d308:	f043 0301 	orr.w	r3, r3, #1
 800d30c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d30e:	e68a      	b.n	800d026 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d310:	4a08      	ldr	r2, [pc, #32]	; (800d334 <HAL_RCC_OscConfig+0x5f0>)
 800d312:	6853      	ldr	r3, [r2, #4]
 800d314:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d31c:	6053      	str	r3, [r2, #4]
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	e56f      	b.n	800ce02 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d322:	f042 0204 	orr.w	r2, r2, #4
 800d326:	671a      	str	r2, [r3, #112]	; 0x70
 800d328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d32a:	f042 0201 	orr.w	r2, r2, #1
 800d32e:	671a      	str	r2, [r3, #112]	; 0x70
 800d330:	e679      	b.n	800d026 <HAL_RCC_OscConfig+0x2e2>
 800d332:	bf00      	nop
 800d334:	58024400 	.word	0x58024400

0800d338 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d338:	4a47      	ldr	r2, [pc, #284]	; (800d458 <HAL_RCC_GetSysClockFreq+0x120>)
 800d33a:	6913      	ldr	r3, [r2, #16]
 800d33c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d340:	2b10      	cmp	r3, #16
 800d342:	d004      	beq.n	800d34e <HAL_RCC_GetSysClockFreq+0x16>
 800d344:	2b18      	cmp	r3, #24
 800d346:	d00d      	beq.n	800d364 <HAL_RCC_GetSysClockFreq+0x2c>
 800d348:	b11b      	cbz	r3, 800d352 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800d34a:	4844      	ldr	r0, [pc, #272]	; (800d45c <HAL_RCC_GetSysClockFreq+0x124>)
 800d34c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d34e:	4844      	ldr	r0, [pc, #272]	; (800d460 <HAL_RCC_GetSysClockFreq+0x128>)
 800d350:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d352:	6813      	ldr	r3, [r2, #0]
 800d354:	0699      	lsls	r1, r3, #26
 800d356:	d54a      	bpl.n	800d3ee <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d358:	6813      	ldr	r3, [r2, #0]
 800d35a:	4842      	ldr	r0, [pc, #264]	; (800d464 <HAL_RCC_GetSysClockFreq+0x12c>)
 800d35c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d360:	40d8      	lsrs	r0, r3
 800d362:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d364:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800d366:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d368:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d36a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800d36c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d370:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d374:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 800d376:	d038      	beq.n	800d3ea <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d378:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d37c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d380:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d384:	fb01 f105 	mul.w	r1, r1, r5
 800d388:	2b01      	cmp	r3, #1
 800d38a:	ee07 1a90 	vmov	s15, r1
 800d38e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800d392:	d002      	beq.n	800d39a <HAL_RCC_GetSysClockFreq+0x62>
 800d394:	2b02      	cmp	r3, #2
 800d396:	d02c      	beq.n	800d3f2 <HAL_RCC_GetSysClockFreq+0xba>
 800d398:	b393      	cbz	r3, 800d400 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d39a:	ee07 0a90 	vmov	s15, r0
 800d39e:	eddf 6a32 	vldr	s13, [pc, #200]	; 800d468 <HAL_RCC_GetSysClockFreq+0x130>
 800d3a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d3a8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800d3ac:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800d46c <HAL_RCC_GetSysClockFreq+0x134>
 800d3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b4:	ee06 3a90 	vmov	s13, r3
 800d3b8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d3bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d3c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d3c4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800d3c8:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d3cc:	4b22      	ldr	r3, [pc, #136]	; (800d458 <HAL_RCC_GetSysClockFreq+0x120>)
 800d3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d3d4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3e6:	ee17 0a90 	vmov	r0, s15
}
 800d3ea:	bc30      	pop	{r4, r5}
 800d3ec:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d3ee:	481d      	ldr	r0, [pc, #116]	; (800d464 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800d3f0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d3f2:	ee07 0a90 	vmov	s15, r0
 800d3f6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800d470 <HAL_RCC_GetSysClockFreq+0x138>
 800d3fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3fe:	e7d2      	b.n	800d3a6 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d400:	6813      	ldr	r3, [r2, #0]
 800d402:	069b      	lsls	r3, r3, #26
 800d404:	d520      	bpl.n	800d448 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d406:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d408:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d40c:	4915      	ldr	r1, [pc, #84]	; (800d464 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d40e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d412:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d41a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d41c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d41e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800d46c <HAL_RCC_GetSysClockFreq+0x134>
 800d422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d426:	ee06 1a10 	vmov	s12, r1
 800d42a:	ee06 3a90 	vmov	s13, r3
 800d42e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800d432:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d436:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800d43a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d43e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800d442:	ee66 6a26 	vmul.f32	s13, s12, s13
 800d446:	e7c1      	b.n	800d3cc <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d448:	ee07 0a90 	vmov	s15, r0
 800d44c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800d474 <HAL_RCC_GetSysClockFreq+0x13c>
 800d450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d454:	e7a7      	b.n	800d3a6 <HAL_RCC_GetSysClockFreq+0x6e>
 800d456:	bf00      	nop
 800d458:	58024400 	.word	0x58024400
 800d45c:	003d0900 	.word	0x003d0900
 800d460:	017d7840 	.word	0x017d7840
 800d464:	03d09000 	.word	0x03d09000
 800d468:	4a742400 	.word	0x4a742400
 800d46c:	39000000 	.word	0x39000000
 800d470:	4bbebc20 	.word	0x4bbebc20
 800d474:	4c742400 	.word	0x4c742400

0800d478 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800d478:	2800      	cmp	r0, #0
 800d47a:	f000 810e 	beq.w	800d69a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d47e:	4a8d      	ldr	r2, [pc, #564]	; (800d6b4 <HAL_RCC_ClockConfig+0x23c>)
 800d480:	6813      	ldr	r3, [r2, #0]
 800d482:	f003 030f 	and.w	r3, r3, #15
 800d486:	428b      	cmp	r3, r1
{
 800d488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d48c:	4604      	mov	r4, r0
 800d48e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d490:	d20c      	bcs.n	800d4ac <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	f023 030f 	bic.w	r3, r3, #15
 800d498:	430b      	orrs	r3, r1
 800d49a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d49c:	6813      	ldr	r3, [r2, #0]
 800d49e:	f003 030f 	and.w	r3, r3, #15
 800d4a2:	428b      	cmp	r3, r1
 800d4a4:	d002      	beq.n	800d4ac <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800d4a6:	2001      	movs	r0, #1
}
 800d4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	075f      	lsls	r7, r3, #29
 800d4b0:	d50b      	bpl.n	800d4ca <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d4b2:	4981      	ldr	r1, [pc, #516]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d4b4:	6920      	ldr	r0, [r4, #16]
 800d4b6:	698a      	ldr	r2, [r1, #24]
 800d4b8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d4bc:	4290      	cmp	r0, r2
 800d4be:	d904      	bls.n	800d4ca <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d4c0:	698a      	ldr	r2, [r1, #24]
 800d4c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d4c6:	4302      	orrs	r2, r0
 800d4c8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4ca:	071e      	lsls	r6, r3, #28
 800d4cc:	d50b      	bpl.n	800d4e6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d4ce:	497a      	ldr	r1, [pc, #488]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d4d0:	6960      	ldr	r0, [r4, #20]
 800d4d2:	69ca      	ldr	r2, [r1, #28]
 800d4d4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d4d8:	4290      	cmp	r0, r2
 800d4da:	d904      	bls.n	800d4e6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d4dc:	69ca      	ldr	r2, [r1, #28]
 800d4de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d4e2:	4302      	orrs	r2, r0
 800d4e4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4e6:	06d8      	lsls	r0, r3, #27
 800d4e8:	d50b      	bpl.n	800d502 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4ea:	4973      	ldr	r1, [pc, #460]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d4ec:	69a0      	ldr	r0, [r4, #24]
 800d4ee:	69ca      	ldr	r2, [r1, #28]
 800d4f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800d4f4:	4290      	cmp	r0, r2
 800d4f6:	d904      	bls.n	800d502 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d4f8:	69ca      	ldr	r2, [r1, #28]
 800d4fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d4fe:	4302      	orrs	r2, r0
 800d500:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d502:	0699      	lsls	r1, r3, #26
 800d504:	d50b      	bpl.n	800d51e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d506:	496c      	ldr	r1, [pc, #432]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d508:	69e0      	ldr	r0, [r4, #28]
 800d50a:	6a0a      	ldr	r2, [r1, #32]
 800d50c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d510:	4290      	cmp	r0, r2
 800d512:	d904      	bls.n	800d51e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d514:	6a0a      	ldr	r2, [r1, #32]
 800d516:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d51a:	4302      	orrs	r2, r0
 800d51c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d51e:	079a      	lsls	r2, r3, #30
 800d520:	f140 80ad 	bpl.w	800d67e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d524:	4864      	ldr	r0, [pc, #400]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d526:	68e1      	ldr	r1, [r4, #12]
 800d528:	6982      	ldr	r2, [r0, #24]
 800d52a:	f002 020f 	and.w	r2, r2, #15
 800d52e:	4291      	cmp	r1, r2
 800d530:	d904      	bls.n	800d53c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d532:	6982      	ldr	r2, [r0, #24]
 800d534:	f022 020f 	bic.w	r2, r2, #15
 800d538:	430a      	orrs	r2, r1
 800d53a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d53c:	07d8      	lsls	r0, r3, #31
 800d53e:	d531      	bpl.n	800d5a4 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d540:	4a5d      	ldr	r2, [pc, #372]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d542:	68a1      	ldr	r1, [r4, #8]
 800d544:	6993      	ldr	r3, [r2, #24]
 800d546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d54a:	430b      	orrs	r3, r1
 800d54c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d54e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d550:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d552:	2902      	cmp	r1, #2
 800d554:	f000 80a3 	beq.w	800d69e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d558:	2903      	cmp	r1, #3
 800d55a:	f000 809a 	beq.w	800d692 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d55e:	2901      	cmp	r1, #1
 800d560:	f000 80a3 	beq.w	800d6aa <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d564:	0758      	lsls	r0, r3, #29
 800d566:	d59e      	bpl.n	800d4a6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d568:	4a53      	ldr	r2, [pc, #332]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d56a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d56e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d570:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d572:	f023 0307 	bic.w	r3, r3, #7
 800d576:	430b      	orrs	r3, r1
 800d578:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800d57a:	f7fb fca7 	bl	8008ecc <HAL_GetTick>
 800d57e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d580:	e005      	b.n	800d58e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d582:	f7fb fca3 	bl	8008ecc <HAL_GetTick>
 800d586:	1b80      	subs	r0, r0, r6
 800d588:	4540      	cmp	r0, r8
 800d58a:	f200 808c 	bhi.w	800d6a6 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	6862      	ldr	r2, [r4, #4]
 800d592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d596:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800d59a:	d1f2      	bne.n	800d582 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	0799      	lsls	r1, r3, #30
 800d5a0:	d506      	bpl.n	800d5b0 <HAL_RCC_ClockConfig+0x138>
 800d5a2:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d5a4:	4844      	ldr	r0, [pc, #272]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d5a6:	6982      	ldr	r2, [r0, #24]
 800d5a8:	f002 020f 	and.w	r2, r2, #15
 800d5ac:	428a      	cmp	r2, r1
 800d5ae:	d86a      	bhi.n	800d686 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d5b0:	4940      	ldr	r1, [pc, #256]	; (800d6b4 <HAL_RCC_ClockConfig+0x23c>)
 800d5b2:	680a      	ldr	r2, [r1, #0]
 800d5b4:	f002 020f 	and.w	r2, r2, #15
 800d5b8:	42aa      	cmp	r2, r5
 800d5ba:	d90a      	bls.n	800d5d2 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5bc:	680a      	ldr	r2, [r1, #0]
 800d5be:	f022 020f 	bic.w	r2, r2, #15
 800d5c2:	432a      	orrs	r2, r5
 800d5c4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5c6:	680a      	ldr	r2, [r1, #0]
 800d5c8:	f002 020f 	and.w	r2, r2, #15
 800d5cc:	42aa      	cmp	r2, r5
 800d5ce:	f47f af6a 	bne.w	800d4a6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d5d2:	075a      	lsls	r2, r3, #29
 800d5d4:	d50b      	bpl.n	800d5ee <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d5d6:	4938      	ldr	r1, [pc, #224]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d5d8:	6920      	ldr	r0, [r4, #16]
 800d5da:	698a      	ldr	r2, [r1, #24]
 800d5dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d5e0:	4290      	cmp	r0, r2
 800d5e2:	d204      	bcs.n	800d5ee <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d5e4:	698a      	ldr	r2, [r1, #24]
 800d5e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d5ea:	4302      	orrs	r2, r0
 800d5ec:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5ee:	071f      	lsls	r7, r3, #28
 800d5f0:	d50b      	bpl.n	800d60a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d5f2:	4931      	ldr	r1, [pc, #196]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d5f4:	6960      	ldr	r0, [r4, #20]
 800d5f6:	69ca      	ldr	r2, [r1, #28]
 800d5f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d5fc:	4290      	cmp	r0, r2
 800d5fe:	d204      	bcs.n	800d60a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d600:	69ca      	ldr	r2, [r1, #28]
 800d602:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d606:	4302      	orrs	r2, r0
 800d608:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d60a:	06de      	lsls	r6, r3, #27
 800d60c:	d50b      	bpl.n	800d626 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d60e:	492a      	ldr	r1, [pc, #168]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d610:	69a0      	ldr	r0, [r4, #24]
 800d612:	69ca      	ldr	r2, [r1, #28]
 800d614:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800d618:	4290      	cmp	r0, r2
 800d61a:	d204      	bcs.n	800d626 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d61c:	69ca      	ldr	r2, [r1, #28]
 800d61e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d622:	4302      	orrs	r2, r0
 800d624:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d626:	069d      	lsls	r5, r3, #26
 800d628:	d50b      	bpl.n	800d642 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d62a:	4a23      	ldr	r2, [pc, #140]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d62c:	69e1      	ldr	r1, [r4, #28]
 800d62e:	6a13      	ldr	r3, [r2, #32]
 800d630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d634:	4299      	cmp	r1, r3
 800d636:	d204      	bcs.n	800d642 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d638:	6a13      	ldr	r3, [r2, #32]
 800d63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d63e:	430b      	orrs	r3, r1
 800d640:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d642:	f7ff fe79 	bl	800d338 <HAL_RCC_GetSysClockFreq>
 800d646:	4b1c      	ldr	r3, [pc, #112]	; (800d6b8 <HAL_RCC_ClockConfig+0x240>)
 800d648:	4602      	mov	r2, r0
 800d64a:	481c      	ldr	r0, [pc, #112]	; (800d6bc <HAL_RCC_ClockConfig+0x244>)
 800d64c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d64e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d650:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800d654:	4d1a      	ldr	r5, [pc, #104]	; (800d6c0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d656:	f003 030f 	and.w	r3, r3, #15
 800d65a:	4c1a      	ldr	r4, [pc, #104]	; (800d6c4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d65c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d65e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d660:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800d664:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d666:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800d66a:	4d17      	ldr	r5, [pc, #92]	; (800d6c8 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d66c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d66e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800d672:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d674:	6023      	str	r3, [r4, #0]
}
 800d676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800d67a:	f7fb bbc5 	b.w	8008e08 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d67e:	07da      	lsls	r2, r3, #31
 800d680:	f53f af5e 	bmi.w	800d540 <HAL_RCC_ClockConfig+0xc8>
 800d684:	e794      	b.n	800d5b0 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d686:	6982      	ldr	r2, [r0, #24]
 800d688:	f022 020f 	bic.w	r2, r2, #15
 800d68c:	4311      	orrs	r1, r2
 800d68e:	6181      	str	r1, [r0, #24]
 800d690:	e78e      	b.n	800d5b0 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d692:	019f      	lsls	r7, r3, #6
 800d694:	f53f af68 	bmi.w	800d568 <HAL_RCC_ClockConfig+0xf0>
 800d698:	e705      	b.n	800d4a6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800d69a:	2001      	movs	r0, #1
}
 800d69c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d69e:	039b      	lsls	r3, r3, #14
 800d6a0:	f53f af62 	bmi.w	800d568 <HAL_RCC_ClockConfig+0xf0>
 800d6a4:	e6ff      	b.n	800d4a6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800d6a6:	2003      	movs	r0, #3
 800d6a8:	e6fe      	b.n	800d4a8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d6aa:	05de      	lsls	r6, r3, #23
 800d6ac:	f53f af5c 	bmi.w	800d568 <HAL_RCC_ClockConfig+0xf0>
 800d6b0:	e6f9      	b.n	800d4a6 <HAL_RCC_ClockConfig+0x2e>
 800d6b2:	bf00      	nop
 800d6b4:	52002000 	.word	0x52002000
 800d6b8:	58024400 	.word	0x58024400
 800d6bc:	0802c2b8 	.word	0x0802c2b8
 800d6c0:	24000190 	.word	0x24000190
 800d6c4:	240000b4 	.word	0x240000b4
 800d6c8:	240000b0 	.word	0x240000b0

0800d6cc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d6cc:	4a18      	ldr	r2, [pc, #96]	; (800d730 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6ce:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d6d0:	6913      	ldr	r3, [r2, #16]
 800d6d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6d6:	2b10      	cmp	r3, #16
 800d6d8:	d01a      	beq.n	800d710 <HAL_RCC_GetHCLKFreq+0x44>
 800d6da:	2b18      	cmp	r3, #24
 800d6dc:	d023      	beq.n	800d726 <HAL_RCC_GetHCLKFreq+0x5a>
 800d6de:	b1cb      	cbz	r3, 800d714 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 800d6e0:	4814      	ldr	r0, [pc, #80]	; (800d734 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d6e2:	4b13      	ldr	r3, [pc, #76]	; (800d730 <HAL_RCC_GetHCLKFreq+0x64>)
 800d6e4:	4914      	ldr	r1, [pc, #80]	; (800d738 <HAL_RCC_GetHCLKFreq+0x6c>)
 800d6e6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6e8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d6ea:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6ee:	4c13      	ldr	r4, [pc, #76]	; (800d73c <HAL_RCC_GetHCLKFreq+0x70>)
 800d6f0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d6f4:	4d12      	ldr	r5, [pc, #72]	; (800d740 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d6f6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6f8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d6fa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6fe:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d702:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d706:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 800d70a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d70c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800d70e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d710:	480c      	ldr	r0, [pc, #48]	; (800d744 <HAL_RCC_GetHCLKFreq+0x78>)
 800d712:	e7e6      	b.n	800d6e2 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d714:	6813      	ldr	r3, [r2, #0]
 800d716:	069b      	lsls	r3, r3, #26
 800d718:	d508      	bpl.n	800d72c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	480a      	ldr	r0, [pc, #40]	; (800d748 <HAL_RCC_GetHCLKFreq+0x7c>)
 800d71e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800d722:	40d0      	lsrs	r0, r2
 800d724:	e7dd      	b.n	800d6e2 <HAL_RCC_GetHCLKFreq+0x16>
 800d726:	f7ff fa89 	bl	800cc3c <HAL_RCC_GetSysClockFreq.part.0>
 800d72a:	e7da      	b.n	800d6e2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d72c:	4806      	ldr	r0, [pc, #24]	; (800d748 <HAL_RCC_GetHCLKFreq+0x7c>)
 800d72e:	e7d8      	b.n	800d6e2 <HAL_RCC_GetHCLKFreq+0x16>
 800d730:	58024400 	.word	0x58024400
 800d734:	003d0900 	.word	0x003d0900
 800d738:	0802c2b8 	.word	0x0802c2b8
 800d73c:	240000b4 	.word	0x240000b4
 800d740:	240000b0 	.word	0x240000b0
 800d744:	017d7840 	.word	0x017d7840
 800d748:	03d09000 	.word	0x03d09000

0800d74c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d74c:	4a1c      	ldr	r2, [pc, #112]	; (800d7c0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d74e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d750:	6913      	ldr	r3, [r2, #16]
 800d752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d756:	2b10      	cmp	r3, #16
 800d758:	d021      	beq.n	800d79e <HAL_RCC_GetPCLK1Freq+0x52>
 800d75a:	2b18      	cmp	r3, #24
 800d75c:	d02a      	beq.n	800d7b4 <HAL_RCC_GetPCLK1Freq+0x68>
 800d75e:	b303      	cbz	r3, 800d7a2 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800d760:	4818      	ldr	r0, [pc, #96]	; (800d7c4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d762:	4a17      	ldr	r2, [pc, #92]	; (800d7c0 <HAL_RCC_GetPCLK1Freq+0x74>)
 800d764:	4918      	ldr	r1, [pc, #96]	; (800d7c8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800d766:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d768:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d76a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800d76e:	4d17      	ldr	r5, [pc, #92]	; (800d7cc <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d770:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d774:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d776:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d778:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d77c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d780:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d782:	4c13      	ldr	r4, [pc, #76]	; (800d7d0 <HAL_RCC_GetPCLK1Freq+0x84>)
 800d784:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800d788:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d78a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d78c:	69d2      	ldr	r2, [r2, #28]
 800d78e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800d792:	5c88      	ldrb	r0, [r1, r2]
 800d794:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d798:	fa23 f000 	lsr.w	r0, r3, r0
 800d79c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d79e:	480d      	ldr	r0, [pc, #52]	; (800d7d4 <HAL_RCC_GetPCLK1Freq+0x88>)
 800d7a0:	e7df      	b.n	800d762 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7a2:	6813      	ldr	r3, [r2, #0]
 800d7a4:	069b      	lsls	r3, r3, #26
 800d7a6:	d508      	bpl.n	800d7ba <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d7a8:	6813      	ldr	r3, [r2, #0]
 800d7aa:	480b      	ldr	r0, [pc, #44]	; (800d7d8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800d7ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d7b0:	40d8      	lsrs	r0, r3
 800d7b2:	e7d6      	b.n	800d762 <HAL_RCC_GetPCLK1Freq+0x16>
 800d7b4:	f7ff fa42 	bl	800cc3c <HAL_RCC_GetSysClockFreq.part.0>
 800d7b8:	e7d3      	b.n	800d762 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d7ba:	4807      	ldr	r0, [pc, #28]	; (800d7d8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800d7bc:	e7d1      	b.n	800d762 <HAL_RCC_GetPCLK1Freq+0x16>
 800d7be:	bf00      	nop
 800d7c0:	58024400 	.word	0x58024400
 800d7c4:	003d0900 	.word	0x003d0900
 800d7c8:	0802c2b8 	.word	0x0802c2b8
 800d7cc:	240000b0 	.word	0x240000b0
 800d7d0:	240000b4 	.word	0x240000b4
 800d7d4:	017d7840 	.word	0x017d7840
 800d7d8:	03d09000 	.word	0x03d09000

0800d7dc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7dc:	4a1c      	ldr	r2, [pc, #112]	; (800d850 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d7de:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7e0:	6913      	ldr	r3, [r2, #16]
 800d7e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7e6:	2b10      	cmp	r3, #16
 800d7e8:	d021      	beq.n	800d82e <HAL_RCC_GetPCLK2Freq+0x52>
 800d7ea:	2b18      	cmp	r3, #24
 800d7ec:	d02a      	beq.n	800d844 <HAL_RCC_GetPCLK2Freq+0x68>
 800d7ee:	b303      	cbz	r3, 800d832 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800d7f0:	4818      	ldr	r0, [pc, #96]	; (800d854 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d7f2:	4a17      	ldr	r2, [pc, #92]	; (800d850 <HAL_RCC_GetPCLK2Freq+0x74>)
 800d7f4:	4918      	ldr	r1, [pc, #96]	; (800d858 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800d7f6:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d7f8:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d7fa:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800d7fe:	4d17      	ldr	r5, [pc, #92]	; (800d85c <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d800:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d804:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d806:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d808:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d80c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d810:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d812:	4c13      	ldr	r4, [pc, #76]	; (800d860 <HAL_RCC_GetPCLK2Freq+0x84>)
 800d814:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800d818:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d81a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d81c:	69d2      	ldr	r2, [r2, #28]
 800d81e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800d822:	5c88      	ldrb	r0, [r1, r2]
 800d824:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d828:	fa23 f000 	lsr.w	r0, r3, r0
 800d82c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d82e:	480d      	ldr	r0, [pc, #52]	; (800d864 <HAL_RCC_GetPCLK2Freq+0x88>)
 800d830:	e7df      	b.n	800d7f2 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d832:	6813      	ldr	r3, [r2, #0]
 800d834:	069b      	lsls	r3, r3, #26
 800d836:	d508      	bpl.n	800d84a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d838:	6813      	ldr	r3, [r2, #0]
 800d83a:	480b      	ldr	r0, [pc, #44]	; (800d868 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800d83c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d840:	40d8      	lsrs	r0, r3
 800d842:	e7d6      	b.n	800d7f2 <HAL_RCC_GetPCLK2Freq+0x16>
 800d844:	f7ff f9fa 	bl	800cc3c <HAL_RCC_GetSysClockFreq.part.0>
 800d848:	e7d3      	b.n	800d7f2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d84a:	4807      	ldr	r0, [pc, #28]	; (800d868 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800d84c:	e7d1      	b.n	800d7f2 <HAL_RCC_GetPCLK2Freq+0x16>
 800d84e:	bf00      	nop
 800d850:	58024400 	.word	0x58024400
 800d854:	003d0900 	.word	0x003d0900
 800d858:	0802c2b8 	.word	0x0802c2b8
 800d85c:	240000b0 	.word	0x240000b0
 800d860:	240000b4 	.word	0x240000b4
 800d864:	017d7840 	.word	0x017d7840
 800d868:	03d09000 	.word	0x03d09000

0800d86c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d86c:	4a3b      	ldr	r2, [pc, #236]	; (800d95c <RCCEx_PLL2_Config+0xf0>)
{
 800d86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d870:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800d872:	f003 0303 	and.w	r3, r3, #3
 800d876:	2b03      	cmp	r3, #3
 800d878:	d069      	beq.n	800d94e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d87a:	6813      	ldr	r3, [r2, #0]
 800d87c:	4606      	mov	r6, r0
 800d87e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d880:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800d882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d886:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d888:	f7fb fb20 	bl	8008ecc <HAL_GetTick>
 800d88c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d88e:	e004      	b.n	800d89a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d890:	f7fb fb1c 	bl	8008ecc <HAL_GetTick>
 800d894:	1b43      	subs	r3, r0, r5
 800d896:	2b02      	cmp	r3, #2
 800d898:	d857      	bhi.n	800d94a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	011a      	lsls	r2, r3, #4
 800d89e:	d4f7      	bmi.n	800d890 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d8a2:	6832      	ldr	r2, [r6, #0]
 800d8a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8a8:	492d      	ldr	r1, [pc, #180]	; (800d960 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800d8ae:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8b0:	6875      	ldr	r5, [r6, #4]
 800d8b2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800d8b6:	3d01      	subs	r5, #1
 800d8b8:	1e50      	subs	r0, r2, #1
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	6932      	ldr	r2, [r6, #16]
 800d8be:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800d8c2:	025b      	lsls	r3, r3, #9
 800d8c4:	0400      	lsls	r0, r0, #16
 800d8c6:	3a01      	subs	r2, #1
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800d8ce:	0612      	lsls	r2, r2, #24
 800d8d0:	4303      	orrs	r3, r0
 800d8d2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d8d6:	432b      	orrs	r3, r5
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d8dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d8de:	6972      	ldr	r2, [r6, #20]
 800d8e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d8e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d8ea:	69b2      	ldr	r2, [r6, #24]
 800d8ec:	f023 0320 	bic.w	r3, r3, #32
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d8f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d8f6:	f023 0310 	bic.w	r3, r3, #16
 800d8fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d8fe:	69f3      	ldr	r3, [r6, #28]
 800d900:	4011      	ands	r1, r2
 800d902:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800d906:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d90a:	f043 0310 	orr.w	r3, r3, #16
 800d90e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d912:	b1f7      	cbz	r7, 800d952 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d914:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d916:	bf0c      	ite	eq
 800d918:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d91c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800d920:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d922:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <RCCEx_PLL2_Config+0xf0>)
 800d924:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d926:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 800d928:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d92c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800d92e:	f7fb facd 	bl	8008ecc <HAL_GetTick>
 800d932:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d934:	e004      	b.n	800d940 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d936:	f7fb fac9 	bl	8008ecc <HAL_GetTick>
 800d93a:	1b00      	subs	r0, r0, r4
 800d93c:	2802      	cmp	r0, #2
 800d93e:	d804      	bhi.n	800d94a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	d5f7      	bpl.n	800d936 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800d946:	2000      	movs	r0, #0
}
 800d948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800d94a:	2003      	movs	r0, #3
}
 800d94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800d94e:	2001      	movs	r0, #1
}
 800d950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d956:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d958:	e7e3      	b.n	800d922 <RCCEx_PLL2_Config+0xb6>
 800d95a:	bf00      	nop
 800d95c:	58024400 	.word	0x58024400
 800d960:	ffff0007 	.word	0xffff0007

0800d964 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d964:	4a3b      	ldr	r2, [pc, #236]	; (800da54 <RCCEx_PLL3_Config+0xf0>)
{
 800d966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d968:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800d96a:	f003 0303 	and.w	r3, r3, #3
 800d96e:	2b03      	cmp	r3, #3
 800d970:	d069      	beq.n	800da46 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d972:	6813      	ldr	r3, [r2, #0]
 800d974:	4606      	mov	r6, r0
 800d976:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d978:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800d97a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d97e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d980:	f7fb faa4 	bl	8008ecc <HAL_GetTick>
 800d984:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d986:	e004      	b.n	800d992 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d988:	f7fb faa0 	bl	8008ecc <HAL_GetTick>
 800d98c:	1b43      	subs	r3, r0, r5
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d857      	bhi.n	800da42 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	009a      	lsls	r2, r3, #2
 800d996:	d4f7      	bmi.n	800d988 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d99a:	6832      	ldr	r2, [r6, #0]
 800d99c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9a0:	492d      	ldr	r1, [pc, #180]	; (800da58 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d9a2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d9a6:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9a8:	6875      	ldr	r5, [r6, #4]
 800d9aa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800d9ae:	3d01      	subs	r5, #1
 800d9b0:	1e50      	subs	r0, r2, #1
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	6932      	ldr	r2, [r6, #16]
 800d9b6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800d9ba:	025b      	lsls	r3, r3, #9
 800d9bc:	0400      	lsls	r0, r0, #16
 800d9be:	3a01      	subs	r2, #1
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800d9c6:	0612      	lsls	r2, r2, #24
 800d9c8:	4303      	orrs	r3, r0
 800d9ca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d9ce:	432b      	orrs	r3, r5
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9d6:	6972      	ldr	r2, [r6, #20]
 800d9d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9e2:	69b2      	ldr	r2, [r6, #24]
 800d9e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d9f6:	69f3      	ldr	r3, [r6, #28]
 800d9f8:	4011      	ands	r1, r2
 800d9fa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800d9fe:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800da02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da06:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800da0a:	b1f7      	cbz	r7, 800da4a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800da0c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da0e:	bf0c      	ite	eq
 800da10:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da14:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800da18:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da1a:	4b0e      	ldr	r3, [pc, #56]	; (800da54 <RCCEx_PLL3_Config+0xf0>)
 800da1c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da1e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 800da20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800da24:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800da26:	f7fb fa51 	bl	8008ecc <HAL_GetTick>
 800da2a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da2c:	e004      	b.n	800da38 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800da2e:	f7fb fa4d 	bl	8008ecc <HAL_GetTick>
 800da32:	1b00      	subs	r0, r0, r4
 800da34:	2802      	cmp	r0, #2
 800da36:	d804      	bhi.n	800da42 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	d5f7      	bpl.n	800da2e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800da3e:	2000      	movs	r0, #0
}
 800da40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800da42:	2003      	movs	r0, #3
}
 800da44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800da46:	2001      	movs	r0, #1
}
 800da48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da50:	e7e3      	b.n	800da1a <RCCEx_PLL3_Config+0xb6>
 800da52:	bf00      	nop
 800da54:	58024400 	.word	0x58024400
 800da58:	ffff0007 	.word	0xffff0007

0800da5c <HAL_RCCEx_PeriphCLKConfig>:
{
 800da5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800da60:	6803      	ldr	r3, [r0, #0]
{
 800da62:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800da64:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800da68:	d01c      	beq.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800da6a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800da6c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800da70:	f000 84bb 	beq.w	800e3ea <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800da74:	d823      	bhi.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x62>
 800da76:	2a00      	cmp	r2, #0
 800da78:	f000 8422 	beq.w	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0x864>
 800da7c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800da80:	d120      	bne.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800da82:	2102      	movs	r1, #2
 800da84:	3004      	adds	r0, #4
 800da86:	f7ff fef1 	bl	800d86c <RCCEx_PLL2_Config>
 800da8a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800da8c:	2e00      	cmp	r6, #0
 800da8e:	f040 84b4 	bne.w	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800da92:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800da94:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800da96:	48b0      	ldr	r0, [pc, #704]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800da98:	2600      	movs	r6, #0
 800da9a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800da9c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800daa0:	430a      	orrs	r2, r1
 800daa2:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800daa4:	05da      	lsls	r2, r3, #23
 800daa6:	d511      	bpl.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800daa8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800daaa:	2a04      	cmp	r2, #4
 800daac:	f200 8574 	bhi.w	800e598 <HAL_RCCEx_PeriphCLKConfig+0xb3c>
 800dab0:	e8df f012 	tbh	[pc, r2, lsl #1]
 800dab4:	04b504ae 	.word	0x04b504ae
 800dab8:	033104a6 	.word	0x033104a6
 800dabc:	0331      	.short	0x0331
    switch(PeriphClkInit->SpdifrxClockSelection)
 800dabe:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800dac2:	d0e8      	beq.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dac4:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800dac6:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800daca:	d4ed      	bmi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800dacc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dace:	059f      	lsls	r7, r3, #22
 800dad0:	d51b      	bpl.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800dad2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800dad4:	2a80      	cmp	r2, #128	; 0x80
 800dad6:	f000 84ab 	beq.w	800e430 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800dada:	f200 8127 	bhi.w	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800dade:	2a00      	cmp	r2, #0
 800dae0:	f000 83dc 	beq.w	800e29c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800dae4:	2a40      	cmp	r2, #64	; 0x40
 800dae6:	f040 8128 	bne.w	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800daea:	2100      	movs	r1, #0
 800daec:	1d20      	adds	r0, r4, #4
 800daee:	f7ff febd 	bl	800d86c <RCCEx_PLL2_Config>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	f040 83c2 	bne.w	800e280 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dafc:	4996      	ldr	r1, [pc, #600]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800dafe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800db00:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800db02:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800db06:	4302      	orrs	r2, r0
 800db08:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800db0a:	0558      	lsls	r0, r3, #21
 800db0c:	d51f      	bpl.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800db0e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800db12:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800db16:	f000 8457 	beq.w	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 800db1a:	f200 8111 	bhi.w	800dd40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800db1e:	2a00      	cmp	r2, #0
 800db20:	f000 83b6 	beq.w	800e290 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800db24:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800db28:	f040 8112 	bne.w	800dd50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800db2c:	2100      	movs	r1, #0
 800db2e:	1d20      	adds	r0, r4, #4
 800db30:	f7ff fe9c 	bl	800d86c <RCCEx_PLL2_Config>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800db38:	2d00      	cmp	r5, #0
 800db3a:	f040 83a7 	bne.w	800e28c <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800db3e:	4986      	ldr	r1, [pc, #536]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800db40:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800db44:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800db46:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800db4a:	4302      	orrs	r2, r0
 800db4c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800db4e:	0519      	lsls	r1, r3, #20
 800db50:	d51f      	bpl.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 800db52:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800db56:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800db5a:	f000 842c 	beq.w	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800db5e:	f200 80fd 	bhi.w	800dd5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800db62:	2a00      	cmp	r2, #0
 800db64:	f000 83a0 	beq.w	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800db68:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800db6c:	f040 80fe 	bne.w	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800db70:	2100      	movs	r1, #0
 800db72:	1d20      	adds	r0, r4, #4
 800db74:	f7ff fe7a 	bl	800d86c <RCCEx_PLL2_Config>
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800db7c:	2d00      	cmp	r5, #0
 800db7e:	f040 837d 	bne.w	800e27c <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800db82:	4975      	ldr	r1, [pc, #468]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800db84:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800db88:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800db8a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800db8e:	4302      	orrs	r2, r0
 800db90:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800db92:	019a      	lsls	r2, r3, #6
 800db94:	d518      	bpl.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800db96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800db98:	2a20      	cmp	r2, #32
 800db9a:	f000 8403 	beq.w	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800db9e:	f200 80e8 	bhi.w	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800dba2:	b13a      	cbz	r2, 800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800dba4:	2a10      	cmp	r2, #16
 800dba6:	f040 80e7 	bne.w	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbaa:	496b      	ldr	r1, [pc, #428]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800dbac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800dbae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dbb2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800dbb4:	2d00      	cmp	r5, #0
 800dbb6:	f040 83b0 	bne.w	800e31a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dbba:	4967      	ldr	r1, [pc, #412]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800dbbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dbbe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800dbc0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800dbc4:	4302      	orrs	r2, r0
 800dbc6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dbc8:	04df      	lsls	r7, r3, #19
 800dbca:	d51d      	bpl.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 800dbcc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800dbce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800dbd2:	f000 8402 	beq.w	800e3da <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800dbd6:	f200 80d2 	bhi.w	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800dbda:	2a00      	cmp	r2, #0
 800dbdc:	f000 836a 	beq.w	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800dbe0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800dbe4:	f040 80d3 	bne.w	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dbe8:	2100      	movs	r1, #0
 800dbea:	1d20      	adds	r0, r4, #4
 800dbec:	f7ff fe3e 	bl	800d86c <RCCEx_PLL2_Config>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	f040 8345 	bne.w	800e284 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dbfa:	4957      	ldr	r1, [pc, #348]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800dbfc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800dbfe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800dc00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800dc04:	4302      	orrs	r2, r0
 800dc06:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dc08:	0498      	lsls	r0, r3, #18
 800dc0a:	d51b      	bpl.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 800dc0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc0e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800dc12:	f000 83b3 	beq.w	800e37c <HAL_RCCEx_PeriphCLKConfig+0x920>
 800dc16:	f200 80bd 	bhi.w	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800dc1a:	b14a      	cbz	r2, 800dc30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800dc1c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800dc20:	f040 80c2 	bne.w	800dda8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc24:	2101      	movs	r1, #1
 800dc26:	1d20      	adds	r0, r4, #4
 800dc28:	f7ff fe20 	bl	800d86c <RCCEx_PLL2_Config>
 800dc2c:	6823      	ldr	r3, [r4, #0]
 800dc2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dc30:	2d00      	cmp	r5, #0
 800dc32:	f040 8374 	bne.w	800e31e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dc36:	4948      	ldr	r1, [pc, #288]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800dc38:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800dc3a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800dc3c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800dc40:	4302      	orrs	r2, r0
 800dc42:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dc44:	0459      	lsls	r1, r3, #17
 800dc46:	d51d      	bpl.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 800dc48:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800dc4c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800dc50:	f000 839e 	beq.w	800e390 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800dc54:	f200 80ab 	bhi.w	800ddae <HAL_RCCEx_PeriphCLKConfig+0x352>
 800dc58:	b14a      	cbz	r2, 800dc6e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800dc5a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800dc5e:	f040 80b0 	bne.w	800ddc2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc62:	2101      	movs	r1, #1
 800dc64:	1d20      	adds	r0, r4, #4
 800dc66:	f7ff fe01 	bl	800d86c <RCCEx_PLL2_Config>
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dc6e:	2d00      	cmp	r5, #0
 800dc70:	f040 8359 	bne.w	800e326 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dc74:	4938      	ldr	r1, [pc, #224]	; (800dd58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800dc76:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800dc7a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800dc7c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800dc80:	4302      	orrs	r2, r0
 800dc82:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dc84:	015a      	lsls	r2, r3, #5
 800dc86:	d509      	bpl.n	800dc9c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 800dc88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800dc8a:	2a00      	cmp	r2, #0
 800dc8c:	f000 825a 	beq.w	800e144 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 800dc90:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800dc94:	f000 8250 	beq.w	800e138 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800dc98:	2601      	movs	r6, #1
 800dc9a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dc9c:	041f      	lsls	r7, r3, #16
 800dc9e:	d50d      	bpl.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 800dca0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800dca2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800dca6:	f000 8414 	beq.w	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800dcaa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800dcae:	f000 82c4 	beq.w	800e23a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	f000 82c7 	beq.w	800e246 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 800dcb8:	2601      	movs	r6, #1
 800dcba:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dcbc:	01d8      	lsls	r0, r3, #7
 800dcbe:	f100 81c5 	bmi.w	800e04c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dcc2:	0259      	lsls	r1, r3, #9
 800dcc4:	f100 81e5 	bmi.w	800e092 <HAL_RCCEx_PeriphCLKConfig+0x636>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800dcc8:	07df      	lsls	r7, r3, #31
 800dcca:	f140 8088 	bpl.w	800ddde <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 800dcce:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800dcd0:	2a28      	cmp	r2, #40	; 0x28
 800dcd2:	f200 81c5 	bhi.w	800e060 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800dcd6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800dcda:	007e      	.short	0x007e
 800dcdc:	01c301c3 	.word	0x01c301c3
 800dce0:	01c301c3 	.word	0x01c301c3
 800dce4:	01c301c3 	.word	0x01c301c3
 800dce8:	03c801c3 	.word	0x03c801c3
 800dcec:	01c301c3 	.word	0x01c301c3
 800dcf0:	01c301c3 	.word	0x01c301c3
 800dcf4:	01c301c3 	.word	0x01c301c3
 800dcf8:	007701c3 	.word	0x007701c3
 800dcfc:	01c301c3 	.word	0x01c301c3
 800dd00:	01c301c3 	.word	0x01c301c3
 800dd04:	01c301c3 	.word	0x01c301c3
 800dd08:	007e01c3 	.word	0x007e01c3
 800dd0c:	01c301c3 	.word	0x01c301c3
 800dd10:	01c301c3 	.word	0x01c301c3
 800dd14:	01c301c3 	.word	0x01c301c3
 800dd18:	007e01c3 	.word	0x007e01c3
 800dd1c:	01c301c3 	.word	0x01c301c3
 800dd20:	01c301c3 	.word	0x01c301c3
 800dd24:	01c301c3 	.word	0x01c301c3
 800dd28:	007e01c3 	.word	0x007e01c3
    switch(PeriphClkInit->Sai23ClockSelection)
 800dd2c:	2ac0      	cmp	r2, #192	; 0xc0
 800dd2e:	f43f aee2 	beq.w	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dd32:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800dd36:	f43f aede 	beq.w	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800dd3a:	2601      	movs	r6, #1
 800dd3c:	4635      	mov	r5, r6
 800dd3e:	e6e4      	b.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 800dd40:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800dd44:	f43f aef8 	beq.w	800db38 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800dd48:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800dd4c:	f43f aef4 	beq.w	800db38 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800dd50:	2601      	movs	r6, #1
 800dd52:	4635      	mov	r5, r6
 800dd54:	e6fb      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800dd56:	bf00      	nop
 800dd58:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 800dd5c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800dd60:	f43f af0c 	beq.w	800db7c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800dd64:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800dd68:	f43f af08 	beq.w	800db7c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800dd6c:	2601      	movs	r6, #1
 800dd6e:	4635      	mov	r5, r6
 800dd70:	e70f      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 800dd72:	2a30      	cmp	r2, #48	; 0x30
 800dd74:	f43f af1e 	beq.w	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800dd78:	2601      	movs	r6, #1
 800dd7a:	4635      	mov	r5, r6
 800dd7c:	e724      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800dd7e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800dd82:	f43f af37 	beq.w	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800dd86:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800dd8a:	f43f af33 	beq.w	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800dd8e:	2601      	movs	r6, #1
 800dd90:	4635      	mov	r5, r6
 800dd92:	e739      	b.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 800dd94:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800dd98:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800dd9c:	f43f af48 	beq.w	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800dda0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800dda4:	f43f af44 	beq.w	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800dda8:	2601      	movs	r6, #1
 800ddaa:	4635      	mov	r5, r6
 800ddac:	e74a      	b.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 800ddae:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800ddb2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800ddb6:	f43f af5a 	beq.w	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ddba:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800ddbe:	f43f af56 	beq.w	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ddc2:	2601      	movs	r6, #1
 800ddc4:	4635      	mov	r5, r6
 800ddc6:	e75d      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ddc8:	2101      	movs	r1, #1
 800ddca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ddce:	f7ff fdc9 	bl	800d964 <RCCEx_PLL3_Config>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ddd6:	2d00      	cmp	r5, #0
 800ddd8:	f000 82b6 	beq.w	800e348 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800dddc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ddde:	0798      	lsls	r0, r3, #30
 800dde0:	d516      	bpl.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800dde2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800dde4:	2a05      	cmp	r2, #5
 800dde6:	f200 83da 	bhi.w	800e59e <HAL_RCCEx_PeriphCLKConfig+0xb42>
 800ddea:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ddee:	000d      	.short	0x000d
 800ddf0:	0006032a 	.word	0x0006032a
 800ddf4:	000d000d 	.word	0x000d000d
 800ddf8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ddfa:	2101      	movs	r1, #1
 800ddfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de00:	f7ff fdb0 	bl	800d964 <RCCEx_PLL3_Config>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800de08:	2d00      	cmp	r5, #0
 800de0a:	f000 826f 	beq.w	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x890>
 800de0e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800de10:	0759      	lsls	r1, r3, #29
 800de12:	d517      	bpl.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800de14:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800de18:	2a05      	cmp	r2, #5
 800de1a:	f200 83ba 	bhi.w	800e592 <HAL_RCCEx_PeriphCLKConfig+0xb36>
 800de1e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800de22:	000d      	.short	0x000d
 800de24:	0006031a 	.word	0x0006031a
 800de28:	000d000d 	.word	0x000d000d
 800de2c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800de2e:	2101      	movs	r1, #1
 800de30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de34:	f7ff fd96 	bl	800d964 <RCCEx_PLL3_Config>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800de3c:	2d00      	cmp	r5, #0
 800de3e:	f000 8260 	beq.w	800e302 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800de42:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800de44:	069a      	lsls	r2, r3, #26
 800de46:	d51d      	bpl.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800de48:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800de4c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800de50:	f000 8334 	beq.w	800e4bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800de54:	f200 81a5 	bhi.w	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800de58:	b14a      	cbz	r2, 800de6e <HAL_RCCEx_PeriphCLKConfig+0x412>
 800de5a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800de5e:	f040 81aa 	bne.w	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800de62:	2100      	movs	r1, #0
 800de64:	1d20      	adds	r0, r4, #4
 800de66:	f7ff fd01 	bl	800d86c <RCCEx_PLL2_Config>
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800de6e:	2d00      	cmp	r5, #0
 800de70:	f040 8232 	bne.w	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800de74:	49ae      	ldr	r1, [pc, #696]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800de76:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800de7a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800de7c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800de80:	4302      	orrs	r2, r0
 800de82:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800de84:	065f      	lsls	r7, r3, #25
 800de86:	d51d      	bpl.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800de88:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800de8c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800de90:	f000 8328 	beq.w	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800de94:	f200 8175 	bhi.w	800e182 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800de98:	b14a      	cbz	r2, 800deae <HAL_RCCEx_PeriphCLKConfig+0x452>
 800de9a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800de9e:	f040 817a 	bne.w	800e196 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dea2:	2100      	movs	r1, #0
 800dea4:	1d20      	adds	r0, r4, #4
 800dea6:	f7ff fce1 	bl	800d86c <RCCEx_PLL2_Config>
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800deae:	2d00      	cmp	r5, #0
 800deb0:	f040 8217 	bne.w	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800deb4:	499e      	ldr	r1, [pc, #632]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800deb6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800deba:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800debc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800dec0:	4302      	orrs	r2, r0
 800dec2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800dec4:	0618      	lsls	r0, r3, #24
 800dec6:	d51d      	bpl.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800dec8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800decc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ded0:	f000 8313 	beq.w	800e4fa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 800ded4:	f200 8145 	bhi.w	800e162 <HAL_RCCEx_PeriphCLKConfig+0x706>
 800ded8:	b14a      	cbz	r2, 800deee <HAL_RCCEx_PeriphCLKConfig+0x492>
 800deda:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800dede:	f040 814a 	bne.w	800e176 <HAL_RCCEx_PeriphCLKConfig+0x71a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dee2:	2100      	movs	r1, #0
 800dee4:	1d20      	adds	r0, r4, #4
 800dee6:	f7ff fcc1 	bl	800d86c <RCCEx_PLL2_Config>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800deee:	2d00      	cmp	r5, #0
 800def0:	f040 81ed 	bne.w	800e2ce <HAL_RCCEx_PeriphCLKConfig+0x872>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800def4:	498e      	ldr	r1, [pc, #568]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800def6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800defa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800defc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800df00:	4302      	orrs	r2, r0
 800df02:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800df04:	0719      	lsls	r1, r3, #28
 800df06:	d50b      	bpl.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800df08:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800df0c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800df10:	f000 8312 	beq.w	800e538 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800df14:	4886      	ldr	r0, [pc, #536]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800df16:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800df18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800df1c:	430a      	orrs	r2, r1
 800df1e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800df20:	06da      	lsls	r2, r3, #27
 800df22:	d50b      	bpl.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800df24:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800df28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800df2c:	f000 82f9 	beq.w	800e522 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800df30:	487f      	ldr	r0, [pc, #508]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800df32:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800df34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800df38:	430a      	orrs	r2, r1
 800df3a:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800df3c:	031f      	lsls	r7, r3, #12
 800df3e:	d50e      	bpl.n	800df5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 800df40:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800df44:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800df48:	f000 8161 	beq.w	800e20e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 800df4c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800df50:	f000 8164 	beq.w	800e21c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800df54:	2900      	cmp	r1, #0
 800df56:	f000 82db 	beq.w	800e510 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800df5a:	2601      	movs	r6, #1
 800df5c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800df5e:	0358      	lsls	r0, r3, #13
 800df60:	d50f      	bpl.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 800df62:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800df66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800df6a:	f000 813a 	beq.w	800e1e2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800df6e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800df72:	f000 813d 	beq.w	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800df76:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800df7a:	f000 8296 	beq.w	800e4aa <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800df7e:	2601      	movs	r6, #1
 800df80:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800df82:	03d9      	lsls	r1, r3, #15
 800df84:	d517      	bpl.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 800df86:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800df88:	2a00      	cmp	r2, #0
 800df8a:	f000 827c 	beq.w	800e486 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800df8e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800df92:	f040 8170 	bne.w	800e276 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800df96:	2102      	movs	r1, #2
 800df98:	1d20      	adds	r0, r4, #4
 800df9a:	f7ff fc67 	bl	800d86c <RCCEx_PLL2_Config>
 800df9e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	2d00      	cmp	r5, #0
 800dfa4:	f040 81db 	bne.w	800e35e <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dfa8:	4961      	ldr	r1, [pc, #388]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dfaa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800dfac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800dfae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dfb2:	4302      	orrs	r2, r0
 800dfb4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dfb6:	009a      	lsls	r2, r3, #2
 800dfb8:	f100 8152 	bmi.w	800e260 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dfbc:	039f      	lsls	r7, r3, #14
 800dfbe:	d435      	bmi.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800dfc0:	1e30      	subs	r0, r6, #0
 800dfc2:	bf18      	it	ne
 800dfc4:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dfc6:	02de      	lsls	r6, r3, #11
 800dfc8:	d506      	bpl.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dfca:	4959      	ldr	r1, [pc, #356]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dfcc:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800dfce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800dfd0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800dfd4:	432a      	orrs	r2, r5
 800dfd6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dfd8:	00dd      	lsls	r5, r3, #3
 800dfda:	d507      	bpl.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dfdc:	4954      	ldr	r1, [pc, #336]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dfde:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800dfe2:	690a      	ldr	r2, [r1, #16]
 800dfe4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dfe8:	432a      	orrs	r2, r5
 800dfea:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dfec:	0299      	lsls	r1, r3, #10
 800dfee:	d506      	bpl.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dff0:	494f      	ldr	r1, [pc, #316]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dff2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800dff4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800dff6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800dffa:	432a      	orrs	r2, r5
 800dffc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dffe:	005a      	lsls	r2, r3, #1
 800e000:	d509      	bpl.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e002:	4a4b      	ldr	r2, [pc, #300]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e004:	6911      	ldr	r1, [r2, #16]
 800e006:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800e00a:	6111      	str	r1, [r2, #16]
 800e00c:	6911      	ldr	r1, [r2, #16]
 800e00e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800e012:	4329      	orrs	r1, r5
 800e014:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e016:	2b00      	cmp	r3, #0
 800e018:	da06      	bge.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e01a:	4a45      	ldr	r2, [pc, #276]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e01c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e01e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e020:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800e024:	430b      	orrs	r3, r1
 800e026:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800e028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800e02c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e030:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e034:	f000 8230 	beq.w	800e498 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800e038:	f240 80c3 	bls.w	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x766>
 800e03c:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800e040:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e044:	f000 80c0 	beq.w	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 800e048:	2001      	movs	r0, #1
 800e04a:	e7bc      	b.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 800e04c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e04e:	2a03      	cmp	r2, #3
 800e050:	f200 82a8 	bhi.w	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
 800e054:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e058:	018a0010 	.word	0x018a0010
 800e05c:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 800e060:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e062:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 800e064:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e066:	f57f aed3 	bpl.w	800de10 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800e06a:	e6ba      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e06c:	2102      	movs	r1, #2
 800e06e:	1d20      	adds	r0, r4, #4
 800e070:	f7ff fbfc 	bl	800d86c <RCCEx_PLL2_Config>
 800e074:	6823      	ldr	r3, [r4, #0]
 800e076:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e078:	2d00      	cmp	r5, #0
 800e07a:	f040 8152 	bne.w	800e322 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e07e:	492c      	ldr	r1, [pc, #176]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e080:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e082:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800e084:	f022 0203 	bic.w	r2, r2, #3
 800e088:	4302      	orrs	r2, r0
 800e08a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e08c:	0259      	lsls	r1, r3, #9
 800e08e:	f57f ae1b 	bpl.w	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e092:	4b28      	ldr	r3, [pc, #160]	; (800e134 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 800e094:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e096:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e09c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800e09e:	f7fa ff15 	bl	8008ecc <HAL_GetTick>
 800e0a2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0a4:	e005      	b.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0a6:	f7fa ff11 	bl	8008ecc <HAL_GetTick>
 800e0aa:	1bc0      	subs	r0, r0, r7
 800e0ac:	2864      	cmp	r0, #100	; 0x64
 800e0ae:	f200 81e6 	bhi.w	800e47e <HAL_RCCEx_PeriphCLKConfig+0xa22>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e0b6:	05da      	lsls	r2, r3, #23
 800e0b8:	d5f5      	bpl.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    if(ret == HAL_OK)
 800e0ba:	2d00      	cmp	r5, #0
 800e0bc:	f040 8265 	bne.w	800e58a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e0c0:	4a1b      	ldr	r2, [pc, #108]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e0c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800e0c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e0c8:	4059      	eors	r1, r3
 800e0ca:	f411 7f40 	tst.w	r1, #768	; 0x300
 800e0ce:	d00b      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0d0:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800e0d2:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0d4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e0d8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800e0dc:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e0de:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800e0e0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800e0e4:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800e0e6:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e0e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ec:	f000 822f 	beq.w	800e54e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e0f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800e0f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e0f8:	f000 823d 	beq.w	800e576 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800e0fc:	490c      	ldr	r1, [pc, #48]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e0fe:	690a      	ldr	r2, [r1, #16]
 800e100:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800e104:	610a      	str	r2, [r1, #16]
 800e106:	4a0a      	ldr	r2, [pc, #40]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e10c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e10e:	430b      	orrs	r3, r1
 800e110:	6713      	str	r3, [r2, #112]	; 0x70
 800e112:	6823      	ldr	r3, [r4, #0]
 800e114:	e5d8      	b.n	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e116:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800e118:	2d00      	cmp	r5, #0
 800e11a:	f040 80b5 	bne.w	800e288 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e11e:	4904      	ldr	r1, [pc, #16]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e122:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e124:	f022 0207 	bic.w	r2, r2, #7
 800e128:	4302      	orrs	r2, r0
 800e12a:	650a      	str	r2, [r1, #80]	; 0x50
 800e12c:	e4cf      	b.n	800dace <HAL_RCCEx_PeriphCLKConfig+0x72>
 800e12e:	bf00      	nop
 800e130:	58024400 	.word	0x58024400
 800e134:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e138:	2101      	movs	r1, #1
 800e13a:	1d20      	adds	r0, r4, #4
 800e13c:	f7ff fb96 	bl	800d86c <RCCEx_PLL2_Config>
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e144:	2d00      	cmp	r5, #0
 800e146:	f040 810c 	bne.w	800e362 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800e14a:	49b8      	ldr	r1, [pc, #736]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e14c:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800e14e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e150:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800e152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e156:	ea42 0200 	orr.w	r2, r2, r0
 800e15a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e15c:	f57f adae 	bpl.w	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x260>
 800e160:	e59e      	b.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e162:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800e166:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800e16a:	f43f aec0 	beq.w	800deee <HAL_RCCEx_PeriphCLKConfig+0x492>
 800e16e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800e172:	f43f aebc 	beq.w	800deee <HAL_RCCEx_PeriphCLKConfig+0x492>
 800e176:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e178:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e17a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e17c:	f57f aed0 	bpl.w	800df20 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800e180:	e6c2      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e182:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800e186:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e18a:	f43f ae90 	beq.w	800deae <HAL_RCCEx_PeriphCLKConfig+0x452>
 800e18e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800e192:	f43f ae8c 	beq.w	800deae <HAL_RCCEx_PeriphCLKConfig+0x452>
 800e196:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e198:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e19a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e19c:	f57f aeb2 	bpl.w	800df04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e1a0:	e692      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e1a2:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800e1a6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800e1aa:	f43f ae60 	beq.w	800de6e <HAL_RCCEx_PeriphCLKConfig+0x412>
 800e1ae:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800e1b2:	f43f ae5c 	beq.w	800de6e <HAL_RCCEx_PeriphCLKConfig+0x412>
 800e1b6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e1b8:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e1ba:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e1bc:	f57f ae82 	bpl.w	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800e1c0:	e662      	b.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 800e1c2:	2a00      	cmp	r2, #0
 800e1c4:	f47f af40 	bne.w	800e048 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    if(ret == HAL_OK)
 800e1c8:	2d00      	cmp	r5, #0
 800e1ca:	f47f af3d 	bne.w	800e048 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e1ce:	4d97      	ldr	r5, [pc, #604]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e1d0:	1e30      	subs	r0, r6, #0
 800e1d2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800e1d4:	bf18      	it	ne
 800e1d6:	2001      	movne	r0, #1
 800e1d8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800e1dc:	430a      	orrs	r2, r1
 800e1de:	656a      	str	r2, [r5, #84]	; 0x54
 800e1e0:	e6f1      	b.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e1e2:	2101      	movs	r1, #1
 800e1e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e1e8:	f7ff fbbc 	bl	800d964 <RCCEx_PLL3_Config>
 800e1ec:	6823      	ldr	r3, [r4, #0]
 800e1ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	f040 80a4 	bne.w	800e33e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e1f6:	498d      	ldr	r1, [pc, #564]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e1f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e1fc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800e1fe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800e202:	4302      	orrs	r2, r0
 800e204:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e206:	03d9      	lsls	r1, r3, #15
 800e208:	f57f aed5 	bpl.w	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800e20c:	e6bb      	b.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e20e:	2102      	movs	r1, #2
 800e210:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e214:	f7ff fba6 	bl	800d964 <RCCEx_PLL3_Config>
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e21c:	2d00      	cmp	r5, #0
 800e21e:	f040 8089 	bne.w	800e334 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e222:	4982      	ldr	r1, [pc, #520]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e224:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800e228:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e22a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800e22e:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e230:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e232:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e234:	f57f aea5 	bpl.w	800df82 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800e238:	e693      	b.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e23a:	2101      	movs	r1, #1
 800e23c:	1d20      	adds	r0, r4, #4
 800e23e:	f7ff fb15 	bl	800d86c <RCCEx_PLL2_Config>
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e246:	2d00      	cmp	r5, #0
 800e248:	d16f      	bne.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e24a:	4978      	ldr	r1, [pc, #480]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e24c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e24e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800e250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e254:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e256:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e258:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e25a:	f57f ad32 	bpl.w	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800e25e:	e6f5      	b.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800e260:	2102      	movs	r1, #2
 800e262:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e266:	f7ff fb7d 	bl	800d964 <RCCEx_PLL3_Config>
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	2800      	cmp	r0, #0
 800e26e:	f43f aea5 	beq.w	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 800e272:	2601      	movs	r6, #1
 800e274:	e6a2      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 800e276:	2601      	movs	r6, #1
 800e278:	4635      	mov	r5, r6
 800e27a:	e69c      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800e27c:	462e      	mov	r6, r5
 800e27e:	e488      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e280:	462e      	mov	r6, r5
 800e282:	e442      	b.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800e284:	462e      	mov	r6, r5
 800e286:	e4bf      	b.n	800dc08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800e288:	462e      	mov	r6, r5
 800e28a:	e420      	b.n	800dace <HAL_RCCEx_PeriphCLKConfig+0x72>
 800e28c:	462e      	mov	r6, r5
 800e28e:	e45e      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e290:	4966      	ldr	r1, [pc, #408]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e292:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e294:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e298:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800e29a:	e44d      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e29c:	4963      	ldr	r1, [pc, #396]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e29e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e2a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e2a4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800e2a6:	e426      	b.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2a8:	4960      	ldr	r1, [pc, #384]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e2aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e2ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e2b0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800e2b2:	e463      	b.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2b4:	495d      	ldr	r1, [pc, #372]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e2b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e2b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e2bc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800e2be:	e499      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2c0:	485a      	ldr	r0, [pc, #360]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e2c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800e2c4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800e2c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800e2ca:	f7ff bbe4 	b.w	800da96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e2ce:	0719      	lsls	r1, r3, #28
 800e2d0:	462e      	mov	r6, r5
 800e2d2:	f57f ae25 	bpl.w	800df20 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800e2d6:	e617      	b.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e2d8:	065f      	lsls	r7, r3, #25
 800e2da:	462e      	mov	r6, r5
 800e2dc:	f57f adf2 	bpl.w	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800e2e0:	e5d2      	b.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e2e2:	0618      	lsls	r0, r3, #24
 800e2e4:	462e      	mov	r6, r5
 800e2e6:	f57f ae0d 	bpl.w	800df04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e2ea:	e5ed      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e2ec:	494f      	ldr	r1, [pc, #316]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e2ee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e2f0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800e2f2:	f022 0207 	bic.w	r2, r2, #7
 800e2f6:	4302      	orrs	r2, r0
 800e2f8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2fa:	0759      	lsls	r1, r3, #29
 800e2fc:	f57f ada2 	bpl.w	800de44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800e300:	e588      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e302:	494a      	ldr	r1, [pc, #296]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e304:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800e308:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800e30a:	f022 0207 	bic.w	r2, r2, #7
 800e30e:	4302      	orrs	r2, r0
 800e310:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e312:	069a      	lsls	r2, r3, #26
 800e314:	f57f adb6 	bpl.w	800de84 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e318:	e596      	b.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800e31a:	462e      	mov	r6, r5
 800e31c:	e454      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800e31e:	462e      	mov	r6, r5
 800e320:	e490      	b.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e322:	462e      	mov	r6, r5
 800e324:	e4cd      	b.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800e326:	462e      	mov	r6, r5
 800e328:	e4ac      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e32a:	01d8      	lsls	r0, r3, #7
 800e32c:	462e      	mov	r6, r5
 800e32e:	f57f acc8 	bpl.w	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800e332:	e68b      	b.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e334:	0358      	lsls	r0, r3, #13
 800e336:	462e      	mov	r6, r5
 800e338:	f57f ae23 	bpl.w	800df82 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800e33c:	e611      	b.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e33e:	03d9      	lsls	r1, r3, #15
 800e340:	462e      	mov	r6, r5
 800e342:	f57f ae38 	bpl.w	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800e346:	e61e      	b.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e348:	4938      	ldr	r1, [pc, #224]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e34a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e34c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800e34e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800e352:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e354:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e356:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e358:	f57f ad5a 	bpl.w	800de10 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800e35c:	e541      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800e35e:	462e      	mov	r6, r5
 800e360:	e629      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e362:	041f      	lsls	r7, r3, #16
 800e364:	462e      	mov	r6, r5
 800e366:	f57f aca9 	bpl.w	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x260>
 800e36a:	e499      	b.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e36c:	492f      	ldr	r1, [pc, #188]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800e36e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e370:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e374:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800e376:	2d00      	cmp	r5, #0
 800e378:	d1d3      	bne.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800e37a:	e680      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x622>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e37c:	2101      	movs	r1, #1
 800e37e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e382:	f7ff faef 	bl	800d964 <RCCEx_PLL3_Config>
 800e386:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	d1c7      	bne.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 800e38e:	e452      	b.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e390:	2101      	movs	r1, #1
 800e392:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e396:	f7ff fae5 	bl	800d964 <RCCEx_PLL3_Config>
 800e39a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	2d00      	cmp	r5, #0
 800e3a0:	d1c1      	bne.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800e3a2:	e467      	b.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e3a4:	2102      	movs	r1, #2
 800e3a6:	1d20      	adds	r0, r4, #4
 800e3a8:	f7ff fa60 	bl	800d86c <RCCEx_PLL2_Config>
 800e3ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	2d00      	cmp	r5, #0
 800e3b2:	d1b2      	bne.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800e3b4:	e401      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e3bc:	f7ff fad2 	bl	800d964 <RCCEx_PLL3_Config>
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	4605      	mov	r5, r0
      break;
 800e3c4:	f7ff bbda 	b.w	800db7c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e3ce:	f7ff fac9 	bl	800d964 <RCCEx_PLL3_Config>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	4605      	mov	r5, r0
      break;
 800e3d6:	f7ff bbaf 	b.w	800db38 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e3da:	2100      	movs	r1, #0
 800e3dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e3e0:	f7ff fac0 	bl	800d964 <RCCEx_PLL3_Config>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	4605      	mov	r5, r0
      break;
 800e3e8:	e404      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e3ea:	2102      	movs	r1, #2
 800e3ec:	3024      	adds	r0, #36	; 0x24
 800e3ee:	f7ff fab9 	bl	800d964 <RCCEx_PLL3_Config>
 800e3f2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800e3f4:	2e00      	cmp	r6, #0
 800e3f6:	f43f ab4c 	beq.w	800da92 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	f7ff bb52 	b.w	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e400:	2100      	movs	r1, #0
 800e402:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e406:	f7ff faad 	bl	800d964 <RCCEx_PLL3_Config>
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	4605      	mov	r5, r0
      break;
 800e40e:	e683      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e410:	4906      	ldr	r1, [pc, #24]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
      break;
 800e412:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e414:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e416:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e41a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800e41c:	e67c      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e41e:	2100      	movs	r1, #0
 800e420:	1d20      	adds	r0, r4, #4
 800e422:	f7ff fa23 	bl	800d86c <RCCEx_PLL2_Config>
 800e426:	6823      	ldr	r3, [r4, #0]
 800e428:	4605      	mov	r5, r0
      break;
 800e42a:	e675      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800e42c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e430:	2100      	movs	r1, #0
 800e432:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e436:	f7ff fa95 	bl	800d964 <RCCEx_PLL3_Config>
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	4605      	mov	r5, r0
      break;
 800e43e:	f7ff bb5a 	b.w	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e442:	2101      	movs	r1, #1
 800e444:	1d20      	adds	r0, r4, #4
 800e446:	f7ff fa11 	bl	800d86c <RCCEx_PLL2_Config>
 800e44a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	2d00      	cmp	r5, #0
 800e450:	f47f acdd 	bne.w	800de0e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800e454:	e74a      	b.n	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x890>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e456:	2101      	movs	r1, #1
 800e458:	1d20      	adds	r0, r4, #4
 800e45a:	f7ff fa07 	bl	800d86c <RCCEx_PLL2_Config>
 800e45e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	2d00      	cmp	r5, #0
 800e464:	f47f aced 	bne.w	800de42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800e468:	e74b      	b.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e46a:	2101      	movs	r1, #1
 800e46c:	1d20      	adds	r0, r4, #4
 800e46e:	f7ff f9fd 	bl	800d86c <RCCEx_PLL2_Config>
 800e472:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	2d00      	cmp	r5, #0
 800e478:	f47f acb0 	bne.w	800dddc <HAL_RCCEx_PeriphCLKConfig+0x380>
 800e47c:	e764      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
            ret = HAL_TIMEOUT;
 800e47e:	2603      	movs	r6, #3
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	4635      	mov	r5, r6
 800e484:	e420      	b.n	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e486:	4949      	ldr	r1, [pc, #292]	; (800e5ac <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800e488:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e48a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e48e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800e490:	2d00      	cmp	r5, #0
 800e492:	f47f af64 	bne.w	800e35e <HAL_RCCEx_PeriphCLKConfig+0x902>
 800e496:	e587      	b.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e498:	4844      	ldr	r0, [pc, #272]	; (800e5ac <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800e49a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800e49c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800e4a0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800e4a2:	2d00      	cmp	r5, #0
 800e4a4:	f47f add0 	bne.w	800e048 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800e4a8:	e691      	b.n	800e1ce <HAL_RCCEx_PeriphCLKConfig+0x772>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4aa:	4940      	ldr	r1, [pc, #256]	; (800e5ac <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800e4ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e4ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e4b2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800e4b4:	2d00      	cmp	r5, #0
 800e4b6:	f47f af42 	bne.w	800e33e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e4ba:	e69c      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e4bc:	2102      	movs	r1, #2
 800e4be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e4c2:	f7ff fa4f 	bl	800d964 <RCCEx_PLL3_Config>
 800e4c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	2d00      	cmp	r5, #0
 800e4cc:	f47f af04 	bne.w	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800e4d0:	e4d0      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4d2:	4936      	ldr	r1, [pc, #216]	; (800e5ac <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800e4d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800e4d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e4da:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	f47f af24 	bne.w	800e32a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800e4e2:	e6b2      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e4e4:	2102      	movs	r1, #2
 800e4e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e4ea:	f7ff fa3b 	bl	800d964 <RCCEx_PLL3_Config>
 800e4ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	2d00      	cmp	r5, #0
 800e4f4:	f47f aef5 	bne.w	800e2e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800e4f8:	e4dc      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e4fa:	2102      	movs	r1, #2
 800e4fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e500:	f7ff fa30 	bl	800d964 <RCCEx_PLL3_Config>
 800e504:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	2d00      	cmp	r5, #0
 800e50a:	f47f aee0 	bne.w	800e2ce <HAL_RCCEx_PeriphCLKConfig+0x872>
 800e50e:	e4f1      	b.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e510:	1d20      	adds	r0, r4, #4
 800e512:	f7ff f9ab 	bl	800d86c <RCCEx_PLL2_Config>
 800e516:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	2d00      	cmp	r5, #0
 800e51c:	f47f af0a 	bne.w	800e334 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800e520:	e67f      	b.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e522:	2102      	movs	r1, #2
 800e524:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e528:	f7ff fa1c 	bl	800d964 <RCCEx_PLL3_Config>
 800e52c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800e530:	b100      	cbz	r0, 800e534 <HAL_RCCEx_PeriphCLKConfig+0xad8>
        status = HAL_ERROR;
 800e532:	2601      	movs	r6, #1
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	e4fb      	b.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e538:	2102      	movs	r1, #2
 800e53a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e53e:	f7ff fa11 	bl	800d964 <RCCEx_PLL3_Config>
 800e542:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800e546:	b100      	cbz	r0, 800e54a <HAL_RCCEx_PeriphCLKConfig+0xaee>
          status = HAL_ERROR;
 800e548:	2601      	movs	r6, #1
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	e4e2      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 800e54e:	f7fa fcbd 	bl	8008ecc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e552:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800e5ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e556:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e55a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e55c:	e004      	b.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e55e:	f7fa fcb5 	bl	8008ecc <HAL_GetTick>
 800e562:	1bc0      	subs	r0, r0, r7
 800e564:	4548      	cmp	r0, r9
 800e566:	d88a      	bhi.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0xa22>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e568:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800e56c:	079b      	lsls	r3, r3, #30
 800e56e:	d5f6      	bpl.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800e570:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800e574:	e5bc      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e576:	480d      	ldr	r0, [pc, #52]	; (800e5ac <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800e578:	4a0d      	ldr	r2, [pc, #52]	; (800e5b0 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
 800e57a:	6901      	ldr	r1, [r0, #16]
 800e57c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800e580:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800e584:	430a      	orrs	r2, r1
 800e586:	6102      	str	r2, [r0, #16]
 800e588:	e5bd      	b.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800e58a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800e58c:	462e      	mov	r6, r5
 800e58e:	f7ff bb9b 	b.w	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e592:	2601      	movs	r6, #1
 800e594:	4635      	mov	r5, r6
 800e596:	e455      	b.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e598:	2601      	movs	r6, #1
 800e59a:	f7ff ba97 	b.w	800dacc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e59e:	2601      	movs	r6, #1
 800e5a0:	4635      	mov	r5, r6
 800e5a2:	e435      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800e5a4:	2601      	movs	r6, #1
 800e5a6:	4635      	mov	r5, r6
 800e5a8:	f7ff bb8b 	b.w	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800e5ac:	58024400 	.word	0x58024400
 800e5b0:	00ffffcf 	.word	0x00ffffcf

0800e5b4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800e5b4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e5b6:	f7ff f889 	bl	800d6cc <HAL_RCC_GetHCLKFreq>
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800e5bc:	4a05      	ldr	r2, [pc, #20]	; (800e5d4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800e5be:	6a1b      	ldr	r3, [r3, #32]
 800e5c0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e5c4:	5cd3      	ldrb	r3, [r2, r3]
 800e5c6:	f003 031f 	and.w	r3, r3, #31
}
 800e5ca:	40d8      	lsrs	r0, r3
 800e5cc:	bd08      	pop	{r3, pc}
 800e5ce:	bf00      	nop
 800e5d0:	58024400 	.word	0x58024400
 800e5d4:	0802c2b8 	.word	0x0802c2b8

0800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e5d8:	4b4f      	ldr	r3, [pc, #316]	; (800e718 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800e5da:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e5dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800e5de:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e5e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800e5e2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800e5e6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800e5ea:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800e5ec:	d05c      	beq.n	800e6a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800e5ee:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e5f2:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e5f6:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800e5fa:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800e5fe:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800e600:	ee07 4a90 	vmov	s15, r4
 800e604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800e608:	d003      	beq.n	800e612 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800e60a:	2902      	cmp	r1, #2
 800e60c:	d075      	beq.n	800e6fa <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800e60e:	2900      	cmp	r1, #0
 800e610:	d04f      	beq.n	800e6b2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e612:	ee07 2a90 	vmov	s15, r2
 800e616:	eddf 6a41 	vldr	s13, [pc, #260]	; 800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800e61a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800e624:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e720 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800e628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e62c:	ee06 3a90 	vmov	s13, r3
 800e630:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e634:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e638:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e63c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800e640:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800e644:	4a34      	ldr	r2, [pc, #208]	; (800e718 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800e646:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e64a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e64c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e650:	ee07 3a10 	vmov	s14, r3
 800e654:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800e658:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800e65a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e65e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e666:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800e66a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e66c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800e670:	ee07 3a10 	vmov	s14, r3
 800e674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e678:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e67c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e684:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800e688:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e68a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e696:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e69e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e6a2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800e6a6:	4770      	bx	lr
 800e6a8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e6aa:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e6ae:	6082      	str	r2, [r0, #8]
}
 800e6b0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6b2:	6819      	ldr	r1, [r3, #0]
 800e6b4:	0689      	lsls	r1, r1, #26
 800e6b6:	d527      	bpl.n	800e708 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e6b8:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e6ba:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e6be:	4a19      	ldr	r2, [pc, #100]	; (800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e6c0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e6c4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e6c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e6ce:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e6d0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e720 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800e6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d8:	ee06 2a10 	vmov	s12, r2
 800e6dc:	ee06 3a90 	vmov	s13, r3
 800e6e0:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800e6e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e6e8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800e6ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e6f0:	eee7 6a05 	vfma.f32	s13, s14, s10
 800e6f4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e6f8:	e7a4      	b.n	800e644 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e6fa:	ee07 2a90 	vmov	s15, r2
 800e6fe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800e702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e706:	e78a      	b.n	800e61e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e708:	ee07 2a90 	vmov	s15, r2
 800e70c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e72c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800e710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e714:	e783      	b.n	800e61e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800e716:	bf00      	nop
 800e718:	58024400 	.word	0x58024400
 800e71c:	4a742400 	.word	0x4a742400
 800e720:	39000000 	.word	0x39000000
 800e724:	03d09000 	.word	0x03d09000
 800e728:	4bbebc20 	.word	0x4bbebc20
 800e72c:	4c742400 	.word	0x4c742400

0800e730 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e730:	4b4f      	ldr	r3, [pc, #316]	; (800e870 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800e732:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e734:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800e736:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e738:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800e73a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800e73e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e742:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800e744:	d05c      	beq.n	800e800 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e746:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e74a:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e74e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e752:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800e756:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e758:	ee07 4a90 	vmov	s15, r4
 800e75c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800e760:	d003      	beq.n	800e76a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800e762:	2902      	cmp	r1, #2
 800e764:	d075      	beq.n	800e852 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800e766:	2900      	cmp	r1, #0
 800e768:	d04f      	beq.n	800e80a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e76a:	ee07 2a90 	vmov	s15, r2
 800e76e:	eddf 6a41 	vldr	s13, [pc, #260]	; 800e874 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800e772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e778:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800e77c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e878 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800e780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e784:	ee06 3a90 	vmov	s13, r3
 800e788:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e78c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e790:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e794:	eee7 6a25 	vfma.f32	s13, s14, s11
 800e798:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800e79c:	4a34      	ldr	r2, [pc, #208]	; (800e870 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800e79e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e7a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e7a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e7a8:	ee07 3a10 	vmov	s14, r3
 800e7ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800e7b0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800e7b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7be:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800e7c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e7c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800e7c8:	ee07 3a10 	vmov	s14, r3
 800e7cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e7d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e7d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7dc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800e7e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e7e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800e7e6:	ee07 3a90 	vmov	s15, r3
 800e7ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e7fa:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800e7fe:	4770      	bx	lr
 800e800:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e802:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e806:	6082      	str	r2, [r0, #8]
}
 800e808:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e80a:	6819      	ldr	r1, [r3, #0]
 800e80c:	0689      	lsls	r1, r1, #26
 800e80e:	d527      	bpl.n	800e860 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e810:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e812:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e816:	4a19      	ldr	r2, [pc, #100]	; (800e87c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e818:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e81c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e826:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e828:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e878 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800e82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e830:	ee06 2a10 	vmov	s12, r2
 800e834:	ee06 3a90 	vmov	s13, r3
 800e838:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800e83c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e840:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800e844:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e848:	eee7 6a05 	vfma.f32	s13, s14, s10
 800e84c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e850:	e7a4      	b.n	800e79c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e852:	ee07 2a90 	vmov	s15, r2
 800e856:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800e880 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800e85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e85e:	e78a      	b.n	800e776 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e860:	ee07 2a90 	vmov	s15, r2
 800e864:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e884 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800e868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e86c:	e783      	b.n	800e776 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800e86e:	bf00      	nop
 800e870:	58024400 	.word	0x58024400
 800e874:	4a742400 	.word	0x4a742400
 800e878:	39000000 	.word	0x39000000
 800e87c:	03d09000 	.word	0x03d09000
 800e880:	4bbebc20 	.word	0x4bbebc20
 800e884:	4c742400 	.word	0x4c742400

0800e888 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e888:	4b4f      	ldr	r3, [pc, #316]	; (800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800e88a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e88c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800e88e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e890:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800e892:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800e896:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e89a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800e89c:	d05c      	beq.n	800e958 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e89e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e8a2:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8a6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e8aa:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800e8ae:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e8b0:	ee07 4a90 	vmov	s15, r4
 800e8b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800e8b8:	d003      	beq.n	800e8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
 800e8ba:	2902      	cmp	r1, #2
 800e8bc:	d075      	beq.n	800e9aa <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800e8be:	2900      	cmp	r1, #0
 800e8c0:	d04f      	beq.n	800e962 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e8c2:	ee07 2a90 	vmov	s15, r2
 800e8c6:	eddf 6a41 	vldr	s13, [pc, #260]	; 800e9cc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800e8ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800e8d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800e8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8dc:	ee06 3a90 	vmov	s13, r3
 800e8e0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e8e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e8e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e8ec:	eee7 6a25 	vfma.f32	s13, s14, s11
 800e8f0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800e8f4:	4a34      	ldr	r2, [pc, #208]	; (800e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800e8f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e8fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e8fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e900:	ee07 3a10 	vmov	s14, r3
 800e904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800e908:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800e90a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e90e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e916:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800e91a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e91c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800e920:	ee07 3a10 	vmov	s14, r3
 800e924:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e928:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e934:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e938:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e93a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800e93e:	ee07 3a90 	vmov	s15, r3
 800e942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e946:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e94e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e952:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800e956:	4770      	bx	lr
 800e958:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e95a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e95e:	6082      	str	r2, [r0, #8]
}
 800e960:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e962:	6819      	ldr	r1, [r3, #0]
 800e964:	0689      	lsls	r1, r1, #26
 800e966:	d527      	bpl.n	800e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e968:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e96a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e96e:	4a19      	ldr	r2, [pc, #100]	; (800e9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e970:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e974:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e97e:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e980:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800e984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e988:	ee06 2a10 	vmov	s12, r2
 800e98c:	ee06 3a90 	vmov	s13, r3
 800e990:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800e994:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e998:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800e99c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e9a0:	eee7 6a05 	vfma.f32	s13, s14, s10
 800e9a4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e9a8:	e7a4      	b.n	800e8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e9aa:	ee07 2a90 	vmov	s15, r2
 800e9ae:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800e9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800e9b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9b6:	e78a      	b.n	800e8ce <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e9b8:	ee07 2a90 	vmov	s15, r2
 800e9bc:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e9dc <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800e9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9c4:	e783      	b.n	800e8ce <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800e9c6:	bf00      	nop
 800e9c8:	58024400 	.word	0x58024400
 800e9cc:	4a742400 	.word	0x4a742400
 800e9d0:	39000000 	.word	0x39000000
 800e9d4:	03d09000 	.word	0x03d09000
 800e9d8:	4bbebc20 	.word	0x4bbebc20
 800e9dc:	4c742400 	.word	0x4c742400

0800e9e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e9e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800e9e4:	b500      	push	{lr}
 800e9e6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e9e8:	d050      	beq.n	800ea8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e9ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800e9ee:	d019      	beq.n	800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e9f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e9f4:	f000 808a 	beq.w	800eb0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e9f8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800e9fc:	d05a      	beq.n	800eab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e9fe:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ea02:	d034      	beq.n	800ea6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ea04:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800ea08:	f000 80b1 	beq.w	800eb6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ea0c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800ea10:	f000 80be 	beq.w	800eb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ea14:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800ea18:	f000 8096 	beq.w	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      frequency = 0;
 800ea1c:	2000      	movs	r0, #0
}
 800ea1e:	b005      	add	sp, #20
 800ea20:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ea24:	4a70      	ldr	r2, [pc, #448]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800ea26:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ea28:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800ea2c:	2b80      	cmp	r3, #128	; 0x80
 800ea2e:	d059      	beq.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800ea30:	d912      	bls.n	800ea58 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 800ea32:	2bc0      	cmp	r3, #192	; 0xc0
 800ea34:	d026      	beq.n	800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800ea36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea3a:	d1ef      	bne.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ea3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800ea3e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800ea42:	d05b      	beq.n	800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800ea44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea48:	f000 80a0 	beq.w	800eb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
            frequency = HSE_VALUE;
 800ea4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea50:	4866      	ldr	r0, [pc, #408]	; (800ebec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 800ea52:	bf18      	it	ne
 800ea54:	2000      	movne	r0, #0
 800ea56:	e7e2      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d03c      	beq.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800ea5c:	2b40      	cmp	r3, #64	; 0x40
 800ea5e:	d1dd      	bne.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea60:	a801      	add	r0, sp, #4
 800ea62:	f7ff fdb9 	bl	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ea66:	9801      	ldr	r0, [sp, #4]
}
 800ea68:	b005      	add	sp, #20
 800ea6a:	f85d fb04 	ldr.w	pc, [sp], #4
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ea6e:	4a5e      	ldr	r2, [pc, #376]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800ea70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ea72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800ea76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea7a:	d033      	beq.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800ea7c:	d929      	bls.n	800ead2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800ea7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea82:	d158      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = EXTERNAL_CLOCK_VALUE;
 800ea84:	485a      	ldr	r0, [pc, #360]	; (800ebf0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
}
 800ea86:	b005      	add	sp, #20
 800ea88:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ea8c:	4b56      	ldr	r3, [pc, #344]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800ea8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea90:	f003 0307 	and.w	r3, r3, #7
 800ea94:	2b04      	cmp	r3, #4
 800ea96:	d8c1      	bhi.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800ea98:	a201      	add	r2, pc, #4	; (adr r2, 800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800ea9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea9e:	bf00      	nop
 800eaa0:	0800ead7 	.word	0x0800ead7
 800eaa4:	0800ea61 	.word	0x0800ea61
 800eaa8:	0800eae5 	.word	0x0800eae5
 800eaac:	0800ea85 	.word	0x0800ea85
 800eab0:	0800eaf3 	.word	0x0800eaf3
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800eab4:	4a4c      	ldr	r2, [pc, #304]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800eab6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800eab8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800eabc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eac0:	d010      	beq.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800eac2:	d91d      	bls.n	800eb00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800eac4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eac8:	d0dc      	beq.n	800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800eaca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eace:	d0b5      	beq.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800ead0:	e7a4      	b.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d134      	bne.n	800eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ead6:	a801      	add	r0, sp, #4
 800ead8:	f7ff fed6 	bl	800e888 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eadc:	9802      	ldr	r0, [sp, #8]
}
 800eade:	b005      	add	sp, #20
 800eae0:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eae4:	a801      	add	r0, sp, #4
 800eae6:	f7ff fe23 	bl	800e730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eaea:	9801      	ldr	r0, [sp, #4]
}
 800eaec:	b005      	add	sp, #20
 800eaee:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eaf2:	4b3d      	ldr	r3, [pc, #244]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800eaf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800eaf6:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800eafa:	d1a3      	bne.n	800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSI_VALUE;
 800eafc:	483d      	ldr	r0, [pc, #244]	; (800ebf4 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 800eafe:	e78e      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0e8      	beq.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800eb04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eb08:	d0aa      	beq.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800eb0a:	e787      	b.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800eb0c:	4a36      	ldr	r2, [pc, #216]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800eb0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800eb10:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800eb14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb18:	d0e4      	beq.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800eb1a:	d805      	bhi.n	800eb28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d0da      	beq.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800eb20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb24:	d09c      	beq.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800eb26:	e779      	b.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800eb28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eb2c:	d0aa      	beq.n	800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800eb2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb32:	d083      	beq.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800eb34:	e772      	b.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 800eb36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb3a:	f43f af7f 	beq.w	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800eb3e:	e76d      	b.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800eb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb44:	d08c      	beq.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 800eb46:	e769      	b.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800eb48:	4b27      	ldr	r3, [pc, #156]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800eb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb4c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800eb50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb54:	d0d2      	beq.n	800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800eb56:	d824      	bhi.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800eb58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb5c:	d03e      	beq.n	800ebdc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800eb5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb62:	d127      	bne.n	800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb64:	a801      	add	r0, sp, #4
 800eb66:	f7ff fde3 	bl	800e730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800eb6a:	9802      	ldr	r0, [sp, #8]
          break;
 800eb6c:	e757      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800eb6e:	4a1e      	ldr	r2, [pc, #120]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800eb70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800eb72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800eb76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb7a:	d02a      	beq.n	800ebd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 800eb7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb80:	f43f af5c 	beq.w	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f47f af49 	bne.w	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800eb8a:	e769      	b.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      switch (srcclk)
 800eb8c:	481a      	ldr	r0, [pc, #104]	; (800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800eb8e:	e746      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800eb90:	4b15      	ldr	r3, [pc, #84]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800eb92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800eb94:	03db      	lsls	r3, r3, #15
 800eb96:	d59e      	bpl.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb98:	a801      	add	r0, sp, #4
 800eb9a:	f7ff fd1d 	bl	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800eb9e:	9803      	ldr	r0, [sp, #12]
          break;
 800eba0:	e73d      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 800eba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eba6:	d0f1      	beq.n	800eb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = HSE_VALUE;
 800eba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ebac:	480f      	ldr	r0, [pc, #60]	; (800ebec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 800ebae:	bf18      	it	ne
 800ebb0:	2000      	movne	r0, #0
 800ebb2:	e734      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f47f af31 	bne.w	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ebba:	f7fe fd87 	bl	800d6cc <HAL_RCC_GetHCLKFreq>
 800ebbe:	4b0a      	ldr	r3, [pc, #40]	; (800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800ebc0:	4a0e      	ldr	r2, [pc, #56]	; (800ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x21c>)
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ebc8:	5cd3      	ldrb	r3, [r2, r3]
 800ebca:	f003 031f 	and.w	r3, r3, #31
 800ebce:	40d8      	lsrs	r0, r3
          break;
 800ebd0:	e725      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebd2:	a801      	add	r0, sp, #4
 800ebd4:	f7ff fdac 	bl	800e730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ebd8:	9803      	ldr	r0, [sp, #12]
          break;
 800ebda:	e720      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebdc:	a801      	add	r0, sp, #4
 800ebde:	f7ff fcfb 	bl	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ebe2:	9802      	ldr	r0, [sp, #8]
          break;
 800ebe4:	e71b      	b.n	800ea1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800ebe6:	bf00      	nop
 800ebe8:	58024400 	.word	0x58024400
 800ebec:	017d7840 	.word	0x017d7840
 800ebf0:	00bb8000 	.word	0x00bb8000
 800ebf4:	03d09000 	.word	0x03d09000
 800ebf8:	003d0900 	.word	0x003d0900
 800ebfc:	0802c2b8 	.word	0x0802c2b8

0800ec00 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d036      	beq.n	800ec72 <HAL_RNG_Init+0x72>
{
 800ec04:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ec06:	7a43      	ldrb	r3, [r0, #9]
 800ec08:	4604      	mov	r4, r0
 800ec0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ec0e:	b333      	cbz	r3, 800ec5e <HAL_RNG_Init+0x5e>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ec10:	2202      	movs	r2, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ec12:	e9d4 3100 	ldrd	r3, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800ec16:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	f022 0220 	bic.w	r2, r2, #32
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	f042 0204 	orr.w	r2, r2, #4
 800ec28:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	065b      	lsls	r3, r3, #25
 800ec2e:	d503      	bpl.n	800ec38 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800ec30:	2304      	movs	r3, #4
    return HAL_ERROR;
 800ec32:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800ec34:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800ec36:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800ec38:	f7fa f948 	bl	8008ecc <HAL_GetTick>
 800ec3c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ec3e:	e004      	b.n	800ec4a <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ec40:	f7fa f944 	bl	8008ecc <HAL_GetTick>
 800ec44:	1b43      	subs	r3, r0, r5
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d80d      	bhi.n	800ec66 <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ec4a:	6823      	ldr	r3, [r4, #0]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	f013 0304 	ands.w	r3, r3, #4
 800ec52:	d1f5      	bne.n	800ec40 <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 800ec54:	2201      	movs	r2, #1
  return HAL_OK;
 800ec56:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800ec58:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ec5a:	60e3      	str	r3, [r4, #12]
}
 800ec5c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800ec5e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800ec60:	f7f5 fb22 	bl	80042a8 <HAL_RNG_MspInit>
 800ec64:	e7d4      	b.n	800ec10 <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 800ec66:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ec68:	2302      	movs	r3, #2
      return HAL_ERROR;
 800ec6a:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800ec6c:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ec6e:	60e3      	str	r3, [r4, #12]
}
 800ec70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ec72:	2001      	movs	r0, #1
}
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop

0800ec78 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ec78:	b1b0      	cbz	r0, 800eca8 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 800ec7a:	6803      	ldr	r3, [r0, #0]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	f022 0220 	bic.w	r2, r2, #32
{
 800ec82:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	f022 020c 	bic.w	r2, r2, #12
 800ec8e:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800ec90:	685a      	ldr	r2, [r3, #4]
 800ec92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ec96:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800ec98:	f7f5 fb24 	bl	80042e4 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 800eca0:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800eca2:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 800eca4:	7223      	strb	r3, [r4, #8]
}
 800eca6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eca8:	2001      	movs	r0, #1
}
 800ecaa:	4770      	bx	lr

0800ecac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800ecac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800ecb0:	7a03      	ldrb	r3, [r0, #8]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d028      	beq.n	800ed08 <HAL_RNG_GenerateRandomNumber+0x5c>
 800ecb6:	2201      	movs	r2, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800ecb8:	7a43      	ldrb	r3, [r0, #9]
 800ecba:	4604      	mov	r4, r0
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 800ecc2:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800ecc4:	d007      	beq.n	800ecd6 <HAL_RNG_GenerateRandomNumber+0x2a>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ecc6:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800ecc8:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ecca:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800eccc:	2300      	movs	r3, #0
 800ecce:	7223      	strb	r3, [r4, #8]

  return status;
}
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800ecd6:	2302      	movs	r3, #2
 800ecd8:	460e      	mov	r6, r1
 800ecda:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800ecdc:	f7fa f8f6 	bl	8008ecc <HAL_GetTick>
 800ece0:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ece2:	e004      	b.n	800ecee <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ece4:	f7fa f8f2 	bl	8008ecc <HAL_GetTick>
 800ece8:	1bc0      	subs	r0, r0, r7
 800ecea:	2802      	cmp	r0, #2
 800ecec:	d811      	bhi.n	800ed12 <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ecee:	6822      	ldr	r2, [r4, #0]
 800ecf0:	6855      	ldr	r5, [r2, #4]
 800ecf2:	f015 0501 	ands.w	r5, r5, #1
 800ecf6:	d0f5      	beq.n	800ece4 <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 800ecf8:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800ecfa:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800ecfc:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800ed00:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800ed02:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800ed04:	7262      	strb	r2, [r4, #9]
 800ed06:	e7e1      	b.n	800eccc <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800ed08:	f04f 0802 	mov.w	r8, #2
}
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 800ed12:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ed14:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 800ed16:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 800ed18:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ed1a:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 800ed1c:	e7d8      	b.n	800ecd0 <HAL_RNG_GenerateRandomNumber+0x24>
 800ed1e:	bf00      	nop

0800ed20 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ed20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed24:	4605      	mov	r5, r0
 800ed26:	b086      	sub	sp, #24
 800ed28:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ed2a:	f7fa f8cf 	bl	8008ecc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ed2e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800ed30:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ed32:	6828      	ldr	r0, [r5, #0]
 800ed34:	f001 ffc0 	bl	8010cb8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed38:	4604      	mov	r4, r0
 800ed3a:	b118      	cbz	r0, 800ed44 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	b006      	add	sp, #24
 800ed40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ed44:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800ed46:	6828      	ldr	r0, [r5, #0]
 800ed48:	0409      	lsls	r1, r1, #16
 800ed4a:	f002 fd01 	bl	8011750 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed4e:	4604      	mov	r4, r0
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d1f3      	bne.n	800ed3c <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ed54:	f04f 32ff 	mov.w	r2, #4294967295
 800ed58:	2308      	movs	r3, #8
 800ed5a:	2030      	movs	r0, #48	; 0x30
 800ed5c:	2102      	movs	r1, #2
 800ed5e:	e9cd 2300 	strd	r2, r3, [sp]
 800ed62:	2200      	movs	r2, #0
 800ed64:	2301      	movs	r3, #1
 800ed66:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ed6a:	4669      	mov	r1, sp
 800ed6c:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ed6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ed72:	f001 ff8b 	bl	8010c8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ed76:	6828      	ldr	r0, [r5, #0]
 800ed78:	f002 fe6a 	bl	8011a50 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d1dc      	bne.n	800ed3c <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ed82:	4682      	mov	sl, r0
 800ed84:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ed86:	f240 582a 	movw	r8, #1322	; 0x52a
 800ed8a:	e004      	b.n	800ed96 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ed8c:	f7fa f89e 	bl	8008ecc <HAL_GetTick>
 800ed90:	1b83      	subs	r3, r0, r6
 800ed92:	3301      	adds	r3, #1
 800ed94:	d024      	beq.n	800ede0 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ed96:	6828      	ldr	r0, [r5, #0]
 800ed98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ed9a:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ed9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800eda0:	d10c      	bne.n	800edbc <SD_FindSCR+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eda2:	0319      	lsls	r1, r3, #12
 800eda4:	d4f2      	bmi.n	800ed8c <SD_FindSCR+0x6c>
 800eda6:	2c00      	cmp	r4, #0
 800eda8:	d1f0      	bne.n	800ed8c <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800edaa:	f001 ff4d 	bl	8010c48 <SDMMC_ReadFIFO>
 800edae:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800edb0:	6828      	ldr	r0, [r5, #0]
      index++;
 800edb2:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800edb4:	f001 ff48 	bl	8010c48 <SDMMC_ReadFIFO>
 800edb8:	4682      	mov	sl, r0
      index++;
 800edba:	e7e7      	b.n	800ed8c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800edbc:	071a      	lsls	r2, r3, #28
 800edbe:	d415      	bmi.n	800edec <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800edc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800edc2:	079b      	lsls	r3, r3, #30
 800edc4:	d40f      	bmi.n	800ede6 <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800edc6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800edc8:	f014 0420 	ands.w	r4, r4, #32
 800edcc:	d111      	bne.n	800edf2 <SD_FindSCR+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800edce:	fa9a f28a 	rev.w	r2, sl
 800edd2:	fa99 f389 	rev.w	r3, r9
 800edd6:	4908      	ldr	r1, [pc, #32]	; (800edf8 <SD_FindSCR+0xd8>)
 800edd8:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800edda:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800edde:	e7ad      	b.n	800ed3c <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800ede0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ede4:	e7aa      	b.n	800ed3c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ede6:	2402      	movs	r4, #2
 800ede8:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800edea:	e7a7      	b.n	800ed3c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800edec:	2408      	movs	r4, #8
 800edee:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800edf0:	e7a4      	b.n	800ed3c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800edf2:	2420      	movs	r4, #32
 800edf4:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800edf6:	e7a1      	b.n	800ed3c <SD_FindSCR+0x1c>
 800edf8:	18000f3a 	.word	0x18000f3a

0800edfc <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 800edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee00:	b096      	sub	sp, #88	; 0x58
 800ee02:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800ee04:	2240      	movs	r2, #64	; 0x40
 800ee06:	2100      	movs	r1, #0
 800ee08:	a806      	add	r0, sp, #24
 800ee0a:	f013 f9ff 	bl	802220c <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 800ee0e:	f7fa f85d 	bl	8008ecc <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800ee12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ee14:	b13b      	cbz	r3, 800ee26 <SD_HighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ee16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee1a:	d00a      	beq.n	800ee32 <SD_HighSpeed+0x36>
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);


    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 800ee1c:	2600      	movs	r6, #0
    }

  }

  return errorstate;
}
 800ee1e:	4630      	mov	r0, r6
 800ee20:	b016      	add	sp, #88	; 0x58
 800ee22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ee26:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	b016      	add	sp, #88	; 0x58
 800ee2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	4607      	mov	r7, r0
 800ee36:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ee38:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 800ee3a:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ee3c:	f001 ff3c 	bl	8010cb8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ee40:	4606      	mov	r6, r0
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d1eb      	bne.n	800ee1e <SD_HighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee46:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4a:	2340      	movs	r3, #64	; 0x40
 800ee4c:	2060      	movs	r0, #96	; 0x60
 800ee4e:	2102      	movs	r1, #2
 800ee50:	e9cd 2300 	strd	r2, r3, [sp]
 800ee54:	2200      	movs	r2, #0
 800ee56:	2301      	movs	r3, #1
 800ee58:	e9cd 0102 	strd	r0, r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800ee5c:	4669      	mov	r1, sp
 800ee5e:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ee60:	e9cd 2304 	strd	r2, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800ee64:	f001 ff12 	bl	8010c8c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 800ee68:	4924      	ldr	r1, [pc, #144]	; (800eefc <SD_HighSpeed+0x100>)
 800ee6a:	6820      	ldr	r0, [r4, #0]
 800ee6c:	f003 f8ac 	bl	8011fc8 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee70:	4606      	mov	r6, r0
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d1d3      	bne.n	800ee1e <SD_HighSpeed+0x22>
  uint32_t count, loop = 0 ;
 800ee76:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800ee78:	f240 5a2a 	movw	sl, #1322	; 0x52a
 800ee7c:	e004      	b.n	800ee88 <SD_HighSpeed+0x8c>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800ee7e:	f7fa f825 	bl	8008ecc <HAL_GetTick>
 800ee82:	1bc0      	subs	r0, r0, r7
 800ee84:	3001      	adds	r0, #1
 800ee86:	d029      	beq.n	800eedc <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800ee88:	6820      	ldr	r0, [r4, #0]
 800ee8a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee8c:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ee90:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800ee92:	d112      	bne.n	800eeba <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ee94:	0415      	lsls	r5, r2, #16
 800ee96:	d5f2      	bpl.n	800ee7e <SD_HighSpeed+0x82>
 800ee98:	ab06      	add	r3, sp, #24
 800ee9a:	eb03 1549 	add.w	r5, r3, r9, lsl #5
 800ee9e:	ab0e      	add	r3, sp, #56	; 0x38
 800eea0:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 800eea4:	e000      	b.n	800eea8 <SD_HighSpeed+0xac>
 800eea6:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800eea8:	f001 fece 	bl	8010c48 <SDMMC_ReadFIFO>
 800eeac:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 800eeb0:	4545      	cmp	r5, r8
 800eeb2:	d1f8      	bne.n	800eea6 <SD_HighSpeed+0xaa>
        loop ++;
 800eeb4:	f109 0901 	add.w	r9, r9, #1
 800eeb8:	e7e1      	b.n	800ee7e <SD_HighSpeed+0x82>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eeba:	0714      	lsls	r4, r2, #28
 800eebc:	d415      	bmi.n	800eeea <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eebe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eec0:	0791      	lsls	r1, r2, #30
 800eec2:	d415      	bmi.n	800eef0 <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eec4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eec6:	0692      	lsls	r2, r2, #26
 800eec8:	d415      	bmi.n	800eef6 <SD_HighSpeed+0xfa>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800eeca:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eece:	490c      	ldr	r1, [pc, #48]	; (800ef00 <SD_HighSpeed+0x104>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800eed0:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eed2:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800eed4:	d4a2      	bmi.n	800ee1c <SD_HighSpeed+0x20>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800eed6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800eeda:	e7a0      	b.n	800ee1e <SD_HighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800eedc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 800eee0:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800eee2:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800eee4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 800eee8:	e799      	b.n	800ee1e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eeea:	2208      	movs	r2, #8
 800eeec:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 800eeee:	e796      	b.n	800ee1e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eef0:	2602      	movs	r6, #2
 800eef2:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 800eef4:	e793      	b.n	800ee1e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eef6:	2620      	movs	r6, #32
 800eef8:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 800eefa:	e790      	b.n	800ee1e <SD_HighSpeed+0x22>
 800eefc:	80ffff01 	.word	0x80ffff01
 800ef00:	18000f3a 	.word	0x18000f3a

0800ef04 <HAL_SD_MspInit>:
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop

0800ef08 <HAL_SD_MspDeInit>:
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop

0800ef0c <HAL_SD_ReadBlocks>:
{
 800ef0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef10:	460c      	mov	r4, r1
 800ef12:	b087      	sub	sp, #28
 800ef14:	4683      	mov	fp, r0
 800ef16:	4691      	mov	r9, r2
 800ef18:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800ef1a:	f7f9 ffd7 	bl	8008ecc <HAL_GetTick>
  if(NULL == pData)
 800ef1e:	2c00      	cmp	r4, #0
 800ef20:	f000 8082 	beq.w	800f028 <HAL_SD_ReadBlocks+0x11c>
  if(hsd->State == HAL_SD_STATE_READY)
 800ef24:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	fa5f f883 	uxtb.w	r8, r3
 800ef2e:	d168      	bne.n	800f002 <HAL_SD_ReadBlocks+0xf6>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ef30:	eb09 0306 	add.w	r3, r9, r6
 800ef34:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ef38:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ef3a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ef3c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ef40:	d87e      	bhi.n	800f040 <HAL_SD_ReadBlocks+0x134>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ef42:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800ef46:	2203      	movs	r2, #3
 800ef48:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 800ef4a:	f8db 0000 	ldr.w	r0, [fp]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ef4e:	2b01      	cmp	r3, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ef50:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 800ef54:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ef58:	f04f 0a02 	mov.w	sl, #2
    hsd->Instance->DCTRL = 0U;
 800ef5c:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ef5e:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ef62:	f04f 0290 	mov.w	r2, #144	; 0x90
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ef66:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ef68:	f04f 0300 	mov.w	r3, #0
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ef6c:	9100      	str	r1, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ef6e:	4669      	mov	r1, sp
      add *= 512U;
 800ef70:	bf18      	it	ne
 800ef72:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ef76:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ef78:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ef7a:	e9cd a303 	strd	sl, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ef7e:	f001 fe85 	bl	8010c8c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ef82:	f8db 0000 	ldr.w	r0, [fp]
    if(NumberOfBlocks > 1U)
 800ef86:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ef88:	68c3      	ldr	r3, [r0, #12]
 800ef8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef8e:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800ef90:	d943      	bls.n	800f01a <HAL_SD_ReadBlocks+0x10e>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ef92:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ef94:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ef98:	f001 ffd6 	bl	8010f48 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d159      	bne.n	800f054 <HAL_SD_ReadBlocks+0x148>
    dataremaining = config.DataLength;
 800efa0:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800efa4:	e006      	b.n	800efb4 <HAL_SD_ReadBlocks+0xa8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800efa6:	f7f9 ff91 	bl	8008ecc <HAL_GetTick>
 800efaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efac:	1b40      	subs	r0, r0, r5
 800efae:	4298      	cmp	r0, r3
 800efb0:	f080 8083 	bcs.w	800f0ba <HAL_SD_ReadBlocks+0x1ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800efb4:	f8db 0000 	ldr.w	r0, [fp]
 800efb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800efba:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800efbe:	d159      	bne.n	800f074 <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800efc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800efc2:	041a      	lsls	r2, r3, #16
 800efc4:	d5ef      	bpl.n	800efa6 <HAL_SD_ReadBlocks+0x9a>
 800efc6:	f1ba 0f1f 	cmp.w	sl, #31
 800efca:	d9ec      	bls.n	800efa6 <HAL_SD_ReadBlocks+0x9a>
 800efcc:	1d27      	adds	r7, r4, #4
 800efce:	f104 0924 	add.w	r9, r4, #36	; 0x24
 800efd2:	e001      	b.n	800efd8 <HAL_SD_ReadBlocks+0xcc>
 800efd4:	f8db 0000 	ldr.w	r0, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800efd8:	f001 fe36 	bl	8010c48 <SDMMC_ReadFIFO>
 800efdc:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800efde:	0a00      	lsrs	r0, r0, #8
 800efe0:	3704      	adds	r7, #4
          *tempbuff = (uint8_t)(data & 0xFFU);
 800efe2:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800efe6:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800efe8:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800efea:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800efee:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800eff2:	f807 2c05 	strb.w	r2, [r7, #-5]
        for(count = 0U; count < 8U; count++)
 800eff6:	454f      	cmp	r7, r9
 800eff8:	d1ec      	bne.n	800efd4 <HAL_SD_ReadBlocks+0xc8>
 800effa:	3420      	adds	r4, #32
        dataremaining -= 32U;
 800effc:	f1aa 0a20 	sub.w	sl, sl, #32
 800f000:	e7d1      	b.n	800efa6 <HAL_SD_ReadBlocks+0x9a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f002:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 800f006:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f00a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f00e:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 800f012:	4640      	mov	r0, r8
 800f014:	b007      	add	sp, #28
 800f016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800f01a:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f01c:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800f01e:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f022:	f001 feed 	bl	8010e00 <SDMMC_CmdReadSingleBlock>
 800f026:	e7b9      	b.n	800ef9c <HAL_SD_ReadBlocks+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f028:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 800f02c:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800f034:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f036:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 800f03a:	b007      	add	sp, #28
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f040:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
}
 800f044:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f04a:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 800f04e:	b007      	add	sp, #28
 800f050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f054:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 800f058:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f05a:	4c39      	ldr	r4, [pc, #228]	; (800f140 <HAL_SD_ReadBlocks+0x234>)
          hsd->Context = SD_CONTEXT_NONE;
 800f05c:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f05e:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800f060:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800f064:	4318      	orrs	r0, r3
 800f066:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800f06a:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800f06e:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
          return HAL_ERROR;
 800f072:	e7ce      	b.n	800f012 <HAL_SD_ReadBlocks+0x106>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800f074:	68c3      	ldr	r3, [r0, #12]
 800f076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f07a:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800f07c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f07e:	05db      	lsls	r3, r3, #23
 800f080:	d501      	bpl.n	800f086 <HAL_SD_ReadBlocks+0x17a>
 800f082:	2e01      	cmp	r6, #1
 800f084:	d82c      	bhi.n	800f0e0 <HAL_SD_ReadBlocks+0x1d4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f086:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f088:	f013 0308 	ands.w	r3, r3, #8
 800f08c:	d141      	bne.n	800f112 <HAL_SD_ReadBlocks+0x206>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f08e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f090:	f012 0202 	ands.w	r2, r2, #2
 800f094:	d12f      	bne.n	800f0f6 <HAL_SD_ReadBlocks+0x1ea>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f096:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f098:	f013 0320 	ands.w	r3, r3, #32
 800f09c:	d048      	beq.n	800f130 <HAL_SD_ReadBlocks+0x224>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f09e:	4b28      	ldr	r3, [pc, #160]	; (800f140 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 800f0a0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f0a2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f0a4:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800f0a8:	f043 0320 	orr.w	r3, r3, #32
 800f0ac:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f0b0:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f0b4:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 800f0b8:	e7ab      	b.n	800f012 <HAL_SD_ReadBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f0ba:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 800f0be:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f0c0:	481f      	ldr	r0, [pc, #124]	; (800f140 <HAL_SD_ReadBlocks+0x234>)
        hsd->Context = SD_CONTEXT_NONE;
 800f0c2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800f0c4:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f0c8:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800f0ca:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800f0ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f0d2:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800f0d6:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f0da:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        return HAL_TIMEOUT;
 800f0de:	e798      	b.n	800f012 <HAL_SD_ReadBlocks+0x106>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800f0e0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d0ce      	beq.n	800f086 <HAL_SD_ReadBlocks+0x17a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f0e8:	f002 f91a 	bl	8011320 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d1b1      	bne.n	800f054 <HAL_SD_ReadBlocks+0x148>
 800f0f0:	f8db 0000 	ldr.w	r0, [fp]
 800f0f4:	e7c7      	b.n	800f086 <HAL_SD_ReadBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f0f6:	4a12      	ldr	r2, [pc, #72]	; (800f140 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 800f0f8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f0fa:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f0fc:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800f100:	f042 0202 	orr.w	r2, r2, #2
 800f104:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f108:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f10c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      return HAL_ERROR;
 800f110:	e77f      	b.n	800f012 <HAL_SD_ReadBlocks+0x106>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f112:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 800f114:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800f116:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f118:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f11a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800f11e:	f043 0308 	orr.w	r3, r3, #8
 800f122:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f126:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f12a:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 800f12e:	e770      	b.n	800f012 <HAL_SD_ReadBlocks+0x106>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f130:	4904      	ldr	r1, [pc, #16]	; (800f144 <HAL_SD_ReadBlocks+0x238>)
    hsd->State = HAL_SD_STATE_READY;
 800f132:	2201      	movs	r2, #1
    return HAL_OK;
 800f134:	4698      	mov	r8, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f136:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f138:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    return HAL_OK;
 800f13c:	e769      	b.n	800f012 <HAL_SD_ReadBlocks+0x106>
 800f13e:	bf00      	nop
 800f140:	1fe00fff 	.word	0x1fe00fff
 800f144:	18000f3a 	.word	0x18000f3a

0800f148 <HAL_SD_WriteBlocks>:
{
 800f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	460d      	mov	r5, r1
 800f14e:	b089      	sub	sp, #36	; 0x24
 800f150:	4604      	mov	r4, r0
 800f152:	4692      	mov	sl, r2
 800f154:	461f      	mov	r7, r3
 800f156:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800f15a:	f7f9 feb7 	bl	8008ecc <HAL_GetTick>
  if(NULL == pData)
 800f15e:	2d00      	cmp	r5, #0
 800f160:	d068      	beq.n	800f234 <HAL_SD_WriteBlocks+0xec>
  if(hsd->State == HAL_SD_STATE_READY)
 800f162:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800f166:	2b01      	cmp	r3, #1
 800f168:	fa5f f983 	uxtb.w	r9, r3
 800f16c:	d152      	bne.n	800f214 <HAL_SD_WriteBlocks+0xcc>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f16e:	eb0a 0307 	add.w	r3, sl, r7
 800f172:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f174:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f176:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f178:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f17a:	d865      	bhi.n	800f248 <HAL_SD_WriteBlocks+0x100>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f17c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 800f17e:	2203      	movs	r2, #3
 800f180:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800f182:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f184:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f186:	f04f 33ff 	mov.w	r3, #4294967295
    hsd->State = HAL_SD_STATE_BUSY;
 800f18a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f18e:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800f192:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f194:	ea4f 2147 	mov.w	r1, r7, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f198:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f19a:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f19e:	9103      	str	r1, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f1a0:	a902      	add	r1, sp, #8
      add *= 512U;
 800f1a2:	bf18      	it	ne
 800f1a4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f1a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800f1ac:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f1b0:	f001 fd6c 	bl	8010c8c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800f1b4:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 800f1b6:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800f1b8:	68c3      	ldr	r3, [r0, #12]
 800f1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1be:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800f1c0:	d932      	bls.n	800f228 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800f1c2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f1c4:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800f1c6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f1c8:	f002 f806 	bl	80111d8 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d143      	bne.n	800f258 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 800f1d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f1d4:	e004      	b.n	800f1e0 <HAL_SD_WriteBlocks+0x98>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800f1d6:	f7f9 fe79 	bl	8008ecc <HAL_GetTick>
 800f1da:	1b80      	subs	r0, r0, r6
 800f1dc:	4540      	cmp	r0, r8
 800f1de:	d267      	bcs.n	800f2b0 <HAL_SD_WriteBlocks+0x168>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f1e0:	6820      	ldr	r0, [r4, #0]
 800f1e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f1e4:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800f1e8:	d142      	bne.n	800f270 <HAL_SD_WriteBlocks+0x128>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800f1ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f1ec:	045a      	lsls	r2, r3, #17
 800f1ee:	d5f2      	bpl.n	800f1d6 <HAL_SD_WriteBlocks+0x8e>
 800f1f0:	f1bb 0f1f 	cmp.w	fp, #31
 800f1f4:	d9ef      	bls.n	800f1d6 <HAL_SD_WriteBlocks+0x8e>
 800f1f6:	f105 0a20 	add.w	sl, r5, #32
 800f1fa:	e000      	b.n	800f1fe <HAL_SD_WriteBlocks+0xb6>
 800f1fc:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800f1fe:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f202:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800f204:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f206:	f001 fd23 	bl	8010c50 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800f20a:	4555      	cmp	r5, sl
 800f20c:	d1f6      	bne.n	800f1fc <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 800f20e:	f1ab 0b20 	sub.w	fp, fp, #32
 800f212:	e7e0      	b.n	800f1d6 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800f216:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f21a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f21e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f220:	4648      	mov	r0, r9
 800f222:	b009      	add	sp, #36	; 0x24
 800f224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800f228:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f22a:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800f22c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f22e:	f001 ff2f 	bl	8011090 <SDMMC_CmdWriteSingleBlock>
 800f232:	e7cb      	b.n	800f1cc <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800f236:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f23a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800f23e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f240:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f242:	b009      	add	sp, #36	; 0x24
 800f244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 800f24a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f24c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f250:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f252:	b009      	add	sp, #36	; 0x24
 800f254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f258:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800f25a:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f25c:	4d2e      	ldr	r5, [pc, #184]	; (800f318 <HAL_SD_WriteBlocks+0x1d0>)
          hsd->Context = SD_CONTEXT_NONE;
 800f25e:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f260:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800f262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f264:	4318      	orrs	r0, r3
 800f266:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800f268:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800f26c:	6322      	str	r2, [r4, #48]	; 0x30
          return HAL_ERROR;
 800f26e:	e7d7      	b.n	800f220 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800f270:	68c3      	ldr	r3, [r0, #12]
 800f272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f276:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800f278:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f27a:	05db      	lsls	r3, r3, #23
 800f27c:	d501      	bpl.n	800f282 <HAL_SD_WriteBlocks+0x13a>
 800f27e:	2f01      	cmp	r7, #1
 800f280:	d823      	bhi.n	800f2ca <HAL_SD_WriteBlocks+0x182>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f282:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f284:	f013 0308 	ands.w	r3, r3, #8
 800f288:	d133      	bne.n	800f2f2 <HAL_SD_WriteBlocks+0x1aa>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f28a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f28c:	f012 0202 	ands.w	r2, r2, #2
 800f290:	d124      	bne.n	800f2dc <HAL_SD_WriteBlocks+0x194>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800f292:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f294:	f013 0310 	ands.w	r3, r3, #16
 800f298:	d037      	beq.n	800f30a <HAL_SD_WriteBlocks+0x1c2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f29a:	4b1f      	ldr	r3, [pc, #124]	; (800f318 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 800f29c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f29e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f2a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2a2:	f043 0310 	orr.w	r3, r3, #16
 800f2a6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f2a8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f2ac:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800f2ae:	e7b7      	b.n	800f220 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2b0:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800f2b2:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2b4:	4818      	ldr	r0, [pc, #96]	; (800f318 <HAL_SD_WriteBlocks+0x1d0>)
        hsd->Context = SD_CONTEXT_NONE;
 800f2b6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800f2b8:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2bc:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800f2be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f2c0:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f2c2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f2c6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800f2c8:	e7aa      	b.n	800f220 <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800f2ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f2cc:	2b03      	cmp	r3, #3
 800f2ce:	d0d8      	beq.n	800f282 <HAL_SD_WriteBlocks+0x13a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f2d0:	f002 f826 	bl	8011320 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d1bf      	bne.n	800f258 <HAL_SD_WriteBlocks+0x110>
 800f2d8:	6820      	ldr	r0, [r4, #0]
 800f2da:	e7d2      	b.n	800f282 <HAL_SD_WriteBlocks+0x13a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2dc:	4a0e      	ldr	r2, [pc, #56]	; (800f318 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 800f2de:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2e0:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f2e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f2e4:	f042 0202 	orr.w	r2, r2, #2
 800f2e8:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f2ea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f2ee:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800f2f0:	e796      	b.n	800f220 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2f2:	4b09      	ldr	r3, [pc, #36]	; (800f318 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 800f2f4:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800f2f6:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f2f8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f2fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2fc:	f043 0308 	orr.w	r3, r3, #8
 800f300:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f302:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f306:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800f308:	e78a      	b.n	800f220 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f30a:	4904      	ldr	r1, [pc, #16]	; (800f31c <HAL_SD_WriteBlocks+0x1d4>)
    hsd->State = HAL_SD_STATE_READY;
 800f30c:	2201      	movs	r2, #1
    return HAL_OK;
 800f30e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f310:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f312:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800f316:	e783      	b.n	800f220 <HAL_SD_WriteBlocks+0xd8>
 800f318:	1fe00fff 	.word	0x1fe00fff
 800f31c:	18000f3a 	.word	0x18000f3a

0800f320 <HAL_SD_DeInit>:
  if(hsd == NULL)
 800f320:	b198      	cbz	r0, 800f34a <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f322:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 800f324:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f326:	2b02      	cmp	r3, #2
{
 800f328:	b510      	push	{r4, lr}
 800f32a:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800f32c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f330:	d00d      	beq.n	800f34e <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 800f332:	6820      	ldr	r0, [r4, #0]
 800f334:	f001 fc9a 	bl	8010c6c <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 800f338:	4620      	mov	r0, r4
 800f33a:	f7ff fde5 	bl	800ef08 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f33e:	2300      	movs	r3, #0
 800f340:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 800f342:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 800f344:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800f348:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800f34a:	2001      	movs	r0, #1
}
 800f34c:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 800f34e:	2000      	movs	r0, #0
 800f350:	f7f9 fd58 	bl	8008e04 <HAL_SD_DriveTransceiver_1_8V_Callback>
 800f354:	e7ed      	b.n	800f332 <HAL_SD_DeInit+0x12>
 800f356:	bf00      	nop

0800f358 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 800f358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f35c:	b096      	sub	sp, #88	; 0x58
 800f35e:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800f360:	2240      	movs	r2, #64	; 0x40
 800f362:	2100      	movs	r1, #0
 800f364:	a806      	add	r0, sp, #24
 800f366:	f012 ff51 	bl	802220c <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 800f36a:	f7f9 fdaf 	bl	8008ecc <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800f36e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f370:	b13b      	cbz	r3, 800f382 <SD_UltraHighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800f372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f376:	d00a      	beq.n	800f38e <SD_UltraHighSpeed+0x36>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 800f378:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 800f37a:	4628      	mov	r0, r5
 800f37c:	b016      	add	sp, #88	; 0x58
 800f37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f382:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 800f386:	4628      	mov	r0, r5
 800f388:	b016      	add	sp, #88	; 0x58
 800f38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 800f38e:	2300      	movs	r3, #0
 800f390:	4606      	mov	r6, r0
 800f392:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f394:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 800f396:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f398:	f001 fc8e 	bl	8010cb8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 800f39c:	4605      	mov	r5, r0
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d1eb      	bne.n	800f37a <SD_UltraHighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a6:	2340      	movs	r3, #64	; 0x40
 800f3a8:	2060      	movs	r0, #96	; 0x60
 800f3aa:	2102      	movs	r1, #2
 800f3ac:	e9cd 2300 	strd	r2, r3, [sp]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800f3b8:	4669      	mov	r1, sp
 800f3ba:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800f3c0:	f001 fc64 	bl	8010c8c <SDMMC_ConfigData>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d14a      	bne.n	800f45e <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 800f3c8:	4930      	ldr	r1, [pc, #192]	; (800f48c <SD_UltraHighSpeed+0x134>)
 800f3ca:	6820      	ldr	r0, [r4, #0]
 800f3cc:	f002 fdfc 	bl	8011fc8 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f3d0:	4605      	mov	r5, r0
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	d1d1      	bne.n	800f37a <SD_UltraHighSpeed+0x22>
  uint32_t count, loop = 0 ;
 800f3d6:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800f3d8:	f240 5a2a 	movw	sl, #1322	; 0x52a
 800f3dc:	e004      	b.n	800f3e8 <SD_UltraHighSpeed+0x90>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800f3de:	f7f9 fd75 	bl	8008ecc <HAL_GetTick>
 800f3e2:	1b80      	subs	r0, r0, r6
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d03d      	beq.n	800f464 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800f3e8:	6820      	ldr	r0, [r4, #0]
 800f3ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f3ec:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f3f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800f3f2:	d112      	bne.n	800f41a <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f3f4:	0417      	lsls	r7, r2, #16
 800f3f6:	d5f2      	bpl.n	800f3de <SD_UltraHighSpeed+0x86>
 800f3f8:	ab06      	add	r3, sp, #24
 800f3fa:	eb03 1749 	add.w	r7, r3, r9, lsl #5
 800f3fe:	ab0e      	add	r3, sp, #56	; 0x38
 800f400:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 800f404:	e000      	b.n	800f408 <SD_UltraHighSpeed+0xb0>
 800f406:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800f408:	f001 fc1e 	bl	8010c48 <SDMMC_ReadFIFO>
 800f40c:	f847 0b04 	str.w	r0, [r7], #4
        for (count = 0U; count < 8U; count++)
 800f410:	4547      	cmp	r7, r8
 800f412:	d1f8      	bne.n	800f406 <SD_UltraHighSpeed+0xae>
        loop ++;
 800f414:	f109 0901 	add.w	r9, r9, #1
 800f418:	e7e1      	b.n	800f3de <SD_UltraHighSpeed+0x86>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f41a:	0716      	lsls	r6, r2, #28
 800f41c:	d429      	bmi.n	800f472 <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f41e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f420:	0791      	lsls	r1, r2, #30
 800f422:	d42c      	bmi.n	800f47e <SD_UltraHighSpeed+0x126>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f424:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f426:	0692      	lsls	r2, r2, #26
 800f428:	d42c      	bmi.n	800f484 <SD_UltraHighSpeed+0x12c>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800f42a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f42e:	4918      	ldr	r1, [pc, #96]	; (800f490 <SD_UltraHighSpeed+0x138>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800f430:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f432:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800f434:	d520      	bpl.n	800f478 <SD_UltraHighSpeed+0x120>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800f436:	2001      	movs	r0, #1
 800f438:	f7f9 fce4 	bl	8008e04 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800f43c:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800f43e:	4815      	ldr	r0, [pc, #84]	; (800f494 <SD_UltraHighSpeed+0x13c>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800f440:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800f442:	4c15      	ldr	r4, [pc, #84]	; (800f498 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800f444:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800f448:	4914      	ldr	r1, [pc, #80]	; (800f49c <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800f44a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800f44e:	42a2      	cmp	r2, r4
 800f450:	bf18      	it	ne
 800f452:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 800f454:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800f456:	f001 fb91 	bl	8010b7c <DelayBlock_Enable>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d08c      	beq.n	800f378 <SD_UltraHighSpeed+0x20>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 800f45e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800f462:	e78a      	b.n	800f37a <SD_UltraHighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f464:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 800f468:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f46a:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800f46c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 800f470:	e783      	b.n	800f37a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f472:	2208      	movs	r2, #8
 800f474:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 800f476:	e780      	b.n	800f37a <SD_UltraHighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800f478:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800f47c:	e77d      	b.n	800f37a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f47e:	2502      	movs	r5, #2
 800f480:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 800f482:	e77a      	b.n	800f37a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f484:	2520      	movs	r5, #32
 800f486:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 800f488:	e777      	b.n	800f37a <SD_UltraHighSpeed+0x22>
 800f48a:	bf00      	nop
 800f48c:	80ff1f03 	.word	0x80ff1f03
 800f490:	18000f3a 	.word	0x18000f3a
 800f494:	52008000 	.word	0x52008000
 800f498:	52007000 	.word	0x52007000
 800f49c:	48022800 	.word	0x48022800

0800f4a0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f4a0:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 800f4a2:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f4a4:	0f90      	lsrs	r0, r2, #30
{
 800f4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f4a8:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f4aa:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f4ae:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f4b2:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f4b6:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f4ba:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f4bc:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f4be:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f4c0:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f4c2:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f4c4:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f4c6:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f4c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f4ca:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f4cc:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f4d0:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f4d4:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f4d8:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f4da:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f4de:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f4e0:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f4e4:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f4e6:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f4e8:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f4ea:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f4ec:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800f4ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d16e      	bne.n	800f5d2 <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f4f4:	f640 74fc 	movw	r4, #4092	; 0xffc
 800f4f8:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f4fa:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 800f4fc:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f500:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f504:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f508:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f50c:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f510:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f514:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f518:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f51a:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f51e:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f522:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f526:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f528:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f52a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f52c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f52e:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f530:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f532:	f004 0407 	and.w	r4, r4, #7
 800f536:	3402      	adds	r4, #2
 800f538:	40a2      	lsls	r2, r4
 800f53a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f53c:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800f53e:	659e      	str	r6, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f540:	f004 040f 	and.w	r4, r4, #15
 800f544:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f546:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f548:	651d      	str	r5, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f54a:	fb02 f204 	mul.w	r2, r2, r4
 800f54e:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f550:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f554:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f558:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 800f55c:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f55e:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 800f560:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f562:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 800f564:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f566:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f56a:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f56c:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f570:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f574:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f578:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f57a:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f57e:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f580:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f584:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f586:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f58a:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f58c:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f590:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f594:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 800f598:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f59c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f5a0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f5a4:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f5a8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f5ac:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f5b0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f5b4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f5b8:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f5bc:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f5c0:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f5c4:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f5c8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800f5cc:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 800f5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f5d2:	2801      	cmp	r0, #1
 800f5d4:	d110      	bne.n	800f5f8 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f5d6:	0412      	lsls	r2, r2, #16
 800f5d8:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 800f5da:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f5de:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800f5e2:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800f5e6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f5e8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800f5ea:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f5ec:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f5ee:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f5f0:	0292      	lsls	r2, r2, #10
 800f5f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f5f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f5f6:	e7ab      	b.n	800f550 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f5f8:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800f5fa:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f5fc:	4c04      	ldr	r4, [pc, #16]	; (800f610 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 800f5fe:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f600:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f608:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f60a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800f60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f610:	1fe00fff 	.word	0x1fe00fff

0800f614 <HAL_SD_InitCard>:
{
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f618:	2200      	movs	r2, #0
 800f61a:	2300      	movs	r3, #0
{
 800f61c:	b098      	sub	sp, #96	; 0x60
 800f61e:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f620:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f624:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f628:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f62c:	f7ff f9d8 	bl	800e9e0 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800f630:	4ab0      	ldr	r2, [pc, #704]	; (800f8f4 <HAL_SD_InitCard+0x2e0>)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f632:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800f634:	0a05      	lsrs	r5, r0, #8
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f636:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800f638:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800f63a:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f63e:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800f640:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f644:	d103      	bne.n	800f64e <HAL_SD_InitCard+0x3a>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	f043 0310 	orr.w	r3, r3, #16
 800f64c:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800f64e:	aa09      	add	r2, sp, #36	; 0x24
 800f650:	950a      	str	r5, [sp, #40]	; 0x28
 800f652:	ab06      	add	r3, sp, #24
 800f654:	ca07      	ldmia	r2, {r0, r1, r2}
 800f656:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f65a:	4638      	mov	r0, r7
 800f65c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f65e:	f001 fad9 	bl	8010c14 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f662:	6820      	ldr	r0, [r4, #0]
 800f664:	f001 fafa 	bl	8010c5c <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 800f668:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800f66c:	ea4f 0045 	mov.w	r0, r5, lsl #1
  if(sdmmc_clk != 0U)
 800f670:	d31b      	bcc.n	800f6aa <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800f672:	4ba1      	ldr	r3, [pc, #644]	; (800f8f8 <HAL_SD_InitCard+0x2e4>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800f674:	fbb6 f0f0 	udiv	r0, r6, r0
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800f678:	fbb3 f0f0 	udiv	r0, r3, r0
 800f67c:	3001      	adds	r0, #1
 800f67e:	f7f9 fc2b 	bl	8008ed8 <HAL_Delay>
  __IO uint32_t count = 0U;
 800f682:	2300      	movs	r3, #0
 800f684:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 800f686:	f7f9 fc21 	bl	8008ecc <HAL_GetTick>
 800f68a:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f68c:	6820      	ldr	r0, [r4, #0]
 800f68e:	f001 fff5 	bl	801167c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f692:	4605      	mov	r5, r0
 800f694:	b168      	cbz	r0, 800f6b2 <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 800f696:	2601      	movs	r6, #1
 800f698:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f69c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800f69e:	4328      	orrs	r0, r5
 800f6a0:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	b018      	add	sp, #96	; 0x60
 800f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 800f6aa:	2002      	movs	r0, #2
 800f6ac:	f7f9 fc14 	bl	8008ed8 <HAL_Delay>
 800f6b0:	e7e7      	b.n	800f682 <HAL_SD_InitCard+0x6e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f6b2:	6820      	ldr	r0, [r4, #0]
 800f6b4:	f002 f80e 	bl	80116d4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f040 80c2 	bne.w	800f842 <HAL_SD_InitCard+0x22e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	6820      	ldr	r0, [r4, #0]
 800f6c6:	f002 f843 	bl	8011750 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f6ca:	bb10      	cbnz	r0, 800f712 <HAL_SD_InitCard+0xfe>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f6cc:	9b05      	ldr	r3, [sp, #20]
 800f6ce:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 800f6d2:	42bb      	cmp	r3, r7
 800f6d4:	f200 80c5 	bhi.w	800f862 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f6d8:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800f900 <HAL_SD_InitCard+0x2ec>
 800f6dc:	e00b      	b.n	800f6f6 <HAL_SD_InitCard+0xe2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f6de:	6820      	ldr	r0, [r4, #0]
 800f6e0:	f001 fad0 	bl	8010c84 <SDMMC_GetResponse>
    count++;
 800f6e4:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f6e6:	2800      	cmp	r0, #0
    count++;
 800f6e8:	f103 0301 	add.w	r3, r3, #1
 800f6ec:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f6ee:	9b05      	ldr	r3, [sp, #20]
 800f6f0:	db12      	blt.n	800f718 <HAL_SD_InitCard+0x104>
 800f6f2:	42bb      	cmp	r3, r7
 800f6f4:	d810      	bhi.n	800f718 <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	6820      	ldr	r0, [r4, #0]
 800f6fa:	f002 f829 	bl	8011750 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f6fe:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 800f700:	4605      	mov	r5, r0
 800f702:	2800      	cmp	r0, #0
 800f704:	d1c7      	bne.n	800f696 <HAL_SD_InitCard+0x82>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f706:	6820      	ldr	r0, [r4, #0]
 800f708:	f002 f8c6 	bl	8011898 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f70c:	4601      	mov	r1, r0
 800f70e:	2800      	cmp	r0, #0
 800f710:	d0e5      	beq.n	800f6de <HAL_SD_InitCard+0xca>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f712:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800f716:	e7be      	b.n	800f696 <HAL_SD_InitCard+0x82>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f718:	9a05      	ldr	r2, [sp, #20]
 800f71a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f71e:	429a      	cmp	r2, r3
 800f720:	f200 80a3 	bhi.w	800f86a <HAL_SD_InitCard+0x256>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f724:	0045      	lsls	r5, r0, #1
 800f726:	d505      	bpl.n	800f734 <HAL_SD_InitCard+0x120>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f728:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f72a:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f72c:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f72e:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800f730:	f000 809e 	beq.w	800f870 <HAL_SD_InitCard+0x25c>
 800f734:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800f736:	2301      	movs	r3, #1
 800f738:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f73c:	f001 fa9e 	bl	8010c7c <SDMMC_GetPowerState>
 800f740:	b348      	cbz	r0, 800f796 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f744:	2b03      	cmp	r3, #3
 800f746:	d132      	bne.n	800f7ae <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f748:	2104      	movs	r1, #4
 800f74a:	6820      	ldr	r0, [r4, #0]
 800f74c:	f001 fa9a 	bl	8010c84 <SDMMC_GetResponse>
 800f750:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f752:	a90d      	add	r1, sp, #52	; 0x34
 800f754:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f756:	0d1b      	lsrs	r3, r3, #20
 800f758:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f75a:	f7ff fea1 	bl	800f4a0 <HAL_SD_GetCardCSD>
 800f75e:	4606      	mov	r6, r0
 800f760:	2800      	cmp	r0, #0
 800f762:	d17b      	bne.n	800f85c <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f764:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f766:	4603      	mov	r3, r0
 800f768:	6820      	ldr	r0, [r4, #0]
 800f76a:	0412      	lsls	r2, r2, #16
 800f76c:	f001 fee2 	bl	8011534 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f770:	b998      	cbnz	r0, 800f79a <HAL_SD_InitCard+0x186>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f772:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f776:	6820      	ldr	r0, [r4, #0]
 800f778:	f001 fa9e 	bl	8010cb8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d090      	beq.n	800f6a2 <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f780:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800f782:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f784:	495d      	ldr	r1, [pc, #372]	; (800f8fc <HAL_SD_InitCard+0x2e8>)
    return HAL_ERROR;
 800f786:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f788:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f78a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f78c:	4318      	orrs	r0, r3
 800f78e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f790:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 800f794:	e785      	b.n	800f6a2 <HAL_SD_InitCard+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f796:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800f79a:	2601      	movs	r6, #1
 800f79c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f7a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f7a2:	4308      	orrs	r0, r1
 800f7a4:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	b018      	add	sp, #96	; 0x60
 800f7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f7ae:	6820      	ldr	r0, [r4, #0]
 800f7b0:	f002 f9f4 	bl	8011b9c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d1f0      	bne.n	800f79a <HAL_SD_InitCard+0x186>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	6820      	ldr	r0, [r4, #0]
 800f7bc:	f001 fa62 	bl	8010c84 <SDMMC_GetResponse>
 800f7c0:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f7c2:	2104      	movs	r1, #4
 800f7c4:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f7c6:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f7c8:	f001 fa5c 	bl	8010c84 <SDMMC_GetResponse>
 800f7cc:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f7ce:	2108      	movs	r1, #8
 800f7d0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f7d2:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f7d4:	f001 fa56 	bl	8010c84 <SDMMC_GetResponse>
 800f7d8:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f7da:	210c      	movs	r1, #12
 800f7dc:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f7de:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f7e0:	f001 fa50 	bl	8010c84 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f7e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f7e6:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d0ad      	beq.n	800f748 <HAL_SD_InitCard+0x134>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f7ec:	f10d 0112 	add.w	r1, sp, #18
 800f7f0:	6820      	ldr	r0, [r4, #0]
 800f7f2:	f002 fa49 	bl	8011c88 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d1cf      	bne.n	800f79a <HAL_SD_InitCard+0x186>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f7fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7fc:	2b03      	cmp	r3, #3
 800f7fe:	d0a3      	beq.n	800f748 <HAL_SD_InitCard+0x134>
    hsd->SdCard.RelCardAdd = sd_rca;
 800f800:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f804:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800f806:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f808:	0409      	lsls	r1, r1, #16
 800f80a:	f002 fa03 	bl	8011c14 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f80e:	2800      	cmp	r0, #0
 800f810:	d1c3      	bne.n	800f79a <HAL_SD_InitCard+0x186>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f812:	4601      	mov	r1, r0
 800f814:	6820      	ldr	r0, [r4, #0]
 800f816:	f001 fa35 	bl	8010c84 <SDMMC_GetResponse>
 800f81a:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f81c:	2104      	movs	r1, #4
 800f81e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f820:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f822:	f001 fa2f 	bl	8010c84 <SDMMC_GetResponse>
 800f826:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f828:	2108      	movs	r1, #8
 800f82a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f82c:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f82e:	f001 fa29 	bl	8010c84 <SDMMC_GetResponse>
 800f832:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f834:	210c      	movs	r1, #12
 800f836:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f838:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f83a:	f001 fa23 	bl	8010c84 <SDMMC_GetResponse>
 800f83e:	66e0      	str	r0, [r4, #108]	; 0x6c
 800f840:	e782      	b.n	800f748 <HAL_SD_InitCard+0x134>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f842:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f844:	6820      	ldr	r0, [r4, #0]
 800f846:	f001 ff19 	bl	801167c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800f84a:	4605      	mov	r5, r0
 800f84c:	2800      	cmp	r0, #0
 800f84e:	f47f af22 	bne.w	800f696 <HAL_SD_InitCard+0x82>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f854:	2b01      	cmp	r3, #1
 800f856:	f47f af39 	bne.w	800f6cc <HAL_SD_InitCard+0xb8>
 800f85a:	e732      	b.n	800f6c2 <HAL_SD_InitCard+0xae>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f85c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f860:	e79b      	b.n	800f79a <HAL_SD_InitCard+0x186>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f862:	9b05      	ldr	r3, [sp, #20]
 800f864:	42bb      	cmp	r3, r7
 800f866:	f67f af65 	bls.w	800f734 <HAL_SD_InitCard+0x120>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f86a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800f86e:	e712      	b.n	800f696 <HAL_SD_InitCard+0x82>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800f870:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f874:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800f876:	f43f af5e 	beq.w	800f736 <HAL_SD_InitCard+0x122>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f87a:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f87c:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f880:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f884:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f886:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800f888:	f002 fc42 	bl	8012110 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800f88c:	4605      	mov	r5, r0
 800f88e:	b128      	cbz	r0, 800f89c <HAL_SD_InitCard+0x288>
 800f890:	e701      	b.n	800f696 <HAL_SD_InitCard+0x82>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f892:	f7f9 fb1b 	bl	8008ecc <HAL_GetTick>
 800f896:	1b80      	subs	r0, r0, r6
 800f898:	3001      	adds	r0, #1
 800f89a:	d028      	beq.n	800f8ee <HAL_SD_InitCard+0x2da>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8a0:	0150      	lsls	r0, r2, #5
 800f8a2:	d5f6      	bpl.n	800f892 <HAL_SD_InitCard+0x27e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800f8a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f8a8:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800f8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ac:	02d9      	lsls	r1, r3, #11
 800f8ae:	f57f af30 	bpl.w	800f712 <HAL_SD_InitCard+0xfe>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800f8b2:	2001      	movs	r0, #1
 800f8b4:	f7f9 faa6 	bl	8008e04 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800f8b8:	6820      	ldr	r0, [r4, #0]
 800f8ba:	6803      	ldr	r3, [r0, #0]
 800f8bc:	f043 0304 	orr.w	r3, r3, #4
 800f8c0:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f8c2:	e005      	b.n	800f8d0 <HAL_SD_InitCard+0x2bc>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f8c4:	f7f9 fb02 	bl	8008ecc <HAL_GetTick>
 800f8c8:	1b80      	subs	r0, r0, r6
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	d00f      	beq.n	800f8ee <HAL_SD_InitCard+0x2da>
 800f8ce:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f8d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f8d2:	019a      	lsls	r2, r3, #6
 800f8d4:	d5f6      	bpl.n	800f8c4 <HAL_SD_InitCard+0x2b0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800f8d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f8da:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800f8dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f8de:	02db      	lsls	r3, r3, #11
 800f8e0:	d4c3      	bmi.n	800f86a <HAL_SD_InitCard+0x256>
          hsd->Instance->POWER = 0x13U;
 800f8e2:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800f8e4:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 800f8e8:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800f8ea:	6383      	str	r3, [r0, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8ec:	e723      	b.n	800f736 <HAL_SD_InitCard+0x122>
            return HAL_SD_ERROR_TIMEOUT;
 800f8ee:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800f8f2:	e6d0      	b.n	800f696 <HAL_SD_InitCard+0x82>
 800f8f4:	014f8b59 	.word	0x014f8b59
 800f8f8:	00012110 	.word	0x00012110
 800f8fc:	1fe00fff 	.word	0x1fe00fff
 800f900:	c1100000 	.word	0xc1100000

0800f904 <HAL_SD_GetCardStatus>:
{
 800f904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f908:	4604      	mov	r4, r0
 800f90a:	b097      	sub	sp, #92	; 0x5c
 800f90c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800f90e:	f7f9 fadd 	bl	8008ecc <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f912:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800f914:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f916:	6820      	ldr	r0, [r4, #0]
 800f918:	f001 f9b4 	bl	8010c84 <SDMMC_GetResponse>
 800f91c:	0182      	lsls	r2, r0, #6
 800f91e:	d45b      	bmi.n	800f9d8 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f920:	2140      	movs	r1, #64	; 0x40
 800f922:	6820      	ldr	r0, [r4, #0]
 800f924:	f001 f9c8 	bl	8010cb8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f928:	4603      	mov	r3, r0
 800f92a:	b1e0      	cbz	r0, 800f966 <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f92c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f92e:	63a2      	str	r2, [r4, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 800f930:	6820      	ldr	r0, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f932:	4a5a      	ldr	r2, [pc, #360]	; (800fa9c <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 800f934:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f936:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800f938:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 800f93a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f93c:	4313      	orrs	r3, r2
 800f93e:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f940:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f944:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f948:	f001 f9b6 	bl	8010cb8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f94c:	b138      	cbz	r0, 800f95e <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 800f94e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f950:	6822      	ldr	r2, [r4, #0]
 800f952:	4952      	ldr	r1, [pc, #328]	; (800fa9c <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 800f954:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f956:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800f958:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f95a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800f95e:	4630      	mov	r0, r6
 800f960:	b017      	add	sp, #92	; 0x5c
 800f962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f966:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f968:	6820      	ldr	r0, [r4, #0]
 800f96a:	0409      	lsls	r1, r1, #16
 800f96c:	f001 fef0 	bl	8011750 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f970:	4603      	mov	r3, r0
 800f972:	2800      	cmp	r0, #0
 800f974:	d1da      	bne.n	800f92c <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f976:	f04f 32ff 	mov.w	r2, #4294967295
 800f97a:	2340      	movs	r3, #64	; 0x40
 800f97c:	2060      	movs	r0, #96	; 0x60
 800f97e:	2102      	movs	r1, #2
 800f980:	e9cd 2300 	strd	r2, r3, [sp]
 800f984:	2301      	movs	r3, #1
 800f986:	2200      	movs	r2, #0
 800f988:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f98c:	4669      	mov	r1, sp
 800f98e:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f990:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f994:	f001 f97a 	bl	8010c8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f998:	6820      	ldr	r0, [r4, #0]
 800f99a:	f002 fa6f 	bl	8011e7c <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d1c3      	bne.n	800f92c <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 800f9a4:	af06      	add	r7, sp, #24
 800f9a6:	e004      	b.n	800f9b2 <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f9a8:	f7f9 fa90 	bl	8008ecc <HAL_GetTick>
 800f9ac:	1b80      	subs	r0, r0, r6
 800f9ae:	3001      	adds	r0, #1
 800f9b0:	d016      	beq.n	800f9e0 <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f9b2:	6820      	ldr	r0, [r4, #0]
 800f9b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f9b6:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f9ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f9bc:	d113      	bne.n	800f9e6 <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f9be:	041b      	lsls	r3, r3, #16
 800f9c0:	d5f2      	bpl.n	800f9a8 <HAL_SD_GetCardStatus+0xa4>
 800f9c2:	f107 0820 	add.w	r8, r7, #32
 800f9c6:	e000      	b.n	800f9ca <HAL_SD_GetCardStatus+0xc6>
 800f9c8:	6820      	ldr	r0, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f9ca:	f001 f93d 	bl	8010c48 <SDMMC_ReadFIFO>
 800f9ce:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800f9d2:	4547      	cmp	r7, r8
 800f9d4:	d1f8      	bne.n	800f9c8 <HAL_SD_GetCardStatus+0xc4>
 800f9d6:	e7e7      	b.n	800f9a8 <HAL_SD_GetCardStatus+0xa4>
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9d8:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f9da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9de:	e7a8      	b.n	800f932 <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800f9e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9e4:	e7a4      	b.n	800f930 <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f9e6:	0719      	lsls	r1, r3, #28
 800f9e8:	d451      	bmi.n	800fa8e <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f9ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f9ec:	079a      	lsls	r2, r3, #30
 800f9ee:	d450      	bmi.n	800fa92 <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f9f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f9f2:	069b      	lsls	r3, r3, #26
 800f9f4:	d50a      	bpl.n	800fa0c <HAL_SD_GetCardStatus+0x108>
 800f9f6:	e04e      	b.n	800fa96 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f9f8:	f001 f926 	bl	8010c48 <SDMMC_ReadFIFO>
 800f9fc:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fa00:	f7f9 fa64 	bl	8008ecc <HAL_GetTick>
 800fa04:	1b80      	subs	r0, r0, r6
 800fa06:	3001      	adds	r0, #1
 800fa08:	d0ea      	beq.n	800f9e0 <HAL_SD_GetCardStatus+0xdc>
 800fa0a:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800fa0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fa0e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800fa12:	d1f1      	bne.n	800f9f8 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800fa14:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800fa16:	461e      	mov	r6, r3
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800fa18:	9908      	ldr	r1, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800fa1a:	0a3a      	lsrs	r2, r7, #8
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800fa1c:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800fa20:	f3c7 1881 	ubfx	r8, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800fa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800fa26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800fa2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fa2e:	fa5f f983 	uxtb.w	r9, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800fa32:	ea42 6217 	orr.w	r2, r2, r7, lsr #24
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa36:	4f1a      	ldr	r7, [pc, #104]	; (800faa0 <HAL_SD_GetCardStatus+0x19c>)
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800fa38:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fa3c:	6387      	str	r7, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800fa3e:	b292      	uxth	r2, r2
 800fa40:	9f07      	ldr	r7, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800fa42:	ea4c 0c09 	orr.w	ip, ip, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800fa46:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800fa4a:	ba3f      	rev	r7, r7
 800fa4c:	f885 e001 	strb.w	lr, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800fa50:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800fa52:	fa5f fe81 	uxtb.w	lr, r1
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800fa56:	606f      	str	r7, [r5, #4]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800fa58:	f3c1 5203 	ubfx	r2, r1, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800fa5c:	f3c1 2707 	ubfx	r7, r1, #8, #8
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800fa60:	f885 e008 	strb.w	lr, [r5, #8]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800fa64:	f3c3 1103 	ubfx	r1, r3, #4, #4
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800fa68:	f3c3 2e85 	ubfx	lr, r3, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800fa6c:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800fa6e:	f3c3 2701 	ubfx	r7, r3, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800fa72:	72aa      	strb	r2, [r5, #10]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800fa74:	f003 030f 	and.w	r3, r3, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800fa78:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800fa7c:	f8a5 c00c 	strh.w	ip, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800fa80:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800fa84:	73ef      	strb	r7, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800fa86:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800fa88:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800fa8a:	74aa      	strb	r2, [r5, #18]
 800fa8c:	e75a      	b.n	800f944 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fa8e:	2308      	movs	r3, #8
 800fa90:	e74f      	b.n	800f932 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fa92:	2302      	movs	r3, #2
 800fa94:	e74d      	b.n	800f932 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800fa96:	2320      	movs	r3, #32
 800fa98:	e74b      	b.n	800f932 <HAL_SD_GetCardStatus+0x2e>
 800fa9a:	bf00      	nop
 800fa9c:	1fe00fff 	.word	0x1fe00fff
 800faa0:	18000f3a 	.word	0x18000f3a

0800faa4 <HAL_SD_GetCardInfo>:
{
 800faa4:	4603      	mov	r3, r0
}
 800faa6:	2000      	movs	r0, #0
{
 800faa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800faaa:	e9d3 ec0f 	ldrd	lr, ip, [r3, #60]	; 0x3c
 800faae:	e9d3 7611 	ldrd	r7, r6, [r3, #68]	; 0x44
 800fab2:	e9d3 5413 	ldrd	r5, r4, [r3, #76]	; 0x4c
 800fab6:	e9d3 2315 	ldrd	r2, r3, [r3, #84]	; 0x54
 800faba:	e9c1 ec00 	strd	lr, ip, [r1]
 800fabe:	e9c1 7602 	strd	r7, r6, [r1, #8]
 800fac2:	e9c1 5404 	strd	r5, r4, [r1, #16]
 800fac6:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800faca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800facc <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800facc:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800face:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800fad0:	4293      	cmp	r3, r2
{
 800fad2:	b530      	push	{r4, r5, lr}
 800fad4:	4604      	mov	r4, r0
 800fad6:	b08b      	sub	sp, #44	; 0x2c
 800fad8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800fada:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800fade:	d025      	beq.n	800fb2c <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800fae0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800fae4:	d022      	beq.n	800fb2c <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800fae6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800faea:	d064      	beq.n	800fbb6 <HAL_SD_ConfigWideBusOperation+0xea>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800faec:	2900      	cmp	r1, #0
 800faee:	d043      	beq.n	800fb78 <HAL_SD_ConfigWideBusOperation+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800faf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800faf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800faf6:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800faf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fafa:	b9f3      	cbnz	r3, 800fb3a <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.BusWide             = WideMode;
 800fafc:	9506      	str	r5, [sp, #24]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800fafe:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800fb02:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800fb06:	2b03      	cmp	r3, #3
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800fb08:	9207      	str	r2, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800fb0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800fb0e:	d92a      	bls.n	800fb66 <HAL_SD_ConfigWideBusOperation+0x9a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800fb10:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800fb12:	aa0a      	add	r2, sp, #40	; 0x28
 800fb14:	ab04      	add	r3, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 800fb16:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800fb18:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800fb1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fb20:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fb22:	6820      	ldr	r0, [r4, #0]
 800fb24:	f001 f876 	bl	8010c14 <SDMMC_Init>
 800fb28:	6820      	ldr	r0, [r4, #0]
 800fb2a:	e00a      	b.n	800fb42 <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fb2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb32:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800fb34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d0e0      	beq.n	800fafc <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb3a:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 800fb3c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb3e:	4b35      	ldr	r3, [pc, #212]	; (800fc14 <HAL_SD_ConfigWideBusOperation+0x148>)
 800fb40:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fb42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb46:	f001 f8b7 	bl	8010cb8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb4a:	b130      	cbz	r0, 800fb5a <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb4c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800fb4e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb50:	4a30      	ldr	r2, [pc, #192]	; (800fc14 <HAL_SD_ConfigWideBusOperation+0x148>)
 800fb52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fb54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb56:	4318      	orrs	r0, r3
 800fb58:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800fb5a:	2301      	movs	r3, #1
}
 800fb5c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800fb5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800fb62:	b00b      	add	sp, #44	; 0x2c
 800fb64:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800fb66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fb68:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800fb6c:	d0d0      	beq.n	800fb10 <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800fb6e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800fb72:	d040      	beq.n	800fbf6 <HAL_SD_ConfigWideBusOperation+0x12a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800fb74:	2304      	movs	r3, #4
 800fb76:	e7cb      	b.n	800fb10 <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0UL, 0UL};
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fb7c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800fb7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fb82:	f001 f87f 	bl	8010c84 <SDMMC_GetResponse>
 800fb86:	0182      	lsls	r2, r0, #6
 800fb88:	d438      	bmi.n	800fbfc <HAL_SD_ConfigWideBusOperation+0x130>
  errorstate = SD_FindSCR(hsd, scr);
 800fb8a:	a904      	add	r1, sp, #16
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7ff f8c7 	bl	800ed20 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800fb92:	b960      	cbnz	r0, 800fbae <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800fb94:	9b05      	ldr	r3, [sp, #20]
 800fb96:	03db      	lsls	r3, r3, #15
 800fb98:	d536      	bpl.n	800fc08 <HAL_SD_ConfigWideBusOperation+0x13c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fb9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fb9c:	6820      	ldr	r0, [r4, #0]
 800fb9e:	0409      	lsls	r1, r1, #16
 800fba0:	f001 fdd6 	bl	8011750 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800fba4:	b918      	cbnz	r0, 800fbae <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800fba6:	4601      	mov	r1, r0
 800fba8:	6820      	ldr	r0, [r4, #0]
 800fbaa:	f001 fead 	bl	8011908 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800fbae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fbb0:	4308      	orrs	r0, r1
 800fbb2:	63a0      	str	r0, [r4, #56]	; 0x38
 800fbb4:	e7be      	b.n	800fb34 <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0UL, 0UL};
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fbba:	2100      	movs	r1, #0
 800fbbc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800fbbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800fbc2:	f001 f85f 	bl	8010c84 <SDMMC_GetResponse>
 800fbc6:	0180      	lsls	r0, r0, #6
 800fbc8:	d41b      	bmi.n	800fc02 <HAL_SD_ConfigWideBusOperation+0x136>
  errorstate = SD_FindSCR(hsd, scr);
 800fbca:	a904      	add	r1, sp, #16
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f7ff f8a7 	bl	800ed20 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800fbd2:	b960      	cbnz	r0, 800fbee <HAL_SD_ConfigWideBusOperation+0x122>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800fbd4:	9b05      	ldr	r3, [sp, #20]
 800fbd6:	0359      	lsls	r1, r3, #13
 800fbd8:	d519      	bpl.n	800fc0e <HAL_SD_ConfigWideBusOperation+0x142>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fbda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fbdc:	6820      	ldr	r0, [r4, #0]
 800fbde:	0409      	lsls	r1, r1, #16
 800fbe0:	f001 fdb6 	bl	8011750 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800fbe4:	b918      	cbnz	r0, 800fbee <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800fbe6:	2102      	movs	r1, #2
 800fbe8:	6820      	ldr	r0, [r4, #0]
 800fbea:	f001 fe8d 	bl	8011908 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800fbee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fbf0:	4318      	orrs	r0, r3
 800fbf2:	63a0      	str	r0, [r4, #56]	; 0x38
 800fbf4:	e79e      	b.n	800fb34 <HAL_SD_ConfigWideBusOperation+0x68>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800fbf6:	2302      	movs	r3, #2
 800fbf8:	9308      	str	r3, [sp, #32]
 800fbfa:	e78a      	b.n	800fb12 <HAL_SD_ConfigWideBusOperation+0x46>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fbfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fc00:	e7d5      	b.n	800fbae <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800fc02:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fc06:	e7f2      	b.n	800fbee <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fc08:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800fc0c:	e7cf      	b.n	800fbae <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fc0e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800fc12:	e7ec      	b.n	800fbee <HAL_SD_ConfigWideBusOperation+0x122>
 800fc14:	1fe00fff 	.word	0x1fe00fff

0800fc18 <HAL_SD_Init>:
{
 800fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1a:	b087      	sub	sp, #28
  if(hsd == NULL)
 800fc1c:	b1a0      	cbz	r0, 800fc48 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800fc1e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800fc22:	4604      	mov	r4, r0
 800fc24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fc28:	b93b      	cbnz	r3, 800fc3a <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800fc2a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800fc2c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800fc2e:	b90b      	cbnz	r3, 800fc34 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800fc30:	2302      	movs	r3, #2
 800fc32:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800fc34:	4620      	mov	r0, r4
 800fc36:	f7ff f965 	bl	800ef04 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800fc3a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fc3c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800fc3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fc42:	f7ff fce7 	bl	800f614 <HAL_SD_InitCard>
 800fc46:	b118      	cbz	r0, 800fc50 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 800fc48:	2601      	movs	r6, #1
}
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	b007      	add	sp, #28
 800fc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800fc50:	a901      	add	r1, sp, #4
 800fc52:	4620      	mov	r0, r4
 800fc54:	f7ff fe56 	bl	800f904 <HAL_SD_GetCardStatus>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d1f5      	bne.n	800fc48 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fc5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800fc5e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fc62:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800fc64:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800fc68:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800fc6a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fc6c:	d024      	beq.n	800fcb8 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800fc6e:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800fc70:	68e1      	ldr	r1, [r4, #12]
 800fc72:	4620      	mov	r0, r4
 800fc74:	f7ff ff2a 	bl	800facc <HAL_SD_ConfigWideBusOperation>
 800fc78:	4606      	mov	r6, r0
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	d1e4      	bne.n	800fc48 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 800fc7e:	f7f9 f925 	bl	8008ecc <HAL_GetTick>
 800fc82:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fc84:	e00c      	b.n	800fca0 <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fc86:	6820      	ldr	r0, [r4, #0]
 800fc88:	4629      	mov	r1, r5
 800fc8a:	f000 fffb 	bl	8010c84 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fc8e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fc92:	2804      	cmp	r0, #4
 800fc94:	d018      	beq.n	800fcc8 <HAL_SD_Init+0xb0>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800fc96:	f7f9 f919 	bl	8008ecc <HAL_GetTick>
 800fc9a:	1bc3      	subs	r3, r0, r7
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	d019      	beq.n	800fcd4 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fca0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fca2:	6820      	ldr	r0, [r4, #0]
 800fca4:	0409      	lsls	r1, r1, #16
 800fca6:	f002 f845 	bl	8011d34 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800fcaa:	4605      	mov	r5, r0
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d0ea      	beq.n	800fc86 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 800fcb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fcb2:	4301      	orrs	r1, r0
 800fcb4:	63a1      	str	r1, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 800fcb6:	e7ee      	b.n	800fc96 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fcb8:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800fcba:	bf14      	ite	ne
 800fcbc:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800fcc0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800fcc4:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fcc6:	e7d3      	b.n	800fc70 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 800fcc8:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fcca:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800fccc:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800fcce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800fcd2:	e7ba      	b.n	800fc4a <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fcd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800fcd8:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800fcda:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fcdc:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800fcde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800fce2:	e7b2      	b.n	800fc4a <HAL_SD_Init+0x32>

0800fce4 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800fce4:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 800fce6:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800fce8:	2b02      	cmp	r3, #2
{
 800fcea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcee:	4604      	mov	r4, r0
 800fcf0:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 800fcf2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800fcf6:	d043      	beq.n	800fd80 <HAL_SD_ConfigSpeedBusOperation+0x9c>
    switch (SpeedMode)
 800fcf8:	2901      	cmp	r1, #1
 800fcfa:	d015      	beq.n	800fd28 <HAL_SD_ConfigSpeedBusOperation+0x44>
 800fcfc:	2902      	cmp	r1, #2
 800fcfe:	d05c      	beq.n	800fdba <HAL_SD_ConfigSpeedBusOperation+0xd6>
 800fd00:	2900      	cmp	r1, #0
 800fd02:	d072      	beq.n	800fdea <HAL_SD_ConfigSpeedBusOperation+0x106>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fd04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 800fd06:	2501      	movs	r5, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fd08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd0c:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 800fd0e:	e00c      	b.n	800fd2a <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800fd10:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fd12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd16:	f000 80af 	beq.w	800fe78 <HAL_SD_ConfigSpeedBusOperation+0x194>
 800fd1a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	f000 80ab 	beq.w	800fe78 <HAL_SD_ConfigSpeedBusOperation+0x194>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 800fd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd26:	d06a      	beq.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
    switch (SpeedMode)
 800fd28:	2500      	movs	r5, #0
  tickstart = HAL_GetTick();
 800fd2a:	f7f9 f8cf 	bl	8008ecc <HAL_GetTick>
 800fd2e:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fd30:	e00b      	b.n	800fd4a <HAL_SD_ConfigSpeedBusOperation+0x66>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fd32:	6820      	ldr	r0, [r4, #0]
 800fd34:	f000 ffa6 	bl	8010c84 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fd38:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fd3c:	2804      	cmp	r0, #4
 800fd3e:	d02f      	beq.n	800fda0 <HAL_SD_ConfigSpeedBusOperation+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fd40:	f7f9 f8c4 	bl	8008ecc <HAL_GetTick>
 800fd44:	1b80      	subs	r0, r0, r6
 800fd46:	3001      	adds	r0, #1
 800fd48:	d00f      	beq.n	800fd6a <HAL_SD_ConfigSpeedBusOperation+0x86>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fd4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd4c:	6820      	ldr	r0, [r4, #0]
 800fd4e:	0409      	lsls	r1, r1, #16
 800fd50:	f001 fff0 	bl	8011d34 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800fd54:	4601      	mov	r1, r0
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d0eb      	beq.n	800fd32 <HAL_SD_ConfigSpeedBusOperation+0x4e>
    hsd->ErrorCode |= errorstate;
 800fd5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd5c:	4319      	orrs	r1, r3
 800fd5e:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fd60:	f7f9 f8b4 	bl	8008ecc <HAL_GetTick>
 800fd64:	1b80      	subs	r0, r0, r6
 800fd66:	3001      	adds	r0, #1
 800fd68:	d1ef      	bne.n	800fd4a <HAL_SD_ConfigSpeedBusOperation+0x66>
      return HAL_TIMEOUT;
 800fd6a:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fd6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800fd70:	2301      	movs	r3, #1
}
 800fd72:	4628      	mov	r0, r5
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fd74:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fd76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800fd7a:	b016      	add	sp, #88	; 0x58
 800fd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 800fd80:	2904      	cmp	r1, #4
 800fd82:	d8bf      	bhi.n	800fd04 <HAL_SD_ConfigSpeedBusOperation+0x20>
 800fd84:	a301      	add	r3, pc, #4	; (adr r3, 800fd8c <HAL_SD_ConfigSpeedBusOperation+0xa8>)
 800fd86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800fd8a:	bf00      	nop
 800fd8c:	0800fd11 	.word	0x0800fd11
 800fd90:	0800fd29 	.word	0x0800fd29
 800fd94:	0800fdbb 	.word	0x0800fdbb
 800fd98:	0800fe4d 	.word	0x0800fe4d
 800fd9c:	0800fe15 	.word	0x0800fe15
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fda0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fda4:	6820      	ldr	r0, [r4, #0]
 800fda6:	f000 ff87 	bl	8010cb8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800fdaa:	b9b0      	cbnz	r0, 800fdda <HAL_SD_ConfigSpeedBusOperation+0xf6>
  hsd->State = HAL_SD_STATE_READY;
 800fdac:	2301      	movs	r3, #1
}
 800fdae:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800fdb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800fdb4:	b016      	add	sp, #88	; 0x58
 800fdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800fdba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800fdbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdc0:	d01d      	beq.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
 800fdc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdc6:	d01a      	beq.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800fdc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d017      	beq.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fdce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 800fdd0:	2501      	movs	r5, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fdd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdd6:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 800fdd8:	e7a7      	b.n	800fd2a <HAL_SD_ConfigSpeedBusOperation+0x46>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fdda:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800fddc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fdde:	4a6d      	ldr	r2, [pc, #436]	; (800ff94 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)
 800fde0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fde2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fde4:	4318      	orrs	r0, r3
 800fde6:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800fde8:	e7e0      	b.n	800fdac <HAL_SD_ConfigSpeedBusOperation+0xc8>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800fdea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdf0:	d005      	beq.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
 800fdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdf6:	d002      	beq.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800fdf8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d194      	bne.n	800fd28 <HAL_SD_ConfigSpeedBusOperation+0x44>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7fe fffc 	bl	800edfc <SD_HighSpeed>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d08f      	beq.n	800fd28 <HAL_SD_ConfigSpeedBusOperation+0x44>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 800fe0a:	2501      	movs	r5, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe10:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 800fe12:	e78a      	b.n	800fd2a <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800fe14:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fe16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe1a:	d002      	beq.n	800fe22 <HAL_SD_ConfigSpeedBusOperation+0x13e>
 800fe1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d1d5      	bne.n	800fdce <HAL_SD_ConfigSpeedBusOperation+0xea>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800fe22:	2240      	movs	r2, #64	; 0x40
 800fe24:	2100      	movs	r1, #0
 800fe26:	a806      	add	r0, sp, #24
 800fe28:	f012 f9f0 	bl	802220c <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 800fe2c:	f7f9 f84e 	bl	8008ecc <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800fe30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 800fe32:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d050      	beq.n	800feda <HAL_SD_ConfigSpeedBusOperation+0x1f6>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800fe38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe3c:	d054      	beq.n	800fee8 <HAL_SD_ConfigSpeedBusOperation+0x204>
  HAL_StatusTypeDef status = HAL_OK;
 800fe3e:	2500      	movs	r5, #0
 800fe40:	6823      	ldr	r3, [r4, #0]
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800fe48:	605a      	str	r2, [r3, #4]
 800fe4a:	e76e      	b.n	800fd2a <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800fe4c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800fe4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe52:	d002      	beq.n	800fe5a <HAL_SD_ConfigSpeedBusOperation+0x176>
 800fe54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d1b9      	bne.n	800fdce <HAL_SD_ConfigSpeedBusOperation+0xea>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f7ff fa7c 	bl	800f358 <SD_UltraHighSpeed>
 800fe60:	b1b0      	cbz	r0, 800fe90 <HAL_SD_ConfigSpeedBusOperation+0x1ac>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 800fe64:	2501      	movs	r5, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe6a:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 800fe6c:	6822      	ldr	r2, [r4, #0]
 800fe6e:	6853      	ldr	r3, [r2, #4]
 800fe70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe74:	6053      	str	r3, [r2, #4]
 800fe76:	e758      	b.n	800fd2a <HAL_SD_ConfigSpeedBusOperation+0x46>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 800fe78:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800fe7a:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 800fe7c:	6853      	ldr	r3, [r2, #4]
 800fe7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe82:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800fe84:	f7ff fa68 	bl	800f358 <SD_UltraHighSpeed>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	f43f af4d 	beq.w	800fd28 <HAL_SD_ConfigSpeedBusOperation+0x44>
 800fe8e:	e7b6      	b.n	800fdfe <HAL_SD_ConfigSpeedBusOperation+0x11a>
  HAL_StatusTypeDef status = HAL_OK;
 800fe90:	4605      	mov	r5, r0
 800fe92:	e7eb      	b.n	800fe6c <HAL_SD_ConfigSpeedBusOperation+0x188>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fe94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe96:	0716      	lsls	r6, r2, #28
 800fe98:	d478      	bmi.n	800ff8c <HAL_SD_ConfigSpeedBusOperation+0x2a8>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fe9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe9c:	0790      	lsls	r0, r2, #30
 800fe9e:	d472      	bmi.n	800ff86 <HAL_SD_ConfigSpeedBusOperation+0x2a2>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fea2:	0691      	lsls	r1, r2, #26
 800fea4:	d46c      	bmi.n	800ff80 <HAL_SD_ConfigSpeedBusOperation+0x29c>

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800fea6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800feaa:	493b      	ldr	r1, [pc, #236]	; (800ff98 <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800feac:	0792      	lsls	r2, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800feae:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800feb0:	d514      	bpl.n	800fedc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800feb2:	2001      	movs	r0, #1
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800feb4:	4d39      	ldr	r5, [pc, #228]	; (800ff9c <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800feb6:	f7f8 ffa5 	bl	8008e04 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 800feba:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800febc:	4838      	ldr	r0, [pc, #224]	; (800ffa0 <HAL_SD_ConfigSpeedBusOperation+0x2bc>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 800febe:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800fec0:	4938      	ldr	r1, [pc, #224]	; (800ffa4 <HAL_SD_ConfigSpeedBusOperation+0x2c0>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 800fec2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800fec6:	42aa      	cmp	r2, r5
 800fec8:	bf18      	it	ne
 800feca:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 800fecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fed0:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 800fed2:	f000 fe53 	bl	8010b7c <DelayBlock_Enable>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d0b1      	beq.n	800fe3e <HAL_SD_ConfigSpeedBusOperation+0x15a>
 800feda:	6823      	ldr	r3, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fedc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 800fede:	2501      	movs	r5, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fee0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fee4:	63a2      	str	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 800fee6:	e7ac      	b.n	800fe42 <HAL_SD_ConfigSpeedBusOperation+0x15e>
    hsd->Instance->DCTRL = 0;
 800fee8:	6820      	ldr	r0, [r4, #0]
 800feea:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800feec:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 800feee:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800fef0:	f000 fee2 	bl	8010cb8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d1f0      	bne.n	800feda <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fef8:	f04f 32ff 	mov.w	r2, #4294967295
 800fefc:	2340      	movs	r3, #64	; 0x40
 800fefe:	2060      	movs	r0, #96	; 0x60
 800ff00:	2102      	movs	r1, #2
 800ff02:	e9cd 2300 	strd	r2, r3, [sp]
 800ff06:	2200      	movs	r2, #0
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800ff0e:	4669      	mov	r1, sp
 800ff10:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ff12:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800ff16:	f000 feb9 	bl	8010c8c <SDMMC_ConfigData>
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d1dc      	bne.n	800feda <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 800ff20:	4921      	ldr	r1, [pc, #132]	; (800ffa8 <HAL_SD_ConfigSpeedBusOperation+0x2c4>)
 800ff22:	6820      	ldr	r0, [r4, #0]
 800ff24:	f002 f850 	bl	8011fc8 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ff28:	4606      	mov	r6, r0
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d1d5      	bne.n	800feda <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800ff2e:	f240 582a 	movw	r8, #1322	; 0x52a
 800ff32:	e004      	b.n	800ff3e <HAL_SD_ConfigSpeedBusOperation+0x25a>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800ff34:	f7f8 ffca 	bl	8008ecc <HAL_GetTick>
 800ff38:	1bc0      	subs	r0, r0, r7
 800ff3a:	3001      	adds	r0, #1
 800ff3c:	d018      	beq.n	800ff70 <HAL_SD_ConfigSpeedBusOperation+0x28c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff42:	4618      	mov	r0, r3
 800ff44:	ea12 0f08 	tst.w	r2, r8
 800ff48:	d1a4      	bne.n	800fe94 <HAL_SD_ConfigSpeedBusOperation+0x1b0>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ff4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff4c:	041b      	lsls	r3, r3, #16
 800ff4e:	d5f1      	bpl.n	800ff34 <HAL_SD_ConfigSpeedBusOperation+0x250>
 800ff50:	ab06      	add	r3, sp, #24
 800ff52:	eb03 1946 	add.w	r9, r3, r6, lsl #5
 800ff56:	ab0e      	add	r3, sp, #56	; 0x38
 800ff58:	eb03 1a46 	add.w	sl, r3, r6, lsl #5
 800ff5c:	e000      	b.n	800ff60 <HAL_SD_ConfigSpeedBusOperation+0x27c>
 800ff5e:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800ff60:	f000 fe72 	bl	8010c48 <SDMMC_ReadFIFO>
 800ff64:	f849 0b04 	str.w	r0, [r9], #4
        for (count = 0U; count < 8U; count++)
 800ff68:	45d1      	cmp	r9, sl
 800ff6a:	d1f8      	bne.n	800ff5e <HAL_SD_ConfigSpeedBusOperation+0x27a>
        loop ++;
 800ff6c:	3601      	adds	r6, #1
 800ff6e:	e7e1      	b.n	800ff34 <HAL_SD_ConfigSpeedBusOperation+0x250>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ff70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 800ff74:	2201      	movs	r2, #1
 800ff76:	6823      	ldr	r3, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ff78:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ff7a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 800ff7e:	e7ad      	b.n	800fedc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ff80:	2220      	movs	r2, #32
 800ff82:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 800ff84:	e7aa      	b.n	800fedc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ff86:	2202      	movs	r2, #2
 800ff88:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 800ff8a:	e7a7      	b.n	800fedc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ff8c:	2208      	movs	r2, #8
 800ff8e:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 800ff90:	e757      	b.n	800fe42 <HAL_SD_ConfigSpeedBusOperation+0x15e>
 800ff92:	bf00      	nop
 800ff94:	1fe00fff 	.word	0x1fe00fff
 800ff98:	18000f3a 	.word	0x18000f3a
 800ff9c:	52007000 	.word	0x52007000
 800ffa0:	52008000 	.word	0x52008000
 800ffa4:	48022800 	.word	0x48022800
 800ffa8:	80ffff04 	.word	0x80ffff04

0800ffac <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ffac:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800ffae:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ffb0:	0409      	lsls	r1, r1, #16
{
 800ffb2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ffb4:	6800      	ldr	r0, [r0, #0]
 800ffb6:	f001 febd 	bl	8011d34 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffba:	4601      	mov	r1, r0
 800ffbc:	b120      	cbz	r0, 800ffc8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800ffbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	4319      	orrs	r1, r3
 800ffc4:	63a1      	str	r1, [r4, #56]	; 0x38
}
 800ffc6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ffc8:	6820      	ldr	r0, [r4, #0]
 800ffca:	f000 fe5b 	bl	8010c84 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffce:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800ffd2:	bd10      	pop	{r4, pc}

0800ffd4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffd6:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
 800ffda:	2f20      	cmp	r7, #32
 800ffdc:	d141      	bne.n	8010062 <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffde:	2900      	cmp	r1, #0
 800ffe0:	d03d      	beq.n	801005e <HAL_UART_Transmit_DMA+0x8a>
 800ffe2:	fab2 f682 	clz	r6, r2
 800ffe6:	0976      	lsrs	r6, r6, #5
 800ffe8:	2a00      	cmp	r2, #0
 800ffea:	d038      	beq.n	801005e <HAL_UART_Transmit_DMA+0x8a>
 800ffec:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800ffee:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 800fff2:	2801      	cmp	r0, #1
 800fff4:	d035      	beq.n	8010062 <HAL_UART_Transmit_DMA+0x8e>
 800fff6:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fff8:	f04f 0c21 	mov.w	ip, #33	; 0x21

    if (huart->hdmatx != NULL)
 800fffc:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 800fffe:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8010002:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010004:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->TxXferSize  = Size;
 8010008:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 801000c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010010:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8010014:	b1c0      	cbz	r0, 8010048 <HAL_UART_Transmit_DMA+0x74>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010016:	f8df c054 	ldr.w	ip, [pc, #84]	; 801006c <HAL_UART_Transmit_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801001a:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801001c:	4a12      	ldr	r2, [pc, #72]	; (8010068 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 801001e:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010020:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010024:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010026:	f8df c048 	ldr.w	ip, [pc, #72]	; 8010070 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801002a:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801002c:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010030:	f7f9 fe72 	bl	8009d18 <HAL_DMA_Start_IT>
 8010034:	b140      	cbz	r0, 8010048 <HAL_UART_Transmit_DMA+0x74>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010036:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8010038:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 801003a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801003e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8010042:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 801004c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801004e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8010050:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010054:	689a      	ldr	r2, [r3, #8]
 8010056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801005a:	609a      	str	r2, [r3, #8]
}
 801005c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 801005e:	2001      	movs	r0, #1
}
 8010060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8010062:	2002      	movs	r0, #2
}
 8010064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010066:	bf00      	nop
 8010068:	08010151 	.word	0x08010151
 801006c:	08010121 	.word	0x08010121
 8010070:	080101a9 	.word	0x080101a9

08010074 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010076:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 801007a:	2f20      	cmp	r7, #32
 801007c:	d146      	bne.n	801010c <HAL_UART_Receive_DMA+0x98>
  {
    if ((pData == NULL) || (Size == 0U))
 801007e:	2900      	cmp	r1, #0
 8010080:	d042      	beq.n	8010108 <HAL_UART_Receive_DMA+0x94>
 8010082:	fab2 f682 	clz	r6, r2
 8010086:	0976      	lsrs	r6, r6, #5
 8010088:	2a00      	cmp	r2, #0
 801008a:	d03d      	beq.n	8010108 <HAL_UART_Receive_DMA+0x94>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801008c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8010090:	4604      	mov	r4, r0
 8010092:	2b01      	cmp	r3, #1
 8010094:	d03a      	beq.n	801010c <HAL_UART_Receive_DMA+0x98>
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 8010096:	6f80      	ldr	r0, [r0, #120]	; 0x78
    __HAL_LOCK(huart);
 8010098:	2501      	movs	r5, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801009a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801009c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->pRxBuffPtr = pData;
 80100a0:	65a1      	str	r1, [r4, #88]	; 0x58
    huart->RxXferSize = Size;
 80100a2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    __HAL_LOCK(huart);
 80100a6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmarx != NULL)
 80100ae:	b1d0      	cbz	r0, 80100e6 <HAL_UART_Receive_DMA+0x72>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80100b0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8010110 <HAL_UART_Receive_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80100b4:	4613      	mov	r3, r2
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80100b6:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8010114 <HAL_UART_Receive_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80100ba:	460a      	mov	r2, r1
 80100bc:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferAbortCallback = NULL;
 80100be:	6506      	str	r6, [r0, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80100c0:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80100c2:	e9c0 ec0f 	strd	lr, ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80100c6:	f8df c050 	ldr.w	ip, [pc, #80]	; 8010118 <HAL_UART_Receive_DMA+0xa4>
 80100ca:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80100ce:	f7f9 fe23 	bl	8009d18 <HAL_DMA_Start_IT>
 80100d2:	b140      	cbz	r0, 80100e6 <HAL_UART_Receive_DMA+0x72>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80100d4:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 80100d6:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 80100d8:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80100dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 80100e0:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 80100e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100e6:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80100e8:	2000      	movs	r0, #0
 80100ea:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100f4:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100f6:	689a      	ldr	r2, [r3, #8]
 80100f8:	f042 0201 	orr.w	r2, r2, #1
 80100fc:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010104:	609a      	str	r2, [r3, #8]
}
 8010106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8010108:	2001      	movs	r0, #1
}
 801010a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801010c:	2002      	movs	r0, #2
}
 801010e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010110:	0801019d 	.word	0x0801019d
 8010114:	08010161 	.word	0x08010161
 8010118:	080101a9 	.word	0x080101a9

0801011c <HAL_UART_TxCpltCallback>:
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop

08010120 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010120:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010122:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010124:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801012a:	d00c      	beq.n	8010146 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801012c:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 801012e:	2200      	movs	r2, #0
 8010130:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010134:	689a      	ldr	r2, [r3, #8]
 8010136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801013a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010142:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010144:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8010146:	f7ff ffe9 	bl	801011c <HAL_UART_TxCpltCallback>
}
 801014a:	bd08      	pop	{r3, pc}

0801014c <HAL_UART_TxHalfCpltCallback>:
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop

08010150 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010150:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8010152:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8010154:	f7ff fffa 	bl	801014c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010158:	bd08      	pop	{r3, pc}
 801015a:	bf00      	nop

0801015c <HAL_UART_RxCpltCallback>:
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop

08010160 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010160:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010162:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010164:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801016a:	d012      	beq.n	8010192 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801016c:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 801016e:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010170:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8010172:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801017c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801017e:	689a      	ldr	r2, [r3, #8]
 8010180:	f022 0201 	bic.w	r2, r2, #1
 8010184:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010186:	689a      	ldr	r2, [r3, #8]
 8010188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801018c:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 801018e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010192:	f7ff ffe3 	bl	801015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010196:	bd08      	pop	{r3, pc}

08010198 <HAL_UART_RxHalfCpltCallback>:
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop

0801019c <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801019c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801019e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80101a0:	f7ff fffa 	bl	8010198 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80101a4:	bd08      	pop	{r3, pc}
 80101a6:	bf00      	nop

080101a8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80101aa:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80101ac:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80101ae:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80101b2:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80101b6:	689a      	ldr	r2, [r3, #8]
 80101b8:	0615      	lsls	r5, r2, #24
 80101ba:	d501      	bpl.n	80101c0 <UART_DMAError+0x18>
 80101bc:	2c21      	cmp	r4, #33	; 0x21
 80101be:	d01d      	beq.n	80101fc <UART_DMAError+0x54>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80101c0:	689a      	ldr	r2, [r3, #8]
 80101c2:	0652      	lsls	r2, r2, #25
 80101c4:	d501      	bpl.n	80101ca <UART_DMAError+0x22>
 80101c6:	2922      	cmp	r1, #34	; 0x22
 80101c8:	d008      	beq.n	80101dc <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80101ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80101ce:	f043 0310 	orr.w	r3, r3, #16
 80101d2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80101d6:	f7f3 fd6b 	bl	8003cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80101da:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 80101dc:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101de:	4a0f      	ldr	r2, [pc, #60]	; (801021c <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 80101e0:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 80101e2:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101e6:	6819      	ldr	r1, [r3, #0]
 80101e8:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80101ec:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101ee:	6899      	ldr	r1, [r3, #8]
 80101f0:	400a      	ands	r2, r1
 80101f2:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 80101f4:	66c4      	str	r4, [r0, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80101f6:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
}
 80101fa:	e7e6      	b.n	80101ca <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 80101fc:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 80101fe:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8010200:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801020a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801020c:	689a      	ldr	r2, [r3, #8]
 801020e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010212:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8010214:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
 8010218:	e7d2      	b.n	80101c0 <UART_DMAError+0x18>
 801021a:	bf00      	nop
 801021c:	effffffe 	.word	0xeffffffe

08010220 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010220:	6802      	ldr	r2, [r0, #0]
{
 8010222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010226:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010228:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801022c:	6815      	ldr	r5, [r2, #0]
{
 801022e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8010230:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010232:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8010234:	f000 8090 	beq.w	8010358 <HAL_UART_IRQHandler+0x138>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010238:	4872      	ldr	r0, [pc, #456]	; (8010404 <HAL_UART_IRQHandler+0x1e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801023a:	4e73      	ldr	r6, [pc, #460]	; (8010408 <HAL_UART_IRQHandler+0x1e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801023c:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801023e:	402e      	ands	r6, r5
 8010240:	4306      	orrs	r6, r0
 8010242:	d11e      	bne.n	8010282 <HAL_UART_IRQHandler+0x62>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010244:	02de      	lsls	r6, r3, #11
 8010246:	d502      	bpl.n	801024e <HAL_UART_IRQHandler+0x2e>
 8010248:	0248      	lsls	r0, r1, #9
 801024a:	f100 80aa 	bmi.w	80103a2 <HAL_UART_IRQHandler+0x182>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801024e:	061f      	lsls	r7, r3, #24
 8010250:	d506      	bpl.n	8010260 <HAL_UART_IRQHandler+0x40>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010252:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010256:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801025a:	4301      	orrs	r1, r0
 801025c:	f040 8099 	bne.w	8010392 <HAL_UART_IRQHandler+0x172>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010260:	065e      	lsls	r6, r3, #25
 8010262:	d502      	bpl.n	801026a <HAL_UART_IRQHandler+0x4a>
 8010264:	0668      	lsls	r0, r5, #25
 8010266:	f100 80a8 	bmi.w	80103ba <HAL_UART_IRQHandler+0x19a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801026a:	0219      	lsls	r1, r3, #8
 801026c:	d502      	bpl.n	8010274 <HAL_UART_IRQHandler+0x54>
 801026e:	006a      	lsls	r2, r5, #1
 8010270:	f100 80b0 	bmi.w	80103d4 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010274:	01db      	lsls	r3, r3, #7
 8010276:	d502      	bpl.n	801027e <HAL_UART_IRQHandler+0x5e>
 8010278:	2d00      	cmp	r5, #0
 801027a:	f2c0 80b7 	blt.w	80103ec <HAL_UART_IRQHandler+0x1cc>
}
 801027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010282:	07de      	lsls	r6, r3, #31
 8010284:	d509      	bpl.n	801029a <HAL_UART_IRQHandler+0x7a>
 8010286:	05ef      	lsls	r7, r5, #23
 8010288:	d507      	bpl.n	801029a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801028a:	2601      	movs	r6, #1
 801028c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801028e:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8010292:	f046 0601 	orr.w	r6, r6, #1
 8010296:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801029a:	079e      	lsls	r6, r3, #30
 801029c:	d56c      	bpl.n	8010378 <HAL_UART_IRQHandler+0x158>
 801029e:	07cf      	lsls	r7, r1, #31
 80102a0:	d509      	bpl.n	80102b6 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102a2:	2602      	movs	r6, #2
 80102a4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102a6:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80102aa:	f046 0604 	orr.w	r6, r6, #4
 80102ae:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102b2:	075e      	lsls	r6, r3, #29
 80102b4:	d464      	bmi.n	8010380 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80102b6:	071f      	lsls	r7, r3, #28
 80102b8:	d50b      	bpl.n	80102d2 <HAL_UART_IRQHandler+0xb2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102ba:	f005 0620 	and.w	r6, r5, #32
 80102be:	4330      	orrs	r0, r6
 80102c0:	d007      	beq.n	80102d2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102c2:	2008      	movs	r0, #8
 80102c4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80102c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80102ca:	f040 0008 	orr.w	r0, r0, #8
 80102ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80102d2:	051e      	lsls	r6, r3, #20
 80102d4:	d50a      	bpl.n	80102ec <HAL_UART_IRQHandler+0xcc>
 80102d6:	0168      	lsls	r0, r5, #5
 80102d8:	d508      	bpl.n	80102ec <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80102de:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80102e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80102e4:	f040 0020 	orr.w	r0, r0, #32
 80102e8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d0c4      	beq.n	801027e <HAL_UART_IRQHandler+0x5e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102f4:	069b      	lsls	r3, r3, #26
 80102f6:	d506      	bpl.n	8010306 <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80102f8:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80102fc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8010300:	ea55 0301 	orrs.w	r3, r5, r1
 8010304:	d16b      	bne.n	80103de <HAL_UART_IRQHandler+0x1be>
      errorcode = huart->ErrorCode;
 8010306:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801030a:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801030c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010314:	431d      	orrs	r5, r3
 8010316:	d06e      	beq.n	80103f6 <HAL_UART_IRQHandler+0x1d6>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010318:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 801031a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801031c:	4b3b      	ldr	r3, [pc, #236]	; (801040c <HAL_UART_IRQHandler+0x1ec>)
  huart->RxISR = NULL;
 801031e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010320:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8010324:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010326:	6891      	ldr	r1, [r2, #8]
 8010328:	400b      	ands	r3, r1
 801032a:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 801032c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010330:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8010332:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010334:	065f      	lsls	r7, r3, #25
 8010336:	d53c      	bpl.n	80103b2 <HAL_UART_IRQHandler+0x192>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010338:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 801033a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801033c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010340:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8010342:	2800      	cmp	r0, #0
 8010344:	d035      	beq.n	80103b2 <HAL_UART_IRQHandler+0x192>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010346:	4b32      	ldr	r3, [pc, #200]	; (8010410 <HAL_UART_IRQHandler+0x1f0>)
 8010348:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801034a:	f7fa f80f 	bl	800a36c <HAL_DMA_Abort_IT>
 801034e:	2800      	cmp	r0, #0
 8010350:	d095      	beq.n	801027e <HAL_UART_IRQHandler+0x5e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010352:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8010354:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010356:	e00c      	b.n	8010372 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010358:	069f      	lsls	r7, r3, #26
 801035a:	f57f af73 	bpl.w	8010244 <HAL_UART_IRQHandler+0x24>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801035e:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010362:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8010366:	433e      	orrs	r6, r7
 8010368:	f43f af6c 	beq.w	8010244 <HAL_UART_IRQHandler+0x24>
      if (huart->RxISR != NULL)
 801036c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801036e:	2b00      	cmp	r3, #0
 8010370:	d085      	beq.n	801027e <HAL_UART_IRQHandler+0x5e>
}
 8010372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010376:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010378:	075f      	lsls	r7, r3, #29
 801037a:	d59c      	bpl.n	80102b6 <HAL_UART_IRQHandler+0x96>
 801037c:	07ce      	lsls	r6, r1, #31
 801037e:	d59a      	bpl.n	80102b6 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010380:	2604      	movs	r6, #4
 8010382:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010384:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8010388:	f046 0602 	orr.w	r6, r6, #2
 801038c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8010390:	e791      	b.n	80102b6 <HAL_UART_IRQHandler+0x96>
    if (huart->TxISR != NULL)
 8010392:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010394:	2b00      	cmp	r3, #0
 8010396:	f43f af72 	beq.w	801027e <HAL_UART_IRQHandler+0x5e>
      huart->TxISR(huart);
 801039a:	4620      	mov	r0, r4
}
 801039c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80103a0:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80103a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80103a6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80103a8:	6213      	str	r3, [r2, #32]
}
 80103aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80103ae:	f000 bbdf 	b.w	8010b70 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80103b2:	4620      	mov	r0, r4
 80103b4:	f7f3 fc7c 	bl	8003cb0 <HAL_UART_ErrorCallback>
 80103b8:	e761      	b.n	801027e <HAL_UART_IRQHandler+0x5e>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103ba:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103bc:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80103be:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103c0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103c6:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80103c8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 80103cc:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80103ce:	f7ff fea5 	bl	801011c <HAL_UART_TxCpltCallback>
    return;
 80103d2:	e754      	b.n	801027e <HAL_UART_IRQHandler+0x5e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80103d4:	4620      	mov	r0, r4
}
 80103d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80103da:	f000 bbcd 	b.w	8010b78 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 80103de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d090      	beq.n	8010306 <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 80103e4:	4620      	mov	r0, r4
 80103e6:	4798      	blx	r3
 80103e8:	6822      	ldr	r2, [r4, #0]
 80103ea:	e78c      	b.n	8010306 <HAL_UART_IRQHandler+0xe6>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80103ec:	4620      	mov	r0, r4
}
 80103ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80103f2:	f000 bbbf 	b.w	8010b74 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80103f6:	4620      	mov	r0, r4
 80103f8:	f7f3 fc5a 	bl	8003cb0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103fc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8010400:	e73d      	b.n	801027e <HAL_UART_IRQHandler+0x5e>
 8010402:	bf00      	nop
 8010404:	10000001 	.word	0x10000001
 8010408:	04000120 	.word	0x04000120
 801040c:	effffffe 	.word	0xeffffffe
 8010410:	08010415 	.word	0x08010415

08010414 <UART_DMAAbortOnError>:
{
 8010414:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010416:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8010418:	2300      	movs	r3, #0
 801041a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801041e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8010422:	f7f3 fc45 	bl	8003cb0 <HAL_UART_ErrorCallback>
}
 8010426:	bd08      	pop	{r3, pc}

08010428 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8010428:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 801042c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8010430:	4310      	orrs	r0, r2
 8010432:	4770      	bx	lr

08010434 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010434:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010436:	07da      	lsls	r2, r3, #31
{
 8010438:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801043a:	d506      	bpl.n	801044a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801043c:	6801      	ldr	r1, [r0, #0]
 801043e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8010440:	684a      	ldr	r2, [r1, #4]
 8010442:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010446:	4322      	orrs	r2, r4
 8010448:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801044a:	079c      	lsls	r4, r3, #30
 801044c:	d506      	bpl.n	801045c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801044e:	6801      	ldr	r1, [r0, #0]
 8010450:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010452:	684a      	ldr	r2, [r1, #4]
 8010454:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010458:	4322      	orrs	r2, r4
 801045a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801045c:	0759      	lsls	r1, r3, #29
 801045e:	d506      	bpl.n	801046e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010460:	6801      	ldr	r1, [r0, #0]
 8010462:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010464:	684a      	ldr	r2, [r1, #4]
 8010466:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801046a:	4322      	orrs	r2, r4
 801046c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801046e:	071a      	lsls	r2, r3, #28
 8010470:	d506      	bpl.n	8010480 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010472:	6801      	ldr	r1, [r0, #0]
 8010474:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8010476:	684a      	ldr	r2, [r1, #4]
 8010478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801047c:	4322      	orrs	r2, r4
 801047e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010480:	06dc      	lsls	r4, r3, #27
 8010482:	d506      	bpl.n	8010492 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010484:	6801      	ldr	r1, [r0, #0]
 8010486:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8010488:	688a      	ldr	r2, [r1, #8]
 801048a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801048e:	4322      	orrs	r2, r4
 8010490:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010492:	0699      	lsls	r1, r3, #26
 8010494:	d506      	bpl.n	80104a4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010496:	6801      	ldr	r1, [r0, #0]
 8010498:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801049a:	688a      	ldr	r2, [r1, #8]
 801049c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80104a0:	4322      	orrs	r2, r4
 80104a2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104a4:	065a      	lsls	r2, r3, #25
 80104a6:	d50a      	bpl.n	80104be <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104a8:	6801      	ldr	r1, [r0, #0]
 80104aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80104ac:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104ae:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80104b6:	ea42 0204 	orr.w	r2, r2, r4
 80104ba:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104bc:	d00b      	beq.n	80104d6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104be:	061b      	lsls	r3, r3, #24
 80104c0:	d506      	bpl.n	80104d0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104c2:	6802      	ldr	r2, [r0, #0]
 80104c4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80104c6:	6853      	ldr	r3, [r2, #4]
 80104c8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80104cc:	430b      	orrs	r3, r1
 80104ce:	6053      	str	r3, [r2, #4]
}
 80104d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104d4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104d6:	684a      	ldr	r2, [r1, #4]
 80104d8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80104da:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80104de:	4322      	orrs	r2, r4
 80104e0:	604a      	str	r2, [r1, #4]
 80104e2:	e7ec      	b.n	80104be <UART_AdvFeatureConfig+0x8a>

080104e4 <UART_CheckIdleState>:
{
 80104e4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104e6:	2300      	movs	r3, #0
{
 80104e8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80104ee:	f7f8 fced 	bl	8008ecc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80104f2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80104f4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	0711      	lsls	r1, r2, #28
 80104fa:	d40c      	bmi.n	8010516 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	0752      	lsls	r2, r2, #29
 8010500:	d430      	bmi.n	8010564 <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 8010502:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8010504:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8010506:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 801050a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 801050c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8010510:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8010514:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010516:	69da      	ldr	r2, [r3, #28]
 8010518:	0292      	lsls	r2, r2, #10
 801051a:	d4ef      	bmi.n	80104fc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801051c:	f7f8 fcd6 	bl	8008ecc <HAL_GetTick>
 8010520:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010522:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010524:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8010528:	d22d      	bcs.n	8010586 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	0750      	lsls	r0, r2, #29
 801052e:	d5f2      	bpl.n	8010516 <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010530:	69da      	ldr	r2, [r3, #28]
 8010532:	0511      	lsls	r1, r2, #20
 8010534:	d5ef      	bpl.n	8010516 <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010536:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 801053a:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 801053c:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 801053e:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010540:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010542:	6819      	ldr	r1, [r3, #0]
 8010544:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8010548:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801054a:	6899      	ldr	r1, [r3, #8]
 801054c:	f021 0101 	bic.w	r1, r1, #1
 8010550:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8010552:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8010556:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801055a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801055e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8010562:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010564:	69db      	ldr	r3, [r3, #28]
 8010566:	0258      	lsls	r0, r3, #9
 8010568:	d4cb      	bmi.n	8010502 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801056a:	f7f8 fcaf 	bl	8008ecc <HAL_GetTick>
 801056e:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010570:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010572:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8010576:	d206      	bcs.n	8010586 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	0751      	lsls	r1, r2, #29
 801057c:	d5f2      	bpl.n	8010564 <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801057e:	69da      	ldr	r2, [r3, #28]
 8010580:	0512      	lsls	r2, r2, #20
 8010582:	d5ef      	bpl.n	8010564 <UART_CheckIdleState+0x80>
 8010584:	e7d7      	b.n	8010536 <UART_CheckIdleState+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010586:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8010588:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 801058a:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 801058c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801058e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010592:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010594:	689a      	ldr	r2, [r3, #8]
 8010596:	f022 0201 	bic.w	r2, r2, #1
 801059a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 801059c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80105a0:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80105a4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 80105a8:	bd38      	pop	{r3, r4, r5, pc}
 80105aa:	bf00      	nop

080105ac <HAL_UART_Init>:
  if (huart == NULL)
 80105ac:	2800      	cmp	r0, #0
 80105ae:	f000 819a 	beq.w	80108e6 <HAL_UART_Init+0x33a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80105b2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80105b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ba:	4604      	mov	r4, r0
 80105bc:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d061      	beq.n	8010686 <HAL_UART_Init+0xda>
  __HAL_UART_DISABLE(huart);
 80105c2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80105c4:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105c6:	6921      	ldr	r1, [r4, #16]
 80105c8:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80105ca:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105ce:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 80105d0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105d2:	6961      	ldr	r1, [r4, #20]
 80105d4:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80105d6:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105da:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105dc:	49cb      	ldr	r1, [pc, #812]	; (801090c <HAL_UART_Init+0x360>)
  __HAL_UART_DISABLE(huart);
 80105de:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105e0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105e2:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 80105e4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105e6:	4031      	ands	r1, r6
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80105e8:	69a7      	ldr	r7, [r4, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 80105ea:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80105ec:	68e6      	ldr	r6, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80105ee:	4dc8      	ldr	r5, [pc, #800]	; (8010910 <HAL_UART_Init+0x364>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105f0:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80105f2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80105f6:	685a      	ldr	r2, [r3, #4]
 80105f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80105fc:	ea42 0206 	orr.w	r2, r2, r6
 8010600:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010602:	d045      	beq.n	8010690 <HAL_UART_Init+0xe4>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010604:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8010606:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010608:	49c2      	ldr	r1, [pc, #776]	; (8010914 <HAL_UART_Init+0x368>)
    tmpreg |= huart->Init.OneBitSampling;
 801060a:	433a      	orrs	r2, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 801060c:	4ec2      	ldr	r6, [pc, #776]	; (8010918 <HAL_UART_Init+0x36c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801060e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010610:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010612:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010614:	ea42 0201 	orr.w	r2, r2, r1
 8010618:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801061a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801061c:	f022 020f 	bic.w	r2, r2, #15
 8010620:	ea42 0205 	orr.w	r2, r2, r5
 8010624:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010626:	d025      	beq.n	8010674 <HAL_UART_Init+0xc8>
 8010628:	4abc      	ldr	r2, [pc, #752]	; (801091c <HAL_UART_Init+0x370>)
 801062a:	4293      	cmp	r3, r2
 801062c:	f000 808c 	beq.w	8010748 <HAL_UART_Init+0x19c>
 8010630:	4abb      	ldr	r2, [pc, #748]	; (8010920 <HAL_UART_Init+0x374>)
 8010632:	4293      	cmp	r3, r2
 8010634:	f000 8159 	beq.w	80108ea <HAL_UART_Init+0x33e>
 8010638:	4aba      	ldr	r2, [pc, #744]	; (8010924 <HAL_UART_Init+0x378>)
 801063a:	4293      	cmp	r3, r2
 801063c:	f000 813f 	beq.w	80108be <HAL_UART_Init+0x312>
 8010640:	4ab9      	ldr	r2, [pc, #740]	; (8010928 <HAL_UART_Init+0x37c>)
 8010642:	4293      	cmp	r3, r2
 8010644:	f000 81fa 	beq.w	8010a3c <HAL_UART_Init+0x490>
 8010648:	4ab8      	ldr	r2, [pc, #736]	; (801092c <HAL_UART_Init+0x380>)
 801064a:	4293      	cmp	r3, r2
 801064c:	f000 8265 	beq.w	8010b1a <HAL_UART_Init+0x56e>
 8010650:	4ab7      	ldr	r2, [pc, #732]	; (8010930 <HAL_UART_Init+0x384>)
 8010652:	4293      	cmp	r3, r2
 8010654:	f000 826b 	beq.w	8010b2e <HAL_UART_Init+0x582>
 8010658:	4ab6      	ldr	r2, [pc, #728]	; (8010934 <HAL_UART_Init+0x388>)
 801065a:	4293      	cmp	r3, r2
 801065c:	f000 8251 	beq.w	8010b02 <HAL_UART_Init+0x556>
  huart->RxISR = NULL;
 8010660:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8010662:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8010666:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8010668:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 801066a:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 801066e:	b006      	add	sp, #24
 8010670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010674:	4bb0      	ldr	r3, [pc, #704]	; (8010938 <HAL_UART_Init+0x38c>)
 8010676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801067c:	2b28      	cmp	r3, #40	; 0x28
 801067e:	d8ef      	bhi.n	8010660 <HAL_UART_Init+0xb4>
 8010680:	4aae      	ldr	r2, [pc, #696]	; (801093c <HAL_UART_Init+0x390>)
 8010682:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8010684:	e068      	b.n	8010758 <HAL_UART_Init+0x1ac>
    huart->Lock = HAL_UNLOCKED;
 8010686:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 801068a:	f7f3 fe3b 	bl	8004304 <HAL_UART_MspInit>
 801068e:	e798      	b.n	80105c2 <HAL_UART_Init+0x16>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010690:	6899      	ldr	r1, [r3, #8]
 8010692:	4aa0      	ldr	r2, [pc, #640]	; (8010914 <HAL_UART_Init+0x368>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010694:	48a8      	ldr	r0, [pc, #672]	; (8010938 <HAL_UART_Init+0x38c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010696:	400a      	ands	r2, r1
 8010698:	433a      	orrs	r2, r7
 801069a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801069c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801069e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80106a0:	f022 020f 	bic.w	r2, r2, #15
 80106a4:	430a      	orrs	r2, r1
 80106a6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80106a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80106aa:	f003 0307 	and.w	r3, r3, #7
 80106ae:	2b05      	cmp	r3, #5
 80106b0:	d8d6      	bhi.n	8010660 <HAL_UART_Init+0xb4>
 80106b2:	4aa3      	ldr	r2, [pc, #652]	; (8010940 <HAL_UART_Init+0x394>)
 80106b4:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 80106b6:	2b20      	cmp	r3, #32
 80106b8:	f200 8121 	bhi.w	80108fe <HAL_UART_Init+0x352>
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d9cf      	bls.n	8010660 <HAL_UART_Init+0xb4>
 80106c0:	3b02      	subs	r3, #2
 80106c2:	2b1e      	cmp	r3, #30
 80106c4:	d8cc      	bhi.n	8010660 <HAL_UART_Init+0xb4>
 80106c6:	a201      	add	r2, pc, #4	; (adr r2, 80106cc <HAL_UART_Init+0x120>)
 80106c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106cc:	08010ac3 	.word	0x08010ac3
 80106d0:	08010661 	.word	0x08010661
 80106d4:	08010ab9 	.word	0x08010ab9
 80106d8:	08010661 	.word	0x08010661
 80106dc:	08010661 	.word	0x08010661
 80106e0:	08010661 	.word	0x08010661
 80106e4:	08010aa9 	.word	0x08010aa9
 80106e8:	08010661 	.word	0x08010661
 80106ec:	08010661 	.word	0x08010661
 80106f0:	08010661 	.word	0x08010661
 80106f4:	08010661 	.word	0x08010661
 80106f8:	08010661 	.word	0x08010661
 80106fc:	08010661 	.word	0x08010661
 8010700:	08010661 	.word	0x08010661
 8010704:	08010a95 	.word	0x08010a95
 8010708:	08010661 	.word	0x08010661
 801070c:	08010661 	.word	0x08010661
 8010710:	08010661 	.word	0x08010661
 8010714:	08010661 	.word	0x08010661
 8010718:	08010661 	.word	0x08010661
 801071c:	08010661 	.word	0x08010661
 8010720:	08010661 	.word	0x08010661
 8010724:	08010661 	.word	0x08010661
 8010728:	08010661 	.word	0x08010661
 801072c:	08010661 	.word	0x08010661
 8010730:	08010661 	.word	0x08010661
 8010734:	08010661 	.word	0x08010661
 8010738:	08010661 	.word	0x08010661
 801073c:	08010661 	.word	0x08010661
 8010740:	08010661 	.word	0x08010661
 8010744:	0801085b 	.word	0x0801085b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010748:	4b7b      	ldr	r3, [pc, #492]	; (8010938 <HAL_UART_Init+0x38c>)
 801074a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801074c:	f003 0307 	and.w	r3, r3, #7
 8010750:	2b05      	cmp	r3, #5
 8010752:	d885      	bhi.n	8010660 <HAL_UART_Init+0xb4>
 8010754:	4a7b      	ldr	r2, [pc, #492]	; (8010944 <HAL_UART_Init+0x398>)
 8010756:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010758:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801075c:	f000 80fe 	beq.w	801095c <HAL_UART_Init+0x3b0>
    switch (clocksource)
 8010760:	2b20      	cmp	r3, #32
 8010762:	f200 80ba 	bhi.w	80108da <HAL_UART_Init+0x32e>
 8010766:	2b20      	cmp	r3, #32
 8010768:	f63f af7a 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 801076c:	a201      	add	r2, pc, #4	; (adr r2, 8010774 <HAL_UART_Init+0x1c8>)
 801076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010772:	bf00      	nop
 8010774:	08010a8f 	.word	0x08010a8f
 8010778:	08010a89 	.word	0x08010a89
 801077c:	08010661 	.word	0x08010661
 8010780:	08010661 	.word	0x08010661
 8010784:	08010a7f 	.word	0x08010a7f
 8010788:	08010661 	.word	0x08010661
 801078c:	08010661 	.word	0x08010661
 8010790:	08010661 	.word	0x08010661
 8010794:	08010a65 	.word	0x08010a65
 8010798:	08010661 	.word	0x08010661
 801079c:	08010661 	.word	0x08010661
 80107a0:	08010661 	.word	0x08010661
 80107a4:	08010661 	.word	0x08010661
 80107a8:	08010661 	.word	0x08010661
 80107ac:	08010661 	.word	0x08010661
 80107b0:	08010661 	.word	0x08010661
 80107b4:	08010a51 	.word	0x08010a51
 80107b8:	08010661 	.word	0x08010661
 80107bc:	08010661 	.word	0x08010661
 80107c0:	08010661 	.word	0x08010661
 80107c4:	08010661 	.word	0x08010661
 80107c8:	08010661 	.word	0x08010661
 80107cc:	08010661 	.word	0x08010661
 80107d0:	08010661 	.word	0x08010661
 80107d4:	08010661 	.word	0x08010661
 80107d8:	08010661 	.word	0x08010661
 80107dc:	08010661 	.word	0x08010661
 80107e0:	08010661 	.word	0x08010661
 80107e4:	08010661 	.word	0x08010661
 80107e8:	08010661 	.word	0x08010661
 80107ec:	08010661 	.word	0x08010661
 80107f0:	08010661 	.word	0x08010661
 80107f4:	080107f9 	.word	0x080107f9
        pclk = (uint32_t) CSI_VALUE;
 80107f8:	4853      	ldr	r0, [pc, #332]	; (8010948 <HAL_UART_Init+0x39c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80107fa:	4b54      	ldr	r3, [pc, #336]	; (801094c <HAL_UART_Init+0x3a0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107fc:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010800:	6862      	ldr	r2, [r4, #4]
 8010802:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8010806:	fbb0 f3f3 	udiv	r3, r0, r3
 801080a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801080e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010812:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010814:	f1a3 0210 	sub.w	r2, r3, #16
 8010818:	428a      	cmp	r2, r1
 801081a:	f63f af21 	bhi.w	8010660 <HAL_UART_Init+0xb4>
  huart->RxISR = NULL;
 801081e:	2200      	movs	r2, #0
        huart->Instance->BRR = usartdiv;
 8010820:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8010822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 8010826:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8010828:	6722      	str	r2, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 801082a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801082e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010830:	2b00      	cmp	r3, #0
 8010832:	d14e      	bne.n	80108d2 <HAL_UART_Init+0x326>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010834:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8010836:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010838:	685a      	ldr	r2, [r3, #4]
 801083a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801083e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010840:	689a      	ldr	r2, [r3, #8]
 8010842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010846:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	f042 0201 	orr.w	r2, r2, #1
 801084e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8010850:	f7ff fe48 	bl	80104e4 <UART_CheckIdleState>
}
 8010854:	b006      	add	sp, #24
 8010856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = (uint32_t) CSI_VALUE;
 801085a:	483b      	ldr	r0, [pc, #236]	; (8010948 <HAL_UART_Init+0x39c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801085c:	4b3b      	ldr	r3, [pc, #236]	; (801094c <HAL_UART_Init+0x3a0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801085e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010860:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010864:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010868:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801086c:	428b      	cmp	r3, r1
 801086e:	f4ff aef7 	bcc.w	8010660 <HAL_UART_Init+0xb4>
 8010872:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8010876:	f63f aef3 	bhi.w	8010660 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801087a:	f04f 0800 	mov.w	r8, #0
 801087e:	2300      	movs	r3, #0
 8010880:	4641      	mov	r1, r8
 8010882:	f7ef fd95 	bl	80003b0 <__aeabi_uldivmod>
 8010886:	462a      	mov	r2, r5
 8010888:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 801088c:	4643      	mov	r3, r8
 801088e:	020f      	lsls	r7, r1, #8
 8010890:	0206      	lsls	r6, r0, #8
 8010892:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8010896:	eb16 000c 	adds.w	r0, r6, ip
 801089a:	f147 0100 	adc.w	r1, r7, #0
 801089e:	f7ef fd87 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80108a2:	4b2b      	ldr	r3, [pc, #172]	; (8010950 <HAL_UART_Init+0x3a4>)
 80108a4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80108a8:	429a      	cmp	r2, r3
 80108aa:	f63f aed9 	bhi.w	8010660 <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 80108ae:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80108b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80108b4:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 80108b6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80108b8:	e9c4 881b 	strd	r8, r8, [r4, #108]	; 0x6c
  return ret;
 80108bc:	e7b7      	b.n	801082e <HAL_UART_Init+0x282>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80108be:	4b1e      	ldr	r3, [pc, #120]	; (8010938 <HAL_UART_Init+0x38c>)
 80108c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	2b05      	cmp	r3, #5
 80108c8:	f63f aeca 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 80108cc:	4a21      	ldr	r2, [pc, #132]	; (8010954 <HAL_UART_Init+0x3a8>)
 80108ce:	5cd3      	ldrb	r3, [r2, r3]
 80108d0:	e742      	b.n	8010758 <HAL_UART_Init+0x1ac>
    UART_AdvFeatureConfig(huart);
 80108d2:	4620      	mov	r0, r4
 80108d4:	f7ff fdae 	bl	8010434 <UART_AdvFeatureConfig>
 80108d8:	e7ac      	b.n	8010834 <HAL_UART_Init+0x288>
    switch (clocksource)
 80108da:	2b40      	cmp	r3, #64	; 0x40
 80108dc:	f47f aec0 	bne.w	8010660 <HAL_UART_Init+0xb4>
 80108e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80108e4:	e789      	b.n	80107fa <HAL_UART_Init+0x24e>
    return HAL_ERROR;
 80108e6:	2001      	movs	r0, #1
}
 80108e8:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80108ea:	4b13      	ldr	r3, [pc, #76]	; (8010938 <HAL_UART_Init+0x38c>)
 80108ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ee:	f003 0307 	and.w	r3, r3, #7
 80108f2:	2b05      	cmp	r3, #5
 80108f4:	f63f aeb4 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 80108f8:	4a17      	ldr	r2, [pc, #92]	; (8010958 <HAL_UART_Init+0x3ac>)
 80108fa:	5cd3      	ldrb	r3, [r2, r3]
 80108fc:	e72c      	b.n	8010758 <HAL_UART_Init+0x1ac>
    switch (clocksource)
 80108fe:	2b40      	cmp	r3, #64	; 0x40
 8010900:	f47f aeae 	bne.w	8010660 <HAL_UART_Init+0xb4>
 8010904:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010908:	e7a8      	b.n	801085c <HAL_UART_Init+0x2b0>
 801090a:	bf00      	nop
 801090c:	cfff69f3 	.word	0xcfff69f3
 8010910:	58000c00 	.word	0x58000c00
 8010914:	11fff4ff 	.word	0x11fff4ff
 8010918:	40011000 	.word	0x40011000
 801091c:	40004400 	.word	0x40004400
 8010920:	40004800 	.word	0x40004800
 8010924:	40004c00 	.word	0x40004c00
 8010928:	40005000 	.word	0x40005000
 801092c:	40011400 	.word	0x40011400
 8010930:	40007800 	.word	0x40007800
 8010934:	40007c00 	.word	0x40007c00
 8010938:	58024400 	.word	0x58024400
 801093c:	0802cc50 	.word	0x0802cc50
 8010940:	0802cc84 	.word	0x0802cc84
 8010944:	0802cc7c 	.word	0x0802cc7c
 8010948:	003d0900 	.word	0x003d0900
 801094c:	0802cc8c 	.word	0x0802cc8c
 8010950:	000ffcff 	.word	0x000ffcff
 8010954:	0802cc7c 	.word	0x0802cc7c
 8010958:	0802cc7c 	.word	0x0802cc7c
    switch (clocksource)
 801095c:	2b20      	cmp	r3, #32
 801095e:	d86a      	bhi.n	8010a36 <HAL_UART_Init+0x48a>
 8010960:	2b20      	cmp	r3, #32
 8010962:	f63f ae7d 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 8010966:	a201      	add	r2, pc, #4	; (adr r2, 801096c <HAL_UART_Init+0x3c0>)
 8010968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096c:	08010ad5 	.word	0x08010ad5
 8010970:	08010ac9 	.word	0x08010ac9
 8010974:	08010661 	.word	0x08010661
 8010978:	08010661 	.word	0x08010661
 801097c:	08010af9 	.word	0x08010af9
 8010980:	08010661 	.word	0x08010661
 8010984:	08010661 	.word	0x08010661
 8010988:	08010661 	.word	0x08010661
 801098c:	08010aef 	.word	0x08010aef
 8010990:	08010661 	.word	0x08010661
 8010994:	08010661 	.word	0x08010661
 8010998:	08010661 	.word	0x08010661
 801099c:	08010661 	.word	0x08010661
 80109a0:	08010661 	.word	0x08010661
 80109a4:	08010661 	.word	0x08010661
 80109a8:	08010661 	.word	0x08010661
 80109ac:	08010adb 	.word	0x08010adb
 80109b0:	08010661 	.word	0x08010661
 80109b4:	08010661 	.word	0x08010661
 80109b8:	08010661 	.word	0x08010661
 80109bc:	08010661 	.word	0x08010661
 80109c0:	08010661 	.word	0x08010661
 80109c4:	08010661 	.word	0x08010661
 80109c8:	08010661 	.word	0x08010661
 80109cc:	08010661 	.word	0x08010661
 80109d0:	08010661 	.word	0x08010661
 80109d4:	08010661 	.word	0x08010661
 80109d8:	08010661 	.word	0x08010661
 80109dc:	08010661 	.word	0x08010661
 80109e0:	08010661 	.word	0x08010661
 80109e4:	08010661 	.word	0x08010661
 80109e8:	08010661 	.word	0x08010661
 80109ec:	080109f1 	.word	0x080109f1
        pclk = (uint32_t) CSI_VALUE;
 80109f0:	4857      	ldr	r0, [pc, #348]	; (8010b50 <HAL_UART_Init+0x5a4>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80109f2:	4b58      	ldr	r3, [pc, #352]	; (8010b54 <HAL_UART_Init+0x5a8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80109f4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80109f8:	6862      	ldr	r2, [r4, #4]
 80109fa:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 80109fe:	0853      	lsrs	r3, r2, #1
 8010a00:	fbb0 f0f5 	udiv	r0, r0, r5
 8010a04:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010a08:	fbb0 f0f2 	udiv	r0, r0, r2
 8010a0c:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a0e:	f1a2 0310 	sub.w	r3, r2, #16
 8010a12:	428b      	cmp	r3, r1
 8010a14:	f63f ae24 	bhi.w	8010660 <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a18:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010a1c:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->RxISR = NULL;
 8010a20:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8010a22:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a24:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 8010a26:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	60eb      	str	r3, [r5, #12]
  huart->TxISR = NULL;
 8010a2e:	6721      	str	r1, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8010a30:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 8010a34:	e6fb      	b.n	801082e <HAL_UART_Init+0x282>
    switch (clocksource)
 8010a36:	2b40      	cmp	r3, #64	; 0x40
 8010a38:	d0db      	beq.n	80109f2 <HAL_UART_Init+0x446>
 8010a3a:	e611      	b.n	8010660 <HAL_UART_Init+0xb4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a3c:	4b46      	ldr	r3, [pc, #280]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a40:	f003 0307 	and.w	r3, r3, #7
 8010a44:	2b05      	cmp	r3, #5
 8010a46:	f63f ae0b 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 8010a4a:	4a44      	ldr	r2, [pc, #272]	; (8010b5c <HAL_UART_Init+0x5b0>)
 8010a4c:	5cd3      	ldrb	r3, [r2, r3]
 8010a4e:	e683      	b.n	8010758 <HAL_UART_Init+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a50:	4b41      	ldr	r3, [pc, #260]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	0692      	lsls	r2, r2, #26
 8010a56:	d574      	bpl.n	8010b42 <HAL_UART_Init+0x596>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4841      	ldr	r0, [pc, #260]	; (8010b60 <HAL_UART_Init+0x5b4>)
 8010a5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8010a60:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8010a62:	e6ca      	b.n	80107fa <HAL_UART_Init+0x24e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a64:	a803      	add	r0, sp, #12
 8010a66:	f7fd fe63 	bl	800e730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a6a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d152      	bne.n	8010b16 <HAL_UART_Init+0x56a>
  huart->RxISR = NULL;
 8010a70:	2300      	movs	r3, #0
 8010a72:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8010a76:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8010a78:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8010a7c:	e6d7      	b.n	801082e <HAL_UART_Init+0x282>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a7e:	4668      	mov	r0, sp
 8010a80:	f7fd fdaa 	bl	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a84:	9801      	ldr	r0, [sp, #4]
        break;
 8010a86:	e7f1      	b.n	8010a6c <HAL_UART_Init+0x4c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a88:	f7fc fea8 	bl	800d7dc <HAL_RCC_GetPCLK2Freq>
        break;
 8010a8c:	e7ee      	b.n	8010a6c <HAL_UART_Init+0x4c0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a8e:	f7fc fe5d 	bl	800d74c <HAL_RCC_GetPCLK1Freq>
        break;
 8010a92:	e7eb      	b.n	8010a6c <HAL_UART_Init+0x4c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a94:	4b30      	ldr	r3, [pc, #192]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	0690      	lsls	r0, r2, #26
 8010a9a:	d554      	bpl.n	8010b46 <HAL_UART_Init+0x59a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4830      	ldr	r0, [pc, #192]	; (8010b60 <HAL_UART_Init+0x5b4>)
 8010aa0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8010aa4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8010aa6:	e6d9      	b.n	801085c <HAL_UART_Init+0x2b0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010aa8:	a803      	add	r0, sp, #12
 8010aaa:	f7fd fe41 	bl	800e730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010aae:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	d0dd      	beq.n	8010a70 <HAL_UART_Init+0x4c4>
 8010ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010ab6:	e6d1      	b.n	801085c <HAL_UART_Init+0x2b0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ab8:	4668      	mov	r0, sp
 8010aba:	f7fd fd8d 	bl	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010abe:	9801      	ldr	r0, [sp, #4]
        break;
 8010ac0:	e7f6      	b.n	8010ab0 <HAL_UART_Init+0x504>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010ac2:	f7fd fd77 	bl	800e5b4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8010ac6:	e7f3      	b.n	8010ab0 <HAL_UART_Init+0x504>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ac8:	f7fc fe88 	bl	800d7dc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d0cf      	beq.n	8010a70 <HAL_UART_Init+0x4c4>
 8010ad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010ad2:	e78e      	b.n	80109f2 <HAL_UART_Init+0x446>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ad4:	f7fc fe3a 	bl	800d74c <HAL_RCC_GetPCLK1Freq>
        break;
 8010ad8:	e7f8      	b.n	8010acc <HAL_UART_Init+0x520>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ada:	4b1f      	ldr	r3, [pc, #124]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	0691      	lsls	r1, r2, #26
 8010ae0:	d533      	bpl.n	8010b4a <HAL_UART_Init+0x59e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	481e      	ldr	r0, [pc, #120]	; (8010b60 <HAL_UART_Init+0x5b4>)
 8010ae6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8010aea:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8010aec:	e781      	b.n	80109f2 <HAL_UART_Init+0x446>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010aee:	a803      	add	r0, sp, #12
 8010af0:	f7fd fe1e 	bl	800e730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010af4:	9804      	ldr	r0, [sp, #16]
        break;
 8010af6:	e7e9      	b.n	8010acc <HAL_UART_Init+0x520>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010af8:	4668      	mov	r0, sp
 8010afa:	f7fd fd6d 	bl	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010afe:	9801      	ldr	r0, [sp, #4]
        break;
 8010b00:	e7e4      	b.n	8010acc <HAL_UART_Init+0x520>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b02:	4b15      	ldr	r3, [pc, #84]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b06:	f003 0307 	and.w	r3, r3, #7
 8010b0a:	2b05      	cmp	r3, #5
 8010b0c:	f63f ada8 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 8010b10:	4a14      	ldr	r2, [pc, #80]	; (8010b64 <HAL_UART_Init+0x5b8>)
 8010b12:	5cd3      	ldrb	r3, [r2, r3]
 8010b14:	e620      	b.n	8010758 <HAL_UART_Init+0x1ac>
 8010b16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010b18:	e66f      	b.n	80107fa <HAL_UART_Init+0x24e>
 8010b1a:	4b0f      	ldr	r3, [pc, #60]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b22:	2b28      	cmp	r3, #40	; 0x28
 8010b24:	f63f ad9c 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 8010b28:	4a0f      	ldr	r2, [pc, #60]	; (8010b68 <HAL_UART_Init+0x5bc>)
 8010b2a:	5cd3      	ldrb	r3, [r2, r3]
 8010b2c:	e614      	b.n	8010758 <HAL_UART_Init+0x1ac>
 8010b2e:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <HAL_UART_Init+0x5ac>)
 8010b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b32:	f003 0307 	and.w	r3, r3, #7
 8010b36:	2b05      	cmp	r3, #5
 8010b38:	f63f ad92 	bhi.w	8010660 <HAL_UART_Init+0xb4>
 8010b3c:	4a0b      	ldr	r2, [pc, #44]	; (8010b6c <HAL_UART_Init+0x5c0>)
 8010b3e:	5cd3      	ldrb	r3, [r2, r3]
 8010b40:	e60a      	b.n	8010758 <HAL_UART_Init+0x1ac>
          pclk = (uint32_t) HSI_VALUE;
 8010b42:	4807      	ldr	r0, [pc, #28]	; (8010b60 <HAL_UART_Init+0x5b4>)
 8010b44:	e659      	b.n	80107fa <HAL_UART_Init+0x24e>
          pclk = (uint32_t) HSI_VALUE;
 8010b46:	4806      	ldr	r0, [pc, #24]	; (8010b60 <HAL_UART_Init+0x5b4>)
 8010b48:	e688      	b.n	801085c <HAL_UART_Init+0x2b0>
          pclk = (uint32_t) HSI_VALUE;
 8010b4a:	4805      	ldr	r0, [pc, #20]	; (8010b60 <HAL_UART_Init+0x5b4>)
 8010b4c:	e751      	b.n	80109f2 <HAL_UART_Init+0x446>
 8010b4e:	bf00      	nop
 8010b50:	003d0900 	.word	0x003d0900
 8010b54:	0802cc8c 	.word	0x0802cc8c
 8010b58:	58024400 	.word	0x58024400
 8010b5c:	0802cc7c 	.word	0x0802cc7c
 8010b60:	03d09000 	.word	0x03d09000
 8010b64:	0802cc7c 	.word	0x0802cc7c
 8010b68:	0802cc50 	.word	0x0802cc50
 8010b6c:	0802cc7c 	.word	0x0802cc7c

08010b70 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop

08010b74 <HAL_UARTEx_RxFifoFullCallback>:
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop

08010b78 <HAL_UARTEx_TxFifoEmptyCallback>:
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop

08010b7c <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 8010b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8010b80:	2700      	movs	r7, #0
{
 8010b82:	b083      	sub	sp, #12
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8010b84:	2303      	movs	r3, #3

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8010b86:	f44f 3980 	mov.w	r9, #65536	; 0x10000
{
 8010b8a:	4604      	mov	r4, r0
  uint32_t sel = 0U;
 8010b8c:	46bb      	mov	fp, r7
  uint32_t unit = 0U;
 8010b8e:	9701      	str	r7, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8010b90:	6003      	str	r3, [r0, #0]
    tuning = 0U;
 8010b92:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8010b96:	fa09 fa07 	lsl.w	sl, r9, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8010b9a:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 8010b9c:	0233      	lsls	r3, r6, #8
 8010b9e:	f043 030c 	orr.w	r3, r3, #12
 8010ba2:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 8010ba4:	f7f8 f992 	bl	8008ecc <HAL_GetTick>
 8010ba8:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010baa:	e004      	b.n	8010bb6 <DelayBlock_Enable+0x3a>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8010bac:	f7f8 f98e 	bl	8008ecc <HAL_GetTick>
 8010bb0:	1b40      	subs	r0, r0, r5
 8010bb2:	28fe      	cmp	r0, #254	; 0xfe
 8010bb4:	d81a      	bhi.n	8010bec <DelayBlock_Enable+0x70>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010bb6:	6863      	ldr	r3, [r4, #4]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	daf7      	bge.n	8010bac <DelayBlock_Enable+0x30>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8010bbc:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8010bbe:	f1b8 0f00 	cmp.w	r8, #0
 8010bc2:	d017      	beq.n	8010bf4 <DelayBlock_Enable+0x78>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 8010bc4:	ea13 0f0a 	tst.w	r3, sl
 8010bc8:	d01c      	beq.n	8010c04 <DelayBlock_Enable+0x88>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8010bca:	3601      	adds	r6, #1
 8010bcc:	2e80      	cmp	r6, #128	; 0x80
 8010bce:	d1e5      	bne.n	8010b9c <DelayBlock_Enable+0x20>
 8010bd0:	3701      	adds	r7, #1
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8010bd2:	2f0c      	cmp	r7, #12
 8010bd4:	d1dd      	bne.n	8010b92 <DelayBlock_Enable+0x16>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8010bd6:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8010bd8:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8010bda:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8010bdc:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8010bde:	ea4b 2303 	orr.w	r3, fp, r3, lsl #8
  DLYBx->CR   = 0U;
 8010be2:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8010be4:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8010be6:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8010be8:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8010bea:	e000      	b.n	8010bee <DelayBlock_Enable+0x72>
          return HAL_TIMEOUT;
 8010bec:	2003      	movs	r0, #3
}
 8010bee:	b003      	add	sp, #12
 8010bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8010bf4:	ea13 0f0a 	tst.w	r3, sl
 8010bf8:	bf14      	ite	ne
 8010bfa:	f04f 0801 	movne.w	r8, #1
 8010bfe:	f04f 0800 	moveq.w	r8, #0
 8010c02:	e7e2      	b.n	8010bca <DelayBlock_Enable+0x4e>
          if( unit == 0U )
 8010c04:	9b01      	ldr	r3, [sp, #4]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1e2      	bne.n	8010bd0 <DelayBlock_Enable+0x54>
            sel  = sel_current + 1U;
 8010c0a:	f107 0b01 	add.w	fp, r7, #1
          if( unit == 0U )
 8010c0e:	9601      	str	r6, [sp, #4]
 8010c10:	465f      	mov	r7, fp
 8010c12:	e7de      	b.n	8010bd2 <DelayBlock_Enable+0x56>

08010c14 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010c14:	b084      	sub	sp, #16
 8010c16:	b470      	push	{r4, r5, r6}
 8010c18:	ae04      	add	r6, sp, #16
 8010c1a:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 8010c1c:	9c07      	ldr	r4, [sp, #28]

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);

  return HAL_OK;
}
 8010c1e:	2000      	movs	r0, #0
{
 8010c20:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8010c24:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010c26:	686e      	ldr	r6, [r5, #4]
             Init.ClockPowerSave      |\
 8010c28:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8010c2c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8010c2e:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8010c30:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010c32:	4a04      	ldr	r2, [pc, #16]	; (8010c44 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 8010c34:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010c36:	4032      	ands	r2, r6
             Init.HardwareFlowControl |\
 8010c38:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	606b      	str	r3, [r5, #4]
}
 8010c3e:	bc70      	pop	{r4, r5, r6}
 8010c40:	b004      	add	sp, #16
 8010c42:	4770      	bx	lr
 8010c44:	ffc02c00 	.word	0xffc02c00

08010c48 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010c48:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop

08010c50 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010c50:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010c52:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8010c54:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8010c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010c5a:	4770      	bx	lr

08010c5c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010c5c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8010c5e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	f042 0203 	orr.w	r2, r2, #3
 8010c66:	601a      	str	r2, [r3, #0]
}
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop

08010c6c <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8010c6c:	4603      	mov	r3, r0
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);

  return HAL_OK;
}
 8010c6e:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	f022 0203 	bic.w	r2, r2, #3
 8010c76:	601a      	str	r2, [r3, #0]
}
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010c7c:	6800      	ldr	r0, [r0, #0]
}
 8010c7e:	f000 0003 	and.w	r0, r0, #3
 8010c82:	4770      	bx	lr

08010c84 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010c84:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8010c86:	5840      	ldr	r0, [r0, r1]
}
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop

08010c8c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010c8c:	b430      	push	{r4, r5}
 8010c8e:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010c90:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 8010c92:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c94:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8010c98:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8010c9a:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010c9c:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8010c9e:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8010ca0:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8010ca2:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8010ca4:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010ca6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8010ca8:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010caa:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 8010cae:	430b      	orrs	r3, r1
}
 8010cb0:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cb8:	4b4b      	ldr	r3, [pc, #300]	; (8010de8 <SDMMC_CmdBlockLength+0x130>)
 8010cba:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8010cbe:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cc0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010cc2:	f241 1410 	movw	r4, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cc6:	4d49      	ldr	r5, [pc, #292]	; (8010dec <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 8010cc8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cca:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010cce:	4948      	ldr	r1, [pc, #288]	; (8010df0 <SDMMC_CmdBlockLength+0x138>)
 8010cd0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cd2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010cd4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010cd6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010cda:	430c      	orrs	r4, r1
 8010cdc:	60c4      	str	r4, [r0, #12]

  do
  {
    if (count-- == 0U)
 8010cde:	b14b      	cbz	r3, 8010cf4 <SDMMC_CmdBlockLength+0x3c>
 8010ce0:	1e5a      	subs	r2, r3, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010ce2:	4944      	ldr	r1, [pc, #272]	; (8010df4 <SDMMC_CmdBlockLength+0x13c>)
    sta_reg = SDMMCx->STA;
 8010ce4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010ce6:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010ce8:	420b      	tst	r3, r1
 8010cea:	d001      	beq.n	8010cf0 <SDMMC_CmdBlockLength+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010cec:	049c      	lsls	r4, r3, #18
 8010cee:	d506      	bpl.n	8010cfe <SDMMC_CmdBlockLength+0x46>
    if (count-- == 0U)
 8010cf0:	1c55      	adds	r5, r2, #1
 8010cf2:	d1f7      	bne.n	8010ce4 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	bc30      	pop	{r4, r5}
 8010cfc:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d00:	075b      	lsls	r3, r3, #29
 8010d02:	d43d      	bmi.n	8010d80 <SDMMC_CmdBlockLength+0xc8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d06:	f013 0301 	ands.w	r3, r3, #1
 8010d0a:	d134      	bne.n	8010d76 <SDMMC_CmdBlockLength+0xbe>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d0c:	4b3a      	ldr	r3, [pc, #232]	; (8010df8 <SDMMC_CmdBlockLength+0x140>)
 8010d0e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010d10:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	2b10      	cmp	r3, #16
 8010d16:	d131      	bne.n	8010d7c <SDMMC_CmdBlockLength+0xc4>
  return (*(__IO uint32_t *) tmp);
 8010d18:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d1a:	4b38      	ldr	r3, [pc, #224]	; (8010dfc <SDMMC_CmdBlockLength+0x144>)
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d0ea      	beq.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d22:	2a00      	cmp	r2, #0
 8010d24:	db2f      	blt.n	8010d86 <SDMMC_CmdBlockLength+0xce>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010d26:	0055      	lsls	r5, r2, #1
 8010d28:	d430      	bmi.n	8010d8c <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010d2a:	0094      	lsls	r4, r2, #2
 8010d2c:	d430      	bmi.n	8010d90 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010d2e:	00d0      	lsls	r0, r2, #3
 8010d30:	d430      	bmi.n	8010d94 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010d32:	0111      	lsls	r1, r2, #4
 8010d34:	d431      	bmi.n	8010d9a <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d36:	0155      	lsls	r5, r2, #5
 8010d38:	d432      	bmi.n	8010da0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010d3a:	01d4      	lsls	r4, r2, #7
 8010d3c:	d433      	bmi.n	8010da6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010d3e:	0210      	lsls	r0, r2, #8
 8010d40:	d434      	bmi.n	8010dac <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010d42:	0251      	lsls	r1, r2, #9
 8010d44:	d435      	bmi.n	8010db2 <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010d46:	0295      	lsls	r5, r2, #10
 8010d48:	d436      	bmi.n	8010db8 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010d4a:	02d4      	lsls	r4, r2, #11
 8010d4c:	d437      	bmi.n	8010dbe <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010d4e:	0350      	lsls	r0, r2, #13
 8010d50:	d438      	bmi.n	8010dc4 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010d52:	0391      	lsls	r1, r2, #14
 8010d54:	d439      	bmi.n	8010dca <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010d56:	03d5      	lsls	r5, r2, #15
 8010d58:	d43a      	bmi.n	8010dd0 <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d5a:	0414      	lsls	r4, r2, #16
 8010d5c:	d43b      	bmi.n	8010dd6 <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010d5e:	0450      	lsls	r0, r2, #17
 8010d60:	d43f      	bmi.n	8010de2 <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010d62:	0491      	lsls	r1, r2, #18
 8010d64:	d43a      	bmi.n	8010ddc <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d66:	f012 0f08 	tst.w	r2, #8
 8010d6a:	bf14      	ite	ne
 8010d6c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010d70:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010d74:	e7c0      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d76:	2201      	movs	r2, #1
 8010d78:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d7a:	e7bd      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e7bb      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d80:	2304      	movs	r3, #4
 8010d82:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d84:	e7b8      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d8a:	e7b5      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d8c:	2340      	movs	r3, #64	; 0x40
 8010d8e:	e7b3      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d90:	2380      	movs	r3, #128	; 0x80
 8010d92:	e7b1      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d98:	e7ae      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d9e:	e7ab      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010da4:	e7a8      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010daa:	e7a5      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010db0:	e7a2      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010db6:	e79f      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dbc:	e79c      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dc2:	e799      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010dc8:	e796      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010dca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010dce:	e793      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010dd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010dd4:	e790      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010dd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010dda:	e78d      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010ddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010de0:	e78a      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010de2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010de6:	e787      	b.n	8010cf8 <SDMMC_CmdBlockLength+0x40>
 8010de8:	240000b0 	.word	0x240000b0
 8010dec:	10624dd3 	.word	0x10624dd3
 8010df0:	fffee0c0 	.word	0xfffee0c0
 8010df4:	00200045 	.word	0x00200045
 8010df8:	002000c5 	.word	0x002000c5
 8010dfc:	fdffe008 	.word	0xfdffe008

08010e00 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e00:	4b4b      	ldr	r3, [pc, #300]	; (8010f30 <SDMMC_CmdReadSingleBlock+0x130>)
 8010e02:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8010e06:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e08:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010e0a:	f241 1411 	movw	r4, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e0e:	4d49      	ldr	r5, [pc, #292]	; (8010f34 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8010e10:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e12:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010e16:	4948      	ldr	r1, [pc, #288]	; (8010f38 <SDMMC_CmdReadSingleBlock+0x138>)
 8010e18:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e1a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010e1c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010e1e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010e22:	430c      	orrs	r4, r1
 8010e24:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8010e26:	b14b      	cbz	r3, 8010e3c <SDMMC_CmdReadSingleBlock+0x3c>
 8010e28:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010e2a:	4944      	ldr	r1, [pc, #272]	; (8010f3c <SDMMC_CmdReadSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8010e2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010e2e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010e30:	420b      	tst	r3, r1
 8010e32:	d001      	beq.n	8010e38 <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010e34:	049c      	lsls	r4, r3, #18
 8010e36:	d506      	bpl.n	8010e46 <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 8010e38:	1c55      	adds	r5, r2, #1
 8010e3a:	d1f7      	bne.n	8010e2c <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	bc30      	pop	{r4, r5}
 8010e44:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e48:	075b      	lsls	r3, r3, #29
 8010e4a:	d43d      	bmi.n	8010ec8 <SDMMC_CmdReadSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e4e:	f013 0301 	ands.w	r3, r3, #1
 8010e52:	d134      	bne.n	8010ebe <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e54:	4b3a      	ldr	r3, [pc, #232]	; (8010f40 <SDMMC_CmdReadSingleBlock+0x140>)
 8010e56:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010e58:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b11      	cmp	r3, #17
 8010e5e:	d131      	bne.n	8010ec4 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8010e60:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010e62:	4b38      	ldr	r3, [pc, #224]	; (8010f44 <SDMMC_CmdReadSingleBlock+0x144>)
 8010e64:	4013      	ands	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d0ea      	beq.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010e6a:	2a00      	cmp	r2, #0
 8010e6c:	db2f      	blt.n	8010ece <SDMMC_CmdReadSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010e6e:	0055      	lsls	r5, r2, #1
 8010e70:	d430      	bmi.n	8010ed4 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010e72:	0094      	lsls	r4, r2, #2
 8010e74:	d430      	bmi.n	8010ed8 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e76:	00d0      	lsls	r0, r2, #3
 8010e78:	d430      	bmi.n	8010edc <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e7a:	0111      	lsls	r1, r2, #4
 8010e7c:	d431      	bmi.n	8010ee2 <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e7e:	0155      	lsls	r5, r2, #5
 8010e80:	d432      	bmi.n	8010ee8 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e82:	01d4      	lsls	r4, r2, #7
 8010e84:	d433      	bmi.n	8010eee <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e86:	0210      	lsls	r0, r2, #8
 8010e88:	d434      	bmi.n	8010ef4 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e8a:	0251      	lsls	r1, r2, #9
 8010e8c:	d435      	bmi.n	8010efa <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e8e:	0295      	lsls	r5, r2, #10
 8010e90:	d436      	bmi.n	8010f00 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e92:	02d4      	lsls	r4, r2, #11
 8010e94:	d437      	bmi.n	8010f06 <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e96:	0350      	lsls	r0, r2, #13
 8010e98:	d438      	bmi.n	8010f0c <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e9a:	0391      	lsls	r1, r2, #14
 8010e9c:	d439      	bmi.n	8010f12 <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e9e:	03d5      	lsls	r5, r2, #15
 8010ea0:	d43a      	bmi.n	8010f18 <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010ea2:	0414      	lsls	r4, r2, #16
 8010ea4:	d43b      	bmi.n	8010f1e <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ea6:	0450      	lsls	r0, r2, #17
 8010ea8:	d43f      	bmi.n	8010f2a <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010eaa:	0491      	lsls	r1, r2, #18
 8010eac:	d43a      	bmi.n	8010f24 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eae:	f012 0f08 	tst.w	r2, #8
 8010eb2:	bf14      	ite	ne
 8010eb4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010eb8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010ebc:	e7c0      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ec2:	e7bd      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e7bb      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ec8:	2304      	movs	r3, #4
 8010eca:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ecc:	e7b8      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010ed2:	e7b5      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010ed4:	2340      	movs	r3, #64	; 0x40
 8010ed6:	e7b3      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010ed8:	2380      	movs	r3, #128	; 0x80
 8010eda:	e7b1      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ee0:	e7ae      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ee6:	e7ab      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eec:	e7a8      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ef2:	e7a5      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ef8:	e7a2      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010efe:	e79f      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f04:	e79c      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f0a:	e799      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010f10:	e796      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010f12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010f16:	e793      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010f18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010f1c:	e790      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010f1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010f22:	e78d      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010f28:	e78a      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010f2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010f2e:	e787      	b.n	8010e40 <SDMMC_CmdReadSingleBlock+0x40>
 8010f30:	240000b0 	.word	0x240000b0
 8010f34:	10624dd3 	.word	0x10624dd3
 8010f38:	fffee0c0 	.word	0xfffee0c0
 8010f3c:	00200045 	.word	0x00200045
 8010f40:	002000c5 	.word	0x002000c5
 8010f44:	fdffe008 	.word	0xfdffe008

08010f48 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f48:	4b4b      	ldr	r3, [pc, #300]	; (8011078 <SDMMC_CmdReadMultiBlock+0x130>)
 8010f4a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8010f4e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f50:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f52:	f241 1412 	movw	r4, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f56:	4d49      	ldr	r5, [pc, #292]	; (801107c <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8010f58:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f5a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f5e:	4948      	ldr	r1, [pc, #288]	; (8011080 <SDMMC_CmdReadMultiBlock+0x138>)
 8010f60:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f62:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f64:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010f66:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f6a:	430c      	orrs	r4, r1
 8010f6c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8010f6e:	b14b      	cbz	r3, 8010f84 <SDMMC_CmdReadMultiBlock+0x3c>
 8010f70:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010f72:	4944      	ldr	r1, [pc, #272]	; (8011084 <SDMMC_CmdReadMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8010f74:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010f76:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010f78:	420b      	tst	r3, r1
 8010f7a:	d001      	beq.n	8010f80 <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010f7c:	049c      	lsls	r4, r3, #18
 8010f7e:	d506      	bpl.n	8010f8e <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 8010f80:	1c55      	adds	r5, r2, #1
 8010f82:	d1f7      	bne.n	8010f74 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010f84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	bc30      	pop	{r4, r5}
 8010f8c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f90:	075b      	lsls	r3, r3, #29
 8010f92:	d43d      	bmi.n	8011010 <SDMMC_CmdReadMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f96:	f013 0301 	ands.w	r3, r3, #1
 8010f9a:	d134      	bne.n	8011006 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f9c:	4b3a      	ldr	r3, [pc, #232]	; (8011088 <SDMMC_CmdReadMultiBlock+0x140>)
 8010f9e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010fa0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b12      	cmp	r3, #18
 8010fa6:	d131      	bne.n	801100c <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8010fa8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010faa:	4b38      	ldr	r3, [pc, #224]	; (801108c <SDMMC_CmdReadMultiBlock+0x144>)
 8010fac:	4013      	ands	r3, r2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d0ea      	beq.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010fb2:	2a00      	cmp	r2, #0
 8010fb4:	db2f      	blt.n	8011016 <SDMMC_CmdReadMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010fb6:	0055      	lsls	r5, r2, #1
 8010fb8:	d430      	bmi.n	801101c <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010fba:	0094      	lsls	r4, r2, #2
 8010fbc:	d430      	bmi.n	8011020 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010fbe:	00d0      	lsls	r0, r2, #3
 8010fc0:	d430      	bmi.n	8011024 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010fc2:	0111      	lsls	r1, r2, #4
 8010fc4:	d431      	bmi.n	801102a <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010fc6:	0155      	lsls	r5, r2, #5
 8010fc8:	d432      	bmi.n	8011030 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010fca:	01d4      	lsls	r4, r2, #7
 8010fcc:	d433      	bmi.n	8011036 <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010fce:	0210      	lsls	r0, r2, #8
 8010fd0:	d434      	bmi.n	801103c <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010fd2:	0251      	lsls	r1, r2, #9
 8010fd4:	d435      	bmi.n	8011042 <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010fd6:	0295      	lsls	r5, r2, #10
 8010fd8:	d436      	bmi.n	8011048 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010fda:	02d4      	lsls	r4, r2, #11
 8010fdc:	d437      	bmi.n	801104e <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010fde:	0350      	lsls	r0, r2, #13
 8010fe0:	d438      	bmi.n	8011054 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010fe2:	0391      	lsls	r1, r2, #14
 8010fe4:	d439      	bmi.n	801105a <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010fe6:	03d5      	lsls	r5, r2, #15
 8010fe8:	d43a      	bmi.n	8011060 <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010fea:	0414      	lsls	r4, r2, #16
 8010fec:	d43b      	bmi.n	8011066 <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010fee:	0450      	lsls	r0, r2, #17
 8010ff0:	d43f      	bmi.n	8011072 <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ff2:	0491      	lsls	r1, r2, #18
 8010ff4:	d43a      	bmi.n	801106c <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ff6:	f012 0f08 	tst.w	r2, #8
 8010ffa:	bf14      	ite	ne
 8010ffc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011000:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011004:	e7c0      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011006:	2201      	movs	r2, #1
 8011008:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801100a:	e7bd      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801100c:	2301      	movs	r3, #1
 801100e:	e7bb      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011010:	2304      	movs	r3, #4
 8011012:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011014:	e7b8      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801101a:	e7b5      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801101c:	2340      	movs	r3, #64	; 0x40
 801101e:	e7b3      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011020:	2380      	movs	r3, #128	; 0x80
 8011022:	e7b1      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011028:	e7ae      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801102a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801102e:	e7ab      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011034:	e7a8      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011036:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801103a:	e7a5      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011040:	e7a2      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011046:	e79f      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801104c:	e79c      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 801104e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011052:	e799      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011058:	e796      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801105a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801105e:	e793      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011060:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011064:	e790      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011066:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801106a:	e78d      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801106c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011070:	e78a      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011072:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011076:	e787      	b.n	8010f88 <SDMMC_CmdReadMultiBlock+0x40>
 8011078:	240000b0 	.word	0x240000b0
 801107c:	10624dd3 	.word	0x10624dd3
 8011080:	fffee0c0 	.word	0xfffee0c0
 8011084:	00200045 	.word	0x00200045
 8011088:	002000c5 	.word	0x002000c5
 801108c:	fdffe008 	.word	0xfdffe008

08011090 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011090:	4b4b      	ldr	r3, [pc, #300]	; (80111c0 <SDMMC_CmdWriteSingleBlock+0x130>)
 8011092:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8011096:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011098:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801109a:	f241 1418 	movw	r4, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801109e:	4d49      	ldr	r5, [pc, #292]	; (80111c4 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80110a0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80110a2:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80110a6:	4948      	ldr	r1, [pc, #288]	; (80111c8 <SDMMC_CmdWriteSingleBlock+0x138>)
 80110a8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80110aa:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80110ac:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80110ae:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80110b2:	430c      	orrs	r4, r1
 80110b4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80110b6:	b14b      	cbz	r3, 80110cc <SDMMC_CmdWriteSingleBlock+0x3c>
 80110b8:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80110ba:	4944      	ldr	r1, [pc, #272]	; (80111cc <SDMMC_CmdWriteSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 80110bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80110be:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80110c0:	420b      	tst	r3, r1
 80110c2:	d001      	beq.n	80110c8 <SDMMC_CmdWriteSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80110c4:	049c      	lsls	r4, r3, #18
 80110c6:	d506      	bpl.n	80110d6 <SDMMC_CmdWriteSingleBlock+0x46>
    if (count-- == 0U)
 80110c8:	1c55      	adds	r5, r2, #1
 80110ca:	d1f7      	bne.n	80110bc <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80110cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	bc30      	pop	{r4, r5}
 80110d4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110d8:	075b      	lsls	r3, r3, #29
 80110da:	d43d      	bmi.n	8011158 <SDMMC_CmdWriteSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110de:	f013 0301 	ands.w	r3, r3, #1
 80110e2:	d134      	bne.n	801114e <SDMMC_CmdWriteSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110e4:	4b3a      	ldr	r3, [pc, #232]	; (80111d0 <SDMMC_CmdWriteSingleBlock+0x140>)
 80110e6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80110e8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b18      	cmp	r3, #24
 80110ee:	d131      	bne.n	8011154 <SDMMC_CmdWriteSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80110f0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80110f2:	4b38      	ldr	r3, [pc, #224]	; (80111d4 <SDMMC_CmdWriteSingleBlock+0x144>)
 80110f4:	4013      	ands	r3, r2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d0ea      	beq.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80110fa:	2a00      	cmp	r2, #0
 80110fc:	db2f      	blt.n	801115e <SDMMC_CmdWriteSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80110fe:	0055      	lsls	r5, r2, #1
 8011100:	d430      	bmi.n	8011164 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011102:	0094      	lsls	r4, r2, #2
 8011104:	d430      	bmi.n	8011168 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011106:	00d0      	lsls	r0, r2, #3
 8011108:	d430      	bmi.n	801116c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801110a:	0111      	lsls	r1, r2, #4
 801110c:	d431      	bmi.n	8011172 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801110e:	0155      	lsls	r5, r2, #5
 8011110:	d432      	bmi.n	8011178 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011112:	01d4      	lsls	r4, r2, #7
 8011114:	d433      	bmi.n	801117e <SDMMC_CmdWriteSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011116:	0210      	lsls	r0, r2, #8
 8011118:	d434      	bmi.n	8011184 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801111a:	0251      	lsls	r1, r2, #9
 801111c:	d435      	bmi.n	801118a <SDMMC_CmdWriteSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801111e:	0295      	lsls	r5, r2, #10
 8011120:	d436      	bmi.n	8011190 <SDMMC_CmdWriteSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011122:	02d4      	lsls	r4, r2, #11
 8011124:	d437      	bmi.n	8011196 <SDMMC_CmdWriteSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011126:	0350      	lsls	r0, r2, #13
 8011128:	d438      	bmi.n	801119c <SDMMC_CmdWriteSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801112a:	0391      	lsls	r1, r2, #14
 801112c:	d439      	bmi.n	80111a2 <SDMMC_CmdWriteSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801112e:	03d5      	lsls	r5, r2, #15
 8011130:	d43a      	bmi.n	80111a8 <SDMMC_CmdWriteSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011132:	0414      	lsls	r4, r2, #16
 8011134:	d43b      	bmi.n	80111ae <SDMMC_CmdWriteSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011136:	0450      	lsls	r0, r2, #17
 8011138:	d43f      	bmi.n	80111ba <SDMMC_CmdWriteSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801113a:	0491      	lsls	r1, r2, #18
 801113c:	d43a      	bmi.n	80111b4 <SDMMC_CmdWriteSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801113e:	f012 0f08 	tst.w	r2, #8
 8011142:	bf14      	ite	ne
 8011144:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011148:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801114c:	e7c0      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801114e:	2201      	movs	r2, #1
 8011150:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011152:	e7bd      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011154:	2301      	movs	r3, #1
 8011156:	e7bb      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011158:	2304      	movs	r3, #4
 801115a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801115c:	e7b8      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801115e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011162:	e7b5      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011164:	2340      	movs	r3, #64	; 0x40
 8011166:	e7b3      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011168:	2380      	movs	r3, #128	; 0x80
 801116a:	e7b1      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011170:	e7ae      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011176:	e7ab      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801117c:	e7a8      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801117e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011182:	e7a5      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011188:	e7a2      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801118e:	e79f      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011190:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011194:	e79c      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8011196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801119a:	e799      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801119c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80111a0:	e796      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80111a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80111a6:	e793      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80111a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80111ac:	e790      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80111ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80111b2:	e78d      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80111b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80111b8:	e78a      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80111ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80111be:	e787      	b.n	80110d0 <SDMMC_CmdWriteSingleBlock+0x40>
 80111c0:	240000b0 	.word	0x240000b0
 80111c4:	10624dd3 	.word	0x10624dd3
 80111c8:	fffee0c0 	.word	0xfffee0c0
 80111cc:	00200045 	.word	0x00200045
 80111d0:	002000c5 	.word	0x002000c5
 80111d4:	fdffe008 	.word	0xfdffe008

080111d8 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111d8:	4b4b      	ldr	r3, [pc, #300]	; (8011308 <SDMMC_CmdWriteMultiBlock+0x130>)
 80111da:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80111de:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111e0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111e2:	f241 1419 	movw	r4, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111e6:	4d49      	ldr	r5, [pc, #292]	; (801130c <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80111e8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111ea:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111ee:	4948      	ldr	r1, [pc, #288]	; (8011310 <SDMMC_CmdWriteMultiBlock+0x138>)
 80111f0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111f2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111f4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111f6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111fa:	430c      	orrs	r4, r1
 80111fc:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80111fe:	b14b      	cbz	r3, 8011214 <SDMMC_CmdWriteMultiBlock+0x3c>
 8011200:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011202:	4944      	ldr	r1, [pc, #272]	; (8011314 <SDMMC_CmdWriteMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8011204:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011206:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011208:	420b      	tst	r3, r1
 801120a:	d001      	beq.n	8011210 <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801120c:	049c      	lsls	r4, r3, #18
 801120e:	d506      	bpl.n	801121e <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 8011210:	1c55      	adds	r5, r2, #1
 8011212:	d1f7      	bne.n	8011204 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011218:	4618      	mov	r0, r3
 801121a:	bc30      	pop	{r4, r5}
 801121c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801121e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011220:	075b      	lsls	r3, r3, #29
 8011222:	d43d      	bmi.n	80112a0 <SDMMC_CmdWriteMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011224:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011226:	f013 0301 	ands.w	r3, r3, #1
 801122a:	d134      	bne.n	8011296 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801122c:	4b3a      	ldr	r3, [pc, #232]	; (8011318 <SDMMC_CmdWriteMultiBlock+0x140>)
 801122e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011230:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011232:	b2db      	uxtb	r3, r3
 8011234:	2b19      	cmp	r3, #25
 8011236:	d131      	bne.n	801129c <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8011238:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801123a:	4b38      	ldr	r3, [pc, #224]	; (801131c <SDMMC_CmdWriteMultiBlock+0x144>)
 801123c:	4013      	ands	r3, r2
 801123e:	2b00      	cmp	r3, #0
 8011240:	d0ea      	beq.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011242:	2a00      	cmp	r2, #0
 8011244:	db2f      	blt.n	80112a6 <SDMMC_CmdWriteMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011246:	0055      	lsls	r5, r2, #1
 8011248:	d430      	bmi.n	80112ac <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801124a:	0094      	lsls	r4, r2, #2
 801124c:	d430      	bmi.n	80112b0 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801124e:	00d0      	lsls	r0, r2, #3
 8011250:	d430      	bmi.n	80112b4 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011252:	0111      	lsls	r1, r2, #4
 8011254:	d431      	bmi.n	80112ba <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011256:	0155      	lsls	r5, r2, #5
 8011258:	d432      	bmi.n	80112c0 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801125a:	01d4      	lsls	r4, r2, #7
 801125c:	d433      	bmi.n	80112c6 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801125e:	0210      	lsls	r0, r2, #8
 8011260:	d434      	bmi.n	80112cc <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011262:	0251      	lsls	r1, r2, #9
 8011264:	d435      	bmi.n	80112d2 <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011266:	0295      	lsls	r5, r2, #10
 8011268:	d436      	bmi.n	80112d8 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801126a:	02d4      	lsls	r4, r2, #11
 801126c:	d437      	bmi.n	80112de <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801126e:	0350      	lsls	r0, r2, #13
 8011270:	d438      	bmi.n	80112e4 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011272:	0391      	lsls	r1, r2, #14
 8011274:	d439      	bmi.n	80112ea <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011276:	03d5      	lsls	r5, r2, #15
 8011278:	d43a      	bmi.n	80112f0 <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801127a:	0414      	lsls	r4, r2, #16
 801127c:	d43b      	bmi.n	80112f6 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801127e:	0450      	lsls	r0, r2, #17
 8011280:	d43f      	bmi.n	8011302 <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011282:	0491      	lsls	r1, r2, #18
 8011284:	d43a      	bmi.n	80112fc <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011286:	f012 0f08 	tst.w	r2, #8
 801128a:	bf14      	ite	ne
 801128c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011290:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011294:	e7c0      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011296:	2201      	movs	r2, #1
 8011298:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801129a:	e7bd      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801129c:	2301      	movs	r3, #1
 801129e:	e7bb      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112a0:	2304      	movs	r3, #4
 80112a2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112a4:	e7b8      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80112a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80112aa:	e7b5      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80112ac:	2340      	movs	r3, #64	; 0x40
 80112ae:	e7b3      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80112b0:	2380      	movs	r3, #128	; 0x80
 80112b2:	e7b1      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80112b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112b8:	e7ae      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80112ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112be:	e7ab      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80112c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112c4:	e7a8      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80112c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112ca:	e7a5      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80112cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112d0:	e7a2      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80112d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80112d6:	e79f      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80112d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80112dc:	e79c      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80112de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112e2:	e799      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80112e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80112e8:	e796      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80112ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80112ee:	e793      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80112f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80112f4:	e790      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80112f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80112fa:	e78d      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80112fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011300:	e78a      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011302:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011306:	e787      	b.n	8011218 <SDMMC_CmdWriteMultiBlock+0x40>
 8011308:	240000b0 	.word	0x240000b0
 801130c:	10624dd3 	.word	0x10624dd3
 8011310:	fffee0c0 	.word	0xfffee0c0
 8011314:	00200045 	.word	0x00200045
 8011318:	002000c5 	.word	0x002000c5
 801131c:	fdffe008 	.word	0xfdffe008

08011320 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011320:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011322:	4b7d      	ldr	r3, [pc, #500]	; (8011518 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011328:	497c      	ldr	r1, [pc, #496]	; (801151c <SDMMC_CmdStopTransfer+0x1fc>)
 801132a:	681b      	ldr	r3, [r3, #0]
{
 801132c:	b470      	push	{r4, r5, r6}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801132e:	60c2      	str	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8011330:	2600      	movs	r6, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011332:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011334:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011338:	4c79      	ldr	r4, [pc, #484]	; (8011520 <SDMMC_CmdStopTransfer+0x200>)
 801133a:	f241 110c 	movw	r1, #4364	; 0x110c
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801133e:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011342:	0a5b      	lsrs	r3, r3, #9
 8011344:	4a77      	ldr	r2, [pc, #476]	; (8011524 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011346:	60c5      	str	r5, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8011348:	6086      	str	r6, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801134a:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801134c:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011350:	402c      	ands	r4, r5
 8011352:	4321      	orrs	r1, r4
 8011354:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8011356:	b14b      	cbz	r3, 801136c <SDMMC_CmdStopTransfer+0x4c>
 8011358:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801135a:	4973      	ldr	r1, [pc, #460]	; (8011528 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 801135c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 801135e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011360:	420b      	tst	r3, r1
 8011362:	d001      	beq.n	8011368 <SDMMC_CmdStopTransfer+0x48>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011364:	049c      	lsls	r4, r3, #18
 8011366:	d50a      	bpl.n	801137e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8011368:	1c55      	adds	r5, r2, #1
 801136a:	d1f7      	bne.n	801135c <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801136c:	68c2      	ldr	r2, [r0, #12]
 801136e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011376:	60c2      	str	r2, [r0, #12]
}
 8011378:	4618      	mov	r0, r3
 801137a:	bc70      	pop	{r4, r5, r6}
 801137c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801137e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011380:	075a      	lsls	r2, r3, #29
 8011382:	d454      	bmi.n	801142e <SDMMC_CmdStopTransfer+0x10e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011384:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011386:	f013 0301 	ands.w	r3, r3, #1
 801138a:	d13c      	bne.n	8011406 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801138c:	4a67      	ldr	r2, [pc, #412]	; (801152c <SDMMC_CmdStopTransfer+0x20c>)
 801138e:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011390:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011392:	b2d2      	uxtb	r2, r2
 8011394:	2a0c      	cmp	r2, #12
 8011396:	d144      	bne.n	8011422 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8011398:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801139a:	4965      	ldr	r1, [pc, #404]	; (8011530 <SDMMC_CmdStopTransfer+0x210>)
 801139c:	4011      	ands	r1, r2
 801139e:	2900      	cmp	r1, #0
 80113a0:	d038      	beq.n	8011414 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	db36      	blt.n	8011414 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80113a6:	0053      	lsls	r3, r2, #1
 80113a8:	d448      	bmi.n	801143c <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80113aa:	0096      	lsls	r6, r2, #2
 80113ac:	d44c      	bmi.n	8011448 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80113ae:	00d5      	lsls	r5, r2, #3
 80113b0:	d450      	bmi.n	8011454 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80113b2:	0114      	lsls	r4, r2, #4
 80113b4:	d455      	bmi.n	8011462 <SDMMC_CmdStopTransfer+0x142>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80113b6:	0151      	lsls	r1, r2, #5
 80113b8:	d45a      	bmi.n	8011470 <SDMMC_CmdStopTransfer+0x150>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80113ba:	01d3      	lsls	r3, r2, #7
 80113bc:	d45f      	bmi.n	801147e <SDMMC_CmdStopTransfer+0x15e>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80113be:	0216      	lsls	r6, r2, #8
 80113c0:	d464      	bmi.n	801148c <SDMMC_CmdStopTransfer+0x16c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80113c2:	0255      	lsls	r5, r2, #9
 80113c4:	d469      	bmi.n	801149a <SDMMC_CmdStopTransfer+0x17a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80113c6:	0294      	lsls	r4, r2, #10
 80113c8:	d46e      	bmi.n	80114a8 <SDMMC_CmdStopTransfer+0x188>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80113ca:	02d1      	lsls	r1, r2, #11
 80113cc:	d473      	bmi.n	80114b6 <SDMMC_CmdStopTransfer+0x196>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80113ce:	0353      	lsls	r3, r2, #13
 80113d0:	d478      	bmi.n	80114c4 <SDMMC_CmdStopTransfer+0x1a4>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80113d2:	0396      	lsls	r6, r2, #14
 80113d4:	d47d      	bmi.n	80114d2 <SDMMC_CmdStopTransfer+0x1b2>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80113d6:	03d5      	lsls	r5, r2, #15
 80113d8:	f100 8082 	bmi.w	80114e0 <SDMMC_CmdStopTransfer+0x1c0>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80113dc:	0414      	lsls	r4, r2, #16
 80113de:	f100 8086 	bmi.w	80114ee <SDMMC_CmdStopTransfer+0x1ce>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80113e2:	0451      	lsls	r1, r2, #17
 80113e4:	f100 8091 	bmi.w	801150a <SDMMC_CmdStopTransfer+0x1ea>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80113e8:	0493      	lsls	r3, r2, #18
 80113ea:	f100 8087 	bmi.w	80114fc <SDMMC_CmdStopTransfer+0x1dc>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80113ee:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80113f2:	68c2      	ldr	r2, [r0, #12]
 80113f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80113f8:	bf14      	ite	ne
 80113fa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80113fe:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011402:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011404:	e7b8      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011406:	2201      	movs	r2, #1
 8011408:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801140a:	68c2      	ldr	r2, [r0, #12]
 801140c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011410:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011412:	e7b1      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011414:	68c2      	ldr	r2, [r0, #12]
 8011416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 801141a:	bc70      	pop	{r4, r5, r6}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801141c:	60c2      	str	r2, [r0, #12]
}
 801141e:	4618      	mov	r0, r3
 8011420:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011422:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011424:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801142a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801142c:	e7a4      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801142e:	2304      	movs	r3, #4
 8011430:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011432:	68c2      	ldr	r2, [r0, #12]
 8011434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011438:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801143a:	e79d      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801143c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801143e:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011444:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011446:	e797      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011448:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801144a:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801144c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011450:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011452:	e791      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011454:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011456:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801145a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801145e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011460:	e78a      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011462:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011464:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801146c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801146e:	e783      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011470:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011472:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801147a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801147c:	e77c      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801147e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011480:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011488:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801148a:	e775      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801148c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 801148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011496:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011498:	e76e      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801149a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 801149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114a4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114a6:	e767      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114a8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80114aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114b2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114b4:	e760      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114b6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 80114b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114c0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114c2:	e759      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114c4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80114c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114ce:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114d0:	e752      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114d2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80114d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114dc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114de:	e74b      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114e0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80114e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114ea:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114ec:	e744      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114ee:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80114f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114f8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80114fa:	e73d      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80114fc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 80114fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011506:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011508:	e736      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801150a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801150c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011514:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011516:	e72f      	b.n	8011378 <SDMMC_CmdStopTransfer+0x58>
 8011518:	240000b0 	.word	0x240000b0
 801151c:	10624dd3 	.word	0x10624dd3
 8011520:	fffee0c0 	.word	0xfffee0c0
 8011524:	05f5e100 	.word	0x05f5e100
 8011528:	00200045 	.word	0x00200045
 801152c:	002000c5 	.word	0x002000c5
 8011530:	fdffe008 	.word	0xfdffe008

08011534 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011534:	4b4b      	ldr	r3, [pc, #300]	; (8011664 <SDMMC_CmdSelDesel+0x130>)
 8011536:	f241 3188 	movw	r1, #5000	; 0x1388
{
 801153a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801153c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801153e:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011542:	4d49      	ldr	r5, [pc, #292]	; (8011668 <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 8011544:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011546:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801154a:	4a48      	ldr	r2, [pc, #288]	; (801166c <SDMMC_CmdSelDesel+0x138>)
 801154c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801154e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011550:	402a      	ands	r2, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011552:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011556:	4314      	orrs	r4, r2
 8011558:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801155a:	b14b      	cbz	r3, 8011570 <SDMMC_CmdSelDesel+0x3c>
 801155c:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801155e:	4944      	ldr	r1, [pc, #272]	; (8011670 <SDMMC_CmdSelDesel+0x13c>)
    sta_reg = SDMMCx->STA;
 8011560:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011562:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011564:	420b      	tst	r3, r1
 8011566:	d001      	beq.n	801156c <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011568:	049c      	lsls	r4, r3, #18
 801156a:	d506      	bpl.n	801157a <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 801156c:	1c55      	adds	r5, r2, #1
 801156e:	d1f7      	bne.n	8011560 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011574:	4618      	mov	r0, r3
 8011576:	bc30      	pop	{r4, r5}
 8011578:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801157a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801157c:	075b      	lsls	r3, r3, #29
 801157e:	d43d      	bmi.n	80115fc <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011580:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011582:	f013 0301 	ands.w	r3, r3, #1
 8011586:	d134      	bne.n	80115f2 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011588:	4b3a      	ldr	r3, [pc, #232]	; (8011674 <SDMMC_CmdSelDesel+0x140>)
 801158a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801158c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b07      	cmp	r3, #7
 8011592:	d131      	bne.n	80115f8 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8011594:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011596:	4b38      	ldr	r3, [pc, #224]	; (8011678 <SDMMC_CmdSelDesel+0x144>)
 8011598:	4013      	ands	r3, r2
 801159a:	2b00      	cmp	r3, #0
 801159c:	d0ea      	beq.n	8011574 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801159e:	2a00      	cmp	r2, #0
 80115a0:	db2f      	blt.n	8011602 <SDMMC_CmdSelDesel+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80115a2:	0055      	lsls	r5, r2, #1
 80115a4:	d430      	bmi.n	8011608 <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80115a6:	0094      	lsls	r4, r2, #2
 80115a8:	d430      	bmi.n	801160c <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80115aa:	00d0      	lsls	r0, r2, #3
 80115ac:	d430      	bmi.n	8011610 <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80115ae:	0111      	lsls	r1, r2, #4
 80115b0:	d431      	bmi.n	8011616 <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80115b2:	0155      	lsls	r5, r2, #5
 80115b4:	d432      	bmi.n	801161c <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80115b6:	01d4      	lsls	r4, r2, #7
 80115b8:	d433      	bmi.n	8011622 <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80115ba:	0210      	lsls	r0, r2, #8
 80115bc:	d434      	bmi.n	8011628 <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80115be:	0251      	lsls	r1, r2, #9
 80115c0:	d435      	bmi.n	801162e <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80115c2:	0295      	lsls	r5, r2, #10
 80115c4:	d436      	bmi.n	8011634 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80115c6:	02d4      	lsls	r4, r2, #11
 80115c8:	d437      	bmi.n	801163a <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80115ca:	0350      	lsls	r0, r2, #13
 80115cc:	d438      	bmi.n	8011640 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80115ce:	0391      	lsls	r1, r2, #14
 80115d0:	d439      	bmi.n	8011646 <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80115d2:	03d5      	lsls	r5, r2, #15
 80115d4:	d43a      	bmi.n	801164c <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80115d6:	0414      	lsls	r4, r2, #16
 80115d8:	d43b      	bmi.n	8011652 <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80115da:	0450      	lsls	r0, r2, #17
 80115dc:	d43f      	bmi.n	801165e <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80115de:	0491      	lsls	r1, r2, #18
 80115e0:	d43a      	bmi.n	8011658 <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80115e2:	f012 0f08 	tst.w	r2, #8
 80115e6:	bf14      	ite	ne
 80115e8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80115ec:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80115f0:	e7c0      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115f2:	2201      	movs	r2, #1
 80115f4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115f6:	e7bd      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115f8:	2301      	movs	r3, #1
 80115fa:	e7bb      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80115fc:	2304      	movs	r3, #4
 80115fe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011600:	e7b8      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011606:	e7b5      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011608:	2340      	movs	r3, #64	; 0x40
 801160a:	e7b3      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801160c:	2380      	movs	r3, #128	; 0x80
 801160e:	e7b1      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011614:	e7ae      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011616:	f44f 7300 	mov.w	r3, #512	; 0x200
 801161a:	e7ab      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801161c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011620:	e7a8      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011622:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011626:	e7a5      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801162c:	e7a2      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011632:	e79f      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011638:	e79c      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 801163a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801163e:	e799      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011644:	e796      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011646:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801164a:	e793      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801164c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011650:	e790      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011656:	e78d      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8011658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801165c:	e78a      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801165e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011662:	e787      	b.n	8011574 <SDMMC_CmdSelDesel+0x40>
 8011664:	240000b0 	.word	0x240000b0
 8011668:	10624dd3 	.word	0x10624dd3
 801166c:	fffee0c0 	.word	0xfffee0c0
 8011670:	00200045 	.word	0x00200045
 8011674:	002000c5 	.word	0x002000c5
 8011678:	fdffe008 	.word	0xfdffe008

0801167c <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801167c:	4b11      	ldr	r3, [pc, #68]	; (80116c4 <SDMMC_CmdGoIdleState+0x48>)
{
 801167e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011680:	4a11      	ldr	r2, [pc, #68]	; (80116c8 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8011688:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801168a:	4c10      	ldr	r4, [pc, #64]	; (80116cc <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 801168c:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801168e:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 8011692:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011694:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011696:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011698:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801169a:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801169e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80116a2:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116a4:	e002      	b.n	80116ac <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80116a6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80116a8:	0612      	lsls	r2, r2, #24
 80116aa:	d405      	bmi.n	80116b8 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 80116ac:	3b01      	subs	r3, #1
 80116ae:	d2fa      	bcs.n	80116a6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80116b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80116b4:	bc30      	pop	{r4, r5}
 80116b6:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80116b8:	4b05      	ldr	r3, [pc, #20]	; (80116d0 <SDMMC_CmdGoIdleState+0x54>)
  return SDMMC_ERROR_NONE;
 80116ba:	2000      	movs	r0, #0
}
 80116bc:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80116be:	638b      	str	r3, [r1, #56]	; 0x38
}
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	240000b0 	.word	0x240000b0
 80116c8:	fffee0c0 	.word	0xfffee0c0
 80116cc:	10624dd3 	.word	0x10624dd3
 80116d0:	002000c5 	.word	0x002000c5

080116d4 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116d4:	4a1b      	ldr	r2, [pc, #108]	; (8011744 <SDMMC_CmdOperCond+0x70>)
{
 80116d6:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116d8:	491b      	ldr	r1, [pc, #108]	; (8011748 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80116da:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116de:	6812      	ldr	r2, [r2, #0]
{
 80116e0:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80116e2:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116e6:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80116ea:	4c18      	ldr	r4, [pc, #96]	; (801174c <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116ec:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80116f0:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80116f4:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116f6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80116fa:	402c      	ands	r4, r5
 80116fc:	4320      	orrs	r0, r4
 80116fe:	60d8      	str	r0, [r3, #12]

  do
  {
    if (count-- == 0U)
 8011700:	b14a      	cbz	r2, 8011716 <SDMMC_CmdOperCond+0x42>
 8011702:	1e51      	subs	r1, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8011704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8011706:	3901      	subs	r1, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011708:	f012 0f45 	tst.w	r2, #69	; 0x45
 801170c:	d001      	beq.n	8011712 <SDMMC_CmdOperCond+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801170e:	0490      	lsls	r0, r2, #18
 8011710:	d505      	bpl.n	801171e <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 8011712:	1c4c      	adds	r4, r1, #1
 8011714:	d1f6      	bne.n	8011704 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8011716:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801171a:	bc30      	pop	{r4, r5}
 801171c:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801171e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011720:	0751      	lsls	r1, r2, #29
 8011722:	d40c      	bmi.n	801173e <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011724:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011726:	f010 0001 	ands.w	r0, r0, #1
 801172a:	d105      	bne.n	8011738 <SDMMC_CmdOperCond+0x64>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801172c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801172e:	0652      	lsls	r2, r2, #25
 8011730:	d5f3      	bpl.n	801171a <SDMMC_CmdOperCond+0x46>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011732:	2240      	movs	r2, #64	; 0x40
 8011734:	639a      	str	r2, [r3, #56]	; 0x38
 8011736:	e7f0      	b.n	801171a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011738:	2201      	movs	r2, #1
 801173a:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801173c:	e7ed      	b.n	801171a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801173e:	2004      	movs	r0, #4
 8011740:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011742:	e7ea      	b.n	801171a <SDMMC_CmdOperCond+0x46>
 8011744:	240000b0 	.word	0x240000b0
 8011748:	10624dd3 	.word	0x10624dd3
 801174c:	fffee0c0 	.word	0xfffee0c0

08011750 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011750:	4b4b      	ldr	r3, [pc, #300]	; (8011880 <SDMMC_CmdAppCommand+0x130>)
 8011752:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8011756:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011758:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801175a:	f241 1437 	movw	r4, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801175e:	4d49      	ldr	r5, [pc, #292]	; (8011884 <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 8011760:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011762:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011766:	4948      	ldr	r1, [pc, #288]	; (8011888 <SDMMC_CmdAppCommand+0x138>)
 8011768:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801176a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801176c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801176e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011772:	430c      	orrs	r4, r1
 8011774:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8011776:	b14b      	cbz	r3, 801178c <SDMMC_CmdAppCommand+0x3c>
 8011778:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801177a:	4944      	ldr	r1, [pc, #272]	; (801188c <SDMMC_CmdAppCommand+0x13c>)
    sta_reg = SDMMCx->STA;
 801177c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 801177e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011780:	420b      	tst	r3, r1
 8011782:	d001      	beq.n	8011788 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011784:	049c      	lsls	r4, r3, #18
 8011786:	d506      	bpl.n	8011796 <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 8011788:	1c55      	adds	r5, r2, #1
 801178a:	d1f7      	bne.n	801177c <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801178c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011790:	4618      	mov	r0, r3
 8011792:	bc30      	pop	{r4, r5}
 8011794:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011796:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011798:	075b      	lsls	r3, r3, #29
 801179a:	d43d      	bmi.n	8011818 <SDMMC_CmdAppCommand+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801179c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801179e:	f013 0301 	ands.w	r3, r3, #1
 80117a2:	d134      	bne.n	801180e <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117a4:	4b3a      	ldr	r3, [pc, #232]	; (8011890 <SDMMC_CmdAppCommand+0x140>)
 80117a6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80117a8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	2b37      	cmp	r3, #55	; 0x37
 80117ae:	d131      	bne.n	8011814 <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 80117b0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117b2:	4b38      	ldr	r3, [pc, #224]	; (8011894 <SDMMC_CmdAppCommand+0x144>)
 80117b4:	4013      	ands	r3, r2
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d0ea      	beq.n	8011790 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80117ba:	2a00      	cmp	r2, #0
 80117bc:	db2f      	blt.n	801181e <SDMMC_CmdAppCommand+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80117be:	0055      	lsls	r5, r2, #1
 80117c0:	d430      	bmi.n	8011824 <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80117c2:	0094      	lsls	r4, r2, #2
 80117c4:	d430      	bmi.n	8011828 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80117c6:	00d0      	lsls	r0, r2, #3
 80117c8:	d430      	bmi.n	801182c <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80117ca:	0111      	lsls	r1, r2, #4
 80117cc:	d431      	bmi.n	8011832 <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80117ce:	0155      	lsls	r5, r2, #5
 80117d0:	d432      	bmi.n	8011838 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80117d2:	01d4      	lsls	r4, r2, #7
 80117d4:	d433      	bmi.n	801183e <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80117d6:	0210      	lsls	r0, r2, #8
 80117d8:	d434      	bmi.n	8011844 <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80117da:	0251      	lsls	r1, r2, #9
 80117dc:	d435      	bmi.n	801184a <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80117de:	0295      	lsls	r5, r2, #10
 80117e0:	d436      	bmi.n	8011850 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80117e2:	02d4      	lsls	r4, r2, #11
 80117e4:	d437      	bmi.n	8011856 <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80117e6:	0350      	lsls	r0, r2, #13
 80117e8:	d438      	bmi.n	801185c <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80117ea:	0391      	lsls	r1, r2, #14
 80117ec:	d439      	bmi.n	8011862 <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80117ee:	03d5      	lsls	r5, r2, #15
 80117f0:	d43a      	bmi.n	8011868 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80117f2:	0414      	lsls	r4, r2, #16
 80117f4:	d43b      	bmi.n	801186e <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80117f6:	0450      	lsls	r0, r2, #17
 80117f8:	d43f      	bmi.n	801187a <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80117fa:	0491      	lsls	r1, r2, #18
 80117fc:	d43a      	bmi.n	8011874 <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80117fe:	f012 0f08 	tst.w	r2, #8
 8011802:	bf14      	ite	ne
 8011804:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011808:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801180c:	e7c0      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801180e:	2201      	movs	r2, #1
 8011810:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011812:	e7bd      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011814:	2301      	movs	r3, #1
 8011816:	e7bb      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011818:	2304      	movs	r3, #4
 801181a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801181c:	e7b8      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801181e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011822:	e7b5      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011824:	2340      	movs	r3, #64	; 0x40
 8011826:	e7b3      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011828:	2380      	movs	r3, #128	; 0x80
 801182a:	e7b1      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801182c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011830:	e7ae      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011836:	e7ab      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801183c:	e7a8      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801183e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011842:	e7a5      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011848:	e7a2      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801184a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801184e:	e79f      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011854:	e79c      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8011856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801185a:	e799      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801185c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011860:	e796      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011862:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011866:	e793      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011868:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801186c:	e790      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801186e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011872:	e78d      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8011874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011878:	e78a      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801187a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801187e:	e787      	b.n	8011790 <SDMMC_CmdAppCommand+0x40>
 8011880:	240000b0 	.word	0x240000b0
 8011884:	10624dd3 	.word	0x10624dd3
 8011888:	fffee0c0 	.word	0xfffee0c0
 801188c:	00200045 	.word	0x00200045
 8011890:	002000c5 	.word	0x002000c5
 8011894:	fdffe008 	.word	0xfdffe008

08011898 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011898:	4b17      	ldr	r3, [pc, #92]	; (80118f8 <SDMMC_CmdAppOperCommand+0x60>)
 801189a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 801189e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118a0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80118a2:	f241 1429 	movw	r4, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118a6:	4d15      	ldr	r5, [pc, #84]	; (80118fc <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 80118a8:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118aa:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80118ae:	4914      	ldr	r1, [pc, #80]	; (8011900 <SDMMC_CmdAppOperCommand+0x68>)
 80118b0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118b2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80118b4:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118b6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80118ba:	430c      	orrs	r4, r1
 80118bc:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80118be:	b14b      	cbz	r3, 80118d4 <SDMMC_CmdAppOperCommand+0x3c>
 80118c0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80118c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80118c4:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118c6:	f013 0f45 	tst.w	r3, #69	; 0x45
 80118ca:	d001      	beq.n	80118d0 <SDMMC_CmdAppOperCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118cc:	049b      	lsls	r3, r3, #18
 80118ce:	d506      	bpl.n	80118de <SDMMC_CmdAppOperCommand+0x46>
    if (count-- == 0U)
 80118d0:	1c51      	adds	r1, r2, #1
 80118d2:	d1f6      	bne.n	80118c2 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80118d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80118d8:	4618      	mov	r0, r3
 80118da:	bc30      	pop	{r4, r5}
 80118dc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80118e0:	f013 0304 	ands.w	r3, r3, #4
 80118e4:	d104      	bne.n	80118f0 <SDMMC_CmdAppOperCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118e6:	4a07      	ldr	r2, [pc, #28]	; (8011904 <SDMMC_CmdAppOperCommand+0x6c>)
}
 80118e8:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118ea:	6382      	str	r2, [r0, #56]	; 0x38
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118f0:	2304      	movs	r3, #4
 80118f2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118f4:	e7f0      	b.n	80118d8 <SDMMC_CmdAppOperCommand+0x40>
 80118f6:	bf00      	nop
 80118f8:	240000b0 	.word	0x240000b0
 80118fc:	10624dd3 	.word	0x10624dd3
 8011900:	fffee0c0 	.word	0xfffee0c0
 8011904:	002000c5 	.word	0x002000c5

08011908 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011908:	4b4b      	ldr	r3, [pc, #300]	; (8011a38 <SDMMC_CmdBusWidth+0x130>)
 801190a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 801190e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011910:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011912:	f241 1406 	movw	r4, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011916:	4d49      	ldr	r5, [pc, #292]	; (8011a3c <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 8011918:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801191a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801191e:	4948      	ldr	r1, [pc, #288]	; (8011a40 <SDMMC_CmdBusWidth+0x138>)
 8011920:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011922:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011924:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011926:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801192a:	430c      	orrs	r4, r1
 801192c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801192e:	b14b      	cbz	r3, 8011944 <SDMMC_CmdBusWidth+0x3c>
 8011930:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011932:	4944      	ldr	r1, [pc, #272]	; (8011a44 <SDMMC_CmdBusWidth+0x13c>)
    sta_reg = SDMMCx->STA;
 8011934:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011936:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011938:	420b      	tst	r3, r1
 801193a:	d001      	beq.n	8011940 <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801193c:	049c      	lsls	r4, r3, #18
 801193e:	d506      	bpl.n	801194e <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8011940:	1c55      	adds	r5, r2, #1
 8011942:	d1f7      	bne.n	8011934 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011948:	4618      	mov	r0, r3
 801194a:	bc30      	pop	{r4, r5}
 801194c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801194e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011950:	075b      	lsls	r3, r3, #29
 8011952:	d43d      	bmi.n	80119d0 <SDMMC_CmdBusWidth+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011954:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011956:	f013 0301 	ands.w	r3, r3, #1
 801195a:	d134      	bne.n	80119c6 <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801195c:	4b3a      	ldr	r3, [pc, #232]	; (8011a48 <SDMMC_CmdBusWidth+0x140>)
 801195e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011960:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2b06      	cmp	r3, #6
 8011966:	d131      	bne.n	80119cc <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8011968:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801196a:	4b38      	ldr	r3, [pc, #224]	; (8011a4c <SDMMC_CmdBusWidth+0x144>)
 801196c:	4013      	ands	r3, r2
 801196e:	2b00      	cmp	r3, #0
 8011970:	d0ea      	beq.n	8011948 <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011972:	2a00      	cmp	r2, #0
 8011974:	db2f      	blt.n	80119d6 <SDMMC_CmdBusWidth+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011976:	0055      	lsls	r5, r2, #1
 8011978:	d430      	bmi.n	80119dc <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801197a:	0094      	lsls	r4, r2, #2
 801197c:	d430      	bmi.n	80119e0 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801197e:	00d0      	lsls	r0, r2, #3
 8011980:	d430      	bmi.n	80119e4 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011982:	0111      	lsls	r1, r2, #4
 8011984:	d431      	bmi.n	80119ea <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011986:	0155      	lsls	r5, r2, #5
 8011988:	d432      	bmi.n	80119f0 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801198a:	01d4      	lsls	r4, r2, #7
 801198c:	d433      	bmi.n	80119f6 <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801198e:	0210      	lsls	r0, r2, #8
 8011990:	d434      	bmi.n	80119fc <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011992:	0251      	lsls	r1, r2, #9
 8011994:	d435      	bmi.n	8011a02 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011996:	0295      	lsls	r5, r2, #10
 8011998:	d436      	bmi.n	8011a08 <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801199a:	02d4      	lsls	r4, r2, #11
 801199c:	d437      	bmi.n	8011a0e <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801199e:	0350      	lsls	r0, r2, #13
 80119a0:	d438      	bmi.n	8011a14 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80119a2:	0391      	lsls	r1, r2, #14
 80119a4:	d439      	bmi.n	8011a1a <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80119a6:	03d5      	lsls	r5, r2, #15
 80119a8:	d43a      	bmi.n	8011a20 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80119aa:	0414      	lsls	r4, r2, #16
 80119ac:	d43b      	bmi.n	8011a26 <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80119ae:	0450      	lsls	r0, r2, #17
 80119b0:	d43f      	bmi.n	8011a32 <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80119b2:	0491      	lsls	r1, r2, #18
 80119b4:	d43a      	bmi.n	8011a2c <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80119b6:	f012 0f08 	tst.w	r2, #8
 80119ba:	bf14      	ite	ne
 80119bc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80119c0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80119c4:	e7c0      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80119c6:	2201      	movs	r2, #1
 80119c8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119ca:	e7bd      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119cc:	2301      	movs	r3, #1
 80119ce:	e7bb      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119d0:	2304      	movs	r3, #4
 80119d2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119d4:	e7b8      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80119d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80119da:	e7b5      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80119dc:	2340      	movs	r3, #64	; 0x40
 80119de:	e7b3      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80119e0:	2380      	movs	r3, #128	; 0x80
 80119e2:	e7b1      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80119e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119e8:	e7ae      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80119ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119ee:	e7ab      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80119f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119f4:	e7a8      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80119f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119fa:	e7a5      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80119fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a00:	e7a2      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a06:	e79f      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a0c:	e79c      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8011a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a12:	e799      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a18:	e796      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011a1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011a1e:	e793      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011a20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011a24:	e790      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011a26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011a2a:	e78d      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8011a2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011a30:	e78a      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011a32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011a36:	e787      	b.n	8011948 <SDMMC_CmdBusWidth+0x40>
 8011a38:	240000b0 	.word	0x240000b0
 8011a3c:	10624dd3 	.word	0x10624dd3
 8011a40:	fffee0c0 	.word	0xfffee0c0
 8011a44:	00200045 	.word	0x00200045
 8011a48:	002000c5 	.word	0x002000c5
 8011a4c:	fdffe008 	.word	0xfdffe008

08011a50 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011a50:	4b4c      	ldr	r3, [pc, #304]	; (8011b84 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011a52:	f241 1133 	movw	r1, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011a56:	4a4c      	ldr	r2, [pc, #304]	; (8011b88 <SDMMC_CmdSendSCR+0x138>)
 8011a58:	681b      	ldr	r3, [r3, #0]
{
 8011a5a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8011a5c:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011a5e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011a62:	4c4a      	ldr	r4, [pc, #296]	; (8011b8c <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011a64:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8011a68:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011a6a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011a6c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011a6e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011a72:	402c      	ands	r4, r5
 8011a74:	4321      	orrs	r1, r4
 8011a76:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8011a78:	b14b      	cbz	r3, 8011a8e <SDMMC_CmdSendSCR+0x3e>
 8011a7a:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011a7c:	4944      	ldr	r1, [pc, #272]	; (8011b90 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 8011a7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011a80:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a82:	420b      	tst	r3, r1
 8011a84:	d001      	beq.n	8011a8a <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011a86:	049c      	lsls	r4, r3, #18
 8011a88:	d506      	bpl.n	8011a98 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 8011a8a:	1c55      	adds	r5, r2, #1
 8011a8c:	d1f7      	bne.n	8011a7e <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8011a8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	bc30      	pop	{r4, r5}
 8011a96:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011a9a:	075b      	lsls	r3, r3, #29
 8011a9c:	d43d      	bmi.n	8011b1a <SDMMC_CmdSendSCR+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011aa0:	f013 0301 	ands.w	r3, r3, #1
 8011aa4:	d134      	bne.n	8011b10 <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011aa6:	4b3b      	ldr	r3, [pc, #236]	; (8011b94 <SDMMC_CmdSendSCR+0x144>)
 8011aa8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011aaa:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b33      	cmp	r3, #51	; 0x33
 8011ab0:	d131      	bne.n	8011b16 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 8011ab2:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011ab4:	4b38      	ldr	r3, [pc, #224]	; (8011b98 <SDMMC_CmdSendSCR+0x148>)
 8011ab6:	4013      	ands	r3, r2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d0ea      	beq.n	8011a92 <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011abc:	2a00      	cmp	r2, #0
 8011abe:	db2f      	blt.n	8011b20 <SDMMC_CmdSendSCR+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011ac0:	0055      	lsls	r5, r2, #1
 8011ac2:	d430      	bmi.n	8011b26 <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011ac4:	0094      	lsls	r4, r2, #2
 8011ac6:	d430      	bmi.n	8011b2a <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011ac8:	00d0      	lsls	r0, r2, #3
 8011aca:	d430      	bmi.n	8011b2e <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011acc:	0111      	lsls	r1, r2, #4
 8011ace:	d431      	bmi.n	8011b34 <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011ad0:	0155      	lsls	r5, r2, #5
 8011ad2:	d432      	bmi.n	8011b3a <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011ad4:	01d4      	lsls	r4, r2, #7
 8011ad6:	d433      	bmi.n	8011b40 <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011ad8:	0210      	lsls	r0, r2, #8
 8011ada:	d434      	bmi.n	8011b46 <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011adc:	0251      	lsls	r1, r2, #9
 8011ade:	d435      	bmi.n	8011b4c <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011ae0:	0295      	lsls	r5, r2, #10
 8011ae2:	d436      	bmi.n	8011b52 <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011ae4:	02d4      	lsls	r4, r2, #11
 8011ae6:	d437      	bmi.n	8011b58 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011ae8:	0350      	lsls	r0, r2, #13
 8011aea:	d438      	bmi.n	8011b5e <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011aec:	0391      	lsls	r1, r2, #14
 8011aee:	d439      	bmi.n	8011b64 <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011af0:	03d5      	lsls	r5, r2, #15
 8011af2:	d43a      	bmi.n	8011b6a <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011af4:	0414      	lsls	r4, r2, #16
 8011af6:	d43b      	bmi.n	8011b70 <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011af8:	0450      	lsls	r0, r2, #17
 8011afa:	d43f      	bmi.n	8011b7c <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011afc:	0491      	lsls	r1, r2, #18
 8011afe:	d43a      	bmi.n	8011b76 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b00:	f012 0f08 	tst.w	r2, #8
 8011b04:	bf14      	ite	ne
 8011b06:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011b0a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011b0e:	e7c0      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b10:	2201      	movs	r2, #1
 8011b12:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b14:	e7bd      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b16:	2301      	movs	r3, #1
 8011b18:	e7bb      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b1a:	2304      	movs	r3, #4
 8011b1c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b1e:	e7b8      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b24:	e7b5      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011b26:	2340      	movs	r3, #64	; 0x40
 8011b28:	e7b3      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011b2a:	2380      	movs	r3, #128	; 0x80
 8011b2c:	e7b1      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b32:	e7ae      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b38:	e7ab      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b3e:	e7a8      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011b44:	e7a5      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b4a:	e7a2      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b50:	e79f      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011b56:	e79c      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8011b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b5c:	e799      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011b62:	e796      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011b64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011b68:	e793      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011b6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011b6e:	e790      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011b74:	e78d      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8011b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011b7a:	e78a      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011b80:	e787      	b.n	8011a92 <SDMMC_CmdSendSCR+0x42>
 8011b82:	bf00      	nop
 8011b84:	240000b0 	.word	0x240000b0
 8011b88:	10624dd3 	.word	0x10624dd3
 8011b8c:	fffee0c0 	.word	0xfffee0c0
 8011b90:	00200045 	.word	0x00200045
 8011b94:	002000c5 	.word	0x002000c5
 8011b98:	fdffe008 	.word	0xfdffe008

08011b9c <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b9c:	4a19      	ldr	r2, [pc, #100]	; (8011c04 <SDMMC_CmdSendCID+0x68>)
{
 8011b9e:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ba0:	4919      	ldr	r1, [pc, #100]	; (8011c08 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011ba2:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ba6:	6812      	ldr	r2, [r2, #0]
{
 8011ba8:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8011baa:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bac:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011bb0:	4c16      	ldr	r4, [pc, #88]	; (8011c0c <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bb2:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8011bb6:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bb8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011bba:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bbc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011bc0:	402c      	ands	r4, r5
 8011bc2:	4320      	orrs	r0, r4
 8011bc4:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 8011bc6:	b14a      	cbz	r2, 8011bdc <SDMMC_CmdSendCID+0x40>
 8011bc8:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8011bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8011bcc:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011bce:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011bd2:	d001      	beq.n	8011bd8 <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bd4:	0490      	lsls	r0, r2, #18
 8011bd6:	d505      	bpl.n	8011be4 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 8011bd8:	1c4c      	adds	r4, r1, #1
 8011bda:	d1f6      	bne.n	8011bca <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8011bdc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8011be0:	bc30      	pop	{r4, r5}
 8011be2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011be6:	0752      	lsls	r2, r2, #29
 8011be8:	d408      	bmi.n	8011bfc <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011bea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011bec:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011bf0:	bf14      	ite	ne
 8011bf2:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011bf4:	4a06      	ldreq	r2, [pc, #24]	; (8011c10 <SDMMC_CmdSendCID+0x74>)
}
 8011bf6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011bf8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011bfa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011bfc:	2004      	movs	r0, #4
 8011bfe:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c00:	e7ee      	b.n	8011be0 <SDMMC_CmdSendCID+0x44>
 8011c02:	bf00      	nop
 8011c04:	240000b0 	.word	0x240000b0
 8011c08:	10624dd3 	.word	0x10624dd3
 8011c0c:	fffee0c0 	.word	0xfffee0c0
 8011c10:	002000c5 	.word	0x002000c5

08011c14 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c14:	4a18      	ldr	r2, [pc, #96]	; (8011c78 <SDMMC_CmdSendCSD+0x64>)
{
 8011c16:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c18:	f241 3088 	movw	r0, #5000	; 0x1388
 8011c1c:	6812      	ldr	r2, [r2, #0]
{
 8011c1e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c20:	4d16      	ldr	r5, [pc, #88]	; (8011c7c <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c22:	f241 3409 	movw	r4, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 8011c26:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c28:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c2c:	4914      	ldr	r1, [pc, #80]	; (8011c80 <SDMMC_CmdSendCSD+0x6c>)
 8011c2e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c30:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c32:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c34:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c38:	430c      	orrs	r4, r1
 8011c3a:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 8011c3c:	b14a      	cbz	r2, 8011c52 <SDMMC_CmdSendCSD+0x3e>
 8011c3e:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8011c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8011c42:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011c44:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011c48:	d001      	beq.n	8011c4e <SDMMC_CmdSendCSD+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c4a:	0490      	lsls	r0, r2, #18
 8011c4c:	d505      	bpl.n	8011c5a <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 8011c4e:	1c4c      	adds	r4, r1, #1
 8011c50:	d1f6      	bne.n	8011c40 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011c52:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8011c56:	bc30      	pop	{r4, r5}
 8011c58:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c5c:	0752      	lsls	r2, r2, #29
 8011c5e:	d408      	bmi.n	8011c72 <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c60:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011c62:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c66:	bf14      	ite	ne
 8011c68:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c6a:	4a06      	ldreq	r2, [pc, #24]	; (8011c84 <SDMMC_CmdSendCSD+0x70>)
}
 8011c6c:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011c70:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c72:	2004      	movs	r0, #4
 8011c74:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c76:	e7ee      	b.n	8011c56 <SDMMC_CmdSendCSD+0x42>
 8011c78:	240000b0 	.word	0x240000b0
 8011c7c:	10624dd3 	.word	0x10624dd3
 8011c80:	fffee0c0 	.word	0xfffee0c0
 8011c84:	002000c5 	.word	0x002000c5

08011c88 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c88:	4b26      	ldr	r3, [pc, #152]	; (8011d24 <SDMMC_CmdSetRelAdd+0x9c>)
 8011c8a:	4a27      	ldr	r2, [pc, #156]	; (8011d28 <SDMMC_CmdSetRelAdd+0xa0>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
{
 8011c8e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8011c90:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c92:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c96:	4d25      	ldr	r5, [pc, #148]	; (8011d2c <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 8011c98:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c9a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c9c:	68c2      	ldr	r2, [r0, #12]
 8011c9e:	f241 1403 	movw	r4, #4355	; 0x1103
 8011ca2:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ca4:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011ca8:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011caa:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011cae:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8011cb0:	b14b      	cbz	r3, 8011cc6 <SDMMC_CmdSetRelAdd+0x3e>
 8011cb2:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8011cb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011cb6:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011cb8:	f013 0f45 	tst.w	r3, #69	; 0x45
 8011cbc:	d001      	beq.n	8011cc2 <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011cbe:	049d      	lsls	r5, r3, #18
 8011cc0:	d506      	bpl.n	8011cd0 <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 8011cc2:	1c53      	adds	r3, r2, #1
 8011cc4:	d1f6      	bne.n	8011cb4 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011cc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	bc30      	pop	{r4, r5}
 8011cce:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011cd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011cd2:	075c      	lsls	r4, r3, #29
 8011cd4:	d41c      	bmi.n	8011d10 <SDMMC_CmdSetRelAdd+0x88>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011cd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011cd8:	f013 0301 	ands.w	r3, r3, #1
 8011cdc:	d113      	bne.n	8011d06 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8011cde:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d112      	bne.n	8011d0c <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011ce6:	4b12      	ldr	r3, [pc, #72]	; (8011d30 <SDMMC_CmdSetRelAdd+0xa8>)
 8011ce8:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8011cea:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011cec:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8011cf0:	d014      	beq.n	8011d1c <SDMMC_CmdSetRelAdd+0x94>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011cf2:	0451      	lsls	r1, r2, #17
 8011cf4:	d40f      	bmi.n	8011d16 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011cf6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8011cfa:	bf14      	ite	ne
 8011cfc:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8011d00:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011d04:	e7e1      	b.n	8011cca <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d06:	2201      	movs	r2, #1
 8011d08:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d0a:	e7de      	b.n	8011cca <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	e7dc      	b.n	8011cca <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d10:	2304      	movs	r3, #4
 8011d12:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d14:	e7d9      	b.n	8011cca <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011d1a:	e7d6      	b.n	8011cca <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011d1c:	0c12      	lsrs	r2, r2, #16
 8011d1e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8011d20:	e7d3      	b.n	8011cca <SDMMC_CmdSetRelAdd+0x42>
 8011d22:	bf00      	nop
 8011d24:	240000b0 	.word	0x240000b0
 8011d28:	10624dd3 	.word	0x10624dd3
 8011d2c:	fffee0c0 	.word	0xfffee0c0
 8011d30:	002000c5 	.word	0x002000c5

08011d34 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d34:	4b4b      	ldr	r3, [pc, #300]	; (8011e64 <SDMMC_CmdSendStatus+0x130>)
 8011d36:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8011d3a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d3c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011d3e:	f241 140d 	movw	r4, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d42:	4d49      	ldr	r5, [pc, #292]	; (8011e68 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 8011d44:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d46:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011d4a:	4948      	ldr	r1, [pc, #288]	; (8011e6c <SDMMC_CmdSendStatus+0x138>)
 8011d4c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d4e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011d50:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011d52:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011d56:	430c      	orrs	r4, r1
 8011d58:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8011d5a:	b14b      	cbz	r3, 8011d70 <SDMMC_CmdSendStatus+0x3c>
 8011d5c:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011d5e:	4944      	ldr	r1, [pc, #272]	; (8011e70 <SDMMC_CmdSendStatus+0x13c>)
    sta_reg = SDMMCx->STA;
 8011d60:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011d62:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011d64:	420b      	tst	r3, r1
 8011d66:	d001      	beq.n	8011d6c <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011d68:	049c      	lsls	r4, r3, #18
 8011d6a:	d506      	bpl.n	8011d7a <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 8011d6c:	1c55      	adds	r5, r2, #1
 8011d6e:	d1f7      	bne.n	8011d60 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011d70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	bc30      	pop	{r4, r5}
 8011d78:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d7c:	075b      	lsls	r3, r3, #29
 8011d7e:	d43d      	bmi.n	8011dfc <SDMMC_CmdSendStatus+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d82:	f013 0301 	ands.w	r3, r3, #1
 8011d86:	d134      	bne.n	8011df2 <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d88:	4b3a      	ldr	r3, [pc, #232]	; (8011e74 <SDMMC_CmdSendStatus+0x140>)
 8011d8a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011d8c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	2b0d      	cmp	r3, #13
 8011d92:	d131      	bne.n	8011df8 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 8011d94:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011d96:	4b38      	ldr	r3, [pc, #224]	; (8011e78 <SDMMC_CmdSendStatus+0x144>)
 8011d98:	4013      	ands	r3, r2
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d0ea      	beq.n	8011d74 <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011d9e:	2a00      	cmp	r2, #0
 8011da0:	db2f      	blt.n	8011e02 <SDMMC_CmdSendStatus+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011da2:	0055      	lsls	r5, r2, #1
 8011da4:	d430      	bmi.n	8011e08 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011da6:	0094      	lsls	r4, r2, #2
 8011da8:	d430      	bmi.n	8011e0c <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011daa:	00d0      	lsls	r0, r2, #3
 8011dac:	d430      	bmi.n	8011e10 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011dae:	0111      	lsls	r1, r2, #4
 8011db0:	d431      	bmi.n	8011e16 <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011db2:	0155      	lsls	r5, r2, #5
 8011db4:	d432      	bmi.n	8011e1c <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011db6:	01d4      	lsls	r4, r2, #7
 8011db8:	d433      	bmi.n	8011e22 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011dba:	0210      	lsls	r0, r2, #8
 8011dbc:	d434      	bmi.n	8011e28 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011dbe:	0251      	lsls	r1, r2, #9
 8011dc0:	d435      	bmi.n	8011e2e <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011dc2:	0295      	lsls	r5, r2, #10
 8011dc4:	d436      	bmi.n	8011e34 <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011dc6:	02d4      	lsls	r4, r2, #11
 8011dc8:	d437      	bmi.n	8011e3a <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011dca:	0350      	lsls	r0, r2, #13
 8011dcc:	d438      	bmi.n	8011e40 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011dce:	0391      	lsls	r1, r2, #14
 8011dd0:	d439      	bmi.n	8011e46 <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011dd2:	03d5      	lsls	r5, r2, #15
 8011dd4:	d43a      	bmi.n	8011e4c <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011dd6:	0414      	lsls	r4, r2, #16
 8011dd8:	d43b      	bmi.n	8011e52 <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011dda:	0450      	lsls	r0, r2, #17
 8011ddc:	d43f      	bmi.n	8011e5e <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011dde:	0491      	lsls	r1, r2, #18
 8011de0:	d43a      	bmi.n	8011e58 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011de2:	f012 0f08 	tst.w	r2, #8
 8011de6:	bf14      	ite	ne
 8011de8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011dec:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011df0:	e7c0      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011df2:	2201      	movs	r2, #1
 8011df4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011df6:	e7bd      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e7bb      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011dfc:	2304      	movs	r3, #4
 8011dfe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011e00:	e7b8      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011e06:	e7b5      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011e08:	2340      	movs	r3, #64	; 0x40
 8011e0a:	e7b3      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011e0c:	2380      	movs	r3, #128	; 0x80
 8011e0e:	e7b1      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e14:	e7ae      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e1a:	e7ab      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e20:	e7a8      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e26:	e7a5      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e2c:	e7a2      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011e32:	e79f      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011e38:	e79c      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8011e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e3e:	e799      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011e44:	e796      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011e46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011e4a:	e793      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011e4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011e50:	e790      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011e52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011e56:	e78d      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8011e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011e5c:	e78a      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011e5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011e62:	e787      	b.n	8011d74 <SDMMC_CmdSendStatus+0x40>
 8011e64:	240000b0 	.word	0x240000b0
 8011e68:	10624dd3 	.word	0x10624dd3
 8011e6c:	fffee0c0 	.word	0xfffee0c0
 8011e70:	00200045 	.word	0x00200045
 8011e74:	002000c5 	.word	0x002000c5
 8011e78:	fdffe008 	.word	0xfdffe008

08011e7c <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011e7c:	4b4c      	ldr	r3, [pc, #304]	; (8011fb0 <SDMMC_CmdStatusRegister+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e7e:	f241 110d 	movw	r1, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011e82:	4a4c      	ldr	r2, [pc, #304]	; (8011fb4 <SDMMC_CmdStatusRegister+0x138>)
 8011e84:	681b      	ldr	r3, [r3, #0]
{
 8011e86:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8011e88:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011e8a:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e8e:	4c4a      	ldr	r4, [pc, #296]	; (8011fb8 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011e90:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8011e94:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011e96:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e98:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011e9a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e9e:	402c      	ands	r4, r5
 8011ea0:	4321      	orrs	r1, r4
 8011ea2:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8011ea4:	b14b      	cbz	r3, 8011eba <SDMMC_CmdStatusRegister+0x3e>
 8011ea6:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011ea8:	4944      	ldr	r1, [pc, #272]	; (8011fbc <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 8011eaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8011eac:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011eae:	420b      	tst	r3, r1
 8011eb0:	d001      	beq.n	8011eb6 <SDMMC_CmdStatusRegister+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011eb2:	049c      	lsls	r4, r3, #18
 8011eb4:	d506      	bpl.n	8011ec4 <SDMMC_CmdStatusRegister+0x48>
    if (count-- == 0U)
 8011eb6:	1c55      	adds	r5, r2, #1
 8011eb8:	d1f7      	bne.n	8011eaa <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8011eba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	bc30      	pop	{r4, r5}
 8011ec2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ec4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ec6:	075b      	lsls	r3, r3, #29
 8011ec8:	d43d      	bmi.n	8011f46 <SDMMC_CmdStatusRegister+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011eca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ecc:	f013 0301 	ands.w	r3, r3, #1
 8011ed0:	d134      	bne.n	8011f3c <SDMMC_CmdStatusRegister+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011ed2:	4b3b      	ldr	r3, [pc, #236]	; (8011fc0 <SDMMC_CmdStatusRegister+0x144>)
 8011ed4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011ed6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b0d      	cmp	r3, #13
 8011edc:	d131      	bne.n	8011f42 <SDMMC_CmdStatusRegister+0xc6>
  return (*(__IO uint32_t *) tmp);
 8011ede:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011ee0:	4b38      	ldr	r3, [pc, #224]	; (8011fc4 <SDMMC_CmdStatusRegister+0x148>)
 8011ee2:	4013      	ands	r3, r2
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d0ea      	beq.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011ee8:	2a00      	cmp	r2, #0
 8011eea:	db2f      	blt.n	8011f4c <SDMMC_CmdStatusRegister+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011eec:	0055      	lsls	r5, r2, #1
 8011eee:	d430      	bmi.n	8011f52 <SDMMC_CmdStatusRegister+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011ef0:	0094      	lsls	r4, r2, #2
 8011ef2:	d430      	bmi.n	8011f56 <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011ef4:	00d0      	lsls	r0, r2, #3
 8011ef6:	d430      	bmi.n	8011f5a <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011ef8:	0111      	lsls	r1, r2, #4
 8011efa:	d431      	bmi.n	8011f60 <SDMMC_CmdStatusRegister+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011efc:	0155      	lsls	r5, r2, #5
 8011efe:	d432      	bmi.n	8011f66 <SDMMC_CmdStatusRegister+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011f00:	01d4      	lsls	r4, r2, #7
 8011f02:	d433      	bmi.n	8011f6c <SDMMC_CmdStatusRegister+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011f04:	0210      	lsls	r0, r2, #8
 8011f06:	d434      	bmi.n	8011f72 <SDMMC_CmdStatusRegister+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011f08:	0251      	lsls	r1, r2, #9
 8011f0a:	d435      	bmi.n	8011f78 <SDMMC_CmdStatusRegister+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011f0c:	0295      	lsls	r5, r2, #10
 8011f0e:	d436      	bmi.n	8011f7e <SDMMC_CmdStatusRegister+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011f10:	02d4      	lsls	r4, r2, #11
 8011f12:	d437      	bmi.n	8011f84 <SDMMC_CmdStatusRegister+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011f14:	0350      	lsls	r0, r2, #13
 8011f16:	d438      	bmi.n	8011f8a <SDMMC_CmdStatusRegister+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011f18:	0391      	lsls	r1, r2, #14
 8011f1a:	d439      	bmi.n	8011f90 <SDMMC_CmdStatusRegister+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011f1c:	03d5      	lsls	r5, r2, #15
 8011f1e:	d43a      	bmi.n	8011f96 <SDMMC_CmdStatusRegister+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011f20:	0414      	lsls	r4, r2, #16
 8011f22:	d43b      	bmi.n	8011f9c <SDMMC_CmdStatusRegister+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011f24:	0450      	lsls	r0, r2, #17
 8011f26:	d43f      	bmi.n	8011fa8 <SDMMC_CmdStatusRegister+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011f28:	0491      	lsls	r1, r2, #18
 8011f2a:	d43a      	bmi.n	8011fa2 <SDMMC_CmdStatusRegister+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011f2c:	f012 0f08 	tst.w	r2, #8
 8011f30:	bf14      	ite	ne
 8011f32:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011f36:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011f3a:	e7c0      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f40:	e7bd      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f42:	2301      	movs	r3, #1
 8011f44:	e7bb      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011f46:	2304      	movs	r3, #4
 8011f48:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011f4a:	e7b8      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011f50:	e7b5      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011f52:	2340      	movs	r3, #64	; 0x40
 8011f54:	e7b3      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011f56:	2380      	movs	r3, #128	; 0x80
 8011f58:	e7b1      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f5e:	e7ae      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f64:	e7ab      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f6a:	e7a8      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011f70:	e7a5      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f76:	e7a2      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011f7c:	e79f      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011f82:	e79c      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 8011f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f88:	e799      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011f8e:	e796      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011f94:	e793      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011f96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011f9a:	e790      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011f9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011fa0:	e78d      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8011fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011fa6:	e78a      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011fac:	e787      	b.n	8011ebe <SDMMC_CmdStatusRegister+0x42>
 8011fae:	bf00      	nop
 8011fb0:	240000b0 	.word	0x240000b0
 8011fb4:	10624dd3 	.word	0x10624dd3
 8011fb8:	fffee0c0 	.word	0xfffee0c0
 8011fbc:	00200045 	.word	0x00200045
 8011fc0:	002000c5 	.word	0x002000c5
 8011fc4:	fdffe008 	.word	0xfdffe008

08011fc8 <SDMMC_CmdSwitch>:
 8011fc8:	4b4b      	ldr	r3, [pc, #300]	; (80120f8 <SDMMC_CmdSwitch+0x130>)
 8011fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fce:	b430      	push	{r4, r5}
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	f241 1406 	movw	r4, #4358	; 0x1106
 8011fd6:	4d49      	ldr	r5, [pc, #292]	; (80120fc <SDMMC_CmdSwitch+0x134>)
 8011fd8:	6081      	str	r1, [r0, #8]
 8011fda:	fba5 5303 	umull	r5, r3, r5, r3
 8011fde:	4948      	ldr	r1, [pc, #288]	; (8012100 <SDMMC_CmdSwitch+0x138>)
 8011fe0:	68c5      	ldr	r5, [r0, #12]
 8011fe2:	0a5b      	lsrs	r3, r3, #9
 8011fe4:	4029      	ands	r1, r5
 8011fe6:	fb02 f303 	mul.w	r3, r2, r3
 8011fea:	430c      	orrs	r4, r1
 8011fec:	60c4      	str	r4, [r0, #12]
 8011fee:	b14b      	cbz	r3, 8012004 <SDMMC_CmdSwitch+0x3c>
 8011ff0:	1e5a      	subs	r2, r3, #1
 8011ff2:	4944      	ldr	r1, [pc, #272]	; (8012104 <SDMMC_CmdSwitch+0x13c>)
 8011ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ff6:	3a01      	subs	r2, #1
 8011ff8:	420b      	tst	r3, r1
 8011ffa:	d001      	beq.n	8012000 <SDMMC_CmdSwitch+0x38>
 8011ffc:	049c      	lsls	r4, r3, #18
 8011ffe:	d506      	bpl.n	801200e <SDMMC_CmdSwitch+0x46>
 8012000:	1c55      	adds	r5, r2, #1
 8012002:	d1f7      	bne.n	8011ff4 <SDMMC_CmdSwitch+0x2c>
 8012004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012008:	4618      	mov	r0, r3
 801200a:	bc30      	pop	{r4, r5}
 801200c:	4770      	bx	lr
 801200e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012010:	075b      	lsls	r3, r3, #29
 8012012:	d43d      	bmi.n	8012090 <SDMMC_CmdSwitch+0xc8>
 8012014:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012016:	f013 0301 	ands.w	r3, r3, #1
 801201a:	d134      	bne.n	8012086 <SDMMC_CmdSwitch+0xbe>
 801201c:	4b3a      	ldr	r3, [pc, #232]	; (8012108 <SDMMC_CmdSwitch+0x140>)
 801201e:	6383      	str	r3, [r0, #56]	; 0x38
 8012020:	6903      	ldr	r3, [r0, #16]
 8012022:	b2db      	uxtb	r3, r3
 8012024:	2b06      	cmp	r3, #6
 8012026:	d131      	bne.n	801208c <SDMMC_CmdSwitch+0xc4>
 8012028:	6942      	ldr	r2, [r0, #20]
 801202a:	4b38      	ldr	r3, [pc, #224]	; (801210c <SDMMC_CmdSwitch+0x144>)
 801202c:	4013      	ands	r3, r2
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0ea      	beq.n	8012008 <SDMMC_CmdSwitch+0x40>
 8012032:	2a00      	cmp	r2, #0
 8012034:	db2f      	blt.n	8012096 <SDMMC_CmdSwitch+0xce>
 8012036:	0055      	lsls	r5, r2, #1
 8012038:	d430      	bmi.n	801209c <SDMMC_CmdSwitch+0xd4>
 801203a:	0094      	lsls	r4, r2, #2
 801203c:	d430      	bmi.n	80120a0 <SDMMC_CmdSwitch+0xd8>
 801203e:	00d0      	lsls	r0, r2, #3
 8012040:	d430      	bmi.n	80120a4 <SDMMC_CmdSwitch+0xdc>
 8012042:	0111      	lsls	r1, r2, #4
 8012044:	d431      	bmi.n	80120aa <SDMMC_CmdSwitch+0xe2>
 8012046:	0155      	lsls	r5, r2, #5
 8012048:	d432      	bmi.n	80120b0 <SDMMC_CmdSwitch+0xe8>
 801204a:	01d4      	lsls	r4, r2, #7
 801204c:	d433      	bmi.n	80120b6 <SDMMC_CmdSwitch+0xee>
 801204e:	0210      	lsls	r0, r2, #8
 8012050:	d434      	bmi.n	80120bc <SDMMC_CmdSwitch+0xf4>
 8012052:	0251      	lsls	r1, r2, #9
 8012054:	d435      	bmi.n	80120c2 <SDMMC_CmdSwitch+0xfa>
 8012056:	0295      	lsls	r5, r2, #10
 8012058:	d436      	bmi.n	80120c8 <SDMMC_CmdSwitch+0x100>
 801205a:	02d4      	lsls	r4, r2, #11
 801205c:	d437      	bmi.n	80120ce <SDMMC_CmdSwitch+0x106>
 801205e:	0350      	lsls	r0, r2, #13
 8012060:	d438      	bmi.n	80120d4 <SDMMC_CmdSwitch+0x10c>
 8012062:	0391      	lsls	r1, r2, #14
 8012064:	d439      	bmi.n	80120da <SDMMC_CmdSwitch+0x112>
 8012066:	03d5      	lsls	r5, r2, #15
 8012068:	d43a      	bmi.n	80120e0 <SDMMC_CmdSwitch+0x118>
 801206a:	0414      	lsls	r4, r2, #16
 801206c:	d43b      	bmi.n	80120e6 <SDMMC_CmdSwitch+0x11e>
 801206e:	0450      	lsls	r0, r2, #17
 8012070:	d43f      	bmi.n	80120f2 <SDMMC_CmdSwitch+0x12a>
 8012072:	0491      	lsls	r1, r2, #18
 8012074:	d43a      	bmi.n	80120ec <SDMMC_CmdSwitch+0x124>
 8012076:	f012 0f08 	tst.w	r2, #8
 801207a:	bf14      	ite	ne
 801207c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012080:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012084:	e7c0      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 8012086:	2201      	movs	r2, #1
 8012088:	6382      	str	r2, [r0, #56]	; 0x38
 801208a:	e7bd      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 801208c:	2301      	movs	r3, #1
 801208e:	e7bb      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 8012090:	2304      	movs	r3, #4
 8012092:	6383      	str	r3, [r0, #56]	; 0x38
 8012094:	e7b8      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 8012096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801209a:	e7b5      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 801209c:	2340      	movs	r3, #64	; 0x40
 801209e:	e7b3      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120a0:	2380      	movs	r3, #128	; 0x80
 80120a2:	e7b1      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120a8:	e7ae      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80120ae:	e7ab      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120b4:	e7a8      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120ba:	e7a5      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120c0:	e7a2      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80120c6:	e79f      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80120cc:	e79c      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120d2:	e799      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120d8:	e796      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80120de:	e793      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80120e4:	e790      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80120ea:	e78d      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80120f0:	e78a      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80120f6:	e787      	b.n	8012008 <SDMMC_CmdSwitch+0x40>
 80120f8:	240000b0 	.word	0x240000b0
 80120fc:	10624dd3 	.word	0x10624dd3
 8012100:	fffee0c0 	.word	0xfffee0c0
 8012104:	00200045 	.word	0x00200045
 8012108:	002000c5 	.word	0x002000c5
 801210c:	fdffe008 	.word	0xfdffe008

08012110 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012110:	4b4c      	ldr	r3, [pc, #304]	; (8012244 <SDMMC_CmdVoltageSwitch+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012112:	f241 110b 	movw	r1, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012116:	4a4c      	ldr	r2, [pc, #304]	; (8012248 <SDMMC_CmdVoltageSwitch+0x138>)
 8012118:	681b      	ldr	r3, [r3, #0]
{
 801211a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 801211c:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801211e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012122:	4c4a      	ldr	r4, [pc, #296]	; (801224c <SDMMC_CmdVoltageSwitch+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012124:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8012128:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801212a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801212c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801212e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012132:	402c      	ands	r4, r5
 8012134:	4321      	orrs	r1, r4
 8012136:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8012138:	b14b      	cbz	r3, 801214e <SDMMC_CmdVoltageSwitch+0x3e>
 801213a:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801213c:	4944      	ldr	r1, [pc, #272]	; (8012250 <SDMMC_CmdVoltageSwitch+0x140>)
    sta_reg = SDMMCx->STA;
 801213e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012140:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012142:	420b      	tst	r3, r1
 8012144:	d001      	beq.n	801214a <SDMMC_CmdVoltageSwitch+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012146:	049c      	lsls	r4, r3, #18
 8012148:	d506      	bpl.n	8012158 <SDMMC_CmdVoltageSwitch+0x48>
    if (count-- == 0U)
 801214a:	1c55      	adds	r5, r2, #1
 801214c:	d1f7      	bne.n	801213e <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 801214e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012152:	4618      	mov	r0, r3
 8012154:	bc30      	pop	{r4, r5}
 8012156:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012158:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801215a:	075b      	lsls	r3, r3, #29
 801215c:	d43d      	bmi.n	80121da <SDMMC_CmdVoltageSwitch+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801215e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012160:	f013 0301 	ands.w	r3, r3, #1
 8012164:	d134      	bne.n	80121d0 <SDMMC_CmdVoltageSwitch+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012166:	4b3b      	ldr	r3, [pc, #236]	; (8012254 <SDMMC_CmdVoltageSwitch+0x144>)
 8012168:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801216a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801216c:	b2db      	uxtb	r3, r3
 801216e:	2b0b      	cmp	r3, #11
 8012170:	d131      	bne.n	80121d6 <SDMMC_CmdVoltageSwitch+0xc6>
  return (*(__IO uint32_t *) tmp);
 8012172:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012174:	4b38      	ldr	r3, [pc, #224]	; (8012258 <SDMMC_CmdVoltageSwitch+0x148>)
 8012176:	4013      	ands	r3, r2
 8012178:	2b00      	cmp	r3, #0
 801217a:	d0ea      	beq.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801217c:	2a00      	cmp	r2, #0
 801217e:	db2f      	blt.n	80121e0 <SDMMC_CmdVoltageSwitch+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012180:	0055      	lsls	r5, r2, #1
 8012182:	d430      	bmi.n	80121e6 <SDMMC_CmdVoltageSwitch+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012184:	0094      	lsls	r4, r2, #2
 8012186:	d430      	bmi.n	80121ea <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012188:	00d0      	lsls	r0, r2, #3
 801218a:	d430      	bmi.n	80121ee <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801218c:	0111      	lsls	r1, r2, #4
 801218e:	d431      	bmi.n	80121f4 <SDMMC_CmdVoltageSwitch+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012190:	0155      	lsls	r5, r2, #5
 8012192:	d432      	bmi.n	80121fa <SDMMC_CmdVoltageSwitch+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012194:	01d4      	lsls	r4, r2, #7
 8012196:	d433      	bmi.n	8012200 <SDMMC_CmdVoltageSwitch+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012198:	0210      	lsls	r0, r2, #8
 801219a:	d434      	bmi.n	8012206 <SDMMC_CmdVoltageSwitch+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801219c:	0251      	lsls	r1, r2, #9
 801219e:	d435      	bmi.n	801220c <SDMMC_CmdVoltageSwitch+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80121a0:	0295      	lsls	r5, r2, #10
 80121a2:	d436      	bmi.n	8012212 <SDMMC_CmdVoltageSwitch+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80121a4:	02d4      	lsls	r4, r2, #11
 80121a6:	d437      	bmi.n	8012218 <SDMMC_CmdVoltageSwitch+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80121a8:	0350      	lsls	r0, r2, #13
 80121aa:	d438      	bmi.n	801221e <SDMMC_CmdVoltageSwitch+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80121ac:	0391      	lsls	r1, r2, #14
 80121ae:	d439      	bmi.n	8012224 <SDMMC_CmdVoltageSwitch+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80121b0:	03d5      	lsls	r5, r2, #15
 80121b2:	d43a      	bmi.n	801222a <SDMMC_CmdVoltageSwitch+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80121b4:	0414      	lsls	r4, r2, #16
 80121b6:	d43b      	bmi.n	8012230 <SDMMC_CmdVoltageSwitch+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80121b8:	0450      	lsls	r0, r2, #17
 80121ba:	d43f      	bmi.n	801223c <SDMMC_CmdVoltageSwitch+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80121bc:	0491      	lsls	r1, r2, #18
 80121be:	d43a      	bmi.n	8012236 <SDMMC_CmdVoltageSwitch+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80121c0:	f012 0f08 	tst.w	r2, #8
 80121c4:	bf14      	ite	ne
 80121c6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80121ca:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80121ce:	e7c0      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80121d0:	2201      	movs	r2, #1
 80121d2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121d4:	e7bd      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121d6:	2301      	movs	r3, #1
 80121d8:	e7bb      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121da:	2304      	movs	r3, #4
 80121dc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80121de:	e7b8      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80121e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80121e4:	e7b5      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80121e6:	2340      	movs	r3, #64	; 0x40
 80121e8:	e7b3      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80121ea:	2380      	movs	r3, #128	; 0x80
 80121ec:	e7b1      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80121ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121f2:	e7ae      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80121f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121f8:	e7ab      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80121fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121fe:	e7a8      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012204:	e7a5      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801220a:	e7a2      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801220c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012210:	e79f      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012216:	e79c      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8012218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801221c:	e799      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801221e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012222:	e796      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012224:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012228:	e793      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801222a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801222e:	e790      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012230:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012234:	e78d      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8012236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801223a:	e78a      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801223c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012240:	e787      	b.n	8012152 <SDMMC_CmdVoltageSwitch+0x42>
 8012242:	bf00      	nop
 8012244:	240000b0 	.word	0x240000b0
 8012248:	10624dd3 	.word	0x10624dd3
 801224c:	fffee0c0 	.word	0xfffee0c0
 8012250:	00200045 	.word	0x00200045
 8012254:	002000c5 	.word	0x002000c5
 8012258:	fdffe008 	.word	0xfdffe008

0801225c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801225c:	287f      	cmp	r0, #127	; 0x7f
 801225e:	d911      	bls.n	8012284 <ff_convert+0x28>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012260:	b989      	cbnz	r1, 8012286 <ff_convert+0x2a>
 8012262:	4b0e      	ldr	r3, [pc, #56]	; (801229c <ff_convert+0x40>)
{
 8012264:	b410      	push	{r4}
 8012266:	e001      	b.n	801226c <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012268:	2980      	cmp	r1, #128	; 0x80
 801226a:	d015      	beq.n	8012298 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 801226c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8012270:	b28c      	uxth	r4, r1
 8012272:	3101      	adds	r1, #1
 8012274:	4282      	cmp	r2, r0
 8012276:	d1f7      	bne.n	8012268 <ff_convert+0xc>
 8012278:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801227c:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 801227e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012282:	4770      	bx	lr
 8012284:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012286:	28ff      	cmp	r0, #255	; 0xff
 8012288:	d804      	bhi.n	8012294 <ff_convert+0x38>
 801228a:	4b04      	ldr	r3, [pc, #16]	; (801229c <ff_convert+0x40>)
 801228c:	3880      	subs	r0, #128	; 0x80
 801228e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8012292:	4770      	bx	lr
 8012294:	2000      	movs	r0, #0
 8012296:	4770      	bx	lr
 8012298:	2000      	movs	r0, #0
 801229a:	e7f0      	b.n	801227e <ff_convert+0x22>
 801229c:	0802cca4 	.word	0x0802cca4

080122a0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80122a0:	4b22      	ldr	r3, [pc, #136]	; (801232c <ff_wtoupper+0x8c>)
 80122a2:	4a23      	ldr	r2, [pc, #140]	; (8012330 <ff_wtoupper+0x90>)
 80122a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80122a8:	bf28      	it	cs
 80122aa:	4613      	movcs	r3, r2
{
 80122ac:	b470      	push	{r4, r5, r6}
 80122ae:	3304      	adds	r3, #4
 80122b0:	e001      	b.n	80122b6 <ff_wtoupper+0x16>
 80122b2:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80122b4:	b1d2      	cbz	r2, 80122ec <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 80122b6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 80122ba:	461e      	mov	r6, r3
 80122bc:	b1a1      	cbz	r1, 80122e8 <ff_wtoupper+0x48>
 80122be:	4288      	cmp	r0, r1
 80122c0:	d312      	bcc.n	80122e8 <ff_wtoupper+0x48>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80122c2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80122c6:	b2d4      	uxtb	r4, r2
 80122c8:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 80122ca:	1865      	adds	r5, r4, r1
 80122cc:	42a8      	cmp	r0, r5
 80122ce:	daf0      	bge.n	80122b2 <ff_wtoupper+0x12>
			switch (cmd) {
 80122d0:	2a08      	cmp	r2, #8
 80122d2:	d809      	bhi.n	80122e8 <ff_wtoupper+0x48>
 80122d4:	e8df f002 	tbb	[pc, r2]
 80122d8:	1a171105 	.word	0x1a171105
 80122dc:	2623201d 	.word	0x2623201d
 80122e0:	0d          	.byte	0x0d
 80122e1:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80122e2:	1a41      	subs	r1, r0, r1
 80122e4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 80122e8:	bc70      	pop	{r4, r5, r6}
 80122ea:	4770      	bx	lr
		if (!cmd) p += nc;
 80122ec:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 80122f0:	e7dd      	b.n	80122ae <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80122f2:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80122f6:	b280      	uxth	r0, r0
 80122f8:	e7f6      	b.n	80122e8 <ff_wtoupper+0x48>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80122fa:	1a41      	subs	r1, r0, r1
 80122fc:	f001 0301 	and.w	r3, r1, #1
 8012300:	1ac0      	subs	r0, r0, r3
 8012302:	b280      	uxth	r0, r0
 8012304:	e7f0      	b.n	80122e8 <ff_wtoupper+0x48>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012306:	3810      	subs	r0, #16
 8012308:	b280      	uxth	r0, r0
 801230a:	e7ed      	b.n	80122e8 <ff_wtoupper+0x48>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801230c:	3820      	subs	r0, #32
 801230e:	b280      	uxth	r0, r0
 8012310:	e7ea      	b.n	80122e8 <ff_wtoupper+0x48>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012312:	3830      	subs	r0, #48	; 0x30
 8012314:	b280      	uxth	r0, r0
 8012316:	e7e7      	b.n	80122e8 <ff_wtoupper+0x48>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012318:	381a      	subs	r0, #26
 801231a:	b280      	uxth	r0, r0
 801231c:	e7e4      	b.n	80122e8 <ff_wtoupper+0x48>
			case 6:	chr += 8; break;				/* Shift +8 */
 801231e:	3008      	adds	r0, #8
 8012320:	b280      	uxth	r0, r0
 8012322:	e7e1      	b.n	80122e8 <ff_wtoupper+0x48>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012324:	3850      	subs	r0, #80	; 0x50
 8012326:	b280      	uxth	r0, r0
 8012328:	e7de      	b.n	80122e8 <ff_wtoupper+0x48>
 801232a:	bf00      	nop
 801232c:	0802cda4 	.word	0x0802cda4
 8012330:	0802cf98 	.word	0x0802cf98

08012334 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012334:	4b03      	ldr	r3, [pc, #12]	; (8012344 <disk_status+0x10>)
 8012336:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801233a:	4418      	add	r0, r3
 801233c:	6853      	ldr	r3, [r2, #4]
 801233e:	7b00      	ldrb	r0, [r0, #12]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	4718      	bx	r3
 8012344:	3000821c 	.word	0x3000821c

08012348 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8012348:	4b08      	ldr	r3, [pc, #32]	; (801236c <disk_initialize+0x24>)
 801234a:	5c1a      	ldrb	r2, [r3, r0]
 801234c:	b95a      	cbnz	r2, 8012366 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801234e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8012352:	1819      	adds	r1, r3, r0
{
 8012354:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 8012356:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012358:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 801235a:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 801235c:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012360:	7b08      	ldrb	r0, [r1, #12]
 8012362:	6813      	ldr	r3, [r2, #0]
 8012364:	4718      	bx	r3
}
 8012366:	2000      	movs	r0, #0
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	3000821c 	.word	0x3000821c

08012370 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012370:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012372:	4c05      	ldr	r4, [pc, #20]	; (8012388 <disk_read+0x18>)
 8012374:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8012378:	4420      	add	r0, r4
 801237a:	686c      	ldr	r4, [r5, #4]
 801237c:	7b00      	ldrb	r0, [r0, #12]
 801237e:	68a4      	ldr	r4, [r4, #8]
 8012380:	46a4      	mov	ip, r4
  return res;
}
 8012382:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012384:	4760      	bx	ip
 8012386:	bf00      	nop
 8012388:	3000821c 	.word	0x3000821c

0801238c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801238c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801238e:	4c05      	ldr	r4, [pc, #20]	; (80123a4 <disk_write+0x18>)
 8012390:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8012394:	4420      	add	r0, r4
 8012396:	686c      	ldr	r4, [r5, #4]
 8012398:	7b00      	ldrb	r0, [r0, #12]
 801239a:	68e4      	ldr	r4, [r4, #12]
 801239c:	46a4      	mov	ip, r4
  return res;
}
 801239e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80123a0:	4760      	bx	ip
 80123a2:	bf00      	nop
 80123a4:	3000821c 	.word	0x3000821c

080123a8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80123a8:	4b05      	ldr	r3, [pc, #20]	; (80123c0 <disk_ioctl+0x18>)
{
 80123aa:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80123ac:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80123b0:	4418      	add	r0, r3
 80123b2:	6863      	ldr	r3, [r4, #4]
 80123b4:	7b00      	ldrb	r0, [r0, #12]
 80123b6:	691b      	ldr	r3, [r3, #16]
  return res;
}
 80123b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80123bc:	4718      	bx	r3
 80123be:	bf00      	nop
 80123c0:	3000821c 	.word	0x3000821c

080123c4 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 80123c4:	2000      	movs	r0, #0
 80123c6:	4770      	bx	lr

080123c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80123c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80123cc:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 80123ce:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 80123d2:	758f      	strb	r7, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80123d4:	69c3      	ldr	r3, [r0, #28]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d066      	beq.n	80124a8 <get_fileinfo+0xe0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80123da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80123dc:	4606      	mov	r6, r0
 80123de:	460d      	mov	r5, r1
 80123e0:	3301      	adds	r3, #1
 80123e2:	d01e      	beq.n	8012422 <get_fileinfo+0x5a>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80123e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123e8:	8818      	ldrh	r0, [r3, #0]
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d06c      	beq.n	80124c8 <get_fileinfo+0x100>
 80123ee:	f101 0715 	add.w	r7, r1, #21
 80123f2:	2401      	movs	r4, #1
 80123f4:	e000      	b.n	80123f8 <get_fileinfo+0x30>
 80123f6:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80123f8:	2100      	movs	r1, #0
 80123fa:	f7ff ff2f 	bl	801225c <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80123fe:	1c63      	adds	r3, r4, #1
 8012400:	2800      	cmp	r0, #0
 8012402:	d061      	beq.n	80124c8 <get_fileinfo+0x100>
 8012404:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8012408:	d05e      	beq.n	80124c8 <get_fileinfo+0x100>
				fno->fname[i++] = (TCHAR)w;
 801240a:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801240e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8012412:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8012416:	2800      	cmp	r0, #0
 8012418:	d1ed      	bne.n	80123f6 <get_fileinfo+0x2e>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801241a:	442c      	add	r4, r5
 801241c:	2300      	movs	r3, #0
 801241e:	75a3      	strb	r3, [r4, #22]
 8012420:	7daf      	ldrb	r7, [r5, #22]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 8012422:	6a36      	ldr	r6, [r6, #32]
	i = j = 0;
 8012424:	2400      	movs	r4, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 8012426:	f04f 082e 	mov.w	r8, #46	; 0x2e
 801242a:	1e70      	subs	r0, r6, #1
 801242c:	f106 0c0a 	add.w	ip, r6, #10
		c = (TCHAR)dp->dir[i++];
 8012430:	4602      	mov	r2, r0
 8012432:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 8012436:	2b20      	cmp	r3, #32
 8012438:	d01c      	beq.n	8012474 <get_fileinfo+0xac>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801243a:	3202      	adds	r2, #2
 801243c:	2b05      	cmp	r3, #5
 801243e:	eba2 0206 	sub.w	r2, r2, r6
 8012442:	bf08      	it	eq
 8012444:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8012446:	2a09      	cmp	r2, #9
 8012448:	d030      	beq.n	80124ac <get_fileinfo+0xe4>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801244a:	1929      	adds	r1, r5, r4
 801244c:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 801244e:	b987      	cbnz	r7, 8012472 <get_fileinfo+0xaa>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012450:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8012454:	f1be 0f19 	cmp.w	lr, #25
 8012458:	d80a      	bhi.n	8012470 <get_fileinfo+0xa8>
 801245a:	2a09      	cmp	r2, #9
 801245c:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8012460:	bf34      	ite	cc
 8012462:	2208      	movcc	r2, #8
 8012464:	2210      	movcs	r2, #16
 8012466:	ea1e 0f02 	tst.w	lr, r2
 801246a:	d001      	beq.n	8012470 <get_fileinfo+0xa8>
				c += 0x20;			/* To lower */
 801246c:	3320      	adds	r3, #32
 801246e:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8012470:	758b      	strb	r3, [r1, #22]
		}
		j++;
 8012472:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 8012474:	4584      	cmp	ip, r0
 8012476:	d1db      	bne.n	8012430 <get_fileinfo+0x68>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8012478:	1929      	adds	r1, r5, r4
	if (!lfv) {
 801247a:	b1ff      	cbz	r7, 80124bc <get_fileinfo+0xf4>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801247c:	2300      	movs	r3, #0
 801247e:	724b      	strb	r3, [r1, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012480:	7af3      	ldrb	r3, [r6, #11]
 8012482:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 8012484:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 8012486:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 8012488:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 801248a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801248e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012492:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8012494:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 8012496:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 8012498:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 801249a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801249e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80124a2:	0c1a      	lsrs	r2, r3, #16
 80124a4:	80eb      	strh	r3, [r5, #6]
 80124a6:	80aa      	strh	r2, [r5, #4]
}
 80124a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 80124ac:	1929      	adds	r1, r5, r4
 80124ae:	b90f      	cbnz	r7, 80124b4 <get_fileinfo+0xec>
 80124b0:	f881 8016 	strb.w	r8, [r1, #22]
			fno->altname[j++] = '.';
 80124b4:	3401      	adds	r4, #1
 80124b6:	f881 8009 	strb.w	r8, [r1, #9]
 80124ba:	e7c6      	b.n	801244a <get_fileinfo+0x82>
		fno->fname[j] = 0;
 80124bc:	758f      	strb	r7, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80124be:	7b33      	ldrb	r3, [r6, #12]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	bf08      	it	eq
 80124c4:	4629      	moveq	r1, r5
 80124c6:	e7d9      	b.n	801247c <get_fileinfo+0xb4>
			i = j = 0;
 80124c8:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 80124ca:	2300      	movs	r3, #0
 80124cc:	442c      	add	r4, r5
 80124ce:	75a3      	strb	r3, [r4, #22]
 80124d0:	7daf      	ldrb	r7, [r5, #22]
 80124d2:	e7a6      	b.n	8012422 <get_fileinfo+0x5a>

080124d4 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80124d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80124d6:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80124d8:	b083      	sub	sp, #12
 80124da:	4604      	mov	r4, r0
 80124dc:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80124de:	b973      	cbnz	r3, 80124fe <move_window.part.0+0x2a>
 80124e0:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80124e4:	2301      	movs	r3, #1
 80124e6:	462a      	mov	r2, r5
 80124e8:	7860      	ldrb	r0, [r4, #1]
 80124ea:	f7ff ff41 	bl	8012370 <disk_read>
 80124ee:	b910      	cbnz	r0, 80124f6 <move_window.part.0+0x22>
			fs->winsect = sector;
 80124f0:	6325      	str	r5, [r4, #48]	; 0x30
}
 80124f2:	b003      	add	sp, #12
 80124f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 80124f6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80124f8:	f04f 35ff 	mov.w	r5, #4294967295
 80124fc:	e7f8      	b.n	80124f0 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 80124fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012500:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8012504:	2301      	movs	r3, #1
 8012506:	7840      	ldrb	r0, [r0, #1]
 8012508:	4632      	mov	r2, r6
 801250a:	9101      	str	r1, [sp, #4]
 801250c:	f7ff ff3e 	bl	801238c <disk_write>
 8012510:	b9b8      	cbnz	r0, 8012542 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012512:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012514:	69e3      	ldr	r3, [r4, #28]
 8012516:	1ab2      	subs	r2, r6, r2
 8012518:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 801251a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801251c:	429a      	cmp	r2, r3
 801251e:	d2e1      	bcs.n	80124e4 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012520:	78a7      	ldrb	r7, [r4, #2]
 8012522:	2f01      	cmp	r7, #1
 8012524:	d801      	bhi.n	801252a <move_window.part.0+0x56>
 8012526:	e7dd      	b.n	80124e4 <move_window.part.0+0x10>
 8012528:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 801252a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801252c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801252e:	2301      	movs	r3, #1
 8012530:	7860      	ldrb	r0, [r4, #1]
 8012532:	4632      	mov	r2, r6
 8012534:	9101      	str	r1, [sp, #4]
 8012536:	f7ff ff29 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801253a:	2f01      	cmp	r7, #1
 801253c:	9901      	ldr	r1, [sp, #4]
 801253e:	d1f3      	bne.n	8012528 <move_window.part.0+0x54>
 8012540:	e7d0      	b.n	80124e4 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8012542:	2001      	movs	r0, #1
}
 8012544:	b003      	add	sp, #12
 8012546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012548 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8012548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 801254c:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801254e:	4604      	mov	r4, r0
 8012550:	460d      	mov	r5, r1
 8012552:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8012554:	2b02      	cmp	r3, #2
 8012556:	d006      	beq.n	8012566 <put_fat.part.0+0x1e>
 8012558:	2b03      	cmp	r3, #3
 801255a:	d052      	beq.n	8012602 <put_fat.part.0+0xba>
 801255c:	2b01      	cmp	r3, #1
 801255e:	d01b      	beq.n	8012598 <put_fat.part.0+0x50>
 8012560:	2002      	movs	r0, #2
}
 8012562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012566:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012568:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801256a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801256e:	4299      	cmp	r1, r3
 8012570:	d003      	beq.n	801257a <put_fat.part.0+0x32>
 8012572:	f7ff ffaf 	bl	80124d4 <move_window.part.0>
			if (res != FR_OK) break;
 8012576:	2800      	cmp	r0, #0
 8012578:	d1f3      	bne.n	8012562 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801257a:	006d      	lsls	r5, r5, #1
 801257c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8012580:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 8012584:	2201      	movs	r2, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012586:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			break;
 801258a:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val; val >>= 8;
 801258c:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801258e:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 8012590:	7059      	strb	r1, [r3, #1]
			fs->wflag = 1;
 8012592:	70e2      	strb	r2, [r4, #3]
}
 8012594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8012598:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801259c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801259e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80125a0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80125a4:	4299      	cmp	r1, r3
 80125a6:	d003      	beq.n	80125b0 <put_fat.part.0+0x68>
 80125a8:	f7ff ff94 	bl	80124d4 <move_window.part.0>
			if (res != FR_OK) break;
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d1d8      	bne.n	8012562 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80125b0:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 80125b2:	f107 0801 	add.w	r8, r7, #1
 80125b6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80125ba:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80125be:	d545      	bpl.n	801264c <put_fat.part.0+0x104>
 80125c0:	f819 3007 	ldrb.w	r3, [r9, r7]
			fs->wflag = 1;
 80125c4:	2201      	movs	r2, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80125c6:	f003 030f 	and.w	r3, r3, #15
 80125ca:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80125ce:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80125d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80125d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80125d6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 80125da:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80125dc:	4299      	cmp	r1, r3
 80125de:	d004      	beq.n	80125ea <put_fat.part.0+0xa2>
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff ff77 	bl	80124d4 <move_window.part.0>
			if (res != FR_OK) break;
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d1bb      	bne.n	8012562 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80125ea:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80125ee:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 80125f2:	44c8      	add	r8, r9
			fs->wflag = 1;
 80125f4:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80125f6:	f888 2000 	strb.w	r2, [r8]
			break;
 80125fa:	2000      	movs	r0, #0
			fs->wflag = 1;
 80125fc:	70e3      	strb	r3, [r4, #3]
}
 80125fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012602:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012604:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012606:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801260a:	4299      	cmp	r1, r3
 801260c:	d003      	beq.n	8012616 <put_fat.part.0+0xce>
 801260e:	f7ff ff61 	bl	80124d4 <move_window.part.0>
			if (res != FR_OK) break;
 8012612:	2800      	cmp	r0, #0
 8012614:	d1a5      	bne.n	8012562 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012616:	00ad      	lsls	r5, r5, #2
 8012618:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801261c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
			fs->wflag = 1;
 8012620:	f04f 0c01 	mov.w	ip, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012624:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			break;
 8012628:	2000      	movs	r0, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801262a:	194f      	adds	r7, r1, r5
	rv = rv << 8 | ptr[2];
 801262c:	887b      	ldrh	r3, [r7, #2]
	rv = rv << 8 | ptr[0];
 801262e:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012630:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012634:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8012636:	554b      	strb	r3, [r1, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 8012638:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801263a:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801263c:	0e1b      	lsrs	r3, r3, #24
 801263e:	70ba      	strb	r2, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012640:	7079      	strb	r1, [r7, #1]
	*ptr++ = (BYTE)val;
 8012642:	70fb      	strb	r3, [r7, #3]
			fs->wflag = 1;
 8012644:	f884 c003 	strb.w	ip, [r4, #3]
}
 8012648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801264c:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8012650:	2201      	movs	r2, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012652:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012654:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012656:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 801265a:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801265c:	4299      	cmp	r1, r3
 801265e:	d005      	beq.n	801266c <put_fat.part.0+0x124>
 8012660:	4620      	mov	r0, r4
 8012662:	f7ff ff37 	bl	80124d4 <move_window.part.0>
			if (res != FR_OK) break;
 8012666:	2800      	cmp	r0, #0
 8012668:	f47f af7b 	bne.w	8012562 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 801266c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012670:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 8012674:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012676:	f898 1000 	ldrb.w	r1, [r8]
 801267a:	f021 060f 	bic.w	r6, r1, #15
 801267e:	4332      	orrs	r2, r6
 8012680:	e7b8      	b.n	80125f4 <put_fat.part.0+0xac>
 8012682:	bf00      	nop

08012684 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012684:	2901      	cmp	r1, #1
 8012686:	d90e      	bls.n	80126a6 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8012688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801268a:	6983      	ldr	r3, [r0, #24]
 801268c:	460c      	mov	r4, r1
 801268e:	4605      	mov	r5, r0
 8012690:	4299      	cmp	r1, r3
 8012692:	d206      	bcs.n	80126a2 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8012694:	7803      	ldrb	r3, [r0, #0]
 8012696:	2b02      	cmp	r3, #2
 8012698:	d046      	beq.n	8012728 <get_fat.isra.0+0xa4>
 801269a:	2b03      	cmp	r3, #3
 801269c:	d02c      	beq.n	80126f8 <get_fat.isra.0+0x74>
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d003      	beq.n	80126aa <get_fat.isra.0+0x26>
 80126a2:	2001      	movs	r0, #1
}
 80126a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80126a6:	2001      	movs	r0, #1
}
 80126a8:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 80126aa:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80126b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126b2:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80126b6:	4291      	cmp	r1, r2
 80126b8:	d005      	beq.n	80126c6 <get_fat.isra.0+0x42>
 80126ba:	f7ff ff0b 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126be:	2800      	cmp	r0, #0
 80126c0:	d13b      	bne.n	801273a <get_fat.isra.0+0xb6>
 80126c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80126c6:	f3c7 0008 	ubfx	r0, r7, #0, #9
 80126ca:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126cc:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80126d0:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80126d2:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80126d4:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80126d8:	d003      	beq.n	80126e2 <get_fat.isra.0+0x5e>
 80126da:	4628      	mov	r0, r5
 80126dc:	f7ff fefa 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126e0:	bb58      	cbnz	r0, 801273a <get_fat.isra.0+0xb6>
			wc |= fs->win[bc % SS(fs)] << 8;
 80126e2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80126e6:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80126e8:	443d      	add	r5, r7
 80126ea:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80126ee:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80126f2:	d52f      	bpl.n	8012754 <get_fat.isra.0+0xd0>
 80126f4:	0900      	lsrs	r0, r0, #4
}
 80126f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80126f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80126fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80126fc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012700:	4299      	cmp	r1, r3
 8012702:	d002      	beq.n	801270a <get_fat.isra.0+0x86>
 8012704:	f7ff fee6 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012708:	b9b8      	cbnz	r0, 801273a <get_fat.isra.0+0xb6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801270a:	00a4      	lsls	r4, r4, #2
 801270c:	3534      	adds	r5, #52	; 0x34
 801270e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8012712:	192a      	adds	r2, r5, r4
	rv = rv << 8 | ptr[0];
 8012714:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 8012716:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8012718:	7853      	ldrb	r3, [r2, #1]
 801271a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801271e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012722:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8012726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012728:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801272a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801272c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012730:	4299      	cmp	r1, r3
 8012732:	d005      	beq.n	8012740 <get_fat.isra.0+0xbc>
 8012734:	f7ff fece 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012738:	b110      	cbz	r0, 8012740 <get_fat.isra.0+0xbc>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801273a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012740:	0064      	lsls	r4, r4, #1
 8012742:	3534      	adds	r5, #52	; 0x34
 8012744:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8012748:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 801274a:	5d28      	ldrb	r0, [r5, r4]
 801274c:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801274e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8012752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012754:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8012758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801275a:	bf00      	nop

0801275c <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801275c:	69c3      	ldr	r3, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 801275e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012762:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012764:	b37b      	cbz	r3, 80127c6 <dir_next.constprop.0+0x6a>
 8012766:	3520      	adds	r5, #32
 8012768:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801276c:	d22b      	bcs.n	80127c6 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801276e:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8012772:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8012774:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012776:	b137      	cbz	r7, 8012786 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012778:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 801277a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 801277c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801277e:	443e      	add	r6, r7
 8012780:	6226      	str	r6, [r4, #32]
}
 8012782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8012786:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8012788:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 801278a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 801278c:	b1f1      	cbz	r1, 80127cc <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801278e:	8973      	ldrh	r3, [r6, #10]
 8012790:	3b01      	subs	r3, #1
 8012792:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8012796:	d1ef      	bne.n	8012778 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012798:	4630      	mov	r0, r6
 801279a:	f7ff ff73 	bl	8012684 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801279e:	2801      	cmp	r0, #1
 80127a0:	d91c      	bls.n	80127dc <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80127a2:	1c43      	adds	r3, r0, #1
 80127a4:	d01c      	beq.n	80127e0 <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80127a6:	69b3      	ldr	r3, [r6, #24]
 80127a8:	4298      	cmp	r0, r3
 80127aa:	d213      	bcs.n	80127d4 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80127ac:	3b02      	subs	r3, #2
	clst -= 2;
 80127ae:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80127b0:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d204      	bcs.n	80127c0 <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 80127b6:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 80127ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80127bc:	fb02 3808 	mla	r8, r2, r8, r3
				dp->sect = clust2sect(fs, clst);
 80127c0:	f8c4 801c 	str.w	r8, [r4, #28]
 80127c4:	e7d8      	b.n	8012778 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80127c6:	2004      	movs	r0, #4
}
 80127c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80127cc:	8933      	ldrh	r3, [r6, #8]
 80127ce:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80127d2:	d8d1      	bhi.n	8012778 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 80127d4:	2300      	movs	r3, #0
 80127d6:	2004      	movs	r0, #4
 80127d8:	61e3      	str	r3, [r4, #28]
 80127da:	e7d2      	b.n	8012782 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80127dc:	2002      	movs	r0, #2
 80127de:	e7d0      	b.n	8012782 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80127e0:	2001      	movs	r0, #1
 80127e2:	e7ce      	b.n	8012782 <dir_next.constprop.0+0x26>

080127e4 <dir_read.constprop.0>:
FRESULT dir_read (
 80127e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 80127e8:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
 80127ec:	b083      	sub	sp, #12
 80127ee:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80127f0:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 80127f2:	f1ba 0f00 	cmp.w	sl, #0
 80127f6:	d064      	beq.n	80128c2 <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
 80127f8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80127fc:	f106 0834 	add.w	r8, r6, #52	; 0x34
 8012800:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012802:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8012804:	4555      	cmp	r5, sl
 8012806:	d015      	beq.n	8012834 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012808:	78f3      	ldrb	r3, [r6, #3]
 801280a:	2b00      	cmp	r3, #0
 801280c:	f040 8102 	bne.w	8012a14 <dir_read.constprop.0+0x230>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012810:	2301      	movs	r3, #1
 8012812:	4652      	mov	r2, sl
 8012814:	4641      	mov	r1, r8
 8012816:	7870      	ldrb	r0, [r6, #1]
 8012818:	f7ff fdaa 	bl	8012370 <disk_read>
 801281c:	b140      	cbz	r0, 8012830 <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 801281e:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8012822:	2001      	movs	r0, #1
			fs->winsect = sector;
 8012824:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012826:	2300      	movs	r3, #0
 8012828:	61e3      	str	r3, [r4, #28]
}
 801282a:	b003      	add	sp, #12
 801282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8012830:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012834:	6a21      	ldr	r1, [r4, #32]
 8012836:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8012838:	2a00      	cmp	r2, #0
 801283a:	d042      	beq.n	80128c2 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801283c:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801283e:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012844:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012846:	d005      	beq.n	8012854 <dir_read.constprop.0+0x70>
 8012848:	2a2e      	cmp	r2, #46	; 0x2e
 801284a:	d003      	beq.n	8012854 <dir_read.constprop.0+0x70>
 801284c:	f023 0020 	bic.w	r0, r3, #32
 8012850:	2808      	cmp	r0, #8
 8012852:	d13d      	bne.n	80128d0 <dir_read.constprop.0+0xec>
 8012854:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8012856:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012858:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801285a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 801285e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8012862:	d22e      	bcs.n	80128c2 <dir_read.constprop.0+0xde>
 8012864:	f1ba 0f00 	cmp.w	sl, #0
 8012868:	d02b      	beq.n	80128c2 <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801286a:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801286e:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012870:	bb4a      	cbnz	r2, 80128c6 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
 8012872:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8012876:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8012878:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
 801287c:	b969      	cbnz	r1, 801289a <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801287e:	891a      	ldrh	r2, [r3, #8]
 8012880:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8012884:	d91d      	bls.n	80128c2 <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012886:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8012888:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801288a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 801288c:	f1ba 0f00 	cmp.w	sl, #0
 8012890:	d1b7      	bne.n	8012802 <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012892:	2000      	movs	r0, #0
}
 8012894:	b003      	add	sp, #12
 8012896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801289a:	895a      	ldrh	r2, [r3, #10]
 801289c:	3a01      	subs	r2, #1
 801289e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 80128a2:	d1f0      	bne.n	8012886 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80128a4:	4618      	mov	r0, r3
 80128a6:	9301      	str	r3, [sp, #4]
 80128a8:	f7ff feec 	bl	8012684 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80128ac:	2801      	cmp	r0, #1
 80128ae:	f240 80e6 	bls.w	8012a7e <dir_read.constprop.0+0x29a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80128b2:	1c43      	adds	r3, r0, #1
 80128b4:	f000 80b5 	beq.w	8012a22 <dir_read.constprop.0+0x23e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80128b8:	9b01      	ldr	r3, [sp, #4]
 80128ba:	699a      	ldr	r2, [r3, #24]
 80128bc:	4290      	cmp	r0, r2
 80128be:	f0c0 80d1 	bcc.w	8012a64 <dir_read.constprop.0+0x280>
	FRESULT res = FR_NO_FILE;
 80128c2:	2004      	movs	r0, #4
 80128c4:	e7af      	b.n	8012826 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80128c6:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80128c8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80128ca:	441a      	add	r2, r3
 80128cc:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 80128ce:	e798      	b.n	8012802 <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 80128d0:	2b0f      	cmp	r3, #15
 80128d2:	f040 80dc 	bne.w	8012a8e <dir_read.constprop.0+0x2aa>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80128d6:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 80128d8:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80128da:	f140 80a4 	bpl.w	8012a26 <dir_read.constprop.0+0x242>
						c &= (BYTE)~LLEF; ord = c;
 80128de:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80128e2:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 80128e6:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80128e8:	7b4b      	ldrb	r3, [r1, #13]
 80128ea:	454b      	cmp	r3, r9
 80128ec:	d1b3      	bne.n	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80128ee:	7eca      	ldrb	r2, [r1, #27]
 80128f0:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80128f2:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80128f6:	d1ae      	bne.n	8012856 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80128f8:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 80128fa:	788a      	ldrb	r2, [r1, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80128fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 8012900:	7848      	ldrb	r0, [r1, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012902:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 8012904:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012908:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801290c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012910:	2bfe      	cmp	r3, #254	; 0xfe
 8012912:	d8a0      	bhi.n	8012856 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012914:	f8d6 e00c 	ldr.w	lr, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012918:	1c5a      	adds	r2, r3, #1
 801291a:	f82e 0013 	strh.w	r0, [lr, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 801291e:	f891 a004 	ldrb.w	sl, [r1, #4]
 8012922:	f891 c003 	ldrb.w	ip, [r1, #3]
 8012926:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
		if (wc) {
 801292a:	2800      	cmp	r0, #0
 801292c:	f040 80b7 	bne.w	8012a9e <dir_read.constprop.0+0x2ba>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012934:	459c      	cmp	ip, r3
 8012936:	d18e      	bne.n	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8012938:	798b      	ldrb	r3, [r1, #6]
 801293a:	f891 b005 	ldrb.w	fp, [r1, #5]
 801293e:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012946:	459b      	cmp	fp, r3
 8012948:	d185      	bne.n	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801294a:	7a0b      	ldrb	r3, [r1, #8]
 801294c:	f891 a007 	ldrb.w	sl, [r1, #7]
 8012950:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012958:	459a      	cmp	sl, r3
 801295a:	f47f af7c 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801295e:	7a8b      	ldrb	r3, [r1, #10]
 8012960:	f891 c009 	ldrb.w	ip, [r1, #9]
 8012964:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801296c:	459c      	cmp	ip, r3
 801296e:	f47f af72 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8012972:	7bcb      	ldrb	r3, [r1, #15]
 8012974:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8012978:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801297c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012980:	459b      	cmp	fp, r3
 8012982:	f47f af68 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8012986:	7c4b      	ldrb	r3, [r1, #17]
 8012988:	f891 a010 	ldrb.w	sl, [r1, #16]
 801298c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012994:	459a      	cmp	sl, r3
 8012996:	f47f af5e 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801299a:	7ccb      	ldrb	r3, [r1, #19]
 801299c:	f891 c012 	ldrb.w	ip, [r1, #18]
 80129a0:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129a8:	459c      	cmp	ip, r3
 80129aa:	f47f af54 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80129ae:	7d4b      	ldrb	r3, [r1, #21]
 80129b0:	f891 a014 	ldrb.w	sl, [r1, #20]
 80129b4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129bc:	459a      	cmp	sl, r3
 80129be:	f47f af4a 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80129c2:	7dcb      	ldrb	r3, [r1, #23]
 80129c4:	f891 c016 	ldrb.w	ip, [r1, #22]
 80129c8:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129d0:	459c      	cmp	ip, r3
 80129d2:	f47f af40 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80129d6:	7e4b      	ldrb	r3, [r1, #25]
 80129d8:	f891 a018 	ldrb.w	sl, [r1, #24]
 80129dc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129e4:	459a      	cmp	sl, r3
 80129e6:	f47f af36 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80129ea:	7f4b      	ldrb	r3, [r1, #29]
 80129ec:	f891 c01c 	ldrb.w	ip, [r1, #28]
 80129f0:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80129f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129f8:	459c      	cmp	ip, r3
 80129fa:	f47f af2c 	bne.w	8012856 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 80129fe:	7fcb      	ldrb	r3, [r1, #31]
 8012a00:	f891 a01e 	ldrb.w	sl, [r1, #30]
 8012a04:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a0c:	459a      	cmp	sl, r3
 8012a0e:	f000 8101 	beq.w	8012c14 <dir_read.constprop.0+0x430>
 8012a12:	e720      	b.n	8012856 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012a14:	2301      	movs	r3, #1
 8012a16:	462a      	mov	r2, r5
 8012a18:	4641      	mov	r1, r8
 8012a1a:	7870      	ldrb	r0, [r6, #1]
 8012a1c:	f7ff fcb6 	bl	801238c <disk_write>
 8012a20:	b128      	cbz	r0, 8012a2e <dir_read.constprop.0+0x24a>
	FRESULT res = FR_NO_FILE;
 8012a22:	2001      	movs	r0, #1
 8012a24:	e6ff      	b.n	8012826 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012a26:	42ba      	cmp	r2, r7
 8012a28:	f47f af15 	bne.w	8012856 <dir_read.constprop.0+0x72>
 8012a2c:	e75c      	b.n	80128e8 <dir_read.constprop.0+0x104>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012a2e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012a30:	69f3      	ldr	r3, [r6, #28]
 8012a32:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8012a34:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012a36:	429a      	cmp	r2, r3
 8012a38:	f4bf aeea 	bcs.w	8012810 <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012a3c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8012a40:	f1bb 0f01 	cmp.w	fp, #1
 8012a44:	d801      	bhi.n	8012a4a <dir_read.constprop.0+0x266>
 8012a46:	e6e3      	b.n	8012810 <dir_read.constprop.0+0x2c>
 8012a48:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8012a4a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8012a50:	2301      	movs	r3, #1
 8012a52:	4641      	mov	r1, r8
 8012a54:	462a      	mov	r2, r5
 8012a56:	7870      	ldrb	r0, [r6, #1]
 8012a58:	f7ff fc98 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012a5c:	f1bb 0f01 	cmp.w	fp, #1
 8012a60:	d1f2      	bne.n	8012a48 <dir_read.constprop.0+0x264>
 8012a62:	e6d5      	b.n	8012810 <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a64:	3a02      	subs	r2, #2
	clst -= 2;
 8012a66:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8012a68:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a6a:	4291      	cmp	r1, r2
 8012a6c:	d209      	bcs.n	8012a82 <dir_read.constprop.0+0x29e>
	return clst * fs->csize + fs->database;
 8012a6e:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 8012a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a74:	fb01 2a0a 	mla	sl, r1, sl, r2
				dp->sect = clust2sect(fs, clst);
 8012a78:	f8c4 a01c 	str.w	sl, [r4, #28]
 8012a7c:	e703      	b.n	8012886 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012a7e:	2002      	movs	r0, #2
 8012a80:	e6d1      	b.n	8012826 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012a82:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 8012a84:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8012a88:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012a8a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8012a8c:	e701      	b.n	8012892 <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012a8e:	2f00      	cmp	r7, #0
 8012a90:	f000 80cb 	beq.w	8012c2a <dir_read.constprop.0+0x446>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012a94:	f04f 33ff 	mov.w	r3, #4294967295
 8012a98:	2000      	movs	r0, #0
 8012a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a9c:	e6c5      	b.n	801282a <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012a9e:	2aff      	cmp	r2, #255	; 0xff
 8012aa0:	f000 810d 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012aa4:	f82e c012 	strh.w	ip, [lr, r2, lsl #1]
 8012aa8:	0050      	lsls	r0, r2, #1
	rv = rv << 8 | ptr[0];
 8012aaa:	f891 a006 	ldrb.w	sl, [r1, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012aae:	1c9a      	adds	r2, r3, #2
	rv = rv << 8 | ptr[0];
 8012ab0:	f891 b005 	ldrb.w	fp, [r1, #5]
 8012ab4:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 8012ab8:	f1bc 0f00 	cmp.w	ip, #0
 8012abc:	f43f af41 	beq.w	8012942 <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012ac0:	2aff      	cmp	r2, #255	; 0xff
 8012ac2:	f000 80fc 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012ac6:	4470      	add	r0, lr
 8012ac8:	1cda      	adds	r2, r3, #3
 8012aca:	f8a0 b002 	strh.w	fp, [r0, #2]
	rv = rv << 8 | ptr[0];
 8012ace:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012ad2:	f891 a007 	ldrb.w	sl, [r1, #7]
 8012ad6:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 8012ada:	f1bb 0f00 	cmp.w	fp, #0
 8012ade:	f43f af39 	beq.w	8012954 <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012ae2:	2aff      	cmp	r2, #255	; 0xff
 8012ae4:	f000 80eb 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012ae8:	f8a0 a004 	strh.w	sl, [r0, #4]
 8012aec:	1d1a      	adds	r2, r3, #4
	rv = rv << 8 | ptr[0];
 8012aee:	f891 b00a 	ldrb.w	fp, [r1, #10]
 8012af2:	f891 c009 	ldrb.w	ip, [r1, #9]
 8012af6:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8012afa:	f1ba 0f00 	cmp.w	sl, #0
 8012afe:	f43f af33 	beq.w	8012968 <dir_read.constprop.0+0x184>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012b02:	2aff      	cmp	r2, #255	; 0xff
 8012b04:	f000 80db 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012b08:	f8a0 c006 	strh.w	ip, [r0, #6]
 8012b0c:	1d5a      	adds	r2, r3, #5
	rv = rv << 8 | ptr[0];
 8012b0e:	f891 a00f 	ldrb.w	sl, [r1, #15]
 8012b12:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8012b16:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 8012b1a:	f1bc 0f00 	cmp.w	ip, #0
 8012b1e:	f43f af2d 	beq.w	801297c <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012b22:	2aff      	cmp	r2, #255	; 0xff
 8012b24:	f000 80cb 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012b28:	f8a0 b008 	strh.w	fp, [r0, #8]
 8012b2c:	1d9a      	adds	r2, r3, #6
	rv = rv << 8 | ptr[0];
 8012b2e:	f891 c011 	ldrb.w	ip, [r1, #17]
 8012b32:	f891 a010 	ldrb.w	sl, [r1, #16]
 8012b36:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 8012b3a:	f1bb 0f00 	cmp.w	fp, #0
 8012b3e:	f43f af27 	beq.w	8012990 <dir_read.constprop.0+0x1ac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012b42:	2aff      	cmp	r2, #255	; 0xff
 8012b44:	f000 80bb 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012b48:	f8a0 a00a 	strh.w	sl, [r0, #10]
 8012b4c:	1dda      	adds	r2, r3, #7
	rv = rv << 8 | ptr[0];
 8012b4e:	f891 b013 	ldrb.w	fp, [r1, #19]
 8012b52:	f891 c012 	ldrb.w	ip, [r1, #18]
 8012b56:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8012b5a:	f1ba 0f00 	cmp.w	sl, #0
 8012b5e:	f43f af21 	beq.w	80129a4 <dir_read.constprop.0+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012b62:	2aff      	cmp	r2, #255	; 0xff
 8012b64:	f000 80ab 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012b68:	f8a0 c00c 	strh.w	ip, [r0, #12]
 8012b6c:	f103 0208 	add.w	r2, r3, #8
	rv = rv << 8 | ptr[0];
 8012b70:	f891 b015 	ldrb.w	fp, [r1, #21]
 8012b74:	f891 a014 	ldrb.w	sl, [r1, #20]
 8012b78:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8012b7c:	f1bc 0f00 	cmp.w	ip, #0
 8012b80:	f43f af1a 	beq.w	80129b8 <dir_read.constprop.0+0x1d4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012b84:	2aff      	cmp	r2, #255	; 0xff
 8012b86:	f000 809a 	beq.w	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012b8a:	f8a0 a00e 	strh.w	sl, [r0, #14]
 8012b8e:	f103 0209 	add.w	r2, r3, #9
	rv = rv << 8 | ptr[0];
 8012b92:	f891 b017 	ldrb.w	fp, [r1, #23]
 8012b96:	f891 c016 	ldrb.w	ip, [r1, #22]
 8012b9a:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8012b9e:	f1ba 0f00 	cmp.w	sl, #0
 8012ba2:	f43f af13 	beq.w	80129cc <dir_read.constprop.0+0x1e8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012ba6:	2aff      	cmp	r2, #255	; 0xff
 8012ba8:	f43f ae55 	beq.w	8012856 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012bac:	f8a0 c010 	strh.w	ip, [r0, #16]
 8012bb0:	f103 020a 	add.w	r2, r3, #10
	rv = rv << 8 | ptr[0];
 8012bb4:	f891 b019 	ldrb.w	fp, [r1, #25]
 8012bb8:	f891 a018 	ldrb.w	sl, [r1, #24]
 8012bbc:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8012bc0:	f1bc 0f00 	cmp.w	ip, #0
 8012bc4:	f43f af0c 	beq.w	80129e0 <dir_read.constprop.0+0x1fc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012bc8:	2aff      	cmp	r2, #255	; 0xff
 8012bca:	d078      	beq.n	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012bcc:	f8a0 a012 	strh.w	sl, [r0, #18]
 8012bd0:	f103 020b 	add.w	r2, r3, #11
	rv = rv << 8 | ptr[0];
 8012bd4:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8012bd8:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8012bdc:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8012be0:	f1ba 0f00 	cmp.w	sl, #0
 8012be4:	f43f af06 	beq.w	80129f4 <dir_read.constprop.0+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012be8:	2aff      	cmp	r2, #255	; 0xff
 8012bea:	d068      	beq.n	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012bec:	f8a0 c014 	strh.w	ip, [r0, #20]
 8012bf0:	f103 020c 	add.w	r2, r3, #12
	rv = rv << 8 | ptr[0];
 8012bf4:	f891 b01f 	ldrb.w	fp, [r1, #31]
 8012bf8:	f891 a01e 	ldrb.w	sl, [r1, #30]
 8012bfc:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8012c00:	f1bc 0f00 	cmp.w	ip, #0
 8012c04:	f43f af00 	beq.w	8012a08 <dir_read.constprop.0+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012c08:	2aff      	cmp	r2, #255	; 0xff
 8012c0a:	d058      	beq.n	8012cbe <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012c0c:	f103 020d 	add.w	r2, r3, #13
 8012c10:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012c14:	780b      	ldrb	r3, [r1, #0]
 8012c16:	0659      	lsls	r1, r3, #25
 8012c18:	d504      	bpl.n	8012c24 <dir_read.constprop.0+0x440>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012c1a:	2aff      	cmp	r2, #255	; 0xff
 8012c1c:	d04f      	beq.n	8012cbe <dir_read.constprop.0+0x4da>
		lfnbuf[i] = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	f82e 3012 	strh.w	r3, [lr, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012c24:	3f01      	subs	r7, #1
 8012c26:	b2ff      	uxtb	r7, r7
 8012c28:	e616      	b.n	8012858 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012c2a:	780a      	ldrb	r2, [r1, #0]
 8012c2c:	784e      	ldrb	r6, [r1, #1]
 8012c2e:	01d3      	lsls	r3, r2, #7
 8012c30:	788d      	ldrb	r5, [r1, #2]
 8012c32:	78c8      	ldrb	r0, [r1, #3]
 8012c34:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8012c38:	199a      	adds	r2, r3, r6
 8012c3a:	790e      	ldrb	r6, [r1, #4]
 8012c3c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c40:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c44:	fa55 f283 	uxtab	r2, r5, r3
 8012c48:	794d      	ldrb	r5, [r1, #5]
 8012c4a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c4e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c52:	fa50 f283 	uxtab	r2, r0, r3
 8012c56:	7988      	ldrb	r0, [r1, #6]
 8012c58:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c5c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c60:	fa56 f283 	uxtab	r2, r6, r3
 8012c64:	79ce      	ldrb	r6, [r1, #7]
 8012c66:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c6a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c6e:	fa55 f283 	uxtab	r2, r5, r3
 8012c72:	7a0d      	ldrb	r5, [r1, #8]
 8012c74:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c78:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c7c:	fa50 f283 	uxtab	r2, r0, r3
 8012c80:	7a48      	ldrb	r0, [r1, #9]
 8012c82:	7a89      	ldrb	r1, [r1, #10]
 8012c84:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c88:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c8c:	fa56 f283 	uxtab	r2, r6, r3
 8012c90:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012c94:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012c98:	fa55 f283 	uxtab	r2, r5, r3
 8012c9c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012ca0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012ca4:	fa50 f283 	uxtab	r2, r0, r3
 8012ca8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012cac:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012cb0:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	4599      	cmp	r9, r3
 8012cb8:	f47f aeec 	bne.w	8012a94 <dir_read.constprop.0+0x2b0>
 8012cbc:	e5e9      	b.n	8012892 <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012cbe:	4617      	mov	r7, r2
 8012cc0:	e5ca      	b.n	8012858 <dir_read.constprop.0+0x74>
 8012cc2:	bf00      	nop

08012cc4 <sync_fs>:
{
 8012cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012cc6:	78c3      	ldrb	r3, [r0, #3]
{
 8012cc8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012cca:	b95b      	cbnz	r3, 8012ce4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012ccc:	7823      	ldrb	r3, [r4, #0]
 8012cce:	2b03      	cmp	r3, #3
 8012cd0:	d029      	beq.n	8012d26 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	7860      	ldrb	r0, [r4, #1]
 8012cd6:	4611      	mov	r1, r2
 8012cd8:	f7ff fb66 	bl	80123a8 <disk_ioctl>
			res = FR_DISK_ERR;
 8012cdc:	3800      	subs	r0, #0
 8012cde:	bf18      	it	ne
 8012ce0:	2001      	movne	r0, #1
}
 8012ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8012ce4:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012ce6:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8012cea:	2301      	movs	r3, #1
 8012cec:	7840      	ldrb	r0, [r0, #1]
 8012cee:	462a      	mov	r2, r5
 8012cf0:	4639      	mov	r1, r7
 8012cf2:	f7ff fb4b 	bl	801238c <disk_write>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d150      	bne.n	8012d9c <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012cfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012cfc:	69e3      	ldr	r3, [r4, #28]
 8012cfe:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8012d00:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d2e2      	bcs.n	8012ccc <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d06:	78a6      	ldrb	r6, [r4, #2]
 8012d08:	2e01      	cmp	r6, #1
 8012d0a:	d801      	bhi.n	8012d10 <sync_fs+0x4c>
 8012d0c:	e7de      	b.n	8012ccc <sync_fs+0x8>
 8012d0e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8012d10:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d12:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8012d14:	2301      	movs	r3, #1
 8012d16:	4639      	mov	r1, r7
 8012d18:	462a      	mov	r2, r5
 8012d1a:	7860      	ldrb	r0, [r4, #1]
 8012d1c:	f7ff fb36 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d20:	2e01      	cmp	r6, #1
 8012d22:	d1f4      	bne.n	8012d0e <sync_fs+0x4a>
 8012d24:	e7d2      	b.n	8012ccc <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012d26:	7926      	ldrb	r6, [r4, #4]
 8012d28:	2e01      	cmp	r6, #1
 8012d2a:	d1d2      	bne.n	8012cd2 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8012d2c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	BYTE *d = (BYTE*)dst;
 8012d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d34:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8012d36:	2755      	movs	r7, #85	; 0x55
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f00f fa67 	bl	802220c <memset>
 8012d3e:	4603      	mov	r3, r0
			fs->winsect = fs->volbase + 1;
 8012d40:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012d42:	4619      	mov	r1, r3
 8012d44:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 8012d46:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8012d48:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012d4c:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
			fs->winsect = fs->volbase + 1;
 8012d50:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8012d52:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8012d56:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8012d5a:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012d5c:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8012d60:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8012d62:	f884 c21d 	strb.w	ip, [r4, #541]	; 0x21d
	*ptr++ = (BYTE)val; val >>= 8;
 8012d66:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val; val >>= 8;
 8012d6a:	0a06      	lsrs	r6, r0, #8
	*ptr++ = (BYTE)val;
 8012d6c:	f884 521f 	strb.w	r5, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8012d70:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012d72:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8012d74:	f884 6221 	strb.w	r6, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 8012d78:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 8012d7c:	26aa      	movs	r6, #170	; 0xaa
	*ptr++ = (BYTE)val;
 8012d7e:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 8012d82:	4d07      	ldr	r5, [pc, #28]	; (8012da0 <sync_fs+0xdc>)
 8012d84:	4807      	ldr	r0, [pc, #28]	; (8012da4 <sync_fs+0xe0>)
	*ptr++ = (BYTE)val;
 8012d86:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8012d8a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8012d8e:	6365      	str	r5, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012d90:	7860      	ldrb	r0, [r4, #1]
 8012d92:	f7ff fafb 	bl	801238c <disk_write>
			fs->fsi_flag = 0;
 8012d96:	2300      	movs	r3, #0
 8012d98:	7123      	strb	r3, [r4, #4]
 8012d9a:	e79a      	b.n	8012cd2 <sync_fs+0xe>
			res = FR_DISK_ERR;
 8012d9c:	2001      	movs	r0, #1
}
 8012d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da0:	41615252 	.word	0x41615252
 8012da4:	61417272 	.word	0x61417272

08012da8 <create_chain>:
{
 8012da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dac:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 8012dae:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 8012db0:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8012db4:	2900      	cmp	r1, #0
 8012db6:	f040 80bc 	bne.w	8012f32 <create_chain+0x18a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012dba:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012dbe:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012dc2:	b9ce      	cbnz	r6, 8012df8 <create_chain+0x50>
 8012dc4:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8012dc6:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8012dc8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012dca:	429c      	cmp	r4, r3
 8012dcc:	d318      	bcc.n	8012e00 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 8012dce:	2e01      	cmp	r6, #1
 8012dd0:	f240 80ab 	bls.w	8012f2a <create_chain+0x182>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012dd4:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8012dd8:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012dda:	69ab      	ldr	r3, [r5, #24]
 8012ddc:	42a3      	cmp	r3, r4
 8012dde:	d907      	bls.n	8012df0 <create_chain+0x48>
		switch (fs->fs_type) {
 8012de0:	782b      	ldrb	r3, [r5, #0]
 8012de2:	2b02      	cmp	r3, #2
 8012de4:	f000 808c 	beq.w	8012f00 <create_chain+0x158>
 8012de8:	2b03      	cmp	r3, #3
 8012dea:	d044      	beq.n	8012e76 <create_chain+0xce>
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d00c      	beq.n	8012e0a <create_chain+0x62>
 8012df0:	2401      	movs	r4, #1
}
 8012df2:	4620      	mov	r0, r4
 8012df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012df8:	42b3      	cmp	r3, r6
 8012dfa:	bf98      	it	ls
 8012dfc:	2601      	movls	r6, #1
 8012dfe:	e7e2      	b.n	8012dc6 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012e00:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e02:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012e06:	d9f3      	bls.n	8012df0 <create_chain+0x48>
 8012e08:	e7e7      	b.n	8012dda <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 8012e0a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e10:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e12:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e16:	4291      	cmp	r1, r2
 8012e18:	d005      	beq.n	8012e26 <create_chain+0x7e>
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f7ff fb5a 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e20:	bb20      	cbnz	r0, 8012e6c <create_chain+0xc4>
 8012e22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012e24:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8012e26:	f3cb 0008 	ubfx	r0, fp, #0, #9
 8012e2a:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e2e:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8012e32:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e34:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8012e36:	f890 a034 	ldrb.w	sl, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e3a:	d003      	beq.n	8012e44 <create_chain+0x9c>
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f7ff fb49 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e42:	b998      	cbnz	r0, 8012e6c <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012e44:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012e48:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8012e4a:	445d      	add	r5, fp
 8012e4c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8012e50:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012e54:	d57d      	bpl.n	8012f52 <create_chain+0x1aa>
 8012e56:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8012e58:	b343      	cbz	r3, 8012eac <create_chain+0x104>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e5a:	2b01      	cmp	r3, #1
 8012e5c:	d0c8      	beq.n	8012df0 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e5e:	42a6      	cmp	r6, r4
 8012e60:	d063      	beq.n	8012f2a <create_chain+0x182>
 8012e62:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012e66:	e7af      	b.n	8012dc8 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012e68:	2801      	cmp	r0, #1
 8012e6a:	d1c1      	bne.n	8012df0 <create_chain+0x48>
 8012e6c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8012e70:	4620      	mov	r0, r4
 8012e72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e76:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e7a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e7e:	4299      	cmp	r1, r3
 8012e80:	d004      	beq.n	8012e8c <create_chain+0xe4>
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7ff fb26 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	d1ef      	bne.n	8012e6c <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012e8c:	00a3      	lsls	r3, r4, #2
 8012e8e:	3534      	adds	r5, #52	; 0x34
 8012e90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012e94:	18e9      	adds	r1, r5, r3
	rv = rv << 8 | ptr[0];
 8012e96:	5ceb      	ldrb	r3, [r5, r3]
	rv = rv << 8 | ptr[2];
 8012e98:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 8012e9a:	784a      	ldrb	r2, [r1, #1]
 8012e9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8012ea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012ea4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d1d6      	bne.n	8012e5a <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012eac:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012eb0:	42a3      	cmp	r3, r4
 8012eb2:	d99d      	bls.n	8012df0 <create_chain+0x48>
 8012eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb8:	4621      	mov	r1, r4
 8012eba:	4640      	mov	r0, r8
 8012ebc:	f7ff fb44 	bl	8012548 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8012ec0:	b958      	cbnz	r0, 8012eda <create_chain+0x132>
 8012ec2:	b157      	cbz	r7, 8012eda <create_chain+0x132>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012ec4:	2f01      	cmp	r7, #1
 8012ec6:	d993      	bls.n	8012df0 <create_chain+0x48>
 8012ec8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012ecc:	429f      	cmp	r7, r3
 8012ece:	d28f      	bcs.n	8012df0 <create_chain+0x48>
 8012ed0:	4639      	mov	r1, r7
 8012ed2:	4622      	mov	r2, r4
 8012ed4:	4640      	mov	r0, r8
 8012ed6:	f7ff fb37 	bl	8012548 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d1c4      	bne.n	8012e68 <create_chain+0xc0>
		fs->last_clst = ncl;
 8012ede:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012ee2:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 8012ee6:	3b02      	subs	r3, #2
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d802      	bhi.n	8012ef2 <create_chain+0x14a>
 8012eec:	3a01      	subs	r2, #1
 8012eee:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8012ef2:	f898 3004 	ldrb.w	r3, [r8, #4]
 8012ef6:	f043 0301 	orr.w	r3, r3, #1
 8012efa:	f888 3004 	strb.w	r3, [r8, #4]
 8012efe:	e778      	b.n	8012df2 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f00:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012f02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f04:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012f08:	4299      	cmp	r1, r3
 8012f0a:	d004      	beq.n	8012f16 <create_chain+0x16e>
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f7ff fae1 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d1aa      	bne.n	8012e6c <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012f16:	0063      	lsls	r3, r4, #1
 8012f18:	3534      	adds	r5, #52	; 0x34
 8012f1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012f1e:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8012f20:	5ceb      	ldrb	r3, [r5, r3]
 8012f22:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			break;
 8012f28:	e796      	b.n	8012e58 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 8012f2a:	2400      	movs	r4, #0
}
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012f32:	4640      	mov	r0, r8
 8012f34:	f7ff fba6 	bl	8012684 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012f38:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012f3a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012f3c:	f67f af58 	bls.w	8012df0 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012f40:	1c41      	adds	r1, r0, #1
 8012f42:	d093      	beq.n	8012e6c <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012f44:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012f48:	4283      	cmp	r3, r0
 8012f4a:	f63f af52 	bhi.w	8012df2 <create_chain+0x4a>
 8012f4e:	463e      	mov	r6, r7
 8012f50:	e739      	b.n	8012dc6 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f56:	e77f      	b.n	8012e58 <create_chain+0xb0>

08012f58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012f58:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012f5a:	f04f 36ff 	mov.w	r6, #4294967295
 8012f5e:	2300      	movs	r3, #0
{
 8012f60:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012f62:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012f64:	70c3      	strb	r3, [r0, #3]
 8012f66:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012f68:	d00c      	beq.n	8012f84 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012f6a:	460d      	mov	r5, r1
 8012f6c:	460a      	mov	r2, r1
 8012f6e:	2301      	movs	r3, #1
 8012f70:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8012f74:	7840      	ldrb	r0, [r0, #1]
 8012f76:	f7ff f9fb 	bl	8012370 <disk_read>
 8012f7a:	b110      	cbz	r0, 8012f82 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012f7c:	2004      	movs	r0, #4
			fs->winsect = sector;
 8012f7e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8012f80:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8012f82:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8012f84:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f88:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8012f8c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8012f90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d12a      	bne.n	8012fee <check_fs+0x96>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012f98:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8012f9c:	2be9      	cmp	r3, #233	; 0xe9
 8012f9e:	d007      	beq.n	8012fb0 <check_fs+0x58>
 8012fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fa2:	4a15      	ldr	r2, [pc, #84]	; (8012ff8 <check_fs+0xa0>)
 8012fa4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d001      	beq.n	8012fb0 <check_fs+0x58>
	return 2;
 8012fac:	2002      	movs	r0, #2
}
 8012fae:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 8012fb0:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 8012fb4:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 8012fb8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 8012fbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012fc0:	490e      	ldr	r1, [pc, #56]	; (8012ffc <check_fs+0xa4>)
	rv = rv << 8 | ptr[0];
 8012fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012fc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012fca:	428b      	cmp	r3, r1
 8012fcc:	d011      	beq.n	8012ff2 <check_fs+0x9a>
	rv = rv << 8 | ptr[2];
 8012fce:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 8012fd2:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 8012fd6:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 8012fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012fde:	4a08      	ldr	r2, [pc, #32]	; (8013000 <check_fs+0xa8>)
	rv = rv << 8 | ptr[0];
 8012fe0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012fe4:	4290      	cmp	r0, r2
 8012fe6:	bf14      	ite	ne
 8012fe8:	2002      	movne	r0, #2
 8012fea:	2000      	moveq	r0, #0
}
 8012fec:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012fee:	2003      	movs	r0, #3
}
 8012ff0:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012ff2:	2000      	movs	r0, #0
}
 8012ff4:	bd70      	pop	{r4, r5, r6, pc}
 8012ff6:	bf00      	nop
 8012ff8:	009000eb 	.word	0x009000eb
 8012ffc:	00544146 	.word	0x00544146
 8013000:	33544146 	.word	0x33544146

08013004 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 8013008:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801300a:	2400      	movs	r4, #0
 801300c:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 801300e:	b193      	cbz	r3, 8013036 <find_volume+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013010:	781e      	ldrb	r6, [r3, #0]
 8013012:	2e1f      	cmp	r6, #31
 8013014:	d913      	bls.n	801303e <find_volume+0x3a>
 8013016:	2e3a      	cmp	r6, #58	; 0x3a
 8013018:	d011      	beq.n	801303e <find_volume+0x3a>
 801301a:	461d      	mov	r5, r3
 801301c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8013020:	2c1f      	cmp	r4, #31
 8013022:	d90e      	bls.n	8013042 <find_volume+0x3e>
 8013024:	2c3a      	cmp	r4, #58	; 0x3a
 8013026:	d1f9      	bne.n	801301c <find_volume+0x18>
			i = *tp++ - '0';
 8013028:	3301      	adds	r3, #1
 801302a:	3e30      	subs	r6, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801302c:	429d      	cmp	r5, r3
 801302e:	d102      	bne.n	8013036 <find_volume+0x32>
 8013030:	2e01      	cmp	r6, #1
 8013032:	f240 814d 	bls.w	80132d0 <find_volume+0x2cc>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8013036:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8013038:	4628      	mov	r0, r5
 801303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801303e:	4634      	mov	r4, r6
 8013040:	461d      	mov	r5, r3
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013042:	2c3a      	cmp	r4, #58	; 0x3a
 8013044:	d0f0      	beq.n	8013028 <find_volume+0x24>
		vol = 0;		/* Drive 0 */
 8013046:	2600      	movs	r6, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013048:	4bc8      	ldr	r3, [pc, #800]	; (801336c <find_volume+0x368>)
 801304a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801304e:	2c00      	cmp	r4, #0
 8013050:	f000 812a 	beq.w	80132a8 <find_volume+0x2a4>
	*rfs = fs;							/* Return pointer to the file system object */
 8013054:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013056:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 801305a:	7823      	ldrb	r3, [r4, #0]
 801305c:	b17b      	cbz	r3, 801307e <find_volume+0x7a>
		stat = disk_status(fs->drv);
 801305e:	7860      	ldrb	r0, [r4, #1]
 8013060:	f7ff f968 	bl	8012334 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013064:	07c1      	lsls	r1, r0, #31
 8013066:	d40a      	bmi.n	801307e <find_volume+0x7a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013068:	2d00      	cmp	r5, #0
 801306a:	f000 810c 	beq.w	8013286 <find_volume+0x282>
 801306e:	f010 0504 	ands.w	r5, r0, #4
 8013072:	f000 8108 	beq.w	8013286 <find_volume+0x282>
				return FR_WRITE_PROTECTED;
 8013076:	250a      	movs	r5, #10
}
 8013078:	4628      	mov	r0, r5
 801307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801307e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8013080:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013082:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 8013084:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013086:	f7ff f95f 	bl	8012348 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801308a:	07c2      	lsls	r2, r0, #31
 801308c:	f100 80fe 	bmi.w	801328c <find_volume+0x288>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013090:	b10d      	cbz	r5, 8013096 <find_volume+0x92>
 8013092:	0743      	lsls	r3, r0, #29
 8013094:	d4ef      	bmi.n	8013076 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013096:	2100      	movs	r1, #0
 8013098:	4620      	mov	r0, r4
 801309a:	f7ff ff5d 	bl	8012f58 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801309e:	2802      	cmp	r0, #2
 80130a0:	f000 80ae 	beq.w	8013200 <find_volume+0x1fc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80130a4:	2804      	cmp	r0, #4
 80130a6:	f000 80fd 	beq.w	80132a4 <find_volume+0x2a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80130aa:	2801      	cmp	r0, #1
 80130ac:	f200 80ea 	bhi.w	8013284 <find_volume+0x280>
	bsect = 0;
 80130b0:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 80130b2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80130b6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80130ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80130be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130c2:	f040 80df 	bne.w	8013284 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 80130c6:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 80130ca:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80130ce:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80130d2:	d109      	bne.n	80130e8 <find_volume+0xe4>
	rv = rv << 8 | ptr[2];
 80130d4:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 80130d8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 80130dc:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 80130e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80130e4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80130e8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
		fs->fsize = fasize;
 80130ec:	61e3      	str	r3, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80130ee:	1e42      	subs	r2, r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80130f0:	70a0      	strb	r0, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80130f2:	2a01      	cmp	r2, #1
 80130f4:	f200 80c6 	bhi.w	8013284 <find_volume+0x280>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80130f8:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 80130fc:	b2ba      	uxth	r2, r7
 80130fe:	8162      	strh	r2, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013100:	2a00      	cmp	r2, #0
 8013102:	f000 80bf 	beq.w	8013284 <find_volume+0x280>
 8013106:	1e7a      	subs	r2, r7, #1
 8013108:	423a      	tst	r2, r7
 801310a:	f040 80bb 	bne.w	8013284 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 801310e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8013112:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8013116:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801311a:	f012 0f0f 	tst.w	r2, #15
	rv = rv << 8 | ptr[0];
 801311e:	4694      	mov	ip, r2
 8013120:	b216      	sxth	r6, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013122:	8122      	strh	r2, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013124:	f040 80ae 	bne.w	8013284 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 8013128:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801312c:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013130:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8013134:	d109      	bne.n	801314a <find_volume+0x146>
	rv = rv << 8 | ptr[2];
 8013136:	f8b4 e056 	ldrh.w	lr, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 801313a:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 801313e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 8013142:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8013146:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801314a:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
 801314e:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013152:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 8013156:	f000 8095 	beq.w	8013284 <find_volume+0x280>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801315a:	fb03 f000 	mul.w	r0, r3, r0
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801315e:	eb01 1e1c 	add.w	lr, r1, ip, lsr #4
 8013162:	4486      	add	lr, r0
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013164:	4572      	cmp	r2, lr
 8013166:	f0c0 808d 	bcc.w	8013284 <find_volume+0x280>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801316a:	eba2 020e 	sub.w	r2, r2, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801316e:	42ba      	cmp	r2, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013170:	fbb2 f8f7 	udiv	r8, r2, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013174:	f0c0 8086 	bcc.w	8013284 <find_volume+0x280>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013178:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801317c:	4590      	cmp	r8, r2
 801317e:	f200 80aa 	bhi.w	80132d6 <find_volume+0x2d2>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013182:	f640 72f5 	movw	r2, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013186:	4429      	add	r1, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8013188:	eb0e 0605 	add.w	r6, lr, r5
		fs->volbase = bsect;							/* Volume start sector */
 801318c:	6225      	str	r5, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801318e:	4590      	cmp	r8, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013190:	f108 0202 	add.w	r2, r8, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013194:	6261      	str	r1, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013196:	61a2      	str	r2, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8013198:	62e6      	str	r6, [r4, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801319a:	f200 80dd 	bhi.w	8013358 <find_volume+0x354>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801319e:	f1bc 0f00 	cmp.w	ip, #0
 80131a2:	d06f      	beq.n	8013284 <find_volume+0x280>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80131a4:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80131a8:	f002 0201 	and.w	r2, r2, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131ac:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80131ae:	2001      	movs	r0, #1
 80131b0:	eb02 0255 	add.w	r2, r2, r5, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131b4:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80131b6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80131ba:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 80131be:	d361      	bcc.n	8013284 <find_volume+0x280>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80131c0:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80131c4:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80131c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 80131ca:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80131cc:	4968      	ldr	r1, [pc, #416]	; (8013370 <find_volume+0x36c>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80131ce:	4a69      	ldr	r2, [pc, #420]	; (8013374 <find_volume+0x370>)
	fs->id = ++Fsid;		/* File system mount ID */
 80131d0:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80131d2:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80131d4:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 80131d6:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80131d8:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80131da:	4284      	cmp	r4, r0
	fs->id = ++Fsid;		/* File system mount ID */
 80131dc:	800b      	strh	r3, [r1, #0]
 80131de:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80131e0:	f000 80b7 	beq.w	8013352 <find_volume+0x34e>
 80131e4:	6913      	ldr	r3, [r2, #16]
 80131e6:	429c      	cmp	r4, r3
 80131e8:	f000 80b0 	beq.w	801334c <find_volume+0x348>
 80131ec:	6a13      	ldr	r3, [r2, #32]
 80131ee:	429c      	cmp	r4, r3
 80131f0:	f000 80a9 	beq.w	8013346 <find_volume+0x342>
 80131f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80131f6:	429c      	cmp	r4, r3
 80131f8:	f000 80a2 	beq.w	8013340 <find_volume+0x33c>
	return FR_OK;
 80131fc:	2500      	movs	r5, #0
 80131fe:	e042      	b.n	8013286 <find_volume+0x282>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013200:	f894 11f6 	ldrb.w	r1, [r4, #502]	; 0x1f6
 8013204:	2900      	cmp	r1, #0
 8013206:	d051      	beq.n	80132ac <find_volume+0x2a8>
	rv = rv << 8 | ptr[2];
 8013208:	f8b4 31fc 	ldrh.w	r3, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 801320c:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 8013210:	f894 81fa 	ldrb.w	r8, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 8013214:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8013218:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801321c:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 8013220:	b14d      	cbz	r5, 8013236 <find_volume+0x232>
	rv = rv << 8 | ptr[2];
 8013222:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 8013226:	f894 320b 	ldrb.w	r3, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 801322a:	f894 520a 	ldrb.w	r5, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 801322e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8013232:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013236:	f894 7216 	ldrb.w	r7, [r4, #534]	; 0x216
 801323a:	b14f      	cbz	r7, 8013250 <find_volume+0x24c>
	rv = rv << 8 | ptr[2];
 801323c:	f8b4 221c 	ldrh.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 8013240:	f894 321b 	ldrb.w	r3, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 8013244:	f894 721a 	ldrb.w	r7, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 8013248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 801324c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013250:	f894 6226 	ldrb.w	r6, [r4, #550]	; 0x226
 8013254:	b14e      	cbz	r6, 801326a <find_volume+0x266>
	rv = rv << 8 | ptr[2];
 8013256:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 801325a:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 801325e:	f894 622a 	ldrb.w	r6, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 8013262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8013266:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801326a:	f1b8 0f00 	cmp.w	r8, #0
 801326e:	d11f      	bne.n	80132b0 <find_volume+0x2ac>
 8013270:	b135      	cbz	r5, 8013280 <find_volume+0x27c>
 8013272:	4629      	mov	r1, r5
 8013274:	4620      	mov	r0, r4
 8013276:	f7ff fe6f 	bl	8012f58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801327a:	2801      	cmp	r0, #1
 801327c:	f67f af19 	bls.w	80130b2 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013280:	b9f7      	cbnz	r7, 80132c0 <find_volume+0x2bc>
 8013282:	b93e      	cbnz	r6, 8013294 <find_volume+0x290>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013284:	250d      	movs	r5, #13
}
 8013286:	4628      	mov	r0, r5
 8013288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801328c:	2503      	movs	r5, #3
}
 801328e:	4628      	mov	r0, r5
 8013290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013294:	4631      	mov	r1, r6
 8013296:	4620      	mov	r0, r4
 8013298:	f7ff fe5e 	bl	8012f58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801329c:	2801      	cmp	r0, #1
 801329e:	d963      	bls.n	8013368 <find_volume+0x364>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80132a0:	2804      	cmp	r0, #4
 80132a2:	d1ef      	bne.n	8013284 <find_volume+0x280>
 80132a4:	2501      	movs	r5, #1
 80132a6:	e7ee      	b.n	8013286 <find_volume+0x282>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80132a8:	250c      	movs	r5, #12
 80132aa:	e7ec      	b.n	8013286 <find_volume+0x282>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80132ac:	4688      	mov	r8, r1
 80132ae:	e7b5      	b.n	801321c <find_volume+0x218>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80132b0:	4641      	mov	r1, r8
 80132b2:	4620      	mov	r0, r4
 80132b4:	f7ff fe50 	bl	8012f58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80132b8:	2801      	cmp	r0, #1
 80132ba:	d8d9      	bhi.n	8013270 <find_volume+0x26c>
 80132bc:	4645      	mov	r5, r8
 80132be:	e6f8      	b.n	80130b2 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80132c0:	4639      	mov	r1, r7
 80132c2:	4620      	mov	r0, r4
 80132c4:	f7ff fe48 	bl	8012f58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80132c8:	2801      	cmp	r0, #1
 80132ca:	d8da      	bhi.n	8013282 <find_volume+0x27e>
 80132cc:	463d      	mov	r5, r7
 80132ce:	e6f0      	b.n	80130b2 <find_volume+0xae>
					*path = ++tt;
 80132d0:	3501      	adds	r5, #1
 80132d2:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 80132d4:	e6b8      	b.n	8013048 <find_volume+0x44>
	rv = rv << 8 | ptr[0];
 80132d6:	f894 c05f 	ldrb.w	ip, [r4, #95]	; 0x5f
		fs->database = bsect + sysect;					/* Data start sector */
 80132da:	eb0e 0205 	add.w	r2, lr, r5
	rv = rv << 8 | ptr[0];
 80132de:	f894 705e 	ldrb.w	r7, [r4, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80132e2:	f108 0002 	add.w	r0, r8, #2
		fs->database = bsect + sysect;					/* Data start sector */
 80132e6:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80132e8:	4429      	add	r1, r5
	rv = rv << 8 | ptr[0];
 80132ea:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80132ee:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80132f0:	6261      	str	r1, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80132f2:	ea46 0207 	orr.w	r2, r6, r7
		fs->volbase = bsect;							/* Volume start sector */
 80132f6:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80132f8:	b212      	sxth	r2, r2
 80132fa:	2a00      	cmp	r2, #0
 80132fc:	d1c2      	bne.n	8013284 <find_volume+0x280>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80132fe:	0082      	lsls	r2, r0, #2
	rv = rv << 8 | ptr[2];
 8013300:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 8013304:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8013308:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801330c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 8013310:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013314:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
	rv = rv << 8 | ptr[0];
 8013318:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801331c:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801331e:	d3b1      	bcc.n	8013284 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 8013320:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013324:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 8013328:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
 801332c:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801332e:	6162      	str	r2, [r4, #20]
	rv = rv << 8 | ptr[0];
 8013330:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013334:	6122      	str	r2, [r4, #16]
		fs->fsi_flag = 0x80;
 8013336:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013338:	2b01      	cmp	r3, #1
 801333a:	d01d      	beq.n	8013378 <find_volume+0x374>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801333c:	2003      	movs	r0, #3
 801333e:	e745      	b.n	80131cc <find_volume+0x1c8>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013340:	2300      	movs	r3, #0
 8013342:	6313      	str	r3, [r2, #48]	; 0x30
 8013344:	e75a      	b.n	80131fc <find_volume+0x1f8>
 8013346:	2300      	movs	r3, #0
 8013348:	6213      	str	r3, [r2, #32]
 801334a:	e753      	b.n	80131f4 <find_volume+0x1f0>
 801334c:	2300      	movs	r3, #0
 801334e:	6113      	str	r3, [r2, #16]
 8013350:	e74c      	b.n	80131ec <find_volume+0x1e8>
 8013352:	2300      	movs	r3, #0
 8013354:	6013      	str	r3, [r2, #0]
 8013356:	e745      	b.n	80131e4 <find_volume+0x1e0>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013358:	f1bc 0f00 	cmp.w	ip, #0
 801335c:	d092      	beq.n	8013284 <find_volume+0x280>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801335e:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013360:	0052      	lsls	r2, r2, #1
 8013362:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013364:	62a1      	str	r1, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013366:	e726      	b.n	80131b6 <find_volume+0x1b2>
 8013368:	4635      	mov	r5, r6
 801336a:	e6a2      	b.n	80130b2 <find_volume+0xae>
 801336c:	300081d0 	.word	0x300081d0
 8013370:	30008218 	.word	0x30008218
 8013374:	300081d8 	.word	0x300081d8
			&& move_window(fs, bsect + 1) == FR_OK)
 8013378:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801337a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801337c:	4299      	cmp	r1, r3
 801337e:	d004      	beq.n	801338a <find_volume+0x386>
 8013380:	4620      	mov	r0, r4
 8013382:	f7ff f8a7 	bl	80124d4 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013386:	2800      	cmp	r0, #0
 8013388:	d1d8      	bne.n	801333c <find_volume+0x338>
	rv = rv << 8 | ptr[0];
 801338a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801338e:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8013392:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8013396:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 8013398:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			fs->fsi_flag = 0;
 801339c:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801339e:	4293      	cmp	r3, r2
 80133a0:	d1cc      	bne.n	801333c <find_volume+0x338>
	rv = rv << 8 | ptr[2];
 80133a2:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 80133a4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 80133a8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 80133ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80133b0:	4914      	ldr	r1, [pc, #80]	; (8013404 <find_volume+0x400>)
	rv = rv << 8 | ptr[0];
 80133b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80133b6:	428b      	cmp	r3, r1
 80133b8:	d1c0      	bne.n	801333c <find_volume+0x338>
	rv = rv << 8 | ptr[2];
 80133ba:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 80133be:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 80133c2:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
 80133c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80133ca:	490f      	ldr	r1, [pc, #60]	; (8013408 <find_volume+0x404>)
	rv = rv << 8 | ptr[0];
 80133cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80133d0:	428b      	cmp	r3, r1
 80133d2:	d1b3      	bne.n	801333c <find_volume+0x338>
	rv = rv << 8 | ptr[1];
 80133d4:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80133d8:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 80133da:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 80133de:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 80133e2:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 80133e6:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 80133ea:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 80133ee:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80133f2:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80133f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80133fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80133fe:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8013402:	e6e3      	b.n	80131cc <find_volume+0x1c8>
 8013404:	41615252 	.word	0x41615252
 8013408:	61417272 	.word	0x61417272

0801340c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801340c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8013410:	d274      	bcs.n	80134fc <dir_sdi+0xf0>
 8013412:	06ca      	lsls	r2, r1, #27
{
 8013414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013418:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801341a:	d151      	bne.n	80134c0 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801341c:	6885      	ldr	r5, [r0, #8]
 801341e:	4607      	mov	r7, r0
	FATFS *fs = dp->obj.fs;
 8013420:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8013424:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013426:	2d00      	cmp	r5, #0
 8013428:	d04d      	beq.n	80134c6 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801342a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 801342e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013432:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8013436:	f0c0 8099 	bcc.w	801356c <dir_sdi+0x160>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801343a:	2d01      	cmp	r5, #1
 801343c:	d940      	bls.n	80134c0 <dir_sdi+0xb4>
 801343e:	4646      	mov	r6, r8
 8013440:	e03b      	b.n	80134ba <dir_sdi+0xae>
		switch (fs->fs_type) {
 8013442:	7833      	ldrb	r3, [r6, #0]
 8013444:	2b02      	cmp	r3, #2
 8013446:	d07a      	beq.n	801353e <dir_sdi+0x132>
 8013448:	2b03      	cmp	r3, #3
 801344a:	d05f      	beq.n	801350c <dir_sdi+0x100>
 801344c:	2b01      	cmp	r3, #1
 801344e:	d137      	bne.n	80134c0 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8013450:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013454:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013456:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013458:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801345c:	4291      	cmp	r1, r2
 801345e:	d006      	beq.n	801346e <dir_sdi+0x62>
 8013460:	4630      	mov	r0, r6
 8013462:	f7ff f837 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013466:	2800      	cmp	r0, #0
 8013468:	d17d      	bne.n	8013566 <dir_sdi+0x15a>
 801346a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801346c:	6b32      	ldr	r2, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801346e:	f3ca 0008 	ubfx	r0, sl, #0, #9
 8013472:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013476:	eb03 215a 	add.w	r1, r3, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801347a:	4430      	add	r0, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 801347c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801347e:	f890 b034 	ldrb.w	fp, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013482:	d004      	beq.n	801348e <dir_sdi+0x82>
 8013484:	4630      	mov	r0, r6
 8013486:	f7ff f825 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801348a:	2800      	cmp	r0, #0
 801348c:	d16b      	bne.n	8013566 <dir_sdi+0x15a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801348e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8013492:	4456      	add	r6, sl
 8013494:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8013498:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801349c:	07eb      	lsls	r3, r5, #31
 801349e:	d573      	bpl.n	8013588 <dir_sdi+0x17c>
 80134a0:	ea4f 151b 	mov.w	r5, fp, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80134a4:	2d01      	cmp	r5, #1
 80134a6:	d90b      	bls.n	80134c0 <dir_sdi+0xb4>
 80134a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80134ac:	42ab      	cmp	r3, r5
 80134ae:	d907      	bls.n	80134c0 <dir_sdi+0xb4>
			ofs -= csz;
 80134b0:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 80134b4:	45a1      	cmp	r9, r4
 80134b6:	d85b      	bhi.n	8013570 <dir_sdi+0x164>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80134b8:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80134ba:	69b3      	ldr	r3, [r6, #24]
 80134bc:	42ab      	cmp	r3, r5
 80134be:	d8c0      	bhi.n	8013442 <dir_sdi+0x36>
		switch (fs->fs_type) {
 80134c0:	2002      	movs	r0, #2
}
 80134c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80134c6:	f898 3000 	ldrb.w	r3, [r8]
 80134ca:	2b02      	cmp	r3, #2
 80134cc:	d818      	bhi.n	8013500 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80134ce:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80134d2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80134d6:	d9f3      	bls.n	80134c0 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 80134d8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80134dc:	61f9      	str	r1, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 80134de:	61bd      	str	r5, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 80134e0:	2900      	cmp	r1, #0
 80134e2:	d0ed      	beq.n	80134c0 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80134e4:	f108 0834 	add.w	r8, r8, #52	; 0x34
 80134e8:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80134ec:	eb01 2154 	add.w	r1, r1, r4, lsr #9
	return FR_OK;
 80134f0:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80134f2:	4443      	add	r3, r8
 80134f4:	e9c7 1307 	strd	r1, r3, [r7, #28]
}
 80134f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 80134fc:	2002      	movs	r0, #2
}
 80134fe:	4770      	bx	lr
		clst = fs->dirbase;
 8013500:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013504:	2b00      	cmp	r3, #0
 8013506:	d0e2      	beq.n	80134ce <dir_sdi+0xc2>
 8013508:	461d      	mov	r5, r3
 801350a:	e78e      	b.n	801342a <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801350c:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801350e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013510:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013514:	4299      	cmp	r1, r3
 8013516:	d003      	beq.n	8013520 <dir_sdi+0x114>
 8013518:	4630      	mov	r0, r6
 801351a:	f7fe ffdb 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801351e:	bb10      	cbnz	r0, 8013566 <dir_sdi+0x15a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013520:	00ad      	lsls	r5, r5, #2
 8013522:	3634      	adds	r6, #52	; 0x34
 8013524:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8013528:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[0];
 801352a:	5d75      	ldrb	r5, [r6, r5]
	rv = rv << 8 | ptr[2];
 801352c:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 801352e:	7853      	ldrb	r3, [r2, #1]
 8013530:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8013534:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013538:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 801353c:	e7b2      	b.n	80134a4 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801353e:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013540:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013542:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013546:	4299      	cmp	r1, r3
 8013548:	d003      	beq.n	8013552 <dir_sdi+0x146>
 801354a:	4630      	mov	r0, r6
 801354c:	f7fe ffc2 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013550:	b948      	cbnz	r0, 8013566 <dir_sdi+0x15a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013552:	006d      	lsls	r5, r5, #1
 8013554:	3634      	adds	r6, #52	; 0x34
 8013556:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 801355a:	1973      	adds	r3, r6, r5
	rv = rv << 8 | ptr[0];
 801355c:	5d75      	ldrb	r5, [r6, r5]
 801355e:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013560:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 8013564:	e79e      	b.n	80134a4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013566:	2001      	movs	r0, #1
}
 8013568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356c:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013570:	3b02      	subs	r3, #2
	clst -= 2;
 8013572:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013574:	429a      	cmp	r2, r3
 8013576:	d20a      	bcs.n	801358e <dir_sdi+0x182>
	return clst * fs->csize + fs->database;
 8013578:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801357c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8013580:	fb02 3101 	mla	r1, r2, r1, r3
		dp->sect = clust2sect(fs, clst);
 8013584:	61f9      	str	r1, [r7, #28]
 8013586:	e7aa      	b.n	80134de <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013588:	f3cb 050b 	ubfx	r5, fp, #0, #12
 801358c:	e78a      	b.n	80134a4 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 801358e:	2300      	movs	r3, #0
 8013590:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013594:	e794      	b.n	80134c0 <dir_sdi+0xb4>
 8013596:	bf00      	nop

08013598 <dir_find>:
{
 8013598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801359c:	2100      	movs	r1, #0
{
 801359e:	b087      	sub	sp, #28
 80135a0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80135a2:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80135a4:	f7ff ff32 	bl	801340c <dir_sdi>
	if (res != FR_OK) return res;
 80135a8:	4681      	mov	r9, r0
 80135aa:	b9e0      	cbnz	r0, 80135e6 <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80135ac:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80135b0:	f04f 33ff 	mov.w	r3, #4294967295
 80135b4:	69e7      	ldr	r7, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80135b6:	f64f 7bff 	movw	fp, #65535	; 0xffff
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80135ba:	46c1      	mov	r9, r8
 80135bc:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80135be:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80135c0:	42bd      	cmp	r5, r7
 80135c2:	d015      	beq.n	80135f0 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80135c4:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80135c6:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f040 8086 	bne.w	80136dc <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80135d0:	2301      	movs	r3, #1
 80135d2:	463a      	mov	r2, r7
 80135d4:	7870      	ldrb	r0, [r6, #1]
 80135d6:	f7fe fecb 	bl	8012370 <disk_read>
 80135da:	b140      	cbz	r0, 80135ee <dir_find+0x56>
			fs->winsect = sector;
 80135dc:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80135e0:	f04f 0901 	mov.w	r9, #1
			fs->winsect = sector;
 80135e4:	6333      	str	r3, [r6, #48]	; 0x30
}
 80135e6:	4648      	mov	r0, r9
 80135e8:	b007      	add	sp, #28
 80135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80135ee:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80135f0:	6a25      	ldr	r5, [r4, #32]
 80135f2:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80135f4:	b34f      	cbz	r7, 801364a <dir_find+0xb2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80135f6:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80135f8:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80135fa:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80135fe:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013600:	d004      	beq.n	801360c <dir_find+0x74>
 8013602:	0712      	lsls	r2, r2, #28
 8013604:	d527      	bpl.n	8013656 <dir_find+0xbe>
 8013606:	2b0f      	cmp	r3, #15
 8013608:	f000 8095 	beq.w	8013736 <dir_find+0x19e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
 8013610:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8013614:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013616:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013618:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801361a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801361c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8013620:	d213      	bcs.n	801364a <dir_find+0xb2>
 8013622:	b197      	cbz	r7, 801364a <dir_find+0xb2>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013624:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8013628:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801362a:	b94a      	cbnz	r2, 8013640 <dir_find+0xa8>
		dp->sect++;				/* Next sector */
 801362c:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 801362e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8013630:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8013632:	2900      	cmp	r1, #0
 8013634:	d15e      	bne.n	80136f4 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013636:	8919      	ldrh	r1, [r3, #8]
 8013638:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 801363c:	f240 813f 	bls.w	80138be <dir_find+0x326>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013640:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8013642:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013644:	4413      	add	r3, r2
 8013646:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8013648:	e7b9      	b.n	80135be <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801364a:	f04f 0904 	mov.w	r9, #4
}
 801364e:	4648      	mov	r0, r9
 8013650:	b007      	add	sp, #28
 8013652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013656:	2b0f      	cmp	r3, #15
 8013658:	d06d      	beq.n	8013736 <dir_find+0x19e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801365a:	f1b9 0f00 	cmp.w	r9, #0
 801365e:	f000 80e4 	beq.w	801382a <dir_find+0x292>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013662:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 8013666:	f019 0901 	ands.w	r9, r9, #1
 801366a:	d1cf      	bne.n	801360c <dir_find+0x74>
	} while (--cnt && r == 0);
 801366c:	782a      	ldrb	r2, [r5, #0]
 801366e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013672:	429a      	cmp	r2, r3
 8013674:	d1ca      	bne.n	801360c <dir_find+0x74>
 8013676:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801367a:	786b      	ldrb	r3, [r5, #1]
 801367c:	429a      	cmp	r2, r3
 801367e:	d1c5      	bne.n	801360c <dir_find+0x74>
 8013680:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8013684:	78ab      	ldrb	r3, [r5, #2]
 8013686:	429a      	cmp	r2, r3
 8013688:	d1c0      	bne.n	801360c <dir_find+0x74>
 801368a:	78ea      	ldrb	r2, [r5, #3]
 801368c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8013690:	429a      	cmp	r2, r3
 8013692:	d1bb      	bne.n	801360c <dir_find+0x74>
 8013694:	792a      	ldrb	r2, [r5, #4]
 8013696:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801369a:	429a      	cmp	r2, r3
 801369c:	d1b6      	bne.n	801360c <dir_find+0x74>
 801369e:	796a      	ldrb	r2, [r5, #5]
 80136a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d1b1      	bne.n	801360c <dir_find+0x74>
 80136a8:	79aa      	ldrb	r2, [r5, #6]
 80136aa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d1ac      	bne.n	801360c <dir_find+0x74>
 80136b2:	79ea      	ldrb	r2, [r5, #7]
 80136b4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d1a7      	bne.n	801360c <dir_find+0x74>
 80136bc:	7a2a      	ldrb	r2, [r5, #8]
 80136be:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d1a2      	bne.n	801360c <dir_find+0x74>
 80136c6:	7a6a      	ldrb	r2, [r5, #9]
 80136c8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d19d      	bne.n	801360c <dir_find+0x74>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80136d0:	7aaa      	ldrb	r2, [r5, #10]
 80136d2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d198      	bne.n	801360c <dir_find+0x74>
 80136da:	e784      	b.n	80135e6 <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80136dc:	2301      	movs	r3, #1
 80136de:	462a      	mov	r2, r5
 80136e0:	7870      	ldrb	r0, [r6, #1]
 80136e2:	9101      	str	r1, [sp, #4]
 80136e4:	f7fe fe52 	bl	801238c <disk_write>
 80136e8:	9901      	ldr	r1, [sp, #4]
 80136ea:	2800      	cmp	r0, #0
 80136ec:	d07d      	beq.n	80137ea <dir_find+0x252>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80136ee:	f04f 0901 	mov.w	r9, #1
 80136f2:	e778      	b.n	80135e6 <dir_find+0x4e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80136f4:	8958      	ldrh	r0, [r3, #10]
 80136f6:	3801      	subs	r0, #1
 80136f8:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 80136fc:	d1a0      	bne.n	8013640 <dir_find+0xa8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80136fe:	4618      	mov	r0, r3
 8013700:	9202      	str	r2, [sp, #8]
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	f7fe ffbe 	bl	8012684 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013708:	2801      	cmp	r0, #1
 801370a:	f240 80dd 	bls.w	80138c8 <dir_find+0x330>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801370e:	1c43      	adds	r3, r0, #1
 8013710:	d0ed      	beq.n	80136ee <dir_find+0x156>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013712:	9b01      	ldr	r3, [sp, #4]
 8013714:	6999      	ldr	r1, [r3, #24]
 8013716:	4288      	cmp	r0, r1
 8013718:	f080 80d1 	bcs.w	80138be <dir_find+0x326>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801371c:	3902      	subs	r1, #2
	clst -= 2;
 801371e:	1e87      	subs	r7, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013720:	9a02      	ldr	r2, [sp, #8]
 8013722:	428f      	cmp	r7, r1
				dp->clust = clst;		/* Initialize data for new cluster */
 8013724:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013726:	f080 80d2 	bcs.w	80138ce <dir_find+0x336>
	return clst * fs->csize + fs->database;
 801372a:	8958      	ldrh	r0, [r3, #10]
 801372c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801372e:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 8013732:	61e7      	str	r7, [r4, #28]
 8013734:	e784      	b.n	8013640 <dir_find+0xa8>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8013736:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801373a:	0658      	lsls	r0, r3, #25
 801373c:	f53f af6b 	bmi.w	8013616 <dir_find+0x7e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013740:	0679      	lsls	r1, r7, #25
 8013742:	d54d      	bpl.n	80137e0 <dir_find+0x248>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013744:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013746:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 801374a:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801374e:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013750:	7b6b      	ldrb	r3, [r5, #13]
 8013752:	4543      	cmp	r3, r8
 8013754:	d146      	bne.n	80137e4 <dir_find+0x24c>
	rv = rv << 8 | ptr[0];
 8013756:	7eea      	ldrb	r2, [r5, #27]
 8013758:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801375a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 801375e:	d141      	bne.n	80137e4 <dir_find+0x24c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013760:	f895 a000 	ldrb.w	sl, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013764:	2101      	movs	r1, #1
 8013766:	4b65      	ldr	r3, [pc, #404]	; (80138fc <dir_find+0x364>)
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013768:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801376c:	68f0      	ldr	r0, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801376e:	9704      	str	r7, [sp, #16]
 8013770:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013774:	9403      	str	r4, [sp, #12]
 8013776:	4607      	mov	r7, r0
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013778:	9005      	str	r0, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801377a:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 801377e:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8013782:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8013786:	4654      	mov	r4, sl
 8013788:	46aa      	mov	sl, r5
 801378a:	461d      	mov	r5, r3
 801378c:	460b      	mov	r3, r1
 801378e:	e011      	b.n	80137b4 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013790:	2cfe      	cmp	r4, #254	; 0xfe
 8013792:	4648      	mov	r0, r9
 8013794:	d81e      	bhi.n	80137d4 <dir_find+0x23c>
 8013796:	f7fe fd83 	bl	80122a0 <ff_wtoupper>
 801379a:	4606      	mov	r6, r0
 801379c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 80137a0:	4644      	mov	r4, r8
 80137a2:	f7fe fd7d 	bl	80122a0 <ff_wtoupper>
 80137a6:	4286      	cmp	r6, r0
	rv = rv << 8 | ptr[0];
 80137a8:	464b      	mov	r3, r9
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80137aa:	d113      	bne.n	80137d4 <dir_find+0x23c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80137ac:	4a54      	ldr	r2, [pc, #336]	; (8013900 <dir_find+0x368>)
 80137ae:	42aa      	cmp	r2, r5
 80137b0:	f000 808f 	beq.w	80138d2 <dir_find+0x33a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80137b4:	f815 0b01 	ldrb.w	r0, [r5], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80137b8:	f104 0801 	add.w	r8, r4, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80137bc:	eb0a 0e00 	add.w	lr, sl, r0
	rv = rv << 8 | ptr[0];
 80137c0:	f81a 9000 	ldrb.w	r9, [sl, r0]
 80137c4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80137c8:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
		if (wc) {
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d1df      	bne.n	8013790 <dir_find+0x1f8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80137d0:	45d9      	cmp	r9, fp
 80137d2:	d0eb      	beq.n	80137ac <dir_find+0x214>
 80137d4:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 80137d8:	9c03      	ldr	r4, [sp, #12]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80137da:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80137de:	e71a      	b.n	8013616 <dir_find+0x7e>
 80137e0:	45b9      	cmp	r9, r7
 80137e2:	d0b5      	beq.n	8013750 <dir_find+0x1b8>
 80137e4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80137e8:	e715      	b.n	8013616 <dir_find+0x7e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80137ea:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80137ec:	69f3      	ldr	r3, [r6, #28]
 80137ee:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80137f0:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80137f2:	429a      	cmp	r2, r3
 80137f4:	f4bf aeec 	bcs.w	80135d0 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80137f8:	f896 a002 	ldrb.w	sl, [r6, #2]
 80137fc:	f1ba 0f01 	cmp.w	sl, #1
 8013800:	f67f aee6 	bls.w	80135d0 <dir_find+0x38>
 8013804:	9401      	str	r4, [sp, #4]
 8013806:	460c      	mov	r4, r1
 8013808:	e000      	b.n	801380c <dir_find+0x274>
 801380a:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 801380c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801380e:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013812:	2301      	movs	r3, #1
 8013814:	4621      	mov	r1, r4
 8013816:	462a      	mov	r2, r5
 8013818:	7870      	ldrb	r0, [r6, #1]
 801381a:	f7fe fdb7 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801381e:	f1ba 0f01 	cmp.w	sl, #1
 8013822:	d1f2      	bne.n	801380a <dir_find+0x272>
 8013824:	4621      	mov	r1, r4
 8013826:	9c01      	ldr	r4, [sp, #4]
 8013828:	e6d2      	b.n	80135d0 <dir_find+0x38>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801382a:	782b      	ldrb	r3, [r5, #0]
 801382c:	786f      	ldrb	r7, [r5, #1]
 801382e:	01da      	lsls	r2, r3, #7
 8013830:	78a8      	ldrb	r0, [r5, #2]
 8013832:	78e9      	ldrb	r1, [r5, #3]
 8013834:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
 8013838:	19da      	adds	r2, r3, r7
 801383a:	792f      	ldrb	r7, [r5, #4]
 801383c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8013840:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013844:	fa50 f383 	uxtab	r3, r0, r3
 8013848:	7968      	ldrb	r0, [r5, #5]
 801384a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801384e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8013852:	fa51 f283 	uxtab	r2, r1, r3
 8013856:	79a9      	ldrb	r1, [r5, #6]
 8013858:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801385c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013860:	fa57 f383 	uxtab	r3, r7, r3
 8013864:	79ef      	ldrb	r7, [r5, #7]
 8013866:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801386a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 801386e:	fa50 f283 	uxtab	r2, r0, r3
 8013872:	7a68      	ldrb	r0, [r5, #9]
 8013874:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8013878:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801387c:	7a2a      	ldrb	r2, [r5, #8]
 801387e:	fa51 f383 	uxtab	r3, r1, r3
 8013882:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8013886:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 801388a:	fa57 f183 	uxtab	r1, r7, r3
 801388e:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8013892:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8013896:	7aa9      	ldrb	r1, [r5, #10]
 8013898:	fa52 f383 	uxtab	r3, r2, r3
 801389c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80138a0:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80138a4:	fa50 f283 	uxtab	r2, r0, r3
 80138a8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80138ac:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80138b0:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80138b4:	b2db      	uxtb	r3, r3
 80138b6:	4598      	cmp	r8, r3
 80138b8:	f47f aed3 	bne.w	8013662 <dir_find+0xca>
 80138bc:	e693      	b.n	80135e6 <dir_find+0x4e>
				dp->sect = 0; return FR_NO_FILE;
 80138be:	2300      	movs	r3, #0
 80138c0:	f04f 0904 	mov.w	r9, #4
 80138c4:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 80138c6:	e68e      	b.n	80135e6 <dir_find+0x4e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80138c8:	f04f 0902 	mov.w	r9, #2
 80138cc:	e68b      	b.n	80135e6 <dir_find+0x4e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80138ce:	4617      	mov	r7, r2
 80138d0:	e72f      	b.n	8013732 <dir_find+0x19a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80138d2:	4655      	mov	r5, sl
 80138d4:	4619      	mov	r1, r3
 80138d6:	46a2      	mov	sl, r4
 80138d8:	9f04      	ldr	r7, [sp, #16]
 80138da:	782b      	ldrb	r3, [r5, #0]
 80138dc:	9c03      	ldr	r4, [sp, #12]
 80138de:	065a      	lsls	r2, r3, #25
 80138e0:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 80138e4:	d500      	bpl.n	80138e8 <dir_find+0x350>
 80138e6:	b919      	cbnz	r1, 80138f0 <dir_find+0x358>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80138e8:	3f01      	subs	r7, #1
 80138ea:	fa5f f987 	uxtb.w	r9, r7
 80138ee:	e692      	b.n	8013616 <dir_find+0x7e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80138f0:	9b05      	ldr	r3, [sp, #20]
 80138f2:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d0f6      	beq.n	80138e8 <dir_find+0x350>
 80138fa:	e773      	b.n	80137e4 <dir_find+0x24c>
 80138fc:	0802d0e8 	.word	0x0802d0e8
 8013900:	0802d0f5 	.word	0x0802d0f5

08013904 <follow_path>:
{
 8013904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013908:	780b      	ldrb	r3, [r1, #0]
{
 801390a:	b083      	sub	sp, #12
 801390c:	4688      	mov	r8, r1
 801390e:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013910:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8013912:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013916:	d103      	bne.n	8013920 <follow_path+0x1c>
 8013918:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 801391c:	2b2f      	cmp	r3, #47	; 0x2f
 801391e:	d0fb      	beq.n	8013918 <follow_path+0x14>
 8013920:	2b5c      	cmp	r3, #92	; 0x5c
 8013922:	d0f9      	beq.n	8013918 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8013924:	2100      	movs	r1, #0
 8013926:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013928:	f898 3000 	ldrb.w	r3, [r8]
 801392c:	2b1f      	cmp	r3, #31
 801392e:	f240 8156 	bls.w	8013bde <follow_path+0x2da>
 8013932:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8013934:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013936:	f8d2 900c 	ldr.w	r9, [r2, #12]
		w = p[si++];					/* Get a character */
 801393a:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 801393c:	d929      	bls.n	8013992 <follow_path+0x8e>
 801393e:	f1a9 0a02 	sub.w	sl, r9, #2
 8013942:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8013944:	2501      	movs	r5, #1
 8013946:	e008      	b.n	801395a <follow_path+0x56>
		lfn[di++] = w;					/* Store the Unicode character */
 8013948:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 801394c:	1c6b      	adds	r3, r5, #1
 801394e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8013952:	281f      	cmp	r0, #31
 8013954:	f240 8104 	bls.w	8013b60 <follow_path+0x25c>
		w = p[si++];					/* Get a character */
 8013958:	461d      	mov	r5, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801395a:	282f      	cmp	r0, #47	; 0x2f
 801395c:	f105 34ff 	add.w	r4, r5, #4294967295
 8013960:	d01e      	beq.n	80139a0 <follow_path+0x9c>
 8013962:	285c      	cmp	r0, #92	; 0x5c
 8013964:	d01c      	beq.n	80139a0 <follow_path+0x9c>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013966:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801396a:	d00e      	beq.n	801398a <follow_path+0x86>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801396c:	2101      	movs	r1, #1
 801396e:	f7fe fc75 	bl	801225c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013972:	b150      	cbz	r0, 801398a <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013974:	287f      	cmp	r0, #127	; 0x7f
 8013976:	d8e7      	bhi.n	8013948 <follow_path+0x44>
	while (*str && *str != chr) str++;
 8013978:	2322      	movs	r3, #34	; 0x22
 801397a:	4aad      	ldr	r2, [pc, #692]	; (8013c30 <follow_path+0x32c>)
 801397c:	e003      	b.n	8013986 <follow_path+0x82>
 801397e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013982:	2b00      	cmp	r3, #0
 8013984:	d0e0      	beq.n	8013948 <follow_path+0x44>
 8013986:	4298      	cmp	r0, r3
 8013988:	d1f9      	bne.n	801397e <follow_path+0x7a>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801398a:	2006      	movs	r0, #6
}
 801398c:	b003      	add	sp, #12
 801398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8013992:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013994:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8013996:	f8a9 3000 	strh.w	r3, [r9]
}
 801399a:	b003      	add	sp, #12
 801399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80139a0:	f818 3005 	ldrb.w	r3, [r8, r5]
 80139a4:	eb08 0205 	add.w	r2, r8, r5
 80139a8:	2b5c      	cmp	r3, #92	; 0x5c
 80139aa:	d002      	beq.n	80139b2 <follow_path+0xae>
 80139ac:	2b2f      	cmp	r3, #47	; 0x2f
 80139ae:	f040 812b 	bne.w	8013c08 <follow_path+0x304>
 80139b2:	3501      	adds	r5, #1
 80139b4:	4445      	add	r5, r8
 80139b6:	46a8      	mov	r8, r5
 80139b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80139bc:	2b2f      	cmp	r3, #47	; 0x2f
 80139be:	d0fa      	beq.n	80139b6 <follow_path+0xb2>
 80139c0:	2b5c      	cmp	r3, #92	; 0x5c
 80139c2:	d0f8      	beq.n	80139b6 <follow_path+0xb2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80139c4:	2c00      	cmp	r4, #0
 80139c6:	d0e4      	beq.n	8013992 <follow_path+0x8e>
 80139c8:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80139ca:	2500      	movs	r5, #0
 80139cc:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 80139d0:	e001      	b.n	80139d6 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80139d2:	3c01      	subs	r4, #1
 80139d4:	d0dd      	beq.n	8013992 <follow_path+0x8e>
		w = lfn[di - 1];
 80139d6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80139da:	2b20      	cmp	r3, #32
 80139dc:	d0f9      	beq.n	80139d2 <follow_path+0xce>
 80139de:	2b2e      	cmp	r3, #46	; 0x2e
 80139e0:	d0f7      	beq.n	80139d2 <follow_path+0xce>
		*d++ = (BYTE)val;
 80139e2:	2320      	movs	r3, #32
 80139e4:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80139e8:	2100      	movs	r1, #0
 80139ea:	f829 1014 	strh.w	r1, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
 80139ee:	627a      	str	r2, [r7, #36]	; 0x24
 80139f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80139f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80139f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80139fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80139fe:	f8b9 0000 	ldrh.w	r0, [r9]
 8013a02:	282e      	cmp	r0, #46	; 0x2e
 8013a04:	d002      	beq.n	8013a0c <follow_path+0x108>
 8013a06:	4298      	cmp	r0, r3
 8013a08:	f040 80f2 	bne.w	8013bf0 <follow_path+0x2ec>
 8013a0c:	464a      	mov	r2, r9
 8013a0e:	2300      	movs	r3, #0
 8013a10:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8013a14:	461d      	mov	r5, r3
 8013a16:	3301      	adds	r3, #1
 8013a18:	2820      	cmp	r0, #32
 8013a1a:	d0f9      	beq.n	8013a10 <follow_path+0x10c>
 8013a1c:	282e      	cmp	r0, #46	; 0x2e
 8013a1e:	d0f7      	beq.n	8013a10 <follow_path+0x10c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013a20:	3502      	adds	r5, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013a22:	eb09 0344 	add.w	r3, r9, r4, lsl #1
 8013a26:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8013a2a:	2a2e      	cmp	r2, #46	; 0x2e
 8013a2c:	d001      	beq.n	8013a32 <follow_path+0x12e>
 8013a2e:	3c01      	subs	r4, #1
 8013a30:	d1f9      	bne.n	8013a26 <follow_path+0x122>
		if (!w) break;					/* Break on end of the LFN */
 8013a32:	2800      	cmp	r0, #0
 8013a34:	d03a      	beq.n	8013aac <follow_path+0x1a8>
 8013a36:	2300      	movs	r3, #0
 8013a38:	2208      	movs	r2, #8
 8013a3a:	4641      	mov	r1, r8
 8013a3c:	469a      	mov	sl, r3
 8013a3e:	4698      	mov	r8, r3
 8013a40:	465b      	mov	r3, fp
 8013a42:	46bb      	mov	fp, r7
 8013a44:	464f      	mov	r7, r9
 8013a46:	4691      	mov	r9, r2
 8013a48:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013a4a:	2820      	cmp	r0, #32
 8013a4c:	d003      	beq.n	8013a56 <follow_path+0x152>
 8013a4e:	282e      	cmp	r0, #46	; 0x2e
 8013a50:	d155      	bne.n	8013afe <follow_path+0x1fa>
 8013a52:	42ac      	cmp	r4, r5
 8013a54:	d053      	beq.n	8013afe <follow_path+0x1fa>
			cf |= NS_LOSS | NS_LFN; continue;
 8013a56:	f046 0603 	orr.w	r6, r6, #3
 8013a5a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8013a5c:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 8013a60:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 8013a62:	2800      	cmp	r0, #0
 8013a64:	d1f1      	bne.n	8013a4a <follow_path+0x146>
 8013a66:	465f      	mov	r7, fp
 8013a68:	469b      	mov	fp, r3
 8013a6a:	4643      	mov	r3, r8
 8013a6c:	4690      	mov	r8, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013a6e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8013a72:	464a      	mov	r2, r9
 8013a74:	29e5      	cmp	r1, #229	; 0xe5
 8013a76:	d102      	bne.n	8013a7e <follow_path+0x17a>
 8013a78:	2105      	movs	r1, #5
 8013a7a:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8013a7e:	2a08      	cmp	r2, #8
 8013a80:	f000 809c 	beq.w	8013bbc <follow_path+0x2b8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013a84:	f003 020c 	and.w	r2, r3, #12
 8013a88:	2a0c      	cmp	r2, #12
 8013a8a:	d06e      	beq.n	8013b6a <follow_path+0x266>
 8013a8c:	f003 0303 	and.w	r3, r3, #3
 8013a90:	2b03      	cmp	r3, #3
 8013a92:	d06a      	beq.n	8013b6a <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013a94:	07b1      	lsls	r1, r6, #30
 8013a96:	d409      	bmi.n	8013aac <follow_path+0x1a8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d102      	bne.n	8013aa2 <follow_path+0x19e>
 8013a9c:	f046 0610 	orr.w	r6, r6, #16
 8013aa0:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013aa2:	2a04      	cmp	r2, #4
 8013aa4:	d102      	bne.n	8013aac <follow_path+0x1a8>
 8013aa6:	f046 0608 	orr.w	r6, r6, #8
 8013aaa:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8013aac:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013aae:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8013ab2:	f7ff fd71 	bl	8013598 <dir_find>
			ns = dp->fn[NSFLAG];
 8013ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8013aba:	2800      	cmp	r0, #0
 8013abc:	d161      	bne.n	8013b82 <follow_path+0x27e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013abe:	075a      	lsls	r2, r3, #29
 8013ac0:	f53f af64 	bmi.w	801398c <follow_path+0x88>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013ac4:	79bb      	ldrb	r3, [r7, #6]
 8013ac6:	06db      	lsls	r3, r3, #27
 8013ac8:	f140 80a0 	bpl.w	8013c0c <follow_path+0x308>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013acc:	697a      	ldr	r2, [r7, #20]
 8013ace:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8013ad2:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8013ada:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013adc:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 8013ade:	7ed8      	ldrb	r0, [r3, #27]
 8013ae0:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8013ae2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8013ae6:	d105      	bne.n	8013af4 <follow_path+0x1f0>
	rv = rv << 8 | ptr[0];
 8013ae8:	7d59      	ldrb	r1, [r3, #21]
 8013aea:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013aec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013af0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013af4:	60ba      	str	r2, [r7, #8]
		for (;;) {
 8013af6:	683a      	ldr	r2, [r7, #0]
 8013af8:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013afc:	e71a      	b.n	8013934 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013afe:	45d1      	cmp	r9, sl
 8013b00:	d91b      	bls.n	8013b3a <follow_path+0x236>
 8013b02:	1b61      	subs	r1, r4, r5
 8013b04:	fab1 f181 	clz	r1, r1
 8013b08:	0949      	lsrs	r1, r1, #5
 8013b0a:	b9b1      	cbnz	r1, 8013b3a <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
 8013b0c:	287f      	cmp	r0, #127	; 0x7f
 8013b0e:	d840      	bhi.n	8013b92 <follow_path+0x28e>
	while (*str && *str != chr) str++;
 8013b10:	212b      	movs	r1, #43	; 0x2b
 8013b12:	f8df c124 	ldr.w	ip, [pc, #292]	; 8013c38 <follow_path+0x334>
 8013b16:	e003      	b.n	8013b20 <follow_path+0x21c>
 8013b18:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8013b1c:	2900      	cmp	r1, #0
 8013b1e:	d056      	beq.n	8013bce <follow_path+0x2ca>
 8013b20:	4281      	cmp	r1, r0
 8013b22:	d1f9      	bne.n	8013b18 <follow_path+0x214>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013b24:	f046 0603 	orr.w	r6, r6, #3
 8013b28:	205f      	movs	r0, #95	; 0x5f
 8013b2a:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8013b2c:	eb0b 010a 	add.w	r1, fp, sl
 8013b30:	f10a 0a01 	add.w	sl, sl, #1
 8013b34:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8013b38:	e790      	b.n	8013a5c <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 8013b3a:	f1b9 0f0b 	cmp.w	r9, #11
 8013b3e:	d067      	beq.n	8013c10 <follow_path+0x30c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013b40:	42ac      	cmp	r4, r5
 8013b42:	d003      	beq.n	8013b4c <follow_path+0x248>
 8013b44:	f046 0603 	orr.w	r6, r6, #3
 8013b48:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8013b4a:	d38c      	bcc.n	8013a66 <follow_path+0x162>
			b <<= 2; continue;
 8013b4c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8013b50:	4625      	mov	r5, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013b52:	f04f 090b 	mov.w	r9, #11
 8013b56:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8013b5a:	fa5f f888 	uxtb.w	r8, r8
 8013b5e:	e77d      	b.n	8013a5c <follow_path+0x158>
	*path = &p[si];						/* Return pointer to the next segment */
 8013b60:	462c      	mov	r4, r5
 8013b62:	4498      	add	r8, r3
 8013b64:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013b66:	2504      	movs	r5, #4
 8013b68:	e730      	b.n	80139cc <follow_path+0xc8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013b6a:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8013b6e:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013b70:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013b72:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8013b76:	f7ff fd0f 	bl	8013598 <dir_find>
			ns = dp->fn[NSFLAG];
 8013b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	d09d      	beq.n	8013abe <follow_path+0x1ba>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013b82:	2804      	cmp	r0, #4
 8013b84:	f47f af02 	bne.w	801398c <follow_path+0x88>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013b88:	f013 0f04 	tst.w	r3, #4
 8013b8c:	bf08      	it	eq
 8013b8e:	2005      	moveq	r0, #5
 8013b90:	e6fc      	b.n	801398c <follow_path+0x88>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013b92:	e9cd 3200 	strd	r3, r2, [sp]
 8013b96:	f7fe fb61 	bl	801225c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013b9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b9e:	b918      	cbnz	r0, 8013ba8 <follow_path+0x2a4>
			cf |= NS_LFN;				/* Force create LFN entry */
 8013ba0:	f046 0602 	orr.w	r6, r6, #2
 8013ba4:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013ba6:	e7bd      	b.n	8013b24 <follow_path+0x220>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013ba8:	4922      	ldr	r1, [pc, #136]	; (8013c34 <follow_path+0x330>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8013baa:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013bae:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 8013bb0:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013bb2:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	d0b4      	beq.n	8013b24 <follow_path+0x220>
 8013bba:	e7a9      	b.n	8013b10 <follow_path+0x20c>
	if (ni == 8) b <<= 2;
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013bc2:	2a0c      	cmp	r2, #12
 8013bc4:	d0d1      	beq.n	8013b6a <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013bc6:	07b0      	lsls	r0, r6, #30
 8013bc8:	f57f af6b 	bpl.w	8013aa2 <follow_path+0x19e>
 8013bcc:	e76e      	b.n	8013aac <follow_path+0x1a8>
				if (IsUpper(w)) {		/* ASCII large capital */
 8013bce:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8013bd2:	2919      	cmp	r1, #25
 8013bd4:	d80f      	bhi.n	8013bf6 <follow_path+0x2f2>
					b |= 2;
 8013bd6:	f048 0802 	orr.w	r8, r8, #2
 8013bda:	b2c0      	uxtb	r0, r0
 8013bdc:	e7a6      	b.n	8013b2c <follow_path+0x228>
		dp->fn[NSFLAG] = NS_NONAME;
 8013bde:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8013be0:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8013be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8013be6:	b003      	add	sp, #12
 8013be8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8013bec:	f7ff bc0e 	b.w	801340c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013bf0:	462e      	mov	r6, r5
 8013bf2:	2501      	movs	r5, #1
 8013bf4:	e715      	b.n	8013a22 <follow_path+0x11e>
					if (IsLower(w)) {	/* ASCII small capital */
 8013bf6:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8013bfa:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8013bfc:	bf9c      	itt	ls
 8013bfe:	3820      	subls	r0, #32
 8013c00:	f048 0801 	orrls.w	r8, r8, #1
 8013c04:	b2c0      	uxtb	r0, r0
 8013c06:	e791      	b.n	8013b2c <follow_path+0x228>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013c08:	4690      	mov	r8, r2
 8013c0a:	e6db      	b.n	80139c4 <follow_path+0xc0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013c0c:	2005      	movs	r0, #5
 8013c0e:	e6bd      	b.n	801398c <follow_path+0x88>
 8013c10:	465f      	mov	r7, fp
 8013c12:	469b      	mov	fp, r3
 8013c14:	4643      	mov	r3, r8
 8013c16:	4690      	mov	r8, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013c18:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 8013c1c:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013c20:	2ae5      	cmp	r2, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 8013c22:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013c24:	f47f af2e 	bne.w	8013a84 <follow_path+0x180>
 8013c28:	2205      	movs	r2, #5
 8013c2a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8013c2e:	e729      	b.n	8013a84 <follow_path+0x180>
 8013c30:	0802d054 	.word	0x0802d054
 8013c34:	0802d068 	.word	0x0802d068
 8013c38:	0802d060 	.word	0x0802d060

08013c3c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013c3c:	2901      	cmp	r1, #1
{
 8013c3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8013c42:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013c44:	d90f      	bls.n	8013c66 <remove_chain+0x2a>
 8013c46:	69ab      	ldr	r3, [r5, #24]
 8013c48:	460c      	mov	r4, r1
 8013c4a:	428b      	cmp	r3, r1
 8013c4c:	d90b      	bls.n	8013c66 <remove_chain+0x2a>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013c4e:	4606      	mov	r6, r0
 8013c50:	b962      	cbnz	r2, 8013c6c <remove_chain+0x30>
 8013c52:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013c54:	429c      	cmp	r4, r3
 8013c56:	d206      	bcs.n	8013c66 <remove_chain+0x2a>
		switch (fs->fs_type) {
 8013c58:	783b      	ldrb	r3, [r7, #0]
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	d07a      	beq.n	8013d54 <remove_chain+0x118>
 8013c5e:	2b03      	cmp	r3, #3
 8013c60:	d05e      	beq.n	8013d20 <remove_chain+0xe4>
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d011      	beq.n	8013c8a <remove_chain+0x4e>
 8013c66:	2002      	movs	r0, #2
}
 8013c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	d9fa      	bls.n	8013c66 <remove_chain+0x2a>
 8013c70:	2a01      	cmp	r2, #1
 8013c72:	d9f8      	bls.n	8013c66 <remove_chain+0x2a>
 8013c74:	4611      	mov	r1, r2
 8013c76:	4628      	mov	r0, r5
 8013c78:	f04f 32ff 	mov.w	r2, #4294967295
 8013c7c:	f7fe fc64 	bl	8012548 <put_fat.part.0>
		if (res != FR_OK) return res;
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d1f1      	bne.n	8013c68 <remove_chain+0x2c>
 8013c84:	6837      	ldr	r7, [r6, #0]
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	e7e4      	b.n	8013c54 <remove_chain+0x18>
			bc = (UINT)clst; bc += bc / 2;
 8013c8a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c92:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c96:	4291      	cmp	r1, r2
 8013c98:	d006      	beq.n	8013ca8 <remove_chain+0x6c>
 8013c9a:	4638      	mov	r0, r7
 8013c9c:	f7fe fc1a 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	d16c      	bne.n	8013d7e <remove_chain+0x142>
 8013ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8013ca8:	f3c8 0008 	ubfx	r0, r8, #0, #9
 8013cac:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013cb0:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8013cb4:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013cb6:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8013cb8:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013cbc:	d004      	beq.n	8013cc8 <remove_chain+0x8c>
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	f7fe fc08 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	d15a      	bne.n	8013d7e <remove_chain+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013cc8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013ccc:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8013cce:	4447      	add	r7, r8
 8013cd0:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8013cd4:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013cd8:	d553      	bpl.n	8013d82 <remove_chain+0x146>
 8013cda:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 8013cde:	f1b8 0f00 	cmp.w	r8, #0
 8013ce2:	d051      	beq.n	8013d88 <remove_chain+0x14c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013ce4:	f1b8 0f01 	cmp.w	r8, #1
 8013ce8:	d0bd      	beq.n	8013c66 <remove_chain+0x2a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013cea:	69ab      	ldr	r3, [r5, #24]
 8013cec:	42a3      	cmp	r3, r4
 8013cee:	d9ba      	bls.n	8013c66 <remove_chain+0x2a>
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	f7fe fc27 	bl	8012548 <put_fat.part.0>
			if (res != FR_OK) return res;
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d1b4      	bne.n	8013c68 <remove_chain+0x2c>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013cfe:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8013d02:	1e91      	subs	r1, r2, #2
 8013d04:	428b      	cmp	r3, r1
 8013d06:	d205      	bcs.n	8013d14 <remove_chain+0xd8>
			fs->fsi_flag |= 1;
 8013d08:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 8013d0a:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8013d0c:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8013d10:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8013d12:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013d14:	4542      	cmp	r2, r8
 8013d16:	d937      	bls.n	8013d88 <remove_chain+0x14c>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013d18:	6837      	ldr	r7, [r6, #0]
 8013d1a:	4644      	mov	r4, r8
 8013d1c:	69bb      	ldr	r3, [r7, #24]
 8013d1e:	e799      	b.n	8013c54 <remove_chain+0x18>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013d24:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d28:	4299      	cmp	r1, r3
 8013d2a:	d003      	beq.n	8013d34 <remove_chain+0xf8>
 8013d2c:	4638      	mov	r0, r7
 8013d2e:	f7fe fbd1 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013d32:	bb20      	cbnz	r0, 8013d7e <remove_chain+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013d34:	00a3      	lsls	r3, r4, #2
 8013d36:	3734      	adds	r7, #52	; 0x34
 8013d38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013d3c:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8013d3e:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 8013d42:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8013d44:	7853      	ldrb	r3, [r2, #1]
 8013d46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8013d4a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013d4e:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8013d52:	e7c4      	b.n	8013cde <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013d58:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d5c:	4299      	cmp	r1, r3
 8013d5e:	d003      	beq.n	8013d68 <remove_chain+0x12c>
 8013d60:	4638      	mov	r0, r7
 8013d62:	f7fe fbb7 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013d66:	b950      	cbnz	r0, 8013d7e <remove_chain+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013d68:	0063      	lsls	r3, r4, #1
 8013d6a:	3734      	adds	r7, #52	; 0x34
 8013d6c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013d70:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8013d72:	f817 8003 	ldrb.w	r8, [r7, r3]
 8013d76:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013d78:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 8013d7c:	e7af      	b.n	8013cde <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013d7e:	2001      	movs	r0, #1
 8013d80:	e772      	b.n	8013c68 <remove_chain+0x2c>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013d82:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8013d86:	e7aa      	b.n	8013cde <remove_chain+0xa2>
	return FR_OK;
 8013d88:	2000      	movs	r0, #0
 8013d8a:	e76d      	b.n	8013c68 <remove_chain+0x2c>

08013d8c <dir_register>:
{
 8013d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013d90:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 8013d94:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013d96:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 8013d9a:	f040 8334 	bne.w	8014406 <dir_register+0x67a>
	FATFS *fs = dp->obj.fs;
 8013d9e:	6803      	ldr	r3, [r0, #0]
 8013da0:	4681      	mov	r9, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013da2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	FATFS *fs = dp->obj.fs;
 8013da6:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013da8:	f8bc 3000 	ldrh.w	r3, [ip]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	f000 8348 	beq.w	8014442 <dir_register+0x6b6>
 8013db2:	4663      	mov	r3, ip
 8013db4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8013db8:	3501      	adds	r5, #1
 8013dba:	2a00      	cmp	r2, #0
 8013dbc:	d1fa      	bne.n	8013db4 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 8013dbe:	f109 0a24 	add.w	sl, r9, #36	; 0x24
	if (cnt) {
 8013dc2:	ab10      	add	r3, sp, #64	; 0x40
 8013dc4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8013dc8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013dcc:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8013dd0:	07d9      	lsls	r1, r3, #31
 8013dd2:	9308      	str	r3, [sp, #32]
 8013dd4:	f100 809a 	bmi.w	8013f0c <dir_register+0x180>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013dd8:	f013 0302 	ands.w	r3, r3, #2
 8013ddc:	9f00      	ldr	r7, [sp, #0]
 8013dde:	f000 82ba 	beq.w	8014356 <dir_register+0x5ca>
 8013de2:	4b74      	ldr	r3, [pc, #464]	; (8013fb4 <dir_register+0x228>)
 8013de4:	350c      	adds	r5, #12
	res = dir_sdi(dp, 0);
 8013de6:	2100      	movs	r1, #0
 8013de8:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013dea:	fba3 3505 	umull	r3, r5, r3, r5
 8013dee:	08ab      	lsrs	r3, r5, #2
 8013df0:	9301      	str	r3, [sp, #4]
 8013df2:	3301      	adds	r3, #1
 8013df4:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8013df6:	f7ff fb09 	bl	801340c <dir_sdi>
	if (res == FR_OK) {
 8013dfa:	4683      	mov	fp, r0
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	f040 82b5 	bne.w	801436c <dir_register+0x5e0>
						fs->wflag = 1;
 8013e02:	f8cd a00c 	str.w	sl, [sp, #12]
		n = 0;
 8013e06:	4680      	mov	r8, r0
 8013e08:	f8d9 101c 	ldr.w	r1, [r9, #28]
						fs->wflag = 1;
 8013e0c:	46a3      	mov	fp, r4
 8013e0e:	46ba      	mov	sl, r7
 8013e10:	9002      	str	r0, [sp, #8]
 8013e12:	e029      	b.n	8013e68 <dir_register+0xdc>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013e14:	fab3 f283 	clz	r2, r3
 8013e18:	0952      	lsrs	r2, r2, #5
 8013e1a:	b3a3      	cbz	r3, 8013e86 <dir_register+0xfa>
				n = 0;					/* Not a blank entry. Restart to search */
 8013e1c:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013e1e:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013e22:	f8d9 101c 	ldr.w	r1, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013e26:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013e28:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8013e2c:	f080 82a1 	bcs.w	8014372 <dir_register+0x5e6>
 8013e30:	2900      	cmp	r1, #0
 8013e32:	f000 829e 	beq.w	8014372 <dir_register+0x5e6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013e36:	f3c4 0708 	ubfx	r7, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 8013e3a:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013e3e:	b967      	cbnz	r7, 8013e5a <dir_register+0xce>
		dp->sect++;				/* Next sector */
 8013e40:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
 8013e42:	f8d9 3018 	ldr.w	r3, [r9, #24]
		dp->sect++;				/* Next sector */
 8013e46:	f8c9 101c 	str.w	r1, [r9, #28]
		if (!dp->clust) {		/* Static table */
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f040 82ab 	bne.w	80143a6 <dir_register+0x61a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013e50:	8932      	ldrh	r2, [r6, #8]
 8013e52:	ebb2 1f54 	cmp.w	r2, r4, lsr #5
 8013e56:	f240 82f1 	bls.w	801443c <dir_register+0x6b0>
 8013e5a:	f106 0534 	add.w	r5, r6, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013e5e:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 8013e60:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013e64:	f8c9 5020 	str.w	r5, [r9, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013e68:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8013e6c:	428b      	cmp	r3, r1
 8013e6e:	d005      	beq.n	8013e7c <dir_register+0xf0>
 8013e70:	4650      	mov	r0, sl
 8013e72:	f7fe fb2f 	bl	80124d4 <move_window.part.0>
			if (res != FR_OK) break;
 8013e76:	2800      	cmp	r0, #0
 8013e78:	f040 82e5 	bne.w	8014446 <dir_register+0x6ba>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013e7c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	2be5      	cmp	r3, #229	; 0xe5
 8013e84:	d1c6      	bne.n	8013e14 <dir_register+0x88>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013e86:	f108 0801 	add.w	r8, r8, #1
 8013e8a:	45c3      	cmp	fp, r8
 8013e8c:	d1c7      	bne.n	8013e1e <dir_register+0x92>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013e8e:	9b01      	ldr	r3, [sp, #4]
 8013e90:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	f040 82bc 	bne.w	8014412 <dir_register+0x686>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013e9a:	9b00      	ldr	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 8013e9c:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ea2:	4299      	cmp	r1, r3
 8013ea4:	d005      	beq.n	8013eb2 <dir_register+0x126>
 8013ea6:	9800      	ldr	r0, [sp, #0]
 8013ea8:	f7fe fb14 	bl	80124d4 <move_window.part.0>
		if (res == FR_OK) {
 8013eac:	2800      	cmp	r0, #0
 8013eae:	f040 82ba 	bne.w	8014426 <dir_register+0x69a>
	BYTE *d = (BYTE*)dst;
 8013eb2:	2220      	movs	r2, #32
 8013eb4:	2100      	movs	r1, #0
 8013eb6:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8013eba:	f00e f9a7 	bl	802220c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013ebe:	f8d9 3020 	ldr.w	r3, [r9, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013ec2:	1d1a      	adds	r2, r3, #4
 8013ec4:	4592      	cmp	sl, r2
 8013ec6:	d204      	bcs.n	8013ed2 <dir_register+0x146>
 8013ec8:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	f0c0 8489 	bcc.w	80147e4 <dir_register+0xa58>
			*d++ = *s++;
 8013ed2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8013ed6:	601a      	str	r2, [r3, #0]
 8013ed8:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8013edc:	605a      	str	r2, [r3, #4]
 8013ede:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
}
 8013ee2:	4658      	mov	r0, fp
			*d++ = *s++;
 8013ee4:	721a      	strb	r2, [r3, #8]
 8013ee6:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
 8013eea:	725a      	strb	r2, [r3, #9]
 8013eec:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
 8013ef0:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8013ef2:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013ef4:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 8013ef8:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8013efc:	f003 0318 	and.w	r3, r3, #24
 8013f00:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8013f02:	9b00      	ldr	r3, [sp, #0]
 8013f04:	70da      	strb	r2, [r3, #3]
}
 8013f06:	b011      	add	sp, #68	; 0x44
 8013f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013f0c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8013f10:	2340      	movs	r3, #64	; 0x40
 8013f12:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		for (n = 1; n < 100; n++) {
 8013f16:	2701      	movs	r7, #1
 8013f18:	9201      	str	r2, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013f1a:	f04f 0820 	mov.w	r8, #32
 8013f1e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013f22:	468b      	mov	fp, r1
 8013f24:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8013f28:	9204      	str	r2, [sp, #16]
 8013f2a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8013f2e:	9509      	str	r5, [sp, #36]	; 0x24
 8013f30:	4605      	mov	r5, r0
 8013f32:	9203      	str	r2, [sp, #12]
 8013f34:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8013f38:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
 8013f3c:	9202      	str	r2, [sp, #8]
 8013f3e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
				if (sr & 0x10000) sr ^= 0x11021;
 8013f42:	4c1d      	ldr	r4, [pc, #116]	; (8013fb8 <dir_register+0x22c>)
 8013f44:	9207      	str	r2, [sp, #28]
 8013f46:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013f4a:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8013f4e:	9206      	str	r2, [sp, #24]
 8013f50:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8013f54:	9205      	str	r2, [sp, #20]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013f56:	4662      	mov	r2, ip
			*d++ = *s++;
 8013f58:	9801      	ldr	r0, [sp, #4]
 8013f5a:	2100      	movs	r1, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013f5c:	2f05      	cmp	r7, #5
			*d++ = *s++;
 8013f5e:	f889 602e 	strb.w	r6, [r9, #46]	; 0x2e
 8013f62:	f8a9 002c 	strh.w	r0, [r9, #44]	; 0x2c
 8013f66:	460b      	mov	r3, r1
 8013f68:	9804      	ldr	r0, [sp, #16]
 8013f6a:	f360 0107 	bfi	r1, r0, #0, #8
 8013f6e:	9806      	ldr	r0, [sp, #24]
 8013f70:	f360 0307 	bfi	r3, r0, #0, #8
 8013f74:	9803      	ldr	r0, [sp, #12]
 8013f76:	f360 210f 	bfi	r1, r0, #8, #8
 8013f7a:	9805      	ldr	r0, [sp, #20]
 8013f7c:	f360 230f 	bfi	r3, r0, #8, #8
 8013f80:	9802      	ldr	r0, [sp, #8]
 8013f82:	f36b 4317 	bfi	r3, fp, #16, #8
 8013f86:	f360 4117 	bfi	r1, r0, #16, #8
 8013f8a:	9807      	ldr	r0, [sp, #28]
 8013f8c:	f365 631f 	bfi	r3, r5, #24, #8
 8013f90:	f360 611f 	bfi	r1, r0, #24, #8
 8013f94:	e9c9 1309 	strd	r1, r3, [r9, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013f98:	f240 8158 	bls.w	801424c <dir_register+0x4c0>
		while (*lfn) {	/* Create a CRC */
 8013f9c:	8813      	ldrh	r3, [r2, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	f000 8154 	beq.w	801424c <dir_register+0x4c0>
				sr = (sr << 1) + (wc & 1);
 8013fa4:	f003 0101 	and.w	r1, r3, #1
 8013fa8:	4694      	mov	ip, r2
				wc >>= 1;
 8013faa:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 8013fac:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013fb0:	e00c      	b.n	8013fcc <dir_register+0x240>
 8013fb2:	bf00      	nop
 8013fb4:	4ec4ec4f 	.word	0x4ec4ec4f
 8013fb8:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 8013fbc:	f003 0101 	and.w	r1, r3, #1
				wc >>= 1;
 8013fc0:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 8013fc2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013fc6:	0412      	lsls	r2, r2, #16
 8013fc8:	bf48      	it	mi
 8013fca:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8013fcc:	f000 0001 	and.w	r0, r0, #1
				wc >>= 1;
 8013fd0:	089a      	lsrs	r2, r3, #2
				sr = (sr << 1) + (wc & 1);
 8013fd2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013fd6:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8013fd8:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 8013fdc:	ea4f 02d3 	mov.w	r2, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8013fe0:	bf48      	it	mi
 8013fe2:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8013fe4:	f002 0201 	and.w	r2, r2, #1
 8013fe8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013fec:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8013fee:	ea4f 1013 	mov.w	r0, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8013ff2:	bf48      	it	mi
 8013ff4:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8013ff6:	f000 0001 	and.w	r0, r0, #1
 8013ffa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013ffe:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8014000:	ea4f 1153 	mov.w	r1, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8014004:	bf48      	it	mi
 8014006:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8014008:	f001 0101 	and.w	r1, r1, #1
 801400c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8014010:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8014012:	ea4f 1293 	mov.w	r2, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8014016:	bf48      	it	mi
 8014018:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801401a:	f002 0201 	and.w	r2, r2, #1
 801401e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8014022:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8014024:	ea4f 10d3 	mov.w	r0, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8014028:	bf48      	it	mi
 801402a:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 801402c:	f000 0001 	and.w	r0, r0, #1
 8014030:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8014034:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8014036:	ea4f 2113 	mov.w	r1, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 801403a:	bf48      	it	mi
 801403c:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 801403e:	f001 0101 	and.w	r1, r1, #1
 8014042:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8014046:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8014048:	ea4f 2253 	mov.w	r2, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 801404c:	bf48      	it	mi
 801404e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8014050:	f002 0201 	and.w	r2, r2, #1
 8014054:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8014058:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 801405a:	ea4f 2093 	mov.w	r0, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 801405e:	bf48      	it	mi
 8014060:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8014062:	f000 0001 	and.w	r0, r0, #1
 8014066:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801406a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 801406c:	ea4f 21d3 	mov.w	r1, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8014070:	bf48      	it	mi
 8014072:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8014074:	f001 0101 	and.w	r1, r1, #1
 8014078:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801407c:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 801407e:	ea4f 3213 	mov.w	r2, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8014082:	bf48      	it	mi
 8014084:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8014086:	f002 0201 	and.w	r2, r2, #1
 801408a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801408e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8014090:	ea4f 3053 	mov.w	r0, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8014094:	bf48      	it	mi
 8014096:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8014098:	f000 0001 	and.w	r0, r0, #1
 801409c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80140a0:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80140a2:	ea4f 3193 	mov.w	r1, r3, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 80140a6:	bf48      	it	mi
 80140a8:	4062      	eormi	r2, r4
				wc >>= 1;
 80140aa:	0bdb      	lsrs	r3, r3, #15
				sr = (sr << 1) + (wc & 1);
 80140ac:	f001 0101 	and.w	r1, r1, #1
 80140b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80140b4:	0412      	lsls	r2, r2, #16
 80140b6:	bf48      	it	mi
 80140b8:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80140ba:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80140be:	0400      	lsls	r0, r0, #16
 80140c0:	bf48      	it	mi
 80140c2:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80140c4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80140c8:	0409      	lsls	r1, r1, #16
		while (*lfn) {	/* Create a CRC */
 80140ca:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 80140ce:	bf48      	it	mi
 80140d0:	4062      	eormi	r2, r4
		while (*lfn) {	/* Create a CRC */
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f47f af72 	bne.w	8013fbc <dir_register+0x230>
		c = (BYTE)((seq % 16) + '0');
 80140d8:	f002 010f 	and.w	r1, r2, #15
 80140dc:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 80140e0:	2b39      	cmp	r3, #57	; 0x39
 80140e2:	bf88      	it	hi
 80140e4:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 80140e8:	2a0f      	cmp	r2, #15
		seq /= 16;
 80140ea:	ea4f 1112 	mov.w	r1, r2, lsr #4
		ns[i--] = c;
 80140ee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	} while (seq);
 80140f2:	f240 8144 	bls.w	801437e <dir_register+0x5f2>
		c = (BYTE)((seq % 16) + '0');
 80140f6:	f001 000f 	and.w	r0, r1, #15
 80140fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 80140fe:	2b39      	cmp	r3, #57	; 0x39
 8014100:	bf88      	it	hi
 8014102:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8014106:	290f      	cmp	r1, #15
		seq /= 16;
 8014108:	ea4f 2012 	mov.w	r0, r2, lsr #8
		ns[i--] = c;
 801410c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	} while (seq);
 8014110:	f240 813a 	bls.w	8014388 <dir_register+0x5fc>
		c = (BYTE)((seq % 16) + '0');
 8014114:	f000 010f 	and.w	r1, r0, #15
 8014118:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 801411c:	2b39      	cmp	r3, #57	; 0x39
 801411e:	bf88      	it	hi
 8014120:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8014124:	280f      	cmp	r0, #15
		seq /= 16;
 8014126:	ea4f 3112 	mov.w	r1, r2, lsr #12
		ns[i--] = c;
 801412a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	} while (seq);
 801412e:	f240 8130 	bls.w	8014392 <dir_register+0x606>
		c = (BYTE)((seq % 16) + '0');
 8014132:	f001 000f 	and.w	r0, r1, #15
 8014136:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 801413a:	2b39      	cmp	r3, #57	; 0x39
 801413c:	bf88      	it	hi
 801413e:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8014142:	290f      	cmp	r1, #15
		seq /= 16;
 8014144:	ea4f 4012 	mov.w	r0, r2, lsr #16
		ns[i--] = c;
 8014148:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	} while (seq);
 801414c:	f240 8126 	bls.w	801439c <dir_register+0x610>
		c = (BYTE)((seq % 16) + '0');
 8014150:	f000 010f 	and.w	r1, r0, #15
 8014154:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8014158:	2b39      	cmp	r3, #57	; 0x39
 801415a:	bf88      	it	hi
 801415c:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8014160:	280f      	cmp	r0, #15
		seq /= 16;
 8014162:	ea4f 5112 	mov.w	r1, r2, lsr #20
		ns[i--] = c;
 8014166:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	} while (seq);
 801416a:	f240 8142 	bls.w	80143f2 <dir_register+0x666>
		c = (BYTE)((seq % 16) + '0');
 801416e:	f001 000f 	and.w	r0, r1, #15
 8014172:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8014176:	2b39      	cmp	r3, #57	; 0x39
 8014178:	bf88      	it	hi
 801417a:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 801417e:	290f      	cmp	r1, #15
		seq /= 16;
 8014180:	ea4f 6012 	mov.w	r0, r2, lsr #24
		ns[i--] = c;
 8014184:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	} while (seq);
 8014188:	f240 8138 	bls.w	80143fc <dir_register+0x670>
		c = (BYTE)((seq % 16) + '0');
 801418c:	f000 010f 	and.w	r1, r0, #15
		seq /= 16;
 8014190:	0f12      	lsrs	r2, r2, #28
		c = (BYTE)((seq % 16) + '0');
 8014192:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8014196:	2b39      	cmp	r3, #57	; 0x39
 8014198:	bf88      	it	hi
 801419a:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 801419e:	280f      	cmp	r0, #15
		ns[i--] = c;
 80141a0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	} while (seq);
 80141a4:	d954      	bls.n	8014250 <dir_register+0x4c4>
		c = (BYTE)((seq % 16) + '0');
 80141a6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80141aa:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
 80141ac:	2b39      	cmp	r3, #57	; 0x39
 80141ae:	bf88      	it	hi
 80141b0:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
		ns[i--] = c;
 80141b4:	f04f 32ff 	mov.w	r2, #4294967295
 80141b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80141bc:	f109 0123 	add.w	r1, r9, #35	; 0x23
 80141c0:	2300      	movs	r3, #0
 80141c2:	e002      	b.n	80141ca <dir_register+0x43e>
 80141c4:	3301      	adds	r3, #1
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d003      	beq.n	80141d2 <dir_register+0x446>
 80141ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80141ce:	2820      	cmp	r0, #32
 80141d0:	d1f8      	bne.n	80141c4 <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80141d2:	2a07      	cmp	r2, #7
 80141d4:	d941      	bls.n	801425a <dir_register+0x4ce>
 80141d6:	1c59      	adds	r1, r3, #1
 80141d8:	f80a 8003 	strb.w	r8, [sl, r3]
	} while (j < 8);
 80141dc:	2907      	cmp	r1, #7
 80141de:	d829      	bhi.n	8014234 <dir_register+0x4a8>
 80141e0:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80141e2:	f101 0001 	add.w	r0, r1, #1
 80141e6:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 80141ea:	d023      	beq.n	8014234 <dir_register+0x4a8>
 80141ec:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80141ee:	f100 0101 	add.w	r1, r0, #1
 80141f2:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 80141f6:	d01d      	beq.n	8014234 <dir_register+0x4a8>
 80141f8:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80141fa:	f101 0001 	add.w	r0, r1, #1
 80141fe:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8014202:	d017      	beq.n	8014234 <dir_register+0x4a8>
 8014204:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014206:	f100 0101 	add.w	r1, r0, #1
 801420a:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 801420e:	d011      	beq.n	8014234 <dir_register+0x4a8>
 8014210:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014212:	f101 0001 	add.w	r0, r1, #1
 8014216:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801421a:	d00b      	beq.n	8014234 <dir_register+0x4a8>
 801421c:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801421e:	f100 0101 	add.w	r1, r0, #1
 8014222:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8014226:	d005      	beq.n	8014234 <dir_register+0x4a8>
 8014228:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801422a:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801422e:	d101      	bne.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014230:	f889 802b 	strb.w	r8, [r9, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014234:	4648      	mov	r0, r9
 8014236:	f7ff f9af 	bl	8013598 <dir_find>
			if (res != FR_OK) break;
 801423a:	2800      	cmp	r0, #0
 801423c:	d17e      	bne.n	801433c <dir_register+0x5b0>
		for (n = 1; n < 100; n++) {
 801423e:	3701      	adds	r7, #1
 8014240:	2f64      	cmp	r7, #100	; 0x64
 8014242:	f000 8096 	beq.w	8014372 <dir_register+0x5e6>
 8014246:	9b00      	ldr	r3, [sp, #0]
 8014248:	68da      	ldr	r2, [r3, #12]
 801424a:	e685      	b.n	8013f58 <dir_register+0x1cc>
 801424c:	463a      	mov	r2, r7
 801424e:	e743      	b.n	80140d8 <dir_register+0x34c>
	ns[i] = '~';
 8014250:	237e      	movs	r3, #126	; 0x7e
 8014252:	2200      	movs	r2, #0
 8014254:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014258:	4613      	mov	r3, r2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801425a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801425e:	1c59      	adds	r1, r3, #1
 8014260:	1c50      	adds	r0, r2, #1
 8014262:	4494      	add	ip, r2
	} while (j < 8);
 8014264:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014266:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 801426a:	f80a c003 	strb.w	ip, [sl, r3]
	} while (j < 8);
 801426e:	d8e1      	bhi.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014270:	2807      	cmp	r0, #7
 8014272:	d8b5      	bhi.n	80141e0 <dir_register+0x454>
 8014274:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
	} while (j < 8);
 8014278:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801427a:	4460      	add	r0, ip
 801427c:	f102 0c02 	add.w	ip, r2, #2
 8014280:	f810 ec14 	ldrb.w	lr, [r0, #-20]
 8014284:	f103 0002 	add.w	r0, r3, #2
 8014288:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 801428c:	d0d2      	beq.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801428e:	f1bc 0f08 	cmp.w	ip, #8
 8014292:	d0ab      	beq.n	80141ec <dir_register+0x460>
 8014294:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8014296:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014298:	f102 0e03 	add.w	lr, r2, #3
 801429c:	448c      	add	ip, r1
 801429e:	f103 0103 	add.w	r1, r3, #3
 80142a2:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 80142a6:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 80142aa:	d0c3      	beq.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142ac:	f1be 0f07 	cmp.w	lr, #7
 80142b0:	d8a2      	bhi.n	80141f8 <dir_register+0x46c>
 80142b2:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 80142b4:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142b6:	f102 0c04 	add.w	ip, r2, #4
 80142ba:	4486      	add	lr, r0
 80142bc:	f103 0004 	add.w	r0, r3, #4
 80142c0:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 80142c4:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 80142c8:	d0b4      	beq.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142ca:	f1bc 0f08 	cmp.w	ip, #8
 80142ce:	d099      	beq.n	8014204 <dir_register+0x478>
 80142d0:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 80142d2:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142d4:	f102 0e05 	add.w	lr, r2, #5
 80142d8:	448c      	add	ip, r1
 80142da:	f103 0105 	add.w	r1, r3, #5
 80142de:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 80142e2:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 80142e6:	d0a5      	beq.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142e8:	f1be 0f07 	cmp.w	lr, #7
 80142ec:	d890      	bhi.n	8014210 <dir_register+0x484>
 80142ee:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 80142f0:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142f2:	f102 0c06 	add.w	ip, r2, #6
 80142f6:	4486      	add	lr, r0
 80142f8:	f103 0006 	add.w	r0, r3, #6
 80142fc:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8014300:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8014304:	d096      	beq.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014306:	f1bc 0f08 	cmp.w	ip, #8
 801430a:	d087      	beq.n	801421c <dir_register+0x490>
 801430c:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 801430e:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014310:	448c      	add	ip, r1
 8014312:	f103 0107 	add.w	r1, r3, #7
 8014316:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 801431a:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 801431e:	d089      	beq.n	8014234 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014320:	2a00      	cmp	r2, #0
 8014322:	d181      	bne.n	8014228 <dir_register+0x49c>
 8014324:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	} while (j < 8);
 8014328:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801432a:	f80a 3001 	strb.w	r3, [sl, r1]
	} while (j < 8);
 801432e:	f43f af7f 	beq.w	8014230 <dir_register+0x4a4>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014332:	4648      	mov	r0, r9
 8014334:	f7ff f930 	bl	8013598 <dir_find>
			if (res != FR_OK) break;
 8014338:	2800      	cmp	r0, #0
 801433a:	d080      	beq.n	801423e <dir_register+0x4b2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801433c:	2804      	cmp	r0, #4
 801433e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014340:	4683      	mov	fp, r0
 8014342:	d118      	bne.n	8014376 <dir_register+0x5ea>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8014344:	9b08      	ldr	r3, [sp, #32]
 8014346:	f8d9 7000 	ldr.w	r7, [r9]
 801434a:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801434e:	f013 0302 	ands.w	r3, r3, #2
 8014352:	f47f ad46 	bne.w	8013de2 <dir_register+0x56>
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 801435a:	2100      	movs	r1, #0
 801435c:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801435e:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8014360:	f7ff f854 	bl	801340c <dir_sdi>
	if (res == FR_OK) {
 8014364:	4683      	mov	fp, r0
 8014366:	2800      	cmp	r0, #0
 8014368:	f43f ad4b 	beq.w	8013e02 <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801436c:	f1bb 0f04 	cmp.w	fp, #4
 8014370:	d101      	bne.n	8014376 <dir_register+0x5ea>
 8014372:	f04f 0b07 	mov.w	fp, #7
}
 8014376:	4658      	mov	r0, fp
 8014378:	b011      	add	sp, #68	; 0x44
 801437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 801437e:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8014380:	2206      	movs	r2, #6
	ns[i] = '~';
 8014382:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014386:	e719      	b.n	80141bc <dir_register+0x430>
	ns[i] = '~';
 8014388:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801438a:	2205      	movs	r2, #5
	ns[i] = '~';
 801438c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014390:	e714      	b.n	80141bc <dir_register+0x430>
	ns[i] = '~';
 8014392:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8014394:	2204      	movs	r2, #4
	ns[i] = '~';
 8014396:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801439a:	e70f      	b.n	80141bc <dir_register+0x430>
	ns[i] = '~';
 801439c:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801439e:	2203      	movs	r2, #3
	ns[i] = '~';
 80143a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80143a4:	e70a      	b.n	80141bc <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80143a6:	8972      	ldrh	r2, [r6, #10]
 80143a8:	3a01      	subs	r2, #1
 80143aa:	ea12 2254 	ands.w	r2, r2, r4, lsr #9
 80143ae:	f47f ad54 	bne.w	8013e5a <dir_register+0xce>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80143b2:	4619      	mov	r1, r3
 80143b4:	4630      	mov	r0, r6
 80143b6:	f7fe f965 	bl	8012684 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80143ba:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80143bc:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80143be:	f240 822b 	bls.w	8014818 <dir_register+0xa8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80143c2:	1c42      	adds	r2, r0, #1
 80143c4:	d034      	beq.n	8014430 <dir_register+0x6a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80143c6:	69b3      	ldr	r3, [r6, #24]
 80143c8:	4298      	cmp	r0, r3
 80143ca:	d23e      	bcs.n	801444a <dir_register+0x6be>
 80143cc:	1e82      	subs	r2, r0, #2
 80143ce:	3b02      	subs	r3, #2
 80143d0:	f106 0534 	add.w	r5, r6, #52	; 0x34
 80143d4:	9205      	str	r2, [sp, #20]
				dp->clust = clst;		/* Initialize data for new cluster */
 80143d6:	9a04      	ldr	r2, [sp, #16]
 80143d8:	f8c9 2018 	str.w	r2, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80143dc:	9a05      	ldr	r2, [sp, #20]
 80143de:	4293      	cmp	r3, r2
 80143e0:	f240 81fe 	bls.w	80147e0 <dir_register+0xa54>
	return clst * fs->csize + fs->database;
 80143e4:	8971      	ldrh	r1, [r6, #10]
 80143e6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80143e8:	fb02 3101 	mla	r1, r2, r1, r3
				dp->sect = clust2sect(fs, clst);
 80143ec:	f8c9 101c 	str.w	r1, [r9, #28]
 80143f0:	e535      	b.n	8013e5e <dir_register+0xd2>
	ns[i] = '~';
 80143f2:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80143f4:	2202      	movs	r2, #2
	ns[i] = '~';
 80143f6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80143fa:	e6df      	b.n	80141bc <dir_register+0x430>
	ns[i] = '~';
 80143fc:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80143fe:	2201      	movs	r2, #1
	ns[i] = '~';
 8014400:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014404:	e6da      	b.n	80141bc <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8014406:	f04f 0b06 	mov.w	fp, #6
}
 801440a:	4658      	mov	r0, fp
 801440c:	b011      	add	sp, #68	; 0x44
 801440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8014412:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8014416:	4648      	mov	r0, r9
 8014418:	461e      	mov	r6, r3
 801441a:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 801441e:	f7fe fff5 	bl	801340c <dir_sdi>
		if (res == FR_OK) {
 8014422:	2800      	cmp	r0, #0
 8014424:	d074      	beq.n	8014510 <dir_register+0x784>
 8014426:	4683      	mov	fp, r0
}
 8014428:	4658      	mov	r0, fp
 801442a:	b011      	add	sp, #68	; 0x44
 801442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014430:	f04f 0b01 	mov.w	fp, #1
}
 8014434:	4658      	mov	r0, fp
 8014436:	b011      	add	sp, #68	; 0x44
 8014438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 801443c:	f8c9 301c 	str.w	r3, [r9, #28]
 8014440:	e797      	b.n	8014372 <dir_register+0x5e6>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8014442:	461d      	mov	r5, r3
 8014444:	e4bb      	b.n	8013dbe <dir_register+0x32>
 8014446:	4683      	mov	fp, r0
 8014448:	e790      	b.n	801436c <dir_register+0x5e0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801444a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801444e:	4648      	mov	r0, r9
 8014450:	f7fe fcaa 	bl	8012da8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014454:	4603      	mov	r3, r0
 8014456:	9004      	str	r0, [sp, #16]
 8014458:	2800      	cmp	r0, #0
 801445a:	d08a      	beq.n	8014372 <dir_register+0x5e6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801445c:	2801      	cmp	r0, #1
 801445e:	f000 81db 	beq.w	8014818 <dir_register+0xa8c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014462:	3301      	adds	r3, #1
 8014464:	d0e4      	beq.n	8014430 <dir_register+0x6a4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014466:	78f3      	ldrb	r3, [r6, #3]
 8014468:	2b00      	cmp	r3, #0
 801446a:	f040 81e7 	bne.w	801483c <dir_register+0xab0>
 801446e:	f106 0534 	add.w	r5, r6, #52	; 0x34
	clst -= 2;
 8014472:	9b04      	ldr	r3, [sp, #16]
 8014474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014478:	2100      	movs	r1, #0
 801447a:	4628      	mov	r0, r5
 801447c:	3b02      	subs	r3, #2
 801447e:	9305      	str	r3, [sp, #20]
 8014480:	f00d fec4 	bl	802220c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014484:	69b3      	ldr	r3, [r6, #24]
 8014486:	9a05      	ldr	r2, [sp, #20]
 8014488:	3b02      	subs	r3, #2
 801448a:	429a      	cmp	r2, r3
 801448c:	f080 8203 	bcs.w	8014896 <dir_register+0xb0a>
	return clst * fs->csize + fs->database;
 8014490:	4610      	mov	r0, r2
 8014492:	8971      	ldrh	r1, [r6, #10]
 8014494:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8014496:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801449a:	6332      	str	r2, [r6, #48]	; 0x30
 801449c:	2900      	cmp	r1, #0
 801449e:	f000 81cb 	beq.w	8014838 <dir_register+0xaac>
 80144a2:	2300      	movs	r3, #0
 80144a4:	9708      	str	r7, [sp, #32]
 80144a6:	462f      	mov	r7, r5
 80144a8:	4615      	mov	r5, r2
 80144aa:	e9cd b406 	strd	fp, r4, [sp, #24]
 80144ae:	461c      	mov	r4, r3
						fs->wflag = 1;
 80144b0:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80144b4:	462a      	mov	r2, r5
 80144b6:	4639      	mov	r1, r7
 80144b8:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 80144ba:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80144bc:	2301      	movs	r3, #1
 80144be:	f7fd ff65 	bl	801238c <disk_write>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	d1b4      	bne.n	8014430 <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80144c6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80144c8:	69f3      	ldr	r3, [r6, #28]
 80144ca:	eba5 0c02 	sub.w	ip, r5, r2
			fs->wflag = 0;
 80144ce:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80144d0:	459c      	cmp	ip, r3
 80144d2:	d212      	bcs.n	80144fa <dir_register+0x76e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80144d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80144d8:	f1bb 0f01 	cmp.w	fp, #1
 80144dc:	d801      	bhi.n	80144e2 <dir_register+0x756>
 80144de:	e00c      	b.n	80144fa <dir_register+0x76e>
 80144e0:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80144e2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80144e4:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80144e8:	2301      	movs	r3, #1
 80144ea:	4639      	mov	r1, r7
 80144ec:	462a      	mov	r2, r5
 80144ee:	7870      	ldrb	r0, [r6, #1]
 80144f0:	f7fd ff4c 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80144f4:	f1bb 0f01 	cmp.w	fp, #1
 80144f8:	d1f2      	bne.n	80144e0 <dir_register+0x754>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80144fa:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80144fc:	1c63      	adds	r3, r4, #1
 80144fe:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8014502:	1c45      	adds	r5, r0, #1
 8014504:	4563      	cmp	r3, ip
 8014506:	6335      	str	r5, [r6, #48]	; 0x30
 8014508:	f080 818d 	bcs.w	8014826 <dir_register+0xa9a>
 801450c:	461c      	mov	r4, r3
 801450e:	e7cf      	b.n	80144b0 <dir_register+0x724>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014510:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8014514:	4604      	mov	r4, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014516:	f899 1025 	ldrb.w	r1, [r9, #37]	; 0x25
 801451a:	01d3      	lsls	r3, r2, #7
 801451c:	f899 5026 	ldrb.w	r5, [r9, #38]	; 0x26
 8014520:	f899 0027 	ldrb.w	r0, [r9, #39]	; 0x27
 8014524:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8014528:	9f00      	ldr	r7, [sp, #0]
 801452a:	185a      	adds	r2, r3, r1
 801452c:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8014530:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014534:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014538:	fa55 f283 	uxtab	r2, r5, r3
 801453c:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8014540:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014544:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014548:	fa50 f283 	uxtab	r2, r0, r3
 801454c:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 8014550:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014554:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014558:	fa51 f283 	uxtab	r2, r1, r3
 801455c:	f899 102b 	ldrb.w	r1, [r9, #43]	; 0x2b
 8014560:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014564:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014568:	fa55 f283 	uxtab	r2, r5, r3
 801456c:	f899 502c 	ldrb.w	r5, [r9, #44]	; 0x2c
 8014570:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014574:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014578:	fa50 f283 	uxtab	r2, r0, r3
 801457c:	f899 002d 	ldrb.w	r0, [r9, #45]	; 0x2d
 8014580:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014584:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014588:	fa51 f283 	uxtab	r2, r1, r3
 801458c:	f899 102e 	ldrb.w	r1, [r9, #46]	; 0x2e
 8014590:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014594:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014598:	fa55 f283 	uxtab	r2, r5, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801459c:	25ff      	movs	r5, #255	; 0xff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801459e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80145a2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80145a6:	fa50 f383 	uxtab	r3, r0, r3
 80145aa:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80145ae:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80145b2:	fa51 f183 	uxtab	r1, r1, r3
 80145b6:	e9cd ba01 	strd	fp, sl, [sp, #4]
 80145ba:	fa5f f881 	uxtb.w	r8, r1
	} while (--n);
 80145be:	e025      	b.n	801460c <dir_register+0x880>
	*ptr++ = (BYTE)val; val >>= 8;
 80145c0:	70dd      	strb	r5, [r3, #3]
	*ptr++ = (BYTE)val;
 80145c2:	711d      	strb	r5, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80145c4:	715d      	strb	r5, [r3, #5]
	*ptr++ = (BYTE)val;
 80145c6:	719d      	strb	r5, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 80145c8:	71dd      	strb	r5, [r3, #7]
	*ptr++ = (BYTE)val;
 80145ca:	721d      	strb	r5, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80145cc:	725d      	strb	r5, [r3, #9]
	*ptr++ = (BYTE)val;
 80145ce:	729d      	strb	r5, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80145d0:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val;
 80145d2:	73dd      	strb	r5, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80145d4:	741d      	strb	r5, [r3, #16]
	*ptr++ = (BYTE)val;
 80145d6:	745d      	strb	r5, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80145d8:	749d      	strb	r5, [r3, #18]
	*ptr++ = (BYTE)val;
 80145da:	74dd      	strb	r5, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 80145dc:	751d      	strb	r5, [r3, #20]
	*ptr++ = (BYTE)val;
 80145de:	755d      	strb	r5, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80145e0:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val;
 80145e2:	75dd      	strb	r5, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80145e4:	761d      	strb	r5, [r3, #24]
	*ptr++ = (BYTE)val;
 80145e6:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80145e8:	771d      	strb	r5, [r3, #28]
	*ptr++ = (BYTE)val;
 80145ea:	775d      	strb	r5, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80145ec:	779d      	strb	r5, [r3, #30]
	*ptr++ = (BYTE)val;
 80145ee:	77dd      	strb	r5, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80145f0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
				fs->wflag = 1;
 80145f4:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80145f6:	7018      	strb	r0, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80145f8:	4648      	mov	r0, r9
				fs->wflag = 1;
 80145fa:	70fa      	strb	r2, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80145fc:	f7fe f8ae 	bl	801275c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8014600:	2800      	cmp	r0, #0
 8014602:	f47f af10 	bne.w	8014426 <dir_register+0x69a>
 8014606:	3e01      	subs	r6, #1
 8014608:	f000 8109 	beq.w	801481e <dir_register+0xa92>
				res = move_window(fs, dp->sect);
 801460c:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014612:	4299      	cmp	r1, r3
 8014614:	d005      	beq.n	8014622 <dir_register+0x896>
 8014616:	4638      	mov	r0, r7
 8014618:	f7fd ff5c 	bl	80124d4 <move_window.part.0>
				if (res != FR_OK) break;
 801461c:	2800      	cmp	r0, #0
 801461e:	f47f af02 	bne.w	8014426 <dir_register+0x69a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8014622:	b2f0      	uxtb	r0, r6
 8014624:	68f9      	ldr	r1, [r7, #12]
 8014626:	f8d9 3020 	ldr.w	r3, [r9, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801462a:	f04f 0e0f 	mov.w	lr, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801462e:	1e42      	subs	r2, r0, #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014630:	f883 e00b 	strb.w	lr, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8014634:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014638:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 801463c:	731c      	strb	r4, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801463e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 8014642:	769c      	strb	r4, [r3, #26]
	*ptr++ = (BYTE)val;
 8014644:	76dc      	strb	r4, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014646:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801464a:	ea4f 0e42 	mov.w	lr, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 801464e:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8014652:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 8014656:	f883 a002 	strb.w	sl, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801465a:	f1bc 0f00 	cmp.w	ip, #0
 801465e:	d0af      	beq.n	80145c0 <dir_register+0x834>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014660:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8014664:	45d4      	cmp	ip, sl
 8014666:	d0ab      	beq.n	80145c0 <dir_register+0x834>
 8014668:	3201      	adds	r2, #1
 801466a:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801466e:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8014670:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014674:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 8014678:	f883 b004 	strb.w	fp, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801467c:	f1bc 0f00 	cmp.w	ip, #0
 8014680:	d0a0      	beq.n	80145c4 <dir_register+0x838>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014682:	45d4      	cmp	ip, sl
 8014684:	d09e      	beq.n	80145c4 <dir_register+0x838>
 8014686:	440a      	add	r2, r1
 8014688:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801468c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014690:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 8014694:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014698:	f1bc 0f00 	cmp.w	ip, #0
 801469c:	d094      	beq.n	80145c8 <dir_register+0x83c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801469e:	45d4      	cmp	ip, sl
 80146a0:	d092      	beq.n	80145c8 <dir_register+0x83c>
 80146a2:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80146a6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80146aa:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 80146ae:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80146b2:	f1bc 0f00 	cmp.w	ip, #0
 80146b6:	d089      	beq.n	80145cc <dir_register+0x840>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80146b8:	45d4      	cmp	ip, sl
 80146ba:	d087      	beq.n	80145cc <dir_register+0x840>
 80146bc:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 80146c0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80146c4:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 80146c8:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80146cc:	f1bc 0f00 	cmp.w	ip, #0
 80146d0:	f43f af7e 	beq.w	80145d0 <dir_register+0x844>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80146d4:	45d4      	cmp	ip, sl
 80146d6:	f43f af7b 	beq.w	80145d0 <dir_register+0x844>
 80146da:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80146de:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 80146e2:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 80146e6:	f883 a00f 	strb.w	sl, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80146ea:	f1bc 0f00 	cmp.w	ip, #0
 80146ee:	f43f af71 	beq.w	80145d4 <dir_register+0x848>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80146f2:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80146f6:	45d4      	cmp	ip, sl
 80146f8:	f43f af6c 	beq.w	80145d4 <dir_register+0x848>
 80146fc:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8014700:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014704:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 8014708:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801470c:	f1bc 0f00 	cmp.w	ip, #0
 8014710:	f43f af62 	beq.w	80145d8 <dir_register+0x84c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014714:	45d4      	cmp	ip, sl
 8014716:	f43f af5f 	beq.w	80145d8 <dir_register+0x84c>
 801471a:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801471e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014722:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 8014726:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801472a:	f1bc 0f00 	cmp.w	ip, #0
 801472e:	f43f af55 	beq.w	80145dc <dir_register+0x850>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014732:	45d4      	cmp	ip, sl
 8014734:	f43f af52 	beq.w	80145dc <dir_register+0x850>
 8014738:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 801473c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014740:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 8014744:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014748:	f1bc 0f00 	cmp.w	ip, #0
 801474c:	f43f af48 	beq.w	80145e0 <dir_register+0x854>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014750:	45d4      	cmp	ip, sl
 8014752:	f43f af45 	beq.w	80145e0 <dir_register+0x854>
 8014756:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 801475a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801475e:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 8014762:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014766:	f1bc 0f00 	cmp.w	ip, #0
 801476a:	f43f af3b 	beq.w	80145e4 <dir_register+0x858>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801476e:	45d4      	cmp	ip, sl
 8014770:	f43f af38 	beq.w	80145e4 <dir_register+0x858>
 8014774:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8014778:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 801477c:	f883 c018 	strb.w	ip, [r3, #24]
	*ptr++ = (BYTE)val;
 8014780:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014784:	f1bc 0f00 	cmp.w	ip, #0
 8014788:	f43f af2e 	beq.w	80145e8 <dir_register+0x85c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801478c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8014790:	45dc      	cmp	ip, fp
 8014792:	f43f af29 	beq.w	80145e8 <dir_register+0x85c>
 8014796:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 801479a:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 801479e:	f883 c01c 	strb.w	ip, [r3, #28]
	*ptr++ = (BYTE)val;
 80147a2:	f883 a01d 	strb.w	sl, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80147a6:	f1bc 0f00 	cmp.w	ip, #0
 80147aa:	f43f af1f 	beq.w	80145ec <dir_register+0x860>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80147ae:	45dc      	cmp	ip, fp
 80147b0:	f43f af1c 	beq.w	80145ec <dir_register+0x860>
 80147b4:	f8b2 c016 	ldrh.w	ip, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80147b8:	f64f 7afd 	movw	sl, #65533	; 0xfffd
 80147bc:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80147c0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80147c4:	f883 c01e 	strb.w	ip, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80147c8:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 80147ca:	f883 b01f 	strb.w	fp, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80147ce:	4552      	cmp	r2, sl
 80147d0:	f63f af0e 	bhi.w	80145f0 <dir_register+0x864>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80147d4:	4471      	add	r1, lr
 80147d6:	8b4a      	ldrh	r2, [r1, #26]
 80147d8:	2a00      	cmp	r2, #0
 80147da:	f47f af0b 	bne.w	80145f4 <dir_register+0x868>
 80147de:	e707      	b.n	80145f0 <dir_register+0x864>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80147e0:	2100      	movs	r1, #0
 80147e2:	e603      	b.n	80143ec <dir_register+0x660>
			*d++ = *s++;
 80147e4:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
 80147e8:	701a      	strb	r2, [r3, #0]
 80147ea:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
 80147ee:	705a      	strb	r2, [r3, #1]
 80147f0:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
 80147f4:	709a      	strb	r2, [r3, #2]
 80147f6:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
 80147fa:	70da      	strb	r2, [r3, #3]
 80147fc:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 8014800:	711a      	strb	r2, [r3, #4]
 8014802:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8014806:	715a      	strb	r2, [r3, #5]
 8014808:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
 801480c:	719a      	strb	r2, [r3, #6]
 801480e:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
 8014812:	71da      	strb	r2, [r3, #7]
 8014814:	f7ff bb63 	b.w	8013ede <dir_register+0x152>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014818:	f04f 0b02 	mov.w	fp, #2
 801481c:	e5ab      	b.n	8014376 <dir_register+0x5ea>
 801481e:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
 8014822:	f7ff bb3a 	b.w	8013e9a <dir_register+0x10e>
 8014826:	4622      	mov	r2, r4
 8014828:	69b3      	ldr	r3, [r6, #24]
 801482a:	463d      	mov	r5, r7
 801482c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8014830:	9f08      	ldr	r7, [sp, #32]
 8014832:	1a82      	subs	r2, r0, r2
 8014834:	9c07      	ldr	r4, [sp, #28]
 8014836:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8014838:	6332      	str	r2, [r6, #48]	; 0x30
 801483a:	e5cc      	b.n	80143d6 <dir_register+0x64a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801483c:	f106 0534 	add.w	r5, r6, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 8014840:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014842:	2301      	movs	r3, #1
 8014844:	7870      	ldrb	r0, [r6, #1]
 8014846:	4629      	mov	r1, r5
 8014848:	9205      	str	r2, [sp, #20]
 801484a:	f7fd fd9f 	bl	801238c <disk_write>
 801484e:	2800      	cmp	r0, #0
 8014850:	f47f adee 	bne.w	8014430 <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014854:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8014856:	9a05      	ldr	r2, [sp, #20]
 8014858:	69f3      	ldr	r3, [r6, #28]
 801485a:	1a51      	subs	r1, r2, r1
			fs->wflag = 0;
 801485c:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801485e:	4299      	cmp	r1, r3
 8014860:	f4bf ae07 	bcs.w	8014472 <dir_register+0x6e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014864:	78b1      	ldrb	r1, [r6, #2]
 8014866:	2901      	cmp	r1, #1
 8014868:	f67f ae03 	bls.w	8014472 <dir_register+0x6e6>
 801486c:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8014870:	462f      	mov	r7, r5
 8014872:	460c      	mov	r4, r1
 8014874:	4615      	mov	r5, r2
 8014876:	e000      	b.n	801487a <dir_register+0xaee>
 8014878:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 801487a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801487c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801487e:	2301      	movs	r3, #1
 8014880:	4639      	mov	r1, r7
 8014882:	462a      	mov	r2, r5
 8014884:	7870      	ldrb	r0, [r6, #1]
 8014886:	f7fd fd81 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801488a:	2c01      	cmp	r4, #1
 801488c:	d1f4      	bne.n	8014878 <dir_register+0xaec>
 801488e:	463d      	mov	r5, r7
 8014890:	9c05      	ldr	r4, [sp, #20]
 8014892:	9f06      	ldr	r7, [sp, #24]
 8014894:	e5ed      	b.n	8014472 <dir_register+0x6e6>
 8014896:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014898:	2200      	movs	r2, #0
 801489a:	e5fe      	b.n	801449a <dir_register+0x70e>

0801489c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801489c:	b530      	push	{r4, r5, lr}
 801489e:	b083      	sub	sp, #12
 80148a0:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 80148a4:	b189      	cbz	r1, 80148ca <f_mount+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80148a6:	780c      	ldrb	r4, [r1, #0]
 80148a8:	2c1f      	cmp	r4, #31
 80148aa:	d911      	bls.n	80148d0 <f_mount+0x34>
 80148ac:	2c3a      	cmp	r4, #58	; 0x3a
 80148ae:	d00f      	beq.n	80148d0 <f_mount+0x34>
 80148b0:	4608      	mov	r0, r1
 80148b2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80148b6:	2b1f      	cmp	r3, #31
 80148b8:	d90c      	bls.n	80148d4 <f_mount+0x38>
 80148ba:	2b3a      	cmp	r3, #58	; 0x3a
 80148bc:	d1f9      	bne.n	80148b2 <f_mount+0x16>
			i = *tp++ - '0';
 80148be:	3101      	adds	r1, #1
 80148c0:	3c30      	subs	r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80148c2:	4288      	cmp	r0, r1
 80148c4:	d101      	bne.n	80148ca <f_mount+0x2e>
 80148c6:	2c01      	cmp	r4, #1
 80148c8:	d907      	bls.n	80148da <f_mount+0x3e>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80148ca:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80148cc:	b003      	add	sp, #12
 80148ce:	bd30      	pop	{r4, r5, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80148d0:	4623      	mov	r3, r4
 80148d2:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80148d4:	2b3a      	cmp	r3, #58	; 0x3a
 80148d6:	d0f2      	beq.n	80148be <f_mount+0x22>
		vol = 0;		/* Drive 0 */
 80148d8:	2400      	movs	r4, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 80148da:	4d1d      	ldr	r5, [pc, #116]	; (8014950 <f_mount+0xb4>)
 80148dc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
	if (cfs) {
 80148e0:	b173      	cbz	r3, 8014900 <f_mount+0x64>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80148e2:	491c      	ldr	r1, [pc, #112]	; (8014954 <f_mount+0xb8>)
 80148e4:	6808      	ldr	r0, [r1, #0]
 80148e6:	4283      	cmp	r3, r0
 80148e8:	d021      	beq.n	801492e <f_mount+0x92>
 80148ea:	6908      	ldr	r0, [r1, #16]
 80148ec:	4298      	cmp	r0, r3
 80148ee:	d023      	beq.n	8014938 <f_mount+0x9c>
 80148f0:	6a08      	ldr	r0, [r1, #32]
 80148f2:	4283      	cmp	r3, r0
 80148f4:	d025      	beq.n	8014942 <f_mount+0xa6>
 80148f6:	6b08      	ldr	r0, [r1, #48]	; 0x30
 80148f8:	4298      	cmp	r0, r3
 80148fa:	d015      	beq.n	8014928 <f_mount+0x8c>
		cfs->fs_type = 0;				/* Clear old fs object */
 80148fc:	2100      	movs	r1, #0
 80148fe:	7019      	strb	r1, [r3, #0]
	if (fs) {
 8014900:	9b01      	ldr	r3, [sp, #4]
 8014902:	b163      	cbz	r3, 801491e <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
 8014904:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014906:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8014908:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 801490c:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801490e:	d1dd      	bne.n	80148cc <f_mount+0x30>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014910:	4602      	mov	r2, r0
 8014912:	a901      	add	r1, sp, #4
 8014914:	4668      	mov	r0, sp
 8014916:	f7fe fb75 	bl	8013004 <find_volume>
}
 801491a:	b003      	add	sp, #12
 801491c:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801491e:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8014920:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8014924:	b003      	add	sp, #12
 8014926:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014928:	2000      	movs	r0, #0
 801492a:	6308      	str	r0, [r1, #48]	; 0x30
 801492c:	e7e6      	b.n	80148fc <f_mount+0x60>
 801492e:	2000      	movs	r0, #0
 8014930:	6008      	str	r0, [r1, #0]
 8014932:	6908      	ldr	r0, [r1, #16]
 8014934:	4298      	cmp	r0, r3
 8014936:	d1db      	bne.n	80148f0 <f_mount+0x54>
 8014938:	2000      	movs	r0, #0
 801493a:	6108      	str	r0, [r1, #16]
 801493c:	6a08      	ldr	r0, [r1, #32]
 801493e:	4283      	cmp	r3, r0
 8014940:	d1d9      	bne.n	80148f6 <f_mount+0x5a>
 8014942:	2000      	movs	r0, #0
 8014944:	6208      	str	r0, [r1, #32]
 8014946:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8014948:	4298      	cmp	r0, r3
 801494a:	d1d7      	bne.n	80148fc <f_mount+0x60>
 801494c:	e7ec      	b.n	8014928 <f_mount+0x8c>
 801494e:	bf00      	nop
 8014950:	300081d0 	.word	0x300081d0
 8014954:	300081d8 	.word	0x300081d8

08014958 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801495c:	b093      	sub	sp, #76	; 0x4c
 801495e:	9103      	str	r1, [sp, #12]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014960:	2800      	cmp	r0, #0
 8014962:	f000 80ff 	beq.w	8014b64 <f_open+0x20c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014966:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 801496a:	4616      	mov	r6, r2
 801496c:	4604      	mov	r4, r0
 801496e:	a904      	add	r1, sp, #16
 8014970:	a803      	add	r0, sp, #12
 8014972:	463a      	mov	r2, r7
 8014974:	f7fe fb46 	bl	8013004 <find_volume>
	if (res == FR_OK) {
 8014978:	4605      	mov	r5, r0
 801497a:	b128      	cbz	r0, 8014988 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801497c:	2300      	movs	r3, #0
 801497e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8014980:	4628      	mov	r0, r5
 8014982:	b013      	add	sp, #76	; 0x4c
 8014984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8014988:	9b04      	ldr	r3, [sp, #16]
		INIT_NAMBUF(fs);
 801498a:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 801498e:	9305      	str	r3, [sp, #20]
		INIT_NAMBUF(fs);
 8014990:	f001 fb28 	bl	8015fe4 <ff_memalloc>
 8014994:	4680      	mov	r8, r0
 8014996:	2800      	cmp	r0, #0
 8014998:	f000 80e9 	beq.w	8014b6e <f_open+0x216>
		res = follow_path(&dj, path);	/* Follow the file path */
 801499c:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
		INIT_NAMBUF(fs);
 80149a0:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80149a2:	a805      	add	r0, sp, #20
 80149a4:	f7fe ffae 	bl	8013904 <follow_path>
		if (res == FR_OK) {
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d139      	bne.n	8014a20 <f_open+0xc8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80149ac:	f99d 3043 	ldrsb.w	r3, [sp, #67]	; 0x43
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f2c0 8121 	blt.w	8014bf8 <f_open+0x2a0>
		if (Files[i].fs) {	/* Existing entry */
 80149b6:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8014e54 <f_open+0x4fc>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80149ba:	f027 0301 	bic.w	r3, r7, #1
				Files[i].ofs == dp->dptr) break;
 80149be:	990a      	ldr	r1, [sp, #40]	; 0x28
		if (Files[i].fs) {	/* Existing entry */
 80149c0:	f8d9 2000 	ldr.w	r2, [r9]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80149c4:	9805      	ldr	r0, [sp, #20]
				Files[i].clu == dp->obj.sclust &&
 80149c6:	f8dd c01c 	ldr.w	ip, [sp, #28]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80149ca:	9300      	str	r3, [sp, #0]
				Files[i].ofs == dp->dptr) break;
 80149cc:	9101      	str	r1, [sp, #4]
		if (Files[i].fs) {	/* Existing entry */
 80149ce:	2a00      	cmp	r2, #0
 80149d0:	f000 80cf 	beq.w	8014b72 <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80149d4:	4290      	cmp	r0, r2
 80149d6:	f000 80cf 	beq.w	8014b78 <f_open+0x220>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80149da:	46ae      	mov	lr, r5
		if (Files[i].fs) {	/* Existing entry */
 80149dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80149e0:	2900      	cmp	r1, #0
 80149e2:	f000 81d1 	beq.w	8014d88 <f_open+0x430>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80149e6:	4288      	cmp	r0, r1
 80149e8:	f000 81db 	beq.w	8014da2 <f_open+0x44a>
		if (Files[i].fs) {	/* Existing entry */
 80149ec:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80149f0:	2900      	cmp	r1, #0
 80149f2:	f000 81cc 	beq.w	8014d8e <f_open+0x436>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80149f6:	4288      	cmp	r0, r1
 80149f8:	f000 81e0 	beq.w	8014dbc <f_open+0x464>
		if (Files[i].fs) {	/* Existing entry */
 80149fc:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 8014a00:	2900      	cmp	r1, #0
 8014a02:	f000 80ce 	beq.w	8014ba2 <f_open+0x24a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014a06:	4281      	cmp	r1, r0
 8014a08:	f000 80d9 	beq.w	8014bbe <f_open+0x266>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014a0c:	f1be 0f00 	cmp.w	lr, #0
 8014a10:	f040 80c7 	bne.w	8014ba2 <f_open+0x24a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014a14:	2012      	movs	r0, #18
		FREE_NAMBUF();
 8014a16:	4605      	mov	r5, r0
 8014a18:	4640      	mov	r0, r8
 8014a1a:	f001 fae5 	bl	8015fe8 <ff_memfree>
 8014a1e:	e7ad      	b.n	801497c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014a20:	f016 0f1c 	tst.w	r6, #28
 8014a24:	d0f7      	beq.n	8014a16 <f_open+0xbe>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014a26:	2804      	cmp	r0, #4
 8014a28:	d1f5      	bne.n	8014a16 <f_open+0xbe>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014a2a:	f8df 9428 	ldr.w	r9, [pc, #1064]	; 8014e54 <f_open+0x4fc>
 8014a2e:	f8d9 3000 	ldr.w	r3, [r9]
 8014a32:	b14b      	cbz	r3, 8014a48 <f_open+0xf0>
 8014a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014a38:	b133      	cbz	r3, 8014a48 <f_open+0xf0>
 8014a3a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014a3e:	b11b      	cbz	r3, 8014a48 <f_open+0xf0>
 8014a40:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d1e5      	bne.n	8014a14 <f_open+0xbc>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014a48:	a805      	add	r0, sp, #20
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014a4a:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014a4e:	f7ff f99d 	bl	8013d8c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014a52:	2800      	cmp	r0, #0
 8014a54:	d1df      	bne.n	8014a16 <f_open+0xbe>
				dw = GET_FATTIME();
 8014a56:	f7fd fcb5 	bl	80123c4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8014a5c:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8014a60:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8014a64:	fa5f fe80 	uxtb.w	lr, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014a68:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val;
 8014a6c:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8014a6e:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a70:	f883 e00e 	strb.w	lr, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a74:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8014a76:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014a7a:	9e04      	ldr	r6, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a7c:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a7e:	f883 e016 	strb.w	lr, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a82:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8014a84:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a88:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8014a8e:	7832      	ldrb	r2, [r6, #0]
	rv = rv << 8 | ptr[0];
 8014a90:	7ed9      	ldrb	r1, [r3, #27]
 8014a92:	f893 a01a 	ldrb.w	sl, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8014a96:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8014a98:	ea4a 2a01 	orr.w	sl, sl, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8014a9c:	d105      	bne.n	8014aaa <f_open+0x152>
	rv = rv << 8 | ptr[0];
 8014a9e:	7d59      	ldrb	r1, [r3, #21]
 8014aa0:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014aa2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014aa6:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014aaa:	2200      	movs	r2, #0
 8014aac:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8014aae:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8014ab0:	7831      	ldrb	r1, [r6, #0]
 8014ab2:	2903      	cmp	r1, #3
 8014ab4:	d101      	bne.n	8014aba <f_open+0x162>
	*ptr++ = (BYTE)val; val >>= 8;
 8014ab6:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8014ab8:	755a      	strb	r2, [r3, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 8014aba:	990d      	ldr	r1, [sp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8014abc:	2200      	movs	r2, #0
					fs->wflag = 1;
 8014abe:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8014ac0:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8014ac2:	70f3      	strb	r3, [r6, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8014ac4:	f1ba 0f00 	cmp.w	sl, #0
 8014ac8:	d017      	beq.n	8014afa <f_open+0x1a2>
						dw = fs->winsect;
 8014aca:	6b33      	ldr	r3, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8014acc:	a805      	add	r0, sp, #20
 8014ace:	4651      	mov	r1, sl
						dw = fs->winsect;
 8014ad0:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 8014ad2:	f7ff f8b3 	bl	8013c3c <remove_chain>
						if (res == FR_OK) {
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	d19d      	bne.n	8014a16 <f_open+0xbe>
							res = move_window(fs, dw);
 8014ada:	9e04      	ldr	r6, [sp, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014adc:	9b00      	ldr	r3, [sp, #0]
 8014ade:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8014ae0:	4293      	cmp	r3, r2
 8014ae2:	f000 81a3 	beq.w	8014e2c <f_open+0x4d4>
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	4630      	mov	r0, r6
 8014aea:	f7fd fcf3 	bl	80124d4 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014aee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014af2:	9e04      	ldr	r6, [sp, #16]
 8014af4:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 8014af6:	2800      	cmp	r0, #0
 8014af8:	d18d      	bne.n	8014a16 <f_open+0xbe>
 8014afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014afc:	9805      	ldr	r0, [sp, #20]
 8014afe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8014b02:	9301      	str	r3, [sp, #4]
				mode |= FA_MODIFIED;
 8014b04:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8014b08:	f027 0301 	bic.w	r3, r7, #1
 8014b0c:	9300      	str	r3, [sp, #0]
		if (Files[i].fs == dp->obj.fs &&
 8014b0e:	f8d9 1000 	ldr.w	r1, [r9]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014b12:	6b32      	ldr	r2, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8014b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		if (Files[i].fs == dp->obj.fs &&
 8014b16:	4281      	cmp	r1, r0
 8014b18:	9102      	str	r1, [sp, #8]
			fp->dir_ptr = dj.dir;
 8014b1a:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 8014b1e:	d06d      	beq.n	8014bfc <f_open+0x2a4>
 8014b20:	f8d9 e010 	ldr.w	lr, [r9, #16]
 8014b24:	4586      	cmp	lr, r0
 8014b26:	f000 80dc 	beq.w	8014ce2 <f_open+0x38a>
 8014b2a:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8014b2e:	4583      	cmp	fp, r0
 8014b30:	f000 80e4 	beq.w	8014cfc <f_open+0x3a4>
 8014b34:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8014b38:	4282      	cmp	r2, r0
 8014b3a:	f000 80ec 	beq.w	8014d16 <f_open+0x3be>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014b3e:	9902      	ldr	r1, [sp, #8]
 8014b40:	2900      	cmp	r1, #0
 8014b42:	f000 80fd 	beq.w	8014d40 <f_open+0x3e8>
 8014b46:	f1be 0f00 	cmp.w	lr, #0
 8014b4a:	f000 8144 	beq.w	8014dd6 <f_open+0x47e>
 8014b4e:	f1bb 0f00 	cmp.w	fp, #0
 8014b52:	f000 80f4 	beq.w	8014d3e <f_open+0x3e6>
 8014b56:	2a00      	cmp	r2, #0
 8014b58:	f000 813f 	beq.w	8014dda <f_open+0x482>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014b5c:	2300      	movs	r3, #0
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014b5e:	2002      	movs	r0, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014b60:	6123      	str	r3, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014b62:	e758      	b.n	8014a16 <f_open+0xbe>
	if (!fp) return FR_INVALID_OBJECT;
 8014b64:	2509      	movs	r5, #9
}
 8014b66:	4628      	mov	r0, r5
 8014b68:	b013      	add	sp, #76	; 0x4c
 8014b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8014b6e:	2511      	movs	r5, #17
 8014b70:	e706      	b.n	8014980 <f_open+0x28>
			be = 1;
 8014b72:	f04f 0e01 	mov.w	lr, #1
 8014b76:	e731      	b.n	80149dc <f_open+0x84>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014b78:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8014b7c:	4594      	cmp	ip, r2
 8014b7e:	f47f af2c 	bne.w	80149da <f_open+0x82>
				Files[i].clu == dp->obj.sclust &&
 8014b82:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8014b86:	4291      	cmp	r1, r2
 8014b88:	f47f af27 	bne.w	80149da <f_open+0x82>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014b8c:	462a      	mov	r2, r5
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	f040 80d3 	bne.w	8014d3a <f_open+0x3e2>
 8014b94:	eb09 1202 	add.w	r2, r9, r2, lsl #4
 8014b98:	8992      	ldrh	r2, [r2, #12]
 8014b9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8014b9e:	f000 80cc 	beq.w	8014d3a <f_open+0x3e2>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014ba2:	f016 0f1c 	tst.w	r6, #28
 8014ba6:	d017      	beq.n	8014bd8 <f_open+0x280>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014ba8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8014bac:	f013 0f11 	tst.w	r3, #17
 8014bb0:	f040 80f0 	bne.w	8014d94 <f_open+0x43c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014bb4:	0773      	lsls	r3, r6, #29
 8014bb6:	f140 80db 	bpl.w	8014d70 <f_open+0x418>
 8014bba:	2008      	movs	r0, #8
 8014bbc:	e72b      	b.n	8014a16 <f_open+0xbe>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014bbe:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8014bc2:	4561      	cmp	r1, ip
 8014bc4:	f47f af22 	bne.w	8014a0c <f_open+0xb4>
				Files[i].clu == dp->obj.sclust &&
 8014bc8:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8014bcc:	9901      	ldr	r1, [sp, #4]
 8014bce:	428a      	cmp	r2, r1
 8014bd0:	f47f af1c 	bne.w	8014a0c <f_open+0xb4>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014bd4:	2203      	movs	r2, #3
 8014bd6:	e7da      	b.n	8014b8e <f_open+0x236>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014bd8:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8014bdc:	06d1      	lsls	r1, r2, #27
 8014bde:	f100 80db 	bmi.w	8014d98 <f_open+0x440>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014be2:	07b1      	lsls	r1, r6, #30
 8014be4:	f140 80c9 	bpl.w	8014d7a <f_open+0x422>
 8014be8:	07d2      	lsls	r2, r2, #31
 8014bea:	f140 80c6 	bpl.w	8014d7a <f_open+0x422>
		FREE_NAMBUF();
 8014bee:	4640      	mov	r0, r8
						res = FR_DENIED;
 8014bf0:	2507      	movs	r5, #7
		FREE_NAMBUF();
 8014bf2:	f001 f9f9 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014bf6:	e6c1      	b.n	801497c <f_open+0x24>
				res = FR_INVALID_NAME;
 8014bf8:	2006      	movs	r0, #6
 8014bfa:	e70c      	b.n	8014a16 <f_open+0xbe>
		if (Files[i].fs == dp->obj.fs &&
 8014bfc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8014c00:	4594      	cmp	ip, r2
 8014c02:	d18d      	bne.n	8014b20 <f_open+0x1c8>
			Files[i].clu == dp->obj.sclust &&
 8014c04:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8014c08:	9901      	ldr	r1, [sp, #4]
 8014c0a:	428a      	cmp	r2, r1
 8014c0c:	d188      	bne.n	8014b20 <f_open+0x1c8>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014c0e:	2100      	movs	r1, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014c10:	9a00      	ldr	r2, [sp, #0]
 8014c12:	eb09 1001 	add.w	r0, r9, r1, lsl #4
 8014c16:	2a00      	cmp	r2, #0
 8014c18:	d05b      	beq.n	8014cd2 <f_open+0x37a>
 8014c1a:	8980      	ldrh	r0, [r0, #12]
 8014c1c:	010a      	lsls	r2, r1, #4
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d19c      	bne.n	8014b5c <f_open+0x204>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014c22:	f44f 7e80 	mov.w	lr, #256	; 0x100
	return i + 1;
 8014c26:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014c28:	4491      	add	r9, r2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c2a:	6121      	str	r1, [r4, #16]
	if (fs->fs_type == FS_FAT32) {
 8014c2c:	7831      	ldrb	r1, [r6, #0]
	rv = rv << 8 | ptr[0];
 8014c2e:	7ed8      	ldrb	r0, [r3, #27]
 8014c30:	f893 a01a 	ldrb.w	sl, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8014c34:	2903      	cmp	r1, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014c36:	f8a9 e00c 	strh.w	lr, [r9, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 8014c3a:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8014c3e:	d105      	bne.n	8014c4c <f_open+0x2f4>
	rv = rv << 8 | ptr[0];
 8014c40:	7d59      	ldrb	r1, [r3, #21]
 8014c42:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014c44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014c48:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014c4c:	f8c4 a008 	str.w	sl, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014c50:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[2];
 8014c52:	8bd8      	ldrh	r0, [r3, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014c54:	f104 0930 	add.w	r9, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 8014c58:	7f5a      	ldrb	r2, [r3, #29]
	rv = rv << 8 | ptr[0];
 8014c5a:	f893 b01c 	ldrb.w	fp, [r3, #28]
	rv = rv << 8 | ptr[1];
 8014c5e:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
			fp->obj.id = fs->id;
 8014c62:	88f2      	ldrh	r2, [r6, #6]
 8014c64:	4648      	mov	r0, r9
			fp->flag = mode;		/* Set file access mode */
 8014c66:	7527      	strb	r7, [r4, #20]
	rv = rv << 8 | ptr[0];
 8014c68:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			fp->obj.id = fs->id;
 8014c6c:	80a2      	strh	r2, [r4, #4]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014c6e:	6026      	str	r6, [r4, #0]
 8014c70:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014c74:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8014c76:	7561      	strb	r1, [r4, #21]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014c78:	f8c4 b00c 	str.w	fp, [r4, #12]
			fp->sect = 0;			/* Invalidate current data sector */
 8014c7c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014c7e:	61a1      	str	r1, [r4, #24]
 8014c80:	f00d fac4 	bl	802220c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014c84:	f017 0720 	ands.w	r7, r7, #32
 8014c88:	d01e      	beq.n	8014cc8 <f_open+0x370>
 8014c8a:	f1bb 0f00 	cmp.w	fp, #0
 8014c8e:	d050      	beq.n	8014d32 <f_open+0x3da>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014c90:	8973      	ldrh	r3, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014c92:	f8c4 b018 	str.w	fp, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014c96:	ebbb 2f43 	cmp.w	fp, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014c9a:	ea4f 2643 	mov.w	r6, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014c9e:	f240 809e 	bls.w	8014dde <f_open+0x486>
 8014ca2:	4651      	mov	r1, sl
 8014ca4:	e005      	b.n	8014cb2 <f_open+0x35a>
 8014ca6:	1c47      	adds	r7, r0, #1
 8014ca8:	f000 80c9 	beq.w	8014e3e <f_open+0x4e6>
 8014cac:	455e      	cmp	r6, fp
 8014cae:	f080 80c6 	bcs.w	8014e3e <f_open+0x4e6>
					clst = get_fat(&fp->obj, clst);
 8014cb2:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014cb4:	ebab 0b06 	sub.w	fp, fp, r6
					clst = get_fat(&fp->obj, clst);
 8014cb8:	f7fd fce4 	bl	8012684 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8014cbc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8014cbe:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8014cc0:	d8f1      	bhi.n	8014ca6 <f_open+0x34e>
				fp->clust = clst;
 8014cc2:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8014cc4:	2002      	movs	r0, #2
 8014cc6:	e6a6      	b.n	8014a16 <f_open+0xbe>
		FREE_NAMBUF();
 8014cc8:	4640      	mov	r0, r8
 8014cca:	463d      	mov	r5, r7
 8014ccc:	f001 f98c 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014cd0:	e656      	b.n	8014980 <f_open+0x28>
 8014cd2:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
 8014cd6:	010a      	lsls	r2, r1, #4
 8014cd8:	f10e 0e01 	add.w	lr, lr, #1
 8014cdc:	fa1f fe8e 	uxth.w	lr, lr
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014ce0:	e7a1      	b.n	8014c26 <f_open+0x2ce>
		if (Files[i].fs == dp->obj.fs &&
 8014ce2:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8014ce6:	4594      	cmp	ip, r2
 8014ce8:	f47f af1f 	bne.w	8014b2a <f_open+0x1d2>
			Files[i].clu == dp->obj.sclust &&
 8014cec:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8014cf0:	9901      	ldr	r1, [sp, #4]
 8014cf2:	428a      	cmp	r2, r1
 8014cf4:	f47f af19 	bne.w	8014b2a <f_open+0x1d2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014cf8:	2101      	movs	r1, #1
 8014cfa:	e789      	b.n	8014c10 <f_open+0x2b8>
		if (Files[i].fs == dp->obj.fs &&
 8014cfc:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8014d00:	4594      	cmp	ip, r2
 8014d02:	f47f af17 	bne.w	8014b34 <f_open+0x1dc>
			Files[i].clu == dp->obj.sclust &&
 8014d06:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014d0a:	9901      	ldr	r1, [sp, #4]
 8014d0c:	428a      	cmp	r2, r1
 8014d0e:	f47f af11 	bne.w	8014b34 <f_open+0x1dc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014d12:	2102      	movs	r1, #2
 8014d14:	e77c      	b.n	8014c10 <f_open+0x2b8>
		if (Files[i].fs == dp->obj.fs &&
 8014d16:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8014d1a:	458c      	cmp	ip, r1
 8014d1c:	f47f af0f 	bne.w	8014b3e <f_open+0x1e6>
			Files[i].clu == dp->obj.sclust &&
 8014d20:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8014d24:	468a      	mov	sl, r1
 8014d26:	9901      	ldr	r1, [sp, #4]
 8014d28:	458a      	cmp	sl, r1
 8014d2a:	f47f af08 	bne.w	8014b3e <f_open+0x1e6>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014d2e:	2103      	movs	r1, #3
 8014d30:	e76e      	b.n	8014c10 <f_open+0x2b8>
		FREE_NAMBUF();
 8014d32:	4640      	mov	r0, r8
 8014d34:	f001 f958 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014d38:	e622      	b.n	8014980 <f_open+0x28>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014d3a:	2010      	movs	r0, #16
 8014d3c:	e66b      	b.n	8014a16 <f_open+0xbe>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014d3e:	2102      	movs	r1, #2
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014d40:	9a00      	ldr	r2, [sp, #0]
		Files[i].fs = dp->obj.fs;
 8014d42:	eb09 1a01 	add.w	sl, r9, r1, lsl #4
		Files[i].ctr = 0;
 8014d46:	f04f 0b00 	mov.w	fp, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014d4a:	2a00      	cmp	r2, #0
		Files[i].fs = dp->obj.fs;
 8014d4c:	ea4f 1201 	mov.w	r2, r1, lsl #4
		Files[i].clu = dp->obj.sclust;
 8014d50:	f8ca c004 	str.w	ip, [sl, #4]
		Files[i].fs = dp->obj.fs;
 8014d54:	f849 0002 	str.w	r0, [r9, r2]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014d58:	bf18      	it	ne
 8014d5a:	f44f 7e80 	movne.w	lr, #256	; 0x100
		Files[i].ofs = dp->dptr;
 8014d5e:	9801      	ldr	r0, [sp, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014d60:	bf08      	it	eq
 8014d62:	f04f 0e01 	moveq.w	lr, #1
		Files[i].ctr = 0;
 8014d66:	f8aa b00c 	strh.w	fp, [sl, #12]
		Files[i].ofs = dp->dptr;
 8014d6a:	f8ca 0008 	str.w	r0, [sl, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014d6e:	e75a      	b.n	8014c26 <f_open+0x2ce>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014d70:	0736      	lsls	r6, r6, #28
 8014d72:	f53f ae70 	bmi.w	8014a56 <f_open+0xfe>
 8014d76:	9e04      	ldr	r6, [sp, #16]
 8014d78:	e6c9      	b.n	8014b0e <f_open+0x1b6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014d7a:	f006 0208 	and.w	r2, r6, #8
 8014d7e:	9e04      	ldr	r6, [sp, #16]
 8014d80:	2a00      	cmp	r2, #0
 8014d82:	f43f aec3 	beq.w	8014b0c <f_open+0x1b4>
 8014d86:	e6bd      	b.n	8014b04 <f_open+0x1ac>
			be = 1;
 8014d88:	f04f 0e01 	mov.w	lr, #1
 8014d8c:	e62e      	b.n	80149ec <f_open+0x94>
 8014d8e:	f04f 0e01 	mov.w	lr, #1
 8014d92:	e633      	b.n	80149fc <f_open+0xa4>
					res = FR_DENIED;
 8014d94:	2007      	movs	r0, #7
 8014d96:	e63e      	b.n	8014a16 <f_open+0xbe>
		FREE_NAMBUF();
 8014d98:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 8014d9a:	2504      	movs	r5, #4
		FREE_NAMBUF();
 8014d9c:	f001 f924 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014da0:	e5ec      	b.n	801497c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014da2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8014da6:	458c      	cmp	ip, r1
 8014da8:	f47f ae20 	bne.w	80149ec <f_open+0x94>
				Files[i].clu == dp->obj.sclust &&
 8014dac:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8014db0:	9901      	ldr	r1, [sp, #4]
 8014db2:	4291      	cmp	r1, r2
 8014db4:	f47f ae1a 	bne.w	80149ec <f_open+0x94>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014db8:	2201      	movs	r2, #1
 8014dba:	e6e8      	b.n	8014b8e <f_open+0x236>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014dbc:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 8014dc0:	458c      	cmp	ip, r1
 8014dc2:	f47f ae1b 	bne.w	80149fc <f_open+0xa4>
				Files[i].clu == dp->obj.sclust &&
 8014dc6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014dca:	9901      	ldr	r1, [sp, #4]
 8014dcc:	4291      	cmp	r1, r2
 8014dce:	f47f ae15 	bne.w	80149fc <f_open+0xa4>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014dd2:	2202      	movs	r2, #2
 8014dd4:	e6db      	b.n	8014b8e <f_open+0x236>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014dd6:	2101      	movs	r1, #1
 8014dd8:	e7b2      	b.n	8014d40 <f_open+0x3e8>
 8014dda:	2103      	movs	r1, #3
 8014ddc:	e7b0      	b.n	8014d40 <f_open+0x3e8>
				fp->clust = clst;
 8014dde:	f8c4 a01c 	str.w	sl, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014de2:	f3cb 0308 	ubfx	r3, fp, #0, #9
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d0a3      	beq.n	8014d32 <f_open+0x3da>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014dea:	9804      	ldr	r0, [sp, #16]
	clst -= 2;
 8014dec:	f1aa 0a02 	sub.w	sl, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014df0:	6983      	ldr	r3, [r0, #24]
 8014df2:	3b02      	subs	r3, #2
 8014df4:	459a      	cmp	sl, r3
 8014df6:	d204      	bcs.n	8014e02 <f_open+0x4aa>
	return clst * fs->csize + fs->database;
 8014df8:	8943      	ldrh	r3, [r0, #10]
 8014dfa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014dfc:	fb0a 2203 	mla	r2, sl, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014e00:	b922      	cbnz	r2, 8014e0c <f_open+0x4b4>
		FREE_NAMBUF();
 8014e02:	4640      	mov	r0, r8
						res = FR_INT_ERR;
 8014e04:	2502      	movs	r5, #2
		FREE_NAMBUF();
 8014e06:	f001 f8ef 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e0a:	e5b7      	b.n	801497c <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014e0c:	eb02 225b 	add.w	r2, r2, fp, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e10:	4649      	mov	r1, r9
 8014e12:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014e14:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e16:	7840      	ldrb	r0, [r0, #1]
 8014e18:	f7fd faaa 	bl	8012370 <disk_read>
 8014e1c:	4605      	mov	r5, r0
		FREE_NAMBUF();
 8014e1e:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e20:	2d00      	cmp	r5, #0
 8014e22:	d087      	beq.n	8014d34 <f_open+0x3dc>
 8014e24:	2501      	movs	r5, #1
		FREE_NAMBUF();
 8014e26:	f001 f8df 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e2a:	e5a7      	b.n	801497c <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014e2c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014e30:	9805      	ldr	r0, [sp, #20]
 8014e32:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8014e36:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 8014e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e3a:	9301      	str	r3, [sp, #4]
 8014e3c:	e662      	b.n	8014b04 <f_open+0x1ac>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014e3e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014e42:	468a      	mov	sl, r1
				fp->clust = clst;
 8014e44:	61e1      	str	r1, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014e46:	bf0c      	ite	eq
 8014e48:	2001      	moveq	r0, #1
 8014e4a:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e4c:	f43f ade3 	beq.w	8014a16 <f_open+0xbe>
 8014e50:	e7c7      	b.n	8014de2 <f_open+0x48a>
 8014e52:	bf00      	nop
 8014e54:	300081d8 	.word	0x300081d8

08014e58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5c:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8014e5e:	2300      	movs	r3, #0
{
 8014e60:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8014e62:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014e64:	b150      	cbz	r0, 8014e7c <f_read+0x24>
 8014e66:	6803      	ldr	r3, [r0, #0]
 8014e68:	4604      	mov	r4, r0
 8014e6a:	b13b      	cbz	r3, 8014e7c <f_read+0x24>
 8014e6c:	4690      	mov	r8, r2
 8014e6e:	781a      	ldrb	r2, [r3, #0]
 8014e70:	b122      	cbz	r2, 8014e7c <f_read+0x24>
 8014e72:	460e      	mov	r6, r1
 8014e74:	88da      	ldrh	r2, [r3, #6]
 8014e76:	8881      	ldrh	r1, [r0, #4]
 8014e78:	4291      	cmp	r1, r2
 8014e7a:	d005      	beq.n	8014e88 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8014e7c:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8014e80:	4648      	mov	r0, r9
 8014e82:	b005      	add	sp, #20
 8014e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014e88:	7858      	ldrb	r0, [r3, #1]
 8014e8a:	f7fd fa53 	bl	8012334 <disk_status>
 8014e8e:	07c2      	lsls	r2, r0, #31
 8014e90:	d4f4      	bmi.n	8014e7c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014e92:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014e96:	f1b9 0f00 	cmp.w	r9, #0
 8014e9a:	d1f1      	bne.n	8014e80 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014e9c:	7d23      	ldrb	r3, [r4, #20]
 8014e9e:	f013 0301 	ands.w	r3, r3, #1
 8014ea2:	9301      	str	r3, [sp, #4]
 8014ea4:	f000 80d3 	beq.w	801504e <f_read+0x1f6>
	remain = fp->obj.objsize - fp->fptr;
 8014ea8:	69a1      	ldr	r1, [r4, #24]
 8014eaa:	68e2      	ldr	r2, [r4, #12]
 8014eac:	1a52      	subs	r2, r2, r1
 8014eae:	4590      	cmp	r8, r2
 8014eb0:	bf28      	it	cs
 8014eb2:	4690      	movcs	r8, r2
	for ( ;  btr;								/* Repeat until all data read */
 8014eb4:	f1b8 0f00 	cmp.w	r8, #0
 8014eb8:	d0e2      	beq.n	8014e80 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014eba:	46a3      	mov	fp, r4
 8014ebc:	f104 0334 	add.w	r3, r4, #52	; 0x34
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014ec0:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014ec4:	f85b ab30 	ldr.w	sl, [fp], #48
 8014ec8:	9302      	str	r3, [sp, #8]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014eca:	2a00      	cmp	r2, #0
 8014ecc:	d13f      	bne.n	8014f4e <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014ece:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8014ed2:	0a4b      	lsrs	r3, r1, #9
 8014ed4:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8014ed6:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 8014eda:	d06a      	beq.n	8014fb2 <f_read+0x15a>
 8014edc:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014ede:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8014ee2:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014ee4:	3b02      	subs	r3, #2
 8014ee6:	4298      	cmp	r0, r3
 8014ee8:	d270      	bcs.n	8014fcc <f_read+0x174>
	return clst * fs->csize + fs->database;
 8014eea:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8014eee:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8014ef2:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014ef6:	2d00      	cmp	r5, #0
 8014ef8:	d068      	beq.n	8014fcc <f_read+0x174>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014efa:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
			sect += csect;
 8014efe:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014f00:	d36c      	bcc.n	8014fdc <f_read+0x184>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f02:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014f06:	ea4f 2358 	mov.w	r3, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f0a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f0c:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 8014f10:	bf88      	it	hi
 8014f12:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f14:	462a      	mov	r2, r5
 8014f16:	4631      	mov	r1, r6
 8014f18:	9303      	str	r3, [sp, #12]
 8014f1a:	f7fd fa29 	bl	8012370 <disk_read>
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	f040 8084 	bne.w	801502c <f_read+0x1d4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014f24:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8014f28:	9b03      	ldr	r3, [sp, #12]
 8014f2a:	2a00      	cmp	r2, #0
 8014f2c:	f2c0 80a6 	blt.w	801507c <f_read+0x224>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014f30:	025b      	lsls	r3, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014f32:	69a1      	ldr	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8014f34:	ebb8 0803 	subs.w	r8, r8, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014f38:	683a      	ldr	r2, [r7, #0]
 8014f3a:	441e      	add	r6, r3
 8014f3c:	4419      	add	r1, r3
 8014f3e:	441a      	add	r2, r3
 8014f40:	61a1      	str	r1, [r4, #24]
 8014f42:	603a      	str	r2, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8014f44:	d09c      	beq.n	8014e80 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014f46:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8014f4a:	2a00      	cmp	r2, #0
 8014f4c:	d0bf      	beq.n	8014ece <f_read+0x76>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014f4e:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014f52:	1d10      	adds	r0, r2, #4
 8014f54:	1d31      	adds	r1, r6, #4
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014f56:	445a      	add	r2, fp
 8014f58:	4543      	cmp	r3, r8
 8014f5a:	4458      	add	r0, fp
 8014f5c:	bf28      	it	cs
 8014f5e:	4643      	movcs	r3, r8
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014f60:	428a      	cmp	r2, r1
 8014f62:	bf38      	it	cc
 8014f64:	4286      	cmpcc	r6, r0
 8014f66:	f103 3cff 	add.w	ip, r3, #4294967295
 8014f6a:	d367      	bcc.n	801503c <f_read+0x1e4>
 8014f6c:	f1bc 0f07 	cmp.w	ip, #7
 8014f70:	d964      	bls.n	801503c <f_read+0x1e4>
 8014f72:	f023 0003 	bic.w	r0, r3, #3
 8014f76:	4631      	mov	r1, r6
 8014f78:	4615      	mov	r5, r2
 8014f7a:	4430      	add	r0, r6
			*d++ = *s++;
 8014f7c:	f855 eb04 	ldr.w	lr, [r5], #4
 8014f80:	f841 eb04 	str.w	lr, [r1], #4
		} while (--cnt);
 8014f84:	4288      	cmp	r0, r1
 8014f86:	d1f9      	bne.n	8014f7c <f_read+0x124>
 8014f88:	f023 0103 	bic.w	r1, r3, #3
 8014f8c:	428b      	cmp	r3, r1
 8014f8e:	eb06 0001 	add.w	r0, r6, r1
 8014f92:	eb02 0501 	add.w	r5, r2, r1
 8014f96:	d0cc      	beq.n	8014f32 <f_read+0xda>
			*d++ = *s++;
 8014f98:	5c52      	ldrb	r2, [r2, r1]
		} while (--cnt);
 8014f9a:	ebbc 0c01 	subs.w	ip, ip, r1
			*d++ = *s++;
 8014f9e:	5472      	strb	r2, [r6, r1]
		} while (--cnt);
 8014fa0:	d0c7      	beq.n	8014f32 <f_read+0xda>
			*d++ = *s++;
 8014fa2:	786a      	ldrb	r2, [r5, #1]
		} while (--cnt);
 8014fa4:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 8014fa8:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 8014faa:	d0c2      	beq.n	8014f32 <f_read+0xda>
			*d++ = *s++;
 8014fac:	78aa      	ldrb	r2, [r5, #2]
 8014fae:	7082      	strb	r2, [r0, #2]
		} while (--cnt);
 8014fb0:	e7bf      	b.n	8014f32 <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014fb2:	bb39      	cbnz	r1, 8015004 <f_read+0x1ac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014fb4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014fb6:	2801      	cmp	r0, #1
 8014fb8:	d908      	bls.n	8014fcc <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014fba:	1c43      	adds	r3, r0, #1
 8014fbc:	d036      	beq.n	801502c <f_read+0x1d4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014fbe:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 8014fc2:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8014fc4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014fc6:	3b02      	subs	r3, #2
 8014fc8:	4298      	cmp	r0, r3
 8014fca:	d38e      	bcc.n	8014eea <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014fcc:	f04f 0902 	mov.w	r9, #2
}
 8014fd0:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014fd2:	f884 9015 	strb.w	r9, [r4, #21]
}
 8014fd6:	b005      	add	sp, #20
 8014fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014fdc:	6a22      	ldr	r2, [r4, #32]
 8014fde:	42aa      	cmp	r2, r5
 8014fe0:	d00b      	beq.n	8014ffa <f_read+0x1a2>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014fe2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	db3b      	blt.n	8015062 <f_read+0x20a>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014fea:	2301      	movs	r3, #1
 8014fec:	462a      	mov	r2, r5
 8014fee:	4659      	mov	r1, fp
 8014ff0:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8014ff4:	f7fd f9bc 	bl	8012370 <disk_read>
 8014ff8:	b9c0      	cbnz	r0, 801502c <f_read+0x1d4>
			fp->sect = sect;
 8014ffa:	69a2      	ldr	r2, [r4, #24]
 8014ffc:	6225      	str	r5, [r4, #32]
 8014ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015002:	e7a4      	b.n	8014f4e <f_read+0xf6>
					if (fp->cltbl) {
 8015004:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015006:	b329      	cbz	r1, 8015054 <f_read+0x1fc>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015008:	6825      	ldr	r5, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801500a:	1d08      	adds	r0, r1, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801500c:	6849      	ldr	r1, [r1, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801500e:	896d      	ldrh	r5, [r5, #10]
 8015010:	fbb3 f3f5 	udiv	r3, r3, r5
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015014:	b929      	cbnz	r1, 8015022 <f_read+0x1ca>
 8015016:	e7d9      	b.n	8014fcc <f_read+0x174>
		cl -= ncl; tbl++;		/* Next fragment */
 8015018:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801501a:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801501e:	2900      	cmp	r1, #0
 8015020:	d0d4      	beq.n	8014fcc <f_read+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 8015022:	4299      	cmp	r1, r3
 8015024:	d9f8      	bls.n	8015018 <f_read+0x1c0>
	return cl + *tbl;	/* Return the cluster number */
 8015026:	6840      	ldr	r0, [r0, #4]
 8015028:	4418      	add	r0, r3
 801502a:	e7c4      	b.n	8014fb6 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801502c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015030:	2301      	movs	r3, #1
}
 8015032:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015034:	7563      	strb	r3, [r4, #21]
}
 8015036:	b005      	add	sp, #20
 8015038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503c:	1e71      	subs	r1, r6, #1
 801503e:	18d5      	adds	r5, r2, r3
			*d++ = *s++;
 8015040:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 8015044:	42aa      	cmp	r2, r5
			*d++ = *s++;
 8015046:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 801504a:	d1f9      	bne.n	8015040 <f_read+0x1e8>
 801504c:	e771      	b.n	8014f32 <f_read+0xda>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801504e:	f04f 0907 	mov.w	r9, #7
 8015052:	e715      	b.n	8014e80 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8015054:	69e1      	ldr	r1, [r4, #28]
 8015056:	6820      	ldr	r0, [r4, #0]
 8015058:	9203      	str	r2, [sp, #12]
 801505a:	f7fd fb13 	bl	8012684 <get_fat.isra.0>
 801505e:	9a03      	ldr	r2, [sp, #12]
 8015060:	e7a9      	b.n	8014fb6 <f_read+0x15e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015062:	2301      	movs	r3, #1
 8015064:	4659      	mov	r1, fp
 8015066:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801506a:	f7fd f98f 	bl	801238c <disk_write>
 801506e:	2800      	cmp	r0, #0
 8015070:	d1dc      	bne.n	801502c <f_read+0x1d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015072:	7d23      	ldrb	r3, [r4, #20]
 8015074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015078:	7523      	strb	r3, [r4, #20]
 801507a:	e7b6      	b.n	8014fea <f_read+0x192>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801507c:	6a22      	ldr	r2, [r4, #32]
 801507e:	1b55      	subs	r5, r2, r5
 8015080:	429d      	cmp	r5, r3
 8015082:	f4bf af55 	bcs.w	8014f30 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8015086:	eb06 2045 	add.w	r0, r6, r5, lsl #9
 801508a:	4659      	mov	r1, fp
 801508c:	4602      	mov	r2, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801508e:	3004      	adds	r0, #4
 8015090:	4583      	cmp	fp, r0
 8015092:	d202      	bcs.n	801509a <f_read+0x242>
 8015094:	9802      	ldr	r0, [sp, #8]
 8015096:	4282      	cmp	r2, r0
 8015098:	d309      	bcc.n	80150ae <f_read+0x256>
 801509a:	4659      	mov	r1, fp
 801509c:	f502 7500 	add.w	r5, r2, #512	; 0x200
			*d++ = *s++;
 80150a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80150a4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80150a8:	42aa      	cmp	r2, r5
 80150aa:	d1f9      	bne.n	80150a0 <f_read+0x248>
 80150ac:	e740      	b.n	8014f30 <f_read+0xd8>
 80150ae:	3a01      	subs	r2, #1
 80150b0:	f504 750c 	add.w	r5, r4, #560	; 0x230
			*d++ = *s++;
 80150b4:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 80150b8:	428d      	cmp	r5, r1
			*d++ = *s++;
 80150ba:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 80150be:	d1f9      	bne.n	80150b4 <f_read+0x25c>
 80150c0:	e736      	b.n	8014f30 <f_read+0xd8>
 80150c2:	bf00      	nop

080150c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80150c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c8:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80150ca:	2300      	movs	r3, #0
{
 80150cc:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 80150ce:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80150d0:	b150      	cbz	r0, 80150e8 <f_write+0x24>
 80150d2:	6803      	ldr	r3, [r0, #0]
 80150d4:	4604      	mov	r4, r0
 80150d6:	b13b      	cbz	r3, 80150e8 <f_write+0x24>
 80150d8:	4616      	mov	r6, r2
 80150da:	781a      	ldrb	r2, [r3, #0]
 80150dc:	b122      	cbz	r2, 80150e8 <f_write+0x24>
 80150de:	460d      	mov	r5, r1
 80150e0:	88da      	ldrh	r2, [r3, #6]
 80150e2:	8881      	ldrh	r1, [r0, #4]
 80150e4:	4291      	cmp	r1, r2
 80150e6:	d005      	beq.n	80150f4 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80150e8:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80150ec:	4640      	mov	r0, r8
 80150ee:	b005      	add	sp, #20
 80150f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80150f4:	7858      	ldrb	r0, [r3, #1]
 80150f6:	f7fd f91d 	bl	8012334 <disk_status>
 80150fa:	07c1      	lsls	r1, r0, #31
 80150fc:	d4f4      	bmi.n	80150e8 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80150fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8015102:	f1b8 0f00 	cmp.w	r8, #0
 8015106:	d1f1      	bne.n	80150ec <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015108:	7d23      	ldrb	r3, [r4, #20]
 801510a:	079a      	lsls	r2, r3, #30
 801510c:	f140 80f5 	bpl.w	80152fa <f_write+0x236>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015110:	69a2      	ldr	r2, [r4, #24]
 8015112:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015114:	bf28      	it	cs
 8015116:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8015118:	2e00      	cmp	r6, #0
 801511a:	d064      	beq.n	80151e6 <f_write+0x122>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801511c:	46a2      	mov	sl, r4
 801511e:	f504 730c 	add.w	r3, r4, #560	; 0x230
 8015122:	f85a 9b30 	ldr.w	r9, [sl], #48
 8015126:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015128:	f3c2 0108 	ubfx	r1, r2, #0, #9
 801512c:	2900      	cmp	r1, #0
 801512e:	d169      	bne.n	8015204 <f_write+0x140>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015130:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8015134:	0a53      	lsrs	r3, r2, #9
 8015136:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 801513a:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 801513e:	d110      	bne.n	8015162 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015140:	2a00      	cmp	r2, #0
 8015142:	f040 80a2 	bne.w	801528a <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015146:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8015148:	2800      	cmp	r0, #0
 801514a:	f000 80e3 	beq.w	8015314 <f_write+0x250>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801514e:	2801      	cmp	r0, #1
 8015150:	f000 8093 	beq.w	801527a <f_write+0x1b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015154:	1c43      	adds	r3, r0, #1
 8015156:	f000 80bd 	beq.w	80152d4 <f_write+0x210>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801515a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801515c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801515e:	b903      	cbnz	r3, 8015162 <f_write+0x9e>
 8015160:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015162:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015166:	2b00      	cmp	r3, #0
 8015168:	f2c0 80a7 	blt.w	80152ba <f_write+0x1f6>
	clst -= 2;
 801516c:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801516e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8015172:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015174:	3b02      	subs	r3, #2
 8015176:	429a      	cmp	r2, r3
 8015178:	d27f      	bcs.n	801527a <f_write+0x1b6>
	return clst * fs->csize + fs->database;
 801517a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 801517e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8015182:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015186:	2a00      	cmp	r2, #0
 8015188:	d077      	beq.n	801527a <f_write+0x1b6>
			if (cc) {						/* Write maximum contiguous sectors directly */
 801518a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 801518e:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015190:	d32d      	bcc.n	80151ee <f_write+0x12a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015192:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015196:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015198:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801519a:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 801519e:	bf88      	it	hi
 80151a0:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80151a4:	4629      	mov	r1, r5
 80151a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80151aa:	f7fd f8ef 	bl	801238c <disk_write>
 80151ae:	2800      	cmp	r0, #0
 80151b0:	f040 8090 	bne.w	80152d4 <f_write+0x210>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80151b4:	6a21      	ldr	r1, [r4, #32]
 80151b6:	9a02      	ldr	r2, [sp, #8]
 80151b8:	9b03      	ldr	r3, [sp, #12]
 80151ba:	1a8a      	subs	r2, r1, r2
 80151bc:	429a      	cmp	r2, r3
 80151be:	f0c0 80bd 	bcc.w	801533c <f_write+0x278>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80151c2:	eb05 2143 	add.w	r1, r5, r3, lsl #9
 80151c6:	025b      	lsls	r3, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80151c8:	69a2      	ldr	r2, [r4, #24]
 80151ca:	460d      	mov	r5, r1
 80151cc:	68e0      	ldr	r0, [r4, #12]
 80151ce:	441a      	add	r2, r3
 80151d0:	6839      	ldr	r1, [r7, #0]
 80151d2:	4290      	cmp	r0, r2
 80151d4:	4419      	add	r1, r3
 80151d6:	61a2      	str	r2, [r4, #24]
 80151d8:	bf38      	it	cc
 80151da:	4610      	movcc	r0, r2
	for ( ;  btw;							/* Repeat until all data written */
 80151dc:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80151de:	60e0      	str	r0, [r4, #12]
 80151e0:	6039      	str	r1, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80151e2:	d1a1      	bne.n	8015128 <f_write+0x64>
 80151e4:	7d23      	ldrb	r3, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80151e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151ea:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80151ec:	e77e      	b.n	80150ec <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80151ee:	6a23      	ldr	r3, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 80151f0:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80151f2:	4293      	cmp	r3, r2
 80151f4:	d003      	beq.n	80151fe <f_write+0x13a>
 80151f6:	68e3      	ldr	r3, [r4, #12]
 80151f8:	4299      	cmp	r1, r3
 80151fa:	f0c0 8093 	bcc.w	8015324 <f_write+0x260>
			fp->sect = sect;
 80151fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8015202:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015204:	f5c1 7300 	rsb	r3, r1, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015208:	1d08      	adds	r0, r1, #4
 801520a:	1d2a      	adds	r2, r5, #4
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801520c:	4451      	add	r1, sl
 801520e:	42b3      	cmp	r3, r6
 8015210:	4450      	add	r0, sl
 8015212:	bf28      	it	cs
 8015214:	4633      	movcs	r3, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015216:	4291      	cmp	r1, r2
 8015218:	bf38      	it	cc
 801521a:	4285      	cmpcc	r5, r0
 801521c:	f103 3eff 	add.w	lr, r3, #4294967295
 8015220:	d360      	bcc.n	80152e4 <f_write+0x220>
 8015222:	f1be 0f07 	cmp.w	lr, #7
 8015226:	d95d      	bls.n	80152e4 <f_write+0x220>
 8015228:	f023 0003 	bic.w	r0, r3, #3
 801522c:	462a      	mov	r2, r5
 801522e:	468c      	mov	ip, r1
 8015230:	4428      	add	r0, r5
			*d++ = *s++;
 8015232:	f852 bb04 	ldr.w	fp, [r2], #4
 8015236:	4290      	cmp	r0, r2
 8015238:	f84c bb04 	str.w	fp, [ip], #4
		} while (--cnt);
 801523c:	d1f9      	bne.n	8015232 <f_write+0x16e>
 801523e:	f023 0203 	bic.w	r2, r3, #3
 8015242:	4293      	cmp	r3, r2
 8015244:	eb01 0002 	add.w	r0, r1, r2
 8015248:	eb05 0c02 	add.w	ip, r5, r2
 801524c:	d053      	beq.n	80152f6 <f_write+0x232>
			*d++ = *s++;
 801524e:	f815 b002 	ldrb.w	fp, [r5, r2]
		} while (--cnt);
 8015252:	ebbe 0e02 	subs.w	lr, lr, r2
			*d++ = *s++;
 8015256:	f801 b002 	strb.w	fp, [r1, r2]
		} while (--cnt);
 801525a:	d051      	beq.n	8015300 <f_write+0x23c>
			*d++ = *s++;
 801525c:	f89c 2001 	ldrb.w	r2, [ip, #1]
		} while (--cnt);
 8015260:	f1be 0f01 	cmp.w	lr, #1
			*d++ = *s++;
 8015264:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 8015266:	d04b      	beq.n	8015300 <f_write+0x23c>
			*d++ = *s++;
 8015268:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801526c:	18e9      	adds	r1, r5, r3
 801526e:	7082      	strb	r2, [r0, #2]
		fp->flag |= FA_DIRTY;
 8015270:	7d22      	ldrb	r2, [r4, #20]
 8015272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015276:	7522      	strb	r2, [r4, #20]
 8015278:	e7a6      	b.n	80151c8 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801527a:	f04f 0802 	mov.w	r8, #2
}
 801527e:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015280:	f884 8015 	strb.w	r8, [r4, #21]
}
 8015284:	b005      	add	sp, #20
 8015286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 801528a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801528c:	2a00      	cmp	r2, #0
 801528e:	d039      	beq.n	8015304 <f_write+0x240>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015290:	6820      	ldr	r0, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015292:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015294:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015296:	8940      	ldrh	r0, [r0, #10]
 8015298:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 801529c:	b92a      	cbnz	r2, 80152aa <f_write+0x1e6>
 801529e:	e7a1      	b.n	80151e4 <f_write+0x120>
		cl -= ncl; tbl++;		/* Next fragment */
 80152a0:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80152a2:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80152a6:	2a00      	cmp	r2, #0
 80152a8:	d09c      	beq.n	80151e4 <f_write+0x120>
		if (cl < ncl) break;	/* In this fragment? */
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d2f8      	bcs.n	80152a0 <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 80152ae:	6848      	ldr	r0, [r1, #4]
 80152b0:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80152b2:	2800      	cmp	r0, #0
 80152b4:	f47f af4b 	bne.w	801514e <f_write+0x8a>
 80152b8:	e794      	b.n	80151e4 <f_write+0x120>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80152ba:	2301      	movs	r3, #1
 80152bc:	6a22      	ldr	r2, [r4, #32]
 80152be:	4651      	mov	r1, sl
 80152c0:	f899 0001 	ldrb.w	r0, [r9, #1]
 80152c4:	f7fd f862 	bl	801238c <disk_write>
 80152c8:	b920      	cbnz	r0, 80152d4 <f_write+0x210>
				fp->flag &= (BYTE)~FA_DIRTY;
 80152ca:	7d23      	ldrb	r3, [r4, #20]
 80152cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152d0:	7523      	strb	r3, [r4, #20]
 80152d2:	e74b      	b.n	801516c <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80152d4:	f04f 0801 	mov.w	r8, #1
}
 80152d8:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80152da:	f884 8015 	strb.w	r8, [r4, #21]
}
 80152de:	b005      	add	sp, #20
 80152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e4:	1e4a      	subs	r2, r1, #1
 80152e6:	18e9      	adds	r1, r5, r3
			*d++ = *s++;
 80152e8:	f815 0b01 	ldrb.w	r0, [r5], #1
		} while (--cnt);
 80152ec:	428d      	cmp	r5, r1
			*d++ = *s++;
 80152ee:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 80152f2:	d1f9      	bne.n	80152e8 <f_write+0x224>
 80152f4:	e7bc      	b.n	8015270 <f_write+0x1ac>
 80152f6:	4661      	mov	r1, ip
 80152f8:	e7ba      	b.n	8015270 <f_write+0x1ac>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80152fa:	f04f 0807 	mov.w	r8, #7
 80152fe:	e6f5      	b.n	80150ec <f_write+0x28>
 8015300:	18e9      	adds	r1, r5, r3
 8015302:	e7b5      	b.n	8015270 <f_write+0x1ac>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015304:	69e1      	ldr	r1, [r4, #28]
 8015306:	4620      	mov	r0, r4
 8015308:	f7fd fd4e 	bl	8012da8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801530c:	2800      	cmp	r0, #0
 801530e:	f47f af1e 	bne.w	801514e <f_write+0x8a>
 8015312:	e767      	b.n	80151e4 <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015314:	4659      	mov	r1, fp
 8015316:	4620      	mov	r0, r4
 8015318:	f7fd fd46 	bl	8012da8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801531c:	2800      	cmp	r0, #0
 801531e:	f47f af16 	bne.w	801514e <f_write+0x8a>
 8015322:	e75f      	b.n	80151e4 <f_write+0x120>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015324:	2301      	movs	r3, #1
 8015326:	4651      	mov	r1, sl
 8015328:	f899 0001 	ldrb.w	r0, [r9, #1]
 801532c:	9202      	str	r2, [sp, #8]
 801532e:	f7fd f81f 	bl	8012370 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8015332:	2800      	cmp	r0, #0
 8015334:	d1ce      	bne.n	80152d4 <f_write+0x210>
 8015336:	69a1      	ldr	r1, [r4, #24]
 8015338:	9a02      	ldr	r2, [sp, #8]
 801533a:	e760      	b.n	80151fe <f_write+0x13a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801533c:	eb05 2142 	add.w	r1, r5, r2, lsl #9
 8015340:	460a      	mov	r2, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015342:	3104      	adds	r1, #4
 8015344:	458a      	cmp	sl, r1
 8015346:	d203      	bcs.n	8015350 <f_write+0x28c>
 8015348:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801534c:	428a      	cmp	r2, r1
 801534e:	d30d      	bcc.n	801536c <f_write+0x2a8>
 8015350:	4651      	mov	r1, sl
 8015352:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8015356:	f852 0b04 	ldr.w	r0, [r2], #4
 801535a:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 801535e:	4561      	cmp	r1, ip
 8015360:	d1f9      	bne.n	8015356 <f_write+0x292>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015362:	7d22      	ldrb	r2, [r4, #20]
 8015364:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015368:	7522      	strb	r2, [r4, #20]
 801536a:	e72a      	b.n	80151c2 <f_write+0xfe>
 801536c:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8015370:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8015374:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 8015378:	4594      	cmp	ip, r2
			*d++ = *s++;
 801537a:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 801537e:	d1f9      	bne.n	8015374 <f_write+0x2b0>
 8015380:	e7ef      	b.n	8015362 <f_write+0x29e>
 8015382:	bf00      	nop

08015384 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015384:	b158      	cbz	r0, 801539e <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015388:	6803      	ldr	r3, [r0, #0]
 801538a:	4604      	mov	r4, r0
 801538c:	b12b      	cbz	r3, 801539a <f_close+0x16>
 801538e:	781a      	ldrb	r2, [r3, #0]
 8015390:	b11a      	cbz	r2, 801539a <f_close+0x16>
 8015392:	8881      	ldrh	r1, [r0, #4]
 8015394:	88da      	ldrh	r2, [r3, #6]
 8015396:	4291      	cmp	r1, r2
 8015398:	d003      	beq.n	80153a2 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 801539a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 801539c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_INVALID_OBJECT;
 801539e:	2009      	movs	r0, #9
}
 80153a0:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80153a2:	7858      	ldrb	r0, [r3, #1]
 80153a4:	f7fc ffc6 	bl	8012334 <disk_status>
 80153a8:	07c1      	lsls	r1, r0, #31
 80153aa:	d4f6      	bmi.n	801539a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80153ac:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80153ae:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80153b0:	065a      	lsls	r2, r3, #25
 80153b2:	d53d      	bpl.n	8015430 <f_close+0xac>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80153b4:	061b      	lsls	r3, r3, #24
 80153b6:	d45e      	bmi.n	8015476 <f_close+0xf2>
			tm = GET_FATTIME();				/* Modified time */
 80153b8:	f7fd f804 	bl	80123c4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80153bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 80153c0:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153c2:	4299      	cmp	r1, r3
 80153c4:	d004      	beq.n	80153d0 <f_close+0x4c>
 80153c6:	4628      	mov	r0, r5
 80153c8:	f7fd f884 	bl	80124d4 <move_window.part.0>
				if (res == FR_OK) {
 80153cc:	2800      	cmp	r0, #0
 80153ce:	d1e5      	bne.n	801539c <f_close+0x18>
					dir = fp->dir_ptr;
 80153d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80153d2:	7acb      	ldrb	r3, [r1, #11]
 80153d4:	f043 0320 	orr.w	r3, r3, #32
 80153d8:	72cb      	strb	r3, [r1, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80153da:	68a3      	ldr	r3, [r4, #8]
 80153dc:	6822      	ldr	r2, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80153de:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80153e2:	768b      	strb	r3, [r1, #26]
	*ptr++ = (BYTE)val;
 80153e4:	76c8      	strb	r0, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80153e6:	7812      	ldrb	r2, [r2, #0]
 80153e8:	2a03      	cmp	r2, #3
 80153ea:	d103      	bne.n	80153f4 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80153ec:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80153ee:	0a1a      	lsrs	r2, r3, #8
 80153f0:	750b      	strb	r3, [r1, #20]
	*ptr++ = (BYTE)val;
 80153f2:	754a      	strb	r2, [r1, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80153f4:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80153f6:	0a37      	lsrs	r7, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80153f8:	0c32      	lsrs	r2, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80153fa:	758e      	strb	r6, [r1, #22]
 80153fc:	0a18      	lsrs	r0, r3, #8
 80153fe:	770b      	strb	r3, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8015400:	75cf      	strb	r7, [r1, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8015402:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8015404:	7748      	strb	r0, [r1, #29]
					fs->wflag = 1;
 8015406:	2701      	movs	r7, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8015408:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801540a:	760a      	strb	r2, [r1, #24]
 801540c:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801540e:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8015410:	7788      	strb	r0, [r1, #30]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015412:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 8015414:	77cb      	strb	r3, [r1, #31]
 8015416:	764e      	strb	r6, [r1, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8015418:	748a      	strb	r2, [r1, #18]
	*ptr++ = (BYTE)val;
 801541a:	74ca      	strb	r2, [r1, #19]
					fs->wflag = 1;
 801541c:	70ef      	strb	r7, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801541e:	f7fd fc51 	bl	8012cc4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015422:	7d23      	ldrb	r3, [r4, #20]
 8015424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015428:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 801542a:	2800      	cmp	r0, #0
 801542c:	d1b6      	bne.n	801539c <f_close+0x18>
 801542e:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015430:	2d00      	cmp	r5, #0
 8015432:	d0b2      	beq.n	801539a <f_close+0x16>
 8015434:	782b      	ldrb	r3, [r5, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d0af      	beq.n	801539a <f_close+0x16>
 801543a:	88a2      	ldrh	r2, [r4, #4]
 801543c:	88eb      	ldrh	r3, [r5, #6]
 801543e:	429a      	cmp	r2, r3
 8015440:	d1ab      	bne.n	801539a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015442:	7868      	ldrb	r0, [r5, #1]
 8015444:	f7fc ff76 	bl	8012334 <disk_status>
 8015448:	f010 0001 	ands.w	r0, r0, #1
 801544c:	d1a5      	bne.n	801539a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801544e:	6923      	ldr	r3, [r4, #16]
 8015450:	3b01      	subs	r3, #1
 8015452:	2b03      	cmp	r3, #3
 8015454:	d820      	bhi.n	8015498 <f_close+0x114>
		n = Files[i].ctr;
 8015456:	4912      	ldr	r1, [pc, #72]	; (80154a0 <f_close+0x11c>)
 8015458:	011d      	lsls	r5, r3, #4
 801545a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801545e:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015460:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8015464:	d014      	beq.n	8015490 <f_close+0x10c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8015466:	b1a2      	cbz	r2, 8015492 <f_close+0x10e>
 8015468:	3a01      	subs	r2, #1
 801546a:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801546c:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801546e:	b182      	cbz	r2, 8015492 <f_close+0x10e>
				fp->obj.fs = 0;			/* Invalidate file object */
 8015470:	2300      	movs	r3, #0
 8015472:	6023      	str	r3, [r4, #0]
}
 8015474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015476:	2301      	movs	r3, #1
 8015478:	6a22      	ldr	r2, [r4, #32]
 801547a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801547e:	7868      	ldrb	r0, [r5, #1]
 8015480:	f7fc ff84 	bl	801238c <disk_write>
 8015484:	b950      	cbnz	r0, 801549c <f_close+0x118>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015486:	7d23      	ldrb	r3, [r4, #20]
 8015488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801548c:	7523      	strb	r3, [r4, #20]
 801548e:	e793      	b.n	80153b8 <f_close+0x34>
		Files[i].ctr = n;
 8015490:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015492:	2300      	movs	r3, #0
 8015494:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8015496:	e7eb      	b.n	8015470 <f_close+0xec>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015498:	2002      	movs	r0, #2
}
 801549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801549c:	2001      	movs	r0, #1
}
 801549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154a0:	300081d8 	.word	0x300081d8

080154a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80154a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a8:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80154aa:	b148      	cbz	r0, 80154c0 <f_lseek+0x1c>
 80154ac:	6803      	ldr	r3, [r0, #0]
 80154ae:	4604      	mov	r4, r0
 80154b0:	b133      	cbz	r3, 80154c0 <f_lseek+0x1c>
 80154b2:	781a      	ldrb	r2, [r3, #0]
 80154b4:	b122      	cbz	r2, 80154c0 <f_lseek+0x1c>
 80154b6:	460d      	mov	r5, r1
 80154b8:	88da      	ldrh	r2, [r3, #6]
 80154ba:	8881      	ldrh	r1, [r0, #4]
 80154bc:	4291      	cmp	r1, r2
 80154be:	d004      	beq.n	80154ca <f_lseek+0x26>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 80154c0:	2609      	movs	r6, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 80154c2:	4630      	mov	r0, r6
 80154c4:	b005      	add	sp, #20
 80154c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80154ca:	7858      	ldrb	r0, [r3, #1]
 80154cc:	f7fc ff32 	bl	8012334 <disk_status>
 80154d0:	07c3      	lsls	r3, r0, #31
 80154d2:	d4f5      	bmi.n	80154c0 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80154d4:	7d66      	ldrb	r6, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80154d6:	f8d4 a000 	ldr.w	sl, [r4]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80154da:	2e00      	cmp	r6, #0
 80154dc:	d1f1      	bne.n	80154c2 <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 80154de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d049      	beq.n	8015578 <f_lseek+0xd4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80154e4:	1c6f      	adds	r7, r5, #1
 80154e6:	f000 8097 	beq.w	8015618 <f_lseek+0x174>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80154ea:	68e1      	ldr	r1, [r4, #12]
 80154ec:	428d      	cmp	r5, r1
 80154ee:	bf28      	it	cs
 80154f0:	460d      	movcs	r5, r1
			fp->fptr = ofs;				/* Set file pointer */
 80154f2:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 80154f4:	2d00      	cmp	r5, #0
 80154f6:	d0e4      	beq.n	80154c2 <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 80154f8:	1e69      	subs	r1, r5, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80154fa:	f8ba 700a 	ldrh.w	r7, [sl, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80154fe:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015500:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015502:	0a49      	lsrs	r1, r1, #9
 8015504:	fbb1 f0f7 	udiv	r0, r1, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015508:	b933      	cbnz	r3, 8015518 <f_lseek+0x74>
 801550a:	e11e      	b.n	801574a <f_lseek+0x2a6>
		cl -= ncl; tbl++;		/* Next fragment */
 801550c:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801550e:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015512:	2b00      	cmp	r3, #0
 8015514:	f000 8119 	beq.w	801574a <f_lseek+0x2a6>
		if (cl < ncl) break;	/* In this fragment? */
 8015518:	4298      	cmp	r0, r3
 801551a:	d2f7      	bcs.n	801550c <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 801551c:	6853      	ldr	r3, [r2, #4]
 801551e:	4403      	add	r3, r0
 8015520:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015522:	f8da 0018 	ldr.w	r0, [sl, #24]
				fp->clust = clmt_clust(fp, ofs - 1);
 8015526:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015528:	1e83      	subs	r3, r0, #2
 801552a:	4293      	cmp	r3, r2
 801552c:	f240 80cf 	bls.w	80156ce <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8015530:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8015534:	fb02 3307 	mla	r3, r2, r7, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015538:	2b00      	cmp	r3, #0
 801553a:	f000 80c8 	beq.w	80156ce <f_lseek+0x22a>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801553e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8015542:	2d00      	cmp	r5, #0
 8015544:	d0bd      	beq.n	80154c2 <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015546:	3f01      	subs	r7, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015548:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801554a:	4039      	ands	r1, r7
 801554c:	18cf      	adds	r7, r1, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801554e:	42ba      	cmp	r2, r7
 8015550:	d0b7      	beq.n	80154c2 <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015552:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015556:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801555a:	2b00      	cmp	r3, #0
 801555c:	f2c0 8142 	blt.w	80157e4 <f_lseek+0x340>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015560:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8015564:	2301      	movs	r3, #1
 8015566:	463a      	mov	r2, r7
 8015568:	f7fc ff02 	bl	8012370 <disk_read>
 801556c:	4606      	mov	r6, r0
 801556e:	2800      	cmp	r0, #0
 8015570:	f040 80aa 	bne.w	80156c8 <f_lseek+0x224>
			fp->sect = nsect;
 8015574:	6227      	str	r7, [r4, #32]
 8015576:	e7a4      	b.n	80154c2 <f_lseek+0x1e>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015578:	68e3      	ldr	r3, [r4, #12]
 801557a:	42ab      	cmp	r3, r5
 801557c:	d204      	bcs.n	8015588 <f_lseek+0xe4>
 801557e:	7d22      	ldrb	r2, [r4, #20]
 8015580:	f012 0f02 	tst.w	r2, #2
 8015584:	bf08      	it	eq
 8015586:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8015588:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 801558a:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 801558c:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 801558e:	2d00      	cmp	r5, #0
 8015590:	d097      	beq.n	80154c2 <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015592:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 8015596:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 801559a:	2b00      	cmp	r3, #0
 801559c:	d035      	beq.n	801560a <f_lseek+0x166>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801559e:	3b01      	subs	r3, #1
 80155a0:	1e6a      	subs	r2, r5, #1
 80155a2:	fbb3 f1f8 	udiv	r1, r3, r8
 80155a6:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 80155aa:	428a      	cmp	r2, r1
 80155ac:	d32d      	bcc.n	801560a <f_lseek+0x166>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80155ae:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 80155b2:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80155b4:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 80155b6:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80155b8:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 80155ba:	2f00      	cmp	r7, #0
 80155bc:	f000 80ec 	beq.w	8015798 <f_lseek+0x2f4>
				while (ofs > bcs) {						/* Cluster following loop */
 80155c0:	4545      	cmp	r5, r8
 80155c2:	f240 80d3 	bls.w	801576c <f_lseek+0x2c8>
 80155c6:	4639      	mov	r1, r7
 80155c8:	e012      	b.n	80155f0 <f_lseek+0x14c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80155ca:	f7fd fbed 	bl	8012da8 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80155ce:	4601      	mov	r1, r0
 80155d0:	2800      	cmp	r0, #0
 80155d2:	f000 8126 	beq.w	8015822 <f_lseek+0x37e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80155d6:	1c4b      	adds	r3, r1, #1
 80155d8:	d076      	beq.n	80156c8 <f_lseek+0x224>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80155da:	2901      	cmp	r1, #1
 80155dc:	d977      	bls.n	80156ce <f_lseek+0x22a>
 80155de:	f8da 3018 	ldr.w	r3, [sl, #24]
 80155e2:	428b      	cmp	r3, r1
 80155e4:	d973      	bls.n	80156ce <f_lseek+0x22a>
				while (ofs > bcs) {						/* Cluster following loop */
 80155e6:	45a8      	cmp	r8, r5
					fp->clust = clst;
 80155e8:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80155ea:	f080 80bd 	bcs.w	8015768 <f_lseek+0x2c4>
 80155ee:	69a3      	ldr	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80155f0:	7d22      	ldrb	r2, [r4, #20]
					ofs -= bcs; fp->fptr += bcs;
 80155f2:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80155f4:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 80155f6:	eba5 0508 	sub.w	r5, r5, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80155fa:	0792      	lsls	r2, r2, #30
					ofs -= bcs; fp->fptr += bcs;
 80155fc:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80155fe:	d4e4      	bmi.n	80155ca <f_lseek+0x126>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015600:	6820      	ldr	r0, [r4, #0]
 8015602:	f7fd f83f 	bl	8012684 <get_fat.isra.0>
 8015606:	4601      	mov	r1, r0
 8015608:	e7e5      	b.n	80155d6 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
 801560a:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801560c:	2f00      	cmp	r7, #0
 801560e:	f000 809f 	beq.w	8015750 <f_lseek+0x2ac>
 8015612:	2300      	movs	r3, #0
				fp->clust = clst;
 8015614:	61e7      	str	r7, [r4, #28]
 8015616:	e7d0      	b.n	80155ba <f_lseek+0x116>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015618:	4683      	mov	fp, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 801561a:	68a3      	ldr	r3, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801561c:	f85b 2b04 	ldr.w	r2, [fp], #4
 8015620:	9200      	str	r2, [sp, #0]
			if (cl) {
 8015622:	2b00      	cmp	r3, #0
 8015624:	f000 8088 	beq.w	8015738 <f_lseek+0x294>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015628:	2202      	movs	r2, #2
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801562a:	4657      	mov	r7, sl
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801562c:	4699      	mov	r9, r3
 801562e:	9603      	str	r6, [sp, #12]
 8015630:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8015634:	4692      	mov	sl, r2
 8015636:	46a3      	mov	fp, r4
 8015638:	464d      	mov	r5, r9
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801563a:	2400      	movs	r4, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801563c:	2d01      	cmp	r5, #1
						pcl = cl; ncl++;
 801563e:	f104 0401 	add.w	r4, r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015642:	d902      	bls.n	801564a <f_lseek+0x1a6>
 8015644:	69bb      	ldr	r3, [r7, #24]
 8015646:	429d      	cmp	r5, r3
 8015648:	d303      	bcc.n	8015652 <f_lseek+0x1ae>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801564a:	2602      	movs	r6, #2
 801564c:	f88b 6015 	strb.w	r6, [fp, #21]
 8015650:	e737      	b.n	80154c2 <f_lseek+0x1e>
		switch (fs->fs_type) {
 8015652:	783b      	ldrb	r3, [r7, #0]
 8015654:	2b02      	cmp	r3, #2
 8015656:	d02c      	beq.n	80156b2 <f_lseek+0x20e>
 8015658:	2b03      	cmp	r3, #3
 801565a:	d03e      	beq.n	80156da <f_lseek+0x236>
 801565c:	2b01      	cmp	r3, #1
 801565e:	d1f4      	bne.n	801564a <f_lseek+0x1a6>
			bc = (UINT)clst; bc += bc / 2;
 8015660:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015668:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801566c:	4291      	cmp	r1, r2
 801566e:	d005      	beq.n	801567c <f_lseek+0x1d8>
 8015670:	4638      	mov	r0, r7
 8015672:	f7fc ff2f 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015676:	bb30      	cbnz	r0, 80156c6 <f_lseek+0x222>
 8015678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801567c:	f3c6 0008 	ubfx	r0, r6, #0, #9
 8015680:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015682:	eb03 2156 	add.w	r1, r3, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8015686:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015688:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801568a:	f890 8034 	ldrb.w	r8, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801568e:	d003      	beq.n	8015698 <f_lseek+0x1f4>
 8015690:	4638      	mov	r0, r7
 8015692:	f7fc ff1f 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015696:	b9b0      	cbnz	r0, 80156c6 <f_lseek+0x222>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015698:	f3c6 0608 	ubfx	r6, r6, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801569c:	07e8      	lsls	r0, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 801569e:	4437      	add	r7, r6
 80156a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80156a4:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80156a8:	f140 80ad 	bpl.w	8015806 <f_lseek+0x362>
 80156ac:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80156b0:	e02d      	b.n	801570e <f_lseek+0x26a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80156b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80156b6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156ba:	4299      	cmp	r1, r3
 80156bc:	d031      	beq.n	8015722 <f_lseek+0x27e>
 80156be:	4638      	mov	r0, r7
 80156c0:	f7fc ff08 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80156c4:	b368      	cbz	r0, 8015722 <f_lseek+0x27e>
 80156c6:	465c      	mov	r4, fp
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156c8:	2601      	movs	r6, #1
 80156ca:	7566      	strb	r6, [r4, #21]
 80156cc:	e6f9      	b.n	80154c2 <f_lseek+0x1e>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80156ce:	2602      	movs	r6, #2
}
 80156d0:	4630      	mov	r0, r6
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80156d2:	7566      	strb	r6, [r4, #21]
}
 80156d4:	b005      	add	sp, #20
 80156d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156da:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156de:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156e2:	4299      	cmp	r1, r3
 80156e4:	d004      	beq.n	80156f0 <f_lseek+0x24c>
 80156e6:	4638      	mov	r0, r7
 80156e8:	f7fc fef4 	bl	80124d4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d1ea      	bne.n	80156c6 <f_lseek+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80156f0:	00ab      	lsls	r3, r5, #2
 80156f2:	3734      	adds	r7, #52	; 0x34
 80156f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80156f8:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 80156fa:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 80156fe:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8015700:	7853      	ldrb	r3, [r2, #1]
 8015702:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8015706:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801570a:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801570e:	f1b8 0f01 	cmp.w	r8, #1
 8015712:	d99a      	bls.n	801564a <f_lseek+0x1a6>
					} while (cl == pcl + 1);
 8015714:	3501      	adds	r5, #1
 8015716:	4545      	cmp	r5, r8
 8015718:	d150      	bne.n	80157bc <f_lseek+0x318>
 801571a:	4645      	mov	r5, r8
 801571c:	f8db 7000 	ldr.w	r7, [fp]
 8015720:	e78c      	b.n	801563c <f_lseek+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015722:	006b      	lsls	r3, r5, #1
 8015724:	3734      	adds	r7, #52	; 0x34
 8015726:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801572a:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 801572c:	f817 8003 	ldrb.w	r8, [r7, r3]
 8015730:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015732:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 8015736:	e7ea      	b.n	801570e <f_lseek+0x26a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015738:	2202      	movs	r2, #2
			if (ulen <= tlen) {
 801573a:	9b00      	ldr	r3, [sp, #0]
			*fp->cltbl = ulen;	/* Number of items used */
 801573c:	6002      	str	r2, [r0, #0]
			if (ulen <= tlen) {
 801573e:	429a      	cmp	r2, r3
 8015740:	d85f      	bhi.n	8015802 <f_lseek+0x35e>
				*tbl = 0;		/* Terminate table */
 8015742:	2300      	movs	r3, #0
 8015744:	f8cb 3000 	str.w	r3, [fp]
 8015748:	e6bb      	b.n	80154c2 <f_lseek+0x1e>
 801574a:	f06f 0201 	mvn.w	r2, #1
 801574e:	e6e8      	b.n	8015522 <f_lseek+0x7e>
					clst = create_chain(&fp->obj, 0);
 8015750:	4639      	mov	r1, r7
 8015752:	4620      	mov	r0, r4
 8015754:	f7fd fb28 	bl	8012da8 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015758:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 801575a:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801575c:	d0b7      	beq.n	80156ce <f_lseek+0x22a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801575e:	1c41      	adds	r1, r0, #1
 8015760:	d0b2      	beq.n	80156c8 <f_lseek+0x224>
					fp->obj.sclust = clst;
 8015762:	69a3      	ldr	r3, [r4, #24]
 8015764:	60a0      	str	r0, [r4, #8]
 8015766:	e755      	b.n	8015614 <f_lseek+0x170>
 8015768:	460f      	mov	r7, r1
 801576a:	69a3      	ldr	r3, [r4, #24]
				fp->fptr += ofs;
 801576c:	442b      	add	r3, r5
				if (ofs % SS(fs)) {
 801576e:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 8015772:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8015774:	2a00      	cmp	r2, #0
 8015776:	d057      	beq.n	8015828 <f_lseek+0x384>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015778:	f8da 2018 	ldr.w	r2, [sl, #24]
	clst -= 2;
 801577c:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801577e:	3a02      	subs	r2, #2
 8015780:	4291      	cmp	r1, r2
 8015782:	d2a4      	bcs.n	80156ce <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8015784:	f8ba 700a 	ldrh.w	r7, [sl, #10]
 8015788:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 801578c:	fb01 2707 	mla	r7, r1, r7, r2
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015790:	2f00      	cmp	r7, #0
 8015792:	d09c      	beq.n	80156ce <f_lseek+0x22a>
					nsect += (DWORD)(ofs / SS(fs));
 8015794:	eb07 2755 	add.w	r7, r7, r5, lsr #9
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015798:	68e2      	ldr	r2, [r4, #12]
 801579a:	429a      	cmp	r2, r3
 801579c:	d204      	bcs.n	80157a8 <f_lseek+0x304>
			fp->flag |= FA_MODIFIED;
 801579e:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 80157a0:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 80157a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80157a6:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80157a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f43f ae88 	beq.w	80154c2 <f_lseek+0x1e>
 80157b2:	6a22      	ldr	r2, [r4, #32]
 80157b4:	42ba      	cmp	r2, r7
 80157b6:	f47f aecc 	bne.w	8015552 <f_lseek+0xae>
 80157ba:	e682      	b.n	80154c2 <f_lseek+0x1e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80157bc:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80157c0:	9b00      	ldr	r3, [sp, #0]
 80157c2:	4553      	cmp	r3, sl
 80157c4:	d322      	bcc.n	801580c <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 80157c6:	9b01      	ldr	r3, [sp, #4]
 80157c8:	4618      	mov	r0, r3
 80157ca:	f840 4b08 	str.w	r4, [r0], #8
 80157ce:	f8c3 9004 	str.w	r9, [r3, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80157d2:	9b02      	ldr	r3, [sp, #8]
 80157d4:	699a      	ldr	r2, [r3, #24]
 80157d6:	4590      	cmp	r8, r2
 80157d8:	d228      	bcs.n	801582c <f_lseek+0x388>
						*tbl++ = ncl; *tbl++ = tcl;
 80157da:	9001      	str	r0, [sp, #4]
{
 80157dc:	46c1      	mov	r9, r8
 80157de:	f8db 7000 	ldr.w	r7, [fp]
 80157e2:	e729      	b.n	8015638 <f_lseek+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80157e4:	2301      	movs	r3, #1
 80157e6:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80157ea:	9100      	str	r1, [sp, #0]
 80157ec:	f7fc fdce 	bl	801238c <disk_write>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	f47f af69 	bne.w	80156c8 <f_lseek+0x224>
				fp->flag &= (BYTE)~FA_DIRTY;
 80157f6:	7d23      	ldrb	r3, [r4, #20]
 80157f8:	9900      	ldr	r1, [sp, #0]
 80157fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157fe:	7523      	strb	r3, [r4, #20]
 8015800:	e6ae      	b.n	8015560 <f_lseek+0xbc>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015802:	2611      	movs	r6, #17
 8015804:	e65d      	b.n	80154c2 <f_lseek+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015806:	f3c8 080b 	ubfx	r8, r8, #0, #12
 801580a:	e780      	b.n	801570e <f_lseek+0x26a>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801580c:	9b02      	ldr	r3, [sp, #8]
 801580e:	699a      	ldr	r2, [r3, #24]
 8015810:	4542      	cmp	r2, r8
 8015812:	d8e3      	bhi.n	80157dc <f_lseek+0x338>
 8015814:	465c      	mov	r4, fp
 8015816:	4652      	mov	r2, sl
 8015818:	9e03      	ldr	r6, [sp, #12]
 801581a:	f8dd b004 	ldr.w	fp, [sp, #4]
 801581e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015820:	e78b      	b.n	801573a <f_lseek+0x296>
 8015822:	4607      	mov	r7, r0
 8015824:	69a3      	ldr	r3, [r4, #24]
 8015826:	e7b7      	b.n	8015798 <f_lseek+0x2f4>
		fp->fptr = nsect = 0;
 8015828:	4617      	mov	r7, r2
 801582a:	e7b5      	b.n	8015798 <f_lseek+0x2f4>
 801582c:	465c      	mov	r4, fp
 801582e:	4652      	mov	r2, sl
 8015830:	9e03      	ldr	r6, [sp, #12]
						*tbl++ = ncl; *tbl++ = tcl;
 8015832:	4683      	mov	fp, r0
 8015834:	e7f3      	b.n	801581e <f_lseek+0x37a>
 8015836:	bf00      	nop

08015838 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801583c:	b085      	sub	sp, #20
 801583e:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015840:	2800      	cmp	r0, #0
 8015842:	d04b      	beq.n	80158dc <f_opendir+0xa4>

	/* Get logical drive */
	obj = &dp->obj;
 8015844:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 8015846:	2200      	movs	r2, #0
 8015848:	a903      	add	r1, sp, #12
 801584a:	a801      	add	r0, sp, #4
 801584c:	f7fd fbda 	bl	8013004 <find_volume>
	if (res == FR_OK) {
 8015850:	4604      	mov	r4, r0
 8015852:	b128      	cbz	r0, 8015860 <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015854:	2300      	movs	r3, #0
 8015856:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8015858:	4620      	mov	r0, r4
 801585a:	b005      	add	sp, #20
 801585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 8015860:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8015862:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 8015866:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 8015868:	f000 fbbc 	bl	8015fe4 <ff_memalloc>
 801586c:	4606      	mov	r6, r0
 801586e:	2800      	cmp	r0, #0
 8015870:	d039      	beq.n	80158e6 <f_opendir+0xae>
 8015872:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015874:	4628      	mov	r0, r5
 8015876:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8015878:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801587a:	f7fe f843 	bl	8013904 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801587e:	4604      	mov	r4, r0
 8015880:	bb28      	cbnz	r0, 80158ce <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015882:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8015886:	2b00      	cmp	r3, #0
 8015888:	db34      	blt.n	80158f4 <f_opendir+0xbc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801588a:	79ab      	ldrb	r3, [r5, #6]
 801588c:	06db      	lsls	r3, r3, #27
 801588e:	d52c      	bpl.n	80158ea <f_opendir+0xb2>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015890:	9a03      	ldr	r2, [sp, #12]
 8015892:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 8015894:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 8015896:	7ecc      	ldrb	r4, [r1, #27]
 8015898:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 801589a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801589c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80158a0:	d105      	bne.n	80158ae <f_opendir+0x76>
	rv = rv << 8 | ptr[0];
 80158a2:	7d48      	ldrb	r0, [r1, #21]
 80158a4:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80158a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80158aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80158ae:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 80158b0:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80158b2:	2100      	movs	r1, #0
 80158b4:	4628      	mov	r0, r5
				obj->id = fs->id;
 80158b6:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80158b8:	f7fd fda8 	bl	801340c <dir_sdi>
				if (res == FR_OK) {
 80158bc:	4604      	mov	r4, r0
 80158be:	b930      	cbnz	r0, 80158ce <f_opendir+0x96>
					if (obj->sclust) {
 80158c0:	68aa      	ldr	r2, [r5, #8]
 80158c2:	b9ca      	cbnz	r2, 80158f8 <f_opendir+0xc0>
						obj->lockid = 0;	/* Root directory need not to be locked */
 80158c4:	6128      	str	r0, [r5, #16]
		FREE_NAMBUF();
 80158c6:	4630      	mov	r0, r6
 80158c8:	f000 fb8e 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80158cc:	e7c4      	b.n	8015858 <f_opendir+0x20>
		FREE_NAMBUF();
 80158ce:	4630      	mov	r0, r6
 80158d0:	f000 fb8a 	bl	8015fe8 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80158d4:	2c04      	cmp	r4, #4
 80158d6:	bf08      	it	eq
 80158d8:	2405      	moveq	r4, #5
 80158da:	e7bb      	b.n	8015854 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 80158dc:	2409      	movs	r4, #9
}
 80158de:	4620      	mov	r0, r4
 80158e0:	b005      	add	sp, #20
 80158e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_NAMBUF(fs);
 80158e6:	2411      	movs	r4, #17
 80158e8:	e7b6      	b.n	8015858 <f_opendir+0x20>
		FREE_NAMBUF();
 80158ea:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 80158ec:	2405      	movs	r4, #5
		FREE_NAMBUF();
 80158ee:	f000 fb7b 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80158f2:	e7af      	b.n	8015854 <f_opendir+0x1c>
 80158f4:	9a03      	ldr	r2, [sp, #12]
 80158f6:	e7db      	b.n	80158b0 <f_opendir+0x78>
		if (Files[i].fs == dp->obj.fs &&
 80158f8:	4b38      	ldr	r3, [pc, #224]	; (80159dc <f_opendir+0x1a4>)
 80158fa:	6829      	ldr	r1, [r5, #0]
 80158fc:	f8d3 9000 	ldr.w	r9, [r3]
 8015900:	4589      	cmp	r9, r1
 8015902:	d04a      	beq.n	801599a <f_opendir+0x162>
 8015904:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8015908:	4571      	cmp	r1, lr
 801590a:	d03c      	beq.n	8015986 <f_opendir+0x14e>
 801590c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015910:	4541      	cmp	r1, r8
 8015912:	d02e      	beq.n	8015972 <f_opendir+0x13a>
 8015914:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8015916:	428f      	cmp	r7, r1
 8015918:	d011      	beq.n	801593e <f_opendir+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801591a:	f1b9 0f00 	cmp.w	r9, #0
 801591e:	d055      	beq.n	80159cc <f_opendir+0x194>
 8015920:	f1be 0f00 	cmp.w	lr, #0
 8015924:	d042      	beq.n	80159ac <f_opendir+0x174>
 8015926:	f1b8 0f00 	cmp.w	r8, #0
 801592a:	d054      	beq.n	80159d6 <f_opendir+0x19e>
 801592c:	2f00      	cmp	r7, #0
 801592e:	d04f      	beq.n	80159d0 <f_opendir+0x198>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015930:	2300      	movs	r3, #0
		FREE_NAMBUF();
 8015932:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015934:	2412      	movs	r4, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015936:	612b      	str	r3, [r5, #16]
		FREE_NAMBUF();
 8015938:	f000 fb56 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801593c:	e78a      	b.n	8015854 <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 801593e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015940:	4282      	cmp	r2, r0
 8015942:	d1ea      	bne.n	801591a <f_opendir+0xe2>
			Files[i].clu == dp->obj.sclust &&
 8015944:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015946:	4684      	mov	ip, r0
 8015948:	6968      	ldr	r0, [r5, #20]
 801594a:	4584      	cmp	ip, r0
 801594c:	d1e5      	bne.n	801591a <f_opendir+0xe2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801594e:	f04f 0c03 	mov.w	ip, #3
 8015952:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8015956:	ea4f 170c 	mov.w	r7, ip, lsl #4
 801595a:	8992      	ldrh	r2, [r2, #12]
 801595c:	3201      	adds	r2, #1
 801595e:	b292      	uxth	r2, r2
	return i + 1;
 8015960:	f10c 0101 	add.w	r1, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015964:	443b      	add	r3, r7
		FREE_NAMBUF();
 8015966:	4630      	mov	r0, r6
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015968:	6129      	str	r1, [r5, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801596a:	819a      	strh	r2, [r3, #12]
		FREE_NAMBUF();
 801596c:	f000 fb3c 	bl	8015fe8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015970:	e772      	b.n	8015858 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 8015972:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8015974:	42ba      	cmp	r2, r7
 8015976:	d1cd      	bne.n	8015914 <f_opendir+0xdc>
			Files[i].clu == dp->obj.sclust &&
 8015978:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 801597a:	6968      	ldr	r0, [r5, #20]
 801597c:	4287      	cmp	r7, r0
 801597e:	d1c9      	bne.n	8015914 <f_opendir+0xdc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015980:	f04f 0c02 	mov.w	ip, #2
 8015984:	e7e5      	b.n	8015952 <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 8015986:	695f      	ldr	r7, [r3, #20]
 8015988:	42ba      	cmp	r2, r7
 801598a:	d1bf      	bne.n	801590c <f_opendir+0xd4>
			Files[i].clu == dp->obj.sclust &&
 801598c:	699f      	ldr	r7, [r3, #24]
 801598e:	6968      	ldr	r0, [r5, #20]
 8015990:	4287      	cmp	r7, r0
 8015992:	d1bb      	bne.n	801590c <f_opendir+0xd4>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015994:	f04f 0c01 	mov.w	ip, #1
 8015998:	e7db      	b.n	8015952 <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 801599a:	685f      	ldr	r7, [r3, #4]
 801599c:	42ba      	cmp	r2, r7
 801599e:	d1b1      	bne.n	8015904 <f_opendir+0xcc>
			Files[i].clu == dp->obj.sclust &&
 80159a0:	689f      	ldr	r7, [r3, #8]
 80159a2:	6968      	ldr	r0, [r5, #20]
 80159a4:	4287      	cmp	r7, r0
 80159a6:	d1ad      	bne.n	8015904 <f_opendir+0xcc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80159a8:	46a4      	mov	ip, r4
 80159aa:	e7d2      	b.n	8015952 <f_opendir+0x11a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159ac:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 80159b0:	eb03 1e0c 	add.w	lr, r3, ip, lsl #4
		Files[i].ofs = dp->dptr;
 80159b4:	6968      	ldr	r0, [r5, #20]
		Files[i].fs = dp->obj.fs;
 80159b6:	ea4f 170c 	mov.w	r7, ip, lsl #4
		Files[i].ctr = 0;
 80159ba:	f04f 0800 	mov.w	r8, #0
		Files[i].ofs = dp->dptr;
 80159be:	e9ce 2001 	strd	r2, r0, [lr, #4]
		Files[i].fs = dp->obj.fs;
 80159c2:	51d9      	str	r1, [r3, r7]
		Files[i].ctr = 0;
 80159c4:	2201      	movs	r2, #1
 80159c6:	f8ae 800c 	strh.w	r8, [lr, #12]
 80159ca:	e7c9      	b.n	8015960 <f_opendir+0x128>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159cc:	46cc      	mov	ip, r9
 80159ce:	e7ef      	b.n	80159b0 <f_opendir+0x178>
 80159d0:	f04f 0c03 	mov.w	ip, #3
 80159d4:	e7ec      	b.n	80159b0 <f_opendir+0x178>
 80159d6:	f04f 0c02 	mov.w	ip, #2
 80159da:	e7e9      	b.n	80159b0 <f_opendir+0x178>
 80159dc:	300081d8 	.word	0x300081d8

080159e0 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80159e0:	b330      	cbz	r0, 8015a30 <f_closedir+0x50>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80159e2:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80159e4:	6803      	ldr	r3, [r0, #0]
 80159e6:	4604      	mov	r4, r0
 80159e8:	b12b      	cbz	r3, 80159f6 <f_closedir+0x16>
 80159ea:	781a      	ldrb	r2, [r3, #0]
 80159ec:	b11a      	cbz	r2, 80159f6 <f_closedir+0x16>
 80159ee:	8881      	ldrh	r1, [r0, #4]
 80159f0:	88da      	ldrh	r2, [r3, #6]
 80159f2:	4291      	cmp	r1, r2
 80159f4:	d001      	beq.n	80159fa <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 80159f6:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 80159f8:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80159fa:	7858      	ldrb	r0, [r3, #1]
 80159fc:	f7fc fc9a 	bl	8012334 <disk_status>
 8015a00:	f010 0001 	ands.w	r0, r0, #1
 8015a04:	d1f7      	bne.n	80159f6 <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015a06:	6923      	ldr	r3, [r4, #16]
 8015a08:	b17b      	cbz	r3, 8015a2a <f_closedir+0x4a>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	2b03      	cmp	r3, #3
 8015a0e:	d815      	bhi.n	8015a3c <f_closedir+0x5c>
		n = Files[i].ctr;
 8015a10:	490b      	ldr	r1, [pc, #44]	; (8015a40 <f_closedir+0x60>)
 8015a12:	011d      	lsls	r5, r3, #4
 8015a14:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8015a18:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015a1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8015a1e:	d009      	beq.n	8015a34 <f_closedir+0x54>
		if (n > 0) n--;				/* Decrement read mode open count */
 8015a20:	b14a      	cbz	r2, 8015a36 <f_closedir+0x56>
 8015a22:	3a01      	subs	r2, #1
 8015a24:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8015a26:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015a28:	b12a      	cbz	r2, 8015a36 <f_closedir+0x56>
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	6023      	str	r3, [r4, #0]
}
 8015a2e:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8015a30:	2009      	movs	r0, #9
}
 8015a32:	4770      	bx	lr
		Files[i].ctr = n;
 8015a34:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015a36:	2300      	movs	r3, #0
 8015a38:	514b      	str	r3, [r1, r5]
		if (res == FR_OK)
 8015a3a:	e7f6      	b.n	8015a2a <f_closedir+0x4a>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015a3c:	2002      	movs	r0, #2
}
 8015a3e:	bd38      	pop	{r3, r4, r5, pc}
 8015a40:	300081d8 	.word	0x300081d8

08015a44 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015a46:	b148      	cbz	r0, 8015a5c <f_readdir+0x18>
 8015a48:	6803      	ldr	r3, [r0, #0]
 8015a4a:	4604      	mov	r4, r0
 8015a4c:	b133      	cbz	r3, 8015a5c <f_readdir+0x18>
 8015a4e:	781a      	ldrb	r2, [r3, #0]
 8015a50:	b122      	cbz	r2, 8015a5c <f_readdir+0x18>
 8015a52:	460e      	mov	r6, r1
 8015a54:	88da      	ldrh	r2, [r3, #6]
 8015a56:	8881      	ldrh	r1, [r0, #4]
 8015a58:	4291      	cmp	r1, r2
 8015a5a:	d002      	beq.n	8015a62 <f_readdir+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8015a5c:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8015a5e:	4628      	mov	r0, r5
 8015a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015a62:	7858      	ldrb	r0, [r3, #1]
 8015a64:	f7fc fc66 	bl	8012334 <disk_status>
 8015a68:	07c3      	lsls	r3, r0, #31
 8015a6a:	d4f7      	bmi.n	8015a5c <f_readdir+0x18>
		if (!fno) {
 8015a6c:	b1f6      	cbz	r6, 8015aac <f_readdir+0x68>
			INIT_NAMBUF(fs);
 8015a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015a72:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 8015a74:	f000 fab6 	bl	8015fe4 <ff_memalloc>
 8015a78:	4607      	mov	r7, r0
 8015a7a:	b1e8      	cbz	r0, 8015ab8 <f_readdir+0x74>
 8015a7c:	60e8      	str	r0, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8015a7e:	4620      	mov	r0, r4
 8015a80:	f7fc feb0 	bl	80127e4 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8015a84:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8015a88:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8015a8a:	d10a      	bne.n	8015aa2 <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015a8c:	4631      	mov	r1, r6
 8015a8e:	4620      	mov	r0, r4
 8015a90:	f7fc fc9a 	bl	80123c8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015a94:	4620      	mov	r0, r4
 8015a96:	f7fc fe61 	bl	801275c <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015a9a:	2804      	cmp	r0, #4
 8015a9c:	bf14      	ite	ne
 8015a9e:	4605      	movne	r5, r0
 8015aa0:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 8015aa2:	4638      	mov	r0, r7
 8015aa4:	f000 faa0 	bl	8015fe8 <ff_memfree>
}
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015aac:	4631      	mov	r1, r6
 8015aae:	4620      	mov	r0, r4
}
 8015ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015ab4:	f7fd bcaa 	b.w	801340c <dir_sdi>
			INIT_NAMBUF(fs);
 8015ab8:	2511      	movs	r5, #17
 8015aba:	e7d0      	b.n	8015a5e <f_readdir+0x1a>

08015abc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015abc:	b570      	push	{r4, r5, r6, lr}
 8015abe:	b090      	sub	sp, #64	; 0x40
 8015ac0:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8015ac2:	2200      	movs	r2, #0
{
 8015ac4:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 8015ac6:	a903      	add	r1, sp, #12
 8015ac8:	a801      	add	r0, sp, #4
 8015aca:	f7fd fa9b 	bl	8013004 <find_volume>
	if (res == FR_OK) {
 8015ace:	4604      	mov	r4, r0
 8015ad0:	b110      	cbz	r0, 8015ad8 <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	b010      	add	sp, #64	; 0x40
 8015ad6:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8015ad8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015adc:	f000 fa82 	bl	8015fe4 <ff_memalloc>
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	b1b0      	cbz	r0, 8015b12 <f_stat+0x56>
 8015ae4:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8015ae6:	a803      	add	r0, sp, #12
 8015ae8:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 8015aea:	60de      	str	r6, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8015aec:	f7fd ff0a 	bl	8013904 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8015af0:	4604      	mov	r4, r0
 8015af2:	b940      	cbnz	r0, 8015b06 <f_stat+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8015af4:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	db0c      	blt.n	8015b16 <f_stat+0x5a>
				if (fno) get_fileinfo(&dj, fno);
 8015afc:	b11d      	cbz	r5, 8015b06 <f_stat+0x4a>
 8015afe:	4629      	mov	r1, r5
 8015b00:	a803      	add	r0, sp, #12
 8015b02:	f7fc fc61 	bl	80123c8 <get_fileinfo>
		FREE_NAMBUF();
 8015b06:	4630      	mov	r0, r6
 8015b08:	f000 fa6e 	bl	8015fe8 <ff_memfree>
}
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	b010      	add	sp, #64	; 0x40
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8015b12:	2411      	movs	r4, #17
 8015b14:	e7dd      	b.n	8015ad2 <f_stat+0x16>
				res = FR_INVALID_NAME;
 8015b16:	2406      	movs	r4, #6
 8015b18:	e7f5      	b.n	8015b06 <f_stat+0x4a>
 8015b1a:	bf00      	nop

08015b1c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b20:	b097      	sub	sp, #92	; 0x5c
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015b22:	2202      	movs	r2, #2
{
 8015b24:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 8015b26:	a908      	add	r1, sp, #32
 8015b28:	a807      	add	r0, sp, #28
 8015b2a:	f7fd fa6b 	bl	8013004 <find_volume>
	dj.obj.fs = fs;
 8015b2e:	9b08      	ldr	r3, [sp, #32]
	if (res == FR_OK) {
 8015b30:	4606      	mov	r6, r0
	dj.obj.fs = fs;
 8015b32:	9309      	str	r3, [sp, #36]	; 0x24
	if (res == FR_OK) {
 8015b34:	b118      	cbz	r0, 8015b3e <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8015b36:	4630      	mov	r0, r6
 8015b38:	b017      	add	sp, #92	; 0x5c
 8015b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8015b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015b42:	f000 fa4f 	bl	8015fe4 <ff_memalloc>
 8015b46:	4604      	mov	r4, r0
 8015b48:	b190      	cbz	r0, 8015b70 <f_mkdir+0x54>
		res = follow_path(&dj, path);			/* Follow the file path */
 8015b4a:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
		INIT_NAMBUF(fs);
 8015b4e:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8015b50:	a809      	add	r0, sp, #36	; 0x24
 8015b52:	f7fd fed7 	bl	8013904 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015b56:	b148      	cbz	r0, 8015b6c <f_mkdir+0x50>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015b58:	2804      	cmp	r0, #4
 8015b5a:	d00b      	beq.n	8015b74 <f_mkdir+0x58>
 8015b5c:	4606      	mov	r6, r0
		FREE_NAMBUF();
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f000 fa42 	bl	8015fe8 <ff_memfree>
}
 8015b64:	4630      	mov	r0, r6
 8015b66:	b017      	add	sp, #92	; 0x5c
 8015b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015b6c:	2608      	movs	r6, #8
 8015b6e:	e7f6      	b.n	8015b5e <f_mkdir+0x42>
		INIT_NAMBUF(fs);
 8015b70:	2611      	movs	r6, #17
 8015b72:	e7e0      	b.n	8015b36 <f_mkdir+0x1a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015b74:	4631      	mov	r1, r6
 8015b76:	a809      	add	r0, sp, #36	; 0x24
 8015b78:	f7fd f916 	bl	8012da8 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015b7c:	9d08      	ldr	r5, [sp, #32]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015b7e:	4680      	mov	r8, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015b80:	896b      	ldrh	r3, [r5, #10]
 8015b82:	025b      	lsls	r3, r3, #9
 8015b84:	930c      	str	r3, [sp, #48]	; 0x30
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015b86:	2800      	cmp	r0, #0
 8015b88:	f000 810e 	beq.w	8015da8 <f_mkdir+0x28c>
			if (dcl == 1) res = FR_INT_ERR;
 8015b8c:	2801      	cmp	r0, #1
 8015b8e:	f000 810f 	beq.w	8015db0 <f_mkdir+0x294>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015b92:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015b96:	f000 8117 	beq.w	8015dc8 <f_mkdir+0x2ac>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015b9a:	78eb      	ldrb	r3, [r5, #3]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f040 8115 	bne.w	8015dcc <f_mkdir+0x2b0>
			tm = GET_FATTIME();
 8015ba2:	f7fc fc0f 	bl	80123c4 <get_fattime>
				dsc = clust2sect(fs, dcl);
 8015ba6:	f8dd 9020 	ldr.w	r9, [sp, #32]
	clst -= 2;
 8015baa:	f1a8 0202 	sub.w	r2, r8, #2
			tm = GET_FATTIME();
 8015bae:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015bb0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8015bb4:	3b02      	subs	r3, #2
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	f080 8103 	bcs.w	8015dc2 <f_mkdir+0x2a6>
	return clst * fs->csize + fs->database;
 8015bbc:	f8b9 700a 	ldrh.w	r7, [r9, #10]
 8015bc0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8015bc4:	fb02 3307 	mla	r3, r2, r7, r3
 8015bc8:	469b      	mov	fp, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8015bca:	b2eb      	uxtb	r3, r5
				dir = fs->win;
 8015bcc:	f109 0a34 	add.w	sl, r9, #52	; 0x34
				mem_set(dir, 0, SS(fs));
 8015bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015bd4:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8015bd6:	9302      	str	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8015bd8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8015bdc:	4650      	mov	r0, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8015bde:	fa5f f788 	uxtb.w	r7, r8
	*ptr++ = (BYTE)val; val >>= 8;
 8015be2:	9303      	str	r3, [sp, #12]
 8015be4:	f00c fb12 	bl	802220c <memset>
 8015be8:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
					dir[DIR_Attr] = AM_DIR;
 8015bec:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015bee:	9701      	str	r7, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015bf0:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8015bf4:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
	*ptr++ = (BYTE)val;
 8015bf8:	0e2d      	lsrs	r5, r5, #24
 8015bfa:	f8ca 3004 	str.w	r3, [sl, #4]
	*ptr++ = (BYTE)val;
 8015bfe:	f3c8 2707 	ubfx	r7, r8, #8, #8
 8015c02:	f8ca 3007 	str.w	r3, [sl, #7]
					dir[DIR_Name] = '.';
 8015c06:	212e      	movs	r1, #46	; 0x2e
					dir[DIR_Attr] = AM_DIR;
 8015c08:	f889 203f 	strb.w	r2, [r9, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8015c0c:	9a02      	ldr	r2, [sp, #8]
	if (fs->fs_type == FS_FAT32) {
 8015c0e:	f899 3000 	ldrb.w	r3, [r9]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c12:	f889 204a 	strb.w	r2, [r9, #74]	; 0x4a
	*ptr++ = (BYTE)val; val >>= 8;
 8015c16:	9a03      	ldr	r2, [sp, #12]
	if (fs->fs_type == FS_FAT32) {
 8015c18:	2b03      	cmp	r3, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8015c1a:	9005      	str	r0, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c1c:	f889 204b 	strb.w	r2, [r9, #75]	; 0x4b
	*ptr++ = (BYTE)val; val >>= 8;
 8015c20:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val;
 8015c22:	9506      	str	r5, [sp, #24]
	*ptr++ = (BYTE)val;
 8015c24:	9704      	str	r7, [sp, #16]
					dir[DIR_Name] = '.';
 8015c26:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8015c2a:	f889 004c 	strb.w	r0, [r9, #76]	; 0x4c
	*ptr++ = (BYTE)val;
 8015c2e:	f889 504d 	strb.w	r5, [r9, #77]	; 0x4d
	*ptr++ = (BYTE)val; val >>= 8;
 8015c32:	f889 204e 	strb.w	r2, [r9, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 8015c36:	f889 704f 	strb.w	r7, [r9, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 8015c3a:	d106      	bne.n	8015c4a <f_mkdir+0x12e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015c3c:	ea4f 4318 	mov.w	r3, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015c40:	0a1a      	lsrs	r2, r3, #8
 8015c42:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
	*ptr++ = (BYTE)val;
 8015c46:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015c4a:	f109 0358 	add.w	r3, r9, #88	; 0x58
 8015c4e:	459a      	cmp	sl, r3
 8015c50:	d206      	bcs.n	8015c60 <f_mkdir+0x144>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015c52:	f109 0154 	add.w	r1, r9, #84	; 0x54
 8015c56:	f109 0338 	add.w	r3, r9, #56	; 0x38
 8015c5a:	4299      	cmp	r1, r3
 8015c5c:	f0c0 80c4 	bcc.w	8015de8 <f_mkdir+0x2cc>
			*d++ = *s++;
 8015c60:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8015c64:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8015c68:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
 8015c6c:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
 8015c70:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 8015c74:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8015c78:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 8015c7c:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
 8015c80:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8015c84:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8015c88:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 8015c8c:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
 8015c90:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
 8015c94:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8015c98:	f8c9 206c 	str.w	r2, [r9, #108]	; 0x6c
 8015c9c:	f8c9 3070 	str.w	r3, [r9, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015ca0:	222e      	movs	r2, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015ca2:	9d08      	ldr	r5, [sp, #32]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ca6:	f889 2055 	strb.w	r2, [r9, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015caa:	782a      	ldrb	r2, [r5, #0]
 8015cac:	2a03      	cmp	r2, #3
 8015cae:	f000 8081 	beq.w	8015db4 <f_mkdir+0x298>
 8015cb2:	b2de      	uxtb	r6, r3
 8015cb4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8015cb8:	f889 606e 	strb.w	r6, [r9, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 8015cbc:	f889 206f 	strb.w	r2, [r9, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 8015cc0:	782a      	ldrb	r2, [r5, #0]
 8015cc2:	2a03      	cmp	r2, #3
 8015cc4:	d105      	bne.n	8015cd2 <f_mkdir+0x1b6>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015cc6:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015cc8:	0a1a      	lsrs	r2, r3, #8
 8015cca:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
	*ptr++ = (BYTE)val;
 8015cce:	f889 2069 	strb.w	r2, [r9, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015cd2:	896b      	ldrh	r3, [r5, #10]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d03b      	beq.n	8015d50 <f_mkdir+0x234>
 8015cd8:	3b01      	subs	r3, #1
 8015cda:	465f      	mov	r7, fp
 8015cdc:	9400      	str	r4, [sp, #0]
 8015cde:	445b      	add	r3, fp
 8015ce0:	469b      	mov	fp, r3
					fs->wflag = 1;
 8015ce2:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015ce6:	f105 0434 	add.w	r4, r5, #52	; 0x34
 8015cea:	463a      	mov	r2, r7
 8015cec:	7868      	ldrb	r0, [r5, #1]
					fs->wflag = 1;
 8015cee:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015cf0:	4621      	mov	r1, r4
 8015cf2:	2301      	movs	r3, #1
					fs->winsect = dsc++;
 8015cf4:	632f      	str	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015cf6:	f7fc fb49 	bl	801238c <disk_write>
 8015cfa:	bb00      	cbnz	r0, 8015d3e <f_mkdir+0x222>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015cfc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015cfe:	69eb      	ldr	r3, [r5, #28]
 8015d00:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8015d02:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d20f      	bcs.n	8015d28 <f_mkdir+0x20c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015d08:	78ae      	ldrb	r6, [r5, #2]
 8015d0a:	2e01      	cmp	r6, #1
 8015d0c:	d90c      	bls.n	8015d28 <f_mkdir+0x20c>
 8015d0e:	46b9      	mov	r9, r7
 8015d10:	e000      	b.n	8015d14 <f_mkdir+0x1f8>
 8015d12:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8015d14:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015d16:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015d18:	2301      	movs	r3, #1
 8015d1a:	4621      	mov	r1, r4
 8015d1c:	464a      	mov	r2, r9
 8015d1e:	7868      	ldrb	r0, [r5, #1]
 8015d20:	f7fc fb34 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015d24:	2e01      	cmp	r6, #1
 8015d26:	d1f4      	bne.n	8015d12 <f_mkdir+0x1f6>
 8015d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d2c:	2100      	movs	r1, #0
 8015d2e:	4650      	mov	r0, sl
 8015d30:	f00c fa6c 	bl	802220c <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015d34:	45bb      	cmp	fp, r7
 8015d36:	d00a      	beq.n	8015d4e <f_mkdir+0x232>
 8015d38:	3701      	adds	r7, #1
 8015d3a:	9d08      	ldr	r5, [sp, #32]
 8015d3c:	e7d1      	b.n	8015ce2 <f_mkdir+0x1c6>
 8015d3e:	9c00      	ldr	r4, [sp, #0]
			res = FR_DISK_ERR;
 8015d40:	2601      	movs	r6, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015d42:	4641      	mov	r1, r8
 8015d44:	a809      	add	r0, sp, #36	; 0x24
 8015d46:	2200      	movs	r2, #0
 8015d48:	f7fd ff78 	bl	8013c3c <remove_chain>
 8015d4c:	e707      	b.n	8015b5e <f_mkdir+0x42>
 8015d4e:	9c00      	ldr	r4, [sp, #0]
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015d50:	a809      	add	r0, sp, #36	; 0x24
 8015d52:	f7fe f81b 	bl	8013d8c <dir_register>
			if (res == FR_OK) {
 8015d56:	4606      	mov	r6, r0
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d1f2      	bne.n	8015d42 <f_mkdir+0x226>
	*ptr++ = (BYTE)val; val >>= 8;
 8015d5c:	9a02      	ldr	r2, [sp, #8]
					dir = dj.dir;
 8015d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 8015d60:	f362 0607 	bfi	r6, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8015d64:	9a01      	ldr	r2, [sp, #4]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015d66:	9808      	ldr	r0, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d68:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d6a:	9a03      	ldr	r2, [sp, #12]
 8015d6c:	f362 260f 	bfi	r6, r2, #8, #8
	*ptr++ = (BYTE)val;
 8015d70:	9a04      	ldr	r2, [sp, #16]
 8015d72:	76da      	strb	r2, [r3, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d74:	9a05      	ldr	r2, [sp, #20]
 8015d76:	f362 4617 	bfi	r6, r2, #16, #8
 8015d7a:	9a06      	ldr	r2, [sp, #24]
 8015d7c:	f362 661f 	bfi	r6, r2, #24, #8
 8015d80:	f8c3 6016 	str.w	r6, [r3, #22]
	if (fs->fs_type == FS_FAT32) {
 8015d84:	7802      	ldrb	r2, [r0, #0]
 8015d86:	2a03      	cmp	r2, #3
 8015d88:	d106      	bne.n	8015d98 <f_mkdir+0x27c>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015d8a:	ea4f 4818 	mov.w	r8, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015d8e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8015d92:	f883 8014 	strb.w	r8, [r3, #20]
	*ptr++ = (BYTE)val;
 8015d96:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015d98:	2110      	movs	r1, #16
					fs->wflag = 1;
 8015d9a:	2201      	movs	r2, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015d9c:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 8015d9e:	70c2      	strb	r2, [r0, #3]
					res = sync_fs(fs);
 8015da0:	f7fc ff90 	bl	8012cc4 <sync_fs>
 8015da4:	4606      	mov	r6, r0
 8015da6:	e6da      	b.n	8015b5e <f_mkdir+0x42>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015da8:	2607      	movs	r6, #7
			tm = GET_FATTIME();
 8015daa:	f7fc fb0b 	bl	80123c4 <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015dae:	e7c8      	b.n	8015d42 <f_mkdir+0x226>
			if (dcl == 1) res = FR_INT_ERR;
 8015db0:	2602      	movs	r6, #2
 8015db2:	e7fa      	b.n	8015daa <f_mkdir+0x28e>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015db4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015db6:	429a      	cmp	r2, r3
 8015db8:	f47f af7b 	bne.w	8015cb2 <f_mkdir+0x196>
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	e77a      	b.n	8015cb8 <f_mkdir+0x19c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	469b      	mov	fp, r3
 8015dc6:	e700      	b.n	8015bca <f_mkdir+0xae>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015dc8:	2601      	movs	r6, #1
 8015dca:	e7ee      	b.n	8015daa <f_mkdir+0x28e>
		wsect = fs->winsect;	/* Current sector number */
 8015dcc:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015dce:	f105 0a34 	add.w	sl, r5, #52	; 0x34
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	7868      	ldrb	r0, [r5, #1]
 8015dd6:	463a      	mov	r2, r7
 8015dd8:	4651      	mov	r1, sl
 8015dda:	f7fc fad7 	bl	801238c <disk_write>
 8015dde:	b160      	cbz	r0, 8015dfa <f_mkdir+0x2de>
			res = FR_DISK_ERR;
 8015de0:	2601      	movs	r6, #1
			tm = GET_FATTIME();
 8015de2:	f7fc faef 	bl	80123c4 <get_fattime>
			if (res == FR_OK) {
 8015de6:	e7ac      	b.n	8015d42 <f_mkdir+0x226>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015de8:	4653      	mov	r3, sl
 8015dea:	465f      	mov	r7, fp
			*d++ = *s++;
 8015dec:	f813 2b01 	ldrb.w	r2, [r3], #1
		} while (--cnt);
 8015df0:	4299      	cmp	r1, r3
			*d++ = *s++;
 8015df2:	77da      	strb	r2, [r3, #31]
		} while (--cnt);
 8015df4:	d1fa      	bne.n	8015dec <f_mkdir+0x2d0>
 8015df6:	46bb      	mov	fp, r7
 8015df8:	e752      	b.n	8015ca0 <f_mkdir+0x184>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015dfa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015dfc:	69eb      	ldr	r3, [r5, #28]
 8015dfe:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8015e00:	70ee      	strb	r6, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015e02:	429a      	cmp	r2, r3
 8015e04:	f4bf aecd 	bcs.w	8015ba2 <f_mkdir+0x86>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e08:	f895 9002 	ldrb.w	r9, [r5, #2]
 8015e0c:	f1b9 0f01 	cmp.w	r9, #1
 8015e10:	d801      	bhi.n	8015e16 <f_mkdir+0x2fa>
 8015e12:	e6c6      	b.n	8015ba2 <f_mkdir+0x86>
 8015e14:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8015e16:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e18:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	4651      	mov	r1, sl
 8015e20:	463a      	mov	r2, r7
 8015e22:	7868      	ldrb	r0, [r5, #1]
 8015e24:	f7fc fab2 	bl	801238c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e28:	f1b9 0f01 	cmp.w	r9, #1
 8015e2c:	d1f2      	bne.n	8015e14 <f_mkdir+0x2f8>
 8015e2e:	e6b8      	b.n	8015ba2 <f_mkdir+0x86>

08015e30 <f_putc>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015e30:	b171      	cbz	r1, 8015e50 <f_putc+0x20>
 8015e32:	680b      	ldr	r3, [r1, #0]

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 8015e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e38:	460c      	mov	r4, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015e3a:	b12b      	cbz	r3, 8015e48 <f_putc+0x18>
 8015e3c:	781a      	ldrb	r2, [r3, #0]
 8015e3e:	b11a      	cbz	r2, 8015e48 <f_putc+0x18>
 8015e40:	8889      	ldrh	r1, [r1, #4]
 8015e42:	88da      	ldrh	r2, [r3, #6]
 8015e44:	4291      	cmp	r1, r2
 8015e46:	d006      	beq.n	8015e56 <f_putc+0x26>
	return EOF;
 8015e48:	f04f 30ff 	mov.w	r0, #4294967295


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
	return putc_flush(&pb);
}
 8015e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return EOF;
 8015e50:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015e54:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015e56:	4605      	mov	r5, r0
 8015e58:	7858      	ldrb	r0, [r3, #1]
 8015e5a:	f7fc fa6b 	bl	8012334 <disk_status>
 8015e5e:	07c2      	lsls	r2, r0, #31
 8015e60:	d4f2      	bmi.n	8015e48 <f_putc+0x18>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015e62:	7d63      	ldrb	r3, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015e64:	6826      	ldr	r6, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1ee      	bne.n	8015e48 <f_putc+0x18>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015e6a:	7d20      	ldrb	r0, [r4, #20]
 8015e6c:	0783      	lsls	r3, r0, #30
 8015e6e:	d5eb      	bpl.n	8015e48 <f_putc+0x18>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015e70:	69a1      	ldr	r1, [r4, #24]
 8015e72:	1c4f      	adds	r7, r1, #1
 8015e74:	d044      	beq.n	8015f00 <f_putc+0xd0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015e76:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d17b      	bne.n	8015f76 <f_putc+0x146>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015e7e:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8015e82:	0a4b      	lsrs	r3, r1, #9
 8015e84:	f10c 37ff 	add.w	r7, ip, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8015e88:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8015e8c:	d10d      	bne.n	8015eaa <f_putc+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015e8e:	2900      	cmp	r1, #0
 8015e90:	d140      	bne.n	8015f14 <f_putc+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015e92:	68a3      	ldr	r3, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d067      	beq.n	8015f68 <f_putc+0x138>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d035      	beq.n	8015f08 <f_putc+0xd8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015e9c:	1c5a      	adds	r2, r3, #1
 8015e9e:	d075      	beq.n	8015f8c <f_putc+0x15c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015ea0:	68a2      	ldr	r2, [r4, #8]
 8015ea2:	7d20      	ldrb	r0, [r4, #20]
				fp->clust = clst;			/* Update current cluster */
 8015ea4:	61e3      	str	r3, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015ea6:	b902      	cbnz	r2, 8015eaa <f_putc+0x7a>
 8015ea8:	60a3      	str	r3, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015eaa:	0603      	lsls	r3, r0, #24
 8015eac:	d44a      	bmi.n	8015f44 <f_putc+0x114>
	clst -= 2;
 8015eae:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015eb0:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 8015eb2:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015eb4:	3b02      	subs	r3, #2
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d226      	bcs.n	8015f08 <f_putc+0xd8>
	return clst * fs->csize + fs->database;
 8015eba:	8973      	ldrh	r3, [r6, #10]
 8015ebc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8015ebe:	fb02 1203 	mla	r2, r2, r3, r1
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015ec2:	b30a      	cbz	r2, 8015f08 <f_putc+0xd8>
			sect += csect;
 8015ec4:	4417      	add	r7, r2
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015ec6:	6a23      	ldr	r3, [r4, #32]
 8015ec8:	429f      	cmp	r7, r3
 8015eca:	d048      	beq.n	8015f5e <f_putc+0x12e>
				fp->fptr < fp->obj.objsize &&
 8015ecc:	69a3      	ldr	r3, [r4, #24]
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015ece:	f104 0830 	add.w	r8, r4, #48	; 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015ed2:	68e2      	ldr	r2, [r4, #12]
 8015ed4:	4293      	cmp	r3, r2
 8015ed6:	d351      	bcc.n	8015f7c <f_putc+0x14c>
			fp->sect = sect;
 8015ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015edc:	6227      	str	r7, [r4, #32]
			*d++ = *s++;
 8015ede:	f808 5003 	strb.w	r5, [r8, r3]
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015ee2:	2001      	movs	r0, #1
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015ee4:	69a3      	ldr	r3, [r4, #24]
 8015ee6:	68e1      	ldr	r1, [r4, #12]
 8015ee8:	4403      	add	r3, r0
		fp->flag |= FA_DIRTY;
 8015eea:	7d22      	ldrb	r2, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015eec:	4299      	cmp	r1, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015eee:	f062 023f 	orn	r2, r2, #63	; 0x3f
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015ef2:	61a3      	str	r3, [r4, #24]
 8015ef4:	bf38      	it	cc
 8015ef6:	4619      	movcc	r1, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015ef8:	7522      	strb	r2, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015efa:	60e1      	str	r1, [r4, #12]
}
 8015efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015f00:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8015f04:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8015f06:	e79f      	b.n	8015e48 <f_putc+0x18>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015f08:	2302      	movs	r3, #2
	return EOF;
 8015f0a:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015f0e:	7563      	strb	r3, [r4, #21]
}
 8015f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (fp->cltbl) {
 8015f14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015f16:	b331      	cbz	r1, 8015f66 <f_putc+0x136>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015f18:	684a      	ldr	r2, [r1, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015f1a:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015f1c:	fbb3 f3fc 	udiv	r3, r3, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015f20:	b92a      	cbnz	r2, 8015f2e <f_putc+0xfe>
 8015f22:	e7ed      	b.n	8015f00 <f_putc+0xd0>
		cl -= ncl; tbl++;		/* Next fragment */
 8015f24:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015f26:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015f2a:	2a00      	cmp	r2, #0
 8015f2c:	d0e8      	beq.n	8015f00 <f_putc+0xd0>
		if (cl < ncl) break;	/* In this fragment? */
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d9f8      	bls.n	8015f24 <f_putc+0xf4>
	return cl + *tbl;	/* Return the cluster number */
 8015f32:	6848      	ldr	r0, [r1, #4]
 8015f34:	4403      	add	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d1ae      	bne.n	8015e98 <f_putc+0x68>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015f3a:	7d23      	ldrb	r3, [r4, #20]
 8015f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f40:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8015f42:	e781      	b.n	8015e48 <f_putc+0x18>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015f44:	2301      	movs	r3, #1
 8015f46:	6a22      	ldr	r2, [r4, #32]
 8015f48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015f4c:	7870      	ldrb	r0, [r6, #1]
 8015f4e:	f7fc fa1d 	bl	801238c <disk_write>
 8015f52:	b9d8      	cbnz	r0, 8015f8c <f_putc+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015f54:	7d23      	ldrb	r3, [r4, #20]
 8015f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f5a:	7523      	strb	r3, [r4, #20]
 8015f5c:	e7a7      	b.n	8015eae <f_putc+0x7e>
 8015f5e:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8015f62:	69a3      	ldr	r3, [r4, #24]
 8015f64:	e7b8      	b.n	8015ed8 <f_putc+0xa8>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015f66:	69e1      	ldr	r1, [r4, #28]
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f7fc ff1d 	bl	8012da8 <create_chain>
 8015f6e:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d191      	bne.n	8015e98 <f_putc+0x68>
 8015f74:	e7e1      	b.n	8015f3a <f_putc+0x10a>
 8015f76:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8015f7a:	e7b0      	b.n	8015ede <f_putc+0xae>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015f7c:	7870      	ldrb	r0, [r6, #1]
 8015f7e:	2301      	movs	r3, #1
 8015f80:	463a      	mov	r2, r7
 8015f82:	4641      	mov	r1, r8
 8015f84:	f7fc f9f4 	bl	8012370 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	d0ea      	beq.n	8015f62 <f_putc+0x132>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015f8c:	2301      	movs	r3, #1
	return EOF;
 8015f8e:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015f92:	7563      	strb	r3, [r4, #21]
 8015f94:	e75a      	b.n	8015e4c <f_putc+0x1c>
 8015f96:	bf00      	nop

08015f98 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8015f98:	4b11      	ldr	r3, [pc, #68]	; (8015fe0 <FATFS_LinkDriver+0x48>)
 8015f9a:	7b9a      	ldrb	r2, [r3, #14]
 8015f9c:	2a01      	cmp	r2, #1
 8015f9e:	d901      	bls.n	8015fa4 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8015fa0:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8015fa2:	4770      	bx	lr
{
 8015fa4:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 8015fa6:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8015faa:	2200      	movs	r2, #0
    disk.drv[disk.nbr] = drv;
 8015fac:	7b9e      	ldrb	r6, [r3, #14]
    path[1] = ':';
 8015fae:	273a      	movs	r7, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8015fb0:	7b9d      	ldrb	r5, [r3, #14]
    disk.is_initialized[disk.nbr] = 0;
 8015fb2:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 8015fb6:	7b9c      	ldrb	r4, [r3, #14]
    disk.drv[disk.nbr] = drv;
 8015fb8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8015fbc:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8015fbe:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8015fc2:	6070      	str	r0, [r6, #4]
    DiskNum = disk.nbr++;
 8015fc4:	1c60      	adds	r0, r4, #1
    disk.lun[disk.nbr] = lun;
 8015fc6:	732a      	strb	r2, [r5, #12]
    path[0] = DiskNum + '0';
 8015fc8:	3430      	adds	r4, #48	; 0x30
    DiskNum = disk.nbr++;
 8015fca:	b2c0      	uxtb	r0, r0
    path[2] = '/';
 8015fcc:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 8015fce:	7398      	strb	r0, [r3, #14]
    path[3] = 0;
 8015fd0:	4610      	mov	r0, r2
    path[0] = DiskNum + '0';
 8015fd2:	700c      	strb	r4, [r1, #0]
    path[1] = ':';
 8015fd4:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 8015fd6:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 8015fd8:	70ca      	strb	r2, [r1, #3]
}
 8015fda:	bcf0      	pop	{r4, r5, r6, r7}
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop
 8015fe0:	3000821c 	.word	0x3000821c

08015fe4 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8015fe4:	f00c b8da 	b.w	802219c <malloc>

08015fe8 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8015fe8:	f00c b8e0 	b.w	80221ac <free>

08015fec <Init_DataMemoryLayout>:
/**
* @brief Initializes the application data memory layout
* @param  Pointer to Application context
*/
void Init_DataMemoryLayout(AppContext_TypeDef *App_Context_Ptr)
{
 8015fec:	b4f0      	push	{r4, r5, r6, r7}
  AIContext->nn_input_buffer = NULL;
  #else
  AIContext->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 8015fee:	f646 118c 	movw	r1, #27020	; 0x698c
 8015ff2:	4d0a      	ldr	r5, [pc, #40]	; (801601c <Init_DataMemoryLayout+0x30>)
  AIContext->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #else /* MEMORY_SCHEME == FULL_EXTERNAL */
  /* Bottom camera_frame_buff buffer and resize_output_buff buffer */
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8015ff4:	f646 1390 	movw	r3, #27024	; 0x6990
  PeopleContext_TypeDef *AIContext = App_Context_Ptr->People_ContextPtr;
 8015ff8:	f646 12a0 	movw	r2, #27040	; 0x69a0
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 8015ffc:	5844      	ldr	r4, [r0, r1]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
  AIContext->activation_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  AIContext->nn_input_buffer = NULL;
 8015ffe:	2600      	movs	r6, #0
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8016000:	58c1      	ldr	r1, [r0, r3]
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8016002:	f505 3316 	add.w	r3, r5, #153600	; 0x25800
  PeopleContext_TypeDef *AIContext = App_Context_Ptr->People_ContextPtr;
 8016006:	5882      	ldr	r2, [r0, r2]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 8016008:	4f05      	ldr	r7, [pc, #20]	; (8016020 <Init_DataMemoryLayout+0x34>)
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801600a:	e9c4 5300 	strd	r5, r3, [r4]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 801600e:	648f      	str	r7, [r1, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8016010:	628b      	str	r3, [r1, #40]	; 0x28
  AIContext->nn_input_buffer = NULL;
 8016012:	e9c2 6301 	strd	r6, r3, [r2, #4]
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #endif /* MEMORY_SCHEME == SPLIT_INT_EXT */
#else
  #error "Please check definition of MEMORY_SCHEME define"
#endif /* MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT */
}
 8016016:	bcf0      	pop	{r4, r5, r6, r7}
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop
 801601c:	24001d40 	.word	0x24001d40
 8016020:	24030b40 	.word	0x24030b40

08016024 <Run_Preprocessing>:
* @brief  Run preprocessing stages on captured frame
* @param  App context ptr
* @retval None
*/
void Run_Preprocessing(AppContext_TypeDef *App_Context_Ptr)
{
 8016024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8016028:	f646 128c 	movw	r2, #27020	; 0x698c
{
 801602c:	4605      	mov	r5, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 801602e:	f646 1a9c 	movw	sl, #27036	; 0x699c
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 8016032:	f646 1990 	movw	r9, #27024	; 0x6990
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8016036:	5880      	ldr	r0, [r0, r2]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8016038:	f44f 3116 	mov.w	r1, #153600	; 0x25800
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 801603c:	f855 400a 	ldr.w	r4, [r5, sl]
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
  TestRunCtxt_Ptr->rb_swap=0;
 8016040:	f04f 0800 	mov.w	r8, #0
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 8016044:	f855 6009 	ldr.w	r6, [r5, r9]
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8016048:	27f0      	movs	r7, #240	; 0xf0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801604a:	f8d0 c004 	ldr.w	ip, [r0, #4]
  TestRunCtxt_Ptr->PerformCapture=1;
 801604e:	f04f 0a01 	mov.w	sl, #1
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8016052:	f44f 73a0 	mov.w	r3, #320	; 0x140
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8016056:	4a70      	ldr	r2, [pc, #448]	; (8016218 <Run_Preprocessing+0x1f4>)
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8016058:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 801605c:	2102      	movs	r1, #2
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
  
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801605e:	f646 1b98 	movw	fp, #27032	; 0x6998
{
 8016062:	b085      	sub	sp, #20
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8016064:	f8c4 c4f8 	str.w	ip, [r4, #1272]	; 0x4f8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8016068:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801606a:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 801606e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8016072:	f8c4 7504 	str.w	r7, [r4, #1284]	; 0x504
  TestRunCtxt_Ptr->PerformCapture=1;
 8016076:	f8c4 a510 	str.w	sl, [r4, #1296]	; 0x510
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 801607a:	f884 a514 	strb.w	sl, [r4, #1300]	; 0x514
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 801607e:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
  TestRunCtxt_Ptr->rb_swap=0;
 8016082:	f8c4 8518 	str.w	r8, [r4, #1304]	; 0x518
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8016086:	7829      	ldrb	r1, [r5, #0]
 8016088:	f7ed f900 	bl	800328c <TEST_Run>
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801608c:	f855 000b 	ldr.w	r0, [r5, fp]
 8016090:	f7ed fe34 	bl	8003cfc <UTILS_GetTimeStamp>
  
  /**********************/
  /****Image resizing****/
  /**********************/
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8016094:	f646 128c 	movw	r2, #27020	; 0x698c
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8016098:	f855 c009 	ldr.w	ip, [r5, r9]
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
 801609c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 80160a0:	58aa      	ldr	r2, [r5, r2]
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80160a2:	9001      	str	r0, [sp, #4]
  PreprocCtxt_Ptr->Resize_Dst_Img.w=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 80160a4:	4660      	mov	r0, ip
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 80160a6:	6851      	ldr	r1, [r2, #4]
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80160a8:	f8dc 2048 	ldr.w	r2, [ip, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 80160ac:	63b1      	str	r1, [r6, #56]	; 0x38
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
 80160ae:	2102      	movs	r1, #2
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80160b0:	64b2      	str	r2, [r6, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
 80160b2:	6371      	str	r1, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
 80160b4:	6471      	str	r1, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
 80160b6:	e9c6 370b 	strd	r3, r7, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
 80160ba:	e9c6 770f 	strd	r7, r7, [r6, #60]	; 0x3c
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 80160be:	f7eb f9c7 	bl	8001450 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80160c2:	f855 000b 	ldr.w	r0, [r5, fp]
 80160c6:	f7ed fe19 	bl	8003cfc <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 80160ca:	f855 3009 	ldr.w	r3, [r5, r9]
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80160ce:	9002      	str	r0, [sp, #8]
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 80160d0:	2202      	movs	r2, #2
 80160d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80160d4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80160d8:	f7ed fece 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 80160dc:	f855 2009 	ldr.w	r2, [r5, r9]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 80160e0:	4b4d      	ldr	r3, [pc, #308]	; (8016218 <Run_Preprocessing+0x1f4>)
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80160e2:	f646 1c9c 	movw	ip, #27036	; 0x699c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 80160e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 80160e8:	f103 0120 	add.w	r1, r3, #32
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 80160ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 80160f0:	f8c4 24f8 	str.w	r2, [r4, #1272]	; 0x4f8
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 80160f4:	2202      	movs	r2, #2
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 80160f6:	f884 a514 	strb.w	sl, [r4, #1300]	; 0x514
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 80160fa:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80160fe:	f855 000c 	ldr.w	r0, [r5, ip]
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 8016102:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8016106:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 801610a:	f8c4 7504 	str.w	r7, [r4, #1284]	; 0x504
  TestRunCtxt_Ptr->PerformCapture=0;
 801610e:	f8c4 8510 	str.w	r8, [r4, #1296]	; 0x510
  TestRunCtxt_Ptr->rb_swap=0;
 8016112:	f8c4 8518 	str.w	r8, [r4, #1304]	; 0x518
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8016116:	f8c4 14fc 	str.w	r1, [r4, #1276]	; 0x4fc
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801611a:	7829      	ldrb	r1, [r5, #0]
 801611c:	f7ed f8b6 	bl	800328c <TEST_Run>
  
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8016120:	f855 000b 	ldr.w	r0, [r5, fp]
 8016124:	f7ed fdea 	bl	8003cfc <UTILS_GetTimeStamp>
  
  /*************************************/
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8016128:	f855 2009 	ldr.w	r2, [r5, r9]
  PreprocCtxt_Ptr->Pfc_Src_Img.w=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->Pfc_Src_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Pfc_Src_Img.bpp=IMAGE_BPP_RGB565;
 801612c:	2102      	movs	r1, #2
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801612e:	9003      	str	r0, [sp, #12]
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8016130:	6c93      	ldr	r3, [r2, #72]	; 0x48
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->red_blue_swap=1;
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 8016132:	4610      	mov	r0, r2
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 8016134:	6a92      	ldr	r2, [r2, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8016136:	61b3      	str	r3, [r6, #24]
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 8016138:	62b2      	str	r2, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Src_Img.bpp=IMAGE_BPP_RGB565;
 801613a:	6171      	str	r1, [r6, #20]
  PreprocCtxt_Ptr->Pfc_Src_Img.h=AI_NETWORK_HEIGHT;
 801613c:	6137      	str	r7, [r6, #16]
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
 801613e:	e9c6 8700 	strd	r8, r7, [r6]
  PreprocCtxt_Ptr->Pfc_Src_Img.w=AI_NETWORK_WIDTH;
 8016142:	e9c6 a702 	strd	sl, r7, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
 8016146:	e9c6 7707 	strd	r7, r7, [r6, #28]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 801614a:	f7eb f995 	bl	8001478 <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801614e:	f855 000b 	ldr.w	r0, [r5, fp]
 8016152:	f7ed fdd3 	bl	8003cfc <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8016156:	f855 3009 	ldr.w	r3, [r5, r9]
 801615a:	4652      	mov	r2, sl
 801615c:	492f      	ldr	r1, [pc, #188]	; (801621c <Run_Preprocessing+0x1f8>)
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801615e:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8016160:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8016162:	f7ed fe89 	bl	8003e78 <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8016166:	f855 0009 	ldr.w	r0, [r5, r9]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801616a:	4b2b      	ldr	r3, [pc, #172]	; (8016218 <Run_Preprocessing+0x1f4>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801616c:	492b      	ldr	r1, [pc, #172]	; (801621c <Run_Preprocessing+0x1f8>)
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801616e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8016172:	e9d0 0309 	ldrd	r0, r3, [r0, #36]	; 0x24
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8016176:	f884 a514 	strb.w	sl, [r4, #1300]	; 0x514
  TestRunCtxt_Ptr->rb_swap=1;
 801617a:	f8c4 a518 	str.w	sl, [r4, #1304]	; 0x518
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801617e:	f646 1a9c 	movw	sl, #27036	; 0x699c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8016182:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8016186:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 801618a:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 801618e:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8016192:	f8c4 7504 	str.w	r7, [r4, #1284]	; 0x504
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8016196:	f855 000a 	ldr.w	r0, [r5, sl]
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801619a:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
  TestRunCtxt_Ptr->PerformCapture=0;
 801619e:	f8c4 8510 	str.w	r8, [r4, #1296]	; 0x510
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80161a2:	7829      	ldrb	r1, [r5, #0]
 80161a4:	f7ed f872 	bl	800328c <TEST_Run>

  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80161a8:	f855 000b 	ldr.w	r0, [r5, fp]
 80161ac:	f7ed fda6 	bl	8003cfc <UTILS_GetTimeStamp>
  /***********************************************************/
  /*********Pixel value convertion and normalisation**********/
  /***********************************************************/
#ifdef OBJECTDETECT
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
 80161b0:	f855 1009 	ldr.w	r1, [r5, r9]
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
 80161b4:	f646 12a0 	movw	r2, #27040	; 0x69a0
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80161b8:	4681      	mov	r9, r0
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
 80161ba:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80161bc:	58a8      	ldr	r0, [r5, r2]
 80161be:	f002 fc27 	bl	8018a10 <AI_PixelValueConversion>
#else
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
#endif /* OBJECTDETECT */

  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80161c2:	f855 000b 	ldr.w	r0, [r5, fp]
 80161c6:	f7ed fd99 	bl	8003cfc <UTILS_GetTimeStamp>
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
  TestRunCtxt_Ptr->src_buff_name="";
 80161ca:	4a15      	ldr	r2, [pc, #84]	; (8016220 <Run_Preprocessing+0x1fc>)
  TestRunCtxt_Ptr->src_width_size=0;
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=0;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 80161cc:	f884 8514 	strb.w	r8, [r4, #1300]	; 0x514
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80161d0:	4607      	mov	r7, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 80161d2:	f8c4 84f8 	str.w	r8, [r4, #1272]	; 0x4f8
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80161d6:	f855 000a 	ldr.w	r0, [r5, sl]
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 80161da:	eba7 0709 	sub.w	r7, r7, r9
  TestRunCtxt_Ptr->src_buff_name="";
 80161de:	f8c4 24fc 	str.w	r2, [r4, #1276]	; 0x4fc
  TestRunCtxt_Ptr->src_width_size=0;
 80161e2:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
  TestRunCtxt_Ptr->src_height_size=0;
 80161e6:	f8c4 8504 	str.w	r8, [r4, #1284]	; 0x504
  TestRunCtxt_Ptr->src_size=0;
 80161ea:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
  TestRunCtxt_Ptr->PerformCapture=0;
 80161ee:	f8c4 8510 	str.w	r8, [r4, #1296]	; 0x510
  TestRunCtxt_Ptr->rb_swap=0;
 80161f2:	f8c4 8518 	str.w	r8, [r4, #1304]	; 0x518
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80161f6:	7829      	ldrb	r1, [r5, #0]
 80161f8:	f7ed f848 	bl	800328c <TEST_Run>
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 80161fc:	9b03      	ldr	r3, [sp, #12]
 80161fe:	f855 200b 	ldr.w	r2, [r5, fp]
 8016202:	1af6      	subs	r6, r6, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 8016204:	60d7      	str	r7, [r2, #12]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8016206:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 801620a:	1a58      	subs	r0, r3, r1
 801620c:	e9c2 0601 	strd	r0, r6, [r2, #4]
}
 8016210:	b005      	add	sp, #20
 8016212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016216:	bf00      	nop
 8016218:	2400000c 	.word	0x2400000c
 801621c:	0002a300 	.word	0x0002a300
 8016220:	0802c44c 	.word	0x0802c44c

08016224 <Image_CheckResizeMemoryLayout>:

bool Image_CheckResizeMemoryLayout(image_t *src_img, image_t *dst_img)
{
 8016224:	b570      	push	{r4, r5, r6, lr}
 8016226:	460c      	mov	r4, r1
 8016228:	4606      	mov	r6, r0
  uint32_t src_size = STM32Ipl_ImageDataSize(src_img);
 801622a:	f000 f84b 	bl	80162c4 <STM32Ipl_ImageDataSize>
 801622e:	4605      	mov	r5, r0
  uint32_t dst_size = STM32Ipl_ImageDataSize(dst_img);
 8016230:	4620      	mov	r0, r4
 8016232:	f000 f847 	bl	80162c4 <STM32Ipl_ImageDataSize>
  uint32_t src_start = (uint32_t)src_img->data;
  uint32_t dst_start = (uint32_t)dst_img->data;
 8016236:	68e4      	ldr	r4, [r4, #12]
  uint32_t src_end = src_start + src_size - 1;
 8016238:	68f2      	ldr	r2, [r6, #12]
  uint32_t dst_end = dst_start + dst_size - 1;
 801623a:	1e61      	subs	r1, r4, #1
  uint32_t src_end = src_start + src_size - 1;
 801623c:	3a01      	subs	r2, #1
  uint32_t dst_end = dst_start + dst_size - 1;
 801623e:	4408      	add	r0, r1
  uint32_t src_end = src_start + src_size - 1;
 8016240:	442a      	add	r2, r5
  {
    reverse = false; /* ((src_start >= dst_start) || (src_end <= dst_start)) */
  }

  return reverse;
}
 8016242:	4282      	cmp	r2, r0
 8016244:	bf98      	it	ls
 8016246:	4294      	cmpls	r4, r2
 8016248:	bf34      	ite	cc
 801624a:	2001      	movcc	r0, #1
 801624c:	2000      	movcs	r0, #0
 801624e:	bd70      	pop	{r4, r5, r6, pc}

08016250 <STM32Ipl_InitLib>:
 * @param memAddr	Address of the memory buffer allocated to STM32IPL for its internal purposes.
 * @param memSize	Size of the memory buffer (bytes).
 * @return			void.
 */
void STM32Ipl_InitLib(void *memAddr, uint32_t memSize)
{
 8016250:	b508      	push	{r3, lr}
	umm_init(memAddr, memSize);
 8016252:	f001 ffdd 	bl	8018210 <umm_init>
	fb_init();
}
 8016256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fb_init();
 801625a:	f001 bd6d 	b.w	8017d38 <fb_init>
 801625e:	bf00      	nop

08016260 <STM32Ipl_Init>:
 * @param data		Pointer to the pixel data assigned to image.
 * @return			void.
 */
void STM32Ipl_Init(image_t *img, uint32_t width, uint32_t height, image_bpp_t format, void *data)
{
	if (img) {
 8016260:	b120      	cbz	r0, 801626c <STM32Ipl_Init+0xc>
		img->w = width;
		img->h = height;
		img->bpp = format;
 8016262:	6083      	str	r3, [r0, #8]
		img->data = data;
 8016264:	9b00      	ldr	r3, [sp, #0]
		img->h = height;
 8016266:	e9c0 1200 	strd	r1, r2, [r0]
		img->data = data;
 801626a:	60c3      	str	r3, [r0, #12]
	}
}
 801626c:	4770      	bx	lr
 801626e:	bf00      	nop

08016270 <STM32Ipl_ReleaseData>:
 * @param img	Image.
 * @return		void.
 */
void STM32Ipl_ReleaseData(image_t *img)
{
	if (img) {
 8016270:	b150      	cbz	r0, 8016288 <STM32Ipl_ReleaseData+0x18>
{
 8016272:	b510      	push	{r4, lr}
 8016274:	4604      	mov	r4, r0
		xfree(img->data);
 8016276:	68c0      	ldr	r0, [r0, #12]
 8016278:	f001 fd5c 	bl	8017d34 <xfree>
		img->w = width;
 801627c:	2300      	movs	r3, #0
		img->h = height;
 801627e:	e9c4 3300 	strd	r3, r3, [r4]
		img->data = data;
 8016282:	e9c4 3302 	strd	r3, r3, [r4, #8]
		STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
	}
}
 8016286:	bd10      	pop	{r4, pc}
 8016288:	4770      	bx	lr
 801628a:	bf00      	nop

0801628c <STM32Ipl_DataSize>:
 * @param format	Image format.
 * @return			Size of the image data buffer (bytes), 0 in case of wrong/unsupported arguments.
 */
uint32_t STM32Ipl_DataSize(uint32_t width, uint32_t height, image_bpp_t format)
{
	switch ((uint32_t)format) {
 801628c:	2a04      	cmp	r2, #4
 801628e:	d816      	bhi.n	80162be <STM32Ipl_DataSize+0x32>
 8016290:	e8df f002 	tbb	[pc, r2]
 8016294:	030c0306 	.word	0x030c0306
 8016298:	10          	.byte	0x10
 8016299:	00          	.byte	0x00
		case IMAGE_BPP_BINARY:
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);

		case IMAGE_BPP_GRAYSCALE:
			return width * height * sizeof(uint8_t);
 801629a:	fb01 f000 	mul.w	r0, r1, r0
 801629e:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 80162a0:	301f      	adds	r0, #31
 80162a2:	0940      	lsrs	r0, r0, #5
 80162a4:	fb01 f000 	mul.w	r0, r1, r0
 80162a8:	0080      	lsls	r0, r0, #2
 80162aa:	4770      	bx	lr

		case IMAGE_BPP_RGB565:
			return width * height * sizeof(uint16_t);
 80162ac:	fb01 f000 	mul.w	r0, r1, r0
 80162b0:	0040      	lsls	r0, r0, #1
 80162b2:	4770      	bx	lr

		case IMAGE_BPP_BAYER:
			return width * height * sizeof(uint8_t);

		case IMAGE_BPP_RGB888:
			return width * height * 3;
 80162b4:	fb01 f000 	mul.w	r0, r1, r0
 80162b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80162bc:	4770      	bx	lr
{
 80162be:	2000      	movs	r0, #0
	}

	return 0;
}
 80162c0:	4770      	bx	lr
 80162c2:	bf00      	nop

080162c4 <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 80162c4:	b150      	cbz	r0, 80162dc <STM32Ipl_ImageDataSize+0x18>
 80162c6:	7a03      	ldrb	r3, [r0, #8]
 80162c8:	e9d0 2000 	ldrd	r2, r0, [r0]
	switch ((uint32_t)format) {
 80162cc:	2b04      	cmp	r3, #4
 80162ce:	d804      	bhi.n	80162da <STM32Ipl_ImageDataSize+0x16>
 80162d0:	e8df f003 	tbb	[pc, r3]
 80162d4:	050e0508 	.word	0x050e0508
 80162d8:	12          	.byte	0x12
 80162d9:	00          	.byte	0x00
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 80162da:	2000      	movs	r0, #0
}
 80162dc:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 80162de:	fb00 f002 	mul.w	r0, r0, r2
 80162e2:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 80162e4:	321f      	adds	r2, #31
 80162e6:	0952      	lsrs	r2, r2, #5
 80162e8:	fb00 f002 	mul.w	r0, r0, r2
 80162ec:	0080      	lsls	r0, r0, #2
 80162ee:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 80162f0:	fb00 f002 	mul.w	r0, r0, r2
 80162f4:	0040      	lsls	r0, r0, #1
 80162f6:	4770      	bx	lr
			return width * height * 3;
 80162f8:	fb00 f002 	mul.w	r0, r0, r2
 80162fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop

08016304 <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 8016304:	6883      	ldr	r3, [r0, #8]
 8016306:	2b04      	cmp	r3, #4
 8016308:	d810      	bhi.n	801632c <STM32Ipl_ImageFormatSupported+0x28>
 801630a:	e8df f003 	tbb	[pc, r3]
 801630e:	0903      	.short	0x0903
 8016310:	0f0d      	.short	0x0f0d
 8016312:	0b          	.byte	0x0b
 8016313:	00          	.byte	0x00
 8016314:	2301      	movs	r3, #1

		default:
			return false;
	}

	return (format & formats);
 8016316:	4219      	tst	r1, r3
 8016318:	bf14      	ite	ne
 801631a:	2001      	movne	r0, #1
 801631c:	2000      	moveq	r0, #0
 801631e:	4770      	bx	lr
	switch (img->bpp) {
 8016320:	2302      	movs	r3, #2
 8016322:	e7f8      	b.n	8016316 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8016324:	2308      	movs	r3, #8
 8016326:	e7f6      	b.n	8016316 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8016328:	2304      	movs	r3, #4
 801632a:	e7f4      	b.n	8016316 <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 801632c:	2000      	movs	r0, #0
}
 801632e:	4770      	bx	lr

08016330 <STM32Ipl_CopyData>:
 * @param dst   Destination image; if it is not valid, an error is returned.
 * @return		stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_CopyData(const image_t *src, image_t *dst)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 8016330:	2800      	cmp	r0, #0
 8016332:	d033      	beq.n	801639c <STM32Ipl_CopyData+0x6c>
{
 8016334:	b570      	push	{r4, r5, r6, lr}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8016336:	68c6      	ldr	r6, [r0, #12]
	STM32IPL_CHECK_VALID_IMAGE(dst)
 8016338:	b36e      	cbz	r6, 8016396 <STM32Ipl_CopyData+0x66>
 801633a:	b361      	cbz	r1, 8016396 <STM32Ipl_CopyData+0x66>
 801633c:	68cd      	ldr	r5, [r1, #12]
 801633e:	b355      	cbz	r5, 8016396 <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 8016340:	680b      	ldr	r3, [r1, #0]
 8016342:	6804      	ldr	r4, [r0, #0]
 8016344:	429c      	cmp	r4, r3
 8016346:	d126      	bne.n	8016396 <STM32Ipl_CopyData+0x66>
 8016348:	684b      	ldr	r3, [r1, #4]
 801634a:	6842      	ldr	r2, [r0, #4]
 801634c:	429a      	cmp	r2, r3
 801634e:	d122      	bne.n	8016396 <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 8016350:	6889      	ldr	r1, [r1, #8]
 8016352:	6883      	ldr	r3, [r0, #8]
 8016354:	428b      	cmp	r3, r1
 8016356:	d11e      	bne.n	8016396 <STM32Ipl_CopyData+0x66>
	switch ((uint32_t)format) {
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b04      	cmp	r3, #4
 801635c:	d821      	bhi.n	80163a2 <STM32Ipl_CopyData+0x72>
 801635e:	e8df f003 	tbb	[pc, r3]
 8016362:	030b      	.short	0x030b
 8016364:	0311      	.short	0x0311
 8016366:	15          	.byte	0x15
 8016367:	00          	.byte	0x00
			return width * height * sizeof(uint8_t);
 8016368:	fb02 f204 	mul.w	r2, r2, r4

	memcpy(dst->data, src->data, STM32Ipl_ImageDataSize(dst));
 801636c:	4631      	mov	r1, r6
 801636e:	4628      	mov	r0, r5
 8016370:	f00b ff24 	bl	80221bc <memcpy>

	return stm32ipl_err_Ok;
 8016374:	2000      	movs	r0, #0
}
 8016376:	bd70      	pop	{r4, r5, r6, pc}
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8016378:	341f      	adds	r4, #31
 801637a:	0964      	lsrs	r4, r4, #5
 801637c:	fb02 f204 	mul.w	r2, r2, r4
 8016380:	0092      	lsls	r2, r2, #2
 8016382:	e7f3      	b.n	801636c <STM32Ipl_CopyData+0x3c>
			return width * height * sizeof(uint16_t);
 8016384:	fb02 f204 	mul.w	r2, r2, r4
 8016388:	0052      	lsls	r2, r2, #1
 801638a:	e7ef      	b.n	801636c <STM32Ipl_CopyData+0x3c>
			return width * height * 3;
 801638c:	fb02 f204 	mul.w	r2, r2, r4
 8016390:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016394:	e7ea      	b.n	801636c <STM32Ipl_CopyData+0x3c>
	STM32IPL_CHECK_VALID_IMAGE(src)
 8016396:	f06f 0001 	mvn.w	r0, #1
}
 801639a:	bd70      	pop	{r4, r5, r6, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 801639c:	f06f 0001 	mvn.w	r0, #1
}
 80163a0:	4770      	bx	lr
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 80163a2:	2200      	movs	r2, #0
 80163a4:	e7e2      	b.n	801636c <STM32Ipl_CopyData+0x3c>
 80163a6:	bf00      	nop

080163a8 <writeBmpHeader>:
 * paletteColorUsed	The number of palette items used.
 * return stm32ipl_err_Ok on success, errors otherwise.
 */
static stm32ipl_err_t writeBmpHeader(FIL *fp, uint32_t width, uint32_t height, uint32_t dataOffset, uint32_t lineSize,
		uint32_t bitsPP, uint32_t compression, uint32_t paletteColorUsed)
{
 80163a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ac:	b091      	sub	sp, #68	; 0x44
 80163ae:	460f      	mov	r7, r1
 80163b0:	4615      	mov	r5, r2
 80163b2:	4606      	mov	r6, r0
 80163b4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
	uint8_t header[54];
	uint32_t fileSize;
	uint32_t imageSize;
	UINT bytesWritten;

	memset(&header, 0, 54);
 80163b6:	2232      	movs	r2, #50	; 0x32
 80163b8:	2100      	movs	r1, #0
 80163ba:	a803      	add	r0, sp, #12

	imageSize = lineSize * height;
 80163bc:	fb05 f404 	mul.w	r4, r5, r4
{
 80163c0:	4698      	mov	r8, r3
	header[14] = 40;

	/* biWidth. */
	header[18] = (uint8_t)((width & 0XFF));
	header[19] = (uint8_t)((width >> 8) & 0xFF);
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 80163c2:	ea4f 4b17 	mov.w	fp, r7, lsr #16
	header[23] = (uint8_t)((height >> 8) & 0xFF);
	header[24] = (uint8_t)((height >> 16) & 0xFF);
	header[25] = (uint8_t)((height >> 24) & 0xFF);

	/* biPlanes. */
	header[26] = 1;
 80163c6:	f04f 0a01 	mov.w	sl, #1
	memset(&header, 0, 54);
 80163ca:	f00b ff1f 	bl	802220c <memset>
	header[18] = (uint8_t)((width & 0XFF));
 80163ce:	f8ad 701a 	strh.w	r7, [sp, #26]
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 80163d2:	0e3a      	lsrs	r2, r7, #24

	/* biBitCount. */
	header[28] = (uint8_t)((bitsPP & 0XFF));
 80163d4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
	fileSize = dataOffset + imageSize;
 80163d6:	eb04 0308 	add.w	r3, r4, r8
	header[30] = (uint8_t)compression;

	/* biSizeImage. */
	header[34] = (uint8_t)((imageSize & 0XFF));
	header[35] = (uint8_t)((imageSize >> 8) & 0xFF);
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 80163da:	0c20      	lsrs	r0, r4, #16
	header[28] = (uint8_t)((bitsPP & 0XFF));
 80163dc:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 80163e0:	ea4f 4915 	mov.w	r9, r5, lsr #16
	header[30] = (uint8_t)compression;
 80163e4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 80163e6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	header[2] = (uint8_t)((fileSize & 0XFF));
 80163ea:	f8ad 300a 	strh.w	r3, [sp, #10]
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 80163ee:	0e1b      	lsrs	r3, r3, #24
	header[30] = (uint8_t)compression;
 80163f0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	header[0] = 'B';
 80163f4:	f644 5e42 	movw	lr, #19778	; 0x4d42
	header[43] = (uint8_t)((2835 >> 8) & 0xFF);
	header[44] = (uint8_t)((2835 >> 16) & 0xFF);
	header[45] = (uint8_t)((2835 >> 24) & 0xFF);

	/* biClrUsed. */
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 80163f8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
	header[49] = (uint8_t)((paletteColorUsed >> 24) & 0xFF);

	/* biClrImportant. */
	//header[50] = 0;
	/* Write header */
	res = f_write(fp, header, 14, &bytesWritten);
 80163fa:	a902      	add	r1, sp, #8
	header[34] = (uint8_t)((imageSize & 0XFF));
 80163fc:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8016400:	0e24      	lsrs	r4, r4, #24
	header[10] = (uint8_t)((dataOffset & 0XFF));
 8016402:	f8ad 8012 	strh.w	r8, [sp, #18]
	header[14] = 40;
 8016406:	f04f 0828 	mov.w	r8, #40	; 0x28
	header[22] = (uint8_t)((height & 0XFF));
 801640a:	f8ad 501e 	strh.w	r5, [sp, #30]
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 801640e:	0e2d      	lsrs	r5, r5, #24
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8016410:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
	header[12] = (uint8_t)((dataOffset >> 16) & 0xFF);
 8016414:	2700      	movs	r7, #0
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 8016416:	f88d c00c 	strb.w	ip, [sp, #12]
	header[38] = (uint8_t)((2835 & 0XFF));
 801641a:	f640 3c13 	movw	ip, #2835	; 0xb13
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 801641e:	f88d 300d 	strb.w	r3, [sp, #13]
	res = f_write(fp, header, 14, &bytesWritten);
 8016422:	ab01      	add	r3, sp, #4
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 8016424:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
	res = f_write(fp, header, 14, &bytesWritten);
 8016428:	4630      	mov	r0, r6
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 801642a:	f88d 201d 	strb.w	r2, [sp, #29]
	res = f_write(fp, header, 14, &bytesWritten);
 801642e:	220e      	movs	r2, #14
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8016430:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8016434:	f88d b01c 	strb.w	fp, [sp, #28]
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 8016438:	f88d 9020 	strb.w	r9, [sp, #32]
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 801643c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
	header[0] = 'B';
 8016440:	f8ad e008 	strh.w	lr, [sp, #8]
	header[12] = (uint8_t)((dataOffset >> 16) & 0xFF);
 8016444:	f8ad 7014 	strh.w	r7, [sp, #20]
	header[29] = (uint8_t)((bitsPP >> 8) & 0xFF);
 8016448:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	header[48] = (uint8_t)((paletteColorUsed >> 16) & 0xFF);
 801644c:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
	header[14] = 40;
 8016450:	f88d 8016 	strb.w	r8, [sp, #22]
	header[26] = 1;
 8016454:	f88d a022 	strb.w	sl, [sp, #34]	; 0x22
	header[38] = (uint8_t)((2835 & 0XFF));
 8016458:	f8cd c02e 	str.w	ip, [sp, #46]	; 0x2e
 801645c:	f8cd c032 	str.w	ip, [sp, #50]	; 0x32
	res = f_write(fp, header, 14, &bytesWritten);
 8016460:	f7fe fe30 	bl	80150c4 <f_write>
	if (res != FR_OK || bytesWritten != 14)
 8016464:	b980      	cbnz	r0, 8016488 <writeBmpHeader+0xe0>
 8016466:	9b01      	ldr	r3, [sp, #4]
 8016468:	2b0e      	cmp	r3, #14
 801646a:	d10d      	bne.n	8016488 <writeBmpHeader+0xe0>
		return stm32ipl_err_WritingFile;

	res = f_write(fp, header + 14, 40, &bytesWritten);
 801646c:	ab01      	add	r3, sp, #4
 801646e:	4642      	mov	r2, r8
 8016470:	4630      	mov	r0, r6
 8016472:	f10d 0116 	add.w	r1, sp, #22
 8016476:	f7fe fe25 	bl	80150c4 <f_write>
	if (res != FR_OK || bytesWritten != 40)
 801647a:	b928      	cbnz	r0, 8016488 <writeBmpHeader+0xe0>
 801647c:	9b01      	ldr	r3, [sp, #4]
 801647e:	4543      	cmp	r3, r8
 8016480:	d102      	bne.n	8016488 <writeBmpHeader+0xe0>
		return stm32ipl_err_WritingFile;

	return stm32ipl_err_Ok;
}
 8016482:	b011      	add	sp, #68	; 0x44
 8016484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return stm32ipl_err_WritingFile;
 8016488:	f06f 0008 	mvn.w	r0, #8
 801648c:	e7f9      	b.n	8016482 <writeBmpHeader+0xda>
 801648e:	bf00      	nop

08016490 <saveBmp>:
 * img		Image to be saved.
 * filename	Name of the output file.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t saveBmp(const image_t *img, const char *filename)
{
 8016490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016494:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8016498:	4605      	mov	r5, r0
	UINT bytesWritten;

	width = img->w;
	height = img->h;

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 801649a:	220a      	movs	r2, #10
 801649c:	a808      	add	r0, sp, #32
	height = img->h;
 801649e:	e9d5 6900 	ldrd	r6, r9, [r5]
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80164a2:	f7fe fa59 	bl	8014958 <f_open>
 80164a6:	2800      	cmp	r0, #0
 80164a8:	f040 81a7 	bne.w	80167fa <saveBmp+0x36a>
		return stm32ipl_err_OpeningFile;

	switch (img->bpp) {
 80164ac:	68ab      	ldr	r3, [r5, #8]
 80164ae:	2b04      	cmp	r3, #4
 80164b0:	f200 815f 	bhi.w	8016772 <saveBmp+0x2e2>
 80164b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80164b8:	00b40048 	.word	0x00b40048
 80164bc:	015d00eb 	.word	0x015d00eb
 80164c0:	0005      	.short	0x0005

			break;
		}

		case IMAGE_BPP_RGB888: {
			uint32_t dataLen = width * 3;
 80164c2:	eb06 0846 	add.w	r8, r6, r6, lsl #1
			lineSize = (((width * 24) + 31) / 32) * 4;
			padding = lineSize - dataLen;

			/* Header. */
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80164c6:	2300      	movs	r3, #0
 80164c8:	2218      	movs	r2, #24
 80164ca:	4631      	mov	r1, r6
			lineSize = (((width * 24) + 31) / 32) * 4;
 80164cc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80164d0:	a808      	add	r0, sp, #32
 80164d2:	9201      	str	r2, [sp, #4]
 80164d4:	464a      	mov	r2, r9
			lineSize = (((width * 24) + 31) / 32) * 4;
 80164d6:	371f      	adds	r7, #31
 80164d8:	097f      	lsrs	r7, r7, #5
 80164da:	00bc      	lsls	r4, r7, #2
			padding = lineSize - dataLen;
 80164dc:	ebc8 0787 	rsb	r7, r8, r7, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80164e0:	9400      	str	r4, [sp, #0]
 80164e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80164e6:	2336      	movs	r3, #54	; 0x36
 80164e8:	f7ff ff5e 	bl	80163a8 <writeBmpHeader>
 80164ec:	bb18      	cbnz	r0, 8016536 <saveBmp+0xa6>
				f_close(&fp);
				return stm32ipl_err_WritingFile;
			}

			for (int32_t i = height - 1; i >= 0; i--) {
 80164ee:	f1b9 0601 	subs.w	r6, r9, #1
 80164f2:	f100 8090 	bmi.w	8016616 <saveBmp+0x186>
 80164f6:	fb08 f906 	mul.w	r9, r8, r6
 80164fa:	f10d 0a18 	add.w	sl, sp, #24
				uint8_t *data = img->data + i * dataLen;
 80164fe:	68e9      	ldr	r1, [r5, #12]

				/* Image data. */
				res = f_write(&fp, data, dataLen, &bytesWritten);
 8016500:	4653      	mov	r3, sl
 8016502:	4642      	mov	r2, r8
 8016504:	a808      	add	r0, sp, #32
 8016506:	4449      	add	r1, r9
 8016508:	f7fe fddc 	bl	80150c4 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 801650c:	b998      	cbnz	r0, 8016536 <saveBmp+0xa6>
 801650e:	f8da 3000 	ldr.w	r3, [sl]
 8016512:	4543      	cmp	r3, r8
 8016514:	d10f      	bne.n	8016536 <saveBmp+0xa6>
					f_close(&fp);
					return stm32ipl_err_WritingFile;
				}

				/* Padding. */
				for (uint32_t j = 0; j < padding; j++) {
 8016516:	2f00      	cmp	r7, #0
 8016518:	f000 8134 	beq.w	8016784 <saveBmp+0x2f4>
 801651c:	4604      	mov	r4, r0
 801651e:	e002      	b.n	8016526 <saveBmp+0x96>
 8016520:	42a7      	cmp	r7, r4
 8016522:	f000 812f 	beq.w	8016784 <saveBmp+0x2f4>
					if (1 != f_putc(0, &fp)) {
 8016526:	a908      	add	r1, sp, #32
 8016528:	2000      	movs	r0, #0
 801652a:	f7ff fc81 	bl	8015e30 <f_putc>
 801652e:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8016530:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8016534:	d0f4      	beq.n	8016520 <saveBmp+0x90>
				f_close(&fp);
 8016536:	a808      	add	r0, sp, #32
 8016538:	f7fe ff24 	bl	8015384 <f_close>
				return stm32ipl_err_WritingFile;
 801653c:	f06f 0008 	mvn.w	r0, #8
	};

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8016540:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8016544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lineSize = (((width) + 31) / 32) * 4;
 8016548:	f106 081f 	add.w	r8, r6, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 801654c:	2202      	movs	r2, #2
			uint32_t palette = 0;
 801654e:	2400      	movs	r4, #0
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8016550:	2301      	movs	r3, #1
			lineSize = (((width) + 31) / 32) * 4;
 8016552:	ea4f 1858 	mov.w	r8, r8, lsr #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8016556:	9203      	str	r2, [sp, #12]
 8016558:	9301      	str	r3, [sp, #4]
 801655a:	4631      	mov	r1, r6
			lineSize = (((width) + 31) / 32) * 4;
 801655c:	fa08 f802 	lsl.w	r8, r8, r2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8016560:	233e      	movs	r3, #62	; 0x3e
 8016562:	464a      	mov	r2, r9
 8016564:	a808      	add	r0, sp, #32
 8016566:	9402      	str	r4, [sp, #8]
 8016568:	f8cd 8000 	str.w	r8, [sp]
			uint32_t palette = 0;
 801656c:	9407      	str	r4, [sp, #28]
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 801656e:	f7ff ff1b 	bl	80163a8 <writeBmpHeader>
 8016572:	2800      	cmp	r0, #0
 8016574:	d1df      	bne.n	8016536 <saveBmp+0xa6>
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8016576:	f10d 0a18 	add.w	sl, sp, #24
 801657a:	2204      	movs	r2, #4
 801657c:	a907      	add	r1, sp, #28
 801657e:	a808      	add	r0, sp, #32
 8016580:	4653      	mov	r3, sl
 8016582:	f7fe fd9f 	bl	80150c4 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 8016586:	2800      	cmp	r0, #0
 8016588:	d1d5      	bne.n	8016536 <saveBmp+0xa6>
 801658a:	f8da 2000 	ldr.w	r2, [sl]
 801658e:	2a04      	cmp	r2, #4
 8016590:	d1d1      	bne.n	8016536 <saveBmp+0xa6>
			palette = 0xFFFFFF;
 8016592:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8016596:	a907      	add	r1, sp, #28
 8016598:	4653      	mov	r3, sl
			palette = 0xFFFFFF;
 801659a:	9007      	str	r0, [sp, #28]
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 801659c:	a808      	add	r0, sp, #32
 801659e:	f7fe fd91 	bl	80150c4 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 80165a2:	2800      	cmp	r0, #0
 80165a4:	d1c7      	bne.n	8016536 <saveBmp+0xa6>
 80165a6:	f8da 3000 	ldr.w	r3, [sl]
 80165aa:	2b04      	cmp	r3, #4
 80165ac:	d1c3      	bne.n	8016536 <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 80165ae:	f1b9 0601 	subs.w	r6, r9, #1
 80165b2:	d430      	bmi.n	8016616 <saveBmp+0x186>
 80165b4:	fb08 f906 	mul.w	r9, r8, r6
				uint8_t *srcData = img->data + offset;
 80165b8:	68ec      	ldr	r4, [r5, #12]
				for (uint32_t j = 0; j < lineSize; j++) {
 80165ba:	f1b8 0f00 	cmp.w	r8, #0
 80165be:	d025      	beq.n	801660c <saveBmp+0x17c>
 80165c0:	eb04 0708 	add.w	r7, r4, r8
 80165c4:	444c      	add	r4, r9
 80165c6:	444f      	add	r7, r9
					uint8_t dstData = reverse8(*(srcData + j));
 80165c8:	f814 2b01 	ldrb.w	r2, [r4], #1
	int size = sizeof(val) * CHAR_BIT - 1;
 80165cc:	f04f 0c07 	mov.w	ip, #7
	for (val >>= 1; val; val >>= 1) {
 80165d0:	0853      	lsrs	r3, r2, #1
 80165d2:	d008      	beq.n	80165e6 <saveBmp+0x156>
		rev |= val & 1;
 80165d4:	f003 0101 	and.w	r1, r3, #1
	for (val >>= 1; val; val >>= 1) {
 80165d8:	085b      	lsrs	r3, r3, #1
		size--;
 80165da:	f10c 3cff 	add.w	ip, ip, #4294967295
		rev |= val & 1;
 80165de:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
 80165e2:	b2d2      	uxtb	r2, r2
	for (val >>= 1; val; val >>= 1) {
 80165e4:	d1f6      	bne.n	80165d4 <saveBmp+0x144>
	rev <<= size;
 80165e6:	fa02 fc0c 	lsl.w	ip, r2, ip
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 80165ea:	4653      	mov	r3, sl
 80165ec:	2201      	movs	r2, #1
 80165ee:	f10d 0117 	add.w	r1, sp, #23
 80165f2:	a808      	add	r0, sp, #32
	rev <<= size;
 80165f4:	f88d c017 	strb.w	ip, [sp, #23]
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 80165f8:	f7fe fd64 	bl	80150c4 <f_write>
					if (res != FR_OK || bytesWritten != 1) {
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d19a      	bne.n	8016536 <saveBmp+0xa6>
 8016600:	f8da 3000 	ldr.w	r3, [sl]
 8016604:	2b01      	cmp	r3, #1
 8016606:	d196      	bne.n	8016536 <saveBmp+0xa6>
				for (uint32_t j = 0; j < lineSize; j++) {
 8016608:	42bc      	cmp	r4, r7
 801660a:	d1dd      	bne.n	80165c8 <saveBmp+0x138>
			for (int32_t i = height - 1; i >= 0; i--) {
 801660c:	3e01      	subs	r6, #1
 801660e:	eba9 0908 	sub.w	r9, r9, r8
 8016612:	1c72      	adds	r2, r6, #1
 8016614:	d1d0      	bne.n	80165b8 <saveBmp+0x128>
	f_close(&fp);
 8016616:	a808      	add	r0, sp, #32
 8016618:	f7fe feb4 	bl	8015384 <f_close>
	return stm32ipl_err_Ok;
 801661c:	2000      	movs	r0, #0
 801661e:	e78f      	b.n	8016540 <saveBmp+0xb0>
			lineSize = (((width * 8) + 31) / 32) * 4;
 8016620:	ea4f 08c6 	mov.w	r8, r6, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8016624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016628:	2300      	movs	r3, #0
 801662a:	2208      	movs	r2, #8
			lineSize = (((width * 8) + 31) / 32) * 4;
 801662c:	f108 081f 	add.w	r8, r8, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8016630:	a808      	add	r0, sp, #32
 8016632:	9201      	str	r2, [sp, #4]
 8016634:	464a      	mov	r2, r9
			lineSize = (((width * 8) + 31) / 32) * 4;
 8016636:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801663a:	ea4f 0888 	mov.w	r8, r8, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 801663e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8016642:	f8cd 8000 	str.w	r8, [sp]
 8016646:	f240 4336 	movw	r3, #1078	; 0x436
 801664a:	4631      	mov	r1, r6
 801664c:	f7ff feac 	bl	80163a8 <writeBmpHeader>
 8016650:	2800      	cmp	r0, #0
 8016652:	f47f af70 	bne.w	8016536 <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 8016656:	4604      	mov	r4, r0
 8016658:	f10d 0a18 	add.w	sl, sp, #24
 801665c:	e008      	b.n	8016670 <saveBmp+0x1e0>
				if (res != FR_OK || bytesWritten != 4) {
 801665e:	f8da 3000 	ldr.w	r3, [sl]
 8016662:	2b04      	cmp	r3, #4
 8016664:	f47f af67 	bne.w	8016536 <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 8016668:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801666c:	f000 8098 	beq.w	80167a0 <saveBmp+0x310>
				uint32_t value = (i << 16) | (i << 8) | i;
 8016670:	0427      	lsls	r7, r4, #16
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8016672:	4653      	mov	r3, sl
 8016674:	2204      	movs	r2, #4
 8016676:	a907      	add	r1, sp, #28
				uint32_t value = (i << 16) | (i << 8) | i;
 8016678:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 801667c:	a808      	add	r0, sp, #32
				uint32_t value = (i << 16) | (i << 8) | i;
 801667e:	4327      	orrs	r7, r4
			for (uint32_t i = 0; i < 256; i++) {
 8016680:	3401      	adds	r4, #1
				uint32_t value = (i << 16) | (i << 8) | i;
 8016682:	9707      	str	r7, [sp, #28]
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8016684:	f7fe fd1e 	bl	80150c4 <f_write>
				if (res != FR_OK || bytesWritten != 4) {
 8016688:	2800      	cmp	r0, #0
 801668a:	d0e8      	beq.n	801665e <saveBmp+0x1ce>
 801668c:	e753      	b.n	8016536 <saveBmp+0xa6>
			lineSize = (((width * 16) + 31) / 32) * 4;
 801668e:	0137      	lsls	r7, r6, #4
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8016690:	2100      	movs	r1, #0
 8016692:	2303      	movs	r3, #3
 8016694:	2210      	movs	r2, #16
			lineSize = (((width * 16) + 31) / 32) * 4;
 8016696:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8016698:	a808      	add	r0, sp, #32
 801669a:	9201      	str	r2, [sp, #4]
 801669c:	464a      	mov	r2, r9
			lineSize = (((width * 16) + 31) / 32) * 4;
 801669e:	097f      	lsrs	r7, r7, #5
			uint32_t dataLen = width << 1;
 80166a0:	ea4f 0b46 	mov.w	fp, r6, lsl #1
			lineSize = (((width * 16) + 31) / 32) * 4;
 80166a4:	00bf      	lsls	r7, r7, #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80166a6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80166aa:	9700      	str	r7, [sp, #0]
 80166ac:	2342      	movs	r3, #66	; 0x42
 80166ae:	4631      	mov	r1, r6
			padding = lineSize - dataLen;
 80166b0:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80166b4:	f7ff fe78 	bl	80163a8 <writeBmpHeader>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	f47f af3c 	bne.w	8016536 <saveBmp+0xa6>
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80166be:	f10d 0a18 	add.w	sl, sp, #24
			mask = 0xF800;
 80166c2:	f44f 4478 	mov.w	r4, #63488	; 0xf800
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80166c6:	2204      	movs	r2, #4
 80166c8:	a907      	add	r1, sp, #28
 80166ca:	4653      	mov	r3, sl
 80166cc:	a808      	add	r0, sp, #32
			mask = 0xF800;
 80166ce:	9407      	str	r4, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80166d0:	f7fe fcf8 	bl	80150c4 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f47f af2e 	bne.w	8016536 <saveBmp+0xa6>
 80166da:	f8da 2000 	ldr.w	r2, [sl]
 80166de:	2a04      	cmp	r2, #4
 80166e0:	f47f af29 	bne.w	8016536 <saveBmp+0xa6>
			mask = 0x7E0;
 80166e4:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80166e8:	4653      	mov	r3, sl
 80166ea:	a907      	add	r1, sp, #28
 80166ec:	a808      	add	r0, sp, #32
			mask = 0x7E0;
 80166ee:	9407      	str	r4, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80166f0:	f7fe fce8 	bl	80150c4 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 80166f4:	2800      	cmp	r0, #0
 80166f6:	f47f af1e 	bne.w	8016536 <saveBmp+0xa6>
 80166fa:	f8da 2000 	ldr.w	r2, [sl]
 80166fe:	2a04      	cmp	r2, #4
 8016700:	f47f af19 	bne.w	8016536 <saveBmp+0xa6>
			mask = 0x1F;
 8016704:	201f      	movs	r0, #31
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8016706:	a907      	add	r1, sp, #28
 8016708:	4653      	mov	r3, sl
			mask = 0x1F;
 801670a:	9007      	str	r0, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 801670c:	a808      	add	r0, sp, #32
 801670e:	f7fe fcd9 	bl	80150c4 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8016712:	2800      	cmp	r0, #0
 8016714:	f47f af0f 	bne.w	8016536 <saveBmp+0xa6>
 8016718:	f8da 3000 	ldr.w	r3, [sl]
 801671c:	2b04      	cmp	r3, #4
 801671e:	f47f af0a 	bne.w	8016536 <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 8016722:	f1b9 0901 	subs.w	r9, r9, #1
 8016726:	f53f af76 	bmi.w	8016616 <saveBmp+0x186>
 801672a:	fb06 f809 	mul.w	r8, r6, r9
 801672e:	ebc6 73c6 	rsb	r3, r6, r6, lsl #31
 8016732:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8016736:	005e      	lsls	r6, r3, #1
				res = f_write(&fp, ((uint16_t*)img->data) + offset, dataLen, &bytesWritten);
 8016738:	68e9      	ldr	r1, [r5, #12]
 801673a:	4653      	mov	r3, sl
 801673c:	465a      	mov	r2, fp
 801673e:	a808      	add	r0, sp, #32
 8016740:	4441      	add	r1, r8
 8016742:	f7fe fcbf 	bl	80150c4 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8016746:	2800      	cmp	r0, #0
 8016748:	f47f aef5 	bne.w	8016536 <saveBmp+0xa6>
 801674c:	f8da 3000 	ldr.w	r3, [sl]
 8016750:	455b      	cmp	r3, fp
 8016752:	f47f aef0 	bne.w	8016536 <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 8016756:	b1e7      	cbz	r7, 8016792 <saveBmp+0x302>
 8016758:	4604      	mov	r4, r0
 801675a:	e001      	b.n	8016760 <saveBmp+0x2d0>
 801675c:	42a7      	cmp	r7, r4
 801675e:	d018      	beq.n	8016792 <saveBmp+0x302>
					if (1 != f_putc(0, &fp)) {
 8016760:	a908      	add	r1, sp, #32
 8016762:	2000      	movs	r0, #0
 8016764:	f7ff fb64 	bl	8015e30 <f_putc>
 8016768:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 801676a:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 801676e:	d0f5      	beq.n	801675c <saveBmp+0x2cc>
 8016770:	e6e1      	b.n	8016536 <saveBmp+0xa6>
			f_close(&fp);
 8016772:	a808      	add	r0, sp, #32
 8016774:	f7fe fe06 	bl	8015384 <f_close>
			return stm32ipl_err_InvalidParameter;
 8016778:	f06f 0001 	mvn.w	r0, #1
}
 801677c:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8016780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int32_t i = height - 1; i >= 0; i--) {
 8016784:	3e01      	subs	r6, #1
 8016786:	eba9 0908 	sub.w	r9, r9, r8
 801678a:	1c73      	adds	r3, r6, #1
 801678c:	f47f aeb7 	bne.w	80164fe <saveBmp+0x6e>
 8016790:	e741      	b.n	8016616 <saveBmp+0x186>
			for (int32_t i = height - 1; i >= 0; i--) {
 8016792:	f109 39ff 	add.w	r9, r9, #4294967295
 8016796:	44b0      	add	r8, r6
 8016798:	f1b9 3fff 	cmp.w	r9, #4294967295
 801679c:	d1cc      	bne.n	8016738 <saveBmp+0x2a8>
 801679e:	e73a      	b.n	8016616 <saveBmp+0x186>
			for (int32_t i = height - 1; i >= 0; i--) {
 80167a0:	f1b9 0901 	subs.w	r9, r9, #1
 80167a4:	f53f af37 	bmi.w	8016616 <saveBmp+0x186>
			padding = lineSize - width;
 80167a8:	eba8 0706 	sub.w	r7, r8, r6
 80167ac:	fb06 f809 	mul.w	r8, r6, r9
				res = f_write(&fp, img->data + offset, width, &bytesWritten);
 80167b0:	68e9      	ldr	r1, [r5, #12]
 80167b2:	4653      	mov	r3, sl
 80167b4:	4632      	mov	r2, r6
 80167b6:	a808      	add	r0, sp, #32
 80167b8:	4441      	add	r1, r8
 80167ba:	f7fe fc83 	bl	80150c4 <f_write>
				if (res != FR_OK || bytesWritten != width) {
 80167be:	2800      	cmp	r0, #0
 80167c0:	f47f aeb9 	bne.w	8016536 <saveBmp+0xa6>
 80167c4:	f8da 3000 	ldr.w	r3, [sl]
 80167c8:	42b3      	cmp	r3, r6
 80167ca:	f47f aeb4 	bne.w	8016536 <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 80167ce:	b167      	cbz	r7, 80167ea <saveBmp+0x35a>
 80167d0:	4604      	mov	r4, r0
 80167d2:	e001      	b.n	80167d8 <saveBmp+0x348>
 80167d4:	42a7      	cmp	r7, r4
 80167d6:	d008      	beq.n	80167ea <saveBmp+0x35a>
					if (1 != f_putc(0, &fp)) {
 80167d8:	a908      	add	r1, sp, #32
 80167da:	2000      	movs	r0, #0
 80167dc:	f7ff fb28 	bl	8015e30 <f_putc>
 80167e0:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 80167e2:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 80167e6:	d0f5      	beq.n	80167d4 <saveBmp+0x344>
 80167e8:	e6a5      	b.n	8016536 <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 80167ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80167ee:	eba8 0806 	sub.w	r8, r8, r6
 80167f2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80167f6:	d1db      	bne.n	80167b0 <saveBmp+0x320>
 80167f8:	e70d      	b.n	8016616 <saveBmp+0x186>
		return stm32ipl_err_OpeningFile;
 80167fa:	f06f 0005 	mvn.w	r0, #5
 80167fe:	e69f      	b.n	8016540 <saveBmp+0xb0>

08016800 <savePnm>:
 * filename	Name of the output file.
 * format	Format of the PNM file (6 if the input image is RGB565 or RGB888, 5 if it's Grayscale).
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t savePnm(const image_t *img, const char *filename, uint8_t format)
{
 8016800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016804:	4605      	mov	r5, r0
 8016806:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 801680a:	460e      	mov	r6, r1
 801680c:	4613      	mov	r3, r2
	int32_t height;
	char text[64];
	UINT bytesWritten;
	uint32_t offset;

	width = img->w;
 801680e:	682f      	ldr	r7, [r5, #0]
	height = img->h;

	/* Write header. */
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8016810:	2140      	movs	r1, #64	; 0x40
	height = img->h;
 8016812:	f8d5 8004 	ldr.w	r8, [r5, #4]
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8016816:	a804      	add	r0, sp, #16
 8016818:	4a56      	ldr	r2, [pc, #344]	; (8016974 <savePnm+0x174>)
 801681a:	e9cd 7800 	strd	r7, r8, [sp]
 801681e:	f00c fb83 	bl	8022f28 <sniprintf>

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8016822:	4631      	mov	r1, r6
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8016824:	4604      	mov	r4, r0
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8016826:	220a      	movs	r2, #10
 8016828:	a814      	add	r0, sp, #80	; 0x50
 801682a:	f7fe f895 	bl	8014958 <f_open>
 801682e:	2800      	cmp	r0, #0
 8016830:	f040 809c 	bne.w	801696c <savePnm+0x16c>
		return stm32ipl_err_OpeningFile;

	res = f_write(&fp, text, size, &bytesWritten);
 8016834:	a904      	add	r1, sp, #16
 8016836:	4622      	mov	r2, r4
 8016838:	a814      	add	r0, sp, #80	; 0x50
 801683a:	ab03      	add	r3, sp, #12
 801683c:	f7fe fc42 	bl	80150c4 <f_write>
	if (res != FR_OK || bytesWritten != size) {
 8016840:	2800      	cmp	r0, #0
 8016842:	d136      	bne.n	80168b2 <savePnm+0xb2>
 8016844:	9b03      	ldr	r3, [sp, #12]
 8016846:	42a3      	cmp	r3, r4
 8016848:	d133      	bne.n	80168b2 <savePnm+0xb2>
		f_close(&fp);
		return stm32ipl_err_WritingFile;
	}

	switch (img->bpp) {
 801684a:	68ab      	ldr	r3, [r5, #8]
 801684c:	2b02      	cmp	r3, #2
 801684e:	d04e      	beq.n	80168ee <savePnm+0xee>
 8016850:	2b04      	cmp	r3, #4
 8016852:	d00a      	beq.n	801686a <savePnm+0x6a>
 8016854:	2b01      	cmp	r3, #1
 8016856:	d035      	beq.n	80168c4 <savePnm+0xc4>

			break;
		}

		default: {
			f_close(&fp);
 8016858:	a814      	add	r0, sp, #80	; 0x50
 801685a:	f7fe fd93 	bl	8015384 <f_close>
			return stm32ipl_err_UnsupportedFormat;
 801685e:	f06f 0004 	mvn.w	r0, #4
	}

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8016862:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8016866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 801686a:	fb08 f707 	mul.w	r7, r8, r7
			uint8_t *data = img->data;
 801686e:	68ec      	ldr	r4, [r5, #12]
			for (uint32_t i = 0; i < size; i++) {
 8016870:	2f00      	cmp	r7, #0
 8016872:	d034      	beq.n	80168de <savePnm+0xde>
 8016874:	3403      	adds	r4, #3
 8016876:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801687a:	4427      	add	r7, r4
 801687c:	e004      	b.n	8016888 <savePnm+0x88>
				if (res != FR_OK || bytesWritten != 3) {
 801687e:	9b03      	ldr	r3, [sp, #12]
 8016880:	2b03      	cmp	r3, #3
 8016882:	d116      	bne.n	80168b2 <savePnm+0xb2>
			for (uint32_t i = 0; i < size; i++) {
 8016884:	42a7      	cmp	r7, r4
 8016886:	d02a      	beq.n	80168de <savePnm+0xde>
				rgb888.r = *data++;
 8016888:	f814 0c03 	ldrb.w	r0, [r4, #-3]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801688c:	2203      	movs	r2, #3
 801688e:	ab03      	add	r3, sp, #12
 8016890:	a902      	add	r1, sp, #8
				rgb888.r = *data++;
 8016892:	f88d 000a 	strb.w	r0, [sp, #10]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8016896:	a814      	add	r0, sp, #80	; 0x50
				rgb888.g = *data++;
 8016898:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801689c:	f88d 5009 	strb.w	r5, [sp, #9]
				rgb888.b = *data++;
 80168a0:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 80168a4:	4414      	add	r4, r2
 80168a6:	f88d 5008 	strb.w	r5, [sp, #8]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80168aa:	f7fe fc0b 	bl	80150c4 <f_write>
				if (res != FR_OK || bytesWritten != 3) {
 80168ae:	2800      	cmp	r0, #0
 80168b0:	d0e5      	beq.n	801687e <savePnm+0x7e>
					f_close(&fp);
 80168b2:	a814      	add	r0, sp, #80	; 0x50
 80168b4:	f7fe fd66 	bl	8015384 <f_close>
					return stm32ipl_err_WritingFile;
 80168b8:	f06f 0008 	mvn.w	r0, #8
}
 80168bc:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 80168c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 80168c4:	fb08 f707 	mul.w	r7, r8, r7
			res = f_write(&fp, img->data, size, &bytesWritten);
 80168c8:	68e9      	ldr	r1, [r5, #12]
 80168ca:	ab03      	add	r3, sp, #12
 80168cc:	a814      	add	r0, sp, #80	; 0x50
 80168ce:	463a      	mov	r2, r7
 80168d0:	f7fe fbf8 	bl	80150c4 <f_write>
			if (res != FR_OK || bytesWritten != size) {
 80168d4:	2800      	cmp	r0, #0
 80168d6:	d1ec      	bne.n	80168b2 <savePnm+0xb2>
 80168d8:	9b03      	ldr	r3, [sp, #12]
 80168da:	42bb      	cmp	r3, r7
 80168dc:	d1e9      	bne.n	80168b2 <savePnm+0xb2>
	f_close(&fp);
 80168de:	a814      	add	r0, sp, #80	; 0x50
 80168e0:	f7fe fd50 	bl	8015384 <f_close>
	return stm32ipl_err_Ok;
 80168e4:	2000      	movs	r0, #0
}
 80168e6:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 80168ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint32_t i = 0; i < height; i++) {
 80168ee:	f1b8 0f00 	cmp.w	r8, #0
 80168f2:	d0f4      	beq.n	80168de <savePnm+0xde>
				offset = i * width;
 80168f4:	4681      	mov	r9, r0
			for (uint32_t i = 0; i < height; i++) {
 80168f6:	4682      	mov	sl, r0
				for (uint32_t j = 0; j < width; j++) {
 80168f8:	b397      	cbz	r7, 8016960 <savePnm+0x160>
 80168fa:	ea4f 0449 	mov.w	r4, r9, lsl #1
 80168fe:	2600      	movs	r6, #0
 8016900:	e004      	b.n	801690c <savePnm+0x10c>
					if (res != FR_OK || bytesWritten != 3) {
 8016902:	9b03      	ldr	r3, [sp, #12]
 8016904:	2b03      	cmp	r3, #3
 8016906:	d1d4      	bne.n	80168b2 <savePnm+0xb2>
				for (uint32_t j = 0; j < width; j++) {
 8016908:	42b7      	cmp	r7, r6
 801690a:	d029      	beq.n	8016960 <savePnm+0x160>
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 801690c:	68e9      	ldr	r1, [r5, #12]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801690e:	2203      	movs	r2, #3
 8016910:	ab03      	add	r3, sp, #12
				for (uint32_t j = 0; j < width; j++) {
 8016912:	3601      	adds	r6, #1
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 8016914:	5b08      	ldrh	r0, [r1, r4]
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8016916:	3402      	adds	r4, #2
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8016918:	fa20 f102 	lsr.w	r1, r0, r2
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 801691c:	ea4f 2e10 	mov.w	lr, r0, lsr #8
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8016920:	f3c0 0c82 	ubfx	ip, r0, #2, #3
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8016924:	f001 0bfc 	and.w	fp, r1, #252	; 0xfc
 8016928:	f3c1 1181 	ubfx	r1, r1, #6, #2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 801692c:	ea4c 00c0 	orr.w	r0, ip, r0, lsl #3
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8016930:	f00e 0cf8 	and.w	ip, lr, #248	; 0xf8
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8016934:	ea4b 0b01 	orr.w	fp, fp, r1
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8016938:	a902      	add	r1, sp, #8
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 801693a:	ea4c 1c5e 	orr.w	ip, ip, lr, lsr #5
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 801693e:	f88d 000a 	strb.w	r0, [sp, #10]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8016942:	a814      	add	r0, sp, #80	; 0x50
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8016944:	f88d b009 	strb.w	fp, [sp, #9]
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8016948:	f88d c008 	strb.w	ip, [sp, #8]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801694c:	f7fe fbba 	bl	80150c4 <f_write>
					if (res != FR_OK || bytesWritten != 3) {
 8016950:	2800      	cmp	r0, #0
 8016952:	d0d6      	beq.n	8016902 <savePnm+0x102>
					f_close(&fp);
 8016954:	a814      	add	r0, sp, #80	; 0x50
 8016956:	f7fe fd15 	bl	8015384 <f_close>
					return stm32ipl_err_WritingFile;
 801695a:	f06f 0008 	mvn.w	r0, #8
 801695e:	e7ad      	b.n	80168bc <savePnm+0xbc>
			for (uint32_t i = 0; i < height; i++) {
 8016960:	f10a 0a01 	add.w	sl, sl, #1
 8016964:	44b9      	add	r9, r7
 8016966:	45c2      	cmp	sl, r8
 8016968:	d1c6      	bne.n	80168f8 <savePnm+0xf8>
 801696a:	e7b8      	b.n	80168de <savePnm+0xde>
		return stm32ipl_err_OpeningFile;
 801696c:	f06f 0005 	mvn.w	r0, #5
 8016970:	e777      	b.n	8016862 <savePnm+0x62>
 8016972:	bf00      	nop
 8016974:	0802d0f8 	.word	0x0802d0f8

08016978 <STM32Ipl_ReadImage>:
{
 8016978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 801697c:	f243 3250 	movw	r2, #13136	; 0x3350
	uint32_t bytesRead = 0;
 8016980:	2600      	movs	r6, #0
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 8016982:	f644 5542 	movw	r5, #19778	; 0x4d42
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 8016986:	f243 2450 	movw	r4, #12880	; 0x3250
	if (!img || !filename)
 801698a:	4607      	mov	r7, r0
{
 801698c:	ed2d 8b02 	vpush	{d8}
 8016990:	f2ad 6ddc 	subw	sp, sp, #1756	; 0x6dc
	if (!img || !filename)
 8016994:	9003      	str	r0, [sp, #12]
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 8016996:	f243 5050 	movw	r0, #13648	; 0x3550
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 801699a:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 801699e:	f243 6250 	movw	r2, #13904	; 0x3650
	uint32_t bytesRead = 0;
 80169a2:	961a      	str	r6, [sp, #104]	; 0x68
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 80169a4:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 80169a8:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 80169ac:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 80169b0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
	if (!img || !filename)
 80169b4:	2f00      	cmp	r7, #0
 80169b6:	f000 85a0 	beq.w	80174fa <STM32Ipl_ReadImage+0xb82>
 80169ba:	2900      	cmp	r1, #0
 80169bc:	f000 859d 	beq.w	80174fa <STM32Ipl_ReadImage+0xb82>
	if (f_open(&fp, (const TCHAR*)filename, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 80169c0:	2201      	movs	r2, #1
 80169c2:	a82a      	add	r0, sp, #168	; 0xa8
 80169c4:	f7fd ffc8 	bl	8014958 <f_open>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	f040 86a1 	bne.w	8017710 <STM32Ipl_ReadImage+0xd98>
	if ((f_read(&fp, magic, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2) {
 80169ce:	ab1a      	add	r3, sp, #104	; 0x68
 80169d0:	2202      	movs	r2, #2
 80169d2:	a82a      	add	r0, sp, #168	; 0xa8
 80169d4:	a914      	add	r1, sp, #80	; 0x50
 80169d6:	f7fe fa3f 	bl	8014e58 <f_read>
 80169da:	4604      	mov	r4, r0
 80169dc:	2800      	cmp	r0, #0
 80169de:	f040 8561 	bne.w	80174a4 <STM32Ipl_ReadImage+0xb2c>
 80169e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80169e4:	2b02      	cmp	r3, #2
 80169e6:	f040 855d 	bne.w	80174a4 <STM32Ipl_ReadImage+0xb2c>
	if (memcmp(bmp, magic, 2) == 0)
 80169ea:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80169ee:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80169f2:	4293      	cmp	r3, r2
 80169f4:	d060      	beq.n	8016ab8 <STM32Ipl_ReadImage+0x140>
		if ((memcmp(p2, magic, 1) == 0)
 80169f6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80169fa:	2a50      	cmp	r2, #80	; 0x50
 80169fc:	d00b      	beq.n	8016a16 <STM32Ipl_ReadImage+0x9e>
				res = stm32ipl_err_UnsupportedFormat;
 80169fe:	f06f 0704 	mvn.w	r7, #4
	f_close(&fp);
 8016a02:	a82a      	add	r0, sp, #168	; 0xa8
 8016a04:	f7fe fcbe 	bl	8015384 <f_close>
}
 8016a08:	4638      	mov	r0, r7
 8016a0a:	f20d 6ddc 	addw	sp, sp, #1756	; 0x6dc
 8016a0e:	ecbd 8b02 	vpop	{d8}
 8016a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((memcmp(p2, magic, 2) == 0) || (memcmp(p3, magic, 2) == 0) || (memcmp(p5, magic, 2) == 0)
 8016a16:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d008      	beq.n	8016a30 <STM32Ipl_ReadImage+0xb8>
 8016a1e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d004      	beq.n	8016a30 <STM32Ipl_ReadImage+0xb8>
 8016a26:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	f040 847a 	bne.w	8017324 <STM32Ipl_ReadImage+0x9ac>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 8016a30:	2100      	movs	r1, #0
 8016a32:	9803      	ldr	r0, [sp, #12]
 8016a34:	460b      	mov	r3, r1
 8016a36:	460a      	mov	r2, r1
 8016a38:	9100      	str	r1, [sp, #0]
 8016a3a:	f7ff fc11 	bl	8016260 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 8016a3e:	2100      	movs	r1, #0
 8016a40:	a82a      	add	r0, sp, #168	; 0xa8
 8016a42:	f7fe fd2f 	bl	80154a4 <f_lseek>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	f040 81c1 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
	if ((f_read(fp, sector, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2)
 8016a4c:	ac1c      	add	r4, sp, #112	; 0x70
 8016a4e:	adb6      	add	r5, sp, #728	; 0x2d8
 8016a50:	2202      	movs	r2, #2
 8016a52:	a82a      	add	r0, sp, #168	; 0xa8
 8016a54:	4623      	mov	r3, r4
 8016a56:	4629      	mov	r1, r5
 8016a58:	f7fe f9fe 	bl	8014e58 <f_read>
 8016a5c:	4607      	mov	r7, r0
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	f040 81b2 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016a64:	6823      	ldr	r3, [r4, #0]
 8016a66:	2b02      	cmp	r3, #2
 8016a68:	f040 81ae 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
	number_ppm = sector[1];
 8016a6c:	786b      	ldrb	r3, [r5, #1]
	if ((number_ppm != '2') && (number_ppm != '3') && (number_ppm != '5') && (number_ppm != '6'))
 8016a6e:	f1a3 0832 	sub.w	r8, r3, #50	; 0x32
 8016a72:	fa5f f288 	uxtb.w	r2, r8
 8016a76:	2a01      	cmp	r2, #1
 8016a78:	d902      	bls.n	8016a80 <STM32Ipl_ReadImage+0x108>
 8016a7a:	3b35      	subs	r3, #53	; 0x35
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d8be      	bhi.n	80169fe <STM32Ipl_ReadImage+0x86>
 8016a80:	2600      	movs	r6, #0
		if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8016a82:	4623      	mov	r3, r4
 8016a84:	2201      	movs	r2, #1
 8016a86:	4629      	mov	r1, r5
 8016a88:	a82a      	add	r0, sp, #168	; 0xa8
 8016a8a:	f7fe f9e5 	bl	8014e58 <f_read>
 8016a8e:	2800      	cmp	r0, #0
 8016a90:	f040 819a 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	2b01      	cmp	r3, #1
 8016a98:	f040 8196 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
		if (mode == EAT_WHITESPACE) {
 8016a9c:	2f00      	cmp	r7, #0
 8016a9e:	f040 81d7 	bne.w	8016e50 <STM32Ipl_ReadImage+0x4d8>
			if (sector[0] == '#') {
 8016aa2:	782a      	ldrb	r2, [r5, #0]
 8016aa4:	2a23      	cmp	r2, #35	; 0x23
 8016aa6:	f000 81e1 	beq.w	8016e6c <STM32Ipl_ReadImage+0x4f4>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8016aaa:	3a30      	subs	r2, #48	; 0x30
 8016aac:	b2d3      	uxtb	r3, r2
 8016aae:	2b09      	cmp	r3, #9
 8016ab0:	d8e7      	bhi.n	8016a82 <STM32Ipl_ReadImage+0x10a>
					number = sector[0] - '0';
 8016ab2:	4616      	mov	r6, r2
					mode = EAT_NUMBER;
 8016ab4:	2702      	movs	r7, #2
 8016ab6:	e7e4      	b.n	8016a82 <STM32Ipl_ReadImage+0x10a>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 8016ab8:	4601      	mov	r1, r0
 8016aba:	4603      	mov	r3, r0
 8016abc:	4602      	mov	r2, r0
 8016abe:	9000      	str	r0, [sp, #0]
 8016ac0:	9803      	ldr	r0, [sp, #12]
 8016ac2:	f7ff fbcd 	bl	8016260 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	a82a      	add	r0, sp, #168	; 0xa8
 8016aca:	f7fe fceb 	bl	80154a4 <f_lseek>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	f040 817d 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
	if ((f_read(fp, header, sizeof(header), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(header))
 8016ad4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8016ad8:	ac1c      	add	r4, sp, #112	; 0x70
 8016ada:	2236      	movs	r2, #54	; 0x36
 8016adc:	a82a      	add	r0, sp, #168	; 0xa8
 8016ade:	464b      	mov	r3, r9
 8016ae0:	4621      	mov	r1, r4
 8016ae2:	f7fe f9b9 	bl	8014e58 <f_read>
 8016ae6:	2800      	cmp	r0, #0
 8016ae8:	f040 816e 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016aec:	f8d9 3000 	ldr.w	r3, [r9]
 8016af0:	2b36      	cmp	r3, #54	; 0x36
 8016af2:	f040 8169 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8016af6:	7be2      	ldrb	r2, [r4, #15]
 8016af8:	7ba3      	ldrb	r3, [r4, #14]
 8016afa:	7c20      	ldrb	r0, [r4, #16]
 8016afc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8016b00:	7ae1      	ldrb	r1, [r4, #11]
 8016b02:	7aa2      	ldrb	r2, [r4, #10]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8016b04:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8016b08:	7c60      	ldrb	r0, [r4, #17]
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8016b0a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8016b0e:	7b21      	ldrb	r1, [r4, #12]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8016b10:	eb03 6300 	add.w	r3, r3, r0, lsl #24
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8016b14:	7b60      	ldrb	r0, [r4, #13]
 8016b16:	eb02 4201 	add.w	r2, r2, r1, lsl #16
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8016b1a:	2b34      	cmp	r3, #52	; 0x34
 8016b1c:	f023 0110 	bic.w	r1, r3, #16
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8016b20:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8016b24:	9206      	str	r2, [sp, #24]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8016b26:	d004      	beq.n	8016b32 <STM32Ipl_ReadImage+0x1ba>
 8016b28:	2928      	cmp	r1, #40	; 0x28
 8016b2a:	d002      	beq.n	8016b32 <STM32Ipl_ReadImage+0x1ba>
	&& (infoHeaderSize != 124)) /* BITMAPV5HEADER */
 8016b2c:	296c      	cmp	r1, #108	; 0x6c
 8016b2e:	f47f af66 	bne.w	80169fe <STM32Ipl_ReadImage+0x86>
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8016b32:	7ce3      	ldrb	r3, [r4, #19]
 8016b34:	f894 b012 	ldrb.w	fp, [r4, #18]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b38:	7de0      	ldrb	r0, [r4, #23]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8016b3a:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8016b3e:	7f61      	ldrb	r1, [r4, #29]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b40:	7da2      	ldrb	r2, [r4, #22]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8016b42:	7f23      	ldrb	r3, [r4, #28]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b44:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8016b48:	7d20      	ldrb	r0, [r4, #20]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8016b4a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b4e:	7e21      	ldrb	r1, [r4, #24]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8016b50:	eb0b 4b00 	add.w	fp, fp, r0, lsl #16
 8016b54:	7d60      	ldrb	r0, [r4, #21]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b56:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8016b5a:	7e61      	ldrb	r1, [r4, #25]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8016b5c:	b29b      	uxth	r3, r3
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b5e:	eb02 6201 	add.w	r2, r2, r1, lsl #24
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 8016b62:	2b18      	cmp	r3, #24
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8016b64:	eb0b 6b00 	add.w	fp, fp, r0, lsl #24
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8016b68:	9204      	str	r2, [sp, #16]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 8016b6a:	f63f af48 	bhi.w	80169fe <STM32Ipl_ReadImage+0x86>
 8016b6e:	4ac5      	ldr	r2, [pc, #788]	; (8016e84 <STM32Ipl_ReadImage+0x50c>)
 8016b70:	40da      	lsrs	r2, r3
 8016b72:	07d2      	lsls	r2, r2, #31
 8016b74:	f57f af43 	bpl.w	80169fe <STM32Ipl_ReadImage+0x86>
	compression = pHeader[30] + (pHeader[31] << 8) + (pHeader[32] << 16) + (pHeader[33] << 24);
 8016b78:	7fe1      	ldrb	r1, [r4, #31]
 8016b7a:	7fa2      	ldrb	r2, [r4, #30]
 8016b7c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016b80:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8016b84:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8016b88:	eb02 4200 	add.w	r2, r2, r0, lsl #16
	if (compression != BI_RGB && compression != BI_BITFIELDS)
 8016b8c:	eb12 6201 	adds.w	r2, r2, r1, lsl #24
 8016b90:	bf14      	ite	ne
 8016b92:	2701      	movne	r7, #1
 8016b94:	2700      	moveq	r7, #0
 8016b96:	2a03      	cmp	r2, #3
 8016b98:	d002      	beq.n	8016ba0 <STM32Ipl_ReadImage+0x228>
 8016b9a:	2f00      	cmp	r7, #0
 8016b9c:	f47f af2f 	bne.w	80169fe <STM32Ipl_ReadImage+0x86>
	colorUsed = pHeader[46] + (pHeader[47] << 8) + (pHeader[48] << 16) + (pHeader[49] << 24);
 8016ba0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8016ba4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8016ba8:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 8016bac:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8016bb0:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8016bb4:	eb01 4405 	add.w	r4, r1, r5, lsl #16
	if (colorUsed == 0)
 8016bb8:	eb14 6400 	adds.w	r4, r4, r0, lsl #24
 8016bbc:	d101      	bne.n	8016bc2 <STM32Ipl_ReadImage+0x24a>
		colorUsed = 1 << bitCount;
 8016bbe:	2401      	movs	r4, #1
 8016bc0:	409c      	lsls	r4, r3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 8016bc2:	fb03 f00b 	mul.w	r0, r3, fp
 8016bc6:	f110 011f 	adds.w	r1, r0, #31
 8016bca:	bf48      	it	mi
 8016bcc:	f100 013e 	addmi.w	r1, r0, #62	; 0x3e
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8016bd0:	2a03      	cmp	r2, #3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 8016bd2:	ea4f 1161 	mov.w	r1, r1, asr #5
 8016bd6:	ea4f 0a81 	mov.w	sl, r1, lsl #2
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8016bda:	f040 80fb 	bne.w	8016dd4 <STM32Ipl_ReadImage+0x45c>
 8016bde:	2b10      	cmp	r3, #16
 8016be0:	f040 80f8 	bne.w	8016dd4 <STM32Ipl_ReadImage+0x45c>
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016be4:	464b      	mov	r3, r9
 8016be6:	2204      	movs	r2, #4
 8016be8:	a82a      	add	r0, sp, #168	; 0xa8
 8016bea:	a9b6      	add	r1, sp, #728	; 0x2d8
 8016bec:	f7fe f934 	bl	8014e58 <f_read>
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	f040 80e9 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016bf6:	f8d9 2000 	ldr.w	r2, [r9]
 8016bfa:	2a04      	cmp	r2, #4
 8016bfc:	f040 80e4 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c00:	f89d 42d9 	ldrb.w	r4, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c04:	464b      	mov	r3, r9
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c06:	f89d 62d8 	ldrb.w	r6, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c0a:	a9b6      	add	r1, sp, #728	; 0x2d8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c0c:	f89d 02da 	ldrb.w	r0, [sp, #730]	; 0x2da
 8016c10:	eb06 2604 	add.w	r6, r6, r4, lsl #8
 8016c14:	f89d 42db 	ldrb.w	r4, [sp, #731]	; 0x2db
 8016c18:	eb06 4600 	add.w	r6, r6, r0, lsl #16
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c1c:	a82a      	add	r0, sp, #168	; 0xa8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c1e:	eb06 6604 	add.w	r6, r6, r4, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c22:	f7fe f919 	bl	8014e58 <f_read>
 8016c26:	2800      	cmp	r0, #0
 8016c28:	f040 80ce 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8016c30:	2a04      	cmp	r2, #4
 8016c32:	f040 80c9 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c36:	f89d 52d9 	ldrb.w	r5, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c3a:	464b      	mov	r3, r9
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c3c:	f89d 42d8 	ldrb.w	r4, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c40:	a9b6      	add	r1, sp, #728	; 0x2d8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c42:	f89d 02da 	ldrb.w	r0, [sp, #730]	; 0x2da
 8016c46:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8016c4a:	f89d 52db 	ldrb.w	r5, [sp, #731]	; 0x2db
 8016c4e:	eb04 4400 	add.w	r4, r4, r0, lsl #16
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c52:	a82a      	add	r0, sp, #168	; 0xa8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c54:	eb04 6405 	add.w	r4, r4, r5, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8016c58:	f7fe f8fe 	bl	8014e58 <f_read>
 8016c5c:	2800      	cmp	r0, #0
 8016c5e:	f040 80b3 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016c62:	f8d9 3000 	ldr.w	r3, [r9]
 8016c66:	2b04      	cmp	r3, #4
 8016c68:	f040 80ae 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
		bMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8016c6c:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
 8016c70:	f89d 52d8 	ldrb.w	r5, [sp, #728]	; 0x2d8
 8016c74:	f89d 22da 	ldrb.w	r2, [sp, #730]	; 0x2da
 8016c78:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8016c7c:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 8016c80:	eb05 4502 	add.w	r5, r5, r2, lsl #16
 8016c84:	eb05 6503 	add.w	r5, r5, r3, lsl #24
			if (f_lseek(fp, dataOffset) != FR_OK)
 8016c88:	9906      	ldr	r1, [sp, #24]
 8016c8a:	a82a      	add	r0, sp, #168	; 0xa8
 8016c8c:	f7fe fc0a 	bl	80154a4 <f_lseek>
 8016c90:	2800      	cmp	r0, #0
 8016c92:	f040 809c 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
			outData = xalloc(width * abs(height) * 2);
 8016c96:	9b04      	ldr	r3, [sp, #16]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	bfb8      	it	lt
 8016c9c:	425b      	neglt	r3, r3
 8016c9e:	fb03 f00b 	mul.w	r0, r3, fp
 8016ca2:	9307      	str	r3, [sp, #28]
 8016ca4:	0040      	lsls	r0, r0, #1
 8016ca6:	f001 f837 	bl	8017d18 <xalloc>
			if (!outData)
 8016caa:	9010      	str	r0, [sp, #64]	; 0x40
 8016cac:	2800      	cmp	r0, #0
 8016cae:	f000 8579 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 8016cb2:	4650      	mov	r0, sl
 8016cb4:	f001 f830 	bl	8017d18 <xalloc>
			if (!lineData) {
 8016cb8:	4680      	mov	r8, r0
 8016cba:	2800      	cmp	r0, #0
 8016cbc:	f000 877a 	beq.w	8017bb4 <STM32Ipl_ReadImage+0x123c>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8016cc0:	9b04      	ldr	r3, [sp, #16]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	f340 8528 	ble.w	8017718 <STM32Ipl_ReadImage+0xda0>
 8016cc8:	3b01      	subs	r3, #1
 8016cca:	9a06      	ldr	r2, [sp, #24]
 8016ccc:	fb0a 2303 	mla	r3, sl, r3, r2
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	9305      	str	r3, [sp, #20]
			if (f_lseek(fp, line) != FR_OK) {
 8016cd4:	a82a      	add	r0, sp, #168	; 0xa8
 8016cd6:	f7fe fbe5 	bl	80154a4 <f_lseek>
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	f040 8761 	bne.w	8017ba2 <STM32Ipl_ReadImage+0x122a>
			for (uint32_t i = 0; i < abs(height); i++) {
 8016ce0:	9b07      	ldr	r3, [sp, #28]
 8016ce2:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ce4:	9b04      	ldr	r3, [sp, #16]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	f000 871d 	beq.w	8017b26 <STM32Ipl_ReadImage+0x11ae>
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8016cec:	463a      	mov	r2, r7
 8016cee:	f02b 0301 	bic.w	r3, fp, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8016cf2:	960d      	str	r6, [sp, #52]	; 0x34
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8016cf4:	f5b6 4f78 	cmp.w	r6, #63488	; 0xf800
 8016cf8:	bf14      	ite	ne
 8016cfa:	2200      	movne	r2, #0
 8016cfc:	f002 0201 	andeq.w	r2, r2, #1
							&& (bMask == RGB565_BLUE_MASK))
 8016d00:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
 8016d04:	bf08      	it	eq
 8016d06:	2d1f      	cmpeq	r5, #31
 8016d08:	9311      	str	r3, [sp, #68]	; 0x44
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8016d0a:	465e      	mov	r6, fp
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8016d0c:	920a      	str	r2, [sp, #40]	; 0x28
							&& (bMask == RGB565_BLUE_MASK))
 8016d0e:	bf0c      	ite	eq
 8016d10:	2201      	moveq	r2, #1
 8016d12:	2200      	movne	r2, #0
 8016d14:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016d16:	920c      	str	r2, [sp, #48]	; 0x30
 8016d18:	005a      	lsls	r2, r3, #1
 8016d1a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016d1e:	9208      	str	r2, [sp, #32]
 8016d20:	9309      	str	r3, [sp, #36]	; 0x24
 8016d22:	f108 0303 	add.w	r3, r8, #3
 8016d26:	930e      	str	r3, [sp, #56]	; 0x38
 8016d28:	ea4f 035b 	mov.w	r3, fp, lsr #1
 8016d2c:	9312      	str	r3, [sp, #72]	; 0x48
 8016d2e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d34:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8016d38:	4683      	mov	fp, r0
 8016d3a:	930b      	str	r3, [sp, #44]	; 0x2c
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8016d3c:	464b      	mov	r3, r9
 8016d3e:	4652      	mov	r2, sl
 8016d40:	4641      	mov	r1, r8
 8016d42:	a82a      	add	r0, sp, #168	; 0xa8
 8016d44:	f7fe f888 	bl	8014e58 <f_read>
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	f040 837b 	bne.w	8017444 <STM32Ipl_ReadImage+0xacc>
 8016d4e:	f8d9 3000 	ldr.w	r3, [r9]
 8016d52:	459a      	cmp	sl, r3
 8016d54:	f040 8376 	bne.w	8017444 <STM32Ipl_ReadImage+0xacc>
				for (uint32_t j = 0; j < width; j++) {
 8016d58:	b1be      	cbz	r6, 8016d8a <STM32Ipl_ReadImage+0x412>
 8016d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d5c:	2900      	cmp	r1, #0
 8016d5e:	f040 82ea 	bne.w	8017336 <STM32Ipl_ReadImage+0x9be>
 8016d62:	f1a8 0c02 	sub.w	ip, r8, #2
 8016d66:	4638      	mov	r0, r7
 8016d68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
					uint16_t value = *inPixel;
 8016d6a:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8016d6e:	ea42 0e04 	orr.w	lr, r2, r4
				for (uint32_t j = 0; j < width; j++) {
 8016d72:	3101      	adds	r1, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8016d74:	ea0e 0e03 	and.w	lr, lr, r3
 8016d78:	402b      	ands	r3, r5
				for (uint32_t j = 0; j < width; j++) {
 8016d7a:	428e      	cmp	r6, r1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8016d7c:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8016d80:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8016d84:	d1f1      	bne.n	8016d6a <STM32Ipl_ReadImage+0x3f2>
 8016d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d88:	441f      	add	r7, r3
				if (height > 0) {
 8016d8a:	9b04      	ldr	r3, [sp, #16]
 8016d8c:	2b00      	cmp	r3, #0
					line -= lineSize;
 8016d8e:	9b05      	ldr	r3, [sp, #20]
				if (height > 0) {
 8016d90:	f340 82e9 	ble.w	8017366 <STM32Ipl_ReadImage+0x9ee>
					line -= lineSize;
 8016d94:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8016d98:	9a06      	ldr	r2, [sp, #24]
 8016d9a:	429a      	cmp	r2, r3
					line -= lineSize;
 8016d9c:	9305      	str	r3, [sp, #20]
					if (line >= dataOffset) {
 8016d9e:	f240 8302 	bls.w	80173a6 <STM32Ipl_ReadImage+0xa2e>
			for (uint32_t i = 0; i < abs(height); i++) {
 8016da2:	f10b 0b01 	add.w	fp, fp, #1
 8016da6:	9b07      	ldr	r3, [sp, #28]
 8016da8:	459b      	cmp	fp, r3
 8016daa:	d1c7      	bne.n	8016d3c <STM32Ipl_ReadImage+0x3c4>
 8016dac:	46b3      	mov	fp, r6
			xfree(lineData);
 8016dae:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8016db0:	2700      	movs	r7, #0
			xfree(lineData);
 8016db2:	f000 ffbf 	bl	8017d34 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8016db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016dba:	4659      	mov	r1, fp
 8016dbc:	9300      	str	r3, [sp, #0]
 8016dbe:	2302      	movs	r3, #2
 8016dc0:	9803      	ldr	r0, [sp, #12]
 8016dc2:	f7ff fa4d 	bl	8016260 <STM32Ipl_Init>
			break;
 8016dc6:	e61c      	b.n	8016a02 <STM32Ipl_ReadImage+0x8a>
									return stm32ipl_err_ReadingFile;
 8016dc8:	f06f 0707 	mvn.w	r7, #7
 8016dcc:	e619      	b.n	8016a02 <STM32Ipl_ReadImage+0x8a>
		return stm32ipl_err_SeekingFile;
 8016dce:	f06f 0709 	mvn.w	r7, #9
 8016dd2:	e616      	b.n	8016a02 <STM32Ipl_ReadImage+0x8a>
	switch (bitCount) {
 8016dd4:	3b01      	subs	r3, #1
 8016dd6:	2b17      	cmp	r3, #23
 8016dd8:	f63f ae11 	bhi.w	80169fe <STM32Ipl_ReadImage+0x86>
 8016ddc:	a201      	add	r2, pc, #4	; (adr r2, 8016de4 <STM32Ipl_ReadImage+0x46c>)
 8016dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016de2:	bf00      	nop
 8016de4:	080171f7 	.word	0x080171f7
 8016de8:	080169ff 	.word	0x080169ff
 8016dec:	080169ff 	.word	0x080169ff
 8016df0:	080170e7 	.word	0x080170e7
 8016df4:	080169ff 	.word	0x080169ff
 8016df8:	080169ff 	.word	0x080169ff
 8016dfc:	080169ff 	.word	0x080169ff
 8016e00:	08016fbd 	.word	0x08016fbd
 8016e04:	080169ff 	.word	0x080169ff
 8016e08:	080169ff 	.word	0x080169ff
 8016e0c:	080169ff 	.word	0x080169ff
 8016e10:	080169ff 	.word	0x080169ff
 8016e14:	080169ff 	.word	0x080169ff
 8016e18:	080169ff 	.word	0x080169ff
 8016e1c:	080169ff 	.word	0x080169ff
 8016e20:	08016e45 	.word	0x08016e45
 8016e24:	080169ff 	.word	0x080169ff
 8016e28:	080169ff 	.word	0x080169ff
 8016e2c:	080169ff 	.word	0x080169ff
 8016e30:	080169ff 	.word	0x080169ff
 8016e34:	080169ff 	.word	0x080169ff
 8016e38:	080169ff 	.word	0x080169ff
 8016e3c:	080169ff 	.word	0x080169ff
 8016e40:	08016ef1 	.word	0x08016ef1
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8016e44:	251f      	movs	r5, #31
 8016e46:	f44f 7478 	mov.w	r4, #992	; 0x3e0
 8016e4a:	f44f 46f8 	mov.w	r6, #31744	; 0x7c00
 8016e4e:	e71b      	b.n	8016c88 <STM32Ipl_ReadImage+0x310>
			if (mode == EAT_COMMENT) {
 8016e50:	2f01      	cmp	r7, #1
 8016e52:	d00d      	beq.n	8016e70 <STM32Ipl_ReadImage+0x4f8>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8016e54:	782b      	ldrb	r3, [r5, #0]
 8016e56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016e5a:	b2d1      	uxtb	r1, r2
 8016e5c:	2909      	cmp	r1, #9
 8016e5e:	d813      	bhi.n	8016e88 <STM32Ipl_ReadImage+0x510>
						number = (number * 10) + sector[0] - '0';
 8016e60:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8016e64:	2702      	movs	r7, #2
 8016e66:	eb02 0646 	add.w	r6, r2, r6, lsl #1
	} while (!valid);
 8016e6a:	e60a      	b.n	8016a82 <STM32Ipl_ReadImage+0x10a>
				mode = EAT_COMMENT;
 8016e6c:	461f      	mov	r7, r3
 8016e6e:	e608      	b.n	8016a82 <STM32Ipl_ReadImage+0x10a>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8016e70:	782f      	ldrb	r7, [r5, #0]
 8016e72:	2f0d      	cmp	r7, #13
 8016e74:	bf18      	it	ne
 8016e76:	2f0a      	cmpne	r7, #10
 8016e78:	bf0c      	ite	eq
 8016e7a:	2701      	moveq	r7, #1
 8016e7c:	2700      	movne	r7, #0
				mode = EAT_COMMENT;
 8016e7e:	f087 0701 	eor.w	r7, r7, #1
 8016e82:	e5fe      	b.n	8016a82 <STM32Ipl_ReadImage+0x10a>
 8016e84:	01010112 	.word	0x01010112
	mode = EAT_WHITESPACE;
 8016e88:	4607      	mov	r7, r0
	number = 0;
 8016e8a:	4683      	mov	fp, r0
 8016e8c:	461a      	mov	r2, r3
		if (mode == EAT_WHITESPACE) {
 8016e8e:	b9af      	cbnz	r7, 8016ebc <STM32Ipl_ReadImage+0x544>
			if (sector[0] == '#') {
 8016e90:	2a23      	cmp	r2, #35	; 0x23
 8016e92:	d022      	beq.n	8016eda <STM32Ipl_ReadImage+0x562>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8016e94:	3a30      	subs	r2, #48	; 0x30
 8016e96:	b2d3      	uxtb	r3, r2
 8016e98:	2b09      	cmp	r3, #9
 8016e9a:	d801      	bhi.n	8016ea0 <STM32Ipl_ReadImage+0x528>
					number = sector[0] - '0';
 8016e9c:	4693      	mov	fp, r2
					mode = EAT_NUMBER;
 8016e9e:	2702      	movs	r7, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8016ea0:	4623      	mov	r3, r4
 8016ea2:	2201      	movs	r2, #1
 8016ea4:	4629      	mov	r1, r5
 8016ea6:	a82a      	add	r0, sp, #168	; 0xa8
 8016ea8:	f7fd ffd6 	bl	8014e58 <f_read>
 8016eac:	2800      	cmp	r0, #0
 8016eae:	d18b      	bne.n	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016eb0:	6823      	ldr	r3, [r4, #0]
 8016eb2:	2b01      	cmp	r3, #1
 8016eb4:	d188      	bne.n	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016eb6:	782a      	ldrb	r2, [r5, #0]
		if (mode == EAT_WHITESPACE) {
 8016eb8:	2f00      	cmp	r7, #0
 8016eba:	d0e9      	beq.n	8016e90 <STM32Ipl_ReadImage+0x518>
			if (mode == EAT_COMMENT) {
 8016ebc:	2f01      	cmp	r7, #1
 8016ebe:	d00e      	beq.n	8016ede <STM32Ipl_ReadImage+0x566>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8016ec0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016ec4:	2b09      	cmp	r3, #9
 8016ec6:	f200 827f 	bhi.w	80173c8 <STM32Ipl_ReadImage+0xa50>
						number = (number * 10) + sector[0] - '0';
 8016eca:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8016ece:	2702      	movs	r7, #2
 8016ed0:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 8016ed4:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
	} while (!valid);
 8016ed8:	e7e2      	b.n	8016ea0 <STM32Ipl_ReadImage+0x528>
				mode = EAT_COMMENT;
 8016eda:	2701      	movs	r7, #1
 8016edc:	e7e0      	b.n	8016ea0 <STM32Ipl_ReadImage+0x528>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8016ede:	2a0d      	cmp	r2, #13
 8016ee0:	bf18      	it	ne
 8016ee2:	2a0a      	cmpne	r2, #10
 8016ee4:	bf0c      	ite	eq
 8016ee6:	2201      	moveq	r2, #1
 8016ee8:	2200      	movne	r2, #0
				mode = EAT_COMMENT;
 8016eea:	f082 0701 	eor.w	r7, r2, #1
 8016eee:	e7d7      	b.n	8016ea0 <STM32Ipl_ReadImage+0x528>
			if (f_lseek(fp, dataOffset) != FR_OK)
 8016ef0:	9906      	ldr	r1, [sp, #24]
 8016ef2:	a82a      	add	r0, sp, #168	; 0xa8
			uint32_t outLineSize = width * 3;
 8016ef4:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
			if (f_lseek(fp, dataOffset) != FR_OK)
 8016ef8:	f7fe fad4 	bl	80154a4 <f_lseek>
 8016efc:	2800      	cmp	r0, #0
 8016efe:	f47f af66 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
			outData = xalloc(outLineSize * abs(height));
 8016f02:	9b04      	ldr	r3, [sp, #16]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	bfb8      	it	lt
 8016f08:	425b      	neglt	r3, r3
 8016f0a:	fb03 f006 	mul.w	r0, r3, r6
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	f000 ff02 	bl	8017d18 <xalloc>
			if (!outData)
 8016f14:	9007      	str	r0, [sp, #28]
 8016f16:	2800      	cmp	r0, #0
 8016f18:	f000 8444 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 8016f1c:	4650      	mov	r0, sl
 8016f1e:	f000 fefb 	bl	8017d18 <xalloc>
			if (!lineData) {
 8016f22:	4605      	mov	r5, r0
 8016f24:	2800      	cmp	r0, #0
 8016f26:	f000 8631 	beq.w	8017b8c <STM32Ipl_ReadImage+0x1214>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8016f2a:	9b04      	ldr	r3, [sp, #16]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f340 83f8 	ble.w	8017722 <STM32Ipl_ReadImage+0xdaa>
 8016f32:	1e5f      	subs	r7, r3, #1
 8016f34:	9b06      	ldr	r3, [sp, #24]
 8016f36:	fb0a 3707 	mla	r7, sl, r7, r3
			if (f_lseek(fp, line) != FR_OK) {
 8016f3a:	4639      	mov	r1, r7
 8016f3c:	a82a      	add	r0, sp, #168	; 0xa8
 8016f3e:	f7fe fab1 	bl	80154a4 <f_lseek>
 8016f42:	bb90      	cbnz	r0, 8016faa <STM32Ipl_ReadImage+0x632>
			for (uint32_t i = 0; i < abs(height); i++) {
 8016f44:	9b04      	ldr	r3, [sp, #16]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	f000 8416 	beq.w	8017778 <STM32Ipl_ReadImage+0xe00>
 8016f4c:	4604      	mov	r4, r0
 8016f4e:	f340 83ea 	ble.w	8017726 <STM32Ipl_ReadImage+0xdae>
 8016f52:	f8cd b010 	str.w	fp, [sp, #16]
 8016f56:	46ab      	mov	fp, r5
 8016f58:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016f5c:	9d06      	ldr	r5, [sp, #24]
 8016f5e:	e003      	b.n	8016f68 <STM32Ipl_ReadImage+0x5f0>
 8016f60:	9b05      	ldr	r3, [sp, #20]
 8016f62:	42a3      	cmp	r3, r4
 8016f64:	f000 8405 	beq.w	8017772 <STM32Ipl_ReadImage+0xdfa>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8016f68:	464b      	mov	r3, r9
 8016f6a:	4652      	mov	r2, sl
 8016f6c:	4659      	mov	r1, fp
 8016f6e:	a82a      	add	r0, sp, #168	; 0xa8
 8016f70:	f7fd ff72 	bl	8014e58 <f_read>
 8016f74:	4603      	mov	r3, r0
					line -= lineSize;
 8016f76:	eba7 070a 	sub.w	r7, r7, sl
				memcpy(outPixel, lineData, outLineSize);
 8016f7a:	4640      	mov	r0, r8
			for (uint32_t i = 0; i < abs(height); i++) {
 8016f7c:	3401      	adds	r4, #1
				memcpy(outPixel, lineData, outLineSize);
 8016f7e:	4632      	mov	r2, r6
 8016f80:	4659      	mov	r1, fp
				outPixel += outLineSize;
 8016f82:	44b0      	add	r8, r6
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f040 83f2 	bne.w	801776e <STM32Ipl_ReadImage+0xdf6>
 8016f8a:	f8d9 3000 	ldr.w	r3, [r9]
 8016f8e:	459a      	cmp	sl, r3
 8016f90:	f040 83ed 	bne.w	801776e <STM32Ipl_ReadImage+0xdf6>
				memcpy(outPixel, lineData, outLineSize);
 8016f94:	f00b f912 	bl	80221bc <memcpy>
					if (line >= dataOffset) {
 8016f98:	42bd      	cmp	r5, r7
 8016f9a:	d8e1      	bhi.n	8016f60 <STM32Ipl_ReadImage+0x5e8>
						if (f_lseek(fp, line) != FR_OK) {
 8016f9c:	4639      	mov	r1, r7
 8016f9e:	a82a      	add	r0, sp, #168	; 0xa8
 8016fa0:	f7fe fa80 	bl	80154a4 <f_lseek>
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d0db      	beq.n	8016f60 <STM32Ipl_ReadImage+0x5e8>
 8016fa8:	465d      	mov	r5, fp
							xfree(lineData);
 8016faa:	4628      	mov	r0, r5
							return stm32ipl_err_SeekingFile;
 8016fac:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 8016fb0:	f000 fec0 	bl	8017d34 <xfree>
							xfree(outData);
 8016fb4:	9807      	ldr	r0, [sp, #28]
 8016fb6:	f000 febd 	bl	8017d34 <xfree>
							return stm32ipl_err_SeekingFile;
 8016fba:	e522      	b.n	8016a02 <STM32Ipl_ReadImage+0x8a>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8016fbc:	9b06      	ldr	r3, [sp, #24]
 8016fbe:	a82a      	add	r0, sp, #168	; 0xa8
			paletteSize = colorUsed * sizeof(uint32_t);
 8016fc0:	00a6      	lsls	r6, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8016fc2:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8016fc6:	f7fe fa6d 	bl	80154a4 <f_lseek>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	f47f aeff 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8016fd0:	adb6      	add	r5, sp, #728	; 0x2d8
 8016fd2:	464b      	mov	r3, r9
 8016fd4:	4632      	mov	r2, r6
 8016fd6:	a82a      	add	r0, sp, #168	; 0xa8
 8016fd8:	4629      	mov	r1, r5
 8016fda:	f7fd ff3d 	bl	8014e58 <f_read>
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	f47f aef2 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8016fe4:	f8d9 3000 	ldr.w	r3, [r9]
 8016fe8:	429e      	cmp	r6, r3
 8016fea:	f47f aeed 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8016fee:	4602      	mov	r2, r0
 8016ff0:	4629      	mov	r1, r5
		uint8_t b = palette[i];
 8016ff2:	f851 3b04 	ldr.w	r3, [r1], #4
	for (uint32_t i = 0; i < colorUsed; i++) {
 8016ff6:	3201      	adds	r2, #1
		uint8_t b = palette[i];
 8016ff8:	b2d8      	uxtb	r0, r3
		if ((b != g) | (b != r))
 8016ffa:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8016ffe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8017002:	4286      	cmp	r6, r0
 8017004:	f040 844d 	bne.w	80178a2 <STM32Ipl_ReadImage+0xf2a>
 8017008:	1a1b      	subs	r3, r3, r0
 801700a:	bf18      	it	ne
 801700c:	2301      	movne	r3, #1
 801700e:	2b00      	cmp	r3, #0
 8017010:	f040 8447 	bne.w	80178a2 <STM32Ipl_ReadImage+0xf2a>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8017014:	4294      	cmp	r4, r2
 8017016:	d1ec      	bne.n	8016ff2 <STM32Ipl_ReadImage+0x67a>
				outData = xalloc(width * abs(height));
 8017018:	461f      	mov	r7, r3
 801701a:	9b04      	ldr	r3, [sp, #16]
 801701c:	2b00      	cmp	r3, #0
 801701e:	bfb8      	it	lt
 8017020:	425b      	neglt	r3, r3
 8017022:	fb03 f00b 	mul.w	r0, r3, fp
 8017026:	9305      	str	r3, [sp, #20]
 8017028:	f000 fe76 	bl	8017d18 <xalloc>
				if (!outData)
 801702c:	9007      	str	r0, [sp, #28]
 801702e:	2800      	cmp	r0, #0
 8017030:	f000 83b8 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 8017034:	4650      	mov	r0, sl
 8017036:	f000 fe6f 	bl	8017d18 <xalloc>
				if (!lineData) {
 801703a:	4606      	mov	r6, r0
 801703c:	2800      	cmp	r0, #0
 801703e:	f000 85a5 	beq.w	8017b8c <STM32Ipl_ReadImage+0x1214>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017042:	9b04      	ldr	r3, [sp, #16]
 8017044:	2b00      	cmp	r3, #0
 8017046:	dd02      	ble.n	801704e <STM32Ipl_ReadImage+0x6d6>
 8017048:	1e5f      	subs	r7, r3, #1
 801704a:	fb0a f707 	mul.w	r7, sl, r7
 801704e:	9b06      	ldr	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 8017050:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017052:	441f      	add	r7, r3
				if (f_lseek(fp, line) != FR_OK) {
 8017054:	4639      	mov	r1, r7
 8017056:	f7fe fa25 	bl	80154a4 <f_lseek>
 801705a:	2800      	cmp	r0, #0
 801705c:	f040 8417 	bne.w	801788e <STM32Ipl_ReadImage+0xf16>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017060:	9b05      	ldr	r3, [sp, #20]
 8017062:	9308      	str	r3, [sp, #32]
 8017064:	9b04      	ldr	r3, [sp, #16]
 8017066:	2b00      	cmp	r3, #0
 8017068:	f000 85ad 	beq.w	8017bc6 <STM32Ipl_ReadImage+0x124e>
					for (uint32_t j = 0; j < width; j++)
 801706c:	464b      	mov	r3, r9
				for (uint32_t i = 0; i < abs(height); i++) {
 801706e:	4680      	mov	r8, r0
					for (uint32_t j = 0; j < width; j++)
 8017070:	46d1      	mov	r9, sl
 8017072:	9c07      	ldr	r4, [sp, #28]
 8017074:	469a      	mov	sl, r3
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8017076:	4653      	mov	r3, sl
 8017078:	464a      	mov	r2, r9
 801707a:	4631      	mov	r1, r6
 801707c:	a82a      	add	r0, sp, #168	; 0xa8
 801707e:	f7fd feeb 	bl	8014e58 <f_read>
 8017082:	2800      	cmp	r0, #0
 8017084:	f040 8552 	bne.w	8017b2c <STM32Ipl_ReadImage+0x11b4>
 8017088:	f8da 1000 	ldr.w	r1, [sl]
 801708c:	4589      	cmp	r9, r1
 801708e:	f040 854d 	bne.w	8017b2c <STM32Ipl_ReadImage+0x11b4>
					for (uint32_t j = 0; j < width; j++)
 8017092:	f1bb 0f00 	cmp.w	fp, #0
 8017096:	d00a      	beq.n	80170ae <STM32Ipl_ReadImage+0x736>
 8017098:	eb04 0c0b 	add.w	ip, r4, fp
 801709c:	4631      	mov	r1, r6
						*outPixel++ = palette[*ptr++];
 801709e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80170a6:	f804 3b01 	strb.w	r3, [r4], #1
					for (uint32_t j = 0; j < width; j++)
 80170aa:	4564      	cmp	r4, ip
 80170ac:	d1f7      	bne.n	801709e <STM32Ipl_ReadImage+0x726>
					if (height > 0) {
 80170ae:	9b04      	ldr	r3, [sp, #16]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f340 8375 	ble.w	80177a0 <STM32Ipl_ReadImage+0xe28>
						line -= lineSize;
 80170b6:	eba7 0709 	sub.w	r7, r7, r9
						if (line >= dataOffset) {
 80170ba:	9b06      	ldr	r3, [sp, #24]
 80170bc:	42bb      	cmp	r3, r7
 80170be:	f240 83df 	bls.w	8017880 <STM32Ipl_ReadImage+0xf08>
				for (uint32_t i = 0; i < abs(height); i++) {
 80170c2:	f108 0801 	add.w	r8, r8, #1
 80170c6:	9b05      	ldr	r3, [sp, #20]
 80170c8:	4598      	cmp	r8, r3
 80170ca:	d1d4      	bne.n	8017076 <STM32Ipl_ReadImage+0x6fe>
				xfree(lineData);
 80170cc:	4630      	mov	r0, r6
 80170ce:	f000 fe31 	bl	8017d34 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_GRAYSCALE, outData);
 80170d2:	9b07      	ldr	r3, [sp, #28]
 80170d4:	9a08      	ldr	r2, [sp, #32]
 80170d6:	4659      	mov	r1, fp
 80170d8:	9300      	str	r3, [sp, #0]
 80170da:	2301      	movs	r3, #1
 80170dc:	9803      	ldr	r0, [sp, #12]
 80170de:	f7ff f8bf 	bl	8016260 <STM32Ipl_Init>
	return stm32ipl_err_Ok;
 80170e2:	2700      	movs	r7, #0
 80170e4:	e48d      	b.n	8016a02 <STM32Ipl_ReadImage+0x8a>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 80170e6:	9b06      	ldr	r3, [sp, #24]
 80170e8:	a82a      	add	r0, sp, #168	; 0xa8
 80170ea:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 80170ee:	f7fe f9d9 	bl	80154a4 <f_lseek>
			paletteSize = colorUsed * sizeof(uint32_t);
 80170f2:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 80170f4:	2800      	cmp	r0, #0
 80170f6:	f47f ae6a 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 80170fa:	adb6      	add	r5, sp, #728	; 0x2d8
 80170fc:	464b      	mov	r3, r9
 80170fe:	4622      	mov	r2, r4
 8017100:	a82a      	add	r0, sp, #168	; 0xa8
 8017102:	4629      	mov	r1, r5
 8017104:	f7fd fea8 	bl	8014e58 <f_read>
 8017108:	2800      	cmp	r0, #0
 801710a:	f47f ae5d 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 801710e:	f8d9 3000 	ldr.w	r3, [r9]
 8017112:	429c      	cmp	r4, r3
 8017114:	f47f ae58 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
			outData = xalloc(width * abs(height) * 2);
 8017118:	9b04      	ldr	r3, [sp, #16]
 801711a:	2b00      	cmp	r3, #0
 801711c:	bfb8      	it	lt
 801711e:	425b      	neglt	r3, r3
 8017120:	fb03 f00b 	mul.w	r0, r3, fp
 8017124:	9308      	str	r3, [sp, #32]
 8017126:	0040      	lsls	r0, r0, #1
 8017128:	f000 fdf6 	bl	8017d18 <xalloc>
			if (!outData)
 801712c:	9009      	str	r0, [sp, #36]	; 0x24
 801712e:	2800      	cmp	r0, #0
 8017130:	f000 8338 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 8017134:	4650      	mov	r0, sl
 8017136:	f000 fdef 	bl	8017d18 <xalloc>
			if (!lineData) {
 801713a:	4680      	mov	r8, r0
 801713c:	2800      	cmp	r0, #0
 801713e:	f000 851e 	beq.w	8017b7e <STM32Ipl_ReadImage+0x1206>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017142:	9b04      	ldr	r3, [sp, #16]
 8017144:	2b00      	cmp	r3, #0
 8017146:	f340 84e9 	ble.w	8017b1c <STM32Ipl_ReadImage+0x11a4>
 801714a:	3b01      	subs	r3, #1
 801714c:	9a06      	ldr	r2, [sp, #24]
 801714e:	fb0a 2303 	mla	r3, sl, r3, r2
 8017152:	4619      	mov	r1, r3
 8017154:	9305      	str	r3, [sp, #20]
			if (f_lseek(fp, line) != FR_OK) {
 8017156:	a82a      	add	r0, sp, #168	; 0xa8
 8017158:	f7fe f9a4 	bl	80154a4 <f_lseek>
 801715c:	2800      	cmp	r0, #0
 801715e:	f040 8373 	bne.w	8017848 <STM32Ipl_ReadImage+0xed0>
			for (uint32_t i = 0; i < abs(height); i++) {
 8017162:	9b08      	ldr	r3, [sp, #32]
 8017164:	930a      	str	r3, [sp, #40]	; 0x28
 8017166:	9b04      	ldr	r3, [sp, #16]
 8017168:	2b00      	cmp	r3, #0
 801716a:	f000 8521 	beq.w	8017bb0 <STM32Ipl_ReadImage+0x1238>
				for (uint32_t j = 0; j < width;) {
 801716e:	9c09      	ldr	r4, [sp, #36]	; 0x24
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8017170:	465f      	mov	r7, fp
 8017172:	4eca      	ldr	r6, [pc, #808]	; (801749c <STM32Ipl_ReadImage+0xb24>)
			for (uint32_t i = 0; i < abs(height); i++) {
 8017174:	9007      	str	r0, [sp, #28]
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8017176:	464b      	mov	r3, r9
 8017178:	4652      	mov	r2, sl
 801717a:	4641      	mov	r1, r8
 801717c:	a82a      	add	r0, sp, #168	; 0xa8
 801717e:	f7fd fe6b 	bl	8014e58 <f_read>
 8017182:	2800      	cmp	r0, #0
 8017184:	f040 84c0 	bne.w	8017b08 <STM32Ipl_ReadImage+0x1190>
 8017188:	f8d9 3000 	ldr.w	r3, [r9]
 801718c:	459a      	cmp	sl, r3
 801718e:	f040 84bb 	bne.w	8017b08 <STM32Ipl_ReadImage+0x1190>
				for (uint32_t j = 0; j < width;) {
 8017192:	2f00      	cmp	r7, #0
 8017194:	f000 8160 	beq.w	8017458 <STM32Ipl_ReadImage+0xae0>
 8017198:	4603      	mov	r3, r0
 801719a:	46c6      	mov	lr, r8
 801719c:	e004      	b.n	80171a8 <STM32Ipl_ReadImage+0x830>
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801719e:	3402      	adds	r4, #2
					j++;
 80171a0:	3302      	adds	r3, #2
				for (uint32_t j = 0; j < width;) {
 80171a2:	42bb      	cmp	r3, r7
 80171a4:	f080 8158 	bcs.w	8017458 <STM32Ipl_ReadImage+0xae0>
					uint8_t value = (*ptr++);
 80171a8:	f81e 0b01 	ldrb.w	r0, [lr], #1
					if (j < width) {
 80171ac:	f103 0c01 	add.w	ip, r3, #1
					uint8_t r = palette[index] >> 16;
 80171b0:	0902      	lsrs	r2, r0, #4
					if (j < width) {
 80171b2:	45bc      	cmp	ip, r7
						r = palette[index] >> 16;
 80171b4:	f000 000f 	and.w	r0, r0, #15
					uint8_t r = palette[index] >> 16;
 80171b8:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 80171bc:	ea06 2b11 	and.w	fp, r6, r1, lsr #8
 80171c0:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 80171c4:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80171c8:	ea42 020b 	orr.w	r2, r2, fp
 80171cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80171d0:	ea42 0201 	orr.w	r2, r2, r1
 80171d4:	8022      	strh	r2, [r4, #0]
					if (j < width) {
 80171d6:	d2e2      	bcs.n	801719e <STM32Ipl_ReadImage+0x826>
						r = palette[index] >> 16;
 80171d8:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 80171dc:	3404      	adds	r4, #4
 80171de:	ea06 2012 	and.w	r0, r6, r2, lsr #8
 80171e2:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 80171e6:	0952      	lsrs	r2, r2, #5
 80171e8:	4301      	orrs	r1, r0
 80171ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80171ee:	430a      	orrs	r2, r1
 80171f0:	f824 2c02 	strh.w	r2, [r4, #-2]
 80171f4:	e7d4      	b.n	80171a0 <STM32Ipl_ReadImage+0x828>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 80171f6:	9b06      	ldr	r3, [sp, #24]
 80171f8:	a82a      	add	r0, sp, #168	; 0xa8
 80171fa:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 80171fe:	f7fe f951 	bl	80154a4 <f_lseek>
			paletteSize = colorUsed * sizeof(uint32_t);
 8017202:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8017204:	2800      	cmp	r0, #0
 8017206:	f47f ade2 	bne.w	8016dce <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 801720a:	adb6      	add	r5, sp, #728	; 0x2d8
 801720c:	464b      	mov	r3, r9
 801720e:	4622      	mov	r2, r4
 8017210:	a82a      	add	r0, sp, #168	; 0xa8
 8017212:	4629      	mov	r1, r5
 8017214:	f7fd fe20 	bl	8014e58 <f_read>
 8017218:	2800      	cmp	r0, #0
 801721a:	f47f add5 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 801721e:	f8d9 3000 	ldr.w	r3, [r9]
 8017222:	429c      	cmp	r4, r3
 8017224:	f47f add0 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 8017228:	682b      	ldr	r3, [r5, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	f040 83bd 	bne.w	80179aa <STM32Ipl_ReadImage+0x1032>
 8017230:	686a      	ldr	r2, [r5, #4]
 8017232:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017236:	429a      	cmp	r2, r3
 8017238:	f000 83c0 	beq.w	80179bc <STM32Ipl_ReadImage+0x1044>
				outData = xalloc(width * abs(height) * 2);
 801723c:	9b04      	ldr	r3, [sp, #16]
 801723e:	2b00      	cmp	r3, #0
 8017240:	bfb8      	it	lt
 8017242:	425b      	neglt	r3, r3
 8017244:	fb03 f00b 	mul.w	r0, r3, fp
 8017248:	9308      	str	r3, [sp, #32]
 801724a:	0040      	lsls	r0, r0, #1
 801724c:	f000 fd64 	bl	8017d18 <xalloc>
				if (!outData)
 8017250:	900a      	str	r0, [sp, #40]	; 0x28
 8017252:	2800      	cmp	r0, #0
 8017254:	f000 82a6 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 8017258:	4650      	mov	r0, sl
 801725a:	f000 fd5d 	bl	8017d18 <xalloc>
				if (!lineData) {
 801725e:	ee08 0a10 	vmov	s16, r0
 8017262:	2800      	cmp	r0, #0
 8017264:	f000 847e 	beq.w	8017b64 <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017268:	9b04      	ldr	r3, [sp, #16]
 801726a:	2b00      	cmp	r3, #0
 801726c:	f340 8472 	ble.w	8017b54 <STM32Ipl_ReadImage+0x11dc>
 8017270:	3b01      	subs	r3, #1
 8017272:	9a06      	ldr	r2, [sp, #24]
 8017274:	fb0a 2303 	mla	r3, sl, r3, r2
 8017278:	4619      	mov	r1, r3
 801727a:	9307      	str	r3, [sp, #28]
				if (f_lseek(fp, line) != FR_OK) {
 801727c:	a82a      	add	r0, sp, #168	; 0xa8
 801727e:	f7fe f911 	bl	80154a4 <f_lseek>
 8017282:	2800      	cmp	r0, #0
 8017284:	f040 82f1 	bne.w	801786a <STM32Ipl_ReadImage+0xef2>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017288:	9b08      	ldr	r3, [sp, #32]
 801728a:	930b      	str	r3, [sp, #44]	; 0x2c
 801728c:	9b04      	ldr	r3, [sp, #16]
 801728e:	2b00      	cmp	r3, #0
 8017290:	f000 8497 	beq.w	8017bc2 <STM32Ipl_ReadImage+0x124a>
 8017294:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8017298:	465f      	mov	r7, fp
 801729a:	f8df 8200 	ldr.w	r8, [pc, #512]	; 801749c <STM32Ipl_ReadImage+0xb24>
 801729e:	4683      	mov	fp, r0
 80172a0:	9309      	str	r3, [sp, #36]	; 0x24
					for (uint32_t j = 0; j < width; k--, j++) {
 80172a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a4:	9305      	str	r3, [sp, #20]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 80172a6:	464b      	mov	r3, r9
 80172a8:	4652      	mov	r2, sl
 80172aa:	ee18 1a10 	vmov	r1, s16
 80172ae:	a82a      	add	r0, sp, #168	; 0xa8
 80172b0:	f7fd fdd2 	bl	8014e58 <f_read>
 80172b4:	2800      	cmp	r0, #0
 80172b6:	f040 841c 	bne.w	8017af2 <STM32Ipl_ReadImage+0x117a>
 80172ba:	f8d9 3000 	ldr.w	r3, [r9]
 80172be:	459a      	cmp	sl, r3
 80172c0:	f040 8417 	bne.w	8017af2 <STM32Ipl_ReadImage+0x117a>
					for (uint32_t j = 0; j < width; k--, j++) {
 80172c4:	2f00      	cmp	r7, #0
 80172c6:	f000 80f8 	beq.w	80174ba <STM32Ipl_ReadImage+0xb42>
					uint8_t value = 0;
 80172ca:	4686      	mov	lr, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 80172cc:	9b05      	ldr	r3, [sp, #20]
 80172ce:	ee18 ca10 	vmov	ip, s16
 80172d2:	4606      	mov	r6, r0
 80172d4:	e019      	b.n	801730a <STM32Ipl_ReadImage+0x992>
 80172d6:	4602      	mov	r2, r0
 80172d8:	b2e0      	uxtb	r0, r4
						index = (value >> k) & 0x1;
 80172da:	fa4e f202 	asr.w	r2, lr, r2
					for (uint32_t j = 0; j < width; k--, j++) {
 80172de:	3601      	adds	r6, #1
						r = palette[index] >> 16;
 80172e0:	f002 0201 	and.w	r2, r2, #1
					for (uint32_t j = 0; j < width; k--, j++) {
 80172e4:	42be      	cmp	r6, r7
						r = palette[index] >> 16;
 80172e6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 80172ea:	ea08 2411 	and.w	r4, r8, r1, lsr #8
 80172ee:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 80172f2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80172f6:	ea42 0204 	orr.w	r2, r2, r4
 80172fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80172fe:	ea42 0201 	orr.w	r2, r2, r1
 8017302:	f823 2b02 	strh.w	r2, [r3], #2
					for (uint32_t j = 0; j < width; k--, j++) {
 8017306:	f000 80d4 	beq.w	80174b2 <STM32Ipl_ReadImage+0xb3a>
						if (!(j % 8)) {
 801730a:	f016 0f07 	tst.w	r6, #7
							value = (*ptr++);
 801730e:	4661      	mov	r1, ip
 8017310:	f100 34ff 	add.w	r4, r0, #4294967295
 8017314:	f04f 0207 	mov.w	r2, #7
						if (!(j % 8)) {
 8017318:	d1dd      	bne.n	80172d6 <STM32Ipl_ReadImage+0x95e>
							value = (*ptr++);
 801731a:	f811 eb01 	ldrb.w	lr, [r1], #1
 801731e:	2006      	movs	r0, #6
 8017320:	468c      	mov	ip, r1
 8017322:	e7da      	b.n	80172da <STM32Ipl_ReadImage+0x962>
						|| (memcmp(p6, magic, 2) == 0)))
 8017324:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8017328:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801732c:	429a      	cmp	r2, r3
 801732e:	f47f ab66 	bne.w	80169fe <STM32Ipl_ReadImage+0x86>
 8017332:	f7ff bb7d 	b.w	8016a30 <STM32Ipl_ReadImage+0xb8>
 8017336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017338:	b9c2      	cbnz	r2, 801736c <STM32Ipl_ReadImage+0x9f4>
 801733a:	f1a8 0c02 	sub.w	ip, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 801733e:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 8017340:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8017344:	3201      	adds	r2, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8017346:	4b56      	ldr	r3, [pc, #344]	; (80174a0 <STM32Ipl_ReadImage+0xb28>)
 8017348:	ea01 0e04 	and.w	lr, r1, r4
				for (uint32_t j = 0; j < width; j++) {
 801734c:	4296      	cmp	r6, r2
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801734e:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 8017352:	ea01 0105 	and.w	r1, r1, r5
 8017356:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 801735a:	ea43 0301 	orr.w	r3, r3, r1
 801735e:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8017362:	d1ed      	bne.n	8017340 <STM32Ipl_ReadImage+0x9c8>
 8017364:	e50f      	b.n	8016d86 <STM32Ipl_ReadImage+0x40e>
					line += lineSize;
 8017366:	4453      	add	r3, sl
 8017368:	9305      	str	r3, [sp, #20]
 801736a:	e51a      	b.n	8016da2 <STM32Ipl_ReadImage+0x42a>
 801736c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801736e:	1bdb      	subs	r3, r3, r7
 8017370:	2b06      	cmp	r3, #6
 8017372:	f240 81c0 	bls.w	80176f6 <STM32Ipl_ReadImage+0xd7e>
 8017376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017378:	2b09      	cmp	r3, #9
 801737a:	f240 81bc 	bls.w	80176f6 <STM32Ipl_ReadImage+0xd7e>
 801737e:	463a      	mov	r2, r7
 8017380:	4643      	mov	r3, r8
 8017382:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
					uint16_t value = *inPixel;
 8017386:	3001      	adds	r0, #1
 8017388:	f853 1b04 	ldr.w	r1, [r3], #4
						*outPixel++ = value;
 801738c:	4560      	cmp	r0, ip
 801738e:	f842 1b04 	str.w	r1, [r2], #4
				for (uint32_t j = 0; j < width; j++) {
 8017392:	d1f8      	bne.n	8017386 <STM32Ipl_ReadImage+0xa0e>
 8017394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017396:	429e      	cmp	r6, r3
 8017398:	f43f acf5 	beq.w	8016d86 <STM32Ipl_ReadImage+0x40e>
					uint16_t value = *inPixel;
 801739c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801739e:	9a08      	ldr	r2, [sp, #32]
 80173a0:	881b      	ldrh	r3, [r3, #0]
						*outPixel++ = value;
 80173a2:	52bb      	strh	r3, [r7, r2]
				for (uint32_t j = 0; j < width; j++) {
 80173a4:	e4ef      	b.n	8016d86 <STM32Ipl_ReadImage+0x40e>
						if (f_lseek(fp, line) != FR_OK) {
 80173a6:	4619      	mov	r1, r3
 80173a8:	a82a      	add	r0, sp, #168	; 0xa8
 80173aa:	f7fe f87b 	bl	80154a4 <f_lseek>
 80173ae:	2800      	cmp	r0, #0
 80173b0:	f43f acf7 	beq.w	8016da2 <STM32Ipl_ReadImage+0x42a>
							xfree(lineData);
 80173b4:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 80173b6:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 80173ba:	f000 fcbb 	bl	8017d34 <xfree>
							xfree(outData);
 80173be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80173c0:	f000 fcb8 	bl	8017d34 <xfree>
							return stm32ipl_err_SeekingFile;
 80173c4:	f7ff bb1d 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
	if (height == 0 || width == 0)
 80173c8:	f1bb 0f00 	cmp.w	fp, #0
 80173cc:	f000 83d3 	beq.w	8017b76 <STM32Ipl_ReadImage+0x11fe>
 80173d0:	fab6 f986 	clz	r9, r6
 80173d4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80173d8:	2e00      	cmp	r6, #0
 80173da:	f000 83cc 	beq.w	8017b76 <STM32Ipl_ReadImage+0x11fe>
			if (sector[0] == '#') {
 80173de:	2a23      	cmp	r2, #35	; 0x23
 80173e0:	d024      	beq.n	801742c <STM32Ipl_ReadImage+0xab4>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80173e2:	3a30      	subs	r2, #48	; 0x30
 80173e4:	b2d3      	uxtb	r3, r2
					number = sector[0] - '0';
 80173e6:	2b09      	cmp	r3, #9
 80173e8:	bf96      	itet	ls
 80173ea:	4691      	movls	r9, r2
 80173ec:	2700      	movhi	r7, #0
 80173ee:	2702      	movls	r7, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 80173f0:	4623      	mov	r3, r4
 80173f2:	2201      	movs	r2, #1
 80173f4:	4629      	mov	r1, r5
 80173f6:	a82a      	add	r0, sp, #168	; 0xa8
 80173f8:	f7fd fd2e 	bl	8014e58 <f_read>
 80173fc:	2800      	cmp	r0, #0
 80173fe:	f47f ace3 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8017402:	6823      	ldr	r3, [r4, #0]
 8017404:	2b01      	cmp	r3, #1
 8017406:	f47f acdf 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
		if (mode == EAT_WHITESPACE) {
 801740a:	b16f      	cbz	r7, 8017428 <STM32Ipl_ReadImage+0xab0>
			if (mode == EAT_COMMENT) {
 801740c:	2f01      	cmp	r7, #1
						number = (number * 10) + sector[0] - '0';
 801740e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8017412:	f04f 0702 	mov.w	r7, #2
			if (mode == EAT_COMMENT) {
 8017416:	d00b      	beq.n	8017430 <STM32Ipl_ReadImage+0xab8>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8017418:	782a      	ldrb	r2, [r5, #0]
 801741a:	3a30      	subs	r2, #48	; 0x30
 801741c:	b2d1      	uxtb	r1, r2
 801741e:	2909      	cmp	r1, #9
 8017420:	d86f      	bhi.n	8017502 <STM32Ipl_ReadImage+0xb8a>
						number = (number * 10) + sector[0] - '0';
 8017422:	eb02 0943 	add.w	r9, r2, r3, lsl #1
	} while (!valid);
 8017426:	e7e3      	b.n	80173f0 <STM32Ipl_ReadImage+0xa78>
 8017428:	782a      	ldrb	r2, [r5, #0]
 801742a:	e7d8      	b.n	80173de <STM32Ipl_ReadImage+0xa66>
				mode = EAT_COMMENT;
 801742c:	2701      	movs	r7, #1
 801742e:	e7df      	b.n	80173f0 <STM32Ipl_ReadImage+0xa78>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8017430:	782f      	ldrb	r7, [r5, #0]
 8017432:	2f0d      	cmp	r7, #13
 8017434:	bf18      	it	ne
 8017436:	2f0a      	cmpne	r7, #10
 8017438:	bf0c      	ite	eq
 801743a:	2701      	moveq	r7, #1
 801743c:	2700      	movne	r7, #0
					mode = EAT_NUMBER;
 801743e:	f087 0701 	eor.w	r7, r7, #1
 8017442:	e7d5      	b.n	80173f0 <STM32Ipl_ReadImage+0xa78>
					xfree(lineData);
 8017444:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 8017446:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 801744a:	f000 fc73 	bl	8017d34 <xfree>
					xfree(outData);
 801744e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017450:	f000 fc70 	bl	8017d34 <xfree>
					return stm32ipl_err_ReadingFile;
 8017454:	f7ff bad5 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				if (height > 0) {
 8017458:	9b04      	ldr	r3, [sp, #16]
 801745a:	2b00      	cmp	r3, #0
					line -= lineSize;
 801745c:	9b05      	ldr	r3, [sp, #20]
				if (height > 0) {
 801745e:	f340 8199 	ble.w	8017794 <STM32Ipl_ReadImage+0xe1c>
					line -= lineSize;
 8017462:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8017466:	9a06      	ldr	r2, [sp, #24]
 8017468:	429a      	cmp	r2, r3
					line -= lineSize;
 801746a:	9305      	str	r3, [sp, #20]
					if (line >= dataOffset) {
 801746c:	f240 81e5 	bls.w	801783a <STM32Ipl_ReadImage+0xec2>
			for (uint32_t i = 0; i < abs(height); i++) {
 8017470:	9b07      	ldr	r3, [sp, #28]
 8017472:	9a08      	ldr	r2, [sp, #32]
 8017474:	3301      	adds	r3, #1
 8017476:	4293      	cmp	r3, r2
 8017478:	9307      	str	r3, [sp, #28]
 801747a:	f47f ae7c 	bne.w	8017176 <STM32Ipl_ReadImage+0x7fe>
 801747e:	46bb      	mov	fp, r7
			xfree(lineData);
 8017480:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8017482:	2700      	movs	r7, #0
			xfree(lineData);
 8017484:	f000 fc56 	bl	8017d34 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8017488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801748a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801748c:	4659      	mov	r1, fp
 801748e:	9300      	str	r3, [sp, #0]
 8017490:	2302      	movs	r3, #2
 8017492:	9803      	ldr	r0, [sp, #12]
 8017494:	f7fe fee4 	bl	8016260 <STM32Ipl_Init>
			break;
 8017498:	f7ff bab3 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
 801749c:	fffff800 	.word	0xfffff800
 80174a0:	fffff000 	.word	0xfffff000
		f_close(&fp);
 80174a4:	a82a      	add	r0, sp, #168	; 0xa8
		return stm32ipl_err_ReadingFile;
 80174a6:	f06f 0707 	mvn.w	r7, #7
		f_close(&fp);
 80174aa:	f7fd ff6b 	bl	8015384 <f_close>
		return stm32ipl_err_ReadingFile;
 80174ae:	f7ff baab 	b.w	8016a08 <STM32Ipl_ReadImage+0x90>
 80174b2:	9b05      	ldr	r3, [sp, #20]
 80174b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174b6:	4413      	add	r3, r2
 80174b8:	9305      	str	r3, [sp, #20]
					if (height > 0) {
 80174ba:	9b04      	ldr	r3, [sp, #16]
 80174bc:	2b00      	cmp	r3, #0
						line -= lineSize;
 80174be:	9b07      	ldr	r3, [sp, #28]
					if (height > 0) {
 80174c0:	f340 816b 	ble.w	801779a <STM32Ipl_ReadImage+0xe22>
						line -= lineSize;
 80174c4:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 80174c8:	9a06      	ldr	r2, [sp, #24]
 80174ca:	429a      	cmp	r2, r3
						line -= lineSize;
 80174cc:	9307      	str	r3, [sp, #28]
						if (line >= dataOffset) {
 80174ce:	f240 81c5 	bls.w	801785c <STM32Ipl_ReadImage+0xee4>
				for (uint32_t i = 0; i < abs(height); i++) {
 80174d2:	f10b 0b01 	add.w	fp, fp, #1
 80174d6:	9b08      	ldr	r3, [sp, #32]
 80174d8:	459b      	cmp	fp, r3
 80174da:	f47f aee4 	bne.w	80172a6 <STM32Ipl_ReadImage+0x92e>
 80174de:	46bb      	mov	fp, r7
				xfree(lineData);
 80174e0:	ee18 0a10 	vmov	r0, s16
				xfree(lineData);
 80174e4:	f000 fc26 	bl	8017d34 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 80174e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174ec:	4659      	mov	r1, fp
 80174ee:	9300      	str	r3, [sp, #0]
 80174f0:	2302      	movs	r3, #2
 80174f2:	9803      	ldr	r0, [sp, #12]
 80174f4:	f7fe feb4 	bl	8016260 <STM32Ipl_Init>
 80174f8:	e5f3      	b.n	80170e2 <STM32Ipl_ReadImage+0x76a>
		return stm32ipl_err_InvalidParameter;
 80174fa:	f06f 0701 	mvn.w	r7, #1
 80174fe:	f7ff ba83 	b.w	8016a08 <STM32Ipl_ReadImage+0x90>
	if (number > 255)
 8017502:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017506:	f200 8348 	bhi.w	8017b9a <STM32Ipl_ReadImage+0x1222>
	switch (number_ppm) {
 801750a:	f1b8 0f04 	cmp.w	r8, #4
 801750e:	f63f aa76 	bhi.w	80169fe <STM32Ipl_ReadImage+0x86>
 8017512:	a301      	add	r3, pc, #4	; (adr r3, 8017518 <STM32Ipl_ReadImage+0xba0>)
 8017514:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 8017518:	0801764d 	.word	0x0801764d
 801751c:	080175c5 	.word	0x080175c5
 8017520:	080169ff 	.word	0x080169ff
 8017524:	08017585 	.word	0x08017585
 8017528:	0801752d 	.word	0x0801752d
			size = width * height * 3;
 801752c:	fb0b f706 	mul.w	r7, fp, r6
 8017530:	eb07 0747 	add.w	r7, r7, r7, lsl #1
			outData = xalloc(size);
 8017534:	4638      	mov	r0, r7
 8017536:	f000 fbef 	bl	8017d18 <xalloc>
			if (!outData)
 801753a:	4605      	mov	r5, r0
 801753c:	2800      	cmp	r0, #0
 801753e:	f000 8131 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 8017542:	4623      	mov	r3, r4
 8017544:	4601      	mov	r1, r0
 8017546:	463a      	mov	r2, r7
 8017548:	a82a      	add	r0, sp, #168	; 0xa8
 801754a:	f7fd fc85 	bl	8014e58 <f_read>
 801754e:	4603      	mov	r3, r0
 8017550:	2800      	cmp	r0, #0
 8017552:	f47f ac39 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8017556:	6822      	ldr	r2, [r4, #0]
 8017558:	4297      	cmp	r7, r2
 801755a:	f47f ac35 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
			for (uint32_t i = 0; i < size; i += 3) {
 801755e:	b13f      	cbz	r7, 8017570 <STM32Ipl_ReadImage+0xbf8>
 8017560:	1caa      	adds	r2, r5, #2
				uint8_t tmp = outData[i];
 8017562:	5ce9      	ldrb	r1, [r5, r3]
				outData[i] = outData[i + 2];
 8017564:	5cd0      	ldrb	r0, [r2, r3]
 8017566:	54e8      	strb	r0, [r5, r3]
				outData[i + 2] = tmp;
 8017568:	54d1      	strb	r1, [r2, r3]
			for (uint32_t i = 0; i < size; i += 3) {
 801756a:	3303      	adds	r3, #3
 801756c:	429f      	cmp	r7, r3
 801756e:	d8f8      	bhi.n	8017562 <STM32Ipl_ReadImage+0xbea>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8017570:	9500      	str	r5, [sp, #0]
 8017572:	465a      	mov	r2, fp
 8017574:	4631      	mov	r1, r6
 8017576:	9803      	ldr	r0, [sp, #12]
 8017578:	2304      	movs	r3, #4
	return stm32ipl_err_Ok;
 801757a:	2700      	movs	r7, #0
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801757c:	f7fe fe70 	bl	8016260 <STM32Ipl_Init>
			break;
 8017580:	f7ff ba3f 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
			size = width * height;
 8017584:	fb0b f806 	mul.w	r8, fp, r6
			outData = xalloc(size);
 8017588:	4640      	mov	r0, r8
 801758a:	f000 fbc5 	bl	8017d18 <xalloc>
			if (!outData)
 801758e:	4605      	mov	r5, r0
 8017590:	2800      	cmp	r0, #0
 8017592:	f000 8107 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 8017596:	4601      	mov	r1, r0
 8017598:	4623      	mov	r3, r4
 801759a:	4642      	mov	r2, r8
 801759c:	a82a      	add	r0, sp, #168	; 0xa8
 801759e:	f7fd fc5b 	bl	8014e58 <f_read>
 80175a2:	4607      	mov	r7, r0
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f47f ac0f 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	4598      	cmp	r8, r3
 80175ae:	f47f ac0b 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 80175b2:	465a      	mov	r2, fp
 80175b4:	4631      	mov	r1, r6
 80175b6:	9803      	ldr	r0, [sp, #12]
 80175b8:	2301      	movs	r3, #1
 80175ba:	9500      	str	r5, [sp, #0]
 80175bc:	f7fe fe50 	bl	8016260 <STM32Ipl_Init>
			break;
 80175c0:	f7ff ba1f 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
			outData = xalloc(width * height * 3);
 80175c4:	fb0b f006 	mul.w	r0, fp, r6
 80175c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80175cc:	f000 fba4 	bl	8017d18 <xalloc>
			if (!outData)
 80175d0:	9007      	str	r0, [sp, #28]
 80175d2:	2800      	cmp	r0, #0
 80175d4:	f000 80e6 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
			for (uint32_t i = 0; i < height; i++) {
 80175d8:	2200      	movs	r2, #0
 80175da:	9604      	str	r6, [sp, #16]
 80175dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 80175e0:	4626      	mov	r6, r4
 80175e2:	9205      	str	r2, [sp, #20]
 80175e4:	4602      	mov	r2, r0
 80175e6:	f8cd b018 	str.w	fp, [sp, #24]
				for (uint32_t j = 0; j < width; j++) {
 80175ea:	f102 0a03 	add.w	sl, r2, #3
 80175ee:	2400      	movs	r4, #0
 80175f0:	782b      	ldrb	r3, [r5, #0]
 80175f2:	46cb      	mov	fp, r9
						number = 0;
 80175f4:	f04f 0800 	mov.w	r8, #0
								if (sector[0] == '#') {
 80175f8:	2b23      	cmp	r3, #35	; 0x23
 80175fa:	d070      	beq.n	80176de <STM32Ipl_ReadImage+0xd66>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80175fc:	3b30      	subs	r3, #48	; 0x30
 80175fe:	b2da      	uxtb	r2, r3
										number = sector[0] - '0';
 8017600:	2a09      	cmp	r2, #9
 8017602:	bf96      	itet	ls
 8017604:	4698      	movls	r8, r3
 8017606:	2700      	movhi	r7, #0
 8017608:	2702      	movls	r7, #2
								if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801760a:	4633      	mov	r3, r6
 801760c:	2201      	movs	r2, #1
 801760e:	4629      	mov	r1, r5
 8017610:	a82a      	add	r0, sp, #168	; 0xa8
 8017612:	f7fd fc21 	bl	8014e58 <f_read>
 8017616:	2800      	cmp	r0, #0
 8017618:	f47f abd6 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 801761c:	6833      	ldr	r3, [r6, #0]
 801761e:	2b01      	cmp	r3, #1
 8017620:	f47f abd2 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
							if (mode == EAT_WHITESPACE) {
 8017624:	2f00      	cmp	r7, #0
 8017626:	d04c      	beq.n	80176c2 <STM32Ipl_ReadImage+0xd4a>
								if (mode == EAT_COMMENT) {
 8017628:	2f01      	cmp	r7, #1
											number = (number * 10) + sector[0] - '0';
 801762a:	eb08 0288 	add.w	r2, r8, r8, lsl #2
 801762e:	f04f 0702 	mov.w	r7, #2
								if (mode == EAT_COMMENT) {
 8017632:	d056      	beq.n	80176e2 <STM32Ipl_ReadImage+0xd6a>
										if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8017634:	782b      	ldrb	r3, [r5, #0]
 8017636:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801763a:	fa5f fc81 	uxtb.w	ip, r1
 801763e:	f1bc 0f09 	cmp.w	ip, #9
 8017642:	f200 80d3 	bhi.w	80177ec <STM32Ipl_ReadImage+0xe74>
											number = (number * 10) + sector[0] - '0';
 8017646:	eb01 0842 	add.w	r8, r1, r2, lsl #1
						} while (!valid);
 801764a:	e7de      	b.n	801760a <STM32Ipl_ReadImage+0xc92>
			outData = xalloc(width * height);
 801764c:	fb0b f006 	mul.w	r0, fp, r6
 8017650:	f000 fb62 	bl	8017d18 <xalloc>
			if (!outData)
 8017654:	4682      	mov	sl, r0
 8017656:	2800      	cmp	r0, #0
 8017658:	f000 80a4 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
 801765c:	2300      	movs	r3, #0
 801765e:	4242      	negs	r2, r0
 8017660:	9305      	str	r3, [sp, #20]
 8017662:	9204      	str	r2, [sp, #16]
			for (uint32_t i = 0; i < height; i++) {
 8017664:	9306      	str	r3, [sp, #24]
				for (uint32_t j = 0; j < width; j++) {
 8017666:	9b05      	ldr	r3, [sp, #20]
 8017668:	eb0a 0903 	add.w	r9, sl, r3
					number = 0;
 801766c:	f04f 0800 	mov.w	r8, #0
							if (sector[0] == '#') {
 8017670:	782b      	ldrb	r3, [r5, #0]
 8017672:	2b23      	cmp	r3, #35	; 0x23
 8017674:	d031      	beq.n	80176da <STM32Ipl_ReadImage+0xd62>
								if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8017676:	3b30      	subs	r3, #48	; 0x30
 8017678:	b2da      	uxtb	r2, r3
									number = sector[0] - '0';
 801767a:	2a09      	cmp	r2, #9
 801767c:	bf96      	itet	ls
 801767e:	4698      	movls	r8, r3
 8017680:	2700      	movhi	r7, #0
 8017682:	2702      	movls	r7, #2
							if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8017684:	4623      	mov	r3, r4
 8017686:	2201      	movs	r2, #1
 8017688:	4629      	mov	r1, r5
 801768a:	a82a      	add	r0, sp, #168	; 0xa8
 801768c:	f7fd fbe4 	bl	8014e58 <f_read>
 8017690:	2800      	cmp	r0, #0
 8017692:	f47f ab99 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
 8017696:	6822      	ldr	r2, [r4, #0]
 8017698:	2a01      	cmp	r2, #1
 801769a:	f47f ab95 	bne.w	8016dc8 <STM32Ipl_ReadImage+0x450>
						if (mode == EAT_WHITESPACE) {
 801769e:	2f00      	cmp	r7, #0
 80176a0:	d0e6      	beq.n	8017670 <STM32Ipl_ReadImage+0xcf8>
							if (mode == EAT_COMMENT) {
 80176a2:	2f01      	cmp	r7, #1
										number = (number * 10) + sector[0] - '0';
 80176a4:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80176a8:	f04f 0702 	mov.w	r7, #2
							if (mode == EAT_COMMENT) {
 80176ac:	d00b      	beq.n	80176c6 <STM32Ipl_ReadImage+0xd4e>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80176ae:	7829      	ldrb	r1, [r5, #0]
 80176b0:	3930      	subs	r1, #48	; 0x30
 80176b2:	fa5f fc81 	uxtb.w	ip, r1
 80176b6:	f1bc 0f09 	cmp.w	ip, #9
 80176ba:	d877      	bhi.n	80177ac <STM32Ipl_ReadImage+0xe34>
										number = (number * 10) + sector[0] - '0';
 80176bc:	eb01 0843 	add.w	r8, r1, r3, lsl #1
					} while (!valid);
 80176c0:	e7e0      	b.n	8017684 <STM32Ipl_ReadImage+0xd0c>
 80176c2:	782b      	ldrb	r3, [r5, #0]
 80176c4:	e798      	b.n	80175f8 <STM32Ipl_ReadImage+0xc80>
								if ((sector[0] == '\n') || (sector[0] == '\r')) {
 80176c6:	782f      	ldrb	r7, [r5, #0]
 80176c8:	2f0d      	cmp	r7, #13
 80176ca:	bf18      	it	ne
 80176cc:	2f0a      	cmpne	r7, #10
 80176ce:	bf0c      	ite	eq
 80176d0:	2701      	moveq	r7, #1
 80176d2:	2700      	movne	r7, #0
									mode = EAT_NUMBER;
 80176d4:	f087 0701 	eor.w	r7, r7, #1
 80176d8:	e7d4      	b.n	8017684 <STM32Ipl_ReadImage+0xd0c>
								mode = EAT_COMMENT;
 80176da:	2701      	movs	r7, #1
 80176dc:	e7d2      	b.n	8017684 <STM32Ipl_ReadImage+0xd0c>
									mode = EAT_COMMENT;
 80176de:	2701      	movs	r7, #1
 80176e0:	e793      	b.n	801760a <STM32Ipl_ReadImage+0xc92>
									if ((sector[0] == '\n') || (sector[0] == '\r')) {
 80176e2:	782f      	ldrb	r7, [r5, #0]
 80176e4:	2f0d      	cmp	r7, #13
 80176e6:	bf18      	it	ne
 80176e8:	2f0a      	cmpne	r7, #10
 80176ea:	bf0c      	ite	eq
 80176ec:	2701      	moveq	r7, #1
 80176ee:	2700      	movne	r7, #0
										mode = EAT_NUMBER;
 80176f0:	f087 0701 	eor.w	r7, r7, #1
 80176f4:	e789      	b.n	801760a <STM32Ipl_ReadImage+0xc92>
 80176f6:	f1a8 0102 	sub.w	r1, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 80176fa:	463a      	mov	r2, r7
 80176fc:	2300      	movs	r3, #0
 80176fe:	3301      	adds	r3, #1
					uint16_t value = *inPixel;
 8017700:	f831 0f02 	ldrh.w	r0, [r1, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8017704:	429e      	cmp	r6, r3
 8017706:	f822 0b02 	strh.w	r0, [r2], #2
 801770a:	d1f8      	bne.n	80176fe <STM32Ipl_ReadImage+0xd86>
 801770c:	f7ff bb3b 	b.w	8016d86 <STM32Ipl_ReadImage+0x40e>
		return stm32ipl_err_OpeningFile;
 8017710:	f06f 0705 	mvn.w	r7, #5
 8017714:	f7ff b978 	b.w	8016a08 <STM32Ipl_ReadImage+0x90>
 8017718:	9b06      	ldr	r3, [sp, #24]
 801771a:	4619      	mov	r1, r3
 801771c:	9305      	str	r3, [sp, #20]
 801771e:	f7ff bad9 	b.w	8016cd4 <STM32Ipl_ReadImage+0x35c>
 8017722:	9f06      	ldr	r7, [sp, #24]
 8017724:	e409      	b.n	8016f3a <STM32Ipl_ReadImage+0x5c2>
			for (uint32_t i = 0; i < abs(height); i++) {
 8017726:	9f07      	ldr	r7, [sp, #28]
 8017728:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801772c:	e007      	b.n	801773e <STM32Ipl_ReadImage+0xdc6>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801772e:	f8d9 3000 	ldr.w	r3, [r9]
 8017732:	459a      	cmp	sl, r3
 8017734:	d111      	bne.n	801775a <STM32Ipl_ReadImage+0xde2>
				memcpy(outPixel, lineData, outLineSize);
 8017736:	f00a fd41 	bl	80221bc <memcpy>
			for (uint32_t i = 0; i < abs(height); i++) {
 801773a:	45a0      	cmp	r8, r4
 801773c:	d01c      	beq.n	8017778 <STM32Ipl_ReadImage+0xe00>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801773e:	464b      	mov	r3, r9
 8017740:	4652      	mov	r2, sl
 8017742:	4629      	mov	r1, r5
 8017744:	a82a      	add	r0, sp, #168	; 0xa8
 8017746:	f7fd fb87 	bl	8014e58 <f_read>
 801774a:	4603      	mov	r3, r0
			for (uint32_t i = 0; i < abs(height); i++) {
 801774c:	3401      	adds	r4, #1
				memcpy(outPixel, lineData, outLineSize);
 801774e:	4638      	mov	r0, r7
 8017750:	4632      	mov	r2, r6
 8017752:	4629      	mov	r1, r5
				outPixel += outLineSize;
 8017754:	4437      	add	r7, r6
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8017756:	2b00      	cmp	r3, #0
 8017758:	d0e9      	beq.n	801772e <STM32Ipl_ReadImage+0xdb6>
					xfree(lineData);
 801775a:	4628      	mov	r0, r5
					return stm32ipl_err_ReadingFile;
 801775c:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 8017760:	f000 fae8 	bl	8017d34 <xfree>
					xfree(outData);
 8017764:	9807      	ldr	r0, [sp, #28]
 8017766:	f000 fae5 	bl	8017d34 <xfree>
					return stm32ipl_err_ReadingFile;
 801776a:	f7ff b94a 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
 801776e:	465d      	mov	r5, fp
 8017770:	e7f3      	b.n	801775a <STM32Ipl_ReadImage+0xde2>
 8017772:	465d      	mov	r5, fp
 8017774:	f8dd b010 	ldr.w	fp, [sp, #16]
			xfree(lineData);
 8017778:	4628      	mov	r0, r5
	return stm32ipl_err_Ok;
 801777a:	2700      	movs	r7, #0
			xfree(lineData);
 801777c:	f000 fada 	bl	8017d34 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB888, outData);
 8017780:	9b07      	ldr	r3, [sp, #28]
 8017782:	9a05      	ldr	r2, [sp, #20]
 8017784:	4659      	mov	r1, fp
 8017786:	9300      	str	r3, [sp, #0]
 8017788:	2304      	movs	r3, #4
 801778a:	9803      	ldr	r0, [sp, #12]
 801778c:	f7fe fd68 	bl	8016260 <STM32Ipl_Init>
			break;
 8017790:	f7ff b937 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
					line += lineSize;
 8017794:	4453      	add	r3, sl
 8017796:	9305      	str	r3, [sp, #20]
 8017798:	e66a      	b.n	8017470 <STM32Ipl_ReadImage+0xaf8>
						line += lineSize;
 801779a:	4453      	add	r3, sl
 801779c:	9307      	str	r3, [sp, #28]
 801779e:	e698      	b.n	80174d2 <STM32Ipl_ReadImage+0xb5a>
						line += lineSize;
 80177a0:	444f      	add	r7, r9
 80177a2:	e48e      	b.n	80170c2 <STM32Ipl_ReadImage+0x74a>
					return stm32ipl_err_OutOfMemory;
 80177a4:	f06f 0702 	mvn.w	r7, #2
 80177a8:	f7ff b92b 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				for (uint32_t j = 0; j < width; j++) {
 80177ac:	9b04      	ldr	r3, [sp, #16]
					outData[offset + j] = (uint8_t)number;
 80177ae:	f809 8b01 	strb.w	r8, [r9], #1
				for (uint32_t j = 0; j < width; j++) {
 80177b2:	444b      	add	r3, r9
 80177b4:	429e      	cmp	r6, r3
 80177b6:	f63f af59 	bhi.w	801766c <STM32Ipl_ReadImage+0xcf4>
			for (uint32_t i = 0; i < height; i++) {
 80177ba:	9905      	ldr	r1, [sp, #20]
 80177bc:	9b06      	ldr	r3, [sp, #24]
 80177be:	4431      	add	r1, r6
 80177c0:	3301      	adds	r3, #1
 80177c2:	9105      	str	r1, [sp, #20]
 80177c4:	9904      	ldr	r1, [sp, #16]
 80177c6:	455b      	cmp	r3, fp
 80177c8:	9306      	str	r3, [sp, #24]
 80177ca:	eba1 0106 	sub.w	r1, r1, r6
 80177ce:	9104      	str	r1, [sp, #16]
 80177d0:	f4ff af49 	bcc.w	8017666 <STM32Ipl_ReadImage+0xcee>
 80177d4:	4684      	mov	ip, r0
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 80177d6:	4613      	mov	r3, r2
 80177d8:	4631      	mov	r1, r6
 80177da:	465a      	mov	r2, fp
 80177dc:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 80177de:	4667      	mov	r7, ip
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 80177e0:	f8cd a000 	str.w	sl, [sp]
 80177e4:	f7fe fd3c 	bl	8016260 <STM32Ipl_Init>
			break;
 80177e8:	f7ff b90b 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
					for (uint8_t counter = 0; counter < 3; counter++) {
 80177ec:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
						pixel[counter] = number;
 80177f0:	f80b 8b01 	strb.w	r8, [fp], #1
					for (uint8_t counter = 0; counter < 3; counter++) {
 80177f4:	455a      	cmp	r2, fp
 80177f6:	f47f aefd 	bne.w	80175f4 <STM32Ipl_ReadImage+0xc7c>
					*outPixel++ = pixel[2];
 80177fa:	f899 3002 	ldrb.w	r3, [r9, #2]
				for (uint32_t j = 0; j < width; j++) {
 80177fe:	3401      	adds	r4, #1
 8017800:	4652      	mov	r2, sl
 8017802:	f10a 0a03 	add.w	sl, sl, #3
					*outPixel++ = pixel[2];
 8017806:	f80a 3c06 	strb.w	r3, [sl, #-6]
					*outPixel++ = pixel[1];
 801780a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801780e:	f80a 3c05 	strb.w	r3, [sl, #-5]
					*outPixel++ = pixel[0];
 8017812:	f899 3000 	ldrb.w	r3, [r9]
 8017816:	f80a 3c04 	strb.w	r3, [sl, #-4]
				for (uint32_t j = 0; j < width; j++) {
 801781a:	9b04      	ldr	r3, [sp, #16]
 801781c:	42a3      	cmp	r3, r4
 801781e:	f63f aee7 	bhi.w	80175f0 <STM32Ipl_ReadImage+0xc78>
			for (uint32_t i = 0; i < height; i++) {
 8017822:	9b05      	ldr	r3, [sp, #20]
 8017824:	9906      	ldr	r1, [sp, #24]
 8017826:	3301      	adds	r3, #1
 8017828:	428b      	cmp	r3, r1
 801782a:	9305      	str	r3, [sp, #20]
 801782c:	f4ff aedd 	bcc.w	80175ea <STM32Ipl_ReadImage+0xc72>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8017830:	e9dd b306 	ldrd	fp, r3, [sp, #24]
 8017834:	9e04      	ldr	r6, [sp, #16]
 8017836:	9300      	str	r3, [sp, #0]
 8017838:	e69b      	b.n	8017572 <STM32Ipl_ReadImage+0xbfa>
						if (f_lseek(fp, line) != FR_OK) {
 801783a:	4619      	mov	r1, r3
 801783c:	a82a      	add	r0, sp, #168	; 0xa8
 801783e:	f7fd fe31 	bl	80154a4 <f_lseek>
 8017842:	2800      	cmp	r0, #0
 8017844:	f43f ae14 	beq.w	8017470 <STM32Ipl_ReadImage+0xaf8>
							xfree(lineData);
 8017848:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 801784a:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 801784e:	f000 fa71 	bl	8017d34 <xfree>
							xfree(outData);
 8017852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017854:	f000 fa6e 	bl	8017d34 <xfree>
							return stm32ipl_err_SeekingFile;
 8017858:	f7ff b8d3 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
							if (f_lseek(fp, line) != FR_OK) {
 801785c:	4619      	mov	r1, r3
 801785e:	a82a      	add	r0, sp, #168	; 0xa8
 8017860:	f7fd fe20 	bl	80154a4 <f_lseek>
 8017864:	2800      	cmp	r0, #0
 8017866:	f43f ae34 	beq.w	80174d2 <STM32Ipl_ReadImage+0xb5a>
								xfree(lineData);
 801786a:	ee18 0a10 	vmov	r0, s16
								return stm32ipl_err_SeekingFile;
 801786e:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 8017872:	f000 fa5f 	bl	8017d34 <xfree>
								xfree(outData);
 8017876:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017878:	f000 fa5c 	bl	8017d34 <xfree>
								return stm32ipl_err_SeekingFile;
 801787c:	f7ff b8c1 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
							if (f_lseek(fp, line) != FR_OK) {
 8017880:	4639      	mov	r1, r7
 8017882:	a82a      	add	r0, sp, #168	; 0xa8
 8017884:	f7fd fe0e 	bl	80154a4 <f_lseek>
 8017888:	2800      	cmp	r0, #0
 801788a:	f43f ac1a 	beq.w	80170c2 <STM32Ipl_ReadImage+0x74a>
								xfree(lineData);
 801788e:	4630      	mov	r0, r6
								return stm32ipl_err_SeekingFile;
 8017890:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 8017894:	f000 fa4e 	bl	8017d34 <xfree>
								xfree(outData);
 8017898:	9807      	ldr	r0, [sp, #28]
 801789a:	f000 fa4b 	bl	8017d34 <xfree>
								return stm32ipl_err_SeekingFile;
 801789e:	f7ff b8b0 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				outData = xalloc(width * abs(height) * 2);
 80178a2:	9b04      	ldr	r3, [sp, #16]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	bfb8      	it	lt
 80178a8:	425b      	neglt	r3, r3
 80178aa:	fb03 f00b 	mul.w	r0, r3, fp
 80178ae:	9307      	str	r3, [sp, #28]
 80178b0:	0040      	lsls	r0, r0, #1
 80178b2:	f000 fa31 	bl	8017d18 <xalloc>
				if (!outData)
 80178b6:	900a      	str	r0, [sp, #40]	; 0x28
 80178b8:	2800      	cmp	r0, #0
 80178ba:	f43f af73 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 80178be:	4650      	mov	r0, sl
 80178c0:	f000 fa2a 	bl	8017d18 <xalloc>
				if (!lineData) {
 80178c4:	4607      	mov	r7, r0
 80178c6:	2800      	cmp	r0, #0
 80178c8:	f000 814c 	beq.w	8017b64 <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80178cc:	9b04      	ldr	r3, [sp, #16]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	f340 8145 	ble.w	8017b5e <STM32Ipl_ReadImage+0x11e6>
 80178d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80178d8:	fb0a f808 	mul.w	r8, sl, r8
 80178dc:	9b06      	ldr	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 80178de:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80178e0:	4498      	add	r8, r3
				if (f_lseek(fp, line) != FR_OK) {
 80178e2:	4641      	mov	r1, r8
 80178e4:	f7fd fdde 	bl	80154a4 <f_lseek>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d154      	bne.n	8017996 <STM32Ipl_ReadImage+0x101e>
				for (uint32_t i = 0; i < abs(height); i++) {
 80178ec:	9b07      	ldr	r3, [sp, #28]
 80178ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80178f0:	9b04      	ldr	r3, [sp, #16]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	f000 816a 	beq.w	8017bcc <STM32Ipl_ReadImage+0x1254>
 80178f8:	ea4f 034b 	mov.w	r3, fp, lsl #1
					for (uint32_t j = 0; j < width; j++) {
 80178fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178fe:	eb07 040b 	add.w	r4, r7, fp
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8017902:	f8cd b020 	str.w	fp, [sp, #32]
 8017906:	9309      	str	r3, [sp, #36]	; 0x24
 8017908:	4683      	mov	fp, r0
 801790a:	464b      	mov	r3, r9
 801790c:	4eb1      	ldr	r6, [pc, #708]	; (8017bd4 <STM32Ipl_ReadImage+0x125c>)
 801790e:	4691      	mov	r9, r2
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8017910:	4652      	mov	r2, sl
 8017912:	4639      	mov	r1, r7
 8017914:	a82a      	add	r0, sp, #168	; 0xa8
 8017916:	9305      	str	r3, [sp, #20]
 8017918:	f7fd fa9e 	bl	8014e58 <f_read>
 801791c:	2800      	cmp	r0, #0
 801791e:	f040 810f 	bne.w	8017b40 <STM32Ipl_ReadImage+0x11c8>
 8017922:	9b05      	ldr	r3, [sp, #20]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	4592      	cmp	sl, r2
 8017928:	f040 810a 	bne.w	8017b40 <STM32Ipl_ReadImage+0x11c8>
					for (uint32_t j = 0; j < width; j++) {
 801792c:	9a08      	ldr	r2, [sp, #32]
 801792e:	b1ba      	cbz	r2, 8017960 <STM32Ipl_ReadImage+0xfe8>
 8017930:	46cc      	mov	ip, r9
 8017932:	4638      	mov	r0, r7
						uint8_t r = palette[index] >> 16;
 8017934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017938:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
					for (uint32_t j = 0; j < width; j++) {
 801793c:	42a0      	cmp	r0, r4
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801793e:	ea06 2e11 	and.w	lr, r6, r1, lsr #8
 8017942:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 8017946:	ea4f 1151 	mov.w	r1, r1, lsr #5
 801794a:	ea42 020e 	orr.w	r2, r2, lr
 801794e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017952:	ea42 0201 	orr.w	r2, r2, r1
 8017956:	f82c 2b02 	strh.w	r2, [ip], #2
					for (uint32_t j = 0; j < width; j++) {
 801795a:	d1eb      	bne.n	8017934 <STM32Ipl_ReadImage+0xfbc>
 801795c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801795e:	4491      	add	r9, r2
					if (height > 0) {
 8017960:	9a04      	ldr	r2, [sp, #16]
 8017962:	2a00      	cmp	r2, #0
 8017964:	dd0d      	ble.n	8017982 <STM32Ipl_ReadImage+0x100a>
						line -= lineSize;
 8017966:	eba8 080a 	sub.w	r8, r8, sl
						if (line >= dataOffset) {
 801796a:	9a06      	ldr	r2, [sp, #24]
 801796c:	4542      	cmp	r2, r8
 801796e:	d90a      	bls.n	8017986 <STM32Ipl_ReadImage+0x100e>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017970:	f10b 0b01 	add.w	fp, fp, #1
 8017974:	9a07      	ldr	r2, [sp, #28]
 8017976:	4593      	cmp	fp, r2
 8017978:	d1ca      	bne.n	8017910 <STM32Ipl_ReadImage+0xf98>
 801797a:	f8dd b020 	ldr.w	fp, [sp, #32]
				xfree(lineData);
 801797e:	4638      	mov	r0, r7
 8017980:	e5b0      	b.n	80174e4 <STM32Ipl_ReadImage+0xb6c>
						line += lineSize;
 8017982:	44d0      	add	r8, sl
 8017984:	e7f4      	b.n	8017970 <STM32Ipl_ReadImage+0xff8>
							if (f_lseek(fp, line) != FR_OK) {
 8017986:	4641      	mov	r1, r8
 8017988:	a82a      	add	r0, sp, #168	; 0xa8
 801798a:	9305      	str	r3, [sp, #20]
 801798c:	f7fd fd8a 	bl	80154a4 <f_lseek>
 8017990:	9b05      	ldr	r3, [sp, #20]
 8017992:	2800      	cmp	r0, #0
 8017994:	d0ec      	beq.n	8017970 <STM32Ipl_ReadImage+0xff8>
								xfree(lineData);
 8017996:	4638      	mov	r0, r7
								return stm32ipl_err_SeekingFile;
 8017998:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 801799c:	f000 f9ca 	bl	8017d34 <xfree>
								xfree(outData);
 80179a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80179a2:	f000 f9c7 	bl	8017d34 <xfree>
								return stm32ipl_err_SeekingFile;
 80179a6:	f7ff b82c 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 80179aa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80179ae:	4293      	cmp	r3, r2
 80179b0:	f47f ac44 	bne.w	801723c <STM32Ipl_ReadImage+0x8c4>
 80179b4:	686b      	ldr	r3, [r5, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f47f ac40 	bne.w	801723c <STM32Ipl_ReadImage+0x8c4>
				outData = xalloc0(STM32Ipl_DataSize(width, abs(height), IMAGE_BPP_BINARY));
 80179bc:	9b04      	ldr	r3, [sp, #16]
 80179be:	2200      	movs	r2, #0
 80179c0:	4658      	mov	r0, fp
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	bfb8      	it	lt
 80179c6:	425b      	neglt	r3, r3
 80179c8:	4619      	mov	r1, r3
 80179ca:	9309      	str	r3, [sp, #36]	; 0x24
 80179cc:	f7fe fc5e 	bl	801628c <STM32Ipl_DataSize>
 80179d0:	f000 f9a4 	bl	8017d1c <xalloc0>
				if (!outData)
 80179d4:	900a      	str	r0, [sp, #40]	; 0x28
 80179d6:	2800      	cmp	r0, #0
 80179d8:	f43f aee4 	beq.w	80177a4 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 80179dc:	4650      	mov	r0, sl
 80179de:	f000 f99b 	bl	8017d18 <xalloc>
				if (!lineData) {
 80179e2:	ee08 0a10 	vmov	s16, r0
 80179e6:	2800      	cmp	r0, #0
 80179e8:	f000 80bc 	beq.w	8017b64 <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80179ec:	9b04      	ldr	r3, [sp, #16]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f340 80bf 	ble.w	8017b72 <STM32Ipl_ReadImage+0x11fa>
 80179f4:	3b01      	subs	r3, #1
 80179f6:	fb0a f303 	mul.w	r3, sl, r3
 80179fa:	9a06      	ldr	r2, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 80179fc:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80179fe:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 8017a00:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017a02:	9305      	str	r3, [sp, #20]
				if (f_lseek(fp, line) != FR_OK) {
 8017a04:	f7fd fd4e 	bl	80154a4 <f_lseek>
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	f47f af2e 	bne.w	801786a <STM32Ipl_ReadImage+0xef2>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017a0e:	9b04      	ldr	r3, [sp, #16]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d055      	beq.n	8017ac0 <STM32Ipl_ReadImage+0x1148>
 8017a14:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8017a18:	465f      	mov	r7, fp
 8017a1a:	464e      	mov	r6, r9
 8017a1c:	9007      	str	r0, [sp, #28]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8017a1e:	4633      	mov	r3, r6
 8017a20:	4652      	mov	r2, sl
 8017a22:	ee18 1a10 	vmov	r1, s16
 8017a26:	a82a      	add	r0, sp, #168	; 0xa8
 8017a28:	f7fd fa16 	bl	8014e58 <f_read>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d160      	bne.n	8017af2 <STM32Ipl_ReadImage+0x117a>
 8017a30:	6833      	ldr	r3, [r6, #0]
 8017a32:	459a      	cmp	sl, r3
 8017a34:	d15d      	bne.n	8017af2 <STM32Ipl_ReadImage+0x117a>
					for (uint32_t j = 0; j < width; k--, j++) {
 8017a36:	b38f      	cbz	r7, 8017a9c <STM32Ipl_ReadImage+0x1124>
					value = 0;
 8017a38:	4681      	mov	r9, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 8017a3a:	ee18 ea10 	vmov	lr, s16
 8017a3e:	4601      	mov	r1, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 8017a40:	f04f 0b01 	mov.w	fp, #1
 8017a44:	9608      	str	r6, [sp, #32]
 8017a46:	e01b      	b.n	8017a80 <STM32Ipl_ReadImage+0x1108>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	b2e0      	uxtb	r0, r4
 8017a4c:	fa49 f303 	asr.w	r3, r9, r3
 8017a50:	f001 0c1f 	and.w	ip, r1, #31
 8017a54:	094c      	lsrs	r4, r1, #5
					for (uint32_t j = 0; j < width; k--, j++) {
 8017a56:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 8017a58:	f003 0301 	and.w	r3, r3, #1
 8017a5c:	fa0b f20c 	lsl.w	r2, fp, ip
 8017a60:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 8017a64:	428f      	cmp	r7, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 8017a66:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8017a6a:	ea26 0202 	bic.w	r2, r6, r2
 8017a6e:	f003 0301 	and.w	r3, r3, #1
 8017a72:	fa03 fc0c 	lsl.w	ip, r3, ip
 8017a76:	ea4c 0202 	orr.w	r2, ip, r2
 8017a7a:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 8017a7e:	d00c      	beq.n	8017a9a <STM32Ipl_ReadImage+0x1122>
						if (!(j % 8)) {
 8017a80:	f011 0f07 	tst.w	r1, #7
							value = (*inData++);
 8017a84:	4672      	mov	r2, lr
 8017a86:	f100 34ff 	add.w	r4, r0, #4294967295
 8017a8a:	f04f 0307 	mov.w	r3, #7
						if (!(j % 8)) {
 8017a8e:	d1db      	bne.n	8017a48 <STM32Ipl_ReadImage+0x10d0>
							value = (*inData++);
 8017a90:	f812 9b01 	ldrb.w	r9, [r2], #1
 8017a94:	2006      	movs	r0, #6
 8017a96:	4696      	mov	lr, r2
 8017a98:	e7d8      	b.n	8017a4c <STM32Ipl_ReadImage+0x10d4>
 8017a9a:	9e08      	ldr	r6, [sp, #32]
					if (height > 0) {
 8017a9c:	9b04      	ldr	r3, [sp, #16]
					outRow += offset;
 8017a9e:	44d0      	add	r8, sl
					if (height > 0) {
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	dd1b      	ble.n	8017adc <STM32Ipl_ReadImage+0x1164>
						line -= lineSize;
 8017aa4:	9b05      	ldr	r3, [sp, #20]
						if (line >= dataOffset) {
 8017aa6:	9a06      	ldr	r2, [sp, #24]
						line -= lineSize;
 8017aa8:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 8017aac:	429a      	cmp	r2, r3
						line -= lineSize;
 8017aae:	9305      	str	r3, [sp, #20]
						if (line >= dataOffset) {
 8017ab0:	d918      	bls.n	8017ae4 <STM32Ipl_ReadImage+0x116c>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017ab2:	9b07      	ldr	r3, [sp, #28]
 8017ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	429a      	cmp	r2, r3
 8017aba:	9307      	str	r3, [sp, #28]
 8017abc:	d1af      	bne.n	8017a1e <STM32Ipl_ReadImage+0x10a6>
 8017abe:	46bb      	mov	fp, r7
				xfree(lineData);
 8017ac0:	ee18 0a10 	vmov	r0, s16
 8017ac4:	f000 f936 	bl	8017d34 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_BINARY, outData);
 8017ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017acc:	4659      	mov	r1, fp
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	9803      	ldr	r0, [sp, #12]
 8017ad4:	f7fe fbc4 	bl	8016260 <STM32Ipl_Init>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 8017ad8:	f7ff bb03 	b.w	80170e2 <STM32Ipl_ReadImage+0x76a>
						line += lineSize;
 8017adc:	9b05      	ldr	r3, [sp, #20]
 8017ade:	4453      	add	r3, sl
 8017ae0:	9305      	str	r3, [sp, #20]
 8017ae2:	e7e6      	b.n	8017ab2 <STM32Ipl_ReadImage+0x113a>
							if (f_lseek(fp, line) != FR_OK) {
 8017ae4:	4619      	mov	r1, r3
 8017ae6:	a82a      	add	r0, sp, #168	; 0xa8
 8017ae8:	f7fd fcdc 	bl	80154a4 <f_lseek>
 8017aec:	2800      	cmp	r0, #0
 8017aee:	d0e0      	beq.n	8017ab2 <STM32Ipl_ReadImage+0x113a>
 8017af0:	e6bb      	b.n	801786a <STM32Ipl_ReadImage+0xef2>
						xfree(lineData);
 8017af2:	ee18 0a10 	vmov	r0, s16
						return stm32ipl_err_ReadingFile;
 8017af6:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 8017afa:	f000 f91b 	bl	8017d34 <xfree>
						xfree(outData);
 8017afe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b00:	f000 f918 	bl	8017d34 <xfree>
						return stm32ipl_err_ReadingFile;
 8017b04:	f7fe bf7d 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
					xfree(lineData);
 8017b08:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 8017b0a:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 8017b0e:	f000 f911 	bl	8017d34 <xfree>
					xfree(outData);
 8017b12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b14:	f000 f90e 	bl	8017d34 <xfree>
					return stm32ipl_err_ReadingFile;
 8017b18:	f7fe bf73 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
 8017b1c:	9b06      	ldr	r3, [sp, #24]
 8017b1e:	4619      	mov	r1, r3
 8017b20:	9305      	str	r3, [sp, #20]
 8017b22:	f7ff bb18 	b.w	8017156 <STM32Ipl_ReadImage+0x7de>
			for (uint32_t i = 0; i < abs(height); i++) {
 8017b26:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b28:	f7ff b941 	b.w	8016dae <STM32Ipl_ReadImage+0x436>
						xfree(lineData);
 8017b2c:	4630      	mov	r0, r6
						return stm32ipl_err_ReadingFile;
 8017b2e:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 8017b32:	f000 f8ff 	bl	8017d34 <xfree>
						xfree(outData);
 8017b36:	9807      	ldr	r0, [sp, #28]
 8017b38:	f000 f8fc 	bl	8017d34 <xfree>
						return stm32ipl_err_ReadingFile;
 8017b3c:	f7fe bf61 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
						xfree(lineData);
 8017b40:	4638      	mov	r0, r7
						return stm32ipl_err_ReadingFile;
 8017b42:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 8017b46:	f000 f8f5 	bl	8017d34 <xfree>
						xfree(outData);
 8017b4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017b4c:	f000 f8f2 	bl	8017d34 <xfree>
						return stm32ipl_err_ReadingFile;
 8017b50:	f7fe bf57 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
 8017b54:	9b06      	ldr	r3, [sp, #24]
 8017b56:	4619      	mov	r1, r3
 8017b58:	9307      	str	r3, [sp, #28]
 8017b5a:	f7ff bb8f 	b.w	801727c <STM32Ipl_ReadImage+0x904>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017b5e:	f04f 0800 	mov.w	r8, #0
 8017b62:	e6bb      	b.n	80178dc <STM32Ipl_ReadImage+0xf64>
					xfree(outData);
 8017b64:	980a      	ldr	r0, [sp, #40]	; 0x28
					return stm32ipl_err_OutOfMemory;
 8017b66:	f06f 0702 	mvn.w	r7, #2
					xfree(outData);
 8017b6a:	f000 f8e3 	bl	8017d34 <xfree>
					return stm32ipl_err_OutOfMemory;
 8017b6e:	f7fe bf48 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8017b72:	2300      	movs	r3, #0
 8017b74:	e741      	b.n	80179fa <STM32Ipl_ReadImage+0x1082>
		return stm32ipl_err_InvalidParameter;
 8017b76:	f06f 0701 	mvn.w	r7, #1
 8017b7a:	f7fe bf42 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 8017b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
				return stm32ipl_err_OutOfMemory;
 8017b80:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 8017b84:	f000 f8d6 	bl	8017d34 <xfree>
				return stm32ipl_err_OutOfMemory;
 8017b88:	f7fe bf3b 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 8017b8c:	9807      	ldr	r0, [sp, #28]
				return stm32ipl_err_OutOfMemory;
 8017b8e:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 8017b92:	f000 f8cf 	bl	8017d34 <xfree>
				return stm32ipl_err_OutOfMemory;
 8017b96:	f7fe bf34 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
		return stm32ipl_err_Generic;
 8017b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8017b9e:	f7fe bf30 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 8017ba2:	9810      	ldr	r0, [sp, #64]	; 0x40
				return stm32ipl_err_SeekingFile;
 8017ba4:	f06f 0709 	mvn.w	r7, #9
				xfree(outData);
 8017ba8:	f000 f8c4 	bl	8017d34 <xfree>
				return stm32ipl_err_SeekingFile;
 8017bac:	f7fe bf29 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
			for (uint32_t i = 0; i < abs(height); i++) {
 8017bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8017bb2:	e465      	b.n	8017480 <STM32Ipl_ReadImage+0xb08>
				xfree(outData);
 8017bb4:	9810      	ldr	r0, [sp, #64]	; 0x40
				return stm32ipl_err_OutOfMemory;
 8017bb6:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 8017bba:	f000 f8bb 	bl	8017d34 <xfree>
				return stm32ipl_err_OutOfMemory;
 8017bbe:	f7fe bf20 	b.w	8016a02 <STM32Ipl_ReadImage+0x8a>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bc4:	e48c      	b.n	80174e0 <STM32Ipl_ReadImage+0xb68>
				for (uint32_t i = 0; i < abs(height); i++) {
 8017bc6:	9308      	str	r3, [sp, #32]
 8017bc8:	f7ff ba80 	b.w	80170cc <STM32Ipl_ReadImage+0x754>
				xfree(lineData);
 8017bcc:	4638      	mov	r0, r7
				for (uint32_t i = 0; i < abs(height); i++) {
 8017bce:	930b      	str	r3, [sp, #44]	; 0x2c
				xfree(lineData);
 8017bd0:	e488      	b.n	80174e4 <STM32Ipl_ReadImage+0xb6c>
 8017bd2:	bf00      	nop
 8017bd4:	fffff800 	.word	0xfffff800

08017bd8 <STM32Ipl_WriteImage>:
 * filename	Name of the output file; if it is not valid, an error is returned.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_WriteImage(const image_t *img, const char *filename)
{
	if (!img || !img->data || !filename)
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	f000 8098 	beq.w	8017d0e <STM32Ipl_WriteImage+0x136>
{
 8017bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!img || !img->data || !filename)
 8017be0:	68c3      	ldr	r3, [r0, #12]
 8017be2:	4604      	mov	r4, r0
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	f000 808f 	beq.w	8017d08 <STM32Ipl_WriteImage+0x130>
 8017bea:	460d      	mov	r5, r1
 8017bec:	2900      	cmp	r1, #0
 8017bee:	f000 808b 	beq.w	8017d08 <STM32Ipl_WriteImage+0x130>
		return stm32ipl_err_InvalidParameter;

	if (img->bpp != IMAGE_BPP_BINARY && img->bpp != IMAGE_BPP_GRAYSCALE && img->bpp != IMAGE_BPP_RGB565
 8017bf2:	6883      	ldr	r3, [r0, #8]
 8017bf4:	2b02      	cmp	r3, #2
 8017bf6:	d901      	bls.n	8017bfc <STM32Ipl_WriteImage+0x24>
 8017bf8:	2b04      	cmp	r3, #4
 8017bfa:	d12a      	bne.n	8017c52 <STM32Ipl_WriteImage+0x7a>
	len = strlen(filename);
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	f7e8 fb79 	bl	80002f4 <strlen>
 8017c02:	4607      	mov	r7, r0
	upFilename = xalloc(len);
 8017c04:	f000 f888 	bl	8017d18 <xalloc>
	strcpy(upFilename, filename);
 8017c08:	4629      	mov	r1, r5
	upFilename = xalloc(len);
 8017c0a:	4606      	mov	r6, r0
	strcpy(upFilename, filename);
 8017c0c:	f00b f9e9 	bl	8022fe2 <strcpy>
	for (size_t i = 0; i < len; i++)
 8017c10:	b1e7      	cbz	r7, 8017c4c <STM32Ipl_WriteImage+0x74>
 8017c12:	1e79      	subs	r1, r7, #1
 8017c14:	1e73      	subs	r3, r6, #1
 8017c16:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8017d14 <STM32Ipl_WriteImage+0x13c>
 8017c1a:	4431      	add	r1, r6
		upFilename[i] = toupper(upFilename[i]);
 8017c1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017c20:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8017c24:	f000 0003 	and.w	r0, r0, #3
 8017c28:	2802      	cmp	r0, #2
 8017c2a:	d015      	beq.n	8017c58 <STM32Ipl_WriteImage+0x80>
	for (size_t i = 0; i < len; i++)
 8017c2c:	4299      	cmp	r1, r3
 8017c2e:	d1f5      	bne.n	8017c1c <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 8017c30:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 8017c32:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 8017c36:	d917      	bls.n	8017c68 <STM32Ipl_WriteImage+0x90>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 8017c38:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8017c3c:	2a47      	cmp	r2, #71	; 0x47
 8017c3e:	d036      	beq.n	8017cae <STM32Ipl_WriteImage+0xd6>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 8017c40:	2a50      	cmp	r2, #80	; 0x50
 8017c42:	d117      	bne.n	8017c74 <STM32Ipl_WriteImage+0x9c>
 8017c44:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8017c48:	2a4d      	cmp	r2, #77	; 0x4d
 8017c4a:	d035      	beq.n	8017cb8 <STM32Ipl_WriteImage+0xe0>
	xfree(upFilename);
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f000 f871 	bl	8017d34 <xfree>

		default:
			break;
	}

	return stm32ipl_err_UnsupportedFormat;
 8017c52:	f06f 0004 	mvn.w	r0, #4
}
 8017c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		upFilename[i] = toupper(upFilename[i]);
 8017c58:	3a20      	subs	r2, #32
	for (size_t i = 0; i < len; i++)
 8017c5a:	4299      	cmp	r1, r3
		upFilename[i] = toupper(upFilename[i]);
 8017c5c:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < len; i++)
 8017c5e:	d1dd      	bne.n	8017c1c <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 8017c60:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 8017c62:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 8017c66:	d8e7      	bhi.n	8017c38 <STM32Ipl_WriteImage+0x60>
	if (len >= 4) {
 8017c68:	d1f0      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'P') && (ptr[-3] == 'J') && (ptr[-4] == '.'))
 8017c6a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8017c6e:	2a47      	cmp	r2, #71	; 0x47
 8017c70:	d1e6      	bne.n	8017c40 <STM32Ipl_WriteImage+0x68>
 8017c72:	e7eb      	b.n	8017c4c <STM32Ipl_WriteImage+0x74>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 8017c74:	2a4d      	cmp	r2, #77	; 0x4d
 8017c76:	d1e9      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
 8017c78:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8017c7c:	2a50      	cmp	r2, #80	; 0x50
 8017c7e:	d02c      	beq.n	8017cda <STM32Ipl_WriteImage+0x102>
					if ((ptr[-1] == 'M') && (ptr[-2] == 'G') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 8017c80:	2a47      	cmp	r2, #71	; 0x47
 8017c82:	d1e3      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
 8017c84:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8017c88:	2a50      	cmp	r2, #80	; 0x50
 8017c8a:	d1df      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
 8017c8c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8017c90:	2b2e      	cmp	r3, #46	; 0x2e
 8017c92:	d1db      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 8017c94:	4630      	mov	r0, r6
 8017c96:	f000 f84d 	bl	8017d34 <xfree>
	switch (img->bpp) {
 8017c9a:	68a3      	ldr	r3, [r4, #8]
 8017c9c:	2b01      	cmp	r3, #1
 8017c9e:	d1d8      	bne.n	8017c52 <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 8017ca0:	4629      	mov	r1, r5
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	2205      	movs	r2, #5
}
 8017ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 8017caa:	f7fe bda9 	b.w	8016800 <savePnm>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 8017cae:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8017cb2:	2a45      	cmp	r2, #69	; 0x45
 8017cb4:	d0ca      	beq.n	8017c4c <STM32Ipl_WriteImage+0x74>
 8017cb6:	e7c9      	b.n	8017c4c <STM32Ipl_WriteImage+0x74>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 8017cb8:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8017cbc:	2a42      	cmp	r2, #66	; 0x42
 8017cbe:	d1c5      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
 8017cc0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8017cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8017cc6:	d1c1      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 8017cc8:	4630      	mov	r0, r6
 8017cca:	f000 f833 	bl	8017d34 <xfree>
			return saveBmp(img, filename);
 8017cce:	4629      	mov	r1, r5
 8017cd0:	4620      	mov	r0, r4
}
 8017cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return saveBmp(img, filename);
 8017cd6:	f7fe bbdb 	b.w	8016490 <saveBmp>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 8017cda:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8017cde:	2a50      	cmp	r2, #80	; 0x50
 8017ce0:	d1b4      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
 8017ce2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8017ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8017ce8:	d1b0      	bne.n	8017c4c <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 8017cea:	4630      	mov	r0, r6
 8017cec:	f000 f822 	bl	8017d34 <xfree>
	switch (img->bpp) {
 8017cf0:	68a3      	ldr	r3, [r4, #8]
 8017cf2:	2b02      	cmp	r3, #2
 8017cf4:	d001      	beq.n	8017cfa <STM32Ipl_WriteImage+0x122>
 8017cf6:	2b04      	cmp	r3, #4
 8017cf8:	d1ab      	bne.n	8017c52 <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	4620      	mov	r0, r4
 8017cfe:	2206      	movs	r2, #6
}
 8017d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 8017d04:	f7fe bd7c 	b.w	8016800 <savePnm>
		return stm32ipl_err_InvalidParameter;
 8017d08:	f06f 0001 	mvn.w	r0, #1
}
 8017d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return stm32ipl_err_InvalidParameter;
 8017d0e:	f06f 0001 	mvn.w	r0, #1
}
 8017d12:	4770      	bx	lr
 8017d14:	080776c1 	.word	0x080776c1

08017d18 <xalloc>:
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc(uint32_t size)
{
	return umm_malloc(size);
 8017d18:	f000 baf8 	b.w	801830c <umm_malloc>

08017d1c <xalloc0>:
 * Such buffer must be released with xfree().
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc0(uint32_t size)
{
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	4605      	mov	r5, r0
	void *mem = umm_malloc(size);
 8017d20:	f000 faf4 	bl	801830c <umm_malloc>

	if (mem == NULL)
 8017d24:	4604      	mov	r4, r0
 8017d26:	b118      	cbz	r0, 8017d30 <xalloc0+0x14>
		return NULL;

	memset(mem, 0, size);
 8017d28:	462a      	mov	r2, r5
 8017d2a:	2100      	movs	r1, #0
 8017d2c:	f00a fa6e 	bl	802220c <memset>

	return mem;
}
 8017d30:	4620      	mov	r0, r4
 8017d32:	bd38      	pop	{r3, r4, r5, pc}

08017d34 <xfree>:
 * @param mem	Pointer to the the memory buffer to be released.
 * @return		void
 */
void xfree(void *mem)
{
	umm_free(mem);
 8017d34:	f000 ba92 	b.w	801825c <umm_free>

08017d38 <fb_init>:
 * hood, uses heap memory .
 * @return		void.
 */
void fb_init(void)
{
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 8017d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	4805      	ldr	r0, [pc, #20]	; (8017d54 <fb_init+0x1c>)
{
 8017d40:	b508      	push	{r3, lr}
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 8017d42:	f00a fa63 	bl	802220c <memset>
	g_fb_alloc_inext = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	4903      	ldr	r1, [pc, #12]	; (8017d58 <fb_init+0x20>)
	g_fb_alloc_imark = 0;
 8017d4a:	4a04      	ldr	r2, [pc, #16]	; (8017d5c <fb_init+0x24>)
	g_fb_alloc_inext = 0;
 8017d4c:	600b      	str	r3, [r1, #0]
	g_fb_alloc_imark = 0;
 8017d4e:	6013      	str	r3, [r2, #0]
}
 8017d50:	bd08      	pop	{r3, pc}
 8017d52:	bf00      	nop
 8017d54:	30008234 	.word	0x30008234
 8017d58:	30008230 	.word	0x30008230
 8017d5c:	3000822c 	.word	0x3000822c

08017d60 <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 8017d60:	2800      	cmp	r0, #0
 8017d62:	f000 81dd 	beq.w	8018120 <STM32Ipl_Downscale+0x3c0>
 8017d66:	68c3      	ldr	r3, [r0, #12]
{
 8017d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d6c:	4681      	mov	r9, r0
 8017d6e:	b089      	sub	sp, #36	; 0x24
	STM32IPL_CHECK_VALID_IMAGE(dst)
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 81d2 	beq.w	801811a <STM32Ipl_Downscale+0x3ba>
 8017d76:	460e      	mov	r6, r1
 8017d78:	2900      	cmp	r1, #0
 8017d7a:	f000 81ce 	beq.w	801811a <STM32Ipl_Downscale+0x3ba>
 8017d7e:	68cb      	ldr	r3, [r1, #12]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	f000 81ca 	beq.w	801811a <STM32Ipl_Downscale+0x3ba>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 8017d86:	210f      	movs	r1, #15
 8017d88:	4617      	mov	r7, r2
 8017d8a:	f7fe fabb 	bl	8016304 <STM32Ipl_ImageFormatSupported>
 8017d8e:	b378      	cbz	r0, 8017df0 <STM32Ipl_Downscale+0x90>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 8017d90:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8017d94:	68b3      	ldr	r3, [r6, #8]
 8017d96:	429c      	cmp	r4, r3
 8017d98:	f040 81bf 	bne.w	801811a <STM32Ipl_Downscale+0x3ba>

	if ((dst->w < 1) || (dst->h < 1))
 8017d9c:	f8d6 8000 	ldr.w	r8, [r6]
 8017da0:	f1b8 0f00 	cmp.w	r8, #0
 8017da4:	f340 81b9 	ble.w	801811a <STM32Ipl_Downscale+0x3ba>
 8017da8:	6871      	ldr	r1, [r6, #4]
 8017daa:	2900      	cmp	r1, #0
 8017dac:	9101      	str	r1, [sp, #4]
 8017dae:	f340 81b4 	ble.w	801811a <STM32Ipl_Downscale+0x3ba>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8017db2:	e9d9 b200 	ldrd	fp, r2, [r9]
 8017db6:	0412      	lsls	r2, r2, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 8017db8:	ea4f 430b 	mov.w	r3, fp, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8017dbc:	fb92 f2f1 	sdiv	r2, r2, r1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 8017dc0:	fb93 f3f8 	sdiv	r3, r3, r8
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8017dc4:	1c51      	adds	r1, r2, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 8017dc6:	1c5d      	adds	r5, r3, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8017dc8:	9102      	str	r1, [sp, #8]

	if (reversed) {
 8017dca:	b147      	cbz	r7, 8017dde <STM32Ipl_Downscale+0x7e>
		switch (src->bpp) {
 8017dcc:	2c04      	cmp	r4, #4
 8017dce:	d80f      	bhi.n	8017df0 <STM32Ipl_Downscale+0x90>
 8017dd0:	e8df f014 	tbh	[pc, r4, lsl #1]
 8017dd4:	00e8011d 	.word	0x00e8011d
 8017dd8:	000e016c 	.word	0x000e016c
 8017ddc:	0013      	.short	0x0013

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 8017dde:	2c04      	cmp	r4, #4
 8017de0:	d806      	bhi.n	8017df0 <STM32Ipl_Downscale+0x90>
 8017de2:	e8df f014 	tbh	[pc, r4, lsl #1]
 8017de6:	0049      	.short	0x0049
 8017de8:	00ef00bd 	.word	0x00ef00bd
 8017dec:	008e0005 	.word	0x008e0005
	if (reversed) {
 8017df0:	f06f 0004 	mvn.w	r0, #4
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
}
 8017df4:	b009      	add	sp, #36	; 0x24
 8017df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8017dfa:	9901      	ldr	r1, [sp, #4]
 8017dfc:	f108 30ff 	add.w	r0, r8, #4294967295
 8017e00:	9c02      	ldr	r4, [sp, #8]
 8017e02:	43d2      	mvns	r2, r2
 8017e04:	f101 3eff 	add.w	lr, r1, #4294967295
 8017e08:	fb05 f000 	mul.w	r0, r5, r0
 8017e0c:	68f1      	ldr	r1, [r6, #12]
 8017e0e:	43db      	mvns	r3, r3
 8017e10:	fb0e fa08 	mul.w	sl, lr, r8
 8017e14:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8017e18:	9002      	str	r0, [sp, #8]
 8017e1a:	eba8 0088 	sub.w	r0, r8, r8, lsl #2
 8017e1e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8017e22:	fb0e f904 	mul.w	r9, lr, r4
 8017e26:	448a      	add	sl, r1
 8017e28:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 8017e2c:	9101      	str	r1, [sp, #4]
 8017e2e:	0041      	lsls	r1, r0, #1
 8017e30:	9103      	str	r1, [sp, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017e32:	9901      	ldr	r1, [sp, #4]
 8017e34:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8017e38:	9c02      	ldr	r4, [sp, #8]
 8017e3a:	eb01 080a 	add.w	r8, r1, sl
 8017e3e:	fb0b fc0c 	mul.w	ip, fp, ip
 8017e42:	4640      	mov	r0, r8
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8017e44:	eb0c 4124 	add.w	r1, ip, r4, asr #16
 8017e48:	1ec5      	subs	r5, r0, #3
 8017e4a:	441c      	add	r4, r3
 8017e4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 8017e50:	45aa      	cmp	sl, r5
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8017e52:	eb06 0701 	add.w	r7, r6, r1
 8017e56:	5a71      	ldrh	r1, [r6, r1]
 8017e58:	78bf      	ldrb	r7, [r7, #2]
 8017e5a:	f820 1c03 	strh.w	r1, [r0, #-3]
 8017e5e:	4628      	mov	r0, r5
 8017e60:	70af      	strb	r7, [r5, #2]
					for (int x = dstW - 1; x >= 0; x--)
 8017e62:	d1ef      	bne.n	8017e44 <STM32Ipl_Downscale+0xe4>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8017e64:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017e68:	9903      	ldr	r1, [sp, #12]
 8017e6a:	4491      	add	r9, r2
 8017e6c:	f1be 3fff 	cmp.w	lr, #4294967295
 8017e70:	eb01 0a08 	add.w	sl, r1, r8
 8017e74:	d1dd      	bne.n	8017e32 <STM32Ipl_Downscale+0xd2>
 8017e76:	e14c      	b.n	8018112 <STM32Ipl_Downscale+0x3b2>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017e78:	f10b 021f 	add.w	r2, fp, #31
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8017e7c:	f108 031f 	add.w	r3, r8, #31
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017e80:	f8d9 100c 	ldr.w	r1, [r9, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8017e84:	f04f 0a00 	mov.w	sl, #0
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017e88:	0952      	lsrs	r2, r2, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8017e8a:	f04f 0b01 	mov.w	fp, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8017e8e:	095b      	lsrs	r3, r3, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8017e90:	4689      	mov	r9, r1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017e92:	9205      	str	r2, [sp, #20]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8017e94:	68f2      	ldr	r2, [r6, #12]
 8017e96:	9306      	str	r3, [sp, #24]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8017e98:	9407      	str	r4, [sp, #28]
				for (int32_t y = 0; y < dstH; y++) {
 8017e9a:	e9cd a403 	strd	sl, r4, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017e9e:	9b03      	ldr	r3, [sp, #12]
 8017ea0:	2000      	movs	r0, #0
					for (int32_t x = 0; x < dstW; x++)
 8017ea2:	9907      	ldr	r1, [sp, #28]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017ea4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017ea8:	9b05      	ldr	r3, [sp, #20]
 8017eaa:	fb03 fe0e 	mul.w	lr, r3, lr
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8017eae:	eb0e 5360 	add.w	r3, lr, r0, asr #21
 8017eb2:	f3c0 4404 	ubfx	r4, r0, #16, #5
 8017eb6:	f001 071f 	and.w	r7, r1, #31
 8017eba:	eb0a 1661 	add.w	r6, sl, r1, asr #5
 8017ebe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 8017ec2:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8017ec4:	fa0b fc07 	lsl.w	ip, fp, r7
 8017ec8:	4428      	add	r0, r5
 8017eca:	40e3      	lsrs	r3, r4
 8017ecc:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 8017ed0:	4588      	cmp	r8, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8017ed2:	f003 0301 	and.w	r3, r3, #1
 8017ed6:	ea24 040c 	bic.w	r4, r4, ip
 8017eda:	fa03 f307 	lsl.w	r3, r3, r7
 8017ede:	ea43 0304 	orr.w	r3, r3, r4
 8017ee2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 8017ee6:	d1e2      	bne.n	8017eae <STM32Ipl_Downscale+0x14e>
				for (int32_t y = 0; y < dstH; y++) {
 8017ee8:	9b04      	ldr	r3, [sp, #16]
 8017eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017eee:	3301      	adds	r3, #1
 8017ef0:	4401      	add	r1, r0
 8017ef2:	9304      	str	r3, [sp, #16]
 8017ef4:	9103      	str	r1, [sp, #12]
 8017ef6:	9906      	ldr	r1, [sp, #24]
 8017ef8:	448a      	add	sl, r1
 8017efa:	9901      	ldr	r1, [sp, #4]
 8017efc:	4299      	cmp	r1, r3
 8017efe:	d1ce      	bne.n	8017e9e <STM32Ipl_Downscale+0x13e>
 8017f00:	e107      	b.n	8018112 <STM32Ipl_Downscale+0x3b2>
 8017f02:	eb08 0348 	add.w	r3, r8, r8, lsl #1
	if (reversed) {
 8017f06:	f04f 0c00 	mov.w	ip, #0
 8017f0a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8017f0e:	f8d9 000c 	ldr.w	r0, [r9, #12]
				for (int32_t y = 0; y < dstH; y++) {
 8017f12:	46e6      	mov	lr, ip
 8017f14:	eb0a 0703 	add.w	r7, sl, r3
	if (reversed) {
 8017f18:	46e1      	mov	r9, ip
 8017f1a:	9303      	str	r3, [sp, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017f1c:	ea4f 4629 	mov.w	r6, r9, asr #16
 8017f20:	2100      	movs	r1, #0
 8017f22:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8017f26:	fb0b f606 	mul.w	r6, fp, r6
					for (int32_t x = 0; x < dstW; x++)
 8017f2a:	4452      	add	r2, sl
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8017f2c:	eb06 4321 	add.w	r3, r6, r1, asr #16
 8017f30:	3203      	adds	r2, #3
 8017f32:	4429      	add	r1, r5
 8017f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f38:	18c4      	adds	r4, r0, r3
 8017f3a:	5ac3      	ldrh	r3, [r0, r3]
 8017f3c:	78a4      	ldrb	r4, [r4, #2]
 8017f3e:	f822 3c03 	strh.w	r3, [r2, #-3]
 8017f42:	f802 4c01 	strb.w	r4, [r2, #-1]
					for (int32_t x = 0; x < dstW; x++)
 8017f46:	4297      	cmp	r7, r2
 8017f48:	d1f0      	bne.n	8017f2c <STM32Ipl_Downscale+0x1cc>
				for (int32_t y = 0; y < dstH; y++) {
 8017f4a:	9b02      	ldr	r3, [sp, #8]
 8017f4c:	f10e 0e01 	add.w	lr, lr, #1
 8017f50:	44c4      	add	ip, r8
 8017f52:	4499      	add	r9, r3
 8017f54:	9b03      	ldr	r3, [sp, #12]
 8017f56:	441f      	add	r7, r3
 8017f58:	9b01      	ldr	r3, [sp, #4]
 8017f5a:	4573      	cmp	r3, lr
 8017f5c:	d1de      	bne.n	8017f1c <STM32Ipl_Downscale+0x1bc>
 8017f5e:	e0d8      	b.n	8018112 <STM32Ipl_Downscale+0x3b2>
	if (reversed) {
 8017f60:	2700      	movs	r7, #0
 8017f62:	4641      	mov	r1, r8
				for (int32_t y = 0; y < dstH; y++) {
 8017f64:	463c      	mov	r4, r7
 8017f66:	e9dd ce01 	ldrd	ip, lr, [sp, #4]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8017f6a:	68f3      	ldr	r3, [r6, #12]
 8017f6c:	fb01 f104 	mul.w	r1, r1, r4
 8017f70:	f8d9 200c 	ldr.w	r2, [r9, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017f74:	1438      	asrs	r0, r7, #16
					for (int32_t x = 0; x < dstW; x++)
 8017f76:	eb03 0a08 	add.w	sl, r3, r8
 8017f7a:	440b      	add	r3, r1
 8017f7c:	fb0b 2000 	mla	r0, fp, r0, r2
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8017f80:	2200      	movs	r2, #0
 8017f82:	448a      	add	sl, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8017f84:	1411      	asrs	r1, r2, #16
 8017f86:	442a      	add	r2, r5
 8017f88:	5c41      	ldrb	r1, [r0, r1]
 8017f8a:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 8017f8e:	459a      	cmp	sl, r3
 8017f90:	d1f8      	bne.n	8017f84 <STM32Ipl_Downscale+0x224>
				for (int32_t y = 0; y < dstH; y++) {
 8017f92:	3401      	adds	r4, #1
 8017f94:	4477      	add	r7, lr
 8017f96:	45a4      	cmp	ip, r4
 8017f98:	f000 80bb 	beq.w	8018112 <STM32Ipl_Downscale+0x3b2>
 8017f9c:	f8d9 b000 	ldr.w	fp, [r9]
 8017fa0:	6831      	ldr	r1, [r6, #0]
 8017fa2:	e7e2      	b.n	8017f6a <STM32Ipl_Downscale+0x20a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8017fa4:	9b01      	ldr	r3, [sp, #4]
 8017fa6:	4640      	mov	r0, r8
 8017fa8:	1e5c      	subs	r4, r3, #1
 8017faa:	e000      	b.n	8017fae <STM32Ipl_Downscale+0x24e>
 8017fac:	6830      	ldr	r0, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8017fae:	68f3      	ldr	r3, [r6, #12]
 8017fb0:	4642      	mov	r2, r8
 8017fb2:	2100      	movs	r1, #0
 8017fb4:	fb00 3004 	mla	r0, r0, r4, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8017fb8:	3c01      	subs	r4, #1
 8017fba:	f00a f927 	bl	802220c <memset>
 8017fbe:	1c63      	adds	r3, r4, #1
 8017fc0:	d1f4      	bne.n	8017fac <STM32Ipl_Downscale+0x24c>
 8017fc2:	e0a6      	b.n	8018112 <STM32Ipl_Downscale+0x3b2>
 8017fc4:	f8d6 e00c 	ldr.w	lr, [r6, #12]
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 8017fc8:	2700      	movs	r7, #0
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017fca:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8017fce:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8017fd2:	eb0e 0448 	add.w	r4, lr, r8, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 8017fd6:	46b9      	mov	r9, r7
				for (int32_t y = 0; y < dstH; y++) {
 8017fd8:	46bc      	mov	ip, r7
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8017fda:	ea4f 4029 	mov.w	r0, r9, asr #16
 8017fde:	2200      	movs	r2, #0
 8017fe0:	eb0e 0347 	add.w	r3, lr, r7, lsl #1
 8017fe4:	fb0b f000 	mul.w	r0, fp, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 8017fe8:	eb00 4122 	add.w	r1, r0, r2, asr #16
 8017fec:	442a      	add	r2, r5
 8017fee:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8017ff2:	f823 1b02 	strh.w	r1, [r3], #2
					for (int32_t x = 0; x < dstW; x++)
 8017ff6:	429c      	cmp	r4, r3
 8017ff8:	d1f6      	bne.n	8017fe8 <STM32Ipl_Downscale+0x288>
				for (int32_t y = 0; y < dstH; y++) {
 8017ffa:	9b02      	ldr	r3, [sp, #8]
 8017ffc:	f10c 0c01 	add.w	ip, ip, #1
 8018000:	4447      	add	r7, r8
 8018002:	4454      	add	r4, sl
 8018004:	4499      	add	r9, r3
 8018006:	9b01      	ldr	r3, [sp, #4]
 8018008:	4563      	cmp	r3, ip
 801800a:	d1e6      	bne.n	8017fda <STM32Ipl_Downscale+0x27a>
 801800c:	e081      	b.n	8018112 <STM32Ipl_Downscale+0x3b2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801800e:	9901      	ldr	r1, [sp, #4]
 8018010:	1c57      	adds	r7, r2, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8018012:	f108 001f 	add.w	r0, r8, #31
 8018016:	f108 34ff 	add.w	r4, r8, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801801a:	f101 3eff 	add.w	lr, r1, #4294967295
 801801e:	43d2      	mvns	r2, r2
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8018020:	f10b 011f 	add.w	r1, fp, #31
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8018024:	0940      	lsrs	r0, r0, #5
 8018026:	fb0e f707 	mul.w	r7, lr, r7
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801802a:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 801802e:	0949      	lsrs	r1, r1, #5
 8018030:	9205      	str	r2, [sp, #20]
 8018032:	9701      	str	r7, [sp, #4]
 8018034:	43db      	mvns	r3, r3
 8018036:	fb04 f205 	mul.w	r2, r4, r5
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801803a:	68f7      	ldr	r7, [r6, #12]
 801803c:	fb00 fa0e 	mul.w	sl, r0, lr
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8018040:	f04f 0b01 	mov.w	fp, #1
 8018044:	9406      	str	r4, [sp, #24]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8018046:	9003      	str	r0, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8018048:	9102      	str	r1, [sp, #8]
 801804a:	9204      	str	r2, [sp, #16]
 801804c:	9a01      	ldr	r2, [sp, #4]
 801804e:	9804      	ldr	r0, [sp, #16]
 8018050:	ea4f 4922 	mov.w	r9, r2, asr #16
 8018054:	9a02      	ldr	r2, [sp, #8]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8018056:	9906      	ldr	r1, [sp, #24]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8018058:	fb02 f909 	mul.w	r9, r2, r9
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801805c:	eb09 5260 	add.w	r2, r9, r0, asr #21
 8018060:	f3c0 4404 	ubfx	r4, r0, #16, #5
 8018064:	f001 061f 	and.w	r6, r1, #31
 8018068:	eb0a 1561 	add.w	r5, sl, r1, asr #5
 801806c:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8018070:	3901      	subs	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8018072:	fa0b f806 	lsl.w	r8, fp, r6
 8018076:	4418      	add	r0, r3
 8018078:	40e2      	lsrs	r2, r4
 801807a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 801807e:	f002 0201 	and.w	r2, r2, #1
 8018082:	ea24 0408 	bic.w	r4, r4, r8
 8018086:	40b2      	lsls	r2, r6
 8018088:	4322      	orrs	r2, r4
 801808a:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801808e:	1c4a      	adds	r2, r1, #1
 8018090:	d1e4      	bne.n	801805c <STM32Ipl_Downscale+0x2fc>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8018092:	9a01      	ldr	r2, [sp, #4]
 8018094:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018098:	9905      	ldr	r1, [sp, #20]
 801809a:	f1be 3fff 	cmp.w	lr, #4294967295
 801809e:	440a      	add	r2, r1
 80180a0:	9201      	str	r2, [sp, #4]
 80180a2:	9a03      	ldr	r2, [sp, #12]
 80180a4:	ebaa 0a02 	sub.w	sl, sl, r2
 80180a8:	d1d0      	bne.n	801804c <STM32Ipl_Downscale+0x2ec>
 80180aa:	e032      	b.n	8018112 <STM32Ipl_Downscale+0x3b2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 80180ac:	9901      	ldr	r1, [sp, #4]
 80180ae:	f108 30ff 	add.w	r0, r8, #4294967295
 80180b2:	ebc8 7a88 	rsb	sl, r8, r8, lsl #30
 80180b6:	1c54      	adds	r4, r2, #1
 80180b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80180bc:	68f6      	ldr	r6, [r6, #12]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 80180be:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 80180c2:	43d7      	mvns	r7, r2
 80180c4:	fb0e f108 	mul.w	r1, lr, r8
 80180c8:	43db      	mvns	r3, r3
 80180ca:	fb05 f200 	mul.w	r2, r5, r0
 80180ce:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80180d2:	fb0e f904 	mul.w	r9, lr, r4
 80180d6:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80180da:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80180de:	9201      	str	r2, [sp, #4]
 80180e0:	ea4f 4429 	mov.w	r4, r9, asr #16
 80180e4:	eb08 0506 	add.w	r5, r8, r6
 80180e8:	9901      	ldr	r1, [sp, #4]
 80180ea:	fb0b f404 	mul.w	r4, fp, r4
 80180ee:	462a      	mov	r2, r5
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 80180f0:	eb04 4021 	add.w	r0, r4, r1, asr #16
 80180f4:	4419      	add	r1, r3
 80180f6:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
 80180fa:	f822 0d02 	strh.w	r0, [r2, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 80180fe:	4296      	cmp	r6, r2
 8018100:	d1f6      	bne.n	80180f0 <STM32Ipl_Downscale+0x390>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8018102:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018106:	44b9      	add	r9, r7
 8018108:	eb0a 0605 	add.w	r6, sl, r5
 801810c:	f1be 3fff 	cmp.w	lr, #4294967295
 8018110:	d1e6      	bne.n	80180e0 <STM32Ipl_Downscale+0x380>
	return stm32ipl_err_Ok;
 8018112:	2000      	movs	r0, #0
}
 8018114:	b009      	add	sp, #36	; 0x24
 8018116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 801811a:	f06f 0001 	mvn.w	r0, #1
 801811e:	e669      	b.n	8017df4 <STM32Ipl_Downscale+0x94>
 8018120:	f06f 0001 	mvn.w	r0, #1
}
 8018124:	4770      	bx	lr
 8018126:	bf00      	nop

08018128 <umm_malloc_core>:
   * When a block removed from the free list, the space used by the free
   * pointers is available for data. That's what the first calculation
   * of size is doing.
   */

  if( size <= (sizeof(((umm_block *)0)->body)) )
 8018128:	287c      	cmp	r0, #124	; 0x7c
/* ------------------------------------------------------------------------
 * Must be called only from within critical sections guarded by
 * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
 */

static void *umm_malloc_core( size_t size ) {
 801812a:	b4f0      	push	{r4, r5, r6, r7}
  if( size <= (sizeof(((umm_block *)0)->body)) )
 801812c:	d96c      	bls.n	8018208 <umm_malloc_core+0xe0>
  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 801812e:	f1a0 047d 	sub.w	r4, r0, #125	; 0x7d
  return( 2 + size/(sizeof(umm_block)) );
 8018132:	09e4      	lsrs	r4, r4, #7
 8018134:	3402      	adds	r4, #2
 8018136:	b2a4      	uxth	r4, r4
   *
   * This part may be customized to be a best-fit, worst-fit, or first-fit
   * algorithm
   */

  cf = UMM_NFREE(0);
 8018138:	4b34      	ldr	r3, [pc, #208]	; (801820c <umm_malloc_core+0xe4>)
 801813a:	681f      	ldr	r7, [r3, #0]
 801813c:	88b8      	ldrh	r0, [r7, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( cf ) {
 801813e:	2800      	cmp	r0, #0
 8018140:	d053      	beq.n	80181ea <umm_malloc_core+0xc2>
 8018142:	4602      	mov	r2, r0
  bestSize  = 0x7FFF;
 8018144:	f647 76ff 	movw	r6, #32767	; 0x7fff
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 8018148:	eb07 11c2 	add.w	r1, r7, r2, lsl #7
 801814c:	880b      	ldrh	r3, [r1, #0]
 801814e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018152:	1a9b      	subs	r3, r3, r2
 8018154:	b29b      	uxth	r3, r3

    DBGLOG_TRACE( "Looking at block %6i size %6i\n", cf, blockSize );

#if defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 8018156:	429c      	cmp	r4, r3
 8018158:	bf8c      	ite	hi
 801815a:	2500      	movhi	r5, #0
 801815c:	2501      	movls	r5, #1
 801815e:	42b3      	cmp	r3, r6
 8018160:	d202      	bcs.n	8018168 <umm_malloc_core+0x40>
 8018162:	b10d      	cbz	r5, 8018168 <umm_malloc_core+0x40>
 8018164:	4610      	mov	r0, r2
 8018166:	461e      	mov	r6, r3
      break;
#else
#  error "No UMM_*_FIT is defined - check umm_malloc_cfg.h"
#endif

    cf = UMM_NFREE(cf);
 8018168:	888a      	ldrh	r2, [r1, #4]
  while( cf ) {
 801816a:	2a00      	cmp	r2, #0
 801816c:	d1ec      	bne.n	8018148 <umm_malloc_core+0x20>
  }

  if( 0x7FFF != bestSize ) {
 801816e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018172:	4296      	cmp	r6, r2
 8018174:	d03d      	beq.n	80181f2 <umm_malloc_core+0xca>
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 8018176:	eb07 12c0 	add.w	r2, r7, r0, lsl #7
 801817a:	42b4      	cmp	r4, r6
 801817c:	8813      	ldrh	r3, [r2, #0]
 801817e:	bf8c      	ite	hi
 8018180:	2500      	movhi	r5, #0
 8018182:	2501      	movls	r5, #1
 8018184:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8018188:	2900      	cmp	r1, #0
 801818a:	d03a      	beq.n	8018202 <umm_malloc_core+0xda>
 801818c:	b3cd      	cbz	r5, 8018202 <umm_malloc_core+0xda>
     * what we need, unlink it from the free list and mark it as in use, and
     * link the rest of the block back into the freelist as if it was a new
     * block on the free list...
     */

    if( blockSize == blocks ) {
 801818e:	42a6      	cmp	r6, r4
 8018190:	d01f      	beq.n	80181d2 <umm_malloc_core+0xaa>
  UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) | new_freemask;
 8018192:	4404      	add	r4, r0
 8018194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018198:	eb07 11c4 	add.w	r1, r7, r4, lsl #7
 801819c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80181a0:	01e5      	lsls	r5, r4, #7
 80181a2:	537b      	strh	r3, [r7, r5]
  UMM_PBLOCK(c+blocks) = c;
 80181a4:	8048      	strh	r0, [r1, #2]
  UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 80181a6:	8813      	ldrh	r3, [r2, #0]
 80181a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80181ac:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 80181b0:	805c      	strh	r4, [r3, #2]
       * free block from `cf` to `cf + blocks`. So we have to adjust pointers
       * to and from adjacent free blocks.
       */

      /* previous free block */
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 80181b2:	88d0      	ldrh	r0, [r2, #6]
  UMM_NBLOCK(c)                                = (c+blocks);
 80181b4:	8014      	strh	r4, [r2, #0]
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 80181b6:	b283      	uxth	r3, r0
 80181b8:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 80181bc:	809c      	strh	r4, [r3, #4]
      UMM_PFREE( cf + blocks ) = UMM_PFREE(cf);
 80181be:	80c8      	strh	r0, [r1, #6]

      /* next free block */
      UMM_PFREE( UMM_NFREE(cf) ) = cf + blocks;
 80181c0:	8890      	ldrh	r0, [r2, #4]
 80181c2:	b283      	uxth	r3, r0
 80181c4:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 80181c8:	80dc      	strh	r4, [r3, #6]
      UMM_NFREE( cf + blocks ) = UMM_NFREE(cf);
 80181ca:	8088      	strh	r0, [r1, #4]
    DBGLOG_DEBUG(  "Can't allocate %5i blocks\n", blocks );

    return( (void *)NULL );
  }

  return( (void *)&UMM_DATA(cf) );
 80181cc:	1d10      	adds	r0, r2, #4
}
 80181ce:	bcf0      	pop	{r4, r5, r6, r7}
 80181d0:	4770      	bx	lr
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 80181d2:	88d0      	ldrh	r0, [r2, #6]
 80181d4:	8894      	ldrh	r4, [r2, #4]
 80181d6:	b283      	uxth	r3, r0
 80181d8:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 80181dc:	809c      	strh	r4, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 80181de:	8893      	ldrh	r3, [r2, #4]
 80181e0:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 80181e4:	80d8      	strh	r0, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 80181e6:	8011      	strh	r1, [r2, #0]
}
 80181e8:	e7f0      	b.n	80181cc <umm_malloc_core+0xa4>
  if( 0x7FFF != bestSize ) {
 80181ea:	fab4 f584 	clz	r5, r4
  uint16_t blockSize = 0;
 80181ee:	4603      	mov	r3, r0
 80181f0:	096d      	lsrs	r5, r5, #5
 80181f2:	463a      	mov	r2, r7
 80181f4:	461e      	mov	r6, r3
 80181f6:	2000      	movs	r0, #0
  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 80181f8:	8813      	ldrh	r3, [r2, #0]
 80181fa:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80181fe:	2900      	cmp	r1, #0
 8018200:	d1c4      	bne.n	801818c <umm_malloc_core+0x64>
    return( (void *)NULL );
 8018202:	2000      	movs	r0, #0
}
 8018204:	bcf0      	pop	{r4, r5, r6, r7}
 8018206:	4770      	bx	lr
    return( 1 );
 8018208:	2401      	movs	r4, #1
 801820a:	e795      	b.n	8018138 <umm_malloc_core+0x10>
 801820c:	30008334 	.word	0x30008334

08018210 <umm_init>:
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 8018210:	460a      	mov	r2, r1
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 8018212:	2100      	movs	r1, #0
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 8018214:	b538      	push	{r3, r4, r5, lr}
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 8018216:	09d3      	lsrs	r3, r2, #7
 8018218:	4d0e      	ldr	r5, [pc, #56]	; (8018254 <umm_init+0x44>)
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 801821a:	4c0f      	ldr	r4, [pc, #60]	; (8018258 <umm_init+0x48>)
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 801821c:	802b      	strh	r3, [r5, #0]
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 801821e:	6020      	str	r0, [r4, #0]
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 8018220:	f009 fff4 	bl	802220c <memset>
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8018224:	8828      	ldrh	r0, [r5, #0]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8018226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    UMM_NBLOCK(0) = 1;
 801822a:	6822      	ldr	r2, [r4, #0]
    UMM_NFREE(0)  = 1;
 801822c:	f04f 1501 	mov.w	r5, #65537	; 0x10001
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8018230:	1e41      	subs	r1, r0, #1
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8018232:	4403      	add	r3, r0
    UMM_NBLOCK(0) = 1;
 8018234:	2401      	movs	r4, #1
 8018236:	2000      	movs	r0, #0
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8018238:	ea6f 4141 	mvn.w	r1, r1, lsl #17
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801823c:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    UMM_NFREE(0)  = 1;
 8018240:	6055      	str	r5, [r2, #4]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8018242:	ea6f 4151 	mvn.w	r1, r1, lsr #17
    UMM_NBLOCK(0) = 1;
 8018246:	7014      	strb	r4, [r2, #0]
 8018248:	7050      	strb	r0, [r2, #1]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801824a:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801824e:	709c      	strb	r4, [r3, #2]
 8018250:	70d8      	strb	r0, [r3, #3]
}
 8018252:	bd38      	pop	{r3, r4, r5, pc}
 8018254:	30008338 	.word	0x30008338
 8018258:	30008334 	.word	0x30008334

0801825c <umm_free>:
  if (umm_heap == NULL) {
 801825c:	4b2a      	ldr	r3, [pc, #168]	; (8018308 <umm_free+0xac>)
 801825e:	6819      	ldr	r1, [r3, #0]
  if( (void *)0 == ptr ) {
 8018260:	2800      	cmp	r0, #0
 8018262:	d050      	beq.n	8018306 <umm_free+0xaa>
 8018264:	2900      	cmp	r1, #0
 8018266:	d04e      	beq.n	8018306 <umm_free+0xaa>
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 8018268:	1a40      	subs	r0, r0, r1
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801826a:	f3c0 13cf 	ubfx	r3, r0, #7, #16
void umm_free( void *ptr ) {
 801826e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8018270:	eb01 14c3 	add.w	r4, r1, r3, lsl #7
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 8018274:	4618      	mov	r0, r3
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8018276:	01de      	lsls	r6, r3, #7
 8018278:	8823      	ldrh	r3, [r4, #0]
 801827a:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
 801827e:	ea4f 1cc3 	mov.w	ip, r3, lsl #7
 8018282:	8815      	ldrh	r5, [r2, #0]
 8018284:	b2af      	uxth	r7, r5
 8018286:	042d      	lsls	r5, r5, #16
 8018288:	d422      	bmi.n	80182d0 <umm_free+0x74>
  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 801828a:	8865      	ldrh	r5, [r4, #2]
 801828c:	b2aa      	uxth	r2, r5
 801828e:	eb01 17c2 	add.w	r7, r1, r2, lsl #7
 8018292:	01d2      	lsls	r2, r2, #7
 8018294:	f9b7 7000 	ldrsh.w	r7, [r7]
 8018298:	2f00      	cmp	r7, #0
 801829a:	db0f      	blt.n	80182bc <umm_free+0x60>
    UMM_PFREE(UMM_NFREE(0)) = c;
 801829c:	888f      	ldrh	r7, [r1, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 801829e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    UMM_PFREE(c)            = 0;
 80182a2:	2500      	movs	r5, #0
    UMM_PFREE(UMM_NFREE(0)) = c;
 80182a4:	b2ba      	uxth	r2, r7
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 80182a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    UMM_PFREE(UMM_NFREE(0)) = c;
 80182aa:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
 80182ae:	80d0      	strh	r0, [r2, #6]
    UMM_NFREE(c)            = UMM_NFREE(0);
 80182b0:	80a7      	strh	r7, [r4, #4]
    UMM_PFREE(c)            = 0;
 80182b2:	71a5      	strb	r5, [r4, #6]
 80182b4:	71e5      	strb	r5, [r4, #7]
    UMM_NFREE(0)            = c;
 80182b6:	8088      	strh	r0, [r1, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 80182b8:	538b      	strh	r3, [r1, r6]
}
 80182ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 80182bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80182c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80182c4:	528b      	strh	r3, [r1, r2]
  UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 80182c6:	8823      	ldrh	r3, [r4, #0]
 80182c8:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
 80182cc:	804d      	strh	r5, [r1, #2]
}
 80182ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 80182d0:	88d5      	ldrh	r5, [r2, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 80182d2:	f3c7 070e 	ubfx	r7, r7, #0, #15
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 80182d6:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 80182da:	b2ab      	uxth	r3, r5
 80182dc:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 80182e0:	f8a3 e004 	strh.w	lr, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 80182e4:	8893      	ldrh	r3, [r2, #4]
 80182e6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 80182ea:	80dd      	strh	r5, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 80182ec:	f821 700c 	strh.w	r7, [r1, ip]
    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 80182f0:	8823      	ldrh	r3, [r4, #0]
 80182f2:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 80182f6:	881b      	ldrh	r3, [r3, #0]
 80182f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80182fc:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
 8018300:	8050      	strh	r0, [r2, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 8018302:	538b      	strh	r3, [r1, r6]
 8018304:	e7c1      	b.n	801828a <umm_free+0x2e>
 8018306:	4770      	bx	lr
 8018308:	30008334 	.word	0x30008334

0801830c <umm_malloc>:

void *umm_malloc( size_t size ) {

  void *ptr = NULL;

  if (umm_heap == NULL) {
 801830c:	4b03      	ldr	r3, [pc, #12]	; (801831c <umm_malloc+0x10>)
 801830e:	681a      	ldr	r2, [r3, #0]
   * a size of 0 - and if we are we'll simply return a null pointer. if not
   * then reduce the size by 1 byte so that the subsequent calculations on
   * the number of blocks to allocate are easier...
   */

  if( 0 == size ) {
 8018310:	b112      	cbz	r2, 8018318 <umm_malloc+0xc>
 8018312:	b108      	cbz	r0, 8018318 <umm_malloc+0xc>

  /* Allocate the memory withing a protected critical section */

  UMM_CRITICAL_ENTRY();

  ptr = umm_malloc_core( size );
 8018314:	f7ff bf08 	b.w	8018128 <umm_malloc_core>

  UMM_CRITICAL_EXIT();

  return( ptr );
}
 8018318:	2000      	movs	r0, #0
 801831a:	4770      	bx	lr
 801831c:	30008334 	.word	0x30008334

08018320 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8018320:	4603      	mov	r3, r0
 8018322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8018326:	4c15      	ldr	r4, [pc, #84]	; (801837c <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8018328:	2500      	movs	r5, #0
 801832a:	4e15      	ldr	r6, [pc, #84]	; (8018380 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801832c:	4628      	mov	r0, r5
 801832e:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8018332:	e9d3 7200 	ldrd	r7, r2, [r3]
 8018336:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801833a:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 801833e:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8018340:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8018344:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 8018346:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 8018348:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801834a:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 801834e:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8018352:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8018356:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801835a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801835c:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801835e:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8018360:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8018362:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8018364:	6a23      	ldr	r3, [r4, #32]
 8018366:	f106 0118 	add.w	r1, r6, #24
 801836a:	4628      	mov	r0, r5
 801836c:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801836e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018370:	f106 011c 	add.w	r1, r6, #28
 8018374:	4628      	mov	r0, r5
}
 8018376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801837a:	4718      	bx	r3
 801837c:	3000837c 	.word	0x3000837c
 8018380:	3000833c 	.word	0x3000833c

08018384 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8018384:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8018386:	4b05      	ldr	r3, [pc, #20]	; (801839c <UTIL_LCD_SetLayer+0x18>)
 8018388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801838a:	b133      	cbz	r3, 801839a <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801838c:	4d04      	ldr	r5, [pc, #16]	; (80183a0 <UTIL_LCD_SetLayer+0x1c>)
 801838e:	4604      	mov	r4, r0
 8018390:	4601      	mov	r1, r0
 8018392:	6928      	ldr	r0, [r5, #16]
 8018394:	4798      	blx	r3
 8018396:	b900      	cbnz	r0, 801839a <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8018398:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801839a:	bd38      	pop	{r3, r4, r5, pc}
 801839c:	3000837c 	.word	0x3000837c
 80183a0:	3000833c 	.word	0x3000833c

080183a4 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80183a4:	4a02      	ldr	r2, [pc, #8]	; (80183b0 <UTIL_LCD_SetTextColor+0xc>)
 80183a6:	68d3      	ldr	r3, [r2, #12]
 80183a8:	015b      	lsls	r3, r3, #5
 80183aa:	50d0      	str	r0, [r2, r3]
}
 80183ac:	4770      	bx	lr
 80183ae:	bf00      	nop
 80183b0:	3000833c 	.word	0x3000833c

080183b4 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80183b4:	4b02      	ldr	r3, [pc, #8]	; (80183c0 <UTIL_LCD_SetBackColor+0xc>)
 80183b6:	68da      	ldr	r2, [r3, #12]
 80183b8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80183bc:	6058      	str	r0, [r3, #4]
}
 80183be:	4770      	bx	lr
 80183c0:	3000833c 	.word	0x3000833c

080183c4 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80183c4:	4b02      	ldr	r3, [pc, #8]	; (80183d0 <UTIL_LCD_SetFont+0xc>)
 80183c6:	68da      	ldr	r2, [r3, #12]
 80183c8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80183cc:	6098      	str	r0, [r3, #8]
}
 80183ce:	4770      	bx	lr
 80183d0:	3000833c 	.word	0x3000833c

080183d4 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 80183d4:	4b02      	ldr	r3, [pc, #8]	; (80183e0 <UTIL_LCD_GetFont+0xc>)
 80183d6:	68da      	ldr	r2, [r3, #12]
 80183d8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 80183dc:	6898      	ldr	r0, [r3, #8]
 80183de:	4770      	bx	lr
 80183e0:	3000833c 	.word	0x3000833c

080183e4 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80183e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80183e6:	4e11      	ldr	r6, [pc, #68]	; (801842c <UTIL_LCD_DrawHLine+0x48>)
{
 80183e8:	460d      	mov	r5, r1
 80183ea:	461c      	mov	r4, r3
 80183ec:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80183ee:	69f7      	ldr	r7, [r6, #28]
{
 80183f0:	4601      	mov	r1, r0
 80183f2:	4613      	mov	r3, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80183f4:	2f02      	cmp	r7, #2
 80183f6:	d007      	beq.n	8018408 <UTIL_LCD_DrawHLine+0x24>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80183f8:	4f0d      	ldr	r7, [pc, #52]	; (8018430 <UTIL_LCD_DrawHLine+0x4c>)
 80183fa:	462a      	mov	r2, r5
 80183fc:	9400      	str	r4, [sp, #0]
 80183fe:	68bc      	ldr	r4, [r7, #8]
 8018400:	6930      	ldr	r0, [r6, #16]
 8018402:	47a0      	blx	r4
  }
}
 8018404:	b003      	add	sp, #12
 8018406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8018408:	0a20      	lsrs	r0, r4, #8
 801840a:	462a      	mov	r2, r5
 801840c:	0967      	lsrs	r7, r4, #5
 801840e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018412:	f400 4578 	and.w	r5, r0, #63488	; 0xf800
 8018416:	6930      	ldr	r0, [r6, #16]
 8018418:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801841c:	432f      	orrs	r7, r5
 801841e:	4d04      	ldr	r5, [pc, #16]	; (8018430 <UTIL_LCD_DrawHLine+0x4c>)
 8018420:	433c      	orrs	r4, r7
 8018422:	68ad      	ldr	r5, [r5, #8]
 8018424:	9400      	str	r4, [sp, #0]
 8018426:	47a8      	blx	r5
}
 8018428:	b003      	add	sp, #12
 801842a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801842c:	3000833c 	.word	0x3000833c
 8018430:	3000837c 	.word	0x3000837c

08018434 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8018434:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018436:	4e11      	ldr	r6, [pc, #68]	; (801847c <UTIL_LCD_DrawVLine+0x48>)
{
 8018438:	460d      	mov	r5, r1
 801843a:	461c      	mov	r4, r3
 801843c:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801843e:	69f7      	ldr	r7, [r6, #28]
{
 8018440:	4601      	mov	r1, r0
 8018442:	4613      	mov	r3, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018444:	2f02      	cmp	r7, #2
 8018446:	d007      	beq.n	8018458 <UTIL_LCD_DrawVLine+0x24>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8018448:	4f0d      	ldr	r7, [pc, #52]	; (8018480 <UTIL_LCD_DrawVLine+0x4c>)
 801844a:	462a      	mov	r2, r5
 801844c:	9400      	str	r4, [sp, #0]
 801844e:	68fc      	ldr	r4, [r7, #12]
 8018450:	6930      	ldr	r0, [r6, #16]
 8018452:	47a0      	blx	r4
  }
}
 8018454:	b003      	add	sp, #12
 8018456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8018458:	0a20      	lsrs	r0, r4, #8
 801845a:	462a      	mov	r2, r5
 801845c:	0967      	lsrs	r7, r4, #5
 801845e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018462:	f400 4578 	and.w	r5, r0, #63488	; 0xf800
 8018466:	6930      	ldr	r0, [r6, #16]
 8018468:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801846c:	432f      	orrs	r7, r5
 801846e:	4d04      	ldr	r5, [pc, #16]	; (8018480 <UTIL_LCD_DrawVLine+0x4c>)
 8018470:	433c      	orrs	r4, r7
 8018472:	68ed      	ldr	r5, [r5, #12]
 8018474:	9400      	str	r4, [sp, #0]
 8018476:	47a8      	blx	r5
}
 8018478:	b003      	add	sp, #12
 801847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801847c:	3000833c 	.word	0x3000833c
 8018480:	3000837c 	.word	0x3000837c

08018484 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8018484:	b570      	push	{r4, r5, r6, lr}
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8018486:	4c13      	ldr	r4, [pc, #76]	; (80184d4 <UTIL_LCD_Clear+0x50>)
{
 8018488:	b082      	sub	sp, #8
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801848a:	69e2      	ldr	r2, [r4, #28]
 801848c:	2a02      	cmp	r2, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801848e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018492:	d009      	beq.n	80184a8 <UTIL_LCD_Clear+0x24>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8018494:	2200      	movs	r2, #0
 8018496:	4d10      	ldr	r5, [pc, #64]	; (80184d8 <UTIL_LCD_Clear+0x54>)
 8018498:	e9cd 1000 	strd	r1, r0, [sp]
 801849c:	4611      	mov	r1, r2
 801849e:	6920      	ldr	r0, [r4, #16]
 80184a0:	692c      	ldr	r4, [r5, #16]
 80184a2:	47a0      	blx	r4
}
 80184a4:	b002      	add	sp, #8
 80184a6:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80184a8:	0942      	lsrs	r2, r0, #5
 80184aa:	9100      	str	r1, [sp, #0]
 80184ac:	0a05      	lsrs	r5, r0, #8
 80184ae:	f3c0 01c4 	ubfx	r1, r0, #3, #5
 80184b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80184b6:	6920      	ldr	r0, [r4, #16]
 80184b8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80184bc:	4e06      	ldr	r6, [pc, #24]	; (80184d8 <UTIL_LCD_Clear+0x54>)
 80184be:	ea42 0405 	orr.w	r4, r2, r5
 80184c2:	2200      	movs	r2, #0
 80184c4:	6935      	ldr	r5, [r6, #16]
 80184c6:	430c      	orrs	r4, r1
 80184c8:	4611      	mov	r1, r2
 80184ca:	9401      	str	r4, [sp, #4]
 80184cc:	47a8      	blx	r5
}
 80184ce:	b002      	add	sp, #8
 80184d0:	bd70      	pop	{r4, r5, r6, pc}
 80184d2:	bf00      	nop
 80184d4:	3000833c 	.word	0x3000833c
 80184d8:	3000837c 	.word	0x3000837c

080184dc <UTIL_LCD_DisplayChar>:
{
 80184dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80184e0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801864c <UTIL_LCD_DisplayChar+0x170>
{
 80184e4:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80184e6:	3a20      	subs	r2, #32
{
 80184e8:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80184ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184ee:	eb08 1043 	add.w	r0, r8, r3, lsl #5
 80184f2:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 80184f6:	6880      	ldr	r0, [r0, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80184f8:	8886      	ldrh	r6, [r0, #4]
 80184fa:	88c5      	ldrh	r5, [r0, #6]
 80184fc:	1df7      	adds	r7, r6, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80184fe:	6804      	ldr	r4, [r0, #0]
 8018500:	fb05 f202 	mul.w	r2, r5, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8018504:	10f8      	asrs	r0, r7, #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8018506:	f027 0307 	bic.w	r3, r7, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801850a:	fb00 f202 	mul.w	r2, r0, r2
  offset =  8 *((width + 7)/8) -  width ;
 801850e:	9302      	str	r3, [sp, #8]

  for(i = 0; i < height; i++)
 8018510:	2d00      	cmp	r5, #0
 8018512:	f000 808d 	beq.w	8018630 <UTIL_LCD_DisplayChar+0x154>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8018516:	08fb      	lsrs	r3, r7, #3
 8018518:	4414      	add	r4, r2
 801851a:	f8df a134 	ldr.w	sl, [pc, #308]	; 8018650 <UTIL_LCD_DisplayChar+0x174>

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 801851e:	f04f 0901 	mov.w	r9, #1
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8018522:	9303      	str	r3, [sp, #12]
 8018524:	194b      	adds	r3, r1, r5
 8018526:	1c4d      	adds	r5, r1, #1
    switch(((width + 7)/8))
 8018528:	9903      	ldr	r1, [sp, #12]
 801852a:	9307      	str	r3, [sp, #28]
 801852c:	ab14      	add	r3, sp, #80	; 0x50
 801852e:	2901      	cmp	r1, #1
 8018530:	f105 32ff 	add.w	r2, r5, #4294967295
 8018534:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8018538:	9304      	str	r3, [sp, #16]
 801853a:	ab08      	add	r3, sp, #32
 801853c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8018540:	9305      	str	r3, [sp, #20]
        if(line & (1 << (width- j + offset- 1)))
 8018542:	4663      	mov	r3, ip
    switch(((width + 7)/8))
 8018544:	d038      	beq.n	80185b8 <UTIL_LCD_DisplayChar+0xdc>
 8018546:	2902      	cmp	r1, #2
 8018548:	d075      	beq.n	8018636 <UTIL_LCD_DisplayChar+0x15a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801854a:	7861      	ldrb	r1, [r4, #1]
 801854c:	7827      	ldrb	r7, [r4, #0]
 801854e:	0209      	lsls	r1, r1, #8
 8018550:	78a0      	ldrb	r0, [r4, #2]
 8018552:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8018556:	4301      	orrs	r1, r0
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018558:	4443      	add	r3, r8
 801855a:	69d8      	ldr	r0, [r3, #28]
 801855c:	2802      	cmp	r0, #2
 801855e:	d030      	beq.n	80185c2 <UTIL_LCD_DisplayChar+0xe6>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 8018560:	b196      	cbz	r6, 8018588 <UTIL_LCD_DisplayChar+0xac>
 8018562:	9802      	ldr	r0, [sp, #8]
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8018564:	f8d3 c000 	ldr.w	ip, [r3]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8018568:	685f      	ldr	r7, [r3, #4]
 801856a:	3801      	subs	r0, #1
 801856c:	ab14      	add	r3, sp, #80	; 0x50
 801856e:	9106      	str	r1, [sp, #24]
        if(line & (1 << (width- j + offset- 1)))
 8018570:	fa09 fe00 	lsl.w	lr, r9, r0
 8018574:	9906      	ldr	r1, [sp, #24]
 8018576:	ea1e 0f01 	tst.w	lr, r1
 801857a:	d060      	beq.n	801863e <UTIL_LCD_DisplayChar+0x162>
      for (j = 0; j < width; j++)
 801857c:	9904      	ldr	r1, [sp, #16]
 801857e:	3801      	subs	r0, #1
 8018580:	f843 cb04 	str.w	ip, [r3], #4
 8018584:	4299      	cmp	r1, r3
 8018586:	d1f3      	bne.n	8018570 <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8018588:	ab14      	add	r3, sp, #80	; 0x50
 801858a:	f8da 7004 	ldr.w	r7, [sl, #4]
 801858e:	4659      	mov	r1, fp
 8018590:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018594:	e9cd 6900 	strd	r6, r9, [sp]
 8018598:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 801859a:	9b03      	ldr	r3, [sp, #12]
 801859c:	441c      	add	r4, r3
 801859e:	9b07      	ldr	r3, [sp, #28]
 80185a0:	429d      	cmp	r5, r3
 80185a2:	d045      	beq.n	8018630 <UTIL_LCD_DisplayChar+0x154>
    switch(((width + 7)/8))
 80185a4:	9903      	ldr	r1, [sp, #12]
 80185a6:	3501      	adds	r5, #1
 80185a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185ac:	2901      	cmp	r1, #1
 80185ae:	f105 32ff 	add.w	r2, r5, #4294967295
 80185b2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80185b6:	d1c6      	bne.n	8018546 <UTIL_LCD_DisplayChar+0x6a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80185b8:	4443      	add	r3, r8
      line =  pchar[0];
 80185ba:	7821      	ldrb	r1, [r4, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80185bc:	69d8      	ldr	r0, [r3, #28]
 80185be:	2802      	cmp	r0, #2
 80185c0:	d1ce      	bne.n	8018560 <UTIL_LCD_DisplayChar+0x84>
      for (j = 0; j < width; j++)
 80185c2:	b33e      	cbz	r6, 8018614 <UTIL_LCD_DisplayChar+0x138>
 80185c4:	9802      	ldr	r0, [sp, #8]
 80185c6:	af08      	add	r7, sp, #32
 80185c8:	9106      	str	r1, [sp, #24]
 80185ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80185ce:	e015      	b.n	80185fc <UTIL_LCD_DisplayChar+0x120>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80185d0:	f8d3 e000 	ldr.w	lr, [r3]
 80185d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80185d8:	ea4f 40de 	mov.w	r0, lr, lsr #19
 80185dc:	4601      	mov	r1, r0
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80185de:	f3ce 00c4 	ubfx	r0, lr, #3, #5
 80185e2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80185e6:	ea40 20c1 	orr.w	r0, r0, r1, lsl #11
 80185ea:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
      for (j = 0; j < width; j++)
 80185ee:	9905      	ldr	r1, [sp, #20]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80185f0:	ea40 000e 	orr.w	r0, r0, lr
 80185f4:	f827 0b02 	strh.w	r0, [r7], #2
      for (j = 0; j < width; j++)
 80185f8:	428f      	cmp	r7, r1
 80185fa:	d00b      	beq.n	8018614 <UTIL_LCD_DisplayChar+0x138>
        if(line & (1 << (width- j + offset- 1)))
 80185fc:	fa09 f00c 	lsl.w	r0, r9, ip
 8018600:	9906      	ldr	r1, [sp, #24]
 8018602:	4208      	tst	r0, r1
 8018604:	d1e4      	bne.n	80185d0 <UTIL_LCD_DisplayChar+0xf4>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8018606:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801860a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801860e:	ea4f 41de 	mov.w	r1, lr, lsr #19
 8018612:	e7e4      	b.n	80185de <UTIL_LCD_DisplayChar+0x102>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8018614:	ab08      	add	r3, sp, #32
 8018616:	f8da 7004 	ldr.w	r7, [sl, #4]
 801861a:	4659      	mov	r1, fp
 801861c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018620:	e9cd 6900 	strd	r6, r9, [sp]
 8018624:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 8018626:	9b03      	ldr	r3, [sp, #12]
 8018628:	441c      	add	r4, r3
 801862a:	9b07      	ldr	r3, [sp, #28]
 801862c:	429d      	cmp	r5, r3
 801862e:	d1b9      	bne.n	80185a4 <UTIL_LCD_DisplayChar+0xc8>
}
 8018630:	b02d      	add	sp, #180	; 0xb4
 8018632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 8) | pchar[1];
 8018636:	8821      	ldrh	r1, [r4, #0]
 8018638:	ba49      	rev16	r1, r1
 801863a:	b289      	uxth	r1, r1
      break;
 801863c:	e78c      	b.n	8018558 <UTIL_LCD_DisplayChar+0x7c>
      for (j = 0; j < width; j++)
 801863e:	9904      	ldr	r1, [sp, #16]
 8018640:	3801      	subs	r0, #1
 8018642:	f843 7b04 	str.w	r7, [r3], #4
 8018646:	428b      	cmp	r3, r1
 8018648:	d192      	bne.n	8018570 <UTIL_LCD_DisplayChar+0x94>
 801864a:	e79d      	b.n	8018588 <UTIL_LCD_DisplayChar+0xac>
 801864c:	3000833c 	.word	0x3000833c
 8018650:	3000837c 	.word	0x3000837c

08018654 <UTIL_LCD_DisplayStringAt>:
{
 8018654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018658:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 801865a:	4611      	mov	r1, r2
{
 801865c:	4616      	mov	r6, r2
 801865e:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
 8018660:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018664:	2a00      	cmp	r2, #0
 8018666:	d041      	beq.n	80186ec <UTIL_LCD_DisplayStringAt+0x98>
  uint32_t size = 0, xsize = 0;
 8018668:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 801866a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801866e:	3001      	adds	r0, #1
 8018670:	2c00      	cmp	r4, #0
 8018672:	d1fa      	bne.n	801866a <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8018674:	4f1e      	ldr	r7, [pc, #120]	; (80186f0 <UTIL_LCD_DisplayStringAt+0x9c>)
  switch (Mode)
 8018676:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8018678:	68fc      	ldr	r4, [r7, #12]
 801867a:	6979      	ldr	r1, [r7, #20]
 801867c:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 8018680:	68a4      	ldr	r4, [r4, #8]
 8018682:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018686:	fbb1 f4fc 	udiv	r4, r1, ip
  switch (Mode)
 801868a:	d029      	beq.n	80186e0 <UTIL_LCD_DisplayStringAt+0x8c>
 801868c:	2b02      	cmp	r3, #2
 801868e:	d103      	bne.n	8018698 <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8018690:	1a20      	subs	r0, r4, r0
 8018692:	fb0c f000 	mul.w	r0, ip, r0
 8018696:	1b45      	subs	r5, r0, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8018698:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801869a:	1e68      	subs	r0, r5, #1
 801869c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 80186a0:	4298      	cmp	r0, r3
 80186a2:	bf88      	it	hi
 80186a4:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80186a6:	458c      	cmp	ip, r1
 80186a8:	d818      	bhi.n	80186dc <UTIL_LCD_DisplayStringAt+0x88>
 80186aa:	b1ba      	cbz	r2, 80186dc <UTIL_LCD_DisplayStringAt+0x88>
 80186ac:	f1c6 0801 	rsb	r8, r6, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80186b0:	4628      	mov	r0, r5
 80186b2:	4649      	mov	r1, r9
 80186b4:	f7ff ff12 	bl	80184dc <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80186b8:	68fa      	ldr	r2, [r7, #12]
 80186ba:	eb08 0306 	add.w	r3, r8, r6
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80186be:	6979      	ldr	r1, [r7, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80186c0:	eb07 1042 	add.w	r0, r7, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80186c4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80186c8:	6880      	ldr	r0, [r0, #8]
 80186ca:	8884      	ldrh	r4, [r0, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80186cc:	fb03 1314 	mls	r3, r3, r4, r1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80186d0:	4425      	add	r5, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	429c      	cmp	r4, r3
 80186d6:	d801      	bhi.n	80186dc <UTIL_LCD_DisplayStringAt+0x88>
 80186d8:	2a00      	cmp	r2, #0
 80186da:	d1e9      	bne.n	80186b0 <UTIL_LCD_DisplayStringAt+0x5c>
}
 80186dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 80186e0:	1a20      	subs	r0, r4, r0
 80186e2:	fb0c f000 	mul.w	r0, ip, r0
 80186e6:	eb05 0550 	add.w	r5, r5, r0, lsr #1
      break;
 80186ea:	e7d5      	b.n	8018698 <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 80186ec:	4610      	mov	r0, r2
 80186ee:	e7c1      	b.n	8018674 <UTIL_LCD_DisplayStringAt+0x20>
 80186f0:	3000833c 	.word	0x3000833c

080186f4 <UTIL_LCD_DrawLine>:
{
 80186f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 80186f8:	f64f 77ff 	movw	r7, #65535	; 0xffff
  x_diff = Xpos2 - Xpos1;
 80186fc:	1a16      	subs	r6, r2, r0
  y_diff = Ypos2 - Ypos1;
 80186fe:	1a5c      	subs	r4, r3, r1
  x = Xpos1;                       /* Start x off at the first pixel */
 8018700:	b205      	sxth	r5, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 8018702:	4282      	cmp	r2, r0
 8018704:	bf34      	ite	cc
 8018706:	463a      	movcc	r2, r7
 8018708:	2201      	movcs	r2, #1
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801870a:	428b      	cmp	r3, r1
 801870c:	bf28      	it	cs
 801870e:	2701      	movcs	r7, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8018710:	2e00      	cmp	r6, #0
  y = Ypos1;                       /* Start y off at the first pixel */
 8018712:	b20b      	sxth	r3, r1
{
 8018714:	ed2d 8b02 	vpush	{d8}
 8018718:	b085      	sub	sp, #20
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801871a:	bfb8      	it	lt
 801871c:	4276      	neglt	r6, r6
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801871e:	9200      	str	r2, [sp, #0]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8018720:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8018724:	b236      	sxth	r6, r6
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 8018726:	9701      	str	r7, [sp, #4]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8018728:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801872c:	b212      	sxth	r2, r2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801872e:	4296      	cmp	r6, r2
 8018730:	db64      	blt.n	80187fc <UTIL_LCD_DrawLine+0x108>
    num = deltax / 2;
 8018732:	2e00      	cmp	r6, #0
 8018734:	46b0      	mov	r8, r6
 8018736:	f04f 0100 	mov.w	r1, #0
 801873a:	9f00      	ldr	r7, [sp, #0]
 801873c:	bfb8      	it	lt
 801873e:	f106 0801 	addlt.w	r8, r6, #1
 8018742:	468b      	mov	fp, r1
 8018744:	9100      	str	r1, [sp, #0]
 8018746:	ea4f 0868 	mov.w	r8, r8, asr #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801874a:	2e00      	cmp	r6, #0
 801874c:	db41      	blt.n	80187d2 <UTIL_LCD_DrawLine+0xde>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801874e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018750:	b292      	uxth	r2, r2
 8018752:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018754:	f04f 0900 	mov.w	r9, #0
 8018758:	0949      	lsrs	r1, r1, #5
 801875a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801875c:	0a24      	lsrs	r4, r4, #8
 801875e:	9202      	str	r2, [sp, #8]
 8018760:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018764:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018768:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 801876c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8018820 <UTIL_LCD_DrawLine+0x12c>
 8018770:	9703      	str	r7, [sp, #12]
 8018772:	430a      	orrs	r2, r1
 8018774:	4302      	orrs	r2, r0
 8018776:	ee08 2a10 	vmov	s16, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801877a:	f8da 201c 	ldr.w	r2, [sl, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801877e:	b29c      	uxth	r4, r3
 8018780:	b2ad      	uxth	r5, r5
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8018782:	9b10      	ldr	r3, [sp, #64]	; 0x40
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018784:	2a02      	cmp	r2, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8018786:	4622      	mov	r2, r4
 8018788:	4629      	mov	r1, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801878a:	d02e      	beq.n	80187ea <UTIL_LCD_DrawLine+0xf6>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801878c:	4823      	ldr	r0, [pc, #140]	; (801881c <UTIL_LCD_DrawLine+0x128>)
 801878e:	6980      	ldr	r0, [r0, #24]
 8018790:	4607      	mov	r7, r0
 8018792:	f8da 0010 	ldr.w	r0, [sl, #16]
 8018796:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8018798:	9b02      	ldr	r3, [sp, #8]
 801879a:	f109 0901 	add.w	r9, r9, #1
    x += xinc2;                               /* Change the x as appropriate */
 801879e:	9f03      	ldr	r7, [sp, #12]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80187a0:	eb03 0208 	add.w	r2, r3, r8
      x += xinc1;                             /* Change the x as appropriate */
 80187a4:	9b00      	ldr	r3, [sp, #0]
    x += xinc2;                               /* Change the x as appropriate */
 80187a6:	19e9      	adds	r1, r5, r7
      x += xinc1;                             /* Change the x as appropriate */
 80187a8:	18e8      	adds	r0, r5, r3
      y += yinc1;                             /* Change the y as appropriate */
 80187aa:	9b01      	ldr	r3, [sp, #4]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80187ac:	fa0f f882 	sxth.w	r8, r2
      y += yinc1;                             /* Change the y as appropriate */
 80187b0:	18e3      	adds	r3, r4, r3
    x += xinc2;                               /* Change the x as appropriate */
 80187b2:	183d      	adds	r5, r7, r0
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80187b4:	b292      	uxth	r2, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 80187b6:	4546      	cmp	r6, r8
    y += yinc2;                               /* Change the y as appropriate */
 80187b8:	445b      	add	r3, fp
 80187ba:	445c      	add	r4, fp
    x += xinc2;                               /* Change the x as appropriate */
 80187bc:	b22d      	sxth	r5, r5
      num -= den;                             /* Calculate the new numerator value */
 80187be:	eba2 0206 	sub.w	r2, r2, r6
    y += yinc2;                               /* Change the y as appropriate */
 80187c2:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 80187c4:	dc0a      	bgt.n	80187dc <UTIL_LCD_DrawLine+0xe8>
      num -= den;                             /* Calculate the new numerator value */
 80187c6:	fa0f f882 	sxth.w	r8, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80187ca:	fa0f f289 	sxth.w	r2, r9
 80187ce:	42b2      	cmp	r2, r6
 80187d0:	ddd3      	ble.n	801877a <UTIL_LCD_DrawLine+0x86>
}
 80187d2:	b005      	add	sp, #20
 80187d4:	ecbd 8b02 	vpop	{d8}
 80187d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80187dc:	fa0f f289 	sxth.w	r2, r9
    x += xinc2;                               /* Change the x as appropriate */
 80187e0:	b20d      	sxth	r5, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80187e2:	42b2      	cmp	r2, r6
    y += yinc2;                               /* Change the y as appropriate */
 80187e4:	b223      	sxth	r3, r4
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80187e6:	ddc8      	ble.n	801877a <UTIL_LCD_DrawLine+0x86>
 80187e8:	e7f3      	b.n	80187d2 <UTIL_LCD_DrawLine+0xde>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 80187ea:	4b0c      	ldr	r3, [pc, #48]	; (801881c <UTIL_LCD_DrawLine+0x128>)
 80187ec:	f8da 0010 	ldr.w	r0, [sl, #16]
 80187f0:	699b      	ldr	r3, [r3, #24]
 80187f2:	461f      	mov	r7, r3
 80187f4:	ee18 3a10 	vmov	r3, s16
 80187f8:	47b8      	blx	r7
}
 80187fa:	e7cd      	b.n	8018798 <UTIL_LCD_DrawLine+0xa4>
    num = deltay / 2;
 80187fc:	2a00      	cmp	r2, #0
 80187fe:	4690      	mov	r8, r2
 8018800:	4631      	mov	r1, r6
 8018802:	f04f 0700 	mov.w	r7, #0
 8018806:	bfb8      	it	lt
 8018808:	f102 0801 	addlt.w	r8, r2, #1
 801880c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8018810:	4616      	mov	r6, r2
 8018812:	9701      	str	r7, [sp, #4]
 8018814:	f348 084f 	sbfx	r8, r8, #1, #16
 8018818:	460a      	mov	r2, r1
 801881a:	e796      	b.n	801874a <UTIL_LCD_DrawLine+0x56>
 801881c:	3000837c 	.word	0x3000837c
 8018820:	3000833c 	.word	0x3000833c

08018824 <UTIL_LCD_DrawRect>:
{
 8018824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018828:	4c52      	ldr	r4, [pc, #328]	; (8018974 <UTIL_LCD_DrawRect+0x150>)
{
 801882a:	4683      	mov	fp, r0
 801882c:	460d      	mov	r5, r1
 801882e:	4692      	mov	sl, r2
 8018830:	ed2d 8b02 	vpush	{d8}
 8018834:	ee08 3a10 	vmov	s16, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018838:	69e3      	ldr	r3, [r4, #28]
{
 801883a:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801883c:	2b02      	cmp	r3, #2
{
 801883e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018840:	d037      	beq.n	80188b2 <UTIL_LCD_DrawRect+0x8e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8018842:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8018978 <UTIL_LCD_DrawRect+0x154>
 8018846:	4613      	mov	r3, r2
 8018848:	9700      	str	r7, [sp, #0]
 801884a:	460a      	mov	r2, r1
 801884c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018850:	4601      	mov	r1, r0
 8018852:	6920      	ldr	r0, [r4, #16]
 8018854:	47b0      	blx	r6
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8018856:	ee18 3a10 	vmov	r3, s16
 801885a:	1e5a      	subs	r2, r3, #1
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801885c:	69e3      	ldr	r3, [r4, #28]
 801885e:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8018860:	442a      	add	r2, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018862:	d070      	beq.n	8018946 <UTIL_LCD_DrawRect+0x122>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8018864:	4653      	mov	r3, sl
 8018866:	4659      	mov	r1, fp
 8018868:	6920      	ldr	r0, [r4, #16]
 801886a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801886e:	9700      	str	r7, [sp, #0]
 8018870:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018872:	69e3      	ldr	r3, [r4, #28]
 8018874:	2b02      	cmp	r3, #2
 8018876:	d04e      	beq.n	8018916 <UTIL_LCD_DrawRect+0xf2>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8018878:	ee18 3a10 	vmov	r3, s16
 801887c:	462a      	mov	r2, r5
 801887e:	4659      	mov	r1, fp
 8018880:	6920      	ldr	r0, [r4, #16]
 8018882:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8018886:	9700      	str	r7, [sp, #0]
 8018888:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801888a:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801888c:	f10a 31ff 	add.w	r1, sl, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018890:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8018892:	4459      	add	r1, fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8018894:	d026      	beq.n	80188e4 <UTIL_LCD_DrawRect+0xc0>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8018896:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801889a:	ee18 3a10 	vmov	r3, s16
 801889e:	462a      	mov	r2, r5
 80188a0:	6920      	ldr	r0, [r4, #16]
 80188a2:	46b4      	mov	ip, r6
 80188a4:	970e      	str	r7, [sp, #56]	; 0x38
}
 80188a6:	b003      	add	sp, #12
 80188a8:	ecbd 8b02 	vpop	{d8}
 80188ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80188b0:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80188b2:	0978      	lsrs	r0, r7, #5
 80188b4:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 80188b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80188bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8018978 <UTIL_LCD_DrawRect+0x154>
 80188c0:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 80188c4:	4613      	mov	r3, r2
 80188c6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80188ca:	462a      	mov	r2, r5
 80188cc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80188d0:	ea41 000c 	orr.w	r0, r1, ip
 80188d4:	4659      	mov	r1, fp
 80188d6:	ea40 0e0e 	orr.w	lr, r0, lr
 80188da:	6920      	ldr	r0, [r4, #16]
 80188dc:	f8cd e000 	str.w	lr, [sp]
 80188e0:	47b0      	blx	r6
}
 80188e2:	e7b8      	b.n	8018856 <UTIL_LCD_DrawRect+0x32>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80188e4:	0a3a      	lsrs	r2, r7, #8
 80188e6:	f3c7 09c4 	ubfx	r9, r7, #3, #5
 80188ea:	097b      	lsrs	r3, r7, #5
 80188ec:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 80188f0:	f402 4678 	and.w	r6, r2, #63488	; 0xf800
 80188f4:	6920      	ldr	r0, [r4, #16]
 80188f6:	f403 67fc 	and.w	r7, r3, #2016	; 0x7e0
 80188fa:	462a      	mov	r2, r5
 80188fc:	ee18 3a10 	vmov	r3, s16
 8018900:	46f4      	mov	ip, lr
 8018902:	4337      	orrs	r7, r6
 8018904:	ea47 0709 	orr.w	r7, r7, r9
 8018908:	970e      	str	r7, [sp, #56]	; 0x38
}
 801890a:	b003      	add	sp, #12
 801890c:	ecbd 8b02 	vpop	{d8}
 8018910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8018914:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8018916:	0978      	lsrs	r0, r7, #5
 8018918:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801891c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018920:	ee18 3a10 	vmov	r3, s16
 8018924:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 8018928:	462a      	mov	r2, r5
 801892a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801892e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8018932:	ea41 000c 	orr.w	r0, r1, ip
 8018936:	4659      	mov	r1, fp
 8018938:	ea40 0e0e 	orr.w	lr, r0, lr
 801893c:	6920      	ldr	r0, [r4, #16]
 801893e:	f8cd e000 	str.w	lr, [sp]
 8018942:	47b0      	blx	r6
}
 8018944:	e7a1      	b.n	801888a <UTIL_LCD_DrawRect+0x66>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8018946:	0978      	lsrs	r0, r7, #5
 8018948:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801894c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018950:	4653      	mov	r3, sl
 8018952:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 8018956:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801895a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801895e:	ea41 000c 	orr.w	r0, r1, ip
 8018962:	4659      	mov	r1, fp
 8018964:	ea40 0e0e 	orr.w	lr, r0, lr
 8018968:	6920      	ldr	r0, [r4, #16]
 801896a:	f8cd e000 	str.w	lr, [sp]
 801896e:	47b0      	blx	r6
}
 8018970:	e77f      	b.n	8018872 <UTIL_LCD_DrawRect+0x4e>
 8018972:	bf00      	nop
 8018974:	3000833c 	.word	0x3000833c
 8018978:	3000837c 	.word	0x3000837c

0801897c <AI_Run>:
 801897c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8018980:	f000 bdbc 	b.w	80194fc <ai_run>

08018984 <AI_PixelValueConversion_QuantizedNN>:
 8018984:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8018988:	b530      	push	{r4, r5, lr}
 801898a:	435a      	muls	r2, r3
 801898c:	68c4      	ldr	r4, [r0, #12]
 801898e:	6983      	ldr	r3, [r0, #24]
 8018990:	6840      	ldr	r0, [r0, #4]
 8018992:	4353      	muls	r3, r2
 8018994:	4288      	cmp	r0, r1
 8018996:	d80a      	bhi.n	80189ae <AI_PixelValueConversion_QuantizedNN+0x2a>
 8018998:	2200      	movs	r2, #0
 801899a:	429a      	cmp	r2, r3
 801899c:	d00a      	beq.n	80189b4 <AI_PixelValueConversion_QuantizedNN+0x30>
 801899e:	5c8d      	ldrb	r5, [r1, r2]
 80189a0:	5d65      	ldrb	r5, [r4, r5]
 80189a2:	5485      	strb	r5, [r0, r2]
 80189a4:	3201      	adds	r2, #1
 80189a6:	e7f8      	b.n	801899a <AI_PixelValueConversion_QuantizedNN+0x16>
 80189a8:	5cca      	ldrb	r2, [r1, r3]
 80189aa:	5ca2      	ldrb	r2, [r4, r2]
 80189ac:	54c2      	strb	r2, [r0, r3]
 80189ae:	3b01      	subs	r3, #1
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	daf9      	bge.n	80189a8 <AI_PixelValueConversion_QuantizedNN+0x24>
 80189b4:	bd30      	pop	{r4, r5, pc}
	...

080189b8 <AI_PixelValueConversion_FloatNN>:
 80189b8:	b510      	push	{r4, lr}
 80189ba:	b112      	cbz	r2, 80189c2 <AI_PixelValueConversion_FloatNN+0xa>
 80189bc:	2a01      	cmp	r2, #1
 80189be:	d00e      	beq.n	80189de <AI_PixelValueConversion_FloatNN+0x26>
 80189c0:	e7fe      	b.n	80189c0 <AI_PixelValueConversion_FloatNN+0x8>
 80189c2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018a04 <AI_PixelValueConversion_FloatNN+0x4c>
 80189c6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8018a08 <AI_PixelValueConversion_FloatNN+0x50>
 80189ca:	6842      	ldr	r2, [r0, #4]
 80189cc:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
 80189d0:	6980      	ldr	r0, [r0, #24]
 80189d2:	4363      	muls	r3, r4
 80189d4:	fb00 1303 	mla	r3, r0, r3, r1
 80189d8:	4299      	cmp	r1, r3
 80189da:	d105      	bne.n	80189e8 <AI_PixelValueConversion_FloatNN+0x30>
 80189dc:	bd10      	pop	{r4, pc}
 80189de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80189e2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8018a0c <AI_PixelValueConversion_FloatNN+0x54>
 80189e6:	e7f0      	b.n	80189ca <AI_PixelValueConversion_FloatNN+0x12>
 80189e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80189ec:	ee07 0a10 	vmov	s14, r0
 80189f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80189f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80189f8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80189fc:	ece2 7a01 	vstmia	r2!, {s15}
 8018a00:	e7ea      	b.n	80189d8 <AI_PixelValueConversion_FloatNN+0x20>
 8018a02:	bf00      	nop
 8018a04:	00000000 	.word	0x00000000
 8018a08:	437f0000 	.word	0x437f0000
 8018a0c:	42ff0000 	.word	0x42ff0000

08018a10 <AI_PixelValueConversion>:
 8018a10:	b513      	push	{r0, r1, r4, lr}
 8018a12:	4604      	mov	r4, r0
 8018a14:	9101      	str	r1, [sp, #4]
 8018a16:	f000 fc6f 	bl	80192f8 <ai_get_input_format>
 8018a1a:	2802      	cmp	r0, #2
 8018a1c:	9901      	ldr	r1, [sp, #4]
 8018a1e:	d105      	bne.n	8018a2c <AI_PixelValueConversion+0x1c>
 8018a20:	4620      	mov	r0, r4
 8018a22:	b002      	add	sp, #8
 8018a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a28:	f7ff bfac 	b.w	8018984 <AI_PixelValueConversion_QuantizedNN>
 8018a2c:	9101      	str	r1, [sp, #4]
 8018a2e:	f000 fc63 	bl	80192f8 <ai_get_input_format>
 8018a32:	2801      	cmp	r0, #1
 8018a34:	4602      	mov	r2, r0
 8018a36:	9901      	ldr	r1, [sp, #4]
 8018a38:	d117      	bne.n	8018a6a <AI_PixelValueConversion+0x5a>
 8018a3a:	edd4 7a07 	vldr	s15, [r4, #28]
 8018a3e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8018a6c <AI_PixelValueConversion+0x5c>
 8018a42:	eef4 7a47 	vcmp.f32	s15, s14
 8018a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a4a:	d106      	bne.n	8018a5a <AI_PixelValueConversion+0x4a>
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	4620      	mov	r0, r4
 8018a50:	b002      	add	sp, #8
 8018a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a56:	f7ff bfaf 	b.w	80189b8 <AI_PixelValueConversion_FloatNN>
 8018a5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018a70 <AI_PixelValueConversion+0x60>
 8018a5e:	eef4 7a47 	vcmp.f32	s15, s14
 8018a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a66:	d0f2      	beq.n	8018a4e <AI_PixelValueConversion+0x3e>
 8018a68:	e7fe      	b.n	8018a68 <AI_PixelValueConversion+0x58>
 8018a6a:	e7fe      	b.n	8018a6a <AI_PixelValueConversion+0x5a>
 8018a6c:	437f0000 	.word	0x437f0000
 8018a70:	42fe0000 	.word	0x42fe0000

08018a74 <AI_Output_Dequantize>:
 8018a74:	b510      	push	{r4, lr}
 8018a76:	ed2d 8b02 	vpush	{d8}
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	f000 fc44 	bl	8019308 <ai_get_output_format>
 8018a80:	2802      	cmp	r0, #2
 8018a82:	d11b      	bne.n	8018abc <AI_Output_Dequantize+0x48>
 8018a84:	f000 fcca 	bl	801941c <ai_get_output_quantization_scheme>
 8018a88:	2801      	cmp	r0, #1
 8018a8a:	d01a      	beq.n	8018ac2 <AI_Output_Dequantize+0x4e>
 8018a8c:	2802      	cmp	r0, #2
 8018a8e:	d033      	beq.n	8018af8 <AI_Output_Dequantize+0x84>
 8018a90:	b9a0      	cbnz	r0, 8018abc <AI_Output_Dequantize+0x48>
 8018a92:	f000 fc4f 	bl	8019334 <ai_get_output_fxp_scale>
 8018a96:	6821      	ldr	r1, [r4, #0]
 8018a98:	f501 53d2 	add.w	r3, r1, #6720	; 0x1a40
 8018a9c:	f501 42d2 	add.w	r2, r1, #26880	; 0x6900
 8018aa0:	331e      	adds	r3, #30
 8018aa2:	3278      	adds	r2, #120	; 0x78
 8018aa4:	f913 0d01 	ldrsb.w	r0, [r3, #-1]!
 8018aa8:	ee07 0a90 	vmov	s15, r0
 8018aac:	4299      	cmp	r1, r3
 8018aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ab2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018ab6:	ed62 7a01 	vstmdb	r2!, {s15}
 8018aba:	d1f3      	bne.n	8018aa4 <AI_Output_Dequantize+0x30>
 8018abc:	ecbd 8b02 	vpop	{d8}
 8018ac0:	bd10      	pop	{r4, pc}
 8018ac2:	f000 fc93 	bl	80193ec <ai_get_output_scale>
 8018ac6:	eeb0 8a40 	vmov.f32	s16, s0
 8018aca:	f000 fcb9 	bl	8019440 <ai_get_output_zero_point>
 8018ace:	6824      	ldr	r4, [r4, #0]
 8018ad0:	f504 52d2 	add.w	r2, r4, #6720	; 0x1a40
 8018ad4:	f504 41d2 	add.w	r1, r4, #26880	; 0x6900
 8018ad8:	321e      	adds	r2, #30
 8018ada:	3178      	adds	r1, #120	; 0x78
 8018adc:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8018ae0:	1a1b      	subs	r3, r3, r0
 8018ae2:	42a2      	cmp	r2, r4
 8018ae4:	ee07 3a90 	vmov	s15, r3
 8018ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018aec:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018af0:	ed61 7a01 	vstmdb	r1!, {s15}
 8018af4:	d1f2      	bne.n	8018adc <AI_Output_Dequantize+0x68>
 8018af6:	e7e1      	b.n	8018abc <AI_Output_Dequantize+0x48>
 8018af8:	f000 fc78 	bl	80193ec <ai_get_output_scale>
 8018afc:	eeb0 8a40 	vmov.f32	s16, s0
 8018b00:	f000 fc9e 	bl	8019440 <ai_get_output_zero_point>
 8018b04:	6824      	ldr	r4, [r4, #0]
 8018b06:	f504 52d2 	add.w	r2, r4, #6720	; 0x1a40
 8018b0a:	f504 41d2 	add.w	r1, r4, #26880	; 0x6900
 8018b0e:	321e      	adds	r2, #30
 8018b10:	3178      	adds	r1, #120	; 0x78
 8018b12:	f912 3d01 	ldrsb.w	r3, [r2, #-1]!
 8018b16:	1a1b      	subs	r3, r3, r0
 8018b18:	42a2      	cmp	r2, r4
 8018b1a:	ee07 3a90 	vmov	s15, r3
 8018b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b22:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018b26:	ed61 7a01 	vstmdb	r1!, {s15}
 8018b2a:	d1f2      	bne.n	8018b12 <AI_Output_Dequantize+0x9e>
 8018b2c:	e7c6      	b.n	8018abc <AI_Output_Dequantize+0x48>

08018b2e <People_Deinit>:
 8018b2e:	f000 bcdf 	b.w	80194f0 <ai_deinit>

08018b32 <AI_Ppnetwork>:
 8018b32:	b570      	push	{r4, r5, r6, lr}
 8018b34:	6803      	ldr	r3, [r0, #0]
 8018b36:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8018b3a:	4604      	mov	r4, r0
 8018b3c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
 8018b40:	4630      	mov	r0, r6
 8018b42:	f000 fba9 	bl	8019298 <peopledetect_network_pp_getPersistentMemorySize>
 8018b46:	f009 fb29 	bl	802219c <malloc>
 8018b4a:	4605      	mov	r5, r0
 8018b4c:	4601      	mov	r1, r0
 8018b4e:	4630      	mov	r0, r6
 8018b50:	f000 fba4 	bl	801929c <peopledetect_network_pp_reset>
 8018b54:	b928      	cbnz	r0, 8018b62 <AI_Ppnetwork+0x30>
 8018b56:	4632      	mov	r2, r6
 8018b58:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b5e:	f000 fba4 	bl	80192aa <peopledetect_network_pp_process>
 8018b62:	4628      	mov	r0, r5
 8018b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b68:	f009 bb20 	b.w	80221ac <free>

08018b6c <AI_PostProcess>:
 8018b6c:	b510      	push	{r4, lr}
 8018b6e:	4604      	mov	r4, r0
 8018b70:	f7ff ff80 	bl	8018a74 <AI_Output_Dequantize>
 8018b74:	4620      	mov	r0, r4
 8018b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b7a:	f7ff bfda 	b.w	8018b32 <AI_Ppnetwork>
	...

08018b80 <People_Init>:
 8018b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b82:	4605      	mov	r5, r0
 8018b84:	6880      	ldr	r0, [r0, #8]
 8018b86:	ed2d 8b02 	vpush	{d8}
 8018b8a:	b083      	sub	sp, #12
 8018b8c:	f000 fc78 	bl	8019480 <ai_init>
 8018b90:	b100      	cbz	r0, 8018b94 <People_Init+0x14>
 8018b92:	6068      	str	r0, [r5, #4]
 8018b94:	f000 fba4 	bl	80192e0 <ai_get_input_width>
 8018b98:	4c68      	ldr	r4, [pc, #416]	; (8018d3c <People_Init+0x1bc>)
 8018b9a:	6128      	str	r0, [r5, #16]
 8018b9c:	f000 fb9a 	bl	80192d4 <ai_get_input_height>
 8018ba0:	6168      	str	r0, [r5, #20]
 8018ba2:	f000 fba3 	bl	80192ec <ai_get_input_channels>
 8018ba6:	60ec      	str	r4, [r5, #12]
 8018ba8:	61a8      	str	r0, [r5, #24]
 8018baa:	ed95 8a07 	vldr	s16, [r5, #28]
 8018bae:	6a2f      	ldr	r7, [r5, #32]
 8018bb0:	f000 fbea 	bl	8019388 <ai_get_input_quantization_scheme>
 8018bb4:	2801      	cmp	r0, #1
 8018bb6:	4606      	mov	r6, r0
 8018bb8:	d039      	beq.n	8018c2e <People_Init+0xae>
 8018bba:	2802      	cmp	r0, #2
 8018bbc:	d078      	beq.n	8018cb0 <People_Init+0x130>
 8018bbe:	b978      	cbnz	r0, 8018be0 <People_Init+0x60>
 8018bc0:	f000 fbaa 	bl	8019318 <ai_get_input_quantized_format>
 8018bc4:	2201      	movs	r2, #1
 8018bc6:	4082      	lsls	r2, r0
 8018bc8:	3001      	adds	r0, #1
 8018bca:	1993      	adds	r3, r2, r6
 8018bcc:	3601      	adds	r6, #1
 8018bce:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8018bd2:	fa23 f300 	lsr.w	r3, r3, r0
 8018bd6:	f383 0308 	usat	r3, #8, r3
 8018bda:	f804 3b01 	strb.w	r3, [r4], #1
 8018bde:	d1f4      	bne.n	8018bca <People_Init+0x4a>
 8018be0:	4c57      	ldr	r4, [pc, #348]	; (8018d40 <People_Init+0x1c0>)
 8018be2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8018be6:	2205      	movs	r2, #5
 8018be8:	4956      	ldr	r1, [pc, #344]	; (8018d44 <People_Init+0x1c4>)
 8018bea:	61a3      	str	r3, [r4, #24]
 8018bec:	4620      	mov	r0, r4
 8018bee:	61e3      	str	r3, [r4, #28]
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	3528      	adds	r5, #40	; 0x28
 8018bf4:	e9c4 3200 	strd	r3, r2, [r4]
 8018bf8:	230f      	movs	r3, #15
 8018bfa:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8018bfe:	23e1      	movs	r3, #225	; 0xe1
 8018c00:	6123      	str	r3, [r4, #16]
 8018c02:	4b51      	ldr	r3, [pc, #324]	; (8018d48 <People_Init+0x1c8>)
 8018c04:	6223      	str	r3, [r4, #32]
 8018c06:	231e      	movs	r3, #30
 8018c08:	6163      	str	r3, [r4, #20]
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8018c10:	f000 fb44 	bl	801929c <peopledetect_network_pp_reset>
 8018c14:	4606      	mov	r6, r0
 8018c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c1e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018c22:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018c26:	2e00      	cmp	r6, #0
 8018c28:	f000 8083 	beq.w	8018d32 <People_Init+0x1b2>
 8018c2c:	e7fe      	b.n	8018c2c <People_Init+0xac>
 8018c2e:	f000 fb93 	bl	8019358 <ai_get_input_scale>
 8018c32:	eef0 8a40 	vmov.f32	s17, s0
 8018c36:	f000 fbb9 	bl	80193ac <ai_get_input_zero_point>
 8018c3a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018c3e:	427a      	negs	r2, r7
 8018c40:	b2c1      	uxtb	r1, r0
 8018c42:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
 8018c46:	ee07 2a90 	vmov	s15, r2
 8018c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c4e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018c52:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8018c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c5e:	bf4c      	ite	mi
 8018c60:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8018c64:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8018c68:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018c6c:	ee17 3a10 	vmov	r3, s14
 8018c70:	4403      	add	r3, r0
 8018c72:	2bfe      	cmp	r3, #254	; 0xfe
 8018c74:	dc18      	bgt.n	8018ca8 <People_Init+0x128>
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	dd18      	ble.n	8018cac <People_Init+0x12c>
 8018c7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c82:	bf4c      	ite	mi
 8018c84:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8018c88:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8018c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c90:	edcd 7a01 	vstr	s15, [sp, #4]
 8018c94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018c98:	440b      	add	r3, r1
 8018c9a:	b2db      	uxtb	r3, r3
 8018c9c:	3201      	adds	r2, #1
 8018c9e:	f804 3b01 	strb.w	r3, [r4], #1
 8018ca2:	42ba      	cmp	r2, r7
 8018ca4:	d1cf      	bne.n	8018c46 <People_Init+0xc6>
 8018ca6:	e79b      	b.n	8018be0 <People_Init+0x60>
 8018ca8:	23ff      	movs	r3, #255	; 0xff
 8018caa:	e7f7      	b.n	8018c9c <People_Init+0x11c>
 8018cac:	2300      	movs	r3, #0
 8018cae:	e7f5      	b.n	8018c9c <People_Init+0x11c>
 8018cb0:	f000 fb52 	bl	8019358 <ai_get_input_scale>
 8018cb4:	eef0 8a40 	vmov.f32	s17, s0
 8018cb8:	f000 fb78 	bl	80193ac <ai_get_input_zero_point>
 8018cbc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018cc0:	427a      	negs	r2, r7
 8018cc2:	b2c1      	uxtb	r1, r0
 8018cc4:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
 8018cc8:	ee07 2a90 	vmov	s15, r2
 8018ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018cd0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018cd4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8018cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce0:	bf4c      	ite	mi
 8018ce2:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8018ce6:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8018cea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018cee:	ee17 3a10 	vmov	r3, s14
 8018cf2:	4403      	add	r3, r0
 8018cf4:	2b7e      	cmp	r3, #126	; 0x7e
 8018cf6:	dc18      	bgt.n	8018d2a <People_Init+0x1aa>
 8018cf8:	337f      	adds	r3, #127	; 0x7f
 8018cfa:	db18      	blt.n	8018d2e <People_Init+0x1ae>
 8018cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d04:	bf4c      	ite	mi
 8018d06:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8018d0a:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8018d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d12:	edcd 7a01 	vstr	s15, [sp, #4]
 8018d16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018d1a:	440b      	add	r3, r1
 8018d1c:	b2db      	uxtb	r3, r3
 8018d1e:	3201      	adds	r2, #1
 8018d20:	f804 3b01 	strb.w	r3, [r4], #1
 8018d24:	42ba      	cmp	r2, r7
 8018d26:	d1cf      	bne.n	8018cc8 <People_Init+0x148>
 8018d28:	e75a      	b.n	8018be0 <People_Init+0x60>
 8018d2a:	237f      	movs	r3, #127	; 0x7f
 8018d2c:	e7f7      	b.n	8018d1e <People_Init+0x19e>
 8018d2e:	2380      	movs	r3, #128	; 0x80
 8018d30:	e7f5      	b.n	8018d1e <People_Init+0x19e>
 8018d32:	b003      	add	sp, #12
 8018d34:	ecbd 8b02 	vpop	{d8}
 8018d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	3000f908 	.word	0x3000f908
 8018d40:	300083b0 	.word	0x300083b0
 8018d44:	300083a8 	.word	0x300083a8
 8018d48:	0802fab0 	.word	0x0802fab0

08018d4c <People_Run>:
 8018d4c:	b510      	push	{r4, lr}
 8018d4e:	4604      	mov	r4, r0
 8018d50:	f7ff fe14 	bl	801897c <AI_Run>
 8018d54:	4620      	mov	r0, r4
 8018d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d5a:	f7ff bf07 	b.w	8018b6c <AI_PostProcess>
	...

08018d60 <network_nms_comparator>:
 8018d60:	4b0c      	ldr	r3, [pc, #48]	; (8018d94 <network_nms_comparator+0x34>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	3305      	adds	r3, #5
 8018d66:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018d6a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018d6e:	edd0 7a00 	vldr	s15, [r0]
 8018d72:	ed91 7a00 	vldr	s14, [r1]
 8018d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d82:	d404      	bmi.n	8018d8e <network_nms_comparator+0x2e>
 8018d84:	bfcc      	ite	gt
 8018d86:	f04f 30ff 	movgt.w	r0, #4294967295
 8018d8a:	2000      	movle	r0, #0
 8018d8c:	4770      	bx	lr
 8018d8e:	2001      	movs	r0, #1
 8018d90:	4770      	bx	lr
 8018d92:	bf00      	nop
 8018d94:	300083dc 	.word	0x300083dc

08018d98 <box_intersection>:
 8018d98:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8018d9c:	ed90 0a02 	vldr	s0, [r0, #8]
 8018da0:	ed91 6a02 	vldr	s12, [r1, #8]
 8018da4:	edd0 7a00 	vldr	s15, [r0]
 8018da8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8018dac:	edd1 6a00 	vldr	s13, [r1]
 8018db0:	ee20 0a05 	vmul.f32	s0, s0, s10
 8018db4:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8018db8:	ee37 7ac0 	vsub.f32	s14, s15, s0
 8018dbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018dc0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018dc4:	edd0 7a03 	vldr	s15, [r0, #12]
 8018dc8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8018dcc:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd4:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8018dd8:	fe37 7a25 	vselgt.f32	s14, s14, s11
 8018ddc:	edd1 5a03 	vldr	s11, [r1, #12]
 8018de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de4:	ee65 5a85 	vmul.f32	s11, s11, s10
 8018de8:	bf58      	it	pl
 8018dea:	eeb0 0a66 	vmovpl.f32	s0, s13
 8018dee:	edd1 6a01 	vldr	s13, [r1, #4]
 8018df2:	ee36 5ae5 	vsub.f32	s10, s13, s11
 8018df6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018dfa:	ed90 7a01 	vldr	s14, [r0, #4]
 8018dfe:	ee37 6a67 	vsub.f32	s12, s14, s15
 8018e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e06:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8018e0a:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8018e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018e16:	fe36 6a05 	vselgt.f32	s12, s12, s10
 8018e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018e22:	bf58      	it	pl
 8018e24:	eef0 7a47 	vmovpl.f32	s15, s14
 8018e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e2c:	d409      	bmi.n	8018e42 <box_intersection+0xaa>
 8018e2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e3a:	d402      	bmi.n	8018e42 <box_intersection+0xaa>
 8018e3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018e40:	4770      	bx	lr
 8018e42:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018e48 <box_intersection+0xb0>
 8018e46:	4770      	bx	lr
 8018e48:	00000000 	.word	0x00000000

08018e4c <network_pp_nmsFiltering_centroid>:
 8018e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	f8d1 a028 	ldr.w	sl, [r1, #40]	; 0x28
 8018e54:	4606      	mov	r6, r0
 8018e56:	684b      	ldr	r3, [r1, #4]
 8018e58:	460c      	mov	r4, r1
 8018e5a:	f8da 2000 	ldr.w	r2, [sl]
 8018e5e:	680d      	ldr	r5, [r1, #0]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	f105 0505 	add.w	r5, r5, #5
 8018e66:	ed2d 8b02 	vpush	{d8}
 8018e6a:	b085      	sub	sp, #20
 8018e6c:	f040 8088 	bne.w	8018f80 <network_pp_nmsFiltering_centroid+0x134>
 8018e70:	f04f 0800 	mov.w	r8, #0
 8018e74:	00af      	lsls	r7, r5, #2
 8018e76:	ed9f 8a44 	vldr	s16, [pc, #272]	; 8018f88 <network_pp_nmsFiltering_centroid+0x13c>
 8018e7a:	46c1      	mov	r9, r8
 8018e7c:	6823      	ldr	r3, [r4, #0]
 8018e7e:	454b      	cmp	r3, r9
 8018e80:	dc05      	bgt.n	8018e8e <network_pp_nmsFiltering_centroid+0x42>
 8018e82:	2000      	movs	r0, #0
 8018e84:	b005      	add	sp, #20
 8018e86:	ecbd 8b02 	vpop	{d8}
 8018e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e8e:	4b3f      	ldr	r3, [pc, #252]	; (8018f8c <network_pp_nmsFiltering_centroid+0x140>)
 8018e90:	463a      	mov	r2, r7
 8018e92:	4630      	mov	r0, r6
 8018e94:	f8da 1004 	ldr.w	r1, [sl, #4]
 8018e98:	f8c3 9000 	str.w	r9, [r3]
 8018e9c:	4b3c      	ldr	r3, [pc, #240]	; (8018f90 <network_pp_nmsFiltering_centroid+0x144>)
 8018e9e:	f009 fee2 	bl	8022c66 <qsort>
 8018ea2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018ea6:	4630      	mov	r0, r6
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	436b      	muls	r3, r5
 8018eac:	9302      	str	r3, [sp, #8]
 8018eae:	eb06 0308 	add.w	r3, r6, r8
 8018eb2:	469b      	mov	fp, r3
 8018eb4:	9301      	str	r3, [sp, #4]
 8018eb6:	9b02      	ldr	r3, [sp, #8]
 8018eb8:	4293      	cmp	r3, r2
 8018eba:	dc09      	bgt.n	8018ed0 <network_pp_nmsFiltering_centroid+0x84>
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	4610      	mov	r0, r2
 8018ec0:	9b02      	ldr	r3, [sp, #8]
 8018ec2:	4293      	cmp	r3, r2
 8018ec4:	da47      	bge.n	8018f56 <network_pp_nmsFiltering_centroid+0x10a>
 8018ec6:	f109 0901 	add.w	r9, r9, #1
 8018eca:	f108 0804 	add.w	r8, r8, #4
 8018ece:	e7d5      	b.n	8018e7c <network_pp_nmsFiltering_centroid+0x30>
 8018ed0:	eddb 7a05 	vldr	s15, [fp, #20]
 8018ed4:	442a      	add	r2, r5
 8018ed6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ede:	d102      	bne.n	8018ee6 <network_pp_nmsFiltering_centroid+0x9a>
 8018ee0:	4438      	add	r0, r7
 8018ee2:	44bb      	add	fp, r7
 8018ee4:	e7e7      	b.n	8018eb6 <network_pp_nmsFiltering_centroid+0x6a>
 8018ee6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8018eea:	9203      	str	r2, [sp, #12]
 8018eec:	9b02      	ldr	r3, [sp, #8]
 8018eee:	469c      	mov	ip, r3
 8018ef0:	9b03      	ldr	r3, [sp, #12]
 8018ef2:	459c      	cmp	ip, r3
 8018ef4:	ddf4      	ble.n	8018ee0 <network_pp_nmsFiltering_centroid+0x94>
 8018ef6:	f7ff ff4f 	bl	8018d98 <box_intersection>
 8018efa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018efe:	edd0 7a02 	vldr	s15, [r0, #8]
 8018f02:	ed90 6a03 	vldr	s12, [r0, #12]
 8018f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0a:	edd1 6a02 	vldr	s13, [r1, #8]
 8018f0e:	ed91 7a03 	vldr	s14, [r1, #12]
 8018f12:	d01d      	beq.n	8018f50 <network_pp_nmsFiltering_centroid+0x104>
 8018f14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018f18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018f1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018f20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f28:	d012      	beq.n	8018f50 <network_pp_nmsFiltering_centroid+0x104>
 8018f2a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8018f2e:	edd4 7a07 	vldr	s15, [r4, #28]
 8018f32:	9b03      	ldr	r3, [sp, #12]
 8018f34:	442b      	add	r3, r5
 8018f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018f3a:	9303      	str	r3, [sp, #12]
 8018f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f40:	bf48      	it	mi
 8018f42:	eb01 0c08 	addmi.w	ip, r1, r8
 8018f46:	4439      	add	r1, r7
 8018f48:	bf48      	it	mi
 8018f4a:	ed8c 8a05 	vstrmi	s16, [ip, #20]
 8018f4e:	e7cd      	b.n	8018eec <network_pp_nmsFiltering_centroid+0xa0>
 8018f50:	eeb0 7a48 	vmov.f32	s14, s16
 8018f54:	e7eb      	b.n	8018f2e <network_pp_nmsFiltering_centroid+0xe2>
 8018f56:	6961      	ldr	r1, [r4, #20]
 8018f58:	4281      	cmp	r1, r0
 8018f5a:	dd0d      	ble.n	8018f78 <network_pp_nmsFiltering_centroid+0x12c>
 8018f5c:	9b01      	ldr	r3, [sp, #4]
 8018f5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8018f62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f6a:	d005      	beq.n	8018f78 <network_pp_nmsFiltering_centroid+0x12c>
 8018f6c:	3001      	adds	r0, #1
 8018f6e:	9b01      	ldr	r3, [sp, #4]
 8018f70:	442a      	add	r2, r5
 8018f72:	443b      	add	r3, r7
 8018f74:	9301      	str	r3, [sp, #4]
 8018f76:	e7a3      	b.n	8018ec0 <network_pp_nmsFiltering_centroid+0x74>
 8018f78:	9b01      	ldr	r3, [sp, #4]
 8018f7a:	ed83 8a05 	vstr	s16, [r3, #20]
 8018f7e:	e7f6      	b.n	8018f6e <network_pp_nmsFiltering_centroid+0x122>
 8018f80:	f04f 30ff 	mov.w	r0, #4294967295
 8018f84:	e77e      	b.n	8018e84 <network_pp_nmsFiltering_centroid+0x38>
 8018f86:	bf00      	nop
 8018f88:	00000000 	.word	0x00000000
 8018f8c:	300083dc 	.word	0x300083dc
 8018f90:	08018d61 	.word	0x08018d61

08018f94 <network_pp_scoreFiltering_centroid>:
 8018f94:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018f96:	f8d2 c000 	ldr.w	ip, [r2]
 8018f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f9e:	681d      	ldr	r5, [r3, #0]
 8018fa0:	f10c 0705 	add.w	r7, ip, #5
 8018fa4:	6854      	ldr	r4, [r2, #4]
 8018fa6:	42a5      	cmp	r5, r4
 8018fa8:	d147      	bne.n	801903a <network_pp_scoreFiltering_centroid+0xa6>
 8018faa:	680c      	ldr	r4, [r1, #0]
 8018fac:	b904      	cbnz	r4, 8018fb0 <network_pp_scoreFiltering_centroid+0x1c>
 8018fae:	6008      	str	r0, [r1, #0]
 8018fb0:	685e      	ldr	r6, [r3, #4]
 8018fb2:	2500      	movs	r5, #0
 8018fb4:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8018fb8:	3018      	adds	r0, #24
 8018fba:	437e      	muls	r6, r7
 8018fbc:	462c      	mov	r4, r5
 8018fbe:	f04f 0918 	mov.w	r9, #24
 8018fc2:	42ae      	cmp	r6, r5
 8018fc4:	dc03      	bgt.n	8018fce <network_pp_scoreFiltering_centroid+0x3a>
 8018fc6:	2000      	movs	r0, #0
 8018fc8:	604c      	str	r4, [r1, #4]
 8018fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fce:	ed50 7a01 	vldr	s15, [r0, #-4]
 8018fd2:	4682      	mov	sl, r0
 8018fd4:	f04f 0e00 	mov.w	lr, #0
 8018fd8:	2301      	movs	r3, #1
 8018fda:	459c      	cmp	ip, r3
 8018fdc:	dc21      	bgt.n	8019022 <network_pp_scoreFiltering_centroid+0x8e>
 8018fde:	ed92 7a06 	vldr	s14, [r2, #24]
 8018fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fea:	d817      	bhi.n	801901c <network_pp_scoreFiltering_centroid+0x88>
 8018fec:	680b      	ldr	r3, [r1, #0]
 8018fee:	f850 ac18 	ldr.w	sl, [r0, #-24]
 8018ff2:	fb09 3304 	mla	r3, r9, r4, r3
 8018ff6:	3401      	adds	r4, #1
 8018ff8:	f8c3 a000 	str.w	sl, [r3]
 8018ffc:	f850 ac14 	ldr.w	sl, [r0, #-20]
 8019000:	f8c3 a004 	str.w	sl, [r3, #4]
 8019004:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8019008:	f8c3 a008 	str.w	sl, [r3, #8]
 801900c:	f850 ac0c 	ldr.w	sl, [r0, #-12]
 8019010:	f8c3 e014 	str.w	lr, [r3, #20]
 8019014:	f8c3 a00c 	str.w	sl, [r3, #12]
 8019018:	edc3 7a04 	vstr	s15, [r3, #16]
 801901c:	443d      	add	r5, r7
 801901e:	4440      	add	r0, r8
 8019020:	e7cf      	b.n	8018fc2 <network_pp_scoreFiltering_centroid+0x2e>
 8019022:	ecba 7a01 	vldmia	sl!, {s14}
 8019026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801902a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801902e:	bfc4      	itt	gt
 8019030:	469e      	movgt	lr, r3
 8019032:	eef0 7a47 	vmovgt.f32	s15, s14
 8019036:	3301      	adds	r3, #1
 8019038:	e7cf      	b.n	8018fda <network_pp_scoreFiltering_centroid+0x46>
 801903a:	f04f 30ff 	mov.w	r0, #4294967295
 801903e:	e7c4      	b.n	8018fca <network_pp_scoreFiltering_centroid+0x36>

08019040 <network_pp_getNNBoxes_centroid>:
 8019040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019044:	ed2d 8b04 	vpush	{d8-d9}
 8019048:	b08d      	sub	sp, #52	; 0x34
 801904a:	460c      	mov	r4, r1
 801904c:	af00      	add	r7, sp, #0
 801904e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8019050:	6238      	str	r0, [r7, #32]
 8019052:	61fb      	str	r3, [r7, #28]
 8019054:	680b      	ldr	r3, [r1, #0]
 8019056:	1d5a      	adds	r2, r3, #5
 8019058:	61ba      	str	r2, [r7, #24]
 801905a:	69fa      	ldr	r2, [r7, #28]
 801905c:	6811      	ldr	r1, [r2, #0]
 801905e:	6862      	ldr	r2, [r4, #4]
 8019060:	4291      	cmp	r1, r2
 8019062:	f040 8114 	bne.w	801928e <network_pp_getNNBoxes_centroid+0x24e>
 8019066:	edd4 7a02 	vldr	s15, [r4, #8]
 801906a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801906e:	009b      	lsls	r3, r3, #2
 8019070:	2600      	movs	r6, #0
 8019072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019076:	1dda      	adds	r2, r3, #7
 8019078:	3314      	adds	r3, #20
 801907a:	ee88 9a27 	vdiv.f32	s18, s16, s15
 801907e:	edd4 7a03 	vldr	s15, [r4, #12]
 8019082:	f022 0207 	bic.w	r2, r2, #7
 8019086:	617b      	str	r3, [r7, #20]
 8019088:	4633      	mov	r3, r6
 801908a:	ebad 0d02 	sub.w	sp, sp, r2
 801908e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019092:	46ea      	mov	sl, sp
 8019094:	e9c7 6609 	strd	r6, r6, [r7, #36]	; 0x24
 8019098:	eec8 9a27 	vdiv.f32	s19, s16, s15
 801909c:	68a2      	ldr	r2, [r4, #8]
 801909e:	42b2      	cmp	r2, r6
 80190a0:	f300 80f1 	bgt.w	8019286 <network_pp_getNNBoxes_centroid+0x246>
 80190a4:	69fb      	ldr	r3, [r7, #28]
 80190a6:	2000      	movs	r0, #0
 80190a8:	461a      	mov	r2, r3
 80190aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ac:	6053      	str	r3, [r2, #4]
 80190ae:	3734      	adds	r7, #52	; 0x34
 80190b0:	46bd      	mov	sp, r7
 80190b2:	ecbd 8b04 	vpop	{d8-d9}
 80190b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ba:	ed15 0a01 	vldr	s0, [r5, #-4]
 80190be:	eddf 8a75 	vldr	s17, [pc, #468]	; 8019294 <network_pp_getNNBoxes_centroid+0x254>
 80190c2:	eeb1 0a40 	vneg.f32	s0, s0
 80190c6:	f00c f88f 	bl	80251e8 <expf>
 80190ca:	ee30 0a08 	vadd.f32	s0, s0, s16
 80190ce:	f8d4 9000 	ldr.w	r9, [r4]
 80190d2:	4653      	mov	r3, sl
 80190d4:	4650      	mov	r0, sl
 80190d6:	4629      	mov	r1, r5
 80190d8:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80190dc:	2200      	movs	r2, #0
 80190de:	ed45 7a01 	vstr	s15, [r5, #-4]
 80190e2:	4591      	cmp	r9, r2
 80190e4:	f300 809b 	bgt.w	801921e <network_pp_getNNBoxes_centroid+0x1de>
 80190e8:	ee88 7a28 	vdiv.f32	s14, s16, s17
 80190ec:	2200      	movs	r2, #0
 80190ee:	4591      	cmp	r9, r2
 80190f0:	f300 80a7 	bgt.w	8019242 <network_pp_getNNBoxes_centroid+0x202>
 80190f4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80190f8:	4651      	mov	r1, sl
 80190fa:	4628      	mov	r0, r5
 80190fc:	f009 f85e 	bl	80221bc <memcpy>
 8019100:	6822      	ldr	r2, [r4, #0]
 8019102:	4629      	mov	r1, r5
 8019104:	2300      	movs	r3, #0
 8019106:	429a      	cmp	r2, r3
 8019108:	f300 80a3 	bgt.w	8019252 <network_pp_getNNBoxes_centroid+0x212>
 801910c:	462b      	mov	r3, r5
 801910e:	2101      	movs	r1, #1
 8019110:	ecf3 7a01 	vldmia	r3!, {s15}
 8019114:	428a      	cmp	r2, r1
 8019116:	f300 80a6 	bgt.w	8019266 <network_pp_getNNBoxes_centroid+0x226>
 801911a:	ed94 7a06 	vldr	s14, [r4, #24]
 801911e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019126:	d85f      	bhi.n	80191e8 <network_pp_getNNBoxes_centroid+0x1a8>
 8019128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912a:	6a38      	ldr	r0, [r7, #32]
 801912c:	3304      	adds	r3, #4
 801912e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8019132:	eb00 0983 	add.w	r9, r0, r3, lsl #2
 8019136:	4628      	mov	r0, r5
 8019138:	464b      	mov	r3, r9
 801913a:	f8c9 1000 	str.w	r1, [r9]
 801913e:	2100      	movs	r1, #0
 8019140:	3304      	adds	r3, #4
 8019142:	428a      	cmp	r2, r1
 8019144:	f300 8099 	bgt.w	801927a <network_pp_getNNBoxes_centroid+0x23a>
 8019148:	ed15 0a05 	vldr	s0, [r5, #-20]	; 0xffffffec
 801914c:	eeb1 0a40 	vneg.f32	s0, s0
 8019150:	f00c f84a 	bl	80251e8 <expf>
 8019154:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019158:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801915c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8019160:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019168:	ee67 7a89 	vmul.f32	s15, s15, s18
 801916c:	ed49 7a04 	vstr	s15, [r9, #-16]
 8019170:	ed15 0a04 	vldr	s0, [r5, #-16]
 8019174:	eeb1 0a40 	vneg.f32	s0, s0
 8019178:	f00c f836 	bl	80251e8 <expf>
 801917c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019180:	ee07 6a10 	vmov	s14, r6
 8019184:	6a23      	ldr	r3, [r4, #32]
 8019186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801918a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801918e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019192:	613a      	str	r2, [r7, #16]
 8019194:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801919c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80191a0:	ed49 7a03 	vstr	s15, [r9, #-12]
 80191a4:	edd3 8a00 	vldr	s17, [r3]
 80191a8:	ed15 0a03 	vldr	s0, [r5, #-12]
 80191ac:	f00c f81c 	bl	80251e8 <expf>
 80191b0:	ee28 0a80 	vmul.f32	s0, s17, s0
 80191b4:	693a      	ldr	r2, [r7, #16]
 80191b6:	6a23      	ldr	r3, [r4, #32]
 80191b8:	ee20 0a09 	vmul.f32	s0, s0, s18
 80191bc:	4413      	add	r3, r2
 80191be:	ed09 0a02 	vstr	s0, [r9, #-8]
 80191c2:	ed15 0a02 	vldr	s0, [r5, #-8]
 80191c6:	edd3 8a01 	vldr	s17, [r3, #4]
 80191ca:	f00c f80d 	bl	80251e8 <expf>
 80191ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191d0:	69ba      	ldr	r2, [r7, #24]
 80191d2:	ee28 0a80 	vmul.f32	s0, s17, s0
 80191d6:	4413      	add	r3, r2
 80191d8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80191dc:	627b      	str	r3, [r7, #36]	; 0x24
 80191de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e0:	ed09 0a01 	vstr	s0, [r9, #-4]
 80191e4:	3301      	adds	r3, #1
 80191e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80191e8:	697b      	ldr	r3, [r7, #20]
 80191ea:	f108 0801 	add.w	r8, r8, #1
 80191ee:	441d      	add	r5, r3
 80191f0:	69bb      	ldr	r3, [r7, #24]
 80191f2:	449b      	add	fp, r3
 80191f4:	6862      	ldr	r2, [r4, #4]
 80191f6:	f1ab 0305 	sub.w	r3, fp, #5
 80191fa:	4542      	cmp	r2, r8
 80191fc:	f73f af5d 	bgt.w	80190ba <network_pp_getNNBoxes_centroid+0x7a>
 8019200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019202:	3201      	adds	r2, #1
 8019204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019208:	68e2      	ldr	r2, [r4, #12]
 801920a:	428a      	cmp	r2, r1
 801920c:	dd3d      	ble.n	801928a <network_pp_getNNBoxes_centroid+0x24a>
 801920e:	f103 0b05 	add.w	fp, r3, #5
 8019212:	6a3b      	ldr	r3, [r7, #32]
 8019214:	f04f 0800 	mov.w	r8, #0
 8019218:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 801921c:	e7ea      	b.n	80191f4 <network_pp_getNNBoxes_centroid+0x1b4>
 801921e:	ecb1 0a01 	vldmia	r1!, {s0}
 8019222:	60fa      	str	r2, [r7, #12]
 8019224:	6139      	str	r1, [r7, #16]
 8019226:	e9c7 0301 	strd	r0, r3, [r7, #4]
 801922a:	f00b ffdd 	bl	80251e8 <expf>
 801922e:	6878      	ldr	r0, [r7, #4]
 8019230:	68fa      	ldr	r2, [r7, #12]
 8019232:	ee78 8a80 	vadd.f32	s17, s17, s0
 8019236:	68bb      	ldr	r3, [r7, #8]
 8019238:	3201      	adds	r2, #1
 801923a:	6939      	ldr	r1, [r7, #16]
 801923c:	eca0 0a01 	vstmia	r0!, {s0}
 8019240:	e74f      	b.n	80190e2 <network_pp_getNNBoxes_centroid+0xa2>
 8019242:	edd3 7a00 	vldr	s15, [r3]
 8019246:	3201      	adds	r2, #1
 8019248:	ee67 7a27 	vmul.f32	s15, s14, s15
 801924c:	ece3 7a01 	vstmia	r3!, {s15}
 8019250:	e74d      	b.n	80190ee <network_pp_getNNBoxes_centroid+0xae>
 8019252:	ed91 7a00 	vldr	s14, [r1]
 8019256:	3301      	adds	r3, #1
 8019258:	ed55 7a01 	vldr	s15, [r5, #-4]
 801925c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019260:	ece1 7a01 	vstmia	r1!, {s15}
 8019264:	e74f      	b.n	8019106 <network_pp_getNNBoxes_centroid+0xc6>
 8019266:	ecb3 7a01 	vldmia	r3!, {s14}
 801926a:	3101      	adds	r1, #1
 801926c:	eeb4 7a67 	vcmp.f32	s14, s15
 8019270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019274:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8019278:	e74c      	b.n	8019114 <network_pp_getNNBoxes_centroid+0xd4>
 801927a:	f850 cb04 	ldr.w	ip, [r0], #4
 801927e:	3101      	adds	r1, #1
 8019280:	f843 cb04 	str.w	ip, [r3], #4
 8019284:	e75d      	b.n	8019142 <network_pp_getNNBoxes_centroid+0x102>
 8019286:	2200      	movs	r2, #0
 8019288:	e7bc      	b.n	8019204 <network_pp_getNNBoxes_centroid+0x1c4>
 801928a:	3601      	adds	r6, #1
 801928c:	e706      	b.n	801909c <network_pp_getNNBoxes_centroid+0x5c>
 801928e:	f04f 30ff 	mov.w	r0, #4294967295
 8019292:	e70c      	b.n	80190ae <network_pp_getNNBoxes_centroid+0x6e>
 8019294:	00000000 	.word	0x00000000

08019298 <peopledetect_network_pp_getPersistentMemorySize>:
 8019298:	2008      	movs	r0, #8
 801929a:	4770      	bx	lr

0801929c <peopledetect_network_pp_reset>:
 801929c:	2300      	movs	r3, #0
 801929e:	6842      	ldr	r2, [r0, #4]
 80192a0:	6281      	str	r1, [r0, #40]	; 0x28
 80192a2:	4618      	mov	r0, r3
 80192a4:	604b      	str	r3, [r1, #4]
 80192a6:	600a      	str	r2, [r1, #0]
 80192a8:	4770      	bx	lr

080192aa <peopledetect_network_pp_process>:
 80192aa:	b570      	push	{r4, r5, r6, lr}
 80192ac:	460e      	mov	r6, r1
 80192ae:	4611      	mov	r1, r2
 80192b0:	4605      	mov	r5, r0
 80192b2:	4614      	mov	r4, r2
 80192b4:	f7ff fec4 	bl	8019040 <network_pp_getNNBoxes_centroid>
 80192b8:	b958      	cbnz	r0, 80192d2 <peopledetect_network_pp_process+0x28>
 80192ba:	4621      	mov	r1, r4
 80192bc:	4628      	mov	r0, r5
 80192be:	f7ff fdc5 	bl	8018e4c <network_pp_nmsFiltering_centroid>
 80192c2:	b930      	cbnz	r0, 80192d2 <peopledetect_network_pp_process+0x28>
 80192c4:	4622      	mov	r2, r4
 80192c6:	4631      	mov	r1, r6
 80192c8:	4628      	mov	r0, r5
 80192ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192ce:	f7ff be61 	b.w	8018f94 <network_pp_scoreFiltering_centroid>
 80192d2:	bd70      	pop	{r4, r5, r6, pc}

080192d4 <ai_get_input_height>:
 80192d4:	4b01      	ldr	r3, [pc, #4]	; (80192dc <ai_get_input_height+0x8>)
 80192d6:	699b      	ldr	r3, [r3, #24]
 80192d8:	8998      	ldrh	r0, [r3, #12]
 80192da:	4770      	bx	lr
 80192dc:	300083e0 	.word	0x300083e0

080192e0 <ai_get_input_width>:
 80192e0:	4b01      	ldr	r3, [pc, #4]	; (80192e8 <ai_get_input_width+0x8>)
 80192e2:	699b      	ldr	r3, [r3, #24]
 80192e4:	8918      	ldrh	r0, [r3, #8]
 80192e6:	4770      	bx	lr
 80192e8:	300083e0 	.word	0x300083e0

080192ec <ai_get_input_channels>:
 80192ec:	4b01      	ldr	r3, [pc, #4]	; (80192f4 <ai_get_input_channels+0x8>)
 80192ee:	699b      	ldr	r3, [r3, #24]
 80192f0:	8898      	ldrh	r0, [r3, #4]
 80192f2:	4770      	bx	lr
 80192f4:	300083e0 	.word	0x300083e0

080192f8 <ai_get_input_format>:
 80192f8:	4b02      	ldr	r3, [pc, #8]	; (8019304 <ai_get_input_format+0xc>)
 80192fa:	6818      	ldr	r0, [r3, #0]
 80192fc:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8019300:	4770      	bx	lr
 8019302:	bf00      	nop
 8019304:	300083e0 	.word	0x300083e0

08019308 <ai_get_output_format>:
 8019308:	4b02      	ldr	r3, [pc, #8]	; (8019314 <ai_get_output_format+0xc>)
 801930a:	6818      	ldr	r0, [r3, #0]
 801930c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8019310:	4770      	bx	lr
 8019312:	bf00      	nop
 8019314:	300083fc 	.word	0x300083fc

08019318 <ai_get_input_quantized_format>:
 8019318:	4b05      	ldr	r3, [pc, #20]	; (8019330 <ai_get_input_quantized_format+0x18>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 8019320:	f3c3 10c6 	ubfx	r0, r3, #7, #7
 8019324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019328:	1a80      	subs	r0, r0, r2
 801932a:	3b40      	subs	r3, #64	; 0x40
 801932c:	1ac0      	subs	r0, r0, r3
 801932e:	4770      	bx	lr
 8019330:	300083e0 	.word	0x300083e0

08019334 <ai_get_output_fxp_scale>:
 8019334:	4b07      	ldr	r3, [pc, #28]	; (8019354 <ai_get_output_fxp_scale+0x20>)
 8019336:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801933a:	681a      	ldr	r2, [r3, #0]
 801933c:	2301      	movs	r3, #1
 801933e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019342:	3a40      	subs	r2, #64	; 0x40
 8019344:	4093      	lsls	r3, r2
 8019346:	ee00 3a10 	vmov	s0, r3
 801934a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801934e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019352:	4770      	bx	lr
 8019354:	300083fc 	.word	0x300083fc

08019358 <ai_get_input_scale>:
 8019358:	4b09      	ldr	r3, [pc, #36]	; (8019380 <ai_get_input_scale+0x28>)
 801935a:	689b      	ldr	r3, [r3, #8]
 801935c:	b163      	cbz	r3, 8019378 <ai_get_input_scale+0x20>
 801935e:	681a      	ldr	r2, [r3, #0]
 8019360:	07d2      	lsls	r2, r2, #31
 8019362:	d509      	bpl.n	8019378 <ai_get_input_scale+0x20>
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	b13b      	cbz	r3, 8019378 <ai_get_input_scale+0x20>
 8019368:	685a      	ldr	r2, [r3, #4]
 801936a:	b12a      	cbz	r2, 8019378 <ai_get_input_scale+0x20>
 801936c:	885b      	ldrh	r3, [r3, #2]
 801936e:	b11b      	cbz	r3, 8019378 <ai_get_input_scale+0x20>
 8019370:	6813      	ldr	r3, [r2, #0]
 8019372:	ed93 0a00 	vldr	s0, [r3]
 8019376:	4770      	bx	lr
 8019378:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8019384 <ai_get_input_scale+0x2c>
 801937c:	4770      	bx	lr
 801937e:	bf00      	nop
 8019380:	300083e0 	.word	0x300083e0
 8019384:	00000000 	.word	0x00000000

08019388 <ai_get_input_quantization_scheme>:
 8019388:	b508      	push	{r3, lr}
 801938a:	f7ff ffe5 	bl	8019358 <ai_get_input_scale>
 801938e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019392:	4b05      	ldr	r3, [pc, #20]	; (80193a8 <ai_get_input_quantization_scheme+0x20>)
 8019394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019398:	6818      	ldr	r0, [r3, #0]
 801939a:	bf16      	itet	ne
 801939c:	f3c0 50c0 	ubfxne	r0, r0, #23, #1
 80193a0:	2000      	moveq	r0, #0
 80193a2:	3001      	addne	r0, #1
 80193a4:	bd08      	pop	{r3, pc}
 80193a6:	bf00      	nop
 80193a8:	300083e0 	.word	0x300083e0

080193ac <ai_get_input_zero_point>:
 80193ac:	4b0e      	ldr	r3, [pc, #56]	; (80193e8 <ai_get_input_zero_point+0x3c>)
 80193ae:	689a      	ldr	r2, [r3, #8]
 80193b0:	b1b2      	cbz	r2, 80193e0 <ai_get_input_zero_point+0x34>
 80193b2:	6813      	ldr	r3, [r2, #0]
 80193b4:	f013 0001 	ands.w	r0, r3, #1
 80193b8:	d015      	beq.n	80193e6 <ai_get_input_zero_point+0x3a>
 80193ba:	6850      	ldr	r0, [r2, #4]
 80193bc:	b198      	cbz	r0, 80193e6 <ai_get_input_zero_point+0x3a>
 80193be:	8802      	ldrh	r2, [r0, #0]
 80193c0:	6843      	ldr	r3, [r0, #4]
 80193c2:	0792      	lsls	r2, r2, #30
 80193c4:	d505      	bpl.n	80193d2 <ai_get_input_zero_point+0x26>
 80193c6:	b16b      	cbz	r3, 80193e4 <ai_get_input_zero_point+0x38>
 80193c8:	8840      	ldrh	r0, [r0, #2]
 80193ca:	b160      	cbz	r0, 80193e6 <ai_get_input_zero_point+0x3a>
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	7818      	ldrb	r0, [r3, #0]
 80193d0:	4770      	bx	lr
 80193d2:	b13b      	cbz	r3, 80193e4 <ai_get_input_zero_point+0x38>
 80193d4:	8840      	ldrh	r0, [r0, #2]
 80193d6:	b130      	cbz	r0, 80193e6 <ai_get_input_zero_point+0x3a>
 80193d8:	685b      	ldr	r3, [r3, #4]
 80193da:	f993 0000 	ldrsb.w	r0, [r3]
 80193de:	4770      	bx	lr
 80193e0:	4610      	mov	r0, r2
 80193e2:	4770      	bx	lr
 80193e4:	4618      	mov	r0, r3
 80193e6:	4770      	bx	lr
 80193e8:	300083e0 	.word	0x300083e0

080193ec <ai_get_output_scale>:
 80193ec:	4b09      	ldr	r3, [pc, #36]	; (8019414 <ai_get_output_scale+0x28>)
 80193ee:	689b      	ldr	r3, [r3, #8]
 80193f0:	b163      	cbz	r3, 801940c <ai_get_output_scale+0x20>
 80193f2:	681a      	ldr	r2, [r3, #0]
 80193f4:	07d2      	lsls	r2, r2, #31
 80193f6:	d509      	bpl.n	801940c <ai_get_output_scale+0x20>
 80193f8:	685b      	ldr	r3, [r3, #4]
 80193fa:	b13b      	cbz	r3, 801940c <ai_get_output_scale+0x20>
 80193fc:	685a      	ldr	r2, [r3, #4]
 80193fe:	b12a      	cbz	r2, 801940c <ai_get_output_scale+0x20>
 8019400:	885b      	ldrh	r3, [r3, #2]
 8019402:	b11b      	cbz	r3, 801940c <ai_get_output_scale+0x20>
 8019404:	6813      	ldr	r3, [r2, #0]
 8019406:	ed93 0a00 	vldr	s0, [r3]
 801940a:	4770      	bx	lr
 801940c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8019418 <ai_get_output_scale+0x2c>
 8019410:	4770      	bx	lr
 8019412:	bf00      	nop
 8019414:	300083fc 	.word	0x300083fc
 8019418:	00000000 	.word	0x00000000

0801941c <ai_get_output_quantization_scheme>:
 801941c:	b508      	push	{r3, lr}
 801941e:	f7ff ffe5 	bl	80193ec <ai_get_output_scale>
 8019422:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019426:	4b05      	ldr	r3, [pc, #20]	; (801943c <ai_get_output_quantization_scheme+0x20>)
 8019428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801942c:	6818      	ldr	r0, [r3, #0]
 801942e:	bf16      	itet	ne
 8019430:	f3c0 50c0 	ubfxne	r0, r0, #23, #1
 8019434:	2000      	moveq	r0, #0
 8019436:	3001      	addne	r0, #1
 8019438:	bd08      	pop	{r3, pc}
 801943a:	bf00      	nop
 801943c:	300083fc 	.word	0x300083fc

08019440 <ai_get_output_zero_point>:
 8019440:	4b0e      	ldr	r3, [pc, #56]	; (801947c <ai_get_output_zero_point+0x3c>)
 8019442:	689a      	ldr	r2, [r3, #8]
 8019444:	b1b2      	cbz	r2, 8019474 <ai_get_output_zero_point+0x34>
 8019446:	6813      	ldr	r3, [r2, #0]
 8019448:	f013 0001 	ands.w	r0, r3, #1
 801944c:	d015      	beq.n	801947a <ai_get_output_zero_point+0x3a>
 801944e:	6850      	ldr	r0, [r2, #4]
 8019450:	b198      	cbz	r0, 801947a <ai_get_output_zero_point+0x3a>
 8019452:	8802      	ldrh	r2, [r0, #0]
 8019454:	6843      	ldr	r3, [r0, #4]
 8019456:	0792      	lsls	r2, r2, #30
 8019458:	d505      	bpl.n	8019466 <ai_get_output_zero_point+0x26>
 801945a:	b16b      	cbz	r3, 8019478 <ai_get_output_zero_point+0x38>
 801945c:	8840      	ldrh	r0, [r0, #2]
 801945e:	b160      	cbz	r0, 801947a <ai_get_output_zero_point+0x3a>
 8019460:	685b      	ldr	r3, [r3, #4]
 8019462:	7818      	ldrb	r0, [r3, #0]
 8019464:	4770      	bx	lr
 8019466:	b13b      	cbz	r3, 8019478 <ai_get_output_zero_point+0x38>
 8019468:	8840      	ldrh	r0, [r0, #2]
 801946a:	b130      	cbz	r0, 801947a <ai_get_output_zero_point+0x3a>
 801946c:	685b      	ldr	r3, [r3, #4]
 801946e:	f993 0000 	ldrsb.w	r0, [r3]
 8019472:	4770      	bx	lr
 8019474:	4610      	mov	r0, r2
 8019476:	4770      	bx	lr
 8019478:	4618      	mov	r0, r3
 801947a:	4770      	bx	lr
 801947c:	300083fc 	.word	0x300083fc

08019480 <ai_init>:
 8019480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019482:	4c17      	ldr	r4, [pc, #92]	; (80194e0 <ai_init+0x60>)
 8019484:	b08f      	sub	sp, #60	; 0x3c
 8019486:	2100      	movs	r1, #0
 8019488:	4605      	mov	r5, r0
 801948a:	4620      	mov	r0, r4
 801948c:	4e15      	ldr	r6, [pc, #84]	; (80194e4 <ai_init+0x64>)
 801948e:	6021      	str	r1, [r4, #0]
 8019490:	f000 f892 	bl	80195b8 <ai_network_create>
 8019494:	f000 fb06 	bl	8019aa4 <ai_network_data_weights_get>
 8019498:	4601      	mov	r1, r0
 801949a:	4668      	mov	r0, sp
 801949c:	f000 faee 	bl	8019a7c <ai_network_data_weights_buffer_get>
 80194a0:	4629      	mov	r1, r5
 80194a2:	a807      	add	r0, sp, #28
 80194a4:	f000 fad6 	bl	8019a54 <ai_network_data_activations_buffer_get>
 80194a8:	4669      	mov	r1, sp
 80194aa:	6820      	ldr	r0, [r4, #0]
 80194ac:	f000 f894 	bl	80195d8 <ai_network_init>
 80194b0:	4631      	mov	r1, r6
 80194b2:	6820      	ldr	r0, [r4, #0]
 80194b4:	f000 f836 	bl	8019524 <ai_network_get_info>
 80194b8:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80194ba:	4c0b      	ldr	r4, [pc, #44]	; (80194e8 <ai_init+0x68>)
 80194bc:	463d      	mov	r5, r7
 80194be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194c6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80194c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80194cc:	4c07      	ldr	r4, [pc, #28]	; (80194ec <ai_init+0x6c>)
 80194ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	b00f      	add	sp, #60	; 0x3c
 80194de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194e0:	30008494 	.word	0x30008494
 80194e4:	30008418 	.word	0x30008418
 80194e8:	300083e0 	.word	0x300083e0
 80194ec:	300083fc 	.word	0x300083fc

080194f0 <ai_deinit>:
 80194f0:	4b01      	ldr	r3, [pc, #4]	; (80194f8 <ai_deinit+0x8>)
 80194f2:	6818      	ldr	r0, [r3, #0]
 80194f4:	f000 b86e 	b.w	80195d4 <ai_network_destroy>
 80194f8:	30008494 	.word	0x30008494

080194fc <ai_run>:
 80194fc:	b508      	push	{r3, lr}
 80194fe:	4a06      	ldr	r2, [pc, #24]	; (8019518 <ai_run+0x1c>)
 8019500:	4b06      	ldr	r3, [pc, #24]	; (801951c <ai_run+0x20>)
 8019502:	6051      	str	r1, [r2, #4]
 8019504:	6058      	str	r0, [r3, #4]
 8019506:	4619      	mov	r1, r3
 8019508:	4b05      	ldr	r3, [pc, #20]	; (8019520 <ai_run+0x24>)
 801950a:	6818      	ldr	r0, [r3, #0]
 801950c:	f000 faa0 	bl	8019a50 <ai_network_run>
 8019510:	2801      	cmp	r0, #1
 8019512:	d000      	beq.n	8019516 <ai_run+0x1a>
 8019514:	e7fe      	b.n	8019514 <ai_run+0x18>
 8019516:	bd08      	pop	{r3, pc}
 8019518:	300083fc 	.word	0x300083fc
 801951c:	300083e0 	.word	0x300083e0
 8019520:	30008494 	.word	0x30008494

08019524 <ai_network_get_info>:
 8019524:	b530      	push	{r4, r5, lr}
 8019526:	460d      	mov	r5, r1
 8019528:	b0a1      	sub	sp, #132	; 0x84
 801952a:	4604      	mov	r4, r0
 801952c:	f000 fdd8 	bl	801a0e0 <ai_platform_context_acquire>
 8019530:	2d00      	cmp	r5, #0
 8019532:	d030      	beq.n	8019596 <ai_network_get_info+0x72>
 8019534:	2800      	cmp	r0, #0
 8019536:	d030      	beq.n	801959a <ai_network_get_info+0x76>
 8019538:	226c      	movs	r2, #108	; 0x6c
 801953a:	2100      	movs	r1, #0
 801953c:	a805      	add	r0, sp, #20
 801953e:	f008 fe65 	bl	802220c <memset>
 8019542:	4b17      	ldr	r3, [pc, #92]	; (80195a0 <ai_network_get_info+0x7c>)
 8019544:	9301      	str	r3, [sp, #4]
 8019546:	4b17      	ldr	r3, [pc, #92]	; (80195a4 <ai_network_get_info+0x80>)
 8019548:	9302      	str	r3, [sp, #8]
 801954a:	4b17      	ldr	r3, [pc, #92]	; (80195a8 <ai_network_get_info+0x84>)
 801954c:	9303      	str	r3, [sp, #12]
 801954e:	4b17      	ldr	r3, [pc, #92]	; (80195ac <ai_network_get_info+0x88>)
 8019550:	9304      	str	r3, [sp, #16]
 8019552:	f000 fb97 	bl	8019c84 <ai_platform_runtime_get_revision>
 8019556:	9005      	str	r0, [sp, #20]
 8019558:	f000 fc12 	bl	8019d80 <ai_platform_runtime_get_version>
 801955c:	4b14      	ldr	r3, [pc, #80]	; (80195b0 <ai_network_get_info+0x8c>)
 801955e:	9006      	str	r0, [sp, #24]
 8019560:	9307      	str	r3, [sp, #28]
 8019562:	f240 1307 	movw	r3, #263	; 0x107
 8019566:	f8ad 3020 	strh.w	r3, [sp, #32]
 801956a:	f000 fc99 	bl	8019ea0 <ai_platform_api_get_version>
 801956e:	900a      	str	r0, [sp, #40]	; 0x28
 8019570:	f000 fd26 	bl	8019fc0 <ai_platform_interface_api_get_version>
 8019574:	4b0f      	ldr	r3, [pc, #60]	; (80195b4 <ai_network_get_info+0x90>)
 8019576:	a901      	add	r1, sp, #4
 8019578:	900b      	str	r0, [sp, #44]	; 0x2c
 801957a:	4620      	mov	r0, r4
 801957c:	930c      	str	r3, [sp, #48]	; 0x30
 801957e:	f000 fe39 	bl	801a1f4 <ai_platform_api_get_network_report>
 8019582:	4604      	mov	r4, r0
 8019584:	b120      	cbz	r0, 8019590 <ai_network_get_info+0x6c>
 8019586:	227c      	movs	r2, #124	; 0x7c
 8019588:	a901      	add	r1, sp, #4
 801958a:	4628      	mov	r0, r5
 801958c:	f008 fe16 	bl	80221bc <memcpy>
 8019590:	4620      	mov	r0, r4
 8019592:	b021      	add	sp, #132	; 0x84
 8019594:	bd30      	pop	{r4, r5, pc}
 8019596:	462c      	mov	r4, r5
 8019598:	e7fa      	b.n	8019590 <ai_network_get_info+0x6c>
 801959a:	4604      	mov	r4, r0
 801959c:	e7f8      	b.n	8019590 <ai_network_get_info+0x6c>
 801959e:	bf00      	nop
 80195a0:	0802fad8 	.word	0x0802fad8
 80195a4:	0802fae0 	.word	0x0802fae0
 80195a8:	0802fb01 	.word	0x0802fb01
 80195ac:	0802fb1a 	.word	0x0802fb1a
 80195b0:	08077a38 	.word	0x08077a38
 80195b4:	05c3eb4a 	.word	0x05c3eb4a

080195b8 <ai_network_create>:
 80195b8:	b507      	push	{r0, r1, r2, lr}
 80195ba:	2305      	movs	r3, #5
 80195bc:	2200      	movs	r2, #0
 80195be:	e9cd 3200 	strd	r3, r2, [sp]
 80195c2:	2301      	movs	r3, #1
 80195c4:	4a02      	ldr	r2, [pc, #8]	; (80195d0 <ai_network_create+0x18>)
 80195c6:	f001 fa43 	bl	801aa50 <ai_platform_network_create>
 80195ca:	b003      	add	sp, #12
 80195cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80195d0:	24001af0 	.word	0x24001af0

080195d4 <ai_network_destroy>:
 80195d4:	f001 bbdc 	b.w	801ad90 <ai_platform_network_destroy>

080195d8 <ai_network_init>:
 80195d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195da:	4606      	mov	r6, r0
 80195dc:	460f      	mov	r7, r1
 80195de:	f001 fcc9 	bl	801af74 <ai_platform_network_init>
 80195e2:	4604      	mov	r4, r0
 80195e4:	2800      	cmp	r0, #0
 80195e6:	f000 821a 	beq.w	8019a1e <ai_network_init+0x446>
 80195ea:	2300      	movs	r3, #0
 80195ec:	463a      	mov	r2, r7
 80195ee:	2101      	movs	r1, #1
 80195f0:	a801      	add	r0, sp, #4
 80195f2:	9301      	str	r3, [sp, #4]
 80195f4:	f000 fa98 	bl	8019b28 <ai_platform_get_weights_map>
 80195f8:	4605      	mov	r5, r0
 80195fa:	2800      	cmp	r0, #0
 80195fc:	f000 8211 	beq.w	8019a22 <ai_network_init+0x44a>
 8019600:	4ac7      	ldr	r2, [pc, #796]	; (8019920 <ai_network_init+0x348>)
 8019602:	6813      	ldr	r3, [r2, #0]
 8019604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019608:	6013      	str	r3, [r2, #0]
 801960a:	9b01      	ldr	r3, [sp, #4]
 801960c:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8019610:	4ac4      	ldr	r2, [pc, #784]	; (8019924 <ai_network_init+0x34c>)
 8019612:	6811      	ldr	r1, [r2, #0]
 8019614:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019618:	6011      	str	r1, [r2, #0]
 801961a:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 801961e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019622:	4ac1      	ldr	r2, [pc, #772]	; (8019928 <ai_network_init+0x350>)
 8019624:	6811      	ldr	r1, [r2, #0]
 8019626:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 801962a:	6011      	str	r1, [r2, #0]
 801962c:	f503 71f8 	add.w	r1, r3, #496	; 0x1f0
 8019630:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019634:	4abd      	ldr	r2, [pc, #756]	; (801992c <ai_network_init+0x354>)
 8019636:	6811      	ldr	r1, [r2, #0]
 8019638:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 801963c:	6011      	str	r1, [r2, #0]
 801963e:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 8019642:	3110      	adds	r1, #16
 8019644:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019648:	4ab9      	ldr	r2, [pc, #740]	; (8019930 <ai_network_init+0x358>)
 801964a:	6811      	ldr	r1, [r2, #0]
 801964c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019650:	6011      	str	r1, [r2, #0]
 8019652:	f503 51a3 	add.w	r1, r3, #5216	; 0x1460
 8019656:	3110      	adds	r1, #16
 8019658:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801965c:	4ab5      	ldr	r2, [pc, #724]	; (8019934 <ai_network_init+0x35c>)
 801965e:	6811      	ldr	r1, [r2, #0]
 8019660:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019664:	6011      	str	r1, [r2, #0]
 8019666:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 801966a:	3170      	adds	r1, #112	; 0x70
 801966c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019670:	4ab1      	ldr	r2, [pc, #708]	; (8019938 <ai_network_init+0x360>)
 8019672:	6811      	ldr	r1, [r2, #0]
 8019674:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019678:	6011      	str	r1, [r2, #0]
 801967a:	f503 41ba 	add.w	r1, r3, #23808	; 0x5d00
 801967e:	3170      	adds	r1, #112	; 0x70
 8019680:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019684:	4aad      	ldr	r2, [pc, #692]	; (801993c <ai_network_init+0x364>)
 8019686:	6811      	ldr	r1, [r2, #0]
 8019688:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 801968c:	6011      	str	r1, [r2, #0]
 801968e:	f503 31be 	add.w	r1, r3, #97280	; 0x17c00
 8019692:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 8019696:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801969a:	4aa9      	ldr	r2, [pc, #676]	; (8019940 <ai_network_init+0x368>)
 801969c:	6811      	ldr	r1, [r2, #0]
 801969e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80196a2:	6011      	str	r1, [r2, #0]
 80196a4:	f503 31bf 	add.w	r1, r3, #97792	; 0x17e00
 80196a8:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 80196ac:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80196b0:	4aa4      	ldr	r2, [pc, #656]	; (8019944 <ai_network_init+0x36c>)
 80196b2:	6811      	ldr	r1, [r2, #0]
 80196b4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80196b8:	6011      	str	r1, [r2, #0]
 80196ba:	f503 31c1 	add.w	r1, r3, #98816	; 0x18200
 80196be:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 80196c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80196c6:	4aa0      	ldr	r2, [pc, #640]	; (8019948 <ai_network_init+0x370>)
 80196c8:	6811      	ldr	r1, [r2, #0]
 80196ca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80196ce:	6011      	str	r1, [r2, #0]
 80196d0:	f503 31c2 	add.w	r1, r3, #99328	; 0x18400
 80196d4:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 80196d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80196dc:	4a9b      	ldr	r2, [pc, #620]	; (801994c <ai_network_init+0x374>)
 80196de:	6811      	ldr	r1, [r2, #0]
 80196e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80196e4:	6011      	str	r1, [r2, #0]
 80196e6:	f503 3101 	add.w	r1, r3, #132096	; 0x20400
 80196ea:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 80196ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80196f2:	4a97      	ldr	r2, [pc, #604]	; (8019950 <ai_network_init+0x378>)
 80196f4:	6811      	ldr	r1, [r2, #0]
 80196f6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80196fa:	6011      	str	r1, [r2, #0]
 80196fc:	f503 3102 	add.w	r1, r3, #133120	; 0x20800
 8019700:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 8019704:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019708:	4a92      	ldr	r2, [pc, #584]	; (8019954 <ai_network_init+0x37c>)
 801970a:	6811      	ldr	r1, [r2, #0]
 801970c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019710:	6011      	str	r1, [r2, #0]
 8019712:	f503 3104 	add.w	r1, r3, #135168	; 0x21000
 8019716:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
 801971a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801971e:	4a8e      	ldr	r2, [pc, #568]	; (8019958 <ai_network_init+0x380>)
 8019720:	6811      	ldr	r1, [r2, #0]
 8019722:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019726:	6011      	str	r1, [r2, #0]
 8019728:	f503 3105 	add.w	r1, r3, #136192	; 0x21400
 801972c:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
 8019730:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019734:	4a89      	ldr	r2, [pc, #548]	; (801995c <ai_network_init+0x384>)
 8019736:	6811      	ldr	r1, [r2, #0]
 8019738:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 801973c:	6011      	str	r1, [r2, #0]
 801973e:	f503 3145 	add.w	r1, r3, #201728	; 0x31400
 8019742:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
 8019746:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801974a:	4a85      	ldr	r2, [pc, #532]	; (8019960 <ai_network_init+0x388>)
 801974c:	6811      	ldr	r1, [r2, #0]
 801974e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019752:	6011      	str	r1, [r2, #0]
 8019754:	f503 3146 	add.w	r1, r3, #202752	; 0x31800
 8019758:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
 801975c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019760:	4a80      	ldr	r2, [pc, #512]	; (8019964 <ai_network_init+0x38c>)
 8019762:	6811      	ldr	r1, [r2, #0]
 8019764:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019768:	6011      	str	r1, [r2, #0]
 801976a:	f503 3148 	add.w	r1, r3, #204800	; 0x32000
 801976e:	f501 717c 	add.w	r1, r1, #1008	; 0x3f0
 8019772:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019776:	4a7c      	ldr	r2, [pc, #496]	; (8019968 <ai_network_init+0x390>)
 8019778:	6811      	ldr	r1, [r2, #0]
 801977a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 801977e:	6011      	str	r1, [r2, #0]
 8019780:	f503 3149 	add.w	r1, r3, #205824	; 0x32400
 8019784:	f501 717c 	add.w	r1, r1, #1008	; 0x3f0
 8019788:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801978c:	4a77      	ldr	r2, [pc, #476]	; (801996c <ai_network_init+0x394>)
 801978e:	6811      	ldr	r1, [r2, #0]
 8019790:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8019794:	6011      	str	r1, [r2, #0]
 8019796:	f503 3169 	add.w	r1, r3, #238592	; 0x3a400
 801979a:	f501 717c 	add.w	r1, r1, #1008	; 0x3f0
 801979e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80197a2:	4a73      	ldr	r2, [pc, #460]	; (8019970 <ai_network_init+0x398>)
 80197a4:	6811      	ldr	r1, [r2, #0]
 80197a6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80197aa:	6011      	str	r1, [r2, #0]
 80197ac:	f503 316a 	add.w	r1, r3, #239616	; 0x3a800
 80197b0:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 80197b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80197b8:	4a6e      	ldr	r2, [pc, #440]	; (8019974 <ai_network_init+0x39c>)
 80197ba:	6811      	ldr	r1, [r2, #0]
 80197bc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80197c0:	6011      	str	r1, [r2, #0]
 80197c2:	f503 316b 	add.w	r1, r3, #240640	; 0x3ac00
 80197c6:	f501 711c 	add.w	r1, r1, #624	; 0x270
 80197ca:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80197ce:	4a6a      	ldr	r2, [pc, #424]	; (8019978 <ai_network_init+0x3a0>)
 80197d0:	6811      	ldr	r1, [r2, #0]
 80197d2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80197d6:	6011      	str	r1, [r2, #0]
 80197d8:	f503 316c 	add.w	r1, r3, #241664	; 0x3b000
 80197dc:	3170      	adds	r1, #112	; 0x70
 80197de:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80197e2:	4966      	ldr	r1, [pc, #408]	; (801997c <ai_network_init+0x3a4>)
 80197e4:	680a      	ldr	r2, [r1, #0]
 80197e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80197ea:	600a      	str	r2, [r1, #0]
 80197ec:	f503 2286 	add.w	r2, r3, #274432	; 0x43000
 80197f0:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 80197f4:	f102 0070 	add.w	r0, r2, #112	; 0x70
 80197f8:	f502 628e 	add.w	r2, r2, #1136	; 0x470
 80197fc:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019800:	e9c1 0002 	strd	r0, r0, [r1, #8]
 8019804:	495e      	ldr	r1, [pc, #376]	; (8019980 <ai_network_init+0x3a8>)
 8019806:	6808      	ldr	r0, [r1, #0]
 8019808:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801980c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8019810:	4a5c      	ldr	r2, [pc, #368]	; (8019984 <ai_network_init+0x3ac>)
 8019812:	6008      	str	r0, [r1, #0]
 8019814:	6811      	ldr	r1, [r2, #0]
 8019816:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 801981a:	e9c2 3302 	strd	r3, r3, [r2, #8]
 801981e:	6011      	str	r1, [r2, #0]
 8019820:	2300      	movs	r3, #0
 8019822:	463a      	mov	r2, r7
 8019824:	2101      	movs	r1, #1
 8019826:	a801      	add	r0, sp, #4
 8019828:	9301      	str	r3, [sp, #4]
 801982a:	f000 f9d3 	bl	8019bd4 <ai_platform_get_activations_map>
 801982e:	4607      	mov	r7, r0
 8019830:	2800      	cmp	r0, #0
 8019832:	f000 80fc 	beq.w	8019a2e <ai_network_init+0x456>
 8019836:	9b01      	ldr	r3, [sp, #4]
 8019838:	4953      	ldr	r1, [pc, #332]	; (8019988 <ai_network_init+0x3b0>)
 801983a:	f503 4270 	add.w	r2, r3, #61440	; 0xf000
 801983e:	322c      	adds	r2, #44	; 0x2c
 8019840:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8019844:	4951      	ldr	r1, [pc, #324]	; (801998c <ai_network_init+0x3b4>)
 8019846:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801984a:	f503 3264 	add.w	r2, r3, #233472	; 0x39000
 801984e:	4950      	ldr	r1, [pc, #320]	; (8019990 <ai_network_init+0x3b8>)
 8019850:	f502 724c 	add.w	r2, r2, #816	; 0x330
 8019854:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8019858:	f503 61f4 	add.w	r1, r3, #1952	; 0x7a0
 801985c:	4a4d      	ldr	r2, [pc, #308]	; (8019994 <ai_network_init+0x3bc>)
 801985e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019862:	f503 3262 	add.w	r2, r3, #231424	; 0x38800
 8019866:	494c      	ldr	r1, [pc, #304]	; (8019998 <ai_network_init+0x3c0>)
 8019868:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 801986c:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8019870:	4a4a      	ldr	r2, [pc, #296]	; (801999c <ai_network_init+0x3c4>)
 8019872:	f503 31e1 	add.w	r1, r3, #115200	; 0x1c200
 8019876:	e9c2 3302 	strd	r3, r3, [r2, #8]
 801987a:	4a49      	ldr	r2, [pc, #292]	; (80199a0 <ai_network_init+0x3c8>)
 801987c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019880:	f503 31ef 	add.w	r1, r3, #122368	; 0x1de00
 8019884:	4a47      	ldr	r2, [pc, #284]	; (80199a4 <ai_network_init+0x3cc>)
 8019886:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801988a:	4a47      	ldr	r2, [pc, #284]	; (80199a8 <ai_network_init+0x3d0>)
 801988c:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
 8019890:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8019894:	4a45      	ldr	r2, [pc, #276]	; (80199ac <ai_network_init+0x3d4>)
 8019896:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801989a:	4a45      	ldr	r2, [pc, #276]	; (80199b0 <ai_network_init+0x3d8>)
 801989c:	4945      	ldr	r1, [pc, #276]	; (80199b4 <ai_network_init+0x3dc>)
 801989e:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80198a2:	f503 4214 	add.w	r2, r3, #37888	; 0x9400
 80198a6:	3280      	adds	r2, #128	; 0x80
 80198a8:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80198ac:	4a42      	ldr	r2, [pc, #264]	; (80199b8 <ai_network_init+0x3e0>)
 80198ae:	4943      	ldr	r1, [pc, #268]	; (80199bc <ai_network_init+0x3e4>)
 80198b0:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80198b4:	f503 3282 	add.w	r2, r3, #66560	; 0x10400
 80198b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80198bc:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80198c0:	4a3f      	ldr	r2, [pc, #252]	; (80199c0 <ai_network_init+0x3e8>)
 80198c2:	f503 31f3 	add.w	r1, r3, #124416	; 0x1e600
 80198c6:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80198ca:	4a3e      	ldr	r2, [pc, #248]	; (80199c4 <ai_network_init+0x3ec>)
 80198cc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80198d0:	4a3d      	ldr	r2, [pc, #244]	; (80199c8 <ai_network_init+0x3f0>)
 80198d2:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
 80198d6:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80198da:	4a3c      	ldr	r2, [pc, #240]	; (80199cc <ai_network_init+0x3f4>)
 80198dc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80198e0:	f503 5130 	add.w	r1, r3, #11264	; 0x2c00
 80198e4:	4a3a      	ldr	r2, [pc, #232]	; (80199d0 <ai_network_init+0x3f8>)
 80198e6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80198ea:	4a3a      	ldr	r2, [pc, #232]	; (80199d4 <ai_network_init+0x3fc>)
 80198ec:	493a      	ldr	r1, [pc, #232]	; (80199d8 <ai_network_init+0x400>)
 80198ee:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80198f2:	f503 3286 	add.w	r2, r3, #68608	; 0x10c00
 80198f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80198fa:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80198fe:	4a37      	ldr	r2, [pc, #220]	; (80199dc <ai_network_init+0x404>)
 8019900:	f503 6110 	add.w	r1, r3, #2304	; 0x900
 8019904:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8019908:	4a35      	ldr	r2, [pc, #212]	; (80199e0 <ai_network_init+0x408>)
 801990a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801990e:	f503 41f3 	add.w	r1, r3, #31104	; 0x7980
 8019912:	4a34      	ldr	r2, [pc, #208]	; (80199e4 <ai_network_init+0x40c>)
 8019914:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019918:	f503 420c 	add.w	r2, r3, #35840	; 0x8c00
 801991c:	e064      	b.n	80199e8 <ai_network_init+0x410>
 801991e:	bf00      	nop
 8019920:	24001370 	.word	0x24001370
 8019924:	240012ac 	.word	0x240012ac
 8019928:	24001460 	.word	0x24001460
 801992c:	2400139c 	.word	0x2400139c
 8019930:	24001550 	.word	0x24001550
 8019934:	2400148c 	.word	0x2400148c
 8019938:	24001640 	.word	0x24001640
 801993c:	2400157c 	.word	0x2400157c
 8019940:	24001730 	.word	0x24001730
 8019944:	2400166c 	.word	0x2400166c
 8019948:	24001820 	.word	0x24001820
 801994c:	2400175c 	.word	0x2400175c
 8019950:	24001910 	.word	0x24001910
 8019954:	2400184c 	.word	0x2400184c
 8019958:	24001a48 	.word	0x24001a48
 801995c:	2400193c 	.word	0x2400193c
 8019960:	24000ec0 	.word	0x24000ec0
 8019964:	24000dfc 	.word	0x24000dfc
 8019968:	24000fb0 	.word	0x24000fb0
 801996c:	24000eec 	.word	0x24000eec
 8019970:	240010a0 	.word	0x240010a0
 8019974:	24000fdc 	.word	0x24000fdc
 8019978:	24001190 	.word	0x24001190
 801997c:	240010cc 	.word	0x240010cc
 8019980:	24001280 	.word	0x24001280
 8019984:	240011bc 	.word	0x240011bc
 8019988:	24001b54 	.word	0x24001b54
 801998c:	24001a94 	.word	0x24001a94
 8019990:	24001344 	.word	0x24001344
 8019994:	24001318 	.word	0x24001318
 8019998:	24001434 	.word	0x24001434
 801999c:	24001408 	.word	0x24001408
 80199a0:	24001524 	.word	0x24001524
 80199a4:	240014f8 	.word	0x240014f8
 80199a8:	24001614 	.word	0x24001614
 80199ac:	240015e8 	.word	0x240015e8
 80199b0:	24001704 	.word	0x24001704
 80199b4:	240016d8 	.word	0x240016d8
 80199b8:	240017f4 	.word	0x240017f4
 80199bc:	240017c8 	.word	0x240017c8
 80199c0:	240018e4 	.word	0x240018e4
 80199c4:	240018b8 	.word	0x240018b8
 80199c8:	240019f0 	.word	0x240019f0
 80199cc:	24001a1c 	.word	0x24001a1c
 80199d0:	240019c4 	.word	0x240019c4
 80199d4:	24000e94 	.word	0x24000e94
 80199d8:	24000e68 	.word	0x24000e68
 80199dc:	24000f84 	.word	0x24000f84
 80199e0:	24000f58 	.word	0x24000f58
 80199e4:	24001074 	.word	0x24001074
 80199e8:	4914      	ldr	r1, [pc, #80]	; (8019a3c <ai_network_init+0x464>)
 80199ea:	3204      	adds	r2, #4
 80199ec:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80199f0:	4a13      	ldr	r2, [pc, #76]	; (8019a40 <ai_network_init+0x468>)
 80199f2:	4914      	ldr	r1, [pc, #80]	; (8019a44 <ai_network_init+0x46c>)
 80199f4:	e9c2 3302 	strd	r3, r3, [r2, #8]
 80199f8:	f503 427c 	add.w	r2, r3, #64512	; 0xfc00
 80199fc:	3284      	adds	r2, #132	; 0x84
 80199fe:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8019a02:	4a11      	ldr	r2, [pc, #68]	; (8019a48 <ai_network_init+0x470>)
 8019a04:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8019a08:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8019a0c:	4a0f      	ldr	r2, [pc, #60]	; (8019a4c <ai_network_init+0x474>)
 8019a0e:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8019a12:	4630      	mov	r0, r6
 8019a14:	f001 fc40 	bl	801b298 <ai_platform_network_post_init>
 8019a18:	4038      	ands	r0, r7
 8019a1a:	4028      	ands	r0, r5
 8019a1c:	b2c0      	uxtb	r0, r0
 8019a1e:	b003      	add	sp, #12
 8019a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a22:	2212      	movs	r2, #18
 8019a24:	2130      	movs	r1, #48	; 0x30
 8019a26:	4620      	mov	r0, r4
 8019a28:	f000 fbde 	bl	801a1e8 <ai_platform_network_set_error>
 8019a2c:	e6f8      	b.n	8019820 <ai_network_init+0x248>
 8019a2e:	2213      	movs	r2, #19
 8019a30:	2130      	movs	r1, #48	; 0x30
 8019a32:	4620      	mov	r0, r4
 8019a34:	f000 fbd8 	bl	801a1e8 <ai_platform_network_set_error>
 8019a38:	e7eb      	b.n	8019a12 <ai_network_init+0x43a>
 8019a3a:	bf00      	nop
 8019a3c:	24001048 	.word	0x24001048
 8019a40:	24001164 	.word	0x24001164
 8019a44:	24001138 	.word	0x24001138
 8019a48:	24001254 	.word	0x24001254
 8019a4c:	24001228 	.word	0x24001228

08019a50 <ai_network_run>:
 8019a50:	f001 bd38 	b.w	801b4c4 <ai_platform_network_process>

08019a54 <ai_network_data_activations_buffer_get>:
 8019a54:	4a07      	ldr	r2, [pc, #28]	; (8019a74 <ai_network_data_activations_buffer_get+0x20>)
 8019a56:	b084      	sub	sp, #16
 8019a58:	e9c0 2100 	strd	r2, r1, [r0]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	4906      	ldr	r1, [pc, #24]	; (8019a78 <ai_network_data_activations_buffer_get+0x24>)
 8019a60:	f8c0 d018 	str.w	sp, [r0, #24]
 8019a64:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019a68:	f240 4201 	movw	r2, #1025	; 0x401
 8019a6c:	e9c0 1204 	strd	r1, r2, [r0, #16]
 8019a70:	b004      	add	sp, #16
 8019a72:	4770      	bx	lr
 8019a74:	00040440 	.word	0x00040440
 8019a78:	0003a3a0 	.word	0x0003a3a0

08019a7c <ai_network_data_weights_buffer_get>:
 8019a7c:	4a07      	ldr	r2, [pc, #28]	; (8019a9c <ai_network_data_weights_buffer_get+0x20>)
 8019a7e:	b084      	sub	sp, #16
 8019a80:	e9c0 2100 	strd	r2, r1, [r0]
 8019a84:	2200      	movs	r2, #0
 8019a86:	4906      	ldr	r1, [pc, #24]	; (8019aa0 <ai_network_data_weights_buffer_get+0x24>)
 8019a88:	f8c0 d018 	str.w	sp, [r0, #24]
 8019a8c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019a90:	f240 4201 	movw	r2, #1025	; 0x401
 8019a94:	e9c0 1204 	strd	r1, r2, [r0, #16]
 8019a98:	b004      	add	sp, #16
 8019a9a:	4770      	bx	lr
 8019a9c:	40040440 	.word	0x40040440
 8019aa0:	000452e8 	.word	0x000452e8

08019aa4 <ai_network_data_weights_get>:
 8019aa4:	4800      	ldr	r0, [pc, #0]	; (8019aa8 <ai_network_data_weights_get+0x4>)
 8019aa6:	4770      	bx	lr
 8019aa8:	080776a8 	.word	0x080776a8

08019aac <ai_buffer_get_size>:
 8019aac:	b340      	cbz	r0, 8019b00 <ai_buffer_get_size+0x54>
 8019aae:	4b15      	ldr	r3, [pc, #84]	; (8019b04 <ai_buffer_get_size+0x58>)
 8019ab0:	b430      	push	{r4, r5}
 8019ab2:	6802      	ldr	r2, [r0, #0]
 8019ab4:	4d14      	ldr	r5, [pc, #80]	; (8019b08 <ai_buffer_get_size+0x5c>)
 8019ab6:	4013      	ands	r3, r2
 8019ab8:	6984      	ldr	r4, [r0, #24]
 8019aba:	42ab      	cmp	r3, r5
 8019abc:	6862      	ldr	r2, [r4, #4]
 8019abe:	d103      	bne.n	8019ac8 <ai_buffer_get_size+0x1c>
 8019ac0:	b111      	cbz	r1, 8019ac8 <ai_buffer_get_size+0x1c>
 8019ac2:	321f      	adds	r2, #31
 8019ac4:	f022 021f 	bic.w	r2, r2, #31
 8019ac8:	7d03      	ldrb	r3, [r0, #20]
 8019aca:	6941      	ldr	r1, [r0, #20]
 8019acc:	f1a3 0301 	sub.w	r3, r3, #1
 8019ad0:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8019ad4:	fab3 f383 	clz	r3, r3
 8019ad8:	095b      	lsrs	r3, r3, #5
 8019ada:	428b      	cmp	r3, r1
 8019adc:	da0c      	bge.n	8019af8 <ai_buffer_get_size+0x4c>
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d103      	bne.n	8019aea <ai_buffer_get_size+0x3e>
 8019ae2:	2902      	cmp	r1, #2
 8019ae4:	f04f 0302 	mov.w	r3, #2
 8019ae8:	d006      	beq.n	8019af8 <ai_buffer_get_size+0x4c>
 8019aea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8019aee:	3301      	adds	r3, #1
 8019af0:	428b      	cmp	r3, r1
 8019af2:	fb00 f202 	mul.w	r2, r0, r2
 8019af6:	d1f2      	bne.n	8019ade <ai_buffer_get_size+0x32>
 8019af8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8019afc:	bc30      	pop	{r4, r5}
 8019afe:	4770      	bx	lr
 8019b00:	4770      	bx	lr
 8019b02:	bf00      	nop
 8019b04:	017fffff 	.word	0x017fffff
 8019b08:	000400c0 	.word	0x000400c0

08019b0c <ai_buffer_array_sane>:
 8019b0c:	b138      	cbz	r0, 8019b1e <ai_buffer_array_sane+0x12>
 8019b0e:	6843      	ldr	r3, [r0, #4]
 8019b10:	b123      	cbz	r3, 8019b1c <ai_buffer_array_sane+0x10>
 8019b12:	8840      	ldrh	r0, [r0, #2]
 8019b14:	3000      	adds	r0, #0
 8019b16:	bf18      	it	ne
 8019b18:	2001      	movne	r0, #1
 8019b1a:	4770      	bx	lr
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	4770      	bx	lr

08019b20 <_ai_platform_acquire_crc>:
 8019b20:	2001      	movs	r0, #1
 8019b22:	4770      	bx	lr

08019b24 <_ai_platform_release_crc>:
 8019b24:	4770      	bx	lr
 8019b26:	bf00      	nop

08019b28 <ai_platform_get_weights_map>:
 8019b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b2a:	fab1 f381 	clz	r3, r1
 8019b2e:	095b      	lsrs	r3, r3, #5
 8019b30:	2800      	cmp	r0, #0
 8019b32:	bf08      	it	eq
 8019b34:	2301      	moveq	r3, #1
 8019b36:	2a00      	cmp	r2, #0
 8019b38:	bf14      	ite	ne
 8019b3a:	461c      	movne	r4, r3
 8019b3c:	2401      	moveq	r4, #1
 8019b3e:	b114      	cbz	r4, 8019b46 <ai_platform_get_weights_map+0x1e>
 8019b40:	2400      	movs	r4, #0
 8019b42:	4620      	mov	r0, r4
 8019b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b46:	4b22      	ldr	r3, [pc, #136]	; (8019bd0 <ai_platform_get_weights_map+0xa8>)
 8019b48:	6815      	ldr	r5, [r2, #0]
 8019b4a:	429d      	cmp	r5, r3
 8019b4c:	d00c      	beq.n	8019b68 <ai_platform_get_weights_map+0x40>
 8019b4e:	6855      	ldr	r5, [r2, #4]
 8019b50:	2d00      	cmp	r5, #0
 8019b52:	d0f5      	beq.n	8019b40 <ai_platform_get_weights_map+0x18>
 8019b54:	682e      	ldr	r6, [r5, #0]
 8019b56:	429e      	cmp	r6, r3
 8019b58:	d022      	beq.n	8019ba0 <ai_platform_get_weights_map+0x78>
 8019b5a:	f1a1 0401 	sub.w	r4, r1, #1
 8019b5e:	6005      	str	r5, [r0, #0]
 8019b60:	fab4 f484 	clz	r4, r4
 8019b64:	0964      	lsrs	r4, r4, #5
 8019b66:	e7ec      	b.n	8019b42 <ai_platform_get_weights_map+0x1a>
 8019b68:	4606      	mov	r6, r0
 8019b6a:	1d10      	adds	r0, r2, #4
 8019b6c:	4615      	mov	r5, r2
 8019b6e:	460f      	mov	r7, r1
 8019b70:	f7ff ffcc 	bl	8019b0c <ai_buffer_array_sane>
 8019b74:	2800      	cmp	r0, #0
 8019b76:	d0e3      	beq.n	8019b40 <ai_platform_get_weights_map+0x18>
 8019b78:	88eb      	ldrh	r3, [r5, #6]
 8019b7a:	429f      	cmp	r7, r3
 8019b7c:	d1e0      	bne.n	8019b40 <ai_platform_get_weights_map+0x18>
 8019b7e:	1f33      	subs	r3, r6, #4
 8019b80:	4620      	mov	r0, r4
 8019b82:	68aa      	ldr	r2, [r5, #8]
 8019b84:	4422      	add	r2, r4
 8019b86:	341c      	adds	r4, #28
 8019b88:	6852      	ldr	r2, [r2, #4]
 8019b8a:	b122      	cbz	r2, 8019b96 <ai_platform_get_weights_map+0x6e>
 8019b8c:	3001      	adds	r0, #1
 8019b8e:	f843 2f04 	str.w	r2, [r3, #4]!
 8019b92:	4287      	cmp	r7, r0
 8019b94:	d8f5      	bhi.n	8019b82 <ai_platform_get_weights_map+0x5a>
 8019b96:	1a3c      	subs	r4, r7, r0
 8019b98:	fab4 f484 	clz	r4, r4
 8019b9c:	0964      	lsrs	r4, r4, #5
 8019b9e:	e7d0      	b.n	8019b42 <ai_platform_get_weights_map+0x1a>
 8019ba0:	686b      	ldr	r3, [r5, #4]
 8019ba2:	3504      	adds	r5, #4
 8019ba4:	42b3      	cmp	r3, r6
 8019ba6:	d0cc      	beq.n	8019b42 <ai_platform_get_weights_map+0x1a>
 8019ba8:	3804      	subs	r0, #4
 8019baa:	462f      	mov	r7, r5
 8019bac:	4622      	mov	r2, r4
 8019bae:	e003      	b.n	8019bb8 <ai_platform_get_weights_map+0x90>
 8019bb0:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8019bb4:	42b3      	cmp	r3, r6
 8019bb6:	d0c4      	beq.n	8019b42 <ai_platform_get_weights_map+0x1a>
 8019bb8:	3201      	adds	r2, #1
 8019bba:	f840 3f04 	str.w	r3, [r0, #4]!
 8019bbe:	4291      	cmp	r1, r2
 8019bc0:	d1f6      	bne.n	8019bb0 <ai_platform_get_weights_map+0x88>
 8019bc2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8019bc6:	4b02      	ldr	r3, [pc, #8]	; (8019bd0 <ai_platform_get_weights_map+0xa8>)
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	bf08      	it	eq
 8019bcc:	2401      	moveq	r4, #1
 8019bce:	e7b8      	b.n	8019b42 <ai_platform_get_weights_map+0x1a>
 8019bd0:	a1facade 	.word	0xa1facade

08019bd4 <ai_platform_get_activations_map>:
 8019bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bd6:	fab1 f381 	clz	r3, r1
 8019bda:	095b      	lsrs	r3, r3, #5
 8019bdc:	2800      	cmp	r0, #0
 8019bde:	bf08      	it	eq
 8019be0:	2301      	moveq	r3, #1
 8019be2:	2a00      	cmp	r2, #0
 8019be4:	bf14      	ite	ne
 8019be6:	461c      	movne	r4, r3
 8019be8:	2401      	moveq	r4, #1
 8019bea:	b114      	cbz	r4, 8019bf2 <ai_platform_get_activations_map+0x1e>
 8019bec:	2400      	movs	r4, #0
 8019bee:	4620      	mov	r0, r4
 8019bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bf2:	4b23      	ldr	r3, [pc, #140]	; (8019c80 <ai_platform_get_activations_map+0xac>)
 8019bf4:	6815      	ldr	r5, [r2, #0]
 8019bf6:	429d      	cmp	r5, r3
 8019bf8:	d00c      	beq.n	8019c14 <ai_platform_get_activations_map+0x40>
 8019bfa:	6a15      	ldr	r5, [r2, #32]
 8019bfc:	2d00      	cmp	r5, #0
 8019bfe:	d0f5      	beq.n	8019bec <ai_platform_get_activations_map+0x18>
 8019c00:	682e      	ldr	r6, [r5, #0]
 8019c02:	429e      	cmp	r6, r3
 8019c04:	d023      	beq.n	8019c4e <ai_platform_get_activations_map+0x7a>
 8019c06:	f1a1 0401 	sub.w	r4, r1, #1
 8019c0a:	6005      	str	r5, [r0, #0]
 8019c0c:	fab4 f484 	clz	r4, r4
 8019c10:	0964      	lsrs	r4, r4, #5
 8019c12:	e7ec      	b.n	8019bee <ai_platform_get_activations_map+0x1a>
 8019c14:	4606      	mov	r6, r0
 8019c16:	f102 000c 	add.w	r0, r2, #12
 8019c1a:	4615      	mov	r5, r2
 8019c1c:	460f      	mov	r7, r1
 8019c1e:	f7ff ff75 	bl	8019b0c <ai_buffer_array_sane>
 8019c22:	2800      	cmp	r0, #0
 8019c24:	d0e2      	beq.n	8019bec <ai_platform_get_activations_map+0x18>
 8019c26:	89eb      	ldrh	r3, [r5, #14]
 8019c28:	429f      	cmp	r7, r3
 8019c2a:	d1df      	bne.n	8019bec <ai_platform_get_activations_map+0x18>
 8019c2c:	1f33      	subs	r3, r6, #4
 8019c2e:	4620      	mov	r0, r4
 8019c30:	692a      	ldr	r2, [r5, #16]
 8019c32:	4422      	add	r2, r4
 8019c34:	341c      	adds	r4, #28
 8019c36:	6852      	ldr	r2, [r2, #4]
 8019c38:	b122      	cbz	r2, 8019c44 <ai_platform_get_activations_map+0x70>
 8019c3a:	3001      	adds	r0, #1
 8019c3c:	f843 2f04 	str.w	r2, [r3, #4]!
 8019c40:	4287      	cmp	r7, r0
 8019c42:	d8f5      	bhi.n	8019c30 <ai_platform_get_activations_map+0x5c>
 8019c44:	1a3c      	subs	r4, r7, r0
 8019c46:	fab4 f484 	clz	r4, r4
 8019c4a:	0964      	lsrs	r4, r4, #5
 8019c4c:	e7cf      	b.n	8019bee <ai_platform_get_activations_map+0x1a>
 8019c4e:	686b      	ldr	r3, [r5, #4]
 8019c50:	3504      	adds	r5, #4
 8019c52:	42b3      	cmp	r3, r6
 8019c54:	d0cb      	beq.n	8019bee <ai_platform_get_activations_map+0x1a>
 8019c56:	3804      	subs	r0, #4
 8019c58:	462f      	mov	r7, r5
 8019c5a:	4622      	mov	r2, r4
 8019c5c:	e003      	b.n	8019c66 <ai_platform_get_activations_map+0x92>
 8019c5e:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8019c62:	42b3      	cmp	r3, r6
 8019c64:	d0c3      	beq.n	8019bee <ai_platform_get_activations_map+0x1a>
 8019c66:	3201      	adds	r2, #1
 8019c68:	f840 3f04 	str.w	r3, [r0, #4]!
 8019c6c:	4291      	cmp	r1, r2
 8019c6e:	d1f6      	bne.n	8019c5e <ai_platform_get_activations_map+0x8a>
 8019c70:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8019c74:	4b02      	ldr	r3, [pc, #8]	; (8019c80 <ai_platform_get_activations_map+0xac>)
 8019c76:	429a      	cmp	r2, r3
 8019c78:	bf08      	it	eq
 8019c7a:	2401      	moveq	r4, #1
 8019c7c:	e7b7      	b.n	8019bee <ai_platform_get_activations_map+0x1a>
 8019c7e:	bf00      	nop
 8019c80:	a1facade 	.word	0xa1facade

08019c84 <ai_platform_runtime_get_revision>:
 8019c84:	4a34      	ldr	r2, [pc, #208]	; (8019d58 <ai_platform_runtime_get_revision+0xd4>)
 8019c86:	b508      	push	{r3, lr}
 8019c88:	6813      	ldr	r3, [r2, #0]
 8019c8a:	f023 0301 	bic.w	r3, r3, #1
 8019c8e:	6013      	str	r3, [r2, #0]
 8019c90:	f7ff ff46 	bl	8019b20 <_ai_platform_acquire_crc>
 8019c94:	4b31      	ldr	r3, [pc, #196]	; (8019d5c <ai_platform_runtime_get_revision+0xd8>)
 8019c96:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019ca0:	189a      	adds	r2, r3, r2
 8019ca2:	2a01      	cmp	r2, #1
 8019ca4:	d91b      	bls.n	8019cde <ai_platform_runtime_get_revision+0x5a>
 8019ca6:	f240 4249 	movw	r2, #1097	; 0x449
 8019caa:	4293      	cmp	r3, r2
 8019cac:	d017      	beq.n	8019cde <ai_platform_runtime_get_revision+0x5a>
 8019cae:	4b2c      	ldr	r3, [pc, #176]	; (8019d60 <ai_platform_runtime_get_revision+0xdc>)
 8019cb0:	681a      	ldr	r2, [r3, #0]
 8019cb2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019cb6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8019cba:	d01f      	beq.n	8019cfc <ai_platform_runtime_get_revision+0x78>
 8019cbc:	681a      	ldr	r2, [r3, #0]
 8019cbe:	f240 4183 	movw	r1, #1155	; 0x483
 8019cc2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019cc6:	428a      	cmp	r2, r1
 8019cc8:	d036      	beq.n	8019d38 <ai_platform_runtime_get_revision+0xb4>
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019cd0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8019cd4:	d021      	beq.n	8019d1a <ai_platform_runtime_get_revision+0x96>
 8019cd6:	f7ff ff25 	bl	8019b24 <_ai_platform_release_crc>
 8019cda:	4822      	ldr	r0, [pc, #136]	; (8019d64 <ai_platform_runtime_get_revision+0xe0>)
 8019cdc:	bd08      	pop	{r3, pc}
 8019cde:	4b22      	ldr	r3, [pc, #136]	; (8019d68 <ai_platform_runtime_get_revision+0xe4>)
 8019ce0:	2201      	movs	r2, #1
 8019ce2:	4619      	mov	r1, r3
 8019ce4:	601a      	str	r2, [r3, #0]
 8019ce6:	680b      	ldr	r3, [r1, #0]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d1fc      	bne.n	8019ce6 <ai_platform_runtime_get_revision+0x62>
 8019cec:	4b1f      	ldr	r3, [pc, #124]	; (8019d6c <ai_platform_runtime_get_revision+0xe8>)
 8019cee:	4920      	ldr	r1, [pc, #128]	; (8019d70 <ai_platform_runtime_get_revision+0xec>)
 8019cf0:	4a20      	ldr	r2, [pc, #128]	; (8019d74 <ai_platform_runtime_get_revision+0xf0>)
 8019cf2:	6019      	str	r1, [r3, #0]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	4293      	cmp	r3, r2
 8019cf8:	d0ed      	beq.n	8019cd6 <ai_platform_runtime_get_revision+0x52>
 8019cfa:	e7fe      	b.n	8019cfa <ai_platform_runtime_get_revision+0x76>
 8019cfc:	4b1e      	ldr	r3, [pc, #120]	; (8019d78 <ai_platform_runtime_get_revision+0xf4>)
 8019cfe:	2201      	movs	r2, #1
 8019d00:	4619      	mov	r1, r3
 8019d02:	601a      	str	r2, [r3, #0]
 8019d04:	680b      	ldr	r3, [r1, #0]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1fc      	bne.n	8019d04 <ai_platform_runtime_get_revision+0x80>
 8019d0a:	4b1c      	ldr	r3, [pc, #112]	; (8019d7c <ai_platform_runtime_get_revision+0xf8>)
 8019d0c:	4918      	ldr	r1, [pc, #96]	; (8019d70 <ai_platform_runtime_get_revision+0xec>)
 8019d0e:	4a19      	ldr	r2, [pc, #100]	; (8019d74 <ai_platform_runtime_get_revision+0xf0>)
 8019d10:	6019      	str	r1, [r3, #0]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	4293      	cmp	r3, r2
 8019d16:	d0de      	beq.n	8019cd6 <ai_platform_runtime_get_revision+0x52>
 8019d18:	e7fe      	b.n	8019d18 <ai_platform_runtime_get_revision+0x94>
 8019d1a:	4b13      	ldr	r3, [pc, #76]	; (8019d68 <ai_platform_runtime_get_revision+0xe4>)
 8019d1c:	2201      	movs	r2, #1
 8019d1e:	4619      	mov	r1, r3
 8019d20:	601a      	str	r2, [r3, #0]
 8019d22:	680b      	ldr	r3, [r1, #0]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d1fc      	bne.n	8019d22 <ai_platform_runtime_get_revision+0x9e>
 8019d28:	4b10      	ldr	r3, [pc, #64]	; (8019d6c <ai_platform_runtime_get_revision+0xe8>)
 8019d2a:	4911      	ldr	r1, [pc, #68]	; (8019d70 <ai_platform_runtime_get_revision+0xec>)
 8019d2c:	4a11      	ldr	r2, [pc, #68]	; (8019d74 <ai_platform_runtime_get_revision+0xf0>)
 8019d2e:	6019      	str	r1, [r3, #0]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4293      	cmp	r3, r2
 8019d34:	d0cf      	beq.n	8019cd6 <ai_platform_runtime_get_revision+0x52>
 8019d36:	e7fe      	b.n	8019d36 <ai_platform_runtime_get_revision+0xb2>
 8019d38:	4b0f      	ldr	r3, [pc, #60]	; (8019d78 <ai_platform_runtime_get_revision+0xf4>)
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	4619      	mov	r1, r3
 8019d3e:	601a      	str	r2, [r3, #0]
 8019d40:	680b      	ldr	r3, [r1, #0]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d1fc      	bne.n	8019d40 <ai_platform_runtime_get_revision+0xbc>
 8019d46:	4b0d      	ldr	r3, [pc, #52]	; (8019d7c <ai_platform_runtime_get_revision+0xf8>)
 8019d48:	4909      	ldr	r1, [pc, #36]	; (8019d70 <ai_platform_runtime_get_revision+0xec>)
 8019d4a:	4a0a      	ldr	r2, [pc, #40]	; (8019d74 <ai_platform_runtime_get_revision+0xf0>)
 8019d4c:	6019      	str	r1, [r3, #0]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	4293      	cmp	r3, r2
 8019d52:	d0c0      	beq.n	8019cd6 <ai_platform_runtime_get_revision+0x52>
 8019d54:	e7fe      	b.n	8019d54 <ai_platform_runtime_get_revision+0xd0>
 8019d56:	bf00      	nop
 8019d58:	e0002000 	.word	0xe0002000
 8019d5c:	e0042000 	.word	0xe0042000
 8019d60:	5c001000 	.word	0x5c001000
 8019d64:	0802c44c 	.word	0x0802c44c
 8019d68:	40023008 	.word	0x40023008
 8019d6c:	40023000 	.word	0x40023000
 8019d70:	f407a5c2 	.word	0xf407a5c2
 8019d74:	b5e8b5cd 	.word	0xb5e8b5cd
 8019d78:	58024c08 	.word	0x58024c08
 8019d7c:	58024c00 	.word	0x58024c00

08019d80 <ai_platform_runtime_get_version>:
 8019d80:	4a3d      	ldr	r2, [pc, #244]	; (8019e78 <ai_platform_runtime_get_version+0xf8>)
 8019d82:	b510      	push	{r4, lr}
 8019d84:	6813      	ldr	r3, [r2, #0]
 8019d86:	b082      	sub	sp, #8
 8019d88:	f023 0301 	bic.w	r3, r3, #1
 8019d8c:	6013      	str	r3, [r2, #0]
 8019d8e:	f7ff fec7 	bl	8019b20 <_ai_platform_acquire_crc>
 8019d92:	4b3a      	ldr	r3, [pc, #232]	; (8019e7c <ai_platform_runtime_get_version+0xfc>)
 8019d94:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019d9e:	189a      	adds	r2, r3, r2
 8019da0:	2a01      	cmp	r2, #1
 8019da2:	d92c      	bls.n	8019dfe <ai_platform_runtime_get_version+0x7e>
 8019da4:	f240 4249 	movw	r2, #1097	; 0x449
 8019da8:	4293      	cmp	r3, r2
 8019daa:	d028      	beq.n	8019dfe <ai_platform_runtime_get_version+0x7e>
 8019dac:	4b34      	ldr	r3, [pc, #208]	; (8019e80 <ai_platform_runtime_get_version+0x100>)
 8019dae:	681a      	ldr	r2, [r3, #0]
 8019db0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019db4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8019db8:	d030      	beq.n	8019e1c <ai_platform_runtime_get_version+0x9c>
 8019dba:	681a      	ldr	r2, [r3, #0]
 8019dbc:	f240 4183 	movw	r1, #1155	; 0x483
 8019dc0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019dc4:	428a      	cmp	r2, r1
 8019dc6:	d047      	beq.n	8019e58 <ai_platform_runtime_get_version+0xd8>
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019dce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8019dd2:	d032      	beq.n	8019e3a <ai_platform_runtime_get_version+0xba>
 8019dd4:	f7ff fea6 	bl	8019b24 <_ai_platform_release_crc>
 8019dd8:	4b2a      	ldr	r3, [pc, #168]	; (8019e84 <ai_platform_runtime_get_version+0x104>)
 8019dda:	2000      	movs	r0, #0
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	b2dc      	uxtb	r4, r3
 8019de0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019de4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019de8:	0e1b      	lsrs	r3, r3, #24
 8019dea:	f364 0007 	bfi	r0, r4, #0, #8
 8019dee:	f361 200f 	bfi	r0, r1, #8, #8
 8019df2:	f362 4017 	bfi	r0, r2, #16, #8
 8019df6:	f363 601f 	bfi	r0, r3, #24, #8
 8019dfa:	b002      	add	sp, #8
 8019dfc:	bd10      	pop	{r4, pc}
 8019dfe:	4b22      	ldr	r3, [pc, #136]	; (8019e88 <ai_platform_runtime_get_version+0x108>)
 8019e00:	2201      	movs	r2, #1
 8019e02:	4619      	mov	r1, r3
 8019e04:	601a      	str	r2, [r3, #0]
 8019e06:	680b      	ldr	r3, [r1, #0]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d1fc      	bne.n	8019e06 <ai_platform_runtime_get_version+0x86>
 8019e0c:	4b1f      	ldr	r3, [pc, #124]	; (8019e8c <ai_platform_runtime_get_version+0x10c>)
 8019e0e:	4920      	ldr	r1, [pc, #128]	; (8019e90 <ai_platform_runtime_get_version+0x110>)
 8019e10:	4a20      	ldr	r2, [pc, #128]	; (8019e94 <ai_platform_runtime_get_version+0x114>)
 8019e12:	6019      	str	r1, [r3, #0]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	4293      	cmp	r3, r2
 8019e18:	d0dc      	beq.n	8019dd4 <ai_platform_runtime_get_version+0x54>
 8019e1a:	e7fe      	b.n	8019e1a <ai_platform_runtime_get_version+0x9a>
 8019e1c:	4b1e      	ldr	r3, [pc, #120]	; (8019e98 <ai_platform_runtime_get_version+0x118>)
 8019e1e:	2201      	movs	r2, #1
 8019e20:	4619      	mov	r1, r3
 8019e22:	601a      	str	r2, [r3, #0]
 8019e24:	680b      	ldr	r3, [r1, #0]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d1fc      	bne.n	8019e24 <ai_platform_runtime_get_version+0xa4>
 8019e2a:	4b1c      	ldr	r3, [pc, #112]	; (8019e9c <ai_platform_runtime_get_version+0x11c>)
 8019e2c:	4918      	ldr	r1, [pc, #96]	; (8019e90 <ai_platform_runtime_get_version+0x110>)
 8019e2e:	4a19      	ldr	r2, [pc, #100]	; (8019e94 <ai_platform_runtime_get_version+0x114>)
 8019e30:	6019      	str	r1, [r3, #0]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	4293      	cmp	r3, r2
 8019e36:	d0cd      	beq.n	8019dd4 <ai_platform_runtime_get_version+0x54>
 8019e38:	e7fe      	b.n	8019e38 <ai_platform_runtime_get_version+0xb8>
 8019e3a:	4b13      	ldr	r3, [pc, #76]	; (8019e88 <ai_platform_runtime_get_version+0x108>)
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	4619      	mov	r1, r3
 8019e40:	601a      	str	r2, [r3, #0]
 8019e42:	680b      	ldr	r3, [r1, #0]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d1fc      	bne.n	8019e42 <ai_platform_runtime_get_version+0xc2>
 8019e48:	4b10      	ldr	r3, [pc, #64]	; (8019e8c <ai_platform_runtime_get_version+0x10c>)
 8019e4a:	4911      	ldr	r1, [pc, #68]	; (8019e90 <ai_platform_runtime_get_version+0x110>)
 8019e4c:	4a11      	ldr	r2, [pc, #68]	; (8019e94 <ai_platform_runtime_get_version+0x114>)
 8019e4e:	6019      	str	r1, [r3, #0]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	4293      	cmp	r3, r2
 8019e54:	d0be      	beq.n	8019dd4 <ai_platform_runtime_get_version+0x54>
 8019e56:	e7fe      	b.n	8019e56 <ai_platform_runtime_get_version+0xd6>
 8019e58:	4b0f      	ldr	r3, [pc, #60]	; (8019e98 <ai_platform_runtime_get_version+0x118>)
 8019e5a:	2201      	movs	r2, #1
 8019e5c:	4619      	mov	r1, r3
 8019e5e:	601a      	str	r2, [r3, #0]
 8019e60:	680b      	ldr	r3, [r1, #0]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d1fc      	bne.n	8019e60 <ai_platform_runtime_get_version+0xe0>
 8019e66:	4b0d      	ldr	r3, [pc, #52]	; (8019e9c <ai_platform_runtime_get_version+0x11c>)
 8019e68:	4909      	ldr	r1, [pc, #36]	; (8019e90 <ai_platform_runtime_get_version+0x110>)
 8019e6a:	4a0a      	ldr	r2, [pc, #40]	; (8019e94 <ai_platform_runtime_get_version+0x114>)
 8019e6c:	6019      	str	r1, [r3, #0]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	4293      	cmp	r3, r2
 8019e72:	d0af      	beq.n	8019dd4 <ai_platform_runtime_get_version+0x54>
 8019e74:	e7fe      	b.n	8019e74 <ai_platform_runtime_get_version+0xf4>
 8019e76:	bf00      	nop
 8019e78:	e0002000 	.word	0xe0002000
 8019e7c:	e0042000 	.word	0xe0042000
 8019e80:	5c001000 	.word	0x5c001000
 8019e84:	080776b4 	.word	0x080776b4
 8019e88:	40023008 	.word	0x40023008
 8019e8c:	40023000 	.word	0x40023000
 8019e90:	f407a5c2 	.word	0xf407a5c2
 8019e94:	b5e8b5cd 	.word	0xb5e8b5cd
 8019e98:	58024c08 	.word	0x58024c08
 8019e9c:	58024c00 	.word	0x58024c00

08019ea0 <ai_platform_api_get_version>:
 8019ea0:	4a3d      	ldr	r2, [pc, #244]	; (8019f98 <ai_platform_api_get_version+0xf8>)
 8019ea2:	b510      	push	{r4, lr}
 8019ea4:	6813      	ldr	r3, [r2, #0]
 8019ea6:	b082      	sub	sp, #8
 8019ea8:	f023 0301 	bic.w	r3, r3, #1
 8019eac:	6013      	str	r3, [r2, #0]
 8019eae:	f7ff fe37 	bl	8019b20 <_ai_platform_acquire_crc>
 8019eb2:	4b3a      	ldr	r3, [pc, #232]	; (8019f9c <ai_platform_api_get_version+0xfc>)
 8019eb4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019ebe:	189a      	adds	r2, r3, r2
 8019ec0:	2a01      	cmp	r2, #1
 8019ec2:	d92c      	bls.n	8019f1e <ai_platform_api_get_version+0x7e>
 8019ec4:	f240 4249 	movw	r2, #1097	; 0x449
 8019ec8:	4293      	cmp	r3, r2
 8019eca:	d028      	beq.n	8019f1e <ai_platform_api_get_version+0x7e>
 8019ecc:	4b34      	ldr	r3, [pc, #208]	; (8019fa0 <ai_platform_api_get_version+0x100>)
 8019ece:	681a      	ldr	r2, [r3, #0]
 8019ed0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019ed4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8019ed8:	d030      	beq.n	8019f3c <ai_platform_api_get_version+0x9c>
 8019eda:	681a      	ldr	r2, [r3, #0]
 8019edc:	f240 4183 	movw	r1, #1155	; 0x483
 8019ee0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019ee4:	428a      	cmp	r2, r1
 8019ee6:	d047      	beq.n	8019f78 <ai_platform_api_get_version+0xd8>
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019eee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8019ef2:	d032      	beq.n	8019f5a <ai_platform_api_get_version+0xba>
 8019ef4:	f7ff fe16 	bl	8019b24 <_ai_platform_release_crc>
 8019ef8:	4b2a      	ldr	r3, [pc, #168]	; (8019fa4 <ai_platform_api_get_version+0x104>)
 8019efa:	2000      	movs	r0, #0
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	b2dc      	uxtb	r4, r3
 8019f00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019f04:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019f08:	0e1b      	lsrs	r3, r3, #24
 8019f0a:	f364 0007 	bfi	r0, r4, #0, #8
 8019f0e:	f361 200f 	bfi	r0, r1, #8, #8
 8019f12:	f362 4017 	bfi	r0, r2, #16, #8
 8019f16:	f363 601f 	bfi	r0, r3, #24, #8
 8019f1a:	b002      	add	sp, #8
 8019f1c:	bd10      	pop	{r4, pc}
 8019f1e:	4b22      	ldr	r3, [pc, #136]	; (8019fa8 <ai_platform_api_get_version+0x108>)
 8019f20:	2201      	movs	r2, #1
 8019f22:	4619      	mov	r1, r3
 8019f24:	601a      	str	r2, [r3, #0]
 8019f26:	680b      	ldr	r3, [r1, #0]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d1fc      	bne.n	8019f26 <ai_platform_api_get_version+0x86>
 8019f2c:	4b1f      	ldr	r3, [pc, #124]	; (8019fac <ai_platform_api_get_version+0x10c>)
 8019f2e:	4920      	ldr	r1, [pc, #128]	; (8019fb0 <ai_platform_api_get_version+0x110>)
 8019f30:	4a20      	ldr	r2, [pc, #128]	; (8019fb4 <ai_platform_api_get_version+0x114>)
 8019f32:	6019      	str	r1, [r3, #0]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	4293      	cmp	r3, r2
 8019f38:	d0dc      	beq.n	8019ef4 <ai_platform_api_get_version+0x54>
 8019f3a:	e7fe      	b.n	8019f3a <ai_platform_api_get_version+0x9a>
 8019f3c:	4b1e      	ldr	r3, [pc, #120]	; (8019fb8 <ai_platform_api_get_version+0x118>)
 8019f3e:	2201      	movs	r2, #1
 8019f40:	4619      	mov	r1, r3
 8019f42:	601a      	str	r2, [r3, #0]
 8019f44:	680b      	ldr	r3, [r1, #0]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d1fc      	bne.n	8019f44 <ai_platform_api_get_version+0xa4>
 8019f4a:	4b1c      	ldr	r3, [pc, #112]	; (8019fbc <ai_platform_api_get_version+0x11c>)
 8019f4c:	4918      	ldr	r1, [pc, #96]	; (8019fb0 <ai_platform_api_get_version+0x110>)
 8019f4e:	4a19      	ldr	r2, [pc, #100]	; (8019fb4 <ai_platform_api_get_version+0x114>)
 8019f50:	6019      	str	r1, [r3, #0]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	4293      	cmp	r3, r2
 8019f56:	d0cd      	beq.n	8019ef4 <ai_platform_api_get_version+0x54>
 8019f58:	e7fe      	b.n	8019f58 <ai_platform_api_get_version+0xb8>
 8019f5a:	4b13      	ldr	r3, [pc, #76]	; (8019fa8 <ai_platform_api_get_version+0x108>)
 8019f5c:	2201      	movs	r2, #1
 8019f5e:	4619      	mov	r1, r3
 8019f60:	601a      	str	r2, [r3, #0]
 8019f62:	680b      	ldr	r3, [r1, #0]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d1fc      	bne.n	8019f62 <ai_platform_api_get_version+0xc2>
 8019f68:	4b10      	ldr	r3, [pc, #64]	; (8019fac <ai_platform_api_get_version+0x10c>)
 8019f6a:	4911      	ldr	r1, [pc, #68]	; (8019fb0 <ai_platform_api_get_version+0x110>)
 8019f6c:	4a11      	ldr	r2, [pc, #68]	; (8019fb4 <ai_platform_api_get_version+0x114>)
 8019f6e:	6019      	str	r1, [r3, #0]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	4293      	cmp	r3, r2
 8019f74:	d0be      	beq.n	8019ef4 <ai_platform_api_get_version+0x54>
 8019f76:	e7fe      	b.n	8019f76 <ai_platform_api_get_version+0xd6>
 8019f78:	4b0f      	ldr	r3, [pc, #60]	; (8019fb8 <ai_platform_api_get_version+0x118>)
 8019f7a:	2201      	movs	r2, #1
 8019f7c:	4619      	mov	r1, r3
 8019f7e:	601a      	str	r2, [r3, #0]
 8019f80:	680b      	ldr	r3, [r1, #0]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d1fc      	bne.n	8019f80 <ai_platform_api_get_version+0xe0>
 8019f86:	4b0d      	ldr	r3, [pc, #52]	; (8019fbc <ai_platform_api_get_version+0x11c>)
 8019f88:	4909      	ldr	r1, [pc, #36]	; (8019fb0 <ai_platform_api_get_version+0x110>)
 8019f8a:	4a0a      	ldr	r2, [pc, #40]	; (8019fb4 <ai_platform_api_get_version+0x114>)
 8019f8c:	6019      	str	r1, [r3, #0]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	4293      	cmp	r3, r2
 8019f92:	d0af      	beq.n	8019ef4 <ai_platform_api_get_version+0x54>
 8019f94:	e7fe      	b.n	8019f94 <ai_platform_api_get_version+0xf4>
 8019f96:	bf00      	nop
 8019f98:	e0002000 	.word	0xe0002000
 8019f9c:	e0042000 	.word	0xe0042000
 8019fa0:	5c001000 	.word	0x5c001000
 8019fa4:	080776b8 	.word	0x080776b8
 8019fa8:	40023008 	.word	0x40023008
 8019fac:	40023000 	.word	0x40023000
 8019fb0:	f407a5c2 	.word	0xf407a5c2
 8019fb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8019fb8:	58024c08 	.word	0x58024c08
 8019fbc:	58024c00 	.word	0x58024c00

08019fc0 <ai_platform_interface_api_get_version>:
 8019fc0:	4a3d      	ldr	r2, [pc, #244]	; (801a0b8 <ai_platform_interface_api_get_version+0xf8>)
 8019fc2:	b510      	push	{r4, lr}
 8019fc4:	6813      	ldr	r3, [r2, #0]
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	f023 0301 	bic.w	r3, r3, #1
 8019fcc:	6013      	str	r3, [r2, #0]
 8019fce:	f7ff fda7 	bl	8019b20 <_ai_platform_acquire_crc>
 8019fd2:	4b3a      	ldr	r3, [pc, #232]	; (801a0bc <ai_platform_interface_api_get_version+0xfc>)
 8019fd4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fde:	189a      	adds	r2, r3, r2
 8019fe0:	2a01      	cmp	r2, #1
 8019fe2:	d92c      	bls.n	801a03e <ai_platform_interface_api_get_version+0x7e>
 8019fe4:	f240 4249 	movw	r2, #1097	; 0x449
 8019fe8:	4293      	cmp	r3, r2
 8019fea:	d028      	beq.n	801a03e <ai_platform_interface_api_get_version+0x7e>
 8019fec:	4b34      	ldr	r3, [pc, #208]	; (801a0c0 <ai_platform_interface_api_get_version+0x100>)
 8019fee:	681a      	ldr	r2, [r3, #0]
 8019ff0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019ff4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8019ff8:	d030      	beq.n	801a05c <ai_platform_interface_api_get_version+0x9c>
 8019ffa:	681a      	ldr	r2, [r3, #0]
 8019ffc:	f240 4183 	movw	r1, #1155	; 0x483
 801a000:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a004:	428a      	cmp	r2, r1
 801a006:	d047      	beq.n	801a098 <ai_platform_interface_api_get_version+0xd8>
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a00e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a012:	d032      	beq.n	801a07a <ai_platform_interface_api_get_version+0xba>
 801a014:	f7ff fd86 	bl	8019b24 <_ai_platform_release_crc>
 801a018:	4b2a      	ldr	r3, [pc, #168]	; (801a0c4 <ai_platform_interface_api_get_version+0x104>)
 801a01a:	2000      	movs	r0, #0
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	b2dc      	uxtb	r4, r3
 801a020:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a024:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a028:	0e1b      	lsrs	r3, r3, #24
 801a02a:	f364 0007 	bfi	r0, r4, #0, #8
 801a02e:	f361 200f 	bfi	r0, r1, #8, #8
 801a032:	f362 4017 	bfi	r0, r2, #16, #8
 801a036:	f363 601f 	bfi	r0, r3, #24, #8
 801a03a:	b002      	add	sp, #8
 801a03c:	bd10      	pop	{r4, pc}
 801a03e:	4b22      	ldr	r3, [pc, #136]	; (801a0c8 <ai_platform_interface_api_get_version+0x108>)
 801a040:	2201      	movs	r2, #1
 801a042:	4619      	mov	r1, r3
 801a044:	601a      	str	r2, [r3, #0]
 801a046:	680b      	ldr	r3, [r1, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d1fc      	bne.n	801a046 <ai_platform_interface_api_get_version+0x86>
 801a04c:	4b1f      	ldr	r3, [pc, #124]	; (801a0cc <ai_platform_interface_api_get_version+0x10c>)
 801a04e:	4920      	ldr	r1, [pc, #128]	; (801a0d0 <ai_platform_interface_api_get_version+0x110>)
 801a050:	4a20      	ldr	r2, [pc, #128]	; (801a0d4 <ai_platform_interface_api_get_version+0x114>)
 801a052:	6019      	str	r1, [r3, #0]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	4293      	cmp	r3, r2
 801a058:	d0dc      	beq.n	801a014 <ai_platform_interface_api_get_version+0x54>
 801a05a:	e7fe      	b.n	801a05a <ai_platform_interface_api_get_version+0x9a>
 801a05c:	4b1e      	ldr	r3, [pc, #120]	; (801a0d8 <ai_platform_interface_api_get_version+0x118>)
 801a05e:	2201      	movs	r2, #1
 801a060:	4619      	mov	r1, r3
 801a062:	601a      	str	r2, [r3, #0]
 801a064:	680b      	ldr	r3, [r1, #0]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d1fc      	bne.n	801a064 <ai_platform_interface_api_get_version+0xa4>
 801a06a:	4b1c      	ldr	r3, [pc, #112]	; (801a0dc <ai_platform_interface_api_get_version+0x11c>)
 801a06c:	4918      	ldr	r1, [pc, #96]	; (801a0d0 <ai_platform_interface_api_get_version+0x110>)
 801a06e:	4a19      	ldr	r2, [pc, #100]	; (801a0d4 <ai_platform_interface_api_get_version+0x114>)
 801a070:	6019      	str	r1, [r3, #0]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	4293      	cmp	r3, r2
 801a076:	d0cd      	beq.n	801a014 <ai_platform_interface_api_get_version+0x54>
 801a078:	e7fe      	b.n	801a078 <ai_platform_interface_api_get_version+0xb8>
 801a07a:	4b13      	ldr	r3, [pc, #76]	; (801a0c8 <ai_platform_interface_api_get_version+0x108>)
 801a07c:	2201      	movs	r2, #1
 801a07e:	4619      	mov	r1, r3
 801a080:	601a      	str	r2, [r3, #0]
 801a082:	680b      	ldr	r3, [r1, #0]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d1fc      	bne.n	801a082 <ai_platform_interface_api_get_version+0xc2>
 801a088:	4b10      	ldr	r3, [pc, #64]	; (801a0cc <ai_platform_interface_api_get_version+0x10c>)
 801a08a:	4911      	ldr	r1, [pc, #68]	; (801a0d0 <ai_platform_interface_api_get_version+0x110>)
 801a08c:	4a11      	ldr	r2, [pc, #68]	; (801a0d4 <ai_platform_interface_api_get_version+0x114>)
 801a08e:	6019      	str	r1, [r3, #0]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	4293      	cmp	r3, r2
 801a094:	d0be      	beq.n	801a014 <ai_platform_interface_api_get_version+0x54>
 801a096:	e7fe      	b.n	801a096 <ai_platform_interface_api_get_version+0xd6>
 801a098:	4b0f      	ldr	r3, [pc, #60]	; (801a0d8 <ai_platform_interface_api_get_version+0x118>)
 801a09a:	2201      	movs	r2, #1
 801a09c:	4619      	mov	r1, r3
 801a09e:	601a      	str	r2, [r3, #0]
 801a0a0:	680b      	ldr	r3, [r1, #0]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d1fc      	bne.n	801a0a0 <ai_platform_interface_api_get_version+0xe0>
 801a0a6:	4b0d      	ldr	r3, [pc, #52]	; (801a0dc <ai_platform_interface_api_get_version+0x11c>)
 801a0a8:	4909      	ldr	r1, [pc, #36]	; (801a0d0 <ai_platform_interface_api_get_version+0x110>)
 801a0aa:	4a0a      	ldr	r2, [pc, #40]	; (801a0d4 <ai_platform_interface_api_get_version+0x114>)
 801a0ac:	6019      	str	r1, [r3, #0]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d0af      	beq.n	801a014 <ai_platform_interface_api_get_version+0x54>
 801a0b4:	e7fe      	b.n	801a0b4 <ai_platform_interface_api_get_version+0xf4>
 801a0b6:	bf00      	nop
 801a0b8:	e0002000 	.word	0xe0002000
 801a0bc:	e0042000 	.word	0xe0042000
 801a0c0:	5c001000 	.word	0x5c001000
 801a0c4:	080776bc 	.word	0x080776bc
 801a0c8:	40023008 	.word	0x40023008
 801a0cc:	40023000 	.word	0x40023000
 801a0d0:	f407a5c2 	.word	0xf407a5c2
 801a0d4:	b5e8b5cd 	.word	0xb5e8b5cd
 801a0d8:	58024c08 	.word	0x58024c08
 801a0dc:	58024c00 	.word	0x58024c00

0801a0e0 <ai_platform_context_acquire>:
 801a0e0:	b510      	push	{r4, lr}
 801a0e2:	4604      	mov	r4, r0
 801a0e4:	b120      	cbz	r0, 801a0f0 <ai_platform_context_acquire+0x10>
 801a0e6:	4b36      	ldr	r3, [pc, #216]	; (801a1c0 <ai_platform_context_acquire+0xe0>)
 801a0e8:	6802      	ldr	r2, [r0, #0]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	bf18      	it	ne
 801a0ee:	2400      	movne	r4, #0
 801a0f0:	4a34      	ldr	r2, [pc, #208]	; (801a1c4 <ai_platform_context_acquire+0xe4>)
 801a0f2:	6813      	ldr	r3, [r2, #0]
 801a0f4:	f023 0301 	bic.w	r3, r3, #1
 801a0f8:	6013      	str	r3, [r2, #0]
 801a0fa:	f7ff fd11 	bl	8019b20 <_ai_platform_acquire_crc>
 801a0fe:	4b32      	ldr	r3, [pc, #200]	; (801a1c8 <ai_platform_context_acquire+0xe8>)
 801a100:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a10a:	189a      	adds	r2, r3, r2
 801a10c:	2a01      	cmp	r2, #1
 801a10e:	d91b      	bls.n	801a148 <ai_platform_context_acquire+0x68>
 801a110:	f240 4249 	movw	r2, #1097	; 0x449
 801a114:	4293      	cmp	r3, r2
 801a116:	d017      	beq.n	801a148 <ai_platform_context_acquire+0x68>
 801a118:	4b2c      	ldr	r3, [pc, #176]	; (801a1cc <ai_platform_context_acquire+0xec>)
 801a11a:	681a      	ldr	r2, [r3, #0]
 801a11c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a120:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a124:	d01f      	beq.n	801a166 <ai_platform_context_acquire+0x86>
 801a126:	681a      	ldr	r2, [r3, #0]
 801a128:	f240 4183 	movw	r1, #1155	; 0x483
 801a12c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a130:	428a      	cmp	r2, r1
 801a132:	d036      	beq.n	801a1a2 <ai_platform_context_acquire+0xc2>
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a13a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a13e:	d021      	beq.n	801a184 <ai_platform_context_acquire+0xa4>
 801a140:	f7ff fcf0 	bl	8019b24 <_ai_platform_release_crc>
 801a144:	4620      	mov	r0, r4
 801a146:	bd10      	pop	{r4, pc}
 801a148:	4b21      	ldr	r3, [pc, #132]	; (801a1d0 <ai_platform_context_acquire+0xf0>)
 801a14a:	2201      	movs	r2, #1
 801a14c:	4619      	mov	r1, r3
 801a14e:	601a      	str	r2, [r3, #0]
 801a150:	680b      	ldr	r3, [r1, #0]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d1fc      	bne.n	801a150 <ai_platform_context_acquire+0x70>
 801a156:	4b1f      	ldr	r3, [pc, #124]	; (801a1d4 <ai_platform_context_acquire+0xf4>)
 801a158:	491f      	ldr	r1, [pc, #124]	; (801a1d8 <ai_platform_context_acquire+0xf8>)
 801a15a:	4a20      	ldr	r2, [pc, #128]	; (801a1dc <ai_platform_context_acquire+0xfc>)
 801a15c:	6019      	str	r1, [r3, #0]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	4293      	cmp	r3, r2
 801a162:	d0ed      	beq.n	801a140 <ai_platform_context_acquire+0x60>
 801a164:	e7fe      	b.n	801a164 <ai_platform_context_acquire+0x84>
 801a166:	4b1e      	ldr	r3, [pc, #120]	; (801a1e0 <ai_platform_context_acquire+0x100>)
 801a168:	2201      	movs	r2, #1
 801a16a:	4619      	mov	r1, r3
 801a16c:	601a      	str	r2, [r3, #0]
 801a16e:	680b      	ldr	r3, [r1, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d1fc      	bne.n	801a16e <ai_platform_context_acquire+0x8e>
 801a174:	4b1b      	ldr	r3, [pc, #108]	; (801a1e4 <ai_platform_context_acquire+0x104>)
 801a176:	4918      	ldr	r1, [pc, #96]	; (801a1d8 <ai_platform_context_acquire+0xf8>)
 801a178:	4a18      	ldr	r2, [pc, #96]	; (801a1dc <ai_platform_context_acquire+0xfc>)
 801a17a:	6019      	str	r1, [r3, #0]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	4293      	cmp	r3, r2
 801a180:	d0de      	beq.n	801a140 <ai_platform_context_acquire+0x60>
 801a182:	e7fe      	b.n	801a182 <ai_platform_context_acquire+0xa2>
 801a184:	4b12      	ldr	r3, [pc, #72]	; (801a1d0 <ai_platform_context_acquire+0xf0>)
 801a186:	2201      	movs	r2, #1
 801a188:	4619      	mov	r1, r3
 801a18a:	601a      	str	r2, [r3, #0]
 801a18c:	680b      	ldr	r3, [r1, #0]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d1fc      	bne.n	801a18c <ai_platform_context_acquire+0xac>
 801a192:	4b10      	ldr	r3, [pc, #64]	; (801a1d4 <ai_platform_context_acquire+0xf4>)
 801a194:	4910      	ldr	r1, [pc, #64]	; (801a1d8 <ai_platform_context_acquire+0xf8>)
 801a196:	4a11      	ldr	r2, [pc, #68]	; (801a1dc <ai_platform_context_acquire+0xfc>)
 801a198:	6019      	str	r1, [r3, #0]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	4293      	cmp	r3, r2
 801a19e:	d0cf      	beq.n	801a140 <ai_platform_context_acquire+0x60>
 801a1a0:	e7fe      	b.n	801a1a0 <ai_platform_context_acquire+0xc0>
 801a1a2:	4b0f      	ldr	r3, [pc, #60]	; (801a1e0 <ai_platform_context_acquire+0x100>)
 801a1a4:	2201      	movs	r2, #1
 801a1a6:	4619      	mov	r1, r3
 801a1a8:	601a      	str	r2, [r3, #0]
 801a1aa:	680b      	ldr	r3, [r1, #0]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d1fc      	bne.n	801a1aa <ai_platform_context_acquire+0xca>
 801a1b0:	4b0c      	ldr	r3, [pc, #48]	; (801a1e4 <ai_platform_context_acquire+0x104>)
 801a1b2:	4909      	ldr	r1, [pc, #36]	; (801a1d8 <ai_platform_context_acquire+0xf8>)
 801a1b4:	4a09      	ldr	r2, [pc, #36]	; (801a1dc <ai_platform_context_acquire+0xfc>)
 801a1b6:	6019      	str	r1, [r3, #0]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	4293      	cmp	r3, r2
 801a1bc:	d0c0      	beq.n	801a140 <ai_platform_context_acquire+0x60>
 801a1be:	e7fe      	b.n	801a1be <ai_platform_context_acquire+0xde>
 801a1c0:	a1c00100 	.word	0xa1c00100
 801a1c4:	e0002000 	.word	0xe0002000
 801a1c8:	e0042000 	.word	0xe0042000
 801a1cc:	5c001000 	.word	0x5c001000
 801a1d0:	40023008 	.word	0x40023008
 801a1d4:	40023000 	.word	0x40023000
 801a1d8:	f407a5c2 	.word	0xf407a5c2
 801a1dc:	b5e8b5cd 	.word	0xb5e8b5cd
 801a1e0:	58024c08 	.word	0x58024c08
 801a1e4:	58024c00 	.word	0x58024c00

0801a1e8 <ai_platform_network_set_error>:
 801a1e8:	b110      	cbz	r0, 801a1f0 <ai_platform_network_set_error+0x8>
 801a1ea:	3010      	adds	r0, #16
 801a1ec:	f001 bfb4 	b.w	801c158 <core_set_error>
 801a1f0:	4770      	bx	lr
 801a1f2:	bf00      	nop

0801a1f4 <ai_platform_api_get_network_report>:
 801a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f8:	460c      	mov	r4, r1
 801a1fa:	b089      	sub	sp, #36	; 0x24
 801a1fc:	4605      	mov	r5, r0
 801a1fe:	b120      	cbz	r0, 801a20a <ai_platform_api_get_network_report+0x16>
 801a200:	4bae      	ldr	r3, [pc, #696]	; (801a4bc <ai_platform_api_get_network_report+0x2c8>)
 801a202:	6802      	ldr	r2, [r0, #0]
 801a204:	429a      	cmp	r2, r3
 801a206:	bf18      	it	ne
 801a208:	2500      	movne	r5, #0
 801a20a:	4aad      	ldr	r2, [pc, #692]	; (801a4c0 <ai_platform_api_get_network_report+0x2cc>)
 801a20c:	6813      	ldr	r3, [r2, #0]
 801a20e:	f023 0301 	bic.w	r3, r3, #1
 801a212:	6013      	str	r3, [r2, #0]
 801a214:	f7ff fc84 	bl	8019b20 <_ai_platform_acquire_crc>
 801a218:	4baa      	ldr	r3, [pc, #680]	; (801a4c4 <ai_platform_api_get_network_report+0x2d0>)
 801a21a:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a224:	eb03 020e 	add.w	r2, r3, lr
 801a228:	2a01      	cmp	r2, #1
 801a22a:	f240 80a6 	bls.w	801a37a <ai_platform_api_get_network_report+0x186>
 801a22e:	f240 4249 	movw	r2, #1097	; 0x449
 801a232:	4293      	cmp	r3, r2
 801a234:	f000 80a1 	beq.w	801a37a <ai_platform_api_get_network_report+0x186>
 801a238:	4ba3      	ldr	r3, [pc, #652]	; (801a4c8 <ai_platform_api_get_network_report+0x2d4>)
 801a23a:	681a      	ldr	r2, [r3, #0]
 801a23c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a240:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a244:	f000 80a9 	beq.w	801a39a <ai_platform_api_get_network_report+0x1a6>
 801a248:	681a      	ldr	r2, [r3, #0]
 801a24a:	f240 4183 	movw	r1, #1155	; 0x483
 801a24e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a252:	428a      	cmp	r2, r1
 801a254:	f000 83e0 	beq.w	801aa18 <ai_platform_api_get_network_report+0x824>
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a25e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a262:	f000 83c9 	beq.w	801a9f8 <ai_platform_api_get_network_report+0x804>
 801a266:	f7ff fc5d 	bl	8019b24 <_ai_platform_release_crc>
 801a26a:	2d00      	cmp	r5, #0
 801a26c:	f000 83c2 	beq.w	801a9f4 <ai_platform_api_get_network_report+0x800>
 801a270:	fab4 f384 	clz	r3, r4
 801a274:	095b      	lsrs	r3, r3, #5
 801a276:	2b00      	cmp	r3, #0
 801a278:	f040 83bc 	bne.w	801a9f4 <ai_platform_api_get_network_report+0x800>
 801a27c:	6763      	str	r3, [r4, #116]	; 0x74
 801a27e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801a280:	2a00      	cmp	r2, #0
 801a282:	f000 83af 	beq.w	801a9e4 <ai_platform_api_get_network_report+0x7f0>
 801a286:	2301      	movs	r3, #1
 801a288:	6763      	str	r3, [r4, #116]	; 0x74
 801a28a:	6913      	ldr	r3, [r2, #16]
 801a28c:	b183      	cbz	r3, 801a2b0 <ai_platform_api_get_network_report+0xbc>
 801a28e:	429a      	cmp	r2, r3
 801a290:	d00e      	beq.n	801a2b0 <ai_platform_api_get_network_report+0xbc>
 801a292:	2202      	movs	r2, #2
 801a294:	e003      	b.n	801a29e <ai_platform_api_get_network_report+0xaa>
 801a296:	4299      	cmp	r1, r3
 801a298:	d006      	beq.n	801a2a8 <ai_platform_api_get_network_report+0xb4>
 801a29a:	460b      	mov	r3, r1
 801a29c:	b121      	cbz	r1, 801a2a8 <ai_platform_api_get_network_report+0xb4>
 801a29e:	6762      	str	r2, [r4, #116]	; 0x74
 801a2a0:	3201      	adds	r2, #1
 801a2a2:	6919      	ldr	r1, [r3, #16]
 801a2a4:	2900      	cmp	r1, #0
 801a2a6:	d1f6      	bne.n	801a296 <ai_platform_api_get_network_report+0xa2>
 801a2a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	f000 839a 	beq.w	801a9e4 <ai_platform_api_get_network_report+0x7f0>
 801a2b0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	f000 8081 	beq.w	801a3ba <ai_platform_api_get_network_report+0x1c6>
 801a2b8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801a2bc:	f1b8 0f00 	cmp.w	r8, #0
 801a2c0:	d07b      	beq.n	801a3ba <ai_platform_api_get_network_report+0x1c6>
 801a2c2:	f8b8 3000 	ldrh.w	r3, [r8]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d077      	beq.n	801a3ba <ai_platform_api_get_network_report+0x1c6>
 801a2ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d073      	beq.n	801a3ba <ai_platform_api_get_network_report+0x1c6>
 801a2d2:	681f      	ldr	r7, [r3, #0]
 801a2d4:	2f00      	cmp	r7, #0
 801a2d6:	d070      	beq.n	801a3ba <ai_platform_api_get_network_report+0x1c6>
 801a2d8:	f04f 0b00 	mov.w	fp, #0
 801a2dc:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801a2e0:	46d9      	mov	r9, fp
 801a2e2:	e029      	b.n	801a338 <ai_platform_api_get_network_report+0x144>
 801a2e4:	885b      	ldrh	r3, [r3, #2]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d044      	beq.n	801a374 <ai_platform_api_get_network_report+0x180>
 801a2ea:	2301      	movs	r3, #1
 801a2ec:	f84a 3005 	str.w	r3, [sl, r5]
 801a2f0:	69bb      	ldr	r3, [r7, #24]
 801a2f2:	685d      	ldr	r5, [r3, #4]
 801a2f4:	f04f 0301 	mov.w	r3, #1
 801a2f8:	9900      	ldr	r1, [sp, #0]
 801a2fa:	f109 0701 	add.w	r7, r9, #1
 801a2fe:	7533      	strb	r3, [r6, #20]
 801a300:	6973      	ldr	r3, [r6, #20]
 801a302:	46b9      	mov	r9, r7
 801a304:	6135      	str	r5, [r6, #16]
 801a306:	f361 231f 	bfi	r3, r1, #8, #24
 801a30a:	60b4      	str	r4, [r6, #8]
 801a30c:	e9c6 0200 	strd	r0, r2, [r6]
 801a310:	2200      	movs	r2, #0
 801a312:	b2b8      	uxth	r0, r7
 801a314:	60f2      	str	r2, [r6, #12]
 801a316:	9a01      	ldr	r2, [sp, #4]
 801a318:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801a31c:	f8b8 3000 	ldrh.w	r3, [r8]
 801a320:	429f      	cmp	r7, r3
 801a322:	d256      	bcs.n	801a3d2 <ai_platform_api_get_network_report+0x1de>
 801a324:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d052      	beq.n	801a3d2 <ai_platform_api_get_network_report+0x1de>
 801a32c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801a330:	f10b 0b1c 	add.w	fp, fp, #28
 801a334:	2f00      	cmp	r7, #0
 801a336:	d04c      	beq.n	801a3d2 <ai_platform_api_get_network_report+0x1de>
 801a338:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a33c:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801a340:	69b8      	ldr	r0, [r7, #24]
 801a342:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	6800      	ldr	r0, [r0, #0]
 801a34a:	eb0a 0405 	add.w	r4, sl, r5
 801a34e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801a352:	445e      	add	r6, fp
 801a354:	9300      	str	r3, [sp, #0]
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	9301      	str	r3, [sp, #4]
 801a35a:	f007 fe5b 	bl	8022014 <ai_array_to_buffer_fmt>
 801a35e:	69bb      	ldr	r3, [r7, #24]
 801a360:	689a      	ldr	r2, [r3, #8]
 801a362:	2c00      	cmp	r4, #0
 801a364:	d0c5      	beq.n	801a2f2 <ai_platform_api_get_network_report+0xfe>
 801a366:	2300      	movs	r3, #0
 801a368:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	6063      	str	r3, [r4, #4]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d1b7      	bne.n	801a2e4 <ai_platform_api_get_network_report+0xf0>
 801a374:	69bb      	ldr	r3, [r7, #24]
 801a376:	2400      	movs	r4, #0
 801a378:	e7bb      	b.n	801a2f2 <ai_platform_api_get_network_report+0xfe>
 801a37a:	4b54      	ldr	r3, [pc, #336]	; (801a4cc <ai_platform_api_get_network_report+0x2d8>)
 801a37c:	2201      	movs	r2, #1
 801a37e:	4619      	mov	r1, r3
 801a380:	601a      	str	r2, [r3, #0]
 801a382:	680b      	ldr	r3, [r1, #0]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d1fc      	bne.n	801a382 <ai_platform_api_get_network_report+0x18e>
 801a388:	4b51      	ldr	r3, [pc, #324]	; (801a4d0 <ai_platform_api_get_network_report+0x2dc>)
 801a38a:	4952      	ldr	r1, [pc, #328]	; (801a4d4 <ai_platform_api_get_network_report+0x2e0>)
 801a38c:	4a52      	ldr	r2, [pc, #328]	; (801a4d8 <ai_platform_api_get_network_report+0x2e4>)
 801a38e:	6019      	str	r1, [r3, #0]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	4293      	cmp	r3, r2
 801a394:	f43f af67 	beq.w	801a266 <ai_platform_api_get_network_report+0x72>
 801a398:	e7fe      	b.n	801a398 <ai_platform_api_get_network_report+0x1a4>
 801a39a:	4b50      	ldr	r3, [pc, #320]	; (801a4dc <ai_platform_api_get_network_report+0x2e8>)
 801a39c:	2201      	movs	r2, #1
 801a39e:	4619      	mov	r1, r3
 801a3a0:	601a      	str	r2, [r3, #0]
 801a3a2:	680b      	ldr	r3, [r1, #0]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d1fc      	bne.n	801a3a2 <ai_platform_api_get_network_report+0x1ae>
 801a3a8:	4b4d      	ldr	r3, [pc, #308]	; (801a4e0 <ai_platform_api_get_network_report+0x2ec>)
 801a3aa:	494a      	ldr	r1, [pc, #296]	; (801a4d4 <ai_platform_api_get_network_report+0x2e0>)
 801a3ac:	4a4a      	ldr	r2, [pc, #296]	; (801a4d8 <ai_platform_api_get_network_report+0x2e4>)
 801a3ae:	6019      	str	r1, [r3, #0]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4293      	cmp	r3, r2
 801a3b4:	f43f af57 	beq.w	801a266 <ai_platform_api_get_network_report+0x72>
 801a3b8:	e7fe      	b.n	801a3b8 <ai_platform_api_get_network_report+0x1c4>
 801a3ba:	2600      	movs	r6, #0
 801a3bc:	f105 0010 	add.w	r0, r5, #16
 801a3c0:	2218      	movs	r2, #24
 801a3c2:	2112      	movs	r1, #18
 801a3c4:	8626      	strh	r6, [r4, #48]	; 0x30
 801a3c6:	f001 fec7 	bl	801c158 <core_set_error>
 801a3ca:	4630      	mov	r0, r6
 801a3cc:	b009      	add	sp, #36	; 0x24
 801a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3d2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801a3d6:	2800      	cmp	r0, #0
 801a3d8:	d0ef      	beq.n	801a3ba <ai_platform_api_get_network_report+0x1c6>
 801a3da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	8620      	strh	r0, [r4, #48]	; 0x30
 801a3e2:	6363      	str	r3, [r4, #52]	; 0x34
 801a3e4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801a3e6:	2b01      	cmp	r3, #1
 801a3e8:	d95e      	bls.n	801a4a8 <ai_platform_api_get_network_report+0x2b4>
 801a3ea:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801a3ee:	f118 0f0c 	cmn.w	r8, #12
 801a3f2:	d059      	beq.n	801a4a8 <ai_platform_api_get_network_report+0x2b4>
 801a3f4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d055      	beq.n	801a4a8 <ai_platform_api_get_network_report+0x2b4>
 801a3fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d051      	beq.n	801a4a8 <ai_platform_api_get_network_report+0x2b4>
 801a404:	681f      	ldr	r7, [r3, #0]
 801a406:	2f00      	cmp	r7, #0
 801a408:	d04e      	beq.n	801a4a8 <ai_platform_api_get_network_report+0x2b4>
 801a40a:	f04f 0b00 	mov.w	fp, #0
 801a40e:	46d9      	mov	r9, fp
 801a410:	e027      	b.n	801a462 <ai_platform_api_get_network_report+0x26e>
 801a412:	2301      	movs	r3, #1
 801a414:	f84a 3005 	str.w	r3, [sl, r5]
 801a418:	69bb      	ldr	r3, [r7, #24]
 801a41a:	685d      	ldr	r5, [r3, #4]
 801a41c:	f04f 0301 	mov.w	r3, #1
 801a420:	9900      	ldr	r1, [sp, #0]
 801a422:	f109 0701 	add.w	r7, r9, #1
 801a426:	7533      	strb	r3, [r6, #20]
 801a428:	6973      	ldr	r3, [r6, #20]
 801a42a:	46b9      	mov	r9, r7
 801a42c:	6135      	str	r5, [r6, #16]
 801a42e:	fa1f fc87 	uxth.w	ip, r7
 801a432:	f361 231f 	bfi	r3, r1, #8, #24
 801a436:	60b4      	str	r4, [r6, #8]
 801a438:	e9c6 0200 	strd	r0, r2, [r6]
 801a43c:	2200      	movs	r2, #0
 801a43e:	60f2      	str	r2, [r6, #12]
 801a440:	9a01      	ldr	r2, [sp, #4]
 801a442:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801a446:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801a44a:	429f      	cmp	r7, r3
 801a44c:	d24a      	bcs.n	801a4e4 <ai_platform_api_get_network_report+0x2f0>
 801a44e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d046      	beq.n	801a4e4 <ai_platform_api_get_network_report+0x2f0>
 801a456:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801a45a:	f10b 0b1c 	add.w	fp, fp, #28
 801a45e:	2f00      	cmp	r7, #0
 801a460:	d040      	beq.n	801a4e4 <ai_platform_api_get_network_report+0x2f0>
 801a462:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a466:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801a46a:	69b8      	ldr	r0, [r7, #24]
 801a46c:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801a470:	68bb      	ldr	r3, [r7, #8]
 801a472:	6800      	ldr	r0, [r0, #0]
 801a474:	eb0a 0405 	add.w	r4, sl, r5
 801a478:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801a47c:	445e      	add	r6, fp
 801a47e:	9300      	str	r3, [sp, #0]
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	9301      	str	r3, [sp, #4]
 801a484:	f007 fdc6 	bl	8022014 <ai_array_to_buffer_fmt>
 801a488:	69bb      	ldr	r3, [r7, #24]
 801a48a:	689a      	ldr	r2, [r3, #8]
 801a48c:	2c00      	cmp	r4, #0
 801a48e:	d0c4      	beq.n	801a41a <ai_platform_api_get_network_report+0x226>
 801a490:	2300      	movs	r3, #0
 801a492:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801a496:	683b      	ldr	r3, [r7, #0]
 801a498:	6063      	str	r3, [r4, #4]
 801a49a:	b113      	cbz	r3, 801a4a2 <ai_platform_api_get_network_report+0x2ae>
 801a49c:	885b      	ldrh	r3, [r3, #2]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d1b7      	bne.n	801a412 <ai_platform_api_get_network_report+0x21e>
 801a4a2:	69bb      	ldr	r3, [r7, #24]
 801a4a4:	2400      	movs	r4, #0
 801a4a6:	e7b8      	b.n	801a41a <ai_platform_api_get_network_report+0x226>
 801a4a8:	2600      	movs	r6, #0
 801a4aa:	f105 0010 	add.w	r0, r5, #16
 801a4ae:	2218      	movs	r2, #24
 801a4b0:	2113      	movs	r1, #19
 801a4b2:	8666      	strh	r6, [r4, #50]	; 0x32
 801a4b4:	f001 fe50 	bl	801c158 <core_set_error>
 801a4b8:	e787      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a4ba:	bf00      	nop
 801a4bc:	a1c00100 	.word	0xa1c00100
 801a4c0:	e0002000 	.word	0xe0002000
 801a4c4:	e0042000 	.word	0xe0042000
 801a4c8:	5c001000 	.word	0x5c001000
 801a4cc:	40023008 	.word	0x40023008
 801a4d0:	40023000 	.word	0x40023000
 801a4d4:	f407a5c2 	.word	0xf407a5c2
 801a4d8:	b5e8b5cd 	.word	0xb5e8b5cd
 801a4dc:	58024c08 	.word	0x58024c08
 801a4e0:	58024c00 	.word	0x58024c00
 801a4e4:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801a4e8:	f1bc 0f00 	cmp.w	ip, #0
 801a4ec:	d0dc      	beq.n	801a4a8 <ai_platform_api_get_network_report+0x2b4>
 801a4ee:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a4f2:	f105 0724 	add.w	r7, r5, #36	; 0x24
 801a4f6:	685b      	ldr	r3, [r3, #4]
 801a4f8:	4638      	mov	r0, r7
 801a4fa:	f8a4 c032 	strh.w	ip, [r4, #50]	; 0x32
 801a4fe:	63a3      	str	r3, [r4, #56]	; 0x38
 801a500:	f7ff fb04 	bl	8019b0c <ai_buffer_array_sane>
 801a504:	4606      	mov	r6, r0
 801a506:	b938      	cbnz	r0, 801a518 <ai_platform_api_get_network_report+0x324>
 801a508:	4638      	mov	r0, r7
 801a50a:	f7ff faff 	bl	8019b0c <ai_buffer_array_sane>
 801a50e:	b118      	cbz	r0, 801a518 <ai_platform_api_get_network_report+0x324>
 801a510:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 801a512:	2b00      	cmp	r3, #0
 801a514:	f040 8109 	bne.w	801a72a <ai_platform_api_get_network_report+0x536>
 801a518:	f105 081c 	add.w	r8, r5, #28
 801a51c:	4640      	mov	r0, r8
 801a51e:	f7ff faf5 	bl	8019b0c <ai_buffer_array_sane>
 801a522:	4606      	mov	r6, r0
 801a524:	b938      	cbnz	r0, 801a536 <ai_platform_api_get_network_report+0x342>
 801a526:	4640      	mov	r0, r8
 801a528:	f7ff faf0 	bl	8019b0c <ai_buffer_array_sane>
 801a52c:	b118      	cbz	r0, 801a536 <ai_platform_api_get_network_report+0x342>
 801a52e:	8beb      	ldrh	r3, [r5, #30]
 801a530:	2b00      	cmp	r3, #0
 801a532:	f040 8101 	bne.w	801a738 <ai_platform_api_get_network_report+0x544>
 801a536:	686b      	ldr	r3, [r5, #4]
 801a538:	4abd      	ldr	r2, [pc, #756]	; (801a830 <ai_platform_api_get_network_report+0x63c>)
 801a53a:	67a3      	str	r3, [r4, #120]	; 0x78
 801a53c:	6813      	ldr	r3, [r2, #0]
 801a53e:	f023 0301 	bic.w	r3, r3, #1
 801a542:	6013      	str	r3, [r2, #0]
 801a544:	f7ff faec 	bl	8019b20 <_ai_platform_acquire_crc>
 801a548:	4bba      	ldr	r3, [pc, #744]	; (801a834 <ai_platform_api_get_network_report+0x640>)
 801a54a:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a554:	eb03 020c 	add.w	r2, r3, ip
 801a558:	2a01      	cmp	r2, #1
 801a55a:	f240 8233 	bls.w	801a9c4 <ai_platform_api_get_network_report+0x7d0>
 801a55e:	f240 4249 	movw	r2, #1097	; 0x449
 801a562:	4293      	cmp	r3, r2
 801a564:	f000 822e 	beq.w	801a9c4 <ai_platform_api_get_network_report+0x7d0>
 801a568:	4bb3      	ldr	r3, [pc, #716]	; (801a838 <ai_platform_api_get_network_report+0x644>)
 801a56a:	681a      	ldr	r2, [r3, #0]
 801a56c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a570:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a574:	f000 8216 	beq.w	801a9a4 <ai_platform_api_get_network_report+0x7b0>
 801a578:	681a      	ldr	r2, [r3, #0]
 801a57a:	f240 4183 	movw	r1, #1155	; 0x483
 801a57e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a582:	428a      	cmp	r2, r1
 801a584:	f000 81fe 	beq.w	801a984 <ai_platform_api_get_network_report+0x790>
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a58e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a592:	f000 81e7 	beq.w	801a964 <ai_platform_api_get_network_report+0x770>
 801a596:	f7ff fac5 	bl	8019b24 <_ai_platform_release_crc>
 801a59a:	4aa5      	ldr	r2, [pc, #660]	; (801a830 <ai_platform_api_get_network_report+0x63c>)
 801a59c:	4ba7      	ldr	r3, [pc, #668]	; (801a83c <ai_platform_api_get_network_report+0x648>)
 801a59e:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801a5a2:	6123      	str	r3, [r4, #16]
 801a5a4:	6813      	ldr	r3, [r2, #0]
 801a5a6:	f023 0301 	bic.w	r3, r3, #1
 801a5aa:	6013      	str	r3, [r2, #0]
 801a5ac:	f7ff fab8 	bl	8019b20 <_ai_platform_acquire_crc>
 801a5b0:	4ba0      	ldr	r3, [pc, #640]	; (801a834 <ai_platform_api_get_network_report+0x640>)
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a5b8:	199a      	adds	r2, r3, r6
 801a5ba:	2a01      	cmp	r2, #1
 801a5bc:	f240 81c2 	bls.w	801a944 <ai_platform_api_get_network_report+0x750>
 801a5c0:	f240 4249 	movw	r2, #1097	; 0x449
 801a5c4:	4293      	cmp	r3, r2
 801a5c6:	f000 81bd 	beq.w	801a944 <ai_platform_api_get_network_report+0x750>
 801a5ca:	4b9b      	ldr	r3, [pc, #620]	; (801a838 <ai_platform_api_get_network_report+0x644>)
 801a5cc:	681a      	ldr	r2, [r3, #0]
 801a5ce:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a5d2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a5d6:	f000 81a5 	beq.w	801a924 <ai_platform_api_get_network_report+0x730>
 801a5da:	681a      	ldr	r2, [r3, #0]
 801a5dc:	f240 4183 	movw	r1, #1155	; 0x483
 801a5e0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a5e4:	428a      	cmp	r2, r1
 801a5e6:	f000 818d 	beq.w	801a904 <ai_platform_api_get_network_report+0x710>
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a5f0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a5f4:	f000 8176 	beq.w	801a8e4 <ai_platform_api_get_network_report+0x6f0>
 801a5f8:	f7ff fa94 	bl	8019b24 <_ai_platform_release_crc>
 801a5fc:	4a8c      	ldr	r2, [pc, #560]	; (801a830 <ai_platform_api_get_network_report+0x63c>)
 801a5fe:	f240 1307 	movw	r3, #263	; 0x107
 801a602:	6163      	str	r3, [r4, #20]
 801a604:	6813      	ldr	r3, [r2, #0]
 801a606:	f023 0301 	bic.w	r3, r3, #1
 801a60a:	6013      	str	r3, [r2, #0]
 801a60c:	f7ff fa88 	bl	8019b20 <_ai_platform_acquire_crc>
 801a610:	4b88      	ldr	r3, [pc, #544]	; (801a834 <ai_platform_api_get_network_report+0x640>)
 801a612:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a61c:	185a      	adds	r2, r3, r1
 801a61e:	2a01      	cmp	r2, #1
 801a620:	f240 8150 	bls.w	801a8c4 <ai_platform_api_get_network_report+0x6d0>
 801a624:	f240 4249 	movw	r2, #1097	; 0x449
 801a628:	4293      	cmp	r3, r2
 801a62a:	f000 814b 	beq.w	801a8c4 <ai_platform_api_get_network_report+0x6d0>
 801a62e:	4b82      	ldr	r3, [pc, #520]	; (801a838 <ai_platform_api_get_network_report+0x644>)
 801a630:	681a      	ldr	r2, [r3, #0]
 801a632:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a636:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a63a:	f000 8133 	beq.w	801a8a4 <ai_platform_api_get_network_report+0x6b0>
 801a63e:	681a      	ldr	r2, [r3, #0]
 801a640:	f240 4183 	movw	r1, #1155	; 0x483
 801a644:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a648:	428a      	cmp	r2, r1
 801a64a:	f000 811b 	beq.w	801a884 <ai_platform_api_get_network_report+0x690>
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a654:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a658:	f000 8104 	beq.w	801a864 <ai_platform_api_get_network_report+0x670>
 801a65c:	f7ff fa62 	bl	8019b24 <_ai_platform_release_crc>
 801a660:	4a73      	ldr	r2, [pc, #460]	; (801a830 <ai_platform_api_get_network_report+0x63c>)
 801a662:	f240 2301 	movw	r3, #513	; 0x201
 801a666:	6263      	str	r3, [r4, #36]	; 0x24
 801a668:	6813      	ldr	r3, [r2, #0]
 801a66a:	f023 0301 	bic.w	r3, r3, #1
 801a66e:	6013      	str	r3, [r2, #0]
 801a670:	f7ff fa56 	bl	8019b20 <_ai_platform_acquire_crc>
 801a674:	4b6f      	ldr	r3, [pc, #444]	; (801a834 <ai_platform_api_get_network_report+0x640>)
 801a676:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a680:	189a      	adds	r2, r3, r2
 801a682:	2a01      	cmp	r2, #1
 801a684:	f240 80c3 	bls.w	801a80e <ai_platform_api_get_network_report+0x61a>
 801a688:	f240 4249 	movw	r2, #1097	; 0x449
 801a68c:	4293      	cmp	r3, r2
 801a68e:	f000 80be 	beq.w	801a80e <ai_platform_api_get_network_report+0x61a>
 801a692:	4b69      	ldr	r3, [pc, #420]	; (801a838 <ai_platform_api_get_network_report+0x644>)
 801a694:	681a      	ldr	r2, [r3, #0]
 801a696:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a69a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a69e:	f000 80a6 	beq.w	801a7ee <ai_platform_api_get_network_report+0x5fa>
 801a6a2:	681a      	ldr	r2, [r3, #0]
 801a6a4:	f240 4183 	movw	r1, #1155	; 0x483
 801a6a8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a6ac:	428a      	cmp	r2, r1
 801a6ae:	f000 808e 	beq.w	801a7ce <ai_platform_api_get_network_report+0x5da>
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a6b8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a6bc:	d077      	beq.n	801a7ae <ai_platform_api_get_network_report+0x5ba>
 801a6be:	f7ff fa31 	bl	8019b24 <_ai_platform_release_crc>
 801a6c2:	f240 5301 	movw	r3, #1281	; 0x501
 801a6c6:	62a3      	str	r3, [r4, #40]	; 0x28
 801a6c8:	6c68      	ldr	r0, [r5, #68]	; 0x44
 801a6ca:	f007 fc79 	bl	8021fc0 <ai_platform_version_get>
 801a6ce:	4b5c      	ldr	r3, [pc, #368]	; (801a840 <ai_platform_api_get_network_report+0x64c>)
 801a6d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a6d2:	6220      	str	r0, [r4, #32]
 801a6d4:	429a      	cmp	r2, r3
 801a6d6:	d051      	beq.n	801a77c <ai_platform_api_get_network_report+0x588>
 801a6d8:	495a      	ldr	r1, [pc, #360]	; (801a844 <ai_platform_api_get_network_report+0x650>)
 801a6da:	2200      	movs	r2, #0
 801a6dc:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 801a6e0:	4b59      	ldr	r3, [pc, #356]	; (801a848 <ai_platform_api_get_network_report+0x654>)
 801a6e2:	63e1      	str	r1, [r4, #60]	; 0x3c
 801a6e4:	f240 4101 	movw	r1, #1025	; 0x401
 801a6e8:	f10d 0e10 	add.w	lr, sp, #16
 801a6ec:	46b4      	mov	ip, r6
 801a6ee:	6521      	str	r1, [r4, #80]	; 0x50
 801a6f0:	f104 0958 	add.w	r9, r4, #88	; 0x58
 801a6f4:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 801a6f8:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 801a6fc:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 801a700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a702:	464c      	mov	r4, r9
 801a704:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801a708:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a70c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a70e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801a712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a716:	4638      	mov	r0, r7
 801a718:	f7ff f9f8 	bl	8019b0c <ai_buffer_array_sane>
 801a71c:	bb08      	cbnz	r0, 801a762 <ai_platform_api_get_network_report+0x56e>
 801a71e:	4640      	mov	r0, r8
 801a720:	f7ff f9f4 	bl	8019b0c <ai_buffer_array_sane>
 801a724:	b978      	cbnz	r0, 801a746 <ai_platform_api_get_network_report+0x552>
 801a726:	2601      	movs	r6, #1
 801a728:	e64f      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a72a:	f105 0010 	add.w	r0, r5, #16
 801a72e:	2213      	movs	r2, #19
 801a730:	2111      	movs	r1, #17
 801a732:	f001 fd11 	bl	801c158 <core_set_error>
 801a736:	e648      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a738:	f105 0010 	add.w	r0, r5, #16
 801a73c:	2212      	movs	r2, #18
 801a73e:	2111      	movs	r1, #17
 801a740:	f001 fd0a 	bl	801c158 <core_set_error>
 801a744:	e641      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a746:	4640      	mov	r0, r8
 801a748:	f7ff f9e0 	bl	8019b0c <ai_buffer_array_sane>
 801a74c:	b318      	cbz	r0, 801a796 <ai_platform_api_get_network_report+0x5a2>
 801a74e:	6a2f      	ldr	r7, [r5, #32]
 801a750:	4634      	mov	r4, r6
 801a752:	2601      	movs	r6, #1
 801a754:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a758:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801a75c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a760:	e633      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a762:	4638      	mov	r0, r7
 801a764:	f7ff f9d2 	bl	8019b0c <ai_buffer_array_sane>
 801a768:	b1f0      	cbz	r0, 801a7a8 <ai_platform_api_get_network_report+0x5b4>
 801a76a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801a76c:	464c      	mov	r4, r9
 801a76e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a772:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801a776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a77a:	e7d0      	b.n	801a71e <ai_platform_api_get_network_report+0x52a>
 801a77c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a780:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801a784:	3440      	adds	r4, #64	; 0x40
 801a786:	2601      	movs	r6, #1
 801a788:	e883 0003 	stmia.w	r3, {r0, r1}
 801a78c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801a790:	e884 0003 	stmia.w	r4, {r0, r1}
 801a794:	e619      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a796:	4605      	mov	r5, r0
 801a798:	4634      	mov	r4, r6
 801a79a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a79e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a7a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a7a6:	deff      	udf	#255	; 0xff
 801a7a8:	4605      	mov	r5, r0
 801a7aa:	464c      	mov	r4, r9
 801a7ac:	e7f5      	b.n	801a79a <ai_platform_api_get_network_report+0x5a6>
 801a7ae:	4b27      	ldr	r3, [pc, #156]	; (801a84c <ai_platform_api_get_network_report+0x658>)
 801a7b0:	2201      	movs	r2, #1
 801a7b2:	4619      	mov	r1, r3
 801a7b4:	601a      	str	r2, [r3, #0]
 801a7b6:	680b      	ldr	r3, [r1, #0]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d1fc      	bne.n	801a7b6 <ai_platform_api_get_network_report+0x5c2>
 801a7bc:	4b24      	ldr	r3, [pc, #144]	; (801a850 <ai_platform_api_get_network_report+0x65c>)
 801a7be:	4925      	ldr	r1, [pc, #148]	; (801a854 <ai_platform_api_get_network_report+0x660>)
 801a7c0:	4a25      	ldr	r2, [pc, #148]	; (801a858 <ai_platform_api_get_network_report+0x664>)
 801a7c2:	6019      	str	r1, [r3, #0]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	4293      	cmp	r3, r2
 801a7c8:	f43f af79 	beq.w	801a6be <ai_platform_api_get_network_report+0x4ca>
 801a7cc:	e7fe      	b.n	801a7cc <ai_platform_api_get_network_report+0x5d8>
 801a7ce:	4b23      	ldr	r3, [pc, #140]	; (801a85c <ai_platform_api_get_network_report+0x668>)
 801a7d0:	2201      	movs	r2, #1
 801a7d2:	4619      	mov	r1, r3
 801a7d4:	601a      	str	r2, [r3, #0]
 801a7d6:	680b      	ldr	r3, [r1, #0]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d1fc      	bne.n	801a7d6 <ai_platform_api_get_network_report+0x5e2>
 801a7dc:	4b20      	ldr	r3, [pc, #128]	; (801a860 <ai_platform_api_get_network_report+0x66c>)
 801a7de:	491d      	ldr	r1, [pc, #116]	; (801a854 <ai_platform_api_get_network_report+0x660>)
 801a7e0:	4a1d      	ldr	r2, [pc, #116]	; (801a858 <ai_platform_api_get_network_report+0x664>)
 801a7e2:	6019      	str	r1, [r3, #0]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	4293      	cmp	r3, r2
 801a7e8:	f43f af69 	beq.w	801a6be <ai_platform_api_get_network_report+0x4ca>
 801a7ec:	e7fe      	b.n	801a7ec <ai_platform_api_get_network_report+0x5f8>
 801a7ee:	4b1b      	ldr	r3, [pc, #108]	; (801a85c <ai_platform_api_get_network_report+0x668>)
 801a7f0:	2201      	movs	r2, #1
 801a7f2:	4619      	mov	r1, r3
 801a7f4:	601a      	str	r2, [r3, #0]
 801a7f6:	680b      	ldr	r3, [r1, #0]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d1fc      	bne.n	801a7f6 <ai_platform_api_get_network_report+0x602>
 801a7fc:	4b18      	ldr	r3, [pc, #96]	; (801a860 <ai_platform_api_get_network_report+0x66c>)
 801a7fe:	4915      	ldr	r1, [pc, #84]	; (801a854 <ai_platform_api_get_network_report+0x660>)
 801a800:	4a15      	ldr	r2, [pc, #84]	; (801a858 <ai_platform_api_get_network_report+0x664>)
 801a802:	6019      	str	r1, [r3, #0]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	4293      	cmp	r3, r2
 801a808:	f43f af59 	beq.w	801a6be <ai_platform_api_get_network_report+0x4ca>
 801a80c:	e7fe      	b.n	801a80c <ai_platform_api_get_network_report+0x618>
 801a80e:	4b0f      	ldr	r3, [pc, #60]	; (801a84c <ai_platform_api_get_network_report+0x658>)
 801a810:	2201      	movs	r2, #1
 801a812:	4619      	mov	r1, r3
 801a814:	601a      	str	r2, [r3, #0]
 801a816:	680b      	ldr	r3, [r1, #0]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d1fc      	bne.n	801a816 <ai_platform_api_get_network_report+0x622>
 801a81c:	4b0c      	ldr	r3, [pc, #48]	; (801a850 <ai_platform_api_get_network_report+0x65c>)
 801a81e:	490d      	ldr	r1, [pc, #52]	; (801a854 <ai_platform_api_get_network_report+0x660>)
 801a820:	4a0d      	ldr	r2, [pc, #52]	; (801a858 <ai_platform_api_get_network_report+0x664>)
 801a822:	6019      	str	r1, [r3, #0]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	4293      	cmp	r3, r2
 801a828:	f43f af49 	beq.w	801a6be <ai_platform_api_get_network_report+0x4ca>
 801a82c:	e7fe      	b.n	801a82c <ai_platform_api_get_network_report+0x638>
 801a82e:	bf00      	nop
 801a830:	e0002000 	.word	0xe0002000
 801a834:	e0042000 	.word	0xe0042000
 801a838:	5c001000 	.word	0x5c001000
 801a83c:	0802c44c 	.word	0x0802c44c
 801a840:	a1facade 	.word	0xa1facade
 801a844:	00040440 	.word	0x00040440
 801a848:	0802575c 	.word	0x0802575c
 801a84c:	40023008 	.word	0x40023008
 801a850:	40023000 	.word	0x40023000
 801a854:	f407a5c2 	.word	0xf407a5c2
 801a858:	b5e8b5cd 	.word	0xb5e8b5cd
 801a85c:	58024c08 	.word	0x58024c08
 801a860:	58024c00 	.word	0x58024c00
 801a864:	4b74      	ldr	r3, [pc, #464]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a866:	2201      	movs	r2, #1
 801a868:	4619      	mov	r1, r3
 801a86a:	601a      	str	r2, [r3, #0]
 801a86c:	680b      	ldr	r3, [r1, #0]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d1fc      	bne.n	801a86c <ai_platform_api_get_network_report+0x678>
 801a872:	4b72      	ldr	r3, [pc, #456]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801a874:	4972      	ldr	r1, [pc, #456]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a876:	4a73      	ldr	r2, [pc, #460]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a878:	6019      	str	r1, [r3, #0]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	4293      	cmp	r3, r2
 801a87e:	f43f aeed 	beq.w	801a65c <ai_platform_api_get_network_report+0x468>
 801a882:	e7fe      	b.n	801a882 <ai_platform_api_get_network_report+0x68e>
 801a884:	4b70      	ldr	r3, [pc, #448]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801a886:	2201      	movs	r2, #1
 801a888:	4619      	mov	r1, r3
 801a88a:	601a      	str	r2, [r3, #0]
 801a88c:	680b      	ldr	r3, [r1, #0]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d1fc      	bne.n	801a88c <ai_platform_api_get_network_report+0x698>
 801a892:	4b6e      	ldr	r3, [pc, #440]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801a894:	496a      	ldr	r1, [pc, #424]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a896:	4a6b      	ldr	r2, [pc, #428]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a898:	6019      	str	r1, [r3, #0]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	4293      	cmp	r3, r2
 801a89e:	f43f aedd 	beq.w	801a65c <ai_platform_api_get_network_report+0x468>
 801a8a2:	e7fe      	b.n	801a8a2 <ai_platform_api_get_network_report+0x6ae>
 801a8a4:	4b68      	ldr	r3, [pc, #416]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	601a      	str	r2, [r3, #0]
 801a8ac:	680b      	ldr	r3, [r1, #0]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d1fc      	bne.n	801a8ac <ai_platform_api_get_network_report+0x6b8>
 801a8b2:	4b66      	ldr	r3, [pc, #408]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801a8b4:	4962      	ldr	r1, [pc, #392]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a8b6:	4a63      	ldr	r2, [pc, #396]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a8b8:	6019      	str	r1, [r3, #0]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	4293      	cmp	r3, r2
 801a8be:	f43f aecd 	beq.w	801a65c <ai_platform_api_get_network_report+0x468>
 801a8c2:	e7fe      	b.n	801a8c2 <ai_platform_api_get_network_report+0x6ce>
 801a8c4:	4b5c      	ldr	r3, [pc, #368]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a8c6:	2201      	movs	r2, #1
 801a8c8:	4619      	mov	r1, r3
 801a8ca:	601a      	str	r2, [r3, #0]
 801a8cc:	680b      	ldr	r3, [r1, #0]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d1fc      	bne.n	801a8cc <ai_platform_api_get_network_report+0x6d8>
 801a8d2:	4b5a      	ldr	r3, [pc, #360]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801a8d4:	495a      	ldr	r1, [pc, #360]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a8d6:	4a5b      	ldr	r2, [pc, #364]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a8d8:	6019      	str	r1, [r3, #0]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	4293      	cmp	r3, r2
 801a8de:	f43f aebd 	beq.w	801a65c <ai_platform_api_get_network_report+0x468>
 801a8e2:	e7fe      	b.n	801a8e2 <ai_platform_api_get_network_report+0x6ee>
 801a8e4:	4b54      	ldr	r3, [pc, #336]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a8e6:	2201      	movs	r2, #1
 801a8e8:	4619      	mov	r1, r3
 801a8ea:	601a      	str	r2, [r3, #0]
 801a8ec:	680b      	ldr	r3, [r1, #0]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d1fc      	bne.n	801a8ec <ai_platform_api_get_network_report+0x6f8>
 801a8f2:	4b52      	ldr	r3, [pc, #328]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801a8f4:	4952      	ldr	r1, [pc, #328]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a8f6:	4a53      	ldr	r2, [pc, #332]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a8f8:	6019      	str	r1, [r3, #0]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	f43f ae7b 	beq.w	801a5f8 <ai_platform_api_get_network_report+0x404>
 801a902:	e7fe      	b.n	801a902 <ai_platform_api_get_network_report+0x70e>
 801a904:	4b50      	ldr	r3, [pc, #320]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801a906:	2201      	movs	r2, #1
 801a908:	4619      	mov	r1, r3
 801a90a:	601a      	str	r2, [r3, #0]
 801a90c:	680b      	ldr	r3, [r1, #0]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d1fc      	bne.n	801a90c <ai_platform_api_get_network_report+0x718>
 801a912:	4b4e      	ldr	r3, [pc, #312]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801a914:	494a      	ldr	r1, [pc, #296]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a916:	4a4b      	ldr	r2, [pc, #300]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a918:	6019      	str	r1, [r3, #0]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	4293      	cmp	r3, r2
 801a91e:	f43f ae6b 	beq.w	801a5f8 <ai_platform_api_get_network_report+0x404>
 801a922:	e7fe      	b.n	801a922 <ai_platform_api_get_network_report+0x72e>
 801a924:	4b48      	ldr	r3, [pc, #288]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801a926:	2201      	movs	r2, #1
 801a928:	4619      	mov	r1, r3
 801a92a:	601a      	str	r2, [r3, #0]
 801a92c:	680b      	ldr	r3, [r1, #0]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d1fc      	bne.n	801a92c <ai_platform_api_get_network_report+0x738>
 801a932:	4b46      	ldr	r3, [pc, #280]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801a934:	4942      	ldr	r1, [pc, #264]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a936:	4a43      	ldr	r2, [pc, #268]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a938:	6019      	str	r1, [r3, #0]
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	4293      	cmp	r3, r2
 801a93e:	f43f ae5b 	beq.w	801a5f8 <ai_platform_api_get_network_report+0x404>
 801a942:	e7fe      	b.n	801a942 <ai_platform_api_get_network_report+0x74e>
 801a944:	4b3c      	ldr	r3, [pc, #240]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a946:	2201      	movs	r2, #1
 801a948:	4619      	mov	r1, r3
 801a94a:	601a      	str	r2, [r3, #0]
 801a94c:	680b      	ldr	r3, [r1, #0]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d1fc      	bne.n	801a94c <ai_platform_api_get_network_report+0x758>
 801a952:	4b3a      	ldr	r3, [pc, #232]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801a954:	493a      	ldr	r1, [pc, #232]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a956:	4a3b      	ldr	r2, [pc, #236]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a958:	6019      	str	r1, [r3, #0]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	4293      	cmp	r3, r2
 801a95e:	f43f ae4b 	beq.w	801a5f8 <ai_platform_api_get_network_report+0x404>
 801a962:	e7fe      	b.n	801a962 <ai_platform_api_get_network_report+0x76e>
 801a964:	4b34      	ldr	r3, [pc, #208]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a966:	2201      	movs	r2, #1
 801a968:	4619      	mov	r1, r3
 801a96a:	601a      	str	r2, [r3, #0]
 801a96c:	680b      	ldr	r3, [r1, #0]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d1fc      	bne.n	801a96c <ai_platform_api_get_network_report+0x778>
 801a972:	4b32      	ldr	r3, [pc, #200]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801a974:	4932      	ldr	r1, [pc, #200]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a976:	4a33      	ldr	r2, [pc, #204]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a978:	6019      	str	r1, [r3, #0]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	4293      	cmp	r3, r2
 801a97e:	f43f ae0a 	beq.w	801a596 <ai_platform_api_get_network_report+0x3a2>
 801a982:	e7fe      	b.n	801a982 <ai_platform_api_get_network_report+0x78e>
 801a984:	4b30      	ldr	r3, [pc, #192]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801a986:	2201      	movs	r2, #1
 801a988:	4619      	mov	r1, r3
 801a98a:	601a      	str	r2, [r3, #0]
 801a98c:	680b      	ldr	r3, [r1, #0]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d1fc      	bne.n	801a98c <ai_platform_api_get_network_report+0x798>
 801a992:	4b2e      	ldr	r3, [pc, #184]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801a994:	492a      	ldr	r1, [pc, #168]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a996:	4a2b      	ldr	r2, [pc, #172]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a998:	6019      	str	r1, [r3, #0]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	4293      	cmp	r3, r2
 801a99e:	f43f adfa 	beq.w	801a596 <ai_platform_api_get_network_report+0x3a2>
 801a9a2:	e7fe      	b.n	801a9a2 <ai_platform_api_get_network_report+0x7ae>
 801a9a4:	4b28      	ldr	r3, [pc, #160]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801a9a6:	2201      	movs	r2, #1
 801a9a8:	4619      	mov	r1, r3
 801a9aa:	601a      	str	r2, [r3, #0]
 801a9ac:	680b      	ldr	r3, [r1, #0]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d1fc      	bne.n	801a9ac <ai_platform_api_get_network_report+0x7b8>
 801a9b2:	4b26      	ldr	r3, [pc, #152]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801a9b4:	4922      	ldr	r1, [pc, #136]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a9b6:	4a23      	ldr	r2, [pc, #140]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a9b8:	6019      	str	r1, [r3, #0]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	f43f adea 	beq.w	801a596 <ai_platform_api_get_network_report+0x3a2>
 801a9c2:	e7fe      	b.n	801a9c2 <ai_platform_api_get_network_report+0x7ce>
 801a9c4:	4b1c      	ldr	r3, [pc, #112]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	601a      	str	r2, [r3, #0]
 801a9cc:	680b      	ldr	r3, [r1, #0]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d1fc      	bne.n	801a9cc <ai_platform_api_get_network_report+0x7d8>
 801a9d2:	4b1a      	ldr	r3, [pc, #104]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801a9d4:	491a      	ldr	r1, [pc, #104]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801a9d6:	4a1b      	ldr	r2, [pc, #108]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801a9d8:	6019      	str	r1, [r3, #0]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	f43f adda 	beq.w	801a596 <ai_platform_api_get_network_report+0x3a2>
 801a9e2:	e7fe      	b.n	801a9e2 <ai_platform_api_get_network_report+0x7ee>
 801a9e4:	f105 0010 	add.w	r0, r5, #16
 801a9e8:	2218      	movs	r2, #24
 801a9ea:	2111      	movs	r1, #17
 801a9ec:	2600      	movs	r6, #0
 801a9ee:	f001 fbb3 	bl	801c158 <core_set_error>
 801a9f2:	e4ea      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a9f4:	2600      	movs	r6, #0
 801a9f6:	e4e8      	b.n	801a3ca <ai_platform_api_get_network_report+0x1d6>
 801a9f8:	4b0f      	ldr	r3, [pc, #60]	; (801aa38 <ai_platform_api_get_network_report+0x844>)
 801a9fa:	2201      	movs	r2, #1
 801a9fc:	4619      	mov	r1, r3
 801a9fe:	601a      	str	r2, [r3, #0]
 801aa00:	680b      	ldr	r3, [r1, #0]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d1fc      	bne.n	801aa00 <ai_platform_api_get_network_report+0x80c>
 801aa06:	4b0d      	ldr	r3, [pc, #52]	; (801aa3c <ai_platform_api_get_network_report+0x848>)
 801aa08:	490d      	ldr	r1, [pc, #52]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801aa0a:	4a0e      	ldr	r2, [pc, #56]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801aa0c:	6019      	str	r1, [r3, #0]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	4293      	cmp	r3, r2
 801aa12:	f43f ac28 	beq.w	801a266 <ai_platform_api_get_network_report+0x72>
 801aa16:	e7fe      	b.n	801aa16 <ai_platform_api_get_network_report+0x822>
 801aa18:	4b0b      	ldr	r3, [pc, #44]	; (801aa48 <ai_platform_api_get_network_report+0x854>)
 801aa1a:	2201      	movs	r2, #1
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	601a      	str	r2, [r3, #0]
 801aa20:	680b      	ldr	r3, [r1, #0]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d1fc      	bne.n	801aa20 <ai_platform_api_get_network_report+0x82c>
 801aa26:	4b09      	ldr	r3, [pc, #36]	; (801aa4c <ai_platform_api_get_network_report+0x858>)
 801aa28:	4905      	ldr	r1, [pc, #20]	; (801aa40 <ai_platform_api_get_network_report+0x84c>)
 801aa2a:	4a06      	ldr	r2, [pc, #24]	; (801aa44 <ai_platform_api_get_network_report+0x850>)
 801aa2c:	6019      	str	r1, [r3, #0]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	4293      	cmp	r3, r2
 801aa32:	f43f ac18 	beq.w	801a266 <ai_platform_api_get_network_report+0x72>
 801aa36:	e7fe      	b.n	801aa36 <ai_platform_api_get_network_report+0x842>
 801aa38:	40023008 	.word	0x40023008
 801aa3c:	40023000 	.word	0x40023000
 801aa40:	f407a5c2 	.word	0xf407a5c2
 801aa44:	b5e8b5cd 	.word	0xb5e8b5cd
 801aa48:	58024c08 	.word	0x58024c08
 801aa4c:	58024c00 	.word	0x58024c00

0801aa50 <ai_platform_network_create>:
 801aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa54:	b082      	sub	sp, #8
 801aa56:	4606      	mov	r6, r0
 801aa58:	4615      	mov	r5, r2
 801aa5a:	461f      	mov	r7, r3
 801aa5c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 801aa60:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801aa64:	f7ff f85c 	bl	8019b20 <_ai_platform_acquire_crc>
 801aa68:	b328      	cbz	r0, 801aab6 <ai_platform_network_create+0x66>
 801aa6a:	4baa      	ldr	r3, [pc, #680]	; (801ad14 <ai_platform_network_create+0x2c4>)
 801aa6c:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 801aa70:	4602      	mov	r2, r0
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aa78:	1919      	adds	r1, r3, r4
 801aa7a:	2901      	cmp	r1, #1
 801aa7c:	d921      	bls.n	801aac2 <ai_platform_network_create+0x72>
 801aa7e:	f240 4149 	movw	r1, #1097	; 0x449
 801aa82:	428b      	cmp	r3, r1
 801aa84:	d01d      	beq.n	801aac2 <ai_platform_network_create+0x72>
 801aa86:	4ba4      	ldr	r3, [pc, #656]	; (801ad18 <ai_platform_network_create+0x2c8>)
 801aa88:	6819      	ldr	r1, [r3, #0]
 801aa8a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801aa8e:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801aa92:	d01e      	beq.n	801aad2 <ai_platform_network_create+0x82>
 801aa94:	6819      	ldr	r1, [r3, #0]
 801aa96:	f240 4483 	movw	r4, #1155	; 0x483
 801aa9a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801aa9e:	42a1      	cmp	r1, r4
 801aaa0:	f000 8085 	beq.w	801abae <ai_platform_network_create+0x15e>
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aaaa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801aaae:	f000 8157 	beq.w	801ad60 <ai_platform_network_create+0x310>
 801aab2:	f7ff f837 	bl	8019b24 <_ai_platform_release_crc>
 801aab6:	f244 1333 	movw	r3, #16691	; 0x4133
 801aaba:	4618      	mov	r0, r3
 801aabc:	b002      	add	sp, #8
 801aabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aac2:	4b96      	ldr	r3, [pc, #600]	; (801ad1c <ai_platform_network_create+0x2cc>)
 801aac4:	2118      	movs	r1, #24
 801aac6:	6019      	str	r1, [r3, #0]
 801aac8:	6819      	ldr	r1, [r3, #0]
 801aaca:	2918      	cmp	r1, #24
 801aacc:	d059      	beq.n	801ab82 <ai_platform_network_create+0x132>
 801aace:	4610      	mov	r0, r2
 801aad0:	e7ef      	b.n	801aab2 <ai_platform_network_create+0x62>
 801aad2:	4b93      	ldr	r3, [pc, #588]	; (801ad20 <ai_platform_network_create+0x2d0>)
 801aad4:	2118      	movs	r1, #24
 801aad6:	6019      	str	r1, [r3, #0]
 801aad8:	6819      	ldr	r1, [r3, #0]
 801aada:	2918      	cmp	r1, #24
 801aadc:	d1e9      	bne.n	801aab2 <ai_platform_network_create+0x62>
 801aade:	2101      	movs	r1, #1
 801aae0:	4618      	mov	r0, r3
 801aae2:	6019      	str	r1, [r3, #0]
 801aae4:	6803      	ldr	r3, [r0, #0]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d1fc      	bne.n	801aae4 <ai_platform_network_create+0x94>
 801aaea:	4610      	mov	r0, r2
 801aaec:	f7ff f81a 	bl	8019b24 <_ai_platform_release_crc>
 801aaf0:	4a8c      	ldr	r2, [pc, #560]	; (801ad24 <ai_platform_network_create+0x2d4>)
 801aaf2:	6813      	ldr	r3, [r2, #0]
 801aaf4:	f023 0301 	bic.w	r3, r3, #1
 801aaf8:	6013      	str	r3, [r2, #0]
 801aafa:	f7ff f811 	bl	8019b20 <_ai_platform_acquire_crc>
 801aafe:	4b85      	ldr	r3, [pc, #532]	; (801ad14 <ai_platform_network_create+0x2c4>)
 801ab00:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab0a:	185a      	adds	r2, r3, r1
 801ab0c:	2a01      	cmp	r2, #1
 801ab0e:	d93f      	bls.n	801ab90 <ai_platform_network_create+0x140>
 801ab10:	f240 4249 	movw	r2, #1097	; 0x449
 801ab14:	4293      	cmp	r3, r2
 801ab16:	d03b      	beq.n	801ab90 <ai_platform_network_create+0x140>
 801ab18:	4b7f      	ldr	r3, [pc, #508]	; (801ad18 <ai_platform_network_create+0x2c8>)
 801ab1a:	681a      	ldr	r2, [r3, #0]
 801ab1c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ab20:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ab24:	f000 810c 	beq.w	801ad40 <ai_platform_network_create+0x2f0>
 801ab28:	681a      	ldr	r2, [r3, #0]
 801ab2a:	f240 4183 	movw	r1, #1155	; 0x483
 801ab2e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ab32:	428a      	cmp	r2, r1
 801ab34:	f000 80de 	beq.w	801acf4 <ai_platform_network_create+0x2a4>
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab3e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ab42:	d07e      	beq.n	801ac42 <ai_platform_network_create+0x1f2>
 801ab44:	f7fe ffee 	bl	8019b24 <_ai_platform_release_crc>
 801ab48:	2e00      	cmp	r6, #0
 801ab4a:	d077      	beq.n	801ac3c <ai_platform_network_create+0x1ec>
 801ab4c:	4b76      	ldr	r3, [pc, #472]	; (801ad28 <ai_platform_network_create+0x2d8>)
 801ab4e:	602b      	str	r3, [r5, #0]
 801ab50:	6035      	str	r5, [r6, #0]
 801ab52:	f001 faff 	bl	801c154 <core_init>
 801ab56:	2800      	cmp	r0, #0
 801ab58:	d137      	bne.n	801abca <ai_platform_network_create+0x17a>
 801ab5a:	2430      	movs	r4, #48	; 0x30
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	f04f 0a10 	mov.w	sl, #16
 801ab62:	6033      	str	r3, [r6, #0]
 801ab64:	464a      	mov	r2, r9
 801ab66:	4641      	mov	r1, r8
 801ab68:	4638      	mov	r0, r7
 801ab6a:	f007 fa23 	bl	8021fb4 <ai_version_get>
 801ab6e:	2300      	movs	r3, #0
 801ab70:	6468      	str	r0, [r5, #68]	; 0x44
 801ab72:	f364 0307 	bfi	r3, r4, #0, #8
 801ab76:	f36a 231f 	bfi	r3, sl, #8, #24
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	b002      	add	sp, #8
 801ab7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab82:	2101      	movs	r1, #1
 801ab84:	4618      	mov	r0, r3
 801ab86:	6019      	str	r1, [r3, #0]
 801ab88:	6803      	ldr	r3, [r0, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d1fc      	bne.n	801ab88 <ai_platform_network_create+0x138>
 801ab8e:	e7ac      	b.n	801aaea <ai_platform_network_create+0x9a>
 801ab90:	4b62      	ldr	r3, [pc, #392]	; (801ad1c <ai_platform_network_create+0x2cc>)
 801ab92:	2201      	movs	r2, #1
 801ab94:	4619      	mov	r1, r3
 801ab96:	601a      	str	r2, [r3, #0]
 801ab98:	680b      	ldr	r3, [r1, #0]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d1fc      	bne.n	801ab98 <ai_platform_network_create+0x148>
 801ab9e:	4b63      	ldr	r3, [pc, #396]	; (801ad2c <ai_platform_network_create+0x2dc>)
 801aba0:	4963      	ldr	r1, [pc, #396]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801aba2:	4a64      	ldr	r2, [pc, #400]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801aba4:	6019      	str	r1, [r3, #0]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	4293      	cmp	r3, r2
 801abaa:	d0cb      	beq.n	801ab44 <ai_platform_network_create+0xf4>
 801abac:	e7fe      	b.n	801abac <ai_platform_network_create+0x15c>
 801abae:	4b5c      	ldr	r3, [pc, #368]	; (801ad20 <ai_platform_network_create+0x2d0>)
 801abb0:	2118      	movs	r1, #24
 801abb2:	6019      	str	r1, [r3, #0]
 801abb4:	6819      	ldr	r1, [r3, #0]
 801abb6:	2918      	cmp	r1, #24
 801abb8:	f47f af7b 	bne.w	801aab2 <ai_platform_network_create+0x62>
 801abbc:	2101      	movs	r1, #1
 801abbe:	4618      	mov	r0, r3
 801abc0:	6019      	str	r1, [r3, #0]
 801abc2:	6803      	ldr	r3, [r0, #0]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d1fc      	bne.n	801abc2 <ai_platform_network_create+0x172>
 801abc8:	e78f      	b.n	801aaea <ai_platform_network_create+0x9a>
 801abca:	4a56      	ldr	r2, [pc, #344]	; (801ad24 <ai_platform_network_create+0x2d4>)
 801abcc:	6813      	ldr	r3, [r2, #0]
 801abce:	f023 0301 	bic.w	r3, r3, #1
 801abd2:	6013      	str	r3, [r2, #0]
 801abd4:	f7fe ffa4 	bl	8019b20 <_ai_platform_acquire_crc>
 801abd8:	4b4e      	ldr	r3, [pc, #312]	; (801ad14 <ai_platform_network_create+0x2c4>)
 801abda:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801abe4:	189a      	adds	r2, r3, r2
 801abe6:	2a01      	cmp	r2, #1
 801abe8:	d975      	bls.n	801acd6 <ai_platform_network_create+0x286>
 801abea:	f240 4249 	movw	r2, #1097	; 0x449
 801abee:	4293      	cmp	r3, r2
 801abf0:	d071      	beq.n	801acd6 <ai_platform_network_create+0x286>
 801abf2:	4b49      	ldr	r3, [pc, #292]	; (801ad18 <ai_platform_network_create+0x2c8>)
 801abf4:	681a      	ldr	r2, [r3, #0]
 801abf6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801abfa:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801abfe:	d05b      	beq.n	801acb8 <ai_platform_network_create+0x268>
 801ac00:	681a      	ldr	r2, [r3, #0]
 801ac02:	f240 4183 	movw	r1, #1155	; 0x483
 801ac06:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ac0a:	428a      	cmp	r2, r1
 801ac0c:	d045      	beq.n	801ac9a <ai_platform_network_create+0x24a>
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac14:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ac18:	d030      	beq.n	801ac7c <ai_platform_network_create+0x22c>
 801ac1a:	f7fe ff83 	bl	8019b24 <_ai_platform_release_crc>
 801ac1e:	2200      	movs	r2, #0
 801ac20:	4641      	mov	r1, r8
 801ac22:	4638      	mov	r0, r7
 801ac24:	f007 f9c6 	bl	8021fb4 <ai_version_get>
 801ac28:	4604      	mov	r4, r0
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	2105      	movs	r1, #5
 801ac2e:	2001      	movs	r0, #1
 801ac30:	f007 f9c0 	bl	8021fb4 <ai_version_get>
 801ac34:	4284      	cmp	r4, r0
 801ac36:	d014      	beq.n	801ac62 <ai_platform_network_create+0x212>
 801ac38:	2401      	movs	r4, #1
 801ac3a:	e78f      	b.n	801ab5c <ai_platform_network_create+0x10c>
 801ac3c:	f241 0310 	movw	r3, #4112	; 0x1010
 801ac40:	e73b      	b.n	801aaba <ai_platform_network_create+0x6a>
 801ac42:	4b36      	ldr	r3, [pc, #216]	; (801ad1c <ai_platform_network_create+0x2cc>)
 801ac44:	2201      	movs	r2, #1
 801ac46:	4619      	mov	r1, r3
 801ac48:	601a      	str	r2, [r3, #0]
 801ac4a:	680b      	ldr	r3, [r1, #0]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d1fc      	bne.n	801ac4a <ai_platform_network_create+0x1fa>
 801ac50:	4b36      	ldr	r3, [pc, #216]	; (801ad2c <ai_platform_network_create+0x2dc>)
 801ac52:	4937      	ldr	r1, [pc, #220]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801ac54:	4a37      	ldr	r2, [pc, #220]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801ac56:	6019      	str	r1, [r3, #0]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	f43f af72 	beq.w	801ab44 <ai_platform_network_create+0xf4>
 801ac60:	e7fe      	b.n	801ac60 <ai_platform_network_create+0x210>
 801ac62:	4b35      	ldr	r3, [pc, #212]	; (801ad38 <ai_platform_network_create+0x2e8>)
 801ac64:	a802      	add	r0, sp, #8
 801ac66:	f840 3d04 	str.w	r3, [r0, #-4]!
 801ac6a:	f002 f8eb 	bl	801ce44 <ai_check_custom_types>
 801ac6e:	b118      	cbz	r0, 801ac78 <ai_platform_network_create+0x228>
 801ac70:	f04f 0a00 	mov.w	sl, #0
 801ac74:	4654      	mov	r4, sl
 801ac76:	e775      	b.n	801ab64 <ai_platform_network_create+0x114>
 801ac78:	2402      	movs	r4, #2
 801ac7a:	e76f      	b.n	801ab5c <ai_platform_network_create+0x10c>
 801ac7c:	4b27      	ldr	r3, [pc, #156]	; (801ad1c <ai_platform_network_create+0x2cc>)
 801ac7e:	2201      	movs	r2, #1
 801ac80:	4619      	mov	r1, r3
 801ac82:	601a      	str	r2, [r3, #0]
 801ac84:	680b      	ldr	r3, [r1, #0]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d1fc      	bne.n	801ac84 <ai_platform_network_create+0x234>
 801ac8a:	4b28      	ldr	r3, [pc, #160]	; (801ad2c <ai_platform_network_create+0x2dc>)
 801ac8c:	4928      	ldr	r1, [pc, #160]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801ac8e:	4a29      	ldr	r2, [pc, #164]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801ac90:	6019      	str	r1, [r3, #0]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	4293      	cmp	r3, r2
 801ac96:	d0c0      	beq.n	801ac1a <ai_platform_network_create+0x1ca>
 801ac98:	e7fe      	b.n	801ac98 <ai_platform_network_create+0x248>
 801ac9a:	4b21      	ldr	r3, [pc, #132]	; (801ad20 <ai_platform_network_create+0x2d0>)
 801ac9c:	2201      	movs	r2, #1
 801ac9e:	4619      	mov	r1, r3
 801aca0:	601a      	str	r2, [r3, #0]
 801aca2:	680b      	ldr	r3, [r1, #0]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d1fc      	bne.n	801aca2 <ai_platform_network_create+0x252>
 801aca8:	4b24      	ldr	r3, [pc, #144]	; (801ad3c <ai_platform_network_create+0x2ec>)
 801acaa:	4921      	ldr	r1, [pc, #132]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801acac:	4a21      	ldr	r2, [pc, #132]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801acae:	6019      	str	r1, [r3, #0]
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	4293      	cmp	r3, r2
 801acb4:	d0b1      	beq.n	801ac1a <ai_platform_network_create+0x1ca>
 801acb6:	e7fe      	b.n	801acb6 <ai_platform_network_create+0x266>
 801acb8:	4b19      	ldr	r3, [pc, #100]	; (801ad20 <ai_platform_network_create+0x2d0>)
 801acba:	2201      	movs	r2, #1
 801acbc:	4619      	mov	r1, r3
 801acbe:	601a      	str	r2, [r3, #0]
 801acc0:	680b      	ldr	r3, [r1, #0]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d1fc      	bne.n	801acc0 <ai_platform_network_create+0x270>
 801acc6:	4b1d      	ldr	r3, [pc, #116]	; (801ad3c <ai_platform_network_create+0x2ec>)
 801acc8:	4919      	ldr	r1, [pc, #100]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801acca:	4a1a      	ldr	r2, [pc, #104]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801accc:	6019      	str	r1, [r3, #0]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	4293      	cmp	r3, r2
 801acd2:	d0a2      	beq.n	801ac1a <ai_platform_network_create+0x1ca>
 801acd4:	e7fe      	b.n	801acd4 <ai_platform_network_create+0x284>
 801acd6:	4b11      	ldr	r3, [pc, #68]	; (801ad1c <ai_platform_network_create+0x2cc>)
 801acd8:	2201      	movs	r2, #1
 801acda:	4619      	mov	r1, r3
 801acdc:	601a      	str	r2, [r3, #0]
 801acde:	680b      	ldr	r3, [r1, #0]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d1fc      	bne.n	801acde <ai_platform_network_create+0x28e>
 801ace4:	4b11      	ldr	r3, [pc, #68]	; (801ad2c <ai_platform_network_create+0x2dc>)
 801ace6:	4912      	ldr	r1, [pc, #72]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801ace8:	4a12      	ldr	r2, [pc, #72]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801acea:	6019      	str	r1, [r3, #0]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	4293      	cmp	r3, r2
 801acf0:	d093      	beq.n	801ac1a <ai_platform_network_create+0x1ca>
 801acf2:	e7fe      	b.n	801acf2 <ai_platform_network_create+0x2a2>
 801acf4:	4b0a      	ldr	r3, [pc, #40]	; (801ad20 <ai_platform_network_create+0x2d0>)
 801acf6:	2201      	movs	r2, #1
 801acf8:	4619      	mov	r1, r3
 801acfa:	601a      	str	r2, [r3, #0]
 801acfc:	680b      	ldr	r3, [r1, #0]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d1fc      	bne.n	801acfc <ai_platform_network_create+0x2ac>
 801ad02:	4b0e      	ldr	r3, [pc, #56]	; (801ad3c <ai_platform_network_create+0x2ec>)
 801ad04:	490a      	ldr	r1, [pc, #40]	; (801ad30 <ai_platform_network_create+0x2e0>)
 801ad06:	4a0b      	ldr	r2, [pc, #44]	; (801ad34 <ai_platform_network_create+0x2e4>)
 801ad08:	6019      	str	r1, [r3, #0]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	4293      	cmp	r3, r2
 801ad0e:	f43f af19 	beq.w	801ab44 <ai_platform_network_create+0xf4>
 801ad12:	e7fe      	b.n	801ad12 <ai_platform_network_create+0x2c2>
 801ad14:	e0042000 	.word	0xe0042000
 801ad18:	5c001000 	.word	0x5c001000
 801ad1c:	40023008 	.word	0x40023008
 801ad20:	58024c08 	.word	0x58024c08
 801ad24:	e0002000 	.word	0xe0002000
 801ad28:	a1c00100 	.word	0xa1c00100
 801ad2c:	40023000 	.word	0x40023000
 801ad30:	f407a5c2 	.word	0xf407a5c2
 801ad34:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad38:	84048403 	.word	0x84048403
 801ad3c:	58024c00 	.word	0x58024c00
 801ad40:	4b0e      	ldr	r3, [pc, #56]	; (801ad7c <ai_platform_network_create+0x32c>)
 801ad42:	2201      	movs	r2, #1
 801ad44:	4619      	mov	r1, r3
 801ad46:	601a      	str	r2, [r3, #0]
 801ad48:	680b      	ldr	r3, [r1, #0]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d1fc      	bne.n	801ad48 <ai_platform_network_create+0x2f8>
 801ad4e:	4b0c      	ldr	r3, [pc, #48]	; (801ad80 <ai_platform_network_create+0x330>)
 801ad50:	490c      	ldr	r1, [pc, #48]	; (801ad84 <ai_platform_network_create+0x334>)
 801ad52:	4a0d      	ldr	r2, [pc, #52]	; (801ad88 <ai_platform_network_create+0x338>)
 801ad54:	6019      	str	r1, [r3, #0]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	f43f aef3 	beq.w	801ab44 <ai_platform_network_create+0xf4>
 801ad5e:	e7fe      	b.n	801ad5e <ai_platform_network_create+0x30e>
 801ad60:	4b0a      	ldr	r3, [pc, #40]	; (801ad8c <ai_platform_network_create+0x33c>)
 801ad62:	2118      	movs	r1, #24
 801ad64:	6019      	str	r1, [r3, #0]
 801ad66:	6819      	ldr	r1, [r3, #0]
 801ad68:	2918      	cmp	r1, #24
 801ad6a:	f47f aea2 	bne.w	801aab2 <ai_platform_network_create+0x62>
 801ad6e:	2101      	movs	r1, #1
 801ad70:	4618      	mov	r0, r3
 801ad72:	6019      	str	r1, [r3, #0]
 801ad74:	6803      	ldr	r3, [r0, #0]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d1fc      	bne.n	801ad74 <ai_platform_network_create+0x324>
 801ad7a:	e6b6      	b.n	801aaea <ai_platform_network_create+0x9a>
 801ad7c:	58024c08 	.word	0x58024c08
 801ad80:	58024c00 	.word	0x58024c00
 801ad84:	f407a5c2 	.word	0xf407a5c2
 801ad88:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad8c:	40023008 	.word	0x40023008

0801ad90 <ai_platform_network_destroy>:
 801ad90:	b510      	push	{r4, lr}
 801ad92:	4604      	mov	r4, r0
 801ad94:	b118      	cbz	r0, 801ad9e <ai_platform_network_destroy+0xe>
 801ad96:	4b6d      	ldr	r3, [pc, #436]	; (801af4c <ai_platform_network_destroy+0x1bc>)
 801ad98:	6802      	ldr	r2, [r0, #0]
 801ad9a:	429a      	cmp	r2, r3
 801ad9c:	d03c      	beq.n	801ae18 <ai_platform_network_destroy+0x88>
 801ad9e:	4a6c      	ldr	r2, [pc, #432]	; (801af50 <ai_platform_network_destroy+0x1c0>)
 801ada0:	6813      	ldr	r3, [r2, #0]
 801ada2:	f023 0301 	bic.w	r3, r3, #1
 801ada6:	6013      	str	r3, [r2, #0]
 801ada8:	f7fe feba 	bl	8019b20 <_ai_platform_acquire_crc>
 801adac:	4b69      	ldr	r3, [pc, #420]	; (801af54 <ai_platform_network_destroy+0x1c4>)
 801adae:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801adb8:	185a      	adds	r2, r3, r1
 801adba:	2a01      	cmp	r2, #1
 801adbc:	d91d      	bls.n	801adfa <ai_platform_network_destroy+0x6a>
 801adbe:	f240 4249 	movw	r2, #1097	; 0x449
 801adc2:	4293      	cmp	r3, r2
 801adc4:	d019      	beq.n	801adfa <ai_platform_network_destroy+0x6a>
 801adc6:	4b64      	ldr	r3, [pc, #400]	; (801af58 <ai_platform_network_destroy+0x1c8>)
 801adc8:	681a      	ldr	r2, [r3, #0]
 801adca:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801adce:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801add2:	f000 80ab 	beq.w	801af2c <ai_platform_network_destroy+0x19c>
 801add6:	681a      	ldr	r2, [r3, #0]
 801add8:	f240 4183 	movw	r1, #1155	; 0x483
 801addc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ade0:	428a      	cmp	r2, r1
 801ade2:	f000 8093 	beq.w	801af0c <ai_platform_network_destroy+0x17c>
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801adec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801adf0:	d041      	beq.n	801ae76 <ai_platform_network_destroy+0xe6>
 801adf2:	f7fe fe97 	bl	8019b24 <_ai_platform_release_crc>
 801adf6:	4620      	mov	r0, r4
 801adf8:	bd10      	pop	{r4, pc}
 801adfa:	4b58      	ldr	r3, [pc, #352]	; (801af5c <ai_platform_network_destroy+0x1cc>)
 801adfc:	2201      	movs	r2, #1
 801adfe:	4619      	mov	r1, r3
 801ae00:	601a      	str	r2, [r3, #0]
 801ae02:	680b      	ldr	r3, [r1, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d1fc      	bne.n	801ae02 <ai_platform_network_destroy+0x72>
 801ae08:	4b55      	ldr	r3, [pc, #340]	; (801af60 <ai_platform_network_destroy+0x1d0>)
 801ae0a:	4956      	ldr	r1, [pc, #344]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801ae0c:	4a56      	ldr	r2, [pc, #344]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801ae0e:	6019      	str	r1, [r3, #0]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	4293      	cmp	r3, r2
 801ae14:	d0ed      	beq.n	801adf2 <ai_platform_network_destroy+0x62>
 801ae16:	e7fe      	b.n	801ae16 <ai_platform_network_destroy+0x86>
 801ae18:	4a4d      	ldr	r2, [pc, #308]	; (801af50 <ai_platform_network_destroy+0x1c0>)
 801ae1a:	6813      	ldr	r3, [r2, #0]
 801ae1c:	f023 0301 	bic.w	r3, r3, #1
 801ae20:	6013      	str	r3, [r2, #0]
 801ae22:	f7fe fe7d 	bl	8019b20 <_ai_platform_acquire_crc>
 801ae26:	4b4b      	ldr	r3, [pc, #300]	; (801af54 <ai_platform_network_destroy+0x1c4>)
 801ae28:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ae32:	189a      	adds	r2, r3, r2
 801ae34:	2a01      	cmp	r2, #1
 801ae36:	d95a      	bls.n	801aeee <ai_platform_network_destroy+0x15e>
 801ae38:	f240 4249 	movw	r2, #1097	; 0x449
 801ae3c:	4293      	cmp	r3, r2
 801ae3e:	d056      	beq.n	801aeee <ai_platform_network_destroy+0x15e>
 801ae40:	4b45      	ldr	r3, [pc, #276]	; (801af58 <ai_platform_network_destroy+0x1c8>)
 801ae42:	681a      	ldr	r2, [r3, #0]
 801ae44:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ae48:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ae4c:	d040      	beq.n	801aed0 <ai_platform_network_destroy+0x140>
 801ae4e:	681a      	ldr	r2, [r3, #0]
 801ae50:	f240 4183 	movw	r1, #1155	; 0x483
 801ae54:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ae58:	428a      	cmp	r2, r1
 801ae5a:	d02a      	beq.n	801aeb2 <ai_platform_network_destroy+0x122>
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ae62:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ae66:	d015      	beq.n	801ae94 <ai_platform_network_destroy+0x104>
 801ae68:	f7fe fe5c 	bl	8019b24 <_ai_platform_release_crc>
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	2400      	movs	r4, #0
 801ae70:	f002 f888 	bl	801cf84 <ai_layers_destroy_all>
 801ae74:	e7bf      	b.n	801adf6 <ai_platform_network_destroy+0x66>
 801ae76:	4b39      	ldr	r3, [pc, #228]	; (801af5c <ai_platform_network_destroy+0x1cc>)
 801ae78:	2201      	movs	r2, #1
 801ae7a:	4619      	mov	r1, r3
 801ae7c:	601a      	str	r2, [r3, #0]
 801ae7e:	680b      	ldr	r3, [r1, #0]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d1fc      	bne.n	801ae7e <ai_platform_network_destroy+0xee>
 801ae84:	4b36      	ldr	r3, [pc, #216]	; (801af60 <ai_platform_network_destroy+0x1d0>)
 801ae86:	4937      	ldr	r1, [pc, #220]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801ae88:	4a37      	ldr	r2, [pc, #220]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801ae8a:	6019      	str	r1, [r3, #0]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	d0af      	beq.n	801adf2 <ai_platform_network_destroy+0x62>
 801ae92:	e7fe      	b.n	801ae92 <ai_platform_network_destroy+0x102>
 801ae94:	4b31      	ldr	r3, [pc, #196]	; (801af5c <ai_platform_network_destroy+0x1cc>)
 801ae96:	2201      	movs	r2, #1
 801ae98:	4619      	mov	r1, r3
 801ae9a:	601a      	str	r2, [r3, #0]
 801ae9c:	680b      	ldr	r3, [r1, #0]
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d1fc      	bne.n	801ae9c <ai_platform_network_destroy+0x10c>
 801aea2:	4b2f      	ldr	r3, [pc, #188]	; (801af60 <ai_platform_network_destroy+0x1d0>)
 801aea4:	492f      	ldr	r1, [pc, #188]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801aea6:	4a30      	ldr	r2, [pc, #192]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801aea8:	6019      	str	r1, [r3, #0]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	4293      	cmp	r3, r2
 801aeae:	d0db      	beq.n	801ae68 <ai_platform_network_destroy+0xd8>
 801aeb0:	e7fe      	b.n	801aeb0 <ai_platform_network_destroy+0x120>
 801aeb2:	4b2e      	ldr	r3, [pc, #184]	; (801af6c <ai_platform_network_destroy+0x1dc>)
 801aeb4:	2201      	movs	r2, #1
 801aeb6:	4619      	mov	r1, r3
 801aeb8:	601a      	str	r2, [r3, #0]
 801aeba:	680b      	ldr	r3, [r1, #0]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d1fc      	bne.n	801aeba <ai_platform_network_destroy+0x12a>
 801aec0:	4b2b      	ldr	r3, [pc, #172]	; (801af70 <ai_platform_network_destroy+0x1e0>)
 801aec2:	4928      	ldr	r1, [pc, #160]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801aec4:	4a28      	ldr	r2, [pc, #160]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801aec6:	6019      	str	r1, [r3, #0]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	4293      	cmp	r3, r2
 801aecc:	d0cc      	beq.n	801ae68 <ai_platform_network_destroy+0xd8>
 801aece:	e7fe      	b.n	801aece <ai_platform_network_destroy+0x13e>
 801aed0:	4b26      	ldr	r3, [pc, #152]	; (801af6c <ai_platform_network_destroy+0x1dc>)
 801aed2:	2201      	movs	r2, #1
 801aed4:	4619      	mov	r1, r3
 801aed6:	601a      	str	r2, [r3, #0]
 801aed8:	680b      	ldr	r3, [r1, #0]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d1fc      	bne.n	801aed8 <ai_platform_network_destroy+0x148>
 801aede:	4b24      	ldr	r3, [pc, #144]	; (801af70 <ai_platform_network_destroy+0x1e0>)
 801aee0:	4920      	ldr	r1, [pc, #128]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801aee2:	4a21      	ldr	r2, [pc, #132]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801aee4:	6019      	str	r1, [r3, #0]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	4293      	cmp	r3, r2
 801aeea:	d0bd      	beq.n	801ae68 <ai_platform_network_destroy+0xd8>
 801aeec:	e7fe      	b.n	801aeec <ai_platform_network_destroy+0x15c>
 801aeee:	4b1b      	ldr	r3, [pc, #108]	; (801af5c <ai_platform_network_destroy+0x1cc>)
 801aef0:	2201      	movs	r2, #1
 801aef2:	4619      	mov	r1, r3
 801aef4:	601a      	str	r2, [r3, #0]
 801aef6:	680b      	ldr	r3, [r1, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d1fc      	bne.n	801aef6 <ai_platform_network_destroy+0x166>
 801aefc:	4b18      	ldr	r3, [pc, #96]	; (801af60 <ai_platform_network_destroy+0x1d0>)
 801aefe:	4919      	ldr	r1, [pc, #100]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801af00:	4a19      	ldr	r2, [pc, #100]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801af02:	6019      	str	r1, [r3, #0]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	4293      	cmp	r3, r2
 801af08:	d0ae      	beq.n	801ae68 <ai_platform_network_destroy+0xd8>
 801af0a:	e7fe      	b.n	801af0a <ai_platform_network_destroy+0x17a>
 801af0c:	4b17      	ldr	r3, [pc, #92]	; (801af6c <ai_platform_network_destroy+0x1dc>)
 801af0e:	2201      	movs	r2, #1
 801af10:	4619      	mov	r1, r3
 801af12:	601a      	str	r2, [r3, #0]
 801af14:	680b      	ldr	r3, [r1, #0]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d1fc      	bne.n	801af14 <ai_platform_network_destroy+0x184>
 801af1a:	4b15      	ldr	r3, [pc, #84]	; (801af70 <ai_platform_network_destroy+0x1e0>)
 801af1c:	4911      	ldr	r1, [pc, #68]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801af1e:	4a12      	ldr	r2, [pc, #72]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801af20:	6019      	str	r1, [r3, #0]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	4293      	cmp	r3, r2
 801af26:	f43f af64 	beq.w	801adf2 <ai_platform_network_destroy+0x62>
 801af2a:	e7fe      	b.n	801af2a <ai_platform_network_destroy+0x19a>
 801af2c:	4b0f      	ldr	r3, [pc, #60]	; (801af6c <ai_platform_network_destroy+0x1dc>)
 801af2e:	2201      	movs	r2, #1
 801af30:	4619      	mov	r1, r3
 801af32:	601a      	str	r2, [r3, #0]
 801af34:	680b      	ldr	r3, [r1, #0]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d1fc      	bne.n	801af34 <ai_platform_network_destroy+0x1a4>
 801af3a:	4b0d      	ldr	r3, [pc, #52]	; (801af70 <ai_platform_network_destroy+0x1e0>)
 801af3c:	4909      	ldr	r1, [pc, #36]	; (801af64 <ai_platform_network_destroy+0x1d4>)
 801af3e:	4a0a      	ldr	r2, [pc, #40]	; (801af68 <ai_platform_network_destroy+0x1d8>)
 801af40:	6019      	str	r1, [r3, #0]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	4293      	cmp	r3, r2
 801af46:	f43f af54 	beq.w	801adf2 <ai_platform_network_destroy+0x62>
 801af4a:	e7fe      	b.n	801af4a <ai_platform_network_destroy+0x1ba>
 801af4c:	a1c00100 	.word	0xa1c00100
 801af50:	e0002000 	.word	0xe0002000
 801af54:	e0042000 	.word	0xe0042000
 801af58:	5c001000 	.word	0x5c001000
 801af5c:	40023008 	.word	0x40023008
 801af60:	40023000 	.word	0x40023000
 801af64:	f407a5c2 	.word	0xf407a5c2
 801af68:	b5e8b5cd 	.word	0xb5e8b5cd
 801af6c:	58024c08 	.word	0x58024c08
 801af70:	58024c00 	.word	0x58024c00

0801af74 <ai_platform_network_init>:
 801af74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af78:	2800      	cmp	r0, #0
 801af7a:	d05a      	beq.n	801b032 <ai_platform_network_init+0xbe>
 801af7c:	4ba7      	ldr	r3, [pc, #668]	; (801b21c <ai_platform_network_init+0x2a8>)
 801af7e:	4604      	mov	r4, r0
 801af80:	6802      	ldr	r2, [r0, #0]
 801af82:	429a      	cmp	r2, r3
 801af84:	d155      	bne.n	801b032 <ai_platform_network_init+0xbe>
 801af86:	4aa6      	ldr	r2, [pc, #664]	; (801b220 <ai_platform_network_init+0x2ac>)
 801af88:	460d      	mov	r5, r1
 801af8a:	6813      	ldr	r3, [r2, #0]
 801af8c:	f023 0301 	bic.w	r3, r3, #1
 801af90:	6013      	str	r3, [r2, #0]
 801af92:	f7fe fdc5 	bl	8019b20 <_ai_platform_acquire_crc>
 801af96:	4ba3      	ldr	r3, [pc, #652]	; (801b224 <ai_platform_network_init+0x2b0>)
 801af98:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801afa2:	189a      	adds	r2, r3, r2
 801afa4:	2a01      	cmp	r2, #1
 801afa6:	d935      	bls.n	801b014 <ai_platform_network_init+0xa0>
 801afa8:	f240 4249 	movw	r2, #1097	; 0x449
 801afac:	4293      	cmp	r3, r2
 801afae:	d031      	beq.n	801b014 <ai_platform_network_init+0xa0>
 801afb0:	4b9d      	ldr	r3, [pc, #628]	; (801b228 <ai_platform_network_init+0x2b4>)
 801afb2:	681a      	ldr	r2, [r3, #0]
 801afb4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801afb8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801afbc:	f000 8154 	beq.w	801b268 <ai_platform_network_init+0x2f4>
 801afc0:	681a      	ldr	r2, [r3, #0]
 801afc2:	f240 4183 	movw	r1, #1155	; 0x483
 801afc6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801afca:	428a      	cmp	r2, r1
 801afcc:	f000 813c 	beq.w	801b248 <ai_platform_network_init+0x2d4>
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801afd6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801afda:	f000 8107 	beq.w	801b1ec <ai_platform_network_init+0x278>
 801afde:	f7fe fda1 	bl	8019b24 <_ai_platform_release_crc>
 801afe2:	2d00      	cmp	r5, #0
 801afe4:	f000 8112 	beq.w	801b20c <ai_platform_network_init+0x298>
 801afe8:	4b90      	ldr	r3, [pc, #576]	; (801b22c <ai_platform_network_init+0x2b8>)
 801afea:	682a      	ldr	r2, [r5, #0]
 801afec:	429a      	cmp	r2, r3
 801afee:	d14e      	bne.n	801b08e <ai_platform_network_init+0x11a>
 801aff0:	6928      	ldr	r0, [r5, #16]
 801aff2:	89ab      	ldrh	r3, [r5, #12]
 801aff4:	89ee      	ldrh	r6, [r5, #14]
 801aff6:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 801affa:	62a0      	str	r0, [r4, #40]	; 0x28
 801affc:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801b000:	2203      	movs	r2, #3
 801b002:	84e6      	strh	r6, [r4, #38]	; 0x26
 801b004:	84a3      	strh	r3, [r4, #36]	; 0x24
 801b006:	4620      	mov	r0, r4
 801b008:	60e2      	str	r2, [r4, #12]
 801b00a:	f001 ff45 	bl	801ce98 <ai_layers_init_all>
 801b00e:	4620      	mov	r0, r4
 801b010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b014:	4b86      	ldr	r3, [pc, #536]	; (801b230 <ai_platform_network_init+0x2bc>)
 801b016:	2201      	movs	r2, #1
 801b018:	4619      	mov	r1, r3
 801b01a:	601a      	str	r2, [r3, #0]
 801b01c:	680b      	ldr	r3, [r1, #0]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d1fc      	bne.n	801b01c <ai_platform_network_init+0xa8>
 801b022:	4b84      	ldr	r3, [pc, #528]	; (801b234 <ai_platform_network_init+0x2c0>)
 801b024:	4984      	ldr	r1, [pc, #528]	; (801b238 <ai_platform_network_init+0x2c4>)
 801b026:	4a85      	ldr	r2, [pc, #532]	; (801b23c <ai_platform_network_init+0x2c8>)
 801b028:	6019      	str	r1, [r3, #0]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d0d6      	beq.n	801afde <ai_platform_network_init+0x6a>
 801b030:	e7fe      	b.n	801b030 <ai_platform_network_init+0xbc>
 801b032:	4a7b      	ldr	r2, [pc, #492]	; (801b220 <ai_platform_network_init+0x2ac>)
 801b034:	6813      	ldr	r3, [r2, #0]
 801b036:	f023 0301 	bic.w	r3, r3, #1
 801b03a:	6013      	str	r3, [r2, #0]
 801b03c:	f7fe fd70 	bl	8019b20 <_ai_platform_acquire_crc>
 801b040:	4b78      	ldr	r3, [pc, #480]	; (801b224 <ai_platform_network_init+0x2b0>)
 801b042:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b04c:	185a      	adds	r2, r3, r1
 801b04e:	2a01      	cmp	r2, #1
 801b050:	d93f      	bls.n	801b0d2 <ai_platform_network_init+0x15e>
 801b052:	f240 4249 	movw	r2, #1097	; 0x449
 801b056:	4293      	cmp	r3, r2
 801b058:	d03b      	beq.n	801b0d2 <ai_platform_network_init+0x15e>
 801b05a:	4b73      	ldr	r3, [pc, #460]	; (801b228 <ai_platform_network_init+0x2b4>)
 801b05c:	681a      	ldr	r2, [r3, #0]
 801b05e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b062:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b066:	f000 80a5 	beq.w	801b1b4 <ai_platform_network_init+0x240>
 801b06a:	681a      	ldr	r2, [r3, #0]
 801b06c:	f240 4183 	movw	r1, #1155	; 0x483
 801b070:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b074:	428a      	cmp	r2, r1
 801b076:	f000 808d 	beq.w	801b194 <ai_platform_network_init+0x220>
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b080:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b084:	d076      	beq.n	801b174 <ai_platform_network_init+0x200>
 801b086:	f7fe fd4d 	bl	8019b24 <_ai_platform_release_crc>
 801b08a:	2000      	movs	r0, #0
 801b08c:	e7c0      	b.n	801b010 <ai_platform_network_init+0x9c>
 801b08e:	2101      	movs	r1, #1
 801b090:	4628      	mov	r0, r5
 801b092:	f105 081c 	add.w	r8, r5, #28
 801b096:	686f      	ldr	r7, [r5, #4]
 801b098:	f7fe fd08 	bl	8019aac <ai_buffer_get_size>
 801b09c:	4681      	mov	r9, r0
 801b09e:	2101      	movs	r1, #1
 801b0a0:	4640      	mov	r0, r8
 801b0a2:	6a2e      	ldr	r6, [r5, #32]
 801b0a4:	f7fe fd02 	bl	8019aac <ai_buffer_get_size>
 801b0a8:	f1b9 0f00 	cmp.w	r9, #0
 801b0ac:	d020      	beq.n	801b0f0 <ai_platform_network_init+0x17c>
 801b0ae:	2800      	cmp	r0, #0
 801b0b0:	f040 8090 	bne.w	801b1d4 <ai_platform_network_init+0x260>
 801b0b4:	4680      	mov	r8, r0
 801b0b6:	4606      	mov	r6, r0
 801b0b8:	2f00      	cmp	r7, #0
 801b0ba:	f000 808f 	beq.w	801b1dc <ai_platform_network_init+0x268>
 801b0be:	8be7      	ldrh	r7, [r4, #30]
 801b0c0:	bb7f      	cbnz	r7, 801b122 <ai_platform_network_init+0x1ae>
 801b0c2:	f104 0010 	add.w	r0, r4, #16
 801b0c6:	2212      	movs	r2, #18
 801b0c8:	2116      	movs	r1, #22
 801b0ca:	f001 f845 	bl	801c158 <core_set_error>
 801b0ce:	4638      	mov	r0, r7
 801b0d0:	e79e      	b.n	801b010 <ai_platform_network_init+0x9c>
 801b0d2:	4b57      	ldr	r3, [pc, #348]	; (801b230 <ai_platform_network_init+0x2bc>)
 801b0d4:	2201      	movs	r2, #1
 801b0d6:	4619      	mov	r1, r3
 801b0d8:	601a      	str	r2, [r3, #0]
 801b0da:	680b      	ldr	r3, [r1, #0]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d1fc      	bne.n	801b0da <ai_platform_network_init+0x166>
 801b0e0:	4b54      	ldr	r3, [pc, #336]	; (801b234 <ai_platform_network_init+0x2c0>)
 801b0e2:	4955      	ldr	r1, [pc, #340]	; (801b238 <ai_platform_network_init+0x2c4>)
 801b0e4:	4a55      	ldr	r2, [pc, #340]	; (801b23c <ai_platform_network_init+0x2c8>)
 801b0e6:	6019      	str	r1, [r3, #0]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4293      	cmp	r3, r2
 801b0ec:	d0cb      	beq.n	801b086 <ai_platform_network_init+0x112>
 801b0ee:	e7fe      	b.n	801b0ee <ai_platform_network_init+0x17a>
 801b0f0:	b970      	cbnz	r0, 801b110 <ai_platform_network_init+0x19c>
 801b0f2:	4680      	mov	r8, r0
 801b0f4:	4606      	mov	r6, r0
 801b0f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	42b3      	cmp	r3, r6
 801b0fc:	61e2      	str	r2, [r4, #28]
 801b0fe:	d21e      	bcs.n	801b13e <ai_platform_network_init+0x1ca>
 801b100:	f104 0010 	add.w	r0, r4, #16
 801b104:	2213      	movs	r2, #19
 801b106:	2116      	movs	r1, #22
 801b108:	f001 f826 	bl	801c158 <core_set_error>
 801b10c:	2000      	movs	r0, #0
 801b10e:	e77f      	b.n	801b010 <ai_platform_network_init+0x9c>
 801b110:	bb66      	cbnz	r6, 801b16c <ai_platform_network_init+0x1f8>
 801b112:	f104 0010 	add.w	r0, r4, #16
 801b116:	2213      	movs	r2, #19
 801b118:	2110      	movs	r1, #16
 801b11a:	f001 f81d 	bl	801c158 <core_set_error>
 801b11e:	2000      	movs	r0, #0
 801b120:	e776      	b.n	801b010 <ai_platform_network_init+0x9c>
 801b122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b124:	6a27      	ldr	r7, [r4, #32]
 801b126:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801b12a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b12c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b130:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801b134:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801b136:	f8c4 c01c 	str.w	ip, [r4, #28]
 801b13a:	42b3      	cmp	r3, r6
 801b13c:	d3e0      	bcc.n	801b100 <ai_platform_network_init+0x18c>
 801b13e:	b1be      	cbz	r6, 801b170 <ai_platform_network_init+0x1fc>
 801b140:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801b144:	f04f 0e00 	mov.w	lr, #0
 801b148:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801b14c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801b14e:	eb08 070e 	add.w	r7, r8, lr
 801b152:	4475      	add	r5, lr
 801b154:	f10e 0e1c 	add.w	lr, lr, #28
 801b158:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b15a:	45f4      	cmp	ip, lr
 801b15c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b15e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b162:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801b166:	d1f1      	bne.n	801b14c <ai_platform_network_init+0x1d8>
 801b168:	2300      	movs	r3, #0
 801b16a:	e749      	b.n	801b000 <ai_platform_network_init+0x8c>
 801b16c:	2601      	movs	r6, #1
 801b16e:	e7c2      	b.n	801b0f6 <ai_platform_network_init+0x182>
 801b170:	4633      	mov	r3, r6
 801b172:	e745      	b.n	801b000 <ai_platform_network_init+0x8c>
 801b174:	4b2e      	ldr	r3, [pc, #184]	; (801b230 <ai_platform_network_init+0x2bc>)
 801b176:	2201      	movs	r2, #1
 801b178:	4619      	mov	r1, r3
 801b17a:	601a      	str	r2, [r3, #0]
 801b17c:	680b      	ldr	r3, [r1, #0]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d1fc      	bne.n	801b17c <ai_platform_network_init+0x208>
 801b182:	4b2c      	ldr	r3, [pc, #176]	; (801b234 <ai_platform_network_init+0x2c0>)
 801b184:	492c      	ldr	r1, [pc, #176]	; (801b238 <ai_platform_network_init+0x2c4>)
 801b186:	4a2d      	ldr	r2, [pc, #180]	; (801b23c <ai_platform_network_init+0x2c8>)
 801b188:	6019      	str	r1, [r3, #0]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	4293      	cmp	r3, r2
 801b18e:	f43f af7a 	beq.w	801b086 <ai_platform_network_init+0x112>
 801b192:	e7fe      	b.n	801b192 <ai_platform_network_init+0x21e>
 801b194:	4b2a      	ldr	r3, [pc, #168]	; (801b240 <ai_platform_network_init+0x2cc>)
 801b196:	2201      	movs	r2, #1
 801b198:	4619      	mov	r1, r3
 801b19a:	601a      	str	r2, [r3, #0]
 801b19c:	680b      	ldr	r3, [r1, #0]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d1fc      	bne.n	801b19c <ai_platform_network_init+0x228>
 801b1a2:	4b28      	ldr	r3, [pc, #160]	; (801b244 <ai_platform_network_init+0x2d0>)
 801b1a4:	4924      	ldr	r1, [pc, #144]	; (801b238 <ai_platform_network_init+0x2c4>)
 801b1a6:	4a25      	ldr	r2, [pc, #148]	; (801b23c <ai_platform_network_init+0x2c8>)
 801b1a8:	6019      	str	r1, [r3, #0]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	4293      	cmp	r3, r2
 801b1ae:	f43f af6a 	beq.w	801b086 <ai_platform_network_init+0x112>
 801b1b2:	e7fe      	b.n	801b1b2 <ai_platform_network_init+0x23e>
 801b1b4:	4b22      	ldr	r3, [pc, #136]	; (801b240 <ai_platform_network_init+0x2cc>)
 801b1b6:	2201      	movs	r2, #1
 801b1b8:	4619      	mov	r1, r3
 801b1ba:	601a      	str	r2, [r3, #0]
 801b1bc:	680b      	ldr	r3, [r1, #0]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d1fc      	bne.n	801b1bc <ai_platform_network_init+0x248>
 801b1c2:	4b20      	ldr	r3, [pc, #128]	; (801b244 <ai_platform_network_init+0x2d0>)
 801b1c4:	491c      	ldr	r1, [pc, #112]	; (801b238 <ai_platform_network_init+0x2c4>)
 801b1c6:	4a1d      	ldr	r2, [pc, #116]	; (801b23c <ai_platform_network_init+0x2c8>)
 801b1c8:	6019      	str	r1, [r3, #0]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	f43f af5a 	beq.w	801b086 <ai_platform_network_init+0x112>
 801b1d2:	e7fe      	b.n	801b1d2 <ai_platform_network_init+0x25e>
 801b1d4:	2e00      	cmp	r6, #0
 801b1d6:	d09c      	beq.n	801b112 <ai_platform_network_init+0x19e>
 801b1d8:	2601      	movs	r6, #1
 801b1da:	e76d      	b.n	801b0b8 <ai_platform_network_init+0x144>
 801b1dc:	f104 0010 	add.w	r0, r4, #16
 801b1e0:	2212      	movs	r2, #18
 801b1e2:	2110      	movs	r1, #16
 801b1e4:	f000 ffb8 	bl	801c158 <core_set_error>
 801b1e8:	4638      	mov	r0, r7
 801b1ea:	e711      	b.n	801b010 <ai_platform_network_init+0x9c>
 801b1ec:	4b10      	ldr	r3, [pc, #64]	; (801b230 <ai_platform_network_init+0x2bc>)
 801b1ee:	2201      	movs	r2, #1
 801b1f0:	4619      	mov	r1, r3
 801b1f2:	601a      	str	r2, [r3, #0]
 801b1f4:	680b      	ldr	r3, [r1, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d1fc      	bne.n	801b1f4 <ai_platform_network_init+0x280>
 801b1fa:	4b0e      	ldr	r3, [pc, #56]	; (801b234 <ai_platform_network_init+0x2c0>)
 801b1fc:	490e      	ldr	r1, [pc, #56]	; (801b238 <ai_platform_network_init+0x2c4>)
 801b1fe:	4a0f      	ldr	r2, [pc, #60]	; (801b23c <ai_platform_network_init+0x2c8>)
 801b200:	6019      	str	r1, [r3, #0]
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	4293      	cmp	r3, r2
 801b206:	f43f aeea 	beq.w	801afde <ai_platform_network_init+0x6a>
 801b20a:	e7fe      	b.n	801b20a <ai_platform_network_init+0x296>
 801b20c:	f104 0010 	add.w	r0, r4, #16
 801b210:	2211      	movs	r2, #17
 801b212:	2110      	movs	r1, #16
 801b214:	f000 ffa0 	bl	801c158 <core_set_error>
 801b218:	4628      	mov	r0, r5
 801b21a:	e6f9      	b.n	801b010 <ai_platform_network_init+0x9c>
 801b21c:	a1c00100 	.word	0xa1c00100
 801b220:	e0002000 	.word	0xe0002000
 801b224:	e0042000 	.word	0xe0042000
 801b228:	5c001000 	.word	0x5c001000
 801b22c:	a1facade 	.word	0xa1facade
 801b230:	40023008 	.word	0x40023008
 801b234:	40023000 	.word	0x40023000
 801b238:	f407a5c2 	.word	0xf407a5c2
 801b23c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b240:	58024c08 	.word	0x58024c08
 801b244:	58024c00 	.word	0x58024c00
 801b248:	4b0f      	ldr	r3, [pc, #60]	; (801b288 <ai_platform_network_init+0x314>)
 801b24a:	2201      	movs	r2, #1
 801b24c:	4619      	mov	r1, r3
 801b24e:	601a      	str	r2, [r3, #0]
 801b250:	680b      	ldr	r3, [r1, #0]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d1fc      	bne.n	801b250 <ai_platform_network_init+0x2dc>
 801b256:	4b0d      	ldr	r3, [pc, #52]	; (801b28c <ai_platform_network_init+0x318>)
 801b258:	490d      	ldr	r1, [pc, #52]	; (801b290 <ai_platform_network_init+0x31c>)
 801b25a:	4a0e      	ldr	r2, [pc, #56]	; (801b294 <ai_platform_network_init+0x320>)
 801b25c:	6019      	str	r1, [r3, #0]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	4293      	cmp	r3, r2
 801b262:	f43f aebc 	beq.w	801afde <ai_platform_network_init+0x6a>
 801b266:	e7fe      	b.n	801b266 <ai_platform_network_init+0x2f2>
 801b268:	4b07      	ldr	r3, [pc, #28]	; (801b288 <ai_platform_network_init+0x314>)
 801b26a:	2201      	movs	r2, #1
 801b26c:	4619      	mov	r1, r3
 801b26e:	601a      	str	r2, [r3, #0]
 801b270:	680b      	ldr	r3, [r1, #0]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d1fc      	bne.n	801b270 <ai_platform_network_init+0x2fc>
 801b276:	4b05      	ldr	r3, [pc, #20]	; (801b28c <ai_platform_network_init+0x318>)
 801b278:	4905      	ldr	r1, [pc, #20]	; (801b290 <ai_platform_network_init+0x31c>)
 801b27a:	4a06      	ldr	r2, [pc, #24]	; (801b294 <ai_platform_network_init+0x320>)
 801b27c:	6019      	str	r1, [r3, #0]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	4293      	cmp	r3, r2
 801b282:	f43f aeac 	beq.w	801afde <ai_platform_network_init+0x6a>
 801b286:	e7fe      	b.n	801b286 <ai_platform_network_init+0x312>
 801b288:	58024c08 	.word	0x58024c08
 801b28c:	58024c00 	.word	0x58024c00
 801b290:	f407a5c2 	.word	0xf407a5c2
 801b294:	b5e8b5cd 	.word	0xb5e8b5cd

0801b298 <ai_platform_network_post_init>:
 801b298:	b538      	push	{r3, r4, r5, lr}
 801b29a:	b120      	cbz	r0, 801b2a6 <ai_platform_network_post_init+0xe>
 801b29c:	4b7f      	ldr	r3, [pc, #508]	; (801b49c <ai_platform_network_post_init+0x204>)
 801b29e:	4604      	mov	r4, r0
 801b2a0:	6802      	ldr	r2, [r0, #0]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d03c      	beq.n	801b320 <ai_platform_network_post_init+0x88>
 801b2a6:	4a7e      	ldr	r2, [pc, #504]	; (801b4a0 <ai_platform_network_post_init+0x208>)
 801b2a8:	6813      	ldr	r3, [r2, #0]
 801b2aa:	f023 0301 	bic.w	r3, r3, #1
 801b2ae:	6013      	str	r3, [r2, #0]
 801b2b0:	f7fe fc36 	bl	8019b20 <_ai_platform_acquire_crc>
 801b2b4:	4b7b      	ldr	r3, [pc, #492]	; (801b4a4 <ai_platform_network_post_init+0x20c>)
 801b2b6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b2c0:	185a      	adds	r2, r3, r1
 801b2c2:	2a01      	cmp	r2, #1
 801b2c4:	d91d      	bls.n	801b302 <ai_platform_network_post_init+0x6a>
 801b2c6:	f240 4249 	movw	r2, #1097	; 0x449
 801b2ca:	4293      	cmp	r3, r2
 801b2cc:	d019      	beq.n	801b302 <ai_platform_network_post_init+0x6a>
 801b2ce:	4b76      	ldr	r3, [pc, #472]	; (801b4a8 <ai_platform_network_post_init+0x210>)
 801b2d0:	681a      	ldr	r2, [r3, #0]
 801b2d2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b2d6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b2da:	f000 80a7 	beq.w	801b42c <ai_platform_network_post_init+0x194>
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	f240 4183 	movw	r1, #1155	; 0x483
 801b2e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b2e8:	428a      	cmp	r2, r1
 801b2ea:	f000 808f 	beq.w	801b40c <ai_platform_network_post_init+0x174>
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b2f4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b2f8:	d05b      	beq.n	801b3b2 <ai_platform_network_post_init+0x11a>
 801b2fa:	f7fe fc13 	bl	8019b24 <_ai_platform_release_crc>
 801b2fe:	2000      	movs	r0, #0
 801b300:	bd38      	pop	{r3, r4, r5, pc}
 801b302:	4b6a      	ldr	r3, [pc, #424]	; (801b4ac <ai_platform_network_post_init+0x214>)
 801b304:	2201      	movs	r2, #1
 801b306:	4619      	mov	r1, r3
 801b308:	601a      	str	r2, [r3, #0]
 801b30a:	680b      	ldr	r3, [r1, #0]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d1fc      	bne.n	801b30a <ai_platform_network_post_init+0x72>
 801b310:	4b67      	ldr	r3, [pc, #412]	; (801b4b0 <ai_platform_network_post_init+0x218>)
 801b312:	4968      	ldr	r1, [pc, #416]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b314:	4a68      	ldr	r2, [pc, #416]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b316:	6019      	str	r1, [r3, #0]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	4293      	cmp	r3, r2
 801b31c:	d0ed      	beq.n	801b2fa <ai_platform_network_post_init+0x62>
 801b31e:	e7fe      	b.n	801b31e <ai_platform_network_post_init+0x86>
 801b320:	4a5f      	ldr	r2, [pc, #380]	; (801b4a0 <ai_platform_network_post_init+0x208>)
 801b322:	6813      	ldr	r3, [r2, #0]
 801b324:	f023 0301 	bic.w	r3, r3, #1
 801b328:	6013      	str	r3, [r2, #0]
 801b32a:	f7fe fbf9 	bl	8019b20 <_ai_platform_acquire_crc>
 801b32e:	4b5d      	ldr	r3, [pc, #372]	; (801b4a4 <ai_platform_network_post_init+0x20c>)
 801b330:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b33a:	189a      	adds	r2, r3, r2
 801b33c:	2a01      	cmp	r2, #1
 801b33e:	d956      	bls.n	801b3ee <ai_platform_network_post_init+0x156>
 801b340:	f240 4249 	movw	r2, #1097	; 0x449
 801b344:	4293      	cmp	r3, r2
 801b346:	d052      	beq.n	801b3ee <ai_platform_network_post_init+0x156>
 801b348:	4b57      	ldr	r3, [pc, #348]	; (801b4a8 <ai_platform_network_post_init+0x210>)
 801b34a:	681a      	ldr	r2, [r3, #0]
 801b34c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b350:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b354:	d03c      	beq.n	801b3d0 <ai_platform_network_post_init+0x138>
 801b356:	681a      	ldr	r2, [r3, #0]
 801b358:	f240 4183 	movw	r1, #1155	; 0x483
 801b35c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b360:	428a      	cmp	r2, r1
 801b362:	f000 8082 	beq.w	801b46a <ai_platform_network_post_init+0x1d2>
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b36c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b370:	d06c      	beq.n	801b44c <ai_platform_network_post_init+0x1b4>
 801b372:	f7fe fbd7 	bl	8019b24 <_ai_platform_release_crc>
 801b376:	68e3      	ldr	r3, [r4, #12]
 801b378:	f013 0502 	ands.w	r5, r3, #2
 801b37c:	f000 8085 	beq.w	801b48a <ai_platform_network_post_init+0x1f2>
 801b380:	4620      	mov	r0, r4
 801b382:	f001 fd9d 	bl	801cec0 <ai_layers_post_init_all>
 801b386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b388:	b18b      	cbz	r3, 801b3ae <ai_platform_network_post_init+0x116>
 801b38a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801b38c:	b90d      	cbnz	r5, 801b392 <ai_platform_network_post_init+0xfa>
 801b38e:	e00e      	b.n	801b3ae <ai_platform_network_post_init+0x116>
 801b390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b392:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801b394:	4629      	mov	r1, r5
 801b396:	2000      	movs	r0, #0
 801b398:	4798      	blx	r3
 801b39a:	692a      	ldr	r2, [r5, #16]
 801b39c:	1b53      	subs	r3, r2, r5
 801b39e:	4615      	mov	r5, r2
 801b3a0:	bf18      	it	ne
 801b3a2:	2301      	movne	r3, #1
 801b3a4:	2a00      	cmp	r2, #0
 801b3a6:	bf08      	it	eq
 801b3a8:	2300      	moveq	r3, #0
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d1f0      	bne.n	801b390 <ai_platform_network_post_init+0xf8>
 801b3ae:	2001      	movs	r0, #1
 801b3b0:	bd38      	pop	{r3, r4, r5, pc}
 801b3b2:	4b3e      	ldr	r3, [pc, #248]	; (801b4ac <ai_platform_network_post_init+0x214>)
 801b3b4:	2201      	movs	r2, #1
 801b3b6:	4619      	mov	r1, r3
 801b3b8:	601a      	str	r2, [r3, #0]
 801b3ba:	680b      	ldr	r3, [r1, #0]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d1fc      	bne.n	801b3ba <ai_platform_network_post_init+0x122>
 801b3c0:	4b3b      	ldr	r3, [pc, #236]	; (801b4b0 <ai_platform_network_post_init+0x218>)
 801b3c2:	493c      	ldr	r1, [pc, #240]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b3c4:	4a3c      	ldr	r2, [pc, #240]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b3c6:	6019      	str	r1, [r3, #0]
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d095      	beq.n	801b2fa <ai_platform_network_post_init+0x62>
 801b3ce:	e7fe      	b.n	801b3ce <ai_platform_network_post_init+0x136>
 801b3d0:	4b3a      	ldr	r3, [pc, #232]	; (801b4bc <ai_platform_network_post_init+0x224>)
 801b3d2:	2201      	movs	r2, #1
 801b3d4:	4619      	mov	r1, r3
 801b3d6:	601a      	str	r2, [r3, #0]
 801b3d8:	680b      	ldr	r3, [r1, #0]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d1fc      	bne.n	801b3d8 <ai_platform_network_post_init+0x140>
 801b3de:	4b38      	ldr	r3, [pc, #224]	; (801b4c0 <ai_platform_network_post_init+0x228>)
 801b3e0:	4934      	ldr	r1, [pc, #208]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b3e2:	4a35      	ldr	r2, [pc, #212]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b3e4:	6019      	str	r1, [r3, #0]
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	4293      	cmp	r3, r2
 801b3ea:	d0c2      	beq.n	801b372 <ai_platform_network_post_init+0xda>
 801b3ec:	e7fe      	b.n	801b3ec <ai_platform_network_post_init+0x154>
 801b3ee:	4b2f      	ldr	r3, [pc, #188]	; (801b4ac <ai_platform_network_post_init+0x214>)
 801b3f0:	2201      	movs	r2, #1
 801b3f2:	4619      	mov	r1, r3
 801b3f4:	601a      	str	r2, [r3, #0]
 801b3f6:	680b      	ldr	r3, [r1, #0]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d1fc      	bne.n	801b3f6 <ai_platform_network_post_init+0x15e>
 801b3fc:	4b2c      	ldr	r3, [pc, #176]	; (801b4b0 <ai_platform_network_post_init+0x218>)
 801b3fe:	492d      	ldr	r1, [pc, #180]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b400:	4a2d      	ldr	r2, [pc, #180]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b402:	6019      	str	r1, [r3, #0]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	4293      	cmp	r3, r2
 801b408:	d0b3      	beq.n	801b372 <ai_platform_network_post_init+0xda>
 801b40a:	e7fe      	b.n	801b40a <ai_platform_network_post_init+0x172>
 801b40c:	4b2b      	ldr	r3, [pc, #172]	; (801b4bc <ai_platform_network_post_init+0x224>)
 801b40e:	2201      	movs	r2, #1
 801b410:	4619      	mov	r1, r3
 801b412:	601a      	str	r2, [r3, #0]
 801b414:	680b      	ldr	r3, [r1, #0]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d1fc      	bne.n	801b414 <ai_platform_network_post_init+0x17c>
 801b41a:	4b29      	ldr	r3, [pc, #164]	; (801b4c0 <ai_platform_network_post_init+0x228>)
 801b41c:	4925      	ldr	r1, [pc, #148]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b41e:	4a26      	ldr	r2, [pc, #152]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b420:	6019      	str	r1, [r3, #0]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	4293      	cmp	r3, r2
 801b426:	f43f af68 	beq.w	801b2fa <ai_platform_network_post_init+0x62>
 801b42a:	e7fe      	b.n	801b42a <ai_platform_network_post_init+0x192>
 801b42c:	4b23      	ldr	r3, [pc, #140]	; (801b4bc <ai_platform_network_post_init+0x224>)
 801b42e:	2201      	movs	r2, #1
 801b430:	4619      	mov	r1, r3
 801b432:	601a      	str	r2, [r3, #0]
 801b434:	680b      	ldr	r3, [r1, #0]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d1fc      	bne.n	801b434 <ai_platform_network_post_init+0x19c>
 801b43a:	4b21      	ldr	r3, [pc, #132]	; (801b4c0 <ai_platform_network_post_init+0x228>)
 801b43c:	491d      	ldr	r1, [pc, #116]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b43e:	4a1e      	ldr	r2, [pc, #120]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b440:	6019      	str	r1, [r3, #0]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	4293      	cmp	r3, r2
 801b446:	f43f af58 	beq.w	801b2fa <ai_platform_network_post_init+0x62>
 801b44a:	e7fe      	b.n	801b44a <ai_platform_network_post_init+0x1b2>
 801b44c:	4b17      	ldr	r3, [pc, #92]	; (801b4ac <ai_platform_network_post_init+0x214>)
 801b44e:	2201      	movs	r2, #1
 801b450:	4619      	mov	r1, r3
 801b452:	601a      	str	r2, [r3, #0]
 801b454:	680b      	ldr	r3, [r1, #0]
 801b456:	2b00      	cmp	r3, #0
 801b458:	d1fc      	bne.n	801b454 <ai_platform_network_post_init+0x1bc>
 801b45a:	4b15      	ldr	r3, [pc, #84]	; (801b4b0 <ai_platform_network_post_init+0x218>)
 801b45c:	4915      	ldr	r1, [pc, #84]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b45e:	4a16      	ldr	r2, [pc, #88]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b460:	6019      	str	r1, [r3, #0]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	4293      	cmp	r3, r2
 801b466:	d084      	beq.n	801b372 <ai_platform_network_post_init+0xda>
 801b468:	e7fe      	b.n	801b468 <ai_platform_network_post_init+0x1d0>
 801b46a:	4b14      	ldr	r3, [pc, #80]	; (801b4bc <ai_platform_network_post_init+0x224>)
 801b46c:	2201      	movs	r2, #1
 801b46e:	4619      	mov	r1, r3
 801b470:	601a      	str	r2, [r3, #0]
 801b472:	680b      	ldr	r3, [r1, #0]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d1fc      	bne.n	801b472 <ai_platform_network_post_init+0x1da>
 801b478:	4b11      	ldr	r3, [pc, #68]	; (801b4c0 <ai_platform_network_post_init+0x228>)
 801b47a:	490e      	ldr	r1, [pc, #56]	; (801b4b4 <ai_platform_network_post_init+0x21c>)
 801b47c:	4a0e      	ldr	r2, [pc, #56]	; (801b4b8 <ai_platform_network_post_init+0x220>)
 801b47e:	6019      	str	r1, [r3, #0]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	4293      	cmp	r3, r2
 801b484:	f43f af75 	beq.w	801b372 <ai_platform_network_post_init+0xda>
 801b488:	e7fe      	b.n	801b488 <ai_platform_network_post_init+0x1f0>
 801b48a:	f104 0010 	add.w	r0, r4, #16
 801b48e:	2210      	movs	r2, #16
 801b490:	2111      	movs	r1, #17
 801b492:	f000 fe61 	bl	801c158 <core_set_error>
 801b496:	4628      	mov	r0, r5
 801b498:	bd38      	pop	{r3, r4, r5, pc}
 801b49a:	bf00      	nop
 801b49c:	a1c00100 	.word	0xa1c00100
 801b4a0:	e0002000 	.word	0xe0002000
 801b4a4:	e0042000 	.word	0xe0042000
 801b4a8:	5c001000 	.word	0x5c001000
 801b4ac:	40023008 	.word	0x40023008
 801b4b0:	40023000 	.word	0x40023000
 801b4b4:	f407a5c2 	.word	0xf407a5c2
 801b4b8:	b5e8b5cd 	.word	0xb5e8b5cd
 801b4bc:	58024c08 	.word	0x58024c08
 801b4c0:	58024c00 	.word	0x58024c00

0801b4c4 <ai_platform_network_process>:
 801b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c8:	460f      	mov	r7, r1
 801b4ca:	b083      	sub	sp, #12
 801b4cc:	4615      	mov	r5, r2
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	b120      	cbz	r0, 801b4dc <ai_platform_network_process+0x18>
 801b4d2:	4ba8      	ldr	r3, [pc, #672]	; (801b774 <ai_platform_network_process+0x2b0>)
 801b4d4:	6802      	ldr	r2, [r0, #0]
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	bf18      	it	ne
 801b4da:	2400      	movne	r4, #0
 801b4dc:	4aa6      	ldr	r2, [pc, #664]	; (801b778 <ai_platform_network_process+0x2b4>)
 801b4de:	6813      	ldr	r3, [r2, #0]
 801b4e0:	f023 0301 	bic.w	r3, r3, #1
 801b4e4:	6013      	str	r3, [r2, #0]
 801b4e6:	f7fe fb1b 	bl	8019b20 <_ai_platform_acquire_crc>
 801b4ea:	4ba4      	ldr	r3, [pc, #656]	; (801b77c <ai_platform_network_process+0x2b8>)
 801b4ec:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b4f6:	185a      	adds	r2, r3, r1
 801b4f8:	2a01      	cmp	r2, #1
 801b4fa:	f240 80d3 	bls.w	801b6a4 <ai_platform_network_process+0x1e0>
 801b4fe:	f240 4249 	movw	r2, #1097	; 0x449
 801b502:	4293      	cmp	r3, r2
 801b504:	f000 80ce 	beq.w	801b6a4 <ai_platform_network_process+0x1e0>
 801b508:	4b9d      	ldr	r3, [pc, #628]	; (801b780 <ai_platform_network_process+0x2bc>)
 801b50a:	681a      	ldr	r2, [r3, #0]
 801b50c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b510:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b514:	f000 80e4 	beq.w	801b6e0 <ai_platform_network_process+0x21c>
 801b518:	681a      	ldr	r2, [r3, #0]
 801b51a:	f240 4183 	movw	r1, #1155	; 0x483
 801b51e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b522:	428a      	cmp	r2, r1
 801b524:	f000 8104 	beq.w	801b730 <ai_platform_network_process+0x26c>
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b52e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b532:	f000 80ed 	beq.w	801b710 <ai_platform_network_process+0x24c>
 801b536:	f7fe faf5 	bl	8019b24 <_ai_platform_release_crc>
 801b53a:	2c00      	cmp	r4, #0
 801b53c:	f000 80cb 	beq.w	801b6d6 <ai_platform_network_process+0x212>
 801b540:	68e2      	ldr	r2, [r4, #12]
 801b542:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801b544:	f002 0203 	and.w	r2, r2, #3
 801b548:	2b00      	cmp	r3, #0
 801b54a:	f000 80bb 	beq.w	801b6c4 <ai_platform_network_process+0x200>
 801b54e:	2100      	movs	r1, #0
 801b550:	2a03      	cmp	r2, #3
 801b552:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801b556:	6161      	str	r1, [r4, #20]
 801b558:	f040 80b7 	bne.w	801b6ca <ai_platform_network_process+0x206>
 801b55c:	2f00      	cmp	r7, #0
 801b55e:	f000 80cf 	beq.w	801b700 <ai_platform_network_process+0x23c>
 801b562:	faba f28a 	clz	r2, sl
 801b566:	0952      	lsrs	r2, r2, #5
 801b568:	2a00      	cmp	r2, #0
 801b56a:	f040 80c9 	bne.w	801b700 <ai_platform_network_process+0x23c>
 801b56e:	f8ba 1000 	ldrh.w	r1, [sl]
 801b572:	2900      	cmp	r1, #0
 801b574:	f000 80c4 	beq.w	801b700 <ai_platform_network_process+0x23c>
 801b578:	69b8      	ldr	r0, [r7, #24]
 801b57a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b57e:	6806      	ldr	r6, [r0, #0]
 801b580:	2900      	cmp	r1, #0
 801b582:	f000 810c 	beq.w	801b79e <ai_platform_network_process+0x2da>
 801b586:	f8d1 9000 	ldr.w	r9, [r1]
 801b58a:	f1b9 0f00 	cmp.w	r9, #0
 801b58e:	f000 8106 	beq.w	801b79e <ai_platform_network_process+0x2da>
 801b592:	f8da 3008 	ldr.w	r3, [sl, #8]
 801b596:	4690      	mov	r8, r2
 801b598:	f8d3 b000 	ldr.w	fp, [r3]
 801b59c:	f1bb 0f00 	cmp.w	fp, #0
 801b5a0:	d16d      	bne.n	801b67e <ai_platform_network_process+0x1ba>
 801b5a2:	e0ad      	b.n	801b700 <ai_platform_network_process+0x23c>
 801b5a4:	f8d9 000c 	ldr.w	r0, [r9, #12]
 801b5a8:	69b9      	ldr	r1, [r7, #24]
 801b5aa:	68c2      	ldr	r2, [r0, #12]
 801b5ac:	68cb      	ldr	r3, [r1, #12]
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d170      	bne.n	801b694 <ai_platform_network_process+0x1d0>
 801b5b2:	6882      	ldr	r2, [r0, #8]
 801b5b4:	688b      	ldr	r3, [r1, #8]
 801b5b6:	429a      	cmp	r2, r3
 801b5b8:	d16c      	bne.n	801b694 <ai_platform_network_process+0x1d0>
 801b5ba:	6842      	ldr	r2, [r0, #4]
 801b5bc:	684b      	ldr	r3, [r1, #4]
 801b5be:	429a      	cmp	r2, r3
 801b5c0:	d168      	bne.n	801b694 <ai_platform_network_process+0x1d0>
 801b5c2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801b5c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5ca:	f006 fd79 	bl	80220c0 <ai_array_get_data_byte_size>
 801b5ce:	9000      	str	r0, [sp, #0]
 801b5d0:	4648      	mov	r0, r9
 801b5d2:	f006 fd07 	bl	8021fe4 <get_tensor_byte_size>
 801b5d6:	9b00      	ldr	r3, [sp, #0]
 801b5d8:	4283      	cmp	r3, r0
 801b5da:	d35b      	bcc.n	801b694 <ai_platform_network_process+0x1d0>
 801b5dc:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801b5e0:	6818      	ldr	r0, [r3, #0]
 801b5e2:	f006 fd17 	bl	8022014 <ai_array_to_buffer_fmt>
 801b5e6:	683b      	ldr	r3, [r7, #0]
 801b5e8:	4043      	eors	r3, r0
 801b5ea:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801b5ee:	f040 823c 	bne.w	801ba6a <ai_platform_network_process+0x5a6>
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	f000 80b4 	beq.w	801b762 <ai_platform_network_process+0x29e>
 801b5fa:	69bb      	ldr	r3, [r7, #24]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	f000 80a6 	beq.w	801b750 <ai_platform_network_process+0x28c>
 801b604:	429e      	cmp	r6, r3
 801b606:	4648      	mov	r0, r9
 801b608:	bf38      	it	cc
 801b60a:	461e      	movcc	r6, r3
 801b60c:	f006 fcea 	bl	8021fe4 <get_tensor_byte_size>
 801b610:	f8cb 0008 	str.w	r0, [fp, #8]
 801b614:	69bb      	ldr	r3, [r7, #24]
 801b616:	681a      	ldr	r2, [r3, #0]
 801b618:	fb02 f200 	mul.w	r2, r2, r0
 801b61c:	f8cb 200c 	str.w	r2, [fp, #12]
 801b620:	6878      	ldr	r0, [r7, #4]
 801b622:	f8cb 0004 	str.w	r0, [fp, #4]
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	4413      	add	r3, r2
 801b62a:	f8cb 3000 	str.w	r3, [fp]
 801b62e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801b632:	680b      	ldr	r3, [r1, #0]
 801b634:	009a      	lsls	r2, r3, #2
 801b636:	d409      	bmi.n	801b64c <ai_platform_network_process+0x188>
 801b638:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801b63c:	1a9b      	subs	r3, r3, r2
 801b63e:	4418      	add	r0, r3
 801b640:	6088      	str	r0, [r1, #8]
 801b642:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801b646:	f8db 2004 	ldr.w	r2, [fp, #4]
 801b64a:	60da      	str	r2, [r3, #12]
 801b64c:	f108 0801 	add.w	r8, r8, #1
 801b650:	f8ba 3000 	ldrh.w	r3, [sl]
 801b654:	4598      	cmp	r8, r3
 801b656:	f080 80a1 	bcs.w	801b79c <ai_platform_network_process+0x2d8>
 801b65a:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	f000 809c 	beq.w	801b79c <ai_platform_network_process+0x2d8>
 801b664:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 801b668:	f1b9 0f00 	cmp.w	r9, #0
 801b66c:	f000 8096 	beq.w	801b79c <ai_platform_network_process+0x2d8>
 801b670:	f8da 3008 	ldr.w	r3, [sl, #8]
 801b674:	371c      	adds	r7, #28
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 801b67c:	d040      	beq.n	801b700 <ai_platform_network_process+0x23c>
 801b67e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801b682:	2101      	movs	r1, #1
 801b684:	4638      	mov	r0, r7
 801b686:	685b      	ldr	r3, [r3, #4]
 801b688:	9300      	str	r3, [sp, #0]
 801b68a:	f7fe fa0f 	bl	8019aac <ai_buffer_get_size>
 801b68e:	9b00      	ldr	r3, [sp, #0]
 801b690:	4283      	cmp	r3, r0
 801b692:	d287      	bcs.n	801b5a4 <ai_platform_network_process+0xe0>
 801b694:	f104 0010 	add.w	r0, r4, #16
 801b698:	2218      	movs	r2, #24
 801b69a:	2112      	movs	r1, #18
 801b69c:	f000 fd5c 	bl	801c158 <core_set_error>
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	e019      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b6a4:	4b37      	ldr	r3, [pc, #220]	; (801b784 <ai_platform_network_process+0x2c0>)
 801b6a6:	2201      	movs	r2, #1
 801b6a8:	4619      	mov	r1, r3
 801b6aa:	601a      	str	r2, [r3, #0]
 801b6ac:	680b      	ldr	r3, [r1, #0]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d1fc      	bne.n	801b6ac <ai_platform_network_process+0x1e8>
 801b6b2:	4b35      	ldr	r3, [pc, #212]	; (801b788 <ai_platform_network_process+0x2c4>)
 801b6b4:	4935      	ldr	r1, [pc, #212]	; (801b78c <ai_platform_network_process+0x2c8>)
 801b6b6:	4a36      	ldr	r2, [pc, #216]	; (801b790 <ai_platform_network_process+0x2cc>)
 801b6b8:	6019      	str	r1, [r3, #0]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	4293      	cmp	r3, r2
 801b6be:	f43f af3a 	beq.w	801b536 <ai_platform_network_process+0x72>
 801b6c2:	e7fe      	b.n	801b6c2 <ai_platform_network_process+0x1fe>
 801b6c4:	2a03      	cmp	r2, #3
 801b6c6:	6163      	str	r3, [r4, #20]
 801b6c8:	d01a      	beq.n	801b700 <ai_platform_network_process+0x23c>
 801b6ca:	f104 0010 	add.w	r0, r4, #16
 801b6ce:	2230      	movs	r2, #48	; 0x30
 801b6d0:	2111      	movs	r1, #17
 801b6d2:	f000 fd41 	bl	801c158 <core_set_error>
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	4618      	mov	r0, r3
 801b6da:	b003      	add	sp, #12
 801b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6e0:	4b2c      	ldr	r3, [pc, #176]	; (801b794 <ai_platform_network_process+0x2d0>)
 801b6e2:	2201      	movs	r2, #1
 801b6e4:	4619      	mov	r1, r3
 801b6e6:	601a      	str	r2, [r3, #0]
 801b6e8:	680b      	ldr	r3, [r1, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d1fc      	bne.n	801b6e8 <ai_platform_network_process+0x224>
 801b6ee:	4b2a      	ldr	r3, [pc, #168]	; (801b798 <ai_platform_network_process+0x2d4>)
 801b6f0:	4926      	ldr	r1, [pc, #152]	; (801b78c <ai_platform_network_process+0x2c8>)
 801b6f2:	4a27      	ldr	r2, [pc, #156]	; (801b790 <ai_platform_network_process+0x2cc>)
 801b6f4:	6019      	str	r1, [r3, #0]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	f43f af1c 	beq.w	801b536 <ai_platform_network_process+0x72>
 801b6fe:	e7fe      	b.n	801b6fe <ai_platform_network_process+0x23a>
 801b700:	f104 0010 	add.w	r0, r4, #16
 801b704:	2217      	movs	r2, #23
 801b706:	2112      	movs	r1, #18
 801b708:	f000 fd26 	bl	801c158 <core_set_error>
 801b70c:	2300      	movs	r3, #0
 801b70e:	e7e3      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b710:	4b1c      	ldr	r3, [pc, #112]	; (801b784 <ai_platform_network_process+0x2c0>)
 801b712:	2201      	movs	r2, #1
 801b714:	4619      	mov	r1, r3
 801b716:	601a      	str	r2, [r3, #0]
 801b718:	680b      	ldr	r3, [r1, #0]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d1fc      	bne.n	801b718 <ai_platform_network_process+0x254>
 801b71e:	4b1a      	ldr	r3, [pc, #104]	; (801b788 <ai_platform_network_process+0x2c4>)
 801b720:	491a      	ldr	r1, [pc, #104]	; (801b78c <ai_platform_network_process+0x2c8>)
 801b722:	4a1b      	ldr	r2, [pc, #108]	; (801b790 <ai_platform_network_process+0x2cc>)
 801b724:	6019      	str	r1, [r3, #0]
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	4293      	cmp	r3, r2
 801b72a:	f43f af04 	beq.w	801b536 <ai_platform_network_process+0x72>
 801b72e:	e7fe      	b.n	801b72e <ai_platform_network_process+0x26a>
 801b730:	4b18      	ldr	r3, [pc, #96]	; (801b794 <ai_platform_network_process+0x2d0>)
 801b732:	2201      	movs	r2, #1
 801b734:	4619      	mov	r1, r3
 801b736:	601a      	str	r2, [r3, #0]
 801b738:	680b      	ldr	r3, [r1, #0]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d1fc      	bne.n	801b738 <ai_platform_network_process+0x274>
 801b73e:	4b16      	ldr	r3, [pc, #88]	; (801b798 <ai_platform_network_process+0x2d4>)
 801b740:	4912      	ldr	r1, [pc, #72]	; (801b78c <ai_platform_network_process+0x2c8>)
 801b742:	4a13      	ldr	r2, [pc, #76]	; (801b790 <ai_platform_network_process+0x2cc>)
 801b744:	6019      	str	r1, [r3, #0]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	4293      	cmp	r3, r2
 801b74a:	f43f aef4 	beq.w	801b536 <ai_platform_network_process+0x72>
 801b74e:	e7fe      	b.n	801b74e <ai_platform_network_process+0x28a>
 801b750:	f104 0010 	add.w	r0, r4, #16
 801b754:	2221      	movs	r2, #33	; 0x21
 801b756:	2112      	movs	r1, #18
 801b758:	9300      	str	r3, [sp, #0]
 801b75a:	f000 fcfd 	bl	801c158 <core_set_error>
 801b75e:	9b00      	ldr	r3, [sp, #0]
 801b760:	e7ba      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b762:	f104 0010 	add.w	r0, r4, #16
 801b766:	2217      	movs	r2, #23
 801b768:	2112      	movs	r1, #18
 801b76a:	9300      	str	r3, [sp, #0]
 801b76c:	f000 fcf4 	bl	801c158 <core_set_error>
 801b770:	9b00      	ldr	r3, [sp, #0]
 801b772:	e7b1      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b774:	a1c00100 	.word	0xa1c00100
 801b778:	e0002000 	.word	0xe0002000
 801b77c:	e0042000 	.word	0xe0042000
 801b780:	5c001000 	.word	0x5c001000
 801b784:	40023008 	.word	0x40023008
 801b788:	40023000 	.word	0x40023000
 801b78c:	f407a5c2 	.word	0xf407a5c2
 801b790:	b5e8b5cd 	.word	0xb5e8b5cd
 801b794:	58024c08 	.word	0x58024c08
 801b798:	58024c00 	.word	0x58024c00
 801b79c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801b79e:	2d00      	cmp	r5, #0
 801b7a0:	f000 80ad 	beq.w	801b8fe <ai_platform_network_process+0x43a>
 801b7a4:	2b01      	cmp	r3, #1
 801b7a6:	f240 8158 	bls.w	801ba5a <ai_platform_network_process+0x596>
 801b7aa:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 801b7ae:	f119 0f0c 	cmn.w	r9, #12
 801b7b2:	f000 8152 	beq.w	801ba5a <ai_platform_network_process+0x596>
 801b7b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	f000 814d 	beq.w	801ba5a <ai_platform_network_process+0x596>
 801b7c0:	f04f 0800 	mov.w	r8, #0
 801b7c4:	4598      	cmp	r8, r3
 801b7c6:	f080 8099 	bcs.w	801b8fc <ai_platform_network_process+0x438>
 801b7ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	f000 8094 	beq.w	801b8fc <ai_platform_network_process+0x438>
 801b7d4:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 801b7d8:	f1bb 0f00 	cmp.w	fp, #0
 801b7dc:	f000 808e 	beq.w	801b8fc <ai_platform_network_process+0x438>
 801b7e0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801b7e4:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	eb13 070a 	adds.w	r7, r3, sl
 801b7ee:	9300      	str	r3, [sp, #0]
 801b7f0:	d07c      	beq.n	801b8ec <ai_platform_network_process+0x428>
 801b7f2:	f8db 3018 	ldr.w	r3, [fp, #24]
 801b7f6:	2101      	movs	r1, #1
 801b7f8:	4628      	mov	r0, r5
 801b7fa:	685b      	ldr	r3, [r3, #4]
 801b7fc:	9301      	str	r3, [sp, #4]
 801b7fe:	f7fe f955 	bl	8019aac <ai_buffer_get_size>
 801b802:	9b01      	ldr	r3, [sp, #4]
 801b804:	4283      	cmp	r3, r0
 801b806:	f0c0 8128 	bcc.w	801ba5a <ai_platform_network_process+0x596>
 801b80a:	f8db 000c 	ldr.w	r0, [fp, #12]
 801b80e:	69a9      	ldr	r1, [r5, #24]
 801b810:	68c2      	ldr	r2, [r0, #12]
 801b812:	68cb      	ldr	r3, [r1, #12]
 801b814:	429a      	cmp	r2, r3
 801b816:	f040 8120 	bne.w	801ba5a <ai_platform_network_process+0x596>
 801b81a:	6882      	ldr	r2, [r0, #8]
 801b81c:	688b      	ldr	r3, [r1, #8]
 801b81e:	429a      	cmp	r2, r3
 801b820:	f040 811b 	bne.w	801ba5a <ai_platform_network_process+0x596>
 801b824:	6842      	ldr	r2, [r0, #4]
 801b826:	684b      	ldr	r3, [r1, #4]
 801b828:	429a      	cmp	r2, r3
 801b82a:	f040 8116 	bne.w	801ba5a <ai_platform_network_process+0x596>
 801b82e:	f8db 3018 	ldr.w	r3, [fp, #24]
 801b832:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b836:	f006 fc43 	bl	80220c0 <ai_array_get_data_byte_size>
 801b83a:	9001      	str	r0, [sp, #4]
 801b83c:	4658      	mov	r0, fp
 801b83e:	f006 fbd1 	bl	8021fe4 <get_tensor_byte_size>
 801b842:	9b01      	ldr	r3, [sp, #4]
 801b844:	4283      	cmp	r3, r0
 801b846:	f0c0 8108 	bcc.w	801ba5a <ai_platform_network_process+0x596>
 801b84a:	f8db 3018 	ldr.w	r3, [fp, #24]
 801b84e:	6818      	ldr	r0, [r3, #0]
 801b850:	f006 fbe0 	bl	8022014 <ai_array_to_buffer_fmt>
 801b854:	682b      	ldr	r3, [r5, #0]
 801b856:	4043      	eors	r3, r0
 801b858:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801b85c:	d13e      	bne.n	801b8dc <ai_platform_network_process+0x418>
 801b85e:	686b      	ldr	r3, [r5, #4]
 801b860:	2b00      	cmp	r3, #0
 801b862:	d032      	beq.n	801b8ca <ai_platform_network_process+0x406>
 801b864:	69ab      	ldr	r3, [r5, #24]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	b333      	cbz	r3, 801b8b8 <ai_platform_network_process+0x3f4>
 801b86a:	429e      	cmp	r6, r3
 801b86c:	4658      	mov	r0, fp
 801b86e:	bf38      	it	cc
 801b870:	461e      	movcc	r6, r3
 801b872:	f006 fbb7 	bl	8021fe4 <get_tensor_byte_size>
 801b876:	60b8      	str	r0, [r7, #8]
 801b878:	69ab      	ldr	r3, [r5, #24]
 801b87a:	681a      	ldr	r2, [r3, #0]
 801b87c:	fb02 f200 	mul.w	r2, r2, r0
 801b880:	60fa      	str	r2, [r7, #12]
 801b882:	6868      	ldr	r0, [r5, #4]
 801b884:	6078      	str	r0, [r7, #4]
 801b886:	686b      	ldr	r3, [r5, #4]
 801b888:	4413      	add	r3, r2
 801b88a:	9a00      	ldr	r2, [sp, #0]
 801b88c:	f842 300a 	str.w	r3, [r2, sl]
 801b890:	f8db 1018 	ldr.w	r1, [fp, #24]
 801b894:	680b      	ldr	r3, [r1, #0]
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	d408      	bmi.n	801b8ac <ai_platform_network_process+0x3e8>
 801b89a:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801b89e:	1a9b      	subs	r3, r3, r2
 801b8a0:	4418      	add	r0, r3
 801b8a2:	6088      	str	r0, [r1, #8]
 801b8a4:	687a      	ldr	r2, [r7, #4]
 801b8a6:	f8db 3018 	ldr.w	r3, [fp, #24]
 801b8aa:	60da      	str	r2, [r3, #12]
 801b8ac:	f108 0801 	add.w	r8, r8, #1
 801b8b0:	351c      	adds	r5, #28
 801b8b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b8b6:	e785      	b.n	801b7c4 <ai_platform_network_process+0x300>
 801b8b8:	f104 0010 	add.w	r0, r4, #16
 801b8bc:	2221      	movs	r2, #33	; 0x21
 801b8be:	2113      	movs	r1, #19
 801b8c0:	9300      	str	r3, [sp, #0]
 801b8c2:	f000 fc49 	bl	801c158 <core_set_error>
 801b8c6:	9b00      	ldr	r3, [sp, #0]
 801b8c8:	e706      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b8ca:	f104 0010 	add.w	r0, r4, #16
 801b8ce:	2217      	movs	r2, #23
 801b8d0:	2113      	movs	r1, #19
 801b8d2:	9300      	str	r3, [sp, #0]
 801b8d4:	f000 fc40 	bl	801c158 <core_set_error>
 801b8d8:	9b00      	ldr	r3, [sp, #0]
 801b8da:	e6fd      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b8dc:	f104 0010 	add.w	r0, r4, #16
 801b8e0:	2219      	movs	r2, #25
 801b8e2:	2113      	movs	r1, #19
 801b8e4:	f000 fc38 	bl	801c158 <core_set_error>
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	e6f5      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b8ec:	f104 0010 	add.w	r0, r4, #16
 801b8f0:	2217      	movs	r2, #23
 801b8f2:	2113      	movs	r1, #19
 801b8f4:	f000 fc30 	bl	801c158 <core_set_error>
 801b8f8:	463b      	mov	r3, r7
 801b8fa:	e6ed      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801b8fc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801b8fe:	82a6      	strh	r6, [r4, #20]
 801b900:	2b00      	cmp	r3, #0
 801b902:	f000 80a5 	beq.w	801ba50 <ai_platform_network_process+0x58c>
 801b906:	2b01      	cmp	r3, #1
 801b908:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b90a:	f240 80a4 	bls.w	801ba56 <ai_platform_network_process+0x592>
 801b90e:	f105 070c 	add.w	r7, r5, #12
 801b912:	8ae3      	ldrh	r3, [r4, #22]
 801b914:	8aa2      	ldrh	r2, [r4, #20]
 801b916:	429a      	cmp	r2, r3
 801b918:	f67f aede 	bls.w	801b6d8 <ai_platform_network_process+0x214>
 801b91c:	2d00      	cmp	r5, #0
 801b91e:	d03a      	beq.n	801b996 <ai_platform_network_process+0x4d2>
 801b920:	882b      	ldrh	r3, [r5, #0]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d037      	beq.n	801b996 <ai_platform_network_process+0x4d2>
 801b926:	686b      	ldr	r3, [r5, #4]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d034      	beq.n	801b996 <ai_platform_network_process+0x4d2>
 801b92c:	681a      	ldr	r2, [r3, #0]
 801b92e:	2a00      	cmp	r2, #0
 801b930:	d031      	beq.n	801b996 <ai_platform_network_process+0x4d2>
 801b932:	f04f 0800 	mov.w	r8, #0
 801b936:	e01b      	b.n	801b970 <ai_platform_network_process+0x4ac>
 801b938:	68d9      	ldr	r1, [r3, #12]
 801b93a:	1a40      	subs	r0, r0, r1
 801b93c:	eb0c 0100 	add.w	r1, ip, r0
 801b940:	6099      	str	r1, [r3, #8]
 801b942:	6993      	ldr	r3, [r2, #24]
 801b944:	6872      	ldr	r2, [r6, #4]
 801b946:	60da      	str	r2, [r3, #12]
 801b948:	6873      	ldr	r3, [r6, #4]
 801b94a:	f108 0801 	add.w	r8, r8, #1
 801b94e:	68b1      	ldr	r1, [r6, #8]
 801b950:	f85a 2009 	ldr.w	r2, [sl, r9]
 801b954:	440b      	add	r3, r1
 801b956:	4293      	cmp	r3, r2
 801b958:	d301      	bcc.n	801b95e <ai_platform_network_process+0x49a>
 801b95a:	68f3      	ldr	r3, [r6, #12]
 801b95c:	1ad3      	subs	r3, r2, r3
 801b95e:	6073      	str	r3, [r6, #4]
 801b960:	882b      	ldrh	r3, [r5, #0]
 801b962:	4598      	cmp	r8, r3
 801b964:	d217      	bcs.n	801b996 <ai_platform_network_process+0x4d2>
 801b966:	686b      	ldr	r3, [r5, #4]
 801b968:	b1ab      	cbz	r3, 801b996 <ai_platform_network_process+0x4d2>
 801b96a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801b96e:	b192      	cbz	r2, 801b996 <ai_platform_network_process+0x4d2>
 801b970:	68a9      	ldr	r1, [r5, #8]
 801b972:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801b976:	6993      	ldr	r3, [r2, #24]
 801b978:	f8d1 a000 	ldr.w	sl, [r1]
 801b97c:	6819      	ldr	r1, [r3, #0]
 801b97e:	eb0a 0609 	add.w	r6, sl, r9
 801b982:	6898      	ldr	r0, [r3, #8]
 801b984:	0089      	lsls	r1, r1, #2
 801b986:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801b98a:	d5d5      	bpl.n	801b938 <ai_platform_network_process+0x474>
 801b98c:	4661      	mov	r1, ip
 801b98e:	68b2      	ldr	r2, [r6, #8]
 801b990:	f006 fc14 	bl	80221bc <memcpy>
 801b994:	e7d8      	b.n	801b948 <ai_platform_network_process+0x484>
 801b996:	4620      	mov	r0, r4
 801b998:	f001 faa8 	bl	801ceec <ai_layers_forward_all>
 801b99c:	2f00      	cmp	r7, #0
 801b99e:	d04b      	beq.n	801ba38 <ai_platform_network_process+0x574>
 801b9a0:	883b      	ldrh	r3, [r7, #0]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d048      	beq.n	801ba38 <ai_platform_network_process+0x574>
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d045      	beq.n	801ba38 <ai_platform_network_process+0x574>
 801b9ac:	6818      	ldr	r0, [r3, #0]
 801b9ae:	2800      	cmp	r0, #0
 801b9b0:	d042      	beq.n	801ba38 <ai_platform_network_process+0x574>
 801b9b2:	f04f 0800 	mov.w	r8, #0
 801b9b6:	e01c      	b.n	801b9f2 <ai_platform_network_process+0x52e>
 801b9b8:	f85a 2009 	ldr.w	r2, [sl, r9]
 801b9bc:	4596      	cmp	lr, r2
 801b9be:	d302      	bcc.n	801b9c6 <ai_platform_network_process+0x502>
 801b9c0:	68f3      	ldr	r3, [r6, #12]
 801b9c2:	eba2 0e03 	sub.w	lr, r2, r3
 801b9c6:	f8c6 e004 	str.w	lr, [r6, #4]
 801b9ca:	f108 0801 	add.w	r8, r8, #1
 801b9ce:	6981      	ldr	r1, [r0, #24]
 801b9d0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801b9d4:	1ad2      	subs	r2, r2, r3
 801b9d6:	eb0e 0302 	add.w	r3, lr, r2
 801b9da:	608b      	str	r3, [r1, #8]
 801b9dc:	6983      	ldr	r3, [r0, #24]
 801b9de:	6872      	ldr	r2, [r6, #4]
 801b9e0:	60da      	str	r2, [r3, #12]
 801b9e2:	883b      	ldrh	r3, [r7, #0]
 801b9e4:	4598      	cmp	r8, r3
 801b9e6:	d227      	bcs.n	801ba38 <ai_platform_network_process+0x574>
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	b32b      	cbz	r3, 801ba38 <ai_platform_network_process+0x574>
 801b9ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b9f0:	b310      	cbz	r0, 801ba38 <ai_platform_network_process+0x574>
 801b9f2:	68bb      	ldr	r3, [r7, #8]
 801b9f4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801b9f8:	6981      	ldr	r1, [r0, #24]
 801b9fa:	f8d3 a000 	ldr.w	sl, [r3]
 801b9fe:	680b      	ldr	r3, [r1, #0]
 801ba00:	eb0a 0609 	add.w	r6, sl, r9
 801ba04:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 801ba08:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 801ba0c:	eb0c 0e02 	add.w	lr, ip, r2
 801ba10:	d0d2      	beq.n	801b9b8 <ai_platform_network_process+0x4f4>
 801ba12:	6889      	ldr	r1, [r1, #8]
 801ba14:	4660      	mov	r0, ip
 801ba16:	f006 fbd1 	bl	80221bc <memcpy>
 801ba1a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801ba1e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801ba22:	440b      	add	r3, r1
 801ba24:	4293      	cmp	r3, r2
 801ba26:	d301      	bcc.n	801ba2c <ai_platform_network_process+0x568>
 801ba28:	68f3      	ldr	r3, [r6, #12]
 801ba2a:	1ad3      	subs	r3, r2, r3
 801ba2c:	6073      	str	r3, [r6, #4]
 801ba2e:	f108 0801 	add.w	r8, r8, #1
 801ba32:	883b      	ldrh	r3, [r7, #0]
 801ba34:	4598      	cmp	r8, r3
 801ba36:	d3d7      	bcc.n	801b9e8 <ai_platform_network_process+0x524>
 801ba38:	8ae3      	ldrh	r3, [r4, #22]
 801ba3a:	8aa2      	ldrh	r2, [r4, #20]
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	b29b      	uxth	r3, r3
 801ba40:	429a      	cmp	r2, r3
 801ba42:	82e3      	strh	r3, [r4, #22]
 801ba44:	f63f af6a 	bhi.w	801b91c <ai_platform_network_process+0x458>
 801ba48:	4618      	mov	r0, r3
 801ba4a:	b003      	add	sp, #12
 801ba4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba50:	461d      	mov	r5, r3
 801ba52:	461f      	mov	r7, r3
 801ba54:	e75d      	b.n	801b912 <ai_platform_network_process+0x44e>
 801ba56:	2700      	movs	r7, #0
 801ba58:	e75b      	b.n	801b912 <ai_platform_network_process+0x44e>
 801ba5a:	f104 0010 	add.w	r0, r4, #16
 801ba5e:	2218      	movs	r2, #24
 801ba60:	2113      	movs	r1, #19
 801ba62:	f000 fb79 	bl	801c158 <core_set_error>
 801ba66:	2300      	movs	r3, #0
 801ba68:	e636      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801ba6a:	f104 0010 	add.w	r0, r4, #16
 801ba6e:	2219      	movs	r2, #25
 801ba70:	2112      	movs	r1, #18
 801ba72:	f000 fb71 	bl	801c158 <core_set_error>
 801ba76:	2300      	movs	r3, #0
 801ba78:	e62e      	b.n	801b6d8 <ai_platform_network_process+0x214>
 801ba7a:	bf00      	nop

0801ba7c <node_convert>:
 801ba7c:	6982      	ldr	r2, [r0, #24]
 801ba7e:	8813      	ldrh	r3, [r2, #0]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d04b      	beq.n	801bb1c <node_convert+0xa0>
 801ba84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba86:	6852      	ldr	r2, [r2, #4]
 801ba88:	b083      	sub	sp, #12
 801ba8a:	6855      	ldr	r5, [r2, #4]
 801ba8c:	b105      	cbz	r5, 801ba90 <node_convert+0x14>
 801ba8e:	682d      	ldr	r5, [r5, #0]
 801ba90:	2b01      	cmp	r3, #1
 801ba92:	d940      	bls.n	801bb16 <node_convert+0x9a>
 801ba94:	6916      	ldr	r6, [r2, #16]
 801ba96:	b106      	cbz	r6, 801ba9a <node_convert+0x1e>
 801ba98:	6836      	ldr	r6, [r6, #0]
 801ba9a:	68ab      	ldr	r3, [r5, #8]
 801ba9c:	0a1b      	lsrs	r3, r3, #8
 801ba9e:	f000 80e3 	beq.w	801bc68 <node_convert+0x1ec>
 801baa2:	68e9      	ldr	r1, [r5, #12]
 801baa4:	2401      	movs	r4, #1
 801baa6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801baaa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801baae:	428b      	cmp	r3, r1
 801bab0:	fb02 f404 	mul.w	r4, r2, r4
 801bab4:	d1f9      	bne.n	801baaa <node_convert+0x2e>
 801bab6:	69aa      	ldr	r2, [r5, #24]
 801bab8:	69b7      	ldr	r7, [r6, #24]
 801baba:	6813      	ldr	r3, [r2, #0]
 801babc:	6890      	ldr	r0, [r2, #8]
 801babe:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801bac2:	2a01      	cmp	r2, #1
 801bac4:	d055      	beq.n	801bb72 <node_convert+0xf6>
 801bac6:	6829      	ldr	r1, [r5, #0]
 801bac8:	15da      	asrs	r2, r3, #23
 801baca:	68bd      	ldr	r5, [r7, #8]
 801bacc:	b341      	cbz	r1, 801bb20 <node_convert+0xa4>
 801bace:	684e      	ldr	r6, [r1, #4]
 801bad0:	f002 0201 	and.w	r2, r2, #1
 801bad4:	2e00      	cmp	r6, #0
 801bad6:	f000 80c9 	beq.w	801bc6c <node_convert+0x1f0>
 801bada:	884b      	ldrh	r3, [r1, #2]
 801badc:	2b00      	cmp	r3, #0
 801bade:	f000 8087 	beq.w	801bbf0 <node_convert+0x174>
 801bae2:	6833      	ldr	r3, [r6, #0]
 801bae4:	ed93 7a00 	vldr	s14, [r3]
 801bae8:	6873      	ldr	r3, [r6, #4]
 801baea:	2a00      	cmp	r2, #0
 801baec:	f000 80d5 	beq.w	801bc9a <node_convert+0x21e>
 801baf0:	f993 2000 	ldrsb.w	r2, [r3]
 801baf4:	b16c      	cbz	r4, 801bb12 <node_convert+0x96>
 801baf6:	4404      	add	r4, r0
 801baf8:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801bafc:	1a9b      	subs	r3, r3, r2
 801bafe:	42a0      	cmp	r0, r4
 801bb00:	ee07 3a90 	vmov	s15, r3
 801bb04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb08:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bb0c:	ece5 7a01 	vstmia	r5!, {s15}
 801bb10:	d1f2      	bne.n	801baf8 <node_convert+0x7c>
 801bb12:	b003      	add	sp, #12
 801bb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb16:	2300      	movs	r3, #0
 801bb18:	685b      	ldr	r3, [r3, #4]
 801bb1a:	deff      	udf	#255	; 0xff
 801bb1c:	685b      	ldr	r3, [r3, #4]
 801bb1e:	deff      	udf	#255	; 0xff
 801bb20:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801bb24:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801bb28:	f002 0201 	and.w	r2, r2, #1
 801bb2c:	1b8e      	subs	r6, r1, r6
 801bb2e:	2908      	cmp	r1, #8
 801bb30:	4629      	mov	r1, r5
 801bb32:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801bb36:	eba6 0602 	sub.w	r6, r6, r2
 801bb3a:	4622      	mov	r2, r4
 801bb3c:	d05e      	beq.n	801bbfc <node_convert+0x180>
 801bb3e:	f006 f96b 	bl	8021e18 <st_dsp_arm_q15_to_float>
 801bb42:	2e00      	cmp	r6, #0
 801bb44:	d0e5      	beq.n	801bb12 <node_convert+0x96>
 801bb46:	ee07 6a90 	vmov	s15, r6
 801bb4a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801bb4e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801bb52:	f009 fbd9 	bl	8025308 <powf>
 801bb56:	2c00      	cmp	r4, #0
 801bb58:	d0db      	beq.n	801bb12 <node_convert+0x96>
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	ecf5 7a01 	vldmia	r5!, {s15}
 801bb60:	3301      	adds	r3, #1
 801bb62:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bb66:	429c      	cmp	r4, r3
 801bb68:	ed45 7a01 	vstr	s15, [r5, #-4]
 801bb6c:	d1f6      	bne.n	801bb5c <node_convert+0xe0>
 801bb6e:	b003      	add	sp, #12
 801bb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb72:	683b      	ldr	r3, [r7, #0]
 801bb74:	6835      	ldr	r5, [r6, #0]
 801bb76:	15da      	asrs	r2, r3, #23
 801bb78:	2d00      	cmp	r5, #0
 801bb7a:	f000 8090 	beq.w	801bc9e <node_convert+0x222>
 801bb7e:	6869      	ldr	r1, [r5, #4]
 801bb80:	f002 0301 	and.w	r3, r2, #1
 801bb84:	68ba      	ldr	r2, [r7, #8]
 801bb86:	2900      	cmp	r1, #0
 801bb88:	d03b      	beq.n	801bc02 <node_convert+0x186>
 801bb8a:	886d      	ldrh	r5, [r5, #2]
 801bb8c:	2d00      	cmp	r5, #0
 801bb8e:	d03e      	beq.n	801bc0e <node_convert+0x192>
 801bb90:	680d      	ldr	r5, [r1, #0]
 801bb92:	edd5 7a00 	vldr	s15, [r5]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	f000 80b3 	beq.w	801bd02 <node_convert+0x286>
 801bb9c:	684b      	ldr	r3, [r1, #4]
 801bb9e:	f993 3000 	ldrsb.w	r3, [r3]
 801bba2:	ee07 3a10 	vmov	s14, r3
 801bba6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bbaa:	2c00      	cmp	r4, #0
 801bbac:	d0b1      	beq.n	801bb12 <node_convert+0x96>
 801bbae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801bbb2:	4414      	add	r4, r2
 801bbb4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801bbb8:	eddf 5a57 	vldr	s11, [pc, #348]	; 801bd18 <node_convert+0x29c>
 801bbbc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 801bbc0:	ecf0 7a01 	vldmia	r0!, {s15}
 801bbc4:	eeb0 5a47 	vmov.f32	s10, s14
 801bbc8:	eea7 5aa6 	vfma.f32	s10, s15, s13
 801bbcc:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbd4:	db3b      	blt.n	801bc4e <node_convert+0x1d2>
 801bbd6:	ee75 7a06 	vadd.f32	s15, s10, s12
 801bbda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bbde:	ee17 3a90 	vmov	r3, s15
 801bbe2:	f303 0307 	ssat	r3, #8, r3
 801bbe6:	f802 3b01 	strb.w	r3, [r2], #1
 801bbea:	42a2      	cmp	r2, r4
 801bbec:	d1e8      	bne.n	801bbc0 <node_convert+0x144>
 801bbee:	e790      	b.n	801bb12 <node_convert+0x96>
 801bbf0:	2a00      	cmp	r2, #0
 801bbf2:	d03d      	beq.n	801bc70 <node_convert+0x1f4>
 801bbf4:	461a      	mov	r2, r3
 801bbf6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801bd1c <node_convert+0x2a0>
 801bbfa:	e77b      	b.n	801baf4 <node_convert+0x78>
 801bbfc:	f006 f974 	bl	8021ee8 <st_dsp_arm_q7_to_float>
 801bc00:	e79f      	b.n	801bb42 <node_convert+0xc6>
 801bc02:	b133      	cbz	r3, 801bc12 <node_convert+0x196>
 801bc04:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801bd1c <node_convert+0x2a0>
 801bc08:	eef0 7a47 	vmov.f32	s15, s14
 801bc0c:	e7cd      	b.n	801bbaa <node_convert+0x12e>
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d1f8      	bne.n	801bc04 <node_convert+0x188>
 801bc12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bc16:	eddf 7a41 	vldr	s15, [pc, #260]	; 801bd1c <node_convert+0x2a0>
 801bc1a:	2c00      	cmp	r4, #0
 801bc1c:	f43f af79 	beq.w	801bb12 <node_convert+0x96>
 801bc20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801bc24:	4414      	add	r4, r2
 801bc26:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801bc2a:	ecf0 7a01 	vldmia	r0!, {s15}
 801bc2e:	eeb0 6a47 	vmov.f32	s12, s14
 801bc32:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801bc36:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801bc3a:	ee17 3a90 	vmov	r3, s15
 801bc3e:	f383 0308 	usat	r3, #8, r3
 801bc42:	f802 3b01 	strb.w	r3, [r2], #1
 801bc46:	42a2      	cmp	r2, r4
 801bc48:	d1ef      	bne.n	801bc2a <node_convert+0x1ae>
 801bc4a:	b003      	add	sp, #12
 801bc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc4e:	ee75 7a65 	vsub.f32	s15, s10, s11
 801bc52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc56:	ee17 3a90 	vmov	r3, s15
 801bc5a:	f303 0307 	ssat	r3, #8, r3
 801bc5e:	f802 3b01 	strb.w	r3, [r2], #1
 801bc62:	4294      	cmp	r4, r2
 801bc64:	d1ac      	bne.n	801bbc0 <node_convert+0x144>
 801bc66:	e754      	b.n	801bb12 <node_convert+0x96>
 801bc68:	2401      	movs	r4, #1
 801bc6a:	e724      	b.n	801bab6 <node_convert+0x3a>
 801bc6c:	2a00      	cmp	r2, #0
 801bc6e:	d13f      	bne.n	801bcf0 <node_convert+0x274>
 801bc70:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 801bd1c <node_convert+0x2a0>
 801bc74:	2c00      	cmp	r4, #0
 801bc76:	f43f af4c 	beq.w	801bb12 <node_convert+0x96>
 801bc7a:	4404      	add	r4, r0
 801bc7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bc80:	1a9b      	subs	r3, r3, r2
 801bc82:	42a0      	cmp	r0, r4
 801bc84:	ee07 3a90 	vmov	s15, r3
 801bc88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bc90:	ece5 7a01 	vstmia	r5!, {s15}
 801bc94:	d1f2      	bne.n	801bc7c <node_convert+0x200>
 801bc96:	b003      	add	sp, #12
 801bc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc9a:	781a      	ldrb	r2, [r3, #0]
 801bc9c:	e7ea      	b.n	801bc74 <node_convert+0x1f8>
 801bc9e:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801bca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bca6:	f002 0201 	and.w	r2, r2, #1
 801bcaa:	1af3      	subs	r3, r6, r3
 801bcac:	3340      	adds	r3, #64	; 0x40
 801bcae:	1a9b      	subs	r3, r3, r2
 801bcb0:	d015      	beq.n	801bcde <node_convert+0x262>
 801bcb2:	425b      	negs	r3, r3
 801bcb4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801bcb8:	9001      	str	r0, [sp, #4]
 801bcba:	ee00 3a90 	vmov	s1, r3
 801bcbe:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bcc2:	f009 fb21 	bl	8025308 <powf>
 801bcc6:	9801      	ldr	r0, [sp, #4]
 801bcc8:	b14c      	cbz	r4, 801bcde <node_convert+0x262>
 801bcca:	4603      	mov	r3, r0
 801bccc:	ecf3 7a01 	vldmia	r3!, {s15}
 801bcd0:	3501      	adds	r5, #1
 801bcd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bcd6:	42ac      	cmp	r4, r5
 801bcd8:	ed43 7a01 	vstr	s15, [r3, #-4]
 801bcdc:	d1f6      	bne.n	801bccc <node_convert+0x250>
 801bcde:	2e08      	cmp	r6, #8
 801bce0:	68b9      	ldr	r1, [r7, #8]
 801bce2:	4622      	mov	r2, r4
 801bce4:	d008      	beq.n	801bcf8 <node_convert+0x27c>
 801bce6:	b003      	add	sp, #12
 801bce8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bcec:	f005 bf12 	b.w	8021b14 <st_dsp_arm_float_to_q15>
 801bcf0:	4632      	mov	r2, r6
 801bcf2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801bd1c <node_convert+0x2a0>
 801bcf6:	e6fd      	b.n	801baf4 <node_convert+0x78>
 801bcf8:	b003      	add	sp, #12
 801bcfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bcfe:	f005 bfc3 	b.w	8021c88 <st_dsp_arm_float_to_q7>
 801bd02:	684b      	ldr	r3, [r1, #4]
 801bd04:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	ee07 3a10 	vmov	s14, r3
 801bd0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801bd12:	ee37 7a26 	vadd.f32	s14, s14, s13
 801bd16:	e780      	b.n	801bc1a <node_convert+0x19e>
 801bd18:	3efffffc 	.word	0x3efffffc
 801bd1c:	00000000 	.word	0x00000000

0801bd20 <node_convert_integer>:
 801bd20:	6982      	ldr	r2, [r0, #24]
 801bd22:	8813      	ldrh	r3, [r2, #0]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	f000 8084 	beq.w	801be32 <node_convert_integer+0x112>
 801bd2a:	b4f0      	push	{r4, r5, r6, r7}
 801bd2c:	6852      	ldr	r2, [r2, #4]
 801bd2e:	6855      	ldr	r5, [r2, #4]
 801bd30:	b105      	cbz	r5, 801bd34 <node_convert_integer+0x14>
 801bd32:	682d      	ldr	r5, [r5, #0]
 801bd34:	2b01      	cmp	r3, #1
 801bd36:	d979      	bls.n	801be2c <node_convert_integer+0x10c>
 801bd38:	6916      	ldr	r6, [r2, #16]
 801bd3a:	b106      	cbz	r6, 801bd3e <node_convert_integer+0x1e>
 801bd3c:	6836      	ldr	r6, [r6, #0]
 801bd3e:	68ab      	ldr	r3, [r5, #8]
 801bd40:	0a1b      	lsrs	r3, r3, #8
 801bd42:	f000 817c 	beq.w	801c03e <node_convert_integer+0x31e>
 801bd46:	68e8      	ldr	r0, [r5, #12]
 801bd48:	2201      	movs	r2, #1
 801bd4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801bd4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd52:	4298      	cmp	r0, r3
 801bd54:	fb01 f202 	mul.w	r2, r1, r2
 801bd58:	d1f9      	bne.n	801bd4e <node_convert_integer+0x2e>
 801bd5a:	0893      	lsrs	r3, r2, #2
 801bd5c:	682c      	ldr	r4, [r5, #0]
 801bd5e:	f8d6 c000 	ldr.w	ip, [r6]
 801bd62:	b19c      	cbz	r4, 801bd8c <node_convert_integer+0x6c>
 801bd64:	6861      	ldr	r1, [r4, #4]
 801bd66:	b189      	cbz	r1, 801bd8c <node_convert_integer+0x6c>
 801bd68:	8860      	ldrh	r0, [r4, #2]
 801bd6a:	b178      	cbz	r0, 801bd8c <node_convert_integer+0x6c>
 801bd6c:	6809      	ldr	r1, [r1, #0]
 801bd6e:	edd1 6a00 	vldr	s13, [r1]
 801bd72:	f1bc 0f00 	cmp.w	ip, #0
 801bd76:	d00e      	beq.n	801bd96 <node_convert_integer+0x76>
 801bd78:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801bd7c:	b159      	cbz	r1, 801bd96 <node_convert_integer+0x76>
 801bd7e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801bd82:	b140      	cbz	r0, 801bd96 <node_convert_integer+0x76>
 801bd84:	6809      	ldr	r1, [r1, #0]
 801bd86:	ed91 7a00 	vldr	s14, [r1]
 801bd8a:	e006      	b.n	801bd9a <node_convert_integer+0x7a>
 801bd8c:	eddf 6abf 	vldr	s13, [pc, #764]	; 801c08c <node_convert_integer+0x36c>
 801bd90:	f1bc 0f00 	cmp.w	ip, #0
 801bd94:	d1f0      	bne.n	801bd78 <node_convert_integer+0x58>
 801bd96:	ed9f 7abd 	vldr	s14, [pc, #756]	; 801c08c <node_convert_integer+0x36c>
 801bd9a:	69a8      	ldr	r0, [r5, #24]
 801bd9c:	69b7      	ldr	r7, [r6, #24]
 801bd9e:	6805      	ldr	r5, [r0, #0]
 801bda0:	6839      	ldr	r1, [r7, #0]
 801bda2:	022d      	lsls	r5, r5, #8
 801bda4:	6880      	ldr	r0, [r0, #8]
 801bda6:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 801bdaa:	68b9      	ldr	r1, [r7, #8]
 801bdac:	d443      	bmi.n	801be36 <node_convert_integer+0x116>
 801bdae:	2e00      	cmp	r6, #0
 801bdb0:	f040 80d6 	bne.w	801bf60 <node_convert_integer+0x240>
 801bdb4:	b13c      	cbz	r4, 801bdc6 <node_convert_integer+0xa6>
 801bdb6:	6863      	ldr	r3, [r4, #4]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	f000 815f 	beq.w	801c07c <node_convert_integer+0x35c>
 801bdbe:	8864      	ldrh	r4, [r4, #2]
 801bdc0:	b10c      	cbz	r4, 801bdc6 <node_convert_integer+0xa6>
 801bdc2:	685b      	ldr	r3, [r3, #4]
 801bdc4:	781c      	ldrb	r4, [r3, #0]
 801bdc6:	f1bc 0f00 	cmp.w	ip, #0
 801bdca:	f000 8130 	beq.w	801c02e <node_convert_integer+0x30e>
 801bdce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	f000 812b 	beq.w	801c02e <node_convert_integer+0x30e>
 801bdd8:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801bddc:	2d00      	cmp	r5, #0
 801bdde:	f000 8126 	beq.w	801c02e <node_convert_integer+0x30e>
 801bde2:	685b      	ldr	r3, [r3, #4]
 801bde4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bde8:	781b      	ldrb	r3, [r3, #0]
 801bdea:	ee06 3a10 	vmov	s12, r3
 801bdee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bdf2:	ee36 6a27 	vadd.f32	s12, s12, s15
 801bdf6:	eec6 5a87 	vdiv.f32	s11, s13, s14
 801bdfa:	b1aa      	cbz	r2, 801be28 <node_convert_integer+0x108>
 801bdfc:	440a      	add	r2, r1
 801bdfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 801be02:	1b1b      	subs	r3, r3, r4
 801be04:	eeb0 7a46 	vmov.f32	s14, s12
 801be08:	ee07 3a90 	vmov	s15, r3
 801be0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be10:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801be14:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801be18:	ee17 3a90 	vmov	r3, s15
 801be1c:	f383 0308 	usat	r3, #8, r3
 801be20:	f801 3b01 	strb.w	r3, [r1], #1
 801be24:	4291      	cmp	r1, r2
 801be26:	d1ea      	bne.n	801bdfe <node_convert_integer+0xde>
 801be28:	bcf0      	pop	{r4, r5, r6, r7}
 801be2a:	4770      	bx	lr
 801be2c:	2300      	movs	r3, #0
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	deff      	udf	#255	; 0xff
 801be32:	685b      	ldr	r3, [r3, #4]
 801be34:	deff      	udf	#255	; 0xff
 801be36:	2e00      	cmp	r6, #0
 801be38:	d049      	beq.n	801bece <node_convert_integer+0x1ae>
 801be3a:	b144      	cbz	r4, 801be4e <node_convert_integer+0x12e>
 801be3c:	6863      	ldr	r3, [r4, #4]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	f000 8114 	beq.w	801c06c <node_convert_integer+0x34c>
 801be44:	8864      	ldrh	r4, [r4, #2]
 801be46:	b114      	cbz	r4, 801be4e <node_convert_integer+0x12e>
 801be48:	685b      	ldr	r3, [r3, #4]
 801be4a:	f993 4000 	ldrsb.w	r4, [r3]
 801be4e:	f1bc 0f00 	cmp.w	ip, #0
 801be52:	f000 80ef 	beq.w	801c034 <node_convert_integer+0x314>
 801be56:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801be5a:	2d00      	cmp	r5, #0
 801be5c:	f000 80fd 	beq.w	801c05a <node_convert_integer+0x33a>
 801be60:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801be64:	2b00      	cmp	r3, #0
 801be66:	f000 80f3 	beq.w	801c050 <node_convert_integer+0x330>
 801be6a:	686b      	ldr	r3, [r5, #4]
 801be6c:	f993 3000 	ldrsb.w	r3, [r3]
 801be70:	ee07 3a90 	vmov	s15, r3
 801be74:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801be78:	2a00      	cmp	r2, #0
 801be7a:	d0d5      	beq.n	801be28 <node_convert_integer+0x108>
 801be7c:	440a      	add	r2, r1
 801be7e:	eddf 5a84 	vldr	s11, [pc, #528]	; 801c090 <node_convert_integer+0x370>
 801be82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801be86:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801be8a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801be8e:	eeb0 5a47 	vmov.f32	s10, s14
 801be92:	1b1b      	subs	r3, r3, r4
 801be94:	ee07 3a90 	vmov	s15, r3
 801be98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be9c:	eea7 5a86 	vfma.f32	s10, s15, s12
 801bea0:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801bea4:	eef0 7a45 	vmov.f32	s15, s10
 801bea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beac:	bfd4      	ite	le
 801beae:	ee75 7a65 	vsuble.f32	s15, s10, s11
 801beb2:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801beb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801beba:	ee17 3a90 	vmov	r3, s15
 801bebe:	f303 0307 	ssat	r3, #8, r3
 801bec2:	f801 3b01 	strb.w	r3, [r1], #1
 801bec6:	4291      	cmp	r1, r2
 801bec8:	d1df      	bne.n	801be8a <node_convert_integer+0x16a>
 801beca:	bcf0      	pop	{r4, r5, r6, r7}
 801becc:	4770      	bx	lr
 801bece:	b144      	cbz	r4, 801bee2 <node_convert_integer+0x1c2>
 801bed0:	6865      	ldr	r5, [r4, #4]
 801bed2:	2d00      	cmp	r5, #0
 801bed4:	f000 80c4 	beq.w	801c060 <node_convert_integer+0x340>
 801bed8:	8864      	ldrh	r4, [r4, #2]
 801beda:	b114      	cbz	r4, 801bee2 <node_convert_integer+0x1c2>
 801bedc:	686c      	ldr	r4, [r5, #4]
 801bede:	f994 4000 	ldrsb.w	r4, [r4]
 801bee2:	f1bc 0f00 	cmp.w	ip, #0
 801bee6:	d00c      	beq.n	801bf02 <node_convert_integer+0x1e2>
 801bee8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801beec:	2e00      	cmp	r6, #0
 801beee:	f000 80b2 	beq.w	801c056 <node_convert_integer+0x336>
 801bef2:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801bef6:	2d00      	cmp	r5, #0
 801bef8:	f000 80a8 	beq.w	801c04c <node_convert_integer+0x32c>
 801befc:	6875      	ldr	r5, [r6, #4]
 801befe:	f895 c000 	ldrb.w	ip, [r5]
 801bf02:	eef4 6a47 	vcmp.f32	s13, s14
 801bf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf0a:	d104      	bne.n	801bf16 <node_convert_integer+0x1f6>
 801bf0c:	f104 0680 	add.w	r6, r4, #128	; 0x80
 801bf10:	4566      	cmp	r6, ip
 801bf12:	f000 80fb 	beq.w	801c10c <node_convert_integer+0x3ec>
 801bf16:	ee07 ca90 	vmov	s15, ip
 801bf1a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801bf1e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801bf22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf26:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801bf2a:	2a00      	cmp	r2, #0
 801bf2c:	f43f af7c 	beq.w	801be28 <node_convert_integer+0x108>
 801bf30:	4402      	add	r2, r0
 801bf32:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801bf36:	eef0 6a67 	vmov.f32	s13, s15
 801bf3a:	1b1b      	subs	r3, r3, r4
 801bf3c:	ee07 3a10 	vmov	s14, r3
 801bf40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bf44:	eee7 6a06 	vfma.f32	s13, s14, s12
 801bf48:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801bf4c:	ee17 3a10 	vmov	r3, s14
 801bf50:	f383 0308 	usat	r3, #8, r3
 801bf54:	4290      	cmp	r0, r2
 801bf56:	f801 3b01 	strb.w	r3, [r1], #1
 801bf5a:	d1ea      	bne.n	801bf32 <node_convert_integer+0x212>
 801bf5c:	bcf0      	pop	{r4, r5, r6, r7}
 801bf5e:	4770      	bx	lr
 801bf60:	2c00      	cmp	r4, #0
 801bf62:	d06a      	beq.n	801c03a <node_convert_integer+0x31a>
 801bf64:	6866      	ldr	r6, [r4, #4]
 801bf66:	2e00      	cmp	r6, #0
 801bf68:	f000 808e 	beq.w	801c088 <node_convert_integer+0x368>
 801bf6c:	8865      	ldrh	r5, [r4, #2]
 801bf6e:	b10d      	cbz	r5, 801bf74 <node_convert_integer+0x254>
 801bf70:	6875      	ldr	r5, [r6, #4]
 801bf72:	782d      	ldrb	r5, [r5, #0]
 801bf74:	f1bc 0f00 	cmp.w	ip, #0
 801bf78:	d063      	beq.n	801c042 <node_convert_integer+0x322>
 801bf7a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801bf7e:	2f00      	cmp	r7, #0
 801bf80:	d07a      	beq.n	801c078 <node_convert_integer+0x358>
 801bf82:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 801bf86:	b116      	cbz	r6, 801bf8e <node_convert_integer+0x26e>
 801bf88:	687e      	ldr	r6, [r7, #4]
 801bf8a:	f996 6000 	ldrsb.w	r6, [r6]
 801bf8e:	eef4 6a47 	vcmp.f32	s13, s14
 801bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf96:	d102      	bne.n	801bf9e <node_convert_integer+0x27e>
 801bf98:	3d80      	subs	r5, #128	; 0x80
 801bf9a:	42b5      	cmp	r5, r6
 801bf9c:	d07d      	beq.n	801c09a <node_convert_integer+0x37a>
 801bf9e:	b13c      	cbz	r4, 801bfb0 <node_convert_integer+0x290>
 801bfa0:	6863      	ldr	r3, [r4, #4]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	f000 80d1 	beq.w	801c14a <node_convert_integer+0x42a>
 801bfa8:	8864      	ldrh	r4, [r4, #2]
 801bfaa:	b10c      	cbz	r4, 801bfb0 <node_convert_integer+0x290>
 801bfac:	685b      	ldr	r3, [r3, #4]
 801bfae:	781c      	ldrb	r4, [r3, #0]
 801bfb0:	f1bc 0f00 	cmp.w	ip, #0
 801bfb4:	d047      	beq.n	801c046 <node_convert_integer+0x326>
 801bfb6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801bfba:	2d00      	cmp	r5, #0
 801bfbc:	f000 80c2 	beq.w	801c144 <node_convert_integer+0x424>
 801bfc0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d065      	beq.n	801c094 <node_convert_integer+0x374>
 801bfc8:	686b      	ldr	r3, [r5, #4]
 801bfca:	f993 3000 	ldrsb.w	r3, [r3]
 801bfce:	ee07 3a90 	vmov	s15, r3
 801bfd2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801bfd6:	2a00      	cmp	r2, #0
 801bfd8:	f43f af26 	beq.w	801be28 <node_convert_integer+0x108>
 801bfdc:	440a      	add	r2, r1
 801bfde:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801c090 <node_convert_integer+0x370>
 801bfe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bfe6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801bfea:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bfee:	eeb0 5a47 	vmov.f32	s10, s14
 801bff2:	1b1b      	subs	r3, r3, r4
 801bff4:	ee07 3a90 	vmov	s15, r3
 801bff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bffc:	eea7 5a86 	vfma.f32	s10, s15, s12
 801c000:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801c004:	eef0 7a45 	vmov.f32	s15, s10
 801c008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c00c:	bfd4      	ite	le
 801c00e:	ee75 7a65 	vsuble.f32	s15, s10, s11
 801c012:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801c016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c01a:	ee17 3a90 	vmov	r3, s15
 801c01e:	f303 0307 	ssat	r3, #8, r3
 801c022:	f801 3b01 	strb.w	r3, [r1], #1
 801c026:	4291      	cmp	r1, r2
 801c028:	d1df      	bne.n	801bfea <node_convert_integer+0x2ca>
 801c02a:	bcf0      	pop	{r4, r5, r6, r7}
 801c02c:	4770      	bx	lr
 801c02e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c032:	e6e0      	b.n	801bdf6 <node_convert_integer+0xd6>
 801c034:	ee07 ca90 	vmov	s15, ip
 801c038:	e71c      	b.n	801be74 <node_convert_integer+0x154>
 801c03a:	4625      	mov	r5, r4
 801c03c:	e79a      	b.n	801bf74 <node_convert_integer+0x254>
 801c03e:	2201      	movs	r2, #1
 801c040:	e68c      	b.n	801bd5c <node_convert_integer+0x3c>
 801c042:	4666      	mov	r6, ip
 801c044:	e7a3      	b.n	801bf8e <node_convert_integer+0x26e>
 801c046:	ee07 ca90 	vmov	s15, ip
 801c04a:	e7c2      	b.n	801bfd2 <node_convert_integer+0x2b2>
 801c04c:	46ac      	mov	ip, r5
 801c04e:	e758      	b.n	801bf02 <node_convert_integer+0x1e2>
 801c050:	ee07 3a90 	vmov	s15, r3
 801c054:	e70e      	b.n	801be74 <node_convert_integer+0x154>
 801c056:	46b4      	mov	ip, r6
 801c058:	e753      	b.n	801bf02 <node_convert_integer+0x1e2>
 801c05a:	ee07 5a90 	vmov	s15, r5
 801c05e:	e709      	b.n	801be74 <node_convert_integer+0x154>
 801c060:	462c      	mov	r4, r5
 801c062:	f1bc 0f00 	cmp.w	ip, #0
 801c066:	f47f af3f 	bne.w	801bee8 <node_convert_integer+0x1c8>
 801c06a:	e74a      	b.n	801bf02 <node_convert_integer+0x1e2>
 801c06c:	461c      	mov	r4, r3
 801c06e:	f1bc 0f00 	cmp.w	ip, #0
 801c072:	f47f aef0 	bne.w	801be56 <node_convert_integer+0x136>
 801c076:	e7dd      	b.n	801c034 <node_convert_integer+0x314>
 801c078:	463e      	mov	r6, r7
 801c07a:	e788      	b.n	801bf8e <node_convert_integer+0x26e>
 801c07c:	461c      	mov	r4, r3
 801c07e:	f1bc 0f00 	cmp.w	ip, #0
 801c082:	f47f aea4 	bne.w	801bdce <node_convert_integer+0xae>
 801c086:	e7d2      	b.n	801c02e <node_convert_integer+0x30e>
 801c088:	4635      	mov	r5, r6
 801c08a:	e773      	b.n	801bf74 <node_convert_integer+0x254>
 801c08c:	00000000 	.word	0x00000000
 801c090:	3efffffc 	.word	0x3efffffc
 801c094:	ee07 3a90 	vmov	s15, r3
 801c098:	e79b      	b.n	801bfd2 <node_convert_integer+0x2b2>
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d057      	beq.n	801c14e <node_convert_integer+0x42e>
 801c09e:	009b      	lsls	r3, r3, #2
 801c0a0:	460f      	mov	r7, r1
 801c0a2:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801c0a6:	eb00 0c03 	add.w	ip, r0, r3
 801c0aa:	f850 4b04 	ldr.w	r4, [r0], #4
 801c0ae:	ea4f 2534 	mov.w	r5, r4, ror #8
 801c0b2:	fa3f f585 	uxtb16	r5, r5
 801c0b6:	fad5 f506 	ssub16	r5, r5, r6
 801c0ba:	fa3f f484 	uxtb16	r4, r4
 801c0be:	fad4 f406 	ssub16	r4, r4, r6
 801c0c2:	022d      	lsls	r5, r5, #8
 801c0c4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c0c8:	4560      	cmp	r0, ip
 801c0ca:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 801c0ce:	ea44 0405 	orr.w	r4, r4, r5
 801c0d2:	f847 4b04 	str.w	r4, [r7], #4
 801c0d6:	d1e8      	bne.n	801c0aa <node_convert_integer+0x38a>
 801c0d8:	4419      	add	r1, r3
 801c0da:	f012 0203 	ands.w	r2, r2, #3
 801c0de:	f43f aea3 	beq.w	801be28 <node_convert_integer+0x108>
 801c0e2:	f89c 3000 	ldrb.w	r3, [ip]
 801c0e6:	2a01      	cmp	r2, #1
 801c0e8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801c0ec:	700b      	strb	r3, [r1, #0]
 801c0ee:	f43f ae9b 	beq.w	801be28 <node_convert_integer+0x108>
 801c0f2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c0f6:	2a03      	cmp	r2, #3
 801c0f8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801c0fc:	704b      	strb	r3, [r1, #1]
 801c0fe:	f47f ae93 	bne.w	801be28 <node_convert_integer+0x108>
 801c102:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801c106:	3b80      	subs	r3, #128	; 0x80
 801c108:	708b      	strb	r3, [r1, #2]
 801c10a:	e68d      	b.n	801be28 <node_convert_integer+0x108>
 801c10c:	b1fb      	cbz	r3, 801c14e <node_convert_integer+0x42e>
 801c10e:	009b      	lsls	r3, r3, #2
 801c110:	460f      	mov	r7, r1
 801c112:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801c116:	eb00 0c03 	add.w	ip, r0, r3
 801c11a:	f850 4b04 	ldr.w	r4, [r0], #4
 801c11e:	ea4f 2534 	mov.w	r5, r4, ror #8
 801c122:	fa2f f585 	sxtb16	r5, r5
 801c126:	fa95 f506 	sadd16	r5, r5, r6
 801c12a:	fa2f f484 	sxtb16	r4, r4
 801c12e:	fa94 f406 	sadd16	r4, r4, r6
 801c132:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c136:	4560      	cmp	r0, ip
 801c138:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 801c13c:	f847 4b04 	str.w	r4, [r7], #4
 801c140:	d1eb      	bne.n	801c11a <node_convert_integer+0x3fa>
 801c142:	e7c9      	b.n	801c0d8 <node_convert_integer+0x3b8>
 801c144:	ee07 5a90 	vmov	s15, r5
 801c148:	e743      	b.n	801bfd2 <node_convert_integer+0x2b2>
 801c14a:	461c      	mov	r4, r3
 801c14c:	e730      	b.n	801bfb0 <node_convert_integer+0x290>
 801c14e:	4684      	mov	ip, r0
 801c150:	e7c3      	b.n	801c0da <node_convert_integer+0x3ba>
 801c152:	bf00      	nop

0801c154 <core_init>:
 801c154:	2001      	movs	r0, #1
 801c156:	4770      	bx	lr

0801c158 <core_set_error>:
 801c158:	4603      	mov	r3, r0
 801c15a:	7800      	ldrb	r0, [r0, #0]
 801c15c:	b930      	cbnz	r0, 801c16c <core_set_error+0x14>
 801c15e:	7019      	strb	r1, [r3, #0]
 801c160:	2001      	movs	r0, #1
 801c162:	6819      	ldr	r1, [r3, #0]
 801c164:	f362 211f 	bfi	r1, r2, #8, #24
 801c168:	6019      	str	r1, [r3, #0]
 801c16a:	4770      	bx	lr
 801c16c:	2000      	movs	r0, #0
 801c16e:	4770      	bx	lr

0801c170 <func_dummy>:
 801c170:	4770      	bx	lr
 801c172:	bf00      	nop

0801c174 <forward_conv2d_integer_SSSA_ch>:
 801c174:	6983      	ldr	r3, [r0, #24]
 801c176:	8819      	ldrh	r1, [r3, #0]
 801c178:	2900      	cmp	r1, #0
 801c17a:	f000 8163 	beq.w	801c444 <forward_conv2d_integer_SSSA_ch+0x2d0>
 801c17e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c182:	685a      	ldr	r2, [r3, #4]
 801c184:	b0ad      	sub	sp, #180	; 0xb4
 801c186:	6853      	ldr	r3, [r2, #4]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	f000 8296 	beq.w	801c6ba <forward_conv2d_integer_SSSA_ch+0x546>
 801c18e:	f8d3 e000 	ldr.w	lr, [r3]
 801c192:	2901      	cmp	r1, #1
 801c194:	f240 8144 	bls.w	801c420 <forward_conv2d_integer_SSSA_ch+0x2ac>
 801c198:	6913      	ldr	r3, [r2, #16]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	f000 8163 	beq.w	801c466 <forward_conv2d_integer_SSSA_ch+0x2f2>
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	9327      	str	r3, [sp, #156]	; 0x9c
 801c1a4:	2902      	cmp	r1, #2
 801c1a6:	f000 814f 	beq.w	801c448 <forward_conv2d_integer_SSSA_ch+0x2d4>
 801c1aa:	69d3      	ldr	r3, [r2, #28]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	f040 813d 	bne.w	801c42c <forward_conv2d_integer_SSSA_ch+0x2b8>
 801c1b2:	469c      	mov	ip, r3
 801c1b4:	f112 0418 	adds.w	r4, r2, #24
 801c1b8:	d007      	beq.n	801c1ca <forward_conv2d_integer_SSSA_ch+0x56>
 801c1ba:	8b14      	ldrh	r4, [r2, #24]
 801c1bc:	2c01      	cmp	r4, #1
 801c1be:	f240 816b 	bls.w	801c498 <forward_conv2d_integer_SSSA_ch+0x324>
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	f000 8292 	beq.w	801c6ec <forward_conv2d_integer_SSSA_ch+0x578>
 801c1c8:	685c      	ldr	r4, [r3, #4]
 801c1ca:	2903      	cmp	r1, #3
 801c1cc:	f000 812b 	beq.w	801c426 <forward_conv2d_integer_SSSA_ch+0x2b2>
 801c1d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801c1d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c1d4:	9124      	str	r1, [sp, #144]	; 0x90
 801c1d6:	2a00      	cmp	r2, #0
 801c1d8:	f000 8147 	beq.w	801c46a <forward_conv2d_integer_SSSA_ch+0x2f6>
 801c1dc:	6816      	ldr	r6, [r2, #0]
 801c1de:	2900      	cmp	r1, #0
 801c1e0:	f000 826f 	beq.w	801c6c2 <forward_conv2d_integer_SSSA_ch+0x54e>
 801c1e4:	f8d2 b004 	ldr.w	fp, [r2, #4]
 801c1e8:	f8db 100c 	ldr.w	r1, [fp, #12]
 801c1ec:	f8de 200c 	ldr.w	r2, [lr, #12]
 801c1f0:	69a5      	ldr	r5, [r4, #24]
 801c1f2:	69b4      	ldr	r4, [r6, #24]
 801c1f4:	684e      	ldr	r6, [r1, #4]
 801c1f6:	6857      	ldr	r7, [r2, #4]
 801c1f8:	961d      	str	r6, [sp, #116]	; 0x74
 801c1fa:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 801c1fc:	fa1f f987 	uxth.w	r9, r7
 801c200:	f8dc a00c 	ldr.w	sl, [ip, #12]
 801c204:	68ad      	ldr	r5, [r5, #8]
 801c206:	9723      	str	r7, [sp, #140]	; 0x8c
 801c208:	9522      	str	r5, [sp, #136]	; 0x88
 801c20a:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801c20e:	68a5      	ldr	r5, [r4, #8]
 801c210:	68cc      	ldr	r4, [r1, #12]
 801c212:	6889      	ldr	r1, [r1, #8]
 801c214:	9713      	str	r7, [sp, #76]	; 0x4c
 801c216:	9418      	str	r4, [sp, #96]	; 0x60
 801c218:	911e      	str	r1, [sp, #120]	; 0x78
 801c21a:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 801c21e:	921f      	str	r2, [sp, #124]	; 0x7c
 801c220:	8832      	ldrh	r2, [r6, #0]
 801c222:	9221      	str	r2, [sp, #132]	; 0x84
 801c224:	88b2      	ldrh	r2, [r6, #4]
 801c226:	921a      	str	r2, [sp, #104]	; 0x68
 801c228:	f8da 2008 	ldr.w	r2, [sl, #8]
 801c22c:	f8da a004 	ldr.w	sl, [sl, #4]
 801c230:	921c      	str	r2, [sp, #112]	; 0x70
 801c232:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 801c234:	9219      	str	r2, [sp, #100]	; 0x64
 801c236:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801c238:	9220      	str	r2, [sp, #128]	; 0x80
 801c23a:	69c2      	ldr	r2, [r0, #28]
 801c23c:	9225      	str	r2, [sp, #148]	; 0x94
 801c23e:	2b00      	cmp	r3, #0
 801c240:	f000 80f7 	beq.w	801c432 <forward_conv2d_integer_SSSA_ch+0x2be>
 801c244:	689e      	ldr	r6, [r3, #8]
 801c246:	2e00      	cmp	r6, #0
 801c248:	f000 80f3 	beq.w	801c432 <forward_conv2d_integer_SSSA_ch+0x2be>
 801c24c:	69b3      	ldr	r3, [r6, #24]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	bf08      	it	eq
 801c252:	2600      	moveq	r6, #0
 801c254:	f8dc 1000 	ldr.w	r1, [ip]
 801c258:	f8de 2000 	ldr.w	r2, [lr]
 801c25c:	f8db 3000 	ldr.w	r3, [fp]
 801c260:	9128      	str	r1, [sp, #160]	; 0xa0
 801c262:	2a00      	cmp	r2, #0
 801c264:	f000 80be 	beq.w	801c3e4 <forward_conv2d_integer_SSSA_ch+0x270>
 801c268:	6851      	ldr	r1, [r2, #4]
 801c26a:	2900      	cmp	r1, #0
 801c26c:	f000 80ba 	beq.w	801c3e4 <forward_conv2d_integer_SSSA_ch+0x270>
 801c270:	8850      	ldrh	r0, [r2, #2]
 801c272:	2800      	cmp	r0, #0
 801c274:	f000 80b6 	beq.w	801c3e4 <forward_conv2d_integer_SSSA_ch+0x270>
 801c278:	6809      	ldr	r1, [r1, #0]
 801c27a:	ed91 0a00 	vldr	s0, [r1]
 801c27e:	b12b      	cbz	r3, 801c28c <forward_conv2d_integer_SSSA_ch+0x118>
 801c280:	6859      	ldr	r1, [r3, #4]
 801c282:	b119      	cbz	r1, 801c28c <forward_conv2d_integer_SSSA_ch+0x118>
 801c284:	8858      	ldrh	r0, [r3, #2]
 801c286:	2800      	cmp	r0, #0
 801c288:	f040 8213 	bne.w	801c6b2 <forward_conv2d_integer_SSSA_ch+0x53e>
 801c28c:	eddf 0a83 	vldr	s1, [pc, #524]	; 801c49c <forward_conv2d_integer_SSSA_ch+0x328>
 801c290:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c292:	4551      	cmp	r1, sl
 801c294:	f040 80a9 	bne.w	801c3ea <forward_conv2d_integer_SSSA_ch+0x276>
 801c298:	9919      	ldr	r1, [sp, #100]	; 0x64
 801c29a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c29c:	4281      	cmp	r1, r0
 801c29e:	f040 80a4 	bne.w	801c3ea <forward_conv2d_integer_SSSA_ch+0x276>
 801c2a2:	9921      	ldr	r1, [sp, #132]	; 0x84
 801c2a4:	981a      	ldr	r0, [sp, #104]	; 0x68
 801c2a6:	4281      	cmp	r1, r0
 801c2a8:	f040 809f 	bne.w	801c3ea <forward_conv2d_integer_SSSA_ch+0x276>
 801c2ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801c2ae:	4588      	cmp	r8, r1
 801c2b0:	f040 809b 	bne.w	801c3ea <forward_conv2d_integer_SSSA_ch+0x276>
 801c2b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c2b6:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c2b8:	4281      	cmp	r1, r0
 801c2ba:	bf08      	it	eq
 801c2bc:	f1b9 0f03 	cmpeq.w	r9, #3
 801c2c0:	bf0c      	ite	eq
 801c2c2:	2401      	moveq	r4, #1
 801c2c4:	2400      	movne	r4, #0
 801c2c6:	f1ba 0f01 	cmp.w	sl, #1
 801c2ca:	9414      	str	r4, [sp, #80]	; 0x50
 801c2cc:	f000 8093 	beq.w	801c3f6 <forward_conv2d_integer_SSSA_ch+0x282>
 801c2d0:	2100      	movs	r1, #0
 801c2d2:	9114      	str	r1, [sp, #80]	; 0x50
 801c2d4:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801c2d8:	f8de e018 	ldr.w	lr, [lr, #24]
 801c2dc:	6880      	ldr	r0, [r0, #8]
 801c2de:	f8de 7008 	ldr.w	r7, [lr, #8]
 801c2e2:	9014      	str	r0, [sp, #80]	; 0x50
 801c2e4:	f8db 0018 	ldr.w	r0, [fp, #24]
 801c2e8:	971b      	str	r7, [sp, #108]	; 0x6c
 801c2ea:	6880      	ldr	r0, [r0, #8]
 801c2ec:	9017      	str	r0, [sp, #92]	; 0x5c
 801c2ee:	2a00      	cmp	r2, #0
 801c2f0:	f000 8094 	beq.w	801c41c <forward_conv2d_integer_SSSA_ch+0x2a8>
 801c2f4:	6850      	ldr	r0, [r2, #4]
 801c2f6:	2800      	cmp	r0, #0
 801c2f8:	f000 81e1 	beq.w	801c6be <forward_conv2d_integer_SSSA_ch+0x54a>
 801c2fc:	8852      	ldrh	r2, [r2, #2]
 801c2fe:	2a00      	cmp	r2, #0
 801c300:	f000 808c 	beq.w	801c41c <forward_conv2d_integer_SSSA_ch+0x2a8>
 801c304:	6842      	ldr	r2, [r0, #4]
 801c306:	f992 2000 	ldrsb.w	r2, [r2]
 801c30a:	9215      	str	r2, [sp, #84]	; 0x54
 801c30c:	b13b      	cbz	r3, 801c31e <forward_conv2d_integer_SSSA_ch+0x1aa>
 801c30e:	685a      	ldr	r2, [r3, #4]
 801c310:	2a00      	cmp	r2, #0
 801c312:	f000 81db 	beq.w	801c6cc <forward_conv2d_integer_SSSA_ch+0x558>
 801c316:	885b      	ldrh	r3, [r3, #2]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	f040 81c5 	bne.w	801c6a8 <forward_conv2d_integer_SSSA_ch+0x534>
 801c31e:	9316      	str	r3, [sp, #88]	; 0x58
 801c320:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c322:	2b00      	cmp	r3, #0
 801c324:	f000 8093 	beq.w	801c44e <forward_conv2d_integer_SSSA_ch+0x2da>
 801c328:	6858      	ldr	r0, [r3, #4]
 801c32a:	b100      	cbz	r0, 801c32e <forward_conv2d_integer_SSSA_ch+0x1ba>
 801c32c:	6800      	ldr	r0, [r0, #0]
 801c32e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801c332:	9323      	str	r3, [sp, #140]	; 0x8c
 801c334:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c336:	2b01      	cmp	r3, #1
 801c338:	f000 8091 	beq.w	801c45e <forward_conv2d_integer_SSSA_ch+0x2ea>
 801c33c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c33e:	4293      	cmp	r3, r2
 801c340:	bf0c      	ite	eq
 801c342:	2317      	moveq	r3, #23
 801c344:	2300      	movne	r3, #0
 801c346:	9329      	str	r3, [sp, #164]	; 0xa4
 801c348:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801c34a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c34c:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 801c350:	fb03 f307 	mul.w	r3, r3, r7
 801c354:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801c356:	921d      	str	r2, [sp, #116]	; 0x74
 801c358:	fb02 7303 	mla	r3, r2, r3, r7
 801c35c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801c35e:	429f      	cmp	r7, r3
 801c360:	d26d      	bcs.n	801c43e <forward_conv2d_integer_SSSA_ch+0x2ca>
 801c362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c364:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c366:	fb03 f308 	mul.w	r3, r3, r8
 801c36a:	fb02 7303 	mla	r3, r2, r3, r7
 801c36e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c370:	429a      	cmp	r2, r3
 801c372:	bf2c      	ite	cs
 801c374:	2300      	movcs	r3, #0
 801c376:	2301      	movcc	r3, #1
 801c378:	9326      	str	r3, [sp, #152]	; 0x98
 801c37a:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801c37e:	fa1f fa8a 	uxth.w	sl, sl
 801c382:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801c384:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c386:	921c      	str	r2, [sp, #112]	; 0x70
 801c388:	2f01      	cmp	r7, #1
 801c38a:	fb1a f202 	smulbb	r2, sl, r2
 801c38e:	885b      	ldrh	r3, [r3, #2]
 801c390:	b292      	uxth	r2, r2
 801c392:	d003      	beq.n	801c39c <forward_conv2d_integer_SSSA_ch+0x228>
 801c394:	46bc      	mov	ip, r7
 801c396:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801c398:	45bc      	cmp	ip, r7
 801c39a:	d06f      	beq.n	801c47c <forward_conv2d_integer_SSSA_ch+0x308>
 801c39c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801c39e:	fb02 f207 	mul.w	r2, r2, r7
 801c3a2:	2c00      	cmp	r4, #0
 801c3a4:	f040 8194 	bne.w	801c6d0 <forward_conv2d_integer_SSSA_ch+0x55c>
 801c3a8:	2900      	cmp	r1, #0
 801c3aa:	f000 8191 	beq.w	801c6d0 <forward_conv2d_integer_SSSA_ch+0x55c>
 801c3ae:	0094      	lsls	r4, r2, #2
 801c3b0:	2b01      	cmp	r3, #1
 801c3b2:	d960      	bls.n	801c476 <forward_conv2d_integer_SSSA_ch+0x302>
 801c3b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c3b6:	0093      	lsls	r3, r2, #2
 801c3b8:	189a      	adds	r2, r3, r2
 801c3ba:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801c3be:	18eb      	adds	r3, r5, r3
 801c3c0:	462a      	mov	r2, r5
 801c3c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c3c4:	9325      	str	r3, [sp, #148]	; 0x94
 801c3c6:	f000 fea3 	bl	801d110 <align_factor_ch>
 801c3ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c3cc:	3b15      	subs	r3, #21
 801c3ce:	e9cd 542a 	strd	r5, r4, [sp, #168]	; 0xa8
 801c3d2:	2b03      	cmp	r3, #3
 801c3d4:	f200 818c 	bhi.w	801c6f0 <forward_conv2d_integer_SSSA_ch+0x57c>
 801c3d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c3dc:	00e4013d 	.word	0x00e4013d
 801c3e0:	006200ae 	.word	0x006200ae
 801c3e4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801c49c <forward_conv2d_integer_SSSA_ch+0x328>
 801c3e8:	e749      	b.n	801c27e <forward_conv2d_integer_SSSA_ch+0x10a>
 801c3ea:	2400      	movs	r4, #0
 801c3ec:	f1ba 0f01 	cmp.w	sl, #1
 801c3f0:	9414      	str	r4, [sp, #80]	; 0x50
 801c3f2:	f47f af6d 	bne.w	801c2d0 <forward_conv2d_integer_SSSA_ch+0x15c>
 801c3f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c3f8:	2901      	cmp	r1, #1
 801c3fa:	f47f af69 	bne.w	801c2d0 <forward_conv2d_integer_SSSA_ch+0x15c>
 801c3fe:	9921      	ldr	r1, [sp, #132]	; 0x84
 801c400:	981a      	ldr	r0, [sp, #104]	; 0x68
 801c402:	4301      	orrs	r1, r0
 801c404:	f47f af64 	bne.w	801c2d0 <forward_conv2d_integer_SSSA_ch+0x15c>
 801c408:	9919      	ldr	r1, [sp, #100]	; 0x64
 801c40a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c40c:	2901      	cmp	r1, #1
 801c40e:	bf08      	it	eq
 801c410:	2801      	cmpeq	r0, #1
 801c412:	bf0c      	ite	eq
 801c414:	2101      	moveq	r1, #1
 801c416:	2100      	movne	r1, #0
 801c418:	9114      	str	r1, [sp, #80]	; 0x50
 801c41a:	e75b      	b.n	801c2d4 <forward_conv2d_integer_SSSA_ch+0x160>
 801c41c:	9215      	str	r2, [sp, #84]	; 0x54
 801c41e:	e775      	b.n	801c30c <forward_conv2d_integer_SSSA_ch+0x198>
 801c420:	2300      	movs	r3, #0
 801c422:	685b      	ldr	r3, [r3, #4]
 801c424:	deff      	udf	#255	; 0xff
 801c426:	2300      	movs	r3, #0
 801c428:	685b      	ldr	r3, [r3, #4]
 801c42a:	deff      	udf	#255	; 0xff
 801c42c:	f8d3 c000 	ldr.w	ip, [r3]
 801c430:	e6c0      	b.n	801c1b4 <forward_conv2d_integer_SSSA_ch+0x40>
 801c432:	6a06      	ldr	r6, [r0, #32]
 801c434:	2e00      	cmp	r6, #0
 801c436:	f43f af0d 	beq.w	801c254 <forward_conv2d_integer_SSSA_ch+0xe0>
 801c43a:	68b6      	ldr	r6, [r6, #8]
 801c43c:	e70a      	b.n	801c254 <forward_conv2d_integer_SSSA_ch+0xe0>
 801c43e:	2300      	movs	r3, #0
 801c440:	9326      	str	r3, [sp, #152]	; 0x98
 801c442:	e79a      	b.n	801c37a <forward_conv2d_integer_SSSA_ch+0x206>
 801c444:	684b      	ldr	r3, [r1, #4]
 801c446:	deff      	udf	#255	; 0xff
 801c448:	2300      	movs	r3, #0
 801c44a:	685b      	ldr	r3, [r3, #4]
 801c44c:	deff      	udf	#255	; 0xff
 801c44e:	4618      	mov	r0, r3
 801c450:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801c454:	9323      	str	r3, [sp, #140]	; 0x8c
 801c456:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c458:	2b01      	cmp	r3, #1
 801c45a:	f47f af6f 	bne.w	801c33c <forward_conv2d_integer_SSSA_ch+0x1c8>
 801c45e:	b1a4      	cbz	r4, 801c48a <forward_conv2d_integer_SSSA_ch+0x316>
 801c460:	2315      	movs	r3, #21
 801c462:	9329      	str	r3, [sp, #164]	; 0xa4
 801c464:	e770      	b.n	801c348 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801c466:	9327      	str	r3, [sp, #156]	; 0x9c
 801c468:	e69c      	b.n	801c1a4 <forward_conv2d_integer_SSSA_ch+0x30>
 801c46a:	460b      	mov	r3, r1
 801c46c:	b909      	cbnz	r1, 801c472 <forward_conv2d_integer_SSSA_ch+0x2fe>
 801c46e:	699b      	ldr	r3, [r3, #24]
 801c470:	deff      	udf	#255	; 0xff
 801c472:	68d3      	ldr	r3, [r2, #12]
 801c474:	deff      	udf	#255	; 0xff
 801c476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c478:	009b      	lsls	r3, r3, #2
 801c47a:	e7a0      	b.n	801c3be <forward_conv2d_integer_SSSA_ch+0x24a>
 801c47c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801c47e:	fb01 f202 	mul.w	r2, r1, r2
 801c482:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c486:	1c54      	adds	r4, r2, #1
 801c488:	e792      	b.n	801c3b0 <forward_conv2d_integer_SSSA_ch+0x23c>
 801c48a:	2900      	cmp	r1, #0
 801c48c:	460b      	mov	r3, r1
 801c48e:	bf0c      	ite	eq
 801c490:	2318      	moveq	r3, #24
 801c492:	2316      	movne	r3, #22
 801c494:	9329      	str	r3, [sp, #164]	; 0xa4
 801c496:	e757      	b.n	801c348 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801c498:	2400      	movs	r4, #0
 801c49a:	e696      	b.n	801c1ca <forward_conv2d_integer_SSSA_ch+0x56>
 801c49c:	00000000 	.word	0x00000000
 801c4a0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801c4a2:	4653      	mov	r3, sl
 801c4a4:	9922      	ldr	r1, [sp, #136]	; 0x88
 801c4a6:	4648      	mov	r0, r9
 801c4a8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c4aa:	9702      	str	r7, [sp, #8]
 801c4ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c4ae:	9101      	str	r1, [sp, #4]
 801c4b0:	9400      	str	r4, [sp, #0]
 801c4b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c4b4:	9503      	str	r5, [sp, #12]
 801c4b6:	f001 fcc7 	bl	801de48 <st_sssa8_ch_convolve_rank1upd>
 801c4ba:	970b      	str	r7, [sp, #44]	; 0x2c
 801c4bc:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801c4be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c4c0:	9707      	str	r7, [sp, #28]
 801c4c2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801c4c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c4c6:	9706      	str	r7, [sp, #24]
 801c4c8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801c4ca:	9822      	ldr	r0, [sp, #136]	; 0x88
 801c4cc:	9705      	str	r7, [sp, #20]
 801c4ce:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c4d0:	930d      	str	r3, [sp, #52]	; 0x34
 801c4d2:	9704      	str	r7, [sp, #16]
 801c4d4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801c4d6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801c4da:	920c      	str	r2, [sp, #48]	; 0x30
 801c4dc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c4de:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801c4e2:	930e      	str	r3, [sp, #56]	; 0x38
 801c4e4:	464b      	mov	r3, r9
 801c4e6:	920a      	str	r2, [sp, #40]	; 0x28
 801c4e8:	fa1f f288 	uxth.w	r2, r8
 801c4ec:	9008      	str	r0, [sp, #32]
 801c4ee:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801c4f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c4f4:	9509      	str	r5, [sp, #36]	; 0x24
 801c4f6:	e9cd a702 	strd	sl, r7, [sp, #8]
 801c4fa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c4fc:	9701      	str	r7, [sp, #4]
 801c4fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801c500:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801c504:	9700      	str	r7, [sp, #0]
 801c506:	f001 fd27 	bl	801df58 <st_sssa8_ch_convolve>
 801c50a:	f8db 3008 	ldr.w	r3, [fp, #8]
 801c50e:	0a1b      	lsrs	r3, r3, #8
 801c510:	d046      	beq.n	801c5a0 <forward_conv2d_integer_SSSA_ch+0x42c>
 801c512:	f8db 100c 	ldr.w	r1, [fp, #12]
 801c516:	2201      	movs	r2, #1
 801c518:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c51c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801c520:	4299      	cmp	r1, r3
 801c522:	fb00 f202 	mul.w	r2, r0, r2
 801c526:	d1f9      	bne.n	801c51c <forward_conv2d_integer_SSSA_ch+0x3a8>
 801c528:	4633      	mov	r3, r6
 801c52a:	4659      	mov	r1, fp
 801c52c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c52e:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801c530:	47a0      	blx	r4
 801c532:	b02d      	add	sp, #180	; 0xb4
 801c534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c538:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801c53c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c53e:	4652      	mov	r2, sl
 801c540:	9500      	str	r5, [sp, #0]
 801c542:	f000 fe5b 	bl	801d1fc <st_sssa8_ch_conv_dw_Wadapt>
 801c546:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801c548:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c54a:	9707      	str	r7, [sp, #28]
 801c54c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801c54e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c550:	9706      	str	r7, [sp, #24]
 801c552:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801c554:	920c      	str	r2, [sp, #48]	; 0x30
 801c556:	9705      	str	r7, [sp, #20]
 801c558:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801c55a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c55c:	9704      	str	r7, [sp, #16]
 801c55e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801c560:	9822      	ldr	r0, [sp, #136]	; 0x88
 801c562:	930d      	str	r3, [sp, #52]	; 0x34
 801c564:	920b      	str	r2, [sp, #44]	; 0x2c
 801c566:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801c56a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c56c:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801c570:	930e      	str	r3, [sp, #56]	; 0x38
 801c572:	464b      	mov	r3, r9
 801c574:	920a      	str	r2, [sp, #40]	; 0x28
 801c576:	fa1f f288 	uxth.w	r2, r8
 801c57a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801c57e:	9008      	str	r0, [sp, #32]
 801c580:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c582:	9509      	str	r5, [sp, #36]	; 0x24
 801c584:	e9cd a702 	strd	sl, r7, [sp, #8]
 801c588:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c58a:	9701      	str	r7, [sp, #4]
 801c58c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801c58e:	9700      	str	r7, [sp, #0]
 801c590:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801c594:	f000 fef0 	bl	801d378 <st_sssa8_ch_convolve_dw>
 801c598:	f8db 3008 	ldr.w	r3, [fp, #8]
 801c59c:	0a1b      	lsrs	r3, r3, #8
 801c59e:	d1b8      	bne.n	801c512 <forward_conv2d_integer_SSSA_ch+0x39e>
 801c5a0:	2201      	movs	r2, #1
 801c5a2:	e7c1      	b.n	801c528 <forward_conv2d_integer_SSSA_ch+0x3b4>
 801c5a4:	ab2a      	add	r3, sp, #168	; 0xa8
 801c5a6:	464a      	mov	r2, r9
 801c5a8:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801c5ac:	f002 fe46 	bl	801f23c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801c5b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	f040 809d 	bne.w	801c6f2 <forward_conv2d_integer_SSSA_ch+0x57e>
 801c5b8:	fa1f f388 	uxth.w	r3, r8
 801c5bc:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801c5c0:	f04f 0801 	mov.w	r8, #1
 801c5c4:	9326      	str	r3, [sp, #152]	; 0x98
 801c5c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801c5c8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801c5ca:	9513      	str	r5, [sp, #76]	; 0x4c
 801c5cc:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
 801c5d0:	fb02 f303 	mul.w	r3, r2, r3
 801c5d4:	931d      	str	r3, [sp, #116]	; 0x74
 801c5d6:	b28b      	uxth	r3, r1
 801c5d8:	9328      	str	r3, [sp, #160]	; 0xa0
 801c5da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c5dc:	9423      	str	r4, [sp, #140]	; 0x8c
 801c5de:	fb03 f301 	mul.w	r3, r3, r1
 801c5e2:	931e      	str	r3, [sp, #120]	; 0x78
 801c5e4:	b293      	uxth	r3, r2
 801c5e6:	931f      	str	r3, [sp, #124]	; 0x7c
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	9318      	str	r3, [sp, #96]	; 0x60
 801c5ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c5ee:	3301      	adds	r3, #1
 801c5f0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c5f2:	9509      	str	r5, [sp, #36]	; 0x24
 801c5f4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c5f6:	940d      	str	r4, [sp, #52]	; 0x34
 801c5f8:	442c      	add	r4, r5
 801c5fa:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801c5fe:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801c600:	9417      	str	r4, [sp, #92]	; 0x5c
 801c602:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801c604:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c606:	9408      	str	r4, [sp, #32]
 801c608:	4664      	mov	r4, ip
 801c60a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c60c:	442c      	add	r4, r5
 801c60e:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c610:	910c      	str	r1, [sp, #48]	; 0x30
 801c612:	941b      	str	r4, [sp, #108]	; 0x6c
 801c614:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801c616:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c618:	9407      	str	r4, [sp, #28]
 801c61a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801c61c:	9318      	str	r3, [sp, #96]	; 0x60
 801c61e:	464b      	mov	r3, r9
 801c620:	9406      	str	r4, [sp, #24]
 801c622:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801c624:	920e      	str	r2, [sp, #56]	; 0x38
 801c626:	9405      	str	r4, [sp, #20]
 801c628:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c62a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c62c:	9404      	str	r4, [sp, #16]
 801c62e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c630:	910b      	str	r1, [sp, #44]	; 0x2c
 801c632:	900a      	str	r0, [sp, #40]	; 0x28
 801c634:	4660      	mov	r0, ip
 801c636:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c638:	e9cd a402 	strd	sl, r4, [sp, #8]
 801c63c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c63e:	9701      	str	r7, [sp, #4]
 801c640:	9400      	str	r4, [sp, #0]
 801c642:	ac2a      	add	r4, sp, #168	; 0xa8
 801c644:	9410      	str	r4, [sp, #64]	; 0x40
 801c646:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801c648:	940f      	str	r4, [sp, #60]	; 0x3c
 801c64a:	f002 fe0b 	bl	801f264 <st_sssa8_ch_convolve_1x1>
 801c64e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c650:	4543      	cmp	r3, r8
 801c652:	d3cb      	bcc.n	801c5ec <forward_conv2d_integer_SSSA_ch+0x478>
 801c654:	e759      	b.n	801c50a <forward_conv2d_integer_SSSA_ch+0x396>
 801c656:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c658:	4653      	mov	r3, sl
 801c65a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801c65c:	4648      	mov	r0, r9
 801c65e:	9402      	str	r4, [sp, #8]
 801c660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c662:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c664:	9503      	str	r5, [sp, #12]
 801c666:	9701      	str	r7, [sp, #4]
 801c668:	f8cd a000 	str.w	sl, [sp]
 801c66c:	f001 fbec 	bl	801de48 <st_sssa8_ch_convolve_rank1upd>
 801c670:	9407      	str	r4, [sp, #28]
 801c672:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801c674:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801c676:	9403      	str	r4, [sp, #12]
 801c678:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c67a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801c67e:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c680:	9109      	str	r1, [sp, #36]	; 0x24
 801c682:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c684:	920a      	str	r2, [sp, #40]	; 0x28
 801c686:	464a      	mov	r2, r9
 801c688:	9108      	str	r1, [sp, #32]
 801c68a:	fa1f f188 	uxth.w	r1, r8
 801c68e:	9006      	str	r0, [sp, #24]
 801c690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c692:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c694:	950b      	str	r5, [sp, #44]	; 0x2c
 801c696:	e9cd a401 	strd	sl, r4, [sp, #4]
 801c69a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c69c:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801c6a0:	9400      	str	r4, [sp, #0]
 801c6a2:	f002 f9bb 	bl	801ea1c <st_sssa8_ch_convolve_rgb>
 801c6a6:	e730      	b.n	801c50a <forward_conv2d_integer_SSSA_ch+0x396>
 801c6a8:	6853      	ldr	r3, [r2, #4]
 801c6aa:	f993 3000 	ldrsb.w	r3, [r3]
 801c6ae:	9316      	str	r3, [sp, #88]	; 0x58
 801c6b0:	e636      	b.n	801c320 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801c6b2:	6809      	ldr	r1, [r1, #0]
 801c6b4:	edd1 0a00 	vldr	s1, [r1]
 801c6b8:	e5ea      	b.n	801c290 <forward_conv2d_integer_SSSA_ch+0x11c>
 801c6ba:	469e      	mov	lr, r3
 801c6bc:	e569      	b.n	801c192 <forward_conv2d_integer_SSSA_ch+0x1e>
 801c6be:	9015      	str	r0, [sp, #84]	; 0x54
 801c6c0:	e624      	b.n	801c30c <forward_conv2d_integer_SSSA_ch+0x198>
 801c6c2:	4a0f      	ldr	r2, [pc, #60]	; (801c700 <forward_conv2d_integer_SSSA_ch+0x58c>)
 801c6c4:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801c6c8:	9224      	str	r2, [sp, #144]	; 0x90
 801c6ca:	e58d      	b.n	801c1e8 <forward_conv2d_integer_SSSA_ch+0x74>
 801c6cc:	9216      	str	r2, [sp, #88]	; 0x58
 801c6ce:	e627      	b.n	801c320 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801c6d0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801c6d2:	4621      	mov	r1, r4
 801c6d4:	4414      	add	r4, r2
 801c6d6:	fb02 f101 	mul.w	r1, r2, r1
 801c6da:	00a4      	lsls	r4, r4, #2
 801c6dc:	004a      	lsls	r2, r1, #1
 801c6de:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 801c6e2:	bfd4      	ite	le
 801c6e4:	18a4      	addle	r4, r4, r2
 801c6e6:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 801c6ea:	e661      	b.n	801c3b0 <forward_conv2d_integer_SSSA_ch+0x23c>
 801c6ec:	461c      	mov	r4, r3
 801c6ee:	e56c      	b.n	801c1ca <forward_conv2d_integer_SSSA_ch+0x56>
 801c6f0:	e7fe      	b.n	801c6f0 <forward_conv2d_integer_SSSA_ch+0x57c>
 801c6f2:	f1b8 0f00 	cmp.w	r8, #0
 801c6f6:	f43f af08 	beq.w	801c50a <forward_conv2d_integer_SSSA_ch+0x396>
 801c6fa:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801c6fc:	e763      	b.n	801c5c6 <forward_conv2d_integer_SSSA_ch+0x452>
 801c6fe:	bf00      	nop
 801c700:	0801c171 	.word	0x0801c171

0801c704 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 801c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c708:	6983      	ldr	r3, [r0, #24]
 801c70a:	b0d5      	sub	sp, #340	; 0x154
 801c70c:	881e      	ldrh	r6, [r3, #0]
 801c70e:	2e00      	cmp	r6, #0
 801c710:	f000 81b9 	beq.w	801ca86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x382>
 801c714:	6859      	ldr	r1, [r3, #4]
 801c716:	684d      	ldr	r5, [r1, #4]
 801c718:	2d00      	cmp	r5, #0
 801c71a:	f000 8360 	beq.w	801cdde <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 801c71e:	682b      	ldr	r3, [r5, #0]
 801c720:	9313      	str	r3, [sp, #76]	; 0x4c
 801c722:	2e01      	cmp	r6, #1
 801c724:	f240 81ac 	bls.w	801ca80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801c728:	690b      	ldr	r3, [r1, #16]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	f000 82b2 	beq.w	801cc94 <forward_conv2d_nl_pool_integer_SSSA_ch+0x590>
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	931b      	str	r3, [sp, #108]	; 0x6c
 801c734:	2e02      	cmp	r6, #2
 801c736:	f000 81a3 	beq.w	801ca80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801c73a:	69cc      	ldr	r4, [r1, #28]
 801c73c:	2c00      	cmp	r4, #0
 801c73e:	f040 82a7 	bne.w	801cc90 <forward_conv2d_nl_pool_integer_SSSA_ch+0x58c>
 801c742:	4623      	mov	r3, r4
 801c744:	f111 0218 	adds.w	r2, r1, #24
 801c748:	d007      	beq.n	801c75a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801c74a:	8b0a      	ldrh	r2, [r1, #24]
 801c74c:	2a01      	cmp	r2, #1
 801c74e:	f240 8375 	bls.w	801ce3c <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>
 801c752:	2c00      	cmp	r4, #0
 801c754:	f000 8370 	beq.w	801ce38 <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 801c758:	6862      	ldr	r2, [r4, #4]
 801c75a:	2e03      	cmp	r6, #3
 801c75c:	f000 8190 	beq.w	801ca80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801c760:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801c762:	2900      	cmp	r1, #0
 801c764:	f000 8191 	beq.w	801ca8a <forward_conv2d_nl_pool_integer_SSSA_ch+0x386>
 801c768:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c76a:	680d      	ldr	r5, [r1, #0]
 801c76c:	9630      	str	r6, [sp, #192]	; 0xc0
 801c76e:	9516      	str	r5, [sp, #88]	; 0x58
 801c770:	f8d1 b004 	ldr.w	fp, [r1, #4]
 801c774:	2e00      	cmp	r6, #0
 801c776:	f000 835a 	beq.w	801ce2e <forward_conv2d_nl_pool_integer_SSSA_ch+0x72a>
 801c77a:	6889      	ldr	r1, [r1, #8]
 801c77c:	911e      	str	r1, [sp, #120]	; 0x78
 801c77e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c780:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 801c784:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 801c788:	f8db 100c 	ldr.w	r1, [fp, #12]
 801c78c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801c790:	6849      	ldr	r1, [r1, #4]
 801c792:	b2bd      	uxth	r5, r7
 801c794:	f8de 6000 	ldr.w	r6, [lr]
 801c798:	9117      	str	r1, [sp, #92]	; 0x5c
 801c79a:	951d      	str	r5, [sp, #116]	; 0x74
 801c79c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801c79e:	9725      	str	r7, [sp, #148]	; 0x94
 801c7a0:	68e9      	ldr	r1, [r5, #12]
 801c7a2:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 801c7a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c7a8:	9515      	str	r5, [sp, #84]	; 0x54
 801c7aa:	b2b5      	uxth	r5, r6
 801c7ac:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801c7b0:	9514      	str	r5, [sp, #80]	; 0x50
 801c7b2:	b2bd      	uxth	r5, r7
 801c7b4:	9521      	str	r5, [sp, #132]	; 0x84
 801c7b6:	e9dc 5902 	ldrd	r5, r9, [ip, #8]
 801c7ba:	f8de c008 	ldr.w	ip, [lr, #8]
 801c7be:	952d      	str	r5, [sp, #180]	; 0xb4
 801c7c0:	f8be 5004 	ldrh.w	r5, [lr, #4]
 801c7c4:	9522      	str	r5, [sp, #136]	; 0x88
 801c7c6:	68cd      	ldr	r5, [r1, #12]
 801c7c8:	6889      	ldr	r1, [r1, #8]
 801c7ca:	9532      	str	r5, [sp, #200]	; 0xc8
 801c7cc:	9138      	str	r1, [sp, #224]	; 0xe0
 801c7ce:	e9da 1801 	ldrd	r1, r8, [sl, #4]
 801c7d2:	911a      	str	r1, [sp, #104]	; 0x68
 801c7d4:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801c7d6:	6809      	ldr	r1, [r1, #0]
 801c7d8:	9123      	str	r1, [sp, #140]	; 0x8c
 801c7da:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801c7dc:	6849      	ldr	r1, [r1, #4]
 801c7de:	913b      	str	r1, [sp, #236]	; 0xec
 801c7e0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 801c7e2:	9120      	str	r1, [sp, #128]	; 0x80
 801c7e4:	69c1      	ldr	r1, [r0, #28]
 801c7e6:	9126      	str	r1, [sp, #152]	; 0x98
 801c7e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801c7ea:	9139      	str	r1, [sp, #228]	; 0xe4
 801c7ec:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801c7ee:	913a      	str	r1, [sp, #232]	; 0xe8
 801c7f0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801c7f2:	9129      	str	r1, [sp, #164]	; 0xa4
 801c7f4:	2c00      	cmp	r4, #0
 801c7f6:	f000 8242 	beq.w	801cc7e <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 801c7fa:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801c7fe:	f1ba 0f00 	cmp.w	sl, #0
 801c802:	f000 823c 	beq.w	801cc7e <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 801c806:	f8da 1018 	ldr.w	r1, [sl, #24]
 801c80a:	2900      	cmp	r1, #0
 801c80c:	bf08      	it	eq
 801c80e:	f04f 0a00 	moveq.w	sl, #0
 801c812:	fa1f fe86 	uxth.w	lr, r6
 801c816:	902e      	str	r0, [sp, #184]	; 0xb8
 801c818:	9219      	str	r2, [sp, #100]	; 0x64
 801c81a:	a941      	add	r1, sp, #260	; 0x104
 801c81c:	fa1e f08c 	uxtah	r0, lr, ip
 801c820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c822:	9150      	str	r1, [sp, #320]	; 0x140
 801c824:	2400      	movs	r4, #0
 801c826:	6996      	ldr	r6, [r2, #24]
 801c828:	4448      	add	r0, r9
 801c82a:	4611      	mov	r1, r2
 801c82c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c830:	eba0 0508 	sub.w	r5, r0, r8
 801c834:	931c      	str	r3, [sp, #112]	; 0x70
 801c836:	924e      	str	r2, [sp, #312]	; 0x138
 801c838:	f240 4201 	movw	r2, #1025	; 0x401
 801c83c:	9518      	str	r5, [sp, #96]	; 0x60
 801c83e:	b2bb      	uxth	r3, r7
 801c840:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801c842:	eb0e 0709 	add.w	r7, lr, r9
 801c846:	924f      	str	r2, [sp, #316]	; 0x13c
 801c848:	f240 4202 	movw	r2, #1026	; 0x402
 801c84c:	69ad      	ldr	r5, [r5, #24]
 801c84e:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 801c852:	9251      	str	r2, [sp, #324]	; 0x144
 801c854:	f50d 7992 	add.w	r9, sp, #292	; 0x124
 801c858:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c85a:	a84d      	add	r0, sp, #308	; 0x134
 801c85c:	9533      	str	r5, [sp, #204]	; 0xcc
 801c85e:	6c55      	ldr	r5, [r2, #68]	; 0x44
 801c860:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801c862:	931f      	str	r3, [sp, #124]	; 0x7c
 801c864:	944d      	str	r4, [sp, #308]	; 0x134
 801c866:	9727      	str	r7, [sp, #156]	; 0x9c
 801c868:	9441      	str	r4, [sp, #260]	; 0x104
 801c86a:	f8db 7018 	ldr.w	r7, [fp, #24]
 801c86e:	9445      	str	r4, [sp, #276]	; 0x114
 801c870:	9442      	str	r4, [sp, #264]	; 0x108
 801c872:	9443      	str	r4, [sp, #268]	; 0x10c
 801c874:	9446      	str	r4, [sp, #280]	; 0x118
 801c876:	9444      	str	r4, [sp, #272]	; 0x110
 801c878:	9453      	str	r4, [sp, #332]	; 0x14c
 801c87a:	9447      	str	r4, [sp, #284]	; 0x11c
 801c87c:	9448      	str	r4, [sp, #288]	; 0x120
 801c87e:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 801c882:	952a      	str	r5, [sp, #168]	; 0xa8
 801c884:	f9bd 408c 	ldrsh.w	r4, [sp, #140]	; 0x8c
 801c888:	923c      	str	r2, [sp, #240]	; 0xf0
 801c88a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c88c:	fbb5 fcf3 	udiv	ip, r5, r3
 801c890:	f10c 0301 	add.w	r3, ip, #1
 801c894:	9328      	str	r3, [sp, #160]	; 0xa0
 801c896:	f005 fc23 	bl	80220e0 <core_tensor_clone>
 801c89a:	4648      	mov	r0, r9
 801c89c:	4631      	mov	r1, r6
 801c89e:	f005 fc51 	bl	8022144 <core_array_clone>
 801c8a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c8a4:	f8cd 914c 	str.w	r9, [sp, #332]	; 0x14c
 801c8a8:	6999      	ldr	r1, [r3, #24]
 801c8aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c8ac:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801c8b0:	6818      	ldr	r0, [r3, #0]
 801c8b2:	f8db 300c 	ldr.w	r3, [fp, #12]
 801c8b6:	f8db 1000 	ldr.w	r1, [fp]
 801c8ba:	689b      	ldr	r3, [r3, #8]
 801c8bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c8be:	932f      	str	r3, [sp, #188]	; 0xbc
 801c8c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c8c2:	f8d3 e000 	ldr.w	lr, [r3]
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	f000 80e1 	beq.w	801ca8e <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801c8cc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801c8d0:	f1bc 0f00 	cmp.w	ip, #0
 801c8d4:	f000 80db 	beq.w	801ca8e <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801c8d8:	8845      	ldrh	r5, [r0, #2]
 801c8da:	2d00      	cmp	r5, #0
 801c8dc:	f000 80d7 	beq.w	801ca8e <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801c8e0:	f8dc c000 	ldr.w	ip, [ip]
 801c8e4:	ed9c 0a00 	vldr	s0, [ip]
 801c8e8:	2900      	cmp	r1, #0
 801c8ea:	f000 80d5 	beq.w	801ca98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801c8ee:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801c8f2:	f1bc 0f00 	cmp.w	ip, #0
 801c8f6:	f000 80cf 	beq.w	801ca98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801c8fa:	884d      	ldrh	r5, [r1, #2]
 801c8fc:	2d00      	cmp	r5, #0
 801c8fe:	f000 80cb 	beq.w	801ca98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801c902:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c904:	f8dc c000 	ldr.w	ip, [ip]
 801c908:	2d01      	cmp	r5, #1
 801c90a:	eddc 0a00 	vldr	s1, [ip]
 801c90e:	f040 80c9 	bne.w	801caa4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801c912:	f1b8 0f01 	cmp.w	r8, #1
 801c916:	f040 80c5 	bne.w	801caa4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801c91a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c91c:	46ac      	mov	ip, r5
 801c91e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801c920:	ea5c 0505 	orrs.w	r5, ip, r5
 801c924:	f040 80be 	bne.w	801caa4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801c928:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c92a:	46ac      	mov	ip, r5
 801c92c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801c92e:	f1bc 0f01 	cmp.w	ip, #1
 801c932:	bf08      	it	eq
 801c934:	2d01      	cmpeq	r5, #1
 801c936:	bf0c      	ite	eq
 801c938:	f04f 0c01 	moveq.w	ip, #1
 801c93c:	f04f 0c00 	movne.w	ip, #0
 801c940:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c942:	699b      	ldr	r3, [r3, #24]
 801c944:	69ad      	ldr	r5, [r5, #24]
 801c946:	689b      	ldr	r3, [r3, #8]
 801c948:	6992      	ldr	r2, [r2, #24]
 801c94a:	68ad      	ldr	r5, [r5, #8]
 801c94c:	9319      	str	r3, [sp, #100]	; 0x64
 801c94e:	6893      	ldr	r3, [r2, #8]
 801c950:	9537      	str	r5, [sp, #220]	; 0xdc
 801c952:	9324      	str	r3, [sp, #144]	; 0x90
 801c954:	2800      	cmp	r0, #0
 801c956:	f000 81a1 	beq.w	801cc9c <forward_conv2d_nl_pool_integer_SSSA_ch+0x598>
 801c95a:	6843      	ldr	r3, [r0, #4]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	f000 8264 	beq.w	801ce2a <forward_conv2d_nl_pool_integer_SSSA_ch+0x726>
 801c962:	8842      	ldrh	r2, [r0, #2]
 801c964:	2a00      	cmp	r2, #0
 801c966:	f000 8197 	beq.w	801cc98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x594>
 801c96a:	685b      	ldr	r3, [r3, #4]
 801c96c:	f993 3000 	ldrsb.w	r3, [r3]
 801c970:	9316      	str	r3, [sp, #88]	; 0x58
 801c972:	2900      	cmp	r1, #0
 801c974:	f000 8181 	beq.w	801cc7a <forward_conv2d_nl_pool_integer_SSSA_ch+0x576>
 801c978:	684b      	ldr	r3, [r1, #4]
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	f000 8253 	beq.w	801ce26 <forward_conv2d_nl_pool_integer_SSSA_ch+0x722>
 801c980:	884a      	ldrh	r2, [r1, #2]
 801c982:	2a00      	cmp	r2, #0
 801c984:	f000 8177 	beq.w	801cc76 <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 801c988:	685b      	ldr	r3, [r3, #4]
 801c98a:	f993 3000 	ldrsb.w	r3, [r3]
 801c98e:	9318      	str	r3, [sp, #96]	; 0x60
 801c990:	f1be 0f00 	cmp.w	lr, #0
 801c994:	f000 816d 	beq.w	801cc72 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56e>
 801c998:	f8de 0004 	ldr.w	r0, [lr, #4]
 801c99c:	b100      	cbz	r0, 801c9a0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801c99e:	6800      	ldr	r0, [r0, #0]
 801c9a0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801c9a4:	fa1f f188 	uxth.w	r1, r8
 801c9a8:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 801c9ac:	931c      	str	r3, [sp, #112]	; 0x70
 801c9ae:	fb11 f303 	smulbb	r3, r1, r3
 801c9b2:	9525      	str	r5, [sp, #148]	; 0x94
 801c9b4:	b29d      	uxth	r5, r3
 801c9b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c9b8:	911a      	str	r1, [sp, #104]	; 0x68
 801c9ba:	2b01      	cmp	r3, #1
 801c9bc:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801c9c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c9c4:	9113      	str	r1, [sp, #76]	; 0x4c
 801c9c6:	f000 8177 	beq.w	801ccb8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5b4>
 801c9ca:	9925      	ldr	r1, [sp, #148]	; 0x94
 801c9cc:	428b      	cmp	r3, r1
 801c9ce:	f000 816a 	beq.w	801cca6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a2>
 801c9d2:	460b      	mov	r3, r1
 801c9d4:	2100      	movs	r1, #0
 801c9d6:	fb05 f303 	mul.w	r3, r5, r3
 801c9da:	912c      	str	r1, [sp, #176]	; 0xb0
 801c9dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c9de:	fb03 f101 	mul.w	r1, r3, r1
 801c9e2:	0049      	lsls	r1, r1, #1
 801c9e4:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801c9e8:	bfa8      	it	ge
 801c9ea:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801c9ee:	f1bc 0f00 	cmp.w	ip, #0
 801c9f2:	f000 8176 	beq.w	801cce2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5de>
 801c9f6:	009d      	lsls	r5, r3, #2
 801c9f8:	2a01      	cmp	r2, #1
 801c9fa:	f240 8151 	bls.w	801cca0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59c>
 801c9fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca00:	0093      	lsls	r3, r2, #2
 801ca02:	189a      	adds	r2, r3, r2
 801ca04:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801ca08:	444b      	add	r3, r9
 801ca0a:	464a      	mov	r2, r9
 801ca0c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ca0e:	932b      	str	r3, [sp, #172]	; 0xac
 801ca10:	f000 fb7e 	bl	801d110 <align_factor_ch>
 801ca14:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ca16:	f8cd 90fc 	str.w	r9, [sp, #252]	; 0xfc
 801ca1a:	9540      	str	r5, [sp, #256]	; 0x100
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	f000 80f5 	beq.w	801cc0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x508>
 801ca22:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 801ca24:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ca26:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ca28:	fb00 f005 	mul.w	r0, r0, r5
 801ca2c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ca2e:	4613      	mov	r3, r2
 801ca30:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 801ca34:	902f      	str	r0, [sp, #188]	; 0xbc
 801ca36:	b2a8      	uxth	r0, r5
 801ca38:	fb03 f301 	mul.w	r3, r3, r1
 801ca3c:	f8dd a0dc 	ldr.w	sl, [sp, #220]	; 0xdc
 801ca40:	9026      	str	r0, [sp, #152]	; 0x98
 801ca42:	2100      	movs	r1, #0
 801ca44:	9825      	ldr	r0, [sp, #148]	; 0x94
 801ca46:	9117      	str	r1, [sp, #92]	; 0x5c
 801ca48:	fb00 f303 	mul.w	r3, r0, r3
 801ca4c:	9125      	str	r1, [sp, #148]	; 0x94
 801ca4e:	9335      	str	r3, [sp, #212]	; 0xd4
 801ca50:	b293      	uxth	r3, r2
 801ca52:	9431      	str	r4, [sp, #196]	; 0xc4
 801ca54:	932d      	str	r3, [sp, #180]	; 0xb4
 801ca56:	fb00 f302 	mul.w	r3, r0, r2
 801ca5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801ca5e:	9336      	str	r3, [sp, #216]	; 0xd8
 801ca60:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 801ca64:	9334      	str	r3, [sp, #208]	; 0xd0
 801ca66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	dd6a      	ble.n	801cb42 <forward_conv2d_nl_pool_integer_SSSA_ch+0x43e>
 801ca6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ca6e:	2b17      	cmp	r3, #23
 801ca70:	f000 8186 	beq.w	801cd80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x67c>
 801ca74:	2b18      	cmp	r3, #24
 801ca76:	f000 813b 	beq.w	801ccf0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801ca7a:	2b16      	cmp	r3, #22
 801ca7c:	d015      	beq.n	801caaa <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a6>
 801ca7e:	e7fe      	b.n	801ca7e <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801ca80:	2300      	movs	r3, #0
 801ca82:	685b      	ldr	r3, [r3, #4]
 801ca84:	deff      	udf	#255	; 0xff
 801ca86:	6873      	ldr	r3, [r6, #4]
 801ca88:	deff      	udf	#255	; 0xff
 801ca8a:	68cb      	ldr	r3, [r1, #12]
 801ca8c:	deff      	udf	#255	; 0xff
 801ca8e:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801ccec <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 801ca92:	2900      	cmp	r1, #0
 801ca94:	f47f af2b 	bne.w	801c8ee <forward_conv2d_nl_pool_integer_SSSA_ch+0x1ea>
 801ca98:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801ca9a:	eddf 0a94 	vldr	s1, [pc, #592]	; 801ccec <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 801ca9e:	2d01      	cmp	r5, #1
 801caa0:	f43f af37 	beq.w	801c912 <forward_conv2d_nl_pool_integer_SSSA_ch+0x20e>
 801caa4:	f04f 0c00 	mov.w	ip, #0
 801caa8:	e74a      	b.n	801c940 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 801caaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801caac:	2b00      	cmp	r3, #0
 801caae:	f040 81b7 	bne.w	801ce20 <forward_conv2d_nl_pool_integer_SSSA_ch+0x71c>
 801cab2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cab4:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801cab8:	429c      	cmp	r4, r3
 801caba:	f000 81aa 	beq.w	801ce12 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70e>
 801cabe:	9926      	ldr	r1, [sp, #152]	; 0x98
 801cac0:	2201      	movs	r2, #1
 801cac2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801cac4:	920f      	str	r2, [sp, #60]	; 0x3c
 801cac6:	fa1f f288 	uxth.w	r2, r8
 801caca:	910e      	str	r1, [sp, #56]	; 0x38
 801cacc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801cad0:	68b8      	ldr	r0, [r7, #8]
 801cad2:	950c      	str	r5, [sp, #48]	; 0x30
 801cad4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cad6:	900d      	str	r0, [sp, #52]	; 0x34
 801cad8:	4650      	mov	r0, sl
 801cada:	950b      	str	r5, [sp, #44]	; 0x2c
 801cadc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801cade:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cae0:	950a      	str	r5, [sp, #40]	; 0x28
 801cae2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cae4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801cae6:	9509      	str	r5, [sp, #36]	; 0x24
 801cae8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801caea:	9508      	str	r5, [sp, #32]
 801caec:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801caee:	9507      	str	r5, [sp, #28]
 801caf0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801caf2:	9506      	str	r5, [sp, #24]
 801caf4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801caf6:	9505      	str	r5, [sp, #20]
 801caf8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801cafa:	9504      	str	r5, [sp, #16]
 801cafc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cafe:	9503      	str	r5, [sp, #12]
 801cb00:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cb02:	9502      	str	r5, [sp, #8]
 801cb04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801cb06:	9501      	str	r5, [sp, #4]
 801cb08:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801cb0a:	9500      	str	r5, [sp, #0]
 801cb0c:	f002 fbaa 	bl	801f264 <st_sssa8_ch_convolve_1x1>
 801cb10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cb12:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801cb14:	428b      	cmp	r3, r1
 801cb16:	f000 811e 	beq.w	801cd56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x652>
 801cb1a:	1a5b      	subs	r3, r3, r1
 801cb1c:	4598      	cmp	r8, r3
 801cb1e:	9327      	str	r3, [sp, #156]	; 0x9c
 801cb20:	bf28      	it	cs
 801cb22:	4698      	movcs	r8, r3
 801cb24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	f040 811d 	bne.w	801cd66 <forward_conv2d_nl_pool_integer_SSSA_ch+0x662>
 801cb2c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801cb2e:	449a      	add	sl, r3
 801cb30:	3401      	adds	r4, #1
 801cb32:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 801cb34:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801cb36:	4659      	mov	r1, fp
 801cb38:	981e      	ldr	r0, [sp, #120]	; 0x78
 801cb3a:	b224      	sxth	r4, r4
 801cb3c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801cb3e:	47a8      	blx	r5
 801cb40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cb42:	3b01      	subs	r3, #1
 801cb44:	9328      	str	r3, [sp, #160]	; 0xa0
 801cb46:	d46b      	bmi.n	801cc20 <forward_conv2d_nl_pool_integer_SSSA_ch+0x51c>
 801cb48:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801cb4a:	429c      	cmp	r4, r3
 801cb4c:	db36      	blt.n	801cbbc <forward_conv2d_nl_pool_integer_SSSA_ch+0x4b8>
 801cb4e:	2001      	movs	r0, #1
 801cb50:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 801cb54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cb56:	9007      	str	r0, [sp, #28]
 801cb58:	9825      	ldr	r0, [sp, #148]	; 0x94
 801cb5a:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
 801cb5e:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 801cb62:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801cb64:	1a64      	subs	r4, r4, r1
 801cb66:	9208      	str	r2, [sp, #32]
 801cb68:	1a1a      	subs	r2, r3, r0
 801cb6a:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
 801cb6e:	3501      	adds	r5, #1
 801cb70:	f8bd c0e8 	ldrh.w	ip, [sp, #232]	; 0xe8
 801cb74:	b292      	uxth	r2, r2
 801cb76:	9301      	str	r3, [sp, #4]
 801cb78:	fa1f f389 	uxth.w	r3, r9
 801cb7c:	9105      	str	r1, [sp, #20]
 801cb7e:	b224      	sxth	r4, r4
 801cb80:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
 801cb84:	9006      	str	r0, [sp, #24]
 801cb86:	f8bd 00e4 	ldrh.w	r0, [sp, #228]	; 0xe4
 801cb8a:	9102      	str	r1, [sp, #8]
 801cb8c:	9000      	str	r0, [sp, #0]
 801cb8e:	a84d      	add	r0, sp, #308	; 0x134
 801cb90:	9926      	ldr	r1, [sp, #152]	; 0x98
 801cb92:	9517      	str	r5, [sp, #92]	; 0x5c
 801cb94:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 801cb96:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 801cb9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb9c:	47a8      	blx	r5
 801cb9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cba0:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801cba4:	464d      	mov	r5, r9
 801cba6:	6951      	ldr	r1, [r2, #20]
 801cba8:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801cbaa:	1aeb      	subs	r3, r5, r3
 801cbac:	68c9      	ldr	r1, [r1, #12]
 801cbae:	6882      	ldr	r2, [r0, #8]
 801cbb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbb4:	440a      	add	r2, r1
 801cbb6:	b21b      	sxth	r3, r3
 801cbb8:	6082      	str	r2, [r0, #8]
 801cbba:	9331      	str	r3, [sp, #196]	; 0xc4
 801cbbc:	f8db 3014 	ldr.w	r3, [fp, #20]
 801cbc0:	68ba      	ldr	r2, [r7, #8]
 801cbc2:	68db      	ldr	r3, [r3, #12]
 801cbc4:	eb02 0903 	add.w	r9, r2, r3
 801cbc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cbca:	f8c7 9008 	str.w	r9, [r7, #8]
 801cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbd0:	b13b      	cbz	r3, 801cbe2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4de>
 801cbd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cbd4:	695a      	ldr	r2, [r3, #20]
 801cbd6:	68b3      	ldr	r3, [r6, #8]
 801cbd8:	68d2      	ldr	r2, [r2, #12]
 801cbda:	4413      	add	r3, r2
 801cbdc:	60b3      	str	r3, [r6, #8]
 801cbde:	f8d7 9008 	ldr.w	r9, [r7, #8]
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	4658      	mov	r0, fp
 801cbe6:	9337      	str	r3, [sp, #220]	; 0xdc
 801cbe8:	f005 f9fc 	bl	8021fe4 <get_tensor_byte_size>
 801cbec:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801cbee:	4403      	add	r3, r0
 801cbf0:	4599      	cmp	r9, r3
 801cbf2:	d306      	bcc.n	801cc02 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	60bb      	str	r3, [r7, #8]
 801cbf8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbfc:	b10b      	cbz	r3, 801cc02 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801cbfe:	68f3      	ldr	r3, [r6, #12]
 801cc00:	60b3      	str	r3, [r6, #8]
 801cc02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cc04:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801cc06:	4293      	cmp	r3, r2
 801cc08:	f4ff af2d 	bcc.w	801ca66 <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801cc10:	60bb      	str	r3, [r7, #8]
 801cc12:	68f3      	ldr	r3, [r6, #12]
 801cc14:	60b3      	str	r3, [r6, #8]
 801cc16:	68d3      	ldr	r3, [r2, #12]
 801cc18:	6093      	str	r3, [r2, #8]
 801cc1a:	b055      	add	sp, #340	; 0x154
 801cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc20:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 801cc24:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801cc26:	fb03 2314 	mls	r3, r3, r4, r2
 801cc2a:	4299      	cmp	r1, r3
 801cc2c:	d901      	bls.n	801cc32 <forward_conv2d_nl_pool_integer_SSSA_ch+0x52e>
 801cc2e:	6870      	ldr	r0, [r6, #4]
 801cc30:	4403      	add	r3, r0
 801cc32:	4299      	cmp	r1, r3
 801cc34:	d212      	bcs.n	801cc5c <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801cc36:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801cc38:	4284      	cmp	r4, r0
 801cc3a:	d00f      	beq.n	801cc5c <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801cc3c:	6870      	ldr	r0, [r6, #4]
 801cc3e:	4401      	add	r1, r0
 801cc40:	428b      	cmp	r3, r1
 801cc42:	d20b      	bcs.n	801cc5c <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801cc44:	3a01      	subs	r2, #1
 801cc46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cc48:	f813 1b01 	ldrb.w	r1, [r3], #1
 801cc4c:	f802 1f01 	strb.w	r1, [r2, #1]!
 801cc50:	68f1      	ldr	r1, [r6, #12]
 801cc52:	6870      	ldr	r0, [r6, #4]
 801cc54:	4401      	add	r1, r0
 801cc56:	428b      	cmp	r3, r1
 801cc58:	d3f6      	bcc.n	801cc48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x544>
 801cc5a:	9513      	str	r5, [sp, #76]	; 0x4c
 801cc5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cc5e:	b2a4      	uxth	r4, r4
 801cc60:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801cc62:	4413      	add	r3, r2
 801cc64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cc66:	1b1b      	subs	r3, r3, r4
 801cc68:	4414      	add	r4, r2
 801cc6a:	b21b      	sxth	r3, r3
 801cc6c:	b224      	sxth	r4, r4
 801cc6e:	9325      	str	r3, [sp, #148]	; 0x94
 801cc70:	e76a      	b.n	801cb48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x444>
 801cc72:	4670      	mov	r0, lr
 801cc74:	e694      	b.n	801c9a0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801cc76:	9218      	str	r2, [sp, #96]	; 0x60
 801cc78:	e68a      	b.n	801c990 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801cc7a:	9118      	str	r1, [sp, #96]	; 0x60
 801cc7c:	e688      	b.n	801c990 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801cc7e:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801cc82:	f1ba 0f00 	cmp.w	sl, #0
 801cc86:	f43f adc4 	beq.w	801c812 <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 801cc8a:	f8da a008 	ldr.w	sl, [sl, #8]
 801cc8e:	e5c0      	b.n	801c812 <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 801cc90:	6823      	ldr	r3, [r4, #0]
 801cc92:	e557      	b.n	801c744 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40>
 801cc94:	931b      	str	r3, [sp, #108]	; 0x6c
 801cc96:	e54d      	b.n	801c734 <forward_conv2d_nl_pool_integer_SSSA_ch+0x30>
 801cc98:	9216      	str	r2, [sp, #88]	; 0x58
 801cc9a:	e66a      	b.n	801c972 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801cc9c:	9016      	str	r0, [sp, #88]	; 0x58
 801cc9e:	e668      	b.n	801c972 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801cca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cca2:	009b      	lsls	r3, r3, #2
 801cca4:	e6b0      	b.n	801ca08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x304>
 801cca6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cca8:	fb05 f503 	mul.w	r5, r5, r3
 801ccac:	2317      	movs	r3, #23
 801ccae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccb2:	932c      	str	r3, [sp, #176]	; 0xb0
 801ccb4:	3501      	adds	r5, #1
 801ccb6:	e69f      	b.n	801c9f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 801ccb8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ccba:	f1bc 0f00 	cmp.w	ip, #0
 801ccbe:	fb05 f303 	mul.w	r3, r5, r3
 801ccc2:	bf14      	ite	ne
 801ccc4:	2516      	movne	r5, #22
 801ccc6:	2518      	moveq	r5, #24
 801ccc8:	fb01 f103 	mul.w	r1, r1, r3
 801cccc:	952c      	str	r5, [sp, #176]	; 0xb0
 801ccce:	0049      	lsls	r1, r1, #1
 801ccd0:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801ccd4:	bfa8      	it	ge
 801ccd6:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801ccda:	f1bc 0f00 	cmp.w	ip, #0
 801ccde:	f47f ae8a 	bne.w	801c9f6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 801cce2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cce4:	195d      	adds	r5, r3, r5
 801cce6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801ccea:	e685      	b.n	801c9f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 801ccec:	00000000 	.word	0x00000000
 801ccf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ccf2:	b913      	cbnz	r3, 801ccfa <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 801ccf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ccf6:	429c      	cmp	r4, r3
 801ccf8:	d07c      	beq.n	801cdf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6f0>
 801ccfa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ccfc:	2201      	movs	r2, #1
 801ccfe:	9926      	ldr	r1, [sp, #152]	; 0x98
 801cd00:	9510      	str	r5, [sp, #64]	; 0x40
 801cd02:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801cd04:	920f      	str	r2, [sp, #60]	; 0x3c
 801cd06:	fa1f f288 	uxth.w	r2, r8
 801cd0a:	910e      	str	r1, [sp, #56]	; 0x38
 801cd0c:	68b8      	ldr	r0, [r7, #8]
 801cd0e:	950c      	str	r5, [sp, #48]	; 0x30
 801cd10:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cd12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cd14:	950b      	str	r5, [sp, #44]	; 0x2c
 801cd16:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801cd18:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801cd1a:	950a      	str	r5, [sp, #40]	; 0x28
 801cd1c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cd1e:	900d      	str	r0, [sp, #52]	; 0x34
 801cd20:	4650      	mov	r0, sl
 801cd22:	9509      	str	r5, [sp, #36]	; 0x24
 801cd24:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801cd26:	9508      	str	r5, [sp, #32]
 801cd28:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801cd2a:	9507      	str	r5, [sp, #28]
 801cd2c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801cd2e:	9506      	str	r5, [sp, #24]
 801cd30:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cd32:	9505      	str	r5, [sp, #20]
 801cd34:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801cd36:	9504      	str	r5, [sp, #16]
 801cd38:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cd3a:	9503      	str	r5, [sp, #12]
 801cd3c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cd3e:	9502      	str	r5, [sp, #8]
 801cd40:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801cd42:	9501      	str	r5, [sp, #4]
 801cd44:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801cd46:	9500      	str	r5, [sp, #0]
 801cd48:	f001 f906 	bl	801df58 <st_sssa8_ch_convolve>
 801cd4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cd4e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801cd50:	428b      	cmp	r3, r1
 801cd52:	f47f aee2 	bne.w	801cb1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x416>
 801cd56:	f04f 0800 	mov.w	r8, #0
 801cd5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cd5c:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	f43f aee3 	beq.w	801cb2c <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 801cd66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cd68:	1a9b      	subs	r3, r3, r2
 801cd6a:	d504      	bpl.n	801cd76 <forward_conv2d_nl_pool_integer_SSSA_ch+0x672>
 801cd6c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801cd6e:	1a52      	subs	r2, r2, r1
 801cd70:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801cd72:	fb01 aa02 	mla	sl, r1, r2, sl
 801cd76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd7a:	b29b      	uxth	r3, r3
 801cd7c:	9314      	str	r3, [sp, #80]	; 0x50
 801cd7e:	e6d7      	b.n	801cb30 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 801cd80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cd82:	b913      	cbnz	r3, 801cd8a <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 801cd84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd86:	429c      	cmp	r4, r3
 801cd88:	d02b      	beq.n	801cde2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6de>
 801cd8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cd8c:	2201      	movs	r2, #1
 801cd8e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801cd90:	9510      	str	r5, [sp, #64]	; 0x40
 801cd92:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801cd94:	920f      	str	r2, [sp, #60]	; 0x3c
 801cd96:	fa1f f288 	uxth.w	r2, r8
 801cd9a:	910e      	str	r1, [sp, #56]	; 0x38
 801cd9c:	68b8      	ldr	r0, [r7, #8]
 801cd9e:	950c      	str	r5, [sp, #48]	; 0x30
 801cda0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cda2:	900d      	str	r0, [sp, #52]	; 0x34
 801cda4:	4650      	mov	r0, sl
 801cda6:	950b      	str	r5, [sp, #44]	; 0x2c
 801cda8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801cdaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cdac:	950a      	str	r5, [sp, #40]	; 0x28
 801cdae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cdb0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801cdb2:	9509      	str	r5, [sp, #36]	; 0x24
 801cdb4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801cdb6:	9508      	str	r5, [sp, #32]
 801cdb8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801cdba:	9507      	str	r5, [sp, #28]
 801cdbc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801cdbe:	9506      	str	r5, [sp, #24]
 801cdc0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cdc2:	9505      	str	r5, [sp, #20]
 801cdc4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801cdc6:	9504      	str	r5, [sp, #16]
 801cdc8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cdca:	9503      	str	r5, [sp, #12]
 801cdcc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cdce:	9502      	str	r5, [sp, #8]
 801cdd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801cdd2:	9501      	str	r5, [sp, #4]
 801cdd4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801cdd6:	9500      	str	r5, [sp, #0]
 801cdd8:	f000 face 	bl	801d378 <st_sssa8_ch_convolve_dw>
 801cddc:	e698      	b.n	801cb10 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40c>
 801cdde:	9513      	str	r5, [sp, #76]	; 0x4c
 801cde0:	e49f      	b.n	801c722 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e>
 801cde2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cde4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cde6:	9300      	str	r3, [sp, #0]
 801cde8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801cdea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801cdec:	9819      	ldr	r0, [sp, #100]	; 0x64
 801cdee:	f000 fa05 	bl	801d1fc <st_sssa8_ch_conv_dw_Wadapt>
 801cdf2:	e7ca      	b.n	801cd8a <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 801cdf4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cdf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cdf8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cdfa:	9101      	str	r1, [sp, #4]
 801cdfc:	9303      	str	r3, [sp, #12]
 801cdfe:	9202      	str	r2, [sp, #8]
 801ce00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ce04:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
 801ce08:	9000      	str	r0, [sp, #0]
 801ce0a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ce0c:	f001 f81c 	bl	801de48 <st_sssa8_ch_convolve_rank1upd>
 801ce10:	e773      	b.n	801ccfa <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 801ce12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ce14:	464b      	mov	r3, r9
 801ce16:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ce18:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ce1a:	f002 fa0f 	bl	801f23c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801ce1e:	e64e      	b.n	801cabe <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 801ce20:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801ce24:	e64b      	b.n	801cabe <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 801ce26:	9318      	str	r3, [sp, #96]	; 0x60
 801ce28:	e5b2      	b.n	801c990 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801ce2a:	9316      	str	r3, [sp, #88]	; 0x58
 801ce2c:	e5a1      	b.n	801c972 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801ce2e:	4904      	ldr	r1, [pc, #16]	; (801ce40 <forward_conv2d_nl_pool_integer_SSSA_ch+0x73c>)
 801ce30:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 801ce34:	9130      	str	r1, [sp, #192]	; 0xc0
 801ce36:	e4a2      	b.n	801c77e <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 801ce38:	4622      	mov	r2, r4
 801ce3a:	e48e      	b.n	801c75a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	e48c      	b.n	801c75a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801ce40:	0801c171 	.word	0x0801c171

0801ce44 <ai_check_custom_types>:
 801ce44:	4b13      	ldr	r3, [pc, #76]	; (801ce94 <ai_check_custom_types+0x50>)
 801ce46:	b082      	sub	sp, #8
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	9301      	str	r3, [sp, #4]
 801ce4c:	b118      	cbz	r0, 801ce56 <ai_check_custom_types+0x12>
 801ce4e:	7803      	ldrb	r3, [r0, #0]
 801ce50:	2b03      	cmp	r3, #3
 801ce52:	d002      	beq.n	801ce5a <ai_check_custom_types+0x16>
 801ce54:	2000      	movs	r0, #0
 801ce56:	b002      	add	sp, #8
 801ce58:	4770      	bx	lr
 801ce5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801ce5e:	4293      	cmp	r3, r2
 801ce60:	d004      	beq.n	801ce6c <ai_check_custom_types+0x28>
 801ce62:	2001      	movs	r0, #1
 801ce64:	f080 0001 	eor.w	r0, r0, #1
 801ce68:	b002      	add	sp, #8
 801ce6a:	4770      	bx	lr
 801ce6c:	7842      	ldrb	r2, [r0, #1]
 801ce6e:	3001      	adds	r0, #1
 801ce70:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ce74:	429a      	cmp	r2, r3
 801ce76:	d1f4      	bne.n	801ce62 <ai_check_custom_types+0x1e>
 801ce78:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801ce7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ce80:	429a      	cmp	r2, r3
 801ce82:	d1ee      	bne.n	801ce62 <ai_check_custom_types+0x1e>
 801ce84:	7842      	ldrb	r2, [r0, #1]
 801ce86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ce8a:	429a      	cmp	r2, r3
 801ce8c:	d1e9      	bne.n	801ce62 <ai_check_custom_types+0x1e>
 801ce8e:	2000      	movs	r0, #0
 801ce90:	e7e8      	b.n	801ce64 <ai_check_custom_types+0x20>
 801ce92:	bf00      	nop
 801ce94:	0802576c 	.word	0x0802576c

0801ce98 <ai_layers_init_all>:
 801ce98:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801ce9a:	b16a      	cbz	r2, 801ceb8 <ai_layers_init_all+0x20>
 801ce9c:	6913      	ldr	r3, [r2, #16]
 801ce9e:	60d0      	str	r0, [r2, #12]
 801cea0:	429a      	cmp	r2, r3
 801cea2:	f04f 0201 	mov.w	r2, #1
 801cea6:	d007      	beq.n	801ceb8 <ai_layers_init_all+0x20>
 801cea8:	b133      	cbz	r3, 801ceb8 <ai_layers_init_all+0x20>
 801ceaa:	6919      	ldr	r1, [r3, #16]
 801ceac:	3201      	adds	r2, #1
 801ceae:	60d8      	str	r0, [r3, #12]
 801ceb0:	4299      	cmp	r1, r3
 801ceb2:	bf18      	it	ne
 801ceb4:	2900      	cmpne	r1, #0
 801ceb6:	d101      	bne.n	801cebc <ai_layers_init_all+0x24>
 801ceb8:	4610      	mov	r0, r2
 801ceba:	4770      	bx	lr
 801cebc:	460b      	mov	r3, r1
 801cebe:	e7f4      	b.n	801ceaa <ai_layers_init_all+0x12>

0801cec0 <ai_layers_post_init_all>:
 801cec0:	b538      	push	{r3, r4, r5, lr}
 801cec2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801cec4:	b184      	cbz	r4, 801cee8 <ai_layers_post_init_all+0x28>
 801cec6:	2500      	movs	r5, #0
 801cec8:	6863      	ldr	r3, [r4, #4]
 801ceca:	4620      	mov	r0, r4
 801cecc:	07db      	lsls	r3, r3, #31
 801cece:	d503      	bpl.n	801ced8 <ai_layers_post_init_all+0x18>
 801ced0:	6a23      	ldr	r3, [r4, #32]
 801ced2:	b10b      	cbz	r3, 801ced8 <ai_layers_post_init_all+0x18>
 801ced4:	3501      	adds	r5, #1
 801ced6:	4798      	blx	r3
 801ced8:	6923      	ldr	r3, [r4, #16]
 801ceda:	429c      	cmp	r4, r3
 801cedc:	bf18      	it	ne
 801cede:	2b00      	cmpne	r3, #0
 801cee0:	461c      	mov	r4, r3
 801cee2:	d1f1      	bne.n	801cec8 <ai_layers_post_init_all+0x8>
 801cee4:	4628      	mov	r0, r5
 801cee6:	bd38      	pop	{r3, r4, r5, pc}
 801cee8:	4625      	mov	r5, r4
 801ceea:	e7fb      	b.n	801cee4 <ai_layers_post_init_all+0x24>

0801ceec <ai_layers_forward_all>:
 801ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cef0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801cef2:	4604      	mov	r4, r0
 801cef4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801cef6:	2f00      	cmp	r7, #0
 801cef8:	d02b      	beq.n	801cf52 <ai_layers_forward_all+0x66>
 801cefa:	2d00      	cmp	r5, #0
 801cefc:	d03d      	beq.n	801cf7a <ai_layers_forward_all+0x8e>
 801cefe:	2600      	movs	r6, #0
 801cf00:	6385      	str	r5, [r0, #56]	; 0x38
 801cf02:	4629      	mov	r1, r5
 801cf04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801cf06:	2001      	movs	r0, #1
 801cf08:	46b0      	mov	r8, r6
 801cf0a:	47b8      	blx	r7
 801cf0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cf0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cf10:	2002      	movs	r0, #2
 801cf12:	47b8      	blx	r7
 801cf14:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801cf16:	696b      	ldr	r3, [r5, #20]
 801cf18:	4628      	mov	r0, r5
 801cf1a:	4798      	blx	r3
 801cf1c:	692b      	ldr	r3, [r5, #16]
 801cf1e:	2003      	movs	r0, #3
 801cf20:	429d      	cmp	r5, r3
 801cf22:	4619      	mov	r1, r3
 801cf24:	d009      	beq.n	801cf3a <ai_layers_forward_all+0x4e>
 801cf26:	63a3      	str	r3, [r4, #56]	; 0x38
 801cf28:	3601      	adds	r6, #1
 801cf2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cf2c:	47b8      	blx	r7
 801cf2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cf30:	2900      	cmp	r1, #0
 801cf32:	d1ec      	bne.n	801cf0e <ai_layers_forward_all+0x22>
 801cf34:	4630      	mov	r0, r6
 801cf36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf3a:	2100      	movs	r1, #0
 801cf3c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801cf40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cf42:	3601      	adds	r6, #1
 801cf44:	47b8      	blx	r7
 801cf46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cf48:	2900      	cmp	r1, #0
 801cf4a:	d1e0      	bne.n	801cf0e <ai_layers_forward_all+0x22>
 801cf4c:	4630      	mov	r0, r6
 801cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf52:	b195      	cbz	r5, 801cf7a <ai_layers_forward_all+0x8e>
 801cf54:	463e      	mov	r6, r7
 801cf56:	6385      	str	r5, [r0, #56]	; 0x38
 801cf58:	696b      	ldr	r3, [r5, #20]
 801cf5a:	4628      	mov	r0, r5
 801cf5c:	4798      	blx	r3
 801cf5e:	692b      	ldr	r3, [r5, #16]
 801cf60:	3601      	adds	r6, #1
 801cf62:	42ab      	cmp	r3, r5
 801cf64:	461d      	mov	r5, r3
 801cf66:	d003      	beq.n	801cf70 <ai_layers_forward_all+0x84>
 801cf68:	63a3      	str	r3, [r4, #56]	; 0x38
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d1f4      	bne.n	801cf58 <ai_layers_forward_all+0x6c>
 801cf6e:	e7e1      	b.n	801cf34 <ai_layers_forward_all+0x48>
 801cf70:	2300      	movs	r3, #0
 801cf72:	4630      	mov	r0, r6
 801cf74:	63a3      	str	r3, [r4, #56]	; 0x38
 801cf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf7a:	462e      	mov	r6, r5
 801cf7c:	4630      	mov	r0, r6
 801cf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf82:	bf00      	nop

0801cf84 <ai_layers_destroy_all>:
 801cf84:	b538      	push	{r3, r4, r5, lr}
 801cf86:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801cf88:	b184      	cbz	r4, 801cfac <ai_layers_destroy_all+0x28>
 801cf8a:	2500      	movs	r5, #0
 801cf8c:	6863      	ldr	r3, [r4, #4]
 801cf8e:	4620      	mov	r0, r4
 801cf90:	075b      	lsls	r3, r3, #29
 801cf92:	d503      	bpl.n	801cf9c <ai_layers_destroy_all+0x18>
 801cf94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cf96:	b10b      	cbz	r3, 801cf9c <ai_layers_destroy_all+0x18>
 801cf98:	3501      	adds	r5, #1
 801cf9a:	4798      	blx	r3
 801cf9c:	6923      	ldr	r3, [r4, #16]
 801cf9e:	429c      	cmp	r4, r3
 801cfa0:	bf18      	it	ne
 801cfa2:	2b00      	cmpne	r3, #0
 801cfa4:	461c      	mov	r4, r3
 801cfa6:	d1f1      	bne.n	801cf8c <ai_layers_destroy_all+0x8>
 801cfa8:	4628      	mov	r0, r5
 801cfaa:	bd38      	pop	{r3, r4, r5, pc}
 801cfac:	4625      	mov	r5, r4
 801cfae:	e7fb      	b.n	801cfa8 <ai_layers_destroy_all+0x24>

0801cfb0 <pool_func_mp_array_integer_INT8>:
 801cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfb4:	b093      	sub	sp, #76	; 0x4c
 801cfb6:	6985      	ldr	r5, [r0, #24]
 801cfb8:	460f      	mov	r7, r1
 801cfba:	469c      	mov	ip, r3
 801cfbc:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801cfbe:	6803      	ldr	r3, [r0, #0]
 801cfc0:	69a1      	ldr	r1, [r4, #24]
 801cfc2:	68a8      	ldr	r0, [r5, #8]
 801cfc4:	6825      	ldr	r5, [r4, #0]
 801cfc6:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801cfca:	6889      	ldr	r1, [r1, #8]
 801cfcc:	940d      	str	r4, [sp, #52]	; 0x34
 801cfce:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 801cfd2:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 801cfd6:	940e      	str	r4, [sp, #56]	; 0x38
 801cfd8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 801cfdc:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 801cfe0:	940f      	str	r4, [sp, #60]	; 0x3c
 801cfe2:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 801cfe6:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801cfea:	9410      	str	r4, [sp, #64]	; 0x40
 801cfec:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d03c      	beq.n	801d06e <pool_func_mp_array_integer_INT8+0xbe>
 801cff4:	685e      	ldr	r6, [r3, #4]
 801cff6:	46b3      	mov	fp, r6
 801cff8:	2e00      	cmp	r6, #0
 801cffa:	d031      	beq.n	801d060 <pool_func_mp_array_integer_INT8+0xb0>
 801cffc:	885c      	ldrh	r4, [r3, #2]
 801cffe:	9411      	str	r4, [sp, #68]	; 0x44
 801d000:	2c00      	cmp	r4, #0
 801d002:	d051      	beq.n	801d0a8 <pool_func_mp_array_integer_INT8+0xf8>
 801d004:	6834      	ldr	r4, [r6, #0]
 801d006:	ed94 0a00 	vldr	s0, [r4]
 801d00a:	2d00      	cmp	r5, #0
 801d00c:	d069      	beq.n	801d0e2 <pool_func_mp_array_integer_INT8+0x132>
 801d00e:	686c      	ldr	r4, [r5, #4]
 801d010:	2c00      	cmp	r4, #0
 801d012:	d054      	beq.n	801d0be <pool_func_mp_array_integer_INT8+0x10e>
 801d014:	886e      	ldrh	r6, [r5, #2]
 801d016:	9611      	str	r6, [sp, #68]	; 0x44
 801d018:	2e00      	cmp	r6, #0
 801d01a:	d033      	beq.n	801d084 <pool_func_mp_array_integer_INT8+0xd4>
 801d01c:	6826      	ldr	r6, [r4, #0]
 801d01e:	edd6 0a00 	vldr	s1, [r6]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d155      	bne.n	801d0d2 <pool_func_mp_array_integer_INT8+0x122>
 801d026:	6864      	ldr	r4, [r4, #4]
 801d028:	f994 4000 	ldrsb.w	r4, [r4]
 801d02c:	f8cd 9020 	str.w	r9, [sp, #32]
 801d030:	f8cd 801c 	str.w	r8, [sp, #28]
 801d034:	f8cd e018 	str.w	lr, [sp, #24]
 801d038:	f8cd c000 	str.w	ip, [sp]
 801d03c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 801d040:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d042:	4613      	mov	r3, r2
 801d044:	463a      	mov	r2, r7
 801d046:	9405      	str	r4, [sp, #20]
 801d048:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d04a:	9404      	str	r4, [sp, #16]
 801d04c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d04e:	9403      	str	r4, [sp, #12]
 801d050:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d052:	e9cd a401 	strd	sl, r4, [sp, #4]
 801d056:	f004 fb3b 	bl	80216d0 <st_int8_maxpool>
 801d05a:	b013      	add	sp, #76	; 0x4c
 801d05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d060:	2d00      	cmp	r5, #0
 801d062:	d02f      	beq.n	801d0c4 <pool_func_mp_array_integer_INT8+0x114>
 801d064:	686c      	ldr	r4, [r5, #4]
 801d066:	b93c      	cbnz	r4, 801d078 <pool_func_mp_array_integer_INT8+0xc8>
 801d068:	ed9f 0a28 	vldr	s0, [pc, #160]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d06c:	e00d      	b.n	801d08a <pool_func_mp_array_integer_INT8+0xda>
 801d06e:	2d00      	cmp	r5, #0
 801d070:	d028      	beq.n	801d0c4 <pool_func_mp_array_integer_INT8+0x114>
 801d072:	686c      	ldr	r4, [r5, #4]
 801d074:	2c00      	cmp	r4, #0
 801d076:	d03f      	beq.n	801d0f8 <pool_func_mp_array_integer_INT8+0x148>
 801d078:	886e      	ldrh	r6, [r5, #2]
 801d07a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d07e:	9611      	str	r6, [sp, #68]	; 0x44
 801d080:	2e00      	cmp	r6, #0
 801d082:	d1cb      	bne.n	801d01c <pool_func_mp_array_integer_INT8+0x6c>
 801d084:	2b00      	cmp	r3, #0
 801d086:	d03e      	beq.n	801d106 <pool_func_mp_array_integer_INT8+0x156>
 801d088:	685e      	ldr	r6, [r3, #4]
 801d08a:	46b3      	mov	fp, r6
 801d08c:	2e00      	cmp	r6, #0
 801d08e:	d02f      	beq.n	801d0f0 <pool_func_mp_array_integer_INT8+0x140>
 801d090:	eddf 0a1e 	vldr	s1, [pc, #120]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d094:	885b      	ldrh	r3, [r3, #2]
 801d096:	b953      	cbnz	r3, 801d0ae <pool_func_mp_array_integer_INT8+0xfe>
 801d098:	2c00      	cmp	r4, #0
 801d09a:	d0c7      	beq.n	801d02c <pool_func_mp_array_integer_INT8+0x7c>
 801d09c:	886d      	ldrh	r5, [r5, #2]
 801d09e:	9511      	str	r5, [sp, #68]	; 0x44
 801d0a0:	2d00      	cmp	r5, #0
 801d0a2:	d1c0      	bne.n	801d026 <pool_func_mp_array_integer_INT8+0x76>
 801d0a4:	2400      	movs	r4, #0
 801d0a6:	e7c1      	b.n	801d02c <pool_func_mp_array_integer_INT8+0x7c>
 801d0a8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d0ac:	e7ad      	b.n	801d00a <pool_func_mp_array_integer_INT8+0x5a>
 801d0ae:	f8db 3004 	ldr.w	r3, [fp, #4]
 801d0b2:	f993 3000 	ldrsb.w	r3, [r3]
 801d0b6:	2d00      	cmp	r5, #0
 801d0b8:	d0f4      	beq.n	801d0a4 <pool_func_mp_array_integer_INT8+0xf4>
 801d0ba:	686c      	ldr	r4, [r5, #4]
 801d0bc:	e7ec      	b.n	801d098 <pool_func_mp_array_integer_INT8+0xe8>
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d1e3      	bne.n	801d08a <pool_func_mp_array_integer_INT8+0xda>
 801d0c2:	e01b      	b.n	801d0fc <pool_func_mp_array_integer_INT8+0x14c>
 801d0c4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d0c8:	462b      	mov	r3, r5
 801d0ca:	462c      	mov	r4, r5
 801d0cc:	eef0 0a40 	vmov.f32	s1, s0
 801d0d0:	e7ac      	b.n	801d02c <pool_func_mp_array_integer_INT8+0x7c>
 801d0d2:	f8d3 b004 	ldr.w	fp, [r3, #4]
 801d0d6:	f1bb 0f00 	cmp.w	fp, #0
 801d0da:	d1db      	bne.n	801d094 <pool_func_mp_array_integer_INT8+0xe4>
 801d0dc:	465b      	mov	r3, fp
 801d0de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d0e0:	e7de      	b.n	801d0a0 <pool_func_mp_array_integer_INT8+0xf0>
 801d0e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d0e4:	eddf 0a09 	vldr	s1, [pc, #36]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d1e0      	bne.n	801d0ae <pool_func_mp_array_integer_INT8+0xfe>
 801d0ec:	461c      	mov	r4, r3
 801d0ee:	e79d      	b.n	801d02c <pool_func_mp_array_integer_INT8+0x7c>
 801d0f0:	4633      	mov	r3, r6
 801d0f2:	eddf 0a06 	vldr	s1, [pc, #24]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d0f6:	e7cf      	b.n	801d098 <pool_func_mp_array_integer_INT8+0xe8>
 801d0f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	eddf 0a03 	vldr	s1, [pc, #12]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d102:	461c      	mov	r4, r3
 801d104:	e792      	b.n	801d02c <pool_func_mp_array_integer_INT8+0x7c>
 801d106:	eddf 0a01 	vldr	s1, [pc, #4]	; 801d10c <pool_func_mp_array_integer_INT8+0x15c>
 801d10a:	e7cb      	b.n	801d0a4 <pool_func_mp_array_integer_INT8+0xf4>
 801d10c:	00000000 	.word	0x00000000

0801d110 <align_factor_ch>:
 801d110:	2900      	cmp	r1, #0
 801d112:	d06f      	beq.n	801d1f4 <align_factor_ch+0xe4>
 801d114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d118:	ed2d 8b04 	vpush	{d8-d9}
 801d11c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 801d120:	4604      	mov	r4, r0
 801d122:	4691      	mov	r9, r2
 801d124:	4698      	mov	r8, r3
 801d126:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801d12a:	eddf 9a33 	vldr	s19, [pc, #204]	; 801d1f8 <align_factor_ch+0xe8>
 801d12e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 801d132:	2700      	movs	r7, #0
 801d134:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801d138:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801d13c:	ecf4 7a01 	vldmia	r4!, {s15}
 801d140:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d144:	eef4 7a68 	vcmp.f32	s15, s17
 801d148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d14c:	d530      	bpl.n	801d1b0 <align_factor_ch+0xa0>
 801d14e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d156:	dd2b      	ble.n	801d1b0 <align_factor_ch+0xa0>
 801d158:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d160:	d546      	bpl.n	801d1f0 <align_factor_ch+0xe0>
 801d162:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d166:	2301      	movs	r3, #1
 801d168:	e004      	b.n	801d174 <align_factor_ch+0x64>
 801d16a:	2a20      	cmp	r2, #32
 801d16c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d170:	b213      	sxth	r3, r2
 801d172:	d039      	beq.n	801d1e8 <align_factor_ch+0xd8>
 801d174:	eef4 7ac8 	vcmpe.f32	s15, s16
 801d178:	1c5a      	adds	r2, r3, #1
 801d17a:	b292      	uxth	r2, r2
 801d17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d180:	d4f3      	bmi.n	801d16a <align_factor_ch+0x5a>
 801d182:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801d186:	f8a8 3000 	strh.w	r3, [r8]
 801d18a:	ee17 0a90 	vmov	r0, s15
 801d18e:	f7e3 f927 	bl	80003e0 <__aeabi_f2lz>
 801d192:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 801d196:	bf18      	it	ne
 801d198:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 801d19c:	42a5      	cmp	r5, r4
 801d19e:	f849 0b04 	str.w	r0, [r9], #4
 801d1a2:	f108 0802 	add.w	r8, r8, #2
 801d1a6:	d1c9      	bne.n	801d13c <align_factor_ch+0x2c>
 801d1a8:	ecbd 8b04 	vpop	{d8-d9}
 801d1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1b0:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1b8:	dd1a      	ble.n	801d1f0 <align_factor_ch+0xe0>
 801d1ba:	ee67 7a88 	vmul.f32	s15, s15, s16
 801d1be:	f04f 33ff 	mov.w	r3, #4294967295
 801d1c2:	e005      	b.n	801d1d0 <align_factor_ch+0xc0>
 801d1c4:	b213      	sxth	r3, r2
 801d1c6:	ee67 7a88 	vmul.f32	s15, s15, s16
 801d1ca:	f113 0f1f 	cmn.w	r3, #31
 801d1ce:	d006      	beq.n	801d1de <align_factor_ch+0xce>
 801d1d0:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d1d4:	1e5a      	subs	r2, r3, #1
 801d1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1da:	dcf3      	bgt.n	801d1c4 <align_factor_ch+0xb4>
 801d1dc:	e7d1      	b.n	801d182 <align_factor_ch+0x72>
 801d1de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d1e2:	f06f 031d 	mvn.w	r3, #29
 801d1e6:	e7cc      	b.n	801d182 <align_factor_ch+0x72>
 801d1e8:	f8a8 7000 	strh.w	r7, [r8]
 801d1ec:	2000      	movs	r0, #0
 801d1ee:	e7d5      	b.n	801d19c <align_factor_ch+0x8c>
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	e7c6      	b.n	801d182 <align_factor_ch+0x72>
 801d1f4:	4770      	bx	lr
 801d1f6:	bf00      	nop
 801d1f8:	4f000000 	.word	0x4f000000

0801d1fc <st_sssa8_ch_conv_dw_Wadapt>:
 801d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d200:	b089      	sub	sp, #36	; 0x24
 801d202:	4606      	mov	r6, r0
 801d204:	ea5f 0991 	movs.w	r9, r1, lsr #2
 801d208:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d20a:	9005      	str	r0, [sp, #20]
 801d20c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801d210:	9202      	str	r2, [sp, #8]
 801d212:	9303      	str	r3, [sp, #12]
 801d214:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 801d218:	f000 8081 	beq.w	801d31e <st_sssa8_ch_conv_dw_Wadapt+0x122>
 801d21c:	fb03 fa02 	mul.w	sl, r3, r2
 801d220:	461d      	mov	r5, r3
 801d222:	f109 33ff 	add.w	r3, r9, #4294967295
 801d226:	1d34      	adds	r4, r6, #4
 801d228:	fb12 f505 	smulbb	r5, r2, r5
 801d22c:	f3ca 0a4f 	ubfx	sl, sl, #1, #16
 801d230:	b29b      	uxth	r3, r3
 801d232:	f8cd 9010 	str.w	r9, [sp, #16]
 801d236:	f10a 32ff 	add.w	r2, sl, #4294967295
 801d23a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 801d23e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d242:	f005 0301 	and.w	r3, r5, #1
 801d246:	46b0      	mov	r8, r6
 801d248:	f8df c128 	ldr.w	ip, [pc, #296]	; 801d374 <st_sssa8_ch_conv_dw_Wadapt+0x178>
 801d24c:	9300      	str	r3, [sp, #0]
 801d24e:	b293      	uxth	r3, r2
 801d250:	46a1      	mov	r9, r4
 801d252:	fb03 e30e 	mla	r3, r3, lr, lr
 801d256:	9301      	str	r3, [sp, #4]
 801d258:	9007      	str	r0, [sp, #28]
 801d25a:	4644      	mov	r4, r8
 801d25c:	f1ba 0f00 	cmp.w	sl, #0
 801d260:	d030      	beq.n	801d2c4 <st_sssa8_ch_conv_dw_Wadapt+0xc8>
 801d262:	4650      	mov	r0, sl
 801d264:	468b      	mov	fp, r1
 801d266:	9907      	ldr	r1, [sp, #28]
 801d268:	3801      	subs	r0, #1
 801d26a:	6822      	ldr	r2, [r4, #0]
 801d26c:	1d0d      	adds	r5, r1, #4
 801d26e:	f854 300b 	ldr.w	r3, [r4, fp]
 801d272:	b296      	uxth	r6, r2
 801d274:	4474      	add	r4, lr
 801d276:	9507      	str	r5, [sp, #28]
 801d278:	ea03 050c 	and.w	r5, r3, ip
 801d27c:	9f07      	ldr	r7, [sp, #28]
 801d27e:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 801d282:	ea45 4212 	orr.w	r2, r5, r2, lsr #16
 801d286:	1d3e      	adds	r6, r7, #4
 801d288:	b280      	uxth	r0, r0
 801d28a:	fa2f f583 	sxtb16	r5, r3
 801d28e:	9607      	str	r6, [sp, #28]
 801d290:	ea4f 2333 	mov.w	r3, r3, ror #8
 801d294:	9e07      	ldr	r6, [sp, #28]
 801d296:	600d      	str	r5, [r1, #0]
 801d298:	ea4f 2532 	mov.w	r5, r2, ror #8
 801d29c:	1d31      	adds	r1, r6, #4
 801d29e:	fa2f f383 	sxtb16	r3, r3
 801d2a2:	9107      	str	r1, [sp, #28]
 801d2a4:	9907      	ldr	r1, [sp, #28]
 801d2a6:	603b      	str	r3, [r7, #0]
 801d2a8:	1d0b      	adds	r3, r1, #4
 801d2aa:	fa2f f282 	sxtb16	r2, r2
 801d2ae:	fa2f f585 	sxtb16	r5, r5
 801d2b2:	6032      	str	r2, [r6, #0]
 801d2b4:	9307      	str	r3, [sp, #28]
 801d2b6:	600d      	str	r5, [r1, #0]
 801d2b8:	2800      	cmp	r0, #0
 801d2ba:	d1d4      	bne.n	801d266 <st_sssa8_ch_conv_dw_Wadapt+0x6a>
 801d2bc:	9b01      	ldr	r3, [sp, #4]
 801d2be:	4659      	mov	r1, fp
 801d2c0:	eb03 0408 	add.w	r4, r3, r8
 801d2c4:	9b00      	ldr	r3, [sp, #0]
 801d2c6:	9807      	ldr	r0, [sp, #28]
 801d2c8:	b1fb      	cbz	r3, 801d30a <st_sssa8_ch_conv_dw_Wadapt+0x10e>
 801d2ca:	6823      	ldr	r3, [r4, #0]
 801d2cc:	2500      	movs	r5, #0
 801d2ce:	3008      	adds	r0, #8
 801d2d0:	ea03 020c 	and.w	r2, r3, ip
 801d2d4:	462c      	mov	r4, r5
 801d2d6:	ea0c 2603 	and.w	r6, ip, r3, lsl #8
 801d2da:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 801d2de:	b29b      	uxth	r3, r3
 801d2e0:	ea4f 4232 	mov.w	r2, r2, ror #16
 801d2e4:	4333      	orrs	r3, r6
 801d2e6:	fa2f f282 	sxtb16	r2, r2
 801d2ea:	fa2f f383 	sxtb16	r3, r3
 801d2ee:	f362 050f 	bfi	r5, r2, #0, #16
 801d2f2:	f363 040f 	bfi	r4, r3, #0, #16
 801d2f6:	0c12      	lsrs	r2, r2, #16
 801d2f8:	0c1b      	lsrs	r3, r3, #16
 801d2fa:	f362 451f 	bfi	r5, r2, #16, #16
 801d2fe:	f363 441f 	bfi	r4, r3, #16, #16
 801d302:	f840 5c04 	str.w	r5, [r0, #-4]
 801d306:	f840 4c08 	str.w	r4, [r0, #-8]
 801d30a:	f108 0804 	add.w	r8, r8, #4
 801d30e:	45c1      	cmp	r9, r8
 801d310:	d1a2      	bne.n	801d258 <st_sssa8_ch_conv_dw_Wadapt+0x5c>
 801d312:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801d316:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801d31a:	fa1f f989 	uxth.w	r9, r9
 801d31e:	f011 0703 	ands.w	r7, r1, #3
 801d322:	d023      	beq.n	801d36c <st_sssa8_ch_conv_dw_Wadapt+0x170>
 801d324:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d328:	fb13 f302 	smulbb	r3, r3, r2
 801d32c:	b29b      	uxth	r3, r3
 801d32e:	b1eb      	cbz	r3, 801d36c <st_sssa8_ch_conv_dw_Wadapt+0x170>
 801d330:	3b01      	subs	r3, #1
 801d332:	444f      	add	r7, r9
 801d334:	f8dd e014 	ldr.w	lr, [sp, #20]
 801d338:	b29b      	uxth	r3, r3
 801d33a:	b2bf      	uxth	r7, r7
 801d33c:	f103 0c01 	add.w	ip, r3, #1
 801d340:	005b      	lsls	r3, r3, #1
 801d342:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801d346:	1c9e      	adds	r6, r3, #2
 801d348:	f109 0401 	add.w	r4, r9, #1
 801d34c:	eb0e 0209 	add.w	r2, lr, r9
 801d350:	1985      	adds	r5, r0, r6
 801d352:	4603      	mov	r3, r0
 801d354:	fa1f f984 	uxth.w	r9, r4
 801d358:	f992 4000 	ldrsb.w	r4, [r2]
 801d35c:	440a      	add	r2, r1
 801d35e:	f823 4b02 	strh.w	r4, [r3], #2
 801d362:	42ab      	cmp	r3, r5
 801d364:	d1f8      	bne.n	801d358 <st_sssa8_ch_conv_dw_Wadapt+0x15c>
 801d366:	45b9      	cmp	r9, r7
 801d368:	4460      	add	r0, ip
 801d36a:	d1ed      	bne.n	801d348 <st_sssa8_ch_conv_dw_Wadapt+0x14c>
 801d36c:	b009      	add	sp, #36	; 0x24
 801d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d372:	bf00      	nop
 801d374:	ffff0000 	.word	0xffff0000

0801d378 <st_sssa8_ch_convolve_dw>:
 801d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d37c:	b0dd      	sub	sp, #372	; 0x174
 801d37e:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 801d382:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 801d386:	901f      	str	r0, [sp, #124]	; 0x7c
 801d388:	ea4f 0887 	mov.w	r8, r7, lsl #2
 801d38c:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 801d390:	007e      	lsls	r6, r7, #1
 801d392:	9108      	str	r1, [sp, #32]
 801d394:	eb08 0107 	add.w	r1, r8, r7
 801d398:	fb04 f900 	mul.w	r9, r4, r0
 801d39c:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 801d3a0:	9219      	str	r2, [sp, #100]	; 0x64
 801d3a2:	fb07 1109 	mla	r1, r7, r9, r1
 801d3a6:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 801d3a8:	9033      	str	r0, [sp, #204]	; 0xcc
 801d3aa:	19f0      	adds	r0, r6, r7
 801d3ac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801d3b0:	931e      	str	r3, [sp, #120]	; 0x78
 801d3b2:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 801d3b4:	9218      	str	r2, [sp, #96]	; 0x60
 801d3b6:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 801d3ba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801d3be:	9438      	str	r4, [sp, #224]	; 0xe0
 801d3c0:	9232      	str	r2, [sp, #200]	; 0xc8
 801d3c2:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 801d3c6:	9614      	str	r6, [sp, #80]	; 0x50
 801d3c8:	9239      	str	r2, [sp, #228]	; 0xe4
 801d3ca:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 801d3ce:	9326      	str	r3, [sp, #152]	; 0x98
 801d3d0:	9222      	str	r2, [sp, #136]	; 0x88
 801d3d2:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 801d3d6:	9237      	str	r2, [sp, #220]	; 0xdc
 801d3d8:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 801d3dc:	9209      	str	r2, [sp, #36]	; 0x24
 801d3de:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 801d3e2:	9225      	str	r2, [sp, #148]	; 0x94
 801d3e4:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 801d3e8:	923a      	str	r2, [sp, #232]	; 0xe8
 801d3ea:	b1af      	cbz	r7, 801d418 <st_sssa8_ch_convolve_dw+0xa0>
 801d3ec:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 801d3ee:	1f1c      	subs	r4, r3, #4
 801d3f0:	f04f 0c01 	mov.w	ip, #1
 801d3f4:	198e      	adds	r6, r1, r6
 801d3f6:	f931 3b02 	ldrsh.w	r3, [r1], #2
 801d3fa:	1e5a      	subs	r2, r3, #1
 801d3fc:	fa0c f003 	lsl.w	r0, ip, r3
 801d400:	fa05 f303 	lsl.w	r3, r5, r3
 801d404:	b292      	uxth	r2, r2
 801d406:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801d40a:	2a14      	cmp	r2, #20
 801d40c:	f200 8512 	bhi.w	801de34 <st_sssa8_ch_convolve_dw+0xabc>
 801d410:	428e      	cmp	r6, r1
 801d412:	f844 3f04 	str.w	r3, [r4, #4]!
 801d416:	d1ee      	bne.n	801d3f6 <st_sssa8_ch_convolve_dw+0x7e>
 801d418:	9c08      	ldr	r4, [sp, #32]
 801d41a:	a944      	add	r1, sp, #272	; 0x110
 801d41c:	ab40      	add	r3, sp, #256	; 0x100
 801d41e:	aa3c      	add	r2, sp, #240	; 0xf0
 801d420:	943e      	str	r4, [sp, #248]	; 0xf8
 801d422:	a848      	add	r0, sp, #288	; 0x120
 801d424:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801d426:	9100      	str	r1, [sp, #0]
 801d428:	a952      	add	r1, sp, #328	; 0x148
 801d42a:	943d      	str	r4, [sp, #244]	; 0xf4
 801d42c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d42e:	9442      	str	r4, [sp, #264]	; 0x108
 801d430:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801d432:	9441      	str	r4, [sp, #260]	; 0x104
 801d434:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 801d436:	9446      	str	r4, [sp, #280]	; 0x118
 801d438:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 801d43a:	9445      	str	r4, [sp, #276]	; 0x114
 801d43c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801d43e:	9454      	str	r4, [sp, #336]	; 0x150
 801d440:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 801d442:	9455      	str	r4, [sp, #340]	; 0x154
 801d444:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 801d446:	9456      	str	r4, [sp, #344]	; 0x158
 801d448:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 801d44a:	9457      	str	r4, [sp, #348]	; 0x15c
 801d44c:	f001 ff92 	bl	801f374 <ai_padding_opt_init>
 801d450:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d452:	fbb7 f3f3 	udiv	r3, r7, r3
 801d456:	079a      	lsls	r2, r3, #30
 801d458:	931a      	str	r3, [sp, #104]	; 0x68
 801d45a:	f040 84f2 	bne.w	801de42 <st_sssa8_ch_convolve_dw+0xaca>
 801d45e:	109c      	asrs	r4, r3, #2
 801d460:	2304      	movs	r3, #4
 801d462:	931a      	str	r3, [sp, #104]	; 0x68
 801d464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d466:	425b      	negs	r3, r3
 801d468:	b29a      	uxth	r2, r3
 801d46a:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 801d46e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801d470:	2b00      	cmp	r3, #0
 801d472:	f000 8254 	beq.w	801d91e <st_sssa8_ch_convolve_dw+0x5a6>
 801d476:	f3c9 014f 	ubfx	r1, r9, #1, #16
 801d47a:	08ba      	lsrs	r2, r7, #2
 801d47c:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801d47e:	1e4d      	subs	r5, r1, #1
 801d480:	910f      	str	r1, [sp, #60]	; 0x3c
 801d482:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 801d484:	fa1f fa85 	uxth.w	sl, r5
 801d488:	2500      	movs	r5, #0
 801d48a:	f101 0e20 	add.w	lr, r1, #32
 801d48e:	9939      	ldr	r1, [sp, #228]	; 0xe4
 801d490:	9536      	str	r5, [sp, #216]	; 0xd8
 801d492:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801d494:	f1c1 0c00 	rsb	ip, r1, #0
 801d498:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801d49a:	9224      	str	r2, [sp, #144]	; 0x90
 801d49c:	4629      	mov	r1, r5
 801d49e:	fb13 f300 	smulbb	r3, r3, r0
 801d4a2:	3a01      	subs	r2, #1
 801d4a4:	fb01 f104 	mul.w	r1, r1, r4
 801d4a8:	9826      	ldr	r0, [sp, #152]	; 0x98
 801d4aa:	b292      	uxth	r2, r2
 801d4ac:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801d4ae:	4440      	add	r0, r8
 801d4b0:	9135      	str	r1, [sp, #212]	; 0xd4
 801d4b2:	f102 0901 	add.w	r9, r2, #1
 801d4b6:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 801d4ba:	eba7 0808 	sub.w	r8, r7, r8
 801d4be:	9029      	str	r0, [sp, #164]	; 0xa4
 801d4c0:	9111      	str	r1, [sp, #68]	; 0x44
 801d4c2:	b29b      	uxth	r3, r3
 801d4c4:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 801d4c8:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 801d4ca:	ea4f 1009 	mov.w	r0, r9, lsl #4
 801d4ce:	931b      	str	r3, [sp, #108]	; 0x6c
 801d4d0:	3b01      	subs	r3, #1
 801d4d2:	9628      	str	r6, [sp, #160]	; 0xa0
 801d4d4:	4401      	add	r1, r0
 801d4d6:	f10a 0601 	add.w	r6, sl, #1
 801d4da:	b29b      	uxth	r3, r3
 801d4dc:	46b8      	mov	r8, r7
 801d4de:	9130      	str	r1, [sp, #192]	; 0xc0
 801d4e0:	1821      	adds	r1, r4, r0
 801d4e2:	3301      	adds	r3, #1
 801d4e4:	2400      	movs	r4, #0
 801d4e6:	912d      	str	r1, [sp, #180]	; 0xb4
 801d4e8:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 801d4ea:	4401      	add	r1, r0
 801d4ec:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d4ee:	912c      	str	r1, [sp, #176]	; 0xb0
 801d4f0:	0059      	lsls	r1, r3, #1
 801d4f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d4f4:	911d      	str	r1, [sp, #116]	; 0x74
 801d4f6:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 801d4fa:	912f      	str	r1, [sp, #188]	; 0xbc
 801d4fc:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d4fe:	fb06 f101 	mul.w	r1, r6, r1
 801d502:	9115      	str	r1, [sp, #84]	; 0x54
 801d504:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801d508:	912b      	str	r1, [sp, #172]	; 0xac
 801d50a:	f003 0101 	and.w	r1, r3, #1
 801d50e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801d510:	9110      	str	r1, [sp, #64]	; 0x40
 801d512:	ea4f 110a 	mov.w	r1, sl, lsl #4
 801d516:	fb05 f303 	mul.w	r3, r5, r3
 801d51a:	912a      	str	r1, [sp, #168]	; 0xa8
 801d51c:	0131      	lsls	r1, r6, #4
 801d51e:	933b      	str	r3, [sp, #236]	; 0xec
 801d520:	9116      	str	r1, [sp, #88]	; 0x58
 801d522:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d524:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 801d528:	0093      	lsls	r3, r2, #2
 801d52a:	932e      	str	r3, [sp, #184]	; 0xb8
 801d52c:	f007 0303 	and.w	r3, r7, #3
 801d530:	9321      	str	r3, [sp, #132]	; 0x84
 801d532:	fa1f f38c 	uxth.w	r3, ip
 801d536:	9334      	str	r3, [sp, #208]	; 0xd0
 801d538:	a848      	add	r0, sp, #288	; 0x120
 801d53a:	f001 ff75 	bl	801f428 <ai_padding_opt_phase1>
 801d53e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d540:	2b00      	cmp	r3, #0
 801d542:	f000 81de 	beq.w	801d902 <st_sssa8_ch_convolve_dw+0x58a>
 801d546:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 801d54a:	2100      	movs	r1, #0
 801d54c:	46c3      	mov	fp, r8
 801d54e:	9027      	str	r0, [sp, #156]	; 0x9c
 801d550:	9837      	ldr	r0, [sp, #220]	; 0xdc
 801d552:	9120      	str	r1, [sp, #128]	; 0x80
 801d554:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 801d558:	1a9a      	subs	r2, r3, r2
 801d55a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d55c:	425b      	negs	r3, r3
 801d55e:	fb04 2200 	mla	r2, r4, r0, r2
 801d562:	b29b      	uxth	r3, r3
 801d564:	9217      	str	r2, [sp, #92]	; 0x5c
 801d566:	460a      	mov	r2, r1
 801d568:	931c      	str	r3, [sp, #112]	; 0x70
 801d56a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d56c:	3b01      	subs	r3, #1
 801d56e:	9313      	str	r3, [sp, #76]	; 0x4c
 801d570:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801d572:	2b00      	cmp	r3, #0
 801d574:	f000 830e 	beq.w	801db94 <st_sssa8_ch_convolve_dw+0x81c>
 801d578:	3b01      	subs	r3, #1
 801d57a:	2101      	movs	r1, #1
 801d57c:	9348      	str	r3, [sp, #288]	; 0x120
 801d57e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d580:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 801d584:	2b01      	cmp	r3, #1
 801d586:	f000 8354 	beq.w	801dc32 <st_sssa8_ch_convolve_dw+0x8ba>
 801d58a:	2b04      	cmp	r3, #4
 801d58c:	f000 83ed 	beq.w	801dd6a <st_sssa8_ch_convolve_dw+0x9f2>
 801d590:	2b02      	cmp	r3, #2
 801d592:	f000 8391 	beq.w	801dcb8 <st_sssa8_ch_convolve_dw+0x940>
 801d596:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d598:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d59a:	4283      	cmp	r3, r0
 801d59c:	da45      	bge.n	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801d59e:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d5a0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801d5a2:	fb02 0201 	mla	r2, r2, r1, r0
 801d5a6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801d5a8:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 801d5ac:	1a12      	subs	r2, r2, r0
 801d5ae:	910b      	str	r1, [sp, #44]	; 0x2c
 801d5b0:	4291      	cmp	r1, r2
 801d5b2:	9203      	str	r2, [sp, #12]
 801d5b4:	da39      	bge.n	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801d5b6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801d5ba:	46d9      	mov	r9, fp
 801d5bc:	461a      	mov	r2, r3
 801d5be:	9305      	str	r3, [sp, #20]
 801d5c0:	9908      	ldr	r1, [sp, #32]
 801d5c2:	0fd2      	lsrs	r2, r2, #31
 801d5c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d5c6:	f1ca 0b00 	rsb	fp, sl, #0
 801d5ca:	fb01 f103 	mul.w	r1, r1, r3
 801d5ce:	4298      	cmp	r0, r3
 801d5d0:	bfd8      	it	le
 801d5d2:	f042 0201 	orrle.w	r2, r2, #1
 801d5d6:	9107      	str	r1, [sp, #28]
 801d5d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d5da:	9204      	str	r2, [sp, #16]
 801d5dc:	4688      	mov	r8, r1
 801d5de:	9b08      	ldr	r3, [sp, #32]
 801d5e0:	428b      	cmp	r3, r1
 801d5e2:	bfcc      	ite	gt
 801d5e4:	2300      	movgt	r3, #0
 801d5e6:	2301      	movle	r3, #1
 801d5e8:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 801d5ec:	d103      	bne.n	801d5f6 <st_sssa8_ch_convolve_dw+0x27e>
 801d5ee:	9b04      	ldr	r3, [sp, #16]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	f000 822e 	beq.w	801da52 <st_sssa8_ch_convolve_dw+0x6da>
 801d5f6:	464a      	mov	r2, r9
 801d5f8:	4651      	mov	r1, sl
 801d5fa:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801d5fe:	f001 ff2f 	bl	801f460 <st_uint8_fill>
 801d602:	f108 0801 	add.w	r8, r8, #1
 801d606:	9b03      	ldr	r3, [sp, #12]
 801d608:	44ca      	add	sl, r9
 801d60a:	ebab 0b09 	sub.w	fp, fp, r9
 801d60e:	fa0f f888 	sxth.w	r8, r8
 801d612:	4598      	cmp	r8, r3
 801d614:	4641      	mov	r1, r8
 801d616:	dbe2      	blt.n	801d5de <st_sssa8_ch_convolve_dw+0x266>
 801d618:	9b05      	ldr	r3, [sp, #20]
 801d61a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d61c:	3301      	adds	r3, #1
 801d61e:	b21b      	sxth	r3, r3
 801d620:	428b      	cmp	r3, r1
 801d622:	461a      	mov	r2, r3
 801d624:	9305      	str	r3, [sp, #20]
 801d626:	dbcb      	blt.n	801d5c0 <st_sssa8_ch_convolve_dw+0x248>
 801d628:	46cb      	mov	fp, r9
 801d62a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	f000 82e9 	beq.w	801dc04 <st_sssa8_ch_convolve_dw+0x88c>
 801d632:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d634:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 801d636:	f102 0810 	add.w	r8, r2, #16
 801d63a:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 801d63c:	3310      	adds	r3, #16
 801d63e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801d642:	3204      	adds	r2, #4
 801d644:	9307      	str	r3, [sp, #28]
 801d646:	9204      	str	r2, [sp, #16]
 801d648:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d64a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d64c:	3308      	adds	r3, #8
 801d64e:	9206      	str	r2, [sp, #24]
 801d650:	9305      	str	r3, [sp, #20]
 801d652:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 801d654:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 801d658:	3310      	adds	r3, #16
 801d65a:	3220      	adds	r2, #32
 801d65c:	4666      	mov	r6, ip
 801d65e:	469e      	mov	lr, r3
 801d660:	9b07      	ldr	r3, [sp, #28]
 801d662:	9212      	str	r2, [sp, #72]	; 0x48
 801d664:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801d668:	920d      	str	r2, [sp, #52]	; 0x34
 801d66a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801d66c:	9203      	str	r2, [sp, #12]
 801d66e:	f853 cc10 	ldr.w	ip, [r3, #-16]
 801d672:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d676:	9906      	ldr	r1, [sp, #24]
 801d678:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 801d67c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d043      	beq.n	801d70a <st_sssa8_ch_convolve_dw+0x392>
 801d682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d684:	f106 0210 	add.w	r2, r6, #16
 801d688:	9f03      	ldr	r7, [sp, #12]
 801d68a:	18f3      	adds	r3, r6, r3
 801d68c:	960a      	str	r6, [sp, #40]	; 0x28
 801d68e:	e9cd 8e0b 	strd	r8, lr, [sp, #44]	; 0x2c
 801d692:	4698      	mov	r8, r3
 801d694:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 801d698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d69a:	9303      	str	r3, [sp, #12]
 801d69c:	9b03      	ldr	r3, [sp, #12]
 801d69e:	f8d1 a000 	ldr.w	sl, [r1]
 801d6a2:	f851 b003 	ldr.w	fp, [r1, r3]
 801d6a6:	4bcf      	ldr	r3, [pc, #828]	; (801d9e4 <st_sssa8_ch_convolve_dw+0x66c>)
 801d6a8:	fa1f f98a 	uxth.w	r9, sl
 801d6ac:	f852 6c10 	ldr.w	r6, [r2, #-16]
 801d6b0:	ea0b 0303 	and.w	r3, fp, r3
 801d6b4:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 801d6b8:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 801d6bc:	fa27 fa89 	sxtab16	sl, r7, r9
 801d6c0:	fb26 cc0a 	smlad	ip, r6, sl, ip
 801d6c4:	ea4f 2939 	mov.w	r9, r9, ror #8
 801d6c8:	f852 6c0c 	ldr.w	r6, [r2, #-12]
 801d6cc:	fa27 f989 	sxtab16	r9, r7, r9
 801d6d0:	fb26 5509 	smlad	r5, r6, r9, r5
 801d6d4:	fa27 f983 	sxtab16	r9, r7, r3
 801d6d8:	f852 6c08 	ldr.w	r6, [r2, #-8]
 801d6dc:	fb26 4409 	smlad	r4, r6, r9, r4
 801d6e0:	ea4f 2333 	mov.w	r3, r3, ror #8
 801d6e4:	f852 6c04 	ldr.w	r6, [r2, #-4]
 801d6e8:	fa27 f383 	sxtab16	r3, r7, r3
 801d6ec:	fb26 0003 	smlad	r0, r6, r3, r0
 801d6f0:	3210      	adds	r2, #16
 801d6f2:	4471      	add	r1, lr
 801d6f4:	4590      	cmp	r8, r2
 801d6f6:	d1d1      	bne.n	801d69c <st_sssa8_ch_convolve_dw+0x324>
 801d6f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d6fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d6fc:	9a06      	ldr	r2, [sp, #24]
 801d6fe:	441e      	add	r6, r3
 801d700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d702:	9703      	str	r7, [sp, #12]
 801d704:	1899      	adds	r1, r3, r2
 801d706:	e9dd 8e0b 	ldrd	r8, lr, [sp, #44]	; 0x2c
 801d70a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d70c:	b1f3      	cbz	r3, 801d74c <st_sssa8_ch_convolve_dw+0x3d4>
 801d70e:	680b      	ldr	r3, [r1, #0]
 801d710:	3608      	adds	r6, #8
 801d712:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d714:	fa4f f983 	sxtb.w	r9, r3
 801d718:	f836 ac08 	ldrh.w	sl, [r6, #-8]
 801d71c:	f343 2107 	sbfx	r1, r3, #8, #8
 801d720:	f343 4207 	sbfx	r2, r3, #16, #8
 801d724:	eba9 0907 	sub.w	r9, r9, r7
 801d728:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 801d72c:	1bc9      	subs	r1, r1, r7
 801d72e:	1bd2      	subs	r2, r2, r7
 801d730:	fb1a cc09 	smlabb	ip, sl, r9, ip
 801d734:	f836 ac06 	ldrh.w	sl, [r6, #-6]
 801d738:	f836 9c04 	ldrh.w	r9, [r6, #-4]
 801d73c:	fb1a 5501 	smlabb	r5, sl, r1, r5
 801d740:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 801d744:	fb19 4402 	smlabb	r4, r9, r2, r4
 801d748:	fb11 0003 	smlabb	r0, r1, r3, r0
 801d74c:	9b05      	ldr	r3, [sp, #20]
 801d74e:	f85e 9c10 	ldr.w	r9, [lr, #-16]
 801d752:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 801d756:	f858 1c10 	ldr.w	r1, [r8, #-16]
 801d75a:	2a15      	cmp	r2, #21
 801d75c:	f340 8113 	ble.w	801d986 <st_sssa8_ch_convolve_dw+0x60e>
 801d760:	1e93      	subs	r3, r2, #2
 801d762:	2701      	movs	r7, #1
 801d764:	3a01      	subs	r2, #1
 801d766:	fa07 f303 	lsl.w	r3, r7, r3
 801d76a:	fb5c 3c09 	smmla	ip, ip, r9, r3
 801d76e:	fa4c fc02 	asr.w	ip, ip, r2
 801d772:	448c      	add	ip, r1
 801d774:	f30c 0c07 	ssat	ip, #8, ip
 801d778:	9b04      	ldr	r3, [sp, #16]
 801d77a:	f803 cc04 	strb.w	ip, [r3, #-4]
 801d77e:	9b05      	ldr	r3, [sp, #20]
 801d780:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 801d784:	2915      	cmp	r1, #21
 801d786:	f340 80ee 	ble.w	801d966 <st_sssa8_ch_convolve_dw+0x5ee>
 801d78a:	1e8a      	subs	r2, r1, #2
 801d78c:	2301      	movs	r3, #1
 801d78e:	3901      	subs	r1, #1
 801d790:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 801d794:	fa03 f202 	lsl.w	r2, r3, r2
 801d798:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 801d79c:	fb55 2507 	smmla	r5, r5, r7, r2
 801d7a0:	fa45 f101 	asr.w	r1, r5, r1
 801d7a4:	4419      	add	r1, r3
 801d7a6:	f301 0107 	ssat	r1, #8, r1
 801d7aa:	9b04      	ldr	r3, [sp, #16]
 801d7ac:	f803 1c03 	strb.w	r1, [r3, #-3]
 801d7b0:	9b05      	ldr	r3, [sp, #20]
 801d7b2:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 801d7b6:	2915      	cmp	r1, #21
 801d7b8:	f340 80c5 	ble.w	801d946 <st_sssa8_ch_convolve_dw+0x5ce>
 801d7bc:	1e8a      	subs	r2, r1, #2
 801d7be:	2301      	movs	r3, #1
 801d7c0:	3901      	subs	r1, #1
 801d7c2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 801d7c6:	fa03 f202 	lsl.w	r2, r3, r2
 801d7ca:	f858 3c08 	ldr.w	r3, [r8, #-8]
 801d7ce:	fb54 2405 	smmla	r4, r4, r5, r2
 801d7d2:	fa44 f101 	asr.w	r1, r4, r1
 801d7d6:	4419      	add	r1, r3
 801d7d8:	f301 0107 	ssat	r1, #8, r1
 801d7dc:	9b04      	ldr	r3, [sp, #16]
 801d7de:	f803 1c02 	strb.w	r1, [r3, #-2]
 801d7e2:	9b05      	ldr	r3, [sp, #20]
 801d7e4:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801d7e8:	2915      	cmp	r1, #21
 801d7ea:	f340 809c 	ble.w	801d926 <st_sssa8_ch_convolve_dw+0x5ae>
 801d7ee:	1e8a      	subs	r2, r1, #2
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	3901      	subs	r1, #1
 801d7f4:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 801d7f8:	fa03 f202 	lsl.w	r2, r3, r2
 801d7fc:	f858 3c04 	ldr.w	r3, [r8, #-4]
 801d800:	fb50 2004 	smmla	r0, r0, r4, r2
 801d804:	fa40 f101 	asr.w	r1, r0, r1
 801d808:	4419      	add	r1, r3
 801d80a:	f301 0107 	ssat	r1, #8, r1
 801d80e:	9b04      	ldr	r3, [sp, #16]
 801d810:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d814:	9a05      	ldr	r2, [sp, #20]
 801d816:	f10e 0e10 	add.w	lr, lr, #16
 801d81a:	9b07      	ldr	r3, [sp, #28]
 801d81c:	f108 0810 	add.w	r8, r8, #16
 801d820:	3208      	adds	r2, #8
 801d822:	3310      	adds	r3, #16
 801d824:	9205      	str	r2, [sp, #20]
 801d826:	9a04      	ldr	r2, [sp, #16]
 801d828:	9307      	str	r3, [sp, #28]
 801d82a:	3204      	adds	r2, #4
 801d82c:	9204      	str	r2, [sp, #16]
 801d82e:	9a06      	ldr	r2, [sp, #24]
 801d830:	3204      	adds	r2, #4
 801d832:	9206      	str	r2, [sp, #24]
 801d834:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d836:	429a      	cmp	r2, r3
 801d838:	f47f af19 	bne.w	801d66e <st_sssa8_ch_convolve_dw+0x2f6>
 801d83c:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 801d83e:	46b4      	mov	ip, r6
 801d840:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d842:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801d846:	4413      	add	r3, r2
 801d848:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 801d84c:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 801d850:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 801d854:	9373      	str	r3, [sp, #460]	; 0x1cc
 801d856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d044      	beq.n	801d8e6 <st_sssa8_ch_convolve_dw+0x56e>
 801d85c:	4433      	add	r3, r6
 801d85e:	f1ae 0704 	sub.w	r7, lr, #4
 801d862:	f1a9 0902 	sub.w	r9, r9, #2
 801d866:	f1a8 0804 	sub.w	r8, r8, #4
 801d86a:	b29b      	uxth	r3, r3
 801d86c:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 801d870:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801d874:	9303      	str	r3, [sp, #12]
 801d876:	1c73      	adds	r3, r6, #1
 801d878:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d87a:	f85a 1b04 	ldr.w	r1, [sl], #4
 801d87e:	4432      	add	r2, r6
 801d880:	b29e      	uxth	r6, r3
 801d882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d884:	b163      	cbz	r3, 801d8a0 <st_sssa8_ch_convolve_dw+0x528>
 801d886:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d888:	eb0c 0403 	add.w	r4, ip, r3
 801d88c:	f992 3000 	ldrsb.w	r3, [r2]
 801d890:	445a      	add	r2, fp
 801d892:	f83c 0b02 	ldrh.w	r0, [ip], #2
 801d896:	1b5b      	subs	r3, r3, r5
 801d898:	45a4      	cmp	ip, r4
 801d89a:	fb10 1103 	smlabb	r1, r0, r3, r1
 801d89e:	d1f5      	bne.n	801d88c <st_sssa8_ch_convolve_dw+0x514>
 801d8a0:	f939 2f02 	ldrsh.w	r2, [r9, #2]!
 801d8a4:	f858 4f04 	ldr.w	r4, [r8, #4]!
 801d8a8:	2a15      	cmp	r2, #21
 801d8aa:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801d8ae:	dd78      	ble.n	801d9a2 <st_sssa8_ch_convolve_dw+0x62a>
 801d8b0:	1e93      	subs	r3, r2, #2
 801d8b2:	3a01      	subs	r2, #1
 801d8b4:	9204      	str	r2, [sp, #16]
 801d8b6:	2201      	movs	r2, #1
 801d8b8:	fa02 f303 	lsl.w	r3, r2, r3
 801d8bc:	fb51 3104 	smmla	r1, r1, r4, r3
 801d8c0:	9b04      	ldr	r3, [sp, #16]
 801d8c2:	4119      	asrs	r1, r3
 801d8c4:	4401      	add	r1, r0
 801d8c6:	f301 0107 	ssat	r1, #8, r1
 801d8ca:	f88e 1000 	strb.w	r1, [lr]
 801d8ce:	9b03      	ldr	r3, [sp, #12]
 801d8d0:	f10e 0e01 	add.w	lr, lr, #1
 801d8d4:	429e      	cmp	r6, r3
 801d8d6:	d1ce      	bne.n	801d876 <st_sssa8_ch_convolve_dw+0x4fe>
 801d8d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d8da:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 801d8dc:	3b01      	subs	r3, #1
 801d8de:	b29b      	uxth	r3, r3
 801d8e0:	3301      	adds	r3, #1
 801d8e2:	441a      	add	r2, r3
 801d8e4:	9273      	str	r2, [sp, #460]	; 0x1cc
 801d8e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d8e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d8ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d8ec:	440b      	add	r3, r1
 801d8ee:	3201      	adds	r2, #1
 801d8f0:	b29b      	uxth	r3, r3
 801d8f2:	b212      	sxth	r2, r2
 801d8f4:	931c      	str	r3, [sp, #112]	; 0x70
 801d8f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d8f8:	9220      	str	r2, [sp, #128]	; 0x80
 801d8fa:	4293      	cmp	r3, r2
 801d8fc:	f73f ae38 	bgt.w	801d570 <st_sssa8_ch_convolve_dw+0x1f8>
 801d900:	46d8      	mov	r8, fp
 801d902:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d904:	9937      	ldr	r1, [sp, #220]	; 0xdc
 801d906:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801d908:	440b      	add	r3, r1
 801d90a:	3201      	adds	r2, #1
 801d90c:	b29b      	uxth	r3, r3
 801d90e:	b212      	sxth	r2, r2
 801d910:	9334      	str	r3, [sp, #208]	; 0xd0
 801d912:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801d914:	4614      	mov	r4, r2
 801d916:	9236      	str	r2, [sp, #216]	; 0xd8
 801d918:	4293      	cmp	r3, r2
 801d91a:	f73f ae0d 	bgt.w	801d538 <st_sssa8_ch_convolve_dw+0x1c0>
 801d91e:	2000      	movs	r0, #0
 801d920:	b05d      	add	sp, #372	; 0x174
 801d922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d926:	2900      	cmp	r1, #0
 801d928:	dd48      	ble.n	801d9bc <st_sssa8_ch_convolve_dw+0x644>
 801d92a:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 801d92e:	0040      	lsls	r0, r0, #1
 801d930:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801d934:	fb50 2003 	smmla	r0, r0, r3, r2
 801d938:	4108      	asrs	r0, r1
 801d93a:	f300 0007 	ssat	r0, #8, r0
 801d93e:	9b04      	ldr	r3, [sp, #16]
 801d940:	f803 0c01 	strb.w	r0, [r3, #-1]
 801d944:	e766      	b.n	801d814 <st_sssa8_ch_convolve_dw+0x49c>
 801d946:	2900      	cmp	r1, #0
 801d948:	dd5d      	ble.n	801da06 <st_sssa8_ch_convolve_dw+0x68e>
 801d94a:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 801d94e:	0064      	lsls	r4, r4, #1
 801d950:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801d954:	fb54 2403 	smmla	r4, r4, r3, r2
 801d958:	410c      	asrs	r4, r1
 801d95a:	f304 0407 	ssat	r4, #8, r4
 801d95e:	9b04      	ldr	r3, [sp, #16]
 801d960:	f803 4c02 	strb.w	r4, [r3, #-2]
 801d964:	e73d      	b.n	801d7e2 <st_sssa8_ch_convolve_dw+0x46a>
 801d966:	2900      	cmp	r1, #0
 801d968:	dd60      	ble.n	801da2c <st_sssa8_ch_convolve_dw+0x6b4>
 801d96a:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801d96e:	006d      	lsls	r5, r5, #1
 801d970:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 801d974:	fb55 2503 	smmla	r5, r5, r3, r2
 801d978:	410d      	asrs	r5, r1
 801d97a:	f305 0507 	ssat	r5, #8, r5
 801d97e:	9b04      	ldr	r3, [sp, #16]
 801d980:	f803 5c03 	strb.w	r5, [r3, #-3]
 801d984:	e714      	b.n	801d7b0 <st_sssa8_ch_convolve_dw+0x438>
 801d986:	2a00      	cmp	r2, #0
 801d988:	dd2e      	ble.n	801d9e8 <st_sssa8_ch_convolve_dw+0x670>
 801d98a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801d98e:	fb5c 1c09 	smmla	ip, ip, r9, r1
 801d992:	fa4c f202 	asr.w	r2, ip, r2
 801d996:	f302 0207 	ssat	r2, #8, r2
 801d99a:	9b04      	ldr	r3, [sp, #16]
 801d99c:	f803 2c04 	strb.w	r2, [r3, #-4]
 801d9a0:	e6ed      	b.n	801d77e <st_sssa8_ch_convolve_dw+0x406>
 801d9a2:	2a00      	cmp	r2, #0
 801d9a4:	f340 80e8 	ble.w	801db78 <st_sssa8_ch_convolve_dw+0x800>
 801d9a8:	0049      	lsls	r1, r1, #1
 801d9aa:	fb51 0104 	smmla	r1, r1, r4, r0
 801d9ae:	fa41 f202 	asr.w	r2, r1, r2
 801d9b2:	f302 0207 	ssat	r2, #8, r2
 801d9b6:	f88e 2000 	strb.w	r2, [lr]
 801d9ba:	e788      	b.n	801d8ce <st_sssa8_ch_convolve_dw+0x556>
 801d9bc:	f1c1 0101 	rsb	r1, r1, #1
 801d9c0:	fa00 f201 	lsl.w	r2, r0, r1
 801d9c4:	f302 021f 	ssat	r2, #32, r2
 801d9c8:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 801d9cc:	fb52 f213 	smmulr	r2, r2, r3
 801d9d0:	f858 3c04 	ldr.w	r3, [r8, #-4]
 801d9d4:	4413      	add	r3, r2
 801d9d6:	f303 0307 	ssat	r3, #8, r3
 801d9da:	9a04      	ldr	r2, [sp, #16]
 801d9dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d9e0:	e718      	b.n	801d814 <st_sssa8_ch_convolve_dw+0x49c>
 801d9e2:	bf00      	nop
 801d9e4:	ffff0000 	.word	0xffff0000
 801d9e8:	f1c2 0201 	rsb	r2, r2, #1
 801d9ec:	fa0c f202 	lsl.w	r2, ip, r2
 801d9f0:	f302 021f 	ssat	r2, #32, r2
 801d9f4:	fb52 f219 	smmulr	r2, r2, r9
 801d9f8:	440a      	add	r2, r1
 801d9fa:	f302 0207 	ssat	r2, #8, r2
 801d9fe:	9b04      	ldr	r3, [sp, #16]
 801da00:	f803 2c04 	strb.w	r2, [r3, #-4]
 801da04:	e6bb      	b.n	801d77e <st_sssa8_ch_convolve_dw+0x406>
 801da06:	f1c1 0101 	rsb	r1, r1, #1
 801da0a:	fa04 f201 	lsl.w	r2, r4, r1
 801da0e:	f302 021f 	ssat	r2, #32, r2
 801da12:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 801da16:	fb52 f213 	smmulr	r2, r2, r3
 801da1a:	f858 3c08 	ldr.w	r3, [r8, #-8]
 801da1e:	4413      	add	r3, r2
 801da20:	f303 0307 	ssat	r3, #8, r3
 801da24:	9a04      	ldr	r2, [sp, #16]
 801da26:	f802 3c02 	strb.w	r3, [r2, #-2]
 801da2a:	e6da      	b.n	801d7e2 <st_sssa8_ch_convolve_dw+0x46a>
 801da2c:	f1c1 0101 	rsb	r1, r1, #1
 801da30:	fa05 f201 	lsl.w	r2, r5, r1
 801da34:	f302 021f 	ssat	r2, #32, r2
 801da38:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801da3c:	fb52 f213 	smmulr	r2, r2, r3
 801da40:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 801da44:	4413      	add	r3, r2
 801da46:	f303 0307 	ssat	r3, #8, r3
 801da4a:	9a04      	ldr	r2, [sp, #16]
 801da4c:	f802 3c03 	strb.w	r3, [r2, #-3]
 801da50:	e6ae      	b.n	801d7b0 <st_sssa8_ch_convolve_dw+0x438>
 801da52:	9b07      	ldr	r3, [sp, #28]
 801da54:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801da56:	4419      	add	r1, r3
 801da58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801da5a:	fb03 0101 	mla	r1, r3, r1, r0
 801da5e:	2b00      	cmp	r3, #0
 801da60:	f43f adcf 	beq.w	801d602 <st_sssa8_ch_convolve_dw+0x28a>
 801da64:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801da66:	2f00      	cmp	r7, #0
 801da68:	f43f adcb 	beq.w	801d602 <st_sssa8_ch_convolve_dw+0x28a>
 801da6c:	18ca      	adds	r2, r1, r3
 801da6e:	1ebb      	subs	r3, r7, #2
 801da70:	465c      	mov	r4, fp
 801da72:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801da76:	9306      	str	r3, [sp, #24]
 801da78:	1efb      	subs	r3, r7, #3
 801da7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 801da7e:	4650      	mov	r0, sl
 801da80:	930a      	str	r3, [sp, #40]	; 0x28
 801da82:	4693      	mov	fp, r2
 801da84:	1f3b      	subs	r3, r7, #4
 801da86:	46a1      	mov	r9, r4
 801da88:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801da8c:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 801da90:	19c6      	adds	r6, r0, r7
 801da92:	f101 0e01 	add.w	lr, r1, #1
 801da96:	42b1      	cmp	r1, r6
 801da98:	bf38      	it	cc
 801da9a:	4570      	cmpcc	r0, lr
 801da9c:	d362      	bcc.n	801db64 <st_sssa8_ch_convolve_dw+0x7ec>
 801da9e:	2f0b      	cmp	r7, #11
 801daa0:	d960      	bls.n	801db64 <st_sssa8_ch_convolve_dw+0x7ec>
 801daa2:	f009 0303 	and.w	r3, r9, #3
 801daa6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801daa8:	1cda      	adds	r2, r3, #3
 801daaa:	42a2      	cmp	r2, r4
 801daac:	f200 80b4 	bhi.w	801dc18 <st_sssa8_ch_convolve_dw+0x8a0>
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d05e      	beq.n	801db72 <st_sssa8_ch_convolve_dw+0x7fa>
 801dab4:	780a      	ldrb	r2, [r1, #0]
 801dab6:	2b01      	cmp	r3, #1
 801dab8:	f100 0a01 	add.w	sl, r0, #1
 801dabc:	9d06      	ldr	r5, [sp, #24]
 801dabe:	7002      	strb	r2, [r0, #0]
 801dac0:	d00b      	beq.n	801dada <st_sssa8_ch_convolve_dw+0x762>
 801dac2:	780a      	ldrb	r2, [r1, #0]
 801dac4:	2b03      	cmp	r3, #3
 801dac6:	f100 0a02 	add.w	sl, r0, #2
 801daca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dacc:	7042      	strb	r2, [r0, #1]
 801dace:	d104      	bne.n	801dada <st_sssa8_ch_convolve_dw+0x762>
 801dad0:	780a      	ldrb	r2, [r1, #0]
 801dad2:	f100 0a03 	add.w	sl, r0, #3
 801dad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dad8:	7082      	strb	r2, [r0, #2]
 801dada:	f891 c000 	ldrb.w	ip, [r1]
 801dade:	2400      	movs	r4, #0
 801dae0:	eba7 0803 	sub.w	r8, r7, r3
 801dae4:	2200      	movs	r2, #0
 801dae6:	f36c 0407 	bfi	r4, ip, #0, #8
 801daea:	4403      	add	r3, r0
 801daec:	ea4f 0098 	mov.w	r0, r8, lsr #2
 801daf0:	f36c 240f 	bfi	r4, ip, #8, #8
 801daf4:	f36c 4417 	bfi	r4, ip, #16, #8
 801daf8:	f36c 641f 	bfi	r4, ip, #24, #8
 801dafc:	3201      	adds	r2, #1
 801dafe:	f843 4b04 	str.w	r4, [r3], #4
 801db02:	4282      	cmp	r2, r0
 801db04:	d3fa      	bcc.n	801dafc <st_sssa8_ch_convolve_dw+0x784>
 801db06:	f028 0203 	bic.w	r2, r8, #3
 801db0a:	4542      	cmp	r2, r8
 801db0c:	4492      	add	sl, r2
 801db0e:	eba5 0502 	sub.w	r5, r5, r2
 801db12:	d01a      	beq.n	801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db14:	780b      	ldrb	r3, [r1, #0]
 801db16:	f88a 3000 	strb.w	r3, [sl]
 801db1a:	b1b5      	cbz	r5, 801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db1c:	780b      	ldrb	r3, [r1, #0]
 801db1e:	2d01      	cmp	r5, #1
 801db20:	f88a 3001 	strb.w	r3, [sl, #1]
 801db24:	d011      	beq.n	801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db26:	780b      	ldrb	r3, [r1, #0]
 801db28:	2d02      	cmp	r5, #2
 801db2a:	f88a 3002 	strb.w	r3, [sl, #2]
 801db2e:	d00c      	beq.n	801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db30:	780b      	ldrb	r3, [r1, #0]
 801db32:	2d03      	cmp	r5, #3
 801db34:	f88a 3003 	strb.w	r3, [sl, #3]
 801db38:	d007      	beq.n	801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db3a:	780b      	ldrb	r3, [r1, #0]
 801db3c:	2d04      	cmp	r5, #4
 801db3e:	f88a 3004 	strb.w	r3, [sl, #4]
 801db42:	d002      	beq.n	801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db44:	780b      	ldrb	r3, [r1, #0]
 801db46:	f88a 3005 	strb.w	r3, [sl, #5]
 801db4a:	45de      	cmp	lr, fp
 801db4c:	4671      	mov	r1, lr
 801db4e:	4630      	mov	r0, r6
 801db50:	eba9 0907 	sub.w	r9, r9, r7
 801db54:	d19c      	bne.n	801da90 <st_sssa8_ch_convolve_dw+0x718>
 801db56:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801db5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801db5e:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 801db62:	e54e      	b.n	801d602 <st_sssa8_ch_convolve_dw+0x28a>
 801db64:	4603      	mov	r3, r0
 801db66:	780a      	ldrb	r2, [r1, #0]
 801db68:	f803 2b01 	strb.w	r2, [r3], #1
 801db6c:	429e      	cmp	r6, r3
 801db6e:	d1fa      	bne.n	801db66 <st_sssa8_ch_convolve_dw+0x7ee>
 801db70:	e7eb      	b.n	801db4a <st_sssa8_ch_convolve_dw+0x7d2>
 801db72:	4625      	mov	r5, r4
 801db74:	4682      	mov	sl, r0
 801db76:	e7b0      	b.n	801dada <st_sssa8_ch_convolve_dw+0x762>
 801db78:	f1c2 0201 	rsb	r2, r2, #1
 801db7c:	fa01 f202 	lsl.w	r2, r1, r2
 801db80:	f302 031f 	ssat	r3, #32, r2
 801db84:	fb53 f314 	smmulr	r3, r3, r4
 801db88:	4403      	add	r3, r0
 801db8a:	f303 0307 	ssat	r3, #8, r3
 801db8e:	f88e 3000 	strb.w	r3, [lr]
 801db92:	e69c      	b.n	801d8ce <st_sssa8_ch_convolve_dw+0x556>
 801db94:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801db96:	2b00      	cmp	r3, #0
 801db98:	d041      	beq.n	801dc1e <st_sssa8_ch_convolve_dw+0x8a6>
 801db9a:	3b01      	subs	r3, #1
 801db9c:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 801dba0:	9349      	str	r3, [sp, #292]	; 0x124
 801dba2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dba4:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 801dba8:	2b01      	cmp	r3, #1
 801dbaa:	f47f acee 	bne.w	801d58a <st_sssa8_ch_convolve_dw+0x212>
 801dbae:	2901      	cmp	r1, #1
 801dbb0:	d03f      	beq.n	801dc32 <st_sssa8_ch_convolve_dw+0x8ba>
 801dbb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dbb4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801dbb6:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
 801dbba:	428b      	cmp	r3, r1
 801dbbc:	f6bf ad35 	bge.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dbc0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801dbc2:	461c      	mov	r4, r3
 801dbc4:	f8cd b00c 	str.w	fp, [sp, #12]
 801dbc8:	4618      	mov	r0, r3
 801dbca:	4637      	mov	r7, r6
 801dbcc:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 801dbd0:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 801dbd4:	468b      	mov	fp, r1
 801dbd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801dbda:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801dbdc:	3401      	adds	r4, #1
 801dbde:	fb00 500a 	mla	r0, r0, sl, r5
 801dbe2:	4639      	mov	r1, r7
 801dbe4:	4642      	mov	r2, r8
 801dbe6:	b224      	sxth	r4, r4
 801dbe8:	fb06 9000 	mla	r0, r6, r0, r9
 801dbec:	f003 ff54 	bl	8021a98 <st_dsp_arm_copy_q7>
 801dbf0:	4447      	add	r7, r8
 801dbf2:	455c      	cmp	r4, fp
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	dbf1      	blt.n	801dbdc <st_sssa8_ch_convolve_dw+0x864>
 801dbf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dbfa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	f47f ad17 	bne.w	801d632 <st_sssa8_ch_convolve_dw+0x2ba>
 801dc04:	461e      	mov	r6, r3
 801dc06:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801dc0a:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 801dc0e:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 801dc12:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 801dc16:	e61e      	b.n	801d856 <st_sssa8_ch_convolve_dw+0x4de>
 801dc18:	4625      	mov	r5, r4
 801dc1a:	4682      	mov	sl, r0
 801dc1c:	e77a      	b.n	801db14 <st_sssa8_ch_convolve_dw+0x79c>
 801dc1e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 801dc20:	2101      	movs	r1, #1
 801dc22:	3b01      	subs	r3, #1
 801dc24:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 801dc28:	934a      	str	r3, [sp, #296]	; 0x128
 801dc2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dc2c:	2b01      	cmp	r3, #1
 801dc2e:	f47f acac 	bne.w	801d58a <st_sssa8_ch_convolve_dw+0x212>
 801dc32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dc34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dc36:	4283      	cmp	r3, r0
 801dc38:	f6bf acf7 	bge.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dc3c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801dc3e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801dc40:	fb02 0201 	mla	r2, r2, r1, r0
 801dc44:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801dc46:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 801dc4a:	1a15      	subs	r5, r2, r0
 801dc4c:	9104      	str	r1, [sp, #16]
 801dc4e:	428d      	cmp	r5, r1
 801dc50:	f77f aceb 	ble.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dc54:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801dc58:	4698      	mov	r8, r3
 801dc5a:	461a      	mov	r2, r3
 801dc5c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801dc60:	9e08      	ldr	r6, [sp, #32]
 801dc62:	fb06 f302 	mul.w	r3, r6, r2
 801dc66:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 801dc6a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801dc6e:	9303      	str	r3, [sp, #12]
 801dc70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dc72:	4664      	mov	r4, ip
 801dc74:	4293      	cmp	r3, r2
 801dc76:	bfd8      	it	le
 801dc78:	f047 0701 	orrle.w	r7, r7, #1
 801dc7c:	4566      	cmp	r6, ip
 801dc7e:	465a      	mov	r2, fp
 801dc80:	4651      	mov	r1, sl
 801dc82:	4648      	mov	r0, r9
 801dc84:	bfcc      	ite	gt
 801dc86:	2300      	movgt	r3, #0
 801dc88:	2301      	movle	r3, #1
 801dc8a:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 801dc8e:	d102      	bne.n	801dc96 <st_sssa8_ch_convolve_dw+0x91e>
 801dc90:	2f00      	cmp	r7, #0
 801dc92:	f000 80c4 	beq.w	801de1e <st_sssa8_ch_convolve_dw+0xaa6>
 801dc96:	f001 fbe3 	bl	801f460 <st_uint8_fill>
 801dc9a:	3401      	adds	r4, #1
 801dc9c:	44da      	add	sl, fp
 801dc9e:	b224      	sxth	r4, r4
 801dca0:	42ac      	cmp	r4, r5
 801dca2:	46a4      	mov	ip, r4
 801dca4:	dbea      	blt.n	801dc7c <st_sssa8_ch_convolve_dw+0x904>
 801dca6:	f108 0801 	add.w	r8, r8, #1
 801dcaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dcac:	fa0f f888 	sxth.w	r8, r8
 801dcb0:	4598      	cmp	r8, r3
 801dcb2:	4642      	mov	r2, r8
 801dcb4:	dbd5      	blt.n	801dc62 <st_sssa8_ch_convolve_dw+0x8ea>
 801dcb6:	e4b8      	b.n	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dcb8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801dcba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dcbc:	4281      	cmp	r1, r0
 801dcbe:	f6bf acb4 	bge.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dcc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dcc4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801dcc6:	fb02 0203 	mla	r2, r2, r3, r0
 801dcca:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801dccc:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 801dcd0:	1a15      	subs	r5, r2, r0
 801dcd2:	9304      	str	r3, [sp, #16]
 801dcd4:	42ab      	cmp	r3, r5
 801dcd6:	f6bf aca8 	bge.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dcda:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801dcde:	460e      	mov	r6, r1
 801dce0:	4689      	mov	r9, r1
 801dce2:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 801dce6:	9f08      	ldr	r7, [sp, #32]
 801dce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dcea:	9a04      	ldr	r2, [sp, #16]
 801dcec:	454b      	cmp	r3, r9
 801dcee:	fb09 f307 	mul.w	r3, r9, r7
 801dcf2:	4614      	mov	r4, r2
 801dcf4:	bfcc      	ite	gt
 801dcf6:	2100      	movgt	r1, #0
 801dcf8:	2101      	movle	r1, #1
 801dcfa:	9303      	str	r3, [sp, #12]
 801dcfc:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 801dd00:	464b      	mov	r3, r9
 801dd02:	46b1      	mov	r9, r6
 801dd04:	461e      	mov	r6, r3
 801dd06:	4297      	cmp	r7, r2
 801dd08:	bfcc      	ite	gt
 801dd0a:	2300      	movgt	r3, #0
 801dd0c:	2301      	movle	r3, #1
 801dd0e:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 801dd12:	d100      	bne.n	801dd16 <st_sssa8_ch_convolve_dw+0x99e>
 801dd14:	b196      	cbz	r6, 801dd3c <st_sssa8_ch_convolve_dw+0x9c4>
 801dd16:	465a      	mov	r2, fp
 801dd18:	4651      	mov	r1, sl
 801dd1a:	4640      	mov	r0, r8
 801dd1c:	f001 fba0 	bl	801f460 <st_uint8_fill>
 801dd20:	3401      	adds	r4, #1
 801dd22:	44da      	add	sl, fp
 801dd24:	b224      	sxth	r4, r4
 801dd26:	42ac      	cmp	r4, r5
 801dd28:	4622      	mov	r2, r4
 801dd2a:	dbec      	blt.n	801dd06 <st_sssa8_ch_convolve_dw+0x98e>
 801dd2c:	464e      	mov	r6, r9
 801dd2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd30:	3601      	adds	r6, #1
 801dd32:	b236      	sxth	r6, r6
 801dd34:	429e      	cmp	r6, r3
 801dd36:	46b1      	mov	r9, r6
 801dd38:	dbd6      	blt.n	801dce8 <st_sssa8_ch_convolve_dw+0x970>
 801dd3a:	e476      	b.n	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dd3c:	9b03      	ldr	r3, [sp, #12]
 801dd3e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801dd40:	441a      	add	r2, r3
 801dd42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dd44:	fb03 0102 	mla	r1, r3, r2, r0
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d0e9      	beq.n	801dd20 <st_sssa8_ch_convolve_dw+0x9a8>
 801dd4c:	eb01 0c03 	add.w	ip, r1, r3
 801dd50:	4650      	mov	r0, sl
 801dd52:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd56:	021b      	lsls	r3, r3, #8
 801dd58:	4561      	cmp	r1, ip
 801dd5a:	ea4f 2233 	mov.w	r2, r3, ror #8
 801dd5e:	fa33 f382 	uxtab16	r3, r3, r2
 801dd62:	f820 3b02 	strh.w	r3, [r0], #2
 801dd66:	d1f4      	bne.n	801dd52 <st_sssa8_ch_convolve_dw+0x9da>
 801dd68:	e7da      	b.n	801dd20 <st_sssa8_ch_convolve_dw+0x9a8>
 801dd6a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801dd6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dd6e:	4281      	cmp	r1, r0
 801dd70:	f6bf ac5b 	bge.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dd74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dd76:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801dd78:	fb02 0203 	mla	r2, r2, r3, r0
 801dd7c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801dd7e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 801dd82:	1a15      	subs	r5, r2, r0
 801dd84:	9304      	str	r3, [sp, #16]
 801dd86:	429d      	cmp	r5, r3
 801dd88:	f77f ac4f 	ble.w	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801dd8c:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801dd90:	4689      	mov	r9, r1
 801dd92:	460a      	mov	r2, r1
 801dd94:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 801dd98:	9e08      	ldr	r6, [sp, #32]
 801dd9a:	fb06 f302 	mul.w	r3, r6, r2
 801dd9e:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 801dda2:	9904      	ldr	r1, [sp, #16]
 801dda4:	9303      	str	r3, [sp, #12]
 801dda6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dda8:	460c      	mov	r4, r1
 801ddaa:	4293      	cmp	r3, r2
 801ddac:	bfd8      	it	le
 801ddae:	f047 0701 	orrle.w	r7, r7, #1
 801ddb2:	428e      	cmp	r6, r1
 801ddb4:	bfcc      	ite	gt
 801ddb6:	2300      	movgt	r3, #0
 801ddb8:	2301      	movle	r3, #1
 801ddba:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 801ddbe:	d100      	bne.n	801ddc2 <st_sssa8_ch_convolve_dw+0xa4a>
 801ddc0:	b19f      	cbz	r7, 801ddea <st_sssa8_ch_convolve_dw+0xa72>
 801ddc2:	465a      	mov	r2, fp
 801ddc4:	4651      	mov	r1, sl
 801ddc6:	4640      	mov	r0, r8
 801ddc8:	f001 fb4a 	bl	801f460 <st_uint8_fill>
 801ddcc:	3401      	adds	r4, #1
 801ddce:	44da      	add	sl, fp
 801ddd0:	b224      	sxth	r4, r4
 801ddd2:	42ac      	cmp	r4, r5
 801ddd4:	4621      	mov	r1, r4
 801ddd6:	dbec      	blt.n	801ddb2 <st_sssa8_ch_convolve_dw+0xa3a>
 801ddd8:	f109 0901 	add.w	r9, r9, #1
 801dddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ddde:	fa0f f989 	sxth.w	r9, r9
 801dde2:	4599      	cmp	r9, r3
 801dde4:	464a      	mov	r2, r9
 801dde6:	dbd8      	blt.n	801dd9a <st_sssa8_ch_convolve_dw+0xa22>
 801dde8:	e41f      	b.n	801d62a <st_sssa8_ch_convolve_dw+0x2b2>
 801ddea:	9b03      	ldr	r3, [sp, #12]
 801ddec:	185a      	adds	r2, r3, r1
 801ddee:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	; 0x78
 801ddf2:	fb03 1202 	mla	r2, r3, r2, r1
 801ddf6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d0e7      	beq.n	801ddcc <st_sssa8_ch_convolve_dw+0xa54>
 801ddfc:	18d0      	adds	r0, r2, r3
 801ddfe:	4651      	mov	r1, sl
 801de00:	f812 cb01 	ldrb.w	ip, [r2], #1
 801de04:	ea4f 630c 	mov.w	r3, ip, lsl #24
 801de08:	4282      	cmp	r2, r0
 801de0a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 801de0e:	ea4f 2c33 	mov.w	ip, r3, ror #8
 801de12:	fa33 f38c 	uxtab16	r3, r3, ip
 801de16:	f841 3b04 	str.w	r3, [r1], #4
 801de1a:	d1f1      	bne.n	801de00 <st_sssa8_ch_convolve_dw+0xa88>
 801de1c:	e7d6      	b.n	801ddcc <st_sssa8_ch_convolve_dw+0xa54>
 801de1e:	9b03      	ldr	r3, [sp, #12]
 801de20:	eb03 000c 	add.w	r0, r3, ip
 801de24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801de26:	461a      	mov	r2, r3
 801de28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801de2a:	fb02 3000 	mla	r0, r2, r0, r3
 801de2e:	f003 fe33 	bl	8021a98 <st_dsp_arm_copy_q7>
 801de32:	e732      	b.n	801dc9a <st_sssa8_ch_convolve_dw+0x922>
 801de34:	428e      	cmp	r6, r1
 801de36:	f844 5f04 	str.w	r5, [r4, #4]!
 801de3a:	f47f aadc 	bne.w	801d3f6 <st_sssa8_ch_convolve_dw+0x7e>
 801de3e:	f7ff baeb 	b.w	801d418 <st_sssa8_ch_convolve_dw+0xa0>
 801de42:	2401      	movs	r4, #1
 801de44:	f7ff bb0e 	b.w	801d464 <st_sssa8_ch_convolve_dw+0xec>

0801de48 <st_sssa8_ch_convolve_rank1upd>:
 801de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de4c:	b083      	sub	sp, #12
 801de4e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801de52:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 801de56:	fb13 f304 	smulbb	r3, r3, r4
 801de5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801de5c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 801de60:	fb13 f600 	smulbb	r6, r3, r0
 801de64:	2a00      	cmp	r2, #0
 801de66:	d06c      	beq.n	801df42 <st_sssa8_ch_convolve_rank1upd+0xfa>
 801de68:	b2b6      	uxth	r6, r6
 801de6a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801de6e:	ea4f 0944 	mov.w	r9, r4, lsl #1
 801de72:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 801de76:	f006 0603 	and.w	r6, r6, #3
 801de7a:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 801de7e:	f1a9 0904 	sub.w	r9, r9, #4
 801de82:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 801de86:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 801de8a:	44a9      	add	r9, r5
 801de8c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 801de90:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 801de94:	3301      	adds	r3, #1
 801de96:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 801de9a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 801de9e:	b293      	uxth	r3, r2
 801dea0:	9301      	str	r3, [sp, #4]
 801dea2:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 801dea6:	d94f      	bls.n	801df48 <st_sssa8_ch_convolve_rank1upd+0x100>
 801dea8:	eb01 050c 	add.w	r5, r1, ip
 801deac:	2400      	movs	r4, #0
 801deae:	2300      	movs	r3, #0
 801deb0:	f501 7000 	add.w	r0, r1, #512	; 0x200
 801deb4:	461f      	mov	r7, r3
 801deb6:	f851 2b04 	ldr.w	r2, [r1], #4
 801deba:	fa2f f382 	sxtb16	r3, r2
 801debe:	4288      	cmp	r0, r1
 801dec0:	ea4f 2232 	mov.w	r2, r2, ror #8
 801dec4:	fa97 f313 	qadd16	r3, r7, r3
 801dec8:	fa2f f282 	sxtb16	r2, r2
 801decc:	fa93 f712 	qadd16	r7, r3, r2
 801ded0:	d1f1      	bne.n	801deb6 <st_sssa8_ch_convolve_rank1upd+0x6e>
 801ded2:	b23a      	sxth	r2, r7
 801ded4:	4285      	cmp	r5, r0
 801ded6:	4601      	mov	r1, r0
 801ded8:	eb02 4327 	add.w	r3, r2, r7, asr #16
 801dedc:	441c      	add	r4, r3
 801dede:	d1e6      	bne.n	801deae <st_sssa8_ch_convolve_rank1upd+0x66>
 801dee0:	9801      	ldr	r0, [sp, #4]
 801dee2:	b1b8      	cbz	r0, 801df14 <st_sssa8_ch_convolve_rank1upd+0xcc>
 801dee4:	3801      	subs	r0, #1
 801dee6:	2200      	movs	r2, #0
 801dee8:	b280      	uxth	r0, r0
 801deea:	3001      	adds	r0, #1
 801deec:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801def0:	f851 3b04 	ldr.w	r3, [r1], #4
 801def4:	fa2f f583 	sxtb16	r5, r3
 801def8:	4281      	cmp	r1, r0
 801defa:	ea4f 2333 	mov.w	r3, r3, ror #8
 801defe:	fa92 f215 	qadd16	r2, r2, r5
 801df02:	fa2f f383 	sxtb16	r3, r3
 801df06:	fa92 f213 	qadd16	r2, r2, r3
 801df0a:	d1f1      	bne.n	801def0 <st_sssa8_ch_convolve_rank1upd+0xa8>
 801df0c:	b213      	sxth	r3, r2
 801df0e:	eb03 4222 	add.w	r2, r3, r2, asr #16
 801df12:	4414      	add	r4, r2
 801df14:	b16e      	cbz	r6, 801df32 <st_sssa8_ch_convolve_rank1upd+0xea>
 801df16:	f991 3000 	ldrsb.w	r3, [r1]
 801df1a:	2e01      	cmp	r6, #1
 801df1c:	441c      	add	r4, r3
 801df1e:	d018      	beq.n	801df52 <st_sssa8_ch_convolve_rank1upd+0x10a>
 801df20:	f991 3001 	ldrsb.w	r3, [r1, #1]
 801df24:	2e02      	cmp	r6, #2
 801df26:	441c      	add	r4, r3
 801df28:	d011      	beq.n	801df4e <st_sssa8_ch_convolve_rank1upd+0x106>
 801df2a:	f991 3002 	ldrsb.w	r3, [r1, #2]
 801df2e:	3103      	adds	r1, #3
 801df30:	441c      	add	r4, r3
 801df32:	f858 3b04 	ldr.w	r3, [r8], #4
 801df36:	fb0a 3414 	mls	r4, sl, r4, r3
 801df3a:	45c6      	cmp	lr, r8
 801df3c:	f849 4f04 	str.w	r4, [r9, #4]!
 801df40:	d1af      	bne.n	801dea2 <st_sssa8_ch_convolve_rank1upd+0x5a>
 801df42:	b003      	add	sp, #12
 801df44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df48:	4658      	mov	r0, fp
 801df4a:	2400      	movs	r4, #0
 801df4c:	e7c9      	b.n	801dee2 <st_sssa8_ch_convolve_rank1upd+0x9a>
 801df4e:	3102      	adds	r1, #2
 801df50:	e7ef      	b.n	801df32 <st_sssa8_ch_convolve_rank1upd+0xea>
 801df52:	3101      	adds	r1, #1
 801df54:	e7ed      	b.n	801df32 <st_sssa8_ch_convolve_rank1upd+0xea>
 801df56:	bf00      	nop

0801df58 <st_sssa8_ch_convolve>:
 801df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df5c:	b0d3      	sub	sp, #332	; 0x14c
 801df5e:	4699      	mov	r9, r3
 801df60:	4688      	mov	r8, r1
 801df62:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
 801df66:	f8bd 6178 	ldrh.w	r6, [sp, #376]	; 0x178
 801df6a:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801df6c:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 801df70:	f8bd 717c 	ldrh.w	r7, [sp, #380]	; 0x17c
 801df74:	4629      	mov	r1, r5
 801df76:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801df7a:	900d      	str	r0, [sp, #52]	; 0x34
 801df7c:	fb16 f307 	smulbb	r3, r6, r7
 801df80:	ebc5 7045 	rsb	r0, r5, r5, lsl #29
 801df84:	9519      	str	r5, [sp, #100]	; 0x64
 801df86:	00ad      	lsls	r5, r5, #2
 801df88:	fb13 f309 	smulbb	r3, r3, r9
 801df8c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801df90:	920b      	str	r2, [sp, #44]	; 0x2c
 801df92:	b29b      	uxth	r3, r3
 801df94:	4602      	mov	r2, r0
 801df96:	9022      	str	r0, [sp, #136]	; 0x88
 801df98:	931a      	str	r3, [sp, #104]	; 0x68
 801df9a:	442a      	add	r2, r5
 801df9c:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 801dfa0:	f8bd 0180 	ldrh.w	r0, [sp, #384]	; 0x180
 801dfa4:	9323      	str	r3, [sp, #140]	; 0x8c
 801dfa6:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
 801dfaa:	9617      	str	r6, [sp, #92]	; 0x5c
 801dfac:	930f      	str	r3, [sp, #60]	; 0x3c
 801dfae:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 801dfb2:	9414      	str	r4, [sp, #80]	; 0x50
 801dfb4:	931b      	str	r3, [sp, #108]	; 0x6c
 801dfb6:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 801dfba:	9725      	str	r7, [sp, #148]	; 0x94
 801dfbc:	9311      	str	r3, [sp, #68]	; 0x44
 801dfbe:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 801dfc2:	9507      	str	r5, [sp, #28]
 801dfc4:	9224      	str	r2, [sp, #144]	; 0x90
 801dfc6:	9015      	str	r0, [sp, #84]	; 0x54
 801dfc8:	9c66      	ldr	r4, [sp, #408]	; 0x198
 801dfca:	f99d b19c 	ldrsb.w	fp, [sp, #412]	; 0x19c
 801dfce:	f99d 61a0 	ldrsb.w	r6, [sp, #416]	; 0x1a0
 801dfd2:	9320      	str	r3, [sp, #128]	; 0x80
 801dfd4:	2900      	cmp	r1, #0
 801dfd6:	f000 8516 	beq.w	801ea06 <st_sssa8_ch_convolve+0xaae>
 801dfda:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801dfde:	4620      	mov	r0, r4
 801dfe0:	1f15      	subs	r5, r2, #4
 801dfe2:	2701      	movs	r7, #1
 801dfe4:	4464      	add	r4, ip
 801dfe6:	f930 3b02 	ldrsh.w	r3, [r0], #2
 801dfea:	1e5a      	subs	r2, r3, #1
 801dfec:	fa07 f103 	lsl.w	r1, r7, r3
 801dff0:	fa06 f303 	lsl.w	r3, r6, r3
 801dff4:	b292      	uxth	r2, r2
 801dff6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 801dffa:	2a14      	cmp	r2, #20
 801dffc:	f200 816a 	bhi.w	801e2d4 <st_sssa8_ch_convolve+0x37c>
 801e000:	4284      	cmp	r4, r0
 801e002:	f845 3f04 	str.w	r3, [r5, #4]!
 801e006:	d1ee      	bne.n	801dfe6 <st_sssa8_ch_convolve+0x8e>
 801e008:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e00a:	9a07      	ldr	r2, [sp, #28]
 801e00c:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801e00e:	189d      	adds	r5, r3, r2
 801e010:	eba4 010c 	sub.w	r1, r4, ip
 801e014:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e016:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e018:	aa3a      	add	r2, sp, #232	; 0xe8
 801e01a:	974a      	str	r7, [sp, #296]	; 0x128
 801e01c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801e020:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801e022:	ab36      	add	r3, sp, #216	; 0xd8
 801e024:	9433      	str	r4, [sp, #204]	; 0xcc
 801e026:	a83e      	add	r0, sp, #248	; 0xf8
 801e028:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e02a:	974b      	str	r7, [sp, #300]	; 0x12c
 801e02c:	9438      	str	r4, [sp, #224]	; 0xe0
 801e02e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801e030:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801e032:	974c      	str	r7, [sp, #304]	; 0x130
 801e034:	9437      	str	r4, [sp, #220]	; 0xdc
 801e036:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801e038:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e03a:	9200      	str	r2, [sp, #0]
 801e03c:	aa32      	add	r2, sp, #200	; 0xc8
 801e03e:	9121      	str	r1, [sp, #132]	; 0x84
 801e040:	a948      	add	r1, sp, #288	; 0x120
 801e042:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 801e046:	974d      	str	r7, [sp, #308]	; 0x134
 801e048:	e9cd 643b 	strd	r6, r4, [sp, #236]	; 0xec
 801e04c:	f001 f992 	bl	801f374 <ai_padding_opt_init>
 801e050:	fb0a f204 	mul.w	r2, sl, r4
 801e054:	e9dd 3119 	ldrd	r3, r1, [sp, #100]	; 0x64
 801e058:	fb06 f202 	mul.w	r2, r6, r2
 801e05c:	fb03 f301 	mul.w	r3, r3, r1
 801e060:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e062:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 801e066:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801e06a:	921c      	str	r2, [sp, #112]	; 0x70
 801e06c:	f340 84b2 	ble.w	801e9d4 <st_sssa8_ch_convolve+0xa7c>
 801e070:	2300      	movs	r3, #0
 801e072:	932e      	str	r3, [sp, #184]	; 0xb8
 801e074:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e076:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e078:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 801e07a:	fb03 f302 	mul.w	r3, r3, r2
 801e07e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e080:	fb02 1303 	mla	r3, r2, r3, r1
 801e084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e086:	429a      	cmp	r2, r3
 801e088:	f080 812a 	bcs.w	801e2e0 <st_sssa8_ch_convolve+0x388>
 801e08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e08e:	fb03 f308 	mul.w	r3, r3, r8
 801e092:	fb09 2303 	mla	r3, r9, r3, r2
 801e096:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801e098:	429a      	cmp	r2, r3
 801e09a:	bf2c      	ite	cs
 801e09c:	2300      	movcs	r3, #0
 801e09e:	2301      	movcc	r3, #1
 801e0a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e0a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 801e0a6:	fb92 f2f1 	sdiv	r2, r2, r1
 801e0aa:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e0ac:	f022 0201 	bic.w	r2, r2, #1
 801e0b0:	428a      	cmp	r2, r1
 801e0b2:	bf28      	it	cs
 801e0b4:	460a      	movcs	r2, r1
 801e0b6:	2a01      	cmp	r2, #1
 801e0b8:	921f      	str	r2, [sp, #124]	; 0x7c
 801e0ba:	f240 82ec 	bls.w	801e696 <st_sssa8_ch_convolve+0x73e>
 801e0be:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e0c0:	460a      	mov	r2, r1
 801e0c2:	fbb1 f1f0 	udiv	r1, r1, r0
 801e0c6:	fb00 2211 	mls	r2, r0, r1, r2
 801e0ca:	b289      	uxth	r1, r1
 801e0cc:	b292      	uxth	r2, r2
 801e0ce:	912c      	str	r1, [sp, #176]	; 0xb0
 801e0d0:	b11a      	cbz	r2, 801e0da <st_sssa8_ch_convolve+0x182>
 801e0d2:	460a      	mov	r2, r1
 801e0d4:	3201      	adds	r2, #1
 801e0d6:	b292      	uxth	r2, r2
 801e0d8:	922c      	str	r2, [sp, #176]	; 0xb0
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	f040 8102 	bne.w	801e2e4 <st_sssa8_ch_convolve+0x38c>
 801e0e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e0e2:	fa0f fb8b 	sxth.w	fp, fp
 801e0e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e0e8:	fb09 f201 	mul.w	r2, r9, r1
 801e0ec:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e0ee:	005b      	lsls	r3, r3, #1
 801e0f0:	9216      	str	r2, [sp, #88]	; 0x58
 801e0f2:	0052      	lsls	r2, r2, #1
 801e0f4:	fb01 f303 	mul.w	r3, r1, r3
 801e0f8:	9207      	str	r2, [sp, #28]
 801e0fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0fc:	9026      	str	r0, [sp, #152]	; 0x98
 801e0fe:	fb0a 2303 	mla	r3, sl, r3, r2
 801e102:	4652      	mov	r2, sl
 801e104:	46ca      	mov	sl, r9
 801e106:	9313      	str	r3, [sp, #76]	; 0x4c
 801e108:	465b      	mov	r3, fp
 801e10a:	4691      	mov	r9, r2
 801e10c:	46c3      	mov	fp, r8
 801e10e:	4698      	mov	r8, r3
 801e110:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e112:	1e5a      	subs	r2, r3, #1
 801e114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e118:	b292      	uxth	r2, r2
 801e11a:	429a      	cmp	r2, r3
 801e11c:	922c      	str	r2, [sp, #176]	; 0xb0
 801e11e:	f000 82b6 	beq.w	801e68e <st_sssa8_ch_convolve+0x736>
 801e122:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e124:	b92b      	cbnz	r3, 801e132 <st_sssa8_ch_convolve+0x1da>
 801e126:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e128:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e12a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801e12c:	985c      	ldr	r0, [sp, #368]	; 0x170
 801e12e:	f001 fe49 	bl	801fdc4 <st_int8_to16_dual>
 801e132:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e134:	2b00      	cmp	r3, #0
 801e136:	f000 80a9 	beq.w	801e28c <st_sssa8_ch_convolve+0x334>
 801e13a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e13c:	2400      	movs	r4, #0
 801e13e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e140:	425b      	negs	r3, r3
 801e142:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801e144:	941e      	str	r4, [sp, #120]	; 0x78
 801e146:	b29b      	uxth	r3, r3
 801e148:	921d      	str	r2, [sp, #116]	; 0x74
 801e14a:	9318      	str	r3, [sp, #96]	; 0x60
 801e14c:	4643      	mov	r3, r8
 801e14e:	46c8      	mov	r8, r9
 801e150:	46b9      	mov	r9, r7
 801e152:	461f      	mov	r7, r3
 801e154:	a83e      	add	r0, sp, #248	; 0xf8
 801e156:	f001 f967 	bl	801f428 <ai_padding_opt_phase1>
 801e15a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d06e      	beq.n	801e23e <st_sssa8_ch_convolve+0x2e6>
 801e160:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e162:	2500      	movs	r5, #0
 801e164:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e166:	9510      	str	r5, [sp, #64]	; 0x40
 801e168:	1a99      	subs	r1, r3, r2
 801e16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e16c:	425a      	negs	r2, r3
 801e16e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 801e172:	9312      	str	r3, [sp, #72]	; 0x48
 801e174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e176:	fb04 1303 	mla	r3, r4, r3, r1
 801e17a:	9308      	str	r3, [sp, #32]
 801e17c:	b293      	uxth	r3, r2
 801e17e:	930a      	str	r3, [sp, #40]	; 0x28
 801e180:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 801e182:	2a00      	cmp	r2, #0
 801e184:	f040 8192 	bne.w	801e4ac <st_sssa8_ch_convolve+0x554>
 801e188:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801e18a:	2a00      	cmp	r2, #0
 801e18c:	f040 8194 	bne.w	801e4b8 <st_sssa8_ch_convolve+0x560>
 801e190:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801e192:	2101      	movs	r1, #1
 801e194:	3a01      	subs	r2, #1
 801e196:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 801e19a:	9240      	str	r2, [sp, #256]	; 0x100
 801e19c:	9b08      	ldr	r3, [sp, #32]
 801e19e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1a0:	4293      	cmp	r3, r2
 801e1a2:	dd3a      	ble.n	801e21a <st_sssa8_ch_convolve+0x2c2>
 801e1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e1a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e1a8:	fb05 2503 	mla	r5, r5, r3, r2
 801e1ac:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e1b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e1b2:	930e      	str	r3, [sp, #56]	; 0x38
 801e1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e1b6:	1aad      	subs	r5, r5, r2
 801e1b8:	461e      	mov	r6, r3
 801e1ba:	461a      	mov	r2, r3
 801e1bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e1be:	428d      	cmp	r5, r1
 801e1c0:	dd25      	ble.n	801e20e <st_sssa8_ch_convolve+0x2b6>
 801e1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1c4:	460c      	mov	r4, r1
 801e1c6:	9609      	str	r6, [sp, #36]	; 0x24
 801e1c8:	468c      	mov	ip, r1
 801e1ca:	4293      	cmp	r3, r2
 801e1cc:	fb02 f20b 	mul.w	r2, r2, fp
 801e1d0:	bfcc      	ite	gt
 801e1d2:	2300      	movgt	r3, #0
 801e1d4:	2301      	movle	r3, #1
 801e1d6:	920c      	str	r2, [sp, #48]	; 0x30
 801e1d8:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 801e1dc:	461e      	mov	r6, r3
 801e1de:	45e3      	cmp	fp, ip
 801e1e0:	4652      	mov	r2, sl
 801e1e2:	4649      	mov	r1, r9
 801e1e4:	4638      	mov	r0, r7
 801e1e6:	bfcc      	ite	gt
 801e1e8:	f04f 0e00 	movgt.w	lr, #0
 801e1ec:	f04f 0e01 	movle.w	lr, #1
 801e1f0:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 801e1f4:	d102      	bne.n	801e1fc <st_sssa8_ch_convolve+0x2a4>
 801e1f6:	2e00      	cmp	r6, #0
 801e1f8:	f000 8146 	beq.w	801e488 <st_sssa8_ch_convolve+0x530>
 801e1fc:	f003 fc6e 	bl	8021adc <st_dsp_arm_fill_q15>
 801e200:	3401      	adds	r4, #1
 801e202:	44c1      	add	r9, r8
 801e204:	b224      	sxth	r4, r4
 801e206:	42ac      	cmp	r4, r5
 801e208:	46a4      	mov	ip, r4
 801e20a:	dbe8      	blt.n	801e1de <st_sssa8_ch_convolve+0x286>
 801e20c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e20e:	3601      	adds	r6, #1
 801e210:	9b08      	ldr	r3, [sp, #32]
 801e212:	b236      	sxth	r6, r6
 801e214:	429e      	cmp	r6, r3
 801e216:	4632      	mov	r2, r6
 801e218:	dbd0      	blt.n	801e1bc <st_sssa8_ch_convolve+0x264>
 801e21a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e21c:	454b      	cmp	r3, r9
 801e21e:	f000 8179 	beq.w	801e514 <st_sssa8_ch_convolve+0x5bc>
 801e222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e224:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e226:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e228:	4403      	add	r3, r0
 801e22a:	3101      	adds	r1, #1
 801e22c:	461a      	mov	r2, r3
 801e22e:	b20b      	sxth	r3, r1
 801e230:	b292      	uxth	r2, r2
 801e232:	9310      	str	r3, [sp, #64]	; 0x40
 801e234:	461d      	mov	r5, r3
 801e236:	920a      	str	r2, [sp, #40]	; 0x28
 801e238:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e23a:	429a      	cmp	r2, r3
 801e23c:	dca0      	bgt.n	801e180 <st_sssa8_ch_convolve+0x228>
 801e23e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e240:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e242:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e244:	4403      	add	r3, r0
 801e246:	3101      	adds	r1, #1
 801e248:	461a      	mov	r2, r3
 801e24a:	b20b      	sxth	r3, r1
 801e24c:	b292      	uxth	r2, r2
 801e24e:	931e      	str	r3, [sp, #120]	; 0x78
 801e250:	461c      	mov	r4, r3
 801e252:	9218      	str	r2, [sp, #96]	; 0x60
 801e254:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e256:	429a      	cmp	r2, r3
 801e258:	f73f af7c 	bgt.w	801e154 <st_sssa8_ch_convolve+0x1fc>
 801e25c:	463b      	mov	r3, r7
 801e25e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e260:	464f      	mov	r7, r9
 801e262:	46c1      	mov	r9, r8
 801e264:	4698      	mov	r8, r3
 801e266:	42b9      	cmp	r1, r7
 801e268:	d010      	beq.n	801e28c <st_sssa8_ch_convolve+0x334>
 801e26a:	9865      	ldr	r0, [sp, #404]	; 0x194
 801e26c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e26e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e270:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e272:	9003      	str	r0, [sp, #12]
 801e274:	9401      	str	r4, [sp, #4]
 801e276:	9821      	ldr	r0, [sp, #132]	; 0x84
 801e278:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801e27a:	9305      	str	r3, [sp, #20]
 801e27c:	9204      	str	r2, [sp, #16]
 801e27e:	9002      	str	r0, [sp, #8]
 801e280:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e282:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e284:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e286:	9400      	str	r4, [sp, #0]
 801e288:	f003 f83a 	bl	8021300 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801e28c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e28e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e290:	4611      	mov	r1, r2
 801e292:	1a9b      	subs	r3, r3, r2
 801e294:	b298      	uxth	r0, r3
 801e296:	4282      	cmp	r2, r0
 801e298:	9026      	str	r0, [sp, #152]	; 0x98
 801e29a:	bf28      	it	cs
 801e29c:	4601      	movcs	r1, r0
 801e29e:	460b      	mov	r3, r1
 801e2a0:	b1b1      	cbz	r1, 801e2d0 <st_sssa8_ch_convolve+0x378>
 801e2a2:	4611      	mov	r1, r2
 801e2a4:	9d5c      	ldr	r5, [sp, #368]	; 0x170
 801e2a6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e2a8:	0092      	lsls	r2, r2, #2
 801e2aa:	fb04 5001 	mla	r0, r4, r1, r5
 801e2ae:	905c      	str	r0, [sp, #368]	; 0x170
 801e2b0:	9821      	ldr	r0, [sp, #132]	; 0x84
 801e2b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e2b6:	9021      	str	r0, [sp, #132]	; 0x84
 801e2b8:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 801e2ba:	4408      	add	r0, r1
 801e2bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 801e2be:	4411      	add	r1, r2
 801e2c0:	9069      	str	r0, [sp, #420]	; 0x1a4
 801e2c2:	9122      	str	r1, [sp, #136]	; 0x88
 801e2c4:	9965      	ldr	r1, [sp, #404]	; 0x194
 801e2c6:	4411      	add	r1, r2
 801e2c8:	9165      	str	r1, [sp, #404]	; 0x194
 801e2ca:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e2cc:	4411      	add	r1, r2
 801e2ce:	9124      	str	r1, [sp, #144]	; 0x90
 801e2d0:	931f      	str	r3, [sp, #124]	; 0x7c
 801e2d2:	e71d      	b.n	801e110 <st_sssa8_ch_convolve+0x1b8>
 801e2d4:	4284      	cmp	r4, r0
 801e2d6:	f845 6f04 	str.w	r6, [r5, #4]!
 801e2da:	f47f ae84 	bne.w	801dfe6 <st_sssa8_ch_convolve+0x8e>
 801e2de:	e693      	b.n	801e008 <st_sssa8_ch_convolve+0xb0>
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	e6dd      	b.n	801e0a0 <st_sssa8_ch_convolve+0x148>
 801e2e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	f000 81d1 	beq.w	801e68e <st_sssa8_ch_convolve+0x736>
 801e2ec:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e2ee:	2400      	movs	r4, #0
 801e2f0:	9925      	ldr	r1, [sp, #148]	; 0x94
 801e2f2:	4242      	negs	r2, r0
 801e2f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801e2f6:	004b      	lsls	r3, r1, #1
 801e2f8:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 801e2fc:	b292      	uxth	r2, r2
 801e2fe:	fb09 f506 	mul.w	r5, r9, r6
 801e302:	fb06 f303 	mul.w	r3, r6, r3
 801e306:	1a09      	subs	r1, r1, r0
 801e308:	922f      	str	r2, [sp, #188]	; 0xbc
 801e30a:	fa0f f68b 	sxth.w	r6, fp
 801e30e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e310:	46c3      	mov	fp, r8
 801e312:	9507      	str	r5, [sp, #28]
 801e314:	fb0a 2303 	mla	r3, sl, r3, r2
 801e318:	46ca      	mov	sl, r9
 801e31a:	9430      	str	r4, [sp, #192]	; 0xc0
 801e31c:	9316      	str	r3, [sp, #88]	; 0x58
 801e31e:	006b      	lsls	r3, r5, #1
 801e320:	9613      	str	r6, [sp, #76]	; 0x4c
 801e322:	9131      	str	r1, [sp, #196]	; 0xc4
 801e324:	931d      	str	r3, [sp, #116]	; 0x74
 801e326:	a83e      	add	r0, sp, #248	; 0xf8
 801e328:	f001 f87e 	bl	801f428 <ai_padding_opt_phase1>
 801e32c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e32e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e330:	fb04 f303 	mul.w	r3, r4, r3
 801e334:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 801e336:	fb02 1303 	mla	r3, r2, r3, r1
 801e33a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e33c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e33e:	b92b      	cbnz	r3, 801e34c <st_sssa8_ch_convolve+0x3f4>
 801e340:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e342:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e344:	991c      	ldr	r1, [sp, #112]	; 0x70
 801e346:	985c      	ldr	r0, [sp, #368]	; 0x170
 801e348:	f001 fd3c 	bl	801fdc4 <st_int8_to16_dual>
 801e34c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e34e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e350:	fb03 2304 	mla	r3, r3, r4, r2
 801e354:	9308      	str	r3, [sp, #32]
 801e356:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e35a:	9312      	str	r3, [sp, #72]	; 0x48
 801e35c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e35e:	9325      	str	r3, [sp, #148]	; 0x94
 801e360:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e362:	932a      	str	r3, [sp, #168]	; 0xa8
 801e364:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e366:	9318      	str	r3, [sp, #96]	; 0x60
 801e368:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801e36a:	932d      	str	r3, [sp, #180]	; 0xb4
 801e36c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e36e:	9327      	str	r3, [sp, #156]	; 0x9c
 801e370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e372:	9329      	str	r3, [sp, #164]	; 0xa4
 801e374:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e376:	9326      	str	r3, [sp, #152]	; 0x98
 801e378:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801e37a:	9328      	str	r3, [sp, #160]	; 0xa0
 801e37c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e37e:	1e5a      	subs	r2, r3, #1
 801e380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e384:	b292      	uxth	r2, r2
 801e386:	429a      	cmp	r2, r3
 801e388:	9225      	str	r2, [sp, #148]	; 0x94
 801e38a:	f000 8172 	beq.w	801e672 <st_sssa8_ch_convolve+0x71a>
 801e38e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e390:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e392:	9942      	ldr	r1, [sp, #264]	; 0x108
 801e394:	9340      	str	r3, [sp, #256]	; 0x100
 801e396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e398:	e9cd 213e 	strd	r2, r1, [sp, #248]	; 0xf8
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	f000 813e 	beq.w	801e61e <st_sssa8_ch_convolve+0x6c6>
 801e3a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e3a4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e3a6:	4259      	negs	r1, r3
 801e3a8:	2300      	movs	r3, #0
 801e3aa:	901e      	str	r0, [sp, #120]	; 0x78
 801e3ac:	b289      	uxth	r1, r1
 801e3ae:	9310      	str	r3, [sp, #64]	; 0x40
 801e3b0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801e3b4:	910a      	str	r1, [sp, #40]	; 0x28
 801e3b6:	4619      	mov	r1, r3
 801e3b8:	2a00      	cmp	r2, #0
 801e3ba:	d15f      	bne.n	801e47c <st_sssa8_ch_convolve+0x524>
 801e3bc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801e3be:	2a00      	cmp	r2, #0
 801e3c0:	f040 80cc 	bne.w	801e55c <st_sssa8_ch_convolve+0x604>
 801e3c4:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801e3c6:	2001      	movs	r0, #1
 801e3c8:	3a01      	subs	r2, #1
 801e3ca:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 801e3ce:	9240      	str	r2, [sp, #256]	; 0x100
 801e3d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e3d2:	9a08      	ldr	r2, [sp, #32]
 801e3d4:	4293      	cmp	r3, r2
 801e3d6:	da3b      	bge.n	801e450 <st_sssa8_ch_convolve+0x4f8>
 801e3d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e3dc:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 801e3e0:	fb01 2103 	mla	r1, r1, r3, r2
 801e3e4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e3e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e3ea:	930e      	str	r3, [sp, #56]	; 0x38
 801e3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e3ee:	4617      	mov	r7, r2
 801e3f0:	1ace      	subs	r6, r1, r3
 801e3f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3f4:	42b3      	cmp	r3, r6
 801e3f6:	da25      	bge.n	801e444 <st_sssa8_ch_convolve+0x4ec>
 801e3f8:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 801e3fc:	461c      	mov	r4, r3
 801e3fe:	469c      	mov	ip, r3
 801e400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e402:	fb0b f102 	mul.w	r1, fp, r2
 801e406:	4293      	cmp	r3, r2
 801e408:	bfd8      	it	le
 801e40a:	f045 0501 	orrle.w	r5, r5, #1
 801e40e:	9709      	str	r7, [sp, #36]	; 0x24
 801e410:	910c      	str	r1, [sp, #48]	; 0x30
 801e412:	462f      	mov	r7, r5
 801e414:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e416:	45e3      	cmp	fp, ip
 801e418:	4652      	mov	r2, sl
 801e41a:	4649      	mov	r1, r9
 801e41c:	4628      	mov	r0, r5
 801e41e:	bfcc      	ite	gt
 801e420:	f04f 0e00 	movgt.w	lr, #0
 801e424:	f04f 0e01 	movle.w	lr, #1
 801e428:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 801e42c:	d101      	bne.n	801e432 <st_sssa8_ch_convolve+0x4da>
 801e42e:	2f00      	cmp	r7, #0
 801e430:	d033      	beq.n	801e49a <st_sssa8_ch_convolve+0x542>
 801e432:	f003 fb53 	bl	8021adc <st_dsp_arm_fill_q15>
 801e436:	3401      	adds	r4, #1
 801e438:	44c1      	add	r9, r8
 801e43a:	b224      	sxth	r4, r4
 801e43c:	42b4      	cmp	r4, r6
 801e43e:	46a4      	mov	ip, r4
 801e440:	dbe9      	blt.n	801e416 <st_sssa8_ch_convolve+0x4be>
 801e442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e444:	3701      	adds	r7, #1
 801e446:	9b08      	ldr	r3, [sp, #32]
 801e448:	b23f      	sxth	r7, r7
 801e44a:	429f      	cmp	r7, r3
 801e44c:	463a      	mov	r2, r7
 801e44e:	dbd0      	blt.n	801e3f2 <st_sssa8_ch_convolve+0x49a>
 801e450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e452:	454b      	cmp	r3, r9
 801e454:	f000 80ac 	beq.w	801e5b0 <st_sssa8_ch_convolve+0x658>
 801e458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e45a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e45c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e45e:	4403      	add	r3, r0
 801e460:	3101      	adds	r1, #1
 801e462:	461a      	mov	r2, r3
 801e464:	b20b      	sxth	r3, r1
 801e466:	b292      	uxth	r2, r2
 801e468:	9310      	str	r3, [sp, #64]	; 0x40
 801e46a:	4619      	mov	r1, r3
 801e46c:	920a      	str	r2, [sp, #40]	; 0x28
 801e46e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e470:	429a      	cmp	r2, r3
 801e472:	f340 80c0 	ble.w	801e5f6 <st_sssa8_ch_convolve+0x69e>
 801e476:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 801e478:	2a00      	cmp	r2, #0
 801e47a:	d09f      	beq.n	801e3bc <st_sssa8_ch_convolve+0x464>
 801e47c:	3a01      	subs	r2, #1
 801e47e:	2001      	movs	r0, #1
 801e480:	923e      	str	r2, [sp, #248]	; 0xf8
 801e482:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 801e486:	e7a3      	b.n	801e3d0 <st_sssa8_ch_convolve+0x478>
 801e488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e48a:	eb03 000c 	add.w	r0, r3, ip
 801e48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e490:	fb0a 3000 	mla	r0, sl, r0, r3
 801e494:	f001 fbf4 	bl	801fc80 <st_int8_to16_no_shift>
 801e498:	e6b2      	b.n	801e200 <st_sssa8_ch_convolve+0x2a8>
 801e49a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e49c:	eb03 000c 	add.w	r0, r3, ip
 801e4a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4a2:	fb0a 3000 	mla	r0, sl, r0, r3
 801e4a6:	f001 fbeb 	bl	801fc80 <st_int8_to16_no_shift>
 801e4aa:	e7c4      	b.n	801e436 <st_sssa8_ch_convolve+0x4de>
 801e4ac:	3a01      	subs	r2, #1
 801e4ae:	2101      	movs	r1, #1
 801e4b0:	923e      	str	r2, [sp, #248]	; 0xf8
 801e4b2:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 801e4b6:	e671      	b.n	801e19c <st_sssa8_ch_convolve+0x244>
 801e4b8:	f8bd 111c 	ldrh.w	r1, [sp, #284]	; 0x11c
 801e4bc:	3a01      	subs	r2, #1
 801e4be:	2901      	cmp	r1, #1
 801e4c0:	923f      	str	r2, [sp, #252]	; 0xfc
 801e4c2:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 801e4c6:	f43f ae69 	beq.w	801e19c <st_sssa8_ch_convolve+0x244>
 801e4ca:	9e08      	ldr	r6, [sp, #32]
 801e4cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4ce:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 801e4d2:	4296      	cmp	r6, r2
 801e4d4:	f77f aea1 	ble.w	801e21a <st_sssa8_ch_convolve+0x2c2>
 801e4d8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801e4dc:	4615      	mov	r5, r2
 801e4de:	970c      	str	r7, [sp, #48]	; 0x30
 801e4e0:	4610      	mov	r0, r2
 801e4e2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e4e6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e4e8:	3501      	adds	r5, #1
 801e4ea:	fb00 400b 	mla	r0, r0, fp, r4
 801e4ee:	9b07      	ldr	r3, [sp, #28]
 801e4f0:	4649      	mov	r1, r9
 801e4f2:	b22d      	sxth	r5, r5
 801e4f4:	fb0a 7000 	mla	r0, sl, r0, r7
 801e4f8:	4642      	mov	r2, r8
 801e4fa:	4499      	add	r9, r3
 801e4fc:	f001 fbc0 	bl	801fc80 <st_int8_to16_no_shift>
 801e500:	42b5      	cmp	r5, r6
 801e502:	4628      	mov	r0, r5
 801e504:	dbf0      	blt.n	801e4e8 <st_sssa8_ch_convolve+0x590>
 801e506:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e508:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801e50c:	454b      	cmp	r3, r9
 801e50e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e510:	f47f ae87 	bne.w	801e222 <st_sssa8_ch_convolve+0x2ca>
 801e514:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e516:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e518:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e51a:	9965      	ldr	r1, [sp, #404]	; 0x194
 801e51c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801e51e:	9401      	str	r4, [sp, #4]
 801e520:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801e522:	9305      	str	r3, [sp, #20]
 801e524:	9204      	str	r2, [sp, #16]
 801e526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e528:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e52a:	9103      	str	r1, [sp, #12]
 801e52c:	9002      	str	r0, [sp, #8]
 801e52e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e530:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e532:	9400      	str	r4, [sp, #0]
 801e534:	f002 fbca 	bl	8020ccc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 801e538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e53a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e53c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e53e:	440b      	add	r3, r1
 801e540:	901d      	str	r0, [sp, #116]	; 0x74
 801e542:	3201      	adds	r2, #1
 801e544:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801e548:	b29b      	uxth	r3, r3
 801e54a:	b212      	sxth	r2, r2
 801e54c:	930a      	str	r3, [sp, #40]	; 0x28
 801e54e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e550:	4615      	mov	r5, r2
 801e552:	9210      	str	r2, [sp, #64]	; 0x40
 801e554:	4293      	cmp	r3, r2
 801e556:	f73f ae13 	bgt.w	801e180 <st_sssa8_ch_convolve+0x228>
 801e55a:	e670      	b.n	801e23e <st_sssa8_ch_convolve+0x2e6>
 801e55c:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 801e560:	3a01      	subs	r2, #1
 801e562:	2801      	cmp	r0, #1
 801e564:	923f      	str	r2, [sp, #252]	; 0xfc
 801e566:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 801e56a:	f43f af31 	beq.w	801e3d0 <st_sssa8_ch_convolve+0x478>
 801e56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e570:	9f08      	ldr	r7, [sp, #32]
 801e572:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 801e576:	42bb      	cmp	r3, r7
 801e578:	f6bf af6a 	bge.w	801e450 <st_sssa8_ch_convolve+0x4f8>
 801e57c:	464e      	mov	r6, r9
 801e57e:	461d      	mov	r5, r3
 801e580:	4618      	mov	r0, r3
 801e582:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 801e586:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801e58a:	3501      	adds	r5, #1
 801e58c:	fb00 400b 	mla	r0, r0, fp, r4
 801e590:	4631      	mov	r1, r6
 801e592:	9a07      	ldr	r2, [sp, #28]
 801e594:	b22d      	sxth	r5, r5
 801e596:	fb0a 8000 	mla	r0, sl, r0, r8
 801e59a:	f001 fb71 	bl	801fc80 <st_int8_to16_no_shift>
 801e59e:	444e      	add	r6, r9
 801e5a0:	42bd      	cmp	r5, r7
 801e5a2:	4628      	mov	r0, r5
 801e5a4:	dbf1      	blt.n	801e58a <st_sssa8_ch_convolve+0x632>
 801e5a6:	46b1      	mov	r9, r6
 801e5a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e5aa:	454b      	cmp	r3, r9
 801e5ac:	f47f af54 	bne.w	801e458 <st_sssa8_ch_convolve+0x500>
 801e5b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e5b2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e5b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e5b6:	9826      	ldr	r0, [sp, #152]	; 0x98
 801e5b8:	9204      	str	r2, [sp, #16]
 801e5ba:	9401      	str	r4, [sp, #4]
 801e5bc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e5be:	9305      	str	r3, [sp, #20]
 801e5c0:	9002      	str	r0, [sp, #8]
 801e5c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e5c4:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e5c6:	9400      	str	r4, [sp, #0]
 801e5c8:	e9dd 1228 	ldrd	r1, r2, [sp, #160]	; 0xa0
 801e5cc:	9103      	str	r1, [sp, #12]
 801e5ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e5d0:	f002 fb7c 	bl	8020ccc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 801e5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e5d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e5da:	440b      	add	r3, r1
 801e5dc:	901e      	str	r0, [sp, #120]	; 0x78
 801e5de:	3201      	adds	r2, #1
 801e5e0:	b29b      	uxth	r3, r3
 801e5e2:	b212      	sxth	r2, r2
 801e5e4:	930a      	str	r3, [sp, #40]	; 0x28
 801e5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e5e8:	4611      	mov	r1, r2
 801e5ea:	9210      	str	r2, [sp, #64]	; 0x40
 801e5ec:	4293      	cmp	r3, r2
 801e5ee:	dd16      	ble.n	801e61e <st_sssa8_ch_convolve+0x6c6>
 801e5f0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801e5f4:	e73f      	b.n	801e476 <st_sssa8_ch_convolve+0x51e>
 801e5f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e5f8:	4589      	cmp	r9, r1
 801e5fa:	d010      	beq.n	801e61e <st_sssa8_ch_convolve+0x6c6>
 801e5fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e5fe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e600:	9204      	str	r2, [sp, #16]
 801e602:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e604:	9401      	str	r4, [sp, #4]
 801e606:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e608:	9305      	str	r3, [sp, #20]
 801e60a:	9400      	str	r4, [sp, #0]
 801e60c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e60e:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 801e612:	9003      	str	r0, [sp, #12]
 801e614:	9826      	ldr	r0, [sp, #152]	; 0x98
 801e616:	9002      	str	r0, [sp, #8]
 801e618:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e61a:	f002 fe71 	bl	8021300 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801e61e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e620:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e622:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e624:	1a9b      	subs	r3, r3, r2
 801e626:	4608      	mov	r0, r1
 801e628:	b29b      	uxth	r3, r3
 801e62a:	4410      	add	r0, r2
 801e62c:	429a      	cmp	r2, r3
 801e62e:	932a      	str	r3, [sp, #168]	; 0xa8
 801e630:	9023      	str	r0, [sp, #140]	; 0x8c
 801e632:	bf28      	it	cs
 801e634:	461a      	movcs	r2, r3
 801e636:	b294      	uxth	r4, r2
 801e638:	b90c      	cbnz	r4, 801e63e <st_sssa8_ch_convolve+0x6e6>
 801e63a:	9418      	str	r4, [sp, #96]	; 0x60
 801e63c:	e69e      	b.n	801e37c <st_sssa8_ch_convolve+0x424>
 801e63e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e640:	9e26      	ldr	r6, [sp, #152]	; 0x98
 801e642:	4619      	mov	r1, r3
 801e644:	009d      	lsls	r5, r3, #2
 801e646:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801e648:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 801e64c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801e64e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e650:	442e      	add	r6, r5
 801e652:	9126      	str	r1, [sp, #152]	; 0x98
 801e654:	fb02 0003 	mla	r0, r2, r3, r0
 801e658:	991c      	ldr	r1, [sp, #112]	; 0x70
 801e65a:	9629      	str	r6, [sp, #164]	; 0xa4
 801e65c:	4623      	mov	r3, r4
 801e65e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801e660:	902d      	str	r0, [sp, #180]	; 0xb4
 801e662:	442e      	add	r6, r5
 801e664:	9628      	str	r6, [sp, #160]	; 0xa0
 801e666:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801e668:	442e      	add	r6, r5
 801e66a:	9627      	str	r6, [sp, #156]	; 0x9c
 801e66c:	f001 fbaa 	bl	801fdc4 <st_int8_to16_dual>
 801e670:	e7e3      	b.n	801e63a <st_sssa8_ch_convolve+0x6e2>
 801e672:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e674:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801e676:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e678:	440b      	add	r3, r1
 801e67a:	3201      	adds	r2, #1
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	b212      	sxth	r2, r2
 801e680:	932f      	str	r3, [sp, #188]	; 0xbc
 801e682:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e684:	4614      	mov	r4, r2
 801e686:	9230      	str	r2, [sp, #192]	; 0xc0
 801e688:	4293      	cmp	r3, r2
 801e68a:	f73f ae4c 	bgt.w	801e326 <st_sssa8_ch_convolve+0x3ce>
 801e68e:	2000      	movs	r0, #0
 801e690:	b053      	add	sp, #332	; 0x14c
 801e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e696:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d0f8      	beq.n	801e68e <st_sssa8_ch_convolve+0x736>
 801e69c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e69e:	2400      	movs	r4, #0
 801e6a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e6a2:	005b      	lsls	r3, r3, #1
 801e6a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e6a6:	fb00 f109 	mul.w	r1, r0, r9
 801e6aa:	fb00 f303 	mul.w	r3, r0, r3
 801e6ae:	9807      	ldr	r0, [sp, #28]
 801e6b0:	4252      	negs	r2, r2
 801e6b2:	9116      	str	r1, [sp, #88]	; 0x58
 801e6b4:	1a28      	subs	r0, r5, r0
 801e6b6:	941c      	str	r4, [sp, #112]	; 0x70
 801e6b8:	901d      	str	r0, [sp, #116]	; 0x74
 801e6ba:	fa0f f08b 	sxth.w	r0, fp
 801e6be:	901e      	str	r0, [sp, #120]	; 0x78
 801e6c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e6c2:	fb0a 0303 	mla	r3, sl, r3, r0
 801e6c6:	4683      	mov	fp, r0
 801e6c8:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6ca:	004b      	lsls	r3, r1, #1
 801e6cc:	9307      	str	r3, [sp, #28]
 801e6ce:	b293      	uxth	r3, r2
 801e6d0:	9318      	str	r3, [sp, #96]	; 0x60
 801e6d2:	a83e      	add	r0, sp, #248	; 0xf8
 801e6d4:	f000 fea8 	bl	801f428 <ai_padding_opt_phase1>
 801e6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d070      	beq.n	801e7c0 <st_sssa8_ch_convolve+0x868>
 801e6de:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e6e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e6e2:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 801e6e6:	1a99      	subs	r1, r3, r2
 801e6e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e6ea:	9012      	str	r0, [sp, #72]	; 0x48
 801e6ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e6ee:	425a      	negs	r2, r3
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	fb00 1104 	mla	r1, r0, r4, r1
 801e6f6:	b292      	uxth	r2, r2
 801e6f8:	9310      	str	r3, [sp, #64]	; 0x40
 801e6fa:	9108      	str	r1, [sp, #32]
 801e6fc:	4619      	mov	r1, r3
 801e6fe:	920a      	str	r2, [sp, #40]	; 0x28
 801e700:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 801e702:	2a00      	cmp	r2, #0
 801e704:	f040 8102 	bne.w	801e90c <st_sssa8_ch_convolve+0x9b4>
 801e708:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801e70a:	2a00      	cmp	r2, #0
 801e70c:	f040 8104 	bne.w	801e918 <st_sssa8_ch_convolve+0x9c0>
 801e710:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801e712:	2001      	movs	r0, #1
 801e714:	3a01      	subs	r2, #1
 801e716:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 801e71a:	9240      	str	r2, [sp, #256]	; 0x100
 801e71c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e71e:	9a08      	ldr	r2, [sp, #32]
 801e720:	4293      	cmp	r3, r2
 801e722:	da3b      	bge.n	801e79c <st_sssa8_ch_convolve+0x844>
 801e724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e726:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e728:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801e72a:	fb01 2103 	mla	r1, r1, r3, r2
 801e72e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e732:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e734:	930e      	str	r3, [sp, #56]	; 0x38
 801e736:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e738:	1a8d      	subs	r5, r1, r2
 801e73a:	461e      	mov	r6, r3
 801e73c:	461a      	mov	r2, r3
 801e73e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e740:	42a9      	cmp	r1, r5
 801e742:	da25      	bge.n	801e790 <st_sssa8_ch_convolve+0x838>
 801e744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e746:	460c      	mov	r4, r1
 801e748:	9609      	str	r6, [sp, #36]	; 0x24
 801e74a:	468c      	mov	ip, r1
 801e74c:	4293      	cmp	r3, r2
 801e74e:	fb02 f208 	mul.w	r2, r2, r8
 801e752:	bfcc      	ite	gt
 801e754:	2300      	movgt	r3, #0
 801e756:	2301      	movle	r3, #1
 801e758:	920c      	str	r2, [sp, #48]	; 0x30
 801e75a:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 801e75e:	461e      	mov	r6, r3
 801e760:	45e0      	cmp	r8, ip
 801e762:	464a      	mov	r2, r9
 801e764:	4659      	mov	r1, fp
 801e766:	4638      	mov	r0, r7
 801e768:	bfcc      	ite	gt
 801e76a:	f04f 0e00 	movgt.w	lr, #0
 801e76e:	f04f 0e01 	movle.w	lr, #1
 801e772:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 801e776:	d102      	bne.n	801e77e <st_sssa8_ch_convolve+0x826>
 801e778:	2e00      	cmp	r6, #0
 801e77a:	f000 80be 	beq.w	801e8fa <st_sssa8_ch_convolve+0x9a2>
 801e77e:	f003 f9ad 	bl	8021adc <st_dsp_arm_fill_q15>
 801e782:	3401      	adds	r4, #1
 801e784:	44d3      	add	fp, sl
 801e786:	b224      	sxth	r4, r4
 801e788:	42ac      	cmp	r4, r5
 801e78a:	46a4      	mov	ip, r4
 801e78c:	dbe8      	blt.n	801e760 <st_sssa8_ch_convolve+0x808>
 801e78e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e790:	3601      	adds	r6, #1
 801e792:	9b08      	ldr	r3, [sp, #32]
 801e794:	b236      	sxth	r6, r6
 801e796:	429e      	cmp	r6, r3
 801e798:	4632      	mov	r2, r6
 801e79a:	dbd0      	blt.n	801e73e <st_sssa8_ch_convolve+0x7e6>
 801e79c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e79e:	455b      	cmp	r3, fp
 801e7a0:	f000 80ea 	beq.w	801e978 <st_sssa8_ch_convolve+0xa20>
 801e7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e7a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e7aa:	4403      	add	r3, r0
 801e7ac:	3101      	adds	r1, #1
 801e7ae:	461a      	mov	r2, r3
 801e7b0:	b20b      	sxth	r3, r1
 801e7b2:	b292      	uxth	r2, r2
 801e7b4:	9310      	str	r3, [sp, #64]	; 0x40
 801e7b6:	4619      	mov	r1, r3
 801e7b8:	920a      	str	r2, [sp, #40]	; 0x28
 801e7ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7bc:	429a      	cmp	r2, r3
 801e7be:	dc9f      	bgt.n	801e700 <st_sssa8_ch_convolve+0x7a8>
 801e7c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e7c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e7c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 801e7c6:	4403      	add	r3, r0
 801e7c8:	3101      	adds	r1, #1
 801e7ca:	461a      	mov	r2, r3
 801e7cc:	b20b      	sxth	r3, r1
 801e7ce:	b292      	uxth	r2, r2
 801e7d0:	931c      	str	r3, [sp, #112]	; 0x70
 801e7d2:	461c      	mov	r4, r3
 801e7d4:	9218      	str	r2, [sp, #96]	; 0x60
 801e7d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e7d8:	429a      	cmp	r2, r3
 801e7da:	f73f af7a 	bgt.w	801e6d2 <st_sssa8_ch_convolve+0x77a>
 801e7de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e7e0:	455a      	cmp	r2, fp
 801e7e2:	f43f af54 	beq.w	801e68e <st_sssa8_ch_convolve+0x736>
 801e7e6:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e7e8:	2900      	cmp	r1, #0
 801e7ea:	f43f af50 	beq.w	801e68e <st_sssa8_ch_convolve+0x736>
 801e7ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e7f0:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e7f2:	1f1d      	subs	r5, r3, #4
 801e7f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e7f6:	ea4f 0a90 	mov.w	sl, r0, lsr #2
 801e7fa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801e7fc:	1e9e      	subs	r6, r3, #2
 801e7fe:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801e800:	f1a4 0b04 	sub.w	fp, r4, #4
 801e804:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
 801e806:	f1a3 0904 	sub.w	r9, r3, #4
 801e80a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e80e:	4421      	add	r1, r4
 801e810:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 801e814:	b29b      	uxth	r3, r3
 801e816:	f000 0803 	and.w	r8, r0, #3
 801e81a:	9108      	str	r1, [sp, #32]
 801e81c:	3301      	adds	r3, #1
 801e81e:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 801ea18 <st_sssa8_ch_convolve+0xac0>
 801e822:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 801e824:	0099      	lsls	r1, r3, #2
 801e826:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e82a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e82c:	9109      	str	r1, [sp, #36]	; 0x24
 801e82e:	9307      	str	r3, [sp, #28]
 801e830:	f855 3f04 	ldr.w	r3, [r5, #4]!
 801e834:	2a00      	cmp	r2, #0
 801e836:	d05e      	beq.n	801e8f6 <st_sssa8_ch_convolve+0x99e>
 801e838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e83a:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 801e83e:	eb07 0a02 	add.w	sl, r7, r2
 801e842:	f857 2b04 	ldr.w	r2, [r7], #4
 801e846:	fa2f f482 	sxtb16	r4, r2
 801e84a:	b2a0      	uxth	r0, r4
 801e84c:	f8de 1000 	ldr.w	r1, [lr]
 801e850:	ea4f 2232 	mov.w	r2, r2, ror #8
 801e854:	fa2f f282 	sxtb16	r2, r2
 801e858:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e85c:	fb20 3101 	smlad	r1, r0, r1, r3
 801e860:	ea02 030c 	and.w	r3, r2, ip
 801e864:	f10e 0e08 	add.w	lr, lr, #8
 801e868:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 801e86c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 801e870:	fb23 1302 	smlad	r3, r3, r2, r1
 801e874:	4557      	cmp	r7, sl
 801e876:	d1e4      	bne.n	801e842 <st_sssa8_ch_convolve+0x8ea>
 801e878:	9a07      	ldr	r2, [sp, #28]
 801e87a:	f1b8 0f00 	cmp.w	r8, #0
 801e87e:	d017      	beq.n	801e8b0 <st_sssa8_ch_convolve+0x958>
 801e880:	f997 1000 	ldrsb.w	r1, [r7]
 801e884:	f1b8 0f01 	cmp.w	r8, #1
 801e888:	8810      	ldrh	r0, [r2, #0]
 801e88a:	fb10 3301 	smlabb	r3, r0, r1, r3
 801e88e:	f000 80ab 	beq.w	801e9e8 <st_sssa8_ch_convolve+0xa90>
 801e892:	f997 1001 	ldrsb.w	r1, [r7, #1]
 801e896:	f1b8 0f02 	cmp.w	r8, #2
 801e89a:	8850      	ldrh	r0, [r2, #2]
 801e89c:	fb10 3301 	smlabb	r3, r0, r1, r3
 801e8a0:	f000 80b7 	beq.w	801ea12 <st_sssa8_ch_convolve+0xaba>
 801e8a4:	8891      	ldrh	r1, [r2, #4]
 801e8a6:	3703      	adds	r7, #3
 801e8a8:	f917 2c01 	ldrsb.w	r2, [r7, #-1]
 801e8ac:	fb11 3302 	smlabb	r3, r1, r2, r3
 801e8b0:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801e8b2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
 801e8b6:	3201      	adds	r2, #1
 801e8b8:	f859 4f04 	ldr.w	r4, [r9, #4]!
 801e8bc:	2915      	cmp	r1, #21
 801e8be:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801e8c2:	9269      	str	r2, [sp, #420]	; 0x1a4
 801e8c4:	dd7a      	ble.n	801e9bc <st_sssa8_ch_convolve+0xa64>
 801e8c6:	1e8a      	subs	r2, r1, #2
 801e8c8:	f04f 0e01 	mov.w	lr, #1
 801e8cc:	3901      	subs	r1, #1
 801e8ce:	fa0e f202 	lsl.w	r2, lr, r2
 801e8d2:	fb53 2304 	smmla	r3, r3, r4, r2
 801e8d6:	410b      	asrs	r3, r1
 801e8d8:	4403      	add	r3, r0
 801e8da:	f303 0307 	ssat	r3, #8, r3
 801e8de:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801e8e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e8e4:	9b08      	ldr	r3, [sp, #32]
 801e8e6:	4293      	cmp	r3, r2
 801e8e8:	f43f aed1 	beq.w	801e68e <st_sssa8_ch_convolve+0x736>
 801e8ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e8ee:	f855 3f04 	ldr.w	r3, [r5, #4]!
 801e8f2:	2a00      	cmp	r2, #0
 801e8f4:	d1a0      	bne.n	801e838 <st_sssa8_ch_convolve+0x8e0>
 801e8f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e8f8:	e7bf      	b.n	801e87a <st_sssa8_ch_convolve+0x922>
 801e8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8fc:	eb03 000c 	add.w	r0, r3, ip
 801e900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e902:	fb09 3000 	mla	r0, r9, r0, r3
 801e906:	f001 f9bb 	bl	801fc80 <st_int8_to16_no_shift>
 801e90a:	e73a      	b.n	801e782 <st_sssa8_ch_convolve+0x82a>
 801e90c:	3a01      	subs	r2, #1
 801e90e:	2001      	movs	r0, #1
 801e910:	923e      	str	r2, [sp, #248]	; 0xf8
 801e912:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 801e916:	e701      	b.n	801e71c <st_sssa8_ch_convolve+0x7c4>
 801e918:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 801e91c:	3a01      	subs	r2, #1
 801e91e:	2801      	cmp	r0, #1
 801e920:	923f      	str	r2, [sp, #252]	; 0xfc
 801e922:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 801e926:	f43f aef9 	beq.w	801e71c <st_sssa8_ch_convolve+0x7c4>
 801e92a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e92c:	9f08      	ldr	r7, [sp, #32]
 801e92e:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 801e932:	42bb      	cmp	r3, r7
 801e934:	f6bf af32 	bge.w	801e79c <st_sssa8_ch_convolve+0x844>
 801e938:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801e93c:	461d      	mov	r5, r3
 801e93e:	46ca      	mov	sl, r9
 801e940:	4618      	mov	r0, r3
 801e942:	46c1      	mov	r9, r8
 801e944:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801e946:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801e94a:	3501      	adds	r5, #1
 801e94c:	fb00 4009 	mla	r0, r0, r9, r4
 801e950:	9b07      	ldr	r3, [sp, #28]
 801e952:	4659      	mov	r1, fp
 801e954:	b22d      	sxth	r5, r5
 801e956:	fb0a 8000 	mla	r0, sl, r0, r8
 801e95a:	4632      	mov	r2, r6
 801e95c:	449b      	add	fp, r3
 801e95e:	f001 f98f 	bl	801fc80 <st_int8_to16_no_shift>
 801e962:	42bd      	cmp	r5, r7
 801e964:	4628      	mov	r0, r5
 801e966:	dbf0      	blt.n	801e94a <st_sssa8_ch_convolve+0x9f2>
 801e968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e96a:	46c8      	mov	r8, r9
 801e96c:	46d1      	mov	r9, sl
 801e96e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801e972:	455b      	cmp	r3, fp
 801e974:	f47f af16 	bne.w	801e7a4 <st_sssa8_ch_convolve+0x84c>
 801e978:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 801e97a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e97c:	9965      	ldr	r1, [sp, #404]	; 0x194
 801e97e:	9821      	ldr	r0, [sp, #132]	; 0x84
 801e980:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e982:	9304      	str	r3, [sp, #16]
 801e984:	9203      	str	r2, [sp, #12]
 801e986:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e988:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e98a:	9102      	str	r1, [sp, #8]
 801e98c:	9001      	str	r0, [sp, #4]
 801e98e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e990:	985c      	ldr	r0, [sp, #368]	; 0x170
 801e992:	9400      	str	r4, [sp, #0]
 801e994:	f000 fd90 	bl	801f4b8 <st_sssa8_ch_nn_mat_mult_kernel>
 801e998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e99a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e99c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e99e:	440b      	add	r3, r1
 801e9a0:	9069      	str	r0, [sp, #420]	; 0x1a4
 801e9a2:	3201      	adds	r2, #1
 801e9a4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 801e9a8:	b29b      	uxth	r3, r3
 801e9aa:	b212      	sxth	r2, r2
 801e9ac:	930a      	str	r3, [sp, #40]	; 0x28
 801e9ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e9b0:	4611      	mov	r1, r2
 801e9b2:	9210      	str	r2, [sp, #64]	; 0x40
 801e9b4:	4293      	cmp	r3, r2
 801e9b6:	f73f aea3 	bgt.w	801e700 <st_sssa8_ch_convolve+0x7a8>
 801e9ba:	e701      	b.n	801e7c0 <st_sssa8_ch_convolve+0x868>
 801e9bc:	2900      	cmp	r1, #0
 801e9be:	dd15      	ble.n	801e9ec <st_sssa8_ch_convolve+0xa94>
 801e9c0:	005b      	lsls	r3, r3, #1
 801e9c2:	fb53 0304 	smmla	r3, r3, r4, r0
 801e9c6:	fa43 f101 	asr.w	r1, r3, r1
 801e9ca:	f301 0307 	ssat	r3, #8, r1
 801e9ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e9d2:	e787      	b.n	801e8e4 <st_sssa8_ch_convolve+0x98c>
 801e9d4:	4611      	mov	r1, r2
 801e9d6:	985c      	ldr	r0, [sp, #368]	; 0x170
 801e9d8:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 801e9dc:	f001 f9f2 	bl	801fdc4 <st_int8_to16_dual>
 801e9e0:	2301      	movs	r3, #1
 801e9e2:	932e      	str	r3, [sp, #184]	; 0xb8
 801e9e4:	f7ff bb46 	b.w	801e074 <st_sssa8_ch_convolve+0x11c>
 801e9e8:	3701      	adds	r7, #1
 801e9ea:	e761      	b.n	801e8b0 <st_sssa8_ch_convolve+0x958>
 801e9ec:	f1c1 0101 	rsb	r1, r1, #1
 801e9f0:	408b      	lsls	r3, r1
 801e9f2:	f303 031f 	ssat	r3, #32, r3
 801e9f6:	fb53 f314 	smmulr	r3, r3, r4
 801e9fa:	4403      	add	r3, r0
 801e9fc:	f303 0307 	ssat	r3, #8, r3
 801ea00:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ea04:	e76e      	b.n	801e8e4 <st_sssa8_ch_convolve+0x98c>
 801ea06:	4615      	mov	r5, r2
 801ea08:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 801ea0c:	463e      	mov	r6, r7
 801ea0e:	f7ff baff 	b.w	801e010 <st_sssa8_ch_convolve+0xb8>
 801ea12:	3702      	adds	r7, #2
 801ea14:	e74c      	b.n	801e8b0 <st_sssa8_ch_convolve+0x958>
 801ea16:	bf00      	nop
 801ea18:	ffff0000 	.word	0xffff0000

0801ea1c <st_sssa8_ch_convolve_rgb>:
 801ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea20:	b0cb      	sub	sp, #300	; 0x12c
 801ea22:	468b      	mov	fp, r1
 801ea24:	2a03      	cmp	r2, #3
 801ea26:	931f      	str	r3, [sp, #124]	; 0x7c
 801ea28:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 801ea2c:	f8bd 1150 	ldrh.w	r1, [sp, #336]	; 0x150
 801ea30:	9310      	str	r3, [sp, #64]	; 0x40
 801ea32:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 801ea36:	f8bd 4154 	ldrh.w	r4, [sp, #340]	; 0x154
 801ea3a:	930a      	str	r3, [sp, #40]	; 0x28
 801ea3c:	f99d 316c 	ldrsb.w	r3, [sp, #364]	; 0x16c
 801ea40:	9115      	str	r1, [sp, #84]	; 0x54
 801ea42:	931d      	str	r3, [sp, #116]	; 0x74
 801ea44:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 801ea48:	940f      	str	r4, [sp, #60]	; 0x3c
 801ea4a:	930e      	str	r3, [sp, #56]	; 0x38
 801ea4c:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 801ea4e:	f99d e170 	ldrsb.w	lr, [sp, #368]	; 0x170
 801ea52:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801ea54:	f040 83ed 	bne.w	801f232 <st_sssa8_ch_convolve_rgb+0x816>
 801ea58:	4606      	mov	r6, r0
 801ea5a:	4608      	mov	r0, r1
 801ea5c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801ea60:	ebc0 7240 	rsb	r2, r0, r0, lsl #29
 801ea64:	eb03 0741 	add.w	r7, r3, r1, lsl #1
 801ea68:	fb14 f304 	smulbb	r3, r4, r4
 801ea6c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801ea70:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 801ea74:	9711      	str	r7, [sp, #68]	; 0x44
 801ea76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea7a:	9221      	str	r2, [sp, #132]	; 0x84
 801ea7c:	4442      	add	r2, r8
 801ea7e:	b29b      	uxth	r3, r3
 801ea80:	9222      	str	r2, [sp, #136]	; 0x88
 801ea82:	9316      	str	r3, [sp, #88]	; 0x58
 801ea84:	2800      	cmp	r0, #0
 801ea86:	f000 83d1 	beq.w	801f22c <st_sssa8_ch_convolve_rgb+0x810>
 801ea8a:	0047      	lsls	r7, r0, #1
 801ea8c:	4629      	mov	r1, r5
 801ea8e:	1f14      	subs	r4, r2, #4
 801ea90:	f04f 0c01 	mov.w	ip, #1
 801ea94:	443d      	add	r5, r7
 801ea96:	f931 3b02 	ldrsh.w	r3, [r1], #2
 801ea9a:	1e5a      	subs	r2, r3, #1
 801ea9c:	fa0c f003 	lsl.w	r0, ip, r3
 801eaa0:	fa0e f303 	lsl.w	r3, lr, r3
 801eaa4:	b292      	uxth	r2, r2
 801eaa6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801eaaa:	2a14      	cmp	r2, #20
 801eaac:	f200 81e4 	bhi.w	801ee78 <st_sssa8_ch_convolve_rgb+0x45c>
 801eab0:	428d      	cmp	r5, r1
 801eab2:	f844 3f04 	str.w	r3, [r4, #4]!
 801eab6:	d1ee      	bne.n	801ea96 <st_sssa8_ch_convolve_rgb+0x7a>
 801eab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eaba:	eb03 0408 	add.w	r4, r3, r8
 801eabe:	1bed      	subs	r5, r5, r7
 801eac0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801eac2:	a932      	add	r1, sp, #200	; 0xc8
 801eac4:	ab2e      	add	r3, sp, #184	; 0xb8
 801eac6:	9523      	str	r5, [sp, #140]	; 0x8c
 801eac8:	aa2a      	add	r2, sp, #168	; 0xa8
 801eaca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801eacc:	a836      	add	r0, sp, #216	; 0xd8
 801eace:	9744      	str	r7, [sp, #272]	; 0x110
 801ead0:	9745      	str	r7, [sp, #276]	; 0x114
 801ead2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ead4:	9100      	str	r1, [sp, #0]
 801ead6:	a940      	add	r1, sp, #256	; 0x100
 801ead8:	9742      	str	r7, [sp, #264]	; 0x108
 801eada:	9743      	str	r7, [sp, #268]	; 0x10c
 801eadc:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
 801eae0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801eae2:	e9cd bb2b 	strd	fp, fp, [sp, #172]	; 0xac
 801eae6:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
 801eaea:	f000 fc43 	bl	801f374 <ai_padding_opt_init>
 801eaee:	9911      	ldr	r1, [sp, #68]	; 0x44
 801eaf0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801eaf4:	e9dd 2015 	ldrd	r2, r0, [sp, #84]	; 0x54
 801eaf8:	005b      	lsls	r3, r3, #1
 801eafa:	fb02 f200 	mul.w	r2, r2, r0
 801eafe:	fb05 f303 	mul.w	r3, r5, r3
 801eb02:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 801eb06:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801eb0a:	930d      	str	r3, [sp, #52]	; 0x34
 801eb0c:	f340 8384 	ble.w	801f218 <st_sssa8_ch_convolve_rgb+0x7fc>
 801eb10:	2300      	movs	r3, #0
 801eb12:	4602      	mov	r2, r0
 801eb14:	9328      	str	r3, [sp, #160]	; 0xa0
 801eb16:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801eb1a:	fb93 f3f2 	sdiv	r3, r3, r2
 801eb1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801eb20:	f023 0301 	bic.w	r3, r3, #1
 801eb24:	4293      	cmp	r3, r2
 801eb26:	bf28      	it	cs
 801eb28:	4613      	movcs	r3, r2
 801eb2a:	2b01      	cmp	r3, #1
 801eb2c:	9324      	str	r3, [sp, #144]	; 0x90
 801eb2e:	f240 81ae 	bls.w	801ee8e <st_sssa8_ch_convolve_rgb+0x472>
 801eb32:	9924      	ldr	r1, [sp, #144]	; 0x90
 801eb34:	4613      	mov	r3, r2
 801eb36:	fbb2 f2f1 	udiv	r2, r2, r1
 801eb3a:	fb01 3312 	mls	r3, r1, r2, r3
 801eb3e:	b292      	uxth	r2, r2
 801eb40:	b29b      	uxth	r3, r3
 801eb42:	9229      	str	r2, [sp, #164]	; 0xa4
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	f040 819d 	bne.w	801ee84 <st_sssa8_ch_convolve_rgb+0x468>
 801eb4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	f000 818b 	beq.w	801ee68 <st_sssa8_ch_convolve_rgb+0x44c>
 801eb52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb54:	2500      	movs	r5, #0
 801eb56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801eb58:	4253      	negs	r3, r2
 801eb5a:	4f99      	ldr	r7, [pc, #612]	; (801edc0 <st_sssa8_ch_convolve_rgb+0x3a4>)
 801eb5c:	1a8a      	subs	r2, r1, r2
 801eb5e:	9527      	str	r5, [sp, #156]	; 0x9c
 801eb60:	b29b      	uxth	r3, r3
 801eb62:	9226      	str	r2, [sp, #152]	; 0x98
 801eb64:	931e      	str	r3, [sp, #120]	; 0x78
 801eb66:	9325      	str	r3, [sp, #148]	; 0x94
 801eb68:	a836      	add	r0, sp, #216	; 0xd8
 801eb6a:	f000 fc5d 	bl	801f428 <ai_padding_opt_phase1>
 801eb6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb72:	fb05 f303 	mul.w	r3, r5, r3
 801eb76:	995d      	ldr	r1, [sp, #372]	; 0x174
 801eb78:	fb02 1303 	mla	r3, r2, r3, r1
 801eb7c:	9314      	str	r3, [sp, #80]	; 0x50
 801eb7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb80:	b92b      	cbnz	r3, 801eb8e <st_sssa8_ch_convolve_rgb+0x172>
 801eb82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801eb86:	990d      	ldr	r1, [sp, #52]	; 0x34
 801eb88:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801eb8a:	f001 f91b 	bl	801fdc4 <st_int8_to16_dual>
 801eb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb90:	46d9      	mov	r9, fp
 801eb92:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801eb94:	46b2      	mov	sl, r6
 801eb96:	fb03 2505 	mla	r5, r3, r5, r2
 801eb9a:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801eb9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801eba0:	46ab      	mov	fp, r5
 801eba2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eba4:	9317      	str	r3, [sp, #92]	; 0x5c
 801eba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eba8:	931c      	str	r3, [sp, #112]	; 0x70
 801ebaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebac:	9312      	str	r3, [sp, #72]	; 0x48
 801ebae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ebb0:	9320      	str	r3, [sp, #128]	; 0x80
 801ebb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ebb4:	931b      	str	r3, [sp, #108]	; 0x6c
 801ebb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ebb8:	931a      	str	r3, [sp, #104]	; 0x68
 801ebba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ebbc:	9318      	str	r3, [sp, #96]	; 0x60
 801ebbe:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801ebc0:	9319      	str	r3, [sp, #100]	; 0x64
 801ebc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ebc4:	1e5a      	subs	r2, r3, #1
 801ebc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ebca:	b292      	uxth	r2, r2
 801ebcc:	429a      	cmp	r2, r3
 801ebce:	9217      	str	r2, [sp, #92]	; 0x5c
 801ebd0:	f000 813a 	beq.w	801ee48 <st_sssa8_ch_convolve_rgb+0x42c>
 801ebd4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801ebd6:	2600      	movs	r6, #0
 801ebd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ebda:	9238      	str	r2, [sp, #224]	; 0xe0
 801ebdc:	464a      	mov	r2, r9
 801ebde:	9306      	str	r3, [sp, #24]
 801ebe0:	46d9      	mov	r9, fp
 801ebe2:	9609      	str	r6, [sp, #36]	; 0x24
 801ebe4:	4693      	mov	fp, r2
 801ebe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebe8:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
 801ebec:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 801ebf0:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ebf2:	9113      	str	r1, [sp, #76]	; 0x4c
 801ebf4:	2800      	cmp	r0, #0
 801ebf6:	d17b      	bne.n	801ecf0 <st_sssa8_ch_convolve_rgb+0x2d4>
 801ebf8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801ebfa:	2a00      	cmp	r2, #0
 801ebfc:	d17e      	bne.n	801ecfc <st_sssa8_ch_convolve_rgb+0x2e0>
 801ebfe:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 801ec00:	2101      	movs	r1, #1
 801ec02:	3a01      	subs	r2, #1
 801ec04:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 801ec08:	9238      	str	r2, [sp, #224]	; 0xe0
 801ec0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec0c:	4591      	cmp	r9, r2
 801ec0e:	dd5c      	ble.n	801ecca <st_sssa8_ch_convolve_rgb+0x2ae>
 801ec10:	4610      	mov	r0, r2
 801ec12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ec14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ec18:	4686      	mov	lr, r0
 801ec1a:	fb06 1102 	mla	r1, r6, r2, r1
 801ec1e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ec22:	f8cd 9020 	str.w	r9, [sp, #32]
 801ec26:	1b09      	subs	r1, r1, r4
 801ec28:	4691      	mov	r9, r2
 801ec2a:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 801ec2e:	468c      	mov	ip, r1
 801ec30:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801ec34:	45cc      	cmp	ip, r9
 801ec36:	dd3d      	ble.n	801ecb4 <st_sssa8_ch_convolve_rgb+0x298>
 801ec38:	fb00 f20b 	mul.w	r2, r0, fp
 801ec3c:	ea4f 71de 	mov.w	r1, lr, lsr #31
 801ec40:	4698      	mov	r8, r3
 801ec42:	9207      	str	r2, [sp, #28]
 801ec44:	4583      	cmp	fp, r0
 801ec46:	bfd8      	it	le
 801ec48:	f041 0101 	orrle.w	r1, r1, #1
 801ec4c:	464a      	mov	r2, r9
 801ec4e:	4648      	mov	r0, r9
 801ec50:	4583      	cmp	fp, r0
 801ec52:	f102 0601 	add.w	r6, r2, #1
 801ec56:	f103 0306 	add.w	r3, r3, #6
 801ec5a:	bfcc      	ite	gt
 801ec5c:	2500      	movgt	r5, #0
 801ec5e:	2501      	movle	r5, #1
 801ec60:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 801ec64:	d100      	bne.n	801ec68 <st_sssa8_ch_convolve_rgb+0x24c>
 801ec66:	b159      	cbz	r1, 801ec80 <st_sssa8_ch_convolve_rgb+0x264>
 801ec68:	b232      	sxth	r2, r6
 801ec6a:	f823 4c04 	strh.w	r4, [r3, #-4]
 801ec6e:	f823 4c02 	strh.w	r4, [r3, #-2]
 801ec72:	4562      	cmp	r2, ip
 801ec74:	f823 4c06 	strh.w	r4, [r3, #-6]
 801ec78:	4610      	mov	r0, r2
 801ec7a:	da1b      	bge.n	801ecb4 <st_sssa8_ch_convolve_rgb+0x298>
 801ec7c:	4698      	mov	r8, r3
 801ec7e:	e7e7      	b.n	801ec50 <st_sssa8_ch_convolve_rgb+0x234>
 801ec80:	9d07      	ldr	r5, [sp, #28]
 801ec82:	3201      	adds	r2, #1
 801ec84:	4428      	add	r0, r5
 801ec86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ec88:	b212      	sxth	r2, r2
 801ec8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec8e:	4562      	cmp	r2, ip
 801ec90:	5828      	ldr	r0, [r5, r0]
 801ec92:	fa2f f680 	sxtb16	r6, r0
 801ec96:	ea4f 2530 	mov.w	r5, r0, ror #8
 801ec9a:	ea06 0a07 	and.w	sl, r6, r7
 801ec9e:	fa2f f585 	sxtb16	r5, r5
 801eca2:	b2ad      	uxth	r5, r5
 801eca4:	4610      	mov	r0, r2
 801eca6:	ea45 050a 	orr.w	r5, r5, sl
 801ecaa:	f8c8 5002 	str.w	r5, [r8, #2]
 801ecae:	f823 6c06 	strh.w	r6, [r3, #-6]
 801ecb2:	dbe3      	blt.n	801ec7c <st_sssa8_ch_convolve_rgb+0x260>
 801ecb4:	f10e 0e01 	add.w	lr, lr, #1
 801ecb8:	9a08      	ldr	r2, [sp, #32]
 801ecba:	fa0f fe8e 	sxth.w	lr, lr
 801ecbe:	4596      	cmp	lr, r2
 801ecc0:	4670      	mov	r0, lr
 801ecc2:	dbb7      	blt.n	801ec34 <st_sssa8_ch_convolve_rgb+0x218>
 801ecc4:	4691      	mov	r9, r2
 801ecc6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ecca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eccc:	429a      	cmp	r2, r3
 801ecce:	d055      	beq.n	801ed7c <st_sssa8_ch_convolve_rgb+0x360>
 801ecd0:	9a06      	ldr	r2, [sp, #24]
 801ecd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ecd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ecd6:	4402      	add	r2, r0
 801ecd8:	3101      	adds	r1, #1
 801ecda:	b292      	uxth	r2, r2
 801ecdc:	b209      	sxth	r1, r1
 801ecde:	9206      	str	r2, [sp, #24]
 801ece0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ece2:	460e      	mov	r6, r1
 801ece4:	9109      	str	r1, [sp, #36]	; 0x24
 801ece6:	428a      	cmp	r2, r1
 801ece8:	dd6c      	ble.n	801edc4 <st_sssa8_ch_convolve_rgb+0x3a8>
 801ecea:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801ecec:	2800      	cmp	r0, #0
 801ecee:	d083      	beq.n	801ebf8 <st_sssa8_ch_convolve_rgb+0x1dc>
 801ecf0:	3801      	subs	r0, #1
 801ecf2:	2201      	movs	r2, #1
 801ecf4:	9036      	str	r0, [sp, #216]	; 0xd8
 801ecf6:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 801ecfa:	e786      	b.n	801ec0a <st_sssa8_ch_convolve_rgb+0x1ee>
 801ecfc:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 801ed00:	3a01      	subs	r2, #1
 801ed02:	2901      	cmp	r1, #1
 801ed04:	9237      	str	r2, [sp, #220]	; 0xdc
 801ed06:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 801ed0a:	f43f af7e 	beq.w	801ec0a <st_sssa8_ch_convolve_rgb+0x1ee>
 801ed0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed10:	4591      	cmp	r9, r2
 801ed12:	ddda      	ble.n	801ecca <st_sssa8_ch_convolve_rgb+0x2ae>
 801ed14:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ed16:	4694      	mov	ip, r2
 801ed18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ed1a:	4615      	mov	r5, r2
 801ed1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ed1e:	fb06 0601 	mla	r6, r6, r1, r0
 801ed22:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 801ed26:	1ab6      	subs	r6, r6, r2
 801ed28:	4576      	cmp	r6, lr
 801ed2a:	dd1d      	ble.n	801ed68 <st_sssa8_ch_convolve_rgb+0x34c>
 801ed2c:	fb05 f40b 	mul.w	r4, r5, fp
 801ed30:	4670      	mov	r0, lr
 801ed32:	4675      	mov	r5, lr
 801ed34:	4425      	add	r5, r4
 801ed36:	3001      	adds	r0, #1
 801ed38:	3306      	adds	r3, #6
 801ed3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed3e:	b200      	sxth	r0, r0
 801ed40:	f85a 2005 	ldr.w	r2, [sl, r5]
 801ed44:	fa2f f182 	sxtb16	r1, r2
 801ed48:	ea4f 2232 	mov.w	r2, r2, ror #8
 801ed4c:	ea01 0807 	and.w	r8, r1, r7
 801ed50:	fa2f f282 	sxtb16	r2, r2
 801ed54:	b292      	uxth	r2, r2
 801ed56:	42b0      	cmp	r0, r6
 801ed58:	f823 1c06 	strh.w	r1, [r3, #-6]
 801ed5c:	4605      	mov	r5, r0
 801ed5e:	ea42 0208 	orr.w	r2, r2, r8
 801ed62:	f843 2c04 	str.w	r2, [r3, #-4]
 801ed66:	dbe5      	blt.n	801ed34 <st_sssa8_ch_convolve_rgb+0x318>
 801ed68:	f10c 0c01 	add.w	ip, ip, #1
 801ed6c:	fa0f fc8c 	sxth.w	ip, ip
 801ed70:	45cc      	cmp	ip, r9
 801ed72:	4665      	mov	r5, ip
 801ed74:	dbd8      	blt.n	801ed28 <st_sssa8_ch_convolve_rgb+0x30c>
 801ed76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	d1a9      	bne.n	801ecd0 <st_sssa8_ch_convolve_rgb+0x2b4>
 801ed7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ed7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ed80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed82:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ed84:	9204      	str	r2, [sp, #16]
 801ed86:	9401      	str	r4, [sp, #4]
 801ed88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ed8a:	9305      	str	r3, [sp, #20]
 801ed8c:	9002      	str	r0, [sp, #8]
 801ed8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ed90:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ed92:	9400      	str	r4, [sp, #0]
 801ed94:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 801ed98:	9103      	str	r1, [sp, #12]
 801ed9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ed9c:	f001 ff96 	bl	8020ccc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 801eda0:	9b06      	ldr	r3, [sp, #24]
 801eda2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801eda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eda6:	440b      	add	r3, r1
 801eda8:	9013      	str	r0, [sp, #76]	; 0x4c
 801edaa:	3201      	adds	r2, #1
 801edac:	b29b      	uxth	r3, r3
 801edae:	b212      	sxth	r2, r2
 801edb0:	9306      	str	r3, [sp, #24]
 801edb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edb4:	4616      	mov	r6, r2
 801edb6:	9209      	str	r2, [sp, #36]	; 0x24
 801edb8:	4293      	cmp	r3, r2
 801edba:	dd59      	ble.n	801ee70 <st_sssa8_ch_convolve_rgb+0x454>
 801edbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801edbe:	e794      	b.n	801ecea <st_sssa8_ch_convolve_rgb+0x2ce>
 801edc0:	ffff0000 	.word	0xffff0000
 801edc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801edc6:	465a      	mov	r2, fp
 801edc8:	46cb      	mov	fp, r9
 801edca:	4299      	cmp	r1, r3
 801edcc:	4691      	mov	r9, r2
 801edce:	d010      	beq.n	801edf2 <st_sssa8_ch_convolve_rgb+0x3d6>
 801edd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801edd2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801edd4:	9204      	str	r2, [sp, #16]
 801edd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801edd8:	9401      	str	r4, [sp, #4]
 801edda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eddc:	9305      	str	r3, [sp, #20]
 801edde:	9400      	str	r4, [sp, #0]
 801ede0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ede2:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 801ede6:	9003      	str	r0, [sp, #12]
 801ede8:	9818      	ldr	r0, [sp, #96]	; 0x60
 801edea:	9002      	str	r0, [sp, #8]
 801edec:	980d      	ldr	r0, [sp, #52]	; 0x34
 801edee:	f002 fa87 	bl	8021300 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801edf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801edf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801edf6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801edf8:	1a9b      	subs	r3, r3, r2
 801edfa:	4608      	mov	r0, r1
 801edfc:	b29b      	uxth	r3, r3
 801edfe:	4410      	add	r0, r2
 801ee00:	429a      	cmp	r2, r3
 801ee02:	931c      	str	r3, [sp, #112]	; 0x70
 801ee04:	9014      	str	r0, [sp, #80]	; 0x50
 801ee06:	bf28      	it	cs
 801ee08:	461a      	movcs	r2, r3
 801ee0a:	4614      	mov	r4, r2
 801ee0c:	b90a      	cbnz	r2, 801ee12 <st_sssa8_ch_convolve_rgb+0x3f6>
 801ee0e:	9412      	str	r4, [sp, #72]	; 0x48
 801ee10:	e6d7      	b.n	801ebc2 <st_sssa8_ch_convolve_rgb+0x1a6>
 801ee12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ee14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801ee16:	4619      	mov	r1, r3
 801ee18:	009d      	lsls	r5, r3, #2
 801ee1a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ee1c:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 801ee20:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ee22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ee24:	442e      	add	r6, r5
 801ee26:	9118      	str	r1, [sp, #96]	; 0x60
 801ee28:	fb02 0003 	mla	r0, r2, r3, r0
 801ee2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ee2e:	961a      	str	r6, [sp, #104]	; 0x68
 801ee30:	4623      	mov	r3, r4
 801ee32:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801ee34:	9020      	str	r0, [sp, #128]	; 0x80
 801ee36:	442e      	add	r6, r5
 801ee38:	9619      	str	r6, [sp, #100]	; 0x64
 801ee3a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801ee3c:	442e      	add	r6, r5
 801ee3e:	4635      	mov	r5, r6
 801ee40:	961b      	str	r6, [sp, #108]	; 0x6c
 801ee42:	f000 ffbf 	bl	801fdc4 <st_int8_to16_dual>
 801ee46:	e7e2      	b.n	801ee0e <st_sssa8_ch_convolve_rgb+0x3f2>
 801ee48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ee4a:	4656      	mov	r6, sl
 801ee4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ee4e:	46cb      	mov	fp, r9
 801ee50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ee52:	440b      	add	r3, r1
 801ee54:	3201      	adds	r2, #1
 801ee56:	b29b      	uxth	r3, r3
 801ee58:	b212      	sxth	r2, r2
 801ee5a:	9325      	str	r3, [sp, #148]	; 0x94
 801ee5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee5e:	4615      	mov	r5, r2
 801ee60:	9227      	str	r2, [sp, #156]	; 0x9c
 801ee62:	4293      	cmp	r3, r2
 801ee64:	f73f ae80 	bgt.w	801eb68 <st_sssa8_ch_convolve_rgb+0x14c>
 801ee68:	2000      	movs	r0, #0
 801ee6a:	b04b      	add	sp, #300	; 0x12c
 801ee6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee70:	465b      	mov	r3, fp
 801ee72:	46cb      	mov	fp, r9
 801ee74:	4699      	mov	r9, r3
 801ee76:	e7bc      	b.n	801edf2 <st_sssa8_ch_convolve_rgb+0x3d6>
 801ee78:	428d      	cmp	r5, r1
 801ee7a:	f844 ef04 	str.w	lr, [r4, #4]!
 801ee7e:	f47f ae0a 	bne.w	801ea96 <st_sssa8_ch_convolve_rgb+0x7a>
 801ee82:	e619      	b.n	801eab8 <st_sssa8_ch_convolve_rgb+0x9c>
 801ee84:	4613      	mov	r3, r2
 801ee86:	3301      	adds	r3, #1
 801ee88:	b29b      	uxth	r3, r3
 801ee8a:	9329      	str	r3, [sp, #164]	; 0xa4
 801ee8c:	e65d      	b.n	801eb4a <st_sssa8_ch_convolve_rgb+0x12e>
 801ee8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d0e9      	beq.n	801ee68 <st_sssa8_ch_convolve_rgb+0x44c>
 801ee94:	2100      	movs	r1, #0
 801ee96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ee98:	eba4 0008 	sub.w	r0, r4, r8
 801ee9c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801ee9e:	4253      	negs	r3, r2
 801eea0:	9113      	str	r1, [sp, #76]	; 0x4c
 801eea2:	460c      	mov	r4, r1
 801eea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801eea6:	b29b      	uxth	r3, r3
 801eea8:	9012      	str	r0, [sp, #72]	; 0x48
 801eeaa:	1a8a      	subs	r2, r1, r2
 801eeac:	9314      	str	r3, [sp, #80]	; 0x50
 801eeae:	9226      	str	r2, [sp, #152]	; 0x98
 801eeb0:	930c      	str	r3, [sp, #48]	; 0x30
 801eeb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eeb4:	2500      	movs	r5, #0
 801eeb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801eeb8:	a836      	add	r0, sp, #216	; 0xd8
 801eeba:	9507      	str	r5, [sp, #28]
 801eebc:	fb03 2a04 	mla	sl, r3, r4, r2
 801eec0:	f000 fab2 	bl	801f428 <ai_padding_opt_phase1>
 801eec4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801eec8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eeca:	9309      	str	r3, [sp, #36]	; 0x24
 801eecc:	462b      	mov	r3, r5
 801eece:	9206      	str	r2, [sp, #24]
 801eed0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801eed2:	2a00      	cmp	r2, #0
 801eed4:	f040 8119 	bne.w	801f10a <st_sssa8_ch_convolve_rgb+0x6ee>
 801eed8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801eeda:	2a00      	cmp	r2, #0
 801eedc:	f040 811b 	bne.w	801f116 <st_sssa8_ch_convolve_rgb+0x6fa>
 801eee0:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 801eee2:	2101      	movs	r1, #1
 801eee4:	3a01      	subs	r2, #1
 801eee6:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 801eeea:	9238      	str	r2, [sp, #224]	; 0xe0
 801eeec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eeee:	4552      	cmp	r2, sl
 801eef0:	da5d      	bge.n	801efae <st_sssa8_ch_convolve_rgb+0x592>
 801eef2:	4691      	mov	r9, r2
 801eef4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801eef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eef8:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801eefc:	46cc      	mov	ip, r9
 801eefe:	fb03 1302 	mla	r3, r3, r2, r1
 801ef02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef04:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 801ef08:	4680      	mov	r8, r0
 801ef0a:	1a9a      	subs	r2, r3, r2
 801ef0c:	f8cd a020 	str.w	sl, [sp, #32]
 801ef10:	960b      	str	r6, [sp, #44]	; 0x2c
 801ef12:	4542      	cmp	r2, r8
 801ef14:	dd41      	ble.n	801ef9a <st_sssa8_ch_convolve_rgb+0x57e>
 801ef16:	45cb      	cmp	fp, r9
 801ef18:	fb09 fa0b 	mul.w	sl, r9, fp
 801ef1c:	463e      	mov	r6, r7
 801ef1e:	4643      	mov	r3, r8
 801ef20:	bfcc      	ite	gt
 801ef22:	f04f 0e00 	movgt.w	lr, #0
 801ef26:	f04f 0e01 	movle.w	lr, #1
 801ef2a:	4640      	mov	r0, r8
 801ef2c:	ea4e 7edc 	orr.w	lr, lr, ip, lsr #31
 801ef30:	4583      	cmp	fp, r0
 801ef32:	f103 0501 	add.w	r5, r3, #1
 801ef36:	f107 0706 	add.w	r7, r7, #6
 801ef3a:	bfcc      	ite	gt
 801ef3c:	2400      	movgt	r4, #0
 801ef3e:	2401      	movle	r4, #1
 801ef40:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 801ef44:	d102      	bne.n	801ef4c <st_sssa8_ch_convolve_rgb+0x530>
 801ef46:	f1be 0f00 	cmp.w	lr, #0
 801ef4a:	d00b      	beq.n	801ef64 <st_sssa8_ch_convolve_rgb+0x548>
 801ef4c:	b22b      	sxth	r3, r5
 801ef4e:	f827 1c04 	strh.w	r1, [r7, #-4]
 801ef52:	f827 1c02 	strh.w	r1, [r7, #-2]
 801ef56:	429a      	cmp	r2, r3
 801ef58:	f827 1c06 	strh.w	r1, [r7, #-6]
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	dd1c      	ble.n	801ef9a <st_sssa8_ch_convolve_rgb+0x57e>
 801ef60:	463e      	mov	r6, r7
 801ef62:	e7e5      	b.n	801ef30 <st_sssa8_ch_convolve_rgb+0x514>
 801ef64:	4450      	add	r0, sl
 801ef66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ef68:	3301      	adds	r3, #1
 801ef6a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 801f238 <st_sssa8_ch_convolve_rgb+0x81c>
 801ef6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef72:	b21b      	sxth	r3, r3
 801ef74:	5820      	ldr	r0, [r4, r0]
 801ef76:	fa2f f580 	sxtb16	r5, r0
 801ef7a:	ea4f 2430 	mov.w	r4, r0, ror #8
 801ef7e:	ea05 0909 	and.w	r9, r5, r9
 801ef82:	fa2f f484 	sxtb16	r4, r4
 801ef86:	b2a4      	uxth	r4, r4
 801ef88:	4293      	cmp	r3, r2
 801ef8a:	4618      	mov	r0, r3
 801ef8c:	ea44 0409 	orr.w	r4, r4, r9
 801ef90:	f8c6 4002 	str.w	r4, [r6, #2]
 801ef94:	f827 5c06 	strh.w	r5, [r7, #-6]
 801ef98:	dbe2      	blt.n	801ef60 <st_sssa8_ch_convolve_rgb+0x544>
 801ef9a:	f10c 0c01 	add.w	ip, ip, #1
 801ef9e:	9b08      	ldr	r3, [sp, #32]
 801efa0:	fa0f fc8c 	sxth.w	ip, ip
 801efa4:	459c      	cmp	ip, r3
 801efa6:	46e1      	mov	r9, ip
 801efa8:	dbb3      	blt.n	801ef12 <st_sssa8_ch_convolve_rgb+0x4f6>
 801efaa:	469a      	mov	sl, r3
 801efac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801efae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efb0:	42bb      	cmp	r3, r7
 801efb2:	f000 80f3 	beq.w	801f19c <st_sssa8_ch_convolve_rgb+0x780>
 801efb6:	9a07      	ldr	r2, [sp, #28]
 801efb8:	9b06      	ldr	r3, [sp, #24]
 801efba:	990a      	ldr	r1, [sp, #40]	; 0x28
 801efbc:	3201      	adds	r2, #1
 801efbe:	440b      	add	r3, r1
 801efc0:	b212      	sxth	r2, r2
 801efc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801efc4:	b29b      	uxth	r3, r3
 801efc6:	9207      	str	r2, [sp, #28]
 801efc8:	4291      	cmp	r1, r2
 801efca:	9306      	str	r3, [sp, #24]
 801efcc:	4613      	mov	r3, r2
 801efce:	f73f af7f 	bgt.w	801eed0 <st_sssa8_ch_convolve_rgb+0x4b4>
 801efd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801efd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801efd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efd8:	440b      	add	r3, r1
 801efda:	3201      	adds	r2, #1
 801efdc:	b29b      	uxth	r3, r3
 801efde:	b212      	sxth	r2, r2
 801efe0:	930c      	str	r3, [sp, #48]	; 0x30
 801efe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efe4:	4614      	mov	r4, r2
 801efe6:	9213      	str	r2, [sp, #76]	; 0x4c
 801efe8:	4293      	cmp	r3, r2
 801efea:	f73f af62 	bgt.w	801eeb2 <st_sssa8_ch_convolve_rgb+0x496>
 801efee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eff0:	42ba      	cmp	r2, r7
 801eff2:	f43f af39 	beq.w	801ee68 <st_sssa8_ch_convolve_rgb+0x44c>
 801eff6:	9915      	ldr	r1, [sp, #84]	; 0x54
 801eff8:	2900      	cmp	r1, #0
 801effa:	f43f af35 	beq.w	801ee68 <st_sssa8_ch_convolve_rgb+0x44c>
 801effe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f000:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f002:	1f1f      	subs	r7, r3, #4
 801f004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f006:	ea4f 0990 	mov.w	r9, r0, lsr #2
 801f00a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f00c:	f1a3 0c02 	sub.w	ip, r3, #2
 801f010:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801f012:	f1a4 0a04 	sub.w	sl, r4, #4
 801f016:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 801f018:	1f1e      	subs	r6, r3, #4
 801f01a:	f109 33ff 	add.w	r3, r9, #4294967295
 801f01e:	4421      	add	r1, r4
 801f020:	f000 0e03 	and.w	lr, r0, #3
 801f024:	b29b      	uxth	r3, r3
 801f026:	f8df b210 	ldr.w	fp, [pc, #528]	; 801f238 <st_sssa8_ch_convolve_rgb+0x81c>
 801f02a:	9107      	str	r1, [sp, #28]
 801f02c:	3301      	adds	r3, #1
 801f02e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f030:	0099      	lsls	r1, r3, #2
 801f032:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f036:	9108      	str	r1, [sp, #32]
 801f038:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 801f03c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f03e:	46a1      	mov	r9, r4
 801f040:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801f044:	2a00      	cmp	r2, #0
 801f046:	d05e      	beq.n	801f106 <st_sssa8_ch_convolve_rgb+0x6ea>
 801f048:	9a08      	ldr	r2, [sp, #32]
 801f04a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801f04e:	1882      	adds	r2, r0, r2
 801f050:	9206      	str	r2, [sp, #24]
 801f052:	f850 2b04 	ldr.w	r2, [r0], #4
 801f056:	fa2f f482 	sxtb16	r4, r2
 801f05a:	b2a1      	uxth	r1, r4
 801f05c:	f8d8 5000 	ldr.w	r5, [r8]
 801f060:	ea4f 2232 	mov.w	r2, r2, ror #8
 801f064:	fa2f f282 	sxtb16	r2, r2
 801f068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f06c:	fb21 3105 	smlad	r1, r1, r5, r3
 801f070:	ea02 020b 	and.w	r2, r2, fp
 801f074:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f078:	f108 0808 	add.w	r8, r8, #8
 801f07c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
 801f080:	fb24 1303 	smlad	r3, r4, r3, r1
 801f084:	9a06      	ldr	r2, [sp, #24]
 801f086:	4290      	cmp	r0, r2
 801f088:	d1e3      	bne.n	801f052 <st_sssa8_ch_convolve_rgb+0x636>
 801f08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f08c:	f1be 0f00 	cmp.w	lr, #0
 801f090:	d017      	beq.n	801f0c2 <st_sssa8_ch_convolve_rgb+0x6a6>
 801f092:	f990 1000 	ldrsb.w	r1, [r0]
 801f096:	f1be 0f01 	cmp.w	lr, #1
 801f09a:	8814      	ldrh	r4, [r2, #0]
 801f09c:	fb14 3301 	smlabb	r3, r4, r1, r3
 801f0a0:	f000 80ab 	beq.w	801f1fa <st_sssa8_ch_convolve_rgb+0x7de>
 801f0a4:	f990 1001 	ldrsb.w	r1, [r0, #1]
 801f0a8:	f1be 0f02 	cmp.w	lr, #2
 801f0ac:	8854      	ldrh	r4, [r2, #2]
 801f0ae:	fb14 3301 	smlabb	r3, r4, r1, r3
 801f0b2:	f000 80a0 	beq.w	801f1f6 <st_sssa8_ch_convolve_rgb+0x7da>
 801f0b6:	8891      	ldrh	r1, [r2, #4]
 801f0b8:	3003      	adds	r0, #3
 801f0ba:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
 801f0be:	fb11 3302 	smlabb	r3, r1, r2, r3
 801f0c2:	f93c 1f02 	ldrsh.w	r1, [ip, #2]!
 801f0c6:	f109 0901 	add.w	r9, r9, #1
 801f0ca:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801f0ce:	2915      	cmp	r1, #21
 801f0d0:	f85a 4f04 	ldr.w	r4, [sl, #4]!
 801f0d4:	f340 8083 	ble.w	801f1de <st_sssa8_ch_convolve_rgb+0x7c2>
 801f0d8:	1e8a      	subs	r2, r1, #2
 801f0da:	f04f 0801 	mov.w	r8, #1
 801f0de:	3901      	subs	r1, #1
 801f0e0:	fa08 f202 	lsl.w	r2, r8, r2
 801f0e4:	fb53 2305 	smmla	r3, r3, r5, r2
 801f0e8:	410b      	asrs	r3, r1
 801f0ea:	4423      	add	r3, r4
 801f0ec:	f303 0307 	ssat	r3, #8, r3
 801f0f0:	f809 3c01 	strb.w	r3, [r9, #-1]
 801f0f4:	9b07      	ldr	r3, [sp, #28]
 801f0f6:	454b      	cmp	r3, r9
 801f0f8:	f43f aeb6 	beq.w	801ee68 <st_sssa8_ch_convolve_rgb+0x44c>
 801f0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0fe:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801f102:	2a00      	cmp	r2, #0
 801f104:	d1a0      	bne.n	801f048 <st_sssa8_ch_convolve_rgb+0x62c>
 801f106:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f108:	e7c0      	b.n	801f08c <st_sssa8_ch_convolve_rgb+0x670>
 801f10a:	3a01      	subs	r2, #1
 801f10c:	2101      	movs	r1, #1
 801f10e:	9236      	str	r2, [sp, #216]	; 0xd8
 801f110:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 801f114:	e6ea      	b.n	801eeec <st_sssa8_ch_convolve_rgb+0x4d0>
 801f116:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 801f11a:	3a01      	subs	r2, #1
 801f11c:	2901      	cmp	r1, #1
 801f11e:	9237      	str	r2, [sp, #220]	; 0xdc
 801f120:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 801f124:	f43f aee2 	beq.w	801eeec <st_sssa8_ch_convolve_rgb+0x4d0>
 801f128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f12a:	4552      	cmp	r2, sl
 801f12c:	f6bf af3f 	bge.w	801efae <st_sssa8_ch_convolve_rgb+0x592>
 801f130:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f132:	4694      	mov	ip, r2
 801f134:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f136:	4614      	mov	r4, r2
 801f138:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f13a:	fb03 0301 	mla	r3, r3, r1, r0
 801f13e:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 801f142:	1a9d      	subs	r5, r3, r2
 801f144:	45ae      	cmp	lr, r5
 801f146:	da1e      	bge.n	801f186 <st_sssa8_ch_convolve_rgb+0x76a>
 801f148:	fb04 f00b 	mul.w	r0, r4, fp
 801f14c:	4671      	mov	r1, lr
 801f14e:	4674      	mov	r4, lr
 801f150:	1903      	adds	r3, r0, r4
 801f152:	3101      	adds	r1, #1
 801f154:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 801f238 <st_sssa8_ch_convolve_rgb+0x81c>
 801f158:	3706      	adds	r7, #6
 801f15a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f15e:	b209      	sxth	r1, r1
 801f160:	58f3      	ldr	r3, [r6, r3]
 801f162:	fa2f f283 	sxtb16	r2, r3
 801f166:	ea4f 2333 	mov.w	r3, r3, ror #8
 801f16a:	ea02 0808 	and.w	r8, r2, r8
 801f16e:	fa2f f383 	sxtb16	r3, r3
 801f172:	b29b      	uxth	r3, r3
 801f174:	42a9      	cmp	r1, r5
 801f176:	f827 2c06 	strh.w	r2, [r7, #-6]
 801f17a:	460c      	mov	r4, r1
 801f17c:	ea43 0308 	orr.w	r3, r3, r8
 801f180:	f847 3c04 	str.w	r3, [r7, #-4]
 801f184:	dbe4      	blt.n	801f150 <st_sssa8_ch_convolve_rgb+0x734>
 801f186:	f10c 0c01 	add.w	ip, ip, #1
 801f18a:	fa0f fc8c 	sxth.w	ip, ip
 801f18e:	45d4      	cmp	ip, sl
 801f190:	4664      	mov	r4, ip
 801f192:	dbd7      	blt.n	801f144 <st_sssa8_ch_convolve_rgb+0x728>
 801f194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f196:	42bb      	cmp	r3, r7
 801f198:	f47f af0d 	bne.w	801efb6 <st_sssa8_ch_convolve_rgb+0x59a>
 801f19c:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 801f19e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f1a0:	9959      	ldr	r1, [sp, #356]	; 0x164
 801f1a2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f1a4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f1a6:	9304      	str	r3, [sp, #16]
 801f1a8:	9203      	str	r2, [sp, #12]
 801f1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f1ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f1ae:	9102      	str	r1, [sp, #8]
 801f1b0:	9001      	str	r0, [sp, #4]
 801f1b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f1b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f1b6:	9400      	str	r4, [sp, #0]
 801f1b8:	f000 f97e 	bl	801f4b8 <st_sssa8_ch_nn_mat_mult_kernel>
 801f1bc:	9a07      	ldr	r2, [sp, #28]
 801f1be:	9b06      	ldr	r3, [sp, #24]
 801f1c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f1c2:	3201      	adds	r2, #1
 801f1c4:	905d      	str	r0, [sp, #372]	; 0x174
 801f1c6:	b212      	sxth	r2, r2
 801f1c8:	440b      	add	r3, r1
 801f1ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f1cc:	b29b      	uxth	r3, r3
 801f1ce:	9207      	str	r2, [sp, #28]
 801f1d0:	4291      	cmp	r1, r2
 801f1d2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801f1d4:	9306      	str	r3, [sp, #24]
 801f1d6:	4613      	mov	r3, r2
 801f1d8:	f73f ae7a 	bgt.w	801eed0 <st_sssa8_ch_convolve_rgb+0x4b4>
 801f1dc:	e6f9      	b.n	801efd2 <st_sssa8_ch_convolve_rgb+0x5b6>
 801f1de:	2900      	cmp	r1, #0
 801f1e0:	dd0d      	ble.n	801f1fe <st_sssa8_ch_convolve_rgb+0x7e2>
 801f1e2:	005b      	lsls	r3, r3, #1
 801f1e4:	fb53 4305 	smmla	r3, r3, r5, r4
 801f1e8:	fa43 f101 	asr.w	r1, r3, r1
 801f1ec:	f301 0307 	ssat	r3, #8, r1
 801f1f0:	f809 3c01 	strb.w	r3, [r9, #-1]
 801f1f4:	e77e      	b.n	801f0f4 <st_sssa8_ch_convolve_rgb+0x6d8>
 801f1f6:	3002      	adds	r0, #2
 801f1f8:	e763      	b.n	801f0c2 <st_sssa8_ch_convolve_rgb+0x6a6>
 801f1fa:	3001      	adds	r0, #1
 801f1fc:	e761      	b.n	801f0c2 <st_sssa8_ch_convolve_rgb+0x6a6>
 801f1fe:	f1c1 0101 	rsb	r1, r1, #1
 801f202:	408b      	lsls	r3, r1
 801f204:	f303 031f 	ssat	r3, #32, r3
 801f208:	fb53 f315 	smmulr	r3, r3, r5
 801f20c:	4423      	add	r3, r4
 801f20e:	f303 0307 	ssat	r3, #8, r3
 801f212:	f809 3c01 	strb.w	r3, [r9, #-1]
 801f216:	e76d      	b.n	801f0f4 <st_sssa8_ch_convolve_rgb+0x6d8>
 801f218:	4602      	mov	r2, r0
 801f21a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f21c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f21e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f220:	f000 fdd0 	bl	801fdc4 <st_int8_to16_dual>
 801f224:	2301      	movs	r3, #1
 801f226:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f228:	9328      	str	r3, [sp, #160]	; 0xa0
 801f22a:	e474      	b.n	801eb16 <st_sssa8_ch_convolve_rgb+0xfa>
 801f22c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f22e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f230:	e445      	b.n	801eabe <st_sssa8_ch_convolve_rgb+0xa2>
 801f232:	f06f 0002 	mvn.w	r0, #2
 801f236:	e618      	b.n	801ee6a <st_sssa8_ch_convolve_rgb+0x44e>
 801f238:	ffff0000 	.word	0xffff0000

0801f23c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 801f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f23e:	f06f 0509 	mvn.w	r5, #9
 801f242:	685f      	ldr	r7, [r3, #4]
 801f244:	fb02 f601 	mul.w	r6, r2, r1
 801f248:	fb05 7501 	mla	r5, r5, r1, r7
 801f24c:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 801f250:	db06      	blt.n	801f260 <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 801f252:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f25c:	f000 ff20 	bl	80200a0 <st_sssa8_ch_fullW_prefetch>
 801f260:	2000      	movs	r0, #0
 801f262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f264 <st_sssa8_ch_convolve_1x1>:
 801f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f268:	b091      	sub	sp, #68	; 0x44
 801f26a:	469a      	mov	sl, r3
 801f26c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801f270:	f99d 3094 	ldrsb.w	r3, [sp, #148]	; 0x94
 801f274:	2d01      	cmp	r5, #1
 801f276:	920d      	str	r2, [sp, #52]	; 0x34
 801f278:	930e      	str	r3, [sp, #56]	; 0x38
 801f27a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801f27e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 801f282:	f8bd c080 	ldrh.w	ip, [sp, #128]	; 0x80
 801f286:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 801f28a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801f28c:	f99d 3098 	ldrsb.w	r3, [sp, #152]	; 0x98
 801f290:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f292:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 801f296:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 801f29a:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 801f29e:	d165      	bne.n	801f36c <st_sssa8_ch_convolve_1x1+0x108>
 801f2a0:	2901      	cmp	r1, #1
 801f2a2:	d163      	bne.n	801f36c <st_sssa8_ch_convolve_1x1+0x108>
 801f2a4:	ea56 0100 	orrs.w	r1, r6, r0
 801f2a8:	d160      	bne.n	801f36c <st_sssa8_ch_convolve_1x1+0x108>
 801f2aa:	f1bc 0f01 	cmp.w	ip, #1
 801f2ae:	d15d      	bne.n	801f36c <st_sssa8_ch_convolve_1x1+0x108>
 801f2b0:	f1be 0f01 	cmp.w	lr, #1
 801f2b4:	d15a      	bne.n	801f36c <st_sssa8_ch_convolve_1x1+0x108>
 801f2b6:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801f2ba:	ebc7 7c87 	rsb	ip, r7, r7, lsl #30
 801f2be:	eb09 0807 	add.w	r8, r9, r7
 801f2c2:	e9d2 1200 	ldrd	r1, r2, [r2]
 801f2c6:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 801f2ca:	920f      	str	r2, [sp, #60]	; 0x3c
 801f2cc:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 801f2d0:	2f00      	cmp	r7, #0
 801f2d2:	d048      	beq.n	801f366 <st_sssa8_ch_convolve_1x1+0x102>
 801f2d4:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 801f2d8:	f1ac 0604 	sub.w	r6, ip, #4
 801f2dc:	f04f 0e01 	mov.w	lr, #1
 801f2e0:	eb04 050b 	add.w	r5, r4, fp
 801f2e4:	f934 2b02 	ldrsh.w	r2, [r4], #2
 801f2e8:	1e51      	subs	r1, r2, #1
 801f2ea:	fa0e f002 	lsl.w	r0, lr, r2
 801f2ee:	fa03 f202 	lsl.w	r2, r3, r2
 801f2f2:	b289      	uxth	r1, r1
 801f2f4:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 801f2f8:	2914      	cmp	r1, #20
 801f2fa:	d82f      	bhi.n	801f35c <st_sssa8_ch_convolve_1x1+0xf8>
 801f2fc:	42a5      	cmp	r5, r4
 801f2fe:	f846 2f04 	str.w	r2, [r6, #4]!
 801f302:	d1ef      	bne.n	801f2e4 <st_sssa8_ch_convolve_1x1+0x80>
 801f304:	462c      	mov	r4, r5
 801f306:	44cc      	add	ip, r9
 801f308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f30a:	f06f 0e09 	mvn.w	lr, #9
 801f30e:	fb07 f50a 	mul.w	r5, r7, sl
 801f312:	ebac 0609 	sub.w	r6, ip, r9
 801f316:	eba4 040b 	sub.w	r4, r4, fp
 801f31a:	fb0e 3c07 	mla	ip, lr, r7, r3
 801f31e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f320:	9401      	str	r4, [sp, #4]
 801f322:	ebbc 0f45 	cmp.w	ip, r5, lsl #1
 801f326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f328:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f32a:	bfac      	ite	ge
 801f32c:	4644      	movge	r4, r8
 801f32e:	2400      	movlt	r4, #0
 801f330:	9606      	str	r6, [sp, #24]
 801f332:	f8cd 801c 	str.w	r8, [sp, #28]
 801f336:	9703      	str	r7, [sp, #12]
 801f338:	9408      	str	r4, [sp, #32]
 801f33a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f33e:	e9cd a504 	strd	sl, r5, [sp, #16]
 801f342:	fb02 f101 	mul.w	r1, r2, r1
 801f346:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801f348:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f34a:	9102      	str	r1, [sp, #8]
 801f34c:	9500      	str	r5, [sp, #0]
 801f34e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f350:	f000 ffa6 	bl	80202a0 <st_sssa8_ch_nn_mat_mult_nt_t>
 801f354:	2000      	movs	r0, #0
 801f356:	b011      	add	sp, #68	; 0x44
 801f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f35c:	42a5      	cmp	r5, r4
 801f35e:	f846 3f04 	str.w	r3, [r6, #4]!
 801f362:	d1bf      	bne.n	801f2e4 <st_sssa8_ch_convolve_1x1+0x80>
 801f364:	e7ce      	b.n	801f304 <st_sssa8_ch_convolve_1x1+0xa0>
 801f366:	46bb      	mov	fp, r7
 801f368:	4613      	mov	r3, r2
 801f36a:	e7ce      	b.n	801f30a <st_sssa8_ch_convolve_1x1+0xa6>
 801f36c:	f06f 0002 	mvn.w	r0, #2
 801f370:	e7f1      	b.n	801f356 <st_sssa8_ch_convolve_1x1+0xf2>
 801f372:	bf00      	nop

0801f374 <ai_padding_opt_init>:
 801f374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f378:	2600      	movs	r6, #0
 801f37a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801f37e:	e9c0 6600 	strd	r6, r6, [r0]
 801f382:	6086      	str	r6, [r0, #8]
 801f384:	689d      	ldr	r5, [r3, #8]
 801f386:	690c      	ldr	r4, [r1, #16]
 801f388:	42b5      	cmp	r5, r6
 801f38a:	dd21      	ble.n	801f3d0 <ai_padding_opt_init+0x5c>
 801f38c:	4264      	negs	r4, r4
 801f38e:	46b0      	mov	r8, r6
 801f390:	46b6      	mov	lr, r6
 801f392:	46b1      	mov	r9, r6
 801f394:	4637      	mov	r7, r6
 801f396:	e00f      	b.n	801f3b8 <ai_padding_opt_init+0x44>
 801f398:	6895      	ldr	r5, [r2, #8]
 801f39a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f39e:	1b2d      	subs	r5, r5, r4
 801f3a0:	42b5      	cmp	r5, r6
 801f3a2:	da10      	bge.n	801f3c6 <ai_padding_opt_init+0x52>
 801f3a4:	f10e 0e01 	add.w	lr, lr, #1
 801f3a8:	f8c0 e008 	str.w	lr, [r0, #8]
 801f3ac:	3701      	adds	r7, #1
 801f3ae:	689d      	ldr	r5, [r3, #8]
 801f3b0:	688e      	ldr	r6, [r1, #8]
 801f3b2:	42bd      	cmp	r5, r7
 801f3b4:	4434      	add	r4, r6
 801f3b6:	dd0e      	ble.n	801f3d6 <ai_padding_opt_init+0x62>
 801f3b8:	2c00      	cmp	r4, #0
 801f3ba:	daed      	bge.n	801f398 <ai_padding_opt_init+0x24>
 801f3bc:	f109 0901 	add.w	r9, r9, #1
 801f3c0:	f8c0 9000 	str.w	r9, [r0]
 801f3c4:	e7f2      	b.n	801f3ac <ai_padding_opt_init+0x38>
 801f3c6:	f108 0801 	add.w	r8, r8, #1
 801f3ca:	f8c0 8004 	str.w	r8, [r0, #4]
 801f3ce:	e7ed      	b.n	801f3ac <ai_padding_opt_init+0x38>
 801f3d0:	46b6      	mov	lr, r6
 801f3d2:	46b0      	mov	r8, r6
 801f3d4:	46b1      	mov	r9, r6
 801f3d6:	2500      	movs	r5, #0
 801f3d8:	e9c0 9803 	strd	r9, r8, [r0, #12]
 801f3dc:	e9c0 e505 	strd	lr, r5, [r0, #20]
 801f3e0:	e9c0 5507 	strd	r5, r5, [r0, #28]
 801f3e4:	685e      	ldr	r6, [r3, #4]
 801f3e6:	694c      	ldr	r4, [r1, #20]
 801f3e8:	42ae      	cmp	r6, r5
 801f3ea:	f1c4 0400 	rsb	r4, r4, #0
 801f3ee:	dc0f      	bgt.n	801f410 <ai_padding_opt_init+0x9c>
 801f3f0:	e018      	b.n	801f424 <ai_padding_opt_init+0xb0>
 801f3f2:	6856      	ldr	r6, [r2, #4]
 801f3f4:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801f3f8:	1b36      	subs	r6, r6, r4
 801f3fa:	42be      	cmp	r6, r7
 801f3fc:	da0e      	bge.n	801f41c <ai_padding_opt_init+0xa8>
 801f3fe:	6a06      	ldr	r6, [r0, #32]
 801f400:	3601      	adds	r6, #1
 801f402:	6206      	str	r6, [r0, #32]
 801f404:	3501      	adds	r5, #1
 801f406:	685e      	ldr	r6, [r3, #4]
 801f408:	68cf      	ldr	r7, [r1, #12]
 801f40a:	42ae      	cmp	r6, r5
 801f40c:	443c      	add	r4, r7
 801f40e:	dd09      	ble.n	801f424 <ai_padding_opt_init+0xb0>
 801f410:	2c00      	cmp	r4, #0
 801f412:	daee      	bge.n	801f3f2 <ai_padding_opt_init+0x7e>
 801f414:	6986      	ldr	r6, [r0, #24]
 801f416:	3601      	adds	r6, #1
 801f418:	6186      	str	r6, [r0, #24]
 801f41a:	e7f3      	b.n	801f404 <ai_padding_opt_init+0x90>
 801f41c:	69c6      	ldr	r6, [r0, #28]
 801f41e:	3601      	adds	r6, #1
 801f420:	61c6      	str	r6, [r0, #28]
 801f422:	e7ef      	b.n	801f404 <ai_padding_opt_init+0x90>
 801f424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801f428 <ai_padding_opt_phase1>:
 801f428:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 801f42c:	b933      	cbnz	r3, 801f43c <ai_padding_opt_phase1+0x14>
 801f42e:	b992      	cbnz	r2, 801f456 <ai_padding_opt_phase1+0x2e>
 801f430:	6a03      	ldr	r3, [r0, #32]
 801f432:	2201      	movs	r2, #1
 801f434:	3b01      	subs	r3, #1
 801f436:	8482      	strh	r2, [r0, #36]	; 0x24
 801f438:	6203      	str	r3, [r0, #32]
 801f43a:	e005      	b.n	801f448 <ai_padding_opt_phase1+0x20>
 801f43c:	2a00      	cmp	r2, #0
 801f43e:	d0f7      	beq.n	801f430 <ai_padding_opt_phase1+0x8>
 801f440:	3b01      	subs	r3, #1
 801f442:	2201      	movs	r2, #1
 801f444:	6183      	str	r3, [r0, #24]
 801f446:	8482      	strh	r2, [r0, #36]	; 0x24
 801f448:	6943      	ldr	r3, [r0, #20]
 801f44a:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 801f44e:	6083      	str	r3, [r0, #8]
 801f450:	e9c0 1200 	strd	r1, r2, [r0]
 801f454:	4770      	bx	lr
 801f456:	3a01      	subs	r2, #1
 801f458:	8483      	strh	r3, [r0, #36]	; 0x24
 801f45a:	61c2      	str	r2, [r0, #28]
 801f45c:	e7f4      	b.n	801f448 <ai_padding_opt_phase1+0x20>
 801f45e:	bf00      	nop

0801f460 <st_uint8_fill>:
 801f460:	078b      	lsls	r3, r1, #30
 801f462:	d008      	beq.n	801f476 <st_uint8_fill+0x16>
 801f464:	b90a      	cbnz	r2, 801f46a <st_uint8_fill+0xa>
 801f466:	e01f      	b.n	801f4a8 <st_uint8_fill+0x48>
 801f468:	b1fa      	cbz	r2, 801f4aa <st_uint8_fill+0x4a>
 801f46a:	f801 0b01 	strb.w	r0, [r1], #1
 801f46e:	078b      	lsls	r3, r1, #30
 801f470:	f102 32ff 	add.w	r2, r2, #4294967295
 801f474:	d1f8      	bne.n	801f468 <st_uint8_fill+0x8>
 801f476:	b430      	push	{r4, r5}
 801f478:	0404      	lsls	r4, r0, #16
 801f47a:	f002 0503 	and.w	r5, r2, #3
 801f47e:	0893      	lsrs	r3, r2, #2
 801f480:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 801f484:	ea44 0400 	orr.w	r4, r4, r0
 801f488:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 801f48c:	d010      	beq.n	801f4b0 <st_uint8_fill+0x50>
 801f48e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f492:	f841 4b04 	str.w	r4, [r1], #4
 801f496:	4299      	cmp	r1, r3
 801f498:	d1fb      	bne.n	801f492 <st_uint8_fill+0x32>
 801f49a:	b13d      	cbz	r5, 801f4ac <st_uint8_fill+0x4c>
 801f49c:	462a      	mov	r2, r5
 801f49e:	4601      	mov	r1, r0
 801f4a0:	4618      	mov	r0, r3
 801f4a2:	bc30      	pop	{r4, r5}
 801f4a4:	f002 beb2 	b.w	802220c <memset>
 801f4a8:	4770      	bx	lr
 801f4aa:	4770      	bx	lr
 801f4ac:	bc30      	pop	{r4, r5}
 801f4ae:	4770      	bx	lr
 801f4b0:	460b      	mov	r3, r1
 801f4b2:	2d00      	cmp	r5, #0
 801f4b4:	d1f2      	bne.n	801f49c <st_uint8_fill+0x3c>
 801f4b6:	e7f9      	b.n	801f4ac <st_uint8_fill+0x4c>

0801f4b8 <st_sssa8_ch_nn_mat_mult_kernel>:
 801f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4bc:	b09f      	sub	sp, #124	; 0x7c
 801f4be:	4683      	mov	fp, r0
 801f4c0:	460f      	mov	r7, r1
 801f4c2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801f4c4:	9113      	str	r1, [sp, #76]	; 0x4c
 801f4c6:	0859      	lsrs	r1, r3, #1
 801f4c8:	eb00 0503 	add.w	r5, r0, r3
 801f4cc:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 801f4d0:	931c      	str	r3, [sp, #112]	; 0x70
 801f4d2:	921a      	str	r2, [sp, #104]	; 0x68
 801f4d4:	951b      	str	r5, [sp, #108]	; 0x6c
 801f4d6:	900d      	str	r0, [sp, #52]	; 0x34
 801f4d8:	f000 827a 	beq.w	801f9d0 <st_sssa8_ch_nn_mat_mult_kernel+0x518>
 801f4dc:	4614      	mov	r4, r2
 801f4de:	3901      	subs	r1, #1
 801f4e0:	f1a0 0210 	sub.w	r2, r0, #16
 801f4e4:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 801f4e8:	4623      	mov	r3, r4
 801f4ea:	1ec4      	subs	r4, r0, #3
 801f4ec:	0912      	lsrs	r2, r2, #4
 801f4ee:	f8df a78c 	ldr.w	sl, [pc, #1932]	; 801fc7c <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 801f4f2:	3310      	adds	r3, #16
 801f4f4:	9415      	str	r4, [sp, #84]	; 0x54
 801f4f6:	b28c      	uxth	r4, r1
 801f4f8:	3201      	adds	r2, #1
 801f4fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f4fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f500:	9616      	str	r6, [sp, #88]	; 0x58
 801f502:	3108      	adds	r1, #8
 801f504:	941d      	str	r4, [sp, #116]	; 0x74
 801f506:	9314      	str	r3, [sp, #80]	; 0x50
 801f508:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f50a:	910e      	str	r1, [sp, #56]	; 0x38
 801f50c:	3308      	adds	r3, #8
 801f50e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f510:	f8cd b004 	str.w	fp, [sp, #4]
 801f514:	930c      	str	r3, [sp, #48]	; 0x30
 801f516:	0153      	lsls	r3, r2, #5
 801f518:	0112      	lsls	r2, r2, #4
 801f51a:	3104      	adds	r1, #4
 801f51c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f51e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f520:	9108      	str	r1, [sp, #32]
 801f522:	3208      	adds	r2, #8
 801f524:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f526:	9209      	str	r2, [sp, #36]	; 0x24
 801f528:	18fa      	adds	r2, r7, r3
 801f52a:	18f3      	adds	r3, r6, r3
 801f52c:	3102      	adds	r1, #2
 801f52e:	9218      	str	r2, [sp, #96]	; 0x60
 801f530:	9317      	str	r3, [sp, #92]	; 0x5c
 801f532:	1cab      	adds	r3, r5, #2
 801f534:	910a      	str	r1, [sp, #40]	; 0x28
 801f536:	930b      	str	r3, [sp, #44]	; 0x2c
 801f538:	1f03      	subs	r3, r0, #4
 801f53a:	9319      	str	r3, [sp, #100]	; 0x64
 801f53c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f53e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f540:	9c01      	ldr	r4, [sp, #4]
 801f542:	f853 9c08 	ldr.w	r9, [r3, #-8]
 801f546:	2a0f      	cmp	r2, #15
 801f548:	eb04 0002 	add.w	r0, r4, r2
 801f54c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801f550:	9003      	str	r0, [sp, #12]
 801f552:	461f      	mov	r7, r3
 801f554:	f340 8361 	ble.w	801fc1a <st_sssa8_ch_nn_mat_mult_kernel+0x762>
 801f558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f55a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f55e:	18a2      	adds	r2, r4, r2
 801f560:	9901      	ldr	r1, [sp, #4]
 801f562:	461c      	mov	r4, r3
 801f564:	9002      	str	r0, [sp, #8]
 801f566:	9204      	str	r2, [sp, #16]
 801f568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f56a:	9200      	str	r2, [sp, #0]
 801f56c:	464a      	mov	r2, r9
 801f56e:	f8d1 b000 	ldr.w	fp, [r1]
 801f572:	9802      	ldr	r0, [sp, #8]
 801f574:	ea4f 2c3b 	mov.w	ip, fp, ror #8
 801f578:	6801      	ldr	r1, [r0, #0]
 801f57a:	fa2f f38c 	sxtb16	r3, ip
 801f57e:	9800      	ldr	r0, [sp, #0]
 801f580:	ea03 050a 	and.w	r5, r3, sl
 801f584:	fa2f fb8b 	sxtb16	fp, fp
 801f588:	6806      	ldr	r6, [r0, #0]
 801f58a:	fa1f fc8b 	uxth.w	ip, fp
 801f58e:	ea4f 2831 	mov.w	r8, r1, ror #8
 801f592:	ea45 4b1b 	orr.w	fp, r5, fp, lsr #16
 801f596:	fa2f f888 	sxtb16	r8, r8
 801f59a:	fa2f f181 	sxtb16	r1, r1
 801f59e:	ea08 000a 	and.w	r0, r8, sl
 801f5a2:	b28d      	uxth	r5, r1
 801f5a4:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
 801f5a8:	f8de 3000 	ldr.w	r3, [lr]
 801f5ac:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 801f5b0:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 801f5b4:	fb2c 9906 	smlad	r9, ip, r6, r9
 801f5b8:	fb2c 2203 	smlad	r2, ip, r3, r2
 801f5bc:	fb25 7706 	smlad	r7, r5, r6, r7
 801f5c0:	fb25 4003 	smlad	r0, r5, r3, r4
 801f5c4:	9b00      	ldr	r3, [sp, #0]
 801f5c6:	f8de c004 	ldr.w	ip, [lr, #4]
 801f5ca:	685e      	ldr	r6, [r3, #4]
 801f5cc:	fb2b 9906 	smlad	r9, fp, r6, r9
 801f5d0:	fb2b 240c 	smlad	r4, fp, ip, r2
 801f5d4:	fb21 7706 	smlad	r7, r1, r6, r7
 801f5d8:	fb21 000c 	smlad	r0, r1, ip, r0
 801f5dc:	9a01      	ldr	r2, [sp, #4]
 801f5de:	9902      	ldr	r1, [sp, #8]
 801f5e0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801f5e4:	684d      	ldr	r5, [r1, #4]
 801f5e6:	ea4f 2238 	mov.w	r2, r8, ror #8
 801f5ea:	689e      	ldr	r6, [r3, #8]
 801f5ec:	fa2f fb82 	sxtb16	fp, r2
 801f5f0:	fa2f f188 	sxtb16	r1, r8
 801f5f4:	ea0b 080a 	and.w	r8, fp, sl
 801f5f8:	b28a      	uxth	r2, r1
 801f5fa:	ea4f 2c35 	mov.w	ip, r5, ror #8
 801f5fe:	ea48 4811 	orr.w	r8, r8, r1, lsr #16
 801f602:	fa2f fc8c 	sxtb16	ip, ip
 801f606:	fa2f f585 	sxtb16	r5, r5
 801f60a:	ea0c 010a 	and.w	r1, ip, sl
 801f60e:	b2ab      	uxth	r3, r5
 801f610:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 801f614:	f8de b008 	ldr.w	fp, [lr, #8]
 801f618:	ea41 4515 	orr.w	r5, r1, r5, lsr #16
 801f61c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 801f620:	fb22 9906 	smlad	r9, r2, r6, r9
 801f624:	fb22 420b 	smlad	r2, r2, fp, r4
 801f628:	fb23 7606 	smlad	r6, r3, r6, r7
 801f62c:	fb23 030b 	smlad	r3, r3, fp, r0
 801f630:	9c00      	ldr	r4, [sp, #0]
 801f632:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f636:	68e7      	ldr	r7, [r4, #12]
 801f638:	fb28 9907 	smlad	r9, r8, r7, r9
 801f63c:	fb28 2800 	smlad	r8, r8, r0, r2
 801f640:	fb25 6607 	smlad	r6, r5, r7, r6
 801f644:	fb25 3000 	smlad	r0, r5, r0, r3
 801f648:	9901      	ldr	r1, [sp, #4]
 801f64a:	9a02      	ldr	r2, [sp, #8]
 801f64c:	688b      	ldr	r3, [r1, #8]
 801f64e:	6895      	ldr	r5, [r2, #8]
 801f650:	ea4f 2133 	mov.w	r1, r3, ror #8
 801f654:	6927      	ldr	r7, [r4, #16]
 801f656:	fa2f f481 	sxtb16	r4, r1
 801f65a:	ea04 0b0a 	and.w	fp, r4, sl
 801f65e:	ea4f 2c35 	mov.w	ip, r5, ror #8
 801f662:	fa2f f383 	sxtb16	r3, r3
 801f666:	fa2f fc8c 	sxtb16	ip, ip
 801f66a:	b299      	uxth	r1, r3
 801f66c:	fa2f f585 	sxtb16	r5, r5
 801f670:	ea4b 4313 	orr.w	r3, fp, r3, lsr #16
 801f674:	ea0c 0b0a 	and.w	fp, ip, sl
 801f678:	b2aa      	uxth	r2, r5
 801f67a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801f67e:	f8de 4010 	ldr.w	r4, [lr, #16]
 801f682:	ea4b 4515 	orr.w	r5, fp, r5, lsr #16
 801f686:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801f68a:	fb21 9907 	smlad	r9, r1, r7, r9
 801f68e:	fb21 8804 	smlad	r8, r1, r4, r8
 801f692:	fb22 6707 	smlad	r7, r2, r7, r6
 801f696:	fb22 0204 	smlad	r2, r2, r4, r0
 801f69a:	9e00      	ldr	r6, [sp, #0]
 801f69c:	f8de 1014 	ldr.w	r1, [lr, #20]
 801f6a0:	f8d6 b014 	ldr.w	fp, [r6, #20]
 801f6a4:	fb23 990b 	smlad	r9, r3, fp, r9
 801f6a8:	fb23 8801 	smlad	r8, r3, r1, r8
 801f6ac:	fb25 7b0b 	smlad	fp, r5, fp, r7
 801f6b0:	fb25 2501 	smlad	r5, r5, r1, r2
 801f6b4:	9b01      	ldr	r3, [sp, #4]
 801f6b6:	69b7      	ldr	r7, [r6, #24]
 801f6b8:	68dc      	ldr	r4, [r3, #12]
 801f6ba:	f103 0110 	add.w	r1, r3, #16
 801f6be:	9b02      	ldr	r3, [sp, #8]
 801f6c0:	9101      	str	r1, [sp, #4]
 801f6c2:	68d8      	ldr	r0, [r3, #12]
 801f6c4:	3310      	adds	r3, #16
 801f6c6:	9302      	str	r3, [sp, #8]
 801f6c8:	ea4f 2334 	mov.w	r3, r4, ror #8
 801f6cc:	fa2f f283 	sxtb16	r2, r3
 801f6d0:	ea02 060a 	and.w	r6, r2, sl
 801f6d4:	ea4f 2c30 	mov.w	ip, r0, ror #8
 801f6d8:	fa2f f484 	sxtb16	r4, r4
 801f6dc:	fa2f fc8c 	sxtb16	ip, ip
 801f6e0:	b2a3      	uxth	r3, r4
 801f6e2:	fa2f f080 	sxtb16	r0, r0
 801f6e6:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 801f6ea:	ea0c 060a 	and.w	r6, ip, sl
 801f6ee:	b281      	uxth	r1, r0
 801f6f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f6f4:	f8de 2018 	ldr.w	r2, [lr, #24]
 801f6f8:	ea46 4010 	orr.w	r0, r6, r0, lsr #16
 801f6fc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801f700:	fb23 9907 	smlad	r9, r3, r7, r9
 801f704:	fb23 8302 	smlad	r3, r3, r2, r8
 801f708:	fb21 b707 	smlad	r7, r1, r7, fp
 801f70c:	fb21 5102 	smlad	r1, r1, r2, r5
 801f710:	9e00      	ldr	r6, [sp, #0]
 801f712:	f10e 0e20 	add.w	lr, lr, #32
 801f716:	f106 0220 	add.w	r2, r6, #32
 801f71a:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 801f71e:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 801f722:	9200      	str	r2, [sp, #0]
 801f724:	fb24 990b 	smlad	r9, r4, fp, r9
 801f728:	fb24 3206 	smlad	r2, r4, r6, r3
 801f72c:	fb20 770b 	smlad	r7, r0, fp, r7
 801f730:	fb20 1406 	smlad	r4, r0, r6, r1
 801f734:	9901      	ldr	r1, [sp, #4]
 801f736:	9b04      	ldr	r3, [sp, #16]
 801f738:	4299      	cmp	r1, r3
 801f73a:	f47f af18 	bne.w	801f56e <st_sssa8_ch_nn_mat_mult_kernel+0xb6>
 801f73e:	9903      	ldr	r1, [sp, #12]
 801f740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f742:	4608      	mov	r0, r1
 801f744:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f746:	9400      	str	r4, [sp, #0]
 801f748:	4418      	add	r0, r3
 801f74a:	9106      	str	r1, [sp, #24]
 801f74c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f74e:	9003      	str	r0, [sp, #12]
 801f750:	9105      	str	r1, [sp, #20]
 801f752:	9307      	str	r3, [sp, #28]
 801f754:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f756:	4283      	cmp	r3, r0
 801f758:	da68      	bge.n	801f82c <st_sssa8_ch_nn_mat_mult_kernel+0x374>
 801f75a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801f75c:	46be      	mov	lr, r7
 801f75e:	f8dd b004 	ldr.w	fp, [sp, #4]
 801f762:	1acb      	subs	r3, r1, r3
 801f764:	9903      	ldr	r1, [sp, #12]
 801f766:	f8cd b008 	str.w	fp, [sp, #8]
 801f76a:	089b      	lsrs	r3, r3, #2
 801f76c:	9312      	str	r3, [sp, #72]	; 0x48
 801f76e:	3301      	adds	r3, #1
 801f770:	9311      	str	r3, [sp, #68]	; 0x44
 801f772:	009b      	lsls	r3, r3, #2
 801f774:	e9dd c505 	ldrd	ip, r5, [sp, #20]
 801f778:	9310      	str	r3, [sp, #64]	; 0x40
 801f77a:	18cb      	adds	r3, r1, r3
 801f77c:	9304      	str	r3, [sp, #16]
 801f77e:	9b02      	ldr	r3, [sp, #8]
 801f780:	f8dc b000 	ldr.w	fp, [ip]
 801f784:	f853 4b04 	ldr.w	r4, [r3], #4
 801f788:	fa2f f084 	sxtb16	r0, r4
 801f78c:	9302      	str	r3, [sp, #8]
 801f78e:	ea4f 2634 	mov.w	r6, r4, ror #8
 801f792:	9b03      	ldr	r3, [sp, #12]
 801f794:	fa1f f880 	uxth.w	r8, r0
 801f798:	fa2f f686 	sxtb16	r6, r6
 801f79c:	f853 1b04 	ldr.w	r1, [r3], #4
 801f7a0:	ea06 040a 	and.w	r4, r6, sl
 801f7a4:	ea48 4606 	orr.w	r6, r8, r6, lsl #16
 801f7a8:	f8d5 8000 	ldr.w	r8, [r5]
 801f7ac:	9303      	str	r3, [sp, #12]
 801f7ae:	ea4f 2731 	mov.w	r7, r1, ror #8
 801f7b2:	ea44 4410 	orr.w	r4, r4, r0, lsr #16
 801f7b6:	fa2f f787 	sxtb16	r7, r7
 801f7ba:	fa2f f181 	sxtb16	r1, r1
 801f7be:	ea07 000a 	and.w	r0, r7, sl
 801f7c2:	b28b      	uxth	r3, r1
 801f7c4:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 801f7c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f7cc:	fb26 990b 	smlad	r9, r6, fp, r9
 801f7d0:	fb26 2208 	smlad	r2, r6, r8, r2
 801f7d4:	fb23 ee0b 	smlad	lr, r3, fp, lr
 801f7d8:	9800      	ldr	r0, [sp, #0]
 801f7da:	fb23 0308 	smlad	r3, r3, r8, r0
 801f7de:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f7e2:	3508      	adds	r5, #8
 801f7e4:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801f7e8:	f10c 0c08 	add.w	ip, ip, #8
 801f7ec:	fb24 9906 	smlad	r9, r4, r6, r9
 801f7f0:	fb24 2200 	smlad	r2, r4, r0, r2
 801f7f4:	fb21 ee06 	smlad	lr, r1, r6, lr
 801f7f8:	fb21 3100 	smlad	r1, r1, r0, r3
 801f7fc:	9100      	str	r1, [sp, #0]
 801f7fe:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 801f802:	4299      	cmp	r1, r3
 801f804:	d1bb      	bne.n	801f77e <st_sssa8_ch_nn_mat_mult_kernel+0x2c6>
 801f806:	9801      	ldr	r0, [sp, #4]
 801f808:	4677      	mov	r7, lr
 801f80a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f80c:	9907      	ldr	r1, [sp, #28]
 801f80e:	4420      	add	r0, r4
 801f810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f812:	3104      	adds	r1, #4
 801f814:	9001      	str	r0, [sp, #4]
 801f816:	00db      	lsls	r3, r3, #3
 801f818:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f81a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801f81e:	9107      	str	r1, [sp, #28]
 801f820:	9906      	ldr	r1, [sp, #24]
 801f822:	4419      	add	r1, r3
 801f824:	9106      	str	r1, [sp, #24]
 801f826:	9905      	ldr	r1, [sp, #20]
 801f828:	4419      	add	r1, r3
 801f82a:	9105      	str	r1, [sp, #20]
 801f82c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f82e:	9907      	ldr	r1, [sp, #28]
 801f830:	428e      	cmp	r6, r1
 801f832:	dd50      	ble.n	801f8d6 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 801f834:	9b01      	ldr	r3, [sp, #4]
 801f836:	f993 5000 	ldrsb.w	r5, [r3]
 801f83a:	1c4b      	adds	r3, r1, #1
 801f83c:	9905      	ldr	r1, [sp, #20]
 801f83e:	42b3      	cmp	r3, r6
 801f840:	f9b1 4000 	ldrsh.w	r4, [r1]
 801f844:	9906      	ldr	r1, [sp, #24]
 801f846:	fb14 9905 	smlabb	r9, r4, r5, r9
 801f84a:	f9b1 0000 	ldrsh.w	r0, [r1]
 801f84e:	9903      	ldr	r1, [sp, #12]
 801f850:	fb10 2205 	smlabb	r2, r0, r5, r2
 801f854:	f991 1000 	ldrsb.w	r1, [r1]
 801f858:	fb14 7401 	smlabb	r4, r4, r1, r7
 801f85c:	4627      	mov	r7, r4
 801f85e:	9c00      	ldr	r4, [sp, #0]
 801f860:	fb10 4101 	smlabb	r1, r0, r1, r4
 801f864:	9100      	str	r1, [sp, #0]
 801f866:	f280 8177 	bge.w	801fb58 <st_sssa8_ch_nn_mat_mult_kernel+0x6a0>
 801f86a:	9901      	ldr	r1, [sp, #4]
 801f86c:	9b07      	ldr	r3, [sp, #28]
 801f86e:	f991 5001 	ldrsb.w	r5, [r1, #1]
 801f872:	9905      	ldr	r1, [sp, #20]
 801f874:	3302      	adds	r3, #2
 801f876:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801f87a:	9906      	ldr	r1, [sp, #24]
 801f87c:	fb14 9905 	smlabb	r9, r4, r5, r9
 801f880:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801f884:	9903      	ldr	r1, [sp, #12]
 801f886:	fb10 2205 	smlabb	r2, r0, r5, r2
 801f88a:	f991 1001 	ldrsb.w	r1, [r1, #1]
 801f88e:	fb14 7401 	smlabb	r4, r4, r1, r7
 801f892:	4627      	mov	r7, r4
 801f894:	9c00      	ldr	r4, [sp, #0]
 801f896:	fb10 4101 	smlabb	r1, r0, r1, r4
 801f89a:	9100      	str	r1, [sp, #0]
 801f89c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f89e:	4299      	cmp	r1, r3
 801f8a0:	f340 81c4 	ble.w	801fc2c <st_sssa8_ch_nn_mat_mult_kernel+0x774>
 801f8a4:	9b05      	ldr	r3, [sp, #20]
 801f8a6:	9d01      	ldr	r5, [sp, #4]
 801f8a8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f8ac:	9b03      	ldr	r3, [sp, #12]
 801f8ae:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801f8b2:	9b06      	ldr	r3, [sp, #24]
 801f8b4:	fb11 7600 	smlabb	r6, r1, r0, r7
 801f8b8:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801f8bc:	4637      	mov	r7, r6
 801f8be:	9e00      	ldr	r6, [sp, #0]
 801f8c0:	f995 3002 	ldrsb.w	r3, [r5, #2]
 801f8c4:	fb14 6000 	smlabb	r0, r4, r0, r6
 801f8c8:	fb11 9903 	smlabb	r9, r1, r3, r9
 801f8cc:	9000      	str	r0, [sp, #0]
 801f8ce:	fb14 2203 	smlabb	r2, r4, r3, r2
 801f8d2:	1ce8      	adds	r0, r5, #3
 801f8d4:	9001      	str	r0, [sp, #4]
 801f8d6:	9b08      	ldr	r3, [sp, #32]
 801f8d8:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 801f8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8de:	2815      	cmp	r0, #21
 801f8e0:	f853 4c08 	ldr.w	r4, [r3, #-8]
 801f8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8e6:	f853 5c08 	ldr.w	r5, [r3, #-8]
 801f8ea:	f340 811a 	ble.w	801fb22 <st_sssa8_ch_nn_mat_mult_kernel+0x66a>
 801f8ee:	1e83      	subs	r3, r0, #2
 801f8f0:	2101      	movs	r1, #1
 801f8f2:	3801      	subs	r0, #1
 801f8f4:	fa01 f303 	lsl.w	r3, r1, r3
 801f8f8:	fb59 3904 	smmla	r9, r9, r4, r3
 801f8fc:	fa49 f900 	asr.w	r9, r9, r0
 801f900:	fb52 3304 	smmla	r3, r2, r4, r3
 801f904:	44a9      	add	r9, r5
 801f906:	f309 0907 	ssat	r9, #8, r9
 801f90a:	4103      	asrs	r3, r0
 801f90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f90e:	442b      	add	r3, r5
 801f910:	f802 9c02 	strb.w	r9, [r2, #-2]
 801f914:	f303 0307 	ssat	r3, #8, r3
 801f918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f91a:	f802 3c02 	strb.w	r3, [r2, #-2]
 801f91e:	9b08      	ldr	r3, [sp, #32]
 801f920:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 801f924:	2b15      	cmp	r3, #21
 801f926:	f340 80da 	ble.w	801fade <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 801f92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f92c:	1e9c      	subs	r4, r3, #2
 801f92e:	3b01      	subs	r3, #1
 801f930:	9900      	ldr	r1, [sp, #0]
 801f932:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f936:	2201      	movs	r2, #1
 801f938:	fa02 f404 	lsl.w	r4, r2, r4
 801f93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f93e:	fb57 4800 	smmla	r8, r7, r0, r4
 801f942:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801f946:	fa48 f803 	asr.w	r8, r8, r3
 801f94a:	fb51 4000 	smmla	r0, r1, r0, r4
 801f94e:	4490      	add	r8, r2
 801f950:	f308 0807 	ssat	r8, #8, r8
 801f954:	4118      	asrs	r0, r3
 801f956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f958:	4410      	add	r0, r2
 801f95a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f95e:	f300 0007 	ssat	r0, #8, r0
 801f962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f964:	f803 0c01 	strb.w	r0, [r3, #-1]
 801f968:	9a01      	ldr	r2, [sp, #4]
 801f96a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f96e:	440a      	add	r2, r1
 801f970:	3308      	adds	r3, #8
 801f972:	9201      	str	r2, [sp, #4]
 801f974:	9a08      	ldr	r2, [sp, #32]
 801f976:	930e      	str	r3, [sp, #56]	; 0x38
 801f978:	3204      	adds	r2, #4
 801f97a:	9208      	str	r2, [sp, #32]
 801f97c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f97e:	3208      	adds	r2, #8
 801f980:	920c      	str	r2, [sp, #48]	; 0x30
 801f982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f984:	3202      	adds	r2, #2
 801f986:	920a      	str	r2, [sp, #40]	; 0x28
 801f988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f98a:	3208      	adds	r2, #8
 801f98c:	9209      	str	r2, [sp, #36]	; 0x24
 801f98e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f990:	3202      	adds	r2, #2
 801f992:	920b      	str	r2, [sp, #44]	; 0x2c
 801f994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f996:	429a      	cmp	r2, r3
 801f998:	f47f add1 	bne.w	801f53e <st_sssa8_ch_nn_mat_mult_kernel+0x86>
 801f99c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f99e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f9a0:	3301      	adds	r3, #1
 801f9a2:	f8dd b004 	ldr.w	fp, [sp, #4]
 801f9a6:	00da      	lsls	r2, r3, #3
 801f9a8:	0059      	lsls	r1, r3, #1
 801f9aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f9ae:	9329      	str	r3, [sp, #164]	; 0xa4
 801f9b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f9b2:	4413      	add	r3, r2
 801f9b4:	931a      	str	r3, [sp, #104]	; 0x68
 801f9b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f9b8:	4413      	add	r3, r2
 801f9ba:	932a      	str	r3, [sp, #168]	; 0xa8
 801f9bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f9be:	4413      	add	r3, r2
 801f9c0:	932b      	str	r3, [sp, #172]	; 0xac
 801f9c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f9c4:	440b      	add	r3, r1
 801f9c6:	932c      	str	r3, [sp, #176]	; 0xb0
 801f9c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f9ca:	440b      	add	r3, r1
 801f9cc:	931b      	str	r3, [sp, #108]	; 0x6c
 801f9ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f9d0:	07da      	lsls	r2, r3, #31
 801f9d2:	f140 811c 	bpl.w	801fc0e <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 801f9d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f9d8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f9da:	6818      	ldr	r0, [r3, #0]
 801f9dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9de:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 801f9e2:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 801f9e6:	f000 8146 	beq.w	801fc76 <st_sssa8_ch_nn_mat_mult_kernel+0x7be>
 801f9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f9ee:	46cc      	mov	ip, r9
 801f9f0:	4602      	mov	r2, r0
 801f9f2:	f8df 8288 	ldr.w	r8, [pc, #648]	; 801fc7c <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 801f9f6:	fa1f fa8a 	uxth.w	sl, sl
 801f9fa:	f10a 0a01 	add.w	sl, sl, #1
 801f9fe:	eb0b 0e8a 	add.w	lr, fp, sl, lsl #2
 801fa02:	f85b 1b04 	ldr.w	r1, [fp], #4
 801fa06:	fa2f f481 	sxtb16	r4, r1
 801fa0a:	ea4f 2331 	mov.w	r3, r1, ror #8
 801fa0e:	683d      	ldr	r5, [r7, #0]
 801fa10:	b2a1      	uxth	r1, r4
 801fa12:	fa2f f383 	sxtb16	r3, r3
 801fa16:	ea03 0608 	and.w	r6, r3, r8
 801fa1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801fa1e:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 801fa22:	fb23 0505 	smlad	r5, r3, r5, r0
 801fa26:	f8dc 1000 	ldr.w	r1, [ip]
 801fa2a:	fb23 2301 	smlad	r3, r3, r1, r2
 801fa2e:	6878      	ldr	r0, [r7, #4]
 801fa30:	f10c 0c08 	add.w	ip, ip, #8
 801fa34:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 801fa38:	3708      	adds	r7, #8
 801fa3a:	fb24 5000 	smlad	r0, r4, r0, r5
 801fa3e:	fb24 3202 	smlad	r2, r4, r2, r3
 801fa42:	45de      	cmp	lr, fp
 801fa44:	d1dd      	bne.n	801fa02 <st_sssa8_ch_nn_mat_mult_kernel+0x54a>
 801fa46:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801fa4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fa4c:	4453      	add	r3, sl
 801fa4e:	44d1      	add	r9, sl
 801fa50:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa54:	f013 0303 	ands.w	r3, r3, #3
 801fa58:	d01f      	beq.n	801fa9a <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 801fa5a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fa5c:	2b01      	cmp	r3, #1
 801fa5e:	f99b 1000 	ldrsb.w	r1, [fp]
 801fa62:	8835      	ldrh	r5, [r6, #0]
 801fa64:	f8b9 4000 	ldrh.w	r4, [r9]
 801fa68:	fb15 0001 	smlabb	r0, r5, r1, r0
 801fa6c:	fb14 2201 	smlabb	r2, r4, r1, r2
 801fa70:	d013      	beq.n	801fa9a <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 801fa72:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 801fa76:	2b02      	cmp	r3, #2
 801fa78:	8875      	ldrh	r5, [r6, #2]
 801fa7a:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 801fa7e:	fb15 0001 	smlabb	r0, r5, r1, r0
 801fa82:	fb14 2201 	smlabb	r2, r4, r1, r2
 801fa86:	d008      	beq.n	801fa9a <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 801fa88:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 801fa8c:	88b4      	ldrh	r4, [r6, #4]
 801fa8e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 801fa92:	fb14 0003 	smlabb	r0, r4, r3, r0
 801fa96:	fb11 2203 	smlabb	r2, r1, r3, r2
 801fa9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fa9c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801fa9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801faa2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801faa4:	6825      	ldr	r5, [r4, #0]
 801faa6:	2b15      	cmp	r3, #21
 801faa8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801faaa:	f101 0101 	add.w	r1, r1, #1
 801faae:	6824      	ldr	r4, [r4, #0]
 801fab0:	f300 8097 	bgt.w	801fbe2 <st_sssa8_ch_nn_mat_mult_kernel+0x72a>
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	f340 80bd 	ble.w	801fc34 <st_sssa8_ch_nn_mat_mult_kernel+0x77c>
 801faba:	0040      	lsls	r0, r0, #1
 801fabc:	0052      	lsls	r2, r2, #1
 801fabe:	fb50 4005 	smmla	r0, r0, r5, r4
 801fac2:	fb52 4205 	smmla	r2, r2, r5, r4
 801fac6:	fa40 f303 	asr.w	r3, r0, r3
 801faca:	f303 0307 	ssat	r3, #8, r3
 801face:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801fad0:	7003      	strb	r3, [r0, #0]
 801fad2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fad8:	fa42 f303 	asr.w	r3, r2, r3
 801fadc:	e091      	b.n	801fc02 <st_sssa8_ch_nn_mat_mult_kernel+0x74a>
 801fade:	2b00      	cmp	r3, #0
 801fae0:	dd3e      	ble.n	801fb60 <st_sssa8_ch_nn_mat_mult_kernel+0x6a8>
 801fae2:	9900      	ldr	r1, [sp, #0]
 801fae4:	ea4f 0847 	mov.w	r8, r7, lsl #1
 801fae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801faea:	0048      	lsls	r0, r1, #1
 801faec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801faee:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801faf2:	f851 4c04 	ldr.w	r4, [r1, #-4]
 801faf6:	fb58 4802 	smmla	r8, r8, r2, r4
 801fafa:	fb50 4002 	smmla	r0, r0, r2, r4
 801fafe:	fa48 f303 	asr.w	r3, r8, r3
 801fb02:	f303 0307 	ssat	r3, #8, r3
 801fb06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb08:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fb0c:	9b08      	ldr	r3, [sp, #32]
 801fb0e:	f933 4c02 	ldrsh.w	r4, [r3, #-2]
 801fb12:	fa40 f404 	asr.w	r4, r0, r4
 801fb16:	f304 0407 	ssat	r4, #8, r4
 801fb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb1c:	f803 4c01 	strb.w	r4, [r3, #-1]
 801fb20:	e722      	b.n	801f968 <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 801fb22:	2800      	cmp	r0, #0
 801fb24:	dd3f      	ble.n	801fba6 <st_sssa8_ch_nn_mat_mult_kernel+0x6ee>
 801fb26:	0053      	lsls	r3, r2, #1
 801fb28:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fb2c:	fb53 5204 	smmla	r2, r3, r4, r5
 801fb30:	fb59 5904 	smmla	r9, r9, r4, r5
 801fb34:	fa49 f900 	asr.w	r9, r9, r0
 801fb38:	f309 0907 	ssat	r9, #8, r9
 801fb3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb3e:	f803 9c02 	strb.w	r9, [r3, #-2]
 801fb42:	9b08      	ldr	r3, [sp, #32]
 801fb44:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 801fb48:	fa42 f303 	asr.w	r3, r2, r3
 801fb4c:	f303 0307 	ssat	r3, #8, r3
 801fb50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fb52:	f802 3c02 	strb.w	r3, [r2, #-2]
 801fb56:	e6e2      	b.n	801f91e <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 801fb58:	9b01      	ldr	r3, [sp, #4]
 801fb5a:	3301      	adds	r3, #1
 801fb5c:	9301      	str	r3, [sp, #4]
 801fb5e:	e6ba      	b.n	801f8d6 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 801fb60:	f1c3 0301 	rsb	r3, r3, #1
 801fb64:	4639      	mov	r1, r7
 801fb66:	4099      	lsls	r1, r3
 801fb68:	f301 011f 	ssat	r1, #32, r1
 801fb6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb6e:	f852 6c04 	ldr.w	r6, [r2, #-4]
 801fb72:	fb51 f116 	smmulr	r1, r1, r6
 801fb76:	9800      	ldr	r0, [sp, #0]
 801fb78:	4098      	lsls	r0, r3
 801fb7a:	f300 001f 	ssat	r0, #32, r0
 801fb7e:	fb50 f016 	smmulr	r0, r0, r6
 801fb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb84:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801fb88:	440a      	add	r2, r1
 801fb8a:	f302 0207 	ssat	r2, #8, r2
 801fb8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fb90:	f801 2c01 	strb.w	r2, [r1, #-1]
 801fb94:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801fb98:	4403      	add	r3, r0
 801fb9a:	f303 0307 	ssat	r3, #8, r3
 801fb9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fba0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fba4:	e6e0      	b.n	801f968 <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 801fba6:	f1c0 0001 	rsb	r0, r0, #1
 801fbaa:	fa09 f600 	lsl.w	r6, r9, r0
 801fbae:	f306 061f 	ssat	r6, #32, r6
 801fbb2:	fb56 f614 	smmulr	r6, r6, r4
 801fbb6:	fa02 f000 	lsl.w	r0, r2, r0
 801fbba:	f300 001f 	ssat	r0, #32, r0
 801fbbe:	fb50 f414 	smmulr	r4, r0, r4
 801fbc2:	4435      	add	r5, r6
 801fbc4:	f305 0507 	ssat	r5, #8, r5
 801fbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fbca:	f803 5c02 	strb.w	r5, [r3, #-2]
 801fbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbd0:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801fbd4:	4423      	add	r3, r4
 801fbd6:	f303 0307 	ssat	r3, #8, r3
 801fbda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fbdc:	f802 3c02 	strb.w	r3, [r2, #-2]
 801fbe0:	e69d      	b.n	801f91e <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 801fbe2:	1e9f      	subs	r7, r3, #2
 801fbe4:	1e5e      	subs	r6, r3, #1
 801fbe6:	2301      	movs	r3, #1
 801fbe8:	40bb      	lsls	r3, r7
 801fbea:	fb50 3005 	smmla	r0, r0, r5, r3
 801fbee:	4130      	asrs	r0, r6
 801fbf0:	fb52 3305 	smmla	r3, r2, r5, r3
 801fbf4:	1902      	adds	r2, r0, r4
 801fbf6:	f302 0207 	ssat	r2, #8, r2
 801fbfa:	4133      	asrs	r3, r6
 801fbfc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801fbfe:	4423      	add	r3, r4
 801fc00:	7002      	strb	r2, [r0, #0]
 801fc02:	f303 0307 	ssat	r3, #8, r3
 801fc06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fc08:	912c      	str	r1, [sp, #176]	; 0xb0
 801fc0a:	7013      	strb	r3, [r2, #0]
 801fc0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fc0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fc10:	4413      	add	r3, r2
 801fc12:	4618      	mov	r0, r3
 801fc14:	b01f      	add	sp, #124	; 0x7c
 801fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fc1c:	464a      	mov	r2, r9
 801fc1e:	9700      	str	r7, [sp, #0]
 801fc20:	9306      	str	r3, [sp, #24]
 801fc22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fc24:	9305      	str	r3, [sp, #20]
 801fc26:	2300      	movs	r3, #0
 801fc28:	9307      	str	r3, [sp, #28]
 801fc2a:	e593      	b.n	801f754 <st_sssa8_ch_nn_mat_mult_kernel+0x29c>
 801fc2c:	9b01      	ldr	r3, [sp, #4]
 801fc2e:	3302      	adds	r3, #2
 801fc30:	9301      	str	r3, [sp, #4]
 801fc32:	e650      	b.n	801f8d6 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 801fc34:	f1c3 0601 	rsb	r6, r3, #1
 801fc38:	fa00 f306 	lsl.w	r3, r0, r6
 801fc3c:	f303 031f 	ssat	r3, #32, r3
 801fc40:	fb53 f315 	smmulr	r3, r3, r5
 801fc44:	40b2      	lsls	r2, r6
 801fc46:	f302 021f 	ssat	r2, #32, r2
 801fc4a:	fb52 f215 	smmulr	r2, r2, r5
 801fc4e:	4423      	add	r3, r4
 801fc50:	f303 0307 	ssat	r3, #8, r3
 801fc54:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801fc56:	7003      	strb	r3, [r0, #0]
 801fc58:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	4413      	add	r3, r2
 801fc5e:	f303 0307 	ssat	r3, #8, r3
 801fc62:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fc64:	912c      	str	r1, [sp, #176]	; 0xb0
 801fc66:	7013      	strb	r3, [r2, #0]
 801fc68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fc6a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fc6c:	4413      	add	r3, r2
 801fc6e:	4618      	mov	r0, r3
 801fc70:	b01f      	add	sp, #124	; 0x7c
 801fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc76:	4602      	mov	r2, r0
 801fc78:	e6ec      	b.n	801fa54 <st_sssa8_ch_nn_mat_mult_kernel+0x59c>
 801fc7a:	bf00      	nop
 801fc7c:	ffff0000 	.word	0xffff0000

0801fc80 <st_int8_to16_no_shift>:
 801fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc84:	f1b2 0610 	subs.w	r6, r2, #16
 801fc88:	f100 8092 	bmi.w	801fdb0 <st_int8_to16_no_shift+0x130>
 801fc8c:	0936      	lsrs	r6, r6, #4
 801fc8e:	4603      	mov	r3, r0
 801fc90:	4f4b      	ldr	r7, [pc, #300]	; (801fdc0 <st_int8_to16_no_shift+0x140>)
 801fc92:	f106 0801 	add.w	r8, r6, #1
 801fc96:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 801fc9a:	681d      	ldr	r5, [r3, #0]
 801fc9c:	3120      	adds	r1, #32
 801fc9e:	685e      	ldr	r6, [r3, #4]
 801fca0:	3310      	adds	r3, #16
 801fca2:	ea4f 2c35 	mov.w	ip, r5, ror #8
 801fca6:	fa2f fc8c 	sxtb16	ip, ip
 801fcaa:	ea0c 0a07 	and.w	sl, ip, r7
 801fcae:	ea4f 2e36 	mov.w	lr, r6, ror #8
 801fcb2:	fa2f f585 	sxtb16	r5, r5
 801fcb6:	fa2f fe8e 	sxtb16	lr, lr
 801fcba:	fa1f fb85 	uxth.w	fp, r5
 801fcbe:	ea0e 0907 	and.w	r9, lr, r7
 801fcc2:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 801fcc6:	fa2f f686 	sxtb16	r6, r6
 801fcca:	b2b5      	uxth	r5, r6
 801fccc:	f841 ac1c 	str.w	sl, [r1, #-28]
 801fcd0:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 801fcd4:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 801fcd8:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 801fcdc:	f841 cc20 	str.w	ip, [r1, #-32]
 801fce0:	f841 6c14 	str.w	r6, [r1, #-20]
 801fce4:	f841 5c18 	str.w	r5, [r1, #-24]
 801fce8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 801fcec:	f853 5c04 	ldr.w	r5, [r3, #-4]
 801fcf0:	ea4f 2e36 	mov.w	lr, r6, ror #8
 801fcf4:	fa2f fe8e 	sxtb16	lr, lr
 801fcf8:	ea0e 0a07 	and.w	sl, lr, r7
 801fcfc:	ea4f 2c35 	mov.w	ip, r5, ror #8
 801fd00:	fa2f f686 	sxtb16	r6, r6
 801fd04:	fa2f f98c 	sxtb16	r9, ip
 801fd08:	fa1f fb86 	uxth.w	fp, r6
 801fd0c:	fa2f f585 	sxtb16	r5, r5
 801fd10:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 801fd14:	ea09 0a07 	and.w	sl, r9, r7
 801fd18:	fa1f fc85 	uxth.w	ip, r5
 801fd1c:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 801fd20:	f841 6c0c 	str.w	r6, [r1, #-12]
 801fd24:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 801fd28:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 801fd2c:	f841 ec10 	str.w	lr, [r1, #-16]
 801fd30:	f841 5c04 	str.w	r5, [r1, #-4]
 801fd34:	f841 cc08 	str.w	ip, [r1, #-8]
 801fd38:	428c      	cmp	r4, r1
 801fd3a:	d1ae      	bne.n	801fc9a <st_int8_to16_no_shift+0x1a>
 801fd3c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801fd40:	f1a2 0c04 	sub.w	ip, r2, #4
 801fd44:	45b4      	cmp	ip, r6
 801fd46:	4430      	add	r0, r6
 801fd48:	db38      	blt.n	801fdbc <st_int8_to16_no_shift+0x13c>
 801fd4a:	ebac 0c06 	sub.w	ip, ip, r6
 801fd4e:	4607      	mov	r7, r0
 801fd50:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801fdc0 <st_int8_to16_no_shift+0x140>
 801fd54:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 801fd58:	f10c 0801 	add.w	r8, ip, #1
 801fd5c:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 801fd60:	f857 3b04 	ldr.w	r3, [r7], #4
 801fd64:	3408      	adds	r4, #8
 801fd66:	fa2f f983 	sxtb16	r9, r3
 801fd6a:	ea4f 2333 	mov.w	r3, r3, ror #8
 801fd6e:	fa1f f189 	uxth.w	r1, r9
 801fd72:	fa2f f383 	sxtb16	r3, r3
 801fd76:	ea03 0a0e 	and.w	sl, r3, lr
 801fd7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801fd7e:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 801fd82:	f844 3c08 	str.w	r3, [r4, #-8]
 801fd86:	f844 9c04 	str.w	r9, [r4, #-4]
 801fd8a:	42a5      	cmp	r5, r4
 801fd8c:	d1e8      	bne.n	801fd60 <st_int8_to16_no_shift+0xe0>
 801fd8e:	3604      	adds	r6, #4
 801fd90:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801fd94:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 801fd98:	42b2      	cmp	r2, r6
 801fd9a:	dd07      	ble.n	801fdac <st_int8_to16_no_shift+0x12c>
 801fd9c:	1b92      	subs	r2, r2, r6
 801fd9e:	4402      	add	r2, r0
 801fda0:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801fda4:	4290      	cmp	r0, r2
 801fda6:	f825 3b02 	strh.w	r3, [r5], #2
 801fdaa:	d1f9      	bne.n	801fda0 <st_int8_to16_no_shift+0x120>
 801fdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb0:	2600      	movs	r6, #0
 801fdb2:	f1a2 0c04 	sub.w	ip, r2, #4
 801fdb6:	460c      	mov	r4, r1
 801fdb8:	45b4      	cmp	ip, r6
 801fdba:	dac6      	bge.n	801fd4a <st_int8_to16_no_shift+0xca>
 801fdbc:	4625      	mov	r5, r4
 801fdbe:	e7eb      	b.n	801fd98 <st_int8_to16_no_shift+0x118>
 801fdc0:	ffff0000 	.word	0xffff0000

0801fdc4 <st_int8_to16_dual>:
 801fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc8:	b08b      	sub	sp, #44	; 0x2c
 801fdca:	468a      	mov	sl, r1
 801fdcc:	eb00 0802 	add.w	r8, r0, r2
 801fdd0:	9309      	str	r3, [sp, #36]	; 0x24
 801fdd2:	085b      	lsrs	r3, r3, #1
 801fdd4:	9200      	str	r2, [sp, #0]
 801fdd6:	9301      	str	r3, [sp, #4]
 801fdd8:	f000 8123 	beq.w	8020022 <st_int8_to16_dual+0x25e>
 801fddc:	f1a2 0310 	sub.w	r3, r2, #16
 801fde0:	3a04      	subs	r2, #4
 801fde2:	46c2      	mov	sl, r8
 801fde4:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 802009c <st_int8_to16_dual+0x2d8>
 801fde8:	9307      	str	r3, [sp, #28]
 801fdea:	091b      	lsrs	r3, r3, #4
 801fdec:	9206      	str	r2, [sp, #24]
 801fdee:	4688      	mov	r8, r1
 801fdf0:	3301      	adds	r3, #1
 801fdf2:	011a      	lsls	r2, r3, #4
 801fdf4:	019b      	lsls	r3, r3, #6
 801fdf6:	9202      	str	r2, [sp, #8]
 801fdf8:	9308      	str	r3, [sp, #32]
 801fdfa:	9b07      	ldr	r3, [sp, #28]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	f2c0 8145 	blt.w	802008c <st_int8_to16_dual+0x2c8>
 801fe02:	9b02      	ldr	r3, [sp, #8]
 801fe04:	4655      	mov	r5, sl
 801fe06:	18c4      	adds	r4, r0, r3
 801fe08:	4643      	mov	r3, r8
 801fe0a:	682e      	ldr	r6, [r5, #0]
 801fe0c:	3010      	adds	r0, #16
 801fe0e:	f850 1c10 	ldr.w	r1, [r0, #-16]
 801fe12:	3510      	adds	r5, #16
 801fe14:	fa2f f286 	sxtb16	r2, r6
 801fe18:	ea4f 2c36 	mov.w	ip, r6, ror #8
 801fe1c:	3340      	adds	r3, #64	; 0x40
 801fe1e:	fa2f fc8c 	sxtb16	ip, ip
 801fe22:	ea0c 0609 	and.w	r6, ip, r9
 801fe26:	ea4f 2731 	mov.w	r7, r1, ror #8
 801fe2a:	fa2f f181 	sxtb16	r1, r1
 801fe2e:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 801fe32:	fa1f fe81 	uxth.w	lr, r1
 801fe36:	fa2f f787 	sxtb16	r7, r7
 801fe3a:	b292      	uxth	r2, r2
 801fe3c:	ea07 0b09 	and.w	fp, r7, r9
 801fe40:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 801fe44:	f843 6c34 	str.w	r6, [r3, #-52]
 801fe48:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 801fe4c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801fe50:	f843 7c40 	str.w	r7, [r3, #-64]
 801fe54:	f843 1c38 	str.w	r1, [r3, #-56]
 801fe58:	f843 2c3c 	str.w	r2, [r3, #-60]
 801fe5c:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 801fe60:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 801fe64:	fa2f f286 	sxtb16	r2, r6
 801fe68:	ea4f 2c36 	mov.w	ip, r6, ror #8
 801fe6c:	fa2f fc8c 	sxtb16	ip, ip
 801fe70:	ea0c 0609 	and.w	r6, ip, r9
 801fe74:	ea4f 2731 	mov.w	r7, r1, ror #8
 801fe78:	fa2f f181 	sxtb16	r1, r1
 801fe7c:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 801fe80:	fa1f fe81 	uxth.w	lr, r1
 801fe84:	fa2f f787 	sxtb16	r7, r7
 801fe88:	b292      	uxth	r2, r2
 801fe8a:	ea07 0b09 	and.w	fp, r7, r9
 801fe8e:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 801fe92:	f843 6c24 	str.w	r6, [r3, #-36]
 801fe96:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 801fe9a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801fe9e:	f843 7c30 	str.w	r7, [r3, #-48]
 801fea2:	f843 1c28 	str.w	r1, [r3, #-40]
 801fea6:	f843 2c2c 	str.w	r2, [r3, #-44]
 801feaa:	f855 6c08 	ldr.w	r6, [r5, #-8]
 801feae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801feb2:	fa2f f286 	sxtb16	r2, r6
 801feb6:	ea4f 2c36 	mov.w	ip, r6, ror #8
 801feba:	fa2f fc8c 	sxtb16	ip, ip
 801febe:	ea0c 0609 	and.w	r6, ip, r9
 801fec2:	ea4f 2731 	mov.w	r7, r1, ror #8
 801fec6:	fa2f f181 	sxtb16	r1, r1
 801feca:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 801fece:	fa1f fe81 	uxth.w	lr, r1
 801fed2:	fa2f f787 	sxtb16	r7, r7
 801fed6:	b292      	uxth	r2, r2
 801fed8:	ea07 0b09 	and.w	fp, r7, r9
 801fedc:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 801fee0:	f843 6c14 	str.w	r6, [r3, #-20]
 801fee4:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 801fee8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801feec:	f843 7c20 	str.w	r7, [r3, #-32]
 801fef0:	f843 1c18 	str.w	r1, [r3, #-24]
 801fef4:	f843 2c1c 	str.w	r2, [r3, #-28]
 801fef8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 801fefc:	f850 1c04 	ldr.w	r1, [r0, #-4]
 801ff00:	4284      	cmp	r4, r0
 801ff02:	fa2f f286 	sxtb16	r2, r6
 801ff06:	ea4f 2c36 	mov.w	ip, r6, ror #8
 801ff0a:	fa2f fc8c 	sxtb16	ip, ip
 801ff0e:	ea0c 0609 	and.w	r6, ip, r9
 801ff12:	ea4f 2731 	mov.w	r7, r1, ror #8
 801ff16:	fa2f f181 	sxtb16	r1, r1
 801ff1a:	fa2f f787 	sxtb16	r7, r7
 801ff1e:	fa1f fe81 	uxth.w	lr, r1
 801ff22:	ea07 0b09 	and.w	fp, r7, r9
 801ff26:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 801ff2a:	b292      	uxth	r2, r2
 801ff2c:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 801ff30:	f843 6c04 	str.w	r6, [r3, #-4]
 801ff34:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 801ff38:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801ff3c:	f843 1c08 	str.w	r1, [r3, #-8]
 801ff40:	f843 7c10 	str.w	r7, [r3, #-16]
 801ff44:	f843 2c0c 	str.w	r2, [r3, #-12]
 801ff48:	f47f af5f 	bne.w	801fe0a <st_int8_to16_dual+0x46>
 801ff4c:	9b08      	ldr	r3, [sp, #32]
 801ff4e:	4498      	add	r8, r3
 801ff50:	9b02      	ldr	r3, [sp, #8]
 801ff52:	449a      	add	sl, r3
 801ff54:	469c      	mov	ip, r3
 801ff56:	9b06      	ldr	r3, [sp, #24]
 801ff58:	4563      	cmp	r3, ip
 801ff5a:	db3f      	blt.n	801ffdc <st_int8_to16_dual+0x218>
 801ff5c:	eba3 030c 	sub.w	r3, r3, ip
 801ff60:	4657      	mov	r7, sl
 801ff62:	4645      	mov	r5, r8
 801ff64:	089b      	lsrs	r3, r3, #2
 801ff66:	9303      	str	r3, [sp, #12]
 801ff68:	3301      	adds	r3, #1
 801ff6a:	9304      	str	r3, [sp, #16]
 801ff6c:	009b      	lsls	r3, r3, #2
 801ff6e:	eb04 0e03 	add.w	lr, r4, r3
 801ff72:	9305      	str	r3, [sp, #20]
 801ff74:	f854 2b04 	ldr.w	r2, [r4], #4
 801ff78:	3510      	adds	r5, #16
 801ff7a:	f857 3b04 	ldr.w	r3, [r7], #4
 801ff7e:	ea4f 2032 	mov.w	r0, r2, ror #8
 801ff82:	4574      	cmp	r4, lr
 801ff84:	fa2f f080 	sxtb16	r0, r0
 801ff88:	ea00 0609 	and.w	r6, r0, r9
 801ff8c:	ea4f 2133 	mov.w	r1, r3, ror #8
 801ff90:	fa2f f282 	sxtb16	r2, r2
 801ff94:	fa2f f181 	sxtb16	r1, r1
 801ff98:	fa1f fb82 	uxth.w	fp, r2
 801ff9c:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 801ffa0:	ea01 0609 	and.w	r6, r1, r9
 801ffa4:	fa2f f383 	sxtb16	r3, r3
 801ffa8:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 801ffac:	f845 2c08 	str.w	r2, [r5, #-8]
 801ffb0:	b29b      	uxth	r3, r3
 801ffb2:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 801ffb6:	f845 6c04 	str.w	r6, [r5, #-4]
 801ffba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ffbe:	f845 0c10 	str.w	r0, [r5, #-16]
 801ffc2:	f845 3c0c 	str.w	r3, [r5, #-12]
 801ffc6:	d1d5      	bne.n	801ff74 <st_int8_to16_dual+0x1b0>
 801ffc8:	9b04      	ldr	r3, [sp, #16]
 801ffca:	f10c 0c04 	add.w	ip, ip, #4
 801ffce:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 801ffd2:	9b05      	ldr	r3, [sp, #20]
 801ffd4:	449a      	add	sl, r3
 801ffd6:	9b03      	ldr	r3, [sp, #12]
 801ffd8:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 801ffdc:	9b00      	ldr	r3, [sp, #0]
 801ffde:	4563      	cmp	r3, ip
 801ffe0:	dd14      	ble.n	802000c <st_int8_to16_dual+0x248>
 801ffe2:	eba3 0c0c 	sub.w	ip, r3, ip
 801ffe6:	4652      	mov	r2, sl
 801ffe8:	f108 0304 	add.w	r3, r8, #4
 801ffec:	eb04 000c 	add.w	r0, r4, ip
 801fff0:	f914 1b01 	ldrsb.w	r1, [r4], #1
 801fff4:	3304      	adds	r3, #4
 801fff6:	f823 1c08 	strh.w	r1, [r3, #-8]
 801fffa:	4284      	cmp	r4, r0
 801fffc:	f912 1b01 	ldrsb.w	r1, [r2], #1
 8020000:	f823 1c06 	strh.w	r1, [r3, #-6]
 8020004:	d1f4      	bne.n	801fff0 <st_int8_to16_dual+0x22c>
 8020006:	44e2      	add	sl, ip
 8020008:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 802000c:	9b01      	ldr	r3, [sp, #4]
 802000e:	9a00      	ldr	r2, [sp, #0]
 8020010:	3b01      	subs	r3, #1
 8020012:	18a0      	adds	r0, r4, r2
 8020014:	4492      	add	sl, r2
 8020016:	b29b      	uxth	r3, r3
 8020018:	9301      	str	r3, [sp, #4]
 802001a:	2b00      	cmp	r3, #0
 802001c:	f47f aeed 	bne.w	801fdfa <st_int8_to16_dual+0x36>
 8020020:	46c2      	mov	sl, r8
 8020022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020024:	07db      	lsls	r3, r3, #31
 8020026:	d52e      	bpl.n	8020086 <st_int8_to16_dual+0x2c2>
 8020028:	9b00      	ldr	r3, [sp, #0]
 802002a:	3b04      	subs	r3, #4
 802002c:	d432      	bmi.n	8020094 <st_int8_to16_dual+0x2d0>
 802002e:	089b      	lsrs	r3, r3, #2
 8020030:	4605      	mov	r5, r0
 8020032:	4f1a      	ldr	r7, [pc, #104]	; (802009c <st_int8_to16_dual+0x2d8>)
 8020034:	1c5e      	adds	r6, r3, #1
 8020036:	eb0a 04c6 	add.w	r4, sl, r6, lsl #3
 802003a:	f855 3b04 	ldr.w	r3, [r5], #4
 802003e:	f10a 0a08 	add.w	sl, sl, #8
 8020042:	fa2f fc83 	sxtb16	ip, r3
 8020046:	ea4f 2333 	mov.w	r3, r3, ror #8
 802004a:	fa1f f18c 	uxth.w	r1, ip
 802004e:	fa2f f383 	sxtb16	r3, r3
 8020052:	ea03 0207 	and.w	r2, r3, r7
 8020056:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802005a:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 802005e:	f84a 3c08 	str.w	r3, [sl, #-8]
 8020062:	f84a 2c04 	str.w	r2, [sl, #-4]
 8020066:	4554      	cmp	r4, sl
 8020068:	d1e7      	bne.n	802003a <st_int8_to16_dual+0x276>
 802006a:	00b3      	lsls	r3, r6, #2
 802006c:	4418      	add	r0, r3
 802006e:	9a00      	ldr	r2, [sp, #0]
 8020070:	429a      	cmp	r2, r3
 8020072:	dd08      	ble.n	8020086 <st_int8_to16_dual+0x2c2>
 8020074:	1ad3      	subs	r3, r2, r3
 8020076:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802007a:	f910 2b01 	ldrsb.w	r2, [r0], #1
 802007e:	f824 2b02 	strh.w	r2, [r4], #2
 8020082:	429c      	cmp	r4, r3
 8020084:	d1f9      	bne.n	802007a <st_int8_to16_dual+0x2b6>
 8020086:	b00b      	add	sp, #44	; 0x2c
 8020088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802008c:	4604      	mov	r4, r0
 802008e:	f04f 0c00 	mov.w	ip, #0
 8020092:	e760      	b.n	801ff56 <st_int8_to16_dual+0x192>
 8020094:	4654      	mov	r4, sl
 8020096:	2300      	movs	r3, #0
 8020098:	e7e9      	b.n	802006e <st_int8_to16_dual+0x2aa>
 802009a:	bf00      	nop
 802009c:	ffff0000 	.word	0xffff0000

080200a0 <st_sssa8_ch_fullW_prefetch>:
 80200a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200a4:	b087      	sub	sp, #28
 80200a6:	eb00 0c02 	add.w	ip, r0, r2
 80200aa:	9105      	str	r1, [sp, #20]
 80200ac:	1049      	asrs	r1, r1, #1
 80200ae:	9100      	str	r1, [sp, #0]
 80200b0:	f000 80d7 	beq.w	8020262 <st_sssa8_ch_fullW_prefetch+0x1c2>
 80200b4:	f1a2 0110 	sub.w	r1, r2, #16
 80200b8:	1ed4      	subs	r4, r2, #3
 80200ba:	0909      	lsrs	r1, r1, #4
 80200bc:	9402      	str	r4, [sp, #8]
 80200be:	1f14      	subs	r4, r2, #4
 80200c0:	3101      	adds	r1, #1
 80200c2:	9404      	str	r4, [sp, #16]
 80200c4:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 80200c8:	0189      	lsls	r1, r1, #6
 80200ca:	9103      	str	r1, [sp, #12]
 80200cc:	2a0f      	cmp	r2, #15
 80200ce:	f340 80dd 	ble.w	802028c <st_sssa8_ch_fullW_prefetch+0x1ec>
 80200d2:	eb00 040a 	add.w	r4, r0, sl
 80200d6:	4665      	mov	r5, ip
 80200d8:	4619      	mov	r1, r3
 80200da:	6807      	ldr	r7, [r0, #0]
 80200dc:	3010      	adds	r0, #16
 80200de:	682e      	ldr	r6, [r5, #0]
 80200e0:	3140      	adds	r1, #64	; 0x40
 80200e2:	ea4f 2e37 	mov.w	lr, r7, ror #8
 80200e6:	3510      	adds	r5, #16
 80200e8:	fa2f f787 	sxtb16	r7, r7
 80200ec:	fa2f fe8e 	sxtb16	lr, lr
 80200f0:	f841 7c40 	str.w	r7, [r1, #-64]
 80200f4:	ea4f 2736 	mov.w	r7, r6, ror #8
 80200f8:	f841 ec3c 	str.w	lr, [r1, #-60]
 80200fc:	fa2f f787 	sxtb16	r7, r7
 8020100:	fa2f f686 	sxtb16	r6, r6
 8020104:	f841 7c34 	str.w	r7, [r1, #-52]
 8020108:	f841 6c38 	str.w	r6, [r1, #-56]
 802010c:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8020110:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8020114:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8020118:	fa2f f787 	sxtb16	r7, r7
 802011c:	fa2f fe8e 	sxtb16	lr, lr
 8020120:	f841 7c30 	str.w	r7, [r1, #-48]
 8020124:	ea4f 2736 	mov.w	r7, r6, ror #8
 8020128:	f841 ec2c 	str.w	lr, [r1, #-44]
 802012c:	fa2f f787 	sxtb16	r7, r7
 8020130:	fa2f f686 	sxtb16	r6, r6
 8020134:	f841 7c24 	str.w	r7, [r1, #-36]
 8020138:	f841 6c28 	str.w	r6, [r1, #-40]
 802013c:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8020140:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8020144:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8020148:	fa2f f787 	sxtb16	r7, r7
 802014c:	fa2f fe8e 	sxtb16	lr, lr
 8020150:	f841 7c20 	str.w	r7, [r1, #-32]
 8020154:	ea4f 2736 	mov.w	r7, r6, ror #8
 8020158:	f841 ec1c 	str.w	lr, [r1, #-28]
 802015c:	fa2f f787 	sxtb16	r7, r7
 8020160:	fa2f f686 	sxtb16	r6, r6
 8020164:	f841 7c14 	str.w	r7, [r1, #-20]
 8020168:	f841 6c18 	str.w	r6, [r1, #-24]
 802016c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8020170:	4284      	cmp	r4, r0
 8020172:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8020176:	ea4f 2e37 	mov.w	lr, r7, ror #8
 802017a:	fa2f f787 	sxtb16	r7, r7
 802017e:	fa2f fe8e 	sxtb16	lr, lr
 8020182:	f841 7c10 	str.w	r7, [r1, #-16]
 8020186:	ea4f 2736 	mov.w	r7, r6, ror #8
 802018a:	f841 ec0c 	str.w	lr, [r1, #-12]
 802018e:	fa2f f787 	sxtb16	r7, r7
 8020192:	fa2f f686 	sxtb16	r6, r6
 8020196:	f841 7c04 	str.w	r7, [r1, #-4]
 802019a:	f841 6c08 	str.w	r6, [r1, #-8]
 802019e:	d19c      	bne.n	80200da <st_sssa8_ch_fullW_prefetch+0x3a>
 80201a0:	9903      	ldr	r1, [sp, #12]
 80201a2:	44d4      	add	ip, sl
 80201a4:	46d6      	mov	lr, sl
 80201a6:	440b      	add	r3, r1
 80201a8:	9902      	ldr	r1, [sp, #8]
 80201aa:	458e      	cmp	lr, r1
 80201ac:	da30      	bge.n	8020210 <st_sssa8_ch_fullW_prefetch+0x170>
 80201ae:	9904      	ldr	r1, [sp, #16]
 80201b0:	4667      	mov	r7, ip
 80201b2:	eba1 090e 	sub.w	r9, r1, lr
 80201b6:	4619      	mov	r1, r3
 80201b8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80201bc:	f109 0b01 	add.w	fp, r9, #1
 80201c0:	ea4f 008b 	mov.w	r0, fp, lsl #2
 80201c4:	eb04 0800 	add.w	r8, r4, r0
 80201c8:	9001      	str	r0, [sp, #4]
 80201ca:	f854 5b04 	ldr.w	r5, [r4], #4
 80201ce:	3110      	adds	r1, #16
 80201d0:	f857 0b04 	ldr.w	r0, [r7], #4
 80201d4:	4544      	cmp	r4, r8
 80201d6:	ea4f 2635 	mov.w	r6, r5, ror #8
 80201da:	fa2f f585 	sxtb16	r5, r5
 80201de:	fa2f f686 	sxtb16	r6, r6
 80201e2:	f841 5c10 	str.w	r5, [r1, #-16]
 80201e6:	ea4f 2530 	mov.w	r5, r0, ror #8
 80201ea:	f841 6c0c 	str.w	r6, [r1, #-12]
 80201ee:	fa2f f585 	sxtb16	r5, r5
 80201f2:	fa2f f080 	sxtb16	r0, r0
 80201f6:	f841 5c04 	str.w	r5, [r1, #-4]
 80201fa:	f841 0c08 	str.w	r0, [r1, #-8]
 80201fe:	d1e4      	bne.n	80201ca <st_sssa8_ch_fullW_prefetch+0x12a>
 8020200:	f10e 0e04 	add.w	lr, lr, #4
 8020204:	9901      	ldr	r1, [sp, #4]
 8020206:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 802020a:	448c      	add	ip, r1
 802020c:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8020210:	4572      	cmp	r2, lr
 8020212:	dd1f      	ble.n	8020254 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8020214:	f994 0000 	ldrsb.w	r0, [r4]
 8020218:	f10e 0101 	add.w	r1, lr, #1
 802021c:	8018      	strh	r0, [r3, #0]
 802021e:	428a      	cmp	r2, r1
 8020220:	f99c 0000 	ldrsb.w	r0, [ip]
 8020224:	8058      	strh	r0, [r3, #2]
 8020226:	dd2c      	ble.n	8020282 <st_sssa8_ch_fullW_prefetch+0x1e2>
 8020228:	f994 1001 	ldrsb.w	r1, [r4, #1]
 802022c:	f10e 0e02 	add.w	lr, lr, #2
 8020230:	8099      	strh	r1, [r3, #4]
 8020232:	4572      	cmp	r2, lr
 8020234:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 8020238:	80d9      	strh	r1, [r3, #6]
 802023a:	dd2b      	ble.n	8020294 <st_sssa8_ch_fullW_prefetch+0x1f4>
 802023c:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8020240:	f10c 0c03 	add.w	ip, ip, #3
 8020244:	3403      	adds	r4, #3
 8020246:	330c      	adds	r3, #12
 8020248:	f823 1c04 	strh.w	r1, [r3, #-4]
 802024c:	f91c 1c01 	ldrsb.w	r1, [ip, #-1]
 8020250:	f823 1c02 	strh.w	r1, [r3, #-2]
 8020254:	9900      	ldr	r1, [sp, #0]
 8020256:	18a0      	adds	r0, r4, r2
 8020258:	4494      	add	ip, r2
 802025a:	3901      	subs	r1, #1
 802025c:	9100      	str	r1, [sp, #0]
 802025e:	f47f af35 	bne.w	80200cc <st_sssa8_ch_fullW_prefetch+0x2c>
 8020262:	9905      	ldr	r1, [sp, #20]
 8020264:	07c9      	lsls	r1, r1, #31
 8020266:	d509      	bpl.n	802027c <st_sssa8_ch_fullW_prefetch+0x1dc>
 8020268:	2a00      	cmp	r2, #0
 802026a:	dd07      	ble.n	802027c <st_sssa8_ch_fullW_prefetch+0x1dc>
 802026c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8020270:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8020274:	f823 1b02 	strh.w	r1, [r3], #2
 8020278:	4293      	cmp	r3, r2
 802027a:	d1f9      	bne.n	8020270 <st_sssa8_ch_fullW_prefetch+0x1d0>
 802027c:	b007      	add	sp, #28
 802027e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020282:	3401      	adds	r4, #1
 8020284:	f10c 0c01 	add.w	ip, ip, #1
 8020288:	3304      	adds	r3, #4
 802028a:	e7e3      	b.n	8020254 <st_sssa8_ch_fullW_prefetch+0x1b4>
 802028c:	4604      	mov	r4, r0
 802028e:	f04f 0e00 	mov.w	lr, #0
 8020292:	e789      	b.n	80201a8 <st_sssa8_ch_fullW_prefetch+0x108>
 8020294:	3402      	adds	r4, #2
 8020296:	f10c 0c02 	add.w	ip, ip, #2
 802029a:	3308      	adds	r3, #8
 802029c:	e7da      	b.n	8020254 <st_sssa8_ch_fullW_prefetch+0x1b4>
 802029e:	bf00      	nop

080202a0 <st_sssa8_ch_nn_mat_mult_nt_t>:
 80202a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a4:	b0b3      	sub	sp, #204	; 0xcc
 80202a6:	9023      	str	r0, [sp, #140]	; 0x8c
 80202a8:	9224      	str	r2, [sp, #144]	; 0x90
 80202aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80202ac:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80202ae:	9129      	str	r1, [sp, #164]	; 0xa4
 80202b0:	2800      	cmp	r0, #0
 80202b2:	bf18      	it	ne
 80202b4:	4602      	movne	r2, r0
 80202b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80202b8:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 80202bc:	9243      	str	r2, [sp, #268]	; 0x10c
 80202be:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80202c0:	2a01      	cmp	r2, #1
 80202c2:	f340 823b 	ble.w	802073c <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 80202c6:	f00b 0403 	and.w	r4, fp, #3
 80202ca:	3a02      	subs	r2, #2
 80202cc:	ea4f 00ab 	mov.w	r0, fp, asr #2
 80202d0:	461e      	mov	r6, r3
 80202d2:	942c      	str	r4, [sp, #176]	; 0xb0
 80202d4:	f1ab 040f 	sub.w	r4, fp, #15
 80202d8:	0852      	lsrs	r2, r2, #1
 80202da:	f1ab 0310 	sub.w	r3, fp, #16
 80202de:	9411      	str	r4, [sp, #68]	; 0x44
 80202e0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80202e2:	091b      	lsrs	r3, r3, #4
 80202e4:	9230      	str	r2, [sp, #192]	; 0xc0
 80202e6:	00d2      	lsls	r2, r2, #3
 80202e8:	f004 0401 	and.w	r4, r4, #1
 80202ec:	3301      	adds	r3, #1
 80202ee:	320c      	adds	r2, #12
 80202f0:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 80202f2:	9425      	str	r4, [sp, #148]	; 0x94
 80202f4:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 80202f6:	106d      	asrs	r5, r5, #1
 80202f8:	9227      	str	r2, [sp, #156]	; 0x9c
 80202fa:	3402      	adds	r4, #2
 80202fc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80202fe:	902b      	str	r0, [sp, #172]	; 0xac
 8020300:	9417      	str	r4, [sp, #92]	; 0x5c
 8020302:	0084      	lsls	r4, r0, #2
 8020304:	0052      	lsls	r2, r2, #1
 8020306:	9526      	str	r5, [sp, #152]	; 0x98
 8020308:	9431      	str	r4, [sp, #196]	; 0xc4
 802030a:	445c      	add	r4, fp
 802030c:	9212      	str	r2, [sp, #72]	; 0x48
 802030e:	942f      	str	r4, [sp, #188]	; 0xbc
 8020310:	011c      	lsls	r4, r3, #4
 8020312:	019b      	lsls	r3, r3, #6
 8020314:	9616      	str	r6, [sp, #88]	; 0x58
 8020316:	9405      	str	r4, [sp, #20]
 8020318:	9322      	str	r3, [sp, #136]	; 0x88
 802031a:	fb02 f305 	mul.w	r3, r2, r5
 802031e:	911c      	str	r1, [sp, #112]	; 0x70
 8020320:	9328      	str	r3, [sp, #160]	; 0xa0
 8020322:	0103      	lsls	r3, r0, #4
 8020324:	932d      	str	r3, [sp, #180]	; 0xb4
 8020326:	ea4f 034b 	mov.w	r3, fp, lsl #1
 802032a:	9321      	str	r3, [sp, #132]	; 0x84
 802032c:	2304      	movs	r3, #4
 802032e:	9315      	str	r3, [sp, #84]	; 0x54
 8020330:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8020334:	932a      	str	r3, [sp, #168]	; 0xa8
 8020336:	f1ab 0304 	sub.w	r3, fp, #4
 802033a:	9314      	str	r3, [sp, #80]	; 0x50
 802033c:	f10b 0301 	add.w	r3, fp, #1
 8020340:	930b      	str	r3, [sp, #44]	; 0x2c
 8020342:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020344:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8020346:	9942      	ldr	r1, [sp, #264]	; 0x108
 8020348:	441a      	add	r2, r3
 802034a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802034c:	4419      	add	r1, r3
 802034e:	9220      	str	r2, [sp, #128]	; 0x80
 8020350:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8020354:	911f      	str	r1, [sp, #124]	; 0x7c
 8020356:	920c      	str	r2, [sp, #48]	; 0x30
 8020358:	f851 2c04 	ldr.w	r2, [r1, #-4]
 802035c:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8020360:	920e      	str	r2, [sp, #56]	; 0x38
 8020362:	f9b0 2000 	ldrsh.w	r2, [r0]
 8020366:	9403      	str	r4, [sp, #12]
 8020368:	9204      	str	r2, [sp, #16]
 802036a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 802036c:	4611      	mov	r1, r2
 802036e:	58ca      	ldr	r2, [r1, r3]
 8020370:	920d      	str	r2, [sp, #52]	; 0x34
 8020372:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8020374:	58d3      	ldr	r3, [r2, r3]
 8020376:	930f      	str	r3, [sp, #60]	; 0x3c
 8020378:	9b44      	ldr	r3, [sp, #272]	; 0x110
 802037a:	2b00      	cmp	r3, #0
 802037c:	f000 83f2 	beq.w	8020b64 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c4>
 8020380:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020382:	2b00      	cmp	r3, #0
 8020384:	f040 839c 	bne.w	8020ac0 <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 8020388:	4619      	mov	r1, r3
 802038a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802038c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802038e:	1910      	adds	r0, r2, r4
 8020390:	5912      	ldr	r2, [r2, r4]
 8020392:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8020394:	4413      	add	r3, r2
 8020396:	f850 0c04 	ldr.w	r0, [r0, #-4]
 802039a:	930a      	str	r3, [sp, #40]	; 0x28
 802039c:	180b      	adds	r3, r1, r0
 802039e:	9309      	str	r3, [sp, #36]	; 0x24
 80203a0:	2c00      	cmp	r4, #0
 80203a2:	f000 8447 	beq.w	8020c34 <st_sssa8_ch_nn_mat_mult_nt_t+0x994>
 80203a6:	9d40      	ldr	r5, [sp, #256]	; 0x100
 80203a8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80203aa:	3d03      	subs	r5, #3
 80203ac:	9804      	ldr	r0, [sp, #16]
 80203ae:	9903      	ldr	r1, [sp, #12]
 80203b0:	9510      	str	r5, [sp, #64]	; 0x40
 80203b2:	1e83      	subs	r3, r0, #2
 80203b4:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 80203b6:	1e8a      	subs	r2, r1, #2
 80203b8:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 80203bc:	4435      	add	r5, r6
 80203be:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 80203c2:	9402      	str	r4, [sp, #8]
 80203c4:	9513      	str	r5, [sp, #76]	; 0x4c
 80203c6:	2501      	movs	r5, #1
 80203c8:	fa05 f303 	lsl.w	r3, r5, r3
 80203cc:	fa05 f202 	lsl.w	r2, r5, r2
 80203d0:	9319      	str	r3, [sp, #100]	; 0x64
 80203d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80203d4:	9218      	str	r2, [sp, #96]	; 0x60
 80203d6:	9301      	str	r3, [sp, #4]
 80203d8:	1a6b      	subs	r3, r5, r1
 80203da:	931d      	str	r3, [sp, #116]	; 0x74
 80203dc:	1e4b      	subs	r3, r1, #1
 80203de:	931a      	str	r3, [sp, #104]	; 0x68
 80203e0:	1a2b      	subs	r3, r5, r0
 80203e2:	931e      	str	r3, [sp, #120]	; 0x78
 80203e4:	1e43      	subs	r3, r0, #1
 80203e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80203e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	f340 8259 	ble.w	80208a2 <st_sssa8_ch_nn_mat_mult_nt_t+0x602>
 80203f0:	9b05      	ldr	r3, [sp, #20]
 80203f2:	eb0a 090b 	add.w	r9, sl, fp
 80203f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80203f8:	4453      	add	r3, sl
 80203fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80203fc:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
 8020400:	9300      	str	r3, [sp, #0]
 8020402:	4634      	mov	r4, r6
 8020404:	4603      	mov	r3, r0
 8020406:	f8da 5000 	ldr.w	r5, [sl]
 802040a:	f8d8 2000 	ldr.w	r2, [r8]
 802040e:	fa2f f185 	sxtb16	r1, r5
 8020412:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8020416:	fa2f f595 	sxtb16	r5, r5, ror #8
 802041a:	f8d8 e008 	ldr.w	lr, [r8, #8]
 802041e:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8020422:	fb21 6602 	smlad	r6, r1, r2, r6
 8020426:	fb25 660c 	smlad	r6, r5, ip, r6
 802042a:	fb21 000e 	smlad	r0, r1, lr, r0
 802042e:	fb25 0007 	smlad	r0, r5, r7, r0
 8020432:	f85a 100b 	ldr.w	r1, [sl, fp]
 8020436:	fa2f f581 	sxtb16	r5, r1
 802043a:	fa2f f191 	sxtb16	r1, r1, ror #8
 802043e:	fb25 4202 	smlad	r2, r5, r2, r4
 8020442:	fb25 330e 	smlad	r3, r5, lr, r3
 8020446:	fb21 220c 	smlad	r2, r1, ip, r2
 802044a:	f8d8 c010 	ldr.w	ip, [r8, #16]
 802044e:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8020452:	fb21 3707 	smlad	r7, r1, r7, r3
 8020456:	f8da 3004 	ldr.w	r3, [sl, #4]
 802045a:	f8d8 e018 	ldr.w	lr, [r8, #24]
 802045e:	fa2f f583 	sxtb16	r5, r3
 8020462:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8020466:	fa2f f393 	sxtb16	r3, r3, ror #8
 802046a:	fb25 660c 	smlad	r6, r5, ip, r6
 802046e:	fb23 6604 	smlad	r6, r3, r4, r6
 8020472:	fb25 050e 	smlad	r5, r5, lr, r0
 8020476:	fb23 5501 	smlad	r5, r3, r1, r5
 802047a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 802047e:	fa2f f380 	sxtb16	r3, r0
 8020482:	fa2f f090 	sxtb16	r0, r0, ror #8
 8020486:	fb23 2c0c 	smlad	ip, r3, ip, r2
 802048a:	fb23 770e 	smlad	r7, r3, lr, r7
 802048e:	fb20 cc04 	smlad	ip, r0, r4, ip
 8020492:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8020496:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 802049a:	fb20 7101 	smlad	r1, r0, r1, r7
 802049e:	f8da 2008 	ldr.w	r2, [sl, #8]
 80204a2:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80204a6:	fa2f f382 	sxtb16	r3, r2
 80204aa:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 80204ae:	fa2f f292 	sxtb16	r2, r2, ror #8
 80204b2:	fb23 6604 	smlad	r6, r3, r4, r6
 80204b6:	fb22 660e 	smlad	r6, r2, lr, r6
 80204ba:	fb23 5300 	smlad	r3, r3, r0, r5
 80204be:	fb22 3207 	smlad	r2, r2, r7, r3
 80204c2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80204c6:	fa2f f985 	sxtb16	r9, r5
 80204ca:	fa2f f595 	sxtb16	r5, r5, ror #8
 80204ce:	fb29 c404 	smlad	r4, r9, r4, ip
 80204d2:	fb29 1100 	smlad	r1, r9, r0, r1
 80204d6:	fb25 4e0e 	smlad	lr, r5, lr, r4
 80204da:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 80204de:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 80204e2:	fb25 1707 	smlad	r7, r5, r7, r1
 80204e6:	f8da 000c 	ldr.w	r0, [sl, #12]
 80204ea:	f108 0840 	add.w	r8, r8, #64	; 0x40
 80204ee:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80204f2:	f10a 0a10 	add.w	sl, sl, #16
 80204f6:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80204fa:	fa2f f380 	sxtb16	r3, r0
 80204fe:	fa2f f090 	sxtb16	r0, r0, ror #8
 8020502:	fb23 660c 	smlad	r6, r3, ip, r6
 8020506:	fb20 6604 	smlad	r6, r0, r4, r6
 802050a:	fb23 2201 	smlad	r2, r3, r1, r2
 802050e:	fb20 2005 	smlad	r0, r0, r5, r2
 8020512:	eb0a 090b 	add.w	r9, sl, fp
 8020516:	f859 3c04 	ldr.w	r3, [r9, #-4]
 802051a:	fa2f f283 	sxtb16	r2, r3
 802051e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8020522:	fb22 ee0c 	smlad	lr, r2, ip, lr
 8020526:	fb22 7701 	smlad	r7, r2, r1, r7
 802052a:	fb23 e404 	smlad	r4, r3, r4, lr
 802052e:	fb23 7305 	smlad	r3, r3, r5, r7
 8020532:	9a00      	ldr	r2, [sp, #0]
 8020534:	4592      	cmp	sl, r2
 8020536:	f47f af66 	bne.w	8020406 <st_sssa8_ch_nn_mat_mult_nt_t+0x166>
 802053a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802053c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8020540:	9200      	str	r2, [sp, #0]
 8020542:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020544:	4591      	cmp	r9, r2
 8020546:	da44      	bge.n	80205d2 <st_sssa8_ch_nn_mat_mult_nt_t+0x332>
 8020548:	9914      	ldr	r1, [sp, #80]	; 0x50
 802054a:	f8cd 9020 	str.w	r9, [sp, #32]
 802054e:	eba1 0209 	sub.w	r2, r1, r9
 8020552:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
 8020556:	9f00      	ldr	r7, [sp, #0]
 8020558:	468b      	mov	fp, r1
 802055a:	0892      	lsrs	r2, r2, #2
 802055c:	9207      	str	r2, [sp, #28]
 802055e:	3201      	adds	r2, #1
 8020560:	9206      	str	r2, [sp, #24]
 8020562:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8020566:	4691      	mov	r9, r2
 8020568:	f85a 2b04 	ldr.w	r2, [sl], #4
 802056c:	3710      	adds	r7, #16
 802056e:	f857 5c10 	ldr.w	r5, [r7, #-16]
 8020572:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 8020576:	f857 8c08 	ldr.w	r8, [r7, #-8]
 802057a:	fa2f f182 	sxtb16	r1, r2
 802057e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8020582:	fa2f f292 	sxtb16	r2, r2, ror #8
 8020586:	fb21 6605 	smlad	r6, r1, r5, r6
 802058a:	fb22 660e 	smlad	r6, r2, lr, r6
 802058e:	fb21 0008 	smlad	r0, r1, r8, r0
 8020592:	fb22 000c 	smlad	r0, r2, ip, r0
 8020596:	f85a 200b 	ldr.w	r2, [sl, fp]
 802059a:	fa2f f182 	sxtb16	r1, r2
 802059e:	fa2f f292 	sxtb16	r2, r2, ror #8
 80205a2:	fb21 4405 	smlad	r4, r1, r5, r4
 80205a6:	fb21 3308 	smlad	r3, r1, r8, r3
 80205aa:	fb22 440e 	smlad	r4, r2, lr, r4
 80205ae:	fb22 330c 	smlad	r3, r2, ip, r3
 80205b2:	45ca      	cmp	sl, r9
 80205b4:	d1d8      	bne.n	8020568 <st_sssa8_ch_nn_mat_mult_nt_t+0x2c8>
 80205b6:	9a00      	ldr	r2, [sp, #0]
 80205b8:	9906      	ldr	r1, [sp, #24]
 80205ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80205be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80205c2:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 80205c6:	f109 0904 	add.w	r9, r9, #4
 80205ca:	9200      	str	r2, [sp, #0]
 80205cc:	9a07      	ldr	r2, [sp, #28]
 80205ce:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80205d2:	45cb      	cmp	fp, r9
 80205d4:	eb0a 020b 	add.w	r2, sl, fp
 80205d8:	f340 812a 	ble.w	8020830 <st_sssa8_ch_nn_mat_mult_nt_t+0x590>
 80205dc:	9900      	ldr	r1, [sp, #0]
 80205de:	f109 0201 	add.w	r2, r9, #1
 80205e2:	f99a c000 	ldrsb.w	ip, [sl]
 80205e6:	f9b1 7000 	ldrsh.w	r7, [r1]
 80205ea:	4593      	cmp	fp, r2
 80205ec:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80205f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80205f2:	fb17 660c 	smlabb	r6, r7, ip, r6
 80205f6:	fb15 000c 	smlabb	r0, r5, ip, r0
 80205fa:	eb0a 0e01 	add.w	lr, sl, r1
 80205fe:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 8020602:	fb17 4401 	smlabb	r4, r7, r1, r4
 8020606:	fb15 3301 	smlabb	r3, r5, r1, r3
 802060a:	f340 8113 	ble.w	8020834 <st_sssa8_ch_nn_mat_mult_nt_t+0x594>
 802060e:	9a00      	ldr	r2, [sp, #0]
 8020610:	f109 0902 	add.w	r9, r9, #2
 8020614:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 8020618:	f10a 0c02 	add.w	ip, sl, #2
 802061c:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8020620:	45cb      	cmp	fp, r9
 8020622:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8020626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020628:	fb15 6607 	smlabb	r6, r5, r7, r6
 802062c:	fb11 0007 	smlabb	r0, r1, r7, r0
 8020630:	4696      	mov	lr, r2
 8020632:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 8020636:	fb15 4402 	smlabb	r4, r5, r2, r4
 802063a:	eb0c 050b 	add.w	r5, ip, fp
 802063e:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020642:	f340 8137 	ble.w	80208b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x614>
 8020646:	9a00      	ldr	r2, [sp, #0]
 8020648:	f10a 0703 	add.w	r7, sl, #3
 802064c:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 8020650:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8020654:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 8020658:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 802065c:	fb11 4405 	smlabb	r4, r1, r5, r4
 8020660:	fb1c 3305 	smlabb	r3, ip, r5, r3
 8020664:	eb07 0a0b 	add.w	sl, r7, fp
 8020668:	fb11 6602 	smlabb	r6, r1, r2, r6
 802066c:	fb1c 0002 	smlabb	r0, ip, r2, r0
 8020670:	9a03      	ldr	r2, [sp, #12]
 8020672:	2a15      	cmp	r2, #21
 8020674:	f340 80c7 	ble.w	8020806 <st_sssa8_ch_nn_mat_mult_nt_t+0x566>
 8020678:	991a      	ldr	r1, [sp, #104]	; 0x68
 802067a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802067c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 802067e:	fb56 5602 	smmla	r6, r6, r2, r5
 8020682:	fb54 5402 	smmla	r4, r4, r2, r5
 8020686:	410e      	asrs	r6, r1
 8020688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802068a:	4416      	add	r6, r2
 802068c:	f306 0607 	ssat	r6, #8, r6
 8020690:	410c      	asrs	r4, r1
 8020692:	9901      	ldr	r1, [sp, #4]
 8020694:	4414      	add	r4, r2
 8020696:	700e      	strb	r6, [r1, #0]
 8020698:	f304 0407 	ssat	r4, #8, r4
 802069c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802069e:	548c      	strb	r4, [r1, r2]
 80206a0:	9a04      	ldr	r2, [sp, #16]
 80206a2:	2a15      	cmp	r2, #21
 80206a4:	f340 809e 	ble.w	80207e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x544>
 80206a8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80206aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80206ac:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80206ae:	fb50 4002 	smmla	r0, r0, r2, r4
 80206b2:	fb53 4302 	smmla	r3, r3, r2, r4
 80206b6:	4108      	asrs	r0, r1
 80206b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206ba:	4410      	add	r0, r2
 80206bc:	f300 0007 	ssat	r0, #8, r0
 80206c0:	410b      	asrs	r3, r1
 80206c2:	9901      	ldr	r1, [sp, #4]
 80206c4:	4413      	add	r3, r2
 80206c6:	7048      	strb	r0, [r1, #1]
 80206c8:	f303 0307 	ssat	r3, #8, r3
 80206cc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80206ce:	188a      	adds	r2, r1, r2
 80206d0:	7053      	strb	r3, [r2, #1]
 80206d2:	460b      	mov	r3, r1
 80206d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80206d6:	4413      	add	r3, r2
 80206d8:	9301      	str	r3, [sp, #4]
 80206da:	9b02      	ldr	r3, [sp, #8]
 80206dc:	3b01      	subs	r3, #1
 80206de:	9302      	str	r3, [sp, #8]
 80206e0:	f47f ae82 	bne.w	80203e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x148>
 80206e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206e6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80206e8:	eb03 0b02 	add.w	fp, r3, r2
 80206ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	f040 80e2 	bne.w	80208b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x618>
 80206f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80206f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80206f8:	4413      	add	r3, r2
 80206fa:	931c      	str	r3, [sp, #112]	; 0x70
 80206fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206fe:	3302      	adds	r3, #2
 8020700:	9316      	str	r3, [sp, #88]	; 0x58
 8020702:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8020704:	b11b      	cbz	r3, 802070e <st_sssa8_ch_nn_mat_mult_nt_t+0x46e>
 8020706:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020708:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802070a:	4413      	add	r3, r2
 802070c:	9343      	str	r3, [sp, #268]	; 0x10c
 802070e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8020710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020712:	3204      	adds	r2, #4
 8020714:	3308      	adds	r3, #8
 8020716:	9217      	str	r2, [sp, #92]	; 0x5c
 8020718:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802071a:	9315      	str	r3, [sp, #84]	; 0x54
 802071c:	429a      	cmp	r2, r3
 802071e:	f47f ae11 	bne.w	8020344 <st_sssa8_ch_nn_mat_mult_nt_t+0xa4>
 8020722:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020724:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020726:	3201      	adds	r2, #1
 8020728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802072a:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 802072e:	fb02 1303 	mla	r3, r2, r3, r1
 8020732:	9329      	str	r3, [sp, #164]	; 0xa4
 8020734:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020736:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802073a:	932e      	str	r3, [sp, #184]	; 0xb8
 802073c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 802073e:	07db      	lsls	r3, r3, #31
 8020740:	d54c      	bpl.n	80207dc <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 8020742:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8020744:	2b00      	cmp	r3, #0
 8020746:	dd49      	ble.n	80207dc <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 8020748:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 802074a:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 802074e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8020752:	2500      	movs	r5, #0
 8020754:	441e      	add	r6, r3
 8020756:	f04f 0801 	mov.w	r8, #1
 802075a:	441f      	add	r7, r3
 802075c:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 802075e:	00b6      	lsls	r6, r6, #2
 8020760:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020762:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020766:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020768:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 802076c:	4433      	add	r3, r6
 802076e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8020772:	469e      	mov	lr, r3
 8020774:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020776:	eb03 0c06 	add.w	ip, r3, r6
 802077a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 802077c:	f8cd e000 	str.w	lr, [sp]
 8020780:	441e      	add	r6, r3
 8020782:	9b00      	ldr	r3, [sp, #0]
 8020784:	f1bb 0f00 	cmp.w	fp, #0
 8020788:	6819      	ldr	r1, [r3, #0]
 802078a:	dd0d      	ble.n	80207a8 <st_sssa8_ch_nn_mat_mult_nt_t+0x508>
 802078c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802078e:	eb02 0e0b 	add.w	lr, r2, fp
 8020792:	1e58      	subs	r0, r3, #1
 8020794:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8020798:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 802079c:	eba3 0309 	sub.w	r3, r3, r9
 80207a0:	4572      	cmp	r2, lr
 80207a2:	fb04 1103 	mla	r1, r4, r3, r1
 80207a6:	d1f5      	bne.n	8020794 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f4>
 80207a8:	f9b7 0000 	ldrsh.w	r0, [r7]
 80207ac:	f8dc e000 	ldr.w	lr, [ip]
 80207b0:	2815      	cmp	r0, #21
 80207b2:	6834      	ldr	r4, [r6, #0]
 80207b4:	f340 8243 	ble.w	8020c3e <st_sssa8_ch_nn_mat_mult_nt_t+0x99e>
 80207b8:	1e83      	subs	r3, r0, #2
 80207ba:	3801      	subs	r0, #1
 80207bc:	fa08 f303 	lsl.w	r3, r8, r3
 80207c0:	fb51 330e 	smmla	r3, r1, lr, r3
 80207c4:	4103      	asrs	r3, r0
 80207c6:	4423      	add	r3, r4
 80207c8:	f303 0307 	ssat	r3, #8, r3
 80207cc:	f88a 3000 	strb.w	r3, [sl]
 80207d0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80207d2:	3501      	adds	r5, #1
 80207d4:	449a      	add	sl, r3
 80207d6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80207d8:	42ab      	cmp	r3, r5
 80207da:	d1d2      	bne.n	8020782 <st_sssa8_ch_nn_mat_mult_nt_t+0x4e2>
 80207dc:	2000      	movs	r0, #0
 80207de:	b033      	add	sp, #204	; 0xcc
 80207e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e4:	2a00      	cmp	r2, #0
 80207e6:	dd27      	ble.n	8020838 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 80207e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80207ea:	0040      	lsls	r0, r0, #1
 80207ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80207ee:	005b      	lsls	r3, r3, #1
 80207f0:	fb50 5001 	smmla	r0, r0, r1, r5
 80207f4:	fb53 5301 	smmla	r3, r3, r1, r5
 80207f8:	4110      	asrs	r0, r2
 80207fa:	f300 0007 	ssat	r0, #8, r0
 80207fe:	9901      	ldr	r1, [sp, #4]
 8020800:	4113      	asrs	r3, r2
 8020802:	7048      	strb	r0, [r1, #1]
 8020804:	e760      	b.n	80206c8 <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 8020806:	2a00      	cmp	r2, #0
 8020808:	dd31      	ble.n	802086e <st_sssa8_ch_nn_mat_mult_nt_t+0x5ce>
 802080a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802080c:	0076      	lsls	r6, r6, #1
 802080e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020810:	0064      	lsls	r4, r4, #1
 8020812:	fb56 7601 	smmla	r6, r6, r1, r7
 8020816:	fb54 7401 	smmla	r4, r4, r1, r7
 802081a:	4116      	asrs	r6, r2
 802081c:	f306 0607 	ssat	r6, #8, r6
 8020820:	9901      	ldr	r1, [sp, #4]
 8020822:	4114      	asrs	r4, r2
 8020824:	700e      	strb	r6, [r1, #0]
 8020826:	f304 0407 	ssat	r4, #8, r4
 802082a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802082c:	548c      	strb	r4, [r1, r2]
 802082e:	e737      	b.n	80206a0 <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 8020830:	4692      	mov	sl, r2
 8020832:	e71d      	b.n	8020670 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 8020834:	46f2      	mov	sl, lr
 8020836:	e71b      	b.n	8020670 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 8020838:	991e      	ldr	r1, [sp, #120]	; 0x78
 802083a:	fa00 f201 	lsl.w	r2, r0, r1
 802083e:	f302 021f 	ssat	r2, #32, r2
 8020842:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020844:	fb52 f210 	smmulr	r2, r2, r0
 8020848:	408b      	lsls	r3, r1
 802084a:	f303 031f 	ssat	r3, #32, r3
 802084e:	fb53 f310 	smmulr	r3, r3, r0
 8020852:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020854:	440a      	add	r2, r1
 8020856:	f302 0207 	ssat	r2, #8, r2
 802085a:	9801      	ldr	r0, [sp, #4]
 802085c:	440b      	add	r3, r1
 802085e:	7042      	strb	r2, [r0, #1]
 8020860:	f303 0307 	ssat	r3, #8, r3
 8020864:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8020866:	1882      	adds	r2, r0, r2
 8020868:	7053      	strb	r3, [r2, #1]
 802086a:	4603      	mov	r3, r0
 802086c:	e732      	b.n	80206d4 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 802086e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8020870:	fa06 f201 	lsl.w	r2, r6, r1
 8020874:	f302 021f 	ssat	r2, #32, r2
 8020878:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802087a:	fb52 f215 	smmulr	r2, r2, r5
 802087e:	fa04 f101 	lsl.w	r1, r4, r1
 8020882:	f301 011f 	ssat	r1, #32, r1
 8020886:	fb51 f115 	smmulr	r1, r1, r5
 802088a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802088c:	4422      	add	r2, r4
 802088e:	f302 0207 	ssat	r2, #8, r2
 8020892:	9d01      	ldr	r5, [sp, #4]
 8020894:	4421      	add	r1, r4
 8020896:	702a      	strb	r2, [r5, #0]
 8020898:	f301 0107 	ssat	r1, #8, r1
 802089c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802089e:	54a9      	strb	r1, [r5, r2]
 80208a0:	e6fe      	b.n	80206a0 <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 80208a2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80208a4:	f04f 0900 	mov.w	r9, #0
 80208a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80208aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80208ac:	9300      	str	r3, [sp, #0]
 80208ae:	4603      	mov	r3, r0
 80208b0:	4634      	mov	r4, r6
 80208b2:	e646      	b.n	8020542 <st_sssa8_ch_nn_mat_mult_nt_t+0x2a2>
 80208b4:	46aa      	mov	sl, r5
 80208b6:	e6db      	b.n	8020670 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 80208b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	f340 81fe 	ble.w	8020cbc <st_sssa8_ch_nn_mat_mult_nt_t+0xa1c>
 80208c0:	9b05      	ldr	r3, [sp, #20]
 80208c2:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 80208c4:	eb0a 0703 	add.w	r7, sl, r3
 80208c8:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	; 0x24
 80208cc:	f8da 2000 	ldr.w	r2, [sl]
 80208d0:	6828      	ldr	r0, [r5, #0]
 80208d2:	fa2f f182 	sxtb16	r1, r2
 80208d6:	fa2f f292 	sxtb16	r2, r2, ror #8
 80208da:	fb21 4000 	smlad	r0, r1, r0, r4
 80208de:	686c      	ldr	r4, [r5, #4]
 80208e0:	fb22 0404 	smlad	r4, r2, r4, r0
 80208e4:	68a8      	ldr	r0, [r5, #8]
 80208e6:	fb21 3300 	smlad	r3, r1, r0, r3
 80208ea:	68e9      	ldr	r1, [r5, #12]
 80208ec:	fb22 3201 	smlad	r2, r2, r1, r3
 80208f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80208f4:	6928      	ldr	r0, [r5, #16]
 80208f6:	fa2f f183 	sxtb16	r1, r3
 80208fa:	fa2f f393 	sxtb16	r3, r3, ror #8
 80208fe:	fb21 4000 	smlad	r0, r1, r0, r4
 8020902:	696c      	ldr	r4, [r5, #20]
 8020904:	fb23 0404 	smlad	r4, r3, r4, r0
 8020908:	69a8      	ldr	r0, [r5, #24]
 802090a:	fb21 2100 	smlad	r1, r1, r0, r2
 802090e:	69ea      	ldr	r2, [r5, #28]
 8020910:	fb23 1302 	smlad	r3, r3, r2, r1
 8020914:	f8da 2008 	ldr.w	r2, [sl, #8]
 8020918:	6a28      	ldr	r0, [r5, #32]
 802091a:	fa2f f182 	sxtb16	r1, r2
 802091e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8020922:	fb21 4000 	smlad	r0, r1, r0, r4
 8020926:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8020928:	fb22 0606 	smlad	r6, r2, r6, r0
 802092c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 802092e:	fb21 3100 	smlad	r1, r1, r0, r3
 8020932:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8020934:	fb22 1203 	smlad	r2, r2, r3, r1
 8020938:	f8da 400c 	ldr.w	r4, [sl, #12]
 802093c:	3540      	adds	r5, #64	; 0x40
 802093e:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8020942:	f10a 0a10 	add.w	sl, sl, #16
 8020946:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 802094a:	f855 ec08 	ldr.w	lr, [r5, #-8]
 802094e:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8020952:	fa2f f184 	sxtb16	r1, r4
 8020956:	fa2f f394 	sxtb16	r3, r4, ror #8
 802095a:	fb21 6000 	smlad	r0, r1, r0, r6
 802095e:	fb23 0408 	smlad	r4, r3, r8, r0
 8020962:	fb21 220e 	smlad	r2, r1, lr, r2
 8020966:	fb23 230c 	smlad	r3, r3, ip, r2
 802096a:	45ba      	cmp	sl, r7
 802096c:	d1ae      	bne.n	80208cc <st_sssa8_ch_nn_mat_mult_nt_t+0x62c>
 802096e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020970:	f8dd e014 	ldr.w	lr, [sp, #20]
 8020974:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 8020978:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802097a:	eb03 0c02 	add.w	ip, r3, r2
 802097e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8020980:	3b03      	subs	r3, #3
 8020982:	459e      	cmp	lr, r3
 8020984:	da34      	bge.n	80209f0 <st_sssa8_ch_nn_mat_mult_nt_t+0x750>
 8020986:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020988:	4661      	mov	r1, ip
 802098a:	f8cd c000 	str.w	ip, [sp]
 802098e:	eba3 090e 	sub.w	r9, r3, lr
 8020992:	f8cd e004 	str.w	lr, [sp, #4]
 8020996:	ea4f 0999 	mov.w	r9, r9, lsr #2
 802099a:	f109 0801 	add.w	r8, r9, #1
 802099e:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80209a2:	eb0a 0788 	add.w	r7, sl, r8, lsl #2
 80209a6:	f85a 3b04 	ldr.w	r3, [sl], #4
 80209aa:	3110      	adds	r1, #16
 80209ac:	f851 0c10 	ldr.w	r0, [r1, #-16]
 80209b0:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 80209b4:	f851 cc08 	ldr.w	ip, [r1, #-8]
 80209b8:	f851 6c04 	ldr.w	r6, [r1, #-4]
 80209bc:	fa2f f283 	sxtb16	r2, r3
 80209c0:	fa2f f393 	sxtb16	r3, r3, ror #8
 80209c4:	fb22 4400 	smlad	r4, r2, r0, r4
 80209c8:	fb23 440e 	smlad	r4, r3, lr, r4
 80209cc:	fb22 550c 	smlad	r5, r2, ip, r5
 80209d0:	fb23 5506 	smlad	r5, r3, r6, r5
 80209d4:	45ba      	cmp	sl, r7
 80209d6:	d1e6      	bne.n	80209a6 <st_sssa8_ch_nn_mat_mult_nt_t+0x706>
 80209d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209dc:	f8dd c000 	ldr.w	ip, [sp]
 80209e0:	f10e 0e04 	add.w	lr, lr, #4
 80209e4:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 80209e8:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 80209ec:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80209f0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80209f2:	4573      	cmp	r3, lr
 80209f4:	dd2f      	ble.n	8020a56 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 80209f6:	f99a 2000 	ldrsb.w	r2, [sl]
 80209fa:	f10e 0301 	add.w	r3, lr, #1
 80209fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020a00:	f8bc 0000 	ldrh.w	r0, [ip]
 8020a04:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8020a08:	fb10 4002 	smlabb	r0, r0, r2, r4
 8020a0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020a0e:	fb11 4402 	smlabb	r4, r1, r2, r4
 8020a12:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8020a14:	9009      	str	r0, [sp, #36]	; 0x24
 8020a16:	429a      	cmp	r2, r3
 8020a18:	940a      	str	r4, [sp, #40]	; 0x28
 8020a1a:	dd1c      	ble.n	8020a56 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 8020a1c:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 8020a20:	f10e 0e02 	add.w	lr, lr, #2
 8020a24:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8020a28:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8020a2c:	fb11 0003 	smlabb	r0, r1, r3, r0
 8020a30:	fb12 4403 	smlabb	r4, r2, r3, r4
 8020a34:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8020a36:	9009      	str	r0, [sp, #36]	; 0x24
 8020a38:	4573      	cmp	r3, lr
 8020a3a:	940a      	str	r4, [sp, #40]	; 0x28
 8020a3c:	dd0b      	ble.n	8020a56 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 8020a3e:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 8020a42:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8020a46:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 8020a4a:	fb12 0203 	smlabb	r2, r2, r3, r0
 8020a4e:	fb11 4303 	smlabb	r3, r1, r3, r4
 8020a52:	9209      	str	r2, [sp, #36]	; 0x24
 8020a54:	930a      	str	r3, [sp, #40]	; 0x28
 8020a56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020a58:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 8020a5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a5e:	2a15      	cmp	r2, #21
 8020a60:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020a64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a66:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8020a6a:	f340 80d7 	ble.w	8020c1c <st_sssa8_ch_nn_mat_mult_nt_t+0x97c>
 8020a6e:	1e93      	subs	r3, r2, #2
 8020a70:	2401      	movs	r4, #1
 8020a72:	3a01      	subs	r2, #1
 8020a74:	fa04 f303 	lsl.w	r3, r4, r3
 8020a78:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020a7a:	fb54 3300 	smmla	r3, r4, r0, r3
 8020a7e:	4113      	asrs	r3, r2
 8020a80:	440b      	add	r3, r1
 8020a82:	f303 0307 	ssat	r3, #8, r3
 8020a86:	f88b 3000 	strb.w	r3, [fp]
 8020a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020a8c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020a90:	2915      	cmp	r1, #21
 8020a92:	f340 80b1 	ble.w	8020bf8 <st_sssa8_ch_nn_mat_mult_nt_t+0x958>
 8020a96:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020a98:	1e8a      	subs	r2, r1, #2
 8020a9a:	3901      	subs	r1, #1
 8020a9c:	461c      	mov	r4, r3
 8020a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020aa0:	58e0      	ldr	r0, [r4, r3]
 8020aa2:	2401      	movs	r4, #1
 8020aa4:	fa04 f202 	lsl.w	r2, r4, r2
 8020aa8:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8020aaa:	58e3      	ldr	r3, [r4, r3]
 8020aac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020aae:	fb54 2200 	smmla	r2, r4, r0, r2
 8020ab2:	410a      	asrs	r2, r1
 8020ab4:	4413      	add	r3, r2
 8020ab6:	f303 0307 	ssat	r3, #8, r3
 8020aba:	f88b 3001 	strb.w	r3, [fp, #1]
 8020abe:	e619      	b.n	80206f4 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8020ac0:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8020ac2:	2c00      	cmp	r4, #0
 8020ac4:	f000 80f6 	beq.w	8020cb4 <st_sssa8_ch_nn_mat_mult_nt_t+0xa14>
 8020ac8:	2300      	movs	r3, #0
 8020aca:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8020acc:	4619      	mov	r1, r3
 8020ace:	f102 0010 	add.w	r0, r2, #16
 8020ad2:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 8020ad6:	3c01      	subs	r4, #1
 8020ad8:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 8020adc:	f100 0010 	add.w	r0, r0, #16
 8020ae0:	eba1 0105 	sub.w	r1, r1, r5
 8020ae4:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 8020ae8:	eba3 0302 	sub.w	r3, r3, r2
 8020aec:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 8020af0:	eba1 0105 	sub.w	r1, r1, r5
 8020af4:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 8020af8:	eba3 0302 	sub.w	r3, r3, r2
 8020afc:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 8020b00:	eba1 0105 	sub.w	r1, r1, r5
 8020b04:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 8020b08:	eba3 0302 	sub.w	r3, r3, r2
 8020b0c:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 8020b10:	eba1 0105 	sub.w	r1, r1, r5
 8020b14:	eba3 0302 	sub.w	r3, r3, r2
 8020b18:	d1db      	bne.n	8020ad2 <st_sssa8_ch_nn_mat_mult_nt_t+0x832>
 8020b1a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8020b1c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8020b1e:	4402      	add	r2, r0
 8020b20:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8020b22:	b1cd      	cbz	r5, 8020b58 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 8020b24:	f9b2 4000 	ldrsh.w	r4, [r2]
 8020b28:	2d01      	cmp	r5, #1
 8020b2a:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8020b2e:	eba1 0104 	sub.w	r1, r1, r4
 8020b32:	eba3 0300 	sub.w	r3, r3, r0
 8020b36:	d00f      	beq.n	8020b58 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 8020b38:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8020b3c:	2d02      	cmp	r5, #2
 8020b3e:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8020b42:	eba1 0104 	sub.w	r1, r1, r4
 8020b46:	eba3 0300 	sub.w	r3, r3, r0
 8020b4a:	d005      	beq.n	8020b58 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 8020b4c:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 8020b50:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8020b54:	1a09      	subs	r1, r1, r0
 8020b56:	1a9b      	subs	r3, r3, r2
 8020b58:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020b5a:	fb02 f101 	mul.w	r1, r2, r1
 8020b5e:	fb02 f303 	mul.w	r3, r2, r3
 8020b62:	e412      	b.n	802038a <st_sssa8_ch_nn_mat_mult_nt_t+0xea>
 8020b64:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8020b66:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8020b68:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8020b6a:	18f5      	adds	r5, r6, r3
 8020b6c:	2c00      	cmp	r4, #0
 8020b6e:	f000 80aa 	beq.w	8020cc6 <st_sssa8_ch_nn_mat_mult_nt_t+0xa26>
 8020b72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020b74:	f856 1b04 	ldr.w	r1, [r6], #4
 8020b78:	3c01      	subs	r4, #1
 8020b7a:	f855 2b04 	ldr.w	r2, [r5], #4
 8020b7e:	f103 0310 	add.w	r3, r3, #16
 8020b82:	ea4f 2031 	mov.w	r0, r1, ror #8
 8020b86:	fa2f f181 	sxtb16	r1, r1
 8020b8a:	fa2f f080 	sxtb16	r0, r0
 8020b8e:	f843 1c10 	str.w	r1, [r3, #-16]
 8020b92:	ea4f 2132 	mov.w	r1, r2, ror #8
 8020b96:	f843 0c0c 	str.w	r0, [r3, #-12]
 8020b9a:	fa2f f181 	sxtb16	r1, r1
 8020b9e:	fa2f f282 	sxtb16	r2, r2
 8020ba2:	f843 1c04 	str.w	r1, [r3, #-4]
 8020ba6:	f843 2c08 	str.w	r2, [r3, #-8]
 8020baa:	d1e3      	bne.n	8020b74 <st_sssa8_ch_nn_mat_mult_nt_t+0x8d4>
 8020bac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020bae:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8020bb0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020bb2:	185d      	adds	r5, r3, r1
 8020bb4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020bb6:	189a      	adds	r2, r3, r2
 8020bb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020bba:	440b      	add	r3, r1
 8020bbc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8020bbe:	2800      	cmp	r0, #0
 8020bc0:	f43f abde 	beq.w	8020380 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8020bc4:	f992 1000 	ldrsb.w	r1, [r2]
 8020bc8:	2801      	cmp	r0, #1
 8020bca:	8019      	strh	r1, [r3, #0]
 8020bcc:	f995 1000 	ldrsb.w	r1, [r5]
 8020bd0:	8059      	strh	r1, [r3, #2]
 8020bd2:	f43f abd5 	beq.w	8020380 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8020bd6:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8020bda:	2802      	cmp	r0, #2
 8020bdc:	8099      	strh	r1, [r3, #4]
 8020bde:	f995 1001 	ldrsb.w	r1, [r5, #1]
 8020be2:	80d9      	strh	r1, [r3, #6]
 8020be4:	f43f abcc 	beq.w	8020380 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8020be8:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8020bec:	811a      	strh	r2, [r3, #8]
 8020bee:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8020bf2:	815a      	strh	r2, [r3, #10]
 8020bf4:	f7ff bbc4 	b.w	8020380 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8020bf8:	2900      	cmp	r1, #0
 8020bfa:	dd47      	ble.n	8020c8c <st_sssa8_ch_nn_mat_mult_nt_t+0x9ec>
 8020bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020c00:	0058      	lsls	r0, r3, #1
 8020c02:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020c04:	461c      	mov	r4, r3
 8020c06:	58a3      	ldr	r3, [r4, r2]
 8020c08:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8020c0a:	58a2      	ldr	r2, [r4, r2]
 8020c0c:	fb50 2303 	smmla	r3, r0, r3, r2
 8020c10:	410b      	asrs	r3, r1
 8020c12:	f303 0307 	ssat	r3, #8, r3
 8020c16:	f88b 3001 	strb.w	r3, [fp, #1]
 8020c1a:	e56b      	b.n	80206f4 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8020c1c:	2a00      	cmp	r2, #0
 8020c1e:	dd27      	ble.n	8020c70 <st_sssa8_ch_nn_mat_mult_nt_t+0x9d0>
 8020c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c22:	005b      	lsls	r3, r3, #1
 8020c24:	fb53 1300 	smmla	r3, r3, r0, r1
 8020c28:	4113      	asrs	r3, r2
 8020c2a:	f303 0307 	ssat	r3, #8, r3
 8020c2e:	f88b 3000 	strb.w	r3, [fp]
 8020c32:	e72a      	b.n	8020a8a <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 8020c34:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8020c38:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8020c3c:	e556      	b.n	80206ec <st_sssa8_ch_nn_mat_mult_nt_t+0x44c>
 8020c3e:	2800      	cmp	r0, #0
 8020c40:	dd08      	ble.n	8020c54 <st_sssa8_ch_nn_mat_mult_nt_t+0x9b4>
 8020c42:	0049      	lsls	r1, r1, #1
 8020c44:	fb51 410e 	smmla	r1, r1, lr, r4
 8020c48:	4101      	asrs	r1, r0
 8020c4a:	f301 0307 	ssat	r3, #8, r1
 8020c4e:	f88a 3000 	strb.w	r3, [sl]
 8020c52:	e5bd      	b.n	80207d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 8020c54:	f1c0 0001 	rsb	r0, r0, #1
 8020c58:	fa01 f000 	lsl.w	r0, r1, r0
 8020c5c:	f300 031f 	ssat	r3, #32, r0
 8020c60:	fb53 f31e 	smmulr	r3, r3, lr
 8020c64:	4423      	add	r3, r4
 8020c66:	f303 0307 	ssat	r3, #8, r3
 8020c6a:	f88a 3000 	strb.w	r3, [sl]
 8020c6e:	e5af      	b.n	80207d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 8020c70:	f1c2 0201 	rsb	r2, r2, #1
 8020c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c76:	4093      	lsls	r3, r2
 8020c78:	f303 031f 	ssat	r3, #32, r3
 8020c7c:	fb53 f310 	smmulr	r3, r3, r0
 8020c80:	440b      	add	r3, r1
 8020c82:	f303 0307 	ssat	r3, #8, r3
 8020c86:	f88b 3000 	strb.w	r3, [fp]
 8020c8a:	e6fe      	b.n	8020a8a <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 8020c8c:	f1c1 0101 	rsb	r1, r1, #1
 8020c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c92:	408a      	lsls	r2, r1
 8020c94:	f302 021f 	ssat	r2, #32, r2
 8020c98:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8020c9a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020c9c:	4618      	mov	r0, r3
 8020c9e:	5843      	ldr	r3, [r0, r1]
 8020ca0:	fb52 f213 	smmulr	r2, r2, r3
 8020ca4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8020ca6:	585b      	ldr	r3, [r3, r1]
 8020ca8:	4413      	add	r3, r2
 8020caa:	f303 0307 	ssat	r3, #8, r3
 8020cae:	f88b 3001 	strb.w	r3, [fp, #1]
 8020cb2:	e51f      	b.n	80206f4 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8020cb4:	4621      	mov	r1, r4
 8020cb6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8020cb8:	4623      	mov	r3, r4
 8020cba:	e731      	b.n	8020b20 <st_sssa8_ch_nn_mat_mult_nt_t+0x880>
 8020cbc:	f8dd c10c 	ldr.w	ip, [sp, #268]	; 0x10c
 8020cc0:	f04f 0e00 	mov.w	lr, #0
 8020cc4:	e65b      	b.n	802097e <st_sssa8_ch_nn_mat_mult_nt_t+0x6de>
 8020cc6:	4632      	mov	r2, r6
 8020cc8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020cca:	e777      	b.n	8020bbc <st_sssa8_ch_nn_mat_mult_nt_t+0x91c>

08020ccc <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8020ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cd0:	b09b      	sub	sp, #108	; 0x6c
 8020cd2:	4683      	mov	fp, r0
 8020cd4:	460f      	mov	r7, r1
 8020cd6:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 8020cda:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8020cdc:	910d      	str	r1, [sp, #52]	; 0x34
 8020cde:	0861      	lsrs	r1, r4, #1
 8020ce0:	eb00 0503 	add.w	r5, r0, r3
 8020ce4:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 8020ce8:	9318      	str	r3, [sp, #96]	; 0x60
 8020cea:	9417      	str	r4, [sp, #92]	; 0x5c
 8020cec:	9215      	str	r2, [sp, #84]	; 0x54
 8020cee:	9516      	str	r5, [sp, #88]	; 0x58
 8020cf0:	9006      	str	r0, [sp, #24]
 8020cf2:	f000 81ca 	beq.w	802108a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3be>
 8020cf6:	3901      	subs	r1, #1
 8020cf8:	1ec4      	subs	r4, r0, #3
 8020cfa:	3210      	adds	r2, #16
 8020cfc:	f1a0 0310 	sub.w	r3, r0, #16
 8020d00:	940f      	str	r4, [sp, #60]	; 0x3c
 8020d02:	b28c      	uxth	r4, r1
 8020d04:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020d06:	091b      	lsrs	r3, r3, #4
 8020d08:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8020d0c:	9419      	str	r4, [sp, #100]	; 0x64
 8020d0e:	3108      	adds	r1, #8
 8020d10:	3301      	adds	r3, #1
 8020d12:	920e      	str	r2, [sp, #56]	; 0x38
 8020d14:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 8020d18:	9107      	str	r1, [sp, #28]
 8020d1a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020d1c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020d1e:	3104      	adds	r1, #4
 8020d20:	9610      	str	r6, [sp, #64]	; 0x40
 8020d22:	3208      	adds	r2, #8
 8020d24:	9101      	str	r1, [sp, #4]
 8020d26:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020d28:	9205      	str	r2, [sp, #20]
 8020d2a:	015a      	lsls	r2, r3, #5
 8020d2c:	3102      	adds	r1, #2
 8020d2e:	9104      	str	r1, [sp, #16]
 8020d30:	0199      	lsls	r1, r3, #6
 8020d32:	011b      	lsls	r3, r3, #4
 8020d34:	9111      	str	r1, [sp, #68]	; 0x44
 8020d36:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d38:	1cab      	adds	r3, r5, #2
 8020d3a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020d3c:	9303      	str	r3, [sp, #12]
 8020d3e:	1f03      	subs	r3, r0, #4
 8020d40:	3108      	adds	r1, #8
 8020d42:	9314      	str	r3, [sp, #80]	; 0x50
 8020d44:	9102      	str	r1, [sp, #8]
 8020d46:	18b9      	adds	r1, r7, r2
 8020d48:	9b07      	ldr	r3, [sp, #28]
 8020d4a:	18b2      	adds	r2, r6, r2
 8020d4c:	9108      	str	r1, [sp, #32]
 8020d4e:	9212      	str	r2, [sp, #72]	; 0x48
 8020d50:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8020d54:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020d58:	9b06      	ldr	r3, [sp, #24]
 8020d5a:	2b0f      	cmp	r3, #15
 8020d5c:	f340 82a6 	ble.w	80212ac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5e0>
 8020d60:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8020d64:	46dc      	mov	ip, fp
 8020d66:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8020d6a:	4603      	mov	r3, r0
 8020d6c:	462c      	mov	r4, r5
 8020d6e:	9e08      	ldr	r6, [sp, #32]
 8020d70:	f8de 7000 	ldr.w	r7, [lr]
 8020d74:	f8d8 2000 	ldr.w	r2, [r8]
 8020d78:	f8dc 1000 	ldr.w	r1, [ip]
 8020d7c:	f8dc a004 	ldr.w	sl, [ip, #4]
 8020d80:	fb21 5507 	smlad	r5, r1, r7, r5
 8020d84:	fb21 4102 	smlad	r1, r1, r2, r4
 8020d88:	fb2a 0007 	smlad	r0, sl, r7, r0
 8020d8c:	fb2a 3202 	smlad	r2, sl, r2, r3
 8020d90:	f8de 7004 	ldr.w	r7, [lr, #4]
 8020d94:	f8d8 a004 	ldr.w	sl, [r8, #4]
 8020d98:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8020d9c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8020da0:	fb24 5507 	smlad	r5, r4, r7, r5
 8020da4:	fb24 110a 	smlad	r1, r4, sl, r1
 8020da8:	fb23 0007 	smlad	r0, r3, r7, r0
 8020dac:	fb23 230a 	smlad	r3, r3, sl, r2
 8020db0:	f8de 7008 	ldr.w	r7, [lr, #8]
 8020db4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8020db8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8020dbc:	f8dc a014 	ldr.w	sl, [ip, #20]
 8020dc0:	fb24 5507 	smlad	r5, r4, r7, r5
 8020dc4:	fb24 1102 	smlad	r1, r4, r2, r1
 8020dc8:	fb2a 0007 	smlad	r0, sl, r7, r0
 8020dcc:	fb2a 3202 	smlad	r2, sl, r2, r3
 8020dd0:	f8de 700c 	ldr.w	r7, [lr, #12]
 8020dd4:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8020dd8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8020ddc:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8020de0:	fb24 5507 	smlad	r5, r4, r7, r5
 8020de4:	fb24 140a 	smlad	r4, r4, sl, r1
 8020de8:	fb29 0007 	smlad	r0, r9, r7, r0
 8020dec:	fb29 2a0a 	smlad	sl, r9, sl, r2
 8020df0:	f8de 7010 	ldr.w	r7, [lr, #16]
 8020df4:	f8d8 9010 	ldr.w	r9, [r8, #16]
 8020df8:	f8dc 1020 	ldr.w	r1, [ip, #32]
 8020dfc:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8020e00:	fb21 5507 	smlad	r5, r1, r7, r5
 8020e04:	fb21 4409 	smlad	r4, r1, r9, r4
 8020e08:	fb23 0007 	smlad	r0, r3, r7, r0
 8020e0c:	fb23 a909 	smlad	r9, r3, r9, sl
 8020e10:	f8de 7014 	ldr.w	r7, [lr, #20]
 8020e14:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8020e18:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8020e1c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8020e20:	fb21 5507 	smlad	r5, r1, r7, r5
 8020e24:	fb21 4402 	smlad	r4, r1, r2, r4
 8020e28:	fb23 0007 	smlad	r0, r3, r7, r0
 8020e2c:	fb23 9302 	smlad	r3, r3, r2, r9
 8020e30:	f8de 7018 	ldr.w	r7, [lr, #24]
 8020e34:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8020e38:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 8020e3c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 8020e40:	fb21 5507 	smlad	r5, r1, r7, r5
 8020e44:	fb21 4409 	smlad	r4, r1, r9, r4
 8020e48:	fb22 0707 	smlad	r7, r2, r7, r0
 8020e4c:	fb22 3909 	smlad	r9, r2, r9, r3
 8020e50:	f8de 001c 	ldr.w	r0, [lr, #28]
 8020e54:	f108 0820 	add.w	r8, r8, #32
 8020e58:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8020e5c:	f10e 0e20 	add.w	lr, lr, #32
 8020e60:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 8020e64:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8020e68:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8020e6c:	fb21 5500 	smlad	r5, r1, r0, r5
 8020e70:	fb21 4403 	smlad	r4, r1, r3, r4
 8020e74:	fb22 7000 	smlad	r0, r2, r0, r7
 8020e78:	fb22 9303 	smlad	r3, r2, r3, r9
 8020e7c:	45b6      	cmp	lr, r6
 8020e7e:	f47f af77 	bne.w	8020d70 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa4>
 8020e82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e84:	9f08      	ldr	r7, [sp, #32]
 8020e86:	4493      	add	fp, r2
 8020e88:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8020e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e8e:	9200      	str	r2, [sp, #0]
 8020e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e92:	4596      	cmp	lr, r2
 8020e94:	da41      	bge.n	8020f1a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24e>
 8020e96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020e98:	465e      	mov	r6, fp
 8020e9a:	f8dd c000 	ldr.w	ip, [sp]
 8020e9e:	eba2 020e 	sub.w	r2, r2, lr
 8020ea2:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8020ea6:	0892      	lsrs	r2, r2, #2
 8020ea8:	920b      	str	r2, [sp, #44]	; 0x2c
 8020eaa:	3201      	adds	r2, #1
 8020eac:	920a      	str	r2, [sp, #40]	; 0x28
 8020eae:	00d2      	lsls	r2, r2, #3
 8020eb0:	eb07 0802 	add.w	r8, r7, r2
 8020eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8020eb6:	f8d7 e000 	ldr.w	lr, [r7]
 8020eba:	f8dc 9000 	ldr.w	r9, [ip]
 8020ebe:	6831      	ldr	r1, [r6, #0]
 8020ec0:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8020ec4:	fb21 550e 	smlad	r5, r1, lr, r5
 8020ec8:	fb21 4409 	smlad	r4, r1, r9, r4
 8020ecc:	fb2a 000e 	smlad	r0, sl, lr, r0
 8020ed0:	fb2a 3309 	smlad	r3, sl, r9, r3
 8020ed4:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8020ed8:	f10c 0c08 	add.w	ip, ip, #8
 8020edc:	f85c 9c04 	ldr.w	r9, [ip, #-4]
 8020ee0:	3708      	adds	r7, #8
 8020ee2:	68b1      	ldr	r1, [r6, #8]
 8020ee4:	3610      	adds	r6, #16
 8020ee6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020eea:	fb21 550e 	smlad	r5, r1, lr, r5
 8020eee:	fb21 4409 	smlad	r4, r1, r9, r4
 8020ef2:	fb22 000e 	smlad	r0, r2, lr, r0
 8020ef6:	fb22 3309 	smlad	r3, r2, r9, r3
 8020efa:	4547      	cmp	r7, r8
 8020efc:	d1db      	bne.n	8020eb6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ea>
 8020efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020f02:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 8020f06:	9a00      	ldr	r2, [sp, #0]
 8020f08:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8020f0c:	440a      	add	r2, r1
 8020f0e:	f10e 0e04 	add.w	lr, lr, #4
 8020f12:	9200      	str	r2, [sp, #0]
 8020f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020f16:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8020f1a:	9a06      	ldr	r2, [sp, #24]
 8020f1c:	4572      	cmp	r2, lr
 8020f1e:	dd40      	ble.n	8020fa2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8020f20:	9e00      	ldr	r6, [sp, #0]
 8020f22:	f10e 0201 	add.w	r2, lr, #1
 8020f26:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8020f2a:	f9b7 c000 	ldrsh.w	ip, [r7]
 8020f2e:	f9b6 6000 	ldrsh.w	r6, [r6]
 8020f32:	fb0c 0001 	mla	r0, ip, r1, r0
 8020f36:	f9bb 8000 	ldrsh.w	r8, [fp]
 8020f3a:	fb06 3301 	mla	r3, r6, r1, r3
 8020f3e:	9906      	ldr	r1, [sp, #24]
 8020f40:	fb08 550c 	mla	r5, r8, ip, r5
 8020f44:	4291      	cmp	r1, r2
 8020f46:	fb08 4406 	mla	r4, r8, r6, r4
 8020f4a:	f340 814e 	ble.w	80211ea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51e>
 8020f4e:	9a00      	ldr	r2, [sp, #0]
 8020f50:	f10e 0e02 	add.w	lr, lr, #2
 8020f54:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8020f58:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8020f5c:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8020f60:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 8020f64:	fb06 0002 	mla	r0, r6, r2, r0
 8020f68:	fb01 3302 	mla	r3, r1, r2, r3
 8020f6c:	9a06      	ldr	r2, [sp, #24]
 8020f6e:	fb0c 5506 	mla	r5, ip, r6, r5
 8020f72:	4572      	cmp	r2, lr
 8020f74:	fb0c 4401 	mla	r4, ip, r1, r4
 8020f78:	f340 81a0 	ble.w	80212bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f0>
 8020f7c:	9a00      	ldr	r2, [sp, #0]
 8020f7e:	f10b 0b0c 	add.w	fp, fp, #12
 8020f82:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8020f86:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8020f8a:	f93b 7c04 	ldrsh.w	r7, [fp, #-4]
 8020f8e:	f93b 2c02 	ldrsh.w	r2, [fp, #-2]
 8020f92:	fb07 5506 	mla	r5, r7, r6, r5
 8020f96:	fb07 4401 	mla	r4, r7, r1, r4
 8020f9a:	fb06 0002 	mla	r0, r6, r2, r0
 8020f9e:	fb01 3302 	mla	r3, r1, r2, r3
 8020fa2:	9a01      	ldr	r2, [sp, #4]
 8020fa4:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 8020fa8:	9a05      	ldr	r2, [sp, #20]
 8020faa:	2915      	cmp	r1, #21
 8020fac:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8020fb0:	9a02      	ldr	r2, [sp, #8]
 8020fb2:	f852 7c08 	ldr.w	r7, [r2, #-8]
 8020fb6:	f340 8100 	ble.w	80211ba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ee>
 8020fba:	1e8a      	subs	r2, r1, #2
 8020fbc:	f04f 0c01 	mov.w	ip, #1
 8020fc0:	3901      	subs	r1, #1
 8020fc2:	fa0c f202 	lsl.w	r2, ip, r2
 8020fc6:	fb55 2506 	smmla	r5, r5, r6, r2
 8020fca:	410d      	asrs	r5, r1
 8020fcc:	fb54 2206 	smmla	r2, r4, r6, r2
 8020fd0:	443d      	add	r5, r7
 8020fd2:	f305 0507 	ssat	r5, #8, r5
 8020fd6:	410a      	asrs	r2, r1
 8020fd8:	9904      	ldr	r1, [sp, #16]
 8020fda:	443a      	add	r2, r7
 8020fdc:	f801 5c02 	strb.w	r5, [r1, #-2]
 8020fe0:	f302 0207 	ssat	r2, #8, r2
 8020fe4:	9903      	ldr	r1, [sp, #12]
 8020fe6:	f801 2c02 	strb.w	r2, [r1, #-2]
 8020fea:	9a01      	ldr	r2, [sp, #4]
 8020fec:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8020ff0:	2915      	cmp	r1, #21
 8020ff2:	f340 80c2 	ble.w	802117a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ae>
 8020ff6:	9c05      	ldr	r4, [sp, #20]
 8020ff8:	1e8a      	subs	r2, r1, #2
 8020ffa:	3901      	subs	r1, #1
 8020ffc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8021000:	2401      	movs	r4, #1
 8021002:	fa04 f202 	lsl.w	r2, r4, r2
 8021006:	9c02      	ldr	r4, [sp, #8]
 8021008:	fb50 2005 	smmla	r0, r0, r5, r2
 802100c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8021010:	4108      	asrs	r0, r1
 8021012:	fb53 2305 	smmla	r3, r3, r5, r2
 8021016:	4420      	add	r0, r4
 8021018:	f300 0007 	ssat	r0, #8, r0
 802101c:	410b      	asrs	r3, r1
 802101e:	9a04      	ldr	r2, [sp, #16]
 8021020:	4423      	add	r3, r4
 8021022:	f802 0c01 	strb.w	r0, [r2, #-1]
 8021026:	f303 0307 	ssat	r3, #8, r3
 802102a:	9a03      	ldr	r2, [sp, #12]
 802102c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021030:	9a01      	ldr	r2, [sp, #4]
 8021032:	3204      	adds	r2, #4
 8021034:	9b07      	ldr	r3, [sp, #28]
 8021036:	9201      	str	r2, [sp, #4]
 8021038:	3308      	adds	r3, #8
 802103a:	9a05      	ldr	r2, [sp, #20]
 802103c:	9307      	str	r3, [sp, #28]
 802103e:	3208      	adds	r2, #8
 8021040:	9205      	str	r2, [sp, #20]
 8021042:	9a04      	ldr	r2, [sp, #16]
 8021044:	3202      	adds	r2, #2
 8021046:	9204      	str	r2, [sp, #16]
 8021048:	9a02      	ldr	r2, [sp, #8]
 802104a:	3208      	adds	r2, #8
 802104c:	9202      	str	r2, [sp, #8]
 802104e:	9a03      	ldr	r2, [sp, #12]
 8021050:	3202      	adds	r2, #2
 8021052:	9203      	str	r2, [sp, #12]
 8021054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021056:	429a      	cmp	r2, r3
 8021058:	f47f ae7a 	bne.w	8020d50 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 802105c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802105e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021060:	3301      	adds	r3, #1
 8021062:	00da      	lsls	r2, r3, #3
 8021064:	0059      	lsls	r1, r3, #1
 8021066:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802106a:	9326      	str	r3, [sp, #152]	; 0x98
 802106c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802106e:	4413      	add	r3, r2
 8021070:	9315      	str	r3, [sp, #84]	; 0x54
 8021072:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021074:	4413      	add	r3, r2
 8021076:	9327      	str	r3, [sp, #156]	; 0x9c
 8021078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802107a:	4413      	add	r3, r2
 802107c:	9328      	str	r3, [sp, #160]	; 0xa0
 802107e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021080:	440b      	add	r3, r1
 8021082:	9329      	str	r3, [sp, #164]	; 0xa4
 8021084:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021086:	440b      	add	r3, r1
 8021088:	9316      	str	r3, [sp, #88]	; 0x58
 802108a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802108c:	07da      	lsls	r2, r3, #31
 802108e:	f140 8105 	bpl.w	802129c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 8021092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021094:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021096:	6819      	ldr	r1, [r3, #0]
 8021098:	9b06      	ldr	r3, [sp, #24]
 802109a:	089e      	lsrs	r6, r3, #2
 802109c:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 80210a0:	f000 812b 	beq.w	80212fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62e>
 80210a4:	3e01      	subs	r6, #1
 80210a6:	4664      	mov	r4, ip
 80210a8:	460b      	mov	r3, r1
 80210aa:	b2b6      	uxth	r6, r6
 80210ac:	3601      	adds	r6, #1
 80210ae:	00f6      	lsls	r6, r6, #3
 80210b0:	eb0b 0706 	add.w	r7, fp, r6
 80210b4:	f8db 5000 	ldr.w	r5, [fp]
 80210b8:	f10b 0b08 	add.w	fp, fp, #8
 80210bc:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 80210c0:	f8d0 e000 	ldr.w	lr, [r0]
 80210c4:	fb25 110e 	smlad	r1, r5, lr, r1
 80210c8:	f8d4 e000 	ldr.w	lr, [r4]
 80210cc:	fb25 330e 	smlad	r3, r5, lr, r3
 80210d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80210d4:	3408      	adds	r4, #8
 80210d6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80210da:	3008      	adds	r0, #8
 80210dc:	fb22 110e 	smlad	r1, r2, lr, r1
 80210e0:	fb22 3305 	smlad	r3, r2, r5, r3
 80210e4:	45bb      	cmp	fp, r7
 80210e6:	d1e5      	bne.n	80210b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 80210e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80210ea:	44b4      	add	ip, r6
 80210ec:	4432      	add	r2, r6
 80210ee:	920d      	str	r2, [sp, #52]	; 0x34
 80210f0:	9a06      	ldr	r2, [sp, #24]
 80210f2:	f012 0203 	ands.w	r2, r2, #3
 80210f6:	d01f      	beq.n	8021138 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80210f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80210fa:	2a01      	cmp	r2, #1
 80210fc:	f9bb 0000 	ldrsh.w	r0, [fp]
 8021100:	8835      	ldrh	r5, [r6, #0]
 8021102:	f8bc 4000 	ldrh.w	r4, [ip]
 8021106:	fb15 1100 	smlabb	r1, r5, r0, r1
 802110a:	fb14 3300 	smlabb	r3, r4, r0, r3
 802110e:	d013      	beq.n	8021138 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8021110:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8021114:	2a02      	cmp	r2, #2
 8021116:	8875      	ldrh	r5, [r6, #2]
 8021118:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 802111c:	fb15 1100 	smlabb	r1, r5, r0, r1
 8021120:	fb14 3300 	smlabb	r3, r4, r0, r3
 8021124:	d008      	beq.n	8021138 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8021126:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 802112a:	88b4      	ldrh	r4, [r6, #4]
 802112c:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8021130:	fb12 1104 	smlabb	r1, r2, r4, r1
 8021134:	fb12 3300 	smlabb	r3, r2, r0, r3
 8021138:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802113a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 802113c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021140:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021142:	6825      	ldr	r5, [r4, #0]
 8021144:	2a15      	cmp	r2, #21
 8021146:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8021148:	f100 0001 	add.w	r0, r0, #1
 802114c:	6824      	ldr	r4, [r4, #0]
 802114e:	f300 808f 	bgt.w	8021270 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a4>
 8021152:	2a00      	cmp	r2, #0
 8021154:	f340 80b5 	ble.w	80212c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f6>
 8021158:	0049      	lsls	r1, r1, #1
 802115a:	005b      	lsls	r3, r3, #1
 802115c:	fb51 4105 	smmla	r1, r1, r5, r4
 8021160:	fb53 4305 	smmla	r3, r3, r5, r4
 8021164:	fa41 f202 	asr.w	r2, r1, r2
 8021168:	f302 0207 	ssat	r2, #8, r2
 802116c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802116e:	700a      	strb	r2, [r1, #0]
 8021170:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021172:	f9b2 2000 	ldrsh.w	r2, [r2]
 8021176:	4113      	asrs	r3, r2
 8021178:	e08a      	b.n	8021290 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 802117a:	2900      	cmp	r1, #0
 802117c:	dd38      	ble.n	80211f0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x524>
 802117e:	9a05      	ldr	r2, [sp, #20]
 8021180:	0040      	lsls	r0, r0, #1
 8021182:	9c02      	ldr	r4, [sp, #8]
 8021184:	005b      	lsls	r3, r3, #1
 8021186:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802118a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 802118e:	fb50 4002 	smmla	r0, r0, r2, r4
 8021192:	fb53 4302 	smmla	r3, r3, r2, r4
 8021196:	fa40 f101 	asr.w	r1, r0, r1
 802119a:	f301 0107 	ssat	r1, #8, r1
 802119e:	9a04      	ldr	r2, [sp, #16]
 80211a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80211a4:	9a01      	ldr	r2, [sp, #4]
 80211a6:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 80211aa:	fa43 f404 	asr.w	r4, r3, r4
 80211ae:	f304 0407 	ssat	r4, #8, r4
 80211b2:	9b03      	ldr	r3, [sp, #12]
 80211b4:	f803 4c01 	strb.w	r4, [r3, #-1]
 80211b8:	e73b      	b.n	8021032 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 80211ba:	2900      	cmp	r1, #0
 80211bc:	dd3b      	ble.n	8021236 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56a>
 80211be:	006d      	lsls	r5, r5, #1
 80211c0:	0064      	lsls	r4, r4, #1
 80211c2:	fb55 7506 	smmla	r5, r5, r6, r7
 80211c6:	fb54 7406 	smmla	r4, r4, r6, r7
 80211ca:	410d      	asrs	r5, r1
 80211cc:	f305 0507 	ssat	r5, #8, r5
 80211d0:	9a04      	ldr	r2, [sp, #16]
 80211d2:	f802 5c02 	strb.w	r5, [r2, #-2]
 80211d6:	9a01      	ldr	r2, [sp, #4]
 80211d8:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80211dc:	4114      	asrs	r4, r2
 80211de:	f304 0407 	ssat	r4, #8, r4
 80211e2:	9a03      	ldr	r2, [sp, #12]
 80211e4:	f802 4c02 	strb.w	r4, [r2, #-2]
 80211e8:	e6ff      	b.n	8020fea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 80211ea:	f10b 0b04 	add.w	fp, fp, #4
 80211ee:	e6d8      	b.n	8020fa2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 80211f0:	f1c1 0101 	rsb	r1, r1, #1
 80211f4:	4088      	lsls	r0, r1
 80211f6:	f300 001f 	ssat	r0, #32, r0
 80211fa:	9a05      	ldr	r2, [sp, #20]
 80211fc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8021200:	fb50 f014 	smmulr	r0, r0, r4
 8021204:	fa03 f101 	lsl.w	r1, r3, r1
 8021208:	f301 011f 	ssat	r1, #32, r1
 802120c:	fb51 f114 	smmulr	r1, r1, r4
 8021210:	9b02      	ldr	r3, [sp, #8]
 8021212:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8021216:	4402      	add	r2, r0
 8021218:	f302 0207 	ssat	r2, #8, r2
 802121c:	9804      	ldr	r0, [sp, #16]
 802121e:	f800 2c01 	strb.w	r2, [r0, #-1]
 8021222:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8021226:	440b      	add	r3, r1
 8021228:	f303 0307 	ssat	r3, #8, r3
 802122c:	9a03      	ldr	r2, [sp, #12]
 802122e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021232:	9a01      	ldr	r2, [sp, #4]
 8021234:	e6fd      	b.n	8021032 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 8021236:	f1c1 0101 	rsb	r1, r1, #1
 802123a:	408d      	lsls	r5, r1
 802123c:	f305 051f 	ssat	r5, #32, r5
 8021240:	fb55 f516 	smmulr	r5, r5, r6
 8021244:	fa04 f101 	lsl.w	r1, r4, r1
 8021248:	f301 011f 	ssat	r1, #32, r1
 802124c:	fb51 f616 	smmulr	r6, r1, r6
 8021250:	443d      	add	r5, r7
 8021252:	f305 0507 	ssat	r5, #8, r5
 8021256:	9a04      	ldr	r2, [sp, #16]
 8021258:	f802 5c02 	strb.w	r5, [r2, #-2]
 802125c:	9a02      	ldr	r2, [sp, #8]
 802125e:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8021262:	4416      	add	r6, r2
 8021264:	f306 0607 	ssat	r6, #8, r6
 8021268:	9a03      	ldr	r2, [sp, #12]
 802126a:	f802 6c02 	strb.w	r6, [r2, #-2]
 802126e:	e6bc      	b.n	8020fea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 8021270:	1e97      	subs	r7, r2, #2
 8021272:	1e56      	subs	r6, r2, #1
 8021274:	2201      	movs	r2, #1
 8021276:	40ba      	lsls	r2, r7
 8021278:	fb51 2105 	smmla	r1, r1, r5, r2
 802127c:	4131      	asrs	r1, r6
 802127e:	fb53 2305 	smmla	r3, r3, r5, r2
 8021282:	190a      	adds	r2, r1, r4
 8021284:	f302 0207 	ssat	r2, #8, r2
 8021288:	4133      	asrs	r3, r6
 802128a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802128c:	4423      	add	r3, r4
 802128e:	700a      	strb	r2, [r1, #0]
 8021290:	f303 0307 	ssat	r3, #8, r3
 8021294:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021296:	9029      	str	r0, [sp, #164]	; 0xa4
 8021298:	7013      	strb	r3, [r2, #0]
 802129a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802129c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802129e:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 80212a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80212a4:	4418      	add	r0, r3
 80212a6:	b01b      	add	sp, #108	; 0x6c
 80212a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80212ae:	462c      	mov	r4, r5
 80212b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80212b2:	f04f 0e00 	mov.w	lr, #0
 80212b6:	9300      	str	r3, [sp, #0]
 80212b8:	4603      	mov	r3, r0
 80212ba:	e5e9      	b.n	8020e90 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c4>
 80212bc:	f10b 0b08 	add.w	fp, fp, #8
 80212c0:	e66f      	b.n	8020fa2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 80212c2:	f1c2 0601 	rsb	r6, r2, #1
 80212c6:	fa01 f206 	lsl.w	r2, r1, r6
 80212ca:	f302 021f 	ssat	r2, #32, r2
 80212ce:	fb52 f215 	smmulr	r2, r2, r5
 80212d2:	40b3      	lsls	r3, r6
 80212d4:	f303 031f 	ssat	r3, #32, r3
 80212d8:	fb53 f115 	smmulr	r1, r3, r5
 80212dc:	1913      	adds	r3, r2, r4
 80212de:	f303 0307 	ssat	r3, #8, r3
 80212e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80212e4:	7013      	strb	r3, [r2, #0]
 80212e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	440b      	add	r3, r1
 80212ec:	f303 0307 	ssat	r3, #8, r3
 80212f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80212f2:	9029      	str	r0, [sp, #164]	; 0xa4
 80212f4:	7013      	strb	r3, [r2, #0]
 80212f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212f8:	e7d0      	b.n	802129c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 80212fa:	460b      	mov	r3, r1
 80212fc:	e6f8      	b.n	80210f0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 80212fe:	bf00      	nop

08021300 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8021300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021304:	b08f      	sub	sp, #60	; 0x3c
 8021306:	460f      	mov	r7, r1
 8021308:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 802130c:	9105      	str	r1, [sp, #20]
 802130e:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8021312:	0859      	lsrs	r1, r3, #1
 8021314:	930c      	str	r3, [sp, #48]	; 0x30
 8021316:	920b      	str	r2, [sp, #44]	; 0x2c
 8021318:	9402      	str	r4, [sp, #8]
 802131a:	f000 81d6 	beq.w	80216ca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ca>
 802131e:	4616      	mov	r6, r2
 8021320:	1ee5      	subs	r5, r4, #3
 8021322:	3901      	subs	r1, #1
 8021324:	3210      	adds	r2, #16
 8021326:	9507      	str	r5, [sp, #28]
 8021328:	f106 0508 	add.w	r5, r6, #8
 802132c:	f1a4 0310 	sub.w	r3, r4, #16
 8021330:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021332:	9503      	str	r5, [sp, #12]
 8021334:	b28d      	uxth	r5, r1
 8021336:	091b      	lsrs	r3, r3, #4
 8021338:	3602      	adds	r6, #2
 802133a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 802133e:	950d      	str	r5, [sp, #52]	; 0x34
 8021340:	3301      	adds	r3, #1
 8021342:	9601      	str	r6, [sp, #4]
 8021344:	9206      	str	r2, [sp, #24]
 8021346:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021348:	eb07 1e43 	add.w	lr, r7, r3, lsl #5
 802134c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 802134e:	f102 0a08 	add.w	sl, r2, #8
 8021352:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8021354:	3604      	adds	r6, #4
 8021356:	f102 0b08 	add.w	fp, r2, #8
 802135a:	019a      	lsls	r2, r3, #6
 802135c:	011b      	lsls	r3, r3, #4
 802135e:	9600      	str	r6, [sp, #0]
 8021360:	9208      	str	r2, [sp, #32]
 8021362:	1f22      	subs	r2, r4, #4
 8021364:	9309      	str	r3, [sp, #36]	; 0x24
 8021366:	9b03      	ldr	r3, [sp, #12]
 8021368:	920a      	str	r2, [sp, #40]	; 0x28
 802136a:	9a02      	ldr	r2, [sp, #8]
 802136c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8021370:	2a0f      	cmp	r2, #15
 8021372:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8021376:	f340 8182 	ble.w	802167e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37e>
 802137a:	f8dd c014 	ldr.w	ip, [sp, #20]
 802137e:	4607      	mov	r7, r0
 8021380:	f8dc 5000 	ldr.w	r5, [ip]
 8021384:	6839      	ldr	r1, [r7, #0]
 8021386:	fb21 4405 	smlad	r4, r1, r5, r4
 802138a:	687a      	ldr	r2, [r7, #4]
 802138c:	fb22 3305 	smlad	r3, r2, r5, r3
 8021390:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8021394:	68b9      	ldr	r1, [r7, #8]
 8021396:	fb21 4105 	smlad	r1, r1, r5, r4
 802139a:	68fa      	ldr	r2, [r7, #12]
 802139c:	fb22 3205 	smlad	r2, r2, r5, r3
 80213a0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80213a4:	693c      	ldr	r4, [r7, #16]
 80213a6:	fb24 1105 	smlad	r1, r4, r5, r1
 80213aa:	697b      	ldr	r3, [r7, #20]
 80213ac:	fb23 2205 	smlad	r2, r3, r5, r2
 80213b0:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80213b4:	69bc      	ldr	r4, [r7, #24]
 80213b6:	fb24 1405 	smlad	r4, r4, r5, r1
 80213ba:	69fb      	ldr	r3, [r7, #28]
 80213bc:	fb23 2305 	smlad	r3, r3, r5, r2
 80213c0:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80213c4:	6a39      	ldr	r1, [r7, #32]
 80213c6:	fb21 4405 	smlad	r4, r1, r5, r4
 80213ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213cc:	fb22 3305 	smlad	r3, r2, r5, r3
 80213d0:	f8dc 5014 	ldr.w	r5, [ip, #20]
 80213d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80213d6:	fb21 4105 	smlad	r1, r1, r5, r4
 80213da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80213dc:	fb22 3205 	smlad	r2, r2, r5, r3
 80213e0:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80213e4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80213e6:	fb24 1105 	smlad	r1, r4, r5, r1
 80213ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80213ec:	fb23 2205 	smlad	r2, r3, r5, r2
 80213f0:	f8dc 501c 	ldr.w	r5, [ip, #28]
 80213f4:	3740      	adds	r7, #64	; 0x40
 80213f6:	f857 4c08 	ldr.w	r4, [r7, #-8]
 80213fa:	f10c 0c20 	add.w	ip, ip, #32
 80213fe:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8021402:	fb24 1405 	smlad	r4, r4, r5, r1
 8021406:	fb23 2305 	smlad	r3, r3, r5, r2
 802140a:	45f4      	cmp	ip, lr
 802140c:	d1b8      	bne.n	8021380 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 802140e:	9a08      	ldr	r2, [sp, #32]
 8021410:	4677      	mov	r7, lr
 8021412:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8021416:	4410      	add	r0, r2
 8021418:	9a07      	ldr	r2, [sp, #28]
 802141a:	4594      	cmp	ip, r2
 802141c:	da25      	bge.n	802146a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16a>
 802141e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021420:	4606      	mov	r6, r0
 8021422:	eba2 090c 	sub.w	r9, r2, ip
 8021426:	ea4f 0999 	mov.w	r9, r9, lsr #2
 802142a:	f109 0201 	add.w	r2, r9, #1
 802142e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8021432:	9204      	str	r2, [sp, #16]
 8021434:	683a      	ldr	r2, [r7, #0]
 8021436:	6831      	ldr	r1, [r6, #0]
 8021438:	fb21 4402 	smlad	r4, r1, r2, r4
 802143c:	6871      	ldr	r1, [r6, #4]
 802143e:	fb21 3202 	smlad	r2, r1, r2, r3
 8021442:	6879      	ldr	r1, [r7, #4]
 8021444:	3610      	adds	r6, #16
 8021446:	f856 5c08 	ldr.w	r5, [r6, #-8]
 802144a:	3708      	adds	r7, #8
 802144c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8021450:	fb25 4401 	smlad	r4, r5, r1, r4
 8021454:	fb23 2301 	smlad	r3, r3, r1, r2
 8021458:	4547      	cmp	r7, r8
 802145a:	d1eb      	bne.n	8021434 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x134>
 802145c:	f10c 0c04 	add.w	ip, ip, #4
 8021460:	9a04      	ldr	r2, [sp, #16]
 8021462:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8021466:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802146a:	9a02      	ldr	r2, [sp, #8]
 802146c:	4562      	cmp	r2, ip
 802146e:	dd26      	ble.n	80214be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8021470:	f9b7 1000 	ldrsh.w	r1, [r7]
 8021474:	f10c 0201 	add.w	r2, ip, #1
 8021478:	8806      	ldrh	r6, [r0, #0]
 802147a:	8845      	ldrh	r5, [r0, #2]
 802147c:	fb16 4401 	smlabb	r4, r6, r1, r4
 8021480:	fb11 3305 	smlabb	r3, r1, r5, r3
 8021484:	9902      	ldr	r1, [sp, #8]
 8021486:	4291      	cmp	r1, r2
 8021488:	f340 80d5 	ble.w	8021636 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 802148c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8021490:	f10c 0c02 	add.w	ip, ip, #2
 8021494:	8885      	ldrh	r5, [r0, #4]
 8021496:	88c1      	ldrh	r1, [r0, #6]
 8021498:	fb15 4402 	smlabb	r4, r5, r2, r4
 802149c:	fb12 3301 	smlabb	r3, r2, r1, r3
 80214a0:	9a02      	ldr	r2, [sp, #8]
 80214a2:	4562      	cmp	r2, ip
 80214a4:	f340 80ef 	ble.w	8021686 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x386>
 80214a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80214ac:	300c      	adds	r0, #12
 80214ae:	f830 5c04 	ldrh.w	r5, [r0, #-4]
 80214b2:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 80214b6:	fb15 4402 	smlabb	r4, r5, r2, r4
 80214ba:	fb12 3301 	smlabb	r3, r2, r1, r3
 80214be:	9a00      	ldr	r2, [sp, #0]
 80214c0:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 80214c4:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80214c8:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 80214cc:	2a15      	cmp	r2, #21
 80214ce:	f340 80a5 	ble.w	802161c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31c>
 80214d2:	1e95      	subs	r5, r2, #2
 80214d4:	2701      	movs	r7, #1
 80214d6:	3a01      	subs	r2, #1
 80214d8:	fa07 f505 	lsl.w	r5, r7, r5
 80214dc:	fb54 5406 	smmla	r4, r4, r6, r5
 80214e0:	4114      	asrs	r4, r2
 80214e2:	440c      	add	r4, r1
 80214e4:	f304 0407 	ssat	r4, #8, r4
 80214e8:	9a01      	ldr	r2, [sp, #4]
 80214ea:	f802 4c02 	strb.w	r4, [r2, #-2]
 80214ee:	9a00      	ldr	r2, [sp, #0]
 80214f0:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 80214f4:	2e15      	cmp	r6, #21
 80214f6:	f340 8081 	ble.w	80215fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2fc>
 80214fa:	1eb1      	subs	r1, r6, #2
 80214fc:	2401      	movs	r4, #1
 80214fe:	3e01      	subs	r6, #1
 8021500:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8021504:	fa04 f101 	lsl.w	r1, r4, r1
 8021508:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 802150c:	fb53 1302 	smmla	r3, r3, r2, r1
 8021510:	4133      	asrs	r3, r6
 8021512:	4423      	add	r3, r4
 8021514:	f303 0307 	ssat	r3, #8, r3
 8021518:	9a01      	ldr	r2, [sp, #4]
 802151a:	f802 3c01 	strb.w	r3, [r2, #-1]
 802151e:	3202      	adds	r2, #2
 8021520:	9b03      	ldr	r3, [sp, #12]
 8021522:	f10a 0a08 	add.w	sl, sl, #8
 8021526:	f10b 0b08 	add.w	fp, fp, #8
 802152a:	9201      	str	r2, [sp, #4]
 802152c:	3308      	adds	r3, #8
 802152e:	9a00      	ldr	r2, [sp, #0]
 8021530:	9303      	str	r3, [sp, #12]
 8021532:	3204      	adds	r2, #4
 8021534:	9200      	str	r2, [sp, #0]
 8021536:	9a06      	ldr	r2, [sp, #24]
 8021538:	429a      	cmp	r2, r3
 802153a:	f47f af16 	bne.w	802136a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 802153e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021540:	991d      	ldr	r1, [sp, #116]	; 0x74
 8021542:	3301      	adds	r3, #1
 8021544:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8021548:	991a      	ldr	r1, [sp, #104]	; 0x68
 802154a:	00da      	lsls	r2, r3, #3
 802154c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021550:	931a      	str	r3, [sp, #104]	; 0x68
 8021552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021554:	4413      	add	r3, r2
 8021556:	930b      	str	r3, [sp, #44]	; 0x2c
 8021558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802155a:	4413      	add	r3, r2
 802155c:	931b      	str	r3, [sp, #108]	; 0x6c
 802155e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021560:	4413      	add	r3, r2
 8021562:	931c      	str	r3, [sp, #112]	; 0x70
 8021564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021566:	07db      	lsls	r3, r3, #31
 8021568:	d544      	bpl.n	80215f4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f4>
 802156a:	9a02      	ldr	r2, [sp, #8]
 802156c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802156e:	0892      	lsrs	r2, r2, #2
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	d016      	beq.n	80215a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a2>
 8021574:	1e56      	subs	r6, r2, #1
 8021576:	9905      	ldr	r1, [sp, #20]
 8021578:	b2b6      	uxth	r6, r6
 802157a:	3601      	adds	r6, #1
 802157c:	00f6      	lsls	r6, r6, #3
 802157e:	1987      	adds	r7, r0, r6
 8021580:	6805      	ldr	r5, [r0, #0]
 8021582:	3008      	adds	r0, #8
 8021584:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8021588:	f8d1 c000 	ldr.w	ip, [r1]
 802158c:	fb25 330c 	smlad	r3, r5, ip, r3
 8021590:	684d      	ldr	r5, [r1, #4]
 8021592:	3108      	adds	r1, #8
 8021594:	fb22 3305 	smlad	r3, r2, r5, r3
 8021598:	42b8      	cmp	r0, r7
 802159a:	d1f1      	bne.n	8021580 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x280>
 802159c:	9a05      	ldr	r2, [sp, #20]
 802159e:	4432      	add	r2, r6
 80215a0:	9205      	str	r2, [sp, #20]
 80215a2:	9a02      	ldr	r2, [sp, #8]
 80215a4:	f012 0203 	ands.w	r2, r2, #3
 80215a8:	d010      	beq.n	80215cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80215aa:	9e05      	ldr	r6, [sp, #20]
 80215ac:	2a01      	cmp	r2, #1
 80215ae:	8801      	ldrh	r1, [r0, #0]
 80215b0:	8835      	ldrh	r5, [r6, #0]
 80215b2:	fb15 3301 	smlabb	r3, r5, r1, r3
 80215b6:	d009      	beq.n	80215cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80215b8:	8875      	ldrh	r5, [r6, #2]
 80215ba:	2a02      	cmp	r2, #2
 80215bc:	8841      	ldrh	r1, [r0, #2]
 80215be:	fb15 3301 	smlabb	r3, r5, r1, r3
 80215c2:	d003      	beq.n	80215cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80215c4:	8881      	ldrh	r1, [r0, #4]
 80215c6:	88b2      	ldrh	r2, [r6, #4]
 80215c8:	fb11 3302 	smlabb	r3, r1, r2, r3
 80215cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80215ce:	1c61      	adds	r1, r4, #1
 80215d0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80215d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80215d6:	6806      	ldr	r6, [r0, #0]
 80215d8:	2a15      	cmp	r2, #21
 80215da:	981c      	ldr	r0, [sp, #112]	; 0x70
 80215dc:	6805      	ldr	r5, [r0, #0]
 80215de:	dc54      	bgt.n	802168a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38a>
 80215e0:	2a00      	cmp	r2, #0
 80215e2:	dd62      	ble.n	80216aa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3aa>
 80215e4:	005b      	lsls	r3, r3, #1
 80215e6:	fb53 5306 	smmla	r3, r3, r6, r5
 80215ea:	4113      	asrs	r3, r2
 80215ec:	f303 0307 	ssat	r3, #8, r3
 80215f0:	7023      	strb	r3, [r4, #0]
 80215f2:	460c      	mov	r4, r1
 80215f4:	4620      	mov	r0, r4
 80215f6:	b00f      	add	sp, #60	; 0x3c
 80215f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215fc:	2e00      	cmp	r6, #0
 80215fe:	dd1c      	ble.n	802163a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x33a>
 8021600:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 8021604:	005b      	lsls	r3, r3, #1
 8021606:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 802160a:	fb53 5304 	smmla	r3, r3, r4, r5
 802160e:	4133      	asrs	r3, r6
 8021610:	f303 0307 	ssat	r3, #8, r3
 8021614:	9a01      	ldr	r2, [sp, #4]
 8021616:	f802 3c01 	strb.w	r3, [r2, #-1]
 802161a:	e780      	b.n	802151e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 802161c:	2a00      	cmp	r2, #0
 802161e:	dd1f      	ble.n	8021660 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x360>
 8021620:	0064      	lsls	r4, r4, #1
 8021622:	fb54 1406 	smmla	r4, r4, r6, r1
 8021626:	fa44 f202 	asr.w	r2, r4, r2
 802162a:	f302 0207 	ssat	r2, #8, r2
 802162e:	9901      	ldr	r1, [sp, #4]
 8021630:	f801 2c02 	strb.w	r2, [r1, #-2]
 8021634:	e75b      	b.n	80214ee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 8021636:	3004      	adds	r0, #4
 8021638:	e741      	b.n	80214be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 802163a:	f1c6 0601 	rsb	r6, r6, #1
 802163e:	40b3      	lsls	r3, r6
 8021640:	f303 031f 	ssat	r3, #32, r3
 8021644:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8021648:	fb53 f212 	smmulr	r2, r3, r2
 802164c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8021650:	441a      	add	r2, r3
 8021652:	f302 0207 	ssat	r2, #8, r2
 8021656:	9b01      	ldr	r3, [sp, #4]
 8021658:	f803 2c01 	strb.w	r2, [r3, #-1]
 802165c:	461a      	mov	r2, r3
 802165e:	e75e      	b.n	802151e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 8021660:	f1c2 0201 	rsb	r2, r2, #1
 8021664:	fa04 f202 	lsl.w	r2, r4, r2
 8021668:	f302 021f 	ssat	r2, #32, r2
 802166c:	fb52 f216 	smmulr	r2, r2, r6
 8021670:	440a      	add	r2, r1
 8021672:	f302 0207 	ssat	r2, #8, r2
 8021676:	9901      	ldr	r1, [sp, #4]
 8021678:	f801 2c02 	strb.w	r2, [r1, #-2]
 802167c:	e737      	b.n	80214ee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 802167e:	9f05      	ldr	r7, [sp, #20]
 8021680:	f04f 0c00 	mov.w	ip, #0
 8021684:	e6c8      	b.n	8021418 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x118>
 8021686:	3008      	adds	r0, #8
 8021688:	e719      	b.n	80214be <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 802168a:	1e97      	subs	r7, r2, #2
 802168c:	2001      	movs	r0, #1
 802168e:	3a01      	subs	r2, #1
 8021690:	40b8      	lsls	r0, r7
 8021692:	fb53 0306 	smmla	r3, r3, r6, r0
 8021696:	4113      	asrs	r3, r2
 8021698:	442b      	add	r3, r5
 802169a:	f303 0307 	ssat	r3, #8, r3
 802169e:	7023      	strb	r3, [r4, #0]
 80216a0:	460c      	mov	r4, r1
 80216a2:	4620      	mov	r0, r4
 80216a4:	b00f      	add	sp, #60	; 0x3c
 80216a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216aa:	f1c2 0201 	rsb	r2, r2, #1
 80216ae:	4093      	lsls	r3, r2
 80216b0:	f303 031f 	ssat	r3, #32, r3
 80216b4:	fb53 f316 	smmulr	r3, r3, r6
 80216b8:	442b      	add	r3, r5
 80216ba:	f303 0307 	ssat	r3, #8, r3
 80216be:	7023      	strb	r3, [r4, #0]
 80216c0:	460c      	mov	r4, r1
 80216c2:	4620      	mov	r0, r4
 80216c4:	b00f      	add	sp, #60	; 0x3c
 80216c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216ca:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80216cc:	e74b      	b.n	8021566 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x266>
 80216ce:	bf00      	nop

080216d0 <st_int8_maxpool>:
 80216d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216d4:	b099      	sub	sp, #100	; 0x64
 80216d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80216da:	ee80 6a20 	vdiv.f32	s12, s0, s1
 80216de:	9314      	str	r3, [sp, #80]	; 0x50
 80216e0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80216e4:	9200      	str	r2, [sp, #0]
 80216e6:	930e      	str	r3, [sp, #56]	; 0x38
 80216e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216ec:	f8bd b088 	ldrh.w	fp, [sp, #136]	; 0x88
 80216f0:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 80216f4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80216f8:	f99d 40b0 	ldrsb.w	r4, [sp, #176]	; 0xb0
 80216fc:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8021700:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 8021704:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 8021708:	910f      	str	r1, [sp, #60]	; 0x3c
 802170a:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 802170e:	9117      	str	r1, [sp, #92]	; 0x5c
 8021710:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
 8021714:	910c      	str	r1, [sp, #48]	; 0x30
 8021716:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	; 0xa8
 802171a:	9112      	str	r1, [sp, #72]	; 0x48
 802171c:	f99d 10ac 	ldrsb.w	r1, [sp, #172]	; 0xac
 8021720:	910a      	str	r1, [sp, #40]	; 0x28
 8021722:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021724:	f2c0 80de 	blt.w	80218e4 <st_int8_maxpool+0x214>
 8021728:	2900      	cmp	r1, #0
 802172a:	f000 80b4 	beq.w	8021896 <st_int8_maxpool+0x1c6>
 802172e:	eeb4 0a60 	vcmp.f32	s0, s1
 8021732:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021738:	bf0c      	ite	eq
 802173a:	2101      	moveq	r1, #1
 802173c:	2100      	movne	r1, #0
 802173e:	42a5      	cmp	r5, r4
 8021740:	bf14      	ite	ne
 8021742:	2100      	movne	r1, #0
 8021744:	f001 0101 	andeq.w	r1, r1, #1
 8021748:	9107      	str	r1, [sp, #28]
 802174a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802174c:	2900      	cmp	r1, #0
 802174e:	f000 80a2 	beq.w	8021896 <st_int8_maxpool+0x1c6>
 8021752:	f1bb 0f00 	cmp.w	fp, #0
 8021756:	f000 809e 	beq.w	8021896 <st_int8_maxpool+0x1c6>
 802175a:	1ad2      	subs	r2, r2, r3
 802175c:	ee07 4a90 	vmov	s15, r4
 8021760:	2100      	movs	r1, #0
 8021762:	425b      	negs	r3, r3
 8021764:	b292      	uxth	r2, r2
 8021766:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802176a:	4240      	negs	r0, r0
 802176c:	b29b      	uxth	r3, r3
 802176e:	9213      	str	r2, [sp, #76]	; 0x4c
 8021770:	9a00      	ldr	r2, [sp, #0]
 8021772:	ed9f 5a5b 	vldr	s10, [pc, #364]	; 80218e0 <st_int8_maxpool+0x210>
 8021776:	fb02 fa0b 	mul.w	sl, r2, fp
 802177a:	460a      	mov	r2, r1
 802177c:	9116      	str	r1, [sp, #88]	; 0x58
 802177e:	46d1      	mov	r9, sl
 8021780:	9015      	str	r0, [sp, #84]	; 0x54
 8021782:	9301      	str	r3, [sp, #4]
 8021784:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021786:	2000      	movs	r0, #0
 8021788:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802178a:	1e4b      	subs	r3, r1, #1
 802178c:	9d01      	ldr	r5, [sp, #4]
 802178e:	fb02 f204 	mul.w	r2, r2, r4
 8021792:	b209      	sxth	r1, r1
 8021794:	fa0f f885 	sxth.w	r8, r5
 8021798:	1b5b      	subs	r3, r3, r5
 802179a:	9210      	str	r2, [sp, #64]	; 0x40
 802179c:	9a00      	ldr	r2, [sp, #0]
 802179e:	b29b      	uxth	r3, r3
 80217a0:	9108      	str	r1, [sp, #32]
 80217a2:	fb02 f208 	mul.w	r2, r2, r8
 80217a6:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 80217aa:	f103 0a01 	add.w	sl, r3, #1
 80217ae:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80217b2:	9211      	str	r2, [sp, #68]	; 0x44
 80217b4:	4602      	mov	r2, r0
 80217b6:	900d      	str	r0, [sp, #52]	; 0x34
 80217b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80217ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217bc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80217c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80217c2:	441a      	add	r2, r3
 80217c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217c6:	b20f      	sxth	r7, r1
 80217c8:	185d      	adds	r5, r3, r1
 80217ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80217cc:	2100      	movs	r1, #0
 80217ce:	fb0b f202 	mul.w	r2, fp, r2
 80217d2:	18fb      	adds	r3, r7, r3
 80217d4:	b22d      	sxth	r5, r5
 80217d6:	9103      	str	r1, [sp, #12]
 80217d8:	fb0b f303 	mul.w	r3, fp, r3
 80217dc:	9206      	str	r2, [sp, #24]
 80217de:	9102      	str	r1, [sp, #8]
 80217e0:	9309      	str	r3, [sp, #36]	; 0x24
 80217e2:	9b08      	ldr	r3, [sp, #32]
 80217e4:	4598      	cmp	r8, r3
 80217e6:	da77      	bge.n	80218d8 <st_int8_maxpool+0x208>
 80217e8:	9b02      	ldr	r3, [sp, #8]
 80217ea:	2400      	movs	r4, #0
 80217ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80217ee:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 80217f2:	189e      	adds	r6, r3, r2
 80217f4:	9b05      	ldr	r3, [sp, #20]
 80217f6:	441e      	add	r6, r3
 80217f8:	42af      	cmp	r7, r5
 80217fa:	da1a      	bge.n	8021832 <st_int8_maxpool+0x162>
 80217fc:	9b01      	ldr	r3, [sp, #4]
 80217fe:	191a      	adds	r2, r3, r4
 8021800:	eb08 0304 	add.w	r3, r8, r4
 8021804:	43d2      	mvns	r2, r2
 8021806:	459e      	cmp	lr, r3
 8021808:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 802180c:	dd11      	ble.n	8021832 <st_int8_maxpool+0x162>
 802180e:	4631      	mov	r1, r6
 8021810:	463b      	mov	r3, r7
 8021812:	0418      	lsls	r0, r3, #16
 8021814:	d408      	bmi.n	8021828 <st_int8_maxpool+0x158>
 8021816:	b13a      	cbz	r2, 8021828 <st_int8_maxpool+0x158>
 8021818:	9800      	ldr	r0, [sp, #0]
 802181a:	4298      	cmp	r0, r3
 802181c:	dd04      	ble.n	8021828 <st_int8_maxpool+0x158>
 802181e:	f991 0000 	ldrsb.w	r0, [r1]
 8021822:	4584      	cmp	ip, r0
 8021824:	bfb8      	it	lt
 8021826:	4684      	movlt	ip, r0
 8021828:	3301      	adds	r3, #1
 802182a:	4459      	add	r1, fp
 802182c:	b218      	sxth	r0, r3
 802182e:	4285      	cmp	r5, r0
 8021830:	dcef      	bgt.n	8021812 <st_int8_maxpool+0x142>
 8021832:	3401      	adds	r4, #1
 8021834:	444e      	add	r6, r9
 8021836:	45a2      	cmp	sl, r4
 8021838:	d1de      	bne.n	80217f8 <st_int8_maxpool+0x128>
 802183a:	9a06      	ldr	r2, [sp, #24]
 802183c:	9b02      	ldr	r3, [sp, #8]
 802183e:	4413      	add	r3, r2
 8021840:	9a07      	ldr	r2, [sp, #28]
 8021842:	2a00      	cmp	r2, #0
 8021844:	d02a      	beq.n	802189c <st_int8_maxpool+0x1cc>
 8021846:	9a04      	ldr	r2, [sp, #16]
 8021848:	f802 c003 	strb.w	ip, [r2, r3]
 802184c:	9b03      	ldr	r3, [sp, #12]
 802184e:	3301      	adds	r3, #1
 8021850:	b21b      	sxth	r3, r3
 8021852:	455b      	cmp	r3, fp
 8021854:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021858:	dbc3      	blt.n	80217e2 <st_int8_maxpool+0x112>
 802185a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802185c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802185e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021860:	3201      	adds	r2, #1
 8021862:	440b      	add	r3, r1
 8021864:	b212      	sxth	r2, r2
 8021866:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021868:	b29b      	uxth	r3, r3
 802186a:	920d      	str	r2, [sp, #52]	; 0x34
 802186c:	428a      	cmp	r2, r1
 802186e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021870:	dba3      	blt.n	80217ba <st_int8_maxpool+0xea>
 8021872:	9b01      	ldr	r3, [sp, #4]
 8021874:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021876:	4619      	mov	r1, r3
 8021878:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802187a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802187c:	4401      	add	r1, r0
 802187e:	3201      	adds	r2, #1
 8021880:	4403      	add	r3, r0
 8021882:	b289      	uxth	r1, r1
 8021884:	b212      	sxth	r2, r2
 8021886:	9101      	str	r1, [sp, #4]
 8021888:	b29b      	uxth	r3, r3
 802188a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802188c:	9216      	str	r2, [sp, #88]	; 0x58
 802188e:	428a      	cmp	r2, r1
 8021890:	9313      	str	r3, [sp, #76]	; 0x4c
 8021892:	f6ff af77 	blt.w	8021784 <st_int8_maxpool+0xb4>
 8021896:	b019      	add	sp, #100	; 0x64
 8021898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802189c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802189e:	eeb0 7a66 	vmov.f32	s14, s13
 80218a2:	ebac 0c02 	sub.w	ip, ip, r2
 80218a6:	ee07 ca90 	vmov	s15, ip
 80218aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80218ae:	eea7 7a86 	vfma.f32	s14, s15, s12
 80218b2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80218b6:	eef0 7a47 	vmov.f32	s15, s14
 80218ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218be:	fe25 7a85 	vselge.f32	s14, s11, s10
 80218c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80218c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80218ca:	ee17 2a90 	vmov	r2, s15
 80218ce:	f302 0207 	ssat	r2, #8, r2
 80218d2:	9904      	ldr	r1, [sp, #16]
 80218d4:	54ca      	strb	r2, [r1, r3]
 80218d6:	e7b9      	b.n	802184c <st_int8_maxpool+0x17c>
 80218d8:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 80218dc:	e7ad      	b.n	802183a <st_int8_maxpool+0x16a>
 80218de:	bf00      	nop
 80218e0:	befffffc 	.word	0xbefffffc
 80218e4:	2900      	cmp	r1, #0
 80218e6:	d0d6      	beq.n	8021896 <st_int8_maxpool+0x1c6>
 80218e8:	eeb4 0a60 	vcmp.f32	s0, s1
 80218ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80218ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218f2:	bf0c      	ite	eq
 80218f4:	2101      	moveq	r1, #1
 80218f6:	2100      	movne	r1, #0
 80218f8:	42a5      	cmp	r5, r4
 80218fa:	bf14      	ite	ne
 80218fc:	2100      	movne	r1, #0
 80218fe:	f001 0101 	andeq.w	r1, r1, #1
 8021902:	9107      	str	r1, [sp, #28]
 8021904:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021906:	2900      	cmp	r1, #0
 8021908:	d0c5      	beq.n	8021896 <st_int8_maxpool+0x1c6>
 802190a:	f1bb 0f00 	cmp.w	fp, #0
 802190e:	d0c2      	beq.n	8021896 <st_int8_maxpool+0x1c6>
 8021910:	1ad2      	subs	r2, r2, r3
 8021912:	ee07 4a90 	vmov	s15, r4
 8021916:	2100      	movs	r1, #0
 8021918:	425b      	negs	r3, r3
 802191a:	b292      	uxth	r2, r2
 802191c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8021920:	4240      	negs	r0, r0
 8021922:	b29b      	uxth	r3, r3
 8021924:	9210      	str	r2, [sp, #64]	; 0x40
 8021926:	9a00      	ldr	r2, [sp, #0]
 8021928:	ed1f 5a13 	vldr	s10, [pc, #-76]	; 80218e0 <st_int8_maxpool+0x210>
 802192c:	fb02 fa0b 	mul.w	sl, r2, fp
 8021930:	460a      	mov	r2, r1
 8021932:	9116      	str	r1, [sp, #88]	; 0x58
 8021934:	9015      	str	r0, [sp, #84]	; 0x54
 8021936:	9301      	str	r3, [sp, #4]
 8021938:	9910      	ldr	r1, [sp, #64]	; 0x40
 802193a:	2000      	movs	r0, #0
 802193c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802193e:	1e4b      	subs	r3, r1, #1
 8021940:	9d01      	ldr	r5, [sp, #4]
 8021942:	fb02 f204 	mul.w	r2, r2, r4
 8021946:	b209      	sxth	r1, r1
 8021948:	fa0f f985 	sxth.w	r9, r5
 802194c:	1b5b      	subs	r3, r3, r5
 802194e:	9211      	str	r2, [sp, #68]	; 0x44
 8021950:	9a00      	ldr	r2, [sp, #0]
 8021952:	b29b      	uxth	r3, r3
 8021954:	9108      	str	r1, [sp, #32]
 8021956:	fb02 f209 	mul.w	r2, r2, r9
 802195a:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 802195e:	f103 0801 	add.w	r8, r3, #1
 8021962:	900d      	str	r0, [sp, #52]	; 0x34
 8021964:	9213      	str	r2, [sp, #76]	; 0x4c
 8021966:	4602      	mov	r2, r0
 8021968:	910b      	str	r1, [sp, #44]	; 0x2c
 802196a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802196c:	f04f 0e00 	mov.w	lr, #0
 8021970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021972:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8021976:	441a      	add	r2, r3
 8021978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802197a:	b20f      	sxth	r7, r1
 802197c:	f8cd e008 	str.w	lr, [sp, #8]
 8021980:	185d      	adds	r5, r3, r1
 8021982:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021984:	fb0b f202 	mul.w	r2, fp, r2
 8021988:	18fb      	adds	r3, r7, r3
 802198a:	f8cd e00c 	str.w	lr, [sp, #12]
 802198e:	b22d      	sxth	r5, r5
 8021990:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8021994:	fb0b f303 	mul.w	r3, fp, r3
 8021998:	9206      	str	r2, [sp, #24]
 802199a:	9309      	str	r3, [sp, #36]	; 0x24
 802199c:	9b08      	ldr	r3, [sp, #32]
 802199e:	4599      	cmp	r9, r3
 80219a0:	da76      	bge.n	8021a90 <st_int8_maxpool+0x3c0>
 80219a2:	9b02      	ldr	r3, [sp, #8]
 80219a4:	2400      	movs	r4, #0
 80219a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219a8:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 80219ac:	189e      	adds	r6, r3, r2
 80219ae:	9b05      	ldr	r3, [sp, #20]
 80219b0:	441e      	add	r6, r3
 80219b2:	42af      	cmp	r7, r5
 80219b4:	da1a      	bge.n	80219ec <st_int8_maxpool+0x31c>
 80219b6:	9b01      	ldr	r3, [sp, #4]
 80219b8:	191a      	adds	r2, r3, r4
 80219ba:	eb09 0304 	add.w	r3, r9, r4
 80219be:	43d2      	mvns	r2, r2
 80219c0:	459e      	cmp	lr, r3
 80219c2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80219c6:	dd11      	ble.n	80219ec <st_int8_maxpool+0x31c>
 80219c8:	4631      	mov	r1, r6
 80219ca:	463b      	mov	r3, r7
 80219cc:	0418      	lsls	r0, r3, #16
 80219ce:	d408      	bmi.n	80219e2 <st_int8_maxpool+0x312>
 80219d0:	b13a      	cbz	r2, 80219e2 <st_int8_maxpool+0x312>
 80219d2:	9800      	ldr	r0, [sp, #0]
 80219d4:	4298      	cmp	r0, r3
 80219d6:	dd04      	ble.n	80219e2 <st_int8_maxpool+0x312>
 80219d8:	f991 0000 	ldrsb.w	r0, [r1]
 80219dc:	4584      	cmp	ip, r0
 80219de:	bfa8      	it	ge
 80219e0:	4684      	movge	ip, r0
 80219e2:	3301      	adds	r3, #1
 80219e4:	4459      	add	r1, fp
 80219e6:	b218      	sxth	r0, r3
 80219e8:	42a8      	cmp	r0, r5
 80219ea:	dbef      	blt.n	80219cc <st_int8_maxpool+0x2fc>
 80219ec:	3401      	adds	r4, #1
 80219ee:	4456      	add	r6, sl
 80219f0:	45a0      	cmp	r8, r4
 80219f2:	d1de      	bne.n	80219b2 <st_int8_maxpool+0x2e2>
 80219f4:	9a06      	ldr	r2, [sp, #24]
 80219f6:	9b02      	ldr	r3, [sp, #8]
 80219f8:	4413      	add	r3, r2
 80219fa:	9a07      	ldr	r2, [sp, #28]
 80219fc:	2a00      	cmp	r2, #0
 80219fe:	d029      	beq.n	8021a54 <st_int8_maxpool+0x384>
 8021a00:	9a04      	ldr	r2, [sp, #16]
 8021a02:	f802 c003 	strb.w	ip, [r2, r3]
 8021a06:	9b03      	ldr	r3, [sp, #12]
 8021a08:	3301      	adds	r3, #1
 8021a0a:	b21b      	sxth	r3, r3
 8021a0c:	455b      	cmp	r3, fp
 8021a0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021a12:	dbc3      	blt.n	802199c <st_int8_maxpool+0x2cc>
 8021a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021a1a:	3201      	adds	r2, #1
 8021a1c:	440b      	add	r3, r1
 8021a1e:	b212      	sxth	r2, r2
 8021a20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a22:	b29b      	uxth	r3, r3
 8021a24:	920d      	str	r2, [sp, #52]	; 0x34
 8021a26:	428a      	cmp	r2, r1
 8021a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a2a:	db9e      	blt.n	802196a <st_int8_maxpool+0x29a>
 8021a2c:	9b01      	ldr	r3, [sp, #4]
 8021a2e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021a30:	461a      	mov	r2, r3
 8021a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021a36:	4403      	add	r3, r0
 8021a38:	4402      	add	r2, r0
 8021a3a:	3101      	adds	r1, #1
 8021a3c:	b29b      	uxth	r3, r3
 8021a3e:	b209      	sxth	r1, r1
 8021a40:	9310      	str	r3, [sp, #64]	; 0x40
 8021a42:	b292      	uxth	r2, r2
 8021a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021a46:	9201      	str	r2, [sp, #4]
 8021a48:	460a      	mov	r2, r1
 8021a4a:	4299      	cmp	r1, r3
 8021a4c:	9116      	str	r1, [sp, #88]	; 0x58
 8021a4e:	f6ff af73 	blt.w	8021938 <st_int8_maxpool+0x268>
 8021a52:	e720      	b.n	8021896 <st_int8_maxpool+0x1c6>
 8021a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021a56:	eeb0 7a66 	vmov.f32	s14, s13
 8021a5a:	ebac 0c02 	sub.w	ip, ip, r2
 8021a5e:	ee07 ca90 	vmov	s15, ip
 8021a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a66:	eea7 7a86 	vfma.f32	s14, s15, s12
 8021a6a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021a6e:	eef0 7a47 	vmov.f32	s15, s14
 8021a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a76:	fe25 7a85 	vselge.f32	s14, s11, s10
 8021a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a82:	ee17 2a90 	vmov	r2, s15
 8021a86:	f302 0207 	ssat	r2, #8, r2
 8021a8a:	9904      	ldr	r1, [sp, #16]
 8021a8c:	54ca      	strb	r2, [r1, r3]
 8021a8e:	e7ba      	b.n	8021a06 <st_int8_maxpool+0x336>
 8021a90:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
 8021a94:	e7ae      	b.n	80219f4 <st_int8_maxpool+0x324>
 8021a96:	bf00      	nop

08021a98 <st_dsp_arm_copy_q7>:
 8021a98:	b470      	push	{r4, r5, r6}
 8021a9a:	0896      	lsrs	r6, r2, #2
 8021a9c:	d01b      	beq.n	8021ad6 <st_dsp_arm_copy_q7+0x3e>
 8021a9e:	00b6      	lsls	r6, r6, #2
 8021aa0:	460b      	mov	r3, r1
 8021aa2:	1985      	adds	r5, r0, r6
 8021aa4:	f850 4b04 	ldr.w	r4, [r0], #4
 8021aa8:	42a8      	cmp	r0, r5
 8021aaa:	f843 4b04 	str.w	r4, [r3], #4
 8021aae:	d1f9      	bne.n	8021aa4 <st_dsp_arm_copy_q7+0xc>
 8021ab0:	4431      	add	r1, r6
 8021ab2:	f012 0203 	ands.w	r2, r2, #3
 8021ab6:	d00c      	beq.n	8021ad2 <st_dsp_arm_copy_q7+0x3a>
 8021ab8:	f995 3000 	ldrsb.w	r3, [r5]
 8021abc:	2a01      	cmp	r2, #1
 8021abe:	700b      	strb	r3, [r1, #0]
 8021ac0:	d007      	beq.n	8021ad2 <st_dsp_arm_copy_q7+0x3a>
 8021ac2:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8021ac6:	2a02      	cmp	r2, #2
 8021ac8:	704b      	strb	r3, [r1, #1]
 8021aca:	d002      	beq.n	8021ad2 <st_dsp_arm_copy_q7+0x3a>
 8021acc:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8021ad0:	708b      	strb	r3, [r1, #2]
 8021ad2:	bc70      	pop	{r4, r5, r6}
 8021ad4:	4770      	bx	lr
 8021ad6:	4605      	mov	r5, r0
 8021ad8:	e7eb      	b.n	8021ab2 <st_dsp_arm_copy_q7+0x1a>
 8021ada:	bf00      	nop

08021adc <st_dsp_arm_fill_q15>:
 8021adc:	b470      	push	{r4, r5, r6}
 8021ade:	b285      	uxth	r5, r0
 8021ae0:	0896      	lsrs	r6, r2, #2
 8021ae2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8021ae6:	d009      	beq.n	8021afc <st_dsp_arm_fill_q15+0x20>
 8021ae8:	460b      	mov	r3, r1
 8021aea:	4634      	mov	r4, r6
 8021aec:	3c01      	subs	r4, #1
 8021aee:	601d      	str	r5, [r3, #0]
 8021af0:	605d      	str	r5, [r3, #4]
 8021af2:	f103 0308 	add.w	r3, r3, #8
 8021af6:	d1f9      	bne.n	8021aec <st_dsp_arm_fill_q15+0x10>
 8021af8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8021afc:	f012 0203 	ands.w	r2, r2, #3
 8021b00:	d006      	beq.n	8021b10 <st_dsp_arm_fill_q15+0x34>
 8021b02:	2a01      	cmp	r2, #1
 8021b04:	8008      	strh	r0, [r1, #0]
 8021b06:	d003      	beq.n	8021b10 <st_dsp_arm_fill_q15+0x34>
 8021b08:	2a02      	cmp	r2, #2
 8021b0a:	8048      	strh	r0, [r1, #2]
 8021b0c:	bf18      	it	ne
 8021b0e:	8088      	strhne	r0, [r1, #4]
 8021b10:	bc70      	pop	{r4, r5, r6}
 8021b12:	4770      	bx	lr

08021b14 <st_dsp_arm_float_to_q15>:
 8021b14:	b4f0      	push	{r4, r5, r6, r7}
 8021b16:	0897      	lsrs	r7, r2, #2
 8021b18:	d06b      	beq.n	8021bf2 <st_dsp_arm_float_to_q15+0xde>
 8021b1a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8021b1e:	f100 0510 	add.w	r5, r0, #16
 8021b22:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021b26:	f101 0408 	add.w	r4, r1, #8
 8021b2a:	463e      	mov	r6, r7
 8021b2c:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8021c84 <st_dsp_arm_float_to_q15+0x170>
 8021b30:	e00b      	b.n	8021b4a <st_dsp_arm_float_to_q15+0x36>
 8021b32:	ee17 3a10 	vmov	r3, s14
 8021b36:	f303 030f 	ssat	r3, #16, r3
 8021b3a:	3e01      	subs	r6, #1
 8021b3c:	f824 3c02 	strh.w	r3, [r4, #-2]
 8021b40:	f105 0510 	add.w	r5, r5, #16
 8021b44:	f104 0408 	add.w	r4, r4, #8
 8021b48:	d04f      	beq.n	8021bea <st_dsp_arm_float_to_q15+0xd6>
 8021b4a:	ed55 7a04 	vldr	s15, [r5, #-16]
 8021b4e:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021b52:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b5a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021b5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b66:	ee17 3a90 	vmov	r3, s15
 8021b6a:	f303 030f 	ssat	r3, #16, r3
 8021b6e:	f824 3c08 	strh.w	r3, [r4, #-8]
 8021b72:	ed55 7a03 	vldr	s15, [r5, #-12]
 8021b76:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021b7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b82:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021b86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b8e:	ee17 3a90 	vmov	r3, s15
 8021b92:	f303 030f 	ssat	r3, #16, r3
 8021b96:	f824 3c06 	strh.w	r3, [r4, #-6]
 8021b9a:	ed55 7a02 	vldr	s15, [r5, #-8]
 8021b9e:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021ba2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021baa:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021bb6:	ee17 3a90 	vmov	r3, s15
 8021bba:	f303 030f 	ssat	r3, #16, r3
 8021bbe:	f824 3c04 	strh.w	r3, [r4, #-4]
 8021bc2:	ed55 7a01 	vldr	s15, [r5, #-4]
 8021bc6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8021bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021bce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bd6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021bda:	dcaa      	bgt.n	8021b32 <st_dsp_arm_float_to_q15+0x1e>
 8021bdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021be4:	ee17 3a90 	vmov	r3, s15
 8021be8:	e7a5      	b.n	8021b36 <st_dsp_arm_float_to_q15+0x22>
 8021bea:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8021bee:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8021bf2:	f012 0203 	ands.w	r2, r2, #3
 8021bf6:	d042      	beq.n	8021c7e <st_dsp_arm_float_to_q15+0x16a>
 8021bf8:	edd0 7a00 	vldr	s15, [r0]
 8021bfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021c00:	eddf 5a20 	vldr	s11, [pc, #128]	; 8021c84 <st_dsp_arm_float_to_q15+0x170>
 8021c04:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8021c08:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8021c0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c14:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8021c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c20:	ee17 3a90 	vmov	r3, s15
 8021c24:	f303 030f 	ssat	r3, #16, r3
 8021c28:	2a01      	cmp	r2, #1
 8021c2a:	800b      	strh	r3, [r1, #0]
 8021c2c:	d027      	beq.n	8021c7e <st_dsp_arm_float_to_q15+0x16a>
 8021c2e:	edd0 7a01 	vldr	s15, [r0, #4]
 8021c32:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8021c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c3e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8021c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c4a:	ee17 3a90 	vmov	r3, s15
 8021c4e:	f303 030f 	ssat	r3, #16, r3
 8021c52:	2a02      	cmp	r2, #2
 8021c54:	804b      	strh	r3, [r1, #2]
 8021c56:	d012      	beq.n	8021c7e <st_dsp_arm_float_to_q15+0x16a>
 8021c58:	edd0 7a02 	vldr	s15, [r0, #8]
 8021c5c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8021c60:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c68:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8021c6c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8021c70:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021c74:	ee17 3a10 	vmov	r3, s14
 8021c78:	f303 030f 	ssat	r3, #16, r3
 8021c7c:	808b      	strh	r3, [r1, #4]
 8021c7e:	bcf0      	pop	{r4, r5, r6, r7}
 8021c80:	4770      	bx	lr
 8021c82:	bf00      	nop
 8021c84:	47000000 	.word	0x47000000

08021c88 <st_dsp_arm_float_to_q7>:
 8021c88:	b4f0      	push	{r4, r5, r6, r7}
 8021c8a:	0897      	lsrs	r7, r2, #2
 8021c8c:	d066      	beq.n	8021d5c <st_dsp_arm_float_to_q7+0xd4>
 8021c8e:	1d0c      	adds	r4, r1, #4
 8021c90:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8021c94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8021c98:	f100 0510 	add.w	r5, r0, #16
 8021c9c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021ca0:	eb04 060c 	add.w	r6, r4, ip
 8021ca4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8021e14 <st_dsp_arm_float_to_q7+0x18c>
 8021ca8:	ed55 7a04 	vldr	s15, [r5, #-16]
 8021cac:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021cb0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cb8:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021cc4:	ee17 3a90 	vmov	r3, s15
 8021cc8:	b21b      	sxth	r3, r3
 8021cca:	f303 0307 	ssat	r3, #8, r3
 8021cce:	f804 3c04 	strb.w	r3, [r4, #-4]
 8021cd2:	ed55 7a03 	vldr	s15, [r5, #-12]
 8021cd6:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021cda:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ce2:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021cee:	ee17 3a90 	vmov	r3, s15
 8021cf2:	b21b      	sxth	r3, r3
 8021cf4:	f303 0307 	ssat	r3, #8, r3
 8021cf8:	f804 3c03 	strb.w	r3, [r4, #-3]
 8021cfc:	ed55 7a02 	vldr	s15, [r5, #-8]
 8021d00:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021d04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d0c:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021d18:	ee17 3a90 	vmov	r3, s15
 8021d1c:	b21b      	sxth	r3, r3
 8021d1e:	f303 0307 	ssat	r3, #8, r3
 8021d22:	f804 3c02 	strb.w	r3, [r4, #-2]
 8021d26:	ed55 7a01 	vldr	s15, [r5, #-4]
 8021d2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8021d2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d36:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d3e:	ee17 3a10 	vmov	r3, s14
 8021d42:	b21b      	sxth	r3, r3
 8021d44:	dd55      	ble.n	8021df2 <st_dsp_arm_float_to_q7+0x16a>
 8021d46:	f303 0307 	ssat	r3, #8, r3
 8021d4a:	f804 3c01 	strb.w	r3, [r4, #-1]
 8021d4e:	3404      	adds	r4, #4
 8021d50:	3510      	adds	r5, #16
 8021d52:	42a6      	cmp	r6, r4
 8021d54:	d1a8      	bne.n	8021ca8 <st_dsp_arm_float_to_q7+0x20>
 8021d56:	4461      	add	r1, ip
 8021d58:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8021d5c:	f012 0203 	ands.w	r2, r2, #3
 8021d60:	d045      	beq.n	8021dee <st_dsp_arm_float_to_q7+0x166>
 8021d62:	edd0 7a00 	vldr	s15, [r0]
 8021d66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021d6a:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 8021e14 <st_dsp_arm_float_to_q7+0x18c>
 8021d6e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021d72:	ee67 6a85 	vmul.f32	s13, s15, s10
 8021d76:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d7e:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021d8a:	ee17 3a90 	vmov	r3, s15
 8021d8e:	b21b      	sxth	r3, r3
 8021d90:	f303 0307 	ssat	r3, #8, r3
 8021d94:	2a01      	cmp	r2, #1
 8021d96:	700b      	strb	r3, [r1, #0]
 8021d98:	d029      	beq.n	8021dee <st_dsp_arm_float_to_q7+0x166>
 8021d9a:	edd0 6a01 	vldr	s13, [r0, #4]
 8021d9e:	ee26 6a85 	vmul.f32	s12, s13, s10
 8021da2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021daa:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8021dae:	ee76 6a86 	vadd.f32	s13, s13, s12
 8021db2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021db6:	ee16 3a90 	vmov	r3, s13
 8021dba:	b21b      	sxth	r3, r3
 8021dbc:	f303 0307 	ssat	r3, #8, r3
 8021dc0:	2a02      	cmp	r2, #2
 8021dc2:	704b      	strb	r3, [r1, #1]
 8021dc4:	d013      	beq.n	8021dee <st_dsp_arm_float_to_q7+0x166>
 8021dc6:	edd0 7a02 	vldr	s15, [r0, #8]
 8021dca:	ee27 5a85 	vmul.f32	s10, s15, s10
 8021dce:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8021dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dd6:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021dda:	ee77 7a85 	vadd.f32	s15, s15, s10
 8021dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021de2:	ee17 3a90 	vmov	r3, s15
 8021de6:	b21b      	sxth	r3, r3
 8021de8:	f303 0307 	ssat	r3, #8, r3
 8021dec:	708b      	strb	r3, [r1, #2]
 8021dee:	bcf0      	pop	{r4, r5, r6, r7}
 8021df0:	4770      	bx	lr
 8021df2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021dfa:	ee17 3a90 	vmov	r3, s15
 8021dfe:	b21b      	sxth	r3, r3
 8021e00:	f303 0307 	ssat	r3, #8, r3
 8021e04:	f804 3c01 	strb.w	r3, [r4, #-1]
 8021e08:	3404      	adds	r4, #4
 8021e0a:	3510      	adds	r5, #16
 8021e0c:	42b4      	cmp	r4, r6
 8021e0e:	f47f af4b 	bne.w	8021ca8 <st_dsp_arm_float_to_q7+0x20>
 8021e12:	e7a0      	b.n	8021d56 <st_dsp_arm_float_to_q7+0xce>
 8021e14:	43000000 	.word	0x43000000

08021e18 <st_dsp_arm_q15_to_float>:
 8021e18:	b470      	push	{r4, r5, r6}
 8021e1a:	0896      	lsrs	r6, r2, #2
 8021e1c:	d038      	beq.n	8021e90 <st_dsp_arm_q15_to_float+0x78>
 8021e1e:	f100 0408 	add.w	r4, r0, #8
 8021e22:	f101 0310 	add.w	r3, r1, #16
 8021e26:	4635      	mov	r5, r6
 8021e28:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8021ee4 <st_dsp_arm_q15_to_float+0xcc>
 8021e2c:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8021e30:	3d01      	subs	r5, #1
 8021e32:	f104 0408 	add.w	r4, r4, #8
 8021e36:	f103 0310 	add.w	r3, r3, #16
 8021e3a:	ee07 ca90 	vmov	s15, ip
 8021e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021e46:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8021e4a:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8021e4e:	ee07 ca90 	vmov	s15, ip
 8021e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021e5a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8021e5e:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8021e62:	ee07 ca90 	vmov	s15, ip
 8021e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021e6e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8021e72:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8021e76:	ee07 ca90 	vmov	s15, ip
 8021e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021e82:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8021e86:	d1d1      	bne.n	8021e2c <st_dsp_arm_q15_to_float+0x14>
 8021e88:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8021e8c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8021e90:	f012 0203 	ands.w	r2, r2, #3
 8021e94:	d023      	beq.n	8021ede <st_dsp_arm_q15_to_float+0xc6>
 8021e96:	f9b0 3000 	ldrsh.w	r3, [r0]
 8021e9a:	2a01      	cmp	r2, #1
 8021e9c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8021ee4 <st_dsp_arm_q15_to_float+0xcc>
 8021ea0:	ee07 3a90 	vmov	s15, r3
 8021ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021eac:	edc1 7a00 	vstr	s15, [r1]
 8021eb0:	d015      	beq.n	8021ede <st_dsp_arm_q15_to_float+0xc6>
 8021eb2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021eb6:	2a02      	cmp	r2, #2
 8021eb8:	ee07 3a90 	vmov	s15, r3
 8021ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021ec4:	edc1 7a01 	vstr	s15, [r1, #4]
 8021ec8:	d009      	beq.n	8021ede <st_dsp_arm_q15_to_float+0xc6>
 8021eca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8021ece:	ee07 3a90 	vmov	s15, r3
 8021ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021eda:	edc1 7a02 	vstr	s15, [r1, #8]
 8021ede:	bc70      	pop	{r4, r5, r6}
 8021ee0:	4770      	bx	lr
 8021ee2:	bf00      	nop
 8021ee4:	38000000 	.word	0x38000000

08021ee8 <st_dsp_arm_q7_to_float>:
 8021ee8:	b470      	push	{r4, r5, r6}
 8021eea:	0895      	lsrs	r5, r2, #2
 8021eec:	d036      	beq.n	8021f5c <st_dsp_arm_q7_to_float+0x74>
 8021eee:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8021ef2:	f101 0310 	add.w	r3, r1, #16
 8021ef6:	3004      	adds	r0, #4
 8021ef8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8021fb0 <st_dsp_arm_q7_to_float+0xc8>
 8021efc:	1d34      	adds	r4, r6, #4
 8021efe:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 8021f02:	3004      	adds	r0, #4
 8021f04:	3310      	adds	r3, #16
 8021f06:	ee07 ca90 	vmov	s15, ip
 8021f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f12:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8021f16:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 8021f1a:	ee07 ca90 	vmov	s15, ip
 8021f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f26:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8021f2a:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 8021f2e:	ee07 ca90 	vmov	s15, ip
 8021f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f3a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8021f3e:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 8021f42:	42a0      	cmp	r0, r4
 8021f44:	ee07 ca90 	vmov	s15, ip
 8021f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f50:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8021f54:	d1d3      	bne.n	8021efe <st_dsp_arm_q7_to_float+0x16>
 8021f56:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8021f5a:	4630      	mov	r0, r6
 8021f5c:	f012 0203 	ands.w	r2, r2, #3
 8021f60:	d023      	beq.n	8021faa <st_dsp_arm_q7_to_float+0xc2>
 8021f62:	f990 3000 	ldrsb.w	r3, [r0]
 8021f66:	2a01      	cmp	r2, #1
 8021f68:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8021fb0 <st_dsp_arm_q7_to_float+0xc8>
 8021f6c:	ee07 3a90 	vmov	s15, r3
 8021f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f78:	edc1 7a00 	vstr	s15, [r1]
 8021f7c:	d015      	beq.n	8021faa <st_dsp_arm_q7_to_float+0xc2>
 8021f7e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8021f82:	2a02      	cmp	r2, #2
 8021f84:	ee07 3a90 	vmov	s15, r3
 8021f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f90:	edc1 7a01 	vstr	s15, [r1, #4]
 8021f94:	d009      	beq.n	8021faa <st_dsp_arm_q7_to_float+0xc2>
 8021f96:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8021f9a:	ee07 3a90 	vmov	s15, r3
 8021f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021fa6:	edc1 7a02 	vstr	s15, [r1, #8]
 8021faa:	bc70      	pop	{r4, r5, r6}
 8021fac:	4770      	bx	lr
 8021fae:	bf00      	nop
 8021fb0:	3c000000 	.word	0x3c000000

08021fb4 <ai_version_get>:
 8021fb4:	0212      	lsls	r2, r2, #8
 8021fb6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8021fba:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8021fbe:	4770      	bx	lr

08021fc0 <ai_platform_version_get>:
 8021fc0:	0e01      	lsrs	r1, r0, #24
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8021fc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021fcc:	f361 0307 	bfi	r3, r1, #0, #8
 8021fd0:	b082      	sub	sp, #8
 8021fd2:	f362 230f 	bfi	r3, r2, #8, #8
 8021fd6:	f360 4317 	bfi	r3, r0, #16, #8
 8021fda:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8021fde:	b002      	add	sp, #8
 8021fe0:	4770      	bx	lr
 8021fe2:	bf00      	nop

08021fe4 <get_tensor_byte_size>:
 8021fe4:	b410      	push	{r4}
 8021fe6:	6984      	ldr	r4, [r0, #24]
 8021fe8:	4b08      	ldr	r3, [pc, #32]	; (802200c <get_tensor_byte_size+0x28>)
 8021fea:	6824      	ldr	r4, [r4, #0]
 8021fec:	68c1      	ldr	r1, [r0, #12]
 8021fee:	4a08      	ldr	r2, [pc, #32]	; (8022010 <get_tensor_byte_size+0x2c>)
 8021ff0:	4023      	ands	r3, r4
 8021ff2:	6940      	ldr	r0, [r0, #20]
 8021ff4:	68c9      	ldr	r1, [r1, #12]
 8021ff6:	4293      	cmp	r3, r2
 8021ff8:	68c0      	ldr	r0, [r0, #12]
 8021ffa:	fb00 f001 	mul.w	r0, r0, r1
 8021ffe:	d101      	bne.n	8022004 <get_tensor_byte_size+0x20>
 8022000:	3007      	adds	r0, #7
 8022002:	08c0      	lsrs	r0, r0, #3
 8022004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022008:	4770      	bx	lr
 802200a:	bf00      	nop
 802200c:	017fffff 	.word	0x017fffff
 8022010:	000400c0 	.word	0x000400c0

08022014 <ai_array_to_buffer_fmt>:
 8022014:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8022018:	2b02      	cmp	r3, #2
 802201a:	d036      	beq.n	802208a <ai_array_to_buffer_fmt+0x76>
 802201c:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8022020:	4a20      	ldr	r2, [pc, #128]	; (80220a4 <ai_array_to_buffer_fmt+0x90>)
 8022022:	4293      	cmp	r3, r2
 8022024:	d00f      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 8022026:	dd12      	ble.n	802204e <ai_array_to_buffer_fmt+0x3a>
 8022028:	4a1f      	ldr	r2, [pc, #124]	; (80220a8 <ai_array_to_buffer_fmt+0x94>)
 802202a:	4293      	cmp	r3, r2
 802202c:	d00b      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 802202e:	dd1e      	ble.n	802206e <ai_array_to_buffer_fmt+0x5a>
 8022030:	4a1e      	ldr	r2, [pc, #120]	; (80220ac <ai_array_to_buffer_fmt+0x98>)
 8022032:	4293      	cmp	r3, r2
 8022034:	d007      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 8022036:	dd30      	ble.n	802209a <ai_array_to_buffer_fmt+0x86>
 8022038:	4a1d      	ldr	r2, [pc, #116]	; (80220b0 <ai_array_to_buffer_fmt+0x9c>)
 802203a:	4293      	cmp	r3, r2
 802203c:	d003      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 802203e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8022042:	4293      	cmp	r3, r2
 8022044:	d11f      	bne.n	8022086 <ai_array_to_buffer_fmt+0x72>
 8022046:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 802204a:	4318      	orrs	r0, r3
 802204c:	4770      	bx	lr
 802204e:	4a19      	ldr	r2, [pc, #100]	; (80220b4 <ai_array_to_buffer_fmt+0xa0>)
 8022050:	4293      	cmp	r3, r2
 8022052:	d0f8      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 8022054:	dd0b      	ble.n	802206e <ai_array_to_buffer_fmt+0x5a>
 8022056:	4a18      	ldr	r2, [pc, #96]	; (80220b8 <ai_array_to_buffer_fmt+0xa4>)
 8022058:	4293      	cmp	r3, r2
 802205a:	d0f4      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 802205c:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8022060:	4293      	cmp	r3, r2
 8022062:	d0f0      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 8022064:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8022068:	4293      	cmp	r3, r2
 802206a:	d10c      	bne.n	8022086 <ai_array_to_buffer_fmt+0x72>
 802206c:	e7eb      	b.n	8022046 <ai_array_to_buffer_fmt+0x32>
 802206e:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8022072:	4293      	cmp	r3, r2
 8022074:	d0e7      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 8022076:	f502 7260 	add.w	r2, r2, #896	; 0x380
 802207a:	4293      	cmp	r3, r2
 802207c:	d0e3      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 802207e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8022082:	4293      	cmp	r3, r2
 8022084:	d0df      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 8022086:	2340      	movs	r3, #64	; 0x40
 8022088:	e7dd      	b.n	8022046 <ai_array_to_buffer_fmt+0x32>
 802208a:	4b0c      	ldr	r3, [pc, #48]	; (80220bc <ai_array_to_buffer_fmt+0xa8>)
 802208c:	4003      	ands	r3, r0
 802208e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8022092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8022096:	4318      	orrs	r0, r3
 8022098:	4770      	bx	lr
 802209a:	3a0f      	subs	r2, #15
 802209c:	4293      	cmp	r3, r2
 802209e:	d0d2      	beq.n	8022046 <ai_array_to_buffer_fmt+0x32>
 80220a0:	e7f1      	b.n	8022086 <ai_array_to_buffer_fmt+0x72>
 80220a2:	bf00      	nop
 80220a4:	00060440 	.word	0x00060440
 80220a8:	00840447 	.word	0x00840447
 80220ac:	0084084f 	.word	0x0084084f
 80220b0:	00841040 	.word	0x00841040
 80220b4:	00040447 	.word	0x00040447
 80220b8:	0004084f 	.word	0x0004084f
 80220bc:	00803fff 	.word	0x00803fff

080220c0 <ai_array_get_data_byte_size>:
 80220c0:	b161      	cbz	r1, 80220dc <ai_array_get_data_byte_size+0x1c>
 80220c2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80220c6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80220ca:	fb01 f103 	mul.w	r1, r1, r3
 80220ce:	3107      	adds	r1, #7
 80220d0:	f021 0107 	bic.w	r1, r1, #7
 80220d4:	40c1      	lsrs	r1, r0
 80220d6:	3107      	adds	r1, #7
 80220d8:	08c8      	lsrs	r0, r1, #3
 80220da:	4770      	bx	lr
 80220dc:	4608      	mov	r0, r1
 80220de:	4770      	bx	lr

080220e0 <core_tensor_clone>:
 80220e0:	680b      	ldr	r3, [r1, #0]
 80220e2:	6882      	ldr	r2, [r0, #8]
 80220e4:	6003      	str	r3, [r0, #0]
 80220e6:	684b      	ldr	r3, [r1, #4]
 80220e8:	6043      	str	r3, [r0, #4]
 80220ea:	698b      	ldr	r3, [r1, #24]
 80220ec:	6183      	str	r3, [r0, #24]
 80220ee:	688b      	ldr	r3, [r1, #8]
 80220f0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80220f4:	f363 221f 	bfi	r2, r3, #8, #24
 80220f8:	b410      	push	{r4}
 80220fa:	6082      	str	r2, [r0, #8]
 80220fc:	b15b      	cbz	r3, 8022116 <core_tensor_clone+0x36>
 80220fe:	2300      	movs	r3, #0
 8022100:	68cc      	ldr	r4, [r1, #12]
 8022102:	68c2      	ldr	r2, [r0, #12]
 8022104:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8022108:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 802210c:	3301      	adds	r3, #1
 802210e:	6882      	ldr	r2, [r0, #8]
 8022110:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8022114:	d3f4      	bcc.n	8022100 <core_tensor_clone+0x20>
 8022116:	690b      	ldr	r3, [r1, #16]
 8022118:	6902      	ldr	r2, [r0, #16]
 802211a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 802211e:	f363 221f 	bfi	r2, r3, #8, #24
 8022122:	6102      	str	r2, [r0, #16]
 8022124:	b15b      	cbz	r3, 802213e <core_tensor_clone+0x5e>
 8022126:	2300      	movs	r3, #0
 8022128:	694c      	ldr	r4, [r1, #20]
 802212a:	6942      	ldr	r2, [r0, #20]
 802212c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8022130:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8022134:	3301      	adds	r3, #1
 8022136:	6902      	ldr	r2, [r0, #16]
 8022138:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 802213c:	d3f4      	bcc.n	8022128 <core_tensor_clone+0x48>
 802213e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022142:	4770      	bx	lr

08022144 <core_array_clone>:
 8022144:	b410      	push	{r4}
 8022146:	4604      	mov	r4, r0
 8022148:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 802214a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802214e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022152:	4770      	bx	lr

08022154 <__libc_init_array>:
 8022154:	b570      	push	{r4, r5, r6, lr}
 8022156:	4d0d      	ldr	r5, [pc, #52]	; (802218c <__libc_init_array+0x38>)
 8022158:	4c0d      	ldr	r4, [pc, #52]	; (8022190 <__libc_init_array+0x3c>)
 802215a:	1b64      	subs	r4, r4, r5
 802215c:	10a4      	asrs	r4, r4, #2
 802215e:	2600      	movs	r6, #0
 8022160:	42a6      	cmp	r6, r4
 8022162:	d109      	bne.n	8022178 <__libc_init_array+0x24>
 8022164:	4d0b      	ldr	r5, [pc, #44]	; (8022194 <__libc_init_array+0x40>)
 8022166:	4c0c      	ldr	r4, [pc, #48]	; (8022198 <__libc_init_array+0x44>)
 8022168:	f003 fa88 	bl	802567c <_init>
 802216c:	1b64      	subs	r4, r4, r5
 802216e:	10a4      	asrs	r4, r4, #2
 8022170:	2600      	movs	r6, #0
 8022172:	42a6      	cmp	r6, r4
 8022174:	d105      	bne.n	8022182 <__libc_init_array+0x2e>
 8022176:	bd70      	pop	{r4, r5, r6, pc}
 8022178:	f855 3b04 	ldr.w	r3, [r5], #4
 802217c:	4798      	blx	r3
 802217e:	3601      	adds	r6, #1
 8022180:	e7ee      	b.n	8022160 <__libc_init_array+0xc>
 8022182:	f855 3b04 	ldr.w	r3, [r5], #4
 8022186:	4798      	blx	r3
 8022188:	3601      	adds	r6, #1
 802218a:	e7f2      	b.n	8022172 <__libc_init_array+0x1e>
 802218c:	08077d20 	.word	0x08077d20
 8022190:	08077d20 	.word	0x08077d20
 8022194:	08077d20 	.word	0x08077d20
 8022198:	08077d24 	.word	0x08077d24

0802219c <malloc>:
 802219c:	4b02      	ldr	r3, [pc, #8]	; (80221a8 <malloc+0xc>)
 802219e:	4601      	mov	r1, r0
 80221a0:	6818      	ldr	r0, [r3, #0]
 80221a2:	f000 b88b 	b.w	80222bc <_malloc_r>
 80221a6:	bf00      	nop
 80221a8:	24001b64 	.word	0x24001b64

080221ac <free>:
 80221ac:	4b02      	ldr	r3, [pc, #8]	; (80221b8 <free+0xc>)
 80221ae:	4601      	mov	r1, r0
 80221b0:	6818      	ldr	r0, [r3, #0]
 80221b2:	f000 b833 	b.w	802221c <_free_r>
 80221b6:	bf00      	nop
 80221b8:	24001b64 	.word	0x24001b64

080221bc <memcpy>:
 80221bc:	440a      	add	r2, r1
 80221be:	4291      	cmp	r1, r2
 80221c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80221c4:	d100      	bne.n	80221c8 <memcpy+0xc>
 80221c6:	4770      	bx	lr
 80221c8:	b510      	push	{r4, lr}
 80221ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80221ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80221d2:	4291      	cmp	r1, r2
 80221d4:	d1f9      	bne.n	80221ca <memcpy+0xe>
 80221d6:	bd10      	pop	{r4, pc}

080221d8 <memmove>:
 80221d8:	4288      	cmp	r0, r1
 80221da:	b510      	push	{r4, lr}
 80221dc:	eb01 0402 	add.w	r4, r1, r2
 80221e0:	d902      	bls.n	80221e8 <memmove+0x10>
 80221e2:	4284      	cmp	r4, r0
 80221e4:	4623      	mov	r3, r4
 80221e6:	d807      	bhi.n	80221f8 <memmove+0x20>
 80221e8:	1e43      	subs	r3, r0, #1
 80221ea:	42a1      	cmp	r1, r4
 80221ec:	d008      	beq.n	8022200 <memmove+0x28>
 80221ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80221f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80221f6:	e7f8      	b.n	80221ea <memmove+0x12>
 80221f8:	4402      	add	r2, r0
 80221fa:	4601      	mov	r1, r0
 80221fc:	428a      	cmp	r2, r1
 80221fe:	d100      	bne.n	8022202 <memmove+0x2a>
 8022200:	bd10      	pop	{r4, pc}
 8022202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802220a:	e7f7      	b.n	80221fc <memmove+0x24>

0802220c <memset>:
 802220c:	4402      	add	r2, r0
 802220e:	4603      	mov	r3, r0
 8022210:	4293      	cmp	r3, r2
 8022212:	d100      	bne.n	8022216 <memset+0xa>
 8022214:	4770      	bx	lr
 8022216:	f803 1b01 	strb.w	r1, [r3], #1
 802221a:	e7f9      	b.n	8022210 <memset+0x4>

0802221c <_free_r>:
 802221c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802221e:	2900      	cmp	r1, #0
 8022220:	d048      	beq.n	80222b4 <_free_r+0x98>
 8022222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022226:	9001      	str	r0, [sp, #4]
 8022228:	2b00      	cmp	r3, #0
 802222a:	f1a1 0404 	sub.w	r4, r1, #4
 802222e:	bfb8      	it	lt
 8022230:	18e4      	addlt	r4, r4, r3
 8022232:	f001 fcef 	bl	8023c14 <__malloc_lock>
 8022236:	4a20      	ldr	r2, [pc, #128]	; (80222b8 <_free_r+0x9c>)
 8022238:	9801      	ldr	r0, [sp, #4]
 802223a:	6813      	ldr	r3, [r2, #0]
 802223c:	4615      	mov	r5, r2
 802223e:	b933      	cbnz	r3, 802224e <_free_r+0x32>
 8022240:	6063      	str	r3, [r4, #4]
 8022242:	6014      	str	r4, [r2, #0]
 8022244:	b003      	add	sp, #12
 8022246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802224a:	f001 bce9 	b.w	8023c20 <__malloc_unlock>
 802224e:	42a3      	cmp	r3, r4
 8022250:	d90b      	bls.n	802226a <_free_r+0x4e>
 8022252:	6821      	ldr	r1, [r4, #0]
 8022254:	1862      	adds	r2, r4, r1
 8022256:	4293      	cmp	r3, r2
 8022258:	bf04      	itt	eq
 802225a:	681a      	ldreq	r2, [r3, #0]
 802225c:	685b      	ldreq	r3, [r3, #4]
 802225e:	6063      	str	r3, [r4, #4]
 8022260:	bf04      	itt	eq
 8022262:	1852      	addeq	r2, r2, r1
 8022264:	6022      	streq	r2, [r4, #0]
 8022266:	602c      	str	r4, [r5, #0]
 8022268:	e7ec      	b.n	8022244 <_free_r+0x28>
 802226a:	461a      	mov	r2, r3
 802226c:	685b      	ldr	r3, [r3, #4]
 802226e:	b10b      	cbz	r3, 8022274 <_free_r+0x58>
 8022270:	42a3      	cmp	r3, r4
 8022272:	d9fa      	bls.n	802226a <_free_r+0x4e>
 8022274:	6811      	ldr	r1, [r2, #0]
 8022276:	1855      	adds	r5, r2, r1
 8022278:	42a5      	cmp	r5, r4
 802227a:	d10b      	bne.n	8022294 <_free_r+0x78>
 802227c:	6824      	ldr	r4, [r4, #0]
 802227e:	4421      	add	r1, r4
 8022280:	1854      	adds	r4, r2, r1
 8022282:	42a3      	cmp	r3, r4
 8022284:	6011      	str	r1, [r2, #0]
 8022286:	d1dd      	bne.n	8022244 <_free_r+0x28>
 8022288:	681c      	ldr	r4, [r3, #0]
 802228a:	685b      	ldr	r3, [r3, #4]
 802228c:	6053      	str	r3, [r2, #4]
 802228e:	4421      	add	r1, r4
 8022290:	6011      	str	r1, [r2, #0]
 8022292:	e7d7      	b.n	8022244 <_free_r+0x28>
 8022294:	d902      	bls.n	802229c <_free_r+0x80>
 8022296:	230c      	movs	r3, #12
 8022298:	6003      	str	r3, [r0, #0]
 802229a:	e7d3      	b.n	8022244 <_free_r+0x28>
 802229c:	6825      	ldr	r5, [r4, #0]
 802229e:	1961      	adds	r1, r4, r5
 80222a0:	428b      	cmp	r3, r1
 80222a2:	bf04      	itt	eq
 80222a4:	6819      	ldreq	r1, [r3, #0]
 80222a6:	685b      	ldreq	r3, [r3, #4]
 80222a8:	6063      	str	r3, [r4, #4]
 80222aa:	bf04      	itt	eq
 80222ac:	1949      	addeq	r1, r1, r5
 80222ae:	6021      	streq	r1, [r4, #0]
 80222b0:	6054      	str	r4, [r2, #4]
 80222b2:	e7c7      	b.n	8022244 <_free_r+0x28>
 80222b4:	b003      	add	sp, #12
 80222b6:	bd30      	pop	{r4, r5, pc}
 80222b8:	30008560 	.word	0x30008560

080222bc <_malloc_r>:
 80222bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222be:	1ccd      	adds	r5, r1, #3
 80222c0:	f025 0503 	bic.w	r5, r5, #3
 80222c4:	3508      	adds	r5, #8
 80222c6:	2d0c      	cmp	r5, #12
 80222c8:	bf38      	it	cc
 80222ca:	250c      	movcc	r5, #12
 80222cc:	2d00      	cmp	r5, #0
 80222ce:	4606      	mov	r6, r0
 80222d0:	db01      	blt.n	80222d6 <_malloc_r+0x1a>
 80222d2:	42a9      	cmp	r1, r5
 80222d4:	d903      	bls.n	80222de <_malloc_r+0x22>
 80222d6:	230c      	movs	r3, #12
 80222d8:	6033      	str	r3, [r6, #0]
 80222da:	2000      	movs	r0, #0
 80222dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222de:	f001 fc99 	bl	8023c14 <__malloc_lock>
 80222e2:	4921      	ldr	r1, [pc, #132]	; (8022368 <_malloc_r+0xac>)
 80222e4:	680a      	ldr	r2, [r1, #0]
 80222e6:	4614      	mov	r4, r2
 80222e8:	b99c      	cbnz	r4, 8022312 <_malloc_r+0x56>
 80222ea:	4f20      	ldr	r7, [pc, #128]	; (802236c <_malloc_r+0xb0>)
 80222ec:	683b      	ldr	r3, [r7, #0]
 80222ee:	b923      	cbnz	r3, 80222fa <_malloc_r+0x3e>
 80222f0:	4621      	mov	r1, r4
 80222f2:	4630      	mov	r0, r6
 80222f4:	f000 fe08 	bl	8022f08 <_sbrk_r>
 80222f8:	6038      	str	r0, [r7, #0]
 80222fa:	4629      	mov	r1, r5
 80222fc:	4630      	mov	r0, r6
 80222fe:	f000 fe03 	bl	8022f08 <_sbrk_r>
 8022302:	1c43      	adds	r3, r0, #1
 8022304:	d123      	bne.n	802234e <_malloc_r+0x92>
 8022306:	230c      	movs	r3, #12
 8022308:	6033      	str	r3, [r6, #0]
 802230a:	4630      	mov	r0, r6
 802230c:	f001 fc88 	bl	8023c20 <__malloc_unlock>
 8022310:	e7e3      	b.n	80222da <_malloc_r+0x1e>
 8022312:	6823      	ldr	r3, [r4, #0]
 8022314:	1b5b      	subs	r3, r3, r5
 8022316:	d417      	bmi.n	8022348 <_malloc_r+0x8c>
 8022318:	2b0b      	cmp	r3, #11
 802231a:	d903      	bls.n	8022324 <_malloc_r+0x68>
 802231c:	6023      	str	r3, [r4, #0]
 802231e:	441c      	add	r4, r3
 8022320:	6025      	str	r5, [r4, #0]
 8022322:	e004      	b.n	802232e <_malloc_r+0x72>
 8022324:	6863      	ldr	r3, [r4, #4]
 8022326:	42a2      	cmp	r2, r4
 8022328:	bf0c      	ite	eq
 802232a:	600b      	streq	r3, [r1, #0]
 802232c:	6053      	strne	r3, [r2, #4]
 802232e:	4630      	mov	r0, r6
 8022330:	f001 fc76 	bl	8023c20 <__malloc_unlock>
 8022334:	f104 000b 	add.w	r0, r4, #11
 8022338:	1d23      	adds	r3, r4, #4
 802233a:	f020 0007 	bic.w	r0, r0, #7
 802233e:	1ac2      	subs	r2, r0, r3
 8022340:	d0cc      	beq.n	80222dc <_malloc_r+0x20>
 8022342:	1a1b      	subs	r3, r3, r0
 8022344:	50a3      	str	r3, [r4, r2]
 8022346:	e7c9      	b.n	80222dc <_malloc_r+0x20>
 8022348:	4622      	mov	r2, r4
 802234a:	6864      	ldr	r4, [r4, #4]
 802234c:	e7cc      	b.n	80222e8 <_malloc_r+0x2c>
 802234e:	1cc4      	adds	r4, r0, #3
 8022350:	f024 0403 	bic.w	r4, r4, #3
 8022354:	42a0      	cmp	r0, r4
 8022356:	d0e3      	beq.n	8022320 <_malloc_r+0x64>
 8022358:	1a21      	subs	r1, r4, r0
 802235a:	4630      	mov	r0, r6
 802235c:	f000 fdd4 	bl	8022f08 <_sbrk_r>
 8022360:	3001      	adds	r0, #1
 8022362:	d1dd      	bne.n	8022320 <_malloc_r+0x64>
 8022364:	e7cf      	b.n	8022306 <_malloc_r+0x4a>
 8022366:	bf00      	nop
 8022368:	30008560 	.word	0x30008560
 802236c:	30008564 	.word	0x30008564

08022370 <__cvt>:
 8022370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022372:	ed2d 8b02 	vpush	{d8}
 8022376:	eeb0 8b40 	vmov.f64	d8, d0
 802237a:	b085      	sub	sp, #20
 802237c:	4617      	mov	r7, r2
 802237e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022380:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022382:	ee18 2a90 	vmov	r2, s17
 8022386:	f025 0520 	bic.w	r5, r5, #32
 802238a:	2a00      	cmp	r2, #0
 802238c:	bfb6      	itet	lt
 802238e:	222d      	movlt	r2, #45	; 0x2d
 8022390:	2200      	movge	r2, #0
 8022392:	eeb1 8b40 	vneglt.f64	d8, d0
 8022396:	2d46      	cmp	r5, #70	; 0x46
 8022398:	460c      	mov	r4, r1
 802239a:	701a      	strb	r2, [r3, #0]
 802239c:	d004      	beq.n	80223a8 <__cvt+0x38>
 802239e:	2d45      	cmp	r5, #69	; 0x45
 80223a0:	d100      	bne.n	80223a4 <__cvt+0x34>
 80223a2:	3401      	adds	r4, #1
 80223a4:	2102      	movs	r1, #2
 80223a6:	e000      	b.n	80223aa <__cvt+0x3a>
 80223a8:	2103      	movs	r1, #3
 80223aa:	ab03      	add	r3, sp, #12
 80223ac:	9301      	str	r3, [sp, #4]
 80223ae:	ab02      	add	r3, sp, #8
 80223b0:	9300      	str	r3, [sp, #0]
 80223b2:	4622      	mov	r2, r4
 80223b4:	4633      	mov	r3, r6
 80223b6:	eeb0 0b48 	vmov.f64	d0, d8
 80223ba:	f000 fea5 	bl	8023108 <_dtoa_r>
 80223be:	2d47      	cmp	r5, #71	; 0x47
 80223c0:	d109      	bne.n	80223d6 <__cvt+0x66>
 80223c2:	07fb      	lsls	r3, r7, #31
 80223c4:	d407      	bmi.n	80223d6 <__cvt+0x66>
 80223c6:	9b03      	ldr	r3, [sp, #12]
 80223c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223ca:	1a1b      	subs	r3, r3, r0
 80223cc:	6013      	str	r3, [r2, #0]
 80223ce:	b005      	add	sp, #20
 80223d0:	ecbd 8b02 	vpop	{d8}
 80223d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223d6:	2d46      	cmp	r5, #70	; 0x46
 80223d8:	eb00 0204 	add.w	r2, r0, r4
 80223dc:	d10c      	bne.n	80223f8 <__cvt+0x88>
 80223de:	7803      	ldrb	r3, [r0, #0]
 80223e0:	2b30      	cmp	r3, #48	; 0x30
 80223e2:	d107      	bne.n	80223f4 <__cvt+0x84>
 80223e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80223e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223ec:	bf1c      	itt	ne
 80223ee:	f1c4 0401 	rsbne	r4, r4, #1
 80223f2:	6034      	strne	r4, [r6, #0]
 80223f4:	6833      	ldr	r3, [r6, #0]
 80223f6:	441a      	add	r2, r3
 80223f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80223fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022400:	bf08      	it	eq
 8022402:	9203      	streq	r2, [sp, #12]
 8022404:	2130      	movs	r1, #48	; 0x30
 8022406:	9b03      	ldr	r3, [sp, #12]
 8022408:	4293      	cmp	r3, r2
 802240a:	d2dc      	bcs.n	80223c6 <__cvt+0x56>
 802240c:	1c5c      	adds	r4, r3, #1
 802240e:	9403      	str	r4, [sp, #12]
 8022410:	7019      	strb	r1, [r3, #0]
 8022412:	e7f8      	b.n	8022406 <__cvt+0x96>

08022414 <__exponent>:
 8022414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022416:	4603      	mov	r3, r0
 8022418:	2900      	cmp	r1, #0
 802241a:	bfb8      	it	lt
 802241c:	4249      	neglt	r1, r1
 802241e:	f803 2b02 	strb.w	r2, [r3], #2
 8022422:	bfb4      	ite	lt
 8022424:	222d      	movlt	r2, #45	; 0x2d
 8022426:	222b      	movge	r2, #43	; 0x2b
 8022428:	2909      	cmp	r1, #9
 802242a:	7042      	strb	r2, [r0, #1]
 802242c:	dd2a      	ble.n	8022484 <__exponent+0x70>
 802242e:	f10d 0407 	add.w	r4, sp, #7
 8022432:	46a4      	mov	ip, r4
 8022434:	270a      	movs	r7, #10
 8022436:	46a6      	mov	lr, r4
 8022438:	460a      	mov	r2, r1
 802243a:	fb91 f6f7 	sdiv	r6, r1, r7
 802243e:	fb07 1516 	mls	r5, r7, r6, r1
 8022442:	3530      	adds	r5, #48	; 0x30
 8022444:	2a63      	cmp	r2, #99	; 0x63
 8022446:	f104 34ff 	add.w	r4, r4, #4294967295
 802244a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802244e:	4631      	mov	r1, r6
 8022450:	dcf1      	bgt.n	8022436 <__exponent+0x22>
 8022452:	3130      	adds	r1, #48	; 0x30
 8022454:	f1ae 0502 	sub.w	r5, lr, #2
 8022458:	f804 1c01 	strb.w	r1, [r4, #-1]
 802245c:	1c44      	adds	r4, r0, #1
 802245e:	4629      	mov	r1, r5
 8022460:	4561      	cmp	r1, ip
 8022462:	d30a      	bcc.n	802247a <__exponent+0x66>
 8022464:	f10d 0209 	add.w	r2, sp, #9
 8022468:	eba2 020e 	sub.w	r2, r2, lr
 802246c:	4565      	cmp	r5, ip
 802246e:	bf88      	it	hi
 8022470:	2200      	movhi	r2, #0
 8022472:	4413      	add	r3, r2
 8022474:	1a18      	subs	r0, r3, r0
 8022476:	b003      	add	sp, #12
 8022478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802247a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802247e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022482:	e7ed      	b.n	8022460 <__exponent+0x4c>
 8022484:	2330      	movs	r3, #48	; 0x30
 8022486:	3130      	adds	r1, #48	; 0x30
 8022488:	7083      	strb	r3, [r0, #2]
 802248a:	70c1      	strb	r1, [r0, #3]
 802248c:	1d03      	adds	r3, r0, #4
 802248e:	e7f1      	b.n	8022474 <__exponent+0x60>

08022490 <_printf_float>:
 8022490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022494:	b08b      	sub	sp, #44	; 0x2c
 8022496:	460c      	mov	r4, r1
 8022498:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802249c:	4616      	mov	r6, r2
 802249e:	461f      	mov	r7, r3
 80224a0:	4605      	mov	r5, r0
 80224a2:	f001 fbb3 	bl	8023c0c <_localeconv_r>
 80224a6:	f8d0 b000 	ldr.w	fp, [r0]
 80224aa:	4658      	mov	r0, fp
 80224ac:	f7dd ff22 	bl	80002f4 <strlen>
 80224b0:	2300      	movs	r3, #0
 80224b2:	9308      	str	r3, [sp, #32]
 80224b4:	f8d8 3000 	ldr.w	r3, [r8]
 80224b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80224bc:	6822      	ldr	r2, [r4, #0]
 80224be:	3307      	adds	r3, #7
 80224c0:	f023 0307 	bic.w	r3, r3, #7
 80224c4:	f103 0108 	add.w	r1, r3, #8
 80224c8:	f8c8 1000 	str.w	r1, [r8]
 80224cc:	4682      	mov	sl, r0
 80224ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80224d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80224d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8022738 <_printf_float+0x2a8>
 80224da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80224de:	eeb0 6bc0 	vabs.f64	d6, d0
 80224e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80224e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224ea:	dd24      	ble.n	8022536 <_printf_float+0xa6>
 80224ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80224f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224f4:	d502      	bpl.n	80224fc <_printf_float+0x6c>
 80224f6:	232d      	movs	r3, #45	; 0x2d
 80224f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80224fc:	4b90      	ldr	r3, [pc, #576]	; (8022740 <_printf_float+0x2b0>)
 80224fe:	4891      	ldr	r0, [pc, #580]	; (8022744 <_printf_float+0x2b4>)
 8022500:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8022504:	bf94      	ite	ls
 8022506:	4698      	movls	r8, r3
 8022508:	4680      	movhi	r8, r0
 802250a:	2303      	movs	r3, #3
 802250c:	6123      	str	r3, [r4, #16]
 802250e:	f022 0204 	bic.w	r2, r2, #4
 8022512:	2300      	movs	r3, #0
 8022514:	6022      	str	r2, [r4, #0]
 8022516:	9304      	str	r3, [sp, #16]
 8022518:	9700      	str	r7, [sp, #0]
 802251a:	4633      	mov	r3, r6
 802251c:	aa09      	add	r2, sp, #36	; 0x24
 802251e:	4621      	mov	r1, r4
 8022520:	4628      	mov	r0, r5
 8022522:	f000 f9d3 	bl	80228cc <_printf_common>
 8022526:	3001      	adds	r0, #1
 8022528:	f040 808a 	bne.w	8022640 <_printf_float+0x1b0>
 802252c:	f04f 30ff 	mov.w	r0, #4294967295
 8022530:	b00b      	add	sp, #44	; 0x2c
 8022532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022536:	eeb4 0b40 	vcmp.f64	d0, d0
 802253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802253e:	d709      	bvc.n	8022554 <_printf_float+0xc4>
 8022540:	ee10 3a90 	vmov	r3, s1
 8022544:	2b00      	cmp	r3, #0
 8022546:	bfbc      	itt	lt
 8022548:	232d      	movlt	r3, #45	; 0x2d
 802254a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802254e:	487e      	ldr	r0, [pc, #504]	; (8022748 <_printf_float+0x2b8>)
 8022550:	4b7e      	ldr	r3, [pc, #504]	; (802274c <_printf_float+0x2bc>)
 8022552:	e7d5      	b.n	8022500 <_printf_float+0x70>
 8022554:	6863      	ldr	r3, [r4, #4]
 8022556:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802255a:	9104      	str	r1, [sp, #16]
 802255c:	1c59      	adds	r1, r3, #1
 802255e:	d13c      	bne.n	80225da <_printf_float+0x14a>
 8022560:	2306      	movs	r3, #6
 8022562:	6063      	str	r3, [r4, #4]
 8022564:	2300      	movs	r3, #0
 8022566:	9303      	str	r3, [sp, #12]
 8022568:	ab08      	add	r3, sp, #32
 802256a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802256e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8022572:	ab07      	add	r3, sp, #28
 8022574:	6861      	ldr	r1, [r4, #4]
 8022576:	9300      	str	r3, [sp, #0]
 8022578:	6022      	str	r2, [r4, #0]
 802257a:	f10d 031b 	add.w	r3, sp, #27
 802257e:	4628      	mov	r0, r5
 8022580:	f7ff fef6 	bl	8022370 <__cvt>
 8022584:	9b04      	ldr	r3, [sp, #16]
 8022586:	9907      	ldr	r1, [sp, #28]
 8022588:	2b47      	cmp	r3, #71	; 0x47
 802258a:	4680      	mov	r8, r0
 802258c:	d108      	bne.n	80225a0 <_printf_float+0x110>
 802258e:	1cc8      	adds	r0, r1, #3
 8022590:	db02      	blt.n	8022598 <_printf_float+0x108>
 8022592:	6863      	ldr	r3, [r4, #4]
 8022594:	4299      	cmp	r1, r3
 8022596:	dd41      	ble.n	802261c <_printf_float+0x18c>
 8022598:	f1a9 0902 	sub.w	r9, r9, #2
 802259c:	fa5f f989 	uxtb.w	r9, r9
 80225a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80225a4:	d820      	bhi.n	80225e8 <_printf_float+0x158>
 80225a6:	3901      	subs	r1, #1
 80225a8:	464a      	mov	r2, r9
 80225aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80225ae:	9107      	str	r1, [sp, #28]
 80225b0:	f7ff ff30 	bl	8022414 <__exponent>
 80225b4:	9a08      	ldr	r2, [sp, #32]
 80225b6:	9004      	str	r0, [sp, #16]
 80225b8:	1813      	adds	r3, r2, r0
 80225ba:	2a01      	cmp	r2, #1
 80225bc:	6123      	str	r3, [r4, #16]
 80225be:	dc02      	bgt.n	80225c6 <_printf_float+0x136>
 80225c0:	6822      	ldr	r2, [r4, #0]
 80225c2:	07d2      	lsls	r2, r2, #31
 80225c4:	d501      	bpl.n	80225ca <_printf_float+0x13a>
 80225c6:	3301      	adds	r3, #1
 80225c8:	6123      	str	r3, [r4, #16]
 80225ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80225ce:	2b00      	cmp	r3, #0
 80225d0:	d0a2      	beq.n	8022518 <_printf_float+0x88>
 80225d2:	232d      	movs	r3, #45	; 0x2d
 80225d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80225d8:	e79e      	b.n	8022518 <_printf_float+0x88>
 80225da:	9904      	ldr	r1, [sp, #16]
 80225dc:	2947      	cmp	r1, #71	; 0x47
 80225de:	d1c1      	bne.n	8022564 <_printf_float+0xd4>
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d1bf      	bne.n	8022564 <_printf_float+0xd4>
 80225e4:	2301      	movs	r3, #1
 80225e6:	e7bc      	b.n	8022562 <_printf_float+0xd2>
 80225e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80225ec:	d118      	bne.n	8022620 <_printf_float+0x190>
 80225ee:	2900      	cmp	r1, #0
 80225f0:	6863      	ldr	r3, [r4, #4]
 80225f2:	dd0b      	ble.n	802260c <_printf_float+0x17c>
 80225f4:	6121      	str	r1, [r4, #16]
 80225f6:	b913      	cbnz	r3, 80225fe <_printf_float+0x16e>
 80225f8:	6822      	ldr	r2, [r4, #0]
 80225fa:	07d0      	lsls	r0, r2, #31
 80225fc:	d502      	bpl.n	8022604 <_printf_float+0x174>
 80225fe:	3301      	adds	r3, #1
 8022600:	440b      	add	r3, r1
 8022602:	6123      	str	r3, [r4, #16]
 8022604:	2300      	movs	r3, #0
 8022606:	65a1      	str	r1, [r4, #88]	; 0x58
 8022608:	9304      	str	r3, [sp, #16]
 802260a:	e7de      	b.n	80225ca <_printf_float+0x13a>
 802260c:	b913      	cbnz	r3, 8022614 <_printf_float+0x184>
 802260e:	6822      	ldr	r2, [r4, #0]
 8022610:	07d2      	lsls	r2, r2, #31
 8022612:	d501      	bpl.n	8022618 <_printf_float+0x188>
 8022614:	3302      	adds	r3, #2
 8022616:	e7f4      	b.n	8022602 <_printf_float+0x172>
 8022618:	2301      	movs	r3, #1
 802261a:	e7f2      	b.n	8022602 <_printf_float+0x172>
 802261c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8022620:	9b08      	ldr	r3, [sp, #32]
 8022622:	4299      	cmp	r1, r3
 8022624:	db05      	blt.n	8022632 <_printf_float+0x1a2>
 8022626:	6823      	ldr	r3, [r4, #0]
 8022628:	6121      	str	r1, [r4, #16]
 802262a:	07d8      	lsls	r0, r3, #31
 802262c:	d5ea      	bpl.n	8022604 <_printf_float+0x174>
 802262e:	1c4b      	adds	r3, r1, #1
 8022630:	e7e7      	b.n	8022602 <_printf_float+0x172>
 8022632:	2900      	cmp	r1, #0
 8022634:	bfd4      	ite	le
 8022636:	f1c1 0202 	rsble	r2, r1, #2
 802263a:	2201      	movgt	r2, #1
 802263c:	4413      	add	r3, r2
 802263e:	e7e0      	b.n	8022602 <_printf_float+0x172>
 8022640:	6823      	ldr	r3, [r4, #0]
 8022642:	055a      	lsls	r2, r3, #21
 8022644:	d407      	bmi.n	8022656 <_printf_float+0x1c6>
 8022646:	6923      	ldr	r3, [r4, #16]
 8022648:	4642      	mov	r2, r8
 802264a:	4631      	mov	r1, r6
 802264c:	4628      	mov	r0, r5
 802264e:	47b8      	blx	r7
 8022650:	3001      	adds	r0, #1
 8022652:	d12a      	bne.n	80226aa <_printf_float+0x21a>
 8022654:	e76a      	b.n	802252c <_printf_float+0x9c>
 8022656:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802265a:	f240 80e2 	bls.w	8022822 <_printf_float+0x392>
 802265e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022662:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802266a:	d133      	bne.n	80226d4 <_printf_float+0x244>
 802266c:	4a38      	ldr	r2, [pc, #224]	; (8022750 <_printf_float+0x2c0>)
 802266e:	2301      	movs	r3, #1
 8022670:	4631      	mov	r1, r6
 8022672:	4628      	mov	r0, r5
 8022674:	47b8      	blx	r7
 8022676:	3001      	adds	r0, #1
 8022678:	f43f af58 	beq.w	802252c <_printf_float+0x9c>
 802267c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022680:	429a      	cmp	r2, r3
 8022682:	db02      	blt.n	802268a <_printf_float+0x1fa>
 8022684:	6823      	ldr	r3, [r4, #0]
 8022686:	07d8      	lsls	r0, r3, #31
 8022688:	d50f      	bpl.n	80226aa <_printf_float+0x21a>
 802268a:	4653      	mov	r3, sl
 802268c:	465a      	mov	r2, fp
 802268e:	4631      	mov	r1, r6
 8022690:	4628      	mov	r0, r5
 8022692:	47b8      	blx	r7
 8022694:	3001      	adds	r0, #1
 8022696:	f43f af49 	beq.w	802252c <_printf_float+0x9c>
 802269a:	f04f 0800 	mov.w	r8, #0
 802269e:	f104 091a 	add.w	r9, r4, #26
 80226a2:	9b08      	ldr	r3, [sp, #32]
 80226a4:	3b01      	subs	r3, #1
 80226a6:	4543      	cmp	r3, r8
 80226a8:	dc09      	bgt.n	80226be <_printf_float+0x22e>
 80226aa:	6823      	ldr	r3, [r4, #0]
 80226ac:	079b      	lsls	r3, r3, #30
 80226ae:	f100 8108 	bmi.w	80228c2 <_printf_float+0x432>
 80226b2:	68e0      	ldr	r0, [r4, #12]
 80226b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226b6:	4298      	cmp	r0, r3
 80226b8:	bfb8      	it	lt
 80226ba:	4618      	movlt	r0, r3
 80226bc:	e738      	b.n	8022530 <_printf_float+0xa0>
 80226be:	2301      	movs	r3, #1
 80226c0:	464a      	mov	r2, r9
 80226c2:	4631      	mov	r1, r6
 80226c4:	4628      	mov	r0, r5
 80226c6:	47b8      	blx	r7
 80226c8:	3001      	adds	r0, #1
 80226ca:	f43f af2f 	beq.w	802252c <_printf_float+0x9c>
 80226ce:	f108 0801 	add.w	r8, r8, #1
 80226d2:	e7e6      	b.n	80226a2 <_printf_float+0x212>
 80226d4:	9b07      	ldr	r3, [sp, #28]
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	dc3c      	bgt.n	8022754 <_printf_float+0x2c4>
 80226da:	4a1d      	ldr	r2, [pc, #116]	; (8022750 <_printf_float+0x2c0>)
 80226dc:	2301      	movs	r3, #1
 80226de:	4631      	mov	r1, r6
 80226e0:	4628      	mov	r0, r5
 80226e2:	47b8      	blx	r7
 80226e4:	3001      	adds	r0, #1
 80226e6:	f43f af21 	beq.w	802252c <_printf_float+0x9c>
 80226ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80226ee:	4313      	orrs	r3, r2
 80226f0:	d102      	bne.n	80226f8 <_printf_float+0x268>
 80226f2:	6823      	ldr	r3, [r4, #0]
 80226f4:	07d9      	lsls	r1, r3, #31
 80226f6:	d5d8      	bpl.n	80226aa <_printf_float+0x21a>
 80226f8:	4653      	mov	r3, sl
 80226fa:	465a      	mov	r2, fp
 80226fc:	4631      	mov	r1, r6
 80226fe:	4628      	mov	r0, r5
 8022700:	47b8      	blx	r7
 8022702:	3001      	adds	r0, #1
 8022704:	f43f af12 	beq.w	802252c <_printf_float+0x9c>
 8022708:	f04f 0900 	mov.w	r9, #0
 802270c:	f104 0a1a 	add.w	sl, r4, #26
 8022710:	9b07      	ldr	r3, [sp, #28]
 8022712:	425b      	negs	r3, r3
 8022714:	454b      	cmp	r3, r9
 8022716:	dc01      	bgt.n	802271c <_printf_float+0x28c>
 8022718:	9b08      	ldr	r3, [sp, #32]
 802271a:	e795      	b.n	8022648 <_printf_float+0x1b8>
 802271c:	2301      	movs	r3, #1
 802271e:	4652      	mov	r2, sl
 8022720:	4631      	mov	r1, r6
 8022722:	4628      	mov	r0, r5
 8022724:	47b8      	blx	r7
 8022726:	3001      	adds	r0, #1
 8022728:	f43f af00 	beq.w	802252c <_printf_float+0x9c>
 802272c:	f109 0901 	add.w	r9, r9, #1
 8022730:	e7ee      	b.n	8022710 <_printf_float+0x280>
 8022732:	bf00      	nop
 8022734:	f3af 8000 	nop.w
 8022738:	ffffffff 	.word	0xffffffff
 802273c:	7fefffff 	.word	0x7fefffff
 8022740:	080777c8 	.word	0x080777c8
 8022744:	080777cc 	.word	0x080777cc
 8022748:	080777d4 	.word	0x080777d4
 802274c:	080777d0 	.word	0x080777d0
 8022750:	080777d8 	.word	0x080777d8
 8022754:	9a08      	ldr	r2, [sp, #32]
 8022756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022758:	429a      	cmp	r2, r3
 802275a:	bfa8      	it	ge
 802275c:	461a      	movge	r2, r3
 802275e:	2a00      	cmp	r2, #0
 8022760:	4691      	mov	r9, r2
 8022762:	dc38      	bgt.n	80227d6 <_printf_float+0x346>
 8022764:	2300      	movs	r3, #0
 8022766:	9305      	str	r3, [sp, #20]
 8022768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802276c:	f104 021a 	add.w	r2, r4, #26
 8022770:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022772:	9905      	ldr	r1, [sp, #20]
 8022774:	9304      	str	r3, [sp, #16]
 8022776:	eba3 0309 	sub.w	r3, r3, r9
 802277a:	428b      	cmp	r3, r1
 802277c:	dc33      	bgt.n	80227e6 <_printf_float+0x356>
 802277e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022782:	429a      	cmp	r2, r3
 8022784:	db3c      	blt.n	8022800 <_printf_float+0x370>
 8022786:	6823      	ldr	r3, [r4, #0]
 8022788:	07da      	lsls	r2, r3, #31
 802278a:	d439      	bmi.n	8022800 <_printf_float+0x370>
 802278c:	9a08      	ldr	r2, [sp, #32]
 802278e:	9b04      	ldr	r3, [sp, #16]
 8022790:	9907      	ldr	r1, [sp, #28]
 8022792:	1ad3      	subs	r3, r2, r3
 8022794:	eba2 0901 	sub.w	r9, r2, r1
 8022798:	4599      	cmp	r9, r3
 802279a:	bfa8      	it	ge
 802279c:	4699      	movge	r9, r3
 802279e:	f1b9 0f00 	cmp.w	r9, #0
 80227a2:	dc35      	bgt.n	8022810 <_printf_float+0x380>
 80227a4:	f04f 0800 	mov.w	r8, #0
 80227a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80227ac:	f104 0a1a 	add.w	sl, r4, #26
 80227b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80227b4:	1a9b      	subs	r3, r3, r2
 80227b6:	eba3 0309 	sub.w	r3, r3, r9
 80227ba:	4543      	cmp	r3, r8
 80227bc:	f77f af75 	ble.w	80226aa <_printf_float+0x21a>
 80227c0:	2301      	movs	r3, #1
 80227c2:	4652      	mov	r2, sl
 80227c4:	4631      	mov	r1, r6
 80227c6:	4628      	mov	r0, r5
 80227c8:	47b8      	blx	r7
 80227ca:	3001      	adds	r0, #1
 80227cc:	f43f aeae 	beq.w	802252c <_printf_float+0x9c>
 80227d0:	f108 0801 	add.w	r8, r8, #1
 80227d4:	e7ec      	b.n	80227b0 <_printf_float+0x320>
 80227d6:	4613      	mov	r3, r2
 80227d8:	4631      	mov	r1, r6
 80227da:	4642      	mov	r2, r8
 80227dc:	4628      	mov	r0, r5
 80227de:	47b8      	blx	r7
 80227e0:	3001      	adds	r0, #1
 80227e2:	d1bf      	bne.n	8022764 <_printf_float+0x2d4>
 80227e4:	e6a2      	b.n	802252c <_printf_float+0x9c>
 80227e6:	2301      	movs	r3, #1
 80227e8:	4631      	mov	r1, r6
 80227ea:	4628      	mov	r0, r5
 80227ec:	9204      	str	r2, [sp, #16]
 80227ee:	47b8      	blx	r7
 80227f0:	3001      	adds	r0, #1
 80227f2:	f43f ae9b 	beq.w	802252c <_printf_float+0x9c>
 80227f6:	9b05      	ldr	r3, [sp, #20]
 80227f8:	9a04      	ldr	r2, [sp, #16]
 80227fa:	3301      	adds	r3, #1
 80227fc:	9305      	str	r3, [sp, #20]
 80227fe:	e7b7      	b.n	8022770 <_printf_float+0x2e0>
 8022800:	4653      	mov	r3, sl
 8022802:	465a      	mov	r2, fp
 8022804:	4631      	mov	r1, r6
 8022806:	4628      	mov	r0, r5
 8022808:	47b8      	blx	r7
 802280a:	3001      	adds	r0, #1
 802280c:	d1be      	bne.n	802278c <_printf_float+0x2fc>
 802280e:	e68d      	b.n	802252c <_printf_float+0x9c>
 8022810:	9a04      	ldr	r2, [sp, #16]
 8022812:	464b      	mov	r3, r9
 8022814:	4442      	add	r2, r8
 8022816:	4631      	mov	r1, r6
 8022818:	4628      	mov	r0, r5
 802281a:	47b8      	blx	r7
 802281c:	3001      	adds	r0, #1
 802281e:	d1c1      	bne.n	80227a4 <_printf_float+0x314>
 8022820:	e684      	b.n	802252c <_printf_float+0x9c>
 8022822:	9a08      	ldr	r2, [sp, #32]
 8022824:	2a01      	cmp	r2, #1
 8022826:	dc01      	bgt.n	802282c <_printf_float+0x39c>
 8022828:	07db      	lsls	r3, r3, #31
 802282a:	d537      	bpl.n	802289c <_printf_float+0x40c>
 802282c:	2301      	movs	r3, #1
 802282e:	4642      	mov	r2, r8
 8022830:	4631      	mov	r1, r6
 8022832:	4628      	mov	r0, r5
 8022834:	47b8      	blx	r7
 8022836:	3001      	adds	r0, #1
 8022838:	f43f ae78 	beq.w	802252c <_printf_float+0x9c>
 802283c:	4653      	mov	r3, sl
 802283e:	465a      	mov	r2, fp
 8022840:	4631      	mov	r1, r6
 8022842:	4628      	mov	r0, r5
 8022844:	47b8      	blx	r7
 8022846:	3001      	adds	r0, #1
 8022848:	f43f ae70 	beq.w	802252c <_printf_float+0x9c>
 802284c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022850:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022858:	d01b      	beq.n	8022892 <_printf_float+0x402>
 802285a:	9b08      	ldr	r3, [sp, #32]
 802285c:	f108 0201 	add.w	r2, r8, #1
 8022860:	3b01      	subs	r3, #1
 8022862:	4631      	mov	r1, r6
 8022864:	4628      	mov	r0, r5
 8022866:	47b8      	blx	r7
 8022868:	3001      	adds	r0, #1
 802286a:	d10e      	bne.n	802288a <_printf_float+0x3fa>
 802286c:	e65e      	b.n	802252c <_printf_float+0x9c>
 802286e:	2301      	movs	r3, #1
 8022870:	464a      	mov	r2, r9
 8022872:	4631      	mov	r1, r6
 8022874:	4628      	mov	r0, r5
 8022876:	47b8      	blx	r7
 8022878:	3001      	adds	r0, #1
 802287a:	f43f ae57 	beq.w	802252c <_printf_float+0x9c>
 802287e:	f108 0801 	add.w	r8, r8, #1
 8022882:	9b08      	ldr	r3, [sp, #32]
 8022884:	3b01      	subs	r3, #1
 8022886:	4543      	cmp	r3, r8
 8022888:	dcf1      	bgt.n	802286e <_printf_float+0x3de>
 802288a:	9b04      	ldr	r3, [sp, #16]
 802288c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022890:	e6db      	b.n	802264a <_printf_float+0x1ba>
 8022892:	f04f 0800 	mov.w	r8, #0
 8022896:	f104 091a 	add.w	r9, r4, #26
 802289a:	e7f2      	b.n	8022882 <_printf_float+0x3f2>
 802289c:	2301      	movs	r3, #1
 802289e:	4642      	mov	r2, r8
 80228a0:	e7df      	b.n	8022862 <_printf_float+0x3d2>
 80228a2:	2301      	movs	r3, #1
 80228a4:	464a      	mov	r2, r9
 80228a6:	4631      	mov	r1, r6
 80228a8:	4628      	mov	r0, r5
 80228aa:	47b8      	blx	r7
 80228ac:	3001      	adds	r0, #1
 80228ae:	f43f ae3d 	beq.w	802252c <_printf_float+0x9c>
 80228b2:	f108 0801 	add.w	r8, r8, #1
 80228b6:	68e3      	ldr	r3, [r4, #12]
 80228b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80228ba:	1a5b      	subs	r3, r3, r1
 80228bc:	4543      	cmp	r3, r8
 80228be:	dcf0      	bgt.n	80228a2 <_printf_float+0x412>
 80228c0:	e6f7      	b.n	80226b2 <_printf_float+0x222>
 80228c2:	f04f 0800 	mov.w	r8, #0
 80228c6:	f104 0919 	add.w	r9, r4, #25
 80228ca:	e7f4      	b.n	80228b6 <_printf_float+0x426>

080228cc <_printf_common>:
 80228cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228d0:	4616      	mov	r6, r2
 80228d2:	4699      	mov	r9, r3
 80228d4:	688a      	ldr	r2, [r1, #8]
 80228d6:	690b      	ldr	r3, [r1, #16]
 80228d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80228dc:	4293      	cmp	r3, r2
 80228de:	bfb8      	it	lt
 80228e0:	4613      	movlt	r3, r2
 80228e2:	6033      	str	r3, [r6, #0]
 80228e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80228e8:	4607      	mov	r7, r0
 80228ea:	460c      	mov	r4, r1
 80228ec:	b10a      	cbz	r2, 80228f2 <_printf_common+0x26>
 80228ee:	3301      	adds	r3, #1
 80228f0:	6033      	str	r3, [r6, #0]
 80228f2:	6823      	ldr	r3, [r4, #0]
 80228f4:	0699      	lsls	r1, r3, #26
 80228f6:	bf42      	ittt	mi
 80228f8:	6833      	ldrmi	r3, [r6, #0]
 80228fa:	3302      	addmi	r3, #2
 80228fc:	6033      	strmi	r3, [r6, #0]
 80228fe:	6825      	ldr	r5, [r4, #0]
 8022900:	f015 0506 	ands.w	r5, r5, #6
 8022904:	d106      	bne.n	8022914 <_printf_common+0x48>
 8022906:	f104 0a19 	add.w	sl, r4, #25
 802290a:	68e3      	ldr	r3, [r4, #12]
 802290c:	6832      	ldr	r2, [r6, #0]
 802290e:	1a9b      	subs	r3, r3, r2
 8022910:	42ab      	cmp	r3, r5
 8022912:	dc26      	bgt.n	8022962 <_printf_common+0x96>
 8022914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022918:	1e13      	subs	r3, r2, #0
 802291a:	6822      	ldr	r2, [r4, #0]
 802291c:	bf18      	it	ne
 802291e:	2301      	movne	r3, #1
 8022920:	0692      	lsls	r2, r2, #26
 8022922:	d42b      	bmi.n	802297c <_printf_common+0xb0>
 8022924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022928:	4649      	mov	r1, r9
 802292a:	4638      	mov	r0, r7
 802292c:	47c0      	blx	r8
 802292e:	3001      	adds	r0, #1
 8022930:	d01e      	beq.n	8022970 <_printf_common+0xa4>
 8022932:	6823      	ldr	r3, [r4, #0]
 8022934:	68e5      	ldr	r5, [r4, #12]
 8022936:	6832      	ldr	r2, [r6, #0]
 8022938:	f003 0306 	and.w	r3, r3, #6
 802293c:	2b04      	cmp	r3, #4
 802293e:	bf08      	it	eq
 8022940:	1aad      	subeq	r5, r5, r2
 8022942:	68a3      	ldr	r3, [r4, #8]
 8022944:	6922      	ldr	r2, [r4, #16]
 8022946:	bf0c      	ite	eq
 8022948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802294c:	2500      	movne	r5, #0
 802294e:	4293      	cmp	r3, r2
 8022950:	bfc4      	itt	gt
 8022952:	1a9b      	subgt	r3, r3, r2
 8022954:	18ed      	addgt	r5, r5, r3
 8022956:	2600      	movs	r6, #0
 8022958:	341a      	adds	r4, #26
 802295a:	42b5      	cmp	r5, r6
 802295c:	d11a      	bne.n	8022994 <_printf_common+0xc8>
 802295e:	2000      	movs	r0, #0
 8022960:	e008      	b.n	8022974 <_printf_common+0xa8>
 8022962:	2301      	movs	r3, #1
 8022964:	4652      	mov	r2, sl
 8022966:	4649      	mov	r1, r9
 8022968:	4638      	mov	r0, r7
 802296a:	47c0      	blx	r8
 802296c:	3001      	adds	r0, #1
 802296e:	d103      	bne.n	8022978 <_printf_common+0xac>
 8022970:	f04f 30ff 	mov.w	r0, #4294967295
 8022974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022978:	3501      	adds	r5, #1
 802297a:	e7c6      	b.n	802290a <_printf_common+0x3e>
 802297c:	18e1      	adds	r1, r4, r3
 802297e:	1c5a      	adds	r2, r3, #1
 8022980:	2030      	movs	r0, #48	; 0x30
 8022982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022986:	4422      	add	r2, r4
 8022988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802298c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022990:	3302      	adds	r3, #2
 8022992:	e7c7      	b.n	8022924 <_printf_common+0x58>
 8022994:	2301      	movs	r3, #1
 8022996:	4622      	mov	r2, r4
 8022998:	4649      	mov	r1, r9
 802299a:	4638      	mov	r0, r7
 802299c:	47c0      	blx	r8
 802299e:	3001      	adds	r0, #1
 80229a0:	d0e6      	beq.n	8022970 <_printf_common+0xa4>
 80229a2:	3601      	adds	r6, #1
 80229a4:	e7d9      	b.n	802295a <_printf_common+0x8e>
	...

080229a8 <_printf_i>:
 80229a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80229ac:	460c      	mov	r4, r1
 80229ae:	4691      	mov	r9, r2
 80229b0:	7e27      	ldrb	r7, [r4, #24]
 80229b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80229b4:	2f78      	cmp	r7, #120	; 0x78
 80229b6:	4680      	mov	r8, r0
 80229b8:	469a      	mov	sl, r3
 80229ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80229be:	d807      	bhi.n	80229d0 <_printf_i+0x28>
 80229c0:	2f62      	cmp	r7, #98	; 0x62
 80229c2:	d80a      	bhi.n	80229da <_printf_i+0x32>
 80229c4:	2f00      	cmp	r7, #0
 80229c6:	f000 80d8 	beq.w	8022b7a <_printf_i+0x1d2>
 80229ca:	2f58      	cmp	r7, #88	; 0x58
 80229cc:	f000 80a3 	beq.w	8022b16 <_printf_i+0x16e>
 80229d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80229d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80229d8:	e03a      	b.n	8022a50 <_printf_i+0xa8>
 80229da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80229de:	2b15      	cmp	r3, #21
 80229e0:	d8f6      	bhi.n	80229d0 <_printf_i+0x28>
 80229e2:	a001      	add	r0, pc, #4	; (adr r0, 80229e8 <_printf_i+0x40>)
 80229e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80229e8:	08022a41 	.word	0x08022a41
 80229ec:	08022a55 	.word	0x08022a55
 80229f0:	080229d1 	.word	0x080229d1
 80229f4:	080229d1 	.word	0x080229d1
 80229f8:	080229d1 	.word	0x080229d1
 80229fc:	080229d1 	.word	0x080229d1
 8022a00:	08022a55 	.word	0x08022a55
 8022a04:	080229d1 	.word	0x080229d1
 8022a08:	080229d1 	.word	0x080229d1
 8022a0c:	080229d1 	.word	0x080229d1
 8022a10:	080229d1 	.word	0x080229d1
 8022a14:	08022b61 	.word	0x08022b61
 8022a18:	08022a85 	.word	0x08022a85
 8022a1c:	08022b43 	.word	0x08022b43
 8022a20:	080229d1 	.word	0x080229d1
 8022a24:	080229d1 	.word	0x080229d1
 8022a28:	08022b83 	.word	0x08022b83
 8022a2c:	080229d1 	.word	0x080229d1
 8022a30:	08022a85 	.word	0x08022a85
 8022a34:	080229d1 	.word	0x080229d1
 8022a38:	080229d1 	.word	0x080229d1
 8022a3c:	08022b4b 	.word	0x08022b4b
 8022a40:	680b      	ldr	r3, [r1, #0]
 8022a42:	1d1a      	adds	r2, r3, #4
 8022a44:	681b      	ldr	r3, [r3, #0]
 8022a46:	600a      	str	r2, [r1, #0]
 8022a48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022a50:	2301      	movs	r3, #1
 8022a52:	e0a3      	b.n	8022b9c <_printf_i+0x1f4>
 8022a54:	6825      	ldr	r5, [r4, #0]
 8022a56:	6808      	ldr	r0, [r1, #0]
 8022a58:	062e      	lsls	r6, r5, #24
 8022a5a:	f100 0304 	add.w	r3, r0, #4
 8022a5e:	d50a      	bpl.n	8022a76 <_printf_i+0xce>
 8022a60:	6805      	ldr	r5, [r0, #0]
 8022a62:	600b      	str	r3, [r1, #0]
 8022a64:	2d00      	cmp	r5, #0
 8022a66:	da03      	bge.n	8022a70 <_printf_i+0xc8>
 8022a68:	232d      	movs	r3, #45	; 0x2d
 8022a6a:	426d      	negs	r5, r5
 8022a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022a70:	485e      	ldr	r0, [pc, #376]	; (8022bec <_printf_i+0x244>)
 8022a72:	230a      	movs	r3, #10
 8022a74:	e019      	b.n	8022aaa <_printf_i+0x102>
 8022a76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022a7a:	6805      	ldr	r5, [r0, #0]
 8022a7c:	600b      	str	r3, [r1, #0]
 8022a7e:	bf18      	it	ne
 8022a80:	b22d      	sxthne	r5, r5
 8022a82:	e7ef      	b.n	8022a64 <_printf_i+0xbc>
 8022a84:	680b      	ldr	r3, [r1, #0]
 8022a86:	6825      	ldr	r5, [r4, #0]
 8022a88:	1d18      	adds	r0, r3, #4
 8022a8a:	6008      	str	r0, [r1, #0]
 8022a8c:	0628      	lsls	r0, r5, #24
 8022a8e:	d501      	bpl.n	8022a94 <_printf_i+0xec>
 8022a90:	681d      	ldr	r5, [r3, #0]
 8022a92:	e002      	b.n	8022a9a <_printf_i+0xf2>
 8022a94:	0669      	lsls	r1, r5, #25
 8022a96:	d5fb      	bpl.n	8022a90 <_printf_i+0xe8>
 8022a98:	881d      	ldrh	r5, [r3, #0]
 8022a9a:	4854      	ldr	r0, [pc, #336]	; (8022bec <_printf_i+0x244>)
 8022a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8022a9e:	bf0c      	ite	eq
 8022aa0:	2308      	moveq	r3, #8
 8022aa2:	230a      	movne	r3, #10
 8022aa4:	2100      	movs	r1, #0
 8022aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022aaa:	6866      	ldr	r6, [r4, #4]
 8022aac:	60a6      	str	r6, [r4, #8]
 8022aae:	2e00      	cmp	r6, #0
 8022ab0:	bfa2      	ittt	ge
 8022ab2:	6821      	ldrge	r1, [r4, #0]
 8022ab4:	f021 0104 	bicge.w	r1, r1, #4
 8022ab8:	6021      	strge	r1, [r4, #0]
 8022aba:	b90d      	cbnz	r5, 8022ac0 <_printf_i+0x118>
 8022abc:	2e00      	cmp	r6, #0
 8022abe:	d04d      	beq.n	8022b5c <_printf_i+0x1b4>
 8022ac0:	4616      	mov	r6, r2
 8022ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8022ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8022aca:	5dc7      	ldrb	r7, [r0, r7]
 8022acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022ad0:	462f      	mov	r7, r5
 8022ad2:	42bb      	cmp	r3, r7
 8022ad4:	460d      	mov	r5, r1
 8022ad6:	d9f4      	bls.n	8022ac2 <_printf_i+0x11a>
 8022ad8:	2b08      	cmp	r3, #8
 8022ada:	d10b      	bne.n	8022af4 <_printf_i+0x14c>
 8022adc:	6823      	ldr	r3, [r4, #0]
 8022ade:	07df      	lsls	r7, r3, #31
 8022ae0:	d508      	bpl.n	8022af4 <_printf_i+0x14c>
 8022ae2:	6923      	ldr	r3, [r4, #16]
 8022ae4:	6861      	ldr	r1, [r4, #4]
 8022ae6:	4299      	cmp	r1, r3
 8022ae8:	bfde      	ittt	le
 8022aea:	2330      	movle	r3, #48	; 0x30
 8022aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022af0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022af4:	1b92      	subs	r2, r2, r6
 8022af6:	6122      	str	r2, [r4, #16]
 8022af8:	f8cd a000 	str.w	sl, [sp]
 8022afc:	464b      	mov	r3, r9
 8022afe:	aa03      	add	r2, sp, #12
 8022b00:	4621      	mov	r1, r4
 8022b02:	4640      	mov	r0, r8
 8022b04:	f7ff fee2 	bl	80228cc <_printf_common>
 8022b08:	3001      	adds	r0, #1
 8022b0a:	d14c      	bne.n	8022ba6 <_printf_i+0x1fe>
 8022b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8022b10:	b004      	add	sp, #16
 8022b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b16:	4835      	ldr	r0, [pc, #212]	; (8022bec <_printf_i+0x244>)
 8022b18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022b1c:	6823      	ldr	r3, [r4, #0]
 8022b1e:	680e      	ldr	r6, [r1, #0]
 8022b20:	061f      	lsls	r7, r3, #24
 8022b22:	f856 5b04 	ldr.w	r5, [r6], #4
 8022b26:	600e      	str	r6, [r1, #0]
 8022b28:	d514      	bpl.n	8022b54 <_printf_i+0x1ac>
 8022b2a:	07d9      	lsls	r1, r3, #31
 8022b2c:	bf44      	itt	mi
 8022b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8022b32:	6023      	strmi	r3, [r4, #0]
 8022b34:	b91d      	cbnz	r5, 8022b3e <_printf_i+0x196>
 8022b36:	6823      	ldr	r3, [r4, #0]
 8022b38:	f023 0320 	bic.w	r3, r3, #32
 8022b3c:	6023      	str	r3, [r4, #0]
 8022b3e:	2310      	movs	r3, #16
 8022b40:	e7b0      	b.n	8022aa4 <_printf_i+0xfc>
 8022b42:	6823      	ldr	r3, [r4, #0]
 8022b44:	f043 0320 	orr.w	r3, r3, #32
 8022b48:	6023      	str	r3, [r4, #0]
 8022b4a:	2378      	movs	r3, #120	; 0x78
 8022b4c:	4828      	ldr	r0, [pc, #160]	; (8022bf0 <_printf_i+0x248>)
 8022b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022b52:	e7e3      	b.n	8022b1c <_printf_i+0x174>
 8022b54:	065e      	lsls	r6, r3, #25
 8022b56:	bf48      	it	mi
 8022b58:	b2ad      	uxthmi	r5, r5
 8022b5a:	e7e6      	b.n	8022b2a <_printf_i+0x182>
 8022b5c:	4616      	mov	r6, r2
 8022b5e:	e7bb      	b.n	8022ad8 <_printf_i+0x130>
 8022b60:	680b      	ldr	r3, [r1, #0]
 8022b62:	6826      	ldr	r6, [r4, #0]
 8022b64:	6960      	ldr	r0, [r4, #20]
 8022b66:	1d1d      	adds	r5, r3, #4
 8022b68:	600d      	str	r5, [r1, #0]
 8022b6a:	0635      	lsls	r5, r6, #24
 8022b6c:	681b      	ldr	r3, [r3, #0]
 8022b6e:	d501      	bpl.n	8022b74 <_printf_i+0x1cc>
 8022b70:	6018      	str	r0, [r3, #0]
 8022b72:	e002      	b.n	8022b7a <_printf_i+0x1d2>
 8022b74:	0671      	lsls	r1, r6, #25
 8022b76:	d5fb      	bpl.n	8022b70 <_printf_i+0x1c8>
 8022b78:	8018      	strh	r0, [r3, #0]
 8022b7a:	2300      	movs	r3, #0
 8022b7c:	6123      	str	r3, [r4, #16]
 8022b7e:	4616      	mov	r6, r2
 8022b80:	e7ba      	b.n	8022af8 <_printf_i+0x150>
 8022b82:	680b      	ldr	r3, [r1, #0]
 8022b84:	1d1a      	adds	r2, r3, #4
 8022b86:	600a      	str	r2, [r1, #0]
 8022b88:	681e      	ldr	r6, [r3, #0]
 8022b8a:	6862      	ldr	r2, [r4, #4]
 8022b8c:	2100      	movs	r1, #0
 8022b8e:	4630      	mov	r0, r6
 8022b90:	f7dd fbbe 	bl	8000310 <memchr>
 8022b94:	b108      	cbz	r0, 8022b9a <_printf_i+0x1f2>
 8022b96:	1b80      	subs	r0, r0, r6
 8022b98:	6060      	str	r0, [r4, #4]
 8022b9a:	6863      	ldr	r3, [r4, #4]
 8022b9c:	6123      	str	r3, [r4, #16]
 8022b9e:	2300      	movs	r3, #0
 8022ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022ba4:	e7a8      	b.n	8022af8 <_printf_i+0x150>
 8022ba6:	6923      	ldr	r3, [r4, #16]
 8022ba8:	4632      	mov	r2, r6
 8022baa:	4649      	mov	r1, r9
 8022bac:	4640      	mov	r0, r8
 8022bae:	47d0      	blx	sl
 8022bb0:	3001      	adds	r0, #1
 8022bb2:	d0ab      	beq.n	8022b0c <_printf_i+0x164>
 8022bb4:	6823      	ldr	r3, [r4, #0]
 8022bb6:	079b      	lsls	r3, r3, #30
 8022bb8:	d413      	bmi.n	8022be2 <_printf_i+0x23a>
 8022bba:	68e0      	ldr	r0, [r4, #12]
 8022bbc:	9b03      	ldr	r3, [sp, #12]
 8022bbe:	4298      	cmp	r0, r3
 8022bc0:	bfb8      	it	lt
 8022bc2:	4618      	movlt	r0, r3
 8022bc4:	e7a4      	b.n	8022b10 <_printf_i+0x168>
 8022bc6:	2301      	movs	r3, #1
 8022bc8:	4632      	mov	r2, r6
 8022bca:	4649      	mov	r1, r9
 8022bcc:	4640      	mov	r0, r8
 8022bce:	47d0      	blx	sl
 8022bd0:	3001      	adds	r0, #1
 8022bd2:	d09b      	beq.n	8022b0c <_printf_i+0x164>
 8022bd4:	3501      	adds	r5, #1
 8022bd6:	68e3      	ldr	r3, [r4, #12]
 8022bd8:	9903      	ldr	r1, [sp, #12]
 8022bda:	1a5b      	subs	r3, r3, r1
 8022bdc:	42ab      	cmp	r3, r5
 8022bde:	dcf2      	bgt.n	8022bc6 <_printf_i+0x21e>
 8022be0:	e7eb      	b.n	8022bba <_printf_i+0x212>
 8022be2:	2500      	movs	r5, #0
 8022be4:	f104 0619 	add.w	r6, r4, #25
 8022be8:	e7f5      	b.n	8022bd6 <_printf_i+0x22e>
 8022bea:	bf00      	nop
 8022bec:	080777da 	.word	0x080777da
 8022bf0:	080777eb 	.word	0x080777eb

08022bf4 <swapfunc>:
 8022bf4:	2b02      	cmp	r3, #2
 8022bf6:	b510      	push	{r4, lr}
 8022bf8:	d00a      	beq.n	8022c10 <swapfunc+0x1c>
 8022bfa:	0892      	lsrs	r2, r2, #2
 8022bfc:	3a01      	subs	r2, #1
 8022bfe:	6803      	ldr	r3, [r0, #0]
 8022c00:	680c      	ldr	r4, [r1, #0]
 8022c02:	f840 4b04 	str.w	r4, [r0], #4
 8022c06:	2a00      	cmp	r2, #0
 8022c08:	f841 3b04 	str.w	r3, [r1], #4
 8022c0c:	dcf6      	bgt.n	8022bfc <swapfunc+0x8>
 8022c0e:	bd10      	pop	{r4, pc}
 8022c10:	4402      	add	r2, r0
 8022c12:	780c      	ldrb	r4, [r1, #0]
 8022c14:	7803      	ldrb	r3, [r0, #0]
 8022c16:	f800 4b01 	strb.w	r4, [r0], #1
 8022c1a:	f801 3b01 	strb.w	r3, [r1], #1
 8022c1e:	1a13      	subs	r3, r2, r0
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	dcf6      	bgt.n	8022c12 <swapfunc+0x1e>
 8022c24:	e7f3      	b.n	8022c0e <swapfunc+0x1a>

08022c26 <med3.isra.0>:
 8022c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c28:	460f      	mov	r7, r1
 8022c2a:	4614      	mov	r4, r2
 8022c2c:	4606      	mov	r6, r0
 8022c2e:	461d      	mov	r5, r3
 8022c30:	4798      	blx	r3
 8022c32:	2800      	cmp	r0, #0
 8022c34:	4621      	mov	r1, r4
 8022c36:	4638      	mov	r0, r7
 8022c38:	da0c      	bge.n	8022c54 <med3.isra.0+0x2e>
 8022c3a:	47a8      	blx	r5
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	da02      	bge.n	8022c46 <med3.isra.0+0x20>
 8022c40:	463c      	mov	r4, r7
 8022c42:	4620      	mov	r0, r4
 8022c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c46:	4621      	mov	r1, r4
 8022c48:	4630      	mov	r0, r6
 8022c4a:	47a8      	blx	r5
 8022c4c:	2800      	cmp	r0, #0
 8022c4e:	dbf8      	blt.n	8022c42 <med3.isra.0+0x1c>
 8022c50:	4634      	mov	r4, r6
 8022c52:	e7f6      	b.n	8022c42 <med3.isra.0+0x1c>
 8022c54:	47a8      	blx	r5
 8022c56:	2800      	cmp	r0, #0
 8022c58:	dcf2      	bgt.n	8022c40 <med3.isra.0+0x1a>
 8022c5a:	4621      	mov	r1, r4
 8022c5c:	4630      	mov	r0, r6
 8022c5e:	47a8      	blx	r5
 8022c60:	2800      	cmp	r0, #0
 8022c62:	daee      	bge.n	8022c42 <med3.isra.0+0x1c>
 8022c64:	e7f4      	b.n	8022c50 <med3.isra.0+0x2a>

08022c66 <qsort>:
 8022c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c6a:	469a      	mov	sl, r3
 8022c6c:	ea40 0302 	orr.w	r3, r0, r2
 8022c70:	079b      	lsls	r3, r3, #30
 8022c72:	b097      	sub	sp, #92	; 0x5c
 8022c74:	4606      	mov	r6, r0
 8022c76:	4614      	mov	r4, r2
 8022c78:	d11a      	bne.n	8022cb0 <qsort+0x4a>
 8022c7a:	f1b2 0804 	subs.w	r8, r2, #4
 8022c7e:	bf18      	it	ne
 8022c80:	f04f 0801 	movne.w	r8, #1
 8022c84:	2300      	movs	r3, #0
 8022c86:	9302      	str	r3, [sp, #8]
 8022c88:	1933      	adds	r3, r6, r4
 8022c8a:	fb04 f701 	mul.w	r7, r4, r1
 8022c8e:	9301      	str	r3, [sp, #4]
 8022c90:	2906      	cmp	r1, #6
 8022c92:	eb06 0307 	add.w	r3, r6, r7
 8022c96:	9303      	str	r3, [sp, #12]
 8022c98:	d82a      	bhi.n	8022cf0 <qsort+0x8a>
 8022c9a:	9b01      	ldr	r3, [sp, #4]
 8022c9c:	9a03      	ldr	r2, [sp, #12]
 8022c9e:	4293      	cmp	r3, r2
 8022ca0:	d310      	bcc.n	8022cc4 <qsort+0x5e>
 8022ca2:	9b02      	ldr	r3, [sp, #8]
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	f040 811f 	bne.w	8022ee8 <qsort+0x282>
 8022caa:	b017      	add	sp, #92	; 0x5c
 8022cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cb0:	f04f 0802 	mov.w	r8, #2
 8022cb4:	e7e6      	b.n	8022c84 <qsort+0x1e>
 8022cb6:	4643      	mov	r3, r8
 8022cb8:	4622      	mov	r2, r4
 8022cba:	4639      	mov	r1, r7
 8022cbc:	4628      	mov	r0, r5
 8022cbe:	f7ff ff99 	bl	8022bf4 <swapfunc>
 8022cc2:	e00e      	b.n	8022ce2 <qsort+0x7c>
 8022cc4:	9d01      	ldr	r5, [sp, #4]
 8022cc6:	e00d      	b.n	8022ce4 <qsort+0x7e>
 8022cc8:	1b2f      	subs	r7, r5, r4
 8022cca:	4629      	mov	r1, r5
 8022ccc:	4638      	mov	r0, r7
 8022cce:	47d0      	blx	sl
 8022cd0:	2800      	cmp	r0, #0
 8022cd2:	dd09      	ble.n	8022ce8 <qsort+0x82>
 8022cd4:	f1b8 0f00 	cmp.w	r8, #0
 8022cd8:	d1ed      	bne.n	8022cb6 <qsort+0x50>
 8022cda:	682b      	ldr	r3, [r5, #0]
 8022cdc:	683a      	ldr	r2, [r7, #0]
 8022cde:	602a      	str	r2, [r5, #0]
 8022ce0:	603b      	str	r3, [r7, #0]
 8022ce2:	463d      	mov	r5, r7
 8022ce4:	42ae      	cmp	r6, r5
 8022ce6:	d3ef      	bcc.n	8022cc8 <qsort+0x62>
 8022ce8:	9b01      	ldr	r3, [sp, #4]
 8022cea:	4423      	add	r3, r4
 8022cec:	9301      	str	r3, [sp, #4]
 8022cee:	e7d4      	b.n	8022c9a <qsort+0x34>
 8022cf0:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8022cf4:	1b3f      	subs	r7, r7, r4
 8022cf6:	2907      	cmp	r1, #7
 8022cf8:	fb04 6909 	mla	r9, r4, r9, r6
 8022cfc:	4437      	add	r7, r6
 8022cfe:	d022      	beq.n	8022d46 <qsort+0xe0>
 8022d00:	2928      	cmp	r1, #40	; 0x28
 8022d02:	d945      	bls.n	8022d90 <qsort+0x12a>
 8022d04:	08c9      	lsrs	r1, r1, #3
 8022d06:	fb04 f501 	mul.w	r5, r4, r1
 8022d0a:	4653      	mov	r3, sl
 8022d0c:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8022d10:	1971      	adds	r1, r6, r5
 8022d12:	4630      	mov	r0, r6
 8022d14:	f7ff ff87 	bl	8022c26 <med3.isra.0>
 8022d18:	4649      	mov	r1, r9
 8022d1a:	eb09 0205 	add.w	r2, r9, r5
 8022d1e:	4653      	mov	r3, sl
 8022d20:	4683      	mov	fp, r0
 8022d22:	1b48      	subs	r0, r1, r5
 8022d24:	f7ff ff7f 	bl	8022c26 <med3.isra.0>
 8022d28:	463a      	mov	r2, r7
 8022d2a:	4681      	mov	r9, r0
 8022d2c:	4653      	mov	r3, sl
 8022d2e:	1b79      	subs	r1, r7, r5
 8022d30:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8022d34:	f7ff ff77 	bl	8022c26 <med3.isra.0>
 8022d38:	4602      	mov	r2, r0
 8022d3a:	4649      	mov	r1, r9
 8022d3c:	4653      	mov	r3, sl
 8022d3e:	4658      	mov	r0, fp
 8022d40:	f7ff ff71 	bl	8022c26 <med3.isra.0>
 8022d44:	4681      	mov	r9, r0
 8022d46:	f1b8 0f00 	cmp.w	r8, #0
 8022d4a:	d124      	bne.n	8022d96 <qsort+0x130>
 8022d4c:	6833      	ldr	r3, [r6, #0]
 8022d4e:	f8d9 2000 	ldr.w	r2, [r9]
 8022d52:	6032      	str	r2, [r6, #0]
 8022d54:	f8c9 3000 	str.w	r3, [r9]
 8022d58:	eb06 0b04 	add.w	fp, r6, r4
 8022d5c:	46b9      	mov	r9, r7
 8022d5e:	465d      	mov	r5, fp
 8022d60:	2300      	movs	r3, #0
 8022d62:	45bb      	cmp	fp, r7
 8022d64:	d835      	bhi.n	8022dd2 <qsort+0x16c>
 8022d66:	4631      	mov	r1, r6
 8022d68:	4658      	mov	r0, fp
 8022d6a:	9304      	str	r3, [sp, #16]
 8022d6c:	47d0      	blx	sl
 8022d6e:	2800      	cmp	r0, #0
 8022d70:	9b04      	ldr	r3, [sp, #16]
 8022d72:	dc3e      	bgt.n	8022df2 <qsort+0x18c>
 8022d74:	d10a      	bne.n	8022d8c <qsort+0x126>
 8022d76:	f1b8 0f00 	cmp.w	r8, #0
 8022d7a:	d113      	bne.n	8022da4 <qsort+0x13e>
 8022d7c:	682b      	ldr	r3, [r5, #0]
 8022d7e:	f8db 2000 	ldr.w	r2, [fp]
 8022d82:	602a      	str	r2, [r5, #0]
 8022d84:	f8cb 3000 	str.w	r3, [fp]
 8022d88:	4425      	add	r5, r4
 8022d8a:	2301      	movs	r3, #1
 8022d8c:	44a3      	add	fp, r4
 8022d8e:	e7e8      	b.n	8022d62 <qsort+0xfc>
 8022d90:	463a      	mov	r2, r7
 8022d92:	46b3      	mov	fp, r6
 8022d94:	e7d1      	b.n	8022d3a <qsort+0xd4>
 8022d96:	4643      	mov	r3, r8
 8022d98:	4622      	mov	r2, r4
 8022d9a:	4649      	mov	r1, r9
 8022d9c:	4630      	mov	r0, r6
 8022d9e:	f7ff ff29 	bl	8022bf4 <swapfunc>
 8022da2:	e7d9      	b.n	8022d58 <qsort+0xf2>
 8022da4:	4643      	mov	r3, r8
 8022da6:	4622      	mov	r2, r4
 8022da8:	4659      	mov	r1, fp
 8022daa:	4628      	mov	r0, r5
 8022dac:	f7ff ff22 	bl	8022bf4 <swapfunc>
 8022db0:	e7ea      	b.n	8022d88 <qsort+0x122>
 8022db2:	d10b      	bne.n	8022dcc <qsort+0x166>
 8022db4:	f1b8 0f00 	cmp.w	r8, #0
 8022db8:	d114      	bne.n	8022de4 <qsort+0x17e>
 8022dba:	683b      	ldr	r3, [r7, #0]
 8022dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8022dc0:	603a      	str	r2, [r7, #0]
 8022dc2:	f8c9 3000 	str.w	r3, [r9]
 8022dc6:	eba9 0904 	sub.w	r9, r9, r4
 8022dca:	2301      	movs	r3, #1
 8022dcc:	9f04      	ldr	r7, [sp, #16]
 8022dce:	45bb      	cmp	fp, r7
 8022dd0:	d90f      	bls.n	8022df2 <qsort+0x18c>
 8022dd2:	2b00      	cmp	r3, #0
 8022dd4:	d143      	bne.n	8022e5e <qsort+0x1f8>
 8022dd6:	9b01      	ldr	r3, [sp, #4]
 8022dd8:	9a03      	ldr	r2, [sp, #12]
 8022dda:	4293      	cmp	r3, r2
 8022ddc:	f4bf af61 	bcs.w	8022ca2 <qsort+0x3c>
 8022de0:	9d01      	ldr	r5, [sp, #4]
 8022de2:	e036      	b.n	8022e52 <qsort+0x1ec>
 8022de4:	4643      	mov	r3, r8
 8022de6:	4622      	mov	r2, r4
 8022de8:	4649      	mov	r1, r9
 8022dea:	4638      	mov	r0, r7
 8022dec:	f7ff ff02 	bl	8022bf4 <swapfunc>
 8022df0:	e7e9      	b.n	8022dc6 <qsort+0x160>
 8022df2:	4631      	mov	r1, r6
 8022df4:	4638      	mov	r0, r7
 8022df6:	9305      	str	r3, [sp, #20]
 8022df8:	47d0      	blx	sl
 8022dfa:	1b3b      	subs	r3, r7, r4
 8022dfc:	2800      	cmp	r0, #0
 8022dfe:	9304      	str	r3, [sp, #16]
 8022e00:	9b05      	ldr	r3, [sp, #20]
 8022e02:	dad6      	bge.n	8022db2 <qsort+0x14c>
 8022e04:	f1b8 0f00 	cmp.w	r8, #0
 8022e08:	d006      	beq.n	8022e18 <qsort+0x1b2>
 8022e0a:	4643      	mov	r3, r8
 8022e0c:	4622      	mov	r2, r4
 8022e0e:	4639      	mov	r1, r7
 8022e10:	4658      	mov	r0, fp
 8022e12:	f7ff feef 	bl	8022bf4 <swapfunc>
 8022e16:	e005      	b.n	8022e24 <qsort+0x1be>
 8022e18:	f8db 3000 	ldr.w	r3, [fp]
 8022e1c:	683a      	ldr	r2, [r7, #0]
 8022e1e:	f8cb 2000 	str.w	r2, [fp]
 8022e22:	603b      	str	r3, [r7, #0]
 8022e24:	9f04      	ldr	r7, [sp, #16]
 8022e26:	e7b0      	b.n	8022d8a <qsort+0x124>
 8022e28:	4643      	mov	r3, r8
 8022e2a:	4622      	mov	r2, r4
 8022e2c:	4639      	mov	r1, r7
 8022e2e:	4628      	mov	r0, r5
 8022e30:	f7ff fee0 	bl	8022bf4 <swapfunc>
 8022e34:	e00c      	b.n	8022e50 <qsort+0x1ea>
 8022e36:	1b2f      	subs	r7, r5, r4
 8022e38:	4629      	mov	r1, r5
 8022e3a:	4638      	mov	r0, r7
 8022e3c:	47d0      	blx	sl
 8022e3e:	2800      	cmp	r0, #0
 8022e40:	dd09      	ble.n	8022e56 <qsort+0x1f0>
 8022e42:	f1b8 0f00 	cmp.w	r8, #0
 8022e46:	d1ef      	bne.n	8022e28 <qsort+0x1c2>
 8022e48:	682b      	ldr	r3, [r5, #0]
 8022e4a:	683a      	ldr	r2, [r7, #0]
 8022e4c:	602a      	str	r2, [r5, #0]
 8022e4e:	603b      	str	r3, [r7, #0]
 8022e50:	463d      	mov	r5, r7
 8022e52:	42ae      	cmp	r6, r5
 8022e54:	d3ef      	bcc.n	8022e36 <qsort+0x1d0>
 8022e56:	9b01      	ldr	r3, [sp, #4]
 8022e58:	4423      	add	r3, r4
 8022e5a:	9301      	str	r3, [sp, #4]
 8022e5c:	e7bb      	b.n	8022dd6 <qsort+0x170>
 8022e5e:	ebab 0305 	sub.w	r3, fp, r5
 8022e62:	1baa      	subs	r2, r5, r6
 8022e64:	429a      	cmp	r2, r3
 8022e66:	bfa8      	it	ge
 8022e68:	461a      	movge	r2, r3
 8022e6a:	9301      	str	r3, [sp, #4]
 8022e6c:	b12a      	cbz	r2, 8022e7a <qsort+0x214>
 8022e6e:	4643      	mov	r3, r8
 8022e70:	ebab 0102 	sub.w	r1, fp, r2
 8022e74:	4630      	mov	r0, r6
 8022e76:	f7ff febd 	bl	8022bf4 <swapfunc>
 8022e7a:	9b03      	ldr	r3, [sp, #12]
 8022e7c:	eba3 0209 	sub.w	r2, r3, r9
 8022e80:	eba9 0707 	sub.w	r7, r9, r7
 8022e84:	1b12      	subs	r2, r2, r4
 8022e86:	42ba      	cmp	r2, r7
 8022e88:	bf28      	it	cs
 8022e8a:	463a      	movcs	r2, r7
 8022e8c:	b12a      	cbz	r2, 8022e9a <qsort+0x234>
 8022e8e:	9903      	ldr	r1, [sp, #12]
 8022e90:	4643      	mov	r3, r8
 8022e92:	1a89      	subs	r1, r1, r2
 8022e94:	4658      	mov	r0, fp
 8022e96:	f7ff fead 	bl	8022bf4 <swapfunc>
 8022e9a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8022e9e:	9b03      	ldr	r3, [sp, #12]
 8022ea0:	454f      	cmp	r7, r9
 8022ea2:	eba3 0007 	sub.w	r0, r3, r7
 8022ea6:	d904      	bls.n	8022eb2 <qsort+0x24c>
 8022ea8:	4633      	mov	r3, r6
 8022eaa:	46b9      	mov	r9, r7
 8022eac:	9f01      	ldr	r7, [sp, #4]
 8022eae:	4606      	mov	r6, r0
 8022eb0:	4618      	mov	r0, r3
 8022eb2:	42a7      	cmp	r7, r4
 8022eb4:	d921      	bls.n	8022efa <qsort+0x294>
 8022eb6:	fbb7 f1f4 	udiv	r1, r7, r4
 8022eba:	9b02      	ldr	r3, [sp, #8]
 8022ebc:	2b07      	cmp	r3, #7
 8022ebe:	d80d      	bhi.n	8022edc <qsort+0x276>
 8022ec0:	fbb9 f7f4 	udiv	r7, r9, r4
 8022ec4:	aa16      	add	r2, sp, #88	; 0x58
 8022ec6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022eca:	f843 6c40 	str.w	r6, [r3, #-64]
 8022ece:	f843 7c3c 	str.w	r7, [r3, #-60]
 8022ed2:	9b02      	ldr	r3, [sp, #8]
 8022ed4:	3301      	adds	r3, #1
 8022ed6:	9302      	str	r3, [sp, #8]
 8022ed8:	4606      	mov	r6, r0
 8022eda:	e6d5      	b.n	8022c88 <qsort+0x22>
 8022edc:	4653      	mov	r3, sl
 8022ede:	4622      	mov	r2, r4
 8022ee0:	f7ff fec1 	bl	8022c66 <qsort>
 8022ee4:	45a1      	cmp	r9, r4
 8022ee6:	d80b      	bhi.n	8022f00 <qsort+0x29a>
 8022ee8:	9b02      	ldr	r3, [sp, #8]
 8022eea:	aa16      	add	r2, sp, #88	; 0x58
 8022eec:	3b01      	subs	r3, #1
 8022eee:	9302      	str	r3, [sp, #8]
 8022ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022ef4:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8022ef8:	e7ee      	b.n	8022ed8 <qsort+0x272>
 8022efa:	45a1      	cmp	r9, r4
 8022efc:	f67f aed1 	bls.w	8022ca2 <qsort+0x3c>
 8022f00:	fbb9 f1f4 	udiv	r1, r9, r4
 8022f04:	4630      	mov	r0, r6
 8022f06:	e7e7      	b.n	8022ed8 <qsort+0x272>

08022f08 <_sbrk_r>:
 8022f08:	b538      	push	{r3, r4, r5, lr}
 8022f0a:	4d06      	ldr	r5, [pc, #24]	; (8022f24 <_sbrk_r+0x1c>)
 8022f0c:	2300      	movs	r3, #0
 8022f0e:	4604      	mov	r4, r0
 8022f10:	4608      	mov	r0, r1
 8022f12:	602b      	str	r3, [r5, #0]
 8022f14:	f002 fb9a 	bl	802564c <_sbrk>
 8022f18:	1c43      	adds	r3, r0, #1
 8022f1a:	d102      	bne.n	8022f22 <_sbrk_r+0x1a>
 8022f1c:	682b      	ldr	r3, [r5, #0]
 8022f1e:	b103      	cbz	r3, 8022f22 <_sbrk_r+0x1a>
 8022f20:	6023      	str	r3, [r4, #0]
 8022f22:	bd38      	pop	{r3, r4, r5, pc}
 8022f24:	3000fa70 	.word	0x3000fa70

08022f28 <sniprintf>:
 8022f28:	b40c      	push	{r2, r3}
 8022f2a:	b530      	push	{r4, r5, lr}
 8022f2c:	4b17      	ldr	r3, [pc, #92]	; (8022f8c <sniprintf+0x64>)
 8022f2e:	1e0c      	subs	r4, r1, #0
 8022f30:	681d      	ldr	r5, [r3, #0]
 8022f32:	b09d      	sub	sp, #116	; 0x74
 8022f34:	da08      	bge.n	8022f48 <sniprintf+0x20>
 8022f36:	238b      	movs	r3, #139	; 0x8b
 8022f38:	602b      	str	r3, [r5, #0]
 8022f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8022f3e:	b01d      	add	sp, #116	; 0x74
 8022f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022f44:	b002      	add	sp, #8
 8022f46:	4770      	bx	lr
 8022f48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022f4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022f50:	bf14      	ite	ne
 8022f52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022f56:	4623      	moveq	r3, r4
 8022f58:	9304      	str	r3, [sp, #16]
 8022f5a:	9307      	str	r3, [sp, #28]
 8022f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022f60:	9002      	str	r0, [sp, #8]
 8022f62:	9006      	str	r0, [sp, #24]
 8022f64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022f68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022f6a:	ab21      	add	r3, sp, #132	; 0x84
 8022f6c:	a902      	add	r1, sp, #8
 8022f6e:	4628      	mov	r0, r5
 8022f70:	9301      	str	r3, [sp, #4]
 8022f72:	f001 fa69 	bl	8024448 <_svfiprintf_r>
 8022f76:	1c43      	adds	r3, r0, #1
 8022f78:	bfbc      	itt	lt
 8022f7a:	238b      	movlt	r3, #139	; 0x8b
 8022f7c:	602b      	strlt	r3, [r5, #0]
 8022f7e:	2c00      	cmp	r4, #0
 8022f80:	d0dd      	beq.n	8022f3e <sniprintf+0x16>
 8022f82:	9b02      	ldr	r3, [sp, #8]
 8022f84:	2200      	movs	r2, #0
 8022f86:	701a      	strb	r2, [r3, #0]
 8022f88:	e7d9      	b.n	8022f3e <sniprintf+0x16>
 8022f8a:	bf00      	nop
 8022f8c:	24001b64 	.word	0x24001b64

08022f90 <siprintf>:
 8022f90:	b40e      	push	{r1, r2, r3}
 8022f92:	b500      	push	{lr}
 8022f94:	b09c      	sub	sp, #112	; 0x70
 8022f96:	ab1d      	add	r3, sp, #116	; 0x74
 8022f98:	9002      	str	r0, [sp, #8]
 8022f9a:	9006      	str	r0, [sp, #24]
 8022f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022fa0:	4809      	ldr	r0, [pc, #36]	; (8022fc8 <siprintf+0x38>)
 8022fa2:	9107      	str	r1, [sp, #28]
 8022fa4:	9104      	str	r1, [sp, #16]
 8022fa6:	4909      	ldr	r1, [pc, #36]	; (8022fcc <siprintf+0x3c>)
 8022fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8022fac:	9105      	str	r1, [sp, #20]
 8022fae:	6800      	ldr	r0, [r0, #0]
 8022fb0:	9301      	str	r3, [sp, #4]
 8022fb2:	a902      	add	r1, sp, #8
 8022fb4:	f001 fa48 	bl	8024448 <_svfiprintf_r>
 8022fb8:	9b02      	ldr	r3, [sp, #8]
 8022fba:	2200      	movs	r2, #0
 8022fbc:	701a      	strb	r2, [r3, #0]
 8022fbe:	b01c      	add	sp, #112	; 0x70
 8022fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022fc4:	b003      	add	sp, #12
 8022fc6:	4770      	bx	lr
 8022fc8:	24001b64 	.word	0x24001b64
 8022fcc:	ffff0208 	.word	0xffff0208

08022fd0 <stpcpy>:
 8022fd0:	4603      	mov	r3, r0
 8022fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022fd6:	4618      	mov	r0, r3
 8022fd8:	f803 2b01 	strb.w	r2, [r3], #1
 8022fdc:	2a00      	cmp	r2, #0
 8022fde:	d1f8      	bne.n	8022fd2 <stpcpy+0x2>
 8022fe0:	4770      	bx	lr

08022fe2 <strcpy>:
 8022fe2:	4603      	mov	r3, r0
 8022fe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022fe8:	f803 2b01 	strb.w	r2, [r3], #1
 8022fec:	2a00      	cmp	r2, #0
 8022fee:	d1f9      	bne.n	8022fe4 <strcpy+0x2>
 8022ff0:	4770      	bx	lr

08022ff2 <quorem>:
 8022ff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ff6:	6903      	ldr	r3, [r0, #16]
 8022ff8:	690c      	ldr	r4, [r1, #16]
 8022ffa:	42a3      	cmp	r3, r4
 8022ffc:	4607      	mov	r7, r0
 8022ffe:	f2c0 8081 	blt.w	8023104 <quorem+0x112>
 8023002:	3c01      	subs	r4, #1
 8023004:	f101 0814 	add.w	r8, r1, #20
 8023008:	f100 0514 	add.w	r5, r0, #20
 802300c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023010:	9301      	str	r3, [sp, #4]
 8023012:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8023016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802301a:	3301      	adds	r3, #1
 802301c:	429a      	cmp	r2, r3
 802301e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023022:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023026:	fbb2 f6f3 	udiv	r6, r2, r3
 802302a:	d331      	bcc.n	8023090 <quorem+0x9e>
 802302c:	f04f 0e00 	mov.w	lr, #0
 8023030:	4640      	mov	r0, r8
 8023032:	46ac      	mov	ip, r5
 8023034:	46f2      	mov	sl, lr
 8023036:	f850 2b04 	ldr.w	r2, [r0], #4
 802303a:	b293      	uxth	r3, r2
 802303c:	fb06 e303 	mla	r3, r6, r3, lr
 8023040:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8023044:	b29b      	uxth	r3, r3
 8023046:	ebaa 0303 	sub.w	r3, sl, r3
 802304a:	0c12      	lsrs	r2, r2, #16
 802304c:	f8dc a000 	ldr.w	sl, [ip]
 8023050:	fb06 e202 	mla	r2, r6, r2, lr
 8023054:	fa13 f38a 	uxtah	r3, r3, sl
 8023058:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802305c:	fa1f fa82 	uxth.w	sl, r2
 8023060:	f8dc 2000 	ldr.w	r2, [ip]
 8023064:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8023068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802306c:	b29b      	uxth	r3, r3
 802306e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023072:	4581      	cmp	r9, r0
 8023074:	f84c 3b04 	str.w	r3, [ip], #4
 8023078:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802307c:	d2db      	bcs.n	8023036 <quorem+0x44>
 802307e:	f855 300b 	ldr.w	r3, [r5, fp]
 8023082:	b92b      	cbnz	r3, 8023090 <quorem+0x9e>
 8023084:	9b01      	ldr	r3, [sp, #4]
 8023086:	3b04      	subs	r3, #4
 8023088:	429d      	cmp	r5, r3
 802308a:	461a      	mov	r2, r3
 802308c:	d32e      	bcc.n	80230ec <quorem+0xfa>
 802308e:	613c      	str	r4, [r7, #16]
 8023090:	4638      	mov	r0, r7
 8023092:	f001 f849 	bl	8024128 <__mcmp>
 8023096:	2800      	cmp	r0, #0
 8023098:	db24      	blt.n	80230e4 <quorem+0xf2>
 802309a:	3601      	adds	r6, #1
 802309c:	4628      	mov	r0, r5
 802309e:	f04f 0c00 	mov.w	ip, #0
 80230a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80230a6:	f8d0 e000 	ldr.w	lr, [r0]
 80230aa:	b293      	uxth	r3, r2
 80230ac:	ebac 0303 	sub.w	r3, ip, r3
 80230b0:	0c12      	lsrs	r2, r2, #16
 80230b2:	fa13 f38e 	uxtah	r3, r3, lr
 80230b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80230ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80230be:	b29b      	uxth	r3, r3
 80230c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80230c4:	45c1      	cmp	r9, r8
 80230c6:	f840 3b04 	str.w	r3, [r0], #4
 80230ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80230ce:	d2e8      	bcs.n	80230a2 <quorem+0xb0>
 80230d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80230d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80230d8:	b922      	cbnz	r2, 80230e4 <quorem+0xf2>
 80230da:	3b04      	subs	r3, #4
 80230dc:	429d      	cmp	r5, r3
 80230de:	461a      	mov	r2, r3
 80230e0:	d30a      	bcc.n	80230f8 <quorem+0x106>
 80230e2:	613c      	str	r4, [r7, #16]
 80230e4:	4630      	mov	r0, r6
 80230e6:	b003      	add	sp, #12
 80230e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ec:	6812      	ldr	r2, [r2, #0]
 80230ee:	3b04      	subs	r3, #4
 80230f0:	2a00      	cmp	r2, #0
 80230f2:	d1cc      	bne.n	802308e <quorem+0x9c>
 80230f4:	3c01      	subs	r4, #1
 80230f6:	e7c7      	b.n	8023088 <quorem+0x96>
 80230f8:	6812      	ldr	r2, [r2, #0]
 80230fa:	3b04      	subs	r3, #4
 80230fc:	2a00      	cmp	r2, #0
 80230fe:	d1f0      	bne.n	80230e2 <quorem+0xf0>
 8023100:	3c01      	subs	r4, #1
 8023102:	e7eb      	b.n	80230dc <quorem+0xea>
 8023104:	2000      	movs	r0, #0
 8023106:	e7ee      	b.n	80230e6 <quorem+0xf4>

08023108 <_dtoa_r>:
 8023108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802310c:	ec59 8b10 	vmov	r8, r9, d0
 8023110:	b095      	sub	sp, #84	; 0x54
 8023112:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023114:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8023116:	9107      	str	r1, [sp, #28]
 8023118:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802311c:	4606      	mov	r6, r0
 802311e:	9209      	str	r2, [sp, #36]	; 0x24
 8023120:	9310      	str	r3, [sp, #64]	; 0x40
 8023122:	b975      	cbnz	r5, 8023142 <_dtoa_r+0x3a>
 8023124:	2010      	movs	r0, #16
 8023126:	f7ff f839 	bl	802219c <malloc>
 802312a:	4602      	mov	r2, r0
 802312c:	6270      	str	r0, [r6, #36]	; 0x24
 802312e:	b920      	cbnz	r0, 802313a <_dtoa_r+0x32>
 8023130:	4bab      	ldr	r3, [pc, #684]	; (80233e0 <_dtoa_r+0x2d8>)
 8023132:	21ea      	movs	r1, #234	; 0xea
 8023134:	48ab      	ldr	r0, [pc, #684]	; (80233e4 <_dtoa_r+0x2dc>)
 8023136:	f001 fa87 	bl	8024648 <__assert_func>
 802313a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802313e:	6005      	str	r5, [r0, #0]
 8023140:	60c5      	str	r5, [r0, #12]
 8023142:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023144:	6819      	ldr	r1, [r3, #0]
 8023146:	b151      	cbz	r1, 802315e <_dtoa_r+0x56>
 8023148:	685a      	ldr	r2, [r3, #4]
 802314a:	604a      	str	r2, [r1, #4]
 802314c:	2301      	movs	r3, #1
 802314e:	4093      	lsls	r3, r2
 8023150:	608b      	str	r3, [r1, #8]
 8023152:	4630      	mov	r0, r6
 8023154:	f000 fdaa 	bl	8023cac <_Bfree>
 8023158:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802315a:	2200      	movs	r2, #0
 802315c:	601a      	str	r2, [r3, #0]
 802315e:	f1b9 0300 	subs.w	r3, r9, #0
 8023162:	bfbb      	ittet	lt
 8023164:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8023168:	9303      	strlt	r3, [sp, #12]
 802316a:	2300      	movge	r3, #0
 802316c:	2201      	movlt	r2, #1
 802316e:	bfac      	ite	ge
 8023170:	6023      	strge	r3, [r4, #0]
 8023172:	6022      	strlt	r2, [r4, #0]
 8023174:	4b9c      	ldr	r3, [pc, #624]	; (80233e8 <_dtoa_r+0x2e0>)
 8023176:	9c03      	ldr	r4, [sp, #12]
 8023178:	43a3      	bics	r3, r4
 802317a:	d11a      	bne.n	80231b2 <_dtoa_r+0xaa>
 802317c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802317e:	f242 730f 	movw	r3, #9999	; 0x270f
 8023182:	6013      	str	r3, [r2, #0]
 8023184:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8023188:	ea53 0308 	orrs.w	r3, r3, r8
 802318c:	f000 8512 	beq.w	8023bb4 <_dtoa_r+0xaac>
 8023190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023192:	b953      	cbnz	r3, 80231aa <_dtoa_r+0xa2>
 8023194:	4b95      	ldr	r3, [pc, #596]	; (80233ec <_dtoa_r+0x2e4>)
 8023196:	e01f      	b.n	80231d8 <_dtoa_r+0xd0>
 8023198:	4b95      	ldr	r3, [pc, #596]	; (80233f0 <_dtoa_r+0x2e8>)
 802319a:	9300      	str	r3, [sp, #0]
 802319c:	3308      	adds	r3, #8
 802319e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80231a0:	6013      	str	r3, [r2, #0]
 80231a2:	9800      	ldr	r0, [sp, #0]
 80231a4:	b015      	add	sp, #84	; 0x54
 80231a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231aa:	4b90      	ldr	r3, [pc, #576]	; (80233ec <_dtoa_r+0x2e4>)
 80231ac:	9300      	str	r3, [sp, #0]
 80231ae:	3303      	adds	r3, #3
 80231b0:	e7f5      	b.n	802319e <_dtoa_r+0x96>
 80231b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80231b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80231ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80231c2:	d10b      	bne.n	80231dc <_dtoa_r+0xd4>
 80231c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80231c6:	2301      	movs	r3, #1
 80231c8:	6013      	str	r3, [r2, #0]
 80231ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	f000 84ee 	beq.w	8023bae <_dtoa_r+0xaa6>
 80231d2:	4888      	ldr	r0, [pc, #544]	; (80233f4 <_dtoa_r+0x2ec>)
 80231d4:	6018      	str	r0, [r3, #0]
 80231d6:	1e43      	subs	r3, r0, #1
 80231d8:	9300      	str	r3, [sp, #0]
 80231da:	e7e2      	b.n	80231a2 <_dtoa_r+0x9a>
 80231dc:	a913      	add	r1, sp, #76	; 0x4c
 80231de:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80231e2:	aa12      	add	r2, sp, #72	; 0x48
 80231e4:	4630      	mov	r0, r6
 80231e6:	f001 f843 	bl	8024270 <__d2b>
 80231ea:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80231ee:	4605      	mov	r5, r0
 80231f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80231f2:	2900      	cmp	r1, #0
 80231f4:	d047      	beq.n	8023286 <_dtoa_r+0x17e>
 80231f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80231f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80231fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023200:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8023204:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023208:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802320c:	2400      	movs	r4, #0
 802320e:	ec43 2b16 	vmov	d6, r2, r3
 8023212:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8023216:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80233c8 <_dtoa_r+0x2c0>
 802321a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802321e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80233d0 <_dtoa_r+0x2c8>
 8023222:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023226:	eeb0 7b46 	vmov.f64	d7, d6
 802322a:	ee06 1a90 	vmov	s13, r1
 802322e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8023232:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80233d8 <_dtoa_r+0x2d0>
 8023236:	eea5 7b06 	vfma.f64	d7, d5, d6
 802323a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802323e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023246:	ee16 ba90 	vmov	fp, s13
 802324a:	9411      	str	r4, [sp, #68]	; 0x44
 802324c:	d508      	bpl.n	8023260 <_dtoa_r+0x158>
 802324e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023252:	eeb4 6b47 	vcmp.f64	d6, d7
 8023256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802325a:	bf18      	it	ne
 802325c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8023260:	f1bb 0f16 	cmp.w	fp, #22
 8023264:	d832      	bhi.n	80232cc <_dtoa_r+0x1c4>
 8023266:	4b64      	ldr	r3, [pc, #400]	; (80233f8 <_dtoa_r+0x2f0>)
 8023268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802326c:	ed93 7b00 	vldr	d7, [r3]
 8023270:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8023274:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802327c:	d501      	bpl.n	8023282 <_dtoa_r+0x17a>
 802327e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023282:	2300      	movs	r3, #0
 8023284:	e023      	b.n	80232ce <_dtoa_r+0x1c6>
 8023286:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023288:	4401      	add	r1, r0
 802328a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802328e:	2b20      	cmp	r3, #32
 8023290:	bfc3      	ittte	gt
 8023292:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8023296:	fa04 f303 	lslgt.w	r3, r4, r3
 802329a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802329e:	f1c3 0320 	rsble	r3, r3, #32
 80232a2:	bfc6      	itte	gt
 80232a4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80232a8:	ea43 0308 	orrgt.w	r3, r3, r8
 80232ac:	fa08 f303 	lslle.w	r3, r8, r3
 80232b0:	ee07 3a90 	vmov	s15, r3
 80232b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80232b8:	3901      	subs	r1, #1
 80232ba:	ed8d 7b00 	vstr	d7, [sp]
 80232be:	9c01      	ldr	r4, [sp, #4]
 80232c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80232c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80232c8:	2401      	movs	r4, #1
 80232ca:	e7a0      	b.n	802320e <_dtoa_r+0x106>
 80232cc:	2301      	movs	r3, #1
 80232ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80232d0:	1a43      	subs	r3, r0, r1
 80232d2:	1e5a      	subs	r2, r3, #1
 80232d4:	bf45      	ittet	mi
 80232d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80232da:	9305      	strmi	r3, [sp, #20]
 80232dc:	2300      	movpl	r3, #0
 80232de:	2300      	movmi	r3, #0
 80232e0:	9206      	str	r2, [sp, #24]
 80232e2:	bf54      	ite	pl
 80232e4:	9305      	strpl	r3, [sp, #20]
 80232e6:	9306      	strmi	r3, [sp, #24]
 80232e8:	f1bb 0f00 	cmp.w	fp, #0
 80232ec:	db18      	blt.n	8023320 <_dtoa_r+0x218>
 80232ee:	9b06      	ldr	r3, [sp, #24]
 80232f0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80232f4:	445b      	add	r3, fp
 80232f6:	9306      	str	r3, [sp, #24]
 80232f8:	2300      	movs	r3, #0
 80232fa:	9a07      	ldr	r2, [sp, #28]
 80232fc:	2a09      	cmp	r2, #9
 80232fe:	d849      	bhi.n	8023394 <_dtoa_r+0x28c>
 8023300:	2a05      	cmp	r2, #5
 8023302:	bfc4      	itt	gt
 8023304:	3a04      	subgt	r2, #4
 8023306:	9207      	strgt	r2, [sp, #28]
 8023308:	9a07      	ldr	r2, [sp, #28]
 802330a:	f1a2 0202 	sub.w	r2, r2, #2
 802330e:	bfcc      	ite	gt
 8023310:	2400      	movgt	r4, #0
 8023312:	2401      	movle	r4, #1
 8023314:	2a03      	cmp	r2, #3
 8023316:	d848      	bhi.n	80233aa <_dtoa_r+0x2a2>
 8023318:	e8df f002 	tbb	[pc, r2]
 802331c:	3a2c2e0b 	.word	0x3a2c2e0b
 8023320:	9b05      	ldr	r3, [sp, #20]
 8023322:	2200      	movs	r2, #0
 8023324:	eba3 030b 	sub.w	r3, r3, fp
 8023328:	9305      	str	r3, [sp, #20]
 802332a:	920e      	str	r2, [sp, #56]	; 0x38
 802332c:	f1cb 0300 	rsb	r3, fp, #0
 8023330:	e7e3      	b.n	80232fa <_dtoa_r+0x1f2>
 8023332:	2200      	movs	r2, #0
 8023334:	9208      	str	r2, [sp, #32]
 8023336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023338:	2a00      	cmp	r2, #0
 802333a:	dc39      	bgt.n	80233b0 <_dtoa_r+0x2a8>
 802333c:	f04f 0a01 	mov.w	sl, #1
 8023340:	46d1      	mov	r9, sl
 8023342:	4652      	mov	r2, sl
 8023344:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8023348:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802334a:	2100      	movs	r1, #0
 802334c:	6079      	str	r1, [r7, #4]
 802334e:	2004      	movs	r0, #4
 8023350:	f100 0c14 	add.w	ip, r0, #20
 8023354:	4594      	cmp	ip, r2
 8023356:	6879      	ldr	r1, [r7, #4]
 8023358:	d92f      	bls.n	80233ba <_dtoa_r+0x2b2>
 802335a:	4630      	mov	r0, r6
 802335c:	930c      	str	r3, [sp, #48]	; 0x30
 802335e:	f000 fc65 	bl	8023c2c <_Balloc>
 8023362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023364:	9000      	str	r0, [sp, #0]
 8023366:	4602      	mov	r2, r0
 8023368:	2800      	cmp	r0, #0
 802336a:	d149      	bne.n	8023400 <_dtoa_r+0x2f8>
 802336c:	4b23      	ldr	r3, [pc, #140]	; (80233fc <_dtoa_r+0x2f4>)
 802336e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8023372:	e6df      	b.n	8023134 <_dtoa_r+0x2c>
 8023374:	2201      	movs	r2, #1
 8023376:	e7dd      	b.n	8023334 <_dtoa_r+0x22c>
 8023378:	2200      	movs	r2, #0
 802337a:	9208      	str	r2, [sp, #32]
 802337c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802337e:	eb0b 0a02 	add.w	sl, fp, r2
 8023382:	f10a 0901 	add.w	r9, sl, #1
 8023386:	464a      	mov	r2, r9
 8023388:	2a01      	cmp	r2, #1
 802338a:	bfb8      	it	lt
 802338c:	2201      	movlt	r2, #1
 802338e:	e7db      	b.n	8023348 <_dtoa_r+0x240>
 8023390:	2201      	movs	r2, #1
 8023392:	e7f2      	b.n	802337a <_dtoa_r+0x272>
 8023394:	2401      	movs	r4, #1
 8023396:	2200      	movs	r2, #0
 8023398:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802339c:	f04f 3aff 	mov.w	sl, #4294967295
 80233a0:	2100      	movs	r1, #0
 80233a2:	46d1      	mov	r9, sl
 80233a4:	2212      	movs	r2, #18
 80233a6:	9109      	str	r1, [sp, #36]	; 0x24
 80233a8:	e7ce      	b.n	8023348 <_dtoa_r+0x240>
 80233aa:	2201      	movs	r2, #1
 80233ac:	9208      	str	r2, [sp, #32]
 80233ae:	e7f5      	b.n	802339c <_dtoa_r+0x294>
 80233b0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80233b4:	46d1      	mov	r9, sl
 80233b6:	4652      	mov	r2, sl
 80233b8:	e7c6      	b.n	8023348 <_dtoa_r+0x240>
 80233ba:	3101      	adds	r1, #1
 80233bc:	6079      	str	r1, [r7, #4]
 80233be:	0040      	lsls	r0, r0, #1
 80233c0:	e7c6      	b.n	8023350 <_dtoa_r+0x248>
 80233c2:	bf00      	nop
 80233c4:	f3af 8000 	nop.w
 80233c8:	636f4361 	.word	0x636f4361
 80233cc:	3fd287a7 	.word	0x3fd287a7
 80233d0:	8b60c8b3 	.word	0x8b60c8b3
 80233d4:	3fc68a28 	.word	0x3fc68a28
 80233d8:	509f79fb 	.word	0x509f79fb
 80233dc:	3fd34413 	.word	0x3fd34413
 80233e0:	08077809 	.word	0x08077809
 80233e4:	08077820 	.word	0x08077820
 80233e8:	7ff00000 	.word	0x7ff00000
 80233ec:	08077805 	.word	0x08077805
 80233f0:	080777fc 	.word	0x080777fc
 80233f4:	080777d9 	.word	0x080777d9
 80233f8:	08077918 	.word	0x08077918
 80233fc:	0807787f 	.word	0x0807787f
 8023400:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8023402:	9900      	ldr	r1, [sp, #0]
 8023404:	6011      	str	r1, [r2, #0]
 8023406:	f1b9 0f0e 	cmp.w	r9, #14
 802340a:	d872      	bhi.n	80234f2 <_dtoa_r+0x3ea>
 802340c:	2c00      	cmp	r4, #0
 802340e:	d070      	beq.n	80234f2 <_dtoa_r+0x3ea>
 8023410:	f1bb 0f00 	cmp.w	fp, #0
 8023414:	f340 80a6 	ble.w	8023564 <_dtoa_r+0x45c>
 8023418:	49ca      	ldr	r1, [pc, #808]	; (8023744 <_dtoa_r+0x63c>)
 802341a:	f00b 020f 	and.w	r2, fp, #15
 802341e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8023422:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8023426:	ed92 7b00 	vldr	d7, [r2]
 802342a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802342e:	f000 808d 	beq.w	802354c <_dtoa_r+0x444>
 8023432:	4ac5      	ldr	r2, [pc, #788]	; (8023748 <_dtoa_r+0x640>)
 8023434:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8023438:	ed92 6b08 	vldr	d6, [r2, #32]
 802343c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8023440:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023444:	f001 010f 	and.w	r1, r1, #15
 8023448:	2203      	movs	r2, #3
 802344a:	48bf      	ldr	r0, [pc, #764]	; (8023748 <_dtoa_r+0x640>)
 802344c:	2900      	cmp	r1, #0
 802344e:	d17f      	bne.n	8023550 <_dtoa_r+0x448>
 8023450:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023454:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023458:	ed8d 7b02 	vstr	d7, [sp, #8]
 802345c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802345e:	2900      	cmp	r1, #0
 8023460:	f000 80b2 	beq.w	80235c8 <_dtoa_r+0x4c0>
 8023464:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8023468:	ed9d 7b02 	vldr	d7, [sp, #8]
 802346c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023474:	f140 80a8 	bpl.w	80235c8 <_dtoa_r+0x4c0>
 8023478:	f1b9 0f00 	cmp.w	r9, #0
 802347c:	f000 80a4 	beq.w	80235c8 <_dtoa_r+0x4c0>
 8023480:	f1ba 0f00 	cmp.w	sl, #0
 8023484:	dd31      	ble.n	80234ea <_dtoa_r+0x3e2>
 8023486:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802348a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802348e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023492:	f10b 37ff 	add.w	r7, fp, #4294967295
 8023496:	3201      	adds	r2, #1
 8023498:	4650      	mov	r0, sl
 802349a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802349e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80234a2:	ee07 2a90 	vmov	s15, r2
 80234a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80234aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80234ae:	ed8d 5b02 	vstr	d5, [sp, #8]
 80234b2:	9c03      	ldr	r4, [sp, #12]
 80234b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80234b8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80234bc:	2800      	cmp	r0, #0
 80234be:	f040 8086 	bne.w	80235ce <_dtoa_r+0x4c6>
 80234c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80234c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80234ca:	ec42 1b17 	vmov	d7, r1, r2
 80234ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80234d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234d6:	f300 8272 	bgt.w	80239be <_dtoa_r+0x8b6>
 80234da:	eeb1 7b47 	vneg.f64	d7, d7
 80234de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80234e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234e6:	f100 8267 	bmi.w	80239b8 <_dtoa_r+0x8b0>
 80234ea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80234ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80234f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80234f4:	2a00      	cmp	r2, #0
 80234f6:	f2c0 8129 	blt.w	802374c <_dtoa_r+0x644>
 80234fa:	f1bb 0f0e 	cmp.w	fp, #14
 80234fe:	f300 8125 	bgt.w	802374c <_dtoa_r+0x644>
 8023502:	4b90      	ldr	r3, [pc, #576]	; (8023744 <_dtoa_r+0x63c>)
 8023504:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023508:	ed93 6b00 	vldr	d6, [r3]
 802350c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802350e:	2b00      	cmp	r3, #0
 8023510:	f280 80c3 	bge.w	802369a <_dtoa_r+0x592>
 8023514:	f1b9 0f00 	cmp.w	r9, #0
 8023518:	f300 80bf 	bgt.w	802369a <_dtoa_r+0x592>
 802351c:	f040 824c 	bne.w	80239b8 <_dtoa_r+0x8b0>
 8023520:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8023524:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023528:	ed9d 7b02 	vldr	d7, [sp, #8]
 802352c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023534:	464c      	mov	r4, r9
 8023536:	464f      	mov	r7, r9
 8023538:	f280 8222 	bge.w	8023980 <_dtoa_r+0x878>
 802353c:	f8dd 8000 	ldr.w	r8, [sp]
 8023540:	2331      	movs	r3, #49	; 0x31
 8023542:	f808 3b01 	strb.w	r3, [r8], #1
 8023546:	f10b 0b01 	add.w	fp, fp, #1
 802354a:	e21e      	b.n	802398a <_dtoa_r+0x882>
 802354c:	2202      	movs	r2, #2
 802354e:	e77c      	b.n	802344a <_dtoa_r+0x342>
 8023550:	07cc      	lsls	r4, r1, #31
 8023552:	d504      	bpl.n	802355e <_dtoa_r+0x456>
 8023554:	ed90 6b00 	vldr	d6, [r0]
 8023558:	3201      	adds	r2, #1
 802355a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802355e:	1049      	asrs	r1, r1, #1
 8023560:	3008      	adds	r0, #8
 8023562:	e773      	b.n	802344c <_dtoa_r+0x344>
 8023564:	d02e      	beq.n	80235c4 <_dtoa_r+0x4bc>
 8023566:	f1cb 0100 	rsb	r1, fp, #0
 802356a:	4a76      	ldr	r2, [pc, #472]	; (8023744 <_dtoa_r+0x63c>)
 802356c:	f001 000f 	and.w	r0, r1, #15
 8023570:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023574:	ed92 7b00 	vldr	d7, [r2]
 8023578:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802357c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023580:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8023584:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8023588:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802358c:	486e      	ldr	r0, [pc, #440]	; (8023748 <_dtoa_r+0x640>)
 802358e:	1109      	asrs	r1, r1, #4
 8023590:	2400      	movs	r4, #0
 8023592:	2202      	movs	r2, #2
 8023594:	b939      	cbnz	r1, 80235a6 <_dtoa_r+0x49e>
 8023596:	2c00      	cmp	r4, #0
 8023598:	f43f af60 	beq.w	802345c <_dtoa_r+0x354>
 802359c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80235a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80235a4:	e75a      	b.n	802345c <_dtoa_r+0x354>
 80235a6:	07cf      	lsls	r7, r1, #31
 80235a8:	d509      	bpl.n	80235be <_dtoa_r+0x4b6>
 80235aa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80235ae:	ed90 7b00 	vldr	d7, [r0]
 80235b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80235b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80235ba:	3201      	adds	r2, #1
 80235bc:	2401      	movs	r4, #1
 80235be:	1049      	asrs	r1, r1, #1
 80235c0:	3008      	adds	r0, #8
 80235c2:	e7e7      	b.n	8023594 <_dtoa_r+0x48c>
 80235c4:	2202      	movs	r2, #2
 80235c6:	e749      	b.n	802345c <_dtoa_r+0x354>
 80235c8:	465f      	mov	r7, fp
 80235ca:	4648      	mov	r0, r9
 80235cc:	e765      	b.n	802349a <_dtoa_r+0x392>
 80235ce:	ec42 1b17 	vmov	d7, r1, r2
 80235d2:	4a5c      	ldr	r2, [pc, #368]	; (8023744 <_dtoa_r+0x63c>)
 80235d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80235d8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80235dc:	9a00      	ldr	r2, [sp, #0]
 80235de:	1814      	adds	r4, r2, r0
 80235e0:	9a08      	ldr	r2, [sp, #32]
 80235e2:	b352      	cbz	r2, 802363a <_dtoa_r+0x532>
 80235e4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80235e8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80235ec:	f8dd 8000 	ldr.w	r8, [sp]
 80235f0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80235f4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80235f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80235fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023600:	ee14 2a90 	vmov	r2, s9
 8023604:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023608:	3230      	adds	r2, #48	; 0x30
 802360a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802360e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023616:	f808 2b01 	strb.w	r2, [r8], #1
 802361a:	d439      	bmi.n	8023690 <_dtoa_r+0x588>
 802361c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8023620:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8023624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023628:	d472      	bmi.n	8023710 <_dtoa_r+0x608>
 802362a:	45a0      	cmp	r8, r4
 802362c:	f43f af5d 	beq.w	80234ea <_dtoa_r+0x3e2>
 8023630:	ee27 7b03 	vmul.f64	d7, d7, d3
 8023634:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023638:	e7e0      	b.n	80235fc <_dtoa_r+0x4f4>
 802363a:	f8dd 8000 	ldr.w	r8, [sp]
 802363e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023642:	4621      	mov	r1, r4
 8023644:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8023648:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802364c:	ee14 2a90 	vmov	r2, s9
 8023650:	3230      	adds	r2, #48	; 0x30
 8023652:	f808 2b01 	strb.w	r2, [r8], #1
 8023656:	45a0      	cmp	r8, r4
 8023658:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802365c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023660:	d118      	bne.n	8023694 <_dtoa_r+0x58c>
 8023662:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8023666:	ee37 4b05 	vadd.f64	d4, d7, d5
 802366a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023672:	dc4d      	bgt.n	8023710 <_dtoa_r+0x608>
 8023674:	ee35 7b47 	vsub.f64	d7, d5, d7
 8023678:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802367c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023680:	f57f af33 	bpl.w	80234ea <_dtoa_r+0x3e2>
 8023684:	4688      	mov	r8, r1
 8023686:	3901      	subs	r1, #1
 8023688:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802368c:	2b30      	cmp	r3, #48	; 0x30
 802368e:	d0f9      	beq.n	8023684 <_dtoa_r+0x57c>
 8023690:	46bb      	mov	fp, r7
 8023692:	e02a      	b.n	80236ea <_dtoa_r+0x5e2>
 8023694:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023698:	e7d6      	b.n	8023648 <_dtoa_r+0x540>
 802369a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802369e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80236a2:	f8dd 8000 	ldr.w	r8, [sp]
 80236a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80236aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80236ae:	ee15 3a10 	vmov	r3, s10
 80236b2:	3330      	adds	r3, #48	; 0x30
 80236b4:	f808 3b01 	strb.w	r3, [r8], #1
 80236b8:	9b00      	ldr	r3, [sp, #0]
 80236ba:	eba8 0303 	sub.w	r3, r8, r3
 80236be:	4599      	cmp	r9, r3
 80236c0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80236c4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80236c8:	d133      	bne.n	8023732 <_dtoa_r+0x62a>
 80236ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80236ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80236d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236d6:	dc1a      	bgt.n	802370e <_dtoa_r+0x606>
 80236d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80236dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236e0:	d103      	bne.n	80236ea <_dtoa_r+0x5e2>
 80236e2:	ee15 3a10 	vmov	r3, s10
 80236e6:	07d9      	lsls	r1, r3, #31
 80236e8:	d411      	bmi.n	802370e <_dtoa_r+0x606>
 80236ea:	4629      	mov	r1, r5
 80236ec:	4630      	mov	r0, r6
 80236ee:	f000 fadd 	bl	8023cac <_Bfree>
 80236f2:	2300      	movs	r3, #0
 80236f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236f6:	f888 3000 	strb.w	r3, [r8]
 80236fa:	f10b 0301 	add.w	r3, fp, #1
 80236fe:	6013      	str	r3, [r2, #0]
 8023700:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023702:	2b00      	cmp	r3, #0
 8023704:	f43f ad4d 	beq.w	80231a2 <_dtoa_r+0x9a>
 8023708:	f8c3 8000 	str.w	r8, [r3]
 802370c:	e549      	b.n	80231a2 <_dtoa_r+0x9a>
 802370e:	465f      	mov	r7, fp
 8023710:	4643      	mov	r3, r8
 8023712:	4698      	mov	r8, r3
 8023714:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023718:	2a39      	cmp	r2, #57	; 0x39
 802371a:	d106      	bne.n	802372a <_dtoa_r+0x622>
 802371c:	9a00      	ldr	r2, [sp, #0]
 802371e:	429a      	cmp	r2, r3
 8023720:	d1f7      	bne.n	8023712 <_dtoa_r+0x60a>
 8023722:	9900      	ldr	r1, [sp, #0]
 8023724:	2230      	movs	r2, #48	; 0x30
 8023726:	3701      	adds	r7, #1
 8023728:	700a      	strb	r2, [r1, #0]
 802372a:	781a      	ldrb	r2, [r3, #0]
 802372c:	3201      	adds	r2, #1
 802372e:	701a      	strb	r2, [r3, #0]
 8023730:	e7ae      	b.n	8023690 <_dtoa_r+0x588>
 8023732:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023736:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802373e:	d1b2      	bne.n	80236a6 <_dtoa_r+0x59e>
 8023740:	e7d3      	b.n	80236ea <_dtoa_r+0x5e2>
 8023742:	bf00      	nop
 8023744:	08077918 	.word	0x08077918
 8023748:	080778f0 	.word	0x080778f0
 802374c:	9908      	ldr	r1, [sp, #32]
 802374e:	2900      	cmp	r1, #0
 8023750:	f000 80d1 	beq.w	80238f6 <_dtoa_r+0x7ee>
 8023754:	9907      	ldr	r1, [sp, #28]
 8023756:	2901      	cmp	r1, #1
 8023758:	f300 80b4 	bgt.w	80238c4 <_dtoa_r+0x7bc>
 802375c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802375e:	2900      	cmp	r1, #0
 8023760:	f000 80ac 	beq.w	80238bc <_dtoa_r+0x7b4>
 8023764:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023768:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802376c:	461c      	mov	r4, r3
 802376e:	930a      	str	r3, [sp, #40]	; 0x28
 8023770:	9b05      	ldr	r3, [sp, #20]
 8023772:	4413      	add	r3, r2
 8023774:	9305      	str	r3, [sp, #20]
 8023776:	9b06      	ldr	r3, [sp, #24]
 8023778:	2101      	movs	r1, #1
 802377a:	4413      	add	r3, r2
 802377c:	4630      	mov	r0, r6
 802377e:	9306      	str	r3, [sp, #24]
 8023780:	f000 fb50 	bl	8023e24 <__i2b>
 8023784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023786:	4607      	mov	r7, r0
 8023788:	f1b8 0f00 	cmp.w	r8, #0
 802378c:	dd0d      	ble.n	80237aa <_dtoa_r+0x6a2>
 802378e:	9a06      	ldr	r2, [sp, #24]
 8023790:	2a00      	cmp	r2, #0
 8023792:	dd0a      	ble.n	80237aa <_dtoa_r+0x6a2>
 8023794:	4542      	cmp	r2, r8
 8023796:	9905      	ldr	r1, [sp, #20]
 8023798:	bfa8      	it	ge
 802379a:	4642      	movge	r2, r8
 802379c:	1a89      	subs	r1, r1, r2
 802379e:	9105      	str	r1, [sp, #20]
 80237a0:	9906      	ldr	r1, [sp, #24]
 80237a2:	eba8 0802 	sub.w	r8, r8, r2
 80237a6:	1a8a      	subs	r2, r1, r2
 80237a8:	9206      	str	r2, [sp, #24]
 80237aa:	b303      	cbz	r3, 80237ee <_dtoa_r+0x6e6>
 80237ac:	9a08      	ldr	r2, [sp, #32]
 80237ae:	2a00      	cmp	r2, #0
 80237b0:	f000 80a6 	beq.w	8023900 <_dtoa_r+0x7f8>
 80237b4:	2c00      	cmp	r4, #0
 80237b6:	dd13      	ble.n	80237e0 <_dtoa_r+0x6d8>
 80237b8:	4639      	mov	r1, r7
 80237ba:	4622      	mov	r2, r4
 80237bc:	4630      	mov	r0, r6
 80237be:	930c      	str	r3, [sp, #48]	; 0x30
 80237c0:	f000 fbec 	bl	8023f9c <__pow5mult>
 80237c4:	462a      	mov	r2, r5
 80237c6:	4601      	mov	r1, r0
 80237c8:	4607      	mov	r7, r0
 80237ca:	4630      	mov	r0, r6
 80237cc:	f000 fb40 	bl	8023e50 <__multiply>
 80237d0:	4629      	mov	r1, r5
 80237d2:	900a      	str	r0, [sp, #40]	; 0x28
 80237d4:	4630      	mov	r0, r6
 80237d6:	f000 fa69 	bl	8023cac <_Bfree>
 80237da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80237dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80237de:	4615      	mov	r5, r2
 80237e0:	1b1a      	subs	r2, r3, r4
 80237e2:	d004      	beq.n	80237ee <_dtoa_r+0x6e6>
 80237e4:	4629      	mov	r1, r5
 80237e6:	4630      	mov	r0, r6
 80237e8:	f000 fbd8 	bl	8023f9c <__pow5mult>
 80237ec:	4605      	mov	r5, r0
 80237ee:	2101      	movs	r1, #1
 80237f0:	4630      	mov	r0, r6
 80237f2:	f000 fb17 	bl	8023e24 <__i2b>
 80237f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	4604      	mov	r4, r0
 80237fc:	f340 8082 	ble.w	8023904 <_dtoa_r+0x7fc>
 8023800:	461a      	mov	r2, r3
 8023802:	4601      	mov	r1, r0
 8023804:	4630      	mov	r0, r6
 8023806:	f000 fbc9 	bl	8023f9c <__pow5mult>
 802380a:	9b07      	ldr	r3, [sp, #28]
 802380c:	2b01      	cmp	r3, #1
 802380e:	4604      	mov	r4, r0
 8023810:	dd7b      	ble.n	802390a <_dtoa_r+0x802>
 8023812:	2300      	movs	r3, #0
 8023814:	930a      	str	r3, [sp, #40]	; 0x28
 8023816:	6922      	ldr	r2, [r4, #16]
 8023818:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802381c:	6910      	ldr	r0, [r2, #16]
 802381e:	f000 fab1 	bl	8023d84 <__hi0bits>
 8023822:	f1c0 0020 	rsb	r0, r0, #32
 8023826:	9b06      	ldr	r3, [sp, #24]
 8023828:	4418      	add	r0, r3
 802382a:	f010 001f 	ands.w	r0, r0, #31
 802382e:	f000 808d 	beq.w	802394c <_dtoa_r+0x844>
 8023832:	f1c0 0220 	rsb	r2, r0, #32
 8023836:	2a04      	cmp	r2, #4
 8023838:	f340 8086 	ble.w	8023948 <_dtoa_r+0x840>
 802383c:	f1c0 001c 	rsb	r0, r0, #28
 8023840:	9b05      	ldr	r3, [sp, #20]
 8023842:	4403      	add	r3, r0
 8023844:	9305      	str	r3, [sp, #20]
 8023846:	9b06      	ldr	r3, [sp, #24]
 8023848:	4403      	add	r3, r0
 802384a:	4480      	add	r8, r0
 802384c:	9306      	str	r3, [sp, #24]
 802384e:	9b05      	ldr	r3, [sp, #20]
 8023850:	2b00      	cmp	r3, #0
 8023852:	dd05      	ble.n	8023860 <_dtoa_r+0x758>
 8023854:	4629      	mov	r1, r5
 8023856:	461a      	mov	r2, r3
 8023858:	4630      	mov	r0, r6
 802385a:	f000 fbf9 	bl	8024050 <__lshift>
 802385e:	4605      	mov	r5, r0
 8023860:	9b06      	ldr	r3, [sp, #24]
 8023862:	2b00      	cmp	r3, #0
 8023864:	dd05      	ble.n	8023872 <_dtoa_r+0x76a>
 8023866:	4621      	mov	r1, r4
 8023868:	461a      	mov	r2, r3
 802386a:	4630      	mov	r0, r6
 802386c:	f000 fbf0 	bl	8024050 <__lshift>
 8023870:	4604      	mov	r4, r0
 8023872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023874:	2b00      	cmp	r3, #0
 8023876:	d06b      	beq.n	8023950 <_dtoa_r+0x848>
 8023878:	4621      	mov	r1, r4
 802387a:	4628      	mov	r0, r5
 802387c:	f000 fc54 	bl	8024128 <__mcmp>
 8023880:	2800      	cmp	r0, #0
 8023882:	da65      	bge.n	8023950 <_dtoa_r+0x848>
 8023884:	2300      	movs	r3, #0
 8023886:	4629      	mov	r1, r5
 8023888:	220a      	movs	r2, #10
 802388a:	4630      	mov	r0, r6
 802388c:	f000 fa30 	bl	8023cf0 <__multadd>
 8023890:	9b08      	ldr	r3, [sp, #32]
 8023892:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023896:	4605      	mov	r5, r0
 8023898:	2b00      	cmp	r3, #0
 802389a:	f000 8192 	beq.w	8023bc2 <_dtoa_r+0xaba>
 802389e:	4639      	mov	r1, r7
 80238a0:	2300      	movs	r3, #0
 80238a2:	220a      	movs	r2, #10
 80238a4:	4630      	mov	r0, r6
 80238a6:	f000 fa23 	bl	8023cf0 <__multadd>
 80238aa:	f1ba 0f00 	cmp.w	sl, #0
 80238ae:	4607      	mov	r7, r0
 80238b0:	f300 808e 	bgt.w	80239d0 <_dtoa_r+0x8c8>
 80238b4:	9b07      	ldr	r3, [sp, #28]
 80238b6:	2b02      	cmp	r3, #2
 80238b8:	dc51      	bgt.n	802395e <_dtoa_r+0x856>
 80238ba:	e089      	b.n	80239d0 <_dtoa_r+0x8c8>
 80238bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80238be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80238c2:	e751      	b.n	8023768 <_dtoa_r+0x660>
 80238c4:	f109 34ff 	add.w	r4, r9, #4294967295
 80238c8:	42a3      	cmp	r3, r4
 80238ca:	bfbf      	itttt	lt
 80238cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80238ce:	1ae3      	sublt	r3, r4, r3
 80238d0:	18d2      	addlt	r2, r2, r3
 80238d2:	4613      	movlt	r3, r2
 80238d4:	bfb7      	itett	lt
 80238d6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80238d8:	1b1c      	subge	r4, r3, r4
 80238da:	4623      	movlt	r3, r4
 80238dc:	2400      	movlt	r4, #0
 80238de:	f1b9 0f00 	cmp.w	r9, #0
 80238e2:	bfb5      	itete	lt
 80238e4:	9a05      	ldrlt	r2, [sp, #20]
 80238e6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80238ea:	eba2 0809 	sublt.w	r8, r2, r9
 80238ee:	464a      	movge	r2, r9
 80238f0:	bfb8      	it	lt
 80238f2:	2200      	movlt	r2, #0
 80238f4:	e73b      	b.n	802376e <_dtoa_r+0x666>
 80238f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80238fa:	9f08      	ldr	r7, [sp, #32]
 80238fc:	461c      	mov	r4, r3
 80238fe:	e743      	b.n	8023788 <_dtoa_r+0x680>
 8023900:	461a      	mov	r2, r3
 8023902:	e76f      	b.n	80237e4 <_dtoa_r+0x6dc>
 8023904:	9b07      	ldr	r3, [sp, #28]
 8023906:	2b01      	cmp	r3, #1
 8023908:	dc18      	bgt.n	802393c <_dtoa_r+0x834>
 802390a:	9b02      	ldr	r3, [sp, #8]
 802390c:	b9b3      	cbnz	r3, 802393c <_dtoa_r+0x834>
 802390e:	9b03      	ldr	r3, [sp, #12]
 8023910:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8023914:	b9a2      	cbnz	r2, 8023940 <_dtoa_r+0x838>
 8023916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802391a:	0d12      	lsrs	r2, r2, #20
 802391c:	0512      	lsls	r2, r2, #20
 802391e:	b18a      	cbz	r2, 8023944 <_dtoa_r+0x83c>
 8023920:	9b05      	ldr	r3, [sp, #20]
 8023922:	3301      	adds	r3, #1
 8023924:	9305      	str	r3, [sp, #20]
 8023926:	9b06      	ldr	r3, [sp, #24]
 8023928:	3301      	adds	r3, #1
 802392a:	9306      	str	r3, [sp, #24]
 802392c:	2301      	movs	r3, #1
 802392e:	930a      	str	r3, [sp, #40]	; 0x28
 8023930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023932:	2b00      	cmp	r3, #0
 8023934:	f47f af6f 	bne.w	8023816 <_dtoa_r+0x70e>
 8023938:	2001      	movs	r0, #1
 802393a:	e774      	b.n	8023826 <_dtoa_r+0x71e>
 802393c:	2300      	movs	r3, #0
 802393e:	e7f6      	b.n	802392e <_dtoa_r+0x826>
 8023940:	9b02      	ldr	r3, [sp, #8]
 8023942:	e7f4      	b.n	802392e <_dtoa_r+0x826>
 8023944:	920a      	str	r2, [sp, #40]	; 0x28
 8023946:	e7f3      	b.n	8023930 <_dtoa_r+0x828>
 8023948:	d081      	beq.n	802384e <_dtoa_r+0x746>
 802394a:	4610      	mov	r0, r2
 802394c:	301c      	adds	r0, #28
 802394e:	e777      	b.n	8023840 <_dtoa_r+0x738>
 8023950:	f1b9 0f00 	cmp.w	r9, #0
 8023954:	dc37      	bgt.n	80239c6 <_dtoa_r+0x8be>
 8023956:	9b07      	ldr	r3, [sp, #28]
 8023958:	2b02      	cmp	r3, #2
 802395a:	dd34      	ble.n	80239c6 <_dtoa_r+0x8be>
 802395c:	46ca      	mov	sl, r9
 802395e:	f1ba 0f00 	cmp.w	sl, #0
 8023962:	d10d      	bne.n	8023980 <_dtoa_r+0x878>
 8023964:	4621      	mov	r1, r4
 8023966:	4653      	mov	r3, sl
 8023968:	2205      	movs	r2, #5
 802396a:	4630      	mov	r0, r6
 802396c:	f000 f9c0 	bl	8023cf0 <__multadd>
 8023970:	4601      	mov	r1, r0
 8023972:	4604      	mov	r4, r0
 8023974:	4628      	mov	r0, r5
 8023976:	f000 fbd7 	bl	8024128 <__mcmp>
 802397a:	2800      	cmp	r0, #0
 802397c:	f73f adde 	bgt.w	802353c <_dtoa_r+0x434>
 8023980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023982:	f8dd 8000 	ldr.w	r8, [sp]
 8023986:	ea6f 0b03 	mvn.w	fp, r3
 802398a:	f04f 0900 	mov.w	r9, #0
 802398e:	4621      	mov	r1, r4
 8023990:	4630      	mov	r0, r6
 8023992:	f000 f98b 	bl	8023cac <_Bfree>
 8023996:	2f00      	cmp	r7, #0
 8023998:	f43f aea7 	beq.w	80236ea <_dtoa_r+0x5e2>
 802399c:	f1b9 0f00 	cmp.w	r9, #0
 80239a0:	d005      	beq.n	80239ae <_dtoa_r+0x8a6>
 80239a2:	45b9      	cmp	r9, r7
 80239a4:	d003      	beq.n	80239ae <_dtoa_r+0x8a6>
 80239a6:	4649      	mov	r1, r9
 80239a8:	4630      	mov	r0, r6
 80239aa:	f000 f97f 	bl	8023cac <_Bfree>
 80239ae:	4639      	mov	r1, r7
 80239b0:	4630      	mov	r0, r6
 80239b2:	f000 f97b 	bl	8023cac <_Bfree>
 80239b6:	e698      	b.n	80236ea <_dtoa_r+0x5e2>
 80239b8:	2400      	movs	r4, #0
 80239ba:	4627      	mov	r7, r4
 80239bc:	e7e0      	b.n	8023980 <_dtoa_r+0x878>
 80239be:	46bb      	mov	fp, r7
 80239c0:	4604      	mov	r4, r0
 80239c2:	4607      	mov	r7, r0
 80239c4:	e5ba      	b.n	802353c <_dtoa_r+0x434>
 80239c6:	9b08      	ldr	r3, [sp, #32]
 80239c8:	46ca      	mov	sl, r9
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	f000 8100 	beq.w	8023bd0 <_dtoa_r+0xac8>
 80239d0:	f1b8 0f00 	cmp.w	r8, #0
 80239d4:	dd05      	ble.n	80239e2 <_dtoa_r+0x8da>
 80239d6:	4639      	mov	r1, r7
 80239d8:	4642      	mov	r2, r8
 80239da:	4630      	mov	r0, r6
 80239dc:	f000 fb38 	bl	8024050 <__lshift>
 80239e0:	4607      	mov	r7, r0
 80239e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	d05d      	beq.n	8023aa4 <_dtoa_r+0x99c>
 80239e8:	6879      	ldr	r1, [r7, #4]
 80239ea:	4630      	mov	r0, r6
 80239ec:	f000 f91e 	bl	8023c2c <_Balloc>
 80239f0:	4680      	mov	r8, r0
 80239f2:	b928      	cbnz	r0, 8023a00 <_dtoa_r+0x8f8>
 80239f4:	4b82      	ldr	r3, [pc, #520]	; (8023c00 <_dtoa_r+0xaf8>)
 80239f6:	4602      	mov	r2, r0
 80239f8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80239fc:	f7ff bb9a 	b.w	8023134 <_dtoa_r+0x2c>
 8023a00:	693a      	ldr	r2, [r7, #16]
 8023a02:	3202      	adds	r2, #2
 8023a04:	0092      	lsls	r2, r2, #2
 8023a06:	f107 010c 	add.w	r1, r7, #12
 8023a0a:	300c      	adds	r0, #12
 8023a0c:	f7fe fbd6 	bl	80221bc <memcpy>
 8023a10:	2201      	movs	r2, #1
 8023a12:	4641      	mov	r1, r8
 8023a14:	4630      	mov	r0, r6
 8023a16:	f000 fb1b 	bl	8024050 <__lshift>
 8023a1a:	9b00      	ldr	r3, [sp, #0]
 8023a1c:	3301      	adds	r3, #1
 8023a1e:	9305      	str	r3, [sp, #20]
 8023a20:	9b00      	ldr	r3, [sp, #0]
 8023a22:	4453      	add	r3, sl
 8023a24:	9309      	str	r3, [sp, #36]	; 0x24
 8023a26:	9b02      	ldr	r3, [sp, #8]
 8023a28:	f003 0301 	and.w	r3, r3, #1
 8023a2c:	46b9      	mov	r9, r7
 8023a2e:	9308      	str	r3, [sp, #32]
 8023a30:	4607      	mov	r7, r0
 8023a32:	9b05      	ldr	r3, [sp, #20]
 8023a34:	4621      	mov	r1, r4
 8023a36:	3b01      	subs	r3, #1
 8023a38:	4628      	mov	r0, r5
 8023a3a:	9302      	str	r3, [sp, #8]
 8023a3c:	f7ff fad9 	bl	8022ff2 <quorem>
 8023a40:	4603      	mov	r3, r0
 8023a42:	3330      	adds	r3, #48	; 0x30
 8023a44:	9006      	str	r0, [sp, #24]
 8023a46:	4649      	mov	r1, r9
 8023a48:	4628      	mov	r0, r5
 8023a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8023a4c:	f000 fb6c 	bl	8024128 <__mcmp>
 8023a50:	463a      	mov	r2, r7
 8023a52:	4682      	mov	sl, r0
 8023a54:	4621      	mov	r1, r4
 8023a56:	4630      	mov	r0, r6
 8023a58:	f000 fb82 	bl	8024160 <__mdiff>
 8023a5c:	68c2      	ldr	r2, [r0, #12]
 8023a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a60:	4680      	mov	r8, r0
 8023a62:	bb0a      	cbnz	r2, 8023aa8 <_dtoa_r+0x9a0>
 8023a64:	4601      	mov	r1, r0
 8023a66:	4628      	mov	r0, r5
 8023a68:	f000 fb5e 	bl	8024128 <__mcmp>
 8023a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a6e:	4602      	mov	r2, r0
 8023a70:	4641      	mov	r1, r8
 8023a72:	4630      	mov	r0, r6
 8023a74:	920e      	str	r2, [sp, #56]	; 0x38
 8023a76:	930a      	str	r3, [sp, #40]	; 0x28
 8023a78:	f000 f918 	bl	8023cac <_Bfree>
 8023a7c:	9b07      	ldr	r3, [sp, #28]
 8023a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8023a84:	ea43 0102 	orr.w	r1, r3, r2
 8023a88:	9b08      	ldr	r3, [sp, #32]
 8023a8a:	430b      	orrs	r3, r1
 8023a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a8e:	d10d      	bne.n	8023aac <_dtoa_r+0x9a4>
 8023a90:	2b39      	cmp	r3, #57	; 0x39
 8023a92:	d029      	beq.n	8023ae8 <_dtoa_r+0x9e0>
 8023a94:	f1ba 0f00 	cmp.w	sl, #0
 8023a98:	dd01      	ble.n	8023a9e <_dtoa_r+0x996>
 8023a9a:	9b06      	ldr	r3, [sp, #24]
 8023a9c:	3331      	adds	r3, #49	; 0x31
 8023a9e:	9a02      	ldr	r2, [sp, #8]
 8023aa0:	7013      	strb	r3, [r2, #0]
 8023aa2:	e774      	b.n	802398e <_dtoa_r+0x886>
 8023aa4:	4638      	mov	r0, r7
 8023aa6:	e7b8      	b.n	8023a1a <_dtoa_r+0x912>
 8023aa8:	2201      	movs	r2, #1
 8023aaa:	e7e1      	b.n	8023a70 <_dtoa_r+0x968>
 8023aac:	f1ba 0f00 	cmp.w	sl, #0
 8023ab0:	db06      	blt.n	8023ac0 <_dtoa_r+0x9b8>
 8023ab2:	9907      	ldr	r1, [sp, #28]
 8023ab4:	ea41 0a0a 	orr.w	sl, r1, sl
 8023ab8:	9908      	ldr	r1, [sp, #32]
 8023aba:	ea5a 0101 	orrs.w	r1, sl, r1
 8023abe:	d120      	bne.n	8023b02 <_dtoa_r+0x9fa>
 8023ac0:	2a00      	cmp	r2, #0
 8023ac2:	ddec      	ble.n	8023a9e <_dtoa_r+0x996>
 8023ac4:	4629      	mov	r1, r5
 8023ac6:	2201      	movs	r2, #1
 8023ac8:	4630      	mov	r0, r6
 8023aca:	9305      	str	r3, [sp, #20]
 8023acc:	f000 fac0 	bl	8024050 <__lshift>
 8023ad0:	4621      	mov	r1, r4
 8023ad2:	4605      	mov	r5, r0
 8023ad4:	f000 fb28 	bl	8024128 <__mcmp>
 8023ad8:	2800      	cmp	r0, #0
 8023ada:	9b05      	ldr	r3, [sp, #20]
 8023adc:	dc02      	bgt.n	8023ae4 <_dtoa_r+0x9dc>
 8023ade:	d1de      	bne.n	8023a9e <_dtoa_r+0x996>
 8023ae0:	07da      	lsls	r2, r3, #31
 8023ae2:	d5dc      	bpl.n	8023a9e <_dtoa_r+0x996>
 8023ae4:	2b39      	cmp	r3, #57	; 0x39
 8023ae6:	d1d8      	bne.n	8023a9a <_dtoa_r+0x992>
 8023ae8:	9a02      	ldr	r2, [sp, #8]
 8023aea:	2339      	movs	r3, #57	; 0x39
 8023aec:	7013      	strb	r3, [r2, #0]
 8023aee:	4643      	mov	r3, r8
 8023af0:	4698      	mov	r8, r3
 8023af2:	3b01      	subs	r3, #1
 8023af4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8023af8:	2a39      	cmp	r2, #57	; 0x39
 8023afa:	d051      	beq.n	8023ba0 <_dtoa_r+0xa98>
 8023afc:	3201      	adds	r2, #1
 8023afe:	701a      	strb	r2, [r3, #0]
 8023b00:	e745      	b.n	802398e <_dtoa_r+0x886>
 8023b02:	2a00      	cmp	r2, #0
 8023b04:	dd03      	ble.n	8023b0e <_dtoa_r+0xa06>
 8023b06:	2b39      	cmp	r3, #57	; 0x39
 8023b08:	d0ee      	beq.n	8023ae8 <_dtoa_r+0x9e0>
 8023b0a:	3301      	adds	r3, #1
 8023b0c:	e7c7      	b.n	8023a9e <_dtoa_r+0x996>
 8023b0e:	9a05      	ldr	r2, [sp, #20]
 8023b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023b12:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023b16:	428a      	cmp	r2, r1
 8023b18:	d02b      	beq.n	8023b72 <_dtoa_r+0xa6a>
 8023b1a:	4629      	mov	r1, r5
 8023b1c:	2300      	movs	r3, #0
 8023b1e:	220a      	movs	r2, #10
 8023b20:	4630      	mov	r0, r6
 8023b22:	f000 f8e5 	bl	8023cf0 <__multadd>
 8023b26:	45b9      	cmp	r9, r7
 8023b28:	4605      	mov	r5, r0
 8023b2a:	f04f 0300 	mov.w	r3, #0
 8023b2e:	f04f 020a 	mov.w	r2, #10
 8023b32:	4649      	mov	r1, r9
 8023b34:	4630      	mov	r0, r6
 8023b36:	d107      	bne.n	8023b48 <_dtoa_r+0xa40>
 8023b38:	f000 f8da 	bl	8023cf0 <__multadd>
 8023b3c:	4681      	mov	r9, r0
 8023b3e:	4607      	mov	r7, r0
 8023b40:	9b05      	ldr	r3, [sp, #20]
 8023b42:	3301      	adds	r3, #1
 8023b44:	9305      	str	r3, [sp, #20]
 8023b46:	e774      	b.n	8023a32 <_dtoa_r+0x92a>
 8023b48:	f000 f8d2 	bl	8023cf0 <__multadd>
 8023b4c:	4639      	mov	r1, r7
 8023b4e:	4681      	mov	r9, r0
 8023b50:	2300      	movs	r3, #0
 8023b52:	220a      	movs	r2, #10
 8023b54:	4630      	mov	r0, r6
 8023b56:	f000 f8cb 	bl	8023cf0 <__multadd>
 8023b5a:	4607      	mov	r7, r0
 8023b5c:	e7f0      	b.n	8023b40 <_dtoa_r+0xa38>
 8023b5e:	f1ba 0f00 	cmp.w	sl, #0
 8023b62:	9a00      	ldr	r2, [sp, #0]
 8023b64:	bfcc      	ite	gt
 8023b66:	46d0      	movgt	r8, sl
 8023b68:	f04f 0801 	movle.w	r8, #1
 8023b6c:	4490      	add	r8, r2
 8023b6e:	f04f 0900 	mov.w	r9, #0
 8023b72:	4629      	mov	r1, r5
 8023b74:	2201      	movs	r2, #1
 8023b76:	4630      	mov	r0, r6
 8023b78:	9302      	str	r3, [sp, #8]
 8023b7a:	f000 fa69 	bl	8024050 <__lshift>
 8023b7e:	4621      	mov	r1, r4
 8023b80:	4605      	mov	r5, r0
 8023b82:	f000 fad1 	bl	8024128 <__mcmp>
 8023b86:	2800      	cmp	r0, #0
 8023b88:	dcb1      	bgt.n	8023aee <_dtoa_r+0x9e6>
 8023b8a:	d102      	bne.n	8023b92 <_dtoa_r+0xa8a>
 8023b8c:	9b02      	ldr	r3, [sp, #8]
 8023b8e:	07db      	lsls	r3, r3, #31
 8023b90:	d4ad      	bmi.n	8023aee <_dtoa_r+0x9e6>
 8023b92:	4643      	mov	r3, r8
 8023b94:	4698      	mov	r8, r3
 8023b96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023b9a:	2a30      	cmp	r2, #48	; 0x30
 8023b9c:	d0fa      	beq.n	8023b94 <_dtoa_r+0xa8c>
 8023b9e:	e6f6      	b.n	802398e <_dtoa_r+0x886>
 8023ba0:	9a00      	ldr	r2, [sp, #0]
 8023ba2:	429a      	cmp	r2, r3
 8023ba4:	d1a4      	bne.n	8023af0 <_dtoa_r+0x9e8>
 8023ba6:	f10b 0b01 	add.w	fp, fp, #1
 8023baa:	2331      	movs	r3, #49	; 0x31
 8023bac:	e778      	b.n	8023aa0 <_dtoa_r+0x998>
 8023bae:	4b15      	ldr	r3, [pc, #84]	; (8023c04 <_dtoa_r+0xafc>)
 8023bb0:	f7ff bb12 	b.w	80231d8 <_dtoa_r+0xd0>
 8023bb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	f47f aaee 	bne.w	8023198 <_dtoa_r+0x90>
 8023bbc:	4b12      	ldr	r3, [pc, #72]	; (8023c08 <_dtoa_r+0xb00>)
 8023bbe:	f7ff bb0b 	b.w	80231d8 <_dtoa_r+0xd0>
 8023bc2:	f1ba 0f00 	cmp.w	sl, #0
 8023bc6:	dc03      	bgt.n	8023bd0 <_dtoa_r+0xac8>
 8023bc8:	9b07      	ldr	r3, [sp, #28]
 8023bca:	2b02      	cmp	r3, #2
 8023bcc:	f73f aec7 	bgt.w	802395e <_dtoa_r+0x856>
 8023bd0:	f8dd 8000 	ldr.w	r8, [sp]
 8023bd4:	4621      	mov	r1, r4
 8023bd6:	4628      	mov	r0, r5
 8023bd8:	f7ff fa0b 	bl	8022ff2 <quorem>
 8023bdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8023be0:	f808 3b01 	strb.w	r3, [r8], #1
 8023be4:	9a00      	ldr	r2, [sp, #0]
 8023be6:	eba8 0202 	sub.w	r2, r8, r2
 8023bea:	4592      	cmp	sl, r2
 8023bec:	ddb7      	ble.n	8023b5e <_dtoa_r+0xa56>
 8023bee:	4629      	mov	r1, r5
 8023bf0:	2300      	movs	r3, #0
 8023bf2:	220a      	movs	r2, #10
 8023bf4:	4630      	mov	r0, r6
 8023bf6:	f000 f87b 	bl	8023cf0 <__multadd>
 8023bfa:	4605      	mov	r5, r0
 8023bfc:	e7ea      	b.n	8023bd4 <_dtoa_r+0xacc>
 8023bfe:	bf00      	nop
 8023c00:	0807787f 	.word	0x0807787f
 8023c04:	080777d8 	.word	0x080777d8
 8023c08:	080777fc 	.word	0x080777fc

08023c0c <_localeconv_r>:
 8023c0c:	4800      	ldr	r0, [pc, #0]	; (8023c10 <_localeconv_r+0x4>)
 8023c0e:	4770      	bx	lr
 8023c10:	24001cb8 	.word	0x24001cb8

08023c14 <__malloc_lock>:
 8023c14:	4801      	ldr	r0, [pc, #4]	; (8023c1c <__malloc_lock+0x8>)
 8023c16:	f000 bd48 	b.w	80246aa <__retarget_lock_acquire_recursive>
 8023c1a:	bf00      	nop
 8023c1c:	3000fa78 	.word	0x3000fa78

08023c20 <__malloc_unlock>:
 8023c20:	4801      	ldr	r0, [pc, #4]	; (8023c28 <__malloc_unlock+0x8>)
 8023c22:	f000 bd43 	b.w	80246ac <__retarget_lock_release_recursive>
 8023c26:	bf00      	nop
 8023c28:	3000fa78 	.word	0x3000fa78

08023c2c <_Balloc>:
 8023c2c:	b570      	push	{r4, r5, r6, lr}
 8023c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023c30:	4604      	mov	r4, r0
 8023c32:	460d      	mov	r5, r1
 8023c34:	b976      	cbnz	r6, 8023c54 <_Balloc+0x28>
 8023c36:	2010      	movs	r0, #16
 8023c38:	f7fe fab0 	bl	802219c <malloc>
 8023c3c:	4602      	mov	r2, r0
 8023c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8023c40:	b920      	cbnz	r0, 8023c4c <_Balloc+0x20>
 8023c42:	4b18      	ldr	r3, [pc, #96]	; (8023ca4 <_Balloc+0x78>)
 8023c44:	4818      	ldr	r0, [pc, #96]	; (8023ca8 <_Balloc+0x7c>)
 8023c46:	2166      	movs	r1, #102	; 0x66
 8023c48:	f000 fcfe 	bl	8024648 <__assert_func>
 8023c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023c50:	6006      	str	r6, [r0, #0]
 8023c52:	60c6      	str	r6, [r0, #12]
 8023c54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023c56:	68f3      	ldr	r3, [r6, #12]
 8023c58:	b183      	cbz	r3, 8023c7c <_Balloc+0x50>
 8023c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023c5c:	68db      	ldr	r3, [r3, #12]
 8023c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023c62:	b9b8      	cbnz	r0, 8023c94 <_Balloc+0x68>
 8023c64:	2101      	movs	r1, #1
 8023c66:	fa01 f605 	lsl.w	r6, r1, r5
 8023c6a:	1d72      	adds	r2, r6, #5
 8023c6c:	0092      	lsls	r2, r2, #2
 8023c6e:	4620      	mov	r0, r4
 8023c70:	f000 fb5a 	bl	8024328 <_calloc_r>
 8023c74:	b160      	cbz	r0, 8023c90 <_Balloc+0x64>
 8023c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023c7a:	e00e      	b.n	8023c9a <_Balloc+0x6e>
 8023c7c:	2221      	movs	r2, #33	; 0x21
 8023c7e:	2104      	movs	r1, #4
 8023c80:	4620      	mov	r0, r4
 8023c82:	f000 fb51 	bl	8024328 <_calloc_r>
 8023c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023c88:	60f0      	str	r0, [r6, #12]
 8023c8a:	68db      	ldr	r3, [r3, #12]
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	d1e4      	bne.n	8023c5a <_Balloc+0x2e>
 8023c90:	2000      	movs	r0, #0
 8023c92:	bd70      	pop	{r4, r5, r6, pc}
 8023c94:	6802      	ldr	r2, [r0, #0]
 8023c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023c9a:	2300      	movs	r3, #0
 8023c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023ca0:	e7f7      	b.n	8023c92 <_Balloc+0x66>
 8023ca2:	bf00      	nop
 8023ca4:	08077809 	.word	0x08077809
 8023ca8:	08077890 	.word	0x08077890

08023cac <_Bfree>:
 8023cac:	b570      	push	{r4, r5, r6, lr}
 8023cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023cb0:	4605      	mov	r5, r0
 8023cb2:	460c      	mov	r4, r1
 8023cb4:	b976      	cbnz	r6, 8023cd4 <_Bfree+0x28>
 8023cb6:	2010      	movs	r0, #16
 8023cb8:	f7fe fa70 	bl	802219c <malloc>
 8023cbc:	4602      	mov	r2, r0
 8023cbe:	6268      	str	r0, [r5, #36]	; 0x24
 8023cc0:	b920      	cbnz	r0, 8023ccc <_Bfree+0x20>
 8023cc2:	4b09      	ldr	r3, [pc, #36]	; (8023ce8 <_Bfree+0x3c>)
 8023cc4:	4809      	ldr	r0, [pc, #36]	; (8023cec <_Bfree+0x40>)
 8023cc6:	218a      	movs	r1, #138	; 0x8a
 8023cc8:	f000 fcbe 	bl	8024648 <__assert_func>
 8023ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023cd0:	6006      	str	r6, [r0, #0]
 8023cd2:	60c6      	str	r6, [r0, #12]
 8023cd4:	b13c      	cbz	r4, 8023ce6 <_Bfree+0x3a>
 8023cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8023cd8:	6862      	ldr	r2, [r4, #4]
 8023cda:	68db      	ldr	r3, [r3, #12]
 8023cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023ce0:	6021      	str	r1, [r4, #0]
 8023ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023ce6:	bd70      	pop	{r4, r5, r6, pc}
 8023ce8:	08077809 	.word	0x08077809
 8023cec:	08077890 	.word	0x08077890

08023cf0 <__multadd>:
 8023cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023cf4:	690e      	ldr	r6, [r1, #16]
 8023cf6:	4607      	mov	r7, r0
 8023cf8:	4698      	mov	r8, r3
 8023cfa:	460c      	mov	r4, r1
 8023cfc:	f101 0014 	add.w	r0, r1, #20
 8023d00:	2300      	movs	r3, #0
 8023d02:	6805      	ldr	r5, [r0, #0]
 8023d04:	b2a9      	uxth	r1, r5
 8023d06:	fb02 8101 	mla	r1, r2, r1, r8
 8023d0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8023d0e:	0c2d      	lsrs	r5, r5, #16
 8023d10:	fb02 c505 	mla	r5, r2, r5, ip
 8023d14:	b289      	uxth	r1, r1
 8023d16:	3301      	adds	r3, #1
 8023d18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8023d1c:	429e      	cmp	r6, r3
 8023d1e:	f840 1b04 	str.w	r1, [r0], #4
 8023d22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8023d26:	dcec      	bgt.n	8023d02 <__multadd+0x12>
 8023d28:	f1b8 0f00 	cmp.w	r8, #0
 8023d2c:	d022      	beq.n	8023d74 <__multadd+0x84>
 8023d2e:	68a3      	ldr	r3, [r4, #8]
 8023d30:	42b3      	cmp	r3, r6
 8023d32:	dc19      	bgt.n	8023d68 <__multadd+0x78>
 8023d34:	6861      	ldr	r1, [r4, #4]
 8023d36:	4638      	mov	r0, r7
 8023d38:	3101      	adds	r1, #1
 8023d3a:	f7ff ff77 	bl	8023c2c <_Balloc>
 8023d3e:	4605      	mov	r5, r0
 8023d40:	b928      	cbnz	r0, 8023d4e <__multadd+0x5e>
 8023d42:	4602      	mov	r2, r0
 8023d44:	4b0d      	ldr	r3, [pc, #52]	; (8023d7c <__multadd+0x8c>)
 8023d46:	480e      	ldr	r0, [pc, #56]	; (8023d80 <__multadd+0x90>)
 8023d48:	21b5      	movs	r1, #181	; 0xb5
 8023d4a:	f000 fc7d 	bl	8024648 <__assert_func>
 8023d4e:	6922      	ldr	r2, [r4, #16]
 8023d50:	3202      	adds	r2, #2
 8023d52:	f104 010c 	add.w	r1, r4, #12
 8023d56:	0092      	lsls	r2, r2, #2
 8023d58:	300c      	adds	r0, #12
 8023d5a:	f7fe fa2f 	bl	80221bc <memcpy>
 8023d5e:	4621      	mov	r1, r4
 8023d60:	4638      	mov	r0, r7
 8023d62:	f7ff ffa3 	bl	8023cac <_Bfree>
 8023d66:	462c      	mov	r4, r5
 8023d68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8023d6c:	3601      	adds	r6, #1
 8023d6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8023d72:	6126      	str	r6, [r4, #16]
 8023d74:	4620      	mov	r0, r4
 8023d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d7a:	bf00      	nop
 8023d7c:	0807787f 	.word	0x0807787f
 8023d80:	08077890 	.word	0x08077890

08023d84 <__hi0bits>:
 8023d84:	0c03      	lsrs	r3, r0, #16
 8023d86:	041b      	lsls	r3, r3, #16
 8023d88:	b9d3      	cbnz	r3, 8023dc0 <__hi0bits+0x3c>
 8023d8a:	0400      	lsls	r0, r0, #16
 8023d8c:	2310      	movs	r3, #16
 8023d8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023d92:	bf04      	itt	eq
 8023d94:	0200      	lsleq	r0, r0, #8
 8023d96:	3308      	addeq	r3, #8
 8023d98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023d9c:	bf04      	itt	eq
 8023d9e:	0100      	lsleq	r0, r0, #4
 8023da0:	3304      	addeq	r3, #4
 8023da2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8023da6:	bf04      	itt	eq
 8023da8:	0080      	lsleq	r0, r0, #2
 8023daa:	3302      	addeq	r3, #2
 8023dac:	2800      	cmp	r0, #0
 8023dae:	db05      	blt.n	8023dbc <__hi0bits+0x38>
 8023db0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023db4:	f103 0301 	add.w	r3, r3, #1
 8023db8:	bf08      	it	eq
 8023dba:	2320      	moveq	r3, #32
 8023dbc:	4618      	mov	r0, r3
 8023dbe:	4770      	bx	lr
 8023dc0:	2300      	movs	r3, #0
 8023dc2:	e7e4      	b.n	8023d8e <__hi0bits+0xa>

08023dc4 <__lo0bits>:
 8023dc4:	6803      	ldr	r3, [r0, #0]
 8023dc6:	f013 0207 	ands.w	r2, r3, #7
 8023dca:	4601      	mov	r1, r0
 8023dcc:	d00b      	beq.n	8023de6 <__lo0bits+0x22>
 8023dce:	07da      	lsls	r2, r3, #31
 8023dd0:	d424      	bmi.n	8023e1c <__lo0bits+0x58>
 8023dd2:	0798      	lsls	r0, r3, #30
 8023dd4:	bf49      	itett	mi
 8023dd6:	085b      	lsrmi	r3, r3, #1
 8023dd8:	089b      	lsrpl	r3, r3, #2
 8023dda:	2001      	movmi	r0, #1
 8023ddc:	600b      	strmi	r3, [r1, #0]
 8023dde:	bf5c      	itt	pl
 8023de0:	600b      	strpl	r3, [r1, #0]
 8023de2:	2002      	movpl	r0, #2
 8023de4:	4770      	bx	lr
 8023de6:	b298      	uxth	r0, r3
 8023de8:	b9b0      	cbnz	r0, 8023e18 <__lo0bits+0x54>
 8023dea:	0c1b      	lsrs	r3, r3, #16
 8023dec:	2010      	movs	r0, #16
 8023dee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8023df2:	bf04      	itt	eq
 8023df4:	0a1b      	lsreq	r3, r3, #8
 8023df6:	3008      	addeq	r0, #8
 8023df8:	071a      	lsls	r2, r3, #28
 8023dfa:	bf04      	itt	eq
 8023dfc:	091b      	lsreq	r3, r3, #4
 8023dfe:	3004      	addeq	r0, #4
 8023e00:	079a      	lsls	r2, r3, #30
 8023e02:	bf04      	itt	eq
 8023e04:	089b      	lsreq	r3, r3, #2
 8023e06:	3002      	addeq	r0, #2
 8023e08:	07da      	lsls	r2, r3, #31
 8023e0a:	d403      	bmi.n	8023e14 <__lo0bits+0x50>
 8023e0c:	085b      	lsrs	r3, r3, #1
 8023e0e:	f100 0001 	add.w	r0, r0, #1
 8023e12:	d005      	beq.n	8023e20 <__lo0bits+0x5c>
 8023e14:	600b      	str	r3, [r1, #0]
 8023e16:	4770      	bx	lr
 8023e18:	4610      	mov	r0, r2
 8023e1a:	e7e8      	b.n	8023dee <__lo0bits+0x2a>
 8023e1c:	2000      	movs	r0, #0
 8023e1e:	4770      	bx	lr
 8023e20:	2020      	movs	r0, #32
 8023e22:	4770      	bx	lr

08023e24 <__i2b>:
 8023e24:	b510      	push	{r4, lr}
 8023e26:	460c      	mov	r4, r1
 8023e28:	2101      	movs	r1, #1
 8023e2a:	f7ff feff 	bl	8023c2c <_Balloc>
 8023e2e:	4602      	mov	r2, r0
 8023e30:	b928      	cbnz	r0, 8023e3e <__i2b+0x1a>
 8023e32:	4b05      	ldr	r3, [pc, #20]	; (8023e48 <__i2b+0x24>)
 8023e34:	4805      	ldr	r0, [pc, #20]	; (8023e4c <__i2b+0x28>)
 8023e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8023e3a:	f000 fc05 	bl	8024648 <__assert_func>
 8023e3e:	2301      	movs	r3, #1
 8023e40:	6144      	str	r4, [r0, #20]
 8023e42:	6103      	str	r3, [r0, #16]
 8023e44:	bd10      	pop	{r4, pc}
 8023e46:	bf00      	nop
 8023e48:	0807787f 	.word	0x0807787f
 8023e4c:	08077890 	.word	0x08077890

08023e50 <__multiply>:
 8023e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e54:	4614      	mov	r4, r2
 8023e56:	690a      	ldr	r2, [r1, #16]
 8023e58:	6923      	ldr	r3, [r4, #16]
 8023e5a:	429a      	cmp	r2, r3
 8023e5c:	bfb8      	it	lt
 8023e5e:	460b      	movlt	r3, r1
 8023e60:	460d      	mov	r5, r1
 8023e62:	bfbc      	itt	lt
 8023e64:	4625      	movlt	r5, r4
 8023e66:	461c      	movlt	r4, r3
 8023e68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8023e6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023e70:	68ab      	ldr	r3, [r5, #8]
 8023e72:	6869      	ldr	r1, [r5, #4]
 8023e74:	eb0a 0709 	add.w	r7, sl, r9
 8023e78:	42bb      	cmp	r3, r7
 8023e7a:	b085      	sub	sp, #20
 8023e7c:	bfb8      	it	lt
 8023e7e:	3101      	addlt	r1, #1
 8023e80:	f7ff fed4 	bl	8023c2c <_Balloc>
 8023e84:	b930      	cbnz	r0, 8023e94 <__multiply+0x44>
 8023e86:	4602      	mov	r2, r0
 8023e88:	4b42      	ldr	r3, [pc, #264]	; (8023f94 <__multiply+0x144>)
 8023e8a:	4843      	ldr	r0, [pc, #268]	; (8023f98 <__multiply+0x148>)
 8023e8c:	f240 115d 	movw	r1, #349	; 0x15d
 8023e90:	f000 fbda 	bl	8024648 <__assert_func>
 8023e94:	f100 0614 	add.w	r6, r0, #20
 8023e98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8023e9c:	4633      	mov	r3, r6
 8023e9e:	2200      	movs	r2, #0
 8023ea0:	4543      	cmp	r3, r8
 8023ea2:	d31e      	bcc.n	8023ee2 <__multiply+0x92>
 8023ea4:	f105 0c14 	add.w	ip, r5, #20
 8023ea8:	f104 0314 	add.w	r3, r4, #20
 8023eac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8023eb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8023eb4:	9202      	str	r2, [sp, #8]
 8023eb6:	ebac 0205 	sub.w	r2, ip, r5
 8023eba:	3a15      	subs	r2, #21
 8023ebc:	f022 0203 	bic.w	r2, r2, #3
 8023ec0:	3204      	adds	r2, #4
 8023ec2:	f105 0115 	add.w	r1, r5, #21
 8023ec6:	458c      	cmp	ip, r1
 8023ec8:	bf38      	it	cc
 8023eca:	2204      	movcc	r2, #4
 8023ecc:	9201      	str	r2, [sp, #4]
 8023ece:	9a02      	ldr	r2, [sp, #8]
 8023ed0:	9303      	str	r3, [sp, #12]
 8023ed2:	429a      	cmp	r2, r3
 8023ed4:	d808      	bhi.n	8023ee8 <__multiply+0x98>
 8023ed6:	2f00      	cmp	r7, #0
 8023ed8:	dc55      	bgt.n	8023f86 <__multiply+0x136>
 8023eda:	6107      	str	r7, [r0, #16]
 8023edc:	b005      	add	sp, #20
 8023ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ee2:	f843 2b04 	str.w	r2, [r3], #4
 8023ee6:	e7db      	b.n	8023ea0 <__multiply+0x50>
 8023ee8:	f8b3 a000 	ldrh.w	sl, [r3]
 8023eec:	f1ba 0f00 	cmp.w	sl, #0
 8023ef0:	d020      	beq.n	8023f34 <__multiply+0xe4>
 8023ef2:	f105 0e14 	add.w	lr, r5, #20
 8023ef6:	46b1      	mov	r9, r6
 8023ef8:	2200      	movs	r2, #0
 8023efa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8023efe:	f8d9 b000 	ldr.w	fp, [r9]
 8023f02:	b2a1      	uxth	r1, r4
 8023f04:	fa1f fb8b 	uxth.w	fp, fp
 8023f08:	fb0a b101 	mla	r1, sl, r1, fp
 8023f0c:	4411      	add	r1, r2
 8023f0e:	f8d9 2000 	ldr.w	r2, [r9]
 8023f12:	0c24      	lsrs	r4, r4, #16
 8023f14:	0c12      	lsrs	r2, r2, #16
 8023f16:	fb0a 2404 	mla	r4, sl, r4, r2
 8023f1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8023f1e:	b289      	uxth	r1, r1
 8023f20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8023f24:	45f4      	cmp	ip, lr
 8023f26:	f849 1b04 	str.w	r1, [r9], #4
 8023f2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8023f2e:	d8e4      	bhi.n	8023efa <__multiply+0xaa>
 8023f30:	9901      	ldr	r1, [sp, #4]
 8023f32:	5072      	str	r2, [r6, r1]
 8023f34:	9a03      	ldr	r2, [sp, #12]
 8023f36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023f3a:	3304      	adds	r3, #4
 8023f3c:	f1b9 0f00 	cmp.w	r9, #0
 8023f40:	d01f      	beq.n	8023f82 <__multiply+0x132>
 8023f42:	6834      	ldr	r4, [r6, #0]
 8023f44:	f105 0114 	add.w	r1, r5, #20
 8023f48:	46b6      	mov	lr, r6
 8023f4a:	f04f 0a00 	mov.w	sl, #0
 8023f4e:	880a      	ldrh	r2, [r1, #0]
 8023f50:	f8be b002 	ldrh.w	fp, [lr, #2]
 8023f54:	fb09 b202 	mla	r2, r9, r2, fp
 8023f58:	4492      	add	sl, r2
 8023f5a:	b2a4      	uxth	r4, r4
 8023f5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023f60:	f84e 4b04 	str.w	r4, [lr], #4
 8023f64:	f851 4b04 	ldr.w	r4, [r1], #4
 8023f68:	f8be 2000 	ldrh.w	r2, [lr]
 8023f6c:	0c24      	lsrs	r4, r4, #16
 8023f6e:	fb09 2404 	mla	r4, r9, r4, r2
 8023f72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8023f76:	458c      	cmp	ip, r1
 8023f78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023f7c:	d8e7      	bhi.n	8023f4e <__multiply+0xfe>
 8023f7e:	9a01      	ldr	r2, [sp, #4]
 8023f80:	50b4      	str	r4, [r6, r2]
 8023f82:	3604      	adds	r6, #4
 8023f84:	e7a3      	b.n	8023ece <__multiply+0x7e>
 8023f86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023f8a:	2b00      	cmp	r3, #0
 8023f8c:	d1a5      	bne.n	8023eda <__multiply+0x8a>
 8023f8e:	3f01      	subs	r7, #1
 8023f90:	e7a1      	b.n	8023ed6 <__multiply+0x86>
 8023f92:	bf00      	nop
 8023f94:	0807787f 	.word	0x0807787f
 8023f98:	08077890 	.word	0x08077890

08023f9c <__pow5mult>:
 8023f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023fa0:	4615      	mov	r5, r2
 8023fa2:	f012 0203 	ands.w	r2, r2, #3
 8023fa6:	4606      	mov	r6, r0
 8023fa8:	460f      	mov	r7, r1
 8023faa:	d007      	beq.n	8023fbc <__pow5mult+0x20>
 8023fac:	4c25      	ldr	r4, [pc, #148]	; (8024044 <__pow5mult+0xa8>)
 8023fae:	3a01      	subs	r2, #1
 8023fb0:	2300      	movs	r3, #0
 8023fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023fb6:	f7ff fe9b 	bl	8023cf0 <__multadd>
 8023fba:	4607      	mov	r7, r0
 8023fbc:	10ad      	asrs	r5, r5, #2
 8023fbe:	d03d      	beq.n	802403c <__pow5mult+0xa0>
 8023fc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023fc2:	b97c      	cbnz	r4, 8023fe4 <__pow5mult+0x48>
 8023fc4:	2010      	movs	r0, #16
 8023fc6:	f7fe f8e9 	bl	802219c <malloc>
 8023fca:	4602      	mov	r2, r0
 8023fcc:	6270      	str	r0, [r6, #36]	; 0x24
 8023fce:	b928      	cbnz	r0, 8023fdc <__pow5mult+0x40>
 8023fd0:	4b1d      	ldr	r3, [pc, #116]	; (8024048 <__pow5mult+0xac>)
 8023fd2:	481e      	ldr	r0, [pc, #120]	; (802404c <__pow5mult+0xb0>)
 8023fd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8023fd8:	f000 fb36 	bl	8024648 <__assert_func>
 8023fdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023fe0:	6004      	str	r4, [r0, #0]
 8023fe2:	60c4      	str	r4, [r0, #12]
 8023fe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023fe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023fec:	b94c      	cbnz	r4, 8024002 <__pow5mult+0x66>
 8023fee:	f240 2171 	movw	r1, #625	; 0x271
 8023ff2:	4630      	mov	r0, r6
 8023ff4:	f7ff ff16 	bl	8023e24 <__i2b>
 8023ff8:	2300      	movs	r3, #0
 8023ffa:	f8c8 0008 	str.w	r0, [r8, #8]
 8023ffe:	4604      	mov	r4, r0
 8024000:	6003      	str	r3, [r0, #0]
 8024002:	f04f 0900 	mov.w	r9, #0
 8024006:	07eb      	lsls	r3, r5, #31
 8024008:	d50a      	bpl.n	8024020 <__pow5mult+0x84>
 802400a:	4639      	mov	r1, r7
 802400c:	4622      	mov	r2, r4
 802400e:	4630      	mov	r0, r6
 8024010:	f7ff ff1e 	bl	8023e50 <__multiply>
 8024014:	4639      	mov	r1, r7
 8024016:	4680      	mov	r8, r0
 8024018:	4630      	mov	r0, r6
 802401a:	f7ff fe47 	bl	8023cac <_Bfree>
 802401e:	4647      	mov	r7, r8
 8024020:	106d      	asrs	r5, r5, #1
 8024022:	d00b      	beq.n	802403c <__pow5mult+0xa0>
 8024024:	6820      	ldr	r0, [r4, #0]
 8024026:	b938      	cbnz	r0, 8024038 <__pow5mult+0x9c>
 8024028:	4622      	mov	r2, r4
 802402a:	4621      	mov	r1, r4
 802402c:	4630      	mov	r0, r6
 802402e:	f7ff ff0f 	bl	8023e50 <__multiply>
 8024032:	6020      	str	r0, [r4, #0]
 8024034:	f8c0 9000 	str.w	r9, [r0]
 8024038:	4604      	mov	r4, r0
 802403a:	e7e4      	b.n	8024006 <__pow5mult+0x6a>
 802403c:	4638      	mov	r0, r7
 802403e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024042:	bf00      	nop
 8024044:	080779e0 	.word	0x080779e0
 8024048:	08077809 	.word	0x08077809
 802404c:	08077890 	.word	0x08077890

08024050 <__lshift>:
 8024050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024054:	460c      	mov	r4, r1
 8024056:	6849      	ldr	r1, [r1, #4]
 8024058:	6923      	ldr	r3, [r4, #16]
 802405a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802405e:	68a3      	ldr	r3, [r4, #8]
 8024060:	4607      	mov	r7, r0
 8024062:	4691      	mov	r9, r2
 8024064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024068:	f108 0601 	add.w	r6, r8, #1
 802406c:	42b3      	cmp	r3, r6
 802406e:	db0b      	blt.n	8024088 <__lshift+0x38>
 8024070:	4638      	mov	r0, r7
 8024072:	f7ff fddb 	bl	8023c2c <_Balloc>
 8024076:	4605      	mov	r5, r0
 8024078:	b948      	cbnz	r0, 802408e <__lshift+0x3e>
 802407a:	4602      	mov	r2, r0
 802407c:	4b28      	ldr	r3, [pc, #160]	; (8024120 <__lshift+0xd0>)
 802407e:	4829      	ldr	r0, [pc, #164]	; (8024124 <__lshift+0xd4>)
 8024080:	f240 11d9 	movw	r1, #473	; 0x1d9
 8024084:	f000 fae0 	bl	8024648 <__assert_func>
 8024088:	3101      	adds	r1, #1
 802408a:	005b      	lsls	r3, r3, #1
 802408c:	e7ee      	b.n	802406c <__lshift+0x1c>
 802408e:	2300      	movs	r3, #0
 8024090:	f100 0114 	add.w	r1, r0, #20
 8024094:	f100 0210 	add.w	r2, r0, #16
 8024098:	4618      	mov	r0, r3
 802409a:	4553      	cmp	r3, sl
 802409c:	db33      	blt.n	8024106 <__lshift+0xb6>
 802409e:	6920      	ldr	r0, [r4, #16]
 80240a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80240a4:	f104 0314 	add.w	r3, r4, #20
 80240a8:	f019 091f 	ands.w	r9, r9, #31
 80240ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80240b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80240b4:	d02b      	beq.n	802410e <__lshift+0xbe>
 80240b6:	f1c9 0e20 	rsb	lr, r9, #32
 80240ba:	468a      	mov	sl, r1
 80240bc:	2200      	movs	r2, #0
 80240be:	6818      	ldr	r0, [r3, #0]
 80240c0:	fa00 f009 	lsl.w	r0, r0, r9
 80240c4:	4302      	orrs	r2, r0
 80240c6:	f84a 2b04 	str.w	r2, [sl], #4
 80240ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80240ce:	459c      	cmp	ip, r3
 80240d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80240d4:	d8f3      	bhi.n	80240be <__lshift+0x6e>
 80240d6:	ebac 0304 	sub.w	r3, ip, r4
 80240da:	3b15      	subs	r3, #21
 80240dc:	f023 0303 	bic.w	r3, r3, #3
 80240e0:	3304      	adds	r3, #4
 80240e2:	f104 0015 	add.w	r0, r4, #21
 80240e6:	4584      	cmp	ip, r0
 80240e8:	bf38      	it	cc
 80240ea:	2304      	movcc	r3, #4
 80240ec:	50ca      	str	r2, [r1, r3]
 80240ee:	b10a      	cbz	r2, 80240f4 <__lshift+0xa4>
 80240f0:	f108 0602 	add.w	r6, r8, #2
 80240f4:	3e01      	subs	r6, #1
 80240f6:	4638      	mov	r0, r7
 80240f8:	612e      	str	r6, [r5, #16]
 80240fa:	4621      	mov	r1, r4
 80240fc:	f7ff fdd6 	bl	8023cac <_Bfree>
 8024100:	4628      	mov	r0, r5
 8024102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024106:	f842 0f04 	str.w	r0, [r2, #4]!
 802410a:	3301      	adds	r3, #1
 802410c:	e7c5      	b.n	802409a <__lshift+0x4a>
 802410e:	3904      	subs	r1, #4
 8024110:	f853 2b04 	ldr.w	r2, [r3], #4
 8024114:	f841 2f04 	str.w	r2, [r1, #4]!
 8024118:	459c      	cmp	ip, r3
 802411a:	d8f9      	bhi.n	8024110 <__lshift+0xc0>
 802411c:	e7ea      	b.n	80240f4 <__lshift+0xa4>
 802411e:	bf00      	nop
 8024120:	0807787f 	.word	0x0807787f
 8024124:	08077890 	.word	0x08077890

08024128 <__mcmp>:
 8024128:	b530      	push	{r4, r5, lr}
 802412a:	6902      	ldr	r2, [r0, #16]
 802412c:	690c      	ldr	r4, [r1, #16]
 802412e:	1b12      	subs	r2, r2, r4
 8024130:	d10e      	bne.n	8024150 <__mcmp+0x28>
 8024132:	f100 0314 	add.w	r3, r0, #20
 8024136:	3114      	adds	r1, #20
 8024138:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802413c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024140:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8024144:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8024148:	42a5      	cmp	r5, r4
 802414a:	d003      	beq.n	8024154 <__mcmp+0x2c>
 802414c:	d305      	bcc.n	802415a <__mcmp+0x32>
 802414e:	2201      	movs	r2, #1
 8024150:	4610      	mov	r0, r2
 8024152:	bd30      	pop	{r4, r5, pc}
 8024154:	4283      	cmp	r3, r0
 8024156:	d3f3      	bcc.n	8024140 <__mcmp+0x18>
 8024158:	e7fa      	b.n	8024150 <__mcmp+0x28>
 802415a:	f04f 32ff 	mov.w	r2, #4294967295
 802415e:	e7f7      	b.n	8024150 <__mcmp+0x28>

08024160 <__mdiff>:
 8024160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024164:	460c      	mov	r4, r1
 8024166:	4606      	mov	r6, r0
 8024168:	4611      	mov	r1, r2
 802416a:	4620      	mov	r0, r4
 802416c:	4617      	mov	r7, r2
 802416e:	f7ff ffdb 	bl	8024128 <__mcmp>
 8024172:	1e05      	subs	r5, r0, #0
 8024174:	d110      	bne.n	8024198 <__mdiff+0x38>
 8024176:	4629      	mov	r1, r5
 8024178:	4630      	mov	r0, r6
 802417a:	f7ff fd57 	bl	8023c2c <_Balloc>
 802417e:	b930      	cbnz	r0, 802418e <__mdiff+0x2e>
 8024180:	4b39      	ldr	r3, [pc, #228]	; (8024268 <__mdiff+0x108>)
 8024182:	4602      	mov	r2, r0
 8024184:	f240 2132 	movw	r1, #562	; 0x232
 8024188:	4838      	ldr	r0, [pc, #224]	; (802426c <__mdiff+0x10c>)
 802418a:	f000 fa5d 	bl	8024648 <__assert_func>
 802418e:	2301      	movs	r3, #1
 8024190:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024198:	bfa4      	itt	ge
 802419a:	463b      	movge	r3, r7
 802419c:	4627      	movge	r7, r4
 802419e:	4630      	mov	r0, r6
 80241a0:	6879      	ldr	r1, [r7, #4]
 80241a2:	bfa6      	itte	ge
 80241a4:	461c      	movge	r4, r3
 80241a6:	2500      	movge	r5, #0
 80241a8:	2501      	movlt	r5, #1
 80241aa:	f7ff fd3f 	bl	8023c2c <_Balloc>
 80241ae:	b920      	cbnz	r0, 80241ba <__mdiff+0x5a>
 80241b0:	4b2d      	ldr	r3, [pc, #180]	; (8024268 <__mdiff+0x108>)
 80241b2:	4602      	mov	r2, r0
 80241b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80241b8:	e7e6      	b.n	8024188 <__mdiff+0x28>
 80241ba:	693e      	ldr	r6, [r7, #16]
 80241bc:	60c5      	str	r5, [r0, #12]
 80241be:	6925      	ldr	r5, [r4, #16]
 80241c0:	f107 0114 	add.w	r1, r7, #20
 80241c4:	f104 0914 	add.w	r9, r4, #20
 80241c8:	f100 0e14 	add.w	lr, r0, #20
 80241cc:	f107 0210 	add.w	r2, r7, #16
 80241d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80241d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80241d8:	46f2      	mov	sl, lr
 80241da:	2700      	movs	r7, #0
 80241dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80241e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80241e4:	fa1f f883 	uxth.w	r8, r3
 80241e8:	fa17 f78b 	uxtah	r7, r7, fp
 80241ec:	0c1b      	lsrs	r3, r3, #16
 80241ee:	eba7 0808 	sub.w	r8, r7, r8
 80241f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80241f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80241fa:	fa1f f888 	uxth.w	r8, r8
 80241fe:	141f      	asrs	r7, r3, #16
 8024200:	454d      	cmp	r5, r9
 8024202:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8024206:	f84a 3b04 	str.w	r3, [sl], #4
 802420a:	d8e7      	bhi.n	80241dc <__mdiff+0x7c>
 802420c:	1b2b      	subs	r3, r5, r4
 802420e:	3b15      	subs	r3, #21
 8024210:	f023 0303 	bic.w	r3, r3, #3
 8024214:	3304      	adds	r3, #4
 8024216:	3415      	adds	r4, #21
 8024218:	42a5      	cmp	r5, r4
 802421a:	bf38      	it	cc
 802421c:	2304      	movcc	r3, #4
 802421e:	4419      	add	r1, r3
 8024220:	4473      	add	r3, lr
 8024222:	469e      	mov	lr, r3
 8024224:	460d      	mov	r5, r1
 8024226:	4565      	cmp	r5, ip
 8024228:	d30e      	bcc.n	8024248 <__mdiff+0xe8>
 802422a:	f10c 0203 	add.w	r2, ip, #3
 802422e:	1a52      	subs	r2, r2, r1
 8024230:	f022 0203 	bic.w	r2, r2, #3
 8024234:	3903      	subs	r1, #3
 8024236:	458c      	cmp	ip, r1
 8024238:	bf38      	it	cc
 802423a:	2200      	movcc	r2, #0
 802423c:	441a      	add	r2, r3
 802423e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8024242:	b17b      	cbz	r3, 8024264 <__mdiff+0x104>
 8024244:	6106      	str	r6, [r0, #16]
 8024246:	e7a5      	b.n	8024194 <__mdiff+0x34>
 8024248:	f855 8b04 	ldr.w	r8, [r5], #4
 802424c:	fa17 f488 	uxtah	r4, r7, r8
 8024250:	1422      	asrs	r2, r4, #16
 8024252:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8024256:	b2a4      	uxth	r4, r4
 8024258:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802425c:	f84e 4b04 	str.w	r4, [lr], #4
 8024260:	1417      	asrs	r7, r2, #16
 8024262:	e7e0      	b.n	8024226 <__mdiff+0xc6>
 8024264:	3e01      	subs	r6, #1
 8024266:	e7ea      	b.n	802423e <__mdiff+0xde>
 8024268:	0807787f 	.word	0x0807787f
 802426c:	08077890 	.word	0x08077890

08024270 <__d2b>:
 8024270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024274:	4689      	mov	r9, r1
 8024276:	2101      	movs	r1, #1
 8024278:	ec57 6b10 	vmov	r6, r7, d0
 802427c:	4690      	mov	r8, r2
 802427e:	f7ff fcd5 	bl	8023c2c <_Balloc>
 8024282:	4604      	mov	r4, r0
 8024284:	b930      	cbnz	r0, 8024294 <__d2b+0x24>
 8024286:	4602      	mov	r2, r0
 8024288:	4b25      	ldr	r3, [pc, #148]	; (8024320 <__d2b+0xb0>)
 802428a:	4826      	ldr	r0, [pc, #152]	; (8024324 <__d2b+0xb4>)
 802428c:	f240 310a 	movw	r1, #778	; 0x30a
 8024290:	f000 f9da 	bl	8024648 <__assert_func>
 8024294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8024298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802429c:	bb35      	cbnz	r5, 80242ec <__d2b+0x7c>
 802429e:	2e00      	cmp	r6, #0
 80242a0:	9301      	str	r3, [sp, #4]
 80242a2:	d028      	beq.n	80242f6 <__d2b+0x86>
 80242a4:	4668      	mov	r0, sp
 80242a6:	9600      	str	r6, [sp, #0]
 80242a8:	f7ff fd8c 	bl	8023dc4 <__lo0bits>
 80242ac:	9900      	ldr	r1, [sp, #0]
 80242ae:	b300      	cbz	r0, 80242f2 <__d2b+0x82>
 80242b0:	9a01      	ldr	r2, [sp, #4]
 80242b2:	f1c0 0320 	rsb	r3, r0, #32
 80242b6:	fa02 f303 	lsl.w	r3, r2, r3
 80242ba:	430b      	orrs	r3, r1
 80242bc:	40c2      	lsrs	r2, r0
 80242be:	6163      	str	r3, [r4, #20]
 80242c0:	9201      	str	r2, [sp, #4]
 80242c2:	9b01      	ldr	r3, [sp, #4]
 80242c4:	61a3      	str	r3, [r4, #24]
 80242c6:	2b00      	cmp	r3, #0
 80242c8:	bf14      	ite	ne
 80242ca:	2202      	movne	r2, #2
 80242cc:	2201      	moveq	r2, #1
 80242ce:	6122      	str	r2, [r4, #16]
 80242d0:	b1d5      	cbz	r5, 8024308 <__d2b+0x98>
 80242d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80242d6:	4405      	add	r5, r0
 80242d8:	f8c9 5000 	str.w	r5, [r9]
 80242dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80242e0:	f8c8 0000 	str.w	r0, [r8]
 80242e4:	4620      	mov	r0, r4
 80242e6:	b003      	add	sp, #12
 80242e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80242ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80242f0:	e7d5      	b.n	802429e <__d2b+0x2e>
 80242f2:	6161      	str	r1, [r4, #20]
 80242f4:	e7e5      	b.n	80242c2 <__d2b+0x52>
 80242f6:	a801      	add	r0, sp, #4
 80242f8:	f7ff fd64 	bl	8023dc4 <__lo0bits>
 80242fc:	9b01      	ldr	r3, [sp, #4]
 80242fe:	6163      	str	r3, [r4, #20]
 8024300:	2201      	movs	r2, #1
 8024302:	6122      	str	r2, [r4, #16]
 8024304:	3020      	adds	r0, #32
 8024306:	e7e3      	b.n	80242d0 <__d2b+0x60>
 8024308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802430c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024310:	f8c9 0000 	str.w	r0, [r9]
 8024314:	6918      	ldr	r0, [r3, #16]
 8024316:	f7ff fd35 	bl	8023d84 <__hi0bits>
 802431a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802431e:	e7df      	b.n	80242e0 <__d2b+0x70>
 8024320:	0807787f 	.word	0x0807787f
 8024324:	08077890 	.word	0x08077890

08024328 <_calloc_r>:
 8024328:	b513      	push	{r0, r1, r4, lr}
 802432a:	434a      	muls	r2, r1
 802432c:	4611      	mov	r1, r2
 802432e:	9201      	str	r2, [sp, #4]
 8024330:	f7fd ffc4 	bl	80222bc <_malloc_r>
 8024334:	4604      	mov	r4, r0
 8024336:	b118      	cbz	r0, 8024340 <_calloc_r+0x18>
 8024338:	9a01      	ldr	r2, [sp, #4]
 802433a:	2100      	movs	r1, #0
 802433c:	f7fd ff66 	bl	802220c <memset>
 8024340:	4620      	mov	r0, r4
 8024342:	b002      	add	sp, #8
 8024344:	bd10      	pop	{r4, pc}

08024346 <_realloc_r>:
 8024346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024348:	4607      	mov	r7, r0
 802434a:	4614      	mov	r4, r2
 802434c:	460e      	mov	r6, r1
 802434e:	b921      	cbnz	r1, 802435a <_realloc_r+0x14>
 8024350:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024354:	4611      	mov	r1, r2
 8024356:	f7fd bfb1 	b.w	80222bc <_malloc_r>
 802435a:	b922      	cbnz	r2, 8024366 <_realloc_r+0x20>
 802435c:	f7fd ff5e 	bl	802221c <_free_r>
 8024360:	4625      	mov	r5, r4
 8024362:	4628      	mov	r0, r5
 8024364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024366:	f000 f9b4 	bl	80246d2 <_malloc_usable_size_r>
 802436a:	42a0      	cmp	r0, r4
 802436c:	d20f      	bcs.n	802438e <_realloc_r+0x48>
 802436e:	4621      	mov	r1, r4
 8024370:	4638      	mov	r0, r7
 8024372:	f7fd ffa3 	bl	80222bc <_malloc_r>
 8024376:	4605      	mov	r5, r0
 8024378:	2800      	cmp	r0, #0
 802437a:	d0f2      	beq.n	8024362 <_realloc_r+0x1c>
 802437c:	4631      	mov	r1, r6
 802437e:	4622      	mov	r2, r4
 8024380:	f7fd ff1c 	bl	80221bc <memcpy>
 8024384:	4631      	mov	r1, r6
 8024386:	4638      	mov	r0, r7
 8024388:	f7fd ff48 	bl	802221c <_free_r>
 802438c:	e7e9      	b.n	8024362 <_realloc_r+0x1c>
 802438e:	4635      	mov	r5, r6
 8024390:	e7e7      	b.n	8024362 <_realloc_r+0x1c>

08024392 <__ssputs_r>:
 8024392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024396:	688e      	ldr	r6, [r1, #8]
 8024398:	429e      	cmp	r6, r3
 802439a:	4682      	mov	sl, r0
 802439c:	460c      	mov	r4, r1
 802439e:	4690      	mov	r8, r2
 80243a0:	461f      	mov	r7, r3
 80243a2:	d838      	bhi.n	8024416 <__ssputs_r+0x84>
 80243a4:	898a      	ldrh	r2, [r1, #12]
 80243a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80243aa:	d032      	beq.n	8024412 <__ssputs_r+0x80>
 80243ac:	6825      	ldr	r5, [r4, #0]
 80243ae:	6909      	ldr	r1, [r1, #16]
 80243b0:	eba5 0901 	sub.w	r9, r5, r1
 80243b4:	6965      	ldr	r5, [r4, #20]
 80243b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80243ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80243be:	3301      	adds	r3, #1
 80243c0:	444b      	add	r3, r9
 80243c2:	106d      	asrs	r5, r5, #1
 80243c4:	429d      	cmp	r5, r3
 80243c6:	bf38      	it	cc
 80243c8:	461d      	movcc	r5, r3
 80243ca:	0553      	lsls	r3, r2, #21
 80243cc:	d531      	bpl.n	8024432 <__ssputs_r+0xa0>
 80243ce:	4629      	mov	r1, r5
 80243d0:	f7fd ff74 	bl	80222bc <_malloc_r>
 80243d4:	4606      	mov	r6, r0
 80243d6:	b950      	cbnz	r0, 80243ee <__ssputs_r+0x5c>
 80243d8:	230c      	movs	r3, #12
 80243da:	f8ca 3000 	str.w	r3, [sl]
 80243de:	89a3      	ldrh	r3, [r4, #12]
 80243e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80243e4:	81a3      	strh	r3, [r4, #12]
 80243e6:	f04f 30ff 	mov.w	r0, #4294967295
 80243ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243ee:	6921      	ldr	r1, [r4, #16]
 80243f0:	464a      	mov	r2, r9
 80243f2:	f7fd fee3 	bl	80221bc <memcpy>
 80243f6:	89a3      	ldrh	r3, [r4, #12]
 80243f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80243fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024400:	81a3      	strh	r3, [r4, #12]
 8024402:	6126      	str	r6, [r4, #16]
 8024404:	6165      	str	r5, [r4, #20]
 8024406:	444e      	add	r6, r9
 8024408:	eba5 0509 	sub.w	r5, r5, r9
 802440c:	6026      	str	r6, [r4, #0]
 802440e:	60a5      	str	r5, [r4, #8]
 8024410:	463e      	mov	r6, r7
 8024412:	42be      	cmp	r6, r7
 8024414:	d900      	bls.n	8024418 <__ssputs_r+0x86>
 8024416:	463e      	mov	r6, r7
 8024418:	4632      	mov	r2, r6
 802441a:	6820      	ldr	r0, [r4, #0]
 802441c:	4641      	mov	r1, r8
 802441e:	f7fd fedb 	bl	80221d8 <memmove>
 8024422:	68a3      	ldr	r3, [r4, #8]
 8024424:	6822      	ldr	r2, [r4, #0]
 8024426:	1b9b      	subs	r3, r3, r6
 8024428:	4432      	add	r2, r6
 802442a:	60a3      	str	r3, [r4, #8]
 802442c:	6022      	str	r2, [r4, #0]
 802442e:	2000      	movs	r0, #0
 8024430:	e7db      	b.n	80243ea <__ssputs_r+0x58>
 8024432:	462a      	mov	r2, r5
 8024434:	f7ff ff87 	bl	8024346 <_realloc_r>
 8024438:	4606      	mov	r6, r0
 802443a:	2800      	cmp	r0, #0
 802443c:	d1e1      	bne.n	8024402 <__ssputs_r+0x70>
 802443e:	6921      	ldr	r1, [r4, #16]
 8024440:	4650      	mov	r0, sl
 8024442:	f7fd feeb 	bl	802221c <_free_r>
 8024446:	e7c7      	b.n	80243d8 <__ssputs_r+0x46>

08024448 <_svfiprintf_r>:
 8024448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802444c:	4698      	mov	r8, r3
 802444e:	898b      	ldrh	r3, [r1, #12]
 8024450:	061b      	lsls	r3, r3, #24
 8024452:	b09d      	sub	sp, #116	; 0x74
 8024454:	4607      	mov	r7, r0
 8024456:	460d      	mov	r5, r1
 8024458:	4614      	mov	r4, r2
 802445a:	d50e      	bpl.n	802447a <_svfiprintf_r+0x32>
 802445c:	690b      	ldr	r3, [r1, #16]
 802445e:	b963      	cbnz	r3, 802447a <_svfiprintf_r+0x32>
 8024460:	2140      	movs	r1, #64	; 0x40
 8024462:	f7fd ff2b 	bl	80222bc <_malloc_r>
 8024466:	6028      	str	r0, [r5, #0]
 8024468:	6128      	str	r0, [r5, #16]
 802446a:	b920      	cbnz	r0, 8024476 <_svfiprintf_r+0x2e>
 802446c:	230c      	movs	r3, #12
 802446e:	603b      	str	r3, [r7, #0]
 8024470:	f04f 30ff 	mov.w	r0, #4294967295
 8024474:	e0d1      	b.n	802461a <_svfiprintf_r+0x1d2>
 8024476:	2340      	movs	r3, #64	; 0x40
 8024478:	616b      	str	r3, [r5, #20]
 802447a:	2300      	movs	r3, #0
 802447c:	9309      	str	r3, [sp, #36]	; 0x24
 802447e:	2320      	movs	r3, #32
 8024480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024484:	f8cd 800c 	str.w	r8, [sp, #12]
 8024488:	2330      	movs	r3, #48	; 0x30
 802448a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024634 <_svfiprintf_r+0x1ec>
 802448e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024492:	f04f 0901 	mov.w	r9, #1
 8024496:	4623      	mov	r3, r4
 8024498:	469a      	mov	sl, r3
 802449a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802449e:	b10a      	cbz	r2, 80244a4 <_svfiprintf_r+0x5c>
 80244a0:	2a25      	cmp	r2, #37	; 0x25
 80244a2:	d1f9      	bne.n	8024498 <_svfiprintf_r+0x50>
 80244a4:	ebba 0b04 	subs.w	fp, sl, r4
 80244a8:	d00b      	beq.n	80244c2 <_svfiprintf_r+0x7a>
 80244aa:	465b      	mov	r3, fp
 80244ac:	4622      	mov	r2, r4
 80244ae:	4629      	mov	r1, r5
 80244b0:	4638      	mov	r0, r7
 80244b2:	f7ff ff6e 	bl	8024392 <__ssputs_r>
 80244b6:	3001      	adds	r0, #1
 80244b8:	f000 80aa 	beq.w	8024610 <_svfiprintf_r+0x1c8>
 80244bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80244be:	445a      	add	r2, fp
 80244c0:	9209      	str	r2, [sp, #36]	; 0x24
 80244c2:	f89a 3000 	ldrb.w	r3, [sl]
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	f000 80a2 	beq.w	8024610 <_svfiprintf_r+0x1c8>
 80244cc:	2300      	movs	r3, #0
 80244ce:	f04f 32ff 	mov.w	r2, #4294967295
 80244d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80244d6:	f10a 0a01 	add.w	sl, sl, #1
 80244da:	9304      	str	r3, [sp, #16]
 80244dc:	9307      	str	r3, [sp, #28]
 80244de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80244e2:	931a      	str	r3, [sp, #104]	; 0x68
 80244e4:	4654      	mov	r4, sl
 80244e6:	2205      	movs	r2, #5
 80244e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80244ec:	4851      	ldr	r0, [pc, #324]	; (8024634 <_svfiprintf_r+0x1ec>)
 80244ee:	f7db ff0f 	bl	8000310 <memchr>
 80244f2:	9a04      	ldr	r2, [sp, #16]
 80244f4:	b9d8      	cbnz	r0, 802452e <_svfiprintf_r+0xe6>
 80244f6:	06d0      	lsls	r0, r2, #27
 80244f8:	bf44      	itt	mi
 80244fa:	2320      	movmi	r3, #32
 80244fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024500:	0711      	lsls	r1, r2, #28
 8024502:	bf44      	itt	mi
 8024504:	232b      	movmi	r3, #43	; 0x2b
 8024506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802450a:	f89a 3000 	ldrb.w	r3, [sl]
 802450e:	2b2a      	cmp	r3, #42	; 0x2a
 8024510:	d015      	beq.n	802453e <_svfiprintf_r+0xf6>
 8024512:	9a07      	ldr	r2, [sp, #28]
 8024514:	4654      	mov	r4, sl
 8024516:	2000      	movs	r0, #0
 8024518:	f04f 0c0a 	mov.w	ip, #10
 802451c:	4621      	mov	r1, r4
 802451e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024522:	3b30      	subs	r3, #48	; 0x30
 8024524:	2b09      	cmp	r3, #9
 8024526:	d94e      	bls.n	80245c6 <_svfiprintf_r+0x17e>
 8024528:	b1b0      	cbz	r0, 8024558 <_svfiprintf_r+0x110>
 802452a:	9207      	str	r2, [sp, #28]
 802452c:	e014      	b.n	8024558 <_svfiprintf_r+0x110>
 802452e:	eba0 0308 	sub.w	r3, r0, r8
 8024532:	fa09 f303 	lsl.w	r3, r9, r3
 8024536:	4313      	orrs	r3, r2
 8024538:	9304      	str	r3, [sp, #16]
 802453a:	46a2      	mov	sl, r4
 802453c:	e7d2      	b.n	80244e4 <_svfiprintf_r+0x9c>
 802453e:	9b03      	ldr	r3, [sp, #12]
 8024540:	1d19      	adds	r1, r3, #4
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	9103      	str	r1, [sp, #12]
 8024546:	2b00      	cmp	r3, #0
 8024548:	bfbb      	ittet	lt
 802454a:	425b      	neglt	r3, r3
 802454c:	f042 0202 	orrlt.w	r2, r2, #2
 8024550:	9307      	strge	r3, [sp, #28]
 8024552:	9307      	strlt	r3, [sp, #28]
 8024554:	bfb8      	it	lt
 8024556:	9204      	strlt	r2, [sp, #16]
 8024558:	7823      	ldrb	r3, [r4, #0]
 802455a:	2b2e      	cmp	r3, #46	; 0x2e
 802455c:	d10c      	bne.n	8024578 <_svfiprintf_r+0x130>
 802455e:	7863      	ldrb	r3, [r4, #1]
 8024560:	2b2a      	cmp	r3, #42	; 0x2a
 8024562:	d135      	bne.n	80245d0 <_svfiprintf_r+0x188>
 8024564:	9b03      	ldr	r3, [sp, #12]
 8024566:	1d1a      	adds	r2, r3, #4
 8024568:	681b      	ldr	r3, [r3, #0]
 802456a:	9203      	str	r2, [sp, #12]
 802456c:	2b00      	cmp	r3, #0
 802456e:	bfb8      	it	lt
 8024570:	f04f 33ff 	movlt.w	r3, #4294967295
 8024574:	3402      	adds	r4, #2
 8024576:	9305      	str	r3, [sp, #20]
 8024578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024644 <_svfiprintf_r+0x1fc>
 802457c:	7821      	ldrb	r1, [r4, #0]
 802457e:	2203      	movs	r2, #3
 8024580:	4650      	mov	r0, sl
 8024582:	f7db fec5 	bl	8000310 <memchr>
 8024586:	b140      	cbz	r0, 802459a <_svfiprintf_r+0x152>
 8024588:	2340      	movs	r3, #64	; 0x40
 802458a:	eba0 000a 	sub.w	r0, r0, sl
 802458e:	fa03 f000 	lsl.w	r0, r3, r0
 8024592:	9b04      	ldr	r3, [sp, #16]
 8024594:	4303      	orrs	r3, r0
 8024596:	3401      	adds	r4, #1
 8024598:	9304      	str	r3, [sp, #16]
 802459a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802459e:	4826      	ldr	r0, [pc, #152]	; (8024638 <_svfiprintf_r+0x1f0>)
 80245a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80245a4:	2206      	movs	r2, #6
 80245a6:	f7db feb3 	bl	8000310 <memchr>
 80245aa:	2800      	cmp	r0, #0
 80245ac:	d038      	beq.n	8024620 <_svfiprintf_r+0x1d8>
 80245ae:	4b23      	ldr	r3, [pc, #140]	; (802463c <_svfiprintf_r+0x1f4>)
 80245b0:	bb1b      	cbnz	r3, 80245fa <_svfiprintf_r+0x1b2>
 80245b2:	9b03      	ldr	r3, [sp, #12]
 80245b4:	3307      	adds	r3, #7
 80245b6:	f023 0307 	bic.w	r3, r3, #7
 80245ba:	3308      	adds	r3, #8
 80245bc:	9303      	str	r3, [sp, #12]
 80245be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245c0:	4433      	add	r3, r6
 80245c2:	9309      	str	r3, [sp, #36]	; 0x24
 80245c4:	e767      	b.n	8024496 <_svfiprintf_r+0x4e>
 80245c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80245ca:	460c      	mov	r4, r1
 80245cc:	2001      	movs	r0, #1
 80245ce:	e7a5      	b.n	802451c <_svfiprintf_r+0xd4>
 80245d0:	2300      	movs	r3, #0
 80245d2:	3401      	adds	r4, #1
 80245d4:	9305      	str	r3, [sp, #20]
 80245d6:	4619      	mov	r1, r3
 80245d8:	f04f 0c0a 	mov.w	ip, #10
 80245dc:	4620      	mov	r0, r4
 80245de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80245e2:	3a30      	subs	r2, #48	; 0x30
 80245e4:	2a09      	cmp	r2, #9
 80245e6:	d903      	bls.n	80245f0 <_svfiprintf_r+0x1a8>
 80245e8:	2b00      	cmp	r3, #0
 80245ea:	d0c5      	beq.n	8024578 <_svfiprintf_r+0x130>
 80245ec:	9105      	str	r1, [sp, #20]
 80245ee:	e7c3      	b.n	8024578 <_svfiprintf_r+0x130>
 80245f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80245f4:	4604      	mov	r4, r0
 80245f6:	2301      	movs	r3, #1
 80245f8:	e7f0      	b.n	80245dc <_svfiprintf_r+0x194>
 80245fa:	ab03      	add	r3, sp, #12
 80245fc:	9300      	str	r3, [sp, #0]
 80245fe:	462a      	mov	r2, r5
 8024600:	4b0f      	ldr	r3, [pc, #60]	; (8024640 <_svfiprintf_r+0x1f8>)
 8024602:	a904      	add	r1, sp, #16
 8024604:	4638      	mov	r0, r7
 8024606:	f7fd ff43 	bl	8022490 <_printf_float>
 802460a:	1c42      	adds	r2, r0, #1
 802460c:	4606      	mov	r6, r0
 802460e:	d1d6      	bne.n	80245be <_svfiprintf_r+0x176>
 8024610:	89ab      	ldrh	r3, [r5, #12]
 8024612:	065b      	lsls	r3, r3, #25
 8024614:	f53f af2c 	bmi.w	8024470 <_svfiprintf_r+0x28>
 8024618:	9809      	ldr	r0, [sp, #36]	; 0x24
 802461a:	b01d      	add	sp, #116	; 0x74
 802461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024620:	ab03      	add	r3, sp, #12
 8024622:	9300      	str	r3, [sp, #0]
 8024624:	462a      	mov	r2, r5
 8024626:	4b06      	ldr	r3, [pc, #24]	; (8024640 <_svfiprintf_r+0x1f8>)
 8024628:	a904      	add	r1, sp, #16
 802462a:	4638      	mov	r0, r7
 802462c:	f7fe f9bc 	bl	80229a8 <_printf_i>
 8024630:	e7eb      	b.n	802460a <_svfiprintf_r+0x1c2>
 8024632:	bf00      	nop
 8024634:	080779ec 	.word	0x080779ec
 8024638:	080779f6 	.word	0x080779f6
 802463c:	08022491 	.word	0x08022491
 8024640:	08024393 	.word	0x08024393
 8024644:	080779f2 	.word	0x080779f2

08024648 <__assert_func>:
 8024648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802464a:	4614      	mov	r4, r2
 802464c:	461a      	mov	r2, r3
 802464e:	4b09      	ldr	r3, [pc, #36]	; (8024674 <__assert_func+0x2c>)
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	4605      	mov	r5, r0
 8024654:	68d8      	ldr	r0, [r3, #12]
 8024656:	b14c      	cbz	r4, 802466c <__assert_func+0x24>
 8024658:	4b07      	ldr	r3, [pc, #28]	; (8024678 <__assert_func+0x30>)
 802465a:	9100      	str	r1, [sp, #0]
 802465c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024660:	4906      	ldr	r1, [pc, #24]	; (802467c <__assert_func+0x34>)
 8024662:	462b      	mov	r3, r5
 8024664:	f000 f80e 	bl	8024684 <fiprintf>
 8024668:	f000 fa62 	bl	8024b30 <abort>
 802466c:	4b04      	ldr	r3, [pc, #16]	; (8024680 <__assert_func+0x38>)
 802466e:	461c      	mov	r4, r3
 8024670:	e7f3      	b.n	802465a <__assert_func+0x12>
 8024672:	bf00      	nop
 8024674:	24001b64 	.word	0x24001b64
 8024678:	080779fd 	.word	0x080779fd
 802467c:	08077a0a 	.word	0x08077a0a
 8024680:	08077a38 	.word	0x08077a38

08024684 <fiprintf>:
 8024684:	b40e      	push	{r1, r2, r3}
 8024686:	b503      	push	{r0, r1, lr}
 8024688:	4601      	mov	r1, r0
 802468a:	ab03      	add	r3, sp, #12
 802468c:	4805      	ldr	r0, [pc, #20]	; (80246a4 <fiprintf+0x20>)
 802468e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024692:	6800      	ldr	r0, [r0, #0]
 8024694:	9301      	str	r3, [sp, #4]
 8024696:	f000 f84d 	bl	8024734 <_vfiprintf_r>
 802469a:	b002      	add	sp, #8
 802469c:	f85d eb04 	ldr.w	lr, [sp], #4
 80246a0:	b003      	add	sp, #12
 80246a2:	4770      	bx	lr
 80246a4:	24001b64 	.word	0x24001b64

080246a8 <__retarget_lock_init_recursive>:
 80246a8:	4770      	bx	lr

080246aa <__retarget_lock_acquire_recursive>:
 80246aa:	4770      	bx	lr

080246ac <__retarget_lock_release_recursive>:
 80246ac:	4770      	bx	lr

080246ae <__ascii_mbtowc>:
 80246ae:	b082      	sub	sp, #8
 80246b0:	b901      	cbnz	r1, 80246b4 <__ascii_mbtowc+0x6>
 80246b2:	a901      	add	r1, sp, #4
 80246b4:	b142      	cbz	r2, 80246c8 <__ascii_mbtowc+0x1a>
 80246b6:	b14b      	cbz	r3, 80246cc <__ascii_mbtowc+0x1e>
 80246b8:	7813      	ldrb	r3, [r2, #0]
 80246ba:	600b      	str	r3, [r1, #0]
 80246bc:	7812      	ldrb	r2, [r2, #0]
 80246be:	1e10      	subs	r0, r2, #0
 80246c0:	bf18      	it	ne
 80246c2:	2001      	movne	r0, #1
 80246c4:	b002      	add	sp, #8
 80246c6:	4770      	bx	lr
 80246c8:	4610      	mov	r0, r2
 80246ca:	e7fb      	b.n	80246c4 <__ascii_mbtowc+0x16>
 80246cc:	f06f 0001 	mvn.w	r0, #1
 80246d0:	e7f8      	b.n	80246c4 <__ascii_mbtowc+0x16>

080246d2 <_malloc_usable_size_r>:
 80246d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80246d6:	1f18      	subs	r0, r3, #4
 80246d8:	2b00      	cmp	r3, #0
 80246da:	bfbc      	itt	lt
 80246dc:	580b      	ldrlt	r3, [r1, r0]
 80246de:	18c0      	addlt	r0, r0, r3
 80246e0:	4770      	bx	lr

080246e2 <__sfputc_r>:
 80246e2:	6893      	ldr	r3, [r2, #8]
 80246e4:	3b01      	subs	r3, #1
 80246e6:	2b00      	cmp	r3, #0
 80246e8:	b410      	push	{r4}
 80246ea:	6093      	str	r3, [r2, #8]
 80246ec:	da08      	bge.n	8024700 <__sfputc_r+0x1e>
 80246ee:	6994      	ldr	r4, [r2, #24]
 80246f0:	42a3      	cmp	r3, r4
 80246f2:	db01      	blt.n	80246f8 <__sfputc_r+0x16>
 80246f4:	290a      	cmp	r1, #10
 80246f6:	d103      	bne.n	8024700 <__sfputc_r+0x1e>
 80246f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80246fc:	f000 b94a 	b.w	8024994 <__swbuf_r>
 8024700:	6813      	ldr	r3, [r2, #0]
 8024702:	1c58      	adds	r0, r3, #1
 8024704:	6010      	str	r0, [r2, #0]
 8024706:	7019      	strb	r1, [r3, #0]
 8024708:	4608      	mov	r0, r1
 802470a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802470e:	4770      	bx	lr

08024710 <__sfputs_r>:
 8024710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024712:	4606      	mov	r6, r0
 8024714:	460f      	mov	r7, r1
 8024716:	4614      	mov	r4, r2
 8024718:	18d5      	adds	r5, r2, r3
 802471a:	42ac      	cmp	r4, r5
 802471c:	d101      	bne.n	8024722 <__sfputs_r+0x12>
 802471e:	2000      	movs	r0, #0
 8024720:	e007      	b.n	8024732 <__sfputs_r+0x22>
 8024722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024726:	463a      	mov	r2, r7
 8024728:	4630      	mov	r0, r6
 802472a:	f7ff ffda 	bl	80246e2 <__sfputc_r>
 802472e:	1c43      	adds	r3, r0, #1
 8024730:	d1f3      	bne.n	802471a <__sfputs_r+0xa>
 8024732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024734 <_vfiprintf_r>:
 8024734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024738:	460d      	mov	r5, r1
 802473a:	b09d      	sub	sp, #116	; 0x74
 802473c:	4614      	mov	r4, r2
 802473e:	4698      	mov	r8, r3
 8024740:	4606      	mov	r6, r0
 8024742:	b118      	cbz	r0, 802474c <_vfiprintf_r+0x18>
 8024744:	6983      	ldr	r3, [r0, #24]
 8024746:	b90b      	cbnz	r3, 802474c <_vfiprintf_r+0x18>
 8024748:	f000 fb14 	bl	8024d74 <__sinit>
 802474c:	4b89      	ldr	r3, [pc, #548]	; (8024974 <_vfiprintf_r+0x240>)
 802474e:	429d      	cmp	r5, r3
 8024750:	d11b      	bne.n	802478a <_vfiprintf_r+0x56>
 8024752:	6875      	ldr	r5, [r6, #4]
 8024754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024756:	07d9      	lsls	r1, r3, #31
 8024758:	d405      	bmi.n	8024766 <_vfiprintf_r+0x32>
 802475a:	89ab      	ldrh	r3, [r5, #12]
 802475c:	059a      	lsls	r2, r3, #22
 802475e:	d402      	bmi.n	8024766 <_vfiprintf_r+0x32>
 8024760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024762:	f7ff ffa2 	bl	80246aa <__retarget_lock_acquire_recursive>
 8024766:	89ab      	ldrh	r3, [r5, #12]
 8024768:	071b      	lsls	r3, r3, #28
 802476a:	d501      	bpl.n	8024770 <_vfiprintf_r+0x3c>
 802476c:	692b      	ldr	r3, [r5, #16]
 802476e:	b9eb      	cbnz	r3, 80247ac <_vfiprintf_r+0x78>
 8024770:	4629      	mov	r1, r5
 8024772:	4630      	mov	r0, r6
 8024774:	f000 f96e 	bl	8024a54 <__swsetup_r>
 8024778:	b1c0      	cbz	r0, 80247ac <_vfiprintf_r+0x78>
 802477a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802477c:	07dc      	lsls	r4, r3, #31
 802477e:	d50e      	bpl.n	802479e <_vfiprintf_r+0x6a>
 8024780:	f04f 30ff 	mov.w	r0, #4294967295
 8024784:	b01d      	add	sp, #116	; 0x74
 8024786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802478a:	4b7b      	ldr	r3, [pc, #492]	; (8024978 <_vfiprintf_r+0x244>)
 802478c:	429d      	cmp	r5, r3
 802478e:	d101      	bne.n	8024794 <_vfiprintf_r+0x60>
 8024790:	68b5      	ldr	r5, [r6, #8]
 8024792:	e7df      	b.n	8024754 <_vfiprintf_r+0x20>
 8024794:	4b79      	ldr	r3, [pc, #484]	; (802497c <_vfiprintf_r+0x248>)
 8024796:	429d      	cmp	r5, r3
 8024798:	bf08      	it	eq
 802479a:	68f5      	ldreq	r5, [r6, #12]
 802479c:	e7da      	b.n	8024754 <_vfiprintf_r+0x20>
 802479e:	89ab      	ldrh	r3, [r5, #12]
 80247a0:	0598      	lsls	r0, r3, #22
 80247a2:	d4ed      	bmi.n	8024780 <_vfiprintf_r+0x4c>
 80247a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80247a6:	f7ff ff81 	bl	80246ac <__retarget_lock_release_recursive>
 80247aa:	e7e9      	b.n	8024780 <_vfiprintf_r+0x4c>
 80247ac:	2300      	movs	r3, #0
 80247ae:	9309      	str	r3, [sp, #36]	; 0x24
 80247b0:	2320      	movs	r3, #32
 80247b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80247b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80247ba:	2330      	movs	r3, #48	; 0x30
 80247bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024980 <_vfiprintf_r+0x24c>
 80247c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80247c4:	f04f 0901 	mov.w	r9, #1
 80247c8:	4623      	mov	r3, r4
 80247ca:	469a      	mov	sl, r3
 80247cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80247d0:	b10a      	cbz	r2, 80247d6 <_vfiprintf_r+0xa2>
 80247d2:	2a25      	cmp	r2, #37	; 0x25
 80247d4:	d1f9      	bne.n	80247ca <_vfiprintf_r+0x96>
 80247d6:	ebba 0b04 	subs.w	fp, sl, r4
 80247da:	d00b      	beq.n	80247f4 <_vfiprintf_r+0xc0>
 80247dc:	465b      	mov	r3, fp
 80247de:	4622      	mov	r2, r4
 80247e0:	4629      	mov	r1, r5
 80247e2:	4630      	mov	r0, r6
 80247e4:	f7ff ff94 	bl	8024710 <__sfputs_r>
 80247e8:	3001      	adds	r0, #1
 80247ea:	f000 80aa 	beq.w	8024942 <_vfiprintf_r+0x20e>
 80247ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80247f0:	445a      	add	r2, fp
 80247f2:	9209      	str	r2, [sp, #36]	; 0x24
 80247f4:	f89a 3000 	ldrb.w	r3, [sl]
 80247f8:	2b00      	cmp	r3, #0
 80247fa:	f000 80a2 	beq.w	8024942 <_vfiprintf_r+0x20e>
 80247fe:	2300      	movs	r3, #0
 8024800:	f04f 32ff 	mov.w	r2, #4294967295
 8024804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024808:	f10a 0a01 	add.w	sl, sl, #1
 802480c:	9304      	str	r3, [sp, #16]
 802480e:	9307      	str	r3, [sp, #28]
 8024810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024814:	931a      	str	r3, [sp, #104]	; 0x68
 8024816:	4654      	mov	r4, sl
 8024818:	2205      	movs	r2, #5
 802481a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802481e:	4858      	ldr	r0, [pc, #352]	; (8024980 <_vfiprintf_r+0x24c>)
 8024820:	f7db fd76 	bl	8000310 <memchr>
 8024824:	9a04      	ldr	r2, [sp, #16]
 8024826:	b9d8      	cbnz	r0, 8024860 <_vfiprintf_r+0x12c>
 8024828:	06d1      	lsls	r1, r2, #27
 802482a:	bf44      	itt	mi
 802482c:	2320      	movmi	r3, #32
 802482e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024832:	0713      	lsls	r3, r2, #28
 8024834:	bf44      	itt	mi
 8024836:	232b      	movmi	r3, #43	; 0x2b
 8024838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802483c:	f89a 3000 	ldrb.w	r3, [sl]
 8024840:	2b2a      	cmp	r3, #42	; 0x2a
 8024842:	d015      	beq.n	8024870 <_vfiprintf_r+0x13c>
 8024844:	9a07      	ldr	r2, [sp, #28]
 8024846:	4654      	mov	r4, sl
 8024848:	2000      	movs	r0, #0
 802484a:	f04f 0c0a 	mov.w	ip, #10
 802484e:	4621      	mov	r1, r4
 8024850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024854:	3b30      	subs	r3, #48	; 0x30
 8024856:	2b09      	cmp	r3, #9
 8024858:	d94e      	bls.n	80248f8 <_vfiprintf_r+0x1c4>
 802485a:	b1b0      	cbz	r0, 802488a <_vfiprintf_r+0x156>
 802485c:	9207      	str	r2, [sp, #28]
 802485e:	e014      	b.n	802488a <_vfiprintf_r+0x156>
 8024860:	eba0 0308 	sub.w	r3, r0, r8
 8024864:	fa09 f303 	lsl.w	r3, r9, r3
 8024868:	4313      	orrs	r3, r2
 802486a:	9304      	str	r3, [sp, #16]
 802486c:	46a2      	mov	sl, r4
 802486e:	e7d2      	b.n	8024816 <_vfiprintf_r+0xe2>
 8024870:	9b03      	ldr	r3, [sp, #12]
 8024872:	1d19      	adds	r1, r3, #4
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	9103      	str	r1, [sp, #12]
 8024878:	2b00      	cmp	r3, #0
 802487a:	bfbb      	ittet	lt
 802487c:	425b      	neglt	r3, r3
 802487e:	f042 0202 	orrlt.w	r2, r2, #2
 8024882:	9307      	strge	r3, [sp, #28]
 8024884:	9307      	strlt	r3, [sp, #28]
 8024886:	bfb8      	it	lt
 8024888:	9204      	strlt	r2, [sp, #16]
 802488a:	7823      	ldrb	r3, [r4, #0]
 802488c:	2b2e      	cmp	r3, #46	; 0x2e
 802488e:	d10c      	bne.n	80248aa <_vfiprintf_r+0x176>
 8024890:	7863      	ldrb	r3, [r4, #1]
 8024892:	2b2a      	cmp	r3, #42	; 0x2a
 8024894:	d135      	bne.n	8024902 <_vfiprintf_r+0x1ce>
 8024896:	9b03      	ldr	r3, [sp, #12]
 8024898:	1d1a      	adds	r2, r3, #4
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	9203      	str	r2, [sp, #12]
 802489e:	2b00      	cmp	r3, #0
 80248a0:	bfb8      	it	lt
 80248a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80248a6:	3402      	adds	r4, #2
 80248a8:	9305      	str	r3, [sp, #20]
 80248aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024990 <_vfiprintf_r+0x25c>
 80248ae:	7821      	ldrb	r1, [r4, #0]
 80248b0:	2203      	movs	r2, #3
 80248b2:	4650      	mov	r0, sl
 80248b4:	f7db fd2c 	bl	8000310 <memchr>
 80248b8:	b140      	cbz	r0, 80248cc <_vfiprintf_r+0x198>
 80248ba:	2340      	movs	r3, #64	; 0x40
 80248bc:	eba0 000a 	sub.w	r0, r0, sl
 80248c0:	fa03 f000 	lsl.w	r0, r3, r0
 80248c4:	9b04      	ldr	r3, [sp, #16]
 80248c6:	4303      	orrs	r3, r0
 80248c8:	3401      	adds	r4, #1
 80248ca:	9304      	str	r3, [sp, #16]
 80248cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80248d0:	482c      	ldr	r0, [pc, #176]	; (8024984 <_vfiprintf_r+0x250>)
 80248d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80248d6:	2206      	movs	r2, #6
 80248d8:	f7db fd1a 	bl	8000310 <memchr>
 80248dc:	2800      	cmp	r0, #0
 80248de:	d03f      	beq.n	8024960 <_vfiprintf_r+0x22c>
 80248e0:	4b29      	ldr	r3, [pc, #164]	; (8024988 <_vfiprintf_r+0x254>)
 80248e2:	bb1b      	cbnz	r3, 802492c <_vfiprintf_r+0x1f8>
 80248e4:	9b03      	ldr	r3, [sp, #12]
 80248e6:	3307      	adds	r3, #7
 80248e8:	f023 0307 	bic.w	r3, r3, #7
 80248ec:	3308      	adds	r3, #8
 80248ee:	9303      	str	r3, [sp, #12]
 80248f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248f2:	443b      	add	r3, r7
 80248f4:	9309      	str	r3, [sp, #36]	; 0x24
 80248f6:	e767      	b.n	80247c8 <_vfiprintf_r+0x94>
 80248f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80248fc:	460c      	mov	r4, r1
 80248fe:	2001      	movs	r0, #1
 8024900:	e7a5      	b.n	802484e <_vfiprintf_r+0x11a>
 8024902:	2300      	movs	r3, #0
 8024904:	3401      	adds	r4, #1
 8024906:	9305      	str	r3, [sp, #20]
 8024908:	4619      	mov	r1, r3
 802490a:	f04f 0c0a 	mov.w	ip, #10
 802490e:	4620      	mov	r0, r4
 8024910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024914:	3a30      	subs	r2, #48	; 0x30
 8024916:	2a09      	cmp	r2, #9
 8024918:	d903      	bls.n	8024922 <_vfiprintf_r+0x1ee>
 802491a:	2b00      	cmp	r3, #0
 802491c:	d0c5      	beq.n	80248aa <_vfiprintf_r+0x176>
 802491e:	9105      	str	r1, [sp, #20]
 8024920:	e7c3      	b.n	80248aa <_vfiprintf_r+0x176>
 8024922:	fb0c 2101 	mla	r1, ip, r1, r2
 8024926:	4604      	mov	r4, r0
 8024928:	2301      	movs	r3, #1
 802492a:	e7f0      	b.n	802490e <_vfiprintf_r+0x1da>
 802492c:	ab03      	add	r3, sp, #12
 802492e:	9300      	str	r3, [sp, #0]
 8024930:	462a      	mov	r2, r5
 8024932:	4b16      	ldr	r3, [pc, #88]	; (802498c <_vfiprintf_r+0x258>)
 8024934:	a904      	add	r1, sp, #16
 8024936:	4630      	mov	r0, r6
 8024938:	f7fd fdaa 	bl	8022490 <_printf_float>
 802493c:	4607      	mov	r7, r0
 802493e:	1c78      	adds	r0, r7, #1
 8024940:	d1d6      	bne.n	80248f0 <_vfiprintf_r+0x1bc>
 8024942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024944:	07d9      	lsls	r1, r3, #31
 8024946:	d405      	bmi.n	8024954 <_vfiprintf_r+0x220>
 8024948:	89ab      	ldrh	r3, [r5, #12]
 802494a:	059a      	lsls	r2, r3, #22
 802494c:	d402      	bmi.n	8024954 <_vfiprintf_r+0x220>
 802494e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024950:	f7ff feac 	bl	80246ac <__retarget_lock_release_recursive>
 8024954:	89ab      	ldrh	r3, [r5, #12]
 8024956:	065b      	lsls	r3, r3, #25
 8024958:	f53f af12 	bmi.w	8024780 <_vfiprintf_r+0x4c>
 802495c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802495e:	e711      	b.n	8024784 <_vfiprintf_r+0x50>
 8024960:	ab03      	add	r3, sp, #12
 8024962:	9300      	str	r3, [sp, #0]
 8024964:	462a      	mov	r2, r5
 8024966:	4b09      	ldr	r3, [pc, #36]	; (802498c <_vfiprintf_r+0x258>)
 8024968:	a904      	add	r1, sp, #16
 802496a:	4630      	mov	r0, r6
 802496c:	f7fe f81c 	bl	80229a8 <_printf_i>
 8024970:	e7e4      	b.n	802493c <_vfiprintf_r+0x208>
 8024972:	bf00      	nop
 8024974:	08077a64 	.word	0x08077a64
 8024978:	08077a84 	.word	0x08077a84
 802497c:	08077a44 	.word	0x08077a44
 8024980:	080779ec 	.word	0x080779ec
 8024984:	080779f6 	.word	0x080779f6
 8024988:	08022491 	.word	0x08022491
 802498c:	08024711 	.word	0x08024711
 8024990:	080779f2 	.word	0x080779f2

08024994 <__swbuf_r>:
 8024994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024996:	460e      	mov	r6, r1
 8024998:	4614      	mov	r4, r2
 802499a:	4605      	mov	r5, r0
 802499c:	b118      	cbz	r0, 80249a6 <__swbuf_r+0x12>
 802499e:	6983      	ldr	r3, [r0, #24]
 80249a0:	b90b      	cbnz	r3, 80249a6 <__swbuf_r+0x12>
 80249a2:	f000 f9e7 	bl	8024d74 <__sinit>
 80249a6:	4b21      	ldr	r3, [pc, #132]	; (8024a2c <__swbuf_r+0x98>)
 80249a8:	429c      	cmp	r4, r3
 80249aa:	d12b      	bne.n	8024a04 <__swbuf_r+0x70>
 80249ac:	686c      	ldr	r4, [r5, #4]
 80249ae:	69a3      	ldr	r3, [r4, #24]
 80249b0:	60a3      	str	r3, [r4, #8]
 80249b2:	89a3      	ldrh	r3, [r4, #12]
 80249b4:	071a      	lsls	r2, r3, #28
 80249b6:	d52f      	bpl.n	8024a18 <__swbuf_r+0x84>
 80249b8:	6923      	ldr	r3, [r4, #16]
 80249ba:	b36b      	cbz	r3, 8024a18 <__swbuf_r+0x84>
 80249bc:	6923      	ldr	r3, [r4, #16]
 80249be:	6820      	ldr	r0, [r4, #0]
 80249c0:	1ac0      	subs	r0, r0, r3
 80249c2:	6963      	ldr	r3, [r4, #20]
 80249c4:	b2f6      	uxtb	r6, r6
 80249c6:	4283      	cmp	r3, r0
 80249c8:	4637      	mov	r7, r6
 80249ca:	dc04      	bgt.n	80249d6 <__swbuf_r+0x42>
 80249cc:	4621      	mov	r1, r4
 80249ce:	4628      	mov	r0, r5
 80249d0:	f000 f93c 	bl	8024c4c <_fflush_r>
 80249d4:	bb30      	cbnz	r0, 8024a24 <__swbuf_r+0x90>
 80249d6:	68a3      	ldr	r3, [r4, #8]
 80249d8:	3b01      	subs	r3, #1
 80249da:	60a3      	str	r3, [r4, #8]
 80249dc:	6823      	ldr	r3, [r4, #0]
 80249de:	1c5a      	adds	r2, r3, #1
 80249e0:	6022      	str	r2, [r4, #0]
 80249e2:	701e      	strb	r6, [r3, #0]
 80249e4:	6963      	ldr	r3, [r4, #20]
 80249e6:	3001      	adds	r0, #1
 80249e8:	4283      	cmp	r3, r0
 80249ea:	d004      	beq.n	80249f6 <__swbuf_r+0x62>
 80249ec:	89a3      	ldrh	r3, [r4, #12]
 80249ee:	07db      	lsls	r3, r3, #31
 80249f0:	d506      	bpl.n	8024a00 <__swbuf_r+0x6c>
 80249f2:	2e0a      	cmp	r6, #10
 80249f4:	d104      	bne.n	8024a00 <__swbuf_r+0x6c>
 80249f6:	4621      	mov	r1, r4
 80249f8:	4628      	mov	r0, r5
 80249fa:	f000 f927 	bl	8024c4c <_fflush_r>
 80249fe:	b988      	cbnz	r0, 8024a24 <__swbuf_r+0x90>
 8024a00:	4638      	mov	r0, r7
 8024a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024a04:	4b0a      	ldr	r3, [pc, #40]	; (8024a30 <__swbuf_r+0x9c>)
 8024a06:	429c      	cmp	r4, r3
 8024a08:	d101      	bne.n	8024a0e <__swbuf_r+0x7a>
 8024a0a:	68ac      	ldr	r4, [r5, #8]
 8024a0c:	e7cf      	b.n	80249ae <__swbuf_r+0x1a>
 8024a0e:	4b09      	ldr	r3, [pc, #36]	; (8024a34 <__swbuf_r+0xa0>)
 8024a10:	429c      	cmp	r4, r3
 8024a12:	bf08      	it	eq
 8024a14:	68ec      	ldreq	r4, [r5, #12]
 8024a16:	e7ca      	b.n	80249ae <__swbuf_r+0x1a>
 8024a18:	4621      	mov	r1, r4
 8024a1a:	4628      	mov	r0, r5
 8024a1c:	f000 f81a 	bl	8024a54 <__swsetup_r>
 8024a20:	2800      	cmp	r0, #0
 8024a22:	d0cb      	beq.n	80249bc <__swbuf_r+0x28>
 8024a24:	f04f 37ff 	mov.w	r7, #4294967295
 8024a28:	e7ea      	b.n	8024a00 <__swbuf_r+0x6c>
 8024a2a:	bf00      	nop
 8024a2c:	08077a64 	.word	0x08077a64
 8024a30:	08077a84 	.word	0x08077a84
 8024a34:	08077a44 	.word	0x08077a44

08024a38 <__ascii_wctomb>:
 8024a38:	b149      	cbz	r1, 8024a4e <__ascii_wctomb+0x16>
 8024a3a:	2aff      	cmp	r2, #255	; 0xff
 8024a3c:	bf85      	ittet	hi
 8024a3e:	238a      	movhi	r3, #138	; 0x8a
 8024a40:	6003      	strhi	r3, [r0, #0]
 8024a42:	700a      	strbls	r2, [r1, #0]
 8024a44:	f04f 30ff 	movhi.w	r0, #4294967295
 8024a48:	bf98      	it	ls
 8024a4a:	2001      	movls	r0, #1
 8024a4c:	4770      	bx	lr
 8024a4e:	4608      	mov	r0, r1
 8024a50:	4770      	bx	lr
	...

08024a54 <__swsetup_r>:
 8024a54:	4b32      	ldr	r3, [pc, #200]	; (8024b20 <__swsetup_r+0xcc>)
 8024a56:	b570      	push	{r4, r5, r6, lr}
 8024a58:	681d      	ldr	r5, [r3, #0]
 8024a5a:	4606      	mov	r6, r0
 8024a5c:	460c      	mov	r4, r1
 8024a5e:	b125      	cbz	r5, 8024a6a <__swsetup_r+0x16>
 8024a60:	69ab      	ldr	r3, [r5, #24]
 8024a62:	b913      	cbnz	r3, 8024a6a <__swsetup_r+0x16>
 8024a64:	4628      	mov	r0, r5
 8024a66:	f000 f985 	bl	8024d74 <__sinit>
 8024a6a:	4b2e      	ldr	r3, [pc, #184]	; (8024b24 <__swsetup_r+0xd0>)
 8024a6c:	429c      	cmp	r4, r3
 8024a6e:	d10f      	bne.n	8024a90 <__swsetup_r+0x3c>
 8024a70:	686c      	ldr	r4, [r5, #4]
 8024a72:	89a3      	ldrh	r3, [r4, #12]
 8024a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024a78:	0719      	lsls	r1, r3, #28
 8024a7a:	d42c      	bmi.n	8024ad6 <__swsetup_r+0x82>
 8024a7c:	06dd      	lsls	r5, r3, #27
 8024a7e:	d411      	bmi.n	8024aa4 <__swsetup_r+0x50>
 8024a80:	2309      	movs	r3, #9
 8024a82:	6033      	str	r3, [r6, #0]
 8024a84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024a88:	81a3      	strh	r3, [r4, #12]
 8024a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8024a8e:	e03e      	b.n	8024b0e <__swsetup_r+0xba>
 8024a90:	4b25      	ldr	r3, [pc, #148]	; (8024b28 <__swsetup_r+0xd4>)
 8024a92:	429c      	cmp	r4, r3
 8024a94:	d101      	bne.n	8024a9a <__swsetup_r+0x46>
 8024a96:	68ac      	ldr	r4, [r5, #8]
 8024a98:	e7eb      	b.n	8024a72 <__swsetup_r+0x1e>
 8024a9a:	4b24      	ldr	r3, [pc, #144]	; (8024b2c <__swsetup_r+0xd8>)
 8024a9c:	429c      	cmp	r4, r3
 8024a9e:	bf08      	it	eq
 8024aa0:	68ec      	ldreq	r4, [r5, #12]
 8024aa2:	e7e6      	b.n	8024a72 <__swsetup_r+0x1e>
 8024aa4:	0758      	lsls	r0, r3, #29
 8024aa6:	d512      	bpl.n	8024ace <__swsetup_r+0x7a>
 8024aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024aaa:	b141      	cbz	r1, 8024abe <__swsetup_r+0x6a>
 8024aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024ab0:	4299      	cmp	r1, r3
 8024ab2:	d002      	beq.n	8024aba <__swsetup_r+0x66>
 8024ab4:	4630      	mov	r0, r6
 8024ab6:	f7fd fbb1 	bl	802221c <_free_r>
 8024aba:	2300      	movs	r3, #0
 8024abc:	6363      	str	r3, [r4, #52]	; 0x34
 8024abe:	89a3      	ldrh	r3, [r4, #12]
 8024ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024ac4:	81a3      	strh	r3, [r4, #12]
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	6063      	str	r3, [r4, #4]
 8024aca:	6923      	ldr	r3, [r4, #16]
 8024acc:	6023      	str	r3, [r4, #0]
 8024ace:	89a3      	ldrh	r3, [r4, #12]
 8024ad0:	f043 0308 	orr.w	r3, r3, #8
 8024ad4:	81a3      	strh	r3, [r4, #12]
 8024ad6:	6923      	ldr	r3, [r4, #16]
 8024ad8:	b94b      	cbnz	r3, 8024aee <__swsetup_r+0x9a>
 8024ada:	89a3      	ldrh	r3, [r4, #12]
 8024adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024ae4:	d003      	beq.n	8024aee <__swsetup_r+0x9a>
 8024ae6:	4621      	mov	r1, r4
 8024ae8:	4630      	mov	r0, r6
 8024aea:	f000 fa05 	bl	8024ef8 <__smakebuf_r>
 8024aee:	89a0      	ldrh	r0, [r4, #12]
 8024af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024af4:	f010 0301 	ands.w	r3, r0, #1
 8024af8:	d00a      	beq.n	8024b10 <__swsetup_r+0xbc>
 8024afa:	2300      	movs	r3, #0
 8024afc:	60a3      	str	r3, [r4, #8]
 8024afe:	6963      	ldr	r3, [r4, #20]
 8024b00:	425b      	negs	r3, r3
 8024b02:	61a3      	str	r3, [r4, #24]
 8024b04:	6923      	ldr	r3, [r4, #16]
 8024b06:	b943      	cbnz	r3, 8024b1a <__swsetup_r+0xc6>
 8024b08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024b0c:	d1ba      	bne.n	8024a84 <__swsetup_r+0x30>
 8024b0e:	bd70      	pop	{r4, r5, r6, pc}
 8024b10:	0781      	lsls	r1, r0, #30
 8024b12:	bf58      	it	pl
 8024b14:	6963      	ldrpl	r3, [r4, #20]
 8024b16:	60a3      	str	r3, [r4, #8]
 8024b18:	e7f4      	b.n	8024b04 <__swsetup_r+0xb0>
 8024b1a:	2000      	movs	r0, #0
 8024b1c:	e7f7      	b.n	8024b0e <__swsetup_r+0xba>
 8024b1e:	bf00      	nop
 8024b20:	24001b64 	.word	0x24001b64
 8024b24:	08077a64 	.word	0x08077a64
 8024b28:	08077a84 	.word	0x08077a84
 8024b2c:	08077a44 	.word	0x08077a44

08024b30 <abort>:
 8024b30:	b508      	push	{r3, lr}
 8024b32:	2006      	movs	r0, #6
 8024b34:	f000 fa48 	bl	8024fc8 <raise>
 8024b38:	2001      	movs	r0, #1
 8024b3a:	f000 fd9d 	bl	8025678 <_exit>
	...

08024b40 <__sflush_r>:
 8024b40:	898a      	ldrh	r2, [r1, #12]
 8024b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b46:	4605      	mov	r5, r0
 8024b48:	0710      	lsls	r0, r2, #28
 8024b4a:	460c      	mov	r4, r1
 8024b4c:	d458      	bmi.n	8024c00 <__sflush_r+0xc0>
 8024b4e:	684b      	ldr	r3, [r1, #4]
 8024b50:	2b00      	cmp	r3, #0
 8024b52:	dc05      	bgt.n	8024b60 <__sflush_r+0x20>
 8024b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	dc02      	bgt.n	8024b60 <__sflush_r+0x20>
 8024b5a:	2000      	movs	r0, #0
 8024b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024b62:	2e00      	cmp	r6, #0
 8024b64:	d0f9      	beq.n	8024b5a <__sflush_r+0x1a>
 8024b66:	2300      	movs	r3, #0
 8024b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024b6c:	682f      	ldr	r7, [r5, #0]
 8024b6e:	602b      	str	r3, [r5, #0]
 8024b70:	d032      	beq.n	8024bd8 <__sflush_r+0x98>
 8024b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024b74:	89a3      	ldrh	r3, [r4, #12]
 8024b76:	075a      	lsls	r2, r3, #29
 8024b78:	d505      	bpl.n	8024b86 <__sflush_r+0x46>
 8024b7a:	6863      	ldr	r3, [r4, #4]
 8024b7c:	1ac0      	subs	r0, r0, r3
 8024b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024b80:	b10b      	cbz	r3, 8024b86 <__sflush_r+0x46>
 8024b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b84:	1ac0      	subs	r0, r0, r3
 8024b86:	2300      	movs	r3, #0
 8024b88:	4602      	mov	r2, r0
 8024b8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024b8c:	6a21      	ldr	r1, [r4, #32]
 8024b8e:	4628      	mov	r0, r5
 8024b90:	47b0      	blx	r6
 8024b92:	1c43      	adds	r3, r0, #1
 8024b94:	89a3      	ldrh	r3, [r4, #12]
 8024b96:	d106      	bne.n	8024ba6 <__sflush_r+0x66>
 8024b98:	6829      	ldr	r1, [r5, #0]
 8024b9a:	291d      	cmp	r1, #29
 8024b9c:	d82c      	bhi.n	8024bf8 <__sflush_r+0xb8>
 8024b9e:	4a2a      	ldr	r2, [pc, #168]	; (8024c48 <__sflush_r+0x108>)
 8024ba0:	40ca      	lsrs	r2, r1
 8024ba2:	07d6      	lsls	r6, r2, #31
 8024ba4:	d528      	bpl.n	8024bf8 <__sflush_r+0xb8>
 8024ba6:	2200      	movs	r2, #0
 8024ba8:	6062      	str	r2, [r4, #4]
 8024baa:	04d9      	lsls	r1, r3, #19
 8024bac:	6922      	ldr	r2, [r4, #16]
 8024bae:	6022      	str	r2, [r4, #0]
 8024bb0:	d504      	bpl.n	8024bbc <__sflush_r+0x7c>
 8024bb2:	1c42      	adds	r2, r0, #1
 8024bb4:	d101      	bne.n	8024bba <__sflush_r+0x7a>
 8024bb6:	682b      	ldr	r3, [r5, #0]
 8024bb8:	b903      	cbnz	r3, 8024bbc <__sflush_r+0x7c>
 8024bba:	6560      	str	r0, [r4, #84]	; 0x54
 8024bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024bbe:	602f      	str	r7, [r5, #0]
 8024bc0:	2900      	cmp	r1, #0
 8024bc2:	d0ca      	beq.n	8024b5a <__sflush_r+0x1a>
 8024bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024bc8:	4299      	cmp	r1, r3
 8024bca:	d002      	beq.n	8024bd2 <__sflush_r+0x92>
 8024bcc:	4628      	mov	r0, r5
 8024bce:	f7fd fb25 	bl	802221c <_free_r>
 8024bd2:	2000      	movs	r0, #0
 8024bd4:	6360      	str	r0, [r4, #52]	; 0x34
 8024bd6:	e7c1      	b.n	8024b5c <__sflush_r+0x1c>
 8024bd8:	6a21      	ldr	r1, [r4, #32]
 8024bda:	2301      	movs	r3, #1
 8024bdc:	4628      	mov	r0, r5
 8024bde:	47b0      	blx	r6
 8024be0:	1c41      	adds	r1, r0, #1
 8024be2:	d1c7      	bne.n	8024b74 <__sflush_r+0x34>
 8024be4:	682b      	ldr	r3, [r5, #0]
 8024be6:	2b00      	cmp	r3, #0
 8024be8:	d0c4      	beq.n	8024b74 <__sflush_r+0x34>
 8024bea:	2b1d      	cmp	r3, #29
 8024bec:	d001      	beq.n	8024bf2 <__sflush_r+0xb2>
 8024bee:	2b16      	cmp	r3, #22
 8024bf0:	d101      	bne.n	8024bf6 <__sflush_r+0xb6>
 8024bf2:	602f      	str	r7, [r5, #0]
 8024bf4:	e7b1      	b.n	8024b5a <__sflush_r+0x1a>
 8024bf6:	89a3      	ldrh	r3, [r4, #12]
 8024bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024bfc:	81a3      	strh	r3, [r4, #12]
 8024bfe:	e7ad      	b.n	8024b5c <__sflush_r+0x1c>
 8024c00:	690f      	ldr	r7, [r1, #16]
 8024c02:	2f00      	cmp	r7, #0
 8024c04:	d0a9      	beq.n	8024b5a <__sflush_r+0x1a>
 8024c06:	0793      	lsls	r3, r2, #30
 8024c08:	680e      	ldr	r6, [r1, #0]
 8024c0a:	bf08      	it	eq
 8024c0c:	694b      	ldreq	r3, [r1, #20]
 8024c0e:	600f      	str	r7, [r1, #0]
 8024c10:	bf18      	it	ne
 8024c12:	2300      	movne	r3, #0
 8024c14:	eba6 0807 	sub.w	r8, r6, r7
 8024c18:	608b      	str	r3, [r1, #8]
 8024c1a:	f1b8 0f00 	cmp.w	r8, #0
 8024c1e:	dd9c      	ble.n	8024b5a <__sflush_r+0x1a>
 8024c20:	6a21      	ldr	r1, [r4, #32]
 8024c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024c24:	4643      	mov	r3, r8
 8024c26:	463a      	mov	r2, r7
 8024c28:	4628      	mov	r0, r5
 8024c2a:	47b0      	blx	r6
 8024c2c:	2800      	cmp	r0, #0
 8024c2e:	dc06      	bgt.n	8024c3e <__sflush_r+0xfe>
 8024c30:	89a3      	ldrh	r3, [r4, #12]
 8024c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024c36:	81a3      	strh	r3, [r4, #12]
 8024c38:	f04f 30ff 	mov.w	r0, #4294967295
 8024c3c:	e78e      	b.n	8024b5c <__sflush_r+0x1c>
 8024c3e:	4407      	add	r7, r0
 8024c40:	eba8 0800 	sub.w	r8, r8, r0
 8024c44:	e7e9      	b.n	8024c1a <__sflush_r+0xda>
 8024c46:	bf00      	nop
 8024c48:	20400001 	.word	0x20400001

08024c4c <_fflush_r>:
 8024c4c:	b538      	push	{r3, r4, r5, lr}
 8024c4e:	690b      	ldr	r3, [r1, #16]
 8024c50:	4605      	mov	r5, r0
 8024c52:	460c      	mov	r4, r1
 8024c54:	b913      	cbnz	r3, 8024c5c <_fflush_r+0x10>
 8024c56:	2500      	movs	r5, #0
 8024c58:	4628      	mov	r0, r5
 8024c5a:	bd38      	pop	{r3, r4, r5, pc}
 8024c5c:	b118      	cbz	r0, 8024c66 <_fflush_r+0x1a>
 8024c5e:	6983      	ldr	r3, [r0, #24]
 8024c60:	b90b      	cbnz	r3, 8024c66 <_fflush_r+0x1a>
 8024c62:	f000 f887 	bl	8024d74 <__sinit>
 8024c66:	4b14      	ldr	r3, [pc, #80]	; (8024cb8 <_fflush_r+0x6c>)
 8024c68:	429c      	cmp	r4, r3
 8024c6a:	d11b      	bne.n	8024ca4 <_fflush_r+0x58>
 8024c6c:	686c      	ldr	r4, [r5, #4]
 8024c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d0ef      	beq.n	8024c56 <_fflush_r+0xa>
 8024c76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024c78:	07d0      	lsls	r0, r2, #31
 8024c7a:	d404      	bmi.n	8024c86 <_fflush_r+0x3a>
 8024c7c:	0599      	lsls	r1, r3, #22
 8024c7e:	d402      	bmi.n	8024c86 <_fflush_r+0x3a>
 8024c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024c82:	f7ff fd12 	bl	80246aa <__retarget_lock_acquire_recursive>
 8024c86:	4628      	mov	r0, r5
 8024c88:	4621      	mov	r1, r4
 8024c8a:	f7ff ff59 	bl	8024b40 <__sflush_r>
 8024c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024c90:	07da      	lsls	r2, r3, #31
 8024c92:	4605      	mov	r5, r0
 8024c94:	d4e0      	bmi.n	8024c58 <_fflush_r+0xc>
 8024c96:	89a3      	ldrh	r3, [r4, #12]
 8024c98:	059b      	lsls	r3, r3, #22
 8024c9a:	d4dd      	bmi.n	8024c58 <_fflush_r+0xc>
 8024c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024c9e:	f7ff fd05 	bl	80246ac <__retarget_lock_release_recursive>
 8024ca2:	e7d9      	b.n	8024c58 <_fflush_r+0xc>
 8024ca4:	4b05      	ldr	r3, [pc, #20]	; (8024cbc <_fflush_r+0x70>)
 8024ca6:	429c      	cmp	r4, r3
 8024ca8:	d101      	bne.n	8024cae <_fflush_r+0x62>
 8024caa:	68ac      	ldr	r4, [r5, #8]
 8024cac:	e7df      	b.n	8024c6e <_fflush_r+0x22>
 8024cae:	4b04      	ldr	r3, [pc, #16]	; (8024cc0 <_fflush_r+0x74>)
 8024cb0:	429c      	cmp	r4, r3
 8024cb2:	bf08      	it	eq
 8024cb4:	68ec      	ldreq	r4, [r5, #12]
 8024cb6:	e7da      	b.n	8024c6e <_fflush_r+0x22>
 8024cb8:	08077a64 	.word	0x08077a64
 8024cbc:	08077a84 	.word	0x08077a84
 8024cc0:	08077a44 	.word	0x08077a44

08024cc4 <std>:
 8024cc4:	2300      	movs	r3, #0
 8024cc6:	b510      	push	{r4, lr}
 8024cc8:	4604      	mov	r4, r0
 8024cca:	e9c0 3300 	strd	r3, r3, [r0]
 8024cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024cd2:	6083      	str	r3, [r0, #8]
 8024cd4:	8181      	strh	r1, [r0, #12]
 8024cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8024cd8:	81c2      	strh	r2, [r0, #14]
 8024cda:	6183      	str	r3, [r0, #24]
 8024cdc:	4619      	mov	r1, r3
 8024cde:	2208      	movs	r2, #8
 8024ce0:	305c      	adds	r0, #92	; 0x5c
 8024ce2:	f7fd fa93 	bl	802220c <memset>
 8024ce6:	4b05      	ldr	r3, [pc, #20]	; (8024cfc <std+0x38>)
 8024ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8024cea:	4b05      	ldr	r3, [pc, #20]	; (8024d00 <std+0x3c>)
 8024cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8024cee:	4b05      	ldr	r3, [pc, #20]	; (8024d04 <std+0x40>)
 8024cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024cf2:	4b05      	ldr	r3, [pc, #20]	; (8024d08 <std+0x44>)
 8024cf4:	6224      	str	r4, [r4, #32]
 8024cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8024cf8:	bd10      	pop	{r4, pc}
 8024cfa:	bf00      	nop
 8024cfc:	08025001 	.word	0x08025001
 8024d00:	08025023 	.word	0x08025023
 8024d04:	0802505b 	.word	0x0802505b
 8024d08:	0802507f 	.word	0x0802507f

08024d0c <_cleanup_r>:
 8024d0c:	4901      	ldr	r1, [pc, #4]	; (8024d14 <_cleanup_r+0x8>)
 8024d0e:	f000 b8af 	b.w	8024e70 <_fwalk_reent>
 8024d12:	bf00      	nop
 8024d14:	08024c4d 	.word	0x08024c4d

08024d18 <__sfmoreglue>:
 8024d18:	b570      	push	{r4, r5, r6, lr}
 8024d1a:	1e4a      	subs	r2, r1, #1
 8024d1c:	2568      	movs	r5, #104	; 0x68
 8024d1e:	4355      	muls	r5, r2
 8024d20:	460e      	mov	r6, r1
 8024d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024d26:	f7fd fac9 	bl	80222bc <_malloc_r>
 8024d2a:	4604      	mov	r4, r0
 8024d2c:	b140      	cbz	r0, 8024d40 <__sfmoreglue+0x28>
 8024d2e:	2100      	movs	r1, #0
 8024d30:	e9c0 1600 	strd	r1, r6, [r0]
 8024d34:	300c      	adds	r0, #12
 8024d36:	60a0      	str	r0, [r4, #8]
 8024d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024d3c:	f7fd fa66 	bl	802220c <memset>
 8024d40:	4620      	mov	r0, r4
 8024d42:	bd70      	pop	{r4, r5, r6, pc}

08024d44 <__sfp_lock_acquire>:
 8024d44:	4801      	ldr	r0, [pc, #4]	; (8024d4c <__sfp_lock_acquire+0x8>)
 8024d46:	f7ff bcb0 	b.w	80246aa <__retarget_lock_acquire_recursive>
 8024d4a:	bf00      	nop
 8024d4c:	3000fa7c 	.word	0x3000fa7c

08024d50 <__sfp_lock_release>:
 8024d50:	4801      	ldr	r0, [pc, #4]	; (8024d58 <__sfp_lock_release+0x8>)
 8024d52:	f7ff bcab 	b.w	80246ac <__retarget_lock_release_recursive>
 8024d56:	bf00      	nop
 8024d58:	3000fa7c 	.word	0x3000fa7c

08024d5c <__sinit_lock_acquire>:
 8024d5c:	4801      	ldr	r0, [pc, #4]	; (8024d64 <__sinit_lock_acquire+0x8>)
 8024d5e:	f7ff bca4 	b.w	80246aa <__retarget_lock_acquire_recursive>
 8024d62:	bf00      	nop
 8024d64:	3000fa77 	.word	0x3000fa77

08024d68 <__sinit_lock_release>:
 8024d68:	4801      	ldr	r0, [pc, #4]	; (8024d70 <__sinit_lock_release+0x8>)
 8024d6a:	f7ff bc9f 	b.w	80246ac <__retarget_lock_release_recursive>
 8024d6e:	bf00      	nop
 8024d70:	3000fa77 	.word	0x3000fa77

08024d74 <__sinit>:
 8024d74:	b510      	push	{r4, lr}
 8024d76:	4604      	mov	r4, r0
 8024d78:	f7ff fff0 	bl	8024d5c <__sinit_lock_acquire>
 8024d7c:	69a3      	ldr	r3, [r4, #24]
 8024d7e:	b11b      	cbz	r3, 8024d88 <__sinit+0x14>
 8024d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d84:	f7ff bff0 	b.w	8024d68 <__sinit_lock_release>
 8024d88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024d8c:	6523      	str	r3, [r4, #80]	; 0x50
 8024d8e:	4b13      	ldr	r3, [pc, #76]	; (8024ddc <__sinit+0x68>)
 8024d90:	4a13      	ldr	r2, [pc, #76]	; (8024de0 <__sinit+0x6c>)
 8024d92:	681b      	ldr	r3, [r3, #0]
 8024d94:	62a2      	str	r2, [r4, #40]	; 0x28
 8024d96:	42a3      	cmp	r3, r4
 8024d98:	bf04      	itt	eq
 8024d9a:	2301      	moveq	r3, #1
 8024d9c:	61a3      	streq	r3, [r4, #24]
 8024d9e:	4620      	mov	r0, r4
 8024da0:	f000 f820 	bl	8024de4 <__sfp>
 8024da4:	6060      	str	r0, [r4, #4]
 8024da6:	4620      	mov	r0, r4
 8024da8:	f000 f81c 	bl	8024de4 <__sfp>
 8024dac:	60a0      	str	r0, [r4, #8]
 8024dae:	4620      	mov	r0, r4
 8024db0:	f000 f818 	bl	8024de4 <__sfp>
 8024db4:	2200      	movs	r2, #0
 8024db6:	60e0      	str	r0, [r4, #12]
 8024db8:	2104      	movs	r1, #4
 8024dba:	6860      	ldr	r0, [r4, #4]
 8024dbc:	f7ff ff82 	bl	8024cc4 <std>
 8024dc0:	68a0      	ldr	r0, [r4, #8]
 8024dc2:	2201      	movs	r2, #1
 8024dc4:	2109      	movs	r1, #9
 8024dc6:	f7ff ff7d 	bl	8024cc4 <std>
 8024dca:	68e0      	ldr	r0, [r4, #12]
 8024dcc:	2202      	movs	r2, #2
 8024dce:	2112      	movs	r1, #18
 8024dd0:	f7ff ff78 	bl	8024cc4 <std>
 8024dd4:	2301      	movs	r3, #1
 8024dd6:	61a3      	str	r3, [r4, #24]
 8024dd8:	e7d2      	b.n	8024d80 <__sinit+0xc>
 8024dda:	bf00      	nop
 8024ddc:	080777c4 	.word	0x080777c4
 8024de0:	08024d0d 	.word	0x08024d0d

08024de4 <__sfp>:
 8024de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024de6:	4607      	mov	r7, r0
 8024de8:	f7ff ffac 	bl	8024d44 <__sfp_lock_acquire>
 8024dec:	4b1e      	ldr	r3, [pc, #120]	; (8024e68 <__sfp+0x84>)
 8024dee:	681e      	ldr	r6, [r3, #0]
 8024df0:	69b3      	ldr	r3, [r6, #24]
 8024df2:	b913      	cbnz	r3, 8024dfa <__sfp+0x16>
 8024df4:	4630      	mov	r0, r6
 8024df6:	f7ff ffbd 	bl	8024d74 <__sinit>
 8024dfa:	3648      	adds	r6, #72	; 0x48
 8024dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024e00:	3b01      	subs	r3, #1
 8024e02:	d503      	bpl.n	8024e0c <__sfp+0x28>
 8024e04:	6833      	ldr	r3, [r6, #0]
 8024e06:	b30b      	cbz	r3, 8024e4c <__sfp+0x68>
 8024e08:	6836      	ldr	r6, [r6, #0]
 8024e0a:	e7f7      	b.n	8024dfc <__sfp+0x18>
 8024e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024e10:	b9d5      	cbnz	r5, 8024e48 <__sfp+0x64>
 8024e12:	4b16      	ldr	r3, [pc, #88]	; (8024e6c <__sfp+0x88>)
 8024e14:	60e3      	str	r3, [r4, #12]
 8024e16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024e1a:	6665      	str	r5, [r4, #100]	; 0x64
 8024e1c:	f7ff fc44 	bl	80246a8 <__retarget_lock_init_recursive>
 8024e20:	f7ff ff96 	bl	8024d50 <__sfp_lock_release>
 8024e24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024e28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024e2c:	6025      	str	r5, [r4, #0]
 8024e2e:	61a5      	str	r5, [r4, #24]
 8024e30:	2208      	movs	r2, #8
 8024e32:	4629      	mov	r1, r5
 8024e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024e38:	f7fd f9e8 	bl	802220c <memset>
 8024e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024e44:	4620      	mov	r0, r4
 8024e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e48:	3468      	adds	r4, #104	; 0x68
 8024e4a:	e7d9      	b.n	8024e00 <__sfp+0x1c>
 8024e4c:	2104      	movs	r1, #4
 8024e4e:	4638      	mov	r0, r7
 8024e50:	f7ff ff62 	bl	8024d18 <__sfmoreglue>
 8024e54:	4604      	mov	r4, r0
 8024e56:	6030      	str	r0, [r6, #0]
 8024e58:	2800      	cmp	r0, #0
 8024e5a:	d1d5      	bne.n	8024e08 <__sfp+0x24>
 8024e5c:	f7ff ff78 	bl	8024d50 <__sfp_lock_release>
 8024e60:	230c      	movs	r3, #12
 8024e62:	603b      	str	r3, [r7, #0]
 8024e64:	e7ee      	b.n	8024e44 <__sfp+0x60>
 8024e66:	bf00      	nop
 8024e68:	080777c4 	.word	0x080777c4
 8024e6c:	ffff0001 	.word	0xffff0001

08024e70 <_fwalk_reent>:
 8024e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024e74:	4606      	mov	r6, r0
 8024e76:	4688      	mov	r8, r1
 8024e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024e7c:	2700      	movs	r7, #0
 8024e7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024e82:	f1b9 0901 	subs.w	r9, r9, #1
 8024e86:	d505      	bpl.n	8024e94 <_fwalk_reent+0x24>
 8024e88:	6824      	ldr	r4, [r4, #0]
 8024e8a:	2c00      	cmp	r4, #0
 8024e8c:	d1f7      	bne.n	8024e7e <_fwalk_reent+0xe>
 8024e8e:	4638      	mov	r0, r7
 8024e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e94:	89ab      	ldrh	r3, [r5, #12]
 8024e96:	2b01      	cmp	r3, #1
 8024e98:	d907      	bls.n	8024eaa <_fwalk_reent+0x3a>
 8024e9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024e9e:	3301      	adds	r3, #1
 8024ea0:	d003      	beq.n	8024eaa <_fwalk_reent+0x3a>
 8024ea2:	4629      	mov	r1, r5
 8024ea4:	4630      	mov	r0, r6
 8024ea6:	47c0      	blx	r8
 8024ea8:	4307      	orrs	r7, r0
 8024eaa:	3568      	adds	r5, #104	; 0x68
 8024eac:	e7e9      	b.n	8024e82 <_fwalk_reent+0x12>

08024eae <__swhatbuf_r>:
 8024eae:	b570      	push	{r4, r5, r6, lr}
 8024eb0:	460e      	mov	r6, r1
 8024eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024eb6:	2900      	cmp	r1, #0
 8024eb8:	b096      	sub	sp, #88	; 0x58
 8024eba:	4614      	mov	r4, r2
 8024ebc:	461d      	mov	r5, r3
 8024ebe:	da07      	bge.n	8024ed0 <__swhatbuf_r+0x22>
 8024ec0:	2300      	movs	r3, #0
 8024ec2:	602b      	str	r3, [r5, #0]
 8024ec4:	89b3      	ldrh	r3, [r6, #12]
 8024ec6:	061a      	lsls	r2, r3, #24
 8024ec8:	d410      	bmi.n	8024eec <__swhatbuf_r+0x3e>
 8024eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024ece:	e00e      	b.n	8024eee <__swhatbuf_r+0x40>
 8024ed0:	466a      	mov	r2, sp
 8024ed2:	f000 f8fb 	bl	80250cc <_fstat_r>
 8024ed6:	2800      	cmp	r0, #0
 8024ed8:	dbf2      	blt.n	8024ec0 <__swhatbuf_r+0x12>
 8024eda:	9a01      	ldr	r2, [sp, #4]
 8024edc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024ee0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024ee4:	425a      	negs	r2, r3
 8024ee6:	415a      	adcs	r2, r3
 8024ee8:	602a      	str	r2, [r5, #0]
 8024eea:	e7ee      	b.n	8024eca <__swhatbuf_r+0x1c>
 8024eec:	2340      	movs	r3, #64	; 0x40
 8024eee:	2000      	movs	r0, #0
 8024ef0:	6023      	str	r3, [r4, #0]
 8024ef2:	b016      	add	sp, #88	; 0x58
 8024ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08024ef8 <__smakebuf_r>:
 8024ef8:	898b      	ldrh	r3, [r1, #12]
 8024efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024efc:	079d      	lsls	r5, r3, #30
 8024efe:	4606      	mov	r6, r0
 8024f00:	460c      	mov	r4, r1
 8024f02:	d507      	bpl.n	8024f14 <__smakebuf_r+0x1c>
 8024f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024f08:	6023      	str	r3, [r4, #0]
 8024f0a:	6123      	str	r3, [r4, #16]
 8024f0c:	2301      	movs	r3, #1
 8024f0e:	6163      	str	r3, [r4, #20]
 8024f10:	b002      	add	sp, #8
 8024f12:	bd70      	pop	{r4, r5, r6, pc}
 8024f14:	ab01      	add	r3, sp, #4
 8024f16:	466a      	mov	r2, sp
 8024f18:	f7ff ffc9 	bl	8024eae <__swhatbuf_r>
 8024f1c:	9900      	ldr	r1, [sp, #0]
 8024f1e:	4605      	mov	r5, r0
 8024f20:	4630      	mov	r0, r6
 8024f22:	f7fd f9cb 	bl	80222bc <_malloc_r>
 8024f26:	b948      	cbnz	r0, 8024f3c <__smakebuf_r+0x44>
 8024f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f2c:	059a      	lsls	r2, r3, #22
 8024f2e:	d4ef      	bmi.n	8024f10 <__smakebuf_r+0x18>
 8024f30:	f023 0303 	bic.w	r3, r3, #3
 8024f34:	f043 0302 	orr.w	r3, r3, #2
 8024f38:	81a3      	strh	r3, [r4, #12]
 8024f3a:	e7e3      	b.n	8024f04 <__smakebuf_r+0xc>
 8024f3c:	4b0d      	ldr	r3, [pc, #52]	; (8024f74 <__smakebuf_r+0x7c>)
 8024f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8024f40:	89a3      	ldrh	r3, [r4, #12]
 8024f42:	6020      	str	r0, [r4, #0]
 8024f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024f48:	81a3      	strh	r3, [r4, #12]
 8024f4a:	9b00      	ldr	r3, [sp, #0]
 8024f4c:	6163      	str	r3, [r4, #20]
 8024f4e:	9b01      	ldr	r3, [sp, #4]
 8024f50:	6120      	str	r0, [r4, #16]
 8024f52:	b15b      	cbz	r3, 8024f6c <__smakebuf_r+0x74>
 8024f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024f58:	4630      	mov	r0, r6
 8024f5a:	f000 f8c9 	bl	80250f0 <_isatty_r>
 8024f5e:	b128      	cbz	r0, 8024f6c <__smakebuf_r+0x74>
 8024f60:	89a3      	ldrh	r3, [r4, #12]
 8024f62:	f023 0303 	bic.w	r3, r3, #3
 8024f66:	f043 0301 	orr.w	r3, r3, #1
 8024f6a:	81a3      	strh	r3, [r4, #12]
 8024f6c:	89a0      	ldrh	r0, [r4, #12]
 8024f6e:	4305      	orrs	r5, r0
 8024f70:	81a5      	strh	r5, [r4, #12]
 8024f72:	e7cd      	b.n	8024f10 <__smakebuf_r+0x18>
 8024f74:	08024d0d 	.word	0x08024d0d

08024f78 <_raise_r>:
 8024f78:	291f      	cmp	r1, #31
 8024f7a:	b538      	push	{r3, r4, r5, lr}
 8024f7c:	4604      	mov	r4, r0
 8024f7e:	460d      	mov	r5, r1
 8024f80:	d904      	bls.n	8024f8c <_raise_r+0x14>
 8024f82:	2316      	movs	r3, #22
 8024f84:	6003      	str	r3, [r0, #0]
 8024f86:	f04f 30ff 	mov.w	r0, #4294967295
 8024f8a:	bd38      	pop	{r3, r4, r5, pc}
 8024f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024f8e:	b112      	cbz	r2, 8024f96 <_raise_r+0x1e>
 8024f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024f94:	b94b      	cbnz	r3, 8024faa <_raise_r+0x32>
 8024f96:	4620      	mov	r0, r4
 8024f98:	f000 f830 	bl	8024ffc <_getpid_r>
 8024f9c:	462a      	mov	r2, r5
 8024f9e:	4601      	mov	r1, r0
 8024fa0:	4620      	mov	r0, r4
 8024fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024fa6:	f000 b817 	b.w	8024fd8 <_kill_r>
 8024faa:	2b01      	cmp	r3, #1
 8024fac:	d00a      	beq.n	8024fc4 <_raise_r+0x4c>
 8024fae:	1c59      	adds	r1, r3, #1
 8024fb0:	d103      	bne.n	8024fba <_raise_r+0x42>
 8024fb2:	2316      	movs	r3, #22
 8024fb4:	6003      	str	r3, [r0, #0]
 8024fb6:	2001      	movs	r0, #1
 8024fb8:	e7e7      	b.n	8024f8a <_raise_r+0x12>
 8024fba:	2400      	movs	r4, #0
 8024fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024fc0:	4628      	mov	r0, r5
 8024fc2:	4798      	blx	r3
 8024fc4:	2000      	movs	r0, #0
 8024fc6:	e7e0      	b.n	8024f8a <_raise_r+0x12>

08024fc8 <raise>:
 8024fc8:	4b02      	ldr	r3, [pc, #8]	; (8024fd4 <raise+0xc>)
 8024fca:	4601      	mov	r1, r0
 8024fcc:	6818      	ldr	r0, [r3, #0]
 8024fce:	f7ff bfd3 	b.w	8024f78 <_raise_r>
 8024fd2:	bf00      	nop
 8024fd4:	24001b64 	.word	0x24001b64

08024fd8 <_kill_r>:
 8024fd8:	b538      	push	{r3, r4, r5, lr}
 8024fda:	4d07      	ldr	r5, [pc, #28]	; (8024ff8 <_kill_r+0x20>)
 8024fdc:	2300      	movs	r3, #0
 8024fde:	4604      	mov	r4, r0
 8024fe0:	4608      	mov	r0, r1
 8024fe2:	4611      	mov	r1, r2
 8024fe4:	602b      	str	r3, [r5, #0]
 8024fe6:	f000 fb19 	bl	802561c <_kill>
 8024fea:	1c43      	adds	r3, r0, #1
 8024fec:	d102      	bne.n	8024ff4 <_kill_r+0x1c>
 8024fee:	682b      	ldr	r3, [r5, #0]
 8024ff0:	b103      	cbz	r3, 8024ff4 <_kill_r+0x1c>
 8024ff2:	6023      	str	r3, [r4, #0]
 8024ff4:	bd38      	pop	{r3, r4, r5, pc}
 8024ff6:	bf00      	nop
 8024ff8:	3000fa70 	.word	0x3000fa70

08024ffc <_getpid_r>:
 8024ffc:	f000 bafe 	b.w	80255fc <_getpid>

08025000 <__sread>:
 8025000:	b510      	push	{r4, lr}
 8025002:	460c      	mov	r4, r1
 8025004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025008:	f000 f894 	bl	8025134 <_read_r>
 802500c:	2800      	cmp	r0, #0
 802500e:	bfab      	itete	ge
 8025010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025012:	89a3      	ldrhlt	r3, [r4, #12]
 8025014:	181b      	addge	r3, r3, r0
 8025016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802501a:	bfac      	ite	ge
 802501c:	6563      	strge	r3, [r4, #84]	; 0x54
 802501e:	81a3      	strhlt	r3, [r4, #12]
 8025020:	bd10      	pop	{r4, pc}

08025022 <__swrite>:
 8025022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025026:	461f      	mov	r7, r3
 8025028:	898b      	ldrh	r3, [r1, #12]
 802502a:	05db      	lsls	r3, r3, #23
 802502c:	4605      	mov	r5, r0
 802502e:	460c      	mov	r4, r1
 8025030:	4616      	mov	r6, r2
 8025032:	d505      	bpl.n	8025040 <__swrite+0x1e>
 8025034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025038:	2302      	movs	r3, #2
 802503a:	2200      	movs	r2, #0
 802503c:	f000 f868 	bl	8025110 <_lseek_r>
 8025040:	89a3      	ldrh	r3, [r4, #12]
 8025042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802504a:	81a3      	strh	r3, [r4, #12]
 802504c:	4632      	mov	r2, r6
 802504e:	463b      	mov	r3, r7
 8025050:	4628      	mov	r0, r5
 8025052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025056:	f000 b817 	b.w	8025088 <_write_r>

0802505a <__sseek>:
 802505a:	b510      	push	{r4, lr}
 802505c:	460c      	mov	r4, r1
 802505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025062:	f000 f855 	bl	8025110 <_lseek_r>
 8025066:	1c43      	adds	r3, r0, #1
 8025068:	89a3      	ldrh	r3, [r4, #12]
 802506a:	bf15      	itete	ne
 802506c:	6560      	strne	r0, [r4, #84]	; 0x54
 802506e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025076:	81a3      	strheq	r3, [r4, #12]
 8025078:	bf18      	it	ne
 802507a:	81a3      	strhne	r3, [r4, #12]
 802507c:	bd10      	pop	{r4, pc}

0802507e <__sclose>:
 802507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025082:	f000 b813 	b.w	80250ac <_close_r>
	...

08025088 <_write_r>:
 8025088:	b538      	push	{r3, r4, r5, lr}
 802508a:	4d07      	ldr	r5, [pc, #28]	; (80250a8 <_write_r+0x20>)
 802508c:	4604      	mov	r4, r0
 802508e:	4608      	mov	r0, r1
 8025090:	4611      	mov	r1, r2
 8025092:	2200      	movs	r2, #0
 8025094:	602a      	str	r2, [r5, #0]
 8025096:	461a      	mov	r2, r3
 8025098:	f000 fae6 	bl	8025668 <_write>
 802509c:	1c43      	adds	r3, r0, #1
 802509e:	d102      	bne.n	80250a6 <_write_r+0x1e>
 80250a0:	682b      	ldr	r3, [r5, #0]
 80250a2:	b103      	cbz	r3, 80250a6 <_write_r+0x1e>
 80250a4:	6023      	str	r3, [r4, #0]
 80250a6:	bd38      	pop	{r3, r4, r5, pc}
 80250a8:	3000fa70 	.word	0x3000fa70

080250ac <_close_r>:
 80250ac:	b538      	push	{r3, r4, r5, lr}
 80250ae:	4d06      	ldr	r5, [pc, #24]	; (80250c8 <_close_r+0x1c>)
 80250b0:	2300      	movs	r3, #0
 80250b2:	4604      	mov	r4, r0
 80250b4:	4608      	mov	r0, r1
 80250b6:	602b      	str	r3, [r5, #0]
 80250b8:	f000 fa90 	bl	80255dc <_close>
 80250bc:	1c43      	adds	r3, r0, #1
 80250be:	d102      	bne.n	80250c6 <_close_r+0x1a>
 80250c0:	682b      	ldr	r3, [r5, #0]
 80250c2:	b103      	cbz	r3, 80250c6 <_close_r+0x1a>
 80250c4:	6023      	str	r3, [r4, #0]
 80250c6:	bd38      	pop	{r3, r4, r5, pc}
 80250c8:	3000fa70 	.word	0x3000fa70

080250cc <_fstat_r>:
 80250cc:	b538      	push	{r3, r4, r5, lr}
 80250ce:	4d07      	ldr	r5, [pc, #28]	; (80250ec <_fstat_r+0x20>)
 80250d0:	2300      	movs	r3, #0
 80250d2:	4604      	mov	r4, r0
 80250d4:	4608      	mov	r0, r1
 80250d6:	4611      	mov	r1, r2
 80250d8:	602b      	str	r3, [r5, #0]
 80250da:	f000 fa87 	bl	80255ec <_fstat>
 80250de:	1c43      	adds	r3, r0, #1
 80250e0:	d102      	bne.n	80250e8 <_fstat_r+0x1c>
 80250e2:	682b      	ldr	r3, [r5, #0]
 80250e4:	b103      	cbz	r3, 80250e8 <_fstat_r+0x1c>
 80250e6:	6023      	str	r3, [r4, #0]
 80250e8:	bd38      	pop	{r3, r4, r5, pc}
 80250ea:	bf00      	nop
 80250ec:	3000fa70 	.word	0x3000fa70

080250f0 <_isatty_r>:
 80250f0:	b538      	push	{r3, r4, r5, lr}
 80250f2:	4d06      	ldr	r5, [pc, #24]	; (802510c <_isatty_r+0x1c>)
 80250f4:	2300      	movs	r3, #0
 80250f6:	4604      	mov	r4, r0
 80250f8:	4608      	mov	r0, r1
 80250fa:	602b      	str	r3, [r5, #0]
 80250fc:	f000 fa86 	bl	802560c <_isatty>
 8025100:	1c43      	adds	r3, r0, #1
 8025102:	d102      	bne.n	802510a <_isatty_r+0x1a>
 8025104:	682b      	ldr	r3, [r5, #0]
 8025106:	b103      	cbz	r3, 802510a <_isatty_r+0x1a>
 8025108:	6023      	str	r3, [r4, #0]
 802510a:	bd38      	pop	{r3, r4, r5, pc}
 802510c:	3000fa70 	.word	0x3000fa70

08025110 <_lseek_r>:
 8025110:	b538      	push	{r3, r4, r5, lr}
 8025112:	4d07      	ldr	r5, [pc, #28]	; (8025130 <_lseek_r+0x20>)
 8025114:	4604      	mov	r4, r0
 8025116:	4608      	mov	r0, r1
 8025118:	4611      	mov	r1, r2
 802511a:	2200      	movs	r2, #0
 802511c:	602a      	str	r2, [r5, #0]
 802511e:	461a      	mov	r2, r3
 8025120:	f000 fa84 	bl	802562c <_lseek>
 8025124:	1c43      	adds	r3, r0, #1
 8025126:	d102      	bne.n	802512e <_lseek_r+0x1e>
 8025128:	682b      	ldr	r3, [r5, #0]
 802512a:	b103      	cbz	r3, 802512e <_lseek_r+0x1e>
 802512c:	6023      	str	r3, [r4, #0]
 802512e:	bd38      	pop	{r3, r4, r5, pc}
 8025130:	3000fa70 	.word	0x3000fa70

08025134 <_read_r>:
 8025134:	b538      	push	{r3, r4, r5, lr}
 8025136:	4d07      	ldr	r5, [pc, #28]	; (8025154 <_read_r+0x20>)
 8025138:	4604      	mov	r4, r0
 802513a:	4608      	mov	r0, r1
 802513c:	4611      	mov	r1, r2
 802513e:	2200      	movs	r2, #0
 8025140:	602a      	str	r2, [r5, #0]
 8025142:	461a      	mov	r2, r3
 8025144:	f000 fa7a 	bl	802563c <_read>
 8025148:	1c43      	adds	r3, r0, #1
 802514a:	d102      	bne.n	8025152 <_read_r+0x1e>
 802514c:	682b      	ldr	r3, [r5, #0]
 802514e:	b103      	cbz	r3, 8025152 <_read_r+0x1e>
 8025150:	6023      	str	r3, [r4, #0]
 8025152:	bd38      	pop	{r3, r4, r5, pc}
 8025154:	3000fa70 	.word	0x3000fa70

08025158 <with_errnof>:
 8025158:	b513      	push	{r0, r1, r4, lr}
 802515a:	4604      	mov	r4, r0
 802515c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025160:	f000 fa36 	bl	80255d0 <__errno>
 8025164:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025168:	6004      	str	r4, [r0, #0]
 802516a:	b002      	add	sp, #8
 802516c:	bd10      	pop	{r4, pc}

0802516e <xflowf>:
 802516e:	b130      	cbz	r0, 802517e <xflowf+0x10>
 8025170:	eef1 7a40 	vneg.f32	s15, s0
 8025174:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025178:	2022      	movs	r0, #34	; 0x22
 802517a:	f7ff bfed 	b.w	8025158 <with_errnof>
 802517e:	eef0 7a40 	vmov.f32	s15, s0
 8025182:	e7f7      	b.n	8025174 <xflowf+0x6>

08025184 <__math_uflowf>:
 8025184:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802518c <__math_uflowf+0x8>
 8025188:	f7ff bff1 	b.w	802516e <xflowf>
 802518c:	10000000 	.word	0x10000000

08025190 <__math_may_uflowf>:
 8025190:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025198 <__math_may_uflowf+0x8>
 8025194:	f7ff bfeb 	b.w	802516e <xflowf>
 8025198:	1a200000 	.word	0x1a200000

0802519c <__math_oflowf>:
 802519c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80251a4 <__math_oflowf+0x8>
 80251a0:	f7ff bfe5 	b.w	802516e <xflowf>
 80251a4:	70000000 	.word	0x70000000

080251a8 <__math_divzerof>:
 80251a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80251ac:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80251b0:	2800      	cmp	r0, #0
 80251b2:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80251b6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80251c4 <__math_divzerof+0x1c>
 80251ba:	2022      	movs	r0, #34	; 0x22
 80251bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80251c0:	f7ff bfca 	b.w	8025158 <with_errnof>
 80251c4:	00000000 	.word	0x00000000

080251c8 <__math_invalidf>:
 80251c8:	eef0 7a40 	vmov.f32	s15, s0
 80251cc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80251d0:	eef4 7a67 	vcmp.f32	s15, s15
 80251d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251d8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80251dc:	d602      	bvs.n	80251e4 <__math_invalidf+0x1c>
 80251de:	2021      	movs	r0, #33	; 0x21
 80251e0:	f7ff bfba 	b.w	8025158 <with_errnof>
 80251e4:	4770      	bx	lr
	...

080251e8 <expf>:
 80251e8:	ee10 2a10 	vmov	r2, s0
 80251ec:	b470      	push	{r4, r5, r6}
 80251ee:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80251f2:	f240 442a 	movw	r4, #1066	; 0x42a
 80251f6:	42a3      	cmp	r3, r4
 80251f8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80251fc:	d92a      	bls.n	8025254 <expf+0x6c>
 80251fe:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8025202:	d059      	beq.n	80252b8 <expf+0xd0>
 8025204:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8025208:	d303      	bcc.n	8025212 <expf+0x2a>
 802520a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802520e:	bc70      	pop	{r4, r5, r6}
 8025210:	4770      	bx	lr
 8025212:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80252c0 <expf+0xd8>
 8025216:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802521e:	dd03      	ble.n	8025228 <expf+0x40>
 8025220:	bc70      	pop	{r4, r5, r6}
 8025222:	2000      	movs	r0, #0
 8025224:	f7ff bfba 	b.w	802519c <__math_oflowf>
 8025228:	eddf 7a26 	vldr	s15, [pc, #152]	; 80252c4 <expf+0xdc>
 802522c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025234:	d503      	bpl.n	802523e <expf+0x56>
 8025236:	bc70      	pop	{r4, r5, r6}
 8025238:	2000      	movs	r0, #0
 802523a:	f7ff bfa3 	b.w	8025184 <__math_uflowf>
 802523e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80252c8 <expf+0xe0>
 8025242:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802524a:	d503      	bpl.n	8025254 <expf+0x6c>
 802524c:	bc70      	pop	{r4, r5, r6}
 802524e:	2000      	movs	r0, #0
 8025250:	f7ff bf9e 	b.w	8025190 <__math_may_uflowf>
 8025254:	4b1d      	ldr	r3, [pc, #116]	; (80252cc <expf+0xe4>)
 8025256:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802525a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 802525e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8025262:	eeb0 7b44 	vmov.f64	d7, d4
 8025266:	eea5 7b06 	vfma.f64	d7, d5, d6
 802526a:	ee17 5a10 	vmov	r5, s14
 802526e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8025272:	f005 021f 	and.w	r2, r5, #31
 8025276:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802527a:	e9d2 4600 	ldrd	r4, r6, [r2]
 802527e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8025282:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 8025286:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 802528a:	eea4 0b07 	vfma.f64	d0, d4, d7
 802528e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8025292:	2300      	movs	r3, #0
 8025294:	1918      	adds	r0, r3, r4
 8025296:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 802529a:	eb42 0106 	adc.w	r1, r2, r6
 802529e:	eea5 6b07 	vfma.f64	d6, d5, d7
 80252a2:	ee27 5b07 	vmul.f64	d5, d7, d7
 80252a6:	ec41 0b17 	vmov	d7, r0, r1
 80252aa:	eea6 0b05 	vfma.f64	d0, d6, d5
 80252ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 80252b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80252b6:	e7aa      	b.n	802520e <expf+0x26>
 80252b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80252d0 <expf+0xe8>
 80252bc:	e7a7      	b.n	802520e <expf+0x26>
 80252be:	bf00      	nop
 80252c0:	42b17217 	.word	0x42b17217
 80252c4:	c2cff1b4 	.word	0xc2cff1b4
 80252c8:	c2ce8ecf 	.word	0xc2ce8ecf
 80252cc:	08077aa8 	.word	0x08077aa8
 80252d0:	00000000 	.word	0x00000000

080252d4 <checkint>:
 80252d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80252d8:	2b7e      	cmp	r3, #126	; 0x7e
 80252da:	dd10      	ble.n	80252fe <checkint+0x2a>
 80252dc:	2b96      	cmp	r3, #150	; 0x96
 80252de:	dc0c      	bgt.n	80252fa <checkint+0x26>
 80252e0:	2201      	movs	r2, #1
 80252e2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80252e6:	fa02 f303 	lsl.w	r3, r2, r3
 80252ea:	1e5a      	subs	r2, r3, #1
 80252ec:	4202      	tst	r2, r0
 80252ee:	d106      	bne.n	80252fe <checkint+0x2a>
 80252f0:	4203      	tst	r3, r0
 80252f2:	bf0c      	ite	eq
 80252f4:	2002      	moveq	r0, #2
 80252f6:	2001      	movne	r0, #1
 80252f8:	4770      	bx	lr
 80252fa:	2002      	movs	r0, #2
 80252fc:	4770      	bx	lr
 80252fe:	2000      	movs	r0, #0
 8025300:	4770      	bx	lr
 8025302:	0000      	movs	r0, r0
 8025304:	0000      	movs	r0, r0
	...

08025308 <powf>:
 8025308:	b5f0      	push	{r4, r5, r6, r7, lr}
 802530a:	ee10 1a10 	vmov	r1, s0
 802530e:	ee10 6a90 	vmov	r6, s1
 8025312:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8025316:	0072      	lsls	r2, r6, #1
 8025318:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802531c:	b085      	sub	sp, #20
 802531e:	f102 30ff 	add.w	r0, r2, #4294967295
 8025322:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8025326:	d256      	bcs.n	80253d6 <powf+0xce>
 8025328:	4298      	cmp	r0, r3
 802532a:	d256      	bcs.n	80253da <powf+0xd2>
 802532c:	2000      	movs	r0, #0
 802532e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8025332:	4ea3      	ldr	r6, [pc, #652]	; (80255c0 <powf+0x2b8>)
 8025334:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8025338:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 802533c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8025340:	0dd2      	lsrs	r2, r2, #23
 8025342:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8025346:	05d2      	lsls	r2, r2, #23
 8025348:	1a8b      	subs	r3, r1, r2
 802534a:	ed97 5b00 	vldr	d5, [r7]
 802534e:	ee07 3a90 	vmov	s15, r3
 8025352:	15d2      	asrs	r2, r2, #23
 8025354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8025358:	eea5 6b07 	vfma.f64	d6, d5, d7
 802535c:	ed97 5b02 	vldr	d5, [r7, #8]
 8025360:	ee26 2b06 	vmul.f64	d2, d6, d6
 8025364:	ee22 1b02 	vmul.f64	d1, d2, d2
 8025368:	ee07 2a90 	vmov	s15, r2
 802536c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8025370:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025374:	ee37 7b05 	vadd.f64	d7, d7, d5
 8025378:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 802537c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8025380:	eea6 5b04 	vfma.f64	d5, d6, d4
 8025384:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8025388:	eea6 4b03 	vfma.f64	d4, d6, d3
 802538c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8025390:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8025394:	eea6 7b03 	vfma.f64	d7, d6, d3
 8025398:	eea2 7b04 	vfma.f64	d7, d2, d4
 802539c:	eea5 7b01 	vfma.f64	d7, d5, d1
 80253a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80253a4:	ee10 1a90 	vmov	r1, s1
 80253a8:	2300      	movs	r3, #0
 80253aa:	2700      	movs	r7, #0
 80253ac:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 80253b0:	f248 06be 	movw	r6, #32958	; 0x80be
 80253b4:	429f      	cmp	r7, r3
 80253b6:	bf08      	it	eq
 80253b8:	4296      	cmpeq	r6, r2
 80253ba:	f080 80b1 	bcs.w	8025520 <powf+0x218>
 80253be:	ed9f 7b78 	vldr	d7, [pc, #480]	; 80255a0 <powf+0x298>
 80253c2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80253c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253ca:	dd79      	ble.n	80254c0 <powf+0x1b8>
 80253cc:	b005      	add	sp, #20
 80253ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80253d2:	f7ff bee3 	b.w	802519c <__math_oflowf>
 80253d6:	4298      	cmp	r0, r3
 80253d8:	d32d      	bcc.n	8025436 <powf+0x12e>
 80253da:	b952      	cbnz	r2, 80253f2 <powf+0xea>
 80253dc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80253e0:	005b      	lsls	r3, r3, #1
 80253e2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80253e6:	f240 80cd 	bls.w	8025584 <powf+0x27c>
 80253ea:	ee30 0a20 	vadd.f32	s0, s0, s1
 80253ee:	b005      	add	sp, #20
 80253f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253f2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80253f6:	d105      	bne.n	8025404 <powf+0xfc>
 80253f8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80253fc:	0076      	lsls	r6, r6, #1
 80253fe:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8025402:	e7f0      	b.n	80253e6 <powf+0xde>
 8025404:	004b      	lsls	r3, r1, #1
 8025406:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 802540a:	d8ee      	bhi.n	80253ea <powf+0xe2>
 802540c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8025410:	d1eb      	bne.n	80253ea <powf+0xe2>
 8025412:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8025416:	f000 80b5 	beq.w	8025584 <powf+0x27c>
 802541a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802541e:	ea6f 0606 	mvn.w	r6, r6
 8025422:	bf34      	ite	cc
 8025424:	2300      	movcc	r3, #0
 8025426:	2301      	movcs	r3, #1
 8025428:	0ff6      	lsrs	r6, r6, #31
 802542a:	42b3      	cmp	r3, r6
 802542c:	f040 80ad 	bne.w	802558a <powf+0x282>
 8025430:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8025434:	e7db      	b.n	80253ee <powf+0xe6>
 8025436:	004f      	lsls	r7, r1, #1
 8025438:	1e7a      	subs	r2, r7, #1
 802543a:	429a      	cmp	r2, r3
 802543c:	d31c      	bcc.n	8025478 <powf+0x170>
 802543e:	2900      	cmp	r1, #0
 8025440:	ee20 0a00 	vmul.f32	s0, s0, s0
 8025444:	da0f      	bge.n	8025466 <powf+0x15e>
 8025446:	ee10 0a90 	vmov	r0, s1
 802544a:	f7ff ff43 	bl	80252d4 <checkint>
 802544e:	2801      	cmp	r0, #1
 8025450:	d109      	bne.n	8025466 <powf+0x15e>
 8025452:	eeb1 0a40 	vneg.f32	s0, s0
 8025456:	b947      	cbnz	r7, 802546a <powf+0x162>
 8025458:	2e00      	cmp	r6, #0
 802545a:	dac8      	bge.n	80253ee <powf+0xe6>
 802545c:	b005      	add	sp, #20
 802545e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025462:	f7ff bea1 	b.w	80251a8 <__math_divzerof>
 8025466:	2000      	movs	r0, #0
 8025468:	e7f5      	b.n	8025456 <powf+0x14e>
 802546a:	2e00      	cmp	r6, #0
 802546c:	dabf      	bge.n	80253ee <powf+0xe6>
 802546e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025472:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8025476:	e7ba      	b.n	80253ee <powf+0xe6>
 8025478:	2900      	cmp	r1, #0
 802547a:	da1f      	bge.n	80254bc <powf+0x1b4>
 802547c:	ee10 0a90 	vmov	r0, s1
 8025480:	f7ff ff28 	bl	80252d4 <checkint>
 8025484:	b920      	cbnz	r0, 8025490 <powf+0x188>
 8025486:	b005      	add	sp, #20
 8025488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802548c:	f7ff be9c 	b.w	80251c8 <__math_invalidf>
 8025490:	2801      	cmp	r0, #1
 8025492:	bf14      	ite	ne
 8025494:	2000      	movne	r0, #0
 8025496:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 802549a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802549e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80254a2:	f4bf af44 	bcs.w	802532e <powf+0x26>
 80254a6:	eddf 7a47 	vldr	s15, [pc, #284]	; 80255c4 <powf+0x2bc>
 80254aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80254ae:	ee10 3a10 	vmov	r3, s0
 80254b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80254b6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80254ba:	e738      	b.n	802532e <powf+0x26>
 80254bc:	2000      	movs	r0, #0
 80254be:	e7ee      	b.n	802549e <powf+0x196>
 80254c0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80255a8 <powf+0x2a0>
 80254c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80254c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254cc:	dd10      	ble.n	80254f0 <powf+0x1e8>
 80254ce:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80254d2:	2800      	cmp	r0, #0
 80254d4:	d15c      	bne.n	8025590 <powf+0x288>
 80254d6:	9302      	str	r3, [sp, #8]
 80254d8:	eddd 7a02 	vldr	s15, [sp, #8]
 80254dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80254e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80254e4:	eef4 7a47 	vcmp.f32	s15, s14
 80254e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254ec:	f47f af6e 	bne.w	80253cc <powf+0xc4>
 80254f0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80255b0 <powf+0x2a8>
 80254f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80254f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254fc:	d804      	bhi.n	8025508 <powf+0x200>
 80254fe:	b005      	add	sp, #20
 8025500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025504:	f7ff be3e 	b.w	8025184 <__math_uflowf>
 8025508:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80255b8 <powf+0x2b0>
 802550c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8025510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025514:	d504      	bpl.n	8025520 <powf+0x218>
 8025516:	b005      	add	sp, #20
 8025518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802551c:	f7ff be38 	b.w	8025190 <__math_may_uflowf>
 8025520:	4b29      	ldr	r3, [pc, #164]	; (80255c8 <powf+0x2c0>)
 8025522:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8025526:	ee30 6b07 	vadd.f64	d6, d0, d7
 802552a:	ed8d 6b00 	vstr	d6, [sp]
 802552e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8025532:	ee30 7b47 	vsub.f64	d7, d0, d7
 8025536:	e9dd 6700 	ldrd	r6, r7, [sp]
 802553a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802553e:	f006 011f 	and.w	r1, r6, #31
 8025542:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8025546:	e9d1 ce00 	ldrd	ip, lr, [r1]
 802554a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 802554e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8025552:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 8025556:	eea7 6b05 	vfma.f64	d6, d7, d5
 802555a:	ee27 5b07 	vmul.f64	d5, d7, d7
 802555e:	1836      	adds	r6, r6, r0
 8025560:	2300      	movs	r3, #0
 8025562:	eb13 040c 	adds.w	r4, r3, ip
 8025566:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 802556a:	eb41 050e 	adc.w	r5, r1, lr
 802556e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8025572:	ec45 4b17 	vmov	d7, r4, r5
 8025576:	eea6 0b05 	vfma.f64	d0, d6, d5
 802557a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802557e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025582:	e734      	b.n	80253ee <powf+0xe6>
 8025584:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025588:	e731      	b.n	80253ee <powf+0xe6>
 802558a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80255cc <powf+0x2c4>
 802558e:	e72e      	b.n	80253ee <powf+0xe6>
 8025590:	9303      	str	r3, [sp, #12]
 8025592:	eddd 7a03 	vldr	s15, [sp, #12]
 8025596:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802559a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802559e:	e7a1      	b.n	80254e4 <powf+0x1dc>
 80255a0:	ffd1d571 	.word	0xffd1d571
 80255a4:	405fffff 	.word	0x405fffff
 80255a8:	ffa3aae2 	.word	0xffa3aae2
 80255ac:	405fffff 	.word	0x405fffff
 80255b0:	00000000 	.word	0x00000000
 80255b4:	c062c000 	.word	0xc062c000
 80255b8:	00000000 	.word	0x00000000
 80255bc:	c062a000 	.word	0xc062a000
 80255c0:	08077bf0 	.word	0x08077bf0
 80255c4:	4b000000 	.word	0x4b000000
 80255c8:	08077aa8 	.word	0x08077aa8
 80255cc:	00000000 	.word	0x00000000

080255d0 <__errno>:
 80255d0:	4b01      	ldr	r3, [pc, #4]	; (80255d8 <__errno+0x8>)
 80255d2:	6818      	ldr	r0, [r3, #0]
 80255d4:	4770      	bx	lr
 80255d6:	bf00      	nop
 80255d8:	24001b64 	.word	0x24001b64

080255dc <_close>:
 80255dc:	4b02      	ldr	r3, [pc, #8]	; (80255e8 <_close+0xc>)
 80255de:	2258      	movs	r2, #88	; 0x58
 80255e0:	601a      	str	r2, [r3, #0]
 80255e2:	f04f 30ff 	mov.w	r0, #4294967295
 80255e6:	4770      	bx	lr
 80255e8:	3000fa70 	.word	0x3000fa70

080255ec <_fstat>:
 80255ec:	4b02      	ldr	r3, [pc, #8]	; (80255f8 <_fstat+0xc>)
 80255ee:	2258      	movs	r2, #88	; 0x58
 80255f0:	601a      	str	r2, [r3, #0]
 80255f2:	f04f 30ff 	mov.w	r0, #4294967295
 80255f6:	4770      	bx	lr
 80255f8:	3000fa70 	.word	0x3000fa70

080255fc <_getpid>:
 80255fc:	4b02      	ldr	r3, [pc, #8]	; (8025608 <_getpid+0xc>)
 80255fe:	2258      	movs	r2, #88	; 0x58
 8025600:	601a      	str	r2, [r3, #0]
 8025602:	f04f 30ff 	mov.w	r0, #4294967295
 8025606:	4770      	bx	lr
 8025608:	3000fa70 	.word	0x3000fa70

0802560c <_isatty>:
 802560c:	4b02      	ldr	r3, [pc, #8]	; (8025618 <_isatty+0xc>)
 802560e:	2258      	movs	r2, #88	; 0x58
 8025610:	601a      	str	r2, [r3, #0]
 8025612:	2000      	movs	r0, #0
 8025614:	4770      	bx	lr
 8025616:	bf00      	nop
 8025618:	3000fa70 	.word	0x3000fa70

0802561c <_kill>:
 802561c:	4b02      	ldr	r3, [pc, #8]	; (8025628 <_kill+0xc>)
 802561e:	2258      	movs	r2, #88	; 0x58
 8025620:	601a      	str	r2, [r3, #0]
 8025622:	f04f 30ff 	mov.w	r0, #4294967295
 8025626:	4770      	bx	lr
 8025628:	3000fa70 	.word	0x3000fa70

0802562c <_lseek>:
 802562c:	4b02      	ldr	r3, [pc, #8]	; (8025638 <_lseek+0xc>)
 802562e:	2258      	movs	r2, #88	; 0x58
 8025630:	601a      	str	r2, [r3, #0]
 8025632:	f04f 30ff 	mov.w	r0, #4294967295
 8025636:	4770      	bx	lr
 8025638:	3000fa70 	.word	0x3000fa70

0802563c <_read>:
 802563c:	4b02      	ldr	r3, [pc, #8]	; (8025648 <_read+0xc>)
 802563e:	2258      	movs	r2, #88	; 0x58
 8025640:	601a      	str	r2, [r3, #0]
 8025642:	f04f 30ff 	mov.w	r0, #4294967295
 8025646:	4770      	bx	lr
 8025648:	3000fa70 	.word	0x3000fa70

0802564c <_sbrk>:
 802564c:	4b04      	ldr	r3, [pc, #16]	; (8025660 <_sbrk+0x14>)
 802564e:	6819      	ldr	r1, [r3, #0]
 8025650:	4602      	mov	r2, r0
 8025652:	b909      	cbnz	r1, 8025658 <_sbrk+0xc>
 8025654:	4903      	ldr	r1, [pc, #12]	; (8025664 <_sbrk+0x18>)
 8025656:	6019      	str	r1, [r3, #0]
 8025658:	6818      	ldr	r0, [r3, #0]
 802565a:	4402      	add	r2, r0
 802565c:	601a      	str	r2, [r3, #0]
 802565e:	4770      	bx	lr
 8025660:	30008568 	.word	0x30008568
 8025664:	24061d00 	.word	0x24061d00

08025668 <_write>:
 8025668:	4b02      	ldr	r3, [pc, #8]	; (8025674 <_write+0xc>)
 802566a:	2258      	movs	r2, #88	; 0x58
 802566c:	601a      	str	r2, [r3, #0]
 802566e:	f04f 30ff 	mov.w	r0, #4294967295
 8025672:	4770      	bx	lr
 8025674:	3000fa70 	.word	0x3000fa70

08025678 <_exit>:
 8025678:	e7fe      	b.n	8025678 <_exit>
	...

0802567c <_init>:
 802567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802567e:	bf00      	nop
 8025680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025682:	bc08      	pop	{r3}
 8025684:	469e      	mov	lr, r3
 8025686:	4770      	bx	lr

08025688 <_fini>:
 8025688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802568a:	bf00      	nop
 802568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802568e:	bc08      	pop	{r3}
 8025690:	469e      	mov	lr, r3
 8025692:	4770      	bx	lr
