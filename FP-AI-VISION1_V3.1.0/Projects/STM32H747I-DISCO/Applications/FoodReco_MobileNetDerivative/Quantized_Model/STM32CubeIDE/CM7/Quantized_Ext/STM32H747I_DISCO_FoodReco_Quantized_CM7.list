
STM32H747I_DISCO_FoodReco_Quantized_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  00070000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      000e4e1e  08100020  08100020  00070020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00023c9c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00026998  08023f40  08023f40  00033f40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0804a8d8  0804a8d8  0005a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0804a8e0  0804a8e0  0005a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804a8e4  0804a8e4  0005a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003220  24000000  0804a8e8  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uart_rx_buffer 00000020  24003220  0804db08  00063220  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .uart_tx_buffer 00000520  24003240  0804db28  00063240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002e68  24003760  0804e048  00063760  2**5
                  ALLOC
 12 ._user_heap_stack 00001400  240065c8  0804e048  000665c8  2**0
                  ALLOC
 13 .sram_section 00000500  30000000  30000000  00160000  2**2
                  ALLOC
 14 .sdram_section 00fce7e0  d0000000  d0000000  00160000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00154e3e  2**0
                  CONTENTS, READONLY
 16 .debug_line   00065fec  00000000  00000000  00154e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   000a927e  00000000  00000000  001bae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000d7d8  00000000  00000000  002640d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002570  00000000  00000000  002718b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001cdbe1  00000000  00000000  00273e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000a7b8  00000000  00000000  00441a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00055f84  00000000  00000000  0044c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000514f9  00000000  00000000  004a2144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000ce  00000000  00000000  004f363d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009d1c  00000000  00000000  004f370c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .stab         000000cc  00000000  00000000  004fd428  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  004fd4f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24003760 	.word	0x24003760
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023f24 	.word	0x08023f24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003764 	.word	0x24003764
 80002dc:	08023f24 	.word	0x08023f24

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9a2 	b.w	800070c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f83a 	bl	8000448 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	eef1 7a67 	vneg.f32	s15, s15
 80003f6:	b508      	push	{r3, lr}
 80003f8:	ee17 0a90 	vmov	r0, s15
 80003fc:	f000 f804 	bl	8000408 <__aeabi_f2ulz>
 8000400:	4240      	negs	r0, r0
 8000402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000406:	bd08      	pop	{r3, pc}

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000438 <__aeabi_f2ulz+0x30>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000440 <__aeabi_f2ulz+0x38>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000424:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee16 1a10 	vmov	r1, s12
 8000430:	ee17 0a90 	vmov	r0, s15
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	00000000 	.word	0x00000000
 800043c:	3df00000 	.word	0x3df00000
 8000440:	00000000 	.word	0x00000000
 8000444:	41f00000 	.word	0x41f00000

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	4604      	mov	r4, r0
 8000450:	468c      	mov	ip, r1
 8000452:	2b00      	cmp	r3, #0
 8000454:	f040 8083 	bne.w	800055e <__udivmoddi4+0x116>
 8000458:	428a      	cmp	r2, r1
 800045a:	4617      	mov	r7, r2
 800045c:	d947      	bls.n	80004ee <__udivmoddi4+0xa6>
 800045e:	fab2 f282 	clz	r2, r2
 8000462:	b142      	cbz	r2, 8000476 <__udivmoddi4+0x2e>
 8000464:	f1c2 0020 	rsb	r0, r2, #32
 8000468:	fa24 f000 	lsr.w	r0, r4, r0
 800046c:	4091      	lsls	r1, r2
 800046e:	4097      	lsls	r7, r2
 8000470:	ea40 0c01 	orr.w	ip, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800047a:	0c23      	lsrs	r3, r4, #16
 800047c:	fbbc f6f8 	udiv	r6, ip, r8
 8000480:	fa1f fe87 	uxth.w	lr, r7
 8000484:	fb08 c116 	mls	r1, r8, r6, ip
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f10e 	mul.w	r1, r6, lr
 8000490:	4299      	cmp	r1, r3
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x60>
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	f106 30ff 	add.w	r0, r6, #4294967295
 800049a:	f080 8119 	bcs.w	80006d0 <__udivmoddi4+0x288>
 800049e:	4299      	cmp	r1, r3
 80004a0:	f240 8116 	bls.w	80006d0 <__udivmoddi4+0x288>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	443b      	add	r3, r7
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	45a6      	cmp	lr, r4
 80004be:	d909      	bls.n	80004d4 <__udivmoddi4+0x8c>
 80004c0:	193c      	adds	r4, r7, r4
 80004c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c6:	f080 8105 	bcs.w	80006d4 <__udivmoddi4+0x28c>
 80004ca:	45a6      	cmp	lr, r4
 80004cc:	f240 8102 	bls.w	80006d4 <__udivmoddi4+0x28c>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004d8:	eba4 040e 	sub.w	r4, r4, lr
 80004dc:	2600      	movs	r6, #0
 80004de:	b11d      	cbz	r5, 80004e8 <__udivmoddi4+0xa0>
 80004e0:	40d4      	lsrs	r4, r2
 80004e2:	2300      	movs	r3, #0
 80004e4:	e9c5 4300 	strd	r4, r3, [r5]
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	b902      	cbnz	r2, 80004f2 <__udivmoddi4+0xaa>
 80004f0:	deff      	udf	#255	; 0xff
 80004f2:	fab2 f282 	clz	r2, r2
 80004f6:	2a00      	cmp	r2, #0
 80004f8:	d150      	bne.n	800059c <__udivmoddi4+0x154>
 80004fa:	1bcb      	subs	r3, r1, r7
 80004fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	2601      	movs	r6, #1
 8000506:	fbb3 fcfe 	udiv	ip, r3, lr
 800050a:	0c21      	lsrs	r1, r4, #16
 800050c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb08 f30c 	mul.w	r3, r8, ip
 8000518:	428b      	cmp	r3, r1
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0xe4>
 800051c:	1879      	adds	r1, r7, r1
 800051e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0xe2>
 8000524:	428b      	cmp	r3, r1
 8000526:	f200 80e9 	bhi.w	80006fc <__udivmoddi4+0x2b4>
 800052a:	4684      	mov	ip, r0
 800052c:	1ac9      	subs	r1, r1, r3
 800052e:	b2a3      	uxth	r3, r4
 8000530:	fbb1 f0fe 	udiv	r0, r1, lr
 8000534:	fb0e 1110 	mls	r1, lr, r0, r1
 8000538:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800053c:	fb08 f800 	mul.w	r8, r8, r0
 8000540:	45a0      	cmp	r8, r4
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x10c>
 8000544:	193c      	adds	r4, r7, r4
 8000546:	f100 33ff 	add.w	r3, r0, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x10a>
 800054c:	45a0      	cmp	r8, r4
 800054e:	f200 80d9 	bhi.w	8000704 <__udivmoddi4+0x2bc>
 8000552:	4618      	mov	r0, r3
 8000554:	eba4 0408 	sub.w	r4, r4, r8
 8000558:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800055c:	e7bf      	b.n	80004de <__udivmoddi4+0x96>
 800055e:	428b      	cmp	r3, r1
 8000560:	d909      	bls.n	8000576 <__udivmoddi4+0x12e>
 8000562:	2d00      	cmp	r5, #0
 8000564:	f000 80b1 	beq.w	80006ca <__udivmoddi4+0x282>
 8000568:	2600      	movs	r6, #0
 800056a:	e9c5 0100 	strd	r0, r1, [r5]
 800056e:	4630      	mov	r0, r6
 8000570:	4631      	mov	r1, r6
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	fab3 f683 	clz	r6, r3
 800057a:	2e00      	cmp	r6, #0
 800057c:	d14a      	bne.n	8000614 <__udivmoddi4+0x1cc>
 800057e:	428b      	cmp	r3, r1
 8000580:	d302      	bcc.n	8000588 <__udivmoddi4+0x140>
 8000582:	4282      	cmp	r2, r0
 8000584:	f200 80b8 	bhi.w	80006f8 <__udivmoddi4+0x2b0>
 8000588:	1a84      	subs	r4, r0, r2
 800058a:	eb61 0103 	sbc.w	r1, r1, r3
 800058e:	2001      	movs	r0, #1
 8000590:	468c      	mov	ip, r1
 8000592:	2d00      	cmp	r5, #0
 8000594:	d0a8      	beq.n	80004e8 <__udivmoddi4+0xa0>
 8000596:	e9c5 4c00 	strd	r4, ip, [r5]
 800059a:	e7a5      	b.n	80004e8 <__udivmoddi4+0xa0>
 800059c:	f1c2 0320 	rsb	r3, r2, #32
 80005a0:	fa20 f603 	lsr.w	r6, r0, r3
 80005a4:	4097      	lsls	r7, r2
 80005a6:	fa01 f002 	lsl.w	r0, r1, r2
 80005aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005ae:	40d9      	lsrs	r1, r3
 80005b0:	4330      	orrs	r0, r6
 80005b2:	0c03      	lsrs	r3, r0, #16
 80005b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005b8:	fa1f f887 	uxth.w	r8, r7
 80005bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80005c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c4:	fb06 f108 	mul.w	r1, r6, r8
 80005c8:	4299      	cmp	r1, r3
 80005ca:	fa04 f402 	lsl.w	r4, r4, r2
 80005ce:	d909      	bls.n	80005e4 <__udivmoddi4+0x19c>
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80005d6:	f080 808d 	bcs.w	80006f4 <__udivmoddi4+0x2ac>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 808a 	bls.w	80006f4 <__udivmoddi4+0x2ac>
 80005e0:	3e02      	subs	r6, #2
 80005e2:	443b      	add	r3, r7
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	b281      	uxth	r1, r0
 80005e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f4:	fb00 f308 	mul.w	r3, r0, r8
 80005f8:	428b      	cmp	r3, r1
 80005fa:	d907      	bls.n	800060c <__udivmoddi4+0x1c4>
 80005fc:	1879      	adds	r1, r7, r1
 80005fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000602:	d273      	bcs.n	80006ec <__udivmoddi4+0x2a4>
 8000604:	428b      	cmp	r3, r1
 8000606:	d971      	bls.n	80006ec <__udivmoddi4+0x2a4>
 8000608:	3802      	subs	r0, #2
 800060a:	4439      	add	r1, r7
 800060c:	1acb      	subs	r3, r1, r3
 800060e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000612:	e778      	b.n	8000506 <__udivmoddi4+0xbe>
 8000614:	f1c6 0c20 	rsb	ip, r6, #32
 8000618:	fa03 f406 	lsl.w	r4, r3, r6
 800061c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000620:	431c      	orrs	r4, r3
 8000622:	fa20 f70c 	lsr.w	r7, r0, ip
 8000626:	fa01 f306 	lsl.w	r3, r1, r6
 800062a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800062e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000632:	431f      	orrs	r7, r3
 8000634:	0c3b      	lsrs	r3, r7, #16
 8000636:	fbb1 f9fe 	udiv	r9, r1, lr
 800063a:	fa1f f884 	uxth.w	r8, r4
 800063e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000642:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000646:	fb09 fa08 	mul.w	sl, r9, r8
 800064a:	458a      	cmp	sl, r1
 800064c:	fa02 f206 	lsl.w	r2, r2, r6
 8000650:	fa00 f306 	lsl.w	r3, r0, r6
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x220>
 8000656:	1861      	adds	r1, r4, r1
 8000658:	f109 30ff 	add.w	r0, r9, #4294967295
 800065c:	d248      	bcs.n	80006f0 <__udivmoddi4+0x2a8>
 800065e:	458a      	cmp	sl, r1
 8000660:	d946      	bls.n	80006f0 <__udivmoddi4+0x2a8>
 8000662:	f1a9 0902 	sub.w	r9, r9, #2
 8000666:	4421      	add	r1, r4
 8000668:	eba1 010a 	sub.w	r1, r1, sl
 800066c:	b2bf      	uxth	r7, r7
 800066e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000672:	fb0e 1110 	mls	r1, lr, r0, r1
 8000676:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800067a:	fb00 f808 	mul.w	r8, r0, r8
 800067e:	45b8      	cmp	r8, r7
 8000680:	d907      	bls.n	8000692 <__udivmoddi4+0x24a>
 8000682:	19e7      	adds	r7, r4, r7
 8000684:	f100 31ff 	add.w	r1, r0, #4294967295
 8000688:	d22e      	bcs.n	80006e8 <__udivmoddi4+0x2a0>
 800068a:	45b8      	cmp	r8, r7
 800068c:	d92c      	bls.n	80006e8 <__udivmoddi4+0x2a0>
 800068e:	3802      	subs	r0, #2
 8000690:	4427      	add	r7, r4
 8000692:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000696:	eba7 0708 	sub.w	r7, r7, r8
 800069a:	fba0 8902 	umull	r8, r9, r0, r2
 800069e:	454f      	cmp	r7, r9
 80006a0:	46c6      	mov	lr, r8
 80006a2:	4649      	mov	r1, r9
 80006a4:	d31a      	bcc.n	80006dc <__udivmoddi4+0x294>
 80006a6:	d017      	beq.n	80006d8 <__udivmoddi4+0x290>
 80006a8:	b15d      	cbz	r5, 80006c2 <__udivmoddi4+0x27a>
 80006aa:	ebb3 020e 	subs.w	r2, r3, lr
 80006ae:	eb67 0701 	sbc.w	r7, r7, r1
 80006b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006b6:	40f2      	lsrs	r2, r6
 80006b8:	ea4c 0202 	orr.w	r2, ip, r2
 80006bc:	40f7      	lsrs	r7, r6
 80006be:	e9c5 2700 	strd	r2, r7, [r5]
 80006c2:	2600      	movs	r6, #0
 80006c4:	4631      	mov	r1, r6
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	462e      	mov	r6, r5
 80006cc:	4628      	mov	r0, r5
 80006ce:	e70b      	b.n	80004e8 <__udivmoddi4+0xa0>
 80006d0:	4606      	mov	r6, r0
 80006d2:	e6e9      	b.n	80004a8 <__udivmoddi4+0x60>
 80006d4:	4618      	mov	r0, r3
 80006d6:	e6fd      	b.n	80004d4 <__udivmoddi4+0x8c>
 80006d8:	4543      	cmp	r3, r8
 80006da:	d2e5      	bcs.n	80006a8 <__udivmoddi4+0x260>
 80006dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80006e0:	eb69 0104 	sbc.w	r1, r9, r4
 80006e4:	3801      	subs	r0, #1
 80006e6:	e7df      	b.n	80006a8 <__udivmoddi4+0x260>
 80006e8:	4608      	mov	r0, r1
 80006ea:	e7d2      	b.n	8000692 <__udivmoddi4+0x24a>
 80006ec:	4660      	mov	r0, ip
 80006ee:	e78d      	b.n	800060c <__udivmoddi4+0x1c4>
 80006f0:	4681      	mov	r9, r0
 80006f2:	e7b9      	b.n	8000668 <__udivmoddi4+0x220>
 80006f4:	4666      	mov	r6, ip
 80006f6:	e775      	b.n	80005e4 <__udivmoddi4+0x19c>
 80006f8:	4630      	mov	r0, r6
 80006fa:	e74a      	b.n	8000592 <__udivmoddi4+0x14a>
 80006fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000700:	4439      	add	r1, r7
 8000702:	e713      	b.n	800052c <__udivmoddi4+0xe4>
 8000704:	3802      	subs	r0, #2
 8000706:	443c      	add	r4, r7
 8000708:	e724      	b.n	8000554 <__udivmoddi4+0x10c>
 800070a:	bf00      	nop

0800070c <__aeabi_idiv0>:
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <Reset_Handler_m4>
	...

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800071a:	e003      	b.n	8000724 <LoopCopyDataInit>

0800071c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800071e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000722:	3104      	adds	r1, #4

08000724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800072c:	d3f6      	bcc.n	800071c <CopyDataInit>
  ldr  r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000730:	e002      	b.n	8000738 <LoopFillZerobss>

08000732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000734:	f842 3b04 	str.w	r3, [r2], #4

08000738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800073c:	d3f9      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800073e:	f005 fa29 	bl	8005b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f020 f993 	bl	8020a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f004 fa81 	bl	8004c4c <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800074c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000750:	0804a8e8 	.word	0x0804a8e8
  ldr  r0, =_sdata
 8000754:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000758:	24003220 	.word	0x24003220
  ldr  r2, =_sbss
 800075c:	24003760 	.word	0x24003760
  ldr  r3, = _ebss
 8000760:	240065c8 	.word	0x240065c8

08000764 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC3_IRQHandler>
	...

08000768 <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000768:	4b02      	ldr	r3, [pc, #8]	; (8000774 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800076a:	6818      	ldr	r0, [r3, #0]
}
 800076c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2400377c 	.word	0x2400377c

08000778 <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800077a:	6818      	ldr	r0, [r3, #0]
}
 800077c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	24003798 	.word	0x24003798

08000788 <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <ai_get_input_quantized_format+0x18>)
 800078a:	681b      	ldr	r3, [r3, #0]
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 800078c:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 8000790:	f3c3 10c6 	ubfx	r0, r3, #7, #7
 8000794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000798:	1a80      	subs	r0, r0, r2
 800079a:	3b40      	subs	r3, #64	; 0x40
}
 800079c:	1ac0      	subs	r0, r0, r3
 800079e:	4770      	bx	lr
 80007a0:	2400377c 	.word	0x2400377c

080007a4 <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <ai_get_input_quantization_scheme+0x38>)
 80007a6:	6893      	ldr	r3, [r2, #8]
 80007a8:	b1b3      	cbz	r3, 80007d8 <ai_get_input_quantization_scheme+0x34>
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	f010 0001 	ands.w	r0, r0, #1
 80007b0:	d013      	beq.n	80007da <ai_get_input_quantization_scheme+0x36>
 80007b2:	6858      	ldr	r0, [r3, #4]
 80007b4:	b188      	cbz	r0, 80007da <ai_get_input_quantization_scheme+0x36>
 80007b6:	6843      	ldr	r3, [r0, #4]
 80007b8:	b173      	cbz	r3, 80007d8 <ai_get_input_quantization_scheme+0x34>
 80007ba:	8840      	ldrh	r0, [r0, #2]
 80007bc:	b168      	cbz	r0, 80007da <ai_get_input_quantization_scheme+0x36>
 80007be:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007c0:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007c6:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 80007ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d2:	d001      	beq.n	80007d8 <ai_get_input_quantization_scheme+0x34>
    if(sign==0)
 80007d4:	3001      	adds	r0, #1
 80007d6:	4770      	bx	lr
    return AI_FXP_Q;
 80007d8:	2000      	movs	r0, #0
}
 80007da:	4770      	bx	lr
 80007dc:	2400377c 	.word	0x2400377c

080007e0 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <ai_get_output_quantization_scheme+0x38>)
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	b1b3      	cbz	r3, 8000814 <ai_get_output_quantization_scheme+0x34>
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	f010 0001 	ands.w	r0, r0, #1
 80007ec:	d013      	beq.n	8000816 <ai_get_output_quantization_scheme+0x36>
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	b188      	cbz	r0, 8000816 <ai_get_output_quantization_scheme+0x36>
 80007f2:	6843      	ldr	r3, [r0, #4]
 80007f4:	b173      	cbz	r3, 8000814 <ai_get_output_quantization_scheme+0x34>
 80007f6:	8840      	ldrh	r0, [r0, #2]
 80007f8:	b168      	cbz	r0, 8000816 <ai_get_output_quantization_scheme+0x36>
 80007fa:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007fc:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007fe:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000802:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 8000806:	eef5 7a40 	vcmp.f32	s15, #0.0
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d001      	beq.n	8000814 <ai_get_output_quantization_scheme+0x34>
    if(sign==0)
 8000810:	3001      	adds	r0, #1
 8000812:	4770      	bx	lr
    return AI_FXP_Q;
 8000814:	2000      	movs	r0, #0
}
 8000816:	4770      	bx	lr
 8000818:	24003798 	.word	0x24003798

0800081c <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 800081e:	2301      	movs	r3, #1
 8000820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800082a:	3a40      	subs	r2, #64	; 0x40
 800082c:	4093      	lsls	r3, r2
 800082e:	ee00 3a10 	vmov	s0, r3
 8000832:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8000836:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800083a:	4770      	bx	lr
 800083c:	24003798 	.word	0x24003798

08000840 <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <ai_get_input_scale+0x28>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	b163      	cbz	r3, 8000860 <ai_get_input_scale+0x20>
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	07d2      	lsls	r2, r2, #31
 800084a:	d509      	bpl.n	8000860 <ai_get_input_scale+0x20>
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	b13b      	cbz	r3, 8000860 <ai_get_input_scale+0x20>
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	b12a      	cbz	r2, 8000860 <ai_get_input_scale+0x20>
 8000854:	885b      	ldrh	r3, [r3, #2]
 8000856:	b11b      	cbz	r3, 8000860 <ai_get_input_scale+0x20>
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	ed93 0a00 	vldr	s0, [r3]
 800085e:	4770      	bx	lr
 8000860:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800086c <ai_get_input_scale+0x2c>
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2400377c 	.word	0x2400377c
 800086c:	00000000 	.word	0x00000000

08000870 <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <ai_get_input_zero_point+0x44>)
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	b192      	cbz	r2, 800089c <ai_get_input_zero_point+0x2c>
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	f013 0001 	ands.w	r0, r3, #1
 800087c:	d00d      	beq.n	800089a <ai_get_input_zero_point+0x2a>
 800087e:	6850      	ldr	r0, [r2, #4]
 8000880:	b158      	cbz	r0, 800089a <ai_get_input_zero_point+0x2a>
 8000882:	8803      	ldrh	r3, [r0, #0]
 8000884:	f013 0f02 	tst.w	r3, #2
 8000888:	6843      	ldr	r3, [r0, #4]
 800088a:	d009      	beq.n	80008a0 <ai_get_input_zero_point+0x30>
 800088c:	b123      	cbz	r3, 8000898 <ai_get_input_zero_point+0x28>
 800088e:	8840      	ldrh	r0, [r0, #2]
 8000890:	b118      	cbz	r0, 800089a <ai_get_input_zero_point+0x2a>
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	7818      	ldrb	r0, [r3, #0]
 8000896:	4770      	bx	lr
 8000898:	4618      	mov	r0, r3
}
 800089a:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 800089c:	4610      	mov	r0, r2
 800089e:	4770      	bx	lr
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f9      	beq.n	8000898 <ai_get_input_zero_point+0x28>
 80008a4:	8840      	ldrh	r0, [r0, #2]
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d0f7      	beq.n	800089a <ai_get_input_zero_point+0x2a>
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f993 0000 	ldrsb.w	r0, [r3]
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2400377c 	.word	0x2400377c

080008b8 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <ai_get_output_scale+0x28>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	b163      	cbz	r3, 80008d8 <ai_get_output_scale+0x20>
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	07d2      	lsls	r2, r2, #31
 80008c2:	d509      	bpl.n	80008d8 <ai_get_output_scale+0x20>
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	b13b      	cbz	r3, 80008d8 <ai_get_output_scale+0x20>
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	b12a      	cbz	r2, 80008d8 <ai_get_output_scale+0x20>
 80008cc:	885b      	ldrh	r3, [r3, #2]
 80008ce:	b11b      	cbz	r3, 80008d8 <ai_get_output_scale+0x20>
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	ed93 0a00 	vldr	s0, [r3]
 80008d6:	4770      	bx	lr
 80008d8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80008e4 <ai_get_output_scale+0x2c>
}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	24003798 	.word	0x24003798
 80008e4:	00000000 	.word	0x00000000

080008e8 <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <ai_get_output_zero_point+0x44>)
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	b192      	cbz	r2, 8000914 <ai_get_output_zero_point+0x2c>
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	f013 0001 	ands.w	r0, r3, #1
 80008f4:	d00d      	beq.n	8000912 <ai_get_output_zero_point+0x2a>
 80008f6:	6850      	ldr	r0, [r2, #4]
 80008f8:	b158      	cbz	r0, 8000912 <ai_get_output_zero_point+0x2a>
 80008fa:	8803      	ldrh	r3, [r0, #0]
 80008fc:	f013 0f02 	tst.w	r3, #2
 8000900:	6843      	ldr	r3, [r0, #4]
 8000902:	d009      	beq.n	8000918 <ai_get_output_zero_point+0x30>
 8000904:	b123      	cbz	r3, 8000910 <ai_get_output_zero_point+0x28>
 8000906:	8840      	ldrh	r0, [r0, #2]
 8000908:	b118      	cbz	r0, 8000912 <ai_get_output_zero_point+0x2a>
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	7818      	ldrb	r0, [r3, #0]
 800090e:	4770      	bx	lr
 8000910:	4618      	mov	r0, r3
}
 8000912:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000914:	4610      	mov	r0, r2
 8000916:	4770      	bx	lr
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <ai_get_output_zero_point+0x28>
 800091c:	8840      	ldrh	r0, [r0, #2]
 800091e:	2800      	cmp	r0, #0
 8000920:	d0f7      	beq.n	8000912 <ai_get_output_zero_point+0x2a>
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f993 0000 	ldrsb.w	r0, [r3]
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	24003798 	.word	0x24003798

08000930 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
  network_handle = AI_HANDLE_NULL;
 8000932:	4c18      	ldr	r4, [pc, #96]	; (8000994 <ai_init+0x64>)
{
 8000934:	b08f      	sub	sp, #60	; 0x3c
  network_handle = AI_HANDLE_NULL;
 8000936:	2100      	movs	r1, #0
{
 8000938:	4606      	mov	r6, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 800093a:	4620      	mov	r0, r4

  /* Initializing the network */
  ai_network_init(network_handle, &params);
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
 800093c:	4d16      	ldr	r5, [pc, #88]	; (8000998 <ai_init+0x68>)
  network_handle = AI_HANDLE_NULL;
 800093e:	6021      	str	r1, [r4, #0]
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000940:	f004 fafe 	bl	8004f40 <ai_network_create>
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000944:	f004 ff78 	bl	8005838 <ai_network_data_weights_get>
 8000948:	4601      	mov	r1, r0
 800094a:	4668      	mov	r0, sp
 800094c:	f004 ff5e 	bl	800580c <ai_network_data_weights_buffer_get>
 8000950:	4631      	mov	r1, r6
 8000952:	a807      	add	r0, sp, #28
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 8000954:	4e11      	ldr	r6, [pc, #68]	; (800099c <ai_init+0x6c>)
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000956:	f004 ff43 	bl	80057e0 <ai_network_data_activations_buffer_get>
  ai_network_init(network_handle, &params);
 800095a:	4669      	mov	r1, sp
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f004 faff 	bl	8004f60 <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 8000962:	4629      	mov	r1, r5
 8000964:	6820      	ldr	r0, [r4, #0]
 8000966:	f004 fa9d 	bl	8004ea4 <ai_network_get_info>
  ai_input[0]= desc_report.inputs[0];
 800096a:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
  ai_output[0]= desc_report.outputs[0];
 800096e:	6bad      	ldr	r5, [r5, #56]	; 0x38
  ai_input[0]= desc_report.inputs[0];
 8000970:	4667      	mov	r7, ip
  ai_output[0]= desc_report.outputs[0];
 8000972:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <ai_init+0x70>)
  ai_input[0]= desc_report.inputs[0];
 8000974:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000976:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000978:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800097c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ai_output[0]= desc_report.outputs[0];
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  
  return desc_report.inputs->data;
}
 800098c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8000990:	b00f      	add	sp, #60	; 0x3c
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	24003830 	.word	0x24003830
 8000998:	240037b4 	.word	0x240037b4
 800099c:	2400377c 	.word	0x2400377c
 80009a0:	24003798 	.word	0x24003798

080009a4 <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <ai_deinit+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	f004 bad8 	b.w	8004f5c <ai_network_destroy>
 80009ac:	24003830 	.word	0x24003830

080009b0 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 80009b0:	b538      	push	{r3, r4, r5, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <ai_run+0x20>)
{
 80009b4:	460c      	mov	r4, r1
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <ai_run+0x24>)
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009b8:	4d07      	ldr	r5, [pc, #28]	; (80009d8 <ai_run+0x28>)
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009ba:	6058      	str	r0, [r3, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009bc:	4619      	mov	r1, r3
 80009be:	6828      	ldr	r0, [r5, #0]
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009c0:	6054      	str	r4, [r2, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c2:	f004 ff0b 	bl	80057dc <ai_network_run>
  
  if (nbatch != 1) {
 80009c6:	2801      	cmp	r0, #1
 80009c8:	d000      	beq.n	80009cc <ai_run+0x1c>
        while(1);
 80009ca:	e7fe      	b.n	80009ca <ai_run+0x1a>
  }
}
 80009cc:	bd38      	pop	{r3, r4, r5, pc}
 80009ce:	bf00      	nop
 80009d0:	24003798 	.word	0x24003798
 80009d4:	2400377c 	.word	0x2400377c
 80009d8:	24003830 	.word	0x24003830

080009dc <AI_Init>:
  * @brief  Initializes the generated C model for a neural network
  * @param  Ai_Context_Ptr Pointer to the AI NN context
  * @retval None
  */
void AI_Init(AiContext_TypeDef* Ai_Context_Ptr)
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4605      	mov	r5, r0
#ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  void *input_data_ptr;
  
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009e0:	6880      	ldr	r0, [r0, #8]
{
 80009e2:	ed2d 8b02 	vpush	{d8}
 80009e6:	b082      	sub	sp, #8
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009e8:	f7ff ffa2 	bl	8000930 <ai_init>
  
  if(input_data_ptr!= NULL)
 80009ec:	b100      	cbz	r0, 80009f0 <AI_Init+0x14>
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
 80009ee:	6068      	str	r0, [r5, #4]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009f0:	4c56      	ldr	r4, [pc, #344]	; (8000b4c <AI_Init+0x170>)
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 80009f2:	ed95 8a04 	vldr	s16, [r5, #16]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009f6:	60ec      	str	r4, [r5, #12]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 80009f8:	696d      	ldr	r5, [r5, #20]
  switch(ai_get_input_quantization_scheme())
 80009fa:	f7ff fed3 	bl	80007a4 <ai_get_input_quantization_scheme>
 80009fe:	2801      	cmp	r0, #1
 8000a00:	d007      	beq.n	8000a12 <AI_Init+0x36>
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d05d      	beq.n	8000ac2 <AI_Init+0xe6>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d046      	beq.n	8000a98 <AI_Init+0xbc>
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000a12:	f7ff ff15 	bl	8000840 <ai_get_input_scale>
 8000a16:	eef0 8a40 	vmov.f32	s17, s0
 8000a1a:	f7ff ff29 	bl	8000870 <ai_get_input_zero_point>
 8000a1e:	f1c4 0301 	rsb	r3, r4, #1
 8000a22:	1e62      	subs	r2, r4, #1
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000a28:	ee28 8a28 	vmul.f32	s16, s16, s17
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a2c:	1b59      	subs	r1, r3, r5
 8000a2e:	34ff      	adds	r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a30:	b2c6      	uxtb	r6, r0
 8000a32:	e016      	b.n	8000a62 <AI_Init+0x86>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dd2d      	ble.n	8000a94 <AI_Init+0xb8>
 8000a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a40:	bf4c      	ite	mi
 8000a42:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000a46:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8000a52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a56:	4433      	add	r3, r6
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000a5e:	42a2      	cmp	r2, r4
 8000a60:	d0d3      	beq.n	8000a0a <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a62:	188b      	adds	r3, r1, r2
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a6c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	bf4c      	ite	mi
 8000a7a:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000a7e:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000a82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a86:	ee17 3a10 	vmov	r3, s14
 8000a8a:	4403      	add	r3, r0
 8000a8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a8e:	ddd1      	ble.n	8000a34 <AI_Init+0x58>
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	e7e2      	b.n	8000a5a <AI_Init+0x7e>
 8000a94:	2300      	movs	r3, #0
 8000a96:	e7e0      	b.n	8000a5a <AI_Init+0x7e>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000a98:	f7ff fe76 	bl	8000788 <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	1e62      	subs	r2, r4, #1
 8000aa0:	1b0b      	subs	r3, r1, r4
 8000aa2:	4081      	lsls	r1, r0
 8000aa4:	34ff      	adds	r4, #255	; 0xff
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	4419      	add	r1, r3
 8000aaa:	188b      	adds	r3, r1, r2
 8000aac:	40c3      	lsrs	r3, r0
 8000aae:	f383 0308 	usat	r3, #8, r3
 8000ab2:	f802 3f01 	strb.w	r3, [r2, #1]!
 for(index=0;index<256;index++)
 8000ab6:	4294      	cmp	r4, r2
 8000ab8:	d1f7      	bne.n	8000aaa <AI_Init+0xce>
}
 8000aba:	b002      	add	sp, #8
 8000abc:	ecbd 8b02 	vpop	{d8}
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000ac2:	f7ff febd 	bl	8000840 <ai_get_input_scale>
 8000ac6:	eef0 8a40 	vmov.f32	s17, s0
 8000aca:	f7ff fed1 	bl	8000870 <ai_get_input_zero_point>
 8000ace:	f1c4 0301 	rsb	r3, r4, #1
 8000ad2:	1e62      	subs	r2, r4, #1
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ad4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000ad8:	1b59      	subs	r1, r3, r5
 8000ada:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000ade:	34ff      	adds	r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ae0:	b2c5      	uxtb	r5, r0
 8000ae2:	e017      	b.n	8000b14 <AI_Init+0x138>
 8000ae4:	337f      	adds	r3, #127	; 0x7f
 8000ae6:	db2e      	blt.n	8000b46 <AI_Init+0x16a>
 8000ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af0:	bf4c      	ite	mi
 8000af2:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000af6:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000afe:	edcd 7a01 	vstr	s15, [sp, #4]
 8000b02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b06:	442b      	add	r3, r5
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000b0e:	4294      	cmp	r4, r2
 8000b10:	f43f af7b 	beq.w	8000a0a <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000b14:	188b      	adds	r3, r1, r2
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000b1e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2a:	bf4c      	ite	mi
 8000b2c:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000b30:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000b34:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000b38:	ee17 3a10 	vmov	r3, s14
 8000b3c:	4403      	add	r3, r0
 8000b3e:	2b7e      	cmp	r3, #126	; 0x7e
 8000b40:	ddd0      	ble.n	8000ae4 <AI_Init+0x108>
 8000b42:	237f      	movs	r3, #127	; 0x7f
 8000b44:	e7e1      	b.n	8000b0a <AI_Init+0x12e>
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	e7df      	b.n	8000b0a <AI_Init+0x12e>
 8000b4a:	bf00      	nop
 8000b4c:	240053e4 	.word	0x240053e4

08000b50 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000b50:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000b54:	f7ff bf2c 	b.w	80009b0 <ai_run>

08000b58 <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4605      	mov	r5, r0
 8000b5c:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000b5e:	f7ff fe03 	bl	8000768 <ai_get_input_format>
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d02a      	beq.n	8000bbc <AI_PixelValueConversion+0x64>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000b66:	f7ff fdff 	bl	8000768 <ai_get_input_format>
 8000b6a:	2801      	cmp	r0, #1
 8000b6c:	d000      	beq.n	8000b70 <AI_PixelValueConversion+0x18>
      while(1);
    }
  }
  else
  {
    while(1);
 8000b6e:	e7fe      	b.n	8000b6e <AI_PixelValueConversion+0x16>
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000b70:	edd5 7a04 	vldr	s15, [r5, #16]
 8000b74:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c1c <AI_PixelValueConversion+0xc4>
 8000b78:	eef4 7a47 	vcmp.f32	s15, s14
 8000b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b80:	d02c      	beq.n	8000bdc <AI_PixelValueConversion+0x84>
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000b82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c20 <AI_PixelValueConversion+0xc8>
 8000b86:	eef4 7a47 	vcmp.f32	s15, s14
 8000b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8e:	d143      	bne.n	8000c18 <AI_PixelValueConversion+0xc0>
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000b90:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000b94:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000b96:	f504 3213 	add.w	r2, r4, #150528	; 0x24c00
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000b9a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000c24 <AI_PixelValueConversion+0xcc>
 8000b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba2:	eeb0 6a66 	vmov.f32	s12, s13
 8000ba6:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000baa:	42a2      	cmp	r2, r4
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8000bb4:	eca3 6a01 	vstmia	r3!, {s12}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bb8:	d1f1      	bne.n	8000b9e <AI_PixelValueConversion+0x46>
}
 8000bba:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000bbc:	686b      	ldr	r3, [r5, #4]
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000bbe:	68e9      	ldr	r1, [r5, #12]
  if (pDst > pSrc)
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	d21d      	bcs.n	8000c00 <AI_PixelValueConversion+0xa8>
 8000bc4:	f503 3313 	add.w	r3, r3, #150528	; 0x24c00
 8000bc8:	f504 3213 	add.w	r2, r4, #150528	; 0x24c00
      pDst[i] = lut[pSrc[i]];
 8000bcc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8000bd0:	5c08      	ldrb	r0, [r1, r0]
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bd2:	42a2      	cmp	r2, r4
      pDst[i] = lut[pSrc[i]];
 8000bd4:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bd8:	d1f8      	bne.n	8000bcc <AI_PixelValueConversion+0x74>
}
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000bdc:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bde:	f504 3213 	add.w	r2, r4, #150528	; 0x24c00
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000be2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000c28 <AI_PixelValueConversion+0xd0>
 8000be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bea:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bee:	42a2      	cmp	r2, r4
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	ece3 7a01 	vstmia	r3!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bfc:	d1f3      	bne.n	8000be6 <AI_PixelValueConversion+0x8e>
}
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
 8000c00:	480a      	ldr	r0, [pc, #40]	; (8000c2c <AI_PixelValueConversion+0xd4>)
 8000c02:	3b01      	subs	r3, #1
 8000c04:	1e62      	subs	r2, r4, #1
 8000c06:	4420      	add	r0, r4
      pDst[i] = lut[pSrc[i]];
 8000c08:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8000c0c:	5d0c      	ldrb	r4, [r1, r4]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c0e:	4290      	cmp	r0, r2
      pDst[i] = lut[pSrc[i]];
 8000c10:	f803 4f01 	strb.w	r4, [r3, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c14:	d1f8      	bne.n	8000c08 <AI_PixelValueConversion+0xb0>
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
      while(1);
 8000c18:	e7fe      	b.n	8000c18 <AI_PixelValueConversion+0xc0>
 8000c1a:	bf00      	nop
 8000c1c:	437f0000 	.word	0x437f0000
 8000c20:	42fe0000 	.word	0x42fe0000
 8000c24:	3c008081 	.word	0x3c008081
 8000c28:	3b808081 	.word	0x3b808081
 8000c2c:	00024bff 	.word	0x00024bff

08000c30 <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	ed2d 8b02 	vpush	{d8}
 8000c36:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000c38:	f7ff fd9e 	bl	8000778 <ai_get_output_format>
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d002      	beq.n	8000c46 <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000c40:	ecbd 8b02 	vpop	{d8}
 8000c44:	bd10      	pop	{r4, pc}
    switch(ai_get_output_quantization_scheme())
 8000c46:	f7ff fdcb 	bl	80007e0 <ai_get_output_quantization_scheme>
 8000c4a:	2801      	cmp	r0, #1
 8000c4c:	d030      	beq.n	8000cb0 <AI_Output_Dequantize+0x80>
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	d015      	beq.n	8000c7e <AI_Output_Dequantize+0x4e>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d1f4      	bne.n	8000c40 <AI_Output_Dequantize+0x10>
      scale=ai_get_output_fxp_scale();
 8000c56:	f7ff fde1 	bl	800081c <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000c5a:	6821      	ldr	r1, [r4, #0]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000c5c:	f101 0312 	add.w	r3, r1, #18
 8000c60:	f101 0248 	add.w	r2, r1, #72	; 0x48
        float q_value = (float) *(nn_output_i8 + i);
 8000c64:	f913 0d01 	ldrsb.w	r0, [r3, #-1]!
 8000c68:	ee07 0a90 	vmov	s15, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000c6c:	4299      	cmp	r1, r3
        float q_value = (float) *(nn_output_i8 + i);
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 8000c72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000c76:	ed62 7a01 	vstmdb	r2!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000c7a:	d1f3      	bne.n	8000c64 <AI_Output_Dequantize+0x34>
 8000c7c:	e7e0      	b.n	8000c40 <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000c7e:	f7ff fe1b 	bl	80008b8 <ai_get_output_scale>
 8000c82:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000c86:	f7ff fe2f 	bl	80008e8 <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000c8a:	6824      	ldr	r4, [r4, #0]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000c8c:	f104 0212 	add.w	r2, r4, #18
 8000c90:	f104 0148 	add.w	r1, r4, #72	; 0x48
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000c94:	f912 3d01 	ldrsb.w	r3, [r2, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000c98:	1a1b      	subs	r3, r3, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000c9a:	42a2      	cmp	r2, r4
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000ca8:	ed61 7a01 	vstmdb	r1!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cac:	d1f2      	bne.n	8000c94 <AI_Output_Dequantize+0x64>
 8000cae:	e7c7      	b.n	8000c40 <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000cb0:	f7ff fe02 	bl	80008b8 <ai_get_output_scale>
 8000cb4:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000cb8:	f7ff fe16 	bl	80008e8 <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8000cbc:	6824      	ldr	r4, [r4, #0]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cbe:	f104 0212 	add.w	r2, r4, #18
 8000cc2:	f104 0148 	add.w	r1, r4, #72	; 0x48
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000cc6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cca:	1a1b      	subs	r3, r3, r0
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000ccc:	4294      	cmp	r4, r2
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000cda:	ed61 7a01 	vstmdb	r1!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cde:	d1f2      	bne.n	8000cc6 <AI_Output_Dequantize+0x96>
 8000ce0:	e7ae      	b.n	8000c40 <AI_Output_Dequantize+0x10>
 8000ce2:	bf00      	nop

08000ce4 <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 8000ce4:	f7ff be5e 	b.w	80009a4 <ai_deinit>

08000ce8 <APP_Init>:
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 8000ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000cec:	4923      	ldr	r1, [pc, #140]	; (8000d7c <APP_Init+0x94>)
{  
 8000cee:	4604      	mov	r4, r0
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 8000cf0:	2700      	movs	r7, #0
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <APP_Init+0x98>)
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000cf4:	6721      	str	r1, [r4, #112]	; 0x70
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000cf6:	f04f 0c01 	mov.w	ip, #1
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000cfa:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <APP_Init+0x9c>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga");
 8000cfc:	f503 7570 	add.w	r5, r3, #960	; 0x3c0
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 8000d00:	4921      	ldr	r1, [pc, #132]	; (8000d88 <APP_Init+0xa0>)
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000d02:	f04f 0802 	mov.w	r8, #2
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d06:	f8df e094 	ldr.w	lr, [pc, #148]	; 8000d9c <APP_Init+0xb4>
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d0a:	4820      	ldr	r0, [pc, #128]	; (8000d8c <APP_Init+0xa4>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga");
 8000d0c:	4e20      	ldr	r6, [pc, #128]	; (8000d90 <APP_Init+0xa8>)
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d0e:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000d12:	f04f 0e04 	mov.w	lr, #4
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d16:	f884 c000 	strb.w	ip, [r4]
  App_Context_Ptr->run_loop=1;
 8000d1a:	f8c4 c004 	str.w	ip, [r4, #4]
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d1e:	6620      	str	r0, [r4, #96]	; 0x60
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d20:	65e2      	str	r2, [r4, #92]	; 0x5c
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d22:	638c      	str	r4, [r1, #56]	; 0x38
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d24:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 8000d28:	e9c2 4706 	strd	r4, r7, [r2, #24]
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d2c:	f8c3 4b80 	str.w	r4, [r3, #2944]	; 0xb80
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga");
 8000d30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d34:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000d38:	0c13      	lsrs	r3, r2, #16
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000d3a:	4e16      	ldr	r6, [pc, #88]	; (8000d94 <APP_Init+0xac>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga");
 8000d3c:	c503      	stmia	r5!, {r0, r1}
 8000d3e:	f825 2b02 	strh.w	r2, [r5], #2
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.w = AI_NETWORK_WIDTH;
 8000d42:	21e0      	movs	r1, #224	; 0xe0
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga");
 8000d44:	702b      	strb	r3, [r5, #0]
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8000d46:	4620      	mov	r0, r4
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d4a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d4c:	60dc      	str	r4, [r3, #12]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <APP_Init+0xb0>)
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d50:	6194      	str	r4, [r2, #24]
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000d52:	6016      	str	r6, [r2, #0]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 8000d54:	6113      	str	r3, [r2, #16]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000d56:	6e23      	ldr	r3, [r4, #96]	; 0x60
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=0;
 8000d58:	6157      	str	r7, [r2, #20]
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000d5a:	629f      	str	r7, [r3, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000d5c:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000d60:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  App_Context_Ptr->Preproc_ContextPtr->red_blue_swap = 1; /* See UM2611 section 3.2.6 Pixel data order */
 8000d64:	f8c3 c008 	str.w	ip, [r3, #8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000d68:	e9c3 7412 	strd	r7, r4, [r3, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000d6c:	e9c3 110f 	strd	r1, r1, [r3, #60]	; 0x3c
}
 8000d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000d74:	e9c3 1107 	strd	r1, r1, [r3, #28]
  Init_DataMemoryLayout(App_Context_Ptr);
 8000d78:	f016 bee0 	b.w	8017b3c <Init_DataMemoryLayout>
 8000d7c:	240054e4 	.word	0x240054e4
 8000d80:	24005740 	.word	0x24005740
 8000d84:	240055e0 	.word	0x240055e0
 8000d88:	240062d0 	.word	0x240062d0
 8000d8c:	24005610 	.word	0x24005610
 8000d90:	08024010 	.word	0x08024010
 8000d94:	24003838 	.word	0x24003838
 8000d98:	437f0000 	.word	0x437f0000
 8000d9c:	24005600 	.word	0x24005600

08000da0 <APP_GetNextReadyFrame>:
 *        1. send it to LCD for display
 *        2. make it available for subsequent processing
 * @param App_Context_Ptr pointer to application context
 */
void APP_GetNextReadyFrame(AppContext_TypeDef *App_Context_Ptr)
{
 8000da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000da4:	7807      	ldrb	r7, [r0, #0]
{
 8000da6:	4606      	mov	r6, r0
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000da8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8000daa:	b08c      	sub	sp, #48	; 0x30
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000dac:	2f02      	cmp	r7, #2
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000dae:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8000db0:	e9d2 5400 	ldrd	r5, r4, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000db4:	f000 808d 	beq.w	8000ed2 <APP_GetNextReadyFrame+0x132>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000db8:	2f03      	cmp	r7, #3
          (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000dba:	f890 8004 	ldrb.w	r8, [r0, #4]
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000dbe:	d03d      	beq.n	8000e3c <APP_GetNextReadyFrame+0x9c>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000dc0:	7d13      	ldrb	r3, [r2, #20]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0fc      	beq.n	8000dc0 <APP_GetNextReadyFrame+0x20>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000dc6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dca:	46aa      	mov	sl, r5
 8000dcc:	f019 f888 	bl	8019ee0 <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000dd0:	2f02      	cmp	r7, #2
 8000dd2:	d046      	beq.n	8000e62 <APP_GetNextReadyFrame+0xc2>
 8000dd4:	2f03      	cmp	r7, #3
 8000dd6:	d108      	bne.n	8000dea <APP_GetNextReadyFrame+0x4a>
 8000dd8:	f1b8 0f03 	cmp.w	r8, #3
 8000ddc:	d105      	bne.n	8000dea <APP_GetNextReadyFrame+0x4a>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000dde:	2202      	movs	r2, #2
 8000de0:	f44f 2116 	mov.w	r1, #614400	; 0x96000
 8000de4:	4650      	mov	r0, sl
 8000de6:	f003 feb1 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000dea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dee:	f44f 7020 	mov.w	r0, #640	; 0x280
 8000df2:	2300      	movs	r3, #0
 8000df4:	2702      	movs	r7, #2
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	4651      	mov	r1, sl
 8000dfa:	9000      	str	r0, [sp, #0]
 8000dfc:	2250      	movs	r2, #80	; 0x50
 8000dfe:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8000e02:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8000e04:	f000 fd7c 	bl	8001900 <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 8000e08:	7833      	ldrb	r3, [r6, #0]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d005      	beq.n	8000e1a <APP_GetNextReadyFrame+0x7a>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 2116 	mov.w	r1, #614400	; 0x96000
 8000e14:	4628      	mov	r0, r5
 8000e16:	f003 fe99 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
 8000e1a:	1ceb      	adds	r3, r5, #3
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d961      	bls.n	8000ee6 <APP_GetNextReadyFrame+0x146>
 8000e22:	462b      	mov	r3, r5
 8000e24:	4622      	mov	r2, r4
 8000e26:	f505 2016 	add.w	r0, r5, #614400	; 0x96000
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8000e2e:	4283      	cmp	r3, r0
 8000e30:	f842 1b04 	str.w	r1, [r2], #4
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e34:	d1f9      	bne.n	8000e2a <APP_GetNextReadyFrame+0x8a>
  }
#endif
}
 8000e36:	b00c      	add	sp, #48	; 0x30
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e3c:	f1b8 0f03 	cmp.w	r8, #3
 8000e40:	d1be      	bne.n	8000dc0 <APP_GetNextReadyFrame+0x20>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 8000e42:	4629      	mov	r1, r5
 8000e44:	f002 fa5e 	bl	8003304 <TEST_GetNextDumpInput>
 8000e48:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000e4a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e4e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8000e50:	7837      	ldrb	r7, [r6, #0]
 8000e52:	f892 8004 	ldrb.w	r8, [r2, #4]
 8000e56:	f8d3 a000 	ldr.w	sl, [r3]
 8000e5a:	f019 f841 	bl	8019ee0 <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000e5e:	2f02      	cmp	r7, #2
 8000e60:	d1b8      	bne.n	8000dd4 <APP_GetNextReadyFrame+0x34>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000e62:	463a      	mov	r2, r7
 8000e64:	4650      	mov	r0, sl
 8000e66:	f44f 2116 	mov.w	r1, #614400	; 0x96000
    thumb_img.w = 224;
 8000e6a:	f04f 08e0 	mov.w	r8, #224	; 0xe0
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000e6e:	f003 fe6d 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    camera_out_img.w = CAM_RES_WIDTH;
 8000e72:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e76:	f44f 7220 	mov.w	r2, #640	; 0x280
    thumb_img.data = valid_image_buff;
 8000e7a:	4823      	ldr	r0, [pc, #140]	; (8000f08 <APP_GetNextReadyFrame+0x168>)
    thumb_img.w = 224;
 8000e7c:	f04f 09e0 	mov.w	r9, #224	; 0xe0
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000e80:	a908      	add	r1, sp, #32
    camera_out_img.data = camera_capture_buffer;
 8000e82:	f8cd a01c 	str.w	sl, [sp, #28]
    camera_out_img.bpp = IMAGE_BPP_RGB565;
 8000e86:	9706      	str	r7, [sp, #24]
    camera_out_img.w = CAM_RES_WIDTH;
 8000e88:	e9cd 2304 	strd	r2, r3, [sp, #16]
    thumb_img.data = valid_image_buff;
 8000e8c:	e9cd 700a 	strd	r7, r0, [sp, #40]	; 0x28
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000e90:	2200      	movs	r2, #0
 8000e92:	a804      	add	r0, sp, #16
    thumb_img.w = 224;
 8000e94:	e9cd 8908 	strd	r8, r9, [sp, #32]
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000e98:	f018 fce0 	bl	801985c <STM32Ipl_Downscale>
    UTILS_DCache_Coherency_Maintenance((void *)thumb_img.data, STM32Ipl_ImageDataSize(&thumb_img), CLEAN);
 8000e9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000ea0:	a808      	add	r0, sp, #32
 8000ea2:	f016 ff8d 	bl	8017dc0 <STM32Ipl_ImageDataSize>
 8000ea6:	463a      	mov	r2, r7
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	4640      	mov	r0, r8
 8000eac:	f003 fe4e 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000eb0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8000eb4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8000eb8:	f04f 0c00 	mov.w	ip, #0
 8000ebc:	2382      	movs	r3, #130	; 0x82
 8000ebe:	2232      	movs	r2, #50	; 0x32
 8000ec0:	e9cd 1000 	strd	r1, r0, [sp]
 8000ec4:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 8000ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000eca:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8000ecc:	f000 fd18 	bl	8001900 <DISPLAY_Copy2LCDWriteBuffer>
 8000ed0:	e79a      	b.n	8000e08 <APP_GetNextReadyFrame+0x68>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000ed2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8000ed6:	b19b      	cbz	r3, 8000f00 <APP_GetNextReadyFrame+0x160>
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000ed8:	7d13      	ldrb	r3, [r2, #20]
 8000eda:	f890 8004 	ldrb.w	r8, [r0, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f43f af6e 	beq.w	8000dc0 <APP_GetNextReadyFrame+0x20>
 8000ee4:	e76f      	b.n	8000dc6 <APP_GetNextReadyFrame+0x26>
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <APP_GetNextReadyFrame+0x16c>)
 8000ee8:	1e62      	subs	r2, r4, #1
 8000eea:	1e6b      	subs	r3, r5, #1
 8000eec:	4428      	add	r0, r5
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000eee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000ef2:	4283      	cmp	r3, r0
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000ef4:	f802 1f01 	strb.w	r1, [r2, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000ef8:	d1f9      	bne.n	8000eee <APP_GetNextReadyFrame+0x14e>
}
 8000efa:	b00c      	add	sp, #48	; 0x30
 8000efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 8000f00:	4629      	mov	r1, r5
 8000f02:	f002 fa59 	bl	80033b8 <TEST_GetNextValidationInput>
 8000f06:	e79f      	b.n	8000e48 <APP_GetNextReadyFrame+0xa8>
 8000f08:	d0ba3000 	.word	0xd0ba3000
 8000f0c:	00095fff 	.word	0x00095fff

08000f10 <APP_StartNewFrameAcquisition>:
/**
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000f12:	7803      	ldrb	r3, [r0, #0]
{
 8000f14:	4604      	mov	r4, r0
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d008      	beq.n	8000f2c <APP_StartNewFrameAcquisition+0x1c>
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d006      	beq.n	8000f2c <APP_StartNewFrameAcquisition+0x1c>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d000      	beq.n	8000f24 <APP_StartNewFrameAcquisition+0x14>
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
  //  __enable_irq();
  }
}
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8000f24:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d0fa      	beq.n	8000f22 <APP_StartNewFrameAcquisition+0x12>
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000f2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000f2e:	2500      	movs	r5, #0
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f30:	6ea6      	ldr	r6, [r4, #104]	; 0x68
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000f32:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f34:	f009 fb0a 	bl	800a54c <HAL_GetTick>
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000f38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f3a:	4602      	mov	r2, r0
    BSP_CAMERA_Resume(0);
 8000f3c:	4628      	mov	r0, r5
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f3e:	61b2      	str	r2, [r6, #24]
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000f40:	751d      	strb	r5, [r3, #20]
}
 8000f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 8000f46:	f008 bb29 	b.w	800959c <BSP_CAMERA_Resume>
 8000f4a:	bf00      	nop

08000f4c <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8000f4c:	f016 be0c 	b.w	8017b68 <Run_Preprocessing>

08000f50 <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tinf_start;
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <APP_NetworkInference+0x5c>)
{
 8000f54:	4604      	mov	r4, r0
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8000f56:	2500      	movs	r5, #0
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000f58:	2704      	movs	r7, #4
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000f5a:	4e15      	ldr	r6, [pc, #84]	; (8000fb0 <APP_NetworkInference+0x60>)
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000f5c:	e9d0 011b 	ldrd	r0, r1, [r0, #108]	; 0x6c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000f60:	684b      	ldr	r3, [r1, #4]
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000f62:	21e0      	movs	r1, #224	; 0xe0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000f64:	f8c0 2b4c 	str.w	r2, [r0, #2892]	; 0xb4c
  TestRunCtxt_Ptr->PerformCapture=1;
 8000f68:	2201      	movs	r2, #1
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000f6a:	f8c0 3b48 	str.w	r3, [r0, #2888]	; 0xb48
  TestRunCtxt_Ptr->PerformCapture=1;
 8000f6e:	f8c0 2b60 	str.w	r2, [r0, #2912]	; 0xb60
  TestRunCtxt_Ptr->rb_swap=1;
 8000f72:	f8c0 2b68 	str.w	r2, [r0, #2920]	; 0xb68
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8000f76:	f880 5b64 	strb.w	r5, [r0, #2916]	; 0xb64
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000f7a:	f8c0 7b58 	str.w	r7, [r0, #2904]	; 0xb58
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000f7e:	f8c0 6b5c 	str.w	r6, [r0, #2908]	; 0xb5c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000f82:	f8c0 1b50 	str.w	r1, [r0, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8000f86:	f8c0 1b54 	str.w	r1, [r0, #2900]	; 0xb54
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8000f8a:	7821      	ldrb	r1, [r4, #0]
 8000f8c:	f002 fdf0 	bl	8003b70 <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8000f90:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000f92:	f003 fd1d 	bl	80049d0 <UTILS_GetTimeStamp>
 8000f96:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 8000f98:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8000f9a:	f7ff fdd9 	bl	8000b50 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8000f9e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000fa0:	f003 fd16 	bl	80049d0 <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 8000fa4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8000fa6:	1b40      	subs	r0, r0, r5
 8000fa8:	6118      	str	r0, [r3, #16]
}
 8000faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fac:	240000b4 	.word	0x240000b4
 8000fb0:	00024c01 	.word	0x00024c01

08000fb4 <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000fb6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8000fb8:	b095      	sub	sp, #84	; 0x54
 8000fba:	4605      	mov	r5, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000fbc:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000fbe:	7d13      	ldrb	r3, [r2, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0fc      	beq.n	8000fbe <APP_Postprocess+0xa>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8000fc4:	6ea8      	ldr	r0, [r5, #104]	; 0x68
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8000fc6:	2400      	movs	r4, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8000fc8:	f003 fe1a 	bl	8004c00 <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 8000fcc:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8000fce:	f7ff fe2f 	bl	8000c30 <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8000fd2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 8000fd4:	2248      	movs	r2, #72	; 0x48
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8000fd6:	489f      	ldr	r0, [pc, #636]	; (8001254 <APP_Postprocess+0x2a0>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8000fd8:	6819      	ldr	r1, [r3, #0]
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8000fda:	2302      	movs	r3, #2
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8000fdc:	f8c6 0b4c 	str.w	r0, [r6, #2892]	; 0xb4c
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8000fe0:	f886 3b64 	strb.w	r3, [r6, #2916]	; 0xb64
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 8000fe4:	f8c6 2b5c 	str.w	r2, [r6, #2908]	; 0xb5c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8000fe8:	f8c6 1b48 	str.w	r1, [r6, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_width_size=0;
 8000fec:	f8c6 4b50 	str.w	r4, [r6, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=0;
 8000ff0:	f8c6 4b54 	str.w	r4, [r6, #2900]	; 0xb54
  TestRunCtxt_Ptr->PerformCapture=0;
 8000ff4:	f8c6 4b60 	str.w	r4, [r6, #2912]	; 0xb60
  TestRunCtxt_Ptr->rb_swap=0;
 8000ff8:	f8c6 4b68 	str.w	r4, [r6, #2920]	; 0xb68
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8000ffc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8000ffe:	7829      	ldrb	r1, [r5, #0]
 8001000:	f002 fdb6 	bl	8003b70 <TEST_Run>

  /**Perform ranking**/
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
 8001004:	4622      	mov	r2, r4
 8001006:	f105 0310 	add.w	r3, r5, #16
  {
    App_Context_Ptr->ranking[i] = i;
 800100a:	f843 2f04 	str.w	r2, [r3, #4]!
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
 800100e:	3201      	adds	r2, #1
 8001010:	2a12      	cmp	r2, #18
 8001012:	d1fa      	bne.n	800100a <APP_Postprocess+0x56>
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8001014:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001016:	f105 0114 	add.w	r1, r5, #20
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 800101a:	4c8f      	ldr	r4, [pc, #572]	; (8001258 <APP_Postprocess+0x2a4>)
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f003 fdc7 	bl	8004bb0 <UTILS_Bubblesort>
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001022:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001024:	696a      	ldr	r2, [r5, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001026:	681b      	ldr	r3, [r3, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001028:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 800102c:	6819      	ldr	r1, [r3, #0]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 800102e:	782b      	ldrb	r3, [r5, #0]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001030:	6129      	str	r1, [r5, #16]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001032:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001034:	60ea      	str	r2, [r5, #12]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001036:	d004      	beq.n	8001042 <APP_Postprocess+0x8e>
    
    BSP_LED_Toggle(LED_BLUE);
  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 8001038:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800103a:	f003 f879 	bl	8004130 <TEST_PostProcess>
  }
}
 800103e:	b015      	add	sp, #84	; 0x54
 8001040:	bdf0      	pop	{r4, r5, r6, r7, pc}
  occurrence_number--;
 8001042:	4b86      	ldr	r3, [pc, #536]	; (800125c <APP_Postprocess+0x2a8>)
 8001044:	6818      	ldr	r0, [r3, #0]
  if (occurrence_number == 0)
 8001046:	3801      	subs	r0, #1
 8001048:	d005      	beq.n	8001056 <APP_Postprocess+0xa2>
  occurrence_number--;
 800104a:	6018      	str	r0, [r3, #0]
    BSP_LED_Toggle(LED_BLUE);
 800104c:	2003      	movs	r0, #3
 800104e:	f007 fa03 	bl	8008458 <BSP_LED_Toggle>
}
 8001052:	b015      	add	sp, #84	; 0x54
 8001054:	bdf0      	pop	{r4, r5, r6, r7, pc}
      display_mode = !display_mode;
 8001056:	4f82      	ldr	r7, [pc, #520]	; (8001260 <APP_Postprocess+0x2ac>)
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001058:	f007 fa58 	bl	800850c <BSP_PB_GetState>
 800105c:	2800      	cmp	r0, #0
 800105e:	d173      	bne.n	8001148 <APP_Postprocess+0x194>
 8001060:	ae02      	add	r6, sp, #8
    if (display_mode == 0)
 8001062:	683f      	ldr	r7, [r7, #0]
 8001064:	2f00      	cmp	r7, #0
 8001066:	f000 80b6 	beq.w	80011d6 <APP_Postprocess+0x222>
    else  if (display_mode == 1)
 800106a:	2f01      	cmp	r7, #1
 800106c:	f000 80bf 	beq.w	80011ee <APP_Postprocess+0x23a>
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 8001070:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001072:	4630      	mov	r0, r6
 8001074:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8001264 <APP_Postprocess+0x2b0>
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	696b      	ldr	r3, [r5, #20]
 800107c:	ed92 7a00 	vldr	s14, [r2]
 8001080:	4979      	ldr	r1, [pc, #484]	; (8001268 <APP_Postprocess+0x2b4>)
 8001082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001086:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800108a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800108e:	ed8d 7b00 	vstr	d7, [sp]
 8001092:	f020 fa7f 	bl	8021594 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 8001096:	f018 ff1b 	bl	8019ed0 <UTIL_LCD_GetFont>
 800109a:	88c1      	ldrh	r1, [r0, #6]
 800109c:	2301      	movs	r3, #1
 800109e:	4632      	mov	r2, r6
 80010a0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80010a4:	2000      	movs	r0, #0
 80010a6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80010aa:	f019 f801 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 80010ae:	68aa      	ldr	r2, [r5, #8]
 80010b0:	496e      	ldr	r1, [pc, #440]	; (800126c <APP_Postprocess+0x2b8>)
 80010b2:	4630      	mov	r0, r6
 80010b4:	f020 fa6e 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 80010b8:	f018 ff0a 	bl	8019ed0 <UTIL_LCD_GetFont>
 80010bc:	88c1      	ldrh	r1, [r0, #6]
 80010be:	2301      	movs	r3, #1
 80010c0:	4632      	mov	r2, r6
 80010c2:	2000      	movs	r0, #0
 80010c4:	0109      	lsls	r1, r1, #4
 80010c6:	f018 fff3 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 80010ca:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80010cc:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001270 <APP_Postprocess+0x2bc>
 80010d0:	4630      	mov	r0, r6
 80010d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d6:	4967      	ldr	r1, [pc, #412]	; (8001274 <APP_Postprocess+0x2c0>)
 80010d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010e0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80010e4:	ec53 2b17 	vmov	r2, r3, d7
 80010e8:	f020 fa54 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 80010ec:	f018 fef0 	bl	8019ed0 <UTIL_LCD_GetFont>
 80010f0:	88c1      	ldrh	r1, [r0, #6]
 80010f2:	2301      	movs	r3, #1
 80010f4:	4632      	mov	r2, r6
 80010f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80010fa:	2000      	movs	r0, #0
 80010fc:	4099      	lsls	r1, r3
 80010fe:	f018 ffd7 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 8001102:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8001104:	f000 fbda 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 8001108:	2000      	movs	r0, #0
 800110a:	f007 f995 	bl	8008438 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 800110e:	2001      	movs	r0, #1
 8001110:	f007 f992 	bl	8008438 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 8001114:	2002      	movs	r0, #2
 8001116:	f007 f98f 	bl	8008438 <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 800111a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800111c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001278 <APP_Postprocess+0x2c4>
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d44e      	bmi.n	80011ce <APP_Postprocess+0x21a>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 8001130:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800127c <APP_Postprocess+0x2c8>
 8001134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 800113c:	bf4c      	ite	mi
 800113e:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 8001140:	2000      	movpl	r0, #0
 8001142:	f007 f969 	bl	8008418 <BSP_LED_On>
 8001146:	e781      	b.n	800104c <APP_Postprocess+0x98>
      display_mode = !display_mode;
 8001148:	683b      	ldr	r3, [r7, #0]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800114a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 800114e:	ae02      	add	r6, sp, #8
      display_mode = !display_mode;
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	603b      	str	r3, [r7, #0]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001158:	f018 fec2 	bl	8019ee0 <UTIL_LCD_Clear>
      if (display_mode == 1)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d06a      	beq.n	8001238 <APP_Postprocess+0x284>
      else  if (display_mode == 0)
 8001162:	2b00      	cmp	r3, #0
 8001164:	d05c      	beq.n	8001220 <APP_Postprocess+0x26c>
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 8001166:	f018 feb3 	bl	8019ed0 <UTIL_LCD_GetFont>
 800116a:	88c1      	ldrh	r1, [r0, #6]
 800116c:	2301      	movs	r3, #1
 800116e:	4632      	mov	r2, r6
 8001170:	2000      	movs	r0, #0
 8001172:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001176:	f018 ff9b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Please release button");
 800117a:	f8df e104 	ldr.w	lr, [pc, #260]	; 8001280 <APP_Postprocess+0x2cc>
 800117e:	46b4      	mov	ip, r6
 8001180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001188:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800118c:	f84c 0b04 	str.w	r0, [ip], #4
 8001190:	f8ac 1000 	strh.w	r1, [ip]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 8001194:	f018 fe9c 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001198:	4601      	mov	r1, r0
 800119a:	2301      	movs	r3, #1
 800119c:	2000      	movs	r0, #0
 800119e:	88c9      	ldrh	r1, [r1, #6]
 80011a0:	4632      	mov	r2, r6
 80011a2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80011a6:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 80011aa:	f018 ff81 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80011ae:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80011b0:	f000 fb84 	bl	80018bc <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f007 f9a9 	bl	800850c <BSP_PB_GetState>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1fa      	bne.n	80011b4 <APP_Postprocess+0x200>
      HAL_Delay(200);
 80011be:	20c8      	movs	r0, #200	; 0xc8
 80011c0:	f009 f9ca 	bl	800a558 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80011c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011c8:	f018 fe8a 	bl	8019ee0 <UTIL_LCD_Clear>
 80011cc:	e749      	b.n	8001062 <APP_Postprocess+0xae>
      BSP_LED_On(LED_RED);
 80011ce:	2002      	movs	r0, #2
 80011d0:	f007 f922 	bl	8008418 <BSP_LED_On>
 80011d4:	e73a      	b.n	800104c <APP_Postprocess+0x98>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);/*To clear the camera capture*/
 80011d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011da:	f018 fe81 	bl	8019ee0 <UTIL_LCD_Clear>
      DISPLAY_FoodLogo(App_Context_Ptr->Display_ContextPtr, LCD_RES_WIDTH / 2 - 64, LCD_RES_HEIGHT / 2 -100, App_Context_Ptr->ranking[0]);
 80011de:	696b      	ldr	r3, [r5, #20]
 80011e0:	228c      	movs	r2, #140	; 0x8c
 80011e2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80011e6:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80011e8:	f000 fb4a 	bl	8001880 <DISPLAY_FoodLogo>
 80011ec:	e740      	b.n	8001070 <APP_Postprocess+0xbc>
      sprintf(msg, "CAMERA PREVIEW MODE");
 80011ee:	f8df e094 	ldr.w	lr, [pc, #148]	; 8001284 <APP_Postprocess+0x2d0>
 80011f2:	46b4      	mov	ip, r6
 80011f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80011f8:	f8de e000 	ldr.w	lr, [lr]
 80011fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001200:	f8cc e000 	str.w	lr, [ip]
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_ACQU_MODE_LINE), (uint8_t*)msg, CENTER_MODE);
 8001204:	f018 fe64 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001208:	4601      	mov	r1, r0
 800120a:	463b      	mov	r3, r7
 800120c:	4632      	mov	r2, r6
 800120e:	88c9      	ldrh	r1, [r1, #6]
 8001210:	2000      	movs	r0, #0
 8001212:	eb01 07c1 	add.w	r7, r1, r1, lsl #3
 8001216:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800121a:	f018 ff49 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
 800121e:	e727      	b.n	8001070 <APP_Postprocess+0xbc>
        sprintf(msg, "Exiting CAMERA PREVIEW mode");
 8001220:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001288 <APP_Postprocess+0x2d4>
 8001224:	46b4      	mov	ip, r6
 8001226:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800122a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800122e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001232:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001236:	e796      	b.n	8001166 <APP_Postprocess+0x1b2>
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 8001238:	f8df e050 	ldr.w	lr, [pc, #80]	; 800128c <APP_Postprocess+0x2d8>
 800123c:	46b4      	mov	ip, r6
 800123e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001246:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800124a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800124e:	f88c 3000 	strb.w	r3, [ip]
 8001252:	e788      	b.n	8001166 <APP_Postprocess+0x1b2>
 8001254:	240000d4 	.word	0x240000d4
 8001258:	24000004 	.word	0x24000004
 800125c:	24000000 	.word	0x24000000
 8001260:	24003834 	.word	0x24003834
 8001264:	42c80000 	.word	0x42c80000
 8001268:	08024094 	.word	0x08024094
 800126c:	080240a0 	.word	0x080240a0
 8001270:	447a0000 	.word	0x447a0000
 8001274:	080240b4 	.word	0x080240b4
 8001278:	3f0ccccd 	.word	0x3f0ccccd
 800127c:	3f333333 	.word	0x3f333333
 8001280:	08024068 	.word	0x08024068
 8001284:	08024080 	.word	0x08024080
 8001288:	0802404c 	.word	0x0802404c
 800128c:	0802402c 	.word	0x0802402c

08001290 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001290:	6802      	ldr	r2, [r0, #0]
 8001292:	68d3      	ldr	r3, [r2, #12]
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 800129a:	f003 bcc5 	b.w	8004c28 <Error_Handler>
 800129e:	bf00      	nop

080012a0 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80012a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80012a6:	2a02      	cmp	r2, #2
 80012a8:	d006      	beq.n	80012b8 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80012b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012b6:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 80012b8:	f003 bcb6 	b.w	8004c28 <Error_Handler>

080012bc <DCMI_DMALineXferCplt>:
{
 80012bc:	b530      	push	{r4, r5, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012be:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 80012c0:	b083      	sub	sp, #12
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 80012c2:	2501      	movs	r5, #1
 80012c4:	4909      	ldr	r1, [pc, #36]	; (80012ec <DCMI_DMALineXferCplt+0x30>)
  uint32_t line_size =  hdcmi->XferSize * 4U;
 80012c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 80012c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  uint32_t line_size =  hdcmi->XferSize * 4U;
 80012ca:	009b      	lsls	r3, r3, #2
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 80012cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <DCMI_DMALineXferCplt+0x34>)
 80012d0:	fb03 2204 	mla	r2, r3, r4, r2
 80012d4:	9500      	str	r5, [sp, #0]
 80012d6:	f00c fe7d 	bl	800dfd4 <HAL_MDMA_Start_IT>
 80012da:	b908      	cbnz	r0, 80012e0 <DCMI_DMALineXferCplt+0x24>
}
 80012dc:	b003      	add	sp, #12
 80012de:	bd30      	pop	{r4, r5, pc}
 80012e0:	b003      	add	sp, #12
 80012e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Error_Handler();
 80012e6:	f003 bc9f 	b.w	8004c28 <Error_Handler>
 80012ea:	bf00      	nop
 80012ec:	30000000 	.word	0x30000000
 80012f0:	24005574 	.word	0x24005574

080012f4 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 80012f4:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 80012f8:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80012fa:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 8001302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001304:	3201      	adds	r2, #1
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800130a:	4282      	cmp	r2, r0
 800130c:	d000      	beq.n	8001310 <DCMI_MDMAFrameXferCplt+0x1c>
}
 800130e:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68d1      	ldr	r1, [r2, #12]
 8001314:	f041 0101 	orr.w	r1, r1, #1
 8001318:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	f012 0202 	ands.w	r2, r2, #2
 8001320:	d003      	beq.n	800132a <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001328:	4770      	bx	lr
      hdcmi->XferCount = 0;
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24006360 	.word	0x24006360

08001334 <CAMERA_Init>:
  Camera_Context_Ptr->new_frame_ready=0;
 8001334:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001336:	4a64      	ldr	r2, [pc, #400]	; (80014c8 <CAMERA_Init+0x194>)
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001338:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
{
 800133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Camera_Context_Ptr->vsync_it=0;
 8001340:	6083      	str	r3, [r0, #8]
{
 8001342:	b082      	sub	sp, #8
  Camera_Context_Ptr->new_frame_ready=0;
 8001344:	7503      	strb	r3, [r0, #20]
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8001346:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  hmdma.Instance = MDMA_Channel0;
 800134a:	4c60      	ldr	r4, [pc, #384]	; (80014cc <CAMERA_Init+0x198>)
{
 800134c:	4606      	mov	r6, r0
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800134e:	f240 2702 	movw	r7, #514	; 0x202
  Camera_Context_Ptr->Tvsync_evt=0;
 8001352:	e9c0 3303 	strd	r3, r3, [r0, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001356:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800135a:	f640 0008 	movw	r0, #2056	; 0x808
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800135e:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001360:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8001364:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.SourceBlockAddressOffset = 0;
 8001366:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001368:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800136c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001370:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.DestBlockAddressOffset   = 0;
 8001374:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001376:	f002 0301 	and.w	r3, r2, #1
  hmdma.Instance = MDMA_Channel0;
 800137a:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <CAMERA_Init+0x19c>)
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 800137c:	6065      	str	r5, [r4, #4]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800137e:	2520      	movs	r5, #32
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	9b01      	ldr	r3, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001384:	2380      	movs	r3, #128	; 0x80
  hmdma.Instance = MDMA_Channel0;
 8001386:	6022      	str	r2, [r4, #0]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800138c:	f8c4 c008 	str.w	ip, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001390:	61e5      	str	r5, [r4, #28]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001392:	6261      	str	r1, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001394:	6322      	str	r2, [r4, #48]	; 0x30
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001396:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8001398:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 800139a:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800139c:	e9c4 7005 	strd	r7, r0, [r4, #20]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f00c fd9d 	bl	800dee0 <HAL_MDMA_Init>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	f040 8085 	bne.w	80014b6 <CAMERA_Init+0x182>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	210f      	movs	r1, #15
 80013b0:	207a      	movs	r0, #122	; 0x7a
 80013b2:	f009 f905 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80013b6:	207a      	movs	r0, #122	; 0x7a
 80013b8:	f009 f93c 	bl	800a634 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f008 f969 	bl	8009694 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 80013c2:	20c8      	movs	r0, #200	; 0xc8
 80013c4:	f009 f8c8 	bl	800a558 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 80013c8:	2200      	movs	r2, #0
 80013ca:	2103      	movs	r1, #3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f007 fe9f 	bl	8009110 <BSP_CAMERA_Init>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d16c      	bne.n	80014b0 <CAMERA_Init+0x17c>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 80013d6:	4a3f      	ldr	r2, [pc, #252]	; (80014d4 <CAMERA_Init+0x1a0>)
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 80013d8:	f245 6140 	movw	r1, #22080	; 0x5640
 80013dc:	483e      	ldr	r0, [pc, #248]	; (80014d8 <CAMERA_Init+0x1a4>)
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 80013de:	6813      	ldr	r3, [r2, #0]
 80013e0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80013e4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 80013ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013f0:	6013      	str	r3, [r2, #0]
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 80013f2:	6803      	ldr	r3, [r0, #0]
 80013f4:	428b      	cmp	r3, r1
 80013f6:	d04b      	beq.n	8001490 <CAMERA_Init+0x15c>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80013f8:	69f1      	ldr	r1, [r6, #28]
 80013fa:	2000      	movs	r0, #0
 80013fc:	f008 f926 	bl	800964c <BSP_CAMERA_SetMirrorFlip>
 8001400:	4607      	mov	r7, r0
 8001402:	2800      	cmp	r0, #0
 8001404:	d143      	bne.n	800148e <CAMERA_Init+0x15a>
  __HAL_LOCK(hdcmi);
 8001406:	4d35      	ldr	r5, [pc, #212]	; (80014dc <CAMERA_Init+0x1a8>)
  HAL_Delay(100);
 8001408:	2064      	movs	r0, #100	; 0x64
 800140a:	f009 f8a5 	bl	800a558 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 800140e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8001412:	2b01      	cmp	r3, #1
 8001414:	d056      	beq.n	80014c4 <CAMERA_Init+0x190>
  __HAL_DCMI_ENABLE(hdcmi);
 8001416:	682b      	ldr	r3, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001418:	2202      	movs	r2, #2
  __HAL_LOCK(hdcmi);
 800141a:	f04f 0801 	mov.w	r8, #1
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 800141e:	6836      	ldr	r6, [r6, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001420:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001424:	4619      	mov	r1, r3
  __HAL_LOCK(hdcmi);
 8001426:	f885 8034 	strb.w	r8, [r5, #52]	; 0x34
  hdcmi->XferSize = line_size / 4U;
 800142a:	f44f 7ca0 	mov.w	ip, #320	; 0x140
  __HAL_DCMI_ENABLE(hdcmi);
 800142e:	681a      	ldr	r2, [r3, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001430:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_ENABLE(hdcmi);
 8001432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001436:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	f022 0202 	bic.w	r2, r2, #2
 800143e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001440:	681a      	ldr	r2, [r3, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <CAMERA_Init+0x1ac>)
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001444:	f841 2b28 	str.w	r2, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001448:	63c3      	str	r3, [r0, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 800144a:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <CAMERA_Init+0x1b0>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <CAMERA_Init+0x1b4>)
  hdcmi->XferCount = 0;
 800144e:	63af      	str	r7, [r5, #56]	; 0x38
  hdcmi->pBuffPtr = (uint32_t) pData;
 8001450:	646e      	str	r6, [r5, #68]	; 0x44
  hdcmi->XferSize = line_size / 4U;
 8001452:	f8c5 c03c 	str.w	ip, [r5, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8001456:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
  hmdma.XferErrorCallback = DCMI_MDMAError;
 800145a:	4e24      	ldr	r6, [pc, #144]	; (80014ec <CAMERA_Init+0x1b8>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800145c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800145e:	6507      	str	r7, [r0, #80]	; 0x50
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001460:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8001462:	6462      	str	r2, [r4, #68]	; 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <CAMERA_Init+0x1bc>)
  hdcmi->XferTransferNumber = num_lines;
 8001466:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
  hmdma.XferErrorCallback = DCMI_MDMAError;
 800146a:	6566      	str	r6, [r4, #84]	; 0x54
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 800146c:	f009 ff94 	bl	800b398 <HAL_DMA_Start_IT>
 8001470:	4603      	mov	r3, r0
 8001472:	bb18      	cbnz	r0, 80014bc <CAMERA_Init+0x188>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001474:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8001476:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001478:	680a      	ldr	r2, [r1, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8001480:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  HAL_Delay(200);
 8001484:	f009 f868 	bl	800a558 <HAL_Delay>
}
 8001488:	b002      	add	sp, #8
 800148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(1);
 800148e:	e7fe      	b.n	800148e <CAMERA_Init+0x15a>
    OV5640_Object_t *pObj = Camera_CompObj;
 8001490:	4918      	ldr	r1, [pc, #96]	; (80014f4 <CAMERA_Init+0x1c0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8001492:	25c0      	movs	r5, #192	; 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001494:	2301      	movs	r3, #1
 8001496:	f10d 0203 	add.w	r2, sp, #3
    OV5640_Object_t *pObj = Camera_CompObj;
 800149a:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 800149c:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80014a0:	f88d 5003 	strb.w	r5, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014a4:	3018      	adds	r0, #24
 80014a6:	f006 fae5 	bl	8007a74 <ov5640_write_reg>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d0a4      	beq.n	80013f8 <CAMERA_Init+0xc4>
      while(1);
 80014ae:	e7fe      	b.n	80014ae <CAMERA_Init+0x17a>
    Error_Handler();
 80014b0:	f003 fbba 	bl	8004c28 <Error_Handler>
 80014b4:	e78f      	b.n	80013d6 <CAMERA_Init+0xa2>
    Error_Handler();
 80014b6:	f003 fbb7 	bl	8004c28 <Error_Handler>
 80014ba:	e777      	b.n	80013ac <CAMERA_Init+0x78>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	64eb      	str	r3, [r5, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 80014c0:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
    while(1);
 80014c4:	e7fe      	b.n	80014c4 <CAMERA_Init+0x190>
 80014c6:	bf00      	nop
 80014c8:	58024400 	.word	0x58024400
 80014cc:	24005574 	.word	0x24005574
 80014d0:	52000040 	.word	0x52000040
 80014d4:	40020458 	.word	0x40020458
 80014d8:	240063b0 	.word	0x240063b0
 80014dc:	24006360 	.word	0x24006360
 80014e0:	080012bd 	.word	0x080012bd
 80014e4:	080012f5 	.word	0x080012f5
 80014e8:	080012a1 	.word	0x080012a1
 80014ec:	08001291 	.word	0x08001291
 80014f0:	30000000 	.word	0x30000000
 80014f4:	24005104 	.word	0x24005104

080014f8 <CAMERA_Enable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <CAMERA_Enable_TestBar_Mode+0x58>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <CAMERA_Enable_TestBar_Mode+0x5c>)
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	2b01      	cmp	r3, #1
{ 
 8001502:	b510      	push	{r4, lr}
 8001504:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8001506:	d906      	bls.n	8001516 <CAMERA_Enable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <CAMERA_Enable_TestBar_Mode+0x60>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 800150a:	2101      	movs	r1, #1
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	f006 fa5b 	bl	80079c8 <OV5640_ColorbarModeConfig>
 8001512:	b1b8      	cbz	r0, 8001544 <CAMERA_Enable_TestBar_Mode+0x4c>
      while(1);
 8001514:	e7fe      	b.n	8001514 <CAMERA_Enable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <CAMERA_Enable_TestBar_Mode+0x60>)
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001518:	2301      	movs	r3, #1
 800151a:	218d      	movs	r1, #141	; 0x8d
 800151c:	6814      	ldr	r4, [r2, #0]
 800151e:	f10d 0207 	add.w	r2, sp, #7
 8001522:	3418      	adds	r4, #24
 8001524:	4620      	mov	r0, r4
 8001526:	f006 ff39 	bl	800839c <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 800152a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800152e:	4620      	mov	r0, r4
 8001530:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001534:	f043 0410 	orr.w	r4, r3, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001538:	218d      	movs	r1, #141	; 0x8d
 800153a:	2301      	movs	r3, #1
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 800153c:	f88d 4007 	strb.w	r4, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001540:	f006 ff34 	bl	80083ac <ov9655_write_reg>
  HAL_Delay(500);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f009 f806 	bl	800a558 <HAL_Delay>
}
 800154c:	b002      	add	sp, #8
 800154e:	bd10      	pop	{r4, pc}
 8001550:	240063b0 	.word	0x240063b0
 8001554:	ffff69aa 	.word	0xffff69aa
 8001558:	24005104 	.word	0x24005104

0800155c <CAMERA_Disable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <CAMERA_Disable_TestBar_Mode+0x64>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <CAMERA_Disable_TestBar_Mode+0x68>)
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4413      	add	r3, r2
 8001564:	2b01      	cmp	r3, #1
{ 
 8001566:	b510      	push	{r4, lr}
 8001568:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 800156a:	d906      	bls.n	800157a <CAMERA_Disable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <CAMERA_Disable_TestBar_Mode+0x6c>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_DISABLE) != OV5640_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f006 fa29 	bl	80079c8 <OV5640_ColorbarModeConfig>
 8001576:	b1e0      	cbz	r0, 80015b2 <CAMERA_Disable_TestBar_Mode+0x56>
      while(1);
 8001578:	e7fe      	b.n	8001578 <CAMERA_Disable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <CAMERA_Disable_TestBar_Mode+0x6c>)
    tmp=0x00;
 800157c:	2100      	movs	r1, #0
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800157e:	2301      	movs	r3, #1
    OV9655_Object_t *pObj = Camera_CompObj;
 8001580:	6814      	ldr	r4, [r2, #0]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001582:	f10d 0207 	add.w	r2, sp, #7
    tmp=0x00;
 8001586:	f88d 1007 	strb.w	r1, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800158a:	218d      	movs	r1, #141	; 0x8d
 800158c:	3418      	adds	r4, #24
 800158e:	4620      	mov	r0, r4
 8001590:	f006 ff0c 	bl	80083ac <ov9655_write_reg>
    HAL_Delay(300);
 8001594:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001598:	f008 ffde 	bl	800a558 <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL3, &tmp, 1);
 800159c:	4620      	mov	r0, r4
 800159e:	f10d 0207 	add.w	r2, sp, #7
 80015a2:	2301      	movs	r3, #1
 80015a4:	210c      	movs	r1, #12
 80015a6:	f006 ff01 	bl	80083ac <ov9655_write_reg>
    HAL_Delay(300);
 80015aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ae:	f008 ffd3 	bl	800a558 <HAL_Delay>
  HAL_Delay(500);
 80015b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b6:	f008 ffcf 	bl	800a558 <HAL_Delay>
}
 80015ba:	b002      	add	sp, #8
 80015bc:	bd10      	pop	{r4, pc}
 80015be:	bf00      	nop
 80015c0:	240063b0 	.word	0x240063b0
 80015c4:	ffff69aa 	.word	0xffff69aa
 80015c8:	24005104 	.word	0x24005104

080015cc <BSP_CAMERA_FrameEventCallback>:
{
 80015cc:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 80015ce:	4c0c      	ldr	r4, [pc, #48]	; (8001600 <BSP_CAMERA_FrameEventCallback+0x34>)
 80015d0:	69a3      	ldr	r3, [r4, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d2:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 80015d4:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80015d6:	6e9e      	ldr	r6, [r3, #104]	; 0x68
  CameraContext.new_frame_ready = 1;
 80015d8:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80015da:	f008 ffb7 	bl	800a54c <HAL_GetTick>
 80015de:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 80015e0:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 80015e2:	f008 ffb3 	bl	800a54c <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80015e6:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 80015e8:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80015ea:	1ac3      	subs	r3, r0, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d801      	bhi.n	80015f4 <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f007 ffc1 	bl	800957c <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 80015fa:	b662      	cpsie	i
}
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
 80015fe:	bf00      	nop
 8001600:	240055e0 	.word	0x240055e0

08001604 <BSP_CAMERA_VsyncEventCallback>:
{ 
 8001604:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001606:	4c19      	ldr	r4, [pc, #100]	; (800166c <BSP_CAMERA_VsyncEventCallback+0x68>)
 8001608:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800160a:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 800160c:	f008 ff9e 	bl	800a54c <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 8001610:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001612:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001614:	b19b      	cbz	r3, 800163e <BSP_CAMERA_VsyncEventCallback+0x3a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001616:	2b01      	cmp	r3, #1
 8001618:	d007      	beq.n	800162a <BSP_CAMERA_VsyncEventCallback+0x26>
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	1ac0      	subs	r0, r0, r3
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800161e:	2802      	cmp	r0, #2
 8001620:	d801      	bhi.n	8001626 <BSP_CAMERA_VsyncEventCallback+0x22>
    CameraContext.vsync_it =2;
 8001622:	2302      	movs	r3, #2
 8001624:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001626:	b662      	cpsie	i
}
 8001628:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 800162a:	7d23      	ldrb	r3, [r4, #20]
 800162c:	b9a3      	cbnz	r3, 8001658 <BSP_CAMERA_VsyncEventCallback+0x54>
 800162e:	68e3      	ldr	r3, [r4, #12]
 8001630:	1ac0      	subs	r0, r0, r3
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001632:	6eab      	ldr	r3, [r5, #104]	; 0x68
    CameraContext.vsync_it ++;
 8001634:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001636:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001638:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 800163a:	621a      	str	r2, [r3, #32]
    CameraContext.vsync_it ++;
 800163c:	e7ef      	b.n	800161e <BSP_CAMERA_VsyncEventCallback+0x1a>
    CameraContext.vsync_it ++;
 800163e:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001640:	6eae      	ldr	r6, [r5, #104]	; 0x68
    CameraContext.vsync_it ++;
 8001642:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001644:	f008 ff82 	bl	800a54c <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001648:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800164a:	6923      	ldr	r3, [r4, #16]
 800164c:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 800164e:	61f0      	str	r0, [r6, #28]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001650:	68e0      	ldr	r0, [r4, #12]
 8001652:	6211      	str	r1, [r2, #32]
 8001654:	1a18      	subs	r0, r3, r0
 8001656:	e7e2      	b.n	800161e <BSP_CAMERA_VsyncEventCallback+0x1a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001658:	7d23      	ldrb	r3, [r4, #20]
 800165a:	2b01      	cmp	r3, #1
 800165c:	68e3      	ldr	r3, [r4, #12]
 800165e:	eba0 0003 	sub.w	r0, r0, r3
 8001662:	d1dc      	bne.n	800161e <BSP_CAMERA_VsyncEventCallback+0x1a>
 8001664:	2802      	cmp	r0, #2
 8001666:	d8de      	bhi.n	8001626 <BSP_CAMERA_VsyncEventCallback+0x22>
 8001668:	e7e3      	b.n	8001632 <BSP_CAMERA_VsyncEventCallback+0x2e>
 800166a:	bf00      	nop
 800166c:	240055e0 	.word	0x240055e0

08001670 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 8001670:	f003 bada 	b.w	8004c28 <Error_Handler>

08001674 <DISPLAY_Init>:
 * @brief  Dispaly Initialization
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
void DISPLAY_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_sync=0;
 8001678:	2500      	movs	r5, #0
{
 800167a:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 800167c:	4f20      	ldr	r7, [pc, #128]	; (8001700 <DISPLAY_Init+0x8c>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 800167e:	4e21      	ldr	r6, [pc, #132]	; (8001704 <DISPLAY_Init+0x90>)
{
 8001680:	b087      	sub	sp, #28
  Display_Context_Ptr->lcd_sync=0;
 8001682:	60a5      	str	r5, [r4, #8]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001684:	2101      	movs	r1, #1
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001686:	6813      	ldr	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001688:	4628      	mov	r0, r5
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 800168a:	683f      	ldr	r7, [r7, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 800168c:	6836      	ldr	r6, [r6, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 800168e:	f023 0301 	bic.w	r3, r3, #1
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001692:	e9c4 7600 	strd	r7, r6, [r4]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001696:	6013      	str	r3, [r2, #0]

  config.X0          = 0;
 8001698:	2600      	movs	r6, #0
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 800169a:	f008 fda1 	bl	800a1e0 <BSP_LCD_Init>
  config.X0          = 0;
 800169e:	f44f 7348 	mov.w	r3, #800	; 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 80016a2:	6820      	ldr	r0, [r4, #0]
  config.X0          = 0;
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016aa:	4629      	mov	r1, r5
  config.X0          = 0;
 80016ac:	e9cd 2300 	strd	r2, r3, [sp]
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 80016b0:	e9cd 5004 	strd	r5, r0, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016b4:	466a      	mov	r2, sp
 80016b6:	4628      	mov	r0, r5
  config.X0          = 0;
 80016b8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016bc:	f008 fd9c 	bl	800a1f8 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <DISPLAY_Init+0x94>)
 80016c2:	f018 fbab 	bl	8019e1c <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80016c6:	4628      	mov	r0, r5
 80016c8:	f018 fbda 	bl	8019e80 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80016cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80016d0:	f018 fbee 	bl	8019eb0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f018 fbe2 	bl	8019ea0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <DISPLAY_Init+0x98>)
 80016de:	f018 fbef 	bl	8019ec0 <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <DISPLAY_Init+0x9c>)
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <DISPLAY_Init+0xa0>)
 80016e6:	2534      	movs	r5, #52	; 0x34
 80016e8:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80016ea:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80016ec:	6862      	ldr	r2, [r4, #4]
 80016ee:	fb05 0303 	mla	r3, r5, r3, r0
 80016f2:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80016f4:	f00c fbda 	bl	800deac <HAL_LTDC_Reload>
}
 80016f8:	b007      	add	sp, #28
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	52004000 	.word	0x52004000
 8001700:	2400004c 	.word	0x2400004c
 8001704:	24000050 	.word	0x24000050
 8001708:	080466dc 	.word	0x080466dc
 800170c:	24003048 	.word	0x24003048
 8001710:	2400648c 	.word	0x2400648c
 8001714:	240063e4 	.word	0x240063e4

08001718 <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	4605      	mov	r5, r0
 800171c:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800171e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001722:	f018 fbdd 	bl	8019ee0 <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <DISPLAY_WelcomeScreen+0x13c>)
 8001728:	224d      	movs	r2, #77	; 0x4d
 800172a:	2132      	movs	r1, #50	; 0x32
 800172c:	2000      	movs	r0, #0
 800172e:	f008 f8e5 	bl	80098fc <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8001732:	4b49      	ldr	r3, [pc, #292]	; (8001858 <DISPLAY_WelcomeScreen+0x140>)
 8001734:	2255      	movs	r2, #85	; 0x55
 8001736:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800173a:	2000      	movs	r0, #0
 800173c:	f008 f8de 	bl	80098fc <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 8001740:	f018 fbc6 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001744:	88c1      	ldrh	r1, [r0, #6]
 8001746:	2301      	movs	r3, #1
 8001748:	4a44      	ldr	r2, [pc, #272]	; (800185c <DISPLAY_WelcomeScreen+0x144>)
 800174a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800174e:	2000      	movs	r0, #0
 8001750:	4099      	lsls	r1, r3
 8001752:	f018 fcad 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.1.0", CENTER_MODE);
 8001756:	f018 fbbb 	bl	8019ed0 <UTIL_LCD_GetFont>
 800175a:	88c1      	ldrh	r1, [r0, #6]
 800175c:	2301      	movs	r3, #1
 800175e:	4a40      	ldr	r2, [pc, #256]	; (8001860 <DISPLAY_WelcomeScreen+0x148>)
 8001760:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001764:	2000      	movs	r0, #0
 8001766:	f018 fca3 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 800176a:	f018 fbb1 	bl	8019ed0 <UTIL_LCD_GetFont>
 800176e:	88c1      	ldrh	r1, [r0, #6]
 8001770:	2301      	movs	r3, #1
 8001772:	4a3c      	ldr	r2, [pc, #240]	; (8001864 <DISPLAY_WelcomeScreen+0x14c>)
 8001774:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001778:	2000      	movs	r0, #0
 800177a:	4099      	lsls	r1, r3
 800177c:	f018 fc98 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 8001780:	f018 fba6 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001784:	88c1      	ldrh	r1, [r0, #6]
 8001786:	2301      	movs	r3, #1
 8001788:	4a37      	ldr	r2, [pc, #220]	; (8001868 <DISPLAY_WelcomeScreen+0x150>)
 800178a:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800178e:	2000      	movs	r0, #0
 8001790:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8001794:	f018 fc8c 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8001798:	f018 fb9a 	bl	8019ed0 <UTIL_LCD_GetFont>
 800179c:	88c1      	ldrh	r1, [r0, #6]
 800179e:	2301      	movs	r3, #1
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <DISPLAY_WelcomeScreen+0x154>)
 80017a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80017a6:	2000      	movs	r0, #0
 80017a8:	0089      	lsls	r1, r1, #2
 80017aa:	f018 fc81 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 80017ae:	f018 fb8f 	bl	8019ed0 <UTIL_LCD_GetFont>
 80017b2:	88c1      	ldrh	r1, [r0, #6]
 80017b4:	2301      	movs	r3, #1
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <DISPLAY_WelcomeScreen+0x158>)
 80017b8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80017bc:	2000      	movs	r0, #0
 80017be:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80017c2:	f018 fc75 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 80017c6:	f018 fb83 	bl	8019ed0 <UTIL_LCD_GetFont>
 80017ca:	88c1      	ldrh	r1, [r0, #6]
 80017cc:	2301      	movs	r3, #1
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <DISPLAY_WelcomeScreen+0x15c>)
 80017d0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80017d4:	2000      	movs	r0, #0
 80017d6:	4099      	lsls	r1, r3
 80017d8:	f018 fc6a 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 80017dc:	f018 fb78 	bl	8019ed0 <UTIL_LCD_GetFont>
 80017e0:	88c1      	ldrh	r1, [r0, #6]
 80017e2:	2301      	movs	r3, #1
 80017e4:	4a24      	ldr	r2, [pc, #144]	; (8001878 <DISPLAY_WelcomeScreen+0x160>)
 80017e6:	2000      	movs	r0, #0
 80017e8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80017ec:	f018 fc60 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60ab      	str	r3, [r5, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 80017f4:	68ab      	ldr	r3, [r5, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0fc      	beq.n	80017f4 <DISPLAY_WelcomeScreen+0xdc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 80017fa:	2202      	movs	r2, #2
 80017fc:	491f      	ldr	r1, [pc, #124]	; (800187c <DISPLAY_WelcomeScreen+0x164>)
 80017fe:	6868      	ldr	r0, [r5, #4]
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001800:	2700      	movs	r7, #0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001802:	f003 f9a3 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001806:	f44f 7148 	mov.w	r1, #800	; 0x320
 800180a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800180e:	9706      	str	r7, [sp, #24]
 8001810:	9705      	str	r7, [sp, #20]
 8001812:	463b      	mov	r3, r7
 8001814:	9102      	str	r1, [sp, #8]
 8001816:	463a      	mov	r2, r7
  int magic_menu = 0;
 8001818:	463e      	mov	r6, r7
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800181a:	2405      	movs	r4, #5
 800181c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8001820:	e9cd 1000 	strd	r1, r0, [sp]
 8001824:	e9d5 1000 	ldrd	r1, r0, [r5]
 8001828:	f003 f8d4 	bl	80049d4 <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 800182c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001830:	f008 fe92 	bl	800a558 <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001834:	2000      	movs	r0, #0
 8001836:	f006 fe69 	bl	800850c <BSP_PB_GetState>
      magic_menu = 1;
 800183a:	2800      	cmp	r0, #0
 800183c:	bf18      	it	ne
 800183e:	2601      	movne	r6, #1
  for (int i = 0; i < 5; i++)
 8001840:	3c01      	subs	r4, #1
 8001842:	d1f3      	bne.n	800182c <DISPLAY_WelcomeScreen+0x114>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001844:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001848:	f018 fb4a 	bl	8019ee0 <UTIL_LCD_Clear>
}
 800184c:	4630      	mov	r0, r6
 800184e:	b009      	add	sp, #36	; 0x24
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	bf00      	nop
 8001854:	081d80c0 	.word	0x081d80c0
 8001858:	081e0308 	.word	0x081e0308
 800185c:	08100020 	.word	0x08100020
 8001860:	08100038 	.word	0x08100038
 8001864:	08100040 	.word	0x08100040
 8001868:	0810005c 	.word	0x0810005c
 800186c:	08100070 	.word	0x08100070
 8001870:	08100088 	.word	0x08100088
 8001874:	08100098 	.word	0x08100098
 8001878:	081000b8 	.word	0x081000b8
 800187c:	00177000 	.word	0x00177000

08001880 <DISPLAY_FoodLogo>:
{
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001882:	2401      	movs	r4, #1
{
 8001884:	b089      	sub	sp, #36	; 0x24
 8001886:	460f      	mov	r7, r1
  DISPLAY_Copy2LCDWriteBuffer(Display_Context_Ptr, (uint32_t *)(Logos_128x128_raw[index]), x,
 8001888:	4d0b      	ldr	r5, [pc, #44]	; (80018b8 <DISPLAY_FoodLogo+0x38>)
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 800188a:	6841      	ldr	r1, [r0, #4]
  DISPLAY_Copy2LCDWriteBuffer(Display_Context_Ptr, (uint32_t *)(Logos_128x128_raw[index]), x,
 800188c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001890:	9406      	str	r4, [sp, #24]
 8001892:	2600      	movs	r6, #0
 8001894:	eb05 3080 	add.w	r0, r5, r0, lsl #14
 8001898:	9405      	str	r4, [sp, #20]
 800189a:	9403      	str	r4, [sp, #12]
 800189c:	f44f 7548 	mov.w	r5, #800	; 0x320
 80018a0:	2480      	movs	r4, #128	; 0x80
 80018a2:	b293      	uxth	r3, r2
 80018a4:	b2ba      	uxth	r2, r7
 80018a6:	9604      	str	r6, [sp, #16]
 80018a8:	9400      	str	r4, [sp, #0]
 80018aa:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80018ae:	f003 f891 	bl	80049d4 <UTILS_Dma2d_Memcpy>
}
 80018b2:	b009      	add	sp, #36	; 0x24
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	081000c0 	.word	0x081000c0

080018bc <DISPLAY_Refresh>:
{
 80018bc:	b510      	push	{r4, lr}
  Display_Context_Ptr->lcd_sync =0;
 80018be:	2300      	movs	r3, #0
{
 80018c0:	b088      	sub	sp, #32
 80018c2:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 80018c4:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 80018c6:	68a3      	ldr	r3, [r4, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0fc      	beq.n	80018c6 <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 80018cc:	6860      	ldr	r0, [r4, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	490a      	ldr	r1, [pc, #40]	; (80018fc <DISPLAY_Refresh+0x40>)
 80018d2:	f003 f93b 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 80018d6:	2300      	movs	r3, #0
 80018d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80018dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80018e0:	461a      	mov	r2, r3
 80018e2:	9102      	str	r1, [sp, #8]
 80018e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80018e8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80018ec:	e9cd 1000 	strd	r1, r0, [sp]
 80018f0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80018f4:	f003 f86e 	bl	80049d4 <UTILS_Dma2d_Memcpy>
}
 80018f8:	b008      	add	sp, #32
 80018fa:	bd10      	pop	{r4, pc}
 80018fc:	00177000 	.word	0x00177000

08001900 <DISPLAY_Copy2LCDWriteBuffer>:
{
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	4606      	mov	r6, r0
 8001906:	4608      	mov	r0, r1
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001908:	2501      	movs	r5, #1
{
 800190a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 800190e:	6871      	ldr	r1, [r6, #4]
 8001910:	2600      	movs	r6, #0
 8001912:	9400      	str	r4, [sp, #0]
{
 8001914:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001918:	9505      	str	r5, [sp, #20]
 800191a:	f44f 7548 	mov.w	r5, #800	; 0x320
 800191e:	9401      	str	r4, [sp, #4]
{
 8001920:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001922:	9502      	str	r5, [sp, #8]
 8001924:	e9cd 4603 	strd	r4, r6, [sp, #12]
{
 8001928:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 800192a:	9406      	str	r4, [sp, #24]
 800192c:	f003 f852 	bl	80049d4 <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 8001930:	b008      	add	sp, #32
 8001932:	bd70      	pop	{r4, r5, r6, pc}

08001934 <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <HAL_LTDC_ReloadEventCallback+0xc>)
 8001936:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001938:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 800193a:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800193c:	f00c bab6 	b.w	800deac <HAL_LTDC_Reload>
 8001940:	24005600 	.word	0x24005600

08001944 <PREPROC_ImageResize>:
/**
 * @brief Performs image (or selected Region Of Interest) resizing
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
 8001944:	b510      	push	{r4, lr}
  image_t *src_img = &Preproc_Context_Ptr->Resize_Src_Img;
 8001946:	f100 042c 	add.w	r4, r0, #44	; 0x2c
{
 800194a:	b082      	sub	sp, #8
  image_t *dst_img = &Preproc_Context_Ptr->Resize_Dst_Img;
 800194c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 8001950:	4620      	mov	r0, r4
 8001952:	9101      	str	r1, [sp, #4]
 8001954:	f016 f9e4 	bl	8017d20 <Image_CheckResizeMemoryLayout>

  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 8001958:	9901      	ldr	r1, [sp, #4]
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 800195a:	4602      	mov	r2, r0
  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 800195c:	4620      	mov	r0, r4
 800195e:	f017 ff7d 	bl	801985c <STM32Ipl_Downscale>
 8001962:	b908      	cbnz	r0, 8001968 <PREPROC_ImageResize+0x24>
  {
    while (1);
  }
}
 8001964:	b002      	add	sp, #8
 8001966:	bd10      	pop	{r4, pc}
    while (1);
 8001968:	e7fe      	b.n	8001968 <PREPROC_ImageResize+0x24>
 800196a:	bf00      	nop

0800196c <PREPROC_PixelFormatConversion>:
  image_t *src_img = &Preproc_Context_Ptr->Pfc_Src_Img;
  image_t *dst_img = &Preproc_Context_Ptr->Pfc_Dst_Img;
  uint32_t rb_swap = Preproc_Context_Ptr->red_blue_swap;

#if PIXEL_FMT_CONV == HW_PFC
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 800196c:	6942      	ldr	r2, [r0, #20]
 800196e:	2a02      	cmp	r2, #2
 8001970:	d000      	beq.n	8001974 <PREPROC_PixelFormatConversion+0x8>
                       1,
                       rb_swap);
  }
  else
  {
    while (1);
 8001972:	e7fe      	b.n	8001972 <PREPROC_PixelFormatConversion+0x6>
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001974:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001976:	2b04      	cmp	r3, #4
 8001978:	d1fb      	bne.n	8001972 <PREPROC_PixelFormatConversion+0x6>
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 800197a:	2101      	movs	r1, #1
 800197c:	2300      	movs	r3, #0
{
 800197e:	b570      	push	{r4, r5, r6, lr}
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001980:	6886      	ldr	r6, [r0, #8]
{
 8001982:	b088      	sub	sp, #32
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001984:	69c5      	ldr	r5, [r0, #28]
 8001986:	9203      	str	r2, [sp, #12]
 8001988:	461a      	mov	r2, r3
 800198a:	8a04      	ldrh	r4, [r0, #16]
 800198c:	9606      	str	r6, [sp, #24]
 800198e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001992:	8981      	ldrh	r1, [r0, #12]
 8001994:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001998:	9100      	str	r1, [sp, #0]
 800199a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800199c:	6980      	ldr	r0, [r0, #24]
 800199e:	f003 f819 	bl	80049d4 <UTILS_Dma2d_Memcpy>
    while (1);
  }
#else
 #error PFC method not valid!
#endif
}
 80019a2:	b008      	add	sp, #32
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
 80019a6:	bf00      	nop

080019a8 <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 80019a8:	1e53      	subs	r3, r2, #1
 80019aa:	d414      	bmi.n	80019d6 <PREPROC_Pixel_RB_Swap+0x2e>
 80019ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019b0:	4410      	add	r0, r2
 80019b2:	4411      	add	r1, r2
{
 80019b4:	b410      	push	{r4}
  {
    tmp_r=pivot[i].r;
    
    dest[i].r = pivot[i].b;
 80019b6:	f810 2c01 	ldrb.w	r2, [r0, #-1]
  for (int i = pixels-1; i >= 0; i--)
 80019ba:	3b01      	subs	r3, #1
    tmp_r=pivot[i].r;
 80019bc:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    dest[i].r = pivot[i].b;
 80019c0:	3903      	subs	r1, #3
 80019c2:	700a      	strb	r2, [r1, #0]
    dest[i].b = tmp_r;
    dest[i].g = pivot[i].g;
 80019c4:	3803      	subs	r0, #3
    dest[i].b = tmp_r;
 80019c6:	708c      	strb	r4, [r1, #2]
    dest[i].g = pivot[i].g;
 80019c8:	7842      	ldrb	r2, [r0, #1]
 80019ca:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	d1f2      	bne.n	80019b6 <PREPROC_Pixel_RB_Swap+0xe>
  }
}
 80019d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	4770      	bx	lr

080019d8 <UartCmd_Run_Validation>:
  /***Resume the camera capture in NOMINAL mode****/
  BSP_CAMERA_Resume(0);
}

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 80019d8:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 80019da:	4907      	ldr	r1, [pc, #28]	; (80019f8 <UartCmd_Run_Validation+0x20>)
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80019dc:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 80019de:	2402      	movs	r4, #2

#ifdef OBJECTDETECT  
  Test_Context_Ptr->ValidationContext.acc_num_object_detected=0;
#endif
  
  App_Cxt_Ptr->run_loop = 0;
 80019e0:	2200      	movs	r2, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80019e2:	f8d0 3b80 	ldr.w	r3, [r0, #2944]	; 0xb80
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80019e6:	f8c0 5aa0 	str.w	r5, [r0, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 80019ea:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 80019ee:	f8c0 1a98 	str.w	r1, [r0, #2712]	; 0xa98
  App_Cxt_Ptr->run_loop = 0;
 80019f2:	605a      	str	r2, [r3, #4]
}
 80019f4:	bc30      	pop	{r4, r5}
 80019f6:	4770      	bx	lr
 80019f8:	d0ddc920 	.word	0xd0ddc920

080019fc <UartCmd_Launch_Dump>:
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}


static void UartCmd_Launch_Dump(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 80019fc:	b430      	push	{r4, r5}
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80019fe:	f8d0 3b80 	ldr.w	r3, [r0, #2944]	; 0xb80
  
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a02:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a04:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 8001a06:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a08:	f8c0 5aa0 	str.w	r5, [r0, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a0c:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4
  App_Cxt_Ptr->run_loop = 0;
 8001a10:	605a      	str	r2, [r3, #4]
  
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001a12:	780b      	ldrb	r3, [r1, #0]
 8001a14:	f880 3aa5 	strb.w	r3, [r0, #2725]	; 0xaa5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001a18:	784b      	ldrb	r3, [r1, #1]
  
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001a1a:	42ab      	cmp	r3, r5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001a1c:	f880 3aa6 	strb.w	r3, [r0, #2726]	; 0xaa6
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001a20:	d101      	bne.n	8001a26 <UartCmd_Launch_Dump+0x2a>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001a22:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <UartCmd_Launch_Dump+0x30>)
 8001a24:	6003      	str	r3, [r0, #0]
}
 8001a26:	bc30      	pop	{r4, r5}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	d0dde560 	.word	0xd0dde560

08001a30 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a30:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
  App_Cxt_Ptr->run_loop = 0;
 8001a32:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a34:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001a36:	2404      	movs	r4, #4
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a38:	f8d0 3b80 	ldr.w	r3, [r0, #2944]	; 0xb80
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a3c:	f8c0 5aa0 	str.w	r5, [r0, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001a40:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4
  App_Cxt_Ptr->run_loop = 0;
 8001a44:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001a46:	780b      	ldrb	r3, [r1, #0]
 8001a48:	f880 3aac 	strb.w	r3, [r0, #2732]	; 0xaac
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001a4c:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001a50:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001a54:	f8c0 2ab0 	str.w	r2, [r0, #2736]	; 0xab0
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001a58:	f8c0 3ab4 	str.w	r3, [r0, #2740]	; 0xab4
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001a5c:	bc30      	pop	{r4, r5}
 8001a5e:	4770      	bx	lr

08001a60 <UartCmd_Set_Camera_Mode>:
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}

static void UartCmd_Set_Camera_Mode(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a60:	b510      	push	{r4, lr}
  /******************************SET_CAMERA_MODE_CMD**********************
  *Configure the camera in test bar or normal mode.
  *This command has one parameter:
  *Camera mode: 0x00=Normal, 0x01= Test bar
  ***********************************************************************************/
  if(*(data_buffer) == 0x00)
 8001a62:	780b      	ldrb	r3, [r1, #0]
{
 8001a64:	4604      	mov	r4, r0
  if(*(data_buffer) == 0x00)
 8001a66:	b14b      	cbz	r3, 8001a7c <UartCmd_Set_Camera_Mode+0x1c>
  {
    CAMERA_Disable_TestBar_Mode(NULL);
  }
  else if(*(data_buffer) == 0x01)
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d00f      	beq.n	8001a8c <UartCmd_Set_Camera_Mode+0x2c>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001a6c:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
 8001a70:	220a      	movs	r2, #10
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <UartCmd_Set_Camera_Mode+0x34>)
 8001a74:	f00f fe3e 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001a78:	b920      	cbnz	r0, 8001a84 <UartCmd_Set_Camera_Mode+0x24>
}
 8001a7a:	bd10      	pop	{r4, pc}
    CAMERA_Disable_TestBar_Mode(NULL);
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd6d 	bl	800155c <CAMERA_Disable_TestBar_Mode>
 8001a82:	e7f3      	b.n	8001a6c <UartCmd_Set_Camera_Mode+0xc>
}
 8001a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001a88:	f003 b8ce 	b.w	8004c28 <Error_Handler>
    CAMERA_Enable_TestBar_Mode(NULL);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff fd33 	bl	80014f8 <CAMERA_Enable_TestBar_Mode>
 8001a92:	e7eb      	b.n	8001a6c <UartCmd_Set_Camera_Mode+0xc>
 8001a94:	24003220 	.word	0x24003220

08001a98 <UartCmd_Write_Camera_Register>:
  OV9655_Object_t *pObj=Camera_CompObj;
 8001a98:	4a10      	ldr	r2, [pc, #64]	; (8001adc <UartCmd_Write_Camera_Register+0x44>)
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001a9a:	2301      	movs	r3, #1
{
 8001a9c:	b570      	push	{r4, r5, r6, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001a9e:	6816      	ldr	r6, [r2, #0]
{
 8001aa0:	b082      	sub	sp, #8
  uint8_t tmp=*(data_buffer+1);
 8001aa2:	784d      	ldrb	r5, [r1, #1]
{
 8001aa4:	4604      	mov	r4, r0
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001aa6:	f10d 0207 	add.w	r2, sp, #7
 8001aaa:	7809      	ldrb	r1, [r1, #0]
 8001aac:	f106 0018 	add.w	r0, r6, #24
  uint8_t tmp=*(data_buffer+1);
 8001ab0:	f88d 5007 	strb.w	r5, [sp, #7]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001ab4:	f006 fc7a 	bl	80083ac <ov9655_write_reg>
  HAL_Delay(300);
 8001ab8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001abc:	f008 fd4c 	bl	800a558 <HAL_Delay>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001ac0:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <UartCmd_Write_Camera_Register+0x48>)
 8001ac8:	f00f fe14 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001acc:	b908      	cbnz	r0, 8001ad2 <UartCmd_Write_Camera_Register+0x3a>
}
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8001ad2:	f003 f8a9 	bl	8004c28 <Error_Handler>
}
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	bf00      	nop
 8001adc:	24005104 	.word	0x24005104
 8001ae0:	24003220 	.word	0x24003220

08001ae4 <UartCmd_Run_NonRegression>:
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	4603      	mov	r3, r0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001ae8:	2401      	movs	r4, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001aea:	f240 2203 	movw	r2, #515	; 0x203
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001aee:	2002      	movs	r0, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001af0:	f8c3 4aa0 	str.w	r4, [r3, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001af4:	f8a3 2aa4 	strh.w	r2, [r3, #2724]	; 0xaa4
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001af8:	2280      	movs	r2, #128	; 0x80
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001afa:	f883 4aa6 	strb.w	r4, [r3, #2726]	; 0xaa6
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001afe:	4e14      	ldr	r6, [pc, #80]	; (8001b50 <UartCmd_Run_NonRegression+0x6c>)
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001b00:	680d      	ldr	r5, [r1, #0]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b02:	2100      	movs	r1, #0
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001b04:	f8c3 4ab8 	str.w	r4, [r3, #2744]	; 0xab8
  Test_Context_Ptr->NonReg_FirstRun=1;
 8001b08:	f8c3 4b84 	str.w	r4, [r3, #2948]	; 0xb84
  Test_Context_Ptr->DumpContext.dump_state = 1;
 8001b0c:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001b10:	7118      	strb	r0, [r3, #4]
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001b12:	601e      	str	r6, [r3, #0]
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001b14:	f8c3 5aa8 	str.w	r5, [r3, #2728]	; 0xaa8
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <UartCmd_Run_NonRegression+0x70>)
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001b1a:	f8d3 4b80 	ldr.w	r4, [r3, #2944]	; 0xb80
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b1e:	f01f f801 	bl	8020b24 <memset>
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001b22:	2303      	movs	r3, #3
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001b24:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001b26:	7023      	strb	r3, [r4, #0]
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001b28:	f7ff fce6 	bl	80014f8 <CAMERA_Enable_TestBar_Mode>
  while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001b2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b2e:	7d13      	ldrb	r3, [r2, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0fc      	beq.n	8001b2e <UartCmd_Run_NonRegression+0x4a>
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001b34:	2500      	movs	r5, #0
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b36:	6ea6      	ldr	r6, [r4, #104]	; 0x68
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001b38:	6095      	str	r5, [r2, #8]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b3a:	f008 fd07 	bl	800a54c <HAL_GetTick>
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001b3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b40:	4602      	mov	r2, r0
  BSP_CAMERA_Resume(0);
 8001b42:	4628      	mov	r0, r5
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b44:	61b2      	str	r2, [r6, #24]
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001b46:	751d      	strb	r5, [r3, #20]
}
 8001b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_CAMERA_Resume(0);
 8001b4c:	f007 bd26 	b.w	800959c <BSP_CAMERA_Resume>
 8001b50:	d0dde560 	.word	0xd0dde560
 8001b54:	d0ddc8a0 	.word	0xd0ddc8a0

08001b58 <count_dir.isra.0>:
static uint32_t count_dir(const char *path, AppContext_TypeDef *app)
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	b08e      	sub	sp, #56	; 0x38
 8001b5e:	460e      	mov	r6, r1
  res = f_opendir(&dir, path);
 8001b60:	a801      	add	r0, sp, #4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f015 f9a8 	bl	8016eb8 <f_opendir>
  if (res != FR_OK)
 8001b68:	b9c8      	cbnz	r0, 8001b9e <count_dir.isra.0+0x46>
 8001b6a:	4d1b      	ldr	r5, [pc, #108]	; (8001bd8 <count_dir.isra.0+0x80>)
 8001b6c:	4604      	mov	r4, r0
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001b6e:	462e      	mov	r6, r5
 8001b70:	4631      	mov	r1, r6
 8001b72:	a801      	add	r0, sp, #4
 8001b74:	f015 faa6 	bl	80170c4 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001b78:	b958      	cbnz	r0, 8001b92 <count_dir.isra.0+0x3a>
 8001b7a:	7dab      	ldrb	r3, [r5, #22]
 8001b7c:	b14b      	cbz	r3, 8001b92 <count_dir.isra.0+0x3a>
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001b7e:	7a2b      	ldrb	r3, [r5, #8]
 8001b80:	06db      	lsls	r3, r3, #27
 8001b82:	d5f5      	bpl.n	8001b70 <count_dir.isra.0+0x18>
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001b84:	4631      	mov	r1, r6
 8001b86:	a801      	add	r0, sp, #4
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001b88:	3401      	adds	r4, #1
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001b8a:	f015 fa9b 	bl	80170c4 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d0f3      	beq.n	8001b7a <count_dir.isra.0+0x22>
  f_closedir(&dir);
 8001b92:	a801      	add	r0, sp, #4
 8001b94:	f015 fa64 	bl	8017060 <f_closedir>
}
 8001b98:	4620      	mov	r0, r4
 8001b9a:	b00e      	add	sp, #56	; 0x38
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not open directory", CENTER_MODE);
 8001b9e:	f018 f997 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001ba2:	88c4      	ldrh	r4, [r0, #6]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <count_dir.isra.0+0x84>)
 8001ba8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001bac:	2000      	movs	r0, #0
 8001bae:	fa04 f103 	lsl.w	r1, r4, r3
 8001bb2:	f018 fa7d 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001bb6:	f018 f98b 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001bba:	88c1      	ldrh	r1, [r0, #6]
 8001bbc:	462a      	mov	r2, r5
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001bc6:	f018 fa73 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001bca:	6830      	ldr	r0, [r6, #0]
 8001bcc:	f7ff fe76 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f006 fc21 	bl	8008418 <BSP_LED_On>
    while (1);
 8001bd6:	e7fe      	b.n	8001bd6 <count_dir.isra.0+0x7e>
 8001bd8:	2400402c 	.word	0x2400402c
 8001bdc:	080241f8 	.word	0x080241f8

08001be0 <write_txt.isra.0>:
static void write_txt(char *path, char *content, BYTE flags, AppContext_TypeDef *app)
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	4605      	mov	r5, r0
 8001be4:	b082      	sub	sp, #8
 8001be6:	460c      	mov	r4, r1
  if (f_open(&File, path, flags) != FR_OK)
 8001be8:	481c      	ldr	r0, [pc, #112]	; (8001c5c <write_txt.isra.0+0x7c>)
 8001bea:	4629      	mov	r1, r5
static void write_txt(char *path, char *content, BYTE flags, AppContext_TypeDef *app)
 8001bec:	461e      	mov	r6, r3
  if (f_open(&File, path, flags) != FR_OK)
 8001bee:	f014 f9f3 	bl	8015fd8 <f_open>
 8001bf2:	b1d8      	cbz	r0, 8001c2c <write_txt.isra.0+0x4c>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create file", CENTER_MODE);
 8001bf4:	f018 f96c 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001bf8:	88c1      	ldrh	r1, [r0, #6]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <write_txt.isra.0+0x80>)
 8001bfe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001c02:	2000      	movs	r0, #0
 8001c04:	4099      	lsls	r1, r3
 8001c06:	f018 fa53 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001c0a:	f018 f961 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001c0e:	88c1      	ldrh	r1, [r0, #6]
 8001c10:	462a      	mov	r2, r5
 8001c12:	2301      	movs	r3, #1
 8001c14:	2000      	movs	r0, #0
 8001c16:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001c1a:	f018 fa49 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001c1e:	6830      	ldr	r0, [r6, #0]
 8001c20:	f7ff fe4c 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001c24:	2002      	movs	r0, #2
 8001c26:	f006 fbf7 	bl	8008418 <BSP_LED_On>
    while (1);
 8001c2a:	e7fe      	b.n	8001c2a <write_txt.isra.0+0x4a>
  res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7fe fb61 	bl	80002f4 <strlen>
 8001c32:	ab01      	add	r3, sp, #4
 8001c34:	4602      	mov	r2, r0
 8001c36:	4621      	mov	r1, r4
 8001c38:	4808      	ldr	r0, [pc, #32]	; (8001c5c <write_txt.isra.0+0x7c>)
 8001c3a:	f014 fd83 	bl	8016744 <f_write>
  if (res != FR_OK)
 8001c3e:	b100      	cbz	r0, 8001c42 <write_txt.isra.0+0x62>
    while (1);
 8001c40:	e7fe      	b.n	8001c40 <write_txt.isra.0+0x60>
  if (byteswritten != strlen(content))
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7fe fb56 	bl	80002f4 <strlen>
 8001c48:	9b01      	ldr	r3, [sp, #4]
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d000      	beq.n	8001c50 <write_txt.isra.0+0x70>
    while (1);
 8001c4e:	e7fe      	b.n	8001c4e <write_txt.isra.0+0x6e>
  f_close(&File);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <write_txt.isra.0+0x7c>)
 8001c52:	f014 fed7 	bl	8016a04 <f_close>
}
 8001c56:	b002      	add	sp, #8
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
 8001c5a:	bf00      	nop
 8001c5c:	24003ab0 	.word	0x24003ab0
 8001c60:	08024218 	.word	0x08024218

08001c64 <write_raw.isra.0>:
static void write_raw(char *path, uint8_t *buffer, size_t length, AppContext_TypeDef *app)
 8001c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c68:	4605      	mov	r5, r0
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	4617      	mov	r7, r2
 8001c6e:	4688      	mov	r8, r1
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001c70:	220a      	movs	r2, #10
 8001c72:	482a      	ldr	r0, [pc, #168]	; (8001d1c <write_raw.isra.0+0xb8>)
 8001c74:	4629      	mov	r1, r5
static void write_raw(char *path, uint8_t *buffer, size_t length, AppContext_TypeDef *app)
 8001c76:	461e      	mov	r6, r3
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001c78:	f014 f9ae 	bl	8015fd8 <f_open>
  if (res != FR_OK)
 8001c7c:	b1e8      	cbz	r0, 8001cba <write_raw.isra.0+0x56>
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot create file on uSD", CENTER_MODE);
 8001c7e:	f018 f927 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001c82:	88c1      	ldrh	r1, [r0, #6]
 8001c84:	2301      	movs	r3, #1
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <write_raw.isra.0+0xbc>)
 8001c88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	0089      	lsls	r1, r1, #2
 8001c90:	f018 fa0e 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001c94:	f018 f91c 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001c98:	88c1      	ldrh	r1, [r0, #6]
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001ca8:	f018 fa02 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001cac:	6830      	ldr	r0, [r6, #0]
 8001cae:	f7ff fe05 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f006 fbb0 	bl	8008418 <BSP_LED_On>
    while (1);
 8001cb8:	e7fe      	b.n	8001cb8 <write_raw.isra.0+0x54>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cba:	4604      	mov	r4, r0
 8001cbc:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 8001cbe:	4817      	ldr	r0, [pc, #92]	; (8001d1c <write_raw.isra.0+0xb8>)
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	ab01      	add	r3, sp, #4
 8001cc4:	463a      	mov	r2, r7
 8001cc6:	f014 fd3d 	bl	8016744 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cca:	b662      	cpsie	i
  f_close(&File);
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <write_raw.isra.0+0xb8>)
 8001cce:	f014 fe99 	bl	8016a04 <f_close>
  if (byteswritten != length)
 8001cd2:	9b01      	ldr	r3, [sp, #4]
 8001cd4:	429f      	cmp	r7, r3
 8001cd6:	d102      	bne.n	8001cde <write_raw.isra.0+0x7a>
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001cde:	f018 f8f7 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001ce2:	88c1      	ldrh	r1, [r0, #6]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <write_raw.isra.0+0xc0>)
 8001ce8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001cec:	4620      	mov	r0, r4
 8001cee:	0089      	lsls	r1, r1, #2
 8001cf0:	f018 f9de 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001cf4:	f018 f8ec 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	462a      	mov	r2, r5
 8001cfe:	88d9      	ldrh	r1, [r3, #6]
 8001d00:	2301      	movs	r3, #1
 8001d02:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001d06:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001d0a:	f018 f9d1 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001d0e:	6830      	ldr	r0, [r6, #0]
 8001d10:	f7ff fdd4 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001d14:	2002      	movs	r0, #2
 8001d16:	f006 fb7f 	bl	8008418 <BSP_LED_On>
    while (1);
 8001d1a:	e7fe      	b.n	8001d1a <write_raw.isra.0+0xb6>
 8001d1c:	24003880 	.word	0x24003880
 8001d20:	08024238 	.word	0x08024238
 8001d24:	08024254 	.word	0x08024254

08001d28 <write_bmp.isra.0>:
static void write_bmp(char *path, image_t *img, AppContext_TypeDef *app)
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	460f      	mov	r7, r1
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	4616      	mov	r6, r2
  if (strcmp(&path[strlen(path) - 4], ".bmp") != 0)
 8001d30:	f7fe fae0 	bl	80002f4 <strlen>
 8001d34:	3804      	subs	r0, #4
 8001d36:	4916      	ldr	r1, [pc, #88]	; (8001d90 <write_bmp.isra.0+0x68>)
 8001d38:	4428      	add	r0, r5
 8001d3a:	f7fe fad1 	bl	80002e0 <strcmp>
 8001d3e:	b100      	cbz	r0, 8001d42 <write_bmp.isra.0+0x1a>
    while (1); /* Format not supported */
 8001d40:	e7fe      	b.n	8001d40 <write_bmp.isra.0+0x18>
  if (STM32Ipl_WriteImage(img, path) != stm32ipl_err_Ok)
 8001d42:	4604      	mov	r4, r0
 8001d44:	4629      	mov	r1, r5
 8001d46:	4638      	mov	r0, r7
 8001d48:	f017 fcc4 	bl	80196d4 <STM32Ipl_WriteImage>
 8001d4c:	b900      	cbnz	r0, 8001d50 <write_bmp.isra.0+0x28>
}
 8001d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001d50:	f018 f8be 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001d54:	88c1      	ldrh	r1, [r0, #6]
 8001d56:	2301      	movs	r3, #1
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <write_bmp.isra.0+0x6c>)
 8001d5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	0089      	lsls	r1, r1, #2
 8001d62:	f018 f9a5 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001d66:	f018 f8b3 	bl	8019ed0 <UTIL_LCD_GetFont>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	462a      	mov	r2, r5
 8001d70:	88d9      	ldrh	r1, [r3, #6]
 8001d72:	2301      	movs	r3, #1
 8001d74:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001d78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001d7c:	f018 f998 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001d80:	6830      	ldr	r0, [r6, #0]
 8001d82:	f7ff fd9b 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001d86:	2002      	movs	r0, #2
 8001d88:	f006 fb46 	bl	8008418 <BSP_LED_On>
    while (1);
 8001d8c:	e7fe      	b.n	8001d8c <write_bmp.isra.0+0x64>
 8001d8e:	bf00      	nop
 8001d90:	080247a8 	.word	0x080247a8
 8001d94:	08024254 	.word	0x08024254

08001d98 <UartCmd_Upload_NonRegression_Report>:
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001da2:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001da6:	f002 fed1 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001daa:	2248      	movs	r2, #72	; 0x48
 8001dac:	490b      	ldr	r1, [pc, #44]	; (8001ddc <UartCmd_Upload_NonRegression_Report+0x44>)
 8001dae:	4620      	mov	r0, r4
 8001db0:	f00f fc50 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001db4:	b958      	cbnz	r0, 8001dce <UartCmd_Upload_NonRegression_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001db6:	4620      	mov	r0, r4
 8001db8:	f00f fe76 	bl	8011aa8 <HAL_UART_GetState>
 8001dbc:	2820      	cmp	r0, #32
 8001dbe:	d1fa      	bne.n	8001db6 <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	220a      	movs	r2, #10
 8001dc4:	4906      	ldr	r1, [pc, #24]	; (8001de0 <UartCmd_Upload_NonRegression_Report+0x48>)
 8001dc6:	f00f fc95 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001dca:	b918      	cbnz	r0, 8001dd4 <UartCmd_Upload_NonRegression_Report+0x3c>
}
 8001dcc:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001dce:	f002 ff2b 	bl	8004c28 <Error_Handler>
 8001dd2:	e7f0      	b.n	8001db6 <UartCmd_Upload_NonRegression_Report+0x1e>
}
 8001dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001dd8:	f002 bf26 	b.w	8004c28 <Error_Handler>
 8001ddc:	d0ddc8a0 	.word	0xd0ddc8a0
 8001de0:	24003220 	.word	0x24003220

08001de4 <UartCmd_Upload_Validation_Report>:
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001de8:	2202      	movs	r2, #2
 8001dea:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8001dee:	480f      	ldr	r0, [pc, #60]	; (8001e2c <UartCmd_Upload_Validation_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001df0:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001df4:	f002 feaa 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001df8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001dfc:	490b      	ldr	r1, [pc, #44]	; (8001e2c <UartCmd_Upload_Validation_Report+0x48>)
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f00f fc28 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001e04:	b958      	cbnz	r0, 8001e1e <UartCmd_Upload_Validation_Report+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f00f fe4e 	bl	8011aa8 <HAL_UART_GetState>
 8001e0c:	2820      	cmp	r0, #32
 8001e0e:	d1fa      	bne.n	8001e06 <UartCmd_Upload_Validation_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e10:	4620      	mov	r0, r4
 8001e12:	220a      	movs	r2, #10
 8001e14:	4906      	ldr	r1, [pc, #24]	; (8001e30 <UartCmd_Upload_Validation_Report+0x4c>)
 8001e16:	f00f fc6d 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001e1a:	b918      	cbnz	r0, 8001e24 <UartCmd_Upload_Validation_Report+0x40>
}
 8001e1c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001e1e:	f002 ff03 	bl	8004c28 <Error_Handler>
 8001e22:	e7f0      	b.n	8001e06 <UartCmd_Upload_Validation_Report+0x22>
}
 8001e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001e28:	f002 befe 	b.w	8004c28 <Error_Handler>
 8001e2c:	d0ddc920 	.word	0xd0ddc920
 8001e30:	24003220 	.word	0x24003220

08001e34 <UartCmd_Upload_Timing_Report>:
{
 8001e34:	b510      	push	{r4, lr}
 8001e36:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e38:	2202      	movs	r2, #2
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	480e      	ldr	r0, [pc, #56]	; (8001e78 <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e3e:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e42:	f002 fe83 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e46:	2214      	movs	r2, #20
 8001e48:	490b      	ldr	r1, [pc, #44]	; (8001e78 <UartCmd_Upload_Timing_Report+0x44>)
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f00f fc02 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001e50:	b958      	cbnz	r0, 8001e6a <UartCmd_Upload_Timing_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e52:	4620      	mov	r0, r4
 8001e54:	f00f fe28 	bl	8011aa8 <HAL_UART_GetState>
 8001e58:	2820      	cmp	r0, #32
 8001e5a:	d1fa      	bne.n	8001e52 <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	220a      	movs	r2, #10
 8001e60:	4906      	ldr	r1, [pc, #24]	; (8001e7c <UartCmd_Upload_Timing_Report+0x48>)
 8001e62:	f00f fc47 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001e66:	b918      	cbnz	r0, 8001e70 <UartCmd_Upload_Timing_Report+0x3c>
}
 8001e68:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001e6a:	f002 fedd 	bl	8004c28 <Error_Handler>
 8001e6e:	e7f0      	b.n	8001e52 <UartCmd_Upload_Timing_Report+0x1e>
}
 8001e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001e74:	f002 bed8 	b.w	8004c28 <Error_Handler>
 8001e78:	d0fce760 	.word	0xd0fce760
 8001e7c:	24003220 	.word	0x24003220

08001e80 <UartCmd_Get_Dump_Output_Data_Size>:
{
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4604      	mov	r4, r0
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001e84:	4d11      	ldr	r5, [pc, #68]	; (8001ecc <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 8001e86:	2348      	movs	r3, #72	; 0x48
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e88:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e8a:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001e94:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e96:	f002 fe59 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f00f fbd8 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001ea4:	b958      	cbnz	r0, 8001ebe <UartCmd_Get_Dump_Output_Data_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f00f fdfe 	bl	8011aa8 <HAL_UART_GetState>
 8001eac:	2820      	cmp	r0, #32
 8001eae:	d1fa      	bne.n	8001ea6 <UartCmd_Get_Dump_Output_Data_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	220a      	movs	r2, #10
 8001eb4:	4906      	ldr	r1, [pc, #24]	; (8001ed0 <UartCmd_Get_Dump_Output_Data_Size+0x50>)
 8001eb6:	f00f fc1d 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001eba:	b918      	cbnz	r0, 8001ec4 <UartCmd_Get_Dump_Output_Data_Size+0x44>
}
 8001ebc:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001ebe:	f002 feb3 	bl	8004c28 <Error_Handler>
 8001ec2:	e7f0      	b.n	8001ea6 <UartCmd_Get_Dump_Output_Data_Size+0x26>
}
 8001ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001ec8:	f002 beae 	b.w	8004c28 <Error_Handler>
 8001ecc:	24003240 	.word	0x24003240
 8001ed0:	24003220 	.word	0x24003220

08001ed4 <UartCmd_Get_Validation_Final_Accuracy>:
{
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4604      	mov	r4, r0
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001ed8:	4d12      	ldr	r5, [pc, #72]	; (8001f24 <UartCmd_Get_Validation_Final_Accuracy+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001eda:	2202      	movs	r2, #2
 8001edc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001ee0:	f204 4344 	addw	r3, r4, #1092	; 0x444
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001ee4:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ee8:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001eee:	f002 fe2d 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	f00f fbac 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001efc:	b958      	cbnz	r0, 8001f16 <UartCmd_Get_Validation_Final_Accuracy+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f00f fdd2 	bl	8011aa8 <HAL_UART_GetState>
 8001f04:	2820      	cmp	r0, #32
 8001f06:	d1fa      	bne.n	8001efe <UartCmd_Get_Validation_Final_Accuracy+0x2a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001f08:	4620      	mov	r0, r4
 8001f0a:	220a      	movs	r2, #10
 8001f0c:	4906      	ldr	r1, [pc, #24]	; (8001f28 <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 8001f0e:	f00f fbf1 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001f12:	b918      	cbnz	r0, 8001f1c <UartCmd_Get_Validation_Final_Accuracy+0x48>
}
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001f16:	f002 fe87 	bl	8004c28 <Error_Handler>
 8001f1a:	e7f0      	b.n	8001efe <UartCmd_Get_Validation_Final_Accuracy+0x2a>
}
 8001f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001f20:	f002 be82 	b.w	8004c28 <Error_Handler>
 8001f24:	24003240 	.word	0x24003240
 8001f28:	24003220 	.word	0x24003220

08001f2c <UartCmd_Upload_Valid_Output>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
 8001f30:	2202      	movs	r2, #2
 8001f32:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8001f36:	480f      	ldr	r0, [pc, #60]	; (8001f74 <UartCmd_Upload_Valid_Output+0x48>)
 8001f38:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
 8001f3c:	f002 fe06 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
 8001f40:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001f44:	490b      	ldr	r1, [pc, #44]	; (8001f74 <UartCmd_Upload_Valid_Output+0x48>)
 8001f46:	4620      	mov	r0, r4
 8001f48:	f00f fb84 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001f4c:	b958      	cbnz	r0, 8001f66 <UartCmd_Upload_Valid_Output+0x3a>
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f00f fdaa 	bl	8011aa8 <HAL_UART_GetState>
 8001f54:	2820      	cmp	r0, #32
 8001f56:	d1fa      	bne.n	8001f4e <UartCmd_Upload_Valid_Output+0x22>
 8001f58:	4620      	mov	r0, r4
 8001f5a:	220a      	movs	r2, #10
 8001f5c:	4906      	ldr	r1, [pc, #24]	; (8001f78 <UartCmd_Upload_Valid_Output+0x4c>)
 8001f5e:	f00f fbc9 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001f62:	b918      	cbnz	r0, 8001f6c <UartCmd_Upload_Valid_Output+0x40>
 8001f64:	bd10      	pop	{r4, pc}
 8001f66:	f002 fe5f 	bl	8004c28 <Error_Handler>
 8001f6a:	e7f0      	b.n	8001f4e <UartCmd_Upload_Valid_Output+0x22>
 8001f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f70:	f002 be5a 	b.w	8004c28 <Error_Handler>
 8001f74:	d0ddc920 	.word	0xd0ddc920
 8001f78:	24003220 	.word	0x24003220

08001f7c <UartCmd_Upload_Dump_Output_Data>:
 8001f7c:	b510      	push	{r4, lr}
 8001f7e:	4604      	mov	r4, r0
 8001f80:	2202      	movs	r2, #2
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8001f86:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
 8001f8a:	f002 fddf 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
 8001f8e:	2248      	movs	r2, #72	; 0x48
 8001f90:	490b      	ldr	r1, [pc, #44]	; (8001fc0 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8001f92:	4620      	mov	r0, r4
 8001f94:	f00f fb5e 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001f98:	b958      	cbnz	r0, 8001fb2 <UartCmd_Upload_Dump_Output_Data+0x36>
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f00f fd84 	bl	8011aa8 <HAL_UART_GetState>
 8001fa0:	2820      	cmp	r0, #32
 8001fa2:	d1fa      	bne.n	8001f9a <UartCmd_Upload_Dump_Output_Data+0x1e>
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	220a      	movs	r2, #10
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <UartCmd_Upload_Dump_Output_Data+0x48>)
 8001faa:	f00f fba3 	bl	80116f4 <HAL_UART_Receive_DMA>
 8001fae:	b918      	cbnz	r0, 8001fb8 <UartCmd_Upload_Dump_Output_Data+0x3c>
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	f002 fe39 	bl	8004c28 <Error_Handler>
 8001fb6:	e7f0      	b.n	8001f9a <UartCmd_Upload_Dump_Output_Data+0x1e>
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fbc:	f002 be34 	b.w	8004c28 <Error_Handler>
 8001fc0:	d0ddc8a0 	.word	0xd0ddc8a0
 8001fc4:	24003220 	.word	0x24003220

08001fc8 <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	4d32      	ldr	r5, [pc, #200]	; (8002094 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8001fcc:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001fce:	2202      	movs	r2, #2
 8001fd0:	4931      	ldr	r1, [pc, #196]	; (8002098 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	4f31      	ldr	r7, [pc, #196]	; (800209c <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001fd6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001fda:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001fde:	f002 fdb5 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f00f fb33 	bl	8011654 <HAL_UART_Transmit_DMA>
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d142      	bne.n	8002078 <UartCmd_Upload_NonRegression_Debug_Report+0xb0>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f00f fd58 	bl	8011aa8 <HAL_UART_GetState>
 8001ff8:	2820      	cmp	r0, #32
 8001ffa:	d1fa      	bne.n	8001ff2 <UartCmd_Upload_NonRegression_Debug_Report+0x2a>
    for(i=0;i<dma_xfer_num;i++)
 8001ffc:	4435      	add	r5, r6
 8001ffe:	42af      	cmp	r7, r5
 8002000:	d1ef      	bne.n	8001fe2 <UartCmd_Upload_NonRegression_Debug_Report+0x1a>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002002:	f248 02f8 	movw	r2, #33016	; 0x80f8
 8002006:	4925      	ldr	r1, [pc, #148]	; (800209c <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
 8002008:	4620      	mov	r0, r4
 800200a:	f00f fb23 	bl	8011654 <HAL_UART_Transmit_DMA>
 800200e:	2800      	cmp	r0, #0
 8002010:	d13c      	bne.n	800208c <UartCmd_Upload_NonRegression_Debug_Report+0xc4>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002012:	4620      	mov	r0, r4
 8002014:	f00f fd48 	bl	8011aa8 <HAL_UART_GetState>
 8002018:	2820      	cmp	r0, #32
 800201a:	d1fa      	bne.n	8002012 <UartCmd_Upload_NonRegression_Debug_Report+0x4a>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800201c:	4d20      	ldr	r5, [pc, #128]	; (80020a0 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 800201e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002022:	4e20      	ldr	r6, [pc, #128]	; (80020a4 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002024:	2202      	movs	r2, #2
 8002026:	491c      	ldr	r1, [pc, #112]	; (8002098 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8002028:	4628      	mov	r0, r5
 800202a:	f002 fd8f 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 800202e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002032:	4629      	mov	r1, r5
 8002034:	4620      	mov	r0, r4
 8002036:	f00f fb0d 	bl	8011654 <HAL_UART_Transmit_DMA>
 800203a:	b9d0      	cbnz	r0, 8002072 <UartCmd_Upload_NonRegression_Debug_Report+0xaa>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800203c:	4620      	mov	r0, r4
 800203e:	f00f fd33 	bl	8011aa8 <HAL_UART_GetState>
 8002042:	2820      	cmp	r0, #32
 8002044:	d1fa      	bne.n	800203c <UartCmd_Upload_NonRegression_Debug_Report+0x74>
    for(i=0;i<dma_xfer_num;i++)
 8002046:	443d      	add	r5, r7
 8002048:	42b5      	cmp	r5, r6
 800204a:	d1f0      	bne.n	800202e <UartCmd_Upload_NonRegression_Debug_Report+0x66>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 800204c:	f248 02f8 	movw	r2, #33016	; 0x80f8
 8002050:	4914      	ldr	r1, [pc, #80]	; (80020a4 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8002052:	4620      	mov	r0, r4
 8002054:	f00f fafe 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002058:	b9a8      	cbnz	r0, 8002086 <UartCmd_Upload_NonRegression_Debug_Report+0xbe>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800205a:	4620      	mov	r0, r4
 800205c:	f00f fd24 	bl	8011aa8 <HAL_UART_GetState>
 8002060:	2820      	cmp	r0, #32
 8002062:	d1fa      	bne.n	800205a <UartCmd_Upload_NonRegression_Debug_Report+0x92>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002064:	4620      	mov	r0, r4
 8002066:	220a      	movs	r2, #10
 8002068:	490f      	ldr	r1, [pc, #60]	; (80020a8 <UartCmd_Upload_NonRegression_Debug_Report+0xe0>)
 800206a:	f00f fb43 	bl	80116f4 <HAL_UART_Receive_DMA>
 800206e:	b930      	cbnz	r0, 800207e <UartCmd_Upload_NonRegression_Debug_Report+0xb6>
}
 8002070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8002072:	f002 fdd9 	bl	8004c28 <Error_Handler>
 8002076:	e7e1      	b.n	800203c <UartCmd_Upload_NonRegression_Debug_Report+0x74>
 8002078:	f002 fdd6 	bl	8004c28 <Error_Handler>
 800207c:	e7b9      	b.n	8001ff2 <UartCmd_Upload_NonRegression_Debug_Report+0x2a>
}
 800207e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002082:	f002 bdd1 	b.w	8004c28 <Error_Handler>
        Error_Handler();
 8002086:	f002 fdcf 	bl	8004c28 <Error_Handler>
 800208a:	e7e6      	b.n	800205a <UartCmd_Upload_NonRegression_Debug_Report+0x92>
 800208c:	f002 fdcc 	bl	8004c28 <Error_Handler>
 8002090:	e7bf      	b.n	8002012 <UartCmd_Upload_NonRegression_Debug_Report+0x4a>
 8002092:	bf00      	nop
 8002094:	d0dde560 	.word	0xd0dde560
 8002098:	000f8100 	.word	0x000f8100
 800209c:	d0ece551 	.word	0xd0ece551
 80020a0:	d0ed6660 	.word	0xd0ed6660
 80020a4:	d0fc6651 	.word	0xd0fc6651
 80020a8:	24003220 	.word	0x24003220

080020ac <UartCmd_Get_Valid_Output_Size>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4604      	mov	r4, r0
 80020b0:	4d12      	ldr	r5, [pc, #72]	; (80020fc <UartCmd_Get_Valid_Output_Size+0x50>)
 80020b2:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80020b6:	2202      	movs	r2, #2
 80020b8:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
 80020bc:	4628      	mov	r0, r5
 80020be:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80020c2:	602b      	str	r3, [r5, #0]
 80020c4:	f002 fd42 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
 80020c8:	4629      	mov	r1, r5
 80020ca:	2204      	movs	r2, #4
 80020cc:	4620      	mov	r0, r4
 80020ce:	f00f fac1 	bl	8011654 <HAL_UART_Transmit_DMA>
 80020d2:	b958      	cbnz	r0, 80020ec <UartCmd_Get_Valid_Output_Size+0x40>
 80020d4:	4620      	mov	r0, r4
 80020d6:	f00f fce7 	bl	8011aa8 <HAL_UART_GetState>
 80020da:	2820      	cmp	r0, #32
 80020dc:	d1fa      	bne.n	80020d4 <UartCmd_Get_Valid_Output_Size+0x28>
 80020de:	4620      	mov	r0, r4
 80020e0:	220a      	movs	r2, #10
 80020e2:	4907      	ldr	r1, [pc, #28]	; (8002100 <UartCmd_Get_Valid_Output_Size+0x54>)
 80020e4:	f00f fb06 	bl	80116f4 <HAL_UART_Receive_DMA>
 80020e8:	b918      	cbnz	r0, 80020f2 <UartCmd_Get_Valid_Output_Size+0x46>
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	f002 fd9c 	bl	8004c28 <Error_Handler>
 80020f0:	e7f0      	b.n	80020d4 <UartCmd_Get_Valid_Output_Size+0x28>
 80020f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020f6:	f002 bd97 	b.w	8004c28 <Error_Handler>
 80020fa:	bf00      	nop
 80020fc:	24003240 	.word	0x24003240
 8002100:	24003220 	.word	0x24003220

08002104 <UartCmd_Get_NonRegression_Report_Size>:
{
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8002108:	4d11      	ldr	r5, [pc, #68]	; (8002150 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 800210a:	2348      	movs	r3, #72	; 0x48
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800210c:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800210e:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002112:	4628      	mov	r0, r5
 8002114:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8002118:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800211a:	f002 fd17 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800211e:	4629      	mov	r1, r5
 8002120:	2204      	movs	r2, #4
 8002122:	4620      	mov	r0, r4
 8002124:	f00f fa96 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002128:	b958      	cbnz	r0, 8002142 <UartCmd_Get_NonRegression_Report_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800212a:	4620      	mov	r0, r4
 800212c:	f00f fcbc 	bl	8011aa8 <HAL_UART_GetState>
 8002130:	2820      	cmp	r0, #32
 8002132:	d1fa      	bne.n	800212a <UartCmd_Get_NonRegression_Report_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002134:	4620      	mov	r0, r4
 8002136:	220a      	movs	r2, #10
 8002138:	4906      	ldr	r1, [pc, #24]	; (8002154 <UartCmd_Get_NonRegression_Report_Size+0x50>)
 800213a:	f00f fadb 	bl	80116f4 <HAL_UART_Receive_DMA>
 800213e:	b918      	cbnz	r0, 8002148 <UartCmd_Get_NonRegression_Report_Size+0x44>
}
 8002140:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002142:	f002 fd71 	bl	8004c28 <Error_Handler>
 8002146:	e7f0      	b.n	800212a <UartCmd_Get_NonRegression_Report_Size+0x26>
}
 8002148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800214c:	f002 bd6c 	b.w	8004c28 <Error_Handler>
 8002150:	24003240 	.word	0x24003240
 8002154:	24003220 	.word	0x24003220

08002158 <UartCmd_Get_Validation_Report_Size>:
{
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 800215c:	4d12      	ldr	r5, [pc, #72]	; (80021a8 <UartCmd_Get_Validation_Report_Size+0x50>)
 800215e:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002162:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002164:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002168:	4628      	mov	r0, r5
 800216a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 800216e:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002170:	f002 fcec 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002174:	4629      	mov	r1, r5
 8002176:	2204      	movs	r2, #4
 8002178:	4620      	mov	r0, r4
 800217a:	f00f fa6b 	bl	8011654 <HAL_UART_Transmit_DMA>
 800217e:	b958      	cbnz	r0, 8002198 <UartCmd_Get_Validation_Report_Size+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002180:	4620      	mov	r0, r4
 8002182:	f00f fc91 	bl	8011aa8 <HAL_UART_GetState>
 8002186:	2820      	cmp	r0, #32
 8002188:	d1fa      	bne.n	8002180 <UartCmd_Get_Validation_Report_Size+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800218a:	4620      	mov	r0, r4
 800218c:	220a      	movs	r2, #10
 800218e:	4907      	ldr	r1, [pc, #28]	; (80021ac <UartCmd_Get_Validation_Report_Size+0x54>)
 8002190:	f00f fab0 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002194:	b918      	cbnz	r0, 800219e <UartCmd_Get_Validation_Report_Size+0x46>
}
 8002196:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002198:	f002 fd46 	bl	8004c28 <Error_Handler>
 800219c:	e7f0      	b.n	8002180 <UartCmd_Get_Validation_Report_Size+0x28>
}
 800219e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80021a2:	f002 bd41 	b.w	8004c28 <Error_Handler>
 80021a6:	bf00      	nop
 80021a8:	24003240 	.word	0x24003240
 80021ac:	24003220 	.word	0x24003220

080021b0 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 80021b4:	4d11      	ldr	r5, [pc, #68]	; (80021fc <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021b8:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80021ba:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021be:	4628      	mov	r0, r5
 80021c0:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 80021c4:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021c6:	f002 fcc1 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80021ca:	4629      	mov	r1, r5
 80021cc:	2204      	movs	r2, #4
 80021ce:	4620      	mov	r0, r4
 80021d0:	f00f fa40 	bl	8011654 <HAL_UART_Transmit_DMA>
 80021d4:	b958      	cbnz	r0, 80021ee <UartCmd_Get_Dump_Whole_Data_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f00f fc66 	bl	8011aa8 <HAL_UART_GetState>
 80021dc:	2820      	cmp	r0, #32
 80021de:	d1fa      	bne.n	80021d6 <UartCmd_Get_Dump_Whole_Data_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80021e0:	4620      	mov	r0, r4
 80021e2:	220a      	movs	r2, #10
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <UartCmd_Get_Dump_Whole_Data_Size+0x54>)
 80021e6:	f00f fa85 	bl	80116f4 <HAL_UART_Receive_DMA>
 80021ea:	b918      	cbnz	r0, 80021f4 <UartCmd_Get_Dump_Whole_Data_Size+0x44>
}
 80021ec:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80021ee:	f002 fd1b 	bl	8004c28 <Error_Handler>
 80021f2:	e7f0      	b.n	80021d6 <UartCmd_Get_Dump_Whole_Data_Size+0x26>
}
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80021f8:	f002 bd16 	b.w	8004c28 <Error_Handler>
 80021fc:	24003240 	.word	0x24003240
 8002200:	000f80e9 	.word	0x000f80e9
 8002204:	24003220 	.word	0x24003220

08002208 <UartCmd_Get_Timing_Report_Size>:
{
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 800220c:	4d11      	ldr	r5, [pc, #68]	; (8002254 <UartCmd_Get_Timing_Report_Size+0x4c>)
 800220e:	2314      	movs	r3, #20
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002210:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002212:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002216:	4628      	mov	r0, r5
 8002218:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 800221c:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800221e:	f002 fc95 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002222:	4629      	mov	r1, r5
 8002224:	2204      	movs	r2, #4
 8002226:	4620      	mov	r0, r4
 8002228:	f00f fa14 	bl	8011654 <HAL_UART_Transmit_DMA>
 800222c:	b958      	cbnz	r0, 8002246 <UartCmd_Get_Timing_Report_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800222e:	4620      	mov	r0, r4
 8002230:	f00f fc3a 	bl	8011aa8 <HAL_UART_GetState>
 8002234:	2820      	cmp	r0, #32
 8002236:	d1fa      	bne.n	800222e <UartCmd_Get_Timing_Report_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002238:	4620      	mov	r0, r4
 800223a:	220a      	movs	r2, #10
 800223c:	4906      	ldr	r1, [pc, #24]	; (8002258 <UartCmd_Get_Timing_Report_Size+0x50>)
 800223e:	f00f fa59 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002242:	b918      	cbnz	r0, 800224c <UartCmd_Get_Timing_Report_Size+0x44>
}
 8002244:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002246:	f002 fcef 	bl	8004c28 <Error_Handler>
 800224a:	e7f0      	b.n	800222e <UartCmd_Get_Timing_Report_Size+0x26>
}
 800224c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002250:	f002 bcea 	b.w	8004c28 <Error_Handler>
 8002254:	24003240 	.word	0x24003240
 8002258:	24003220 	.word	0x24003220

0800225c <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002260:	4d11      	ldr	r5, [pc, #68]	; (80022a8 <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002264:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002266:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800226a:	4628      	mov	r0, r5
 800226c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002270:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002272:	f002 fc6b 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002276:	4629      	mov	r1, r5
 8002278:	2204      	movs	r2, #4
 800227a:	4620      	mov	r0, r4
 800227c:	f00f f9ea 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002280:	b958      	cbnz	r0, 800229a <UartCmd_Get_NonRegression_Debug_Report_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002282:	4620      	mov	r0, r4
 8002284:	f00f fc10 	bl	8011aa8 <HAL_UART_GetState>
 8002288:	2820      	cmp	r0, #32
 800228a:	d1fa      	bne.n	8002282 <UartCmd_Get_NonRegression_Debug_Report_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800228c:	4620      	mov	r0, r4
 800228e:	220a      	movs	r2, #10
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x54>)
 8002292:	f00f fa2f 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002296:	b918      	cbnz	r0, 80022a0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x44>
}
 8002298:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 800229a:	f002 fcc5 	bl	8004c28 <Error_Handler>
 800229e:	e7f0      	b.n	8002282 <UartCmd_Get_NonRegression_Debug_Report_Size+0x26>
}
 80022a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80022a4:	f002 bcc0 	b.w	8004c28 <Error_Handler>
 80022a8:	24003240 	.word	0x24003240
 80022ac:	001f01d2 	.word	0x001f01d2
 80022b0:	24003220 	.word	0x24003220

080022b4 <UartCmd_Read_Camera_Register>:
{
 80022b4:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
 80022b8:	460f      	mov	r7, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80022ba:	7809      	ldrb	r1, [r1, #0]
{
 80022bc:	b083      	sub	sp, #12
 80022be:	4682      	mov	sl, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80022c0:	787e      	ldrb	r6, [r7, #1]
 80022c2:	1a76      	subs	r6, r6, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80022c4:	3601      	adds	r6, #1
 80022c6:	d017      	beq.n	80022f8 <UartCmd_Read_Camera_Register+0x44>
 80022c8:	2400      	movs	r4, #0
 80022ca:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002348 <UartCmd_Read_Camera_Register+0x94>
 80022ce:	4d1c      	ldr	r5, [pc, #112]	; (8002340 <UartCmd_Read_Camera_Register+0x8c>)
 80022d0:	e000      	b.n	80022d4 <UartCmd_Read_Camera_Register+0x20>
 80022d2:	5d39      	ldrb	r1, [r7, r4]
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 80022d4:	f8d9 0000 	ldr.w	r0, [r9]
 80022d8:	2301      	movs	r3, #1
 80022da:	f10d 0207 	add.w	r2, sp, #7
 80022de:	3018      	adds	r0, #24
 80022e0:	f006 f85c 	bl	800839c <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 80022e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80022e8:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 80022ea:	552a      	strb	r2, [r5, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80022ec:	b2dc      	uxtb	r4, r3
 80022ee:	42b4      	cmp	r4, r6
 80022f0:	d3ef      	bcc.n	80022d2 <UartCmd_Read_Camera_Register+0x1e>
  if(TxDataTransferSize > TxDataBufSize)
 80022f2:	2ee0      	cmp	r6, #224	; 0xe0
 80022f4:	d900      	bls.n	80022f8 <UartCmd_Read_Camera_Register+0x44>
    while(1);
 80022f6:	e7fe      	b.n	80022f6 <UartCmd_Read_Camera_Register+0x42>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80022f8:	f60a 2abc 	addw	sl, sl, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80022fc:	2202      	movs	r2, #2
 80022fe:	21e0      	movs	r1, #224	; 0xe0
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <UartCmd_Read_Camera_Register+0x8c>)
 8002302:	f002 fc23 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002306:	4650      	mov	r0, sl
 8002308:	b2b2      	uxth	r2, r6
 800230a:	490d      	ldr	r1, [pc, #52]	; (8002340 <UartCmd_Read_Camera_Register+0x8c>)
 800230c:	f00f f9a2 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002310:	b990      	cbnz	r0, 8002338 <UartCmd_Read_Camera_Register+0x84>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002312:	4650      	mov	r0, sl
 8002314:	f00f fbc8 	bl	8011aa8 <HAL_UART_GetState>
 8002318:	2820      	cmp	r0, #32
 800231a:	d1fa      	bne.n	8002312 <UartCmd_Read_Camera_Register+0x5e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800231c:	4650      	mov	r0, sl
 800231e:	220a      	movs	r2, #10
 8002320:	4908      	ldr	r1, [pc, #32]	; (8002344 <UartCmd_Read_Camera_Register+0x90>)
 8002322:	f00f f9e7 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002326:	b910      	cbnz	r0, 800232e <UartCmd_Read_Camera_Register+0x7a>
}
 8002328:	b003      	add	sp, #12
 800232a:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
    Error_Handler();
 800232e:	f002 fc7b 	bl	8004c28 <Error_Handler>
}
 8002332:	b003      	add	sp, #12
 8002334:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
      Error_Handler();
 8002338:	f002 fc76 	bl	8004c28 <Error_Handler>
 800233c:	e7e9      	b.n	8002312 <UartCmd_Read_Camera_Register+0x5e>
 800233e:	bf00      	nop
 8002340:	24005660 	.word	0x24005660
 8002344:	24003220 	.word	0x24003220
 8002348:	24005104 	.word	0x24005104

0800234c <UartCmd_Trigger_Capture>:
{
 800234c:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 800234e:	f890 2aa4 	ldrb.w	r2, [r0, #2724]	; 0xaa4
{
 8002352:	4603      	mov	r3, r0
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002354:	2a04      	cmp	r2, #4
 8002356:	d108      	bne.n	800236a <UartCmd_Trigger_Capture+0x1e>
 8002358:	f8d0 2ab0 	ldr.w	r2, [r0, #2736]	; 0xab0
 800235c:	b92a      	cbnz	r2, 800236a <UartCmd_Trigger_Capture+0x1e>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800235e:	2201      	movs	r2, #1
 8002360:	f8c0 2aa0 	str.w	r2, [r0, #2720]	; 0xaa0
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8002364:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
}
 8002368:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 800236a:	4d14      	ldr	r5, [pc, #80]	; (80023bc <UartCmd_Trigger_Capture+0x70>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800236c:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002370:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002372:	2202      	movs	r2, #2
 8002374:	4628      	mov	r0, r5
 8002376:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    *(aTxBuffer) = CMD_ERROR_EVT;
 800237a:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800237c:	f002 fbe6 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002380:	4629      	mov	r1, r5
 8002382:	4620      	mov	r0, r4
 8002384:	2201      	movs	r2, #1
 8002386:	f00f f965 	bl	8011654 <HAL_UART_Transmit_DMA>
 800238a:	b978      	cbnz	r0, 80023ac <UartCmd_Trigger_Capture+0x60>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800238c:	4620      	mov	r0, r4
 800238e:	f00f fb8b 	bl	8011aa8 <HAL_UART_GetState>
 8002392:	2820      	cmp	r0, #32
 8002394:	d1fa      	bne.n	800238c <UartCmd_Trigger_Capture+0x40>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002396:	4620      	mov	r0, r4
 8002398:	220a      	movs	r2, #10
 800239a:	4909      	ldr	r1, [pc, #36]	; (80023c0 <UartCmd_Trigger_Capture+0x74>)
 800239c:	f00f f9aa 	bl	80116f4 <HAL_UART_Receive_DMA>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d0e1      	beq.n	8002368 <UartCmd_Trigger_Capture+0x1c>
}
 80023a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80023a8:	f002 bc3e 	b.w	8004c28 <Error_Handler>
      Error_Handler();
 80023ac:	f002 fc3c 	bl	8004c28 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80023b0:	4620      	mov	r0, r4
 80023b2:	f00f fb79 	bl	8011aa8 <HAL_UART_GetState>
 80023b6:	2820      	cmp	r0, #32
 80023b8:	d1e8      	bne.n	800238c <UartCmd_Trigger_Capture+0x40>
 80023ba:	e7ec      	b.n	8002396 <UartCmd_Trigger_Capture+0x4a>
 80023bc:	24003240 	.word	0x24003240
 80023c0:	24003220 	.word	0x24003220

080023c4 <UartCmd_Trigger_Dump>:
{
 80023c4:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 80023c6:	f890 2aa4 	ldrb.w	r2, [r0, #2724]	; 0xaa4
{
 80023ca:	4603      	mov	r3, r0
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 80023cc:	2a03      	cmp	r2, #3
 80023ce:	d028      	beq.n	8002422 <UartCmd_Trigger_Dump+0x5e>
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023d0:	4d1b      	ldr	r5, [pc, #108]	; (8002440 <UartCmd_Trigger_Dump+0x7c>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80023d2:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023d6:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80023d8:	2202      	movs	r2, #2
 80023da:	4628      	mov	r0, r5
 80023dc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023e0:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80023e2:	f002 fbb3 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80023e6:	4629      	mov	r1, r5
 80023e8:	4620      	mov	r0, r4
 80023ea:	2201      	movs	r2, #1
 80023ec:	f00f f932 	bl	8011654 <HAL_UART_Transmit_DMA>
 80023f0:	b978      	cbnz	r0, 8002412 <UartCmd_Trigger_Dump+0x4e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f00f fb58 	bl	8011aa8 <HAL_UART_GetState>
 80023f8:	2820      	cmp	r0, #32
 80023fa:	d1fa      	bne.n	80023f2 <UartCmd_Trigger_Dump+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80023fc:	4620      	mov	r0, r4
 80023fe:	220a      	movs	r2, #10
 8002400:	4910      	ldr	r1, [pc, #64]	; (8002444 <UartCmd_Trigger_Dump+0x80>)
 8002402:	f00f f977 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002406:	b900      	cbnz	r0, 800240a <UartCmd_Trigger_Dump+0x46>
}
 8002408:	bd38      	pop	{r3, r4, r5, pc}
 800240a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800240e:	f002 bc0b 	b.w	8004c28 <Error_Handler>
      Error_Handler();
 8002412:	f002 fc09 	bl	8004c28 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002416:	4620      	mov	r0, r4
 8002418:	f00f fb46 	bl	8011aa8 <HAL_UART_GetState>
 800241c:	2820      	cmp	r0, #32
 800241e:	d1e8      	bne.n	80023f2 <UartCmd_Trigger_Dump+0x2e>
 8002420:	e7ec      	b.n	80023fc <UartCmd_Trigger_Dump+0x38>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002422:	880c      	ldrh	r4, [r1, #0]
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002424:	2001      	movs	r0, #1
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	2100      	movs	r1, #0
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800242a:	f8c3 0aa0 	str.w	r0, [r3, #2720]	; 0xaa0
    Test_Context_Ptr->DumpContext.dump_state = 1;
 800242e:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002432:	f8c3 4aa8 	str.w	r4, [r3, #2728]	; 0xaa8
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002436:	4804      	ldr	r0, [pc, #16]	; (8002448 <UartCmd_Trigger_Dump+0x84>)
}
 8002438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 800243c:	f01e bb72 	b.w	8020b24 <memset>
 8002440:	24003240 	.word	0x24003240
 8002444:	24003220 	.word	0x24003220
 8002448:	d0ddc8a0 	.word	0xd0ddc8a0

0800244c <MemoryDumpInit>:
{
 800244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 8002450:	4ec6      	ldr	r6, [pc, #792]	; (800276c <MemoryDumpInit+0x320>)
{
 8002452:	b094      	sub	sp, #80	; 0x50
 8002454:	4604      	mov	r4, r0
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002456:	f04f 37ff 	mov.w	r7, #4294967295
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 800245a:	ad04      	add	r5, sp, #16
 800245c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800245e:	6836      	ldr	r6, [r6, #0]
 8002460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002462:	222c      	movs	r2, #44	; 0x2c
 8002464:	2100      	movs	r1, #0
 8002466:	a809      	add	r0, sp, #36	; 0x24
 8002468:	602e      	str	r6, [r5, #0]
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800246a:	f8d4 5b80 	ldr.w	r5, [r4, #2944]	; 0xb80
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 800246e:	f01e fb59 	bl	8020b24 <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002472:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002476:	f017 fd33 	bl	8019ee0 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800247a:	2332      	movs	r3, #50	; 0x32
 800247c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002480:	210a      	movs	r1, #10
 8002482:	20c8      	movs	r0, #200	; 0xc8
 8002484:	9700      	str	r7, [sp, #0]
 8002486:	f017 fefb 	bl	801a280 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 800248a:	f017 fd21 	bl	8019ed0 <UTIL_LCD_GetFont>
 800248e:	2301      	movs	r3, #1
 8002490:	88c1      	ldrh	r1, [r0, #6]
 8002492:	2000      	movs	r0, #0
 8002494:	4ab6      	ldr	r2, [pc, #728]	; (8002770 <MemoryDumpInit+0x324>)
 8002496:	f017 fe0b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800249a:	f017 fd19 	bl	8019ed0 <UTIL_LCD_GetFont>
 800249e:	88c1      	ldrh	r1, [r0, #6]
 80024a0:	2301      	movs	r3, #1
 80024a2:	4ab4      	ldr	r2, [pc, #720]	; (8002774 <MemoryDumpInit+0x328>)
 80024a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80024a8:	2000      	movs	r0, #0
 80024aa:	f017 fe01 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 80024ae:	f017 fd0f 	bl	8019ed0 <UTIL_LCD_GetFont>
 80024b2:	88c1      	ldrh	r1, [r0, #6]
 80024b4:	2301      	movs	r3, #1
 80024b6:	4ab0      	ldr	r2, [pc, #704]	; (8002778 <MemoryDumpInit+0x32c>)
 80024b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80024bc:	2000      	movs	r0, #0
 80024be:	4099      	lsls	r1, r3
 80024c0:	f017 fdf6 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80024c4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80024c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80024cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024d0:	4608      	mov	r0, r1
 80024d2:	9700      	str	r7, [sp, #0]
 80024d4:	f017 fe3c 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80024d8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80024dc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80024e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80024e8:	9700      	str	r7, [sp, #0]
 80024ea:	f017 fe31 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80024ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80024f2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80024f6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80024fa:	461a      	mov	r2, r3
 80024fc:	9700      	str	r7, [sp, #0]
 80024fe:	f017 fe27 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002502:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002506:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800250a:	9700      	str	r7, [sp, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4608      	mov	r0, r1
 8002510:	f017 fe1e 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002514:	f017 fcdc 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002518:	2301      	movs	r3, #1
 800251a:	88c1      	ldrh	r1, [r0, #6]
 800251c:	2000      	movs	r0, #0
 800251e:	4a97      	ldr	r2, [pc, #604]	; (800277c <MemoryDumpInit+0x330>)
 8002520:	4099      	lsls	r1, r3
 8002522:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002526:	f017 fdc3 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 800252a:	f017 fcd1 	bl	8019ed0 <UTIL_LCD_GetFont>
 800252e:	88c1      	ldrh	r1, [r0, #6]
 8002530:	2303      	movs	r3, #3
 8002532:	4a93      	ldr	r2, [pc, #588]	; (8002780 <MemoryDumpInit+0x334>)
 8002534:	1049      	asrs	r1, r1, #1
 8002536:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800253a:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 800253e:	f017 fdb7 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 8002542:	f017 fcc5 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002546:	88c1      	ldrh	r1, [r0, #6]
 8002548:	2303      	movs	r3, #3
 800254a:	4a8e      	ldr	r2, [pc, #568]	; (8002784 <MemoryDumpInit+0x338>)
 800254c:	1049      	asrs	r1, r1, #1
 800254e:	20c8      	movs	r0, #200	; 0xc8
 8002550:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002554:	f017 fdac 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002558:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800255a:	f7ff f9af 	bl	80018bc <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 800255e:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d06b      	beq.n	800263e <MemoryDumpInit+0x1f2>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 8002566:	f894 3aa5 	ldrb.w	r3, [r4, #2725]	; 0xaa5
 800256a:	2b02      	cmp	r3, #2
 800256c:	f000 8087 	beq.w	800267e <MemoryDumpInit+0x232>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d05e      	beq.n	8002632 <MemoryDumpInit+0x1e6>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d05c      	beq.n	8002632 <MemoryDumpInit+0x1e6>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002578:	f8d4 3ab8 	ldr.w	r3, [r4, #2744]	; 0xab8
 800257c:	2b01      	cmp	r3, #1
 800257e:	d071      	beq.n	8002664 <MemoryDumpInit+0x218>
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002580:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002582:	220a      	movs	r2, #10
 8002584:	4980      	ldr	r1, [pc, #512]	; (8002788 <MemoryDumpInit+0x33c>)
 8002586:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800258a:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800258e:	f00f f8b1 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002592:	2800      	cmp	r0, #0
 8002594:	d170      	bne.n	8002678 <MemoryDumpInit+0x22c>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002596:	2000      	movs	r0, #0
 8002598:	f007 fe90 	bl	800a2bc <BSP_SD_Init>
 800259c:	b188      	cbz	r0, 80025c2 <MemoryDumpInit+0x176>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 800259e:	f017 fc97 	bl	8019ed0 <UTIL_LCD_GetFont>
 80025a2:	88c1      	ldrh	r1, [r0, #6]
 80025a4:	2301      	movs	r3, #1
 80025a6:	4a79      	ldr	r2, [pc, #484]	; (800278c <MemoryDumpInit+0x340>)
 80025a8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025ac:	2000      	movs	r0, #0
 80025ae:	4099      	lsls	r1, r3
 80025b0:	f017 fd7e 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80025b4:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80025b6:	f7ff f981 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80025ba:	2002      	movs	r0, #2
 80025bc:	f005 ff2c 	bl	8008418 <BSP_LED_On>
    while (1);
 80025c0:	e7fe      	b.n	80025c0 <MemoryDumpInit+0x174>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80025c2:	4873      	ldr	r0, [pc, #460]	; (8002790 <MemoryDumpInit+0x344>)
 80025c4:	a903      	add	r1, sp, #12
 80025c6:	f015 fa8f 	bl	8017ae8 <FATFS_LinkDriver>
 80025ca:	4602      	mov	r2, r0
 80025cc:	b118      	cbz	r0, 80025d6 <MemoryDumpInit+0x18a>
    BSP_LED_On(LED_RED);
 80025ce:	2002      	movs	r0, #2
 80025d0:	f005 ff22 	bl	8008418 <BSP_LED_On>
    while (1);
 80025d4:	e7fe      	b.n	80025d4 <MemoryDumpInit+0x188>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80025d6:	a903      	add	r1, sp, #12
 80025d8:	486e      	ldr	r0, [pc, #440]	; (8002794 <MemoryDumpInit+0x348>)
 80025da:	f013 fc9f 	bl	8015f1c <f_mount>
 80025de:	4607      	mov	r7, r0
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d165      	bne.n	80026b0 <MemoryDumpInit+0x264>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80025e4:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <MemoryDumpInit+0x34c>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80025e6:	f604 366c 	addw	r6, r4, #2924	; 0xb6c
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80025ea:	f104 0822 	add.w	r8, r4, #34	; 0x22
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80025ee:	f8c4 3b6c 	str.w	r3, [r4, #2924]	; 0xb6c
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80025f2:	4630      	mov	r0, r6
 80025f4:	f00d fe80 	bl	80102f8 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 80025f8:	4630      	mov	r0, r6
 80025fa:	f00d fe41 	bl	8010280 <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <MemoryDumpInit+0x350>)
 8002600:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  res = f_mkdir(path);
 8002608:	4640      	mov	r0, r8
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 800260a:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800260e:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 8002612:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  res = f_mkdir(path);
 8002616:	f014 fdc1 	bl	801719c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 800261a:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 800261e:	d14b      	bne.n	80026b8 <MemoryDumpInit+0x26c>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 8002620:	7923      	ldrb	r3, [r4, #4]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d065      	beq.n	80026f2 <MemoryDumpInit+0x2a6>
    BSP_SD_DeInit(0);
 8002626:	4630      	mov	r0, r6
 8002628:	f007 fe0a 	bl	800a240 <BSP_SD_DeInit>
}
 800262c:	b014      	add	sp, #80	; 0x50
 800262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 8002632:	7123      	strb	r3, [r4, #4]
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002634:	f8d4 3ab8 	ldr.w	r3, [r4, #2744]	; 0xab8
 8002638:	2b01      	cmp	r3, #1
 800263a:	d1a1      	bne.n	8002580 <MemoryDumpInit+0x134>
 800263c:	e012      	b.n	8002664 <MemoryDumpInit+0x218>
    HAL_Delay(200);
 800263e:	20c8      	movs	r0, #200	; 0xc8
 8002640:	f007 ff8a 	bl	800a558 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002644:	2100      	movs	r1, #0
 8002646:	4608      	mov	r0, r1
 8002648:	f006 f804 	bl	8008654 <BSP_JOY_GetState>
 800264c:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 800264e:	2b02      	cmp	r3, #2
 8002650:	d9f8      	bls.n	8002644 <MemoryDumpInit+0x1f8>
    switch (joy_state)
 8002652:	2b08      	cmp	r3, #8
 8002654:	d023      	beq.n	800269e <MemoryDumpInit+0x252>
 8002656:	2b10      	cmp	r3, #16
 8002658:	d01e      	beq.n	8002698 <MemoryDumpInit+0x24c>
 800265a:	2b04      	cmp	r3, #4
 800265c:	d19b      	bne.n	8002596 <MemoryDumpInit+0x14a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 800265e:	2303      	movs	r3, #3
 8002660:	7123      	strb	r3, [r4, #4]
   break;
 8002662:	e798      	b.n	8002596 <MemoryDumpInit+0x14a>
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002664:	2100      	movs	r1, #0
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002666:	2280      	movs	r2, #128	; 0x80
      Test_Context_Ptr->DumpContext.dump_state = 1;
 8002668:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 800266c:	f8c4 1ab8 	str.w	r1, [r4, #2744]	; 0xab8
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002670:	484b      	ldr	r0, [pc, #300]	; (80027a0 <MemoryDumpInit+0x354>)
 8002672:	f01e fa57 	bl	8020b24 <memset>
 8002676:	e78e      	b.n	8002596 <MemoryDumpInit+0x14a>
    Error_Handler();
 8002678:	f002 fad6 	bl	8004c28 <Error_Handler>
 800267c:	e78b      	b.n	8002596 <MemoryDumpInit+0x14a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 800267e:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8002680:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8002682:	f7fe fe57 	bl	8001334 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8002686:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8002688:	f7fe ff36 	bl	80014f8 <CAMERA_Enable_TestBar_Mode>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 800268c:	f8d4 3ab8 	ldr.w	r3, [r4, #2744]	; 0xab8
 8002690:	2b01      	cmp	r3, #1
 8002692:	f47f af75 	bne.w	8002580 <MemoryDumpInit+0x134>
 8002696:	e7e5      	b.n	8002664 <MemoryDumpInit+0x218>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002698:	2301      	movs	r3, #1
 800269a:	7123      	strb	r3, [r4, #4]
      break;
 800269c:	e77b      	b.n	8002596 <MemoryDumpInit+0x14a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 800269e:	2302      	movs	r3, #2
 80026a0:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80026a2:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80026a4:	f7fe fe46 	bl	8001334 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80026a8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80026aa:	f7fe ff25 	bl	80014f8 <CAMERA_Enable_TestBar_Mode>
      break;
 80026ae:	e772      	b.n	8002596 <MemoryDumpInit+0x14a>
    BSP_LED_On(LED_RED);
 80026b0:	2002      	movs	r0, #2
 80026b2:	f005 feb1 	bl	8008418 <BSP_LED_On>
    while (1);
 80026b6:	e7fe      	b.n	80026b6 <MemoryDumpInit+0x26a>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80026b8:	f017 fc0a 	bl	8019ed0 <UTIL_LCD_GetFont>
 80026bc:	88c1      	ldrh	r1, [r0, #6]
 80026be:	2301      	movs	r3, #1
 80026c0:	4a38      	ldr	r2, [pc, #224]	; (80027a4 <MemoryDumpInit+0x358>)
 80026c2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80026c6:	4638      	mov	r0, r7
 80026c8:	4099      	lsls	r1, r3
 80026ca:	f017 fcf1 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80026ce:	f017 fbff 	bl	8019ed0 <UTIL_LCD_GetFont>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4642      	mov	r2, r8
 80026d6:	4638      	mov	r0, r7
 80026d8:	88d9      	ldrh	r1, [r3, #6]
 80026da:	2301      	movs	r3, #1
 80026dc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80026e0:	f017 fce6 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80026e4:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80026e6:	f7ff f8e9 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80026ea:	2002      	movs	r0, #2
 80026ec:	f005 fe94 	bl	8008418 <BSP_LED_On>
    while (1);
 80026f0:	e7fe      	b.n	80026f0 <MemoryDumpInit+0x2a4>
  res = f_stat(path, &fno);
 80026f2:	492d      	ldr	r1, [pc, #180]	; (80027a8 <MemoryDumpInit+0x35c>)
 80026f4:	a804      	add	r0, sp, #16
 80026f6:	f014 fd21 	bl	801713c <f_stat>
  if (res != FR_OK)
 80026fa:	4604      	mov	r4, r0
 80026fc:	b9c8      	cbnz	r0, 8002732 <MemoryDumpInit+0x2e6>
    nbr_dir = count_dir(dump_dir_path, App_Cxt_Ptr);
 80026fe:	a804      	add	r0, sp, #16
 8002700:	f105 0164 	add.w	r1, r5, #100	; 0x64
 8002704:	f7ff fa28 	bl	8001b58 <count_dir.isra.0>
    if (nbr_dir != 0)
 8002708:	2800      	cmp	r0, #0
 800270a:	d08f      	beq.n	800262c <MemoryDumpInit+0x1e0>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 800270c:	f017 fbe0 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002710:	4602      	mov	r2, r0
 8002712:	2301      	movs	r3, #1
 8002714:	4620      	mov	r0, r4
 8002716:	88d1      	ldrh	r1, [r2, #6]
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <MemoryDumpInit+0x360>)
 800271a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800271e:	4099      	lsls	r1, r3
 8002720:	f017 fcc6 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002724:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8002726:	f7ff f8c9 	bl	80018bc <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 800272a:	2002      	movs	r0, #2
 800272c:	f005 fe74 	bl	8008418 <BSP_LED_On>
      while (1)
 8002730:	e7fe      	b.n	8002730 <MemoryDumpInit+0x2e4>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not find directory", CENTER_MODE);
 8002732:	f017 fbcd 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002736:	88c1      	ldrh	r1, [r0, #6]
 8002738:	2301      	movs	r3, #1
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <MemoryDumpInit+0x364>)
 800273c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002740:	4630      	mov	r0, r6
 8002742:	4099      	lsls	r1, r3
 8002744:	f017 fcb4 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002748:	f017 fbc2 	bl	8019ed0 <UTIL_LCD_GetFont>
 800274c:	4603      	mov	r3, r0
 800274e:	aa04      	add	r2, sp, #16
 8002750:	4630      	mov	r0, r6
 8002752:	88d9      	ldrh	r1, [r3, #6]
 8002754:	2301      	movs	r3, #1
 8002756:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800275a:	f017 fca9 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(app->Display_ContextPtr);
 800275e:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8002760:	f7ff f8ac 	bl	80018bc <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002764:	2002      	movs	r0, #2
 8002766:	f005 fe57 	bl	8008418 <BSP_LED_On>
      while (1);
 800276a:	e7fe      	b.n	800276a <MemoryDumpInit+0x31e>
 800276c:	08023f40 	.word	0x08023f40
 8002770:	08024268 	.word	0x08024268
 8002774:	08024280 	.word	0x08024280
 8002778:	080242a8 	.word	0x080242a8
 800277c:	080241d4 	.word	0x080241d4
 8002780:	080241e0 	.word	0x080241e0
 8002784:	080241f0 	.word	0x080241f0
 8002788:	24003220 	.word	0x24003220
 800278c:	080242c4 	.word	0x080242c4
 8002790:	08045d64 	.word	0x08045d64
 8002794:	24003ce0 	.word	0x24003ce0
 8002798:	48021800 	.word	0x48021800
 800279c:	080242e0 	.word	0x080242e0
 80027a0:	d0ddc8a0 	.word	0xd0ddc8a0
 80027a4:	080242f0 	.word	0x080242f0
 80027a8:	24003f14 	.word	0x24003f14
 80027ac:	08024334 	.word	0x08024334
 80027b0:	08024314 	.word	0x08024314

080027b4 <OnBoardValidInit>:
{
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	4605      	mov	r5, r0
 80027ba:	b093      	sub	sp, #76	; 0x4c
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80027bc:	f8d5 6b80 	ldr.w	r6, [r5, #2944]	; 0xb80
  char msg[64];
  
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/
  
  sprintf(msg, "%s", App_Cxt_Ptr->Test_ContextPtr->ValidationContext.class_path);
 80027c0:	a802      	add	r0, sp, #8
 80027c2:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
 80027c4:	f501 7170 	add.w	r1, r1, #960	; 0x3c0
 80027c8:	f01e ff0d 	bl	80215e6 <strcpy>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80027cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80027d0:	f017 fb86 	bl	8019ee0 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	2332      	movs	r3, #50	; 0x32
 80027da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80027de:	9100      	str	r1, [sp, #0]
 80027e0:	20c8      	movs	r0, #200	; 0xc8
 80027e2:	210a      	movs	r1, #10
 80027e4:	f017 fd4c 	bl	801a280 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 80027e8:	f017 fb72 	bl	8019ed0 <UTIL_LCD_GetFont>
 80027ec:	2301      	movs	r3, #1
 80027ee:	88c1      	ldrh	r1, [r0, #6]
 80027f0:	2000      	movs	r0, #0
 80027f2:	4a97      	ldr	r2, [pc, #604]	; (8002a50 <OnBoardValidInit+0x29c>)
 80027f4:	f017 fc5c 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 80027f8:	f017 fb6a 	bl	8019ed0 <UTIL_LCD_GetFont>
 80027fc:	88c1      	ldrh	r1, [r0, #6]
 80027fe:	2303      	movs	r3, #3
 8002800:	4a94      	ldr	r2, [pc, #592]	; (8002a54 <OnBoardValidInit+0x2a0>)
 8002802:	0089      	lsls	r1, r1, #2
 8002804:	200f      	movs	r0, #15
 8002806:	f017 fc53 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)msg, LEFT_MODE);
 800280a:	f017 fb61 	bl	8019ed0 <UTIL_LCD_GetFont>
 800280e:	88c1      	ldrh	r1, [r0, #6]
 8002810:	aa02      	add	r2, sp, #8
 8002812:	2303      	movs	r3, #3
 8002814:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002818:	200f      	movs	r0, #15
 800281a:	f017 fc49 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 800281e:	f017 fb57 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002822:	88c1      	ldrh	r1, [r0, #6]
 8002824:	2303      	movs	r3, #3
 8002826:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <OnBoardValidInit+0x2a4>)
 8002828:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800282c:	200f      	movs	r0, #15
 800282e:	0049      	lsls	r1, r1, #1
 8002830:	f017 fc3e 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 8002834:	f017 fb4c 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002838:	88c1      	ldrh	r1, [r0, #6]
 800283a:	2303      	movs	r3, #3
 800283c:	4a87      	ldr	r2, [pc, #540]	; (8002a5c <OnBoardValidInit+0x2a8>)
 800283e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002842:	200f      	movs	r0, #15
 8002844:	f017 fc34 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 8002848:	f017 fb42 	bl	8019ed0 <UTIL_LCD_GetFont>
 800284c:	2303      	movs	r3, #3
 800284e:	88c1      	ldrh	r1, [r0, #6]
 8002850:	200f      	movs	r0, #15
 8002852:	4a83      	ldr	r2, [pc, #524]	; (8002a60 <OnBoardValidInit+0x2ac>)
 8002854:	4099      	lsls	r1, r3
 8002856:	f017 fc2b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 800285a:	f017 fb39 	bl	8019ed0 <UTIL_LCD_GetFont>
 800285e:	88c1      	ldrh	r1, [r0, #6]
 8002860:	2303      	movs	r3, #3
 8002862:	4a80      	ldr	r2, [pc, #512]	; (8002a64 <OnBoardValidInit+0x2b0>)
 8002864:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002868:	200f      	movs	r0, #15
 800286a:	f017 fc21 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 800286e:	f017 fb2f 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002872:	88c1      	ldrh	r1, [r0, #6]
 8002874:	2303      	movs	r3, #3
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <OnBoardValidInit+0x2b4>)
 8002878:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800287c:	200f      	movs	r0, #15
 800287e:	0089      	lsls	r1, r1, #2
 8002880:	f017 fc16 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 8002884:	f017 fb24 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002888:	88c1      	ldrh	r1, [r0, #6]
 800288a:	2303      	movs	r3, #3
 800288c:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <OnBoardValidInit+0x2b8>)
 800288e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002892:	200f      	movs	r0, #15
 8002894:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002898:	f017 fc0a 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800289c:	6e70      	ldr	r0, [r6, #100]	; 0x64
 800289e:	f7ff f80d 	bl	80018bc <DISPLAY_Refresh>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 80028a2:	e002      	b.n	80028aa <OnBoardValidInit+0xf6>
 80028a4:	f005 fe32 	bl	800850c <BSP_PB_GetState>
 80028a8:	b918      	cbnz	r0, 80028b2 <OnBoardValidInit+0xfe>
 80028aa:	f8d5 0aa0 	ldr.w	r0, [r5, #2720]	; 0xaa0
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d0f8      	beq.n	80028a4 <OnBoardValidInit+0xf0>
  BSP_CAMERA_DeInit(0);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f006 fb80 	bl	8008fb8 <BSP_CAMERA_DeInit>
  sd_error = BSP_SD_Init(0);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f007 fcff 	bl	800a2bc <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 80028be:	f010 0fff 	tst.w	r0, #255	; 0xff
 80028c2:	d011      	beq.n	80028e8 <OnBoardValidInit+0x134>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80028c4:	f017 fb04 	bl	8019ed0 <UTIL_LCD_GetFont>
 80028c8:	88c1      	ldrh	r1, [r0, #6]
 80028ca:	2301      	movs	r3, #1
 80028cc:	4a68      	ldr	r2, [pc, #416]	; (8002a70 <OnBoardValidInit+0x2bc>)
 80028ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80028d2:	2000      	movs	r0, #0
 80028d4:	4099      	lsls	r1, r3
 80028d6:	f017 fbeb 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80028da:	6e70      	ldr	r0, [r6, #100]	; 0x64
 80028dc:	f7fe ffee 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80028e0:	2002      	movs	r0, #2
 80028e2:	f005 fd99 	bl	8008418 <BSP_LED_On>
    while (1)
 80028e6:	e7fe      	b.n	80028e6 <OnBoardValidInit+0x132>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80028e8:	a902      	add	r1, sp, #8
 80028ea:	4862      	ldr	r0, [pc, #392]	; (8002a74 <OnBoardValidInit+0x2c0>)
 80028ec:	f015 f8fc 	bl	8017ae8 <FATFS_LinkDriver>
 80028f0:	4602      	mov	r2, r0
 80028f2:	b118      	cbz	r0, 80028fc <OnBoardValidInit+0x148>
    BSP_LED_On(LED_RED);
 80028f4:	2002      	movs	r0, #2
 80028f6:	f005 fd8f 	bl	8008418 <BSP_LED_On>
    while (1);
 80028fa:	e7fe      	b.n	80028fa <OnBoardValidInit+0x146>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80028fc:	a902      	add	r1, sp, #8
 80028fe:	485e      	ldr	r0, [pc, #376]	; (8002a78 <OnBoardValidInit+0x2c4>)
 8002900:	f013 fb0c 	bl	8015f1c <f_mount>
 8002904:	4607      	mov	r7, r0
 8002906:	bb08      	cbnz	r0, 800294c <OnBoardValidInit+0x198>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 8002908:	f505 7a70 	add.w	sl, r5, #960	; 0x3c0
 800290c:	f106 0b64 	add.w	fp, r6, #100	; 0x64
 8002910:	a802      	add	r0, sp, #8
 8002912:	4651      	mov	r1, sl
 8002914:	f01e fe67 	bl	80215e6 <strcpy>
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8002918:	4659      	mov	r1, fp
 800291a:	a802      	add	r0, sp, #8
 800291c:	f7ff f91c 	bl	8001b58 <count_dir.isra.0>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002920:	2812      	cmp	r0, #18
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8002922:	4681      	mov	r9, r0
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002924:	d016      	beq.n	8002954 <OnBoardValidInit+0x1a0>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002926:	f017 fad3 	bl	8019ed0 <UTIL_LCD_GetFont>
 800292a:	4602      	mov	r2, r0
 800292c:	2301      	movs	r3, #1
 800292e:	4638      	mov	r0, r7
 8002930:	88d1      	ldrh	r1, [r2, #6]
 8002932:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <OnBoardValidInit+0x2c8>)
 8002934:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002938:	4099      	lsls	r1, r3
 800293a:	f017 fbb9 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800293e:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002940:	f7fe ffbc 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002944:	2002      	movs	r0, #2
 8002946:	f005 fd67 	bl	8008418 <BSP_LED_On>
    while (1)
 800294a:	e7fe      	b.n	800294a <OnBoardValidInit+0x196>
    BSP_LED_On(LED_RED);
 800294c:	2002      	movs	r0, #2
 800294e:	f005 fd63 	bl	8008418 <BSP_LED_On>
    while (1);
 8002952:	e7fe      	b.n	8002952 <OnBoardValidInit+0x19e>
  BSP_LED_On(LED_GREEN);
 8002954:	4638      	mov	r0, r7
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002956:	4c4a      	ldr	r4, [pc, #296]	; (8002a80 <OnBoardValidInit+0x2cc>)
  BSP_LED_On(LED_GREEN);
 8002958:	f005 fd5e 	bl	8008418 <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 800295c:	f8df c134 	ldr.w	ip, [pc, #308]	; 8002a94 <OnBoardValidInit+0x2e0>
  DIR *dir = &Test_Context_Ptr->ValidationContext.dataset_dir;
 8002960:	f505 7892 	add.w	r8, r5, #292	; 0x124
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002964:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800296e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8002972:	c407      	stmia	r4!, {r0, r1, r2}
 8002974:	f824 3b02 	strh.w	r3, [r4], #2
 8002978:	4621      	mov	r1, r4
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 800297a:	465b      	mov	r3, fp
 800297c:	220a      	movs	r2, #10
  sprintf(tmp_msg, "List of missclassified files:\n");
 800297e:	f801 c91e 	strb.w	ip, [r1], #-30
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002982:	4840      	ldr	r0, [pc, #256]	; (8002a84 <OnBoardValidInit+0x2d0>)
 8002984:	f7ff f92c 	bl	8001be0 <write_txt.isra.0>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002988:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800298c:	f017 faa8 	bl	8019ee0 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 8002990:	483d      	ldr	r0, [pc, #244]	; (8002a88 <OnBoardValidInit+0x2d4>)
 8002992:	f017 fa95 	bl	8019ec0 <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 8002996:	464a      	mov	r2, r9
 8002998:	493c      	ldr	r1, [pc, #240]	; (8002a8c <OnBoardValidInit+0x2d8>)
 800299a:	f1a4 001e 	sub.w	r0, r4, #30
 800299e:	f01e fdf9 	bl	8021594 <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 80029a2:	f017 fa95 	bl	8019ed0 <UTIL_LCD_GetFont>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f1a4 021e 	sub.w	r2, r4, #30
 80029ac:	4638      	mov	r0, r7
 80029ae:	88d9      	ldrh	r1, [r3, #6]
 80029b0:	2301      	movs	r3, #1
 80029b2:	f017 fb7d 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  f_opendir(dir, valid_dir_path);
 80029b6:	a902      	add	r1, sp, #8
 80029b8:	4640      	mov	r0, r8
 80029ba:	f014 fa7d 	bl	8016eb8 <f_opendir>
  res = f_readdir(dir, &Test_Context_Ptr->ValidationContext.fno);
 80029be:	4640      	mov	r0, r8
 80029c0:	f505 71ac 	add.w	r1, r5, #344	; 0x158
 80029c4:	f014 fb7e 	bl	80170c4 <f_readdir>
  if (res != FR_OK)
 80029c8:	bb40      	cbnz	r0, 8002a1c <OnBoardValidInit+0x268>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80029ca:	4604      	mov	r4, r0
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80029cc:	f505 78b7 	add.w	r8, r5, #366	; 0x16e
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80029d0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002a98 <OnBoardValidInit+0x2e4>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 80029d4:	f859 1b04 	ldr.w	r1, [r9], #4
 80029d8:	4640      	mov	r0, r8
 80029da:	f7fd fc81 	bl	80002e0 <strcmp>
 80029de:	4607      	mov	r7, r0
 80029e0:	b1e8      	cbz	r0, 8002a1e <OnBoardValidInit+0x26a>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80029e2:	3401      	adds	r4, #1
 80029e4:	2c12      	cmp	r4, #18
 80029e6:	d1f5      	bne.n	80029d4 <OnBoardValidInit+0x220>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 80029ec:	4642      	mov	r2, r8
 80029ee:	4928      	ldr	r1, [pc, #160]	; (8002a90 <OnBoardValidInit+0x2dc>)
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80029f0:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 80029f4:	4822      	ldr	r0, [pc, #136]	; (8002a80 <OnBoardValidInit+0x2cc>)
 80029f6:	f01e fdcd 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 80029fa:	f017 fa69 	bl	8019ed0 <UTIL_LCD_GetFont>
 80029fe:	88c1      	ldrh	r1, [r0, #6]
 8002a00:	2301      	movs	r3, #1
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <OnBoardValidInit+0x2cc>)
 8002a04:	2000      	movs	r0, #0
 8002a06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002a0a:	f017 fb51 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002a0e:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002a10:	f7fe ff54 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002a14:	2002      	movs	r0, #2
 8002a16:	f005 fcff 	bl	8008418 <BSP_LED_On>
    while (1)
 8002a1a:	e7fe      	b.n	8002a1a <OnBoardValidInit+0x266>
    while (1);
 8002a1c:	e7fe      	b.n	8002a1c <OnBoardValidInit+0x268>
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 8002a1e:	f505 6680 	add.w	r6, r5, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002a22:	4651      	mov	r1, sl
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002a24:	f8c5 43bc 	str.w	r4, [r5, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002a28:	4630      	mov	r0, r6
 8002a2a:	f01e fdd3 	bl	80215d4 <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002a2e:	232f      	movs	r3, #47	; 0x2f
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002a30:	4641      	mov	r1, r8
 8002a32:	3001      	adds	r0, #1
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002a34:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002a38:	f01e fdd5 	bl	80215e6 <strcpy>
  res = f_opendir(&Test_Context_Ptr->ValidationContext.class_dir, Test_Context_Ptr->ValidationContext.tmp_class_path);
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	f505 701c 	add.w	r0, r5, #624	; 0x270
 8002a42:	f014 fa39 	bl	8016eb8 <f_opendir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 8002a46:	f8c5 7440 	str.w	r7, [r5, #1088]	; 0x440
}
 8002a4a:	b013      	add	sp, #76	; 0x4c
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a50:	08024364 	.word	0x08024364
 8002a54:	08024378 	.word	0x08024378
 8002a58:	080243a8 	.word	0x080243a8
 8002a5c:	080243c4 	.word	0x080243c4
 8002a60:	080243f0 	.word	0x080243f0
 8002a64:	0802441c 	.word	0x0802441c
 8002a68:	08024424 	.word	0x08024424
 8002a6c:	08024444 	.word	0x08024444
 8002a70:	080242c4 	.word	0x080242c4
 8002a74:	08045d64 	.word	0x08045d64
 8002a78:	24003ce0 	.word	0x24003ce0
 8002a7c:	08024334 	.word	0x08024334
 8002a80:	24004260 	.word	0x24004260
 8002a84:	08024494 	.word	0x08024494
 8002a88:	24003040 	.word	0x24003040
 8002a8c:	080244a8 	.word	0x080244a8
 8002a90:	080244bc 	.word	0x080244bc
 8002a94:	08024474 	.word	0x08024474
 8002a98:	24000004 	.word	0x24000004

08002a9c <FrameCaptureInit>:
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002a9e:	f04f 35ff 	mov.w	r5, #4294967295
{
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002aa6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002aaa:	f8d4 6b80 	ldr.w	r6, [r4, #2944]	; 0xb80
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002aae:	f017 fa17 	bl	8019ee0 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002ab2:	2332      	movs	r3, #50	; 0x32
 8002ab4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002ab8:	210a      	movs	r1, #10
 8002aba:	20c8      	movs	r0, #200	; 0xc8
 8002abc:	9500      	str	r5, [sp, #0]
 8002abe:	f017 fbdf 	bl	801a280 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 8002ac2:	f017 fa05 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	88c1      	ldrh	r1, [r0, #6]
 8002aca:	2000      	movs	r0, #0
 8002acc:	4a92      	ldr	r2, [pc, #584]	; (8002d18 <FrameCaptureInit+0x27c>)
 8002ace:	f017 faef 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8002ad2:	f017 f9fd 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002ad6:	88c1      	ldrh	r1, [r0, #6]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4a90      	ldr	r2, [pc, #576]	; (8002d1c <FrameCaptureInit+0x280>)
 8002adc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f017 fae5 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 8002ae6:	f017 f9f3 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002aea:	88c1      	ldrh	r1, [r0, #6]
 8002aec:	2301      	movs	r3, #1
 8002aee:	4a8c      	ldr	r2, [pc, #560]	; (8002d20 <FrameCaptureInit+0x284>)
 8002af0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002af4:	2000      	movs	r0, #0
 8002af6:	4099      	lsls	r1, r3
 8002af8:	f017 fada 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8002afc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002b00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002b04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b08:	4608      	mov	r0, r1
 8002b0a:	9500      	str	r5, [sp, #0]
 8002b0c:	f017 fb20 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002b10:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002b14:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002b18:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002b1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b20:	9500      	str	r5, [sp, #0]
 8002b22:	f017 fb15 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002b26:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b2a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002b2e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002b32:	461a      	mov	r2, r3
 8002b34:	9500      	str	r5, [sp, #0]
 8002b36:	f017 fb0b 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002b3a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002b3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002b42:	9500      	str	r5, [sp, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4608      	mov	r0, r1
 8002b48:	f017 fb02 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002b4c:	f017 f9c0 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002b50:	2301      	movs	r3, #1
 8002b52:	88c1      	ldrh	r1, [r0, #6]
 8002b54:	2000      	movs	r0, #0
 8002b56:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <FrameCaptureInit+0x288>)
 8002b58:	4099      	lsls	r1, r3
 8002b5a:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002b5e:	f017 faa7 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 8002b62:	f017 f9b5 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002b66:	88c1      	ldrh	r1, [r0, #6]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	4a6f      	ldr	r2, [pc, #444]	; (8002d28 <FrameCaptureInit+0x28c>)
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002b72:	f017 fa9d 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002b76:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002b78:	f7fe fea0 	bl	80018bc <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002b7c:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04a      	beq.n	8002c1a <FrameCaptureInit+0x17e>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 8002b84:	f894 3aac 	ldrb.w	r3, [r4, #2732]	; 0xaac
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <FrameCaptureInit+0x178>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d041      	beq.n	8002c14 <FrameCaptureInit+0x178>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002b90:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002b92:	220a      	movs	r2, #10
 8002b94:	4965      	ldr	r1, [pc, #404]	; (8002d2c <FrameCaptureInit+0x290>)
 8002b96:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002b9a:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002b9e:	f00e fda9 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d172      	bne.n	8002c8c <FrameCaptureInit+0x1f0>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002ba6:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <FrameCaptureInit+0x294>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002ba8:	f604 356c 	addw	r5, r4, #2924	; 0xb6c
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002bac:	f8c4 3b6c 	str.w	r3, [r4, #2924]	; 0xb6c
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f00d fba1 	bl	80102f8 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	f00d fb62 	bl	8010280 <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8002bbc:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f00d fbb3 	bl	801032c <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8002bc6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002bca:	495a      	ldr	r1, [pc, #360]	; (8002d34 <FrameCaptureInit+0x298>)
 8002bcc:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8002bd0:	f01e fce0 	bl	8021594 <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f007 fb71 	bl	800a2bc <BSP_SD_Init>
 8002bda:	b948      	cbnz	r0, 8002bf0 <FrameCaptureInit+0x154>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002bdc:	4856      	ldr	r0, [pc, #344]	; (8002d38 <FrameCaptureInit+0x29c>)
 8002bde:	a903      	add	r1, sp, #12
 8002be0:	f014 ff82 	bl	8017ae8 <FATFS_LinkDriver>
 8002be4:	4602      	mov	r2, r0
 8002be6:	b398      	cbz	r0, 8002c50 <FrameCaptureInit+0x1b4>
    BSP_LED_On(LED_RED);
 8002be8:	2002      	movs	r0, #2
 8002bea:	f005 fc15 	bl	8008418 <BSP_LED_On>
    while (1);
 8002bee:	e7fe      	b.n	8002bee <FrameCaptureInit+0x152>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002bf0:	f017 f96e 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002bf4:	88c1      	ldrh	r1, [r0, #6]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <FrameCaptureInit+0x2a0>)
 8002bfa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002bfe:	2000      	movs	r0, #0
 8002c00:	4099      	lsls	r1, r3
 8002c02:	f017 fa55 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002c06:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002c08:	f7fe fe58 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f005 fc03 	bl	8008418 <BSP_LED_On>
    while (1);
 8002c12:	e7fe      	b.n	8002c12 <FrameCaptureInit+0x176>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002c14:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002c18:	e7ba      	b.n	8002b90 <FrameCaptureInit+0xf4>
    HAL_Delay(200);
 8002c1a:	20c8      	movs	r0, #200	; 0xc8
 8002c1c:	f007 fc9c 	bl	800a558 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002c20:	2100      	movs	r1, #0
 8002c22:	4608      	mov	r0, r1
 8002c24:	f005 fd16 	bl	8008654 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002c28:	f010 0ff7 	tst.w	r0, #247	; 0xf7
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002c2c:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002c2e:	d0f7      	beq.n	8002c20 <FrameCaptureInit+0x184>
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d0f5      	beq.n	8002c20 <FrameCaptureInit+0x184>
 8002c34:	f1a3 0201 	sub.w	r2, r3, #1
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	0952      	lsrs	r2, r2, #5
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	d1ee      	bne.n	8002c20 <FrameCaptureInit+0x184>
    switch (joy_state)
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d025      	beq.n	8002c92 <FrameCaptureInit+0x1f6>
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d1ad      	bne.n	8002ba6 <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_RAW;
 8002c4a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
      break;
 8002c4e:	e7aa      	b.n	8002ba6 <FrameCaptureInit+0x10a>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002c50:	a903      	add	r1, sp, #12
 8002c52:	483b      	ldr	r0, [pc, #236]	; (8002d40 <FrameCaptureInit+0x2a4>)
 8002c54:	f013 f962 	bl	8015f1c <f_mount>
 8002c58:	4605      	mov	r5, r0
 8002c5a:	b9f0      	cbnz	r0, 8002c9a <FrameCaptureInit+0x1fe>
  char *capture_session_dir_path = Test_Context_Ptr->CaptureContext.capture_folder_name;
 8002c5c:	f104 07de 	add.w	r7, r4, #222	; 0xde
  sprintf(capture_session_dir_path, "/Camera_Capture/CAM_CAPTURE_SESS_%X", capture_session_id);
 8002c60:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002c64:	4937      	ldr	r1, [pc, #220]	; (8002d44 <FrameCaptureInit+0x2a8>)
 8002c66:	4638      	mov	r0, r7
 8002c68:	f01e fc94 	bl	8021594 <siprintf>
  res = f_mkdir(path);
 8002c6c:	4836      	ldr	r0, [pc, #216]	; (8002d48 <FrameCaptureInit+0x2ac>)
 8002c6e:	f014 fa95 	bl	801719c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002c72:	f010 04f7 	ands.w	r4, r0, #247	; 0xf7
 8002c76:	d114      	bne.n	8002ca2 <FrameCaptureInit+0x206>
  res = f_mkdir(path);
 8002c78:	4638      	mov	r0, r7
 8002c7a:	f014 fa8f 	bl	801719c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002c7e:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 8002c82:	d12b      	bne.n	8002cdc <FrameCaptureInit+0x240>
  BSP_SD_DeInit(0);
 8002c84:	f007 fadc 	bl	800a240 <BSP_SD_DeInit>
}
 8002c88:	b005      	add	sp, #20
 8002c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002c8c:	f001 ffcc 	bl	8004c28 <Error_Handler>
 8002c90:	e789      	b.n	8002ba6 <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002c98:	e785      	b.n	8002ba6 <FrameCaptureInit+0x10a>
    BSP_LED_On(LED_RED);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f005 fbbc 	bl	8008418 <BSP_LED_On>
    while (1);
 8002ca0:	e7fe      	b.n	8002ca0 <FrameCaptureInit+0x204>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002ca2:	f017 f915 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002ca6:	88c1      	ldrh	r1, [r0, #6]
 8002ca8:	2301      	movs	r3, #1
 8002caa:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <FrameCaptureInit+0x2b0>)
 8002cac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	4099      	lsls	r1, r3
 8002cb4:	f017 f9fc 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002cb8:	f017 f90a 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	88d1      	ldrh	r1, [r2, #6]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <FrameCaptureInit+0x2ac>)
 8002cc6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002cca:	f017 f9f1 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002cce:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002cd0:	f7fe fdf4 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f005 fb9f 	bl	8008418 <BSP_LED_On>
    while (1);
 8002cda:	e7fe      	b.n	8002cda <FrameCaptureInit+0x23e>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002cdc:	f017 f8f8 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002ce0:	88c1      	ldrh	r1, [r0, #6]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <FrameCaptureInit+0x2b0>)
 8002ce6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002cea:	4620      	mov	r0, r4
 8002cec:	4099      	lsls	r1, r3
 8002cee:	f017 f9df 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002cf2:	f017 f8ed 	bl	8019ed0 <UTIL_LCD_GetFont>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	463a      	mov	r2, r7
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	88d9      	ldrh	r1, [r3, #6]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002d04:	f017 f9d4 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002d08:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002d0a:	f7fe fdd7 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f005 fb82 	bl	8008418 <BSP_LED_On>
    while (1);
 8002d14:	e7fe      	b.n	8002d14 <FrameCaptureInit+0x278>
 8002d16:	bf00      	nop
 8002d18:	080244dc 	.word	0x080244dc
 8002d1c:	08024280 	.word	0x08024280
 8002d20:	080244f0 	.word	0x080244f0
 8002d24:	080241cc 	.word	0x080241cc
 8002d28:	080241d0 	.word	0x080241d0
 8002d2c:	24003220 	.word	0x24003220
 8002d30:	48021800 	.word	0x48021800
 8002d34:	0802451c 	.word	0x0802451c
 8002d38:	08045d64 	.word	0x08045d64
 8002d3c:	080242c4 	.word	0x080242c4
 8002d40:	24003ce0 	.word	0x24003ce0
 8002d44:	08024528 	.word	0x08024528
 8002d48:	0802454c 	.word	0x0802454c
 8002d4c:	080242f0 	.word	0x080242f0

08002d50 <UartCmd_Upload_Dump_Whole_Data>:
{
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002d52:	780b      	ldrb	r3, [r1, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d050      	beq.n	8002dfa <UartCmd_Upload_Dump_Whole_Data+0xaa>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d01e      	beq.n	8002d9a <UartCmd_Upload_Dump_Whole_Data+0x4a>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d5c:	4d45      	ldr	r5, [pc, #276]	; (8002e74 <UartCmd_Upload_Dump_Whole_Data+0x124>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d5e:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d62:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d64:	2202      	movs	r2, #2
 8002d66:	4628      	mov	r0, r5
 8002d68:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d6c:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d6e:	f001 feed 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d72:	4629      	mov	r1, r5
 8002d74:	4620      	mov	r0, r4
 8002d76:	2201      	movs	r2, #1
 8002d78:	f00e fc6c 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d170      	bne.n	8002e62 <UartCmd_Upload_Dump_Whole_Data+0x112>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f00e fe91 	bl	8011aa8 <HAL_UART_GetState>
 8002d86:	2820      	cmp	r0, #32
 8002d88:	d1fa      	bne.n	8002d80 <UartCmd_Upload_Dump_Whole_Data+0x30>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	220a      	movs	r2, #10
 8002d8e:	493a      	ldr	r1, [pc, #232]	; (8002e78 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002d90:	f00e fcb0 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d15d      	bne.n	8002e54 <UartCmd_Upload_Dump_Whole_Data+0x104>
}
 8002d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d9a:	4d38      	ldr	r5, [pc, #224]	; (8002e7c <UartCmd_Upload_Dump_Whole_Data+0x12c>)
 8002d9c:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
 8002da0:	2202      	movs	r2, #2
 8002da2:	4937      	ldr	r1, [pc, #220]	; (8002e80 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002da4:	4628      	mov	r0, r5
 8002da6:	4f37      	ldr	r7, [pc, #220]	; (8002e84 <UartCmd_Upload_Dump_Whole_Data+0x134>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002da8:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dac:	f001 fece 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db4:	4629      	mov	r1, r5
 8002db6:	4620      	mov	r0, r4
 8002db8:	f00e fc4c 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002dbc:	b9d0      	cbnz	r0, 8002df4 <UartCmd_Upload_Dump_Whole_Data+0xa4>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f00e fe72 	bl	8011aa8 <HAL_UART_GetState>
 8002dc4:	2820      	cmp	r0, #32
 8002dc6:	d1fa      	bne.n	8002dbe <UartCmd_Upload_Dump_Whole_Data+0x6e>
    for(i=0;i<dma_xfer_num;i++)
 8002dc8:	4435      	add	r5, r6
 8002dca:	42bd      	cmp	r5, r7
 8002dcc:	d1f0      	bne.n	8002db0 <UartCmd_Upload_Dump_Whole_Data+0x60>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002dce:	f248 02f8 	movw	r2, #33016	; 0x80f8
 8002dd2:	492c      	ldr	r1, [pc, #176]	; (8002e84 <UartCmd_Upload_Dump_Whole_Data+0x134>)
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f00e fc3d 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d144      	bne.n	8002e68 <UartCmd_Upload_Dump_Whole_Data+0x118>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dde:	4620      	mov	r0, r4
 8002de0:	f00e fe62 	bl	8011aa8 <HAL_UART_GetState>
 8002de4:	2820      	cmp	r0, #32
 8002de6:	d0d0      	beq.n	8002d8a <UartCmd_Upload_Dump_Whole_Data+0x3a>
 8002de8:	4620      	mov	r0, r4
 8002dea:	f00e fe5d 	bl	8011aa8 <HAL_UART_GetState>
 8002dee:	2820      	cmp	r0, #32
 8002df0:	d1f5      	bne.n	8002dde <UartCmd_Upload_Dump_Whole_Data+0x8e>
 8002df2:	e7ca      	b.n	8002d8a <UartCmd_Upload_Dump_Whole_Data+0x3a>
        Error_Handler();
 8002df4:	f001 ff18 	bl	8004c28 <Error_Handler>
 8002df8:	e7e1      	b.n	8002dbe <UartCmd_Upload_Dump_Whole_Data+0x6e>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dfa:	4d23      	ldr	r5, [pc, #140]	; (8002e88 <UartCmd_Upload_Dump_Whole_Data+0x138>)
 8002dfc:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
 8002e00:	2202      	movs	r2, #2
 8002e02:	491f      	ldr	r1, [pc, #124]	; (8002e80 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002e04:	4628      	mov	r0, r5
 8002e06:	4f21      	ldr	r7, [pc, #132]	; (8002e8c <UartCmd_Upload_Dump_Whole_Data+0x13c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e08:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e0c:	f001 fe9e 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e14:	4629      	mov	r1, r5
 8002e16:	4620      	mov	r0, r4
 8002e18:	f00e fc1c 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002e1c:	b9f0      	cbnz	r0, 8002e5c <UartCmd_Upload_Dump_Whole_Data+0x10c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f00e fe42 	bl	8011aa8 <HAL_UART_GetState>
 8002e24:	2820      	cmp	r0, #32
 8002e26:	d1fa      	bne.n	8002e1e <UartCmd_Upload_Dump_Whole_Data+0xce>
    for(i=0;i<dma_xfer_num;i++)
 8002e28:	4435      	add	r5, r6
 8002e2a:	42af      	cmp	r7, r5
 8002e2c:	d1f0      	bne.n	8002e10 <UartCmd_Upload_Dump_Whole_Data+0xc0>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e2e:	f248 02f8 	movw	r2, #33016	; 0x80f8
 8002e32:	4916      	ldr	r1, [pc, #88]	; (8002e8c <UartCmd_Upload_Dump_Whole_Data+0x13c>)
 8002e34:	4620      	mov	r0, r4
 8002e36:	f00e fc0d 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002e3a:	b9c0      	cbnz	r0, 8002e6e <UartCmd_Upload_Dump_Whole_Data+0x11e>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f00e fe33 	bl	8011aa8 <HAL_UART_GetState>
 8002e42:	2820      	cmp	r0, #32
 8002e44:	d1fa      	bne.n	8002e3c <UartCmd_Upload_Dump_Whole_Data+0xec>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002e46:	4620      	mov	r0, r4
 8002e48:	220a      	movs	r2, #10
 8002e4a:	490b      	ldr	r1, [pc, #44]	; (8002e78 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002e4c:	f00e fc52 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d0a1      	beq.n	8002d98 <UartCmd_Upload_Dump_Whole_Data+0x48>
}
 8002e54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002e58:	f001 bee6 	b.w	8004c28 <Error_Handler>
        Error_Handler();
 8002e5c:	f001 fee4 	bl	8004c28 <Error_Handler>
 8002e60:	e7dd      	b.n	8002e1e <UartCmd_Upload_Dump_Whole_Data+0xce>
      Error_Handler();
 8002e62:	f001 fee1 	bl	8004c28 <Error_Handler>
 8002e66:	e78b      	b.n	8002d80 <UartCmd_Upload_Dump_Whole_Data+0x30>
        Error_Handler();
 8002e68:	f001 fede 	bl	8004c28 <Error_Handler>
 8002e6c:	e7b7      	b.n	8002dde <UartCmd_Upload_Dump_Whole_Data+0x8e>
 8002e6e:	f001 fedb 	bl	8004c28 <Error_Handler>
 8002e72:	e7e3      	b.n	8002e3c <UartCmd_Upload_Dump_Whole_Data+0xec>
 8002e74:	24003240 	.word	0x24003240
 8002e78:	24003220 	.word	0x24003220
 8002e7c:	d0ed6660 	.word	0xd0ed6660
 8002e80:	000f8100 	.word	0x000f8100
 8002e84:	d0fc6651 	.word	0xd0fc6651
 8002e88:	d0dde560 	.word	0xd0dde560
 8002e8c:	d0ece551 	.word	0xd0ece551

08002e90 <TEST_Init>:
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002e94:	2500      	movs	r5, #0
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002e96:	2600      	movs	r6, #0
 8002e98:	2700      	movs	r7, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002e9a:	f04f 0901 	mov.w	r9, #1
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002e9e:	f04f 0a00 	mov.w	sl, #0
 8002ea2:	f04f 0b00 	mov.w	fp, #0
{
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	b091      	sub	sp, #68	; 0x44
 8002eaa:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8002eae:	4629      	mov	r1, r5
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002eb0:	f880 9004 	strb.w	r9, [r0, #4]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002eb4:	f604 28bc 	addw	r8, r4, #2748	; 0xabc
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002eb8:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002ebc:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
  Test_Context_Ptr->CaptureContext.capture_file_format=DATA_FORMAT_RAW;
 8002ec0:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002ec4:	f8c0 50c8 	str.w	r5, [r0, #200]	; 0xc8
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002ec8:	f8c0 5440 	str.w	r5, [r0, #1088]	; 0x440
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002ecc:	e9c0 ab44 	strd	sl, fp, [r0, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002ed0:	e9c0 ab46 	strd	sl, fp, [r0, #280]	; 0x118
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002ed4:	e9c0 6702 	strd	r6, r7, [r0, #8]
  Test_Context_Ptr->CaptureContext.capture_state=0;
 8002ed8:	e9c0 6730 	strd	r6, r7, [r0, #192]	; 0xc0
  for (int i=0; i<AI_NET_OUTPUT_SIZE; i++)
 8002edc:	f500 6089 	add.w	r0, r0, #1096	; 0x448
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002ee0:	f8df a140 	ldr.w	sl, [pc, #320]	; 8003024 <TEST_Init+0x194>
 8002ee4:	f01d fe1e 	bl	8020b24 <memset>
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eec:	2300      	movs	r3, #0
 8002eee:	f504 6e2c 	add.w	lr, r4, #2752	; 0xac0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002ef2:	f8c4 5aa0 	str.w	r5, [r4, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002ef6:	f504 602d 	add.w	r0, r4, #2768	; 0xad0
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002efa:	f884 9aa4 	strb.w	r9, [r4, #2724]	; 0xaa4
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002efe:	f604 2cc8 	addw	ip, r4, #2760	; 0xac8
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002f02:	f8c4 5ab8 	str.w	r5, [r4, #2744]	; 0xab8
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f06:	f604 21d8 	addw	r1, r4, #2776	; 0xad8
  Test_Context_Ptr->NonReg_FirstRun=0;
 8002f0a:	f8c4 5b84 	str.w	r5, [r4, #2948]	; 0xb84
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 8002f0e:	f8c4 5ae0 	str.w	r5, [r4, #2784]	; 0xae0
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002f12:	f8c4 aabc 	str.w	sl, [r4, #2748]	; 0xabc
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f16:	e9ce 2300 	strd	r2, r3, [lr]
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e9cc 6700 	strd	r6, r7, [ip]
 8002f22:	e9c0 2300 	strd	r2, r3, [r0]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f26:	4640      	mov	r0, r8
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f28:	e9c1 6700 	strd	r6, r7, [r1]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f2c:	f00e fe7e 	bl	8011c2c <HAL_UART_Init>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d15c      	bne.n	8002fee <TEST_Init+0x15e>
  char alive_msg[64]="Board ON & UART link OK \n";
 8002f34:	4f32      	ldr	r7, [pc, #200]	; (8003000 <TEST_Init+0x170>)
 8002f36:	466e      	mov	r6, sp
  strcpy((char*)aTxBuffer, alive_msg);
 8002f38:	4d32      	ldr	r5, [pc, #200]	; (8003004 <TEST_Init+0x174>)
  char alive_msg[64]="Board ON & UART link OK \n";
 8002f3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002f3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002f3e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002f42:	c603      	stmia	r6!, {r0, r1}
 8002f44:	8032      	strh	r2, [r6, #0]
  strcpy((char*)aTxBuffer, alive_msg);
 8002f46:	466e      	mov	r6, sp
  char alive_msg[64]="Board ON & UART link OK \n";
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2226      	movs	r2, #38	; 0x26
 8002f4c:	f10d 001a 	add.w	r0, sp, #26
 8002f50:	f01d fde8 	bl	8020b24 <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8002f54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f58:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002f5c:	c503      	stmia	r5!, {r0, r1}
 8002f5e:	4628      	mov	r0, r5
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002f60:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  strcpy((char*)aTxBuffer, alive_msg);
 8002f64:	f820 2918 	strh.w	r2, [r0], #-24
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f001 fdef 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002f6e:	f1a5 0118 	sub.w	r1, r5, #24
 8002f72:	2219      	movs	r2, #25
 8002f74:	4640      	mov	r0, r8
 8002f76:	f00e fb6d 	bl	8011654 <HAL_UART_Transmit_DMA>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d13d      	bne.n	8002ffa <TEST_Init+0x16a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f00e fd92 	bl	8011aa8 <HAL_UART_GetState>
 8002f84:	2820      	cmp	r0, #32
 8002f86:	d1fa      	bne.n	8002f7e <TEST_Init+0xee>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002f88:	4640      	mov	r0, r8
 8002f8a:	220a      	movs	r2, #10
 8002f8c:	491e      	ldr	r1, [pc, #120]	; (8003008 <TEST_Init+0x178>)
 8002f8e:	f00e fbb1 	bl	80116f4 <HAL_UART_Receive_DMA>
 8002f92:	bb78      	cbnz	r0, 8002ff4 <TEST_Init+0x164>
  Test_ComIf_Init(Test_Context_Ptr);
  
  /*Compute the total char size for the array Test_buffer_names[]*/
  for (int i=0; i<APP_BUFF_NUM; i++)
  {
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8002f94:	481d      	ldr	r0, [pc, #116]	; (800300c <TEST_Init+0x17c>)
 8002f96:	f7fd f9ad 	bl	80002f4 <strlen>
 8002f9a:	f8d4 5b88 	ldr.w	r5, [r4, #2952]	; 0xb88
 8002f9e:	4607      	mov	r7, r0
 8002fa0:	481b      	ldr	r0, [pc, #108]	; (8003010 <TEST_Init+0x180>)
 8002fa2:	443d      	add	r5, r7
 8002fa4:	f8c4 5b88 	str.w	r5, [r4, #2952]	; 0xb88
 8002fa8:	f7fd f9a4 	bl	80002f4 <strlen>
 8002fac:	4607      	mov	r7, r0
 8002fae:	4819      	ldr	r0, [pc, #100]	; (8003014 <TEST_Init+0x184>)
 8002fb0:	442f      	add	r7, r5
 8002fb2:	f8c4 7b88 	str.w	r7, [r4, #2952]	; 0xb88
 8002fb6:	f7fd f99d 	bl	80002f4 <strlen>
 8002fba:	4605      	mov	r5, r0
 8002fbc:	4816      	ldr	r0, [pc, #88]	; (8003018 <TEST_Init+0x188>)
 8002fbe:	442f      	add	r7, r5
 8002fc0:	f8c4 7b88 	str.w	r7, [r4, #2952]	; 0xb88
 8002fc4:	f7fd f996 	bl	80002f4 <strlen>
 8002fc8:	4605      	mov	r5, r0
 8002fca:	4814      	ldr	r0, [pc, #80]	; (800301c <TEST_Init+0x18c>)
 8002fcc:	443d      	add	r5, r7
 8002fce:	f8c4 5b88 	str.w	r5, [r4, #2952]	; 0xb88
 8002fd2:	f7fd f98f 	bl	80002f4 <strlen>
 8002fd6:	4603      	mov	r3, r0
  }

  /* Init IPL heap memory for image read/write operations */
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8002fd8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002fdc:	4810      	ldr	r0, [pc, #64]	; (8003020 <TEST_Init+0x190>)
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8002fde:	441d      	add	r5, r3
 8002fe0:	f8c4 5b88 	str.w	r5, [r4, #2952]	; 0xb88
}
 8002fe4:	b011      	add	sp, #68	; 0x44
 8002fe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8002fea:	f014 beaf 	b.w	8017d4c <STM32Ipl_InitLib>
    Error_Handler();
 8002fee:	f001 fe1b 	bl	8004c28 <Error_Handler>
 8002ff2:	e79f      	b.n	8002f34 <TEST_Init+0xa4>
    Error_Handler();
 8002ff4:	f001 fe18 	bl	8004c28 <Error_Handler>
 8002ff8:	e7cc      	b.n	8002f94 <TEST_Init+0x104>
      Error_Handler();
 8002ffa:	f001 fe15 	bl	8004c28 <Error_Handler>
 8002ffe:	e7be      	b.n	8002f7e <TEST_Init+0xee>
 8003000:	08023f80 	.word	0x08023f80
 8003004:	24003240 	.word	0x24003240
 8003008:	24003220 	.word	0x24003220
 800300c:	24000054 	.word	0x24000054
 8003010:	24000074 	.word	0x24000074
 8003014:	24000094 	.word	0x24000094
 8003018:	240000b4 	.word	0x240000b4
 800301c:	240000d4 	.word	0x240000d4
 8003020:	d0aa3000 	.word	0xd0aa3000
 8003024:	40011000 	.word	0x40011000

08003028 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 8003028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 800302c:	f600 25bc 	addw	r5, r0, #2748	; 0xabc
{
 8003030:	4604      	mov	r4, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8003032:	4628      	mov	r0, r5
 8003034:	f00e fd38 	bl	8011aa8 <HAL_UART_GetState>
 8003038:	2820      	cmp	r0, #32
 800303a:	d001      	beq.n	8003040 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 800303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8003040:	f8d4 6aa0 	ldr.w	r6, [r4, #2720]	; 0xaa0
 8003044:	2e00      	cmp	r6, #0
 8003046:	d1f9      	bne.n	800303c <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 8003048:	4f27      	ldr	r7, [pc, #156]	; (80030e8 <TEST_CmdIf_Check+0xc0>)
 800304a:	4601      	mov	r1, r0
 800304c:	2201      	movs	r2, #1
 800304e:	4638      	mov	r0, r7
 8003050:	f001 fd7c 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 8003054:	783b      	ldrb	r3, [r7, #0]
 8003056:	2b18      	cmp	r3, #24
 8003058:	d820      	bhi.n	800309c <TEST_CmdIf_Check+0x74>
      *(aTxBuffer) = CMD_ACK_EVT;
 800305a:	4824      	ldr	r0, [pc, #144]	; (80030ec <TEST_CmdIf_Check+0xc4>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800305c:	2202      	movs	r2, #2
 800305e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
      *(aTxBuffer) = CMD_ACK_EVT;
 8003062:	7006      	strb	r6, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003064:	f001 fd72 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003068:	4820      	ldr	r0, [pc, #128]	; (80030ec <TEST_CmdIf_Check+0xc4>)
 800306a:	2201      	movs	r2, #1
 800306c:	4601      	mov	r1, r0
 800306e:	4628      	mov	r0, r5
 8003070:	f00e faf0 	bl	8011654 <HAL_UART_Transmit_DMA>
 8003074:	bba0      	cbnz	r0, 80030e0 <TEST_CmdIf_Check+0xb8>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003076:	4628      	mov	r0, r5
 8003078:	f00e fd16 	bl	8011aa8 <HAL_UART_GetState>
 800307c:	2820      	cmp	r0, #32
 800307e:	d1fa      	bne.n	8003076 <TEST_CmdIf_Check+0x4e>
      HAL_Delay(500);
 8003080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003084:	f007 fa68 	bl	800a558 <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003088:	783d      	ldrb	r5, [r7, #0]
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <TEST_CmdIf_Check+0xc8>)
 800308c:	4620      	mov	r0, r4
 800308e:	2200      	movs	r2, #0
 8003090:	4918      	ldr	r1, [pc, #96]	; (80030f4 <TEST_CmdIf_Check+0xcc>)
 8003092:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
 8003096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 800309a:	4718      	bx	r3
      *(aTxBuffer) = CMD_NACK_EVT;
 800309c:	4c13      	ldr	r4, [pc, #76]	; (80030ec <TEST_CmdIf_Check+0xc4>)
 800309e:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030a0:	2202      	movs	r2, #2
 80030a2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80030a6:	4620      	mov	r0, r4
      *(aTxBuffer) = CMD_NACK_EVT;
 80030a8:	7026      	strb	r6, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030aa:	f001 fd4f 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80030ae:	4632      	mov	r2, r6
 80030b0:	4621      	mov	r1, r4
 80030b2:	4628      	mov	r0, r5
 80030b4:	f00e face 	bl	8011654 <HAL_UART_Transmit_DMA>
 80030b8:	b978      	cbnz	r0, 80030da <TEST_CmdIf_Check+0xb2>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80030ba:	4628      	mov	r0, r5
 80030bc:	f00e fcf4 	bl	8011aa8 <HAL_UART_GetState>
 80030c0:	2820      	cmp	r0, #32
 80030c2:	d1fa      	bne.n	80030ba <TEST_CmdIf_Check+0x92>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80030c4:	4628      	mov	r0, r5
 80030c6:	220a      	movs	r2, #10
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <TEST_CmdIf_Check+0xc0>)
 80030ca:	f00e fb13 	bl	80116f4 <HAL_UART_Receive_DMA>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d0b4      	beq.n	800303c <TEST_CmdIf_Check+0x14>
}
 80030d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 80030d6:	f001 bda7 	b.w	8004c28 <Error_Handler>
      Error_Handler();
 80030da:	f001 fda5 	bl	8004c28 <Error_Handler>
 80030de:	e7ec      	b.n	80030ba <TEST_CmdIf_Check+0x92>
 80030e0:	f001 fda2 	bl	8004c28 <Error_Handler>
 80030e4:	e7c7      	b.n	8003076 <TEST_CmdIf_Check+0x4e>
 80030e6:	bf00      	nop
 80030e8:	24003220 	.word	0x24003220
 80030ec:	24003240 	.word	0x24003240
 80030f0:	08024844 	.word	0x08024844
 80030f4:	24003221 	.word	0x24003221

080030f8 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 80030f8:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80030fa:	f04f 35ff 	mov.w	r5, #4294967295
{
 80030fe:	b082      	sub	sp, #8
 8003100:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003102:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8003106:	f8d4 6b80 	ldr.w	r6, [r4, #2944]	; 0xb80
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800310a:	f016 fee9 	bl	8019ee0 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800310e:	2332      	movs	r3, #50	; 0x32
 8003110:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003114:	210a      	movs	r1, #10
 8003116:	20c8      	movs	r0, #200	; 0xc8
 8003118:	9500      	str	r5, [sp, #0]
 800311a:	f017 f8b1 	bl	801a280 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 800311e:	f016 fed7 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003122:	2301      	movs	r3, #1
 8003124:	88c1      	ldrh	r1, [r0, #6]
 8003126:	2000      	movs	r0, #0
 8003128:	4a6f      	ldr	r2, [pc, #444]	; (80032e8 <TEST_MainMenu+0x1f0>)
 800312a:	f016 ffc1 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800312e:	f016 fecf 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003132:	88c1      	ldrh	r1, [r0, #6]
 8003134:	2301      	movs	r3, #1
 8003136:	4a6d      	ldr	r2, [pc, #436]	; (80032ec <TEST_MainMenu+0x1f4>)
 8003138:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800313c:	2000      	movs	r0, #0
 800313e:	f016 ffb7 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 8003142:	f016 fec5 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003146:	88c1      	ldrh	r1, [r0, #6]
 8003148:	2301      	movs	r3, #1
 800314a:	4a69      	ldr	r2, [pc, #420]	; (80032f0 <TEST_MainMenu+0x1f8>)
 800314c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003150:	2000      	movs	r0, #0
 8003152:	4099      	lsls	r1, r3
 8003154:	f016 ffac 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8003158:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800315c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003160:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003164:	4608      	mov	r0, r1
 8003166:	9500      	str	r5, [sp, #0]
 8003168:	f016 fff2 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800316c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003170:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003174:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003178:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800317c:	9500      	str	r5, [sp, #0]
 800317e:	f016 ffe7 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8003182:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003186:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800318a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800318e:	461a      	mov	r2, r3
 8003190:	9500      	str	r5, [sp, #0]
 8003192:	f016 ffdd 	bl	801a150 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8003196:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800319a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800319e:	9500      	str	r5, [sp, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4608      	mov	r0, r1
 80031a4:	f016 ffd4 	bl	801a150 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 80031a8:	f016 fe92 	bl	8019ed0 <UTIL_LCD_GetFont>
 80031ac:	2301      	movs	r3, #1
 80031ae:	88c1      	ldrh	r1, [r0, #6]
 80031b0:	2000      	movs	r0, #0
 80031b2:	4a50      	ldr	r2, [pc, #320]	; (80032f4 <TEST_MainMenu+0x1fc>)
 80031b4:	4099      	lsls	r1, r3
 80031b6:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 80031ba:	f016 ff79 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 80031be:	f016 fe87 	bl	8019ed0 <UTIL_LCD_GetFont>
 80031c2:	88c1      	ldrh	r1, [r0, #6]
 80031c4:	2303      	movs	r3, #3
 80031c6:	4a4c      	ldr	r2, [pc, #304]	; (80032f8 <TEST_MainMenu+0x200>)
 80031c8:	1049      	asrs	r1, r1, #1
 80031ca:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80031ce:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80031d2:	f016 ff6d 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 80031d6:	f016 fe7b 	bl	8019ed0 <UTIL_LCD_GetFont>
 80031da:	88c1      	ldrh	r1, [r0, #6]
 80031dc:	2301      	movs	r3, #1
 80031de:	4a47      	ldr	r2, [pc, #284]	; (80032fc <TEST_MainMenu+0x204>)
 80031e0:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 80031e4:	2000      	movs	r0, #0
 80031e6:	f016 ff63 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 80031ea:	f016 fe71 	bl	8019ed0 <UTIL_LCD_GetFont>
 80031ee:	88c1      	ldrh	r1, [r0, #6]
 80031f0:	2303      	movs	r3, #3
 80031f2:	4a43      	ldr	r2, [pc, #268]	; (8003300 <TEST_MainMenu+0x208>)
 80031f4:	1049      	asrs	r1, r1, #1
 80031f6:	2096      	movs	r0, #150	; 0x96
 80031f8:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80031fc:	f016 ff58 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003200:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8003202:	f7fe fb5b 	bl	80018bc <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8003206:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 800320a:	b143      	cbz	r3, 800321e <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 800320c:	f894 3aa4 	ldrb.w	r3, [r4, #2724]	; 0xaa4
 8003210:	442b      	add	r3, r5
 8003212:	2b03      	cmp	r3, #3
 8003214:	d827      	bhi.n	8003266 <TEST_MainMenu+0x16e>
 8003216:	e8df f003 	tbb	[pc, r3]
 800321a:	2f21      	.short	0x2f21
 800321c:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 800321e:	2100      	movs	r1, #0
 8003220:	4608      	mov	r0, r1
 8003222:	f005 fa17 	bl	8008654 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE)
 8003226:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 800322a:	d0f8      	beq.n	800321e <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 800322c:	3b02      	subs	r3, #2
 800322e:	2b0e      	cmp	r3, #14
 8003230:	d80e      	bhi.n	8003250 <TEST_MainMenu+0x158>
 8003232:	e8df f003 	tbb	[pc, r3]
 8003236:	0d43      	.short	0x0d43
 8003238:	0d0d0d37 	.word	0x0d0d0d37
 800323c:	0d0d0d08 	.word	0x0d0d0d08
 8003240:	0d0d0d0d 	.word	0x0d0d0d0d
 8003244:	51          	.byte	0x51
 8003245:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff fc28 	bl	8002a9c <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 800324c:	2304      	movs	r3, #4
 800324e:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 8003250:	20c8      	movs	r0, #200	; 0xc8
  }
}
 8003252:	b002      	add	sp, #8
 8003254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003258:	f007 b97e 	b.w	800a558 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 800325c:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 800325e:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003260:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 8003262:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0
}
 8003266:	b002      	add	sp, #8
 8003268:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 800326a:	4620      	mov	r0, r4
 800326c:	f7ff fc16 	bl	8002a9c <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003270:	2304      	movs	r3, #4
 8003272:	7033      	strb	r3, [r6, #0]
}
 8003274:	b002      	add	sp, #8
 8003276:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff fa9b 	bl	80027b4 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 800327e:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003280:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003282:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003284:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003286:	751a      	strb	r2, [r3, #20]
}
 8003288:	b002      	add	sp, #8
 800328a:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff f8dd 	bl	800244c <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003292:	2303      	movs	r3, #3
 8003294:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003296:	7923      	ldrb	r3, [r4, #4]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d1e4      	bne.n	8003266 <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800329c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800329e:	2201      	movs	r2, #1
 80032a0:	751a      	strb	r2, [r3, #20]
 80032a2:	e7e0      	b.n	8003266 <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 80032a4:	4620      	mov	r0, r4
 80032a6:	f7ff f8d1 	bl	800244c <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 80032aa:	2303      	movs	r3, #3
 80032ac:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 80032ae:	7923      	ldrb	r3, [r4, #4]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d1cd      	bne.n	8003250 <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032b4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80032b6:	2201      	movs	r2, #1
 80032b8:	751a      	strb	r2, [r3, #20]
 80032ba:	e7c9      	b.n	8003250 <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fa79 	bl	80027b4 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 80032c2:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032c4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80032c6:	2201      	movs	r2, #1
    HAL_Delay(200);
 80032c8:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 80032ca:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032cc:	751a      	strb	r2, [r3, #20]
}
 80032ce:	b002      	add	sp, #8
 80032d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032d4:	f007 b940 	b.w	800a558 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032d8:	2301      	movs	r3, #1
    HAL_Delay(200);
 80032da:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032dc:	7033      	strb	r3, [r6, #0]
}
 80032de:	b002      	add	sp, #8
 80032e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032e4:	f007 b938 	b.w	800a558 <HAL_Delay>
 80032e8:	0802455c 	.word	0x0802455c
 80032ec:	08024280 	.word	0x08024280
 80032f0:	0802456c 	.word	0x0802456c
 80032f4:	08024190 	.word	0x08024190
 80032f8:	0802419c 	.word	0x0802419c
 80032fc:	080241ac 	.word	0x080241ac
 8003300:	080241c0 	.word	0x080241c0

08003304 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
  DIR class_dir;
  static FILINFO img_fno;
  image_t tmp_img;
  image_t dum_img;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
 8003306:	4d28      	ldr	r5, [pc, #160]	; (80033a8 <TEST_GetNextDumpInput+0xa4>)
{
 8003308:	b0a7      	sub	sp, #156	; 0x9c
 800330a:	4607      	mov	r7, r0
 800330c:	460e      	mov	r6, r1
  char  class_path[64]=  "/dump_src_image_vga";
 800330e:	ac16      	add	r4, sp, #88	; 0x58
 8003310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003312:	682d      	ldr	r5, [r5, #0]
 8003314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003316:	2100      	movs	r1, #0
 8003318:	222c      	movs	r2, #44	; 0x2c
 800331a:	a81b      	add	r0, sp, #108	; 0x6c
 800331c:	6025      	str	r5, [r4, #0]
 800331e:	f01d fc01 	bl	8020b24 <memset>
  char class_path[64]=  "/dump_src_image_qvga";
#endif
  FRESULT res;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;

  res = f_opendir(&class_dir, class_path);
 8003322:	a916      	add	r1, sp, #88	; 0x58
 8003324:	a809      	add	r0, sp, #36	; 0x24
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003326:	f8d7 5b80 	ldr.w	r5, [r7, #2944]	; 0xb80
  res = f_opendir(&class_dir, class_path);
 800332a:	f013 fdc5 	bl	8016eb8 <f_opendir>
  if (res != FR_OK)
 800332e:	b100      	cbz	r0, 8003332 <TEST_GetNextDumpInput+0x2e>
  {
    while (1);
 8003330:	e7fe      	b.n	8003330 <TEST_GetNextDumpInput+0x2c>
  }

  /* Find next image file in current class directory */
  res = f_readdir(&class_dir, &img_fno);
 8003332:	4c1e      	ldr	r4, [pc, #120]	; (80033ac <TEST_GetNextDumpInput+0xa8>)
 8003334:	a809      	add	r0, sp, #36	; 0x24
 8003336:	4621      	mov	r1, r4
 8003338:	f013 fec4 	bl	80170c4 <f_readdir>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 800333c:	7da3      	ldrb	r3, [r4, #22]
 800333e:	b903      	cbnz	r3, 8003342 <TEST_GetNextDumpInput+0x3e>
  {
    while (1); /* error: end of dir or not a file */
 8003340:	e7fe      	b.n	8003340 <TEST_GetNextDumpInput+0x3c>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 8003342:	7a23      	ldrb	r3, [r4, #8]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	4303      	orrs	r3, r0
 800334a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800334e:	d1f7      	bne.n	8003340 <TEST_GetNextDumpInput+0x3c>
  }

  strcpy(tmp_msg, class_path);
 8003350:	4f17      	ldr	r7, [pc, #92]	; (80033b0 <TEST_GetNextDumpInput+0xac>)
 8003352:	a916      	add	r1, sp, #88	; 0x58
 8003354:	4638      	mov	r0, r7
 8003356:	f01e f93d 	bl	80215d4 <stpcpy>
  strcat(tmp_msg, "/");
 800335a:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 800335c:	f104 0116 	add.w	r1, r4, #22
 8003360:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 8003362:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 8003366:	f01e f93e 	bl	80215e6 <strcpy>

  /* Read the image to DestBuffPtr */
  if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 800336a:	4639      	mov	r1, r7
 800336c:	a801      	add	r0, sp, #4
 800336e:	f015 f881 	bl	8018474 <STM32Ipl_ReadImage>
 8003372:	b100      	cbz	r0, 8003376 <TEST_GetNextDumpInput+0x72>
  {
    while(1);
 8003374:	e7fe      	b.n	8003374 <TEST_GetNextDumpInput+0x70>
  }
  dum_img.data = DestBuffPtr;
  dum_img.w = tmp_img.w;
 8003376:	9b02      	ldr	r3, [sp, #8]
  dum_img.h = tmp_img.h;
  dum_img.bpp = tmp_img.bpp;
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003378:	a905      	add	r1, sp, #20
  dum_img.w = tmp_img.w;
 800337a:	9a03      	ldr	r2, [sp, #12]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 800337c:	a801      	add	r0, sp, #4
  dum_img.w = tmp_img.w;
 800337e:	9306      	str	r3, [sp, #24]
 8003380:	9b01      	ldr	r3, [sp, #4]
  dum_img.data = DestBuffPtr;
 8003382:	9608      	str	r6, [sp, #32]
  dum_img.w = tmp_img.w;
 8003384:	9207      	str	r2, [sp, #28]
 8003386:	9305      	str	r3, [sp, #20]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003388:	f014 fd50 	bl	8017e2c <STM32Ipl_CopyData>
 800338c:	b100      	cbz	r0, 8003390 <TEST_GetNextDumpInput+0x8c>
  {
    while (1); // Invalid dim or format
 800338e:	e7fe      	b.n	800338e <TEST_GetNextDumpInput+0x8a>
  }
  STM32Ipl_ReleaseData(&tmp_img);
 8003390:	a801      	add	r0, sp, #4
 8003392:	f014 fceb 	bl	8017d6c <STM32Ipl_ReleaseData>

  f_closedir(&class_dir);
 8003396:	a809      	add	r0, sp, #36	; 0x24
 8003398:	f013 fe62 	bl	8017060 <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 800339c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800339e:	2201      	movs	r2, #1
 80033a0:	751a      	strb	r2, [r3, #20]
}
 80033a2:	b027      	add	sp, #156	; 0x9c
 80033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a6:	bf00      	nop
 80033a8:	08023f40 	.word	0x08023f40
 80033ac:	24004148 	.word	0x24004148
 80033b0:	24004260 	.word	0x24004260
 80033b4:	00000000 	.word	0x00000000

080033b8 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 80033b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  dir = &TestContext_Ptr->ValidationContext.class_dir;
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80033bc:	f500 7329 	add.w	r3, r0, #676	; 0x2a4
  dir = &TestContext_Ptr->ValidationContext.class_dir;
 80033c0:	f500 761c 	add.w	r6, r0, #624	; 0x270
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033c4:	f8d0 2b80 	ldr.w	r2, [r0, #2944]	; 0xb80
{
 80033c8:	4683      	mov	fp, r0
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80033ca:	4d6c      	ldr	r5, [pc, #432]	; (800357c <TEST_GetNextValidationInput+0x1c4>)
  res = f_readdir(dir, fno); /* Read a directory item */
 80033cc:	4630      	mov	r0, r6
{
 80033ce:	ed2d 8b10 	vpush	{d8-d15}
 80033d2:	f5ad 7d7b 	sub.w	sp, sp, #1004	; 0x3ec
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80033d6:	602b      	str	r3, [r5, #0]
{
 80033d8:	910a      	str	r1, [sp, #40]	; 0x28
  res = f_readdir(dir, fno); /* Read a directory item */
 80033da:	4619      	mov	r1, r3
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80033dc:	9308      	str	r3, [sp, #32]
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033de:	9209      	str	r2, [sp, #36]	; 0x24
  res = f_readdir(dir, fno); /* Read a directory item */
 80033e0:	f013 fe70 	bl	80170c4 <f_readdir>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 80033e4:	b920      	cbnz	r0, 80033f0 <TEST_GetNextValidationInput+0x38>
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	7d9a      	ldrb	r2, [r3, #22]
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	f040 82fe 	bne.w	80039ec <TEST_GetNextValidationInput+0x634>

  } /* End for each file in class directory */
  else
  {
    /*Close class directory*/
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 80033f0:	f50b 7392 	add.w	r3, fp, #292	; 0x124
 80033f4:	4630      	mov	r0, r6
 80033f6:	f50b 77ac 	add.w	r7, fp, #344	; 0x158
    fno = &TestContext_Ptr->ValidationContext.fno;
    res = f_readdir(dir, fno);
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
    {
      /* Find corresponding class index */
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80033fa:	f50b 74b7 	add.w	r4, fp, #366	; 0x16e
 80033fe:	ee08 3a10 	vmov	s16, r3
        while (1)
          ;
      }

      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 8003402:	f50b 7370 	add.w	r3, fp, #960	; 0x3c0
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 8003406:	f50b 6980 	add.w	r9, fp, #1024	; 0x400
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 800340a:	ee08 3a90 	vmov	s17, r3
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800340e:	f013 fe27 	bl	8017060 <f_closedir>
    res = f_readdir(dir, fno);
 8003412:	4639      	mov	r1, r7
 8003414:	ee18 0a10 	vmov	r0, s16
    fno = &TestContext_Ptr->ValidationContext.fno;
 8003418:	602f      	str	r7, [r5, #0]
    res = f_readdir(dir, fno);
 800341a:	f013 fe53 	bl	80170c4 <f_readdir>
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
 800341e:	2800      	cmp	r0, #0
 8003420:	d16f      	bne.n	8003502 <TEST_GetNextValidationInput+0x14a>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	7d9a      	ldrb	r2, [r3, #22]
 8003426:	2a00      	cmp	r2, #0
 8003428:	d06b      	beq.n	8003502 <TEST_GetNextValidationInput+0x14a>
 800342a:	7a1b      	ldrb	r3, [r3, #8]
 800342c:	06da      	lsls	r2, r3, #27
 800342e:	d568      	bpl.n	8003502 <TEST_GetNextValidationInput+0x14a>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003430:	4682      	mov	sl, r0
 8003432:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8003594 <TEST_GetNextValidationInput+0x1dc>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 8003436:	f858 1b04 	ldr.w	r1, [r8], #4
 800343a:	4620      	mov	r0, r4
 800343c:	f7fc ff50 	bl	80002e0 <strcmp>
 8003440:	b1f8      	cbz	r0, 8003482 <TEST_GetNextValidationInput+0xca>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003442:	f10a 0a01 	add.w	sl, sl, #1
 8003446:	f1ba 0f12 	cmp.w	sl, #18
 800344a:	d1f4      	bne.n	8003436 <TEST_GetNextValidationInput+0x7e>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 8003450:	4622      	mov	r2, r4
 8003452:	494b      	ldr	r1, [pc, #300]	; (8003580 <TEST_GetNextValidationInput+0x1c8>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003454:	f8cb 33bc 	str.w	r3, [fp, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 8003458:	484a      	ldr	r0, [pc, #296]	; (8003584 <TEST_GetNextValidationInput+0x1cc>)
 800345a:	f01e f89b 	bl	8021594 <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 800345e:	f016 fd37 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003462:	88c1      	ldrh	r1, [r0, #6]
 8003464:	2301      	movs	r3, #1
 8003466:	4a47      	ldr	r2, [pc, #284]	; (8003584 <TEST_GetNextValidationInput+0x1cc>)
 8003468:	2000      	movs	r0, #0
 800346a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800346e:	f016 fe1f 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003474:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003476:	f7fe fa21 	bl	80018bc <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 800347a:	2002      	movs	r0, #2
 800347c:	f004 ffcc 	bl	8008418 <BSP_LED_On>
        while (1)
 8003480:	e7fe      	b.n	8003480 <TEST_GetNextValidationInput+0xc8>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003482:	f8cb a3bc 	str.w	sl, [fp, #956]	; 0x3bc
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 8003486:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 800348a:	ee18 1a90 	vmov	r1, s17
 800348e:	4648      	mov	r0, r9
 8003490:	f01e f8a0 	bl	80215d4 <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 8003494:	4621      	mov	r1, r4
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 8003496:	f880 a000 	strb.w	sl, [r0]
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 800349a:	3001      	adds	r0, #1
 800349c:	f01e f8a3 	bl	80215e6 <strcpy>

      dir = &TestContext_Ptr->ValidationContext.class_dir;
      path = TestContext_Ptr->ValidationContext.tmp_class_path;
      res = f_opendir(dir, path);
 80034a0:	4649      	mov	r1, r9
 80034a2:	4630      	mov	r0, r6
 80034a4:	f013 fd08 	bl	8016eb8 <f_opendir>
      if (res != FR_OK)
 80034a8:	2800      	cmp	r0, #0
 80034aa:	f040 8336 	bne.w	8003b1a <TEST_GetNextValidationInput+0x762>
      }

      /*Get first file immediately*/
      dir = &TestContext_Ptr->ValidationContext.class_dir;
      fno = &TestContext_Ptr->ValidationContext.img_fno;
      res = f_readdir(dir, fno);
 80034ae:	9b08      	ldr	r3, [sp, #32]
 80034b0:	4630      	mov	r0, r6
 80034b2:	4619      	mov	r1, r3
      fno = &TestContext_Ptr->ValidationContext.img_fno;
 80034b4:	602b      	str	r3, [r5, #0]
      res = f_readdir(dir, fno);
 80034b6:	f013 fe05 	bl	80170c4 <f_readdir>
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d1a9      	bne.n	8003412 <TEST_GetNextValidationInput+0x5a>
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	7d9a      	ldrb	r2, [r3, #22]
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d0a5      	beq.n	8003412 <TEST_GetNextValidationInput+0x5a>
 80034c6:	7a1b      	ldrb	r3, [r3, #8]
 80034c8:	06db      	lsls	r3, r3, #27
 80034ca:	d4a2      	bmi.n	8003412 <TEST_GetNextValidationInput+0x5a>
      {
        BSP_LED_Toggle(LED_BLUE);
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80034cc:	4c2d      	ldr	r4, [pc, #180]	; (8003584 <TEST_GetNextValidationInput+0x1cc>)
        BSP_LED_Toggle(LED_BLUE);
 80034ce:	2003      	movs	r0, #3
 80034d0:	f004 ffc2 	bl	8008458 <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80034d4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80034d8:	f016 fd02 	bl	8019ee0 <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80034dc:	4649      	mov	r1, r9
 80034de:	4620      	mov	r0, r4
 80034e0:	f01e f878 	bl	80215d4 <stpcpy>
        strcat(tmp_msg, "/");
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80034e4:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
        strcat(tmp_msg, "/");
 80034e8:	f880 a000 	strb.w	sl, [r0]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80034ec:	3001      	adds	r0, #1
 80034ee:	f01e f87a 	bl	80215e6 <strcpy>

        /* Read the image to DestBuffPtr */
        if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80034f2:	4621      	mov	r1, r4
 80034f4:	a81e      	add	r0, sp, #120	; 0x78
 80034f6:	f014 ffbd 	bl	8018474 <STM32Ipl_ReadImage>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	f000 831c 	beq.w	8003b38 <TEST_GetNextValidationInput+0x780>
        {
          while(1);
 8003500:	e7fe      	b.n	8003500 <TEST_GetNextValidationInput+0x148>
    }
    else
    {
      /* Program has Looped through all class dirs*/
      /*=>Close the onboard_valid_dataset directory*/
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 8003502:	ee18 0a10 	vmov	r0, s16

      /******Moved here from the postprocess() to avoid going thru the main appli while(1) loop again after the validation is completed******/
      /* End of validation */

      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 8003506:	f04f 34ff 	mov.w	r4, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 800350a:	f013 fda9 	bl	8017060 <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800350e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003512:	f016 fcc5 	bl	8019ea0 <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 8003516:	23e0      	movs	r3, #224	; 0xe0
 8003518:	2282      	movs	r2, #130	; 0x82
 800351a:	2132      	movs	r1, #50	; 0x32
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2000      	movs	r0, #0
 8003520:	9401      	str	r4, [sp, #4]
 8003522:	f006 fb31 	bl	8009b88 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003526:	4620      	mov	r0, r4
 8003528:	f016 fcba 	bl	8019ea0 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 800352c:	f016 fcd0 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003530:	88c1      	ldrh	r1, [r0, #6]
 8003532:	2303      	movs	r3, #3
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <TEST_GetNextValidationInput+0x1d0>)
 8003536:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800353a:	2028      	movs	r0, #40	; 0x28
 800353c:	0049      	lsls	r1, r1, #1
 800353e:	f016 fdb7 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 8003542:	f016 fcc5 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003546:	88c1      	ldrh	r1, [r0, #6]
 8003548:	2303      	movs	r3, #3
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <TEST_GetNextValidationInput+0x1d4>)
 800354c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8003550:	2028      	movs	r0, #40	; 0x28
 8003552:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8003556:	f016 fdab 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 800355a:	f016 fcb9 	bl	8019ed0 <UTIL_LCD_GetFont>
 800355e:	88c1      	ldrh	r1, [r0, #6]
 8003560:	2303      	movs	r3, #3
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <TEST_GetNextValidationInput+0x1d8>)
 8003564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003568:	2028      	movs	r0, #40	; 0x28
 800356a:	0089      	lsls	r1, r1, #2
 800356c:	f016 fda0 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003572:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003574:	f7fe f9a2 	bl	80018bc <DISPLAY_Refresh>

      /* Wait for button input */
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8003578:	e017      	b.n	80035aa <TEST_GetNextValidationInput+0x1f2>
 800357a:	bf00      	nop
 800357c:	24004144 	.word	0x24004144
 8003580:	080244bc 	.word	0x080244bc
 8003584:	24004260 	.word	0x24004260
 8003588:	08024588 	.word	0x08024588
 800358c:	0802459c 	.word	0x0802459c
 8003590:	080245ac 	.word	0x080245ac
 8003594:	24000004 	.word	0x24000004
 8003598:	00000000 	.word	0x00000000
 800359c:	3d638e39 	.word	0x3d638e39
 80035a0:	f004 ffb4 	bl	800850c <BSP_PB_GetState>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	f040 82ad 	bne.w	8003b04 <TEST_GetNextValidationInput+0x74c>
 80035aa:	f8db 0aa0 	ldr.w	r0, [fp, #2720]	; 0xaa0
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d0f6      	beq.n	80035a0 <TEST_GetNextValidationInput+0x1e8>
        ;

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
        HAL_Delay(1000);
 80035b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035b6:	f006 ffcf 	bl	800a558 <HAL_Delay>

      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80035ba:	f20b 4444 	addw	r4, fp, #1092	; 0x444
  uint32_t total_support = 0;
 80035be:	2300      	movs	r3, #0
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80035c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80035c4:	46d8      	mov	r8, fp
  uint32_t total_support = 0;
 80035c6:	461d      	mov	r5, r3
 80035c8:	940a      	str	r4, [sp, #40]	; 0x28
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80035ca:	f016 fc89 	bl	8019ee0 <UTIL_LCD_Clear>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80035ce:	f50d 7cdc 	add.w	ip, sp, #440	; 0x1b8
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80035d2:	46da      	mov	sl, fp
 80035d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80035d8:	46e6      	mov	lr, ip
 80035da:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80035de:	46a1      	mov	r9, r4
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80035e0:	4628      	mov	r0, r5
    float recall = 0.0f;
 80035e2:	ed1f 5a13 	vldr	s10, [pc, #-76]	; 8003598 <TEST_GetNextValidationInput+0x1e0>
 80035e6:	46ac      	mov	ip, r5
 80035e8:	46ab      	mov	fp, r5
    uint32_t false_negatives = 0;
 80035ea:	2400      	movs	r4, #0
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80035ec:	464d      	mov	r5, r9
    uint32_t support = 0;
 80035ee:	4621      	mov	r1, r4
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 80035f0:	4623      	mov	r3, r4
      if (target != pred)
 80035f2:	4283      	cmp	r3, r0
      support += conf_matrix[target][pred];
 80035f4:	f855 2f04 	ldr.w	r2, [r5, #4]!
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 80035f8:	f103 0301 	add.w	r3, r3, #1
        false_negatives += conf_matrix[target][pred];
 80035fc:	bf18      	it	ne
 80035fe:	18a4      	addne	r4, r4, r2
      support += conf_matrix[target][pred];
 8003600:	4411      	add	r1, r2
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 8003602:	2b12      	cmp	r3, #18
 8003604:	d1f5      	bne.n	80035f2 <TEST_GetNextValidationInput+0x23a>
    uint32_t false_positives = 0;
 8003606:	2500      	movs	r5, #0
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 8003608:	4642      	mov	r2, r8
 800360a:	1c47      	adds	r7, r0, #1
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 800360c:	462b      	mov	r3, r5
      if (target != gtruth)
 800360e:	4298      	cmp	r0, r3
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003610:	f103 0301 	add.w	r3, r3, #1
      if (target != gtruth)
 8003614:	f000 820a 	beq.w	8003a2c <TEST_GetNextValidationInput+0x674>
        false_positives += conf_matrix[gtruth][target];
 8003618:	f8d2 6448 	ldr.w	r6, [r2, #1096]	; 0x448
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 800361c:	2b12      	cmp	r3, #18
 800361e:	f102 0248 	add.w	r2, r2, #72	; 0x48
        false_positives += conf_matrix[gtruth][target];
 8003622:	4435      	add	r5, r6
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003624:	d1f3      	bne.n	800360e <TEST_GetNextValidationInput+0x256>
    true_positives = conf_matrix[target][target];
 8003626:	f8da 3448 	ldr.w	r3, [sl, #1096]	; 0x448
    if ((true_positives + false_positives) != 0)
 800362a:	195d      	adds	r5, r3, r5
 800362c:	f000 8209 	beq.w	8003a42 <TEST_GetNextValidationInput+0x68a>
      precision = true_positives / (float)(true_positives + false_positives);
 8003630:	ee07 3a90 	vmov	s15, r3
    if ((true_positives + false_negatives) != 0)
 8003634:	18e4      	adds	r4, r4, r3
      precision = true_positives / (float)(true_positives + false_positives);
 8003636:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800363a:	ee07 5a90 	vmov	s15, r5
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    if ((true_positives + false_negatives) != 0)
 8003646:	f040 8204 	bne.w	8003a52 <TEST_GetNextValidationInput+0x69a>
      precision = true_positives / (float)(true_positives + false_positives);
 800364a:	eeb0 6a47 	vmov.f32	s12, s14
    float recall = 0.0f;
 800364e:	eef0 6a45 	vmov.f32	s13, s10
    if ((recall + precision) != 0.0f)
 8003652:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	d005      	beq.n	8003668 <TEST_GetNextValidationInput+0x2b0>
      f1_score = 2 * (recall * precision) / (recall + precision);
 800365c:	ee66 7a86 	vmul.f32	s15, s13, s12
 8003660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003664:	ee87 7a87 	vdiv.f32	s14, s15, s14
    diagonal_sum += true_positives;
 8003668:	449c      	add	ip, r3
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800366a:	ab80      	add	r3, sp, #512	; 0x200
    report.precisions[target] = precision;
 800366c:	ecae 6a01 	vstmia	lr!, {s12}
    total_support += support;
 8003670:	448b      	add	fp, r1
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003672:	459e      	cmp	lr, r3
 8003674:	4638      	mov	r0, r7
 8003676:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
 800367a:	f108 0804 	add.w	r8, r8, #4
 800367e:	f109 0948 	add.w	r9, r9, #72	; 0x48
    report.recalls[target] = recall;
 8003682:	edce 6a11 	vstr	s13, [lr, #68]	; 0x44
    report.f1_scores[target] = f1_score;
 8003686:	ed8e 7a23 	vstr	s14, [lr, #140]	; 0x8c
    report.supports[target] = support;
 800368a:	f8ce 10d4 	str.w	r1, [lr, #212]	; 0xd4
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800368e:	d1ac      	bne.n	80035ea <TEST_GetNextValidationInput+0x232>
  if (total_support != 0)
 8003690:	465b      	mov	r3, fp
 8003692:	4662      	mov	r2, ip
 8003694:	f8cd b020 	str.w	fp, [sp, #32]
 8003698:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800369c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8228 	beq.w	8003af6 <TEST_GetNextValidationInput+0x73e>
    report.accuracy = diagonal_sum / (float)total_support;
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80036ae:	ee07 2a90 	vmov	s15, r2
 80036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b6:	ee87 faa5 	vdiv.f32	s30, s15, s11
 80036ba:	eeb7 cacf 	vcvt.f64.f32	d12, s30
  report.weighted_avg_f1_score = 0.0f;
 80036be:	ed1f 8a4a 	vldr	s16, [pc, #-296]	; 8003598 <TEST_GetNextValidationInput+0x1e0>
  report.weighted_avg_recall = 0.0f;
 80036c2:	eeb0 da48 	vmov.f32	s26, s16
  report.weighted_avg_precision = 0.0f;
 80036c6:	eeb0 ea48 	vmov.f32	s28, s16
  report.macro_avg_f1_score = 0.0f;
 80036ca:	eeb0 ba48 	vmov.f32	s22, s16
  report.macro_avg_recall = 0.0f;
 80036ce:	eeb0 aa48 	vmov.f32	s20, s16
  report.macro_avg_precision = 0.0f;
 80036d2:	eeb0 9a48 	vmov.f32	s18, s16
    report.macro_avg_precision += (float)report.precisions[target];
 80036d6:	ecbc 6a01 	vldmia	ip!, {s12}
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80036da:	ab80      	add	r3, sp, #512	; 0x200
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80036dc:	eddc 7a35 	vldr	s15, [ip, #212]	; 0xd4
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80036e0:	459c      	cmp	ip, r3
    report.macro_avg_recall += (float)report.recalls[target];
 80036e2:	eddc 6a11 	vldr	s13, [ip, #68]	; 0x44
    report.macro_avg_precision += (float)report.precisions[target];
 80036e6:	ee39 9a06 	vadd.f32	s18, s18, s12
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80036ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80036ee:	ed9c 7a23 	vldr	s14, [ip, #140]	; 0x8c
    report.macro_avg_recall += (float)report.recalls[target];
 80036f2:	ee3a aa26 	vadd.f32	s20, s20, s13
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80036f6:	ee3b ba07 	vadd.f32	s22, s22, s14
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80036fa:	eea6 ea27 	vfma.f32	s28, s12, s15
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 80036fe:	eea6 daa7 	vfma.f32	s26, s13, s15
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003702:	eea7 8a27 	vfma.f32	s16, s14, s15
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003706:	d1e6      	bne.n	80036d6 <TEST_GetNextValidationInput+0x31e>
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370c:	ed1f 7a5d 	vldr	s14, [pc, #-372]	; 800359c <TEST_GetNextValidationInput+0x1e4>
 8003710:	ac1e      	add	r4, sp, #120	; 0x78
  return report;
 8003712:	9b08      	ldr	r3, [sp, #32]
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003714:	ee29 9a07 	vmul.f32	s18, s18, s14
  return report;
 8003718:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800371c:	eec6 7aa5 	vdiv.f32	s15, s13, s11
 8003720:	a96e      	add	r1, sp, #440	; 0x1b8
 8003722:	4620      	mov	r0, r4
 8003724:	93b7      	str	r3, [sp, #732]	; 0x2dc
 8003726:	ed8d fab6 	vstr	s30, [sp, #728]	; 0x2d8
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 800372a:	4625      	mov	r5, r4
  return report;
 800372c:	ed8d 9ab8 	vstr	s18, [sp, #736]	; 0x2e0
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003730:	2602      	movs	r6, #2
 8003732:	f8df 8360 	ldr.w	r8, [pc, #864]	; 8003a94 <TEST_GetNextValidationInput+0x6dc>
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 8003736:	ee2a aa07 	vmul.f32	s20, s20, s14
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800373a:	f8df a360 	ldr.w	sl, [pc, #864]	; 8003a9c <TEST_GetNextValidationInput+0x6e4>
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 800373e:	ee2b ba07 	vmul.f32	s22, s22, s14
  report.weighted_avg_precision /= (float)report.total_support;
 8003742:	f108 0948 	add.w	r9, r8, #72	; 0x48
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003746:	4647      	mov	r7, r8
  return report;
 8003748:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
 800374c:	ed8d baba 	vstr	s22, [sp, #744]	; 0x2e8
  report.weighted_avg_precision /= (float)report.total_support;
 8003750:	ee2e ea27 	vmul.f32	s28, s28, s15
  report.weighted_avg_recall /= (float)report.total_support;
 8003754:	ee2d da27 	vmul.f32	s26, s26, s15
  report.weighted_avg_f1_score /= (float)report.total_support;
 8003758:	ee28 8a27 	vmul.f32	s16, s16, s15
  return report;
 800375c:	ed8d eabb 	vstr	s28, [sp, #748]	; 0x2ec
 8003760:	ed8d dabc 	vstr	s26, [sp, #752]	; 0x2f0
 8003764:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
 8003768:	f01d f9b4 	bl	8020ad4 <memcpy>
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800376c:	f8db 3b80 	ldr.w	r3, [fp, #2944]	; 0xb80
 8003770:	9309      	str	r3, [sp, #36]	; 0x24
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003772:	f016 fbad 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003776:	2303      	movs	r3, #3
 8003778:	4ac3      	ldr	r2, [pc, #780]	; (8003a88 <TEST_GetNextValidationInput+0x6d0>)
 800377a:	2100      	movs	r1, #0
 800377c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003780:	f016 fc96 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003784:	ecb5 7a01 	vldmia	r5!, {s14}
 8003788:	4651      	mov	r1, sl
 800378a:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800378e:	a86e      	add	r0, sp, #440	; 0x1b8
 8003790:	ed95 5a23 	vldr	s10, [r5, #140]	; 0x8c
 8003794:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003798:	ed95 6a11 	vldr	s12, [r5, #68]	; 0x44
 800379c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80037a0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 80037a4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80037a8:	9306      	str	r3, [sp, #24]
 80037aa:	ed8d 5b04 	vstr	d5, [sp, #16]
 80037ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80037b2:	ed8d 7b00 	vstr	d7, [sp]
 80037b6:	f01d feed 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 80037ba:	f016 fb89 	bl	8019ed0 <UTIL_LCD_GetFont>
 80037be:	88c1      	ldrh	r1, [r0, #6]
 80037c0:	2303      	movs	r3, #3
 80037c2:	aa6e      	add	r2, sp, #440	; 0x1b8
 80037c4:	fb06 f101 	mul.w	r1, r6, r1
 80037c8:	2028      	movs	r0, #40	; 0x28
 80037ca:	f016 fc71 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80037ce:	454f      	cmp	r7, r9
 80037d0:	f106 0601 	add.w	r6, r6, #1
 80037d4:	d1d6      	bne.n	8003784 <TEST_GetNextValidationInput+0x3cc>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80037d6:	9f08      	ldr	r7, [sp, #32]
 80037d8:	a86e      	add	r0, sp, #440	; 0x1b8
 80037da:	4aac      	ldr	r2, [pc, #688]	; (8003a8c <TEST_GetNextValidationInput+0x6d4>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 80037dc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80037e0:	49ab      	ldr	r1, [pc, #684]	; (8003a90 <TEST_GetNextValidationInput+0x6d8>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 80037e2:	eeb7 aaca 	vcvt.f64.f32	d10, s20
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80037e6:	9702      	str	r7, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 80037e8:	eeb7 bacb 	vcvt.f64.f32	d11, s22
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 80037ec:	2616      	movs	r6, #22
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 80037ee:	eeb7 eace 	vcvt.f64.f32	d14, s28
 80037f2:	eeb7 dacd 	vcvt.f64.f32	d13, s26
  f_printf(&File, "                       precision recall f1-score support\n");
 80037f6:	4da7      	ldr	r5, [pc, #668]	; (8003a94 <TEST_GetNextValidationInput+0x6dc>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 80037f8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80037fc:	ed8d cb00 	vstr	d12, [sp]
 8003800:	f01d fec8 	bl	8021594 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003804:	f016 fb64 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003808:	88c1      	ldrh	r1, [r0, #6]
 800380a:	2303      	movs	r3, #3
 800380c:	aa6e      	add	r2, sp, #440	; 0x1b8
 800380e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003812:	2028      	movs	r0, #40	; 0x28
 8003814:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003818:	f016 fc4a 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 800381c:	4a9e      	ldr	r2, [pc, #632]	; (8003a98 <TEST_GetNextValidationInput+0x6e0>)
 800381e:	499f      	ldr	r1, [pc, #636]	; (8003a9c <TEST_GetNextValidationInput+0x6e4>)
 8003820:	a86e      	add	r0, sp, #440	; 0x1b8
 8003822:	9706      	str	r7, [sp, #24]
 8003824:	ed8d 9b00 	vstr	d9, [sp]
 8003828:	ed8d ab02 	vstr	d10, [sp, #8]
 800382c:	ed8d bb04 	vstr	d11, [sp, #16]
 8003830:	f01d feb0 	bl	8021594 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003834:	f016 fb4c 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003838:	88c1      	ldrh	r1, [r0, #6]
 800383a:	2303      	movs	r3, #3
 800383c:	aa6e      	add	r2, sp, #440	; 0x1b8
 800383e:	fb06 f101 	mul.w	r1, r6, r1
 8003842:	2028      	movs	r0, #40	; 0x28
 8003844:	f016 fc34 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003848:	4a95      	ldr	r2, [pc, #596]	; (8003aa0 <TEST_GetNextValidationInput+0x6e8>)
 800384a:	4994      	ldr	r1, [pc, #592]	; (8003a9c <TEST_GetNextValidationInput+0x6e4>)
 800384c:	a86e      	add	r0, sp, #440	; 0x1b8
 800384e:	9706      	str	r7, [sp, #24]
 8003850:	ed8d eb00 	vstr	d14, [sp]
 8003854:	ed8d db02 	vstr	d13, [sp, #8]
 8003858:	ed8d 8b04 	vstr	d8, [sp, #16]
 800385c:	f01d fe9a 	bl	8021594 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003860:	f016 fb36 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003864:	88c1      	ldrh	r1, [r0, #6]
 8003866:	aa6e      	add	r2, sp, #440	; 0x1b8
 8003868:	2303      	movs	r3, #3
 800386a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 800386e:	2028      	movs	r0, #40	; 0x28
 8003870:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003874:	4e8b      	ldr	r6, [pc, #556]	; (8003aa4 <TEST_GetNextValidationInput+0x6ec>)
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003876:	f016 fc1b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800387a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800387e:	f7fe f81d 	bl	80018bc <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003882:	220a      	movs	r2, #10
 8003884:	4988      	ldr	r1, [pc, #544]	; (8003aa8 <TEST_GetNextValidationInput+0x6f0>)
 8003886:	a86e      	add	r0, sp, #440	; 0x1b8
 8003888:	f012 fba6 	bl	8015fd8 <f_open>
  f_close(&File);
 800388c:	a86e      	add	r0, sp, #440	; 0x1b8
 800388e:	f013 f8b9 	bl	8016a04 <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003892:	4985      	ldr	r1, [pc, #532]	; (8003aa8 <TEST_GetNextValidationInput+0x6f0>)
 8003894:	2232      	movs	r2, #50	; 0x32
 8003896:	a86e      	add	r0, sp, #440	; 0x1b8
 8003898:	f012 fb9e 	bl	8015fd8 <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 800389c:	a86e      	add	r0, sp, #440	; 0x1b8
 800389e:	4983      	ldr	r1, [pc, #524]	; (8003aac <TEST_GetNextValidationInput+0x6f4>)
 80038a0:	f013 feba 	bl	8017618 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 80038a4:	ecb4 7a01 	vldmia	r4!, {s14}
 80038a8:	4631      	mov	r1, r6
 80038aa:	f855 2f04 	ldr.w	r2, [r5, #4]!
 80038ae:	a80e      	add	r0, sp, #56	; 0x38
 80038b0:	ed94 5a23 	vldr	s10, [r4, #140]	; 0x8c
 80038b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80038b8:	ed94 6a11 	vldr	s12, [r4, #68]	; 0x44
 80038bc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80038c0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80038c4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80038c8:	9306      	str	r3, [sp, #24]
 80038ca:	ed8d 5b04 	vstr	d5, [sp, #16]
 80038ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 80038d2:	ed8d 7b00 	vstr	d7, [sp]
 80038d6:	f01d fe5d 	bl	8021594 <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 80038da:	a80e      	add	r0, sp, #56	; 0x38
 80038dc:	f7fc fd0a 	bl	80002f4 <strlen>
 80038e0:	ab0d      	add	r3, sp, #52	; 0x34
 80038e2:	4602      	mov	r2, r0
 80038e4:	a90e      	add	r1, sp, #56	; 0x38
 80038e6:	a86e      	add	r0, sp, #440	; 0x1b8
 80038e8:	f012 ff2c 	bl	8016744 <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80038ec:	454d      	cmp	r5, r9
 80038ee:	d1d9      	bne.n	80038a4 <TEST_GetNextValidationInput+0x4ec>
  f_printf(&File, "\n");
 80038f0:	496f      	ldr	r1, [pc, #444]	; (8003ab0 <TEST_GetNextValidationInput+0x6f8>)
 80038f2:	a86e      	add	r0, sp, #440	; 0x1b8
 80038f4:	f013 fe90 	bl	8017618 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80038f8:	9c08      	ldr	r4, [sp, #32]
 80038fa:	4a64      	ldr	r2, [pc, #400]	; (8003a8c <TEST_GetNextValidationInput+0x6d4>)
 80038fc:	a80e      	add	r0, sp, #56	; 0x38
 80038fe:	496d      	ldr	r1, [pc, #436]	; (8003ab4 <TEST_GetNextValidationInput+0x6fc>)
 8003900:	f20b 458c 	addw	r5, fp, #1164	; 0x48c
 8003904:	9402      	str	r4, [sp, #8]
  f_printf(&File, ",Predicted\n");
 8003906:	2701      	movs	r7, #1
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003908:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8003ad0 <TEST_GetNextValidationInput+0x718>
      f_printf(&File, "%d,", value);
 800390c:	4e6a      	ldr	r6, [pc, #424]	; (8003ab8 <TEST_GetNextValidationInput+0x700>)
    f_printf(&File, "\n");
 800390e:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8003ab0 <TEST_GetNextValidationInput+0x6f8>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003912:	ed8d cb00 	vstr	d12, [sp]
 8003916:	f01d fe3d 	bl	8021594 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 800391a:	a80e      	add	r0, sp, #56	; 0x38
 800391c:	f7fc fcea 	bl	80002f4 <strlen>
 8003920:	ab0d      	add	r3, sp, #52	; 0x34
 8003922:	4602      	mov	r2, r0
 8003924:	a90e      	add	r1, sp, #56	; 0x38
 8003926:	a86e      	add	r0, sp, #440	; 0x1b8
 8003928:	f012 ff0c 	bl	8016744 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 800392c:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <TEST_GetNextValidationInput+0x6e0>)
 800392e:	495d      	ldr	r1, [pc, #372]	; (8003aa4 <TEST_GetNextValidationInput+0x6ec>)
 8003930:	a80e      	add	r0, sp, #56	; 0x38
 8003932:	9406      	str	r4, [sp, #24]
 8003934:	ed8d bb04 	vstr	d11, [sp, #16]
 8003938:	ed8d ab02 	vstr	d10, [sp, #8]
 800393c:	ed8d 9b00 	vstr	d9, [sp]
 8003940:	f01d fe28 	bl	8021594 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003944:	a80e      	add	r0, sp, #56	; 0x38
 8003946:	f7fc fcd5 	bl	80002f4 <strlen>
 800394a:	ab0d      	add	r3, sp, #52	; 0x34
 800394c:	4602      	mov	r2, r0
 800394e:	a90e      	add	r1, sp, #56	; 0x38
 8003950:	a86e      	add	r0, sp, #440	; 0x1b8
 8003952:	f012 fef7 	bl	8016744 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003956:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <TEST_GetNextValidationInput+0x6e8>)
 8003958:	4952      	ldr	r1, [pc, #328]	; (8003aa4 <TEST_GetNextValidationInput+0x6ec>)
 800395a:	a80e      	add	r0, sp, #56	; 0x38
 800395c:	9406      	str	r4, [sp, #24]
 800395e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003962:	ed8d db02 	vstr	d13, [sp, #8]
 8003966:	ed8d eb00 	vstr	d14, [sp]
 800396a:	f01d fe13 	bl	8021594 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 800396e:	a80e      	add	r0, sp, #56	; 0x38
 8003970:	f7fc fcc0 	bl	80002f4 <strlen>
 8003974:	ab0d      	add	r3, sp, #52	; 0x34
 8003976:	4602      	mov	r2, r0
 8003978:	a90e      	add	r1, sp, #56	; 0x38
 800397a:	a86e      	add	r0, sp, #440	; 0x1b8
 800397c:	f012 fee2 	bl	8016744 <f_write>
  f_close(&File);
 8003980:	a86e      	add	r0, sp, #440	; 0x1b8
 8003982:	f013 f83f 	bl	8016a04 <f_close>

      DisplayClassificationReport(TestContext_Ptr, &report);

      WriteClassificationReport(&report, "classification_report.txt");

      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003988:	220a      	movs	r2, #10
 800398a:	494c      	ldr	r1, [pc, #304]	; (8003abc <TEST_GetNextValidationInput+0x704>)
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 800398c:	ed83 fa00 	vstr	s30, [r3]
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003990:	a86e      	add	r0, sp, #440	; 0x1b8
 8003992:	f012 fb21 	bl	8015fd8 <f_open>
  f_close(&File);
 8003996:	a86e      	add	r0, sp, #440	; 0x1b8
 8003998:	f013 f834 	bl	8016a04 <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 800399c:	2232      	movs	r2, #50	; 0x32
 800399e:	4947      	ldr	r1, [pc, #284]	; (8003abc <TEST_GetNextValidationInput+0x704>)
 80039a0:	a86e      	add	r0, sp, #440	; 0x1b8
 80039a2:	f012 fb19 	bl	8015fd8 <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 80039a6:	4946      	ldr	r1, [pc, #280]	; (8003ac0 <TEST_GetNextValidationInput+0x708>)
 80039a8:	a86e      	add	r0, sp, #440	; 0x1b8
 80039aa:	f013 fe35 	bl	8017618 <f_printf>
  f_printf(&File, ",Predicted\n");
 80039ae:	4945      	ldr	r1, [pc, #276]	; (8003ac4 <TEST_GetNextValidationInput+0x70c>)
 80039b0:	a86e      	add	r0, sp, #440	; 0x1b8
 80039b2:	f013 fe31 	bl	8017618 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 80039b6:	f858 2f04 	ldr.w	r2, [r8, #4]!
 80039ba:	4649      	mov	r1, r9
 80039bc:	a86e      	add	r0, sp, #440	; 0x1b8
 80039be:	f1a5 0448 	sub.w	r4, r5, #72	; 0x48
 80039c2:	f013 fe29 	bl	8017618 <f_printf>
      f_printf(&File, "%d,", value);
 80039c6:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80039ca:	4631      	mov	r1, r6
 80039cc:	a86e      	add	r0, sp, #440	; 0x1b8
 80039ce:	f013 fe23 	bl	8017618 <f_printf>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 80039d2:	42ac      	cmp	r4, r5
 80039d4:	d1f7      	bne.n	80039c6 <TEST_GetNextValidationInput+0x60e>
    if (row == NN_OUTPUT_CLASS_NUMBER / 2)
 80039d6:	2f0a      	cmp	r7, #10
 80039d8:	d04d      	beq.n	8003a76 <TEST_GetNextValidationInput+0x6be>
    f_printf(&File, "\n");
 80039da:	4651      	mov	r1, sl
 80039dc:	a86e      	add	r0, sp, #440	; 0x1b8
 80039de:	f013 fe1b 	bl	8017618 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80039e2:	2f12      	cmp	r7, #18
 80039e4:	d078      	beq.n	8003ad8 <TEST_GetNextValidationInput+0x720>
 80039e6:	3701      	adds	r7, #1
 80039e8:	3548      	adds	r5, #72	; 0x48
 80039ea:	e7e4      	b.n	80039b6 <TEST_GetNextValidationInput+0x5fe>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 80039ec:	7a1b      	ldrb	r3, [r3, #8]
 80039ee:	06d9      	lsls	r1, r3, #27
 80039f0:	f53f acfe 	bmi.w	80033f0 <TEST_GetNextValidationInput+0x38>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80039f4:	4c34      	ldr	r4, [pc, #208]	; (8003ac8 <TEST_GetNextValidationInput+0x710>)
    BSP_LED_Toggle(LED_BLUE);
 80039f6:	2003      	movs	r0, #3
 80039f8:	f004 fd2e 	bl	8008458 <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80039fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003a00:	f016 fa6e 	bl	8019ee0 <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003a04:	f50b 6180 	add.w	r1, fp, #1024	; 0x400
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f01d fde3 	bl	80215d4 <stpcpy>
    strcat(tmp_msg, "/");
 8003a0e:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003a10:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 8003a14:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 8003a16:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003a1a:	f01d fde4 	bl	80215e6 <strcpy>
    if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 8003a1e:	4621      	mov	r1, r4
 8003a20:	a81e      	add	r0, sp, #120	; 0x78
 8003a22:	f014 fd27 	bl	8018474 <STM32Ipl_ReadImage>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d078      	beq.n	8003b1c <TEST_GetNextValidationInput+0x764>
      while(1);
 8003a2a:	e7fe      	b.n	8003a2a <TEST_GetNextValidationInput+0x672>
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003a2c:	2f12      	cmp	r7, #18
 8003a2e:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8003a32:	463b      	mov	r3, r7
 8003a34:	f47f adeb 	bne.w	800360e <TEST_GetNextValidationInput+0x256>
    true_positives = conf_matrix[target][target];
 8003a38:	f8da 3448 	ldr.w	r3, [sl, #1096]	; 0x448
    if ((true_positives + false_positives) != 0)
 8003a3c:	195d      	adds	r5, r3, r5
 8003a3e:	f47f adf7 	bne.w	8003630 <TEST_GetNextValidationInput+0x278>
    if ((true_positives + false_negatives) != 0)
 8003a42:	18e4      	adds	r4, r4, r3
 8003a44:	d010      	beq.n	8003a68 <TEST_GetNextValidationInput+0x6b0>
 8003a46:	ee07 3a90 	vmov	s15, r3
    float precision = 0.0f;
 8003a4a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003ad4 <TEST_GetNextValidationInput+0x71c>
 8003a4e:	eef8 5a67 	vcvt.f32.u32	s11, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 8003a52:	ee07 4a90 	vmov	s15, r4
 8003a56:	eeb0 6a47 	vmov.f32	s12, s14
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8003a62:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003a66:	e5f4      	b.n	8003652 <TEST_GetNextValidationInput+0x29a>
    float recall = 0.0f;
 8003a68:	eef0 6a45 	vmov.f32	s13, s10
    float f1_score = 0.0f;
 8003a6c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003ad4 <TEST_GetNextValidationInput+0x71c>
    float precision = 0.0f;
 8003a70:	eeb0 6a45 	vmov.f32	s12, s10
 8003a74:	e5f8      	b.n	8003668 <TEST_GetNextValidationInput+0x2b0>
      f_printf(&File, " Ground truth");
 8003a76:	4915      	ldr	r1, [pc, #84]	; (8003acc <TEST_GetNextValidationInput+0x714>)
 8003a78:	a86e      	add	r0, sp, #440	; 0x1b8
 8003a7a:	f013 fdcd 	bl	8017618 <f_printf>
    f_printf(&File, "\n");
 8003a7e:	4651      	mov	r1, sl
 8003a80:	a86e      	add	r0, sp, #440	; 0x1b8
 8003a82:	f013 fdc9 	bl	8017618 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003a86:	e7ae      	b.n	80039e6 <TEST_GetNextValidationInput+0x62e>
 8003a88:	080245c4 	.word	0x080245c4
 8003a8c:	08024604 	.word	0x08024604
 8003a90:	08024610 	.word	0x08024610
 8003a94:	24000000 	.word	0x24000000
 8003a98:	08024620 	.word	0x08024620
 8003a9c:	080245e8 	.word	0x080245e8
 8003aa0:	0802462c 	.word	0x0802462c
 8003aa4:	08024694 	.word	0x08024694
 8003aa8:	0802463c 	.word	0x0802463c
 8003aac:	08024658 	.word	0x08024658
 8003ab0:	08024774 	.word	0x08024774
 8003ab4:	080246b0 	.word	0x080246b0
 8003ab8:	08024700 	.word	0x08024700
 8003abc:	080246c4 	.word	0x080246c4
 8003ac0:	080246dc 	.word	0x080246dc
 8003ac4:	080246f0 	.word	0x080246f0
 8003ac8:	24004260 	.word	0x24004260
 8003acc:	08024704 	.word	0x08024704
 8003ad0:	080246fc 	.word	0x080246fc
 8003ad4:	00000000 	.word	0x00000000
  f_close(&File);
 8003ad8:	a86e      	add	r0, sp, #440	; 0x1b8
 8003ada:	f012 ff93 	bl	8016a04 <f_close>

      WriteConfusionMatrix(TestContext_Ptr->ValidationContext.valid_conf_matrix, "confusion_matrix.csv");

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003ade:	f8db 3aa0 	ldr.w	r3, [fp, #2720]	; 0xaa0
 8003ae2:	b9ab      	cbnz	r3, 8003b10 <TEST_GetNextValidationInput+0x758>
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f8cb 3440 	str.w	r3, [fp, #1088]	; 0x440
    }
#endif /* OBJECTDETECT */

  }
}
 8003aea:	f50d 7d7b 	add.w	sp, sp, #1004	; 0x3ec
 8003aee:	ecbd 8b10 	vpop	{d8-d15}
 8003af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af6:	ed5f 5a09 	vldr	s11, [pc, #-36]	; 8003ad4 <TEST_GetNextValidationInput+0x71c>
 8003afa:	ed9f cb1b 	vldr	d12, [pc, #108]	; 8003b68 <TEST_GetNextValidationInput+0x7b0>
  report.accuracy = 0.0f;
 8003afe:	eeb0 fa65 	vmov.f32	s30, s11
 8003b02:	e5dc      	b.n	80036be <TEST_GetNextValidationInput+0x306>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003b04:	f8db 3aa0 	ldr.w	r3, [fp, #2720]	; 0xaa0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f43f ad56 	beq.w	80035ba <TEST_GetNextValidationInput+0x202>
 8003b0e:	e550      	b.n	80035b2 <TEST_GetNextValidationInput+0x1fa>
        HAL_Delay(1000);
 8003b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b14:	f006 fd20 	bl	800a558 <HAL_Delay>
 8003b18:	e7e4      	b.n	8003ae4 <TEST_GetNextValidationInput+0x72c>
        while (1);
 8003b1a:	e7fe      	b.n	8003b1a <TEST_GetNextValidationInput+0x762>
    val_img.w = tmp_img.w;
 8003b1c:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    val_img.data = DestBuffPtr;
 8003b20:	990a      	ldr	r1, [sp, #40]	; 0x28
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b22:	a81e      	add	r0, sp, #120	; 0x78
    val_img.w = tmp_img.w;
 8003b24:	e9cd 236e 	strd	r2, r3, [sp, #440]	; 0x1b8
 8003b28:	9b20      	ldr	r3, [sp, #128]	; 0x80
    val_img.data = DestBuffPtr;
 8003b2a:	9171      	str	r1, [sp, #452]	; 0x1c4
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b2c:	a96e      	add	r1, sp, #440	; 0x1b8
    val_img.w = tmp_img.w;
 8003b2e:	9370      	str	r3, [sp, #448]	; 0x1c0
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b30:	f014 f97c 	bl	8017e2c <STM32Ipl_CopyData>
 8003b34:	b170      	cbz	r0, 8003b54 <TEST_GetNextValidationInput+0x79c>
      while (1); /* Invalid dimensions or format */
 8003b36:	e7fe      	b.n	8003b36 <TEST_GetNextValidationInput+0x77e>
        val_img.w = tmp_img.w;
 8003b38:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
        val_img.data = DestBuffPtr;
 8003b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b3e:	a81e      	add	r0, sp, #120	; 0x78
        val_img.w = tmp_img.w;
 8003b40:	e9cd 236e 	strd	r2, r3, [sp, #440]	; 0x1b8
 8003b44:	9b20      	ldr	r3, [sp, #128]	; 0x80
        val_img.data = DestBuffPtr;
 8003b46:	9171      	str	r1, [sp, #452]	; 0x1c4
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b48:	a96e      	add	r1, sp, #440	; 0x1b8
        val_img.w = tmp_img.w;
 8003b4a:	9370      	str	r3, [sp, #448]	; 0x1c0
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b4c:	f014 f96e 	bl	8017e2c <STM32Ipl_CopyData>
 8003b50:	b100      	cbz	r0, 8003b54 <TEST_GetNextValidationInput+0x79c>
          while (1); // Invalid dim or format
 8003b52:	e7fe      	b.n	8003b52 <TEST_GetNextValidationInput+0x79a>
        STM32Ipl_ReleaseData(&tmp_img);
 8003b54:	a81e      	add	r0, sp, #120	; 0x78
 8003b56:	f014 f909 	bl	8017d6c <STM32Ipl_ReleaseData>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	751a      	strb	r2, [r3, #20]
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003b62:	e7c2      	b.n	8003aea <TEST_GetNextValidationInput+0x732>
 8003b64:	f3af 8000 	nop.w
	...

08003b70 <TEST_Run>:
  char msg[70];
  uint8_t sd_error;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b70:	2903      	cmp	r1, #3
{
 8003b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003b7a:	f8d0 5b80 	ldr.w	r5, [r0, #2944]	; 0xb80
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b7e:	d039      	beq.n	8003bf4 <TEST_Run+0x84>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b80:	2904      	cmp	r1, #4
 8003b82:	d002      	beq.n	8003b8a <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 8003b84:	b05a      	add	sp, #360	; 0x168
 8003b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b8a:	f8d0 3b60 	ldr.w	r3, [r0, #2912]	; 0xb60
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d1f8      	bne.n	8003b84 <TEST_Run+0x14>
 8003b92:	f8d0 1b48 	ldr.w	r1, [r0, #2888]	; 0xb48
 8003b96:	2900      	cmp	r1, #0
 8003b98:	d0f4      	beq.n	8003b84 <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 8003b9a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f000 813f 	beq.w	8003e22 <TEST_Run+0x2b2>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d1ed      	bne.n	8003b84 <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003ba8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003baa:	7d13      	ldrb	r3, [r2, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0fc      	beq.n	8003baa <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003bb0:	f8d4 3b68 	ldr.w	r3, [r4, #2920]	; 0xb68
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	f000 829f 	beq.w	80040f8 <TEST_Run+0x588>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8003bba:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	f000 828e 	beq.w	80040e0 <TEST_Run+0x570>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f040 80c4 	bne.w	8003d52 <TEST_Run+0x1e2>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003bca:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003bce:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003bd2:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003bd6:	a834      	add	r0, sp, #208	; 0xd0
 8003bd8:	9100      	str	r1, [sp, #0]
 8003bda:	49ca      	ldr	r1, [pc, #808]	; (8003f04 <TEST_Run+0x394>)
 8003bdc:	f01d fcda 	bl	8021594 <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003be0:	a834      	add	r0, sp, #208	; 0xd0
 8003be2:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8003be6:	f8d4 2b5c 	ldr.w	r2, [r4, #2908]	; 0xb5c
 8003bea:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003bee:	f7fe f839 	bl	8001c64 <write_raw.isra.0>
}
 8003bf2:	e7c7      	b.n	8003b84 <TEST_Run+0x14>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003bf4:	f8d0 3b48 	ldr.w	r3, [r0, #2888]	; 0xb48
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0c3      	beq.n	8003b84 <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8003bfc:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003c00:	2e01      	cmp	r6, #1
 8003c02:	d02f      	beq.n	8003c64 <TEST_Run+0xf4>
 8003c04:	2e02      	cmp	r6, #2
 8003c06:	d1bd      	bne.n	8003b84 <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003c08:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8003c0a:	f8d3 2aa0 	ldr.w	r2, [r3, #2720]	; 0xaa0
 8003c0e:	2a00      	cmp	r2, #0
 8003c10:	f000 8094 	beq.w	8003d3c <TEST_Run+0x1cc>
 8003c14:	f893 3aa6 	ldrb.w	r3, [r3, #2726]	; 0xaa6
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	f040 808f 	bne.w	8003d3c <TEST_Run+0x1cc>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003c1e:	2600      	movs	r6, #0
 8003c20:	e006      	b.n	8003c30 <TEST_Run+0xc0>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003c22:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	6011      	str	r1, [r2, #0]
 8003c2a:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003c2c:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003c2e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003c30:	f8d4 7b4c 	ldr.w	r7, [r4, #2892]	; 0xb4c
 8003c34:	4638      	mov	r0, r7
 8003c36:	f7fc fb5d 	bl	80002f4 <strlen>
 8003c3a:	42b0      	cmp	r0, r6
 8003c3c:	d8f1      	bhi.n	8003c22 <TEST_Run+0xb2>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003c3e:	f8d4 3b5c 	ldr.w	r3, [r4, #2908]	; 0xb5c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d09e      	beq.n	8003b84 <TEST_Run+0x14>
 8003c46:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003c48:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8003c4a:	f8d4 0b48 	ldr.w	r0, [r4, #2888]	; 0xb48
 8003c4e:	680a      	ldr	r2, [r1, #0]
 8003c50:	1c56      	adds	r6, r2, #1
 8003c52:	600e      	str	r6, [r1, #0]
 8003c54:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003c56:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003c58:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003c5a:	f8d4 2b5c 	ldr.w	r2, [r4, #2908]	; 0xb5c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d8f2      	bhi.n	8003c48 <TEST_Run+0xd8>
 8003c62:	e78f      	b.n	8003b84 <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 8003c64:	2000      	movs	r0, #0
 8003c66:	f004 fbe7 	bl	8008438 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f004 fbd4 	bl	8008418 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8003c70:	f016 f92e 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003c74:	2302      	movs	r3, #2
 8003c76:	88c1      	ldrh	r1, [r0, #6]
 8003c78:	2000      	movs	r0, #0
 8003c7a:	4aa3      	ldr	r2, [pc, #652]	; (8003f08 <TEST_Run+0x398>)
 8003c7c:	f016 fa18 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003c80:	ed95 7a04 	vldr	s14, [r5, #16]
 8003c84:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8003f0c <TEST_Run+0x39c>
 8003c88:	a802      	add	r0, sp, #8
 8003c8a:	68ea      	ldr	r2, [r5, #12]
 8003c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c90:	499f      	ldr	r1, [pc, #636]	; (8003f10 <TEST_Run+0x3a0>)
 8003c92:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003c96:	ed8d 7b00 	vstr	d7, [sp]
 8003c9a:	f01d fc7b 	bl	8021594 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003c9e:	f016 f917 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003ca2:	88c1      	ldrh	r1, [r0, #6]
 8003ca4:	4633      	mov	r3, r6
 8003ca6:	aa02      	add	r2, sp, #8
 8003ca8:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003cac:	2000      	movs	r0, #0
 8003cae:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003cb2:	f016 f9fd 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003cb6:	68aa      	ldr	r2, [r5, #8]
 8003cb8:	4996      	ldr	r1, [pc, #600]	; (8003f14 <TEST_Run+0x3a4>)
 8003cba:	a802      	add	r0, sp, #8
 8003cbc:	f01d fc6a 	bl	8021594 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8003cc0:	f016 f906 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003cc4:	88c1      	ldrh	r1, [r0, #6]
 8003cc6:	aa02      	add	r2, sp, #8
 8003cc8:	4633      	mov	r3, r6
 8003cca:	0109      	lsls	r1, r1, #4
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f016 f9ef 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003cd2:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003cd4:	f7fd fdf2 	bl	80018bc <DISPLAY_Refresh>
      HAL_Delay(200);
 8003cd8:	20c8      	movs	r0, #200	; 0xc8
 8003cda:	f006 fc3d 	bl	800a558 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003cde:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003ce0:	7d13      	ldrb	r3, [r2, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0fc      	beq.n	8003ce0 <TEST_Run+0x170>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003ce6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8003ce8:	f8d3 2aa0 	ldr.w	r2, [r3, #2720]	; 0xaa0
 8003cec:	b3a2      	cbz	r2, 8003d58 <TEST_Run+0x1e8>
 8003cee:	f893 2aa6 	ldrb.w	r2, [r3, #2726]	; 0xaa6
 8003cf2:	2a01      	cmp	r2, #1
 8003cf4:	d130      	bne.n	8003d58 <TEST_Run+0x1e8>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	e006      	b.n	8003d08 <TEST_Run+0x198>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003cfa:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003d04:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003d06:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003d08:	f8d4 7b4c 	ldr.w	r7, [r4, #2892]	; 0xb4c
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f7fc faf1 	bl	80002f4 <strlen>
 8003d12:	42b0      	cmp	r0, r6
 8003d14:	d8f1      	bhi.n	8003cfa <TEST_Run+0x18a>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003d16:	f8d4 3b5c 	ldr.w	r3, [r4, #2908]	; 0xb5c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d048      	beq.n	8003db0 <TEST_Run+0x240>
 8003d1e:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003d20:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8003d22:	f8d4 0b48 	ldr.w	r0, [r4, #2888]	; 0xb48
 8003d26:	680a      	ldr	r2, [r1, #0]
 8003d28:	1c56      	adds	r6, r2, #1
 8003d2a:	600e      	str	r6, [r1, #0]
 8003d2c:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003d2e:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003d30:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003d32:	f8d4 2b5c 	ldr.w	r2, [r4, #2908]	; 0xb5c
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d8f2      	bhi.n	8003d20 <TEST_Run+0x1b0>
 8003d3a:	e039      	b.n	8003db0 <TEST_Run+0x240>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003d3c:	f894 3b64 	ldrb.w	r3, [r4, #2916]	; 0xb64
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f000 80c3 	beq.w	8003ecc <TEST_Run+0x35c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80b7 	beq.w	8003eba <TEST_Run+0x34a>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f000 80f1 	beq.w	8003f34 <TEST_Run+0x3c4>
          Error_Handler(); /* DumpFormat no supported */
 8003d52:	f000 ff69 	bl	8004c28 <Error_Handler>
 8003d56:	e715      	b.n	8003b84 <TEST_Run+0x14>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003d58:	791b      	ldrb	r3, [r3, #4]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d12c      	bne.n	8003db8 <TEST_Run+0x248>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003d5e:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003d62:	f104 0754 	add.w	r7, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003d66:	f604 306c 	addw	r0, r4, #2924	; 0xb6c
 8003d6a:	f00c fadf 	bl	801032c <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003d6e:	68a2      	ldr	r2, [r4, #8]
 8003d70:	4969      	ldr	r1, [pc, #420]	; (8003f18 <TEST_Run+0x3a8>)
 8003d72:	f104 0010 	add.w	r0, r4, #16
 8003d76:	f01d fc0d 	bl	8021594 <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8003d80:	4966      	ldr	r1, [pc, #408]	; (8003f1c <TEST_Run+0x3ac>)
 8003d82:	4638      	mov	r0, r7
 8003d84:	f01d fc06 	bl	8021594 <siprintf>
  res = f_mkdir(path);
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f013 fa07 	bl	801719c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8003d8e:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 8003d92:	d12a      	bne.n	8003dea <TEST_Run+0x27a>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003d94:	f894 3b64 	ldrb.w	r3, [r4, #2916]	; 0xb64
 8003d98:	3564      	adds	r5, #100	; 0x64
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	f000 8113 	beq.w	8003fc6 <TEST_Run+0x456>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8100 	beq.w	8003fa6 <TEST_Run+0x436>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	f000 8129 	beq.w	8003ffe <TEST_Run+0x48e>
          Error_Handler(); /* DumpFormat no supported */
 8003dac:	f000 ff3c 	bl	8004c28 <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 8003db0:	2302      	movs	r3, #2
 8003db2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 8003db6:	e6e5      	b.n	8003b84 <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f005 f8fd 	bl	8008fb8 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f006 fa7c 	bl	800a2bc <BSP_SD_Init>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d0ca      	beq.n	8003d5e <TEST_Run+0x1ee>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8003dc8:	f016 f882 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003dcc:	88c1      	ldrh	r1, [r0, #6]
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4a53      	ldr	r2, [pc, #332]	; (8003f20 <TEST_Run+0x3b0>)
 8003dd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	0089      	lsls	r1, r1, #2
 8003dda:	f016 f969 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003dde:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003de0:	f7fd fd6c 	bl	80018bc <DISPLAY_Refresh>
            Error_Handler();
 8003de4:	f000 ff20 	bl	8004c28 <Error_Handler>
 8003de8:	e7b9      	b.n	8003d5e <TEST_Run+0x1ee>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8003dea:	f016 f871 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003dee:	88c1      	ldrh	r1, [r0, #6]
 8003df0:	2301      	movs	r3, #1
 8003df2:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <TEST_Run+0x3b4>)
 8003df4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4099      	lsls	r1, r3
 8003dfc:	f016 f958 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8003e00:	f016 f866 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003e04:	88c1      	ldrh	r1, [r0, #6]
 8003e06:	463a      	mov	r2, r7
 8003e08:	2301      	movs	r3, #1
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003e10:	f016 f94e 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8003e14:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003e16:	f7fd fd51 	bl	80018bc <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8003e1a:	2002      	movs	r0, #2
 8003e1c:	f004 fafc 	bl	8008418 <BSP_LED_On>
    while (1);
 8003e20:	e7fe      	b.n	8003e20 <TEST_Run+0x2b0>
      BSP_LED_Off(LED_GREEN);
 8003e22:	2000      	movs	r0, #0
 8003e24:	f004 fb08 	bl	8008438 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003e28:	2002      	movs	r0, #2
 8003e2a:	f004 faf5 	bl	8008418 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 8003e2e:	f016 f84f 	bl	8019ed0 <UTIL_LCD_GetFont>
 8003e32:	4a3d      	ldr	r2, [pc, #244]	; (8003f28 <TEST_Run+0x3b8>)
 8003e34:	88c1      	ldrh	r1, [r0, #6]
 8003e36:	2302      	movs	r3, #2
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f016 f939 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003e3e:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003e40:	f7fd fd3c 	bl	80018bc <DISPLAY_Refresh>
      HAL_Delay(200);
 8003e44:	20c8      	movs	r0, #200	; 0xc8
 8003e46:	f006 fb87 	bl	800a558 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003e4a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003e4c:	7d13      	ldrb	r3, [r2, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0fc      	beq.n	8003e4c <TEST_Run+0x2dc>
      BSP_CAMERA_DeInit(0);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f005 f8b0 	bl	8008fb8 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003e58:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003e5c:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003e64:	f006 fa2a 	bl	800a2bc <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8003e68:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003e6c:	f040 80fd 	bne.w	800406a <TEST_Run+0x4fa>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003e70:	f8d4 3b68 	ldr.w	r3, [r4, #2920]	; 0xb68
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	f000 8127 	beq.w	80040c8 <TEST_Run+0x558>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8003e7a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	f000 8104 	beq.w	800408c <TEST_Run+0x51c>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 80b7 	bne.w	8003ff8 <TEST_Run+0x488>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003e8a:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003e8e:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003e92:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003e96:	a834      	add	r0, sp, #208	; 0xd0
 8003e98:	9100      	str	r1, [sp, #0]
 8003e9a:	491a      	ldr	r1, [pc, #104]	; (8003f04 <TEST_Run+0x394>)
 8003e9c:	f01d fb7a 	bl	8021594 <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003ea0:	a834      	add	r0, sp, #208	; 0xd0
 8003ea2:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8003ea6:	f8d4 2b5c 	ldr.w	r2, [r4, #2908]	; 0xb5c
 8003eaa:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003eae:	f7fd fed9 	bl	8001c64 <write_raw.isra.0>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 8003eb8:	e664      	b.n	8003b84 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003eba:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003ebe:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003ec2:	491a      	ldr	r1, [pc, #104]	; (8003f2c <TEST_Run+0x3bc>)
 8003ec4:	a834      	add	r0, sp, #208	; 0xd0
 8003ec6:	f01d fb65 	bl	8021594 <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003eca:	e689      	b.n	8003be0 <TEST_Run+0x70>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003ecc:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003ed0:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003ed4:	4916      	ldr	r1, [pc, #88]	; (8003f30 <TEST_Run+0x3c0>)
 8003ed6:	a834      	add	r0, sp, #208	; 0xd0
 8003ed8:	f01d fb5c 	bl	8021594 <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003edc:	f8d4 7b50 	ldr.w	r7, [r4, #2896]	; 0xb50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003ee0:	f105 0264 	add.w	r2, r5, #100	; 0x64
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003ee4:	f8d4 6b54 	ldr.w	r6, [r4, #2900]	; 0xb54
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003ee8:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003eea:	f8d4 5b58 	ldr.w	r5, [r4, #2904]	; 0xb58
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003eee:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003ef0:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003ef4:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003ef8:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003efc:	f7fd ff14 	bl	8001d28 <write_bmp.isra.0>
 8003f00:	e640      	b.n	8003b84 <TEST_Run+0x14>
 8003f02:	bf00      	nop
 8003f04:	080247b0 	.word	0x080247b0
 8003f08:	08024714 	.word	0x08024714
 8003f0c:	42c80000 	.word	0x42c80000
 8003f10:	08024094 	.word	0x08024094
 8003f14:	080240a0 	.word	0x080240a0
 8003f18:	0802451c 	.word	0x0802451c
 8003f1c:	08024720 	.word	0x08024720
 8003f20:	080242c4 	.word	0x080242c4
 8003f24:	080242f0 	.word	0x080242f0
 8003f28:	08024790 	.word	0x08024790
 8003f2c:	0802473c 	.word	0x0802473c
 8003f30:	08024784 	.word	0x08024784
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003f34:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8003f38:	f105 0964 	add.w	r9, r5, #100	; 0x64
 8003f3c:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003f40:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003f44:	4971      	ldr	r1, [pc, #452]	; (800410c <TEST_Run+0x59c>)
 8003f46:	4640      	mov	r0, r8
 8003f48:	f01d fb24 	bl	8021594 <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	4640      	mov	r0, r8
 8003f50:	220a      	movs	r2, #10
 8003f52:	496f      	ldr	r1, [pc, #444]	; (8004110 <TEST_Run+0x5a0>)
 8003f54:	f7fd fe44 	bl	8001be0 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003f58:	f8d4 3b5c 	ldr.w	r3, [r4, #2908]	; 0xb5c
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	f43f ae11 	beq.w	8003b84 <TEST_Run+0x14>
 8003f62:	4d6c      	ldr	r5, [pc, #432]	; (8004114 <TEST_Run+0x5a4>)
 8003f64:	2600      	movs	r6, #0
 8003f66:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003f68:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8004128 <TEST_Run+0x5b8>
 8003f6c:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
 8003f70:	4651      	mov	r1, sl
 8003f72:	f855 2b04 	ldr.w	r2, [r5], #4
 8003f76:	4638      	mov	r0, r7
 8003f78:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003f7c:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003f7e:	ed93 7a00 	vldr	s14, [r3]
 8003f82:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003f86:	ed8d 7b00 	vstr	d7, [sp]
 8003f8a:	f01d fb03 	bl	8021594 <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8003f8e:	464b      	mov	r3, r9
 8003f90:	2232      	movs	r2, #50	; 0x32
 8003f92:	4639      	mov	r1, r7
 8003f94:	4640      	mov	r0, r8
 8003f96:	f7fd fe23 	bl	8001be0 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003f9a:	f8d4 3b5c 	ldr.w	r3, [r4, #2908]	; 0xb5c
 8003f9e:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8003fa2:	d3e3      	bcc.n	8003f6c <TEST_Run+0x3fc>
 8003fa4:	e5ee      	b.n	8003b84 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003fa6:	463a      	mov	r2, r7
 8003fa8:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003fac:	a834      	add	r0, sp, #208	; 0xd0
 8003fae:	495a      	ldr	r1, [pc, #360]	; (8004118 <TEST_Run+0x5a8>)
 8003fb0:	f01d faf0 	bl	8021594 <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	a834      	add	r0, sp, #208	; 0xd0
 8003fb8:	f8d4 2b5c 	ldr.w	r2, [r4, #2908]	; 0xb5c
 8003fbc:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003fc0:	f7fd fe50 	bl	8001c64 <write_raw.isra.0>
 8003fc4:	e6f4      	b.n	8003db0 <TEST_Run+0x240>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003fc6:	463a      	mov	r2, r7
 8003fc8:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003fcc:	a834      	add	r0, sp, #208	; 0xd0
 8003fce:	4953      	ldr	r1, [pc, #332]	; (800411c <TEST_Run+0x5ac>)
 8003fd0:	f01d fae0 	bl	8021594 <siprintf>
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003fd4:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 8003fd8:	f8d4 6b54 	ldr.w	r6, [r4, #2900]	; 0xb54
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003fdc:	462a      	mov	r2, r5
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003fde:	9314      	str	r3, [sp, #80]	; 0x50
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003fe0:	a834      	add	r0, sp, #208	; 0xd0
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003fe2:	f8d4 5b58 	ldr.w	r5, [r4, #2904]	; 0xb58
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003fe6:	a914      	add	r1, sp, #80	; 0x50
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003fe8:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003fec:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003ff0:	9317      	str	r3, [sp, #92]	; 0x5c
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003ff2:	f7fd fe99 	bl	8001d28 <write_bmp.isra.0>
 8003ff6:	e6db      	b.n	8003db0 <TEST_Run+0x240>
        Error_Handler(); /* Capture Format no supported */
 8003ff8:	f000 fe16 	bl	8004c28 <Error_Handler>
 8003ffc:	e759      	b.n	8003eb2 <TEST_Run+0x342>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003ffe:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8004002:	463a      	mov	r2, r7
 8004004:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8004008:	4940      	ldr	r1, [pc, #256]	; (800410c <TEST_Run+0x59c>)
 800400a:	4640      	mov	r0, r8
 800400c:	f01d fac2 	bl	8021594 <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8004010:	462b      	mov	r3, r5
 8004012:	4640      	mov	r0, r8
 8004014:	220a      	movs	r2, #10
 8004016:	493e      	ldr	r1, [pc, #248]	; (8004110 <TEST_Run+0x5a0>)
 8004018:	f7fd fde2 	bl	8001be0 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800401c:	f8d4 3b5c 	ldr.w	r3, [r4, #2908]	; 0xb5c
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	f43f aec5 	beq.w	8003db0 <TEST_Run+0x240>
 8004026:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8004114 <TEST_Run+0x5a4>
 800402a:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 800402c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8004128 <TEST_Run+0x5b8>
 8004030:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
 8004034:	4651      	mov	r1, sl
 8004036:	f859 2b04 	ldr.w	r2, [r9], #4
 800403a:	4638      	mov	r0, r7
 800403c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004040:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004042:	ed93 7a00 	vldr	s14, [r3]
 8004046:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800404a:	ed8d 7b00 	vstr	d7, [sp]
 800404e:	f01d faa1 	bl	8021594 <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8004052:	462b      	mov	r3, r5
 8004054:	2232      	movs	r2, #50	; 0x32
 8004056:	4639      	mov	r1, r7
 8004058:	4640      	mov	r0, r8
 800405a:	f7fd fdc1 	bl	8001be0 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800405e:	f8d4 3b5c 	ldr.w	r3, [r4, #2908]	; 0xb5c
 8004062:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8004066:	d3e3      	bcc.n	8004030 <TEST_Run+0x4c0>
 8004068:	e6a2      	b.n	8003db0 <TEST_Run+0x240>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 800406a:	f015 ff31 	bl	8019ed0 <UTIL_LCD_GetFont>
 800406e:	88c1      	ldrh	r1, [r0, #6]
 8004070:	2301      	movs	r3, #1
 8004072:	4a2b      	ldr	r2, [pc, #172]	; (8004120 <TEST_Run+0x5b0>)
 8004074:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004078:	2000      	movs	r0, #0
 800407a:	0089      	lsls	r1, r1, #2
 800407c:	f016 f818 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004080:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8004082:	f7fd fc1b 	bl	80018bc <DISPLAY_Refresh>
        Error_Handler();
 8004086:	f000 fdcf 	bl	8004c28 <Error_Handler>
 800408a:	e6f1      	b.n	8003e70 <TEST_Run+0x300>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800408c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8004090:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8004094:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8004098:	a834      	add	r0, sp, #208	; 0xd0
 800409a:	9100      	str	r1, [sp, #0]
 800409c:	4921      	ldr	r1, [pc, #132]	; (8004124 <TEST_Run+0x5b4>)
 800409e:	f01d fa79 	bl	8021594 <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80040a2:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 80040a6:	f8d4 6b54 	ldr.w	r6, [r4, #2900]	; 0xb54
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80040aa:	f105 0264 	add.w	r2, r5, #100	; 0x64
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80040ae:	9314      	str	r3, [sp, #80]	; 0x50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80040b0:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80040b2:	f8d4 5b58 	ldr.w	r5, [r4, #2904]	; 0xb58
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80040b6:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80040b8:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80040bc:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80040c0:	9317      	str	r3, [sp, #92]	; 0x5c
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80040c2:	f7fd fe31 	bl	8001d28 <write_bmp.isra.0>
 80040c6:	e6f4      	b.n	8003eb2 <TEST_Run+0x342>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80040c8:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 80040cc:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 80040d0:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 80040d4:	4608      	mov	r0, r1
 80040d6:	fb02 f203 	mul.w	r2, r2, r3
 80040da:	f7fd fc65 	bl	80019a8 <PREPROC_Pixel_RB_Swap>
 80040de:	e6cc      	b.n	8003e7a <TEST_Run+0x30a>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80040e0:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80040e4:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80040e8:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 80040ec:	a834      	add	r0, sp, #208	; 0xd0
 80040ee:	9100      	str	r1, [sp, #0]
 80040f0:	490c      	ldr	r1, [pc, #48]	; (8004124 <TEST_Run+0x5b4>)
 80040f2:	f01d fa4f 	bl	8021594 <siprintf>
 80040f6:	e6f1      	b.n	8003edc <TEST_Run+0x36c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80040f8:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 80040fc:	4608      	mov	r0, r1
 80040fe:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 8004102:	fb02 f203 	mul.w	r2, r2, r3
 8004106:	f7fd fc4f 	bl	80019a8 <PREPROC_Pixel_RB_Swap>
 800410a:	e556      	b.n	8003bba <TEST_Run+0x4a>
 800410c:	08024748 	.word	0x08024748
 8004110:	08024754 	.word	0x08024754
 8004114:	24000004 	.word	0x24000004
 8004118:	0802473c 	.word	0x0802473c
 800411c:	08024730 	.word	0x08024730
 8004120:	080242c4 	.word	0x080242c4
 8004124:	080247a0 	.word	0x080247a0
 8004128:	08024778 	.word	0x08024778
 800412c:	00000000 	.word	0x00000000

08004130 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004130:	f8d0 3b80 	ldr.w	r3, [r0, #2944]	; 0xb80
{
 8004134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	ed2d 8b04 	vpush	{d8-d9}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 800413c:	781f      	ldrb	r7, [r3, #0]
{
 800413e:	b099      	sub	sp, #100	; 0x64
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004140:	2f04      	cmp	r7, #4
 8004142:	d009      	beq.n	8004158 <TEST_PostProcess+0x28>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 8004144:	2f03      	cmp	r7, #3
 8004146:	d049      	beq.n	80041dc <TEST_PostProcess+0xac>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 8004148:	2f02      	cmp	r7, #2
 800414a:	f000 80a3 	beq.w	8004294 <TEST_PostProcess+0x164>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 800414e:	b019      	add	sp, #100	; 0x64
 8004150:	ecbd 8b04 	vpop	{d8-d9}
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004158:	6edc      	ldr	r4, [r3, #108]	; 0x6c
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 800415a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800415e:	f8d4 6b80 	ldr.w	r6, [r4, #2944]	; 0xb80
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8004162:	b1f5      	cbz	r5, 80041a2 <TEST_PostProcess+0x72>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 8004164:	2d02      	cmp	r5, #2
 8004166:	d1f2      	bne.n	800414e <TEST_PostProcess+0x1e>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 8004168:	2000      	movs	r0, #0
 800416a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 800416e:	f006 f867 	bl	800a240 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004172:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8004174:	f7fd f8de 	bl	8001334 <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004178:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 800417a:	7d13      	ldrb	r3, [r2, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0fc      	beq.n	800417a <TEST_PostProcess+0x4a>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004180:	2600      	movs	r6, #0
    BSP_CAMERA_Resume(0);
 8004182:	4630      	mov	r0, r6
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004184:	7516      	strb	r6, [r2, #20]
    BSP_CAMERA_Resume(0);
 8004186:	f005 fa09 	bl	800959c <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800418a:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 829b 	bne.w	80046ca <TEST_PostProcess+0x59a>
    BSP_LED_On(LED_GREEN);
 8004194:	2000      	movs	r0, #0
 8004196:	f004 f93f 	bl	8008418 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 800419a:	2002      	movs	r0, #2
 800419c:	f004 f94c 	bl	8008438 <BSP_LED_Off>
 80041a0:	e7d5      	b.n	800414e <TEST_PostProcess+0x1e>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 80041a2:	f015 fe95 	bl	8019ed0 <UTIL_LCD_GetFont>
 80041a6:	2303      	movs	r3, #3
 80041a8:	88c1      	ldrh	r1, [r0, #6]
 80041aa:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 80041ae:	4628      	mov	r0, r5
 80041b0:	f015 ff7e 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 80041b4:	f015 fe8c 	bl	8019ed0 <UTIL_LCD_GetFont>
 80041b8:	2302      	movs	r3, #2
 80041ba:	88c1      	ldrh	r1, [r0, #6]
 80041bc:	4628      	mov	r0, r5
 80041be:	4ac6      	ldr	r2, [pc, #792]	; (80044d8 <TEST_PostProcess+0x3a8>)
 80041c0:	f015 ff76 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80041c4:	6e70      	ldr	r0, [r6, #100]	; 0x64
 80041c6:	f7fd fb79 	bl	80018bc <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80041ca:	4628      	mov	r0, r5
 80041cc:	f004 f99e 	bl	800850c <BSP_PB_GetState>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0bc      	beq.n	800414e <TEST_PostProcess+0x1e>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80041da:	e7b8      	b.n	800414e <TEST_PostProcess+0x1e>
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80041dc:	6edc      	ldr	r4, [r3, #108]	; 0x6c
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80041de:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80041e2:	f8d4 5b80 	ldr.w	r5, [r4, #2944]	; 0xb80
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80041e6:	2e00      	cmp	r6, #0
 80041e8:	f000 80b5 	beq.w	8004356 <TEST_PostProcess+0x226>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 80041ec:	2e02      	cmp	r6, #2
 80041ee:	d1ae      	bne.n	800414e <TEST_PostProcess+0x1e>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 80041f0:	7923      	ldrb	r3, [r4, #4]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	f000 823e 	beq.w	8004674 <TEST_PostProcess+0x544>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 80041f8:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8227 	beq.w	8004650 <TEST_PostProcess+0x520>
 8004202:	2b01      	cmp	r3, #1
 8004204:	f894 3aa6 	ldrb.w	r3, [r4, #2726]	; 0xaa6
 8004208:	f000 821f 	beq.w	800464a <TEST_PostProcess+0x51a>
    TestContext_Ptr->DumpContext.dump_state = 0;
 800420c:	2200      	movs	r2, #0
 800420e:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8004212:	2b01      	cmp	r3, #1
 8004214:	f000 827d 	beq.w	8004712 <TEST_PostProcess+0x5e2>
 8004218:	4bb0      	ldr	r3, [pc, #704]	; (80044dc <TEST_PostProcess+0x3ac>)
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 800421a:	2702      	movs	r7, #2
 800421c:	f8d4 0aa8 	ldr.w	r0, [r4, #2728]	; 0xaa8
 8004220:	9302      	str	r3, [sp, #8]
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004222:	2800      	cmp	r0, #0
 8004224:	f000 82a4 	beq.w	8004770 <TEST_PostProcess+0x640>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 8004228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800422c:	4298      	cmp	r0, r3
 800422e:	f000 82eb 	beq.w	8004808 <TEST_PostProcess+0x6d8>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 8004232:	3801      	subs	r0, #1
 8004234:	f8c4 0aa8 	str.w	r0, [r4, #2728]	; 0xaa8
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8004238:	f015 fe4a 	bl	8019ed0 <UTIL_LCD_GetFont>
 800423c:	2303      	movs	r3, #3
 800423e:	88c1      	ldrh	r1, [r0, #6]
 8004240:	f104 0210 	add.w	r2, r4, #16
 8004244:	2000      	movs	r0, #0
 8004246:	f015 ff33 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 800424a:	f015 fe41 	bl	8019ed0 <UTIL_LCD_GetFont>
 800424e:	2302      	movs	r3, #2
 8004250:	88c1      	ldrh	r1, [r0, #6]
 8004252:	2000      	movs	r0, #0
 8004254:	4aa2      	ldr	r2, [pc, #648]	; (80044e0 <TEST_PostProcess+0x3b0>)
 8004256:	f015 ff2b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800425a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800425c:	f7fd fb2e 	bl	80018bc <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 8004260:	2301      	movs	r3, #1
 8004262:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004266:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004268:	4b9e      	ldr	r3, [pc, #632]	; (80044e4 <TEST_PostProcess+0x3b4>)
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	9e02      	ldr	r6, [sp, #8]
 800426e:	f852 1b04 	ldr.w	r1, [r2], #4
 8004272:	f843 1b04 	str.w	r1, [r3], #4
      for(uint32_t i=0; i<AI_NET_OUTPUT_SIZE;i++)
 8004276:	429e      	cmp	r6, r3
 8004278:	d1f9      	bne.n	800426e <TEST_PostProcess+0x13e>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800427a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800427c:	4b9a      	ldr	r3, [pc, #616]	; (80044e8 <TEST_PostProcess+0x3b8>)
 800427e:	6811      	ldr	r1, [r2, #0]
 8004280:	6019      	str	r1, [r3, #0]
 8004282:	6851      	ldr	r1, [r2, #4]
 8004284:	6059      	str	r1, [r3, #4]
 8004286:	6891      	ldr	r1, [r2, #8]
 8004288:	6099      	str	r1, [r3, #8]
 800428a:	68d1      	ldr	r1, [r2, #12]
 800428c:	60d9      	str	r1, [r3, #12]
 800428e:	6912      	ldr	r2, [r2, #16]
 8004290:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 8004292:	e77f      	b.n	8004194 <TEST_PostProcess+0x64>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004294:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8004296:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800429a:	f8d5 bb80 	ldr.w	fp, [r5, #2944]	; 0xb80
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80a0 	beq.w	80043e4 <TEST_PostProcess+0x2b4>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80042a4:	f8d5 3aa0 	ldr.w	r3, [r5, #2720]	; 0xaa0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d047      	beq.n	800433c <TEST_PostProcess+0x20c>
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80042ac:	2400      	movs	r4, #0
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80042ae:	f04f 0801 	mov.w	r8, #1
 80042b2:	f44f 62a2 	mov.w	r2, #1296	; 0x510
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80042b6:	4e8d      	ldr	r6, [pc, #564]	; (80044ec <TEST_PostProcess+0x3bc>)
 80042b8:	4621      	mov	r1, r4
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80042ba:	f885 8aa4 	strb.w	r8, [r5, #2724]	; 0xaa4
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80042be:	f505 6089 	add.w	r0, r5, #1096	; 0x448
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 80042c2:	f8c5 8120 	str.w	r8, [r5, #288]	; 0x120
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80042c6:	f8c5 4440 	str.w	r4, [r5, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80042ca:	ed9f 7b81 	vldr	d7, [pc, #516]	; 80044d0 <TEST_PostProcess+0x3a0>
 80042ce:	ed85 7b44 	vstr	d7, [r5, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 80042d2:	ed85 7b46 	vstr	d7, [r5, #280]	; 0x118
      for (int i=0; i<AI_NET_OUTPUT_SIZE; i++)
 80042d6:	f01c fc25 	bl	8020b24 <memset>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80042da:	f605 25bc 	addw	r5, r5, #2748	; 0xabc
      BSP_SD_DeInit(0);
 80042de:	4620      	mov	r0, r4
      App_Cxt_Ptr->run_loop = 0;
 80042e0:	f8cb 4004 	str.w	r4, [fp, #4]
      BSP_SD_DeInit(0);
 80042e4:	f005 ffac 	bl	800a240 <BSP_SD_DeInit>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80042e8:	463a      	mov	r2, r7
 80042ea:	4630      	mov	r0, r6
 80042ec:	f44f 61a4 	mov.w	r1, #1312	; 0x520
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80042f0:	7037      	strb	r7, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80042f2:	f000 fc2b 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80042f6:	4642      	mov	r2, r8
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	f00d f9aa 	bl	8011654 <HAL_UART_Transmit_DMA>
 8004300:	2800      	cmp	r0, #0
 8004302:	f040 81dc 	bne.w	80046be <TEST_PostProcess+0x58e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004306:	4628      	mov	r0, r5
 8004308:	f00d fbce 	bl	8011aa8 <HAL_UART_GetState>
 800430c:	2820      	cmp	r0, #32
 800430e:	d1fa      	bne.n	8004306 <TEST_PostProcess+0x1d6>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004310:	4628      	mov	r0, r5
 8004312:	220a      	movs	r2, #10
 8004314:	4976      	ldr	r1, [pc, #472]	; (80044f0 <TEST_PostProcess+0x3c0>)
 8004316:	f00d f9ed 	bl	80116f4 <HAL_UART_Receive_DMA>
 800431a:	2800      	cmp	r0, #0
 800431c:	f040 81d2 	bne.w	80046c4 <TEST_PostProcess+0x594>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004320:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 8004324:	4b70      	ldr	r3, [pc, #448]	; (80044e8 <TEST_PostProcess+0x3b8>)
 8004326:	6811      	ldr	r1, [r2, #0]
 8004328:	6019      	str	r1, [r3, #0]
 800432a:	6851      	ldr	r1, [r2, #4]
 800432c:	6059      	str	r1, [r3, #4]
 800432e:	6891      	ldr	r1, [r2, #8]
 8004330:	6099      	str	r1, [r3, #8]
 8004332:	68d1      	ldr	r1, [r2, #12]
 8004334:	60d9      	str	r1, [r3, #12]
 8004336:	6912      	ldr	r2, [r2, #16]
 8004338:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 800433a:	e708      	b.n	800414e <TEST_PostProcess+0x1e>
        HAL_Delay(100);
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	f006 f90b 	bl	800a558 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 8004342:	2000      	movs	r0, #0
 8004344:	f004 f888 	bl	8008458 <BSP_LED_Toggle>
        HAL_Delay(100);
 8004348:	2064      	movs	r0, #100	; 0x64
 800434a:	f006 f905 	bl	800a558 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 800434e:	2000      	movs	r0, #0
 8004350:	f004 f882 	bl	8008458 <BSP_LED_Toggle>
      while (1)
 8004354:	e7f2      	b.n	800433c <TEST_PostProcess+0x20c>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8004356:	f015 fdbb 	bl	8019ed0 <UTIL_LCD_GetFont>
 800435a:	463b      	mov	r3, r7
 800435c:	88c1      	ldrh	r1, [r0, #6]
 800435e:	f104 0210 	add.w	r2, r4, #16
 8004362:	4630      	mov	r0, r6
 8004364:	f015 fea4 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004368:	f015 fdb2 	bl	8019ed0 <UTIL_LCD_GetFont>
 800436c:	2302      	movs	r3, #2
 800436e:	88c1      	ldrh	r1, [r0, #6]
 8004370:	4630      	mov	r0, r6
 8004372:	4a5b      	ldr	r2, [pc, #364]	; (80044e0 <TEST_PostProcess+0x3b0>)
 8004374:	f015 fe9c 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004378:	ed95 7a04 	vldr	s14, [r5, #16]
 800437c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80044f4 <TEST_PostProcess+0x3c4>
 8004380:	a806      	add	r0, sp, #24
 8004382:	68ea      	ldr	r2, [r5, #12]
 8004384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004388:	495b      	ldr	r1, [pc, #364]	; (80044f8 <TEST_PostProcess+0x3c8>)
 800438a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800438e:	ed8d 7b00 	vstr	d7, [sp]
 8004392:	f01d f8ff 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8004396:	f015 fd9b 	bl	8019ed0 <UTIL_LCD_GetFont>
 800439a:	88c1      	ldrh	r1, [r0, #6]
 800439c:	2301      	movs	r3, #1
 800439e:	aa06      	add	r2, sp, #24
 80043a0:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 80043a4:	4630      	mov	r0, r6
 80043a6:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80043aa:	f015 fe81 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80043ae:	68aa      	ldr	r2, [r5, #8]
 80043b0:	4952      	ldr	r1, [pc, #328]	; (80044fc <TEST_PostProcess+0x3cc>)
 80043b2:	a806      	add	r0, sp, #24
 80043b4:	f01d f8ee 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 80043b8:	f015 fd8a 	bl	8019ed0 <UTIL_LCD_GetFont>
 80043bc:	88c1      	ldrh	r1, [r0, #6]
 80043be:	aa06      	add	r2, sp, #24
 80043c0:	2301      	movs	r3, #1
 80043c2:	4630      	mov	r0, r6
 80043c4:	0109      	lsls	r1, r1, #4
 80043c6:	f015 fe73 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80043ca:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80043cc:	f7fd fa76 	bl	80018bc <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80043d0:	4630      	mov	r0, r6
 80043d2:	f004 f89b 	bl	800850c <BSP_PB_GetState>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f43f aeb9 	beq.w	800414e <TEST_PostProcess+0x1e>
      TestContext_Ptr->DumpContext.dump_state = 1;
 80043dc:	2301      	movs	r3, #1
 80043de:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80043e2:	e6b4      	b.n	800414e <TEST_PostProcess+0x1e>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80043e4:	f505 6780 	add.w	r7, r5, #1024	; 0x400
 80043e8:	4e45      	ldr	r6, [pc, #276]	; (8004500 <TEST_PostProcess+0x3d0>)
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80043ea:	f205 28ba 	addw	r8, r5, #698	; 0x2ba
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80043ee:	4639      	mov	r1, r7
 80043f0:	4630      	mov	r0, r6
 80043f2:	f01d f8ef 	bl	80215d4 <stpcpy>
    strcat(tmp_msg, "/");
 80043f6:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80043f8:	4641      	mov	r1, r8
 80043fa:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 80043fc:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8004400:	f01d f8f1 	bl	80215e6 <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8004404:	f8db 3014 	ldr.w	r3, [fp, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8004408:	f8d5 43bc 	ldr.w	r4, [r5, #956]	; 0x3bc
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 800440c:	9302      	str	r3, [sp, #8]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 800440e:	42a3      	cmp	r3, r4
 8004410:	f040 813b 	bne.w	800468a <TEST_PostProcess+0x55a>
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <TEST_PostProcess+0x3d4>)
 8004416:	9305      	str	r3, [sp, #20]
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 8004418:	ed9b 9a04 	vldr	s18, [fp, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 800441c:	f8d5 6120 	ldr.w	r6, [r5, #288]	; 0x120
    if (confidence > 0)
 8004420:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8004424:	3601      	adds	r6, #1
    if (confidence > 0)
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    TestContext_Ptr->ValidationContext.nbr_tested++;
 800442a:	f8c5 6120 	str.w	r6, [r5, #288]	; 0x120
    if (confidence > 0)
 800442e:	f340 8143 	ble.w	80046b8 <TEST_PostProcess+0x588>
      categorical_crossentropy = -log((double)confidence);
 8004432:	eeb7 0ac9 	vcvt.f64.f32	d0, s18
 8004436:	f01f f993 	bl	8023760 <log>
 800443a:	eeb1 0b40 	vneg.f64	d0, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 800443e:	ed95 6b44 	vldr	d6, [r5, #272]	; 0x110
 8004442:	ee30 6b06 	vadd.f64	d6, d0, d6
 8004446:	ed85 6b44 	vstr	d6, [r5, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 800444a:	b13e      	cbz	r6, 800445c <TEST_PostProcess+0x32c>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 800444c:	ee07 6a90 	vmov	s15, r6
 8004450:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004454:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004458:	ed85 5b46 	vstr	d5, [r5, #280]	; 0x118
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 800445c:	9a02      	ldr	r2, [sp, #8]
 800445e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8004462:	f205 438c 	addw	r3, r5, #1164	; 0x48c
 8004466:	f605 169c 	addw	r6, r5, #2460	; 0x99c
 800446a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  int conf_max = 0;
 800446e:	2200      	movs	r2, #0
 8004470:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 8004474:	f8d0 1448 	ldr.w	r1, [r0, #1096]	; 0x448
 8004478:	3101      	adds	r1, #1
 800447a:	f8c0 1448 	str.w	r1, [r0, #1096]	; 0x448
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 800447e:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
      if (conf_matrix[row][col] > conf_max)
 8004482:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8004486:	4614      	mov	r4, r2
 8004488:	4282      	cmp	r2, r0
 800448a:	d201      	bcs.n	8004490 <TEST_PostProcess+0x360>
        conf_max = conf_matrix[row][col];
 800448c:	4602      	mov	r2, r0
 800448e:	4604      	mov	r4, r0
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004490:	428b      	cmp	r3, r1
 8004492:	d1f6      	bne.n	8004482 <TEST_PostProcess+0x352>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8004494:	3348      	adds	r3, #72	; 0x48
 8004496:	429e      	cmp	r6, r3
 8004498:	d1f1      	bne.n	800447e <TEST_PostProcess+0x34e>
        float value_norm = value / (float)(conf_max + 1);
 800449a:	3401      	adds	r4, #1
  UTIL_LCD_SetFont(&Font12);
 800449c:	481a      	ldr	r0, [pc, #104]	; (8004508 <TEST_PostProcess+0x3d8>)
 800449e:	f015 fd0f 	bl	8019ec0 <UTIL_LCD_SetFont>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80044a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        float value_norm = value / (float)(conf_max + 1);
 80044a6:	ee07 4a90 	vmov	s15, r4
 80044aa:	f205 4944 	addw	r9, r5, #1092	; 0x444
 80044ae:	273c      	movs	r7, #60	; 0x3c
 80044b0:	f10d 0818 	add.w	r8, sp, #24
 80044b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80044b8:	f8df a050 	ldr.w	sl, [pc, #80]	; 800450c <TEST_PostProcess+0x3dc>
 80044bc:	e9cd 5b03 	strd	r5, fp, [sp, #12]
 80044c0:	eec7 8a27 	vdiv.f32	s17, s14, s15
        conf_max = conf_matrix[row][col];
 80044c4:	464d      	mov	r5, r9
 80044c6:	f240 1481 	movw	r4, #385	; 0x181
        sprintf(conf_value, ".");
 80044ca:	262e      	movs	r6, #46	; 0x2e
 80044cc:	e050      	b.n	8004570 <TEST_PostProcess+0x440>
 80044ce:	bf00      	nop
	...
 80044d8:	080247c0 	.word	0x080247c0
 80044dc:	d0ddc8e8 	.word	0xd0ddc8e8
 80044e0:	080247d0 	.word	0x080247d0
 80044e4:	d0ddc8a0 	.word	0xd0ddc8a0
 80044e8:	d0fce760 	.word	0xd0fce760
 80044ec:	24003240 	.word	0x24003240
 80044f0:	24003220 	.word	0x24003220
 80044f4:	42c80000 	.word	0x42c80000
 80044f8:	08024094 	.word	0x08024094
 80044fc:	080240a0 	.word	0x080240a0
 8004500:	24004260 	.word	0x24004260
 8004504:	24000004 	.word	0x24000004
 8004508:	24003038 	.word	0x24003038
 800450c:	080247fc 	.word	0x080247fc
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004510:	ee28 8a27 	vmul.f32	s16, s16, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004514:	4bca      	ldr	r3, [pc, #808]	; (8004840 <TEST_PostProcess+0x710>)
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004516:	ee28 8a28 	vmul.f32	s16, s16, s17
 800451a:	febb 8a48 	vrintm.f32	s16, s16
 800451e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004522:	ee17 ba90 	vmov	fp, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004526:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800452a:	f015 fcc1 	bl	8019eb0 <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 800452e:	f1bb 0f05 	cmp.w	fp, #5
        UTIL_LCD_SetTextColor(text_color);
 8004532:	bfcc      	ite	gt
 8004534:	f04f 407f 	movgt.w	r0, #4278190080	; 0xff000000
 8004538:	f04f 30ff 	movle.w	r0, #4294967295
 800453c:	f015 fcb0 	bl	8019ea0 <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 8004540:	682a      	ldr	r2, [r5, #0]
 8004542:	4651      	mov	r1, sl
 8004544:	4640      	mov	r0, r8
 8004546:	f01d f825 	bl	8021594 <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 800454a:	2303      	movs	r3, #3
 800454c:	4642      	mov	r2, r8
 800454e:	4639      	mov	r1, r7
 8004550:	4620      	mov	r0, r4
 8004552:	f015 fdad 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8004556:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800455a:	f015 fca9 	bl	8019eb0 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	f015 fc9d 	bl	8019ea0 <UTIL_LCD_SetTextColor>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004566:	3414      	adds	r4, #20
 8004568:	f240 23e9 	movw	r3, #745	; 0x2e9
 800456c:	429c      	cmp	r4, r3
 800456e:	d00c      	beq.n	800458a <TEST_PostProcess+0x45a>
      uint32_t value = conf_matrix[row][col];
 8004570:	f855 3f04 	ldr.w	r3, [r5, #4]!
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004574:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 8004578:	ee07 3a10 	vmov	s14, r3
 800457c:	eeb8 8a47 	vcvt.f32.u32	s16, s14
      if (value > 0)
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1c5      	bne.n	8004510 <TEST_PostProcess+0x3e0>
        sprintf(conf_value, ".");
 8004584:	f8a8 6000 	strh.w	r6, [r8]
 8004588:	e7df      	b.n	800454a <TEST_PostProcess+0x41a>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 800458a:	3714      	adds	r7, #20
 800458c:	f109 0948 	add.w	r9, r9, #72	; 0x48
 8004590:	f5b7 7fd2 	cmp.w	r7, #420	; 0x1a4
 8004594:	d196      	bne.n	80044c4 <TEST_PostProcess+0x394>
  UTIL_LCD_SetFont(&Font20);
 8004596:	48ab      	ldr	r0, [pc, #684]	; (8004844 <TEST_PostProcess+0x714>)
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004598:	2416      	movs	r4, #22
 800459a:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
  UTIL_LCD_SetFont(&Font20);
 800459e:	f015 fc8f 	bl	8019ec0 <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 80045a2:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8004848 <TEST_PostProcess+0x718>
 80045a6:	9b05      	ldr	r3, [sp, #20]
 80045a8:	ee29 7a07 	vmul.f32	s14, s18, s14
 80045ac:	9a02      	ldr	r2, [sp, #8]
 80045ae:	49a7      	ldr	r1, [pc, #668]	; (800484c <TEST_PostProcess+0x71c>)
 80045b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80045b8:	48a5      	ldr	r0, [pc, #660]	; (8004850 <TEST_PostProcess+0x720>)
 80045ba:	ed8d 7b00 	vstr	d7, [sp]
 80045be:	f01c ffe9 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 80045c2:	f015 fc85 	bl	8019ed0 <UTIL_LCD_GetFont>
 80045c6:	88c1      	ldrh	r1, [r0, #6]
 80045c8:	2303      	movs	r3, #3
 80045ca:	4aa1      	ldr	r2, [pc, #644]	; (8004850 <TEST_PostProcess+0x720>)
 80045cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80045d0:	2028      	movs	r0, #40	; 0x28
 80045d2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80045d6:	f015 fd6b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 80045da:	499e      	ldr	r1, [pc, #632]	; (8004854 <TEST_PostProcess+0x724>)
 80045dc:	489c      	ldr	r0, [pc, #624]	; (8004850 <TEST_PostProcess+0x720>)
 80045de:	e9d5 2346 	ldrd	r2, r3, [r5, #280]	; 0x118
 80045e2:	f01c ffd7 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 80045e6:	f015 fc73 	bl	8019ed0 <UTIL_LCD_GetFont>
 80045ea:	88c1      	ldrh	r1, [r0, #6]
 80045ec:	2303      	movs	r3, #3
 80045ee:	2028      	movs	r0, #40	; 0x28
 80045f0:	4a97      	ldr	r2, [pc, #604]	; (8004850 <TEST_PostProcess+0x720>)
 80045f2:	fb04 f101 	mul.w	r1, r4, r1
 80045f6:	f015 fd5b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 80045fa:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
 80045fe:	f505 72b7 	add.w	r2, r5, #366	; 0x16e
 8004602:	4995      	ldr	r1, [pc, #596]	; (8004858 <TEST_PostProcess+0x728>)
 8004604:	4892      	ldr	r0, [pc, #584]	; (8004850 <TEST_PostProcess+0x720>)
 8004606:	f01c ffc5 	bl	8021594 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 800460a:	f015 fc61 	bl	8019ed0 <UTIL_LCD_GetFont>
 800460e:	2301      	movs	r3, #1
 8004610:	88c1      	ldrh	r1, [r0, #6]
 8004612:	2000      	movs	r0, #0
 8004614:	4a8e      	ldr	r2, [pc, #568]	; (8004850 <TEST_PostProcess+0x720>)
 8004616:	f015 fd4b 	bl	801a0b0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800461a:	f8db 0064 	ldr.w	r0, [fp, #100]	; 0x64
 800461e:	f7fd f94d 	bl	80018bc <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004622:	f8d5 3aa0 	ldr.w	r3, [r5, #2720]	; 0xaa0
 8004626:	2b00      	cmp	r3, #0
 8004628:	f43f ad91 	beq.w	800414e <TEST_PostProcess+0x1e>
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 800462c:	2300      	movs	r3, #0
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 800462e:	f8db 1070 	ldr.w	r1, [fp, #112]	; 0x70
 8004632:	f8d5 2a98 	ldr.w	r2, [r5, #2712]	; 0xa98
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	1c50      	adds	r0, r2, #1
 800463a:	f8c5 0a98 	str.w	r0, [r5, #2712]	; 0xa98
 800463e:	5cc9      	ldrb	r1, [r1, r3]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004640:	3301      	adds	r3, #1
 8004642:	2b48      	cmp	r3, #72	; 0x48
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004644:	7011      	strb	r1, [r2, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004646:	d1f2      	bne.n	800462e <TEST_PostProcess+0x4fe>
 8004648:	e581      	b.n	800414e <TEST_PostProcess+0x1e>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f adde 	bne.w	800420c <TEST_PostProcess+0xdc>
        BSP_SD_DeInit(0);
 8004650:	2000      	movs	r0, #0
 8004652:	f005 fdf5 	bl	800a240 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004656:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8004658:	f7fc fe6c 	bl	8001334 <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 800465c:	7923      	ldrb	r3, [r4, #4]
 800465e:	2b02      	cmp	r3, #2
 8004660:	f000 8168 	beq.w	8004934 <TEST_PostProcess+0x804>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004664:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004666:	7d13      	ldrb	r3, [r2, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0fc      	beq.n	8004666 <TEST_PostProcess+0x536>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 800466c:	2000      	movs	r0, #0
 800466e:	7510      	strb	r0, [r2, #20]
        BSP_CAMERA_Resume(0);
 8004670:	f004 ff94 	bl	800959c <BSP_CAMERA_Resume>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f8d4 2aa0 	ldr.w	r2, [r4, #2720]	; 0xaa0
 800467a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800467e:	2a00      	cmp	r2, #0
 8004680:	f43f ad88 	beq.w	8004194 <TEST_PostProcess+0x64>
 8004684:	f894 3aa6 	ldrb.w	r3, [r4, #2726]	; 0xaa6
 8004688:	e5c3      	b.n	8004212 <TEST_PostProcess+0xe2>
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 800468a:	461c      	mov	r4, r3
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 800468c:	4b73      	ldr	r3, [pc, #460]	; (800485c <TEST_PostProcess+0x72c>)
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 800468e:	463a      	mov	r2, r7
 8004690:	4973      	ldr	r1, [pc, #460]	; (8004860 <TEST_PostProcess+0x730>)
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 8004692:	4618      	mov	r0, r3
 8004694:	9305      	str	r3, [sp, #20]
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 8004696:	4643      	mov	r3, r8
 8004698:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800469c:	4630      	mov	r0, r6
 800469e:	9400      	str	r4, [sp, #0]
 80046a0:	f01c ff78 	bl	8021594 <siprintf>
      write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 80046a4:	4631      	mov	r1, r6
 80046a6:	f10b 0364 	add.w	r3, fp, #100	; 0x64
 80046aa:	2232      	movs	r2, #50	; 0x32
 80046ac:	486d      	ldr	r0, [pc, #436]	; (8004864 <TEST_PostProcess+0x734>)
 80046ae:	f7fd fa97 	bl	8001be0 <write_txt.isra.0>
 80046b2:	f8d5 43bc 	ldr.w	r4, [r5, #956]	; 0x3bc
 80046b6:	e6af      	b.n	8004418 <TEST_PostProcess+0x2e8>
    double categorical_crossentropy = 10.0;
 80046b8:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80046bc:	e6bf      	b.n	800443e <TEST_PostProcess+0x30e>
      Error_Handler();
 80046be:	f000 fab3 	bl	8004c28 <Error_Handler>
 80046c2:	e620      	b.n	8004306 <TEST_PostProcess+0x1d6>
    Error_Handler();
 80046c4:	f000 fab0 	bl	8004c28 <Error_Handler>
 80046c8:	e62a      	b.n	8004320 <TEST_PostProcess+0x1f0>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80046ca:	4f67      	ldr	r7, [pc, #412]	; (8004868 <TEST_PostProcess+0x738>)
 80046cc:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80046ce:	f604 25bc 	addw	r5, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80046d2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80046d6:	4638      	mov	r0, r7
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 80046d8:	f8c4 6aa0 	str.w	r6, [r4, #2720]	; 0xaa0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80046dc:	703a      	strb	r2, [r7, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80046de:	f000 fa35 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80046e2:	4639      	mov	r1, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	2201      	movs	r2, #1
 80046e8:	f00c ffb4 	bl	8011654 <HAL_UART_Transmit_DMA>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	f040 8088 	bne.w	8004802 <TEST_PostProcess+0x6d2>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80046f2:	4628      	mov	r0, r5
 80046f4:	f00d f9d8 	bl	8011aa8 <HAL_UART_GetState>
 80046f8:	2820      	cmp	r0, #32
 80046fa:	d1fa      	bne.n	80046f2 <TEST_PostProcess+0x5c2>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80046fc:	4628      	mov	r0, r5
 80046fe:	220a      	movs	r2, #10
 8004700:	495a      	ldr	r1, [pc, #360]	; (800486c <TEST_PostProcess+0x73c>)
 8004702:	f00c fff7 	bl	80116f4 <HAL_UART_Receive_DMA>
 8004706:	2800      	cmp	r0, #0
 8004708:	f43f ad44 	beq.w	8004194 <TEST_PostProcess+0x64>
    Error_Handler();
 800470c:	f000 fa8c 	bl	8004c28 <Error_Handler>
    BSP_LED_On(LED_GREEN);
 8004710:	e540      	b.n	8004194 <TEST_PostProcess+0x64>
        if(TestContext_Ptr->NonReg_FirstRun == 0)
 8004712:	f8d4 0b84 	ldr.w	r0, [r4, #2948]	; 0xb84
 8004716:	2800      	cmp	r0, #0
 8004718:	d167      	bne.n	80047ea <TEST_PostProcess+0x6ba>
 800471a:	4b55      	ldr	r3, [pc, #340]	; (8004870 <TEST_PostProcess+0x740>)
        uint32_t issue_ocurence=0;
 800471c:	4602      	mov	r2, r0
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 800471e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8004720:	f103 0648 	add.w	r6, r3, #72	; 0x48
 8004724:	6809      	ldr	r1, [r1, #0]
 8004726:	ecf3 7a01 	vldmia	r3!, {s15}
 800472a:	ecb1 7a01 	vldmia	r1!, {s14}
              issue_ocurence =1;
 800472e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	bf18      	it	ne
 8004738:	2201      	movne	r2, #1
          for(uint32_t i=0; i<AI_NET_OUTPUT_SIZE;i++)
 800473a:	429e      	cmp	r6, r3
 800473c:	d1f3      	bne.n	8004726 <TEST_PostProcess+0x5f6>
          if(issue_ocurence == 1)
 800473e:	2a01      	cmp	r2, #1
 8004740:	9602      	str	r6, [sp, #8]
 8004742:	f000 8105 	beq.w	8004950 <TEST_PostProcess+0x820>
 8004746:	f8d4 0aa8 	ldr.w	r0, [r4, #2728]	; 0xaa8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 800474a:	2702      	movs	r7, #2
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 800474c:	f8d4 2b88 	ldr.w	r2, [r4, #2952]	; 0xb88
 8004750:	4b48      	ldr	r3, [pc, #288]	; (8004874 <TEST_PostProcess+0x744>)
 8004752:	4949      	ldr	r1, [pc, #292]	; (8004878 <TEST_PostProcess+0x748>)
 8004754:	4413      	add	r3, r2
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	eb03 0c01 	add.w	ip, r3, r1
 800475c:	4562      	cmp	r2, ip
 800475e:	f000 80f4 	beq.w	800494a <TEST_PostProcess+0x81a>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004762:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8004880 <TEST_PostProcess+0x750>
 8004766:	4463      	add	r3, ip
 8004768:	429a      	cmp	r2, r3
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 800476a:	bf08      	it	eq
 800476c:	6021      	streq	r1, [r4, #0]
 800476e:	e558      	b.n	8004222 <TEST_PostProcess+0xf2>
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004770:	f04f 0901 	mov.w	r9, #1
        *(aTxBuffer) = cmd_status;
 8004774:	483c      	ldr	r0, [pc, #240]	; (8004868 <TEST_PostProcess+0x738>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004776:	2202      	movs	r2, #2
 8004778:	f44f 61a4 	mov.w	r1, #1312	; 0x520
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 800477c:	f884 9aa4 	strb.w	r9, [r4, #2724]	; 0xaa4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004780:	f604 28bc 	addw	r8, r4, #2748	; 0xabc
        *(aTxBuffer) = cmd_status;
 8004784:	7007      	strb	r7, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004786:	f000 f9e1 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800478a:	4837      	ldr	r0, [pc, #220]	; (8004868 <TEST_PostProcess+0x738>)
 800478c:	464a      	mov	r2, r9
 800478e:	4601      	mov	r1, r0
 8004790:	4640      	mov	r0, r8
 8004792:	f00c ff5f 	bl	8011654 <HAL_UART_Transmit_DMA>
 8004796:	2800      	cmp	r0, #0
 8004798:	f040 80d3 	bne.w	8004942 <TEST_PostProcess+0x812>
 800479c:	9e02      	ldr	r6, [sp, #8]
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800479e:	4640      	mov	r0, r8
 80047a0:	f00d f982 	bl	8011aa8 <HAL_UART_GetState>
 80047a4:	2820      	cmp	r0, #32
 80047a6:	d1fa      	bne.n	800479e <TEST_PostProcess+0x66e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80047a8:	4640      	mov	r0, r8
 80047aa:	220a      	movs	r2, #10
 80047ac:	492f      	ldr	r1, [pc, #188]	; (800486c <TEST_PostProcess+0x73c>)
 80047ae:	9602      	str	r6, [sp, #8]
 80047b0:	f00c ffa0 	bl	80116f4 <HAL_UART_Receive_DMA>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f040 80c1 	bne.w	800493c <TEST_PostProcess+0x80c>
        CAMERA_Disable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80047ba:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80047bc:	f7fc fece 	bl	800155c <CAMERA_Disable_TestBar_Mode>
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80047c0:	2201      	movs	r2, #1
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 80047c2:	2300      	movs	r3, #0
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80047c4:	702a      	strb	r2, [r5, #0]
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 80047c6:	f8d4 2ab8 	ldr.w	r2, [r4, #2744]	; 0xab8
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 80047ca:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 80047ce:	2a01      	cmp	r2, #1
          App_Cxt_Ptr->run_loop = 0;
 80047d0:	bf18      	it	ne
 80047d2:	606b      	strne	r3, [r5, #4]
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 80047d4:	f894 0aa6 	ldrb.w	r0, [r4, #2726]	; 0xaa6
          TestContext_Ptr->UartContext.uart_host_nonreg_run=0;
 80047d8:	bf08      	it	eq
 80047da:	f8c4 3ab8 	streq.w	r3, [r4, #2744]	; 0xab8
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 80047de:	2800      	cmp	r0, #0
 80047e0:	f47f ad41 	bne.w	8004266 <TEST_PostProcess+0x136>
          BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 80047e4:	f005 fd2c 	bl	800a240 <BSP_SD_DeInit>
 80047e8:	e53d      	b.n	8004266 <TEST_PostProcess+0x136>
        if(TestContext_Ptr->NonReg_FirstRun==1)
 80047ea:	2801      	cmp	r0, #1
 80047ec:	f040 80b4 	bne.w	8004958 <TEST_PostProcess+0x828>
          TestContext_Ptr->NonReg_FirstRun=0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	4a22      	ldr	r2, [pc, #136]	; (800487c <TEST_PostProcess+0x74c>)
 80047f4:	f8d4 0aa8 	ldr.w	r0, [r4, #2728]	; 0xaa8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 80047f8:	2702      	movs	r7, #2
 80047fa:	9202      	str	r2, [sp, #8]
          TestContext_Ptr->NonReg_FirstRun=0;
 80047fc:	f8c4 3b84 	str.w	r3, [r4, #2948]	; 0xb84
 8004800:	e7a4      	b.n	800474c <TEST_PostProcess+0x61c>
      Error_Handler();
 8004802:	f000 fa11 	bl	8004c28 <Error_Handler>
 8004806:	e774      	b.n	80046f2 <TEST_PostProcess+0x5c2>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004808:	ed95 7a04 	vldr	s14, [r5, #16]
 800480c:	f10d 0818 	add.w	r8, sp, #24
 8004810:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004848 <TEST_PostProcess+0x718>
          for(int i=0;i<strlen(msg);i++)
 8004814:	f04f 0b00 	mov.w	fp, #0
 8004818:	4f13      	ldr	r7, [pc, #76]	; (8004868 <TEST_PostProcess+0x738>)
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 800481a:	4640      	mov	r0, r8
 800481c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004820:	68ea      	ldr	r2, [r5, #12]
 8004822:	490a      	ldr	r1, [pc, #40]	; (800484c <TEST_PostProcess+0x71c>)
          for(int i=0;i<strlen(msg);i++)
 8004824:	46c2      	mov	sl, r8
 8004826:	9704      	str	r7, [sp, #16]
 8004828:	46b9      	mov	r9, r7
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 800482a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800482e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004832:	ed8d 7b00 	vstr	d7, [sp]
 8004836:	f01c fead 	bl	8021594 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 800483a:	9e02      	ldr	r6, [sp, #8]
 800483c:	e026      	b.n	800488c <TEST_PostProcess+0x75c>
 800483e:	bf00      	nop
 8004840:	080248a8 	.word	0x080248a8
 8004844:	24003040 	.word	0x24003040
 8004848:	42c80000 	.word	0x42c80000
 800484c:	08024094 	.word	0x08024094
 8004850:	24004260 	.word	0x24004260
 8004854:	08024800 	.word	0x08024800
 8004858:	08024830 	.word	0x08024830
 800485c:	24000004 	.word	0x24000004
 8004860:	080247dc 	.word	0x080247dc
 8004864:	08024494 	.word	0x08024494
 8004868:	24003240 	.word	0x24003240
 800486c:	24003220 	.word	0x24003220
 8004870:	d0ddc8a0 	.word	0xd0ddc8a0
 8004874:	000f8049 	.word	0x000f8049
 8004878:	d0dde560 	.word	0xd0dde560
 800487c:	d0ddc8e8 	.word	0xd0ddc8e8
 8004880:	d0ed6660 	.word	0xd0ed6660
            *(aTxBuffer + i) = msg[i];
 8004884:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8004888:	f809 3b01 	strb.w	r3, [r9], #1
          for(int i=0;i<strlen(msg);i++)
 800488c:	4640      	mov	r0, r8
 800488e:	f7fb fd31 	bl	80002f4 <strlen>
 8004892:	4558      	cmp	r0, fp
 8004894:	f10b 0b01 	add.w	fp, fp, #1
 8004898:	d8f4      	bhi.n	8004884 <TEST_PostProcess+0x754>
          *(aTxBuffer + strlen(msg)) = 32;//Space
 800489a:	4607      	mov	r7, r0
 800489c:	2320      	movs	r3, #32
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800489e:	4835      	ldr	r0, [pc, #212]	; (8004974 <TEST_PostProcess+0x844>)
 80048a0:	2202      	movs	r2, #2
 80048a2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80048a6:	9602      	str	r6, [sp, #8]
          *(aTxBuffer + strlen(msg)) = 32;//Space
 80048a8:	55c3      	strb	r3, [r0, r7]
 80048aa:	4606      	mov	r6, r0
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80048ac:	f604 29bc 	addw	r9, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80048b0:	f000 f94c 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 80048b4:	1c7a      	adds	r2, r7, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80048b6:	4631      	mov	r1, r6
 80048b8:	4648      	mov	r0, r9
 80048ba:	b292      	uxth	r2, r2
 80048bc:	f00c feca 	bl	8011654 <HAL_UART_Transmit_DMA>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d14f      	bne.n	8004964 <TEST_PostProcess+0x834>
 80048c4:	9e02      	ldr	r6, [sp, #8]
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80048c6:	4648      	mov	r0, r9
 80048c8:	f00d f8ee 	bl	8011aa8 <HAL_UART_GetState>
 80048cc:	2820      	cmp	r0, #32
 80048ce:	d1fa      	bne.n	80048c6 <TEST_PostProcess+0x796>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80048d0:	68aa      	ldr	r2, [r5, #8]
 80048d2:	4640      	mov	r0, r8
 80048d4:	4928      	ldr	r1, [pc, #160]	; (8004978 <TEST_PostProcess+0x848>)
          for(int i=0;i<strlen(msg);i++)
 80048d6:	f04f 0a00 	mov.w	sl, #0
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80048da:	f01c fe5b 	bl	8021594 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 80048de:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 80048e2:	e003      	b.n	80048ec <TEST_PostProcess+0x7bc>
            *(aTxBuffer + i) = msg[i];
 80048e4:	f817 3b01 	ldrb.w	r3, [r7], #1
 80048e8:	f80b 3b01 	strb.w	r3, [fp], #1
          for(int i=0;i<strlen(msg);i++)
 80048ec:	4640      	mov	r0, r8
 80048ee:	f7fb fd01 	bl	80002f4 <strlen>
 80048f2:	4550      	cmp	r0, sl
 80048f4:	f10a 0a01 	add.w	sl, sl, #1
 80048f8:	d8f4      	bhi.n	80048e4 <TEST_PostProcess+0x7b4>
          *(aTxBuffer + strlen(msg)) = 13;//CR
 80048fa:	9602      	str	r6, [sp, #8]
 80048fc:	4607      	mov	r7, r0
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80048fe:	4e1d      	ldr	r6, [pc, #116]	; (8004974 <TEST_PostProcess+0x844>)
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004900:	210d      	movs	r1, #13
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004902:	2202      	movs	r2, #2
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004904:	1833      	adds	r3, r6, r0
 8004906:	200a      	movs	r0, #10
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004908:	55f1      	strb	r1, [r6, r7]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800490a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 800490e:	7058      	strb	r0, [r3, #1]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004910:	4630      	mov	r0, r6
 8004912:	f000 f91b 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004916:	1cba      	adds	r2, r7, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004918:	4631      	mov	r1, r6
 800491a:	4648      	mov	r0, r9
 800491c:	b292      	uxth	r2, r2
 800491e:	f00c fe99 	bl	8011654 <HAL_UART_Transmit_DMA>
 8004922:	bb18      	cbnz	r0, 800496c <TEST_PostProcess+0x83c>
 8004924:	9e02      	ldr	r6, [sp, #8]
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004926:	4648      	mov	r0, r9
 8004928:	f00d f8be 	bl	8011aa8 <HAL_UART_GetState>
 800492c:	2820      	cmp	r0, #32
 800492e:	d1fa      	bne.n	8004926 <TEST_PostProcess+0x7f6>
 8004930:	9602      	str	r6, [sp, #8]
 8004932:	e481      	b.n	8004238 <TEST_PostProcess+0x108>
          CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004934:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8004936:	f7fc fddf 	bl	80014f8 <CAMERA_Enable_TestBar_Mode>
 800493a:	e693      	b.n	8004664 <TEST_PostProcess+0x534>
    Error_Handler();
 800493c:	f000 f974 	bl	8004c28 <Error_Handler>
 8004940:	e73b      	b.n	80047ba <TEST_PostProcess+0x68a>
      Error_Handler();
 8004942:	f000 f971 	bl	8004c28 <Error_Handler>
 8004946:	9e02      	ldr	r6, [sp, #8]
 8004948:	e729      	b.n	800479e <TEST_PostProcess+0x66e>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <TEST_PostProcess+0x84c>)
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	e468      	b.n	8004222 <TEST_PostProcess+0xf2>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8004950:	2300      	movs	r3, #0
 8004952:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
            cmd_status=CMD_COMPLETE_FAILURE_EVT;
 8004956:	e6f9      	b.n	800474c <TEST_PostProcess+0x61c>
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <TEST_PostProcess+0x850>)
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 800495a:	2702      	movs	r7, #2
 800495c:	f8d4 0aa8 	ldr.w	r0, [r4, #2728]	; 0xaa8
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	e6f3      	b.n	800474c <TEST_PostProcess+0x61c>
      Error_Handler();
 8004964:	f000 f960 	bl	8004c28 <Error_Handler>
 8004968:	9e02      	ldr	r6, [sp, #8]
 800496a:	e7ac      	b.n	80048c6 <TEST_PostProcess+0x796>
 800496c:	f000 f95c 	bl	8004c28 <Error_Handler>
 8004970:	9e02      	ldr	r6, [sp, #8]
 8004972:	e7d8      	b.n	8004926 <TEST_PostProcess+0x7f6>
 8004974:	24003240 	.word	0x24003240
 8004978:	080240a0 	.word	0x080240a0
 800497c:	d0ed6660 	.word	0xd0ed6660
 8004980:	d0ddc8e8 	.word	0xd0ddc8e8

08004984 <HAL_UART_ErrorCallback>:
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  while(1);
 8004984:	e7fe      	b.n	8004984 <HAL_UART_ErrorCallback>
 8004986:	bf00      	nop

08004988 <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8004988:	b510      	push	{r4, lr}
 800498a:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 800498c:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 800498e:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004990:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8004994:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004996:	635a      	str	r2, [r3, #52]	; 0x34
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8004998:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 800499c:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 80049a0:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 80049a4:	f003 fd0a 	bl	80083bc <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 80049a8:	2001      	movs	r0, #1
 80049aa:	f003 fd07 	bl	80083bc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80049ae:	2002      	movs	r0, #2
 80049b0:	f003 fd04 	bl	80083bc <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80049b4:	2003      	movs	r0, #3
 80049b6:	f003 fd01 	bl	80083bc <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 80049ba:	4621      	mov	r1, r4
 80049bc:	4620      	mov	r0, r4
 80049be:	221f      	movs	r2, #31
 80049c0:	f003 fdb6 	bl	8008530 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80049c4:	4621      	mov	r1, r4
 80049c6:	4620      	mov	r0, r4
}
 80049c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80049cc:	f003 bd54 	b.w	8008478 <BSP_PB_Init>

080049d0 <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 80049d0:	f005 bdbc 	b.w	800a54c <HAL_GetTick>

080049d4 <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	b087      	sub	sp, #28
 80049da:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80049dc:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80049e0:	2e04      	cmp	r6, #4
 80049e2:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80049e6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80049ea:	e9dd 5712 	ldrd	r5, r7, [sp, #72]	; 0x48
 80049ee:	e9dd 4b15 	ldrd	r4, fp, [sp, #84]	; 0x54
 80049f2:	9105      	str	r1, [sp, #20]
 80049f4:	d82c      	bhi.n	8004a50 <UTILS_Dma2d_Memcpy+0x7c>
 80049f6:	4824      	ldr	r0, [pc, #144]	; (8004a88 <UTILS_Dma2d_Memcpy+0xb4>)
 80049f8:	fb05 2203 	mla	r2, r5, r3, r2
 80049fc:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 8004a00:	fb03 f902 	mul.w	r9, r3, r2
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004a04:	4821      	ldr	r0, [pc, #132]	; (8004a8c <UTILS_Dma2d_Memcpy+0xb8>)
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
  hlcd_dma2d.Init.ColorMode = output_color_format;

  /* Output offset in pixels == nb of pixels to be added at end of line to come to the  */
  /* first pixel of the next line : on the output side of the DMA2D computation         */
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004a06:	eba5 050a 	sub.w	r5, r5, sl
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004a0a:	f007 fc61 	bl	800c2d0 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	4c1e      	ldr	r4, [pc, #120]	; (8004a8c <UTILS_Dma2d_Memcpy+0xb8>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;
 8004a12:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004a16:	bf14      	ite	ne
 8004a18:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8004a1c:	2200      	moveq	r2, #0
  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004a1e:	f1bb 0100 	subs.w	r1, fp, #0
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004a22:	f04f 0801 	mov.w	r8, #1
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004a26:	60e5      	str	r5, [r4, #12]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004a28:	f04f 05ff 	mov.w	r5, #255	; 0xff
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004a2c:	bf18      	it	ne
 8004a2e:	2101      	movne	r1, #1

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004a30:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8004a32:	64a7      	str	r7, [r4, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004a34:	65a1      	str	r1, [r4, #88]	; 0x58
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004a36:	6525      	str	r5, [r4, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004a38:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004a3a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
  hlcd_dma2d.Init.ColorMode = output_color_format;
 8004a3e:	60a6      	str	r6, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004a40:	6062      	str	r2, [r4, #4]
  hlcd_dma2d.XferCpltCallback = NULL;
 8004a42:	6223      	str	r3, [r4, #32]
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004a44:	f007 fc00 	bl	800c248 <HAL_DMA2D_Init>
 8004a48:	b128      	cbz	r0, 8004a56 <UTILS_Dma2d_Memcpy+0x82>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8004a4a:	b007      	add	sp, #28
 8004a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8004a50:	f04f 0900 	mov.w	r9, #0
 8004a54:	e7d6      	b.n	8004a04 <UTILS_Dma2d_Memcpy+0x30>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004a56:	4641      	mov	r1, r8
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f007 fe4b 	bl	800c6f4 <HAL_DMA2D_ConfigLayer>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d1f3      	bne.n	8004a4a <UTILS_Dma2d_Memcpy+0x76>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8004a62:	9b05      	ldr	r3, [sp, #20]
 8004a64:	4620      	mov	r0, r4
 8004a66:	9a04      	ldr	r2, [sp, #16]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4653      	mov	r3, sl
 8004a6c:	444a      	add	r2, r9
 8004a6e:	9903      	ldr	r1, [sp, #12]
 8004a70:	f007 fcb4 	bl	800c3dc <HAL_DMA2D_Start>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d1e8      	bne.n	8004a4a <UTILS_Dma2d_Memcpy+0x76>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	211e      	movs	r1, #30
}
 8004a7c:	b007      	add	sp, #28
 8004a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004a82:	f007 bd07 	b.w	800c494 <HAL_DMA2D_PollForTransfer>
 8004a86:	bf00      	nop
 8004a88:	080248d0 	.word	0x080248d0
 8004a8c:	240064c4 	.word	0x240064c4

08004a90 <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004a90:	2100      	movs	r1, #0
{
 8004a92:	b538      	push	{r3, r4, r5, lr}
 8004a94:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004a96:	4608      	mov	r0, r1
 8004a98:	f003 fddc 	bl	8008654 <BSP_JOY_GetState>
 8004a9c:	b2c0      	uxtb	r0, r0
 8004a9e:	1e83      	subs	r3, r0, #2
 8004aa0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28

  switch (Joystick_Ctx_Ptr->joyState)
 8004aa4:	2b0e      	cmp	r3, #14
 8004aa6:	d809      	bhi.n	8004abc <UTILS_Joystick_Check+0x2c>
 8004aa8:	e8df f003 	tbb	[pc, r3]
 8004aac:	081c082f 	.word	0x081c082f
 8004ab0:	08290808 	.word	0x08290808
 8004ab4:	08080808 	.word	0x08080808
 8004ab8:	0808      	.short	0x0808
 8004aba:	23          	.byte	0x23
 8004abb:	00          	.byte	0x00

    default:
      break;
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8004abc:	2810      	cmp	r0, #16
 8004abe:	d817      	bhi.n	8004af0 <UTILS_Joystick_Check+0x60>
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <UTILS_Joystick_Check+0xb8>)
 8004ac2:	40c3      	lsrs	r3, r0
 8004ac4:	07db      	lsls	r3, r3, #31
 8004ac6:	d529      	bpl.n	8004b1c <UTILS_Joystick_Check+0x8c>
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004ac8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004aca:	2000      	movs	r0, #0
 8004acc:	f004 fd76 	bl	80095bc <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004ad0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f004 fd96 	bl	8009604 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ada:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8004adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004ae0:	f005 bb9a 	b.w	800a218 <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8004ae4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ae6:	1cda      	adds	r2, r3, #3
 8004ae8:	da15      	bge.n	8004b16 <UTILS_Joystick_Check+0x86>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8004aea:	2300      	movs	r3, #0
 8004aec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8004af2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af4:	2b63      	cmp	r3, #99	; 0x63
 8004af6:	dcf8      	bgt.n	8004aea <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 8004af8:	330a      	adds	r3, #10
 8004afa:	6363      	str	r3, [r4, #52]	; 0x34
 8004afc:	e7e4      	b.n	8004ac8 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 8004afe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	dcf2      	bgt.n	8004aea <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast++;
 8004b04:	3301      	adds	r3, #1
 8004b06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b08:	e7de      	b.n	8004ac8 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8004b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	ddec      	ble.n	8004aea <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8004b10:	3b0a      	subs	r3, #10
 8004b12:	6363      	str	r3, [r4, #52]	; 0x34
 8004b14:	e7d8      	b.n	8004ac8 <UTILS_Joystick_Check+0x38>
        Joystick_Ctx_Ptr->camContrast--;
 8004b16:	3b01      	subs	r3, #1
 8004b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b1a:	e7d5      	b.n	8004ac8 <UTILS_Joystick_Check+0x38>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8004b1c:	2801      	cmp	r0, #1
 8004b1e:	d1e7      	bne.n	8004af0 <UTILS_Joystick_Check+0x60>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004b20:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004b22:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004b24:	4629      	mov	r1, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004b26:	6363      	str	r3, [r4, #52]	; 0x34
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004b28:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004b2a:	62e5      	str	r5, [r4, #44]	; 0x2c
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8004b2c:	6325      	str	r5, [r4, #48]	; 0x30
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004b2e:	f004 fd45 	bl	80095bc <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004b32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b34:	4628      	mov	r0, r5
 8004b36:	f004 fd65 	bl	8009604 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 8004b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004b42:	f005 bb69 	b.w	800a218 <BSP_LCD_SetBrightness>
 8004b46:	bf00      	nop
 8004b48:	00010114 	.word	0x00010114

08004b4c <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 8004b4c:	ea40 0301 	orr.w	r3, r0, r1
 8004b50:	06db      	lsls	r3, r3, #27
 8004b52:	d104      	bne.n	8004b5e <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8004b54:	2a01      	cmp	r2, #1
 8004b56:	d003      	beq.n	8004b60 <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 8004b58:	2a02      	cmp	r2, #2
 8004b5a:	d016      	beq.n	8004b8a <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 8004b5c:	4770      	bx	lr
    while(1);
 8004b5e:	e7fe      	b.n	8004b5e <UTILS_DCache_Coherency_Maintenance+0x12>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b60:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8004b64:	2900      	cmp	r1, #0
 8004b66:	dd0b      	ble.n	8004b80 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004b68:	1e4b      	subs	r3, r1, #1
 8004b6a:	f100 0220 	add.w	r2, r0, #32
      SCB->DCIMVAC = op_addr;
 8004b6e:	490f      	ldr	r1, [pc, #60]	; (8004bac <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004b70:	f023 031f 	bic.w	r3, r3, #31
 8004b74:	4413      	add	r3, r2
 8004b76:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004b7a:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004b7c:	4283      	cmp	r3, r0
 8004b7e:	d1fa      	bne.n	8004b76 <UTILS_DCache_Coherency_Maintenance+0x2a>
 8004b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b84:	f3bf 8f6f 	isb	sy
}
 8004b88:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 8004b8a:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	ddf6      	ble.n	8004b80 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004b92:	1e4b      	subs	r3, r1, #1
 8004b94:	f100 0220 	add.w	r2, r0, #32
      SCB->DCCMVAC = op_addr;
 8004b98:	4904      	ldr	r1, [pc, #16]	; (8004bac <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004b9a:	f023 031f 	bic.w	r3, r3, #31
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004ba4:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004ba6:	4298      	cmp	r0, r3
 8004ba8:	d1fa      	bne.n	8004ba0 <UTILS_DCache_Coherency_Maintenance+0x54>
 8004baa:	e7e9      	b.n	8004b80 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	dd24      	ble.n	8004bfe <UTILS_Bubblesort+0x4e>
 8004bb4:	468c      	mov	ip, r1
 8004bb6:	1e51      	subs	r1, r2, #1
{
 8004bb8:	b4f0      	push	{r4, r5, r6, r7}
 8004bba:	1f05      	subs	r5, r0, #4
 8004bbc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 8004bc0:	b1d9      	cbz	r1, 8004bfa <UTILS_Bubblesort+0x4a>
 8004bc2:	4663      	mov	r3, ip
 8004bc4:	1d04      	adds	r4, r0, #4
 8004bc6:	4602      	mov	r2, r0
    {
      if (prob[ii] < prob[ii + 1])
 8004bc8:	ecf2 7a01 	vldmia	r2!, {s15}
 8004bcc:	ecb4 7a01 	vldmia	r4!, {s14}
 8004bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	d507      	bpl.n	8004bea <UTILS_Bubblesort+0x3a>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 8004bda:	e9d3 7600 	ldrd	r7, r6, [r3]
        prob[ii] = prob[ii + 1];
 8004bde:	ed02 7a01 	vstr	s14, [r2, #-4]
        prob[ii + 1] = p;
 8004be2:	ed44 7a01 	vstr	s15, [r4, #-4]
        classes[ii] = classes[ii + 1];
 8004be6:	e9c3 6700 	strd	r6, r7, [r3]
    for (int ii = 0; ii < size - i - 1; ii++)
 8004bea:	42aa      	cmp	r2, r5
 8004bec:	f103 0304 	add.w	r3, r3, #4
 8004bf0:	d1ea      	bne.n	8004bc8 <UTILS_Bubblesort+0x18>
  for (int i = 0; i < size; i++)
 8004bf2:	3901      	subs	r1, #1
 8004bf4:	3d04      	subs	r5, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d1e3      	bne.n	8004bc2 <UTILS_Bubblesort+0x12>
        classes[ii + 1] = c;
      }
    }
  }
}
 8004bfa:	bcf0      	pop	{r4, r5, r6, r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	4770      	bx	lr

08004c00 <UTILS_Compute_ExecutionTiming>:
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004c00:	6901      	ldr	r1, [r0, #16]
 8004c02:	6882      	ldr	r2, [r0, #8]
{
 8004c04:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004c06:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004c0a:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004c0c:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 8004c0e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004c10:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004c12:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004c14:	d203      	bcs.n	8004c1e <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004c16:	68c3      	ldr	r3, [r0, #12]
 8004c18:	6845      	ldr	r5, [r0, #4]
 8004c1a:	442b      	add	r3, r5
 8004c1c:	4413      	add	r3, r2
 8004c1e:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif
  
  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004c20:	60a1      	str	r1, [r4, #8]
}
 8004c22:	bc30      	pop	{r4, r5}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop

08004c28 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8004c28:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f003 fc04 	bl	8008438 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8004c30:	2001      	movs	r0, #1
 8004c32:	f003 fc01 	bl	8008438 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8004c36:	2002      	movs	r0, #2
 8004c38:	f003 fbfe 	bl	8008438 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8004c3c:	2003      	movs	r0, #3
 8004c3e:	f003 fbfb 	bl	8008438 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 8004c42:	2002      	movs	r0, #2
 8004c44:	f003 fbe8 	bl	8008418 <BSP_LED_On>
  while (1)
 8004c48:	e7fe      	b.n	8004c48 <Error_Handler+0x20>
 8004c4a:	bf00      	nop

08004c4c <main>:
{
 8004c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c50:	b09e      	sub	sp, #120	; 0x78
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8004c52:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
  HAL_MPU_Disable();
 8004c56:	f005 fd27 	bl	800a6a8 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c5a:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004c5c:	4a89      	ldr	r2, [pc, #548]	; (8004e84 <main+0x238>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004c5e:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004c60:	4b89      	ldr	r3, [pc, #548]	; (8004e88 <main+0x23c>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c62:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8004c66:	940b      	str	r4, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004c68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004c6c:	f005 fd3e 	bl	800a6ec <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004c70:	2004      	movs	r0, #4
 8004c72:	f005 fd29 	bl	800a6c8 <HAL_MPU_Enable>
 8004c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c7a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004c7e:	4b83      	ldr	r3, [pc, #524]	; (8004e8c <main+0x240>)
 8004c80:	2100      	movs	r1, #0
 8004c82:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c8a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c94:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c9a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004c9e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004ca6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004caa:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004cae:	f3c0 314e 	ubfx	r1, r0, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004cb2:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8004cb6:	0149      	lsls	r1, r1, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cb8:	ea01 0506 	and.w	r5, r1, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004cbc:	4602      	mov	r2, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cbe:	ea45 7482 	orr.w	r4, r5, r2, lsl #30
      } while (ways-- != 0U);
 8004cc2:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cc4:	f8c3 4260 	str.w	r4, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8004cc8:	1c54      	adds	r4, r2, #1
 8004cca:	d1f8      	bne.n	8004cbe <main+0x72>
    } while(sets-- != 0U);
 8004ccc:	3920      	subs	r1, #32
 8004cce:	f111 0f20 	cmn.w	r1, #32
 8004cd2:	d1f1      	bne.n	8004cb8 <main+0x6c>
 8004cd4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cde:	615a      	str	r2, [r3, #20]
 8004ce0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ce4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004ce8:	f005 fbf4 	bl	800a4d4 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004cec:	2004      	movs	r0, #4
 8004cee:	f009 faa9 	bl	800e244 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf2:	4a67      	ldr	r2, [pc, #412]	; (8004e90 <main+0x244>)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cfa:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <main+0x248>)
 8004cfc:	f021 0101 	bic.w	r1, r1, #1
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8004d00:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d06:	f002 0201 	and.w	r2, r2, #1
 8004d0a:	9200      	str	r2, [sp, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004d12:	619a      	str	r2, [r3, #24]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	9b00      	ldr	r3, [sp, #0]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8004d1e:	6983      	ldr	r3, [r0, #24]
 8004d20:	049b      	lsls	r3, r3, #18
 8004d22:	d5fc      	bpl.n	8004d1e <main+0xd2>
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004d24:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d26:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d28:	2601      	movs	r6, #1
 8004d2a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004d2e:	2505      	movs	r5, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004d30:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d32:	2204      	movs	r2, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004d34:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8004d36:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004d38:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004d3a:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d3c:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004d3e:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004d40:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d42:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004d44:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004d48:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d4a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004d4e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d50:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004d54:	f009 fb36 	bl	800e3c4 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f040 8090 	bne.w	8004e7e <main+0x232>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004d5e:	223f      	movs	r2, #63	; 0x3f
 8004d60:	2303      	movs	r3, #3
 8004d62:	2600      	movs	r6, #0
 8004d64:	2708      	movs	r7, #8
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004d66:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004d68:	2540      	movs	r5, #64	; 0x40
 8004d6a:	2440      	movs	r4, #64	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004d6c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004d6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d76:	2340      	movs	r3, #64	; 0x40
 8004d78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004d80:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004d84:	f009 feb8 	bl	800eaf8 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d178      	bne.n	8004e7e <main+0x232>
  __HAL_RCC_CSI_ENABLE();
 8004d8c:	4e42      	ldr	r6, [pc, #264]	; (8004e98 <main+0x24c>)
    App_Context.run_loop = 1;
 8004d8e:	f04f 0801 	mov.w	r8, #1
  APP_Init(&App_Context);
 8004d92:	4c42      	ldr	r4, [pc, #264]	; (8004e9c <main+0x250>)
  __HAL_RCC_CSI_ENABLE();
 8004d94:	6833      	ldr	r3, [r6, #0]
    APP_GetNextReadyFrame(&App_Context);
 8004d96:	4625      	mov	r5, r4
    UTIL_LCD_SetFont(&Font24);
 8004d98:	4f41      	ldr	r7, [pc, #260]	; (8004ea0 <main+0x254>)
  __HAL_RCC_CSI_ENABLE();
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9e:	6033      	str	r3, [r6, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da0:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
 8004dac:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	9b01      	ldr	r3, [sp, #4]
  HAL_EnableCompensationCell();
 8004db8:	f005 fbe6 	bl	800a588 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 8004dbc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  APP_Init(&App_Context);
 8004dc0:	4620      	mov	r0, r4
  __HAL_RCC_CRC_CLK_ENABLE();
 8004dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc6:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8004dca:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8004dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  APP_Init(&App_Context);
 8004dd6:	f7fb ff87 	bl	8000ce8 <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 8004dda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004ddc:	f7fe f858 	bl	8002e90 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 8004de0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004de2:	f7ff fdd1 	bl	8004988 <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 8004de6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004de8:	f7fc fc44 	bl	8001674 <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 8004dec:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004dee:	f7fb fdf5 	bl	80009dc <AI_Init>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 8004df2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004df4:	f7fc fc90 	bl	8001718 <DISPLAY_WelcomeScreen>
 8004df8:	4606      	mov	r6, r0
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8004dfa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004dfc:	bb76      	cbnz	r6, 8004e5c <main+0x210>
 8004dfe:	f8d0 3aa0 	ldr.w	r3, [r0, #2720]	; 0xaa0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d02a      	beq.n	8004e5c <main+0x210>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004e06:	7823      	ldrb	r3, [r4, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d02c      	beq.n	8004e66 <main+0x21a>
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d02a      	beq.n	8004e66 <main+0x21a>
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d02c      	beq.n	8004e6e <main+0x222>
  while(App_Context.run_loop)
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	b1bb      	cbz	r3, 8004e48 <main+0x1fc>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 8004e18:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004e1a:	f7ff fe39 	bl	8004a90 <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 8004e1e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004e20:	f7fe f902 	bl	8003028 <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 8004e24:	4628      	mov	r0, r5
 8004e26:	f7fb ffbb 	bl	8000da0 <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7fc f870 	bl	8000f10 <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 8004e30:	4628      	mov	r0, r5
 8004e32:	f7fc f88b 	bl	8000f4c <APP_FramePreprocess>
    APP_NetworkInference(&App_Context);
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7fc f88a 	bl	8000f50 <APP_NetworkInference>
    APP_Postprocess(&App_Context);  
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f7fc f8b9 	bl	8000fb4 <APP_Postprocess>
  while(App_Context.run_loop)
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e7      	bne.n	8004e18 <main+0x1cc>
    AI_Deinit();
 8004e48:	f7fb ff4c 	bl	8000ce4 <AI_Deinit>
    UTIL_LCD_SetFont(&Font24);
 8004e4c:	4638      	mov	r0, r7
    App_Context.run_loop = 1;
 8004e4e:	f8c4 8004 	str.w	r8, [r4, #4]
    UTIL_LCD_SetFont(&Font24);
 8004e52:	f015 f835 	bl	8019ec0 <UTIL_LCD_SetFont>
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8004e56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	d0d0      	beq.n	8004dfe <main+0x1b2>
    TEST_MainMenu(App_Context.Test_ContextPtr);
 8004e5c:	f7fe f94c 	bl	80030f8 <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004e60:	7823      	ldrb	r3, [r4, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d1d2      	bne.n	8004e0c <main+0x1c0>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8004e66:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004e68:	f7fc fa64 	bl	8001334 <CAMERA_Init>
 8004e6c:	e7d2      	b.n	8004e14 <main+0x1c8>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004e6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d1ce      	bne.n	8004e14 <main+0x1c8>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8004e76:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004e78:	f7fc fa5c 	bl	8001334 <CAMERA_Init>
 8004e7c:	e7ca      	b.n	8004e14 <main+0x1c8>
    Error_Handler();
 8004e7e:	f7ff fed3 	bl	8004c28 <Error_Handler>
 8004e82:	bf00      	nop
 8004e84:	03010018 	.word	0x03010018
 8004e88:	01010000 	.word	0x01010000
 8004e8c:	e000ed00 	.word	0xe000ed00
 8004e90:	58000400 	.word	0x58000400
 8004e94:	58024800 	.word	0x58024800
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	24005500 	.word	0x24005500
 8004ea0:	24003048 	.word	0x24003048

08004ea4 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	b0a0      	sub	sp, #128	; 0x80
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004eac:	f015 fdae 	bl	801aa0c <ai_platform_context_acquire>

  if (report && net_ctx)
 8004eb0:	1e04      	subs	r4, r0, #0
 8004eb2:	bf18      	it	ne
 8004eb4:	2401      	movne	r4, #1
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	bf08      	it	eq
 8004eba:	2400      	moveq	r4, #0
 8004ebc:	b914      	cbnz	r4, 8004ec4 <ai_network_get_info+0x20>

    *report = r;
    return true;
  }
  return false;
}
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	b020      	add	sp, #128	; 0x80
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
    ai_network_report r = {
 8004ec4:	226c      	movs	r2, #108	; 0x6c
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	a805      	add	r0, sp, #20
 8004eca:	f01b fe2b 	bl	8020b24 <memset>
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <ai_network_get_info+0x84>)
 8004ed0:	4916      	ldr	r1, [pc, #88]	; (8004f2c <ai_network_get_info+0x88>)
 8004ed2:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <ai_network_get_info+0x8c>)
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <ai_network_get_info+0x90>)
 8004ed8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004edc:	9304      	str	r3, [sp, #16]
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004ede:	f015 fb67 	bl	801a5b0 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004ee2:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004ee4:	f015 fbe2 	bl	801a6ac <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004ee8:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <ai_network_get_info+0x94>)
 8004eea:	f240 1307 	movw	r3, #263	; 0x107
 8004eee:	e9cd 0206 	strd	r0, r2, [sp, #24]
 8004ef2:	f8ad 3020 	strh.w	r3, [sp, #32]
      .api_version            = ai_platform_api_get_version(),
 8004ef6:	f015 fc69 	bl	801a7cc <ai_platform_api_get_version>
 8004efa:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004efc:	f015 fcf6 	bl	801a8ec <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <ai_network_get_info+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004f02:	4602      	mov	r2, r0
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004f04:	a901      	add	r1, sp, #4
 8004f06:	4630      	mov	r0, r6
    ai_network_report r = {
 8004f08:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004f0c:	f015 fe08 	bl	801ab20 <ai_platform_api_get_network_report>
 8004f10:	4604      	mov	r4, r0
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0d3      	beq.n	8004ebe <ai_network_get_info+0x1a>
    *report = r;
 8004f16:	a901      	add	r1, sp, #4
 8004f18:	4628      	mov	r0, r5
 8004f1a:	227c      	movs	r2, #124	; 0x7c
 8004f1c:	f01b fdda 	bl	8020ad4 <memcpy>
}
 8004f20:	4620      	mov	r0, r4
 8004f22:	b020      	add	sp, #128	; 0x80
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	bf00      	nop
 8004f28:	080248e4 	.word	0x080248e4
 8004f2c:	080248ec 	.word	0x080248ec
 8004f30:	08024910 	.word	0x08024910
 8004f34:	0802492c 	.word	0x0802492c
 8004f38:	080246c0 	.word	0x080246c0
 8004f3c:	00b41334 	.word	0x00b41334

08004f40 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004f40:	b530      	push	{r4, r5, lr}
  return ai_platform_network_create(
 8004f42:	2500      	movs	r5, #0
{
 8004f44:	b083      	sub	sp, #12
  return ai_platform_network_create(
 8004f46:	2405      	movs	r4, #5
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <ai_network_create+0x18>)
 8004f4c:	e9cd 4500 	strd	r4, r5, [sp]
 8004f50:	f016 fa14 	bl	801b37c <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004f54:	b003      	add	sp, #12
 8004f56:	bd30      	pop	{r4, r5, pc}
 8004f58:	24001644 	.word	0x24001644

08004f5c <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004f5c:	f016 bbae 	b.w	801b6bc <ai_platform_network_destroy>

08004f60 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	ed2d 8b02 	vpush	{d8}
 8004f68:	b089      	sub	sp, #36	; 0x24
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	ee08 1a10 	vmov	s16, r1
 8004f70:	9002      	str	r0, [sp, #8]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004f72:	f016 fc95 	bl	801b8a0 <ai_platform_network_init>
  if (!net_ctx) return false;
 8004f76:	9001      	str	r0, [sp, #4]
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f000 838d 	beq.w	8005698 <ai_network_init+0x738>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004f7e:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004f80:	4622      	mov	r2, r4
 8004f82:	2101      	movs	r1, #1
 8004f84:	a807      	add	r0, sp, #28
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004f86:	9307      	str	r3, [sp, #28]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004f88:	f015 fa64 	bl	801a454 <ai_platform_get_weights_map>
 8004f8c:	9003      	str	r0, [sp, #12]
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f000 8387 	beq.w	80056a2 <ai_network_init+0x742>
    quantize_conv1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f94:	4dd7      	ldr	r5, [pc, #860]	; (80052f4 <ai_network_init+0x394>)
    quantize_conv_pw_4_conv2d_bias_array.data = AI_PTR(weights_map[0] + 5424);
 8004f96:	f241 5b30 	movw	fp, #5424	; 0x1530
    quantize_conv_dw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f9a:	4cd7      	ldr	r4, [pc, #860]	; (80052f8 <ai_network_init+0x398>)
    quantize_conv1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f9c:	682e      	ldr	r6, [r5, #0]
    quantize_conv1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f9e:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 800535c <ai_network_init+0x3fc>
    quantize_conv_dw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fa2:	48d6      	ldr	r0, [pc, #856]	; (80052fc <ai_network_init+0x39c>)
    quantize_conv1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fa4:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    quantize_conv_dw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fa8:	6826      	ldr	r6, [r4, #0]
    quantize_conv_pw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004faa:	4ad5      	ldr	r2, [pc, #852]	; (8005300 <ai_network_init+0x3a0>)
    quantize_conv1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fac:	f8dc 7000 	ldr.w	r7, [ip]
    quantize_conv_dw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb0:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    quantize_conv_dw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fb4:	6806      	ldr	r6, [r0, #0]
    quantize_conv_pw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb6:	49d3      	ldr	r1, [pc, #844]	; (8005304 <ai_network_init+0x3a4>)
    quantize_conv1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb8:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    quantize_conv_dw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fbc:	4bd2      	ldr	r3, [pc, #840]	; (8005308 <ai_network_init+0x3a8>)
    quantize_conv_dw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fbe:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    quantize_conv_pw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fc2:	6816      	ldr	r6, [r2, #0]
    quantize_conv_dw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fc4:	f8df e398 	ldr.w	lr, [pc, #920]	; 8005360 <ai_network_init+0x400>
    quantize_conv1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fc8:	f8cc 7000 	str.w	r7, [ip]
    quantize_conv_dw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fcc:	f8c4 8000 	str.w	r8, [r4]
    quantize_conv_pw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fd0:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    quantize_conv_pw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fd4:	680f      	ldr	r7, [r1, #0]
    quantize_conv_dw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fd6:	681e      	ldr	r6, [r3, #0]
    quantize_conv_dw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fd8:	f8c0 9000 	str.w	r9, [r0]
    quantize_conv_pw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fdc:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    quantize_conv_dw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fe0:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    quantize_conv_dw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fe4:	f8de 6000 	ldr.w	r6, [lr]
    quantize_conv_pw_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fe8:	600f      	str	r7, [r1, #0]
    quantize_conv_dw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fea:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    quantize_conv1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004fee:	9f07      	ldr	r7, [sp, #28]
    quantize_conv_pw_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff0:	f8c2 8000 	str.w	r8, [r2]
    quantize_conv_dw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff4:	f8ce 6000 	str.w	r6, [lr]
    quantize_conv1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 216);
 8004ff8:	f107 08d8 	add.w	r8, r7, #216	; 0xd8
    quantize_conv_dw_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 248);
 8004ffc:	f107 06f8 	add.w	r6, r7, #248	; 0xf8
    quantize_conv1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005000:	f8c5 a000 	str.w	sl, [r5]
    quantize_conv_dw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005004:	f8c3 9000 	str.w	r9, [r3]
    quantize_conv_pw_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 352);
 8005008:	f507 7ab0 	add.w	sl, r7, #352	; 0x160
    quantize_conv_pw_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 480);
 800500c:	f507 79f0 	add.w	r9, r7, #480	; 0x1e0
    quantize_conv1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8005010:	f8cc 7008 	str.w	r7, [ip, #8]
 8005014:	f8cc 700c 	str.w	r7, [ip, #12]
    quantize_conv_dw_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 320);
 8005018:	f507 7ca0 	add.w	ip, r7, #320	; 0x140
    quantize_conv_pw_4_conv2d_bias_array.data = AI_PTR(weights_map[0] + 5424);
 800501c:	44bb      	add	fp, r7
    quantize_conv1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 216);
 800501e:	e9c5 8802 	strd	r8, r8, [r5, #8]
    quantize_conv_dw_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 248);
 8005022:	e9c4 6602 	strd	r6, r6, [r4, #8]
    quantize_conv_pw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005026:	f8df 833c 	ldr.w	r8, [pc, #828]	; 8005364 <ai_network_init+0x404>
    quantize_conv_dw_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 544);
 800502a:	f507 7608 	add.w	r6, r7, #544	; 0x220
    quantize_conv_dw_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 688);
 800502e:	f507 752c 	add.w	r5, r7, #688	; 0x2b0
    quantize_conv_dw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005032:	4cb6      	ldr	r4, [pc, #728]	; (800530c <ai_network_init+0x3ac>)
    quantize_conv_dw_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 320);
 8005034:	e9c0 cc02 	strd	ip, ip, [r0, #8]
    quantize_conv_pw_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 352);
 8005038:	e9c1 aa02 	strd	sl, sl, [r1, #8]
    quantize_conv_pw_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 480);
 800503c:	e9c2 9902 	strd	r9, r9, [r2, #8]
    quantize_conv_dw_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 544);
 8005040:	e9c3 6602 	strd	r6, r6, [r3, #8]
    quantize_conv_dw_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 688);
 8005044:	e9ce 5502 	strd	r5, r5, [lr, #8]
    quantize_conv_pw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005048:	f8d8 6000 	ldr.w	r6, [r8]
    quantize_conv_pw_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 752);
 800504c:	f507 7e3c 	add.w	lr, r7, #752	; 0x2f0
    quantize_conv_pw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005050:	f8df c314 	ldr.w	ip, [pc, #788]	; 8005368 <ai_network_init+0x408>
    quantize_conv_pw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005054:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    quantize_conv_dw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005058:	48ad      	ldr	r0, [pc, #692]	; (8005310 <ai_network_init+0x3b0>)
    quantize_conv_pw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800505a:	f8dc 5000 	ldr.w	r5, [ip]
    quantize_conv_pw_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800505e:	f8c8 6000 	str.w	r6, [r8]
    quantize_conv_dw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005062:	6826      	ldr	r6, [r4, #0]
    quantize_conv_pw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005064:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    quantize_conv_dw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005068:	4baa      	ldr	r3, [pc, #680]	; (8005314 <ai_network_init+0x3b4>)
    quantize_conv_pw_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 752);
 800506a:	f8c8 e008 	str.w	lr, [r8, #8]
    quantize_conv_dw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800506e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    quantize_conv_pw_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 752);
 8005072:	f8c8 e00c 	str.w	lr, [r8, #12]
    quantize_conv_dw_3_conv2d_weights_array.data = AI_PTR(weights_map[0] + 1392);
 8005076:	f507 6eae 	add.w	lr, r7, #1392	; 0x570
    quantize_conv_pw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800507a:	49a7      	ldr	r1, [pc, #668]	; (8005318 <ai_network_init+0x3b8>)
    quantize_conv_pw_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1264);
 800507c:	f507 689e 	add.w	r8, r7, #1264	; 0x4f0
    quantize_conv_dw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005080:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 800536c <ai_network_init+0x40c>
    quantize_conv_pw_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005084:	f8cc 5000 	str.w	r5, [ip]
    quantize_conv_dw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005088:	6026      	str	r6, [r4, #0]
    quantize_conv_dw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800508a:	6805      	ldr	r5, [r0, #0]
    quantize_conv_dw_3_conv2d_weights_array.data = AI_PTR(weights_map[0] + 1392);
 800508c:	f8c4 e008 	str.w	lr, [r4, #8]
 8005090:	f8c4 e00c 	str.w	lr, [r4, #12]
    quantize_conv_dw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005094:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    quantize_conv_dw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005098:	681c      	ldr	r4, [r3, #0]
    quantize_conv_pw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800509a:	4aa0      	ldr	r2, [pc, #640]	; (800531c <ai_network_init+0x3bc>)
    quantize_conv_pw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800509c:	680e      	ldr	r6, [r1, #0]
    quantize_conv_dw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800509e:	f044 4e80 	orr.w	lr, r4, #1073741824	; 0x40000000
    quantize_conv_dw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050a2:	f8d9 4000 	ldr.w	r4, [r9]
    quantize_conv_pw_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1264);
 80050a6:	f8cc 8008 	str.w	r8, [ip, #8]
    quantize_conv_pw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80050aa:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    quantize_conv_pw_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1264);
 80050ae:	f8cc 800c 	str.w	r8, [ip, #12]
    quantize_conv_dw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050b2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    quantize_conv_dw_3_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1680);
 80050b6:	f507 68d2 	add.w	r8, r7, #1680	; 0x690
    quantize_conv_dw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050ba:	6005      	str	r5, [r0, #0]
    quantize_conv_pw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050bc:	6815      	ldr	r5, [r2, #0]
    quantize_conv_pw_3_conv2d_weights_array.data = AI_PTR(weights_map[0] + 1808);
 80050be:	f507 6ce2 	add.w	ip, r7, #1808	; 0x710
    quantize_conv_pw_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80050c2:	600e      	str	r6, [r1, #0]
    quantize_conv_dw_4_conv2d_weights_array.data = AI_PTR(weights_map[0] + 2960);
 80050c4:	f507 6639 	add.w	r6, r7, #2960	; 0xb90
    quantize_conv_pw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050c8:	f045 4a80 	orr.w	sl, r5, #1073741824	; 0x40000000
    quantize_conv_dw_3_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1680);
 80050cc:	f8c0 8008 	str.w	r8, [r0, #8]
    quantize_conv_dw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80050d0:	f8c3 e000 	str.w	lr, [r3]
    quantize_conv_pw_3_conv2d_bias_array.data = AI_PTR(weights_map[0] + 2832);
 80050d4:	f507 6531 	add.w	r5, r7, #2832	; 0xb10
    quantize_conv_dw_3_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1680);
 80050d8:	f8c0 800c 	str.w	r8, [r0, #12]
    quantize_conv_dw_4_conv2d_bias_array.data = AI_PTR(weights_map[0] + 3248);
 80050dc:	f507 6e4b 	add.w	lr, r7, #3248	; 0xcb0
    quantize_conv_pw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80050e0:	488f      	ldr	r0, [pc, #572]	; (8005320 <ai_network_init+0x3c0>)
    quantize_conv_dw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050e2:	f8c9 4000 	str.w	r4, [r9]
    quantize_conv_dw_5_conv2d_weights_array.data = AI_PTR(weights_map[0] + 5680);
 80050e6:	f241 6430 	movw	r4, #5680	; 0x1630
    quantize_conv_pw_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050ea:	f8c2 a000 	str.w	sl, [r2]
    quantize_conv_pw_5_conv2d_weights_array.data = AI_PTR(weights_map[0] + 6512);
 80050ee:	f641 1a70 	movw	sl, #6512	; 0x1970
    quantize_conv_dw_5_conv2d_weights_array.data = AI_PTR(weights_map[0] + 5680);
 80050f2:	443c      	add	r4, r7
    quantize_conv_dw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80050f4:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8005370 <ai_network_init+0x410>
    quantize_conv_pw_5_conv2d_weights_array.data = AI_PTR(weights_map[0] + 6512);
 80050f8:	44ba      	add	sl, r7
    quantize_conv_pw_3_conv2d_weights_array.data = AI_PTR(weights_map[0] + 1808);
 80050fa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    quantize_conv_dw_4_conv2d_weights_array.data = AI_PTR(weights_map[0] + 2960);
 80050fe:	e9c3 6602 	strd	r6, r6, [r3, #8]
    quantize_conv_dw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005102:	4988      	ldr	r1, [pc, #544]	; (8005324 <ai_network_init+0x3c4>)
    quantize_conv_pw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 10608);
 8005104:	f642 1370 	movw	r3, #10608	; 0x2970
    quantize_conv_pw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005108:	f8df c268 	ldr.w	ip, [pc, #616]	; 8005374 <ai_network_init+0x414>
    quantize_conv_pw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800510c:	4e86      	ldr	r6, [pc, #536]	; (8005328 <ai_network_init+0x3c8>)
    quantize_conv_pw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 10608);
 800510e:	18fb      	adds	r3, r7, r3
    quantize_conv_dw_4_conv2d_bias_array.data = AI_PTR(weights_map[0] + 3248);
 8005110:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    quantize_conv_pw_3_conv2d_bias_array.data = AI_PTR(weights_map[0] + 2832);
 8005114:	e9c2 5502 	strd	r5, r5, [r2, #8]
    quantize_conv_pw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005118:	6805      	ldr	r5, [r0, #0]
    quantize_conv_dw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 6256);
 800511a:	f641 0970 	movw	r9, #6256	; 0x1870
    quantize_conv_dw_5_conv2d_weights_array.data = AI_PTR(weights_map[0] + 5680);
 800511e:	608c      	str	r4, [r1, #8]
 8005120:	60cc      	str	r4, [r1, #12]
    quantize_conv_pw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005122:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    quantize_conv_dw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005126:	680c      	ldr	r4, [r1, #0]
    quantize_conv_dw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 6256);
 8005128:	44b9      	add	r9, r7
    quantize_conv_pw_4_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800512a:	6005      	str	r5, [r0, #0]
    quantize_conv_dw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800512c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    quantize_conv_pw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005130:	f8dc 5000 	ldr.w	r5, [ip]
    quantize_conv_pw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005134:	4a7d      	ldr	r2, [pc, #500]	; (800532c <ai_network_init+0x3cc>)
    quantize_conv_dw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005136:	600c      	str	r4, [r1, #0]
    quantize_conv_pw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005138:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    quantize_conv_dw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800513c:	f8d8 1000 	ldr.w	r1, [r8]
    quantize_conv_pw_4_conv2d_weights_array.data = AI_PTR(weights_map[0] + 3376);
 8005140:	f507 6453 	add.w	r4, r7, #3376	; 0xd30
    quantize_conv_pw_4_conv2d_bias_array.data = AI_PTR(weights_map[0] + 5424);
 8005144:	f8cc b008 	str.w	fp, [ip, #8]
 8005148:	f8cc b00c 	str.w	fp, [ip, #12]
    quantize_conv_dw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 10864);
 800514c:	f642 2b70 	movw	fp, #10864	; 0x2a70
    quantize_conv_pw_4_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005150:	f8cc 5000 	str.w	r5, [ip]
    quantize_conv_dw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005154:	f041 4c80 	orr.w	ip, r1, #1073741824	; 0x40000000
    quantize_conv_pw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005158:	6811      	ldr	r1, [r2, #0]
    quantize_conv_dw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 11440);
 800515a:	f642 45b0 	movw	r5, #11440	; 0x2cb0
    quantize_conv_pw_4_conv2d_weights_array.data = AI_PTR(weights_map[0] + 3376);
 800515e:	6084      	str	r4, [r0, #8]
    quantize_conv_dw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 10864);
 8005160:	44bb      	add	fp, r7
    quantize_conv_pw_4_conv2d_weights_array.data = AI_PTR(weights_map[0] + 3376);
 8005162:	60c4      	str	r4, [r0, #12]
    quantize_conv_pw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005164:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    quantize_conv_dw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005168:	4c71      	ldr	r4, [pc, #452]	; (8005330 <ai_network_init+0x3d0>)
    quantize_conv_dw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 11440);
 800516a:	443d      	add	r5, r7
    quantize_conv_dw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800516c:	f8df e208 	ldr.w	lr, [pc, #520]	; 8005378 <ai_network_init+0x418>
    quantize_conv_dw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005170:	6820      	ldr	r0, [r4, #0]
    quantize_conv_pw_5_conv2d_weights_array.data = AI_PTR(weights_map[0] + 6512);
 8005172:	f8c2 a008 	str.w	sl, [r2, #8]
 8005176:	f8c2 a00c 	str.w	sl, [r2, #12]
    quantize_conv_dw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800517a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    quantize_conv_pw_5_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800517e:	6011      	str	r1, [r2, #0]
    quantize_conv_pw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005180:	6832      	ldr	r2, [r6, #0]
    quantize_conv_dw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 6256);
 8005182:	f8c8 9008 	str.w	r9, [r8, #8]
    quantize_conv_pw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005186:	f042 4180 	orr.w	r1, r2, #1073741824	; 0x40000000
    quantize_conv_dw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800518a:	f8de 2000 	ldr.w	r2, [lr]
    quantize_conv_dw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 6256);
 800518e:	f8c8 900c 	str.w	r9, [r8, #12]
    quantize_conv_dw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005192:	6020      	str	r0, [r4, #0]
    quantize_conv_dw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005194:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    quantize_conv_pw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005198:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 800537c <ai_network_init+0x41c>
    quantize_conv_dw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800519c:	4c65      	ldr	r4, [pc, #404]	; (8005334 <ai_network_init+0x3d4>)
    quantize_conv_dw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800519e:	4866      	ldr	r0, [pc, #408]	; (8005338 <ai_network_init+0x3d8>)
    quantize_conv_dw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051a0:	f8c8 c000 	str.w	ip, [r8]
    quantize_conv_pw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 19888);
 80051a4:	f644 5cb0 	movw	ip, #19888	; 0x4db0
    quantize_conv_pw_5_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051a8:	6031      	str	r1, [r6, #0]
    quantize_conv_pw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 11696);
 80051aa:	f642 58b0 	movw	r8, #11696	; 0x2db0
    quantize_conv_dw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051ae:	f8ce 2000 	str.w	r2, [lr]
    quantize_conv_pw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 38448);
 80051b2:	f249 6230 	movw	r2, #38448	; 0x9630
    quantize_conv_pw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051b6:	4961      	ldr	r1, [pc, #388]	; (800533c <ai_network_init+0x3dc>)
    quantize_conv_pw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 19888);
 80051b8:	44bc      	add	ip, r7
    quantize_conv_pw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 38448);
 80051ba:	18ba      	adds	r2, r7, r2
    quantize_conv_pw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 11696);
 80051bc:	44b8      	add	r8, r7
    quantize_conv_dw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80051be:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8005380 <ai_network_init+0x420>
    quantize_conv_dw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 11440);
 80051c2:	e9ce 5502 	strd	r5, r5, [lr, #8]
    quantize_conv_dw_7_conv2d_weights_array.data = AI_PTR(weights_map[0] + 20400);
 80051c6:	f644 75b0 	movw	r5, #20400	; 0x4fb0
    quantize_conv_dw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 21552);
 80051ca:	f245 4e30 	movw	lr, #21552	; 0x5430
    quantize_conv_dw_7_conv2d_weights_array.data = AI_PTR(weights_map[0] + 20400);
 80051ce:	443d      	add	r5, r7
    quantize_conv_dw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 21552);
 80051d0:	44be      	add	lr, r7
    quantize_conv_pw_5_conv2d_bias_array.data = AI_PTR(weights_map[0] + 10608);
 80051d2:	e9c6 3302 	strd	r3, r3, [r6, #8]
    quantize_conv_dw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 10864);
 80051d6:	4b56      	ldr	r3, [pc, #344]	; (8005330 <ai_network_init+0x3d0>)
    quantize_conv_dw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051d8:	4e59      	ldr	r6, [pc, #356]	; (8005340 <ai_network_init+0x3e0>)
    quantize_conv_dw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 10864);
 80051da:	e9c3 bb02 	strd	fp, fp, [r3, #8]
    quantize_conv_pw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80051de:	f8d9 3000 	ldr.w	r3, [r9]
    quantize_conv_dw_7_conv2d_weights_array.data = AI_PTR(weights_map[0] + 20400);
 80051e2:	60a5      	str	r5, [r4, #8]
 80051e4:	60e5      	str	r5, [r4, #12]
    quantize_conv_pw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80051e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    quantize_conv_dw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051ea:	6805      	ldr	r5, [r0, #0]
    quantize_conv_pw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 38448);
 80051ec:	9204      	str	r2, [sp, #16]
    quantize_conv_dw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051ee:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    quantize_conv_dw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80051f2:	6822      	ldr	r2, [r4, #0]
    quantize_conv_dw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 21552);
 80051f4:	f8c0 e008 	str.w	lr, [r0, #8]
 80051f8:	f8c0 e00c 	str.w	lr, [r0, #12]
    quantize_conv_dw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051fc:	6005      	str	r5, [r0, #0]
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 80051fe:	f649 60b0 	movw	r0, #40624	; 0x9eb0
    quantize_conv_pw_6_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005202:	f8c9 3000 	str.w	r3, [r9]
    quantize_conv_pw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 19888);
 8005206:	f8c1 c008 	str.w	ip, [r1, #8]
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 800520a:	4605      	mov	r5, r0
    quantize_conv_pw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800520c:	680b      	ldr	r3, [r1, #0]
    quantize_conv_pw_6_conv2d_bias_array.data = AI_PTR(weights_map[0] + 19888);
 800520e:	f8c1 c00c 	str.w	ip, [r1, #12]
    quantize_conv_dw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005212:	f042 4c80 	orr.w	ip, r2, #1073741824	; 0x40000000
    quantize_conv_pw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005216:	4a4b      	ldr	r2, [pc, #300]	; (8005344 <ai_network_init+0x3e4>)
    quantize_conv_pw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    quantize_conv_pw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800521c:	f8df b164 	ldr.w	fp, [pc, #356]	; 8005384 <ai_network_init+0x424>
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 8005220:	197d      	adds	r5, r7, r5
    quantize_conv_pw_6_conv2d_weights_array.data = AI_PTR(weights_map[0] + 11696);
 8005222:	f8c9 8008 	str.w	r8, [r9, #8]
 8005226:	f8c9 800c 	str.w	r8, [r9, #12]
    quantize_conv_pw_7_conv2d_weights_array.data = AI_PTR(weights_map[0] + 22064);
 800522a:	f245 6830 	movw	r8, #22064	; 0x5630
    quantize_conv_dw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800522e:	f8c4 c000 	str.w	ip, [r4]
    quantize_conv_pw_8_conv2d_bias_array.data = AI_PTR(weights_map[0] + 57008);
 8005232:	f64d 69b0 	movw	r9, #57008	; 0xdeb0
    quantize_conv_pw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005236:	6814      	ldr	r4, [r2, #0]
    quantize_conv_pw_7_conv2d_weights_array.data = AI_PTR(weights_map[0] + 22064);
 8005238:	44b8      	add	r8, r7
    quantize_conv_dw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800523a:	f8da 0000 	ldr.w	r0, [sl]
    quantize_conv_pw_8_conv2d_bias_array.data = AI_PTR(weights_map[0] + 57008);
 800523e:	44b9      	add	r9, r7
    quantize_conv_pw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005240:	f044 4c80 	orr.w	ip, r4, #1073741824	; 0x40000000
    quantize_conv_pw_6_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005244:	600b      	str	r3, [r1, #0]
    quantize_conv_pw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005246:	f8db 4000 	ldr.w	r4, [fp]
    quantize_conv_dw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 38960);
 800524a:	f649 0330 	movw	r3, #38960	; 0x9830
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 800524e:	9505      	str	r5, [sp, #20]
    quantize_conv_dw_8_conv2d_bias_array.data = AI_PTR(weights_map[0] + 40112);
 8005250:	f649 41b0 	movw	r1, #40112	; 0x9cb0
    quantize_conv_dw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005254:	6835      	ldr	r5, [r6, #0]
    quantize_conv_dw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 38960);
 8005256:	443b      	add	r3, r7
    quantize_conv_pw_7_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005258:	f8c2 c000 	str.w	ip, [r2]
    quantize_conv_dw_8_conv2d_bias_array.data = AI_PTR(weights_map[0] + 40112);
 800525c:	4439      	add	r1, r7
    quantize_conv_pw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800525e:	f8df c128 	ldr.w	ip, [pc, #296]	; 8005388 <ai_network_init+0x428>
    quantize_conv_pw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005262:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    quantize_conv_dw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005266:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    quantize_conv_dw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800526a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    quantize_conv_pw_7_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800526e:	f8cb 4000 	str.w	r4, [fp]
    quantize_conv_dw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005272:	f8ca 0000 	str.w	r0, [sl]
    quantize_conv_dw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005276:	6035      	str	r5, [r6, #0]
    quantize_conv_dw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005278:	4c33      	ldr	r4, [pc, #204]	; (8005348 <ai_network_init+0x3e8>)
    quantize_conv_pw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800527a:	4834      	ldr	r0, [pc, #208]	; (800534c <ai_network_init+0x3ec>)
    quantize_conv_dw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800527c:	f8df e10c 	ldr.w	lr, [pc, #268]	; 800538c <ai_network_init+0x42c>
    quantize_conv_pw_7_conv2d_weights_array.data = AI_PTR(weights_map[0] + 22064);
 8005280:	e9c2 8802 	strd	r8, r8, [r2, #8]
    quantize_conv_pw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 38448);
 8005284:	9a04      	ldr	r2, [sp, #16]
    quantize_conv_pw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005286:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8005390 <ai_network_init+0x430>
    quantize_conv_pw_7_conv2d_bias_array.data = AI_PTR(weights_map[0] + 38448);
 800528a:	e9cb 2202 	strd	r2, r2, [fp, #8]
    quantize_conv_dw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 38960);
 800528e:	e9ca 3302 	strd	r3, r3, [sl, #8]
    quantize_conv_dw_8_conv2d_bias_array.data = AI_PTR(weights_map[0] + 40112);
 8005292:	e9c6 1102 	strd	r1, r1, [r6, #8]
    quantize_conv_pw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005296:	f8dc 1000 	ldr.w	r1, [ip]
    quantize_conv_dw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 57520);
 800529a:	f24e 0ab0 	movw	sl, #57520	; 0xe0b0
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 800529e:	9d05      	ldr	r5, [sp, #20]
    quantize_conv_dw_9_conv2d_bias_array.data = AI_PTR(weights_map[0] + 58672);
 80052a0:	f24e 5b30 	movw	fp, #58672	; 0xe530
    quantize_conv_pw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052a4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    quantize_conv_pw_8_conv2d_bias_array.data = AI_PTR(weights_map[0] + 57008);
 80052a8:	f8c8 9008 	str.w	r9, [r8, #8]
 80052ac:	f8c8 900c 	str.w	r9, [r8, #12]
    quantize_conv_dw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 57520);
 80052b0:	44ba      	add	sl, r7
    quantize_conv_pw_8_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052b2:	f8cc 1000 	str.w	r1, [ip]
    quantize_conv_dw_9_conv2d_bias_array.data = AI_PTR(weights_map[0] + 58672);
 80052b6:	44bb      	add	fp, r7
    quantize_conv_pw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052b8:	f8d8 1000 	ldr.w	r1, [r8]
    quantize_conv_pw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052bc:	4a24      	ldr	r2, [pc, #144]	; (8005350 <ai_network_init+0x3f0>)
    quantize_conv_pw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    quantize_conv_dw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <ai_network_init+0x3f4>)
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 80052c4:	f8cc 5008 	str.w	r5, [ip, #8]
    quantize_conv_pw_8_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052c8:	f8c8 1000 	str.w	r1, [r8]
    quantize_conv_dw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052cc:	6821      	ldr	r1, [r4, #0]
    quantize_conv_pw_8_conv2d_weights_array.data = AI_PTR(weights_map[0] + 40624);
 80052ce:	f8cc 500c 	str.w	r5, [ip, #12]
    quantize_conv_pw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 59184);
 80052d2:	f24e 7c30 	movw	ip, #59184	; 0xe730
    quantize_conv_dw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052d6:	f041 4980 	orr.w	r9, r1, #1073741824	; 0x40000000
    quantize_conv_pw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052da:	6801      	ldr	r1, [r0, #0]
    quantize_conv_dw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052dc:	f8de 5000 	ldr.w	r5, [lr]
    quantize_conv_pw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 59184);
 80052e0:	44bc      	add	ip, r7
    quantize_conv_pw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052e2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    quantize_conv_dw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052e6:	4e1c      	ldr	r6, [pc, #112]	; (8005358 <ai_network_init+0x3f8>)
    quantize_conv_dw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052e8:	f045 4880 	orr.w	r8, r5, #1073741824	; 0x40000000
    quantize_conv_pw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ec:	6815      	ldr	r5, [r2, #0]
    quantize_conv_pw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052ee:	6001      	str	r1, [r0, #0]
    quantize_conv_dw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	e04f      	b.n	8005394 <ai_network_init+0x434>
 80052f4:	240016a8 	.word	0x240016a8
 80052f8:	24001a78 	.word	0x24001a78
 80052fc:	240019a8 	.word	0x240019a8
 8005300:	24002640 	.word	0x24002640
 8005304:	24002710 	.word	0x24002710
 8005308:	24001b78 	.word	0x24001b78
 800530c:	24001c78 	.word	0x24001c78
 8005310:	24001ba8 	.word	0x24001ba8
 8005314:	24001d78 	.word	0x24001d78
 8005318:	24002910 	.word	0x24002910
 800531c:	24002840 	.word	0x24002840
 8005320:	24002a10 	.word	0x24002a10
 8005324:	24001e78 	.word	0x24001e78
 8005328:	24002a40 	.word	0x24002a40
 800532c:	24002b10 	.word	0x24002b10
 8005330:	24001f78 	.word	0x24001f78
 8005334:	24002078 	.word	0x24002078
 8005338:	24001fa8 	.word	0x24001fa8
 800533c:	24002b40 	.word	0x24002b40
 8005340:	240020a8 	.word	0x240020a8
 8005344:	24002d10 	.word	0x24002d10
 8005348:	24002278 	.word	0x24002278
 800534c:	24002f10 	.word	0x24002f10
 8005350:	24002e40 	.word	0x24002e40
 8005354:	24001878 	.word	0x24001878
 8005358:	240017a8 	.word	0x240017a8
 800535c:	24001778 	.word	0x24001778
 8005360:	24001aa8 	.word	0x24001aa8
 8005364:	24002810 	.word	0x24002810
 8005368:	24002740 	.word	0x24002740
 800536c:	24001ca8 	.word	0x24001ca8
 8005370:	24001da8 	.word	0x24001da8
 8005374:	24002940 	.word	0x24002940
 8005378:	24001ea8 	.word	0x24001ea8
 800537c:	24002c10 	.word	0x24002c10
 8005380:	24002178 	.word	0x24002178
 8005384:	24002c40 	.word	0x24002c40
 8005388:	24002e10 	.word	0x24002e10
 800538c:	240021a8 	.word	0x240021a8
 8005390:	24002d40 	.word	0x24002d40
    quantize_conv_dw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 57520);
 8005394:	f8c4 a008 	str.w	sl, [r4, #8]
    quantize_conv_dw_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005398:	f8c4 9000 	str.w	r9, [r4]
    quantize_conv_dw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800539c:	f8ce 8000 	str.w	r8, [lr]
    quantize_conv_pw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053a0:	f045 4880 	orr.w	r8, r5, #1073741824	; 0x40000000
    quantize_conv_dw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 57520);
 80053a4:	f8c4 a00c 	str.w	sl, [r4, #12]
    quantize_conv_dw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053a8:	f041 4580 	orr.w	r5, r1, #1073741824	; 0x40000000
    quantize_conv_dw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ac:	6834      	ldr	r4, [r6, #0]
    quantize_conv_pw_9_conv2d_bias_array.data = AI_PTR(weights_map[0] + 75568);
 80053ae:	49c3      	ldr	r1, [pc, #780]	; (80056bc <ai_network_init+0x75c>)
    quantize_conv_dw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 76080);
 80053b0:	f8df 93bc 	ldr.w	r9, [pc, #956]	; 8005770 <ai_network_init+0x810>
    quantize_conv_dw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053b4:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    quantize_conv_pw_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053b8:	f8c2 8000 	str.w	r8, [r2]
    quantize_conv_pw_9_conv2d_bias_array.data = AI_PTR(weights_map[0] + 75568);
 80053bc:	4439      	add	r1, r7
    quantize_conv_dw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053be:	601d      	str	r5, [r3, #0]
    quantize_conv_dw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 76080);
 80053c0:	44b9      	add	r9, r7
    quantize_conv_pw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053c2:	4dbf      	ldr	r5, [pc, #764]	; (80056c0 <ai_network_init+0x760>)
    quantize_conv_dw_10_conv2d_bias_array.data = AI_PTR(weights_map[0] + 77232);
 80053c4:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 8005774 <ai_network_init+0x814>
    quantize_conv_dw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053c8:	6034      	str	r4, [r6, #0]
    quantize_conv_dw_10_conv2d_bias_array.data = AI_PTR(weights_map[0] + 77232);
 80053ca:	44b8      	add	r8, r7
    quantize_conv_pw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053cc:	4cbd      	ldr	r4, [pc, #756]	; (80056c4 <ai_network_init+0x764>)
    quantize_conv_dw_9_conv2d_bias_array.data = AI_PTR(weights_map[0] + 58672);
 80053ce:	e9ce bb02 	strd	fp, fp, [lr, #8]
    quantize_conv_pw_9_conv2d_weights_array.data = AI_PTR(weights_map[0] + 59184);
 80053d2:	e9c0 cc02 	strd	ip, ip, [r0, #8]
    quantize_conv_dw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053d6:	f8df e3a0 	ldr.w	lr, [pc, #928]	; 8005778 <ai_network_init+0x818>
    quantize_conv_dw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053da:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800577c <ai_network_init+0x81c>
    quantize_conv_pw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053de:	48ba      	ldr	r0, [pc, #744]	; (80056c8 <ai_network_init+0x768>)
    quantize_conv_preds_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e0:	f8df b39c 	ldr.w	fp, [pc, #924]	; 8005780 <ai_network_init+0x820>
    quantize_conv_pw_9_conv2d_bias_array.data = AI_PTR(weights_map[0] + 75568);
 80053e4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    quantize_conv_dw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 76080);
 80053e8:	e9c3 9902 	strd	r9, r9, [r3, #8]
    quantize_conv_pw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053ec:	682b      	ldr	r3, [r5, #0]
    quantize_conv_pw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ee:	49b7      	ldr	r1, [pc, #732]	; (80056cc <ai_network_init+0x76c>)
    quantize_conv_pw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053f0:	f043 4a80 	orr.w	sl, r3, #1073741824	; 0x40000000
    quantize_conv_dw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053f4:	f8de 3000 	ldr.w	r3, [lr]
    quantize_conv_preds_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053f8:	4ab5      	ldr	r2, [pc, #724]	; (80056d0 <ai_network_init+0x770>)
    quantize_conv_pw_10_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053fa:	f8c5 a000 	str.w	sl, [r5]
    quantize_conv_dw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80053fe:	f043 4a80 	orr.w	sl, r3, #1073741824	; 0x40000000
    quantize_conv_dw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005402:	f8dc 3000 	ldr.w	r3, [ip]
    quantize_conv_dw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005406:	f8ce a000 	str.w	sl, [lr]
    quantize_conv_dw_10_conv2d_bias_array.data = AI_PTR(weights_map[0] + 77232);
 800540a:	e9c6 8802 	strd	r8, r8, [r6, #8]
    quantize_conv_pw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800540e:	6826      	ldr	r6, [r4, #0]
    quantize_conv_pw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 77744);
 8005410:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8005784 <ai_network_init+0x824>
    quantize_conv_pw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005414:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    quantize_conv_pw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 77744);
 8005418:	44b8      	add	r8, r7
    quantize_conv_pw_10_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800541a:	6026      	str	r6, [r4, #0]
    quantize_conv_dw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800541c:	f043 4680 	orr.w	r6, r3, #1073741824	; 0x40000000
    quantize_conv_pw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005420:	6803      	ldr	r3, [r0, #0]
    quantize_conv_dw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005422:	f8cc 6000 	str.w	r6, [ip]
    quantize_conv_pw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005426:	f043 4a80 	orr.w	sl, r3, #1073741824	; 0x40000000
    quantize_conv_pw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800542a:	680b      	ldr	r3, [r1, #0]
    quantize_conv_pw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 77744);
 800542c:	f8c5 8008 	str.w	r8, [r5, #8]
    quantize_conv_pw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005430:	f043 4680 	orr.w	r6, r3, #1073741824	; 0x40000000
    quantize_conv_preds_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005434:	6813      	ldr	r3, [r2, #0]
    quantize_conv_pw_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005436:	f8c0 a000 	str.w	sl, [r0]
    quantize_conv_pw_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800543a:	600e      	str	r6, [r1, #0]
    quantize_conv_preds_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800543c:	f043 4a80 	orr.w	sl, r3, #1073741824	; 0x40000000
    quantize_conv_pw_10_conv2d_bias_array.data = AI_PTR(weights_map[0] + 94128);
 8005440:	4ea4      	ldr	r6, [pc, #656]	; (80056d4 <ai_network_init+0x774>)
    quantize_conv_preds_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005442:	f8db 3000 	ldr.w	r3, [fp]
    quantize_conv_pw_10_conv2d_bias_array.data = AI_PTR(weights_map[0] + 94128);
 8005446:	443e      	add	r6, r7
    quantize_conv_pw_10_conv2d_weights_array.data = AI_PTR(weights_map[0] + 77744);
 8005448:	f8c5 800c 	str.w	r8, [r5, #12]
    quantize_conv_preds_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800544c:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    quantize_conv_preds_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005450:	f8c2 a000 	str.w	sl, [r2]
    quantize_conv_pw_10_conv2d_bias_array.data = AI_PTR(weights_map[0] + 94128);
 8005454:	60a6      	str	r6, [r4, #8]
 8005456:	60e6      	str	r6, [r4, #12]
    quantize_conv_preds_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005458:	f8cb 9000 	str.w	r9, [fp]
    quantize_conv_dw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 94640);
 800545c:	f8df a328 	ldr.w	sl, [pc, #808]	; 8005788 <ai_network_init+0x828>
    quantize_conv_dw_11_conv2d_bias_array.data = AI_PTR(weights_map[0] + 95792);
 8005460:	f8df 9328 	ldr.w	r9, [pc, #808]	; 800578c <ai_network_init+0x82c>
    quantize_conv_pw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 96304);
 8005464:	f8df 8328 	ldr.w	r8, [pc, #808]	; 8005790 <ai_network_init+0x830>
    quantize_conv_dw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 94640);
 8005468:	44ba      	add	sl, r7
    quantize_conv_pw_11_conv2d_bias_array.data = AI_PTR(weights_map[0] + 129072);
 800546a:	4d9b      	ldr	r5, [pc, #620]	; (80056d8 <ai_network_init+0x778>)
    quantize_conv_dw_11_conv2d_bias_array.data = AI_PTR(weights_map[0] + 95792);
 800546c:	44b9      	add	r9, r7
    quantize_conv_preds_conv2d_weights_array.data = AI_PTR(weights_map[0] + 130096);
 800546e:	4e9b      	ldr	r6, [pc, #620]	; (80056dc <ai_network_init+0x77c>)
    quantize_conv_pw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 96304);
 8005470:	44b8      	add	r8, r7
    quantize_conv_preds_conv2d_bias_array.data = AI_PTR(weights_map[0] + 134704);
 8005472:	4c9b      	ldr	r4, [pc, #620]	; (80056e0 <ai_network_init+0x780>)
    quantize_conv_pw_11_conv2d_bias_array.data = AI_PTR(weights_map[0] + 129072);
 8005474:	443d      	add	r5, r7
    quantize_conv_preds_conv2d_weights_array.data = AI_PTR(weights_map[0] + 130096);
 8005476:	443e      	add	r6, r7
    quantize_conv_dw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 94640);
 8005478:	f8ce a008 	str.w	sl, [lr, #8]
    quantize_conv_preds_conv2d_bias_array.data = AI_PTR(weights_map[0] + 134704);
 800547c:	443c      	add	r4, r7
    quantize_conv_dw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 94640);
 800547e:	f8ce a00c 	str.w	sl, [lr, #12]
    quantize_conv_dw_11_conv2d_bias_array.data = AI_PTR(weights_map[0] + 95792);
 8005482:	e9cc 9902 	strd	r9, r9, [ip, #8]
    quantize_conv_pw_11_conv2d_weights_array.data = AI_PTR(weights_map[0] + 96304);
 8005486:	e9c0 8802 	strd	r8, r8, [r0, #8]
    quantize_conv_pw_11_conv2d_bias_array.data = AI_PTR(weights_map[0] + 129072);
 800548a:	e9c1 5502 	strd	r5, r5, [r1, #8]
    quantize_conv_preds_conv2d_weights_array.data = AI_PTR(weights_map[0] + 130096);
 800548e:	e9c2 6602 	strd	r6, r6, [r2, #8]
    quantize_conv_preds_conv2d_bias_array.data = AI_PTR(weights_map[0] + 134704);
 8005492:	e9cb 4402 	strd	r4, r4, [fp, #8]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005496:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005498:	ee18 2a10 	vmov	r2, s16
 800549c:	a807      	add	r0, sp, #28
 800549e:	2101      	movs	r1, #1
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80054a0:	9307      	str	r3, [sp, #28]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80054a2:	f015 f82d 	bl	801a500 <ai_platform_get_activations_map>
 80054a6:	4604      	mov	r4, r0
 80054a8:	2800      	cmp	r0, #0
 80054aa:	f000 8100 	beq.w	80056ae <ai_network_init+0x74e>
    quantize_input_2_output_array.data = AI_PTR(activations_map[0] + 904);
 80054ae:	9b07      	ldr	r3, [sp, #28]
    quantize_conv_dw_2_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 50208);
 80054b0:	f24c 4520 	movw	r5, #50208	; 0xc420
    quantize_conv1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 151436);
 80054b4:	4e8b      	ldr	r6, [pc, #556]	; (80056e4 <ai_network_init+0x784>)
    quantize_conv_dw_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 50644);
 80054b6:	f24c 5cd4 	movw	ip, #50644	; 0xc5d4
    quantize_conv1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 151436);
 80054ba:	4f8b      	ldr	r7, [pc, #556]	; (80056e8 <ai_network_init+0x788>)
    quantize_conv_dw_1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 100352);
 80054bc:	f503 39c4 	add.w	r9, r3, #100352	; 0x18800
    quantize_conv1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 151436);
 80054c0:	441e      	add	r6, r3
    quantize_conv_dw_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 100572);
 80054c2:	498a      	ldr	r1, [pc, #552]	; (80056ec <ai_network_init+0x78c>)
    quantize_conv_dw_2_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 50208);
 80054c4:	441d      	add	r5, r3
    quantize_conv_dw_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 50644);
 80054c6:	449c      	add	ip, r3
    quantize_conv1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 151436);
 80054c8:	60be      	str	r6, [r7, #8]
    quantize_conv_dw_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 100572);
 80054ca:	4419      	add	r1, r3
    quantize_conv1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 151436);
 80054cc:	60fe      	str	r6, [r7, #12]
    quantize_conv_dw_3_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25152);
 80054ce:	f246 2840 	movw	r8, #25152	; 0x6240
    quantize_conv_dw_1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 100352);
 80054d2:	4e87      	ldr	r6, [pc, #540]	; (80056f0 <ai_network_init+0x790>)
    quantize_conv_dw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 26020);
 80054d4:	f246 5ea4 	movw	lr, #26020	; 0x65a4
    quantize_conv_dw_3_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25152);
 80054d8:	4498      	add	r8, r3
    quantize_input_2_output_array.data = AI_PTR(activations_map[0] + 904);
 80054da:	f503 7062 	add.w	r0, r3, #904	; 0x388
    quantize_conv_dw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 26020);
 80054de:	449e      	add	lr, r3
    quantize_input_2_output_array.data = AI_PTR(activations_map[0] + 904);
 80054e0:	4a84      	ldr	r2, [pc, #528]	; (80056f4 <ai_network_init+0x794>)
    quantize_conv_dw_6_conv2d_output_array.data = AI_PTR(activations_map[0] + 14532);
 80054e2:	f643 07c4 	movw	r7, #14532	; 0x38c4
    quantize_input_2_output_array.data = AI_PTR(activations_map[0] + 904);
 80054e6:	6090      	str	r0, [r2, #8]
 80054e8:	60d0      	str	r0, [r2, #12]
    quantize_conv_dw_4_conv2d_output_array.data = AI_PTR(activations_map[0] + 26084);
 80054ea:	f246 52e4 	movw	r2, #26084	; 0x65e4
    quantize_conv_dw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 14404);
 80054ee:	f643 0044 	movw	r0, #14404	; 0x3844
    quantize_conv_dw_6_conv2d_output_array.data = AI_PTR(activations_map[0] + 14532);
 80054f2:	441f      	add	r7, r3
    quantize_conv_dw_4_conv2d_output_array.data = AI_PTR(activations_map[0] + 26084);
 80054f4:	441a      	add	r2, r3
    quantize_conv_dw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 14404);
 80054f6:	4418      	add	r0, r3
    quantize_conv_dw_1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 100352);
 80054f8:	e9c6 9902 	strd	r9, r9, [r6, #8]
    quantize_conv_dw_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 100572);
 80054fc:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8005794 <ai_network_init+0x834>
    quantize_conv_dw_7_conv2d_output_array.data = AI_PTR(activations_map[0] + 9988);
 8005500:	f242 7604 	movw	r6, #9988	; 0x2704
    quantize_conv_dw_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 100572);
 8005504:	e9c9 1102 	strd	r1, r1, [r9, #8]
    quantize_conv_pw_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 32);
 8005508:	f103 0920 	add.w	r9, r3, #32
 800550c:	497a      	ldr	r1, [pc, #488]	; (80056f8 <ai_network_init+0x798>)
    quantize_conv_dw_7_conv2d_output_array.data = AI_PTR(activations_map[0] + 9988);
 800550e:	441e      	add	r6, r3
    quantize_conv_pw_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 32);
 8005510:	e9c1 9902 	strd	r9, r9, [r1, #8]
    quantize_conv_dw_2_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 50208);
 8005514:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8005798 <ai_network_init+0x838>
    quantize_conv_dw_8_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 8005518:	f642 0104 	movw	r1, #10244	; 0x2804
    quantize_conv_dw_2_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 50208);
 800551c:	e9c9 5502 	strd	r5, r5, [r9, #8]
    quantize_conv_dw_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 50644);
 8005520:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800579c <ai_network_init+0x83c>
    quantize_conv_dw_8_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 8005524:	4419      	add	r1, r3
    quantize_conv_pw_11_conv2d_scratch1_array.data = AI_PTR(activations_map[0] + 16516);
 8005526:	f244 0584 	movw	r5, #16516	; 0x4084
    quantize_conv_dw_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 50644);
 800552a:	e9c9 cc02 	strd	ip, ip, [r9, #8]
    quantize_conv_pw_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 64);
 800552e:	f103 0940 	add.w	r9, r3, #64	; 0x40
 8005532:	f8df c26c 	ldr.w	ip, [pc, #620]	; 80057a0 <ai_network_init+0x840>
    quantize_conv_pw_11_conv2d_scratch1_array.data = AI_PTR(activations_map[0] + 16516);
 8005536:	441d      	add	r5, r3
    quantize_conv_pw_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 64);
 8005538:	e9cc 9902 	strd	r9, r9, [ip, #8]
    quantize_conv_dw_3_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25152);
 800553c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80057a4 <ai_network_init+0x844>
    quantize_conv_pw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 128);
 8005540:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    quantize_conv_dw_3_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25152);
 8005544:	e9c9 8802 	strd	r8, r8, [r9, #8]
    quantize_conv_dw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 26020);
 8005548:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80057a8 <ai_network_init+0x848>
    quantize_conv_dw_4_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25216);
 800554c:	f503 48c5 	add.w	r8, r3, #25216	; 0x6280
    quantize_conv_dw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 26020);
 8005550:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    quantize_conv_pw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 128);
 8005554:	f8df 9254 	ldr.w	r9, [pc, #596]	; 80057ac <ai_network_init+0x84c>
    quantize_conv_dw_4_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25216);
 8005558:	f8df e254 	ldr.w	lr, [pc, #596]	; 80057b0 <ai_network_init+0x850>
    quantize_conv_pw_3_conv2d_output_array.data = AI_PTR(activations_map[0] + 128);
 800555c:	e9c9 cc02 	strd	ip, ip, [r9, #8]
    quantize_conv1_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8005560:	f8df 9250 	ldr.w	r9, [pc, #592]	; 80057b4 <ai_network_init+0x854>
    quantize_conv_dw_4_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25216);
 8005564:	f8ce 8008 	str.w	r8, [lr, #8]
    quantize_conv1_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8005568:	e9c9 3302 	strd	r3, r3, [r9, #8]
    quantize_conv_pw_1_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800556c:	f8df 9248 	ldr.w	r9, [pc, #584]	; 80057b8 <ai_network_init+0x858>
 8005570:	e9c9 3302 	strd	r3, r3, [r9, #8]
    quantize_conv_pw_2_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005574:	f8df 9244 	ldr.w	r9, [pc, #580]	; 80057bc <ai_network_init+0x85c>
 8005578:	e9c9 3302 	strd	r3, r3, [r9, #8]
    quantize_conv_pw_3_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800557c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80057c0 <ai_network_init+0x860>
 8005580:	e9c9 3302 	strd	r3, r3, [r9, #8]
    quantize_conv_dw_4_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 25216);
 8005584:	f8ce 800c 	str.w	r8, [lr, #12]
    quantize_conv_pw_4_conv2d_output_array.data = AI_PTR(activations_map[0] + 128);
 8005588:	f8df e238 	ldr.w	lr, [pc, #568]	; 80057c4 <ai_network_init+0x864>
 800558c:	e9ce cc02 	strd	ip, ip, [lr, #8]
    quantize_conv_dw_4_conv2d_output_array.data = AI_PTR(activations_map[0] + 26084);
 8005590:	f8df c234 	ldr.w	ip, [pc, #564]	; 80057c8 <ai_network_init+0x868>
    quantize_conv_dw_5_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 12672);
 8005594:	f503 5e46 	add.w	lr, r3, #12672	; 0x3180
    quantize_conv_dw_4_conv2d_output_array.data = AI_PTR(activations_map[0] + 26084);
 8005598:	e9cc 2202 	strd	r2, r2, [ip, #8]
    quantize_conv_dw_5_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 12672);
 800559c:	f8df c22c 	ldr.w	ip, [pc, #556]	; 80057cc <ai_network_init+0x86c>
    quantize_conv_pw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 256);
 80055a0:	f503 7280 	add.w	r2, r3, #256	; 0x100
    quantize_conv_dw_5_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 12672);
 80055a4:	e9cc ee02 	strd	lr, lr, [ip, #8]
    quantize_conv_dw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 14404);
 80055a8:	f8df e224 	ldr.w	lr, [pc, #548]	; 80057d0 <ai_network_init+0x870>
    quantize_conv_dw_6_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 12800);
 80055ac:	f503 5c48 	add.w	ip, r3, #12800	; 0x3200
    quantize_conv_dw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 14404);
 80055b0:	e9ce 0002 	strd	r0, r0, [lr, #8]
    quantize_conv_pw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 256);
 80055b4:	4851      	ldr	r0, [pc, #324]	; (80056fc <ai_network_init+0x79c>)
    quantize_conv_dw_7_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6528);
 80055b6:	f503 5ecc 	add.w	lr, r3, #6528	; 0x1980
    quantize_conv_pw_5_conv2d_output_array.data = AI_PTR(activations_map[0] + 256);
 80055ba:	e9c0 2202 	strd	r2, r2, [r0, #8]
    quantize_conv_pw_6_conv2d_output_array.data = AI_PTR(activations_map[0] + 256);
 80055be:	4850      	ldr	r0, [pc, #320]	; (8005700 <ai_network_init+0x7a0>)
 80055c0:	e9c0 2202 	strd	r2, r2, [r0, #8]
    quantize_conv_dw_6_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 12800);
 80055c4:	484f      	ldr	r0, [pc, #316]	; (8005704 <ai_network_init+0x7a4>)
    quantize_conv_pw_7_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 80055c6:	f503 7200 	add.w	r2, r3, #512	; 0x200
    quantize_conv_dw_6_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 12800);
 80055ca:	e9c0 cc02 	strd	ip, ip, [r0, #8]
    quantize_conv_dw_6_conv2d_output_array.data = AI_PTR(activations_map[0] + 14532);
 80055ce:	f8df c204 	ldr.w	ip, [pc, #516]	; 80057d4 <ai_network_init+0x874>
    quantize_conv_dw_8_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6784);
 80055d2:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
    quantize_conv_dw_6_conv2d_output_array.data = AI_PTR(activations_map[0] + 14532);
 80055d6:	e9cc 7702 	strd	r7, r7, [ip, #8]
    quantize_conv_dw_7_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6528);
 80055da:	4f4b      	ldr	r7, [pc, #300]	; (8005708 <ai_network_init+0x7a8>)
    quantize_conv_preds_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 768);
 80055dc:	f503 7c40 	add.w	ip, r3, #768	; 0x300
    quantize_conv_dw_7_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6528);
 80055e0:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    quantize_conv_dw_7_conv2d_output_array.data = AI_PTR(activations_map[0] + 9988);
 80055e4:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 80057d8 <ai_network_init+0x878>
    quantize_conv_preds_conv2d_0_conversion_output_array.data = AI_PTR(activations_map[0] + 20);
 80055e8:	f103 0714 	add.w	r7, r3, #20
    quantize_conv_dw_7_conv2d_output_array.data = AI_PTR(activations_map[0] + 9988);
 80055ec:	e9ce 6602 	strd	r6, r6, [lr, #8]
    quantize_conv_pw_7_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 80055f0:	4e46      	ldr	r6, [pc, #280]	; (800570c <ai_network_init+0x7ac>)
 80055f2:	e9c6 2202 	strd	r2, r2, [r6, #8]
    quantize_conv_dw_8_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6784);
 80055f6:	4e46      	ldr	r6, [pc, #280]	; (8005710 <ai_network_init+0x7b0>)
 80055f8:	e9c6 0002 	strd	r0, r0, [r6, #8]
    quantize_conv_pw_4_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80055fc:	4e45      	ldr	r6, [pc, #276]	; (8005714 <ai_network_init+0x7b4>)
 80055fe:	e9c6 3302 	strd	r3, r3, [r6, #8]
    quantize_conv_pw_5_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005602:	4e45      	ldr	r6, [pc, #276]	; (8005718 <ai_network_init+0x7b8>)
 8005604:	e9c6 3302 	strd	r3, r3, [r6, #8]
    quantize_conv_pw_6_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005608:	4e44      	ldr	r6, [pc, #272]	; (800571c <ai_network_init+0x7bc>)
 800560a:	e9c6 3302 	strd	r3, r3, [r6, #8]
    quantize_conv_pw_7_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800560e:	4e44      	ldr	r6, [pc, #272]	; (8005720 <ai_network_init+0x7c0>)
 8005610:	e9c6 3302 	strd	r3, r3, [r6, #8]
    quantize_conv_dw_8_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 8005614:	4e43      	ldr	r6, [pc, #268]	; (8005724 <ai_network_init+0x7c4>)
 8005616:	e9c6 1102 	strd	r1, r1, [r6, #8]
    quantize_conv_pw_8_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 800561a:	4e43      	ldr	r6, [pc, #268]	; (8005728 <ai_network_init+0x7c8>)
 800561c:	e9c6 2202 	strd	r2, r2, [r6, #8]
    quantize_conv_dw_9_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6784);
 8005620:	4e42      	ldr	r6, [pc, #264]	; (800572c <ai_network_init+0x7cc>)
 8005622:	e9c6 0002 	strd	r0, r0, [r6, #8]
    quantize_conv_dw_9_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 8005626:	4e42      	ldr	r6, [pc, #264]	; (8005730 <ai_network_init+0x7d0>)
 8005628:	e9c6 1102 	strd	r1, r1, [r6, #8]
    quantize_conv_pw_9_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 800562c:	4e41      	ldr	r6, [pc, #260]	; (8005734 <ai_network_init+0x7d4>)
 800562e:	e9c6 2202 	strd	r2, r2, [r6, #8]
    quantize_conv_dw_10_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6784);
 8005632:	4e41      	ldr	r6, [pc, #260]	; (8005738 <ai_network_init+0x7d8>)
 8005634:	e9c6 0002 	strd	r0, r0, [r6, #8]
    quantize_conv_dw_10_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 8005638:	4e40      	ldr	r6, [pc, #256]	; (800573c <ai_network_init+0x7dc>)
 800563a:	e9c6 1102 	strd	r1, r1, [r6, #8]
    quantize_conv_pw_10_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 800563e:	4e40      	ldr	r6, [pc, #256]	; (8005740 <ai_network_init+0x7e0>)
 8005640:	e9c6 2202 	strd	r2, r2, [r6, #8]
    quantize_conv_dw_11_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 6784);
 8005644:	4e3f      	ldr	r6, [pc, #252]	; (8005744 <ai_network_init+0x7e4>)
 8005646:	e9c6 0002 	strd	r0, r0, [r6, #8]
    quantize_conv_dw_11_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 800564a:	4e3f      	ldr	r6, [pc, #252]	; (8005748 <ai_network_init+0x7e8>)
    quantize_conv_pw_11_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 800564c:	483f      	ldr	r0, [pc, #252]	; (800574c <ai_network_init+0x7ec>)
    quantize_conv_dw_11_conv2d_output_array.data = AI_PTR(activations_map[0] + 10244);
 800564e:	e9c6 1102 	strd	r1, r1, [r6, #8]
    quantize_conv_pw_11_conv2d_scratch1_array.data = AI_PTR(activations_map[0] + 16516);
 8005652:	493f      	ldr	r1, [pc, #252]	; (8005750 <ai_network_init+0x7f0>)
    quantize_conv_pw_8_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005654:	4e3f      	ldr	r6, [pc, #252]	; (8005754 <ai_network_init+0x7f4>)
    quantize_conv_pw_11_conv2d_output_array.data = AI_PTR(activations_map[0] + 512);
 8005656:	e9c0 2202 	strd	r2, r2, [r0, #8]
    quantize_conv_pw_11_conv2d_scratch1_array.data = AI_PTR(activations_map[0] + 16516);
 800565a:	e9c1 5502 	strd	r5, r5, [r1, #8]
    quantize_conv_pw_10_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800565e:	4a3e      	ldr	r2, [pc, #248]	; (8005758 <ai_network_init+0x7f8>)
    quantize_conv_pw_9_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005660:	493e      	ldr	r1, [pc, #248]	; (800575c <ai_network_init+0x7fc>)
    quantize_conv_preds_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 768);
 8005662:	483f      	ldr	r0, [pc, #252]	; (8005760 <ai_network_init+0x800>)
    quantize_conv_pw_11_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005664:	4d3f      	ldr	r5, [pc, #252]	; (8005764 <ai_network_init+0x804>)
    quantize_conv_preds_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 768);
 8005666:	f8c0 c008 	str.w	ip, [r0, #8]
    quantize_conv_pw_9_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800566a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    quantize_conv_pw_10_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800566e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    quantize_conv_preds_conv2d_0_conversion_output_array.data = AI_PTR(activations_map[0] + 20);
 8005672:	493d      	ldr	r1, [pc, #244]	; (8005768 <ai_network_init+0x808>)
    quantize_conv_preds_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8005674:	4a3d      	ldr	r2, [pc, #244]	; (800576c <ai_network_init+0x80c>)
    quantize_conv_pw_8_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005676:	e9c6 3302 	strd	r3, r3, [r6, #8]
    quantize_conv_pw_11_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800567a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    quantize_conv_preds_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 768);
 800567e:	f8c0 c00c 	str.w	ip, [r0, #12]
    quantize_conv_preds_conv2d_0_conversion_output_array.data = AI_PTR(activations_map[0] + 20);
 8005682:	e9c1 7702 	strd	r7, r7, [r1, #8]
    quantize_conv_preds_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8005686:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800568a:	9802      	ldr	r0, [sp, #8]
 800568c:	f016 fa9a 	bl	801bbc4 <ai_platform_network_post_init>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	4020      	ands	r0, r4
 8005694:	4003      	ands	r3, r0
 8005696:	b2d8      	uxtb	r0, r3

  return ok;
}
 8005698:	b009      	add	sp, #36	; 0x24
 800569a:	ecbd 8b02 	vpop	{d8}
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80056a2:	2212      	movs	r2, #18
 80056a4:	2130      	movs	r1, #48	; 0x30
 80056a6:	9801      	ldr	r0, [sp, #4]
 80056a8:	f015 fa34 	bl	801ab14 <ai_platform_network_set_error>
  return false;
 80056ac:	e6f3      	b.n	8005496 <ai_network_init+0x536>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80056ae:	9801      	ldr	r0, [sp, #4]
 80056b0:	2213      	movs	r2, #19
 80056b2:	2130      	movs	r1, #48	; 0x30
 80056b4:	f015 fa2e 	bl	801ab14 <ai_platform_network_set_error>
  return false;
 80056b8:	e7e7      	b.n	800568a <ai_network_init+0x72a>
 80056ba:	bf00      	nop
 80056bc:	00012730 	.word	0x00012730
 80056c0:	240024c8 	.word	0x240024c8
 80056c4:	240023f8 	.word	0x240023f8
 80056c8:	24002610 	.word	0x24002610
 80056cc:	240024f8 	.word	0x240024f8
 80056d0:	240023c8 	.word	0x240023c8
 80056d4:	00016fb0 	.word	0x00016fb0
 80056d8:	0001f830 	.word	0x0001f830
 80056dc:	0001fc30 	.word	0x0001fc30
 80056e0:	00020e30 	.word	0x00020e30
 80056e4:	00024f8c 	.word	0x00024f8c
 80056e8:	24001748 	.word	0x24001748
 80056ec:	000188dc 	.word	0x000188dc
 80056f0:	24001a48 	.word	0x24001a48
 80056f4:	24002f40 	.word	0x24002f40
 80056f8:	240026b0 	.word	0x240026b0
 80056fc:	24002ab0 	.word	0x24002ab0
 8005700:	24002bb0 	.word	0x24002bb0
 8005704:	24001f48 	.word	0x24001f48
 8005708:	24002048 	.word	0x24002048
 800570c:	24002cb0 	.word	0x24002cb0
 8005710:	24002148 	.word	0x24002148
 8005714:	240029e0 	.word	0x240029e0
 8005718:	24002ae0 	.word	0x24002ae0
 800571c:	24002be0 	.word	0x24002be0
 8005720:	24002ce0 	.word	0x24002ce0
 8005724:	24002118 	.word	0x24002118
 8005728:	24002db0 	.word	0x24002db0
 800572c:	24002248 	.word	0x24002248
 8005730:	24002218 	.word	0x24002218
 8005734:	24002eb0 	.word	0x24002eb0
 8005738:	24001848 	.word	0x24001848
 800573c:	24001818 	.word	0x24001818
 8005740:	24002468 	.word	0x24002468
 8005744:	24001948 	.word	0x24001948
 8005748:	24001918 	.word	0x24001918
 800574c:	24002580 	.word	0x24002580
 8005750:	240025e0 	.word	0x240025e0
 8005754:	24002de0 	.word	0x24002de0
 8005758:	24002498 	.word	0x24002498
 800575c:	24002ee0 	.word	0x24002ee0
 8005760:	24002398 	.word	0x24002398
 8005764:	240025b0 	.word	0x240025b0
 8005768:	240022c8 	.word	0x240022c8
 800576c:	24002368 	.word	0x24002368
 8005770:	00012930 	.word	0x00012930
 8005774:	00012db0 	.word	0x00012db0
 8005778:	24001978 	.word	0x24001978
 800577c:	240018a8 	.word	0x240018a8
 8005780:	240022f8 	.word	0x240022f8
 8005784:	00012fb0 	.word	0x00012fb0
 8005788:	000171b0 	.word	0x000171b0
 800578c:	00017630 	.word	0x00017630
 8005790:	00017830 	.word	0x00017830
 8005794:	24001a18 	.word	0x24001a18
 8005798:	24001b48 	.word	0x24001b48
 800579c:	24001b18 	.word	0x24001b18
 80057a0:	240027b0 	.word	0x240027b0
 80057a4:	24001c48 	.word	0x24001c48
 80057a8:	24001c18 	.word	0x24001c18
 80057ac:	240028b0 	.word	0x240028b0
 80057b0:	24001d48 	.word	0x24001d48
 80057b4:	24001718 	.word	0x24001718
 80057b8:	240026e0 	.word	0x240026e0
 80057bc:	240027e0 	.word	0x240027e0
 80057c0:	240028e0 	.word	0x240028e0
 80057c4:	240029b0 	.word	0x240029b0
 80057c8:	24001d18 	.word	0x24001d18
 80057cc:	24001e48 	.word	0x24001e48
 80057d0:	24001e18 	.word	0x24001e18
 80057d4:	24001f18 	.word	0x24001f18
 80057d8:	24002018 	.word	0x24002018

080057dc <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80057dc:	f016 bb08 	b.w	801bdf0 <ai_platform_network_process>

080057e0 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 80057e0:	b470      	push	{r4, r5, r6}
 80057e2:	b085      	sub	sp, #20
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 80057e4:	4e07      	ldr	r6, [pc, #28]	; (8005804 <ai_network_data_activations_buffer_get+0x24>)
 80057e6:	f240 4401 	movw	r4, #1025	; 0x401
 80057ea:	4d07      	ldr	r5, [pc, #28]	; (8005808 <ai_network_data_activations_buffer_get+0x28>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c0 d018 	str.w	sp, [r0, #24]
 80057f2:	e9c0 6100 	strd	r6, r1, [r0]
 80057f6:	e9c0 5404 	strd	r5, r4, [r0, #16]
 80057fa:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 80057fe:	b005      	add	sp, #20
 8005800:	bc70      	pop	{r4, r5, r6}
 8005802:	4770      	bx	lr
 8005804:	00040440 	.word	0x00040440
 8005808:	000251c8 	.word	0x000251c8

0800580c <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 800580c:	b470      	push	{r4, r5, r6}
 800580e:	b085      	sub	sp, #20
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8005810:	4e07      	ldr	r6, [pc, #28]	; (8005830 <ai_network_data_weights_buffer_get+0x24>)
 8005812:	f240 4401 	movw	r4, #1025	; 0x401
 8005816:	4d07      	ldr	r5, [pc, #28]	; (8005834 <ai_network_data_weights_buffer_get+0x28>)
 8005818:	2200      	movs	r2, #0
 800581a:	f8c0 d018 	str.w	sp, [r0, #24]
 800581e:	e9c0 6100 	strd	r6, r1, [r0]
 8005822:	e9c0 5404 	strd	r5, r4, [r0, #16]
 8005826:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 800582a:	b005      	add	sp, #20
 800582c:	bc70      	pop	{r4, r5, r6}
 800582e:	4770      	bx	lr
 8005830:	40040440 	.word	0x40040440
 8005834:	00020e78 	.word	0x00020e78

08005838 <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_table);

}
 8005838:	4800      	ldr	r0, [pc, #0]	; (800583c <ai_network_data_weights_get+0x4>)
 800583a:	4770      	bx	lr
 800583c:	08045d58 	.word	0x08045d58

08005840 <SD_initialize>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 8005840:	2301      	movs	r3, #1
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005842:	2000      	movs	r0, #0
{
 8005844:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005846:	4c07      	ldr	r4, [pc, #28]	; (8005864 <SD_initialize+0x24>)
 8005848:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 800584a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 800584c:	f004 fdfe 	bl	800a44c <BSP_SD_GetCardState>
 8005850:	b918      	cbnz	r0, 800585a <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 8005852:	7823      	ldrb	r3, [r4, #0]
 8005854:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005858:	7023      	strb	r3, [r4, #0]
  return Stat;
 800585a:	7823      	ldrb	r3, [r4, #0]
 800585c:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800585e:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 8005860:	7820      	ldrb	r0, [r4, #0]
}
 8005862:	bd10      	pop	{r4, pc}
 8005864:	24002f50 	.word	0x24002f50

08005868 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005868:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 800586a:	2000      	movs	r0, #0
 800586c:	f004 fdc2 	bl	800a3f4 <BSP_SD_ReadBlocks>
 8005870:	b108      	cbz	r0, 8005876 <SD_read+0xe>
  DRESULT res = RES_ERROR;
 8005872:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8005874:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 8005876:	2000      	movs	r0, #0
 8005878:	f004 fde8 	bl	800a44c <BSP_SD_GetCardState>
 800587c:	2800      	cmp	r0, #0
 800587e:	d0f9      	beq.n	8005874 <SD_read+0xc>
 8005880:	2000      	movs	r0, #0
 8005882:	f004 fde3 	bl	800a44c <BSP_SD_GetCardState>
 8005886:	2800      	cmp	r0, #0
 8005888:	d1f5      	bne.n	8005876 <SD_read+0xe>
 800588a:	e7f3      	b.n	8005874 <SD_read+0xc>

0800588c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800588c:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <SD_ioctl+0x5c>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	07db      	lsls	r3, r3, #31
 8005892:	d412      	bmi.n	80058ba <SD_ioctl+0x2e>
 8005894:	4608      	mov	r0, r1
{
 8005896:	b510      	push	{r4, lr}
 8005898:	4614      	mov	r4, r2
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	2903      	cmp	r1, #3
 800589e:	d821      	bhi.n	80058e4 <SD_ioctl+0x58>
 80058a0:	e8df f001 	tbb	[pc, r1]
 80058a4:	0d170209 	.word	0x0d170209
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0, &CardInfo);
 80058a8:	a901      	add	r1, sp, #4
 80058aa:	2000      	movs	r0, #0
 80058ac:	f004 fdda 	bl	800a464 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80058b0:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 80058b2:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80058b4:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 80058b6:	b00a      	add	sp, #40	; 0x28
 80058b8:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80058ba:	2003      	movs	r0, #3
}
 80058bc:	4770      	bx	lr
    BSP_SD_GetCardInfo(0, &CardInfo);
 80058be:	a901      	add	r1, sp, #4
 80058c0:	2000      	movs	r0, #0
 80058c2:	f004 fdcf 	bl	800a464 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80058c6:	9b08      	ldr	r3, [sp, #32]
 80058c8:	2000      	movs	r0, #0
 80058ca:	0a5b      	lsrs	r3, r3, #9
 80058cc:	6023      	str	r3, [r4, #0]
}
 80058ce:	b00a      	add	sp, #40	; 0x28
 80058d0:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 80058d2:	a901      	add	r1, sp, #4
 80058d4:	2000      	movs	r0, #0
 80058d6:	f004 fdc5 	bl	800a464 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80058da:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 80058dc:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 80058de:	8023      	strh	r3, [r4, #0]
}
 80058e0:	b00a      	add	sp, #40	; 0x28
 80058e2:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80058e4:	2004      	movs	r0, #4
 80058e6:	e7e6      	b.n	80058b6 <SD_ioctl+0x2a>
 80058e8:	24002f50 	.word	0x24002f50

080058ec <SD_write>:
{
 80058ec:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 80058ee:	2000      	movs	r0, #0
 80058f0:	f004 fd96 	bl	800a420 <BSP_SD_WriteBlocks>
 80058f4:	b108      	cbz	r0, 80058fa <SD_write+0xe>
  DRESULT res = RES_ERROR;
 80058f6:	2001      	movs	r0, #1
}
 80058f8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 80058fa:	2000      	movs	r0, #0
 80058fc:	f004 fda6 	bl	800a44c <BSP_SD_GetCardState>
 8005900:	2800      	cmp	r0, #0
 8005902:	d0f9      	beq.n	80058f8 <SD_write+0xc>
 8005904:	2000      	movs	r0, #0
 8005906:	f004 fda1 	bl	800a44c <BSP_SD_GetCardState>
 800590a:	2800      	cmp	r0, #0
 800590c:	d1f5      	bne.n	80058fa <SD_write+0xe>
 800590e:	e7f3      	b.n	80058f8 <SD_write+0xc>

08005910 <SD_status>:
{
 8005910:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005912:	2301      	movs	r3, #1
 8005914:	4c05      	ldr	r4, [pc, #20]	; (800592c <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005916:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8005918:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 800591a:	f004 fd97 	bl	800a44c <BSP_SD_GetCardState>
 800591e:	b918      	cbnz	r0, 8005928 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8005920:	7823      	ldrb	r3, [r4, #0]
 8005922:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005926:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005928:	7820      	ldrb	r0, [r4, #0]
}
 800592a:	bd10      	pop	{r4, pc}
 800592c:	24002f50 	.word	0x24002f50

08005930 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop

08005934 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8005934:	b500      	push	{lr}
 8005936:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8005938:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 800593c:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005940:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8005942:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8005944:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005946:	f009 fbc9 	bl	800f0dc <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 800594a:	4b08      	ldr	r3, [pc, #32]	; (800596c <HAL_RNG_MspInit+0x38>)
 800594c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8005950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005954:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005958:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	9b01      	ldr	r3, [sp, #4]
}
 8005964:	b033      	add	sp, #204	; 0xcc
 8005966:	f85d fb04 	ldr.w	pc, [sp], #4
 800596a:	bf00      	nop
 800596c:	58024400 	.word	0x58024400

08005970 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <HAL_RNG_MspDeInit+0x1c>)
 8005972:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 800597e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800598a:	4770      	bx	lr
 800598c:	58024400 	.word	0x58024400

08005990 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8005994:	f8df a158 	ldr.w	sl, [pc, #344]	; 8005af0 <HAL_UART_MspInit+0x160>
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8005998:	2701      	movs	r7, #1
{
 800599a:	b0bb      	sub	sp, #236	; 0xec
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800599c:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 800599e:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
{
 80059a2:	4606      	mov	r6, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 80059a4:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80059a6:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8005af4 <HAL_UART_MspInit+0x164>
  USARTx_TX_GPIO_CLK_ENABLE();
 80059aa:	433b      	orrs	r3, r7
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80059ac:	2507      	movs	r5, #7

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80059ae:	f44f 6880 	mov.w	r8, #1024	; 0x400
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80059b2:	f04f 0b03 	mov.w	fp, #3
  USARTx_TX_GPIO_CLK_ENABLE();
 80059b6:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80059ba:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
 80059be:	403b      	ands	r3, r7
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 80059c4:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
 80059c8:	433b      	orrs	r3, r7
 80059ca:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80059ce:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 80059d2:	970a      	str	r7, [sp, #40]	; 0x28
  USARTx_RX_GPIO_CLK_ENABLE();
 80059d4:	403b      	ands	r3, r7
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80059d6:	9429      	str	r4, [sp, #164]	; 0xa4
  USARTx_RX_GPIO_CLK_ENABLE();
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	9b01      	ldr	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 80059dc:	f009 fb7e 	bl	800f0dc <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 80059e0:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80059e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e8:	2302      	movs	r3, #2
  USARTx_CLK_ENABLE();
 80059ea:	f041 0110 	orr.w	r1, r1, #16
 80059ee:	f8ca 10f0 	str.w	r1, [sl, #240]	; 0xf0
 80059f2:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
 80059f6:	f001 0110 	and.w	r1, r1, #16
 80059fa:	9102      	str	r1, [sp, #8]
 80059fc:	9902      	ldr	r1, [sp, #8]
  DMAx_CLK_ENABLE();
 80059fe:	f8da 10d8 	ldr.w	r1, [sl, #216]	; 0xd8
 8005a02:	4339      	orrs	r1, r7
 8005a04:	f8ca 10d8 	str.w	r1, [sl, #216]	; 0xd8
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8005a08:	a904      	add	r1, sp, #16
  DMAx_CLK_ENABLE();
 8005a0a:	f8da 00d8 	ldr.w	r0, [sl, #216]	; 0xd8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8005a0e:	9508      	str	r5, [sp, #32]
  DMAx_CLK_ENABLE();
 8005a10:	4038      	ands	r0, r7
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8005a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005af8 <HAL_UART_MspInit+0x168>
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8005a16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	2303      	movs	r3, #3
  DMAx_CLK_ENABLE();
 8005a1e:	9003      	str	r0, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8005a20:	4648      	mov	r0, r9
  DMAx_CLK_ENABLE();
 8005a22:	f8dd c00c 	ldr.w	ip, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8005a26:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8005a2a:	f007 fab3 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8005a2e:	a904      	add	r1, sp, #16
 8005a30:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8005a32:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8005a34:	f8cd 8010 	str.w	r8, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8005a38:	f007 faac 	bl	800cf94 <HAL_GPIO_Init>
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8005a3c:	482a      	ldr	r0, [pc, #168]	; (8005ae8 <HAL_UART_MspInit+0x158>)
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8005a3e:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8005a42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8005a46:	212a      	movs	r1, #42	; 0x2a
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005a48:	2240      	movs	r2, #64	; 0x40

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8005a4a:	4d28      	ldr	r5, [pc, #160]	; (8005aec <HAL_UART_MspInit+0x15c>)
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8005a4c:	f8ca 0000 	str.w	r0, [sl]
  HAL_DMA_Init(&hdma_tx);
 8005a50:	4650      	mov	r0, sl
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8005a52:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005a56:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005a5a:	e9ca 1201 	strd	r1, r2, [sl, #4]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005a5e:	e9ca 4803 	strd	r4, r8, [sl, #12]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005a62:	e9ca 4405 	strd	r4, r4, [sl, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8005a66:	e9ca 4407 	strd	r4, r4, [sl, #28]
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8005a6a:	e9ca b90a 	strd	fp, r9, [sl, #40]	; 0x28
  HAL_DMA_Init(&hdma_tx);
 8005a6e:	f005 f8fd 	bl	800ac6c <HAL_DMA_Init>
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8005a72:	f8df c088 	ldr.w	ip, [pc, #136]	; 8005afc <HAL_UART_MspInit+0x16c>
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8005a76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8005a7a:	2129      	movs	r1, #41	; 0x29
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

  HAL_DMA_Init(&hdma_rx);
 8005a80:	4628      	mov	r0, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8005a82:	f8c6 a074 	str.w	sl, [r6, #116]	; 0x74
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8005a86:	632b      	str	r3, [r5, #48]	; 0x30
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005a88:	622a      	str	r2, [r5, #32]
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8005a8a:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005a8e:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8005a92:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8005a94:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8005a98:	e9c5 c100 	strd	ip, r1, [r5]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005a9c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005aa0:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005aa4:	e9c5 4b09 	strd	r4, fp, [r5, #36]	; 0x24
  HAL_DMA_Init(&hdma_rx);
 8005aa8:	f005 f8e0 	bl	800ac6c <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8005aac:	463a      	mov	r2, r7
 8005aae:	4621      	mov	r1, r4
 8005ab0:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8005ab2:	67b5      	str	r5, [r6, #120]	; 0x78
 8005ab4:	63ae      	str	r6, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8005ab6:	f004 fd83 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8005aba:	202f      	movs	r0, #47	; 0x2f
 8005abc:	f004 fdba 	bl	800a634 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	2010      	movs	r0, #16
 8005ac6:	f004 fd7b 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8005aca:	2010      	movs	r0, #16
 8005acc:	f004 fdb2 	bl	800a634 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8005ad0:	463a      	mov	r2, r7
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	2025      	movs	r0, #37	; 0x25
 8005ad6:	f004 fd73 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8005ada:	2025      	movs	r0, #37	; 0x25
 8005adc:	f004 fdaa 	bl	800a634 <HAL_NVIC_EnableIRQ>
}
 8005ae0:	b03b      	add	sp, #236	; 0xec
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	bf00      	nop
 8005ae8:	400200b8 	.word	0x400200b8
 8005aec:	240045a8 	.word	0x240045a8
 8005af0:	58024400 	.word	0x58024400
 8005af4:	58020000 	.word	0x58020000
 8005af8:	24004620 	.word	0x24004620
 8005afc:	40020088 	.word	0x40020088

08005b00 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005b04:	e7fe      	b.n	8005b04 <HardFault_Handler>
 8005b06:	bf00      	nop

08005b08 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005b08:	e7fe      	b.n	8005b08 <MemManage_Handler>
 8005b0a:	bf00      	nop

08005b0c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005b0c:	e7fe      	b.n	8005b0c <BusFault_Handler>
 8005b0e:	bf00      	nop

08005b10 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005b10:	e7fe      	b.n	8005b10 <UsageFault_Handler>
 8005b12:	bf00      	nop

08005b14 <SVC_Handler>:
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop

08005b18 <DebugMon_Handler>:
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <PendSV_Handler>:
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8005b20:	f004 bd08 	b.w	800a534 <HAL_IncTick>

08005b24 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 8005b24:	2000      	movs	r0, #0
 8005b26:	f003 bded 	b.w	8009704 <BSP_CAMERA_DMA_IRQHandler>
 8005b2a:	bf00      	nop

08005b2c <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f003 bde3 	b.w	80096f8 <BSP_CAMERA_IRQHandler>
 8005b32:	bf00      	nop

08005b34 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <MDMA_IRQHandler+0x8>)
 8005b36:	f008 bac7 	b.w	800e0c8 <HAL_MDMA_IRQHandler>
 8005b3a:	bf00      	nop
 8005b3c:	24005574 	.word	0x24005574

08005b40 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <DSI_IRQHandler+0x8>)
 8005b42:	f006 bf09 	b.w	800c958 <HAL_DSI_IRQHandler>
 8005b46:	bf00      	nop
 8005b48:	240064a8 	.word	0x240064a8

08005b4c <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 8005b4c:	4801      	ldr	r0, [pc, #4]	; (8005b54 <DMA2D_IRQHandler+0x8>)
 8005b4e:	f006 bd3b 	b.w	800c5c8 <HAL_DMA2D_IRQHandler>
 8005b52:	bf00      	nop
 8005b54:	240064c4 	.word	0x240064c4

08005b58 <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 8005b58:	4b02      	ldr	r3, [pc, #8]	; (8005b64 <DMA1_Stream5_IRQHandler+0xc>)
 8005b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5c:	f8d3 0b34 	ldr.w	r0, [r3, #2868]	; 0xb34
 8005b60:	f006 b812 	b.w	800bb88 <HAL_DMA_IRQHandler>
 8005b64:	24005500 	.word	0x24005500

08005b68 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <DMA1_Stream7_IRQHandler+0xc>)
 8005b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6c:	f8d3 0b30 	ldr.w	r0, [r3, #2864]	; 0xb30
 8005b70:	f006 b80a 	b.w	800bb88 <HAL_DMA_IRQHandler>
 8005b74:	24005500 	.word	0x24005500

08005b78 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8005b78:	4b02      	ldr	r3, [pc, #8]	; (8005b84 <USART1_IRQHandler+0xc>)
 8005b7a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005b7c:	f600 20bc 	addw	r0, r0, #2748	; 0xabc
 8005b80:	f00b be8e 	b.w	80118a0 <HAL_UART_IRQHandler>
 8005b84:	24005500 	.word	0x24005500

08005b88 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <LTDC_IRQHandler+0x8>)
 8005b8a:	f008 b869 	b.w	800dc60 <HAL_LTDC_IRQHandler>
 8005b8e:	bf00      	nop
 8005b90:	240063e4 	.word	0x240063e4

08005b94 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005b94:	4988      	ldr	r1, [pc, #544]	; (8005db8 <SystemInit+0x224>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b96:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8005b98:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <SystemInit+0x228>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b9a:	4889      	ldr	r0, [pc, #548]	; (8005dc0 <SystemInit+0x22c>)
{
 8005b9c:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005b9e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 8005ba2:	b082      	sub	sp, #8

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005ba4:	4d87      	ldr	r5, [pc, #540]	; (8005dc4 <SystemInit+0x230>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005ba6:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005baa:	4e87      	ldr	r6, [pc, #540]	; (8005dc8 <SystemInit+0x234>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005bac:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8005bb0:	690c      	ldr	r4, [r1, #16]
 8005bb2:	f044 0404 	orr.w	r4, r4, #4
 8005bb6:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 8005bb8:	681c      	ldr	r4, [r3, #0]
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005bba:	4984      	ldr	r1, [pc, #528]	; (8005dcc <SystemInit+0x238>)
  RCC->CR |= RCC_CR_HSION;
 8005bbc:	f044 0401 	orr.w	r4, r4, #1
 8005bc0:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005bc2:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8005bc4:	681c      	ldr	r4, [r3, #0]
 8005bc6:	4020      	ands	r0, r4
 8005bc8:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8005bca:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005bcc:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005bce:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8005bd8:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8005bda:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8005bde:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005be6:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8005be8:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8005bea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf0:	626b      	str	r3, [r5, #36]	; 0x24
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	4019      	ands	r1, r3
 8005bf6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005bfa:	d202      	bcs.n	8005c02 <SystemInit+0x6e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8005bfc:	4b74      	ldr	r3, [pc, #464]	; (8005dd0 <SystemInit+0x23c>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 8005c02:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8005c04:	486d      	ldr	r0, [pc, #436]	; (8005dbc <SystemInit+0x228>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 8005c06:	4973      	ldr	r1, [pc, #460]	; (8005dd4 <SystemInit+0x240>)
 8005c08:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
  __IO uint32_t tmp = 0;
 8005c0c:	9300      	str	r3, [sp, #0]
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8005c0e:	f04f 34cc 	mov.w	r4, #3435973836	; 0xcccccccc
  RCC->AHB4ENR |= 0x000001F8;
 8005c12:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
  GPIOI->AFR[1] = 0x00000CC0;
 8005c16:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
  GPIOD->AFR[1] = 0xCC000CCC;
 8005c1a:	4f6f      	ldr	r7, [pc, #444]	; (8005dd8 <SystemInit+0x244>)
  RCC->AHB4ENR |= 0x000001F8;
 8005c1c:	f442 72fc 	orr.w	r2, r2, #504	; 0x1f8
  GPIOD->MODER = 0xAFEAFFFA;
 8005c20:	4e6e      	ldr	r6, [pc, #440]	; (8005ddc <SystemInit+0x248>)
  RCC->AHB4ENR |= 0x000001F8;
 8005c22:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8005c26:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 8005c2a:	f002 0210 	and.w	r2, r2, #16
 8005c2e:	9200      	str	r2, [sp, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8005c30:	4a6b      	ldr	r2, [pc, #428]	; (8005de0 <SystemInit+0x24c>)
  GPIOD->AFR[0] = 0x000000CC;
 8005c32:	f8c1 c020 	str.w	ip, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 8005c36:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOE->AFR[0] = 0xC00000CC;
 8005c38:	f1a7 270c 	sub.w	r7, r7, #201329664	; 0xc000c00
  GPIOD->MODER = 0xAFEAFFFA;
 8005c3c:	600e      	str	r6, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8005c3e:	608a      	str	r2, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 8005c40:	4e68      	ldr	r6, [pc, #416]	; (8005de4 <SystemInit+0x250>)
  GPIOE->AFR[0] = 0xC00000CC;
 8005c42:	4a69      	ldr	r2, [pc, #420]	; (8005de8 <SystemInit+0x254>)
  GPIOD->OTYPER = 0x00000000;
 8005c44:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 8005c46:	60ce      	str	r6, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 8005c48:	6217      	str	r7, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8005c4a:	4e68      	ldr	r6, [pc, #416]	; (8005dec <SystemInit+0x258>)
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8005c4c:	4968      	ldr	r1, [pc, #416]	; (8005df0 <SystemInit+0x25c>)
  GPIOE->PUPDR = 0x55554005;
 8005c4e:	4f69      	ldr	r7, [pc, #420]	; (8005df4 <SystemInit+0x260>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8005c50:	6254      	str	r4, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 8005c52:	6016      	str	r6, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8005c54:	6091      	str	r1, [r2, #8]
  GPIOF->AFR[0] = 0x00CCCCCC;
 8005c56:	4e68      	ldr	r6, [pc, #416]	; (8005df8 <SystemInit+0x264>)
  GPIOE->OTYPER = 0x00000000;
 8005c58:	6053      	str	r3, [r2, #4]
  GPIOF->AFR[0] = 0x00CCCCCC;
 8005c5a:	4968      	ldr	r1, [pc, #416]	; (8005dfc <SystemInit+0x268>)
  GPIOE->PUPDR = 0x55554005;
 8005c5c:	60d7      	str	r7, [r2, #12]
  GPIOF->AFR[1] = 0xCCCCC000;
 8005c5e:	4f68      	ldr	r7, [pc, #416]	; (8005e00 <SystemInit+0x26c>)
  GPIOF->MODER = 0xAABFFAAA;
 8005c60:	4a68      	ldr	r2, [pc, #416]	; (8005e04 <SystemInit+0x270>)
  GPIOF->AFR[0] = 0x00CCCCCC;
 8005c62:	620e      	str	r6, [r1, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 8005c64:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 8005c66:	600a      	str	r2, [r1, #0]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8005c68:	4a67      	ldr	r2, [pc, #412]	; (8005e08 <SystemInit+0x274>)
  GPIOF->PUPDR = 0x55400555;
 8005c6a:	4f68      	ldr	r7, [pc, #416]	; (8005e0c <SystemInit+0x278>)
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8005c6c:	608a      	str	r2, [r1, #8]
  GPIOG->AFR[0] = 0x00CCCCCC;
 8005c6e:	4a68      	ldr	r2, [pc, #416]	; (8005e10 <SystemInit+0x27c>)
  GPIOF->OTYPER = 0x00000000;
 8005c70:	604b      	str	r3, [r1, #4]
  GPIOF->PUPDR = 0x55400555;
 8005c72:	60cf      	str	r7, [r1, #12]
    WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8005c74:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
  GPIOG->AFR[0] = 0x00CCCCCC;
 8005c78:	6216      	str	r6, [r2, #32]
  GPIOG->MODER = 0xBFFEFAAA;
 8005c7a:	4966      	ldr	r1, [pc, #408]	; (8005e14 <SystemInit+0x280>)
  GPIOG->AFR[1] = 0xC000000C;
 8005c7c:	4e66      	ldr	r6, [pc, #408]	; (8005e18 <SystemInit+0x284>)
 8005c7e:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8005c80:	6011      	str	r1, [r2, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8005c82:	f501 2182 	add.w	r1, r1, #266240	; 0x41000
  GPIOG->PUPDR = 0x40010555;
 8005c86:	4e65      	ldr	r6, [pc, #404]	; (8005e1c <SystemInit+0x288>)
  GPIOG->OSPEEDR = 0xC0030FFF;
 8005c88:	f201 5155 	addw	r1, r1, #1365	; 0x555
 8005c8c:	6091      	str	r1, [r2, #8]
  GPIOH->AFR[0] = 0xCCC00000;
 8005c8e:	4964      	ldr	r1, [pc, #400]	; (8005e20 <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8005c90:	6053      	str	r3, [r2, #4]
  GPIOG->PUPDR = 0x40010555;
 8005c92:	60d6      	str	r6, [r2, #12]
  GPIOH->AFR[0] = 0xCCC00000;
 8005c94:	4a63      	ldr	r2, [pc, #396]	; (8005e24 <SystemInit+0x290>)
  GPIOH->MODER = 0xAAAAABFF;
 8005c96:	4e64      	ldr	r6, [pc, #400]	; (8005e28 <SystemInit+0x294>)
  GPIOH->AFR[0] = 0xCCC00000;
 8005c98:	620a      	str	r2, [r1, #32]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8005c9a:	4a64      	ldr	r2, [pc, #400]	; (8005e2c <SystemInit+0x298>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 8005c9c:	624c      	str	r4, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 8005c9e:	600e      	str	r6, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8005ca0:	608a      	str	r2, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8005ca2:	4e63      	ldr	r6, [pc, #396]	; (8005e30 <SystemInit+0x29c>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8005ca4:	4a63      	ldr	r2, [pc, #396]	; (8005e34 <SystemInit+0x2a0>)
  GPIOH->OTYPER = 0x00000000;
 8005ca6:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8005ca8:	60ce      	str	r6, [r1, #12]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8005caa:	f240 1665 	movw	r6, #357	; 0x165
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8005cae:	6214      	str	r4, [r2, #32]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8005cb0:	2109      	movs	r1, #9
  GPIOI->AFR[1] = 0x00000CC0;
 8005cb2:	6255      	str	r5, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8005cb4:	f5a5 15a3 	sub.w	r5, r5, #1335296	; 0x146000
  GPIOI->OSPEEDR = 0x003CFFFF;
 8005cb8:	4c5f      	ldr	r4, [pc, #380]	; (8005e38 <SystemInit+0x2a4>)
  GPIOI->MODER = 0xFFEBAAAA;
 8005cba:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 8005cbe:	6015      	str	r5, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8005cc0:	6094      	str	r4, [r2, #8]
  GPIOI->PUPDR = 0x00145555;
 8005cc2:	4c5e      	ldr	r4, [pc, #376]	; (8005e3c <SystemInit+0x2a8>)
  GPIOI->OTYPER = 0x00000000;
 8005cc4:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8005cc6:	60d4      	str	r4, [r2, #12]
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8005cc8:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8005ccc:	4b5c      	ldr	r3, [pc, #368]	; (8005e40 <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8005cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8005cd2:	4d5c      	ldr	r5, [pc, #368]	; (8005e44 <SystemInit+0x2b0>)
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8005cd4:	4c5c      	ldr	r4, [pc, #368]	; (8005e48 <SystemInit+0x2b4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8005cd6:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8005cda:	601f      	str	r7, [r3, #0]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8005cdc:	605e      	str	r6, [r3, #4]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8005cde:	609d      	str	r5, [r3, #8]
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8005ce0:	60dc      	str	r4, [r3, #12]
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8005ce2:	6119      	str	r1, [r3, #16]
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005ce4:	699a      	ldr	r2, [r3, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005ce6:	f012 0220 	ands.w	r2, r2, #32
 8005cea:	d008      	beq.n	8005cfe <SystemInit+0x16a>
 8005cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005cf0:	e001      	b.n	8005cf6 <SystemInit+0x162>
 8005cf2:	3901      	subs	r1, #1
 8005cf4:	d054      	beq.n	8005da0 <SystemInit+0x20c>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005cf6:	699a      	ldr	r2, [r3, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005cf8:	f012 0220 	ands.w	r2, r2, #32
 8005cfc:	d1f9      	bne.n	8005cf2 <SystemInit+0x15e>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 8005cfe:	9201      	str	r2, [sp, #4]
 8005d00:	9a01      	ldr	r2, [sp, #4]
 8005d02:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005d06:	d253      	bcs.n	8005db0 <SystemInit+0x21c>
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d08:	2200      	movs	r2, #0
  for (index = 0; index < 1000; index++)
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	9b01      	ldr	r3, [sp, #4]
 8005d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d16:	d3f8      	bcc.n	8005d0a <SystemInit+0x176>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8005d18:	4b49      	ldr	r3, [pc, #292]	; (8005e40 <SystemInit+0x2ac>)
 8005d1a:	210a      	movs	r1, #10
 8005d1c:	6119      	str	r1, [r3, #16]
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d1e:	b142      	cbz	r2, 8005d32 <SystemInit+0x19e>
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005d24:	4a46      	ldr	r2, [pc, #280]	; (8005e40 <SystemInit+0x2ac>)
 8005d26:	e001      	b.n	8005d2c <SystemInit+0x198>
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	d01f      	beq.n	8005d6c <SystemInit+0x1d8>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005d2c:	6991      	ldr	r1, [r2, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d2e:	068c      	lsls	r4, r1, #26
 8005d30:	d4fa      	bmi.n	8005d28 <SystemInit+0x194>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8005d32:	4b43      	ldr	r3, [pc, #268]	; (8005e40 <SystemInit+0x2ac>)
 8005d34:	22eb      	movs	r2, #235	; 0xeb
 8005d36:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8005d38:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <SystemInit+0x2ac>)
 8005d3a:	4a44      	ldr	r2, [pc, #272]	; (8005e4c <SystemInit+0x2b8>)
 8005d3c:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8005d3e:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8005d40:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8005d44:	4942      	ldr	r1, [pc, #264]	; (8005e50 <SystemInit+0x2bc>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d46:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8005d4a:	695d      	ldr	r5, [r3, #20]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d4c:	481a      	ldr	r0, [pc, #104]	; (8005db8 <SystemInit+0x224>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8005d4e:	432a      	orrs	r2, r5
 8005d50:	615a      	str	r2, [r3, #20]
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 8005d52:	685a      	ldr	r2, [r3, #4]
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 8005d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d58:	605a      	str	r2, [r3, #4]
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8005d5a:	680b      	ldr	r3, [r1, #0]
 8005d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8005d62:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d64:	6084      	str	r4, [r0, #8]
}
 8005d66:	b002      	add	sp, #8
 8005d68:	bcf0      	pop	{r4, r5, r6, r7}
 8005d6a:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8005d6c:	20eb      	movs	r0, #235	; 0xeb
 8005d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005d72:	4933      	ldr	r1, [pc, #204]	; (8005e40 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8005d74:	6110      	str	r0, [r2, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d76:	e001      	b.n	8005d7c <SystemInit+0x1e8>
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	d005      	beq.n	8005d88 <SystemInit+0x1f4>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005d7c:	698a      	ldr	r2, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d7e:	0690      	lsls	r0, r2, #26
 8005d80:	d4fa      	bmi.n	8005d78 <SystemInit+0x1e4>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8005d82:	4b32      	ldr	r3, [pc, #200]	; (8005e4c <SystemInit+0x2b8>)
 8005d84:	610b      	str	r3, [r1, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d86:	e7da      	b.n	8005d3e <SystemInit+0x1aa>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8005d88:	4a30      	ldr	r2, [pc, #192]	; (8005e4c <SystemInit+0x2b8>)
 8005d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005d8e:	482c      	ldr	r0, [pc, #176]	; (8005e40 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8005d90:	610a      	str	r2, [r1, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d92:	e001      	b.n	8005d98 <SystemInit+0x204>
 8005d94:	3b01      	subs	r3, #1
 8005d96:	d0d2      	beq.n	8005d3e <SystemInit+0x1aa>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005d98:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005d9a:	0692      	lsls	r2, r2, #26
 8005d9c:	d5cf      	bpl.n	8005d3e <SystemInit+0x1aa>
 8005d9e:	e7f9      	b.n	8005d94 <SystemInit+0x200>
  for (index = 0; index < 1000; index++)
 8005da0:	9101      	str	r1, [sp, #4]
 8005da2:	9901      	ldr	r1, [sp, #4]
 8005da4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8005da8:	d3af      	bcc.n	8005d0a <SystemInit+0x176>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8005daa:	220a      	movs	r2, #10
 8005dac:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005dae:	e7b7      	b.n	8005d20 <SystemInit+0x18c>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8005db0:	220a      	movs	r2, #10
 8005db2:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005db4:	e7bd      	b.n	8005d32 <SystemInit+0x19e>
 8005db6:	bf00      	nop
 8005db8:	e000ed00 	.word	0xe000ed00
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8005dc4:	580000c0 	.word	0x580000c0
 8005dc8:	5c001000 	.word	0x5c001000
 8005dcc:	ffff0000 	.word	0xffff0000
 8005dd0:	51008108 	.word	0x51008108
 8005dd4:	58020c00 	.word	0x58020c00
 8005dd8:	cc000ccc 	.word	0xcc000ccc
 8005ddc:	afeafffa 	.word	0xafeafffa
 8005de0:	f03f000f 	.word	0xf03f000f
 8005de4:	50150005 	.word	0x50150005
 8005de8:	58021000 	.word	0x58021000
 8005dec:	aaaabffa 	.word	0xaaaabffa
 8005df0:	ffffc00f 	.word	0xffffc00f
 8005df4:	55554005 	.word	0x55554005
 8005df8:	00cccccc 	.word	0x00cccccc
 8005dfc:	58021400 	.word	0x58021400
 8005e00:	ccccc000 	.word	0xccccc000
 8005e04:	aabffaaa 	.word	0xaabffaaa
 8005e08:	ffc00fff 	.word	0xffc00fff
 8005e0c:	55400555 	.word	0x55400555
 8005e10:	58021800 	.word	0x58021800
 8005e14:	bffefaaa 	.word	0xbffefaaa
 8005e18:	c000000c 	.word	0xc000000c
 8005e1c:	40010555 	.word	0x40010555
 8005e20:	58021c00 	.word	0x58021c00
 8005e24:	ccc00000 	.word	0xccc00000
 8005e28:	aaaaabff 	.word	0xaaaaabff
 8005e2c:	fffffc00 	.word	0xfffffc00
 8005e30:	55555400 	.word	0x55555400
 8005e34:	58022000 	.word	0x58022000
 8005e38:	003cffff 	.word	0x003cffff
 8005e3c:	00145555 	.word	0x00145555
 8005e40:	52004140 	.word	0x52004140
 8005e44:	00105000 	.word	0x00105000
 8005e48:	01010351 	.word	0x01010351
 8005e4c:	0004400c 	.word	0x0004400c
 8005e50:	52004000 	.word	0x52004000

08005e54 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8005e5c:	4b02      	ldr	r3, [pc, #8]	; (8005e68 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8005e5e:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	600b      	str	r3, [r1, #0]
}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	24004698 	.word	0x24004698

08005e6c <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8005e6e:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	600b      	str	r3, [r1, #0]
}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	24004698 	.word	0x24004698

08005e7c <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <OTM8009A_GetXSize+0x1c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	b123      	cbz	r3, 8005e8c <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8005e82:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8005e86:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8005e88:	600b      	str	r3, [r1, #0]
}
 8005e8a:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8005e8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8005e90:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8005e92:	600b      	str	r3, [r1, #0]
}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	24004698 	.word	0x24004698

08005e9c <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <OTM8009A_GetYSize+0x1c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	b123      	cbz	r3, 8005eac <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8005ea2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8005ea6:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8005ea8:	600b      	str	r3, [r1, #0]
}
 8005eaa:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8005eac:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8005eb0:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8005eb2:	600b      	str	r3, [r1, #0]
}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	24004698 	.word	0x24004698

08005ebc <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop

08005ec4 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop

08005ed4 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop

08005edc <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop

08005ee4 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop

08005eec <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005eec:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005eee:	6884      	ldr	r4, [r0, #8]
 8005ef0:	8800      	ldrh	r0, [r0, #0]
 8005ef2:	46a4      	mov	ip, r4
}
 8005ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005ef8:	4760      	bx	ip
 8005efa:	bf00      	nop

08005efc <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005efc:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005efe:	6844      	ldr	r4, [r0, #4]
 8005f00:	8800      	ldrh	r0, [r0, #0]
 8005f02:	46a4      	mov	ip, r4
}
 8005f04:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005f08:	4760      	bx	ip
 8005f0a:	bf00      	nop

08005f0c <OTM8009A_Init>:
{
 8005f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f10:	2300      	movs	r3, #0
 8005f12:	f100 0710 	add.w	r7, r0, #16
{
 8005f16:	b082      	sub	sp, #8
 8005f18:	4680      	mov	r8, r0
 8005f1a:	4689      	mov	r9, r1
 8005f1c:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4ae0      	ldr	r2, [pc, #896]	; (80062a4 <OTM8009A_Init+0x398>)
 8005f22:	4638      	mov	r0, r7
 8005f24:	f000 fcd6 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005f28:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f2a:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005f2c:	4ade      	ldr	r2, [pc, #888]	; (80062a8 <OTM8009A_Init+0x39c>)
 8005f2e:	21ff      	movs	r1, #255	; 0xff
 8005f30:	4638      	mov	r0, r7
 8005f32:	f000 fccf 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005f38:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f3a:	4adc      	ldr	r2, [pc, #880]	; (80062ac <OTM8009A_Init+0x3a0>)
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f000 fcc8 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005f44:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005f46:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005f4a:	4ad9      	ldr	r2, [pc, #868]	; (80062b0 <OTM8009A_Init+0x3a4>)
 8005f4c:	21ff      	movs	r1, #255	; 0xff
 8005f4e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f50:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005f52:	f000 fcbf 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005f58:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f5a:	4ad4      	ldr	r2, [pc, #848]	; (80062ac <OTM8009A_Init+0x3a0>)
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f000 fcb8 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005f64:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f66:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4ad2      	ldr	r2, [pc, #840]	; (80062b4 <OTM8009A_Init+0x3a8>)
 8005f6c:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f6e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005f70:	4638      	mov	r0, r7
 8005f72:	f000 fcaf 	bl	80068d4 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005f76:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005f7a:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8005f7c:	4798      	blx	r3
 8005f7e:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005f80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f84:	4798      	blx	r3
 8005f86:	1b00      	subs	r0, r0, r4
 8005f88:	2809      	cmp	r0, #9
 8005f8a:	d9f9      	bls.n	8005f80 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4aca      	ldr	r2, [pc, #808]	; (80062b8 <OTM8009A_Init+0x3ac>)
 8005f90:	4638      	mov	r0, r7
 8005f92:	4619      	mov	r1, r3
 8005f94:	f000 fc9e 	bl	80068d4 <otm8009a_write_reg>
 8005f98:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4ac7      	ldr	r2, [pc, #796]	; (80062bc <OTM8009A_Init+0x3b0>)
 8005f9e:	21c4      	movs	r1, #196	; 0xc4
 8005fa0:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8005fa2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005fa4:	f000 fc96 	bl	80068d4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8005fa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005fac:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8005fae:	4798      	blx	r3
 8005fb0:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005fb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005fb6:	4798      	blx	r3
 8005fb8:	1b40      	subs	r0, r0, r5
 8005fba:	2809      	cmp	r0, #9
 8005fbc:	d9f9      	bls.n	8005fb2 <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4abf      	ldr	r2, [pc, #764]	; (80062c0 <OTM8009A_Init+0x3b4>)
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f000 fc85 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005fca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005fcc:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005fce:	4abd      	ldr	r2, [pc, #756]	; (80062c4 <OTM8009A_Init+0x3b8>)
 8005fd0:	21c5      	movs	r1, #197	; 0xc5
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f000 fc7e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005fd8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005fda:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005fdc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4ab9      	ldr	r2, [pc, #740]	; (80062c8 <OTM8009A_Init+0x3bc>)
 8005fe2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005fe4:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005fe6:	f000 fc75 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005fea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005fec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005fee:	4ab7      	ldr	r2, [pc, #732]	; (80062cc <OTM8009A_Init+0x3c0>)
 8005ff0:	21c5      	movs	r1, #197	; 0xc5
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f000 fc6e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005ff8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005ffa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005ffc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005ffe:	4619      	mov	r1, r3
 8006000:	4ab3      	ldr	r2, [pc, #716]	; (80062d0 <OTM8009A_Init+0x3c4>)
 8006002:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006004:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006006:	f000 fc65 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800600a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800600c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800600e:	4ab1      	ldr	r2, [pc, #708]	; (80062d4 <OTM8009A_Init+0x3c8>)
 8006010:	21c0      	movs	r1, #192	; 0xc0
 8006012:	4638      	mov	r0, r7
 8006014:	f000 fc5e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006018:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800601a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800601c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800601e:	4619      	mov	r1, r3
 8006020:	4aa0      	ldr	r2, [pc, #640]	; (80062a4 <OTM8009A_Init+0x398>)
 8006022:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006024:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006026:	f000 fc55 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800602a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800602c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800602e:	4aaa      	ldr	r2, [pc, #680]	; (80062d8 <OTM8009A_Init+0x3cc>)
 8006030:	21d9      	movs	r1, #217	; 0xd9
 8006032:	4638      	mov	r0, r7
 8006034:	f000 fc4e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006038:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800603a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800603c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800603e:	4619      	mov	r1, r3
 8006040:	4aa6      	ldr	r2, [pc, #664]	; (80062dc <OTM8009A_Init+0x3d0>)
 8006042:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006044:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006046:	f000 fc45 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800604a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800604c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800604e:	4aa4      	ldr	r2, [pc, #656]	; (80062e0 <OTM8009A_Init+0x3d4>)
 8006050:	21c1      	movs	r1, #193	; 0xc1
 8006052:	4638      	mov	r0, r7
 8006054:	f000 fc3e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006058:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800605a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800605c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800605e:	4619      	mov	r1, r3
 8006060:	4aa0      	ldr	r2, [pc, #640]	; (80062e4 <OTM8009A_Init+0x3d8>)
 8006062:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8006064:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006066:	f000 fc35 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800606a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800606c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800606e:	4a9e      	ldr	r2, [pc, #632]	; (80062e8 <OTM8009A_Init+0x3dc>)
 8006070:	21c1      	movs	r1, #193	; 0xc1
 8006072:	4638      	mov	r0, r7
 8006074:	f000 fc2e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006078:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800607a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800607c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800607e:	4619      	mov	r1, r3
 8006080:	4a9a      	ldr	r2, [pc, #616]	; (80062ec <OTM8009A_Init+0x3e0>)
 8006082:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006084:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006086:	f000 fc25 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800608a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800608c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800608e:	4a98      	ldr	r2, [pc, #608]	; (80062f0 <OTM8009A_Init+0x3e4>)
 8006090:	21c5      	movs	r1, #197	; 0xc5
 8006092:	4638      	mov	r0, r7
 8006094:	f000 fc1e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006098:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800609a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800609c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800609e:	4619      	mov	r1, r3
 80060a0:	4a94      	ldr	r2, [pc, #592]	; (80062f4 <OTM8009A_Init+0x3e8>)
 80060a2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80060a4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80060a6:	f000 fc15 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80060aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80060ac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80060ae:	4a87      	ldr	r2, [pc, #540]	; (80062cc <OTM8009A_Init+0x3c0>)
 80060b0:	21c5      	movs	r1, #197	; 0xc5
 80060b2:	4638      	mov	r0, r7
 80060b4:	f000 fc0e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80060b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80060ba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80060bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80060be:	4619      	mov	r1, r3
 80060c0:	4a78      	ldr	r2, [pc, #480]	; (80062a4 <OTM8009A_Init+0x398>)
 80060c2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80060c4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80060c6:	f000 fc05 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80060ca:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80060cc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80060ce:	4a8a      	ldr	r2, [pc, #552]	; (80062f8 <OTM8009A_Init+0x3ec>)
 80060d0:	21d8      	movs	r1, #216	; 0xd8
 80060d2:	4638      	mov	r0, r7
 80060d4:	f000 fbfe 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80060d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80060da:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80060dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80060de:	4619      	mov	r1, r3
 80060e0:	4a86      	ldr	r2, [pc, #536]	; (80062fc <OTM8009A_Init+0x3f0>)
 80060e2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80060e4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80060e6:	f000 fbf5 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80060ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80060ec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80060ee:	4a84      	ldr	r2, [pc, #528]	; (8006300 <OTM8009A_Init+0x3f4>)
 80060f0:	21c5      	movs	r1, #197	; 0xc5
 80060f2:	4638      	mov	r0, r7
 80060f4:	f000 fbee 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80060f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80060fa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80060fc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80060fe:	4619      	mov	r1, r3
 8006100:	4a80      	ldr	r2, [pc, #512]	; (8006304 <OTM8009A_Init+0x3f8>)
 8006102:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006104:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006106:	f000 fbe5 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800610a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800610c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800610e:	4a7e      	ldr	r2, [pc, #504]	; (8006308 <OTM8009A_Init+0x3fc>)
 8006110:	21c0      	movs	r1, #192	; 0xc0
 8006112:	4638      	mov	r0, r7
 8006114:	f000 fbde 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006118:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800611a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800611c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800611e:	4619      	mov	r1, r3
 8006120:	4a7a      	ldr	r2, [pc, #488]	; (800630c <OTM8009A_Init+0x400>)
 8006122:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006124:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006126:	f000 fbd5 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800612a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800612c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800612e:	4a78      	ldr	r2, [pc, #480]	; (8006310 <OTM8009A_Init+0x404>)
 8006130:	21c5      	movs	r1, #197	; 0xc5
 8006132:	4638      	mov	r0, r7
 8006134:	f000 fbce 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006138:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800613a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800613c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800613e:	4619      	mov	r1, r3
 8006140:	4a66      	ldr	r2, [pc, #408]	; (80062dc <OTM8009A_Init+0x3d0>)
 8006142:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006144:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006146:	f000 fbc5 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800614a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800614c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800614e:	4a71      	ldr	r2, [pc, #452]	; (8006314 <OTM8009A_Init+0x408>)
 8006150:	21c4      	movs	r1, #196	; 0xc4
 8006152:	4638      	mov	r0, r7
 8006154:	f000 fbbe 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006158:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800615a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800615c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800615e:	4619      	mov	r1, r3
 8006160:	4a60      	ldr	r2, [pc, #384]	; (80062e4 <OTM8009A_Init+0x3d8>)
 8006162:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006164:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006166:	f000 fbb5 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800616a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800616c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800616e:	4a6a      	ldr	r2, [pc, #424]	; (8006318 <OTM8009A_Init+0x40c>)
 8006170:	21c1      	movs	r1, #193	; 0xc1
 8006172:	4638      	mov	r0, r7
 8006174:	f000 fbae 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006178:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800617a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800617c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800617e:	4619      	mov	r1, r3
 8006180:	4a66      	ldr	r2, [pc, #408]	; (800631c <OTM8009A_Init+0x410>)
 8006182:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006184:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006186:	f000 fba5 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800618a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800618c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800618e:	4a64      	ldr	r2, [pc, #400]	; (8006320 <OTM8009A_Init+0x414>)
 8006190:	21b3      	movs	r1, #179	; 0xb3
 8006192:	4638      	mov	r0, r7
 8006194:	f000 fb9e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006198:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800619a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800619c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800619e:	4619      	mov	r1, r3
 80061a0:	4a42      	ldr	r2, [pc, #264]	; (80062ac <OTM8009A_Init+0x3a0>)
 80061a2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80061a4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80061a6:	f000 fb95 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80061aa:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80061ac:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80061ae:	4a5d      	ldr	r2, [pc, #372]	; (8006324 <OTM8009A_Init+0x418>)
 80061b0:	21ce      	movs	r1, #206	; 0xce
 80061b2:	4638      	mov	r0, r7
 80061b4:	f000 fb8e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80061b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80061ba:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80061bc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80061be:	4619      	mov	r1, r3
 80061c0:	4a59      	ldr	r2, [pc, #356]	; (8006328 <OTM8009A_Init+0x41c>)
 80061c2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80061c4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80061c6:	f000 fb85 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80061ca:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80061cc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80061ce:	4a57      	ldr	r2, [pc, #348]	; (800632c <OTM8009A_Init+0x420>)
 80061d0:	21ce      	movs	r1, #206	; 0xce
 80061d2:	4638      	mov	r0, r7
 80061d4:	f000 fb7e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80061da:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80061dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061de:	4619      	mov	r1, r3
 80061e0:	4a53      	ldr	r2, [pc, #332]	; (8006330 <OTM8009A_Init+0x424>)
 80061e2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80061e4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061e6:	f000 fb75 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80061ea:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061ec:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80061ee:	4a51      	ldr	r2, [pc, #324]	; (8006334 <OTM8009A_Init+0x428>)
 80061f0:	21ce      	movs	r1, #206	; 0xce
 80061f2:	4638      	mov	r0, r7
 80061f4:	f000 fb6e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80061f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061fa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80061fc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80061fe:	4619      	mov	r1, r3
 8006200:	4a4d      	ldr	r2, [pc, #308]	; (8006338 <OTM8009A_Init+0x42c>)
 8006202:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006204:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006206:	f000 fb65 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800620a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800620c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800620e:	4a4b      	ldr	r2, [pc, #300]	; (800633c <OTM8009A_Init+0x430>)
 8006210:	21cf      	movs	r1, #207	; 0xcf
 8006212:	4638      	mov	r0, r7
 8006214:	f000 fb5e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006218:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800621a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800621c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800621e:	4619      	mov	r1, r3
 8006220:	4a47      	ldr	r2, [pc, #284]	; (8006340 <OTM8009A_Init+0x434>)
 8006222:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006224:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006226:	f000 fb55 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800622a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800622c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800622e:	4a45      	ldr	r2, [pc, #276]	; (8006344 <OTM8009A_Init+0x438>)
 8006230:	21cf      	movs	r1, #207	; 0xcf
 8006232:	4638      	mov	r0, r7
 8006234:	f000 fb4e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006238:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800623a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800623c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800623e:	4619      	mov	r1, r3
 8006240:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <OTM8009A_Init+0x3a0>)
 8006242:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006244:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006246:	f000 fb45 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800624a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800624c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800624e:	4a3e      	ldr	r2, [pc, #248]	; (8006348 <OTM8009A_Init+0x43c>)
 8006250:	21cb      	movs	r1, #203	; 0xcb
 8006252:	4638      	mov	r0, r7
 8006254:	f000 fb3e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006258:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800625a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800625c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800625e:	4619      	mov	r1, r3
 8006260:	4a3a      	ldr	r2, [pc, #232]	; (800634c <OTM8009A_Init+0x440>)
 8006262:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006264:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006266:	f000 fb35 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800626a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800626c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800626e:	4a38      	ldr	r2, [pc, #224]	; (8006350 <OTM8009A_Init+0x444>)
 8006270:	21cb      	movs	r1, #203	; 0xcb
 8006272:	4638      	mov	r0, r7
 8006274:	f000 fb2e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006278:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800627a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800627c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800627e:	4619      	mov	r1, r3
 8006280:	4a29      	ldr	r2, [pc, #164]	; (8006328 <OTM8009A_Init+0x41c>)
 8006282:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006284:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006286:	f000 fb25 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800628a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800628c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800628e:	4a31      	ldr	r2, [pc, #196]	; (8006354 <OTM8009A_Init+0x448>)
 8006290:	21cb      	movs	r1, #203	; 0xcb
 8006292:	4638      	mov	r0, r7
 8006294:	f000 fb1e 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006298:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800629a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800629c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800629e:	4619      	mov	r1, r3
 80062a0:	e05a      	b.n	8006358 <OTM8009A_Init+0x44c>
 80062a2:	bf00      	nop
 80062a4:	08045ec1 	.word	0x08045ec1
 80062a8:	08045d90 	.word	0x08045d90
 80062ac:	08045ec2 	.word	0x08045ec2
 80062b0:	08045e1c 	.word	0x08045e1c
 80062b4:	08045ec3 	.word	0x08045ec3
 80062b8:	08045ec4 	.word	0x08045ec4
 80062bc:	08045ec5 	.word	0x08045ec5
 80062c0:	08045ec6 	.word	0x08045ec6
 80062c4:	08045ec7 	.word	0x08045ec7
 80062c8:	08045ec8 	.word	0x08045ec8
 80062cc:	08045ec9 	.word	0x08045ec9
 80062d0:	08045eca 	.word	0x08045eca
 80062d4:	08045ecb 	.word	0x08045ecb
 80062d8:	08045ecc 	.word	0x08045ecc
 80062dc:	08045ecd 	.word	0x08045ecd
 80062e0:	08045ece 	.word	0x08045ece
 80062e4:	08045ecf 	.word	0x08045ecf
 80062e8:	08045ed0 	.word	0x08045ed0
 80062ec:	08045ed1 	.word	0x08045ed1
 80062f0:	08045ed2 	.word	0x08045ed2
 80062f4:	08045ed3 	.word	0x08045ed3
 80062f8:	08045e90 	.word	0x08045e90
 80062fc:	08045ed4 	.word	0x08045ed4
 8006300:	08045ed5 	.word	0x08045ed5
 8006304:	08045ed6 	.word	0x08045ed6
 8006308:	08045ed7 	.word	0x08045ed7
 800630c:	08045ed8 	.word	0x08045ed8
 8006310:	08045ed9 	.word	0x08045ed9
 8006314:	08045eda 	.word	0x08045eda
 8006318:	08045edb 	.word	0x08045edb
 800631c:	08045edc 	.word	0x08045edc
 8006320:	08045e94 	.word	0x08045e94
 8006324:	08045e98 	.word	0x08045e98
 8006328:	08045edd 	.word	0x08045edd
 800632c:	08045ea0 	.word	0x08045ea0
 8006330:	08045ede 	.word	0x08045ede
 8006334:	08045eb0 	.word	0x08045eb0
 8006338:	08045edf 	.word	0x08045edf
 800633c:	08045d94 	.word	0x08045d94
 8006340:	08045ee0 	.word	0x08045ee0
 8006344:	08045eed 	.word	0x08045eed
 8006348:	08045da0 	.word	0x08045da0
 800634c:	08045ee1 	.word	0x08045ee1
 8006350:	08045dac 	.word	0x08045dac
 8006354:	08045dbc 	.word	0x08045dbc
 8006358:	4ad1      	ldr	r2, [pc, #836]	; (80066a0 <OTM8009A_Init+0x794>)
 800635a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800635c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800635e:	f000 fab9 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006362:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006364:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006366:	4acf      	ldr	r2, [pc, #828]	; (80066a4 <OTM8009A_Init+0x798>)
 8006368:	21cb      	movs	r1, #203	; 0xcb
 800636a:	4638      	mov	r0, r7
 800636c:	f000 fab2 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006370:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006372:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006374:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006376:	4619      	mov	r1, r3
 8006378:	4acb      	ldr	r2, [pc, #812]	; (80066a8 <OTM8009A_Init+0x79c>)
 800637a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800637c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800637e:	f000 faa9 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006382:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006384:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006386:	4ac9      	ldr	r2, [pc, #804]	; (80066ac <OTM8009A_Init+0x7a0>)
 8006388:	21cb      	movs	r1, #203	; 0xcb
 800638a:	4638      	mov	r0, r7
 800638c:	f000 faa2 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006390:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006392:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006394:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006396:	4619      	mov	r1, r3
 8006398:	4ac5      	ldr	r2, [pc, #788]	; (80066b0 <OTM8009A_Init+0x7a4>)
 800639a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800639c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800639e:	f000 fa99 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80063a2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80063a4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80063a6:	4ac3      	ldr	r2, [pc, #780]	; (80066b4 <OTM8009A_Init+0x7a8>)
 80063a8:	21cb      	movs	r1, #203	; 0xcb
 80063aa:	4638      	mov	r0, r7
 80063ac:	f000 fa92 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80063b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80063b2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80063b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80063b6:	4619      	mov	r1, r3
 80063b8:	4abf      	ldr	r2, [pc, #764]	; (80066b8 <OTM8009A_Init+0x7ac>)
 80063ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80063bc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80063be:	f000 fa89 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063c2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80063c4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063c6:	4abd      	ldr	r2, [pc, #756]	; (80066bc <OTM8009A_Init+0x7b0>)
 80063c8:	21cb      	movs	r1, #203	; 0xcb
 80063ca:	4638      	mov	r0, r7
 80063cc:	f000 fa82 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80063d2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063d6:	4619      	mov	r1, r3
 80063d8:	4ab9      	ldr	r2, [pc, #740]	; (80066c0 <OTM8009A_Init+0x7b4>)
 80063da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063dc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063de:	f000 fa79 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063e2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063e4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063e6:	4ab7      	ldr	r2, [pc, #732]	; (80066c4 <OTM8009A_Init+0x7b8>)
 80063e8:	21cb      	movs	r1, #203	; 0xcb
 80063ea:	4638      	mov	r0, r7
 80063ec:	f000 fa72 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063f2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063f6:	4619      	mov	r1, r3
 80063f8:	4ab3      	ldr	r2, [pc, #716]	; (80066c8 <OTM8009A_Init+0x7bc>)
 80063fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063fc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063fe:	f000 fa69 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006402:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006404:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006406:	4ab1      	ldr	r2, [pc, #708]	; (80066cc <OTM8009A_Init+0x7c0>)
 8006408:	21cc      	movs	r1, #204	; 0xcc
 800640a:	4638      	mov	r0, r7
 800640c:	f000 fa62 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006410:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006412:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006414:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006416:	4619      	mov	r1, r3
 8006418:	4aad      	ldr	r2, [pc, #692]	; (80066d0 <OTM8009A_Init+0x7c4>)
 800641a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800641c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800641e:	f000 fa59 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006422:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006424:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006426:	4aab      	ldr	r2, [pc, #684]	; (80066d4 <OTM8009A_Init+0x7c8>)
 8006428:	21cc      	movs	r1, #204	; 0xcc
 800642a:	4638      	mov	r0, r7
 800642c:	f000 fa52 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006430:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006432:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006434:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006436:	4619      	mov	r1, r3
 8006438:	4aa7      	ldr	r2, [pc, #668]	; (80066d8 <OTM8009A_Init+0x7cc>)
 800643a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800643c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800643e:	f000 fa49 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006442:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006444:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006446:	4aa5      	ldr	r2, [pc, #660]	; (80066dc <OTM8009A_Init+0x7d0>)
 8006448:	21cc      	movs	r1, #204	; 0xcc
 800644a:	4638      	mov	r0, r7
 800644c:	f000 fa42 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006450:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006452:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006454:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006456:	4619      	mov	r1, r3
 8006458:	4a91      	ldr	r2, [pc, #580]	; (80066a0 <OTM8009A_Init+0x794>)
 800645a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800645c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800645e:	f000 fa39 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006462:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006464:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006466:	4a9e      	ldr	r2, [pc, #632]	; (80066e0 <OTM8009A_Init+0x7d4>)
 8006468:	21cc      	movs	r1, #204	; 0xcc
 800646a:	4638      	mov	r0, r7
 800646c:	f000 fa32 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006470:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006472:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006474:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006476:	4619      	mov	r1, r3
 8006478:	4a8b      	ldr	r2, [pc, #556]	; (80066a8 <OTM8009A_Init+0x79c>)
 800647a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800647c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800647e:	f000 fa29 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006482:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006484:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006486:	4a97      	ldr	r2, [pc, #604]	; (80066e4 <OTM8009A_Init+0x7d8>)
 8006488:	21cc      	movs	r1, #204	; 0xcc
 800648a:	4638      	mov	r0, r7
 800648c:	f000 fa22 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006490:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006492:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006494:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006496:	4619      	mov	r1, r3
 8006498:	4a85      	ldr	r2, [pc, #532]	; (80066b0 <OTM8009A_Init+0x7a4>)
 800649a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800649c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800649e:	f000 fa19 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80064a2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80064a4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80064a6:	4a90      	ldr	r2, [pc, #576]	; (80066e8 <OTM8009A_Init+0x7dc>)
 80064a8:	21cc      	movs	r1, #204	; 0xcc
 80064aa:	4638      	mov	r0, r7
 80064ac:	f000 fa12 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80064b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80064b2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80064b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80064b6:	4619      	mov	r1, r3
 80064b8:	4a8c      	ldr	r2, [pc, #560]	; (80066ec <OTM8009A_Init+0x7e0>)
 80064ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80064bc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80064be:	f000 fa09 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80064c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80064c4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80064c6:	4a8a      	ldr	r2, [pc, #552]	; (80066f0 <OTM8009A_Init+0x7e4>)
 80064c8:	21c5      	movs	r1, #197	; 0xc5
 80064ca:	4638      	mov	r0, r7
 80064cc:	f000 fa02 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80064d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80064d2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80064d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80064d6:	4619      	mov	r1, r3
 80064d8:	4a86      	ldr	r2, [pc, #536]	; (80066f4 <OTM8009A_Init+0x7e8>)
 80064da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80064dc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80064de:	f000 f9f9 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80064e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80064e4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80064e6:	4a84      	ldr	r2, [pc, #528]	; (80066f8 <OTM8009A_Init+0x7ec>)
 80064e8:	21f5      	movs	r1, #245	; 0xf5
 80064ea:	4638      	mov	r0, r7
 80064ec:	f000 f9f2 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80064f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80064f2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80064f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80064f6:	4619      	mov	r1, r3
 80064f8:	4a80      	ldr	r2, [pc, #512]	; (80066fc <OTM8009A_Init+0x7f0>)
 80064fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80064fc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80064fe:	f000 f9e9 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006502:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006504:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006506:	4a7e      	ldr	r2, [pc, #504]	; (8006700 <OTM8009A_Init+0x7f4>)
 8006508:	21c6      	movs	r1, #198	; 0xc6
 800650a:	4638      	mov	r0, r7
 800650c:	f000 f9e2 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006510:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006512:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006514:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006516:	4619      	mov	r1, r3
 8006518:	4a7a      	ldr	r2, [pc, #488]	; (8006704 <OTM8009A_Init+0x7f8>)
 800651a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800651c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800651e:	f000 f9d9 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006522:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006524:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006526:	4a78      	ldr	r2, [pc, #480]	; (8006708 <OTM8009A_Init+0x7fc>)
 8006528:	21ff      	movs	r1, #255	; 0xff
 800652a:	4638      	mov	r0, r7
 800652c:	f000 f9d2 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006530:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006532:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006534:	4a73      	ldr	r2, [pc, #460]	; (8006704 <OTM8009A_Init+0x7f8>)
 8006536:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006538:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800653a:	4638      	mov	r0, r7
 800653c:	f000 f9ca 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006540:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006542:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006544:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006546:	4619      	mov	r1, r3
 8006548:	4a6e      	ldr	r2, [pc, #440]	; (8006704 <OTM8009A_Init+0x7f8>)
 800654a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800654c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800654e:	f000 f9c1 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006552:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006554:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006556:	4a6d      	ldr	r2, [pc, #436]	; (800670c <OTM8009A_Init+0x800>)
 8006558:	21e1      	movs	r1, #225	; 0xe1
 800655a:	4638      	mov	r0, r7
 800655c:	f000 f9ba 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006560:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006562:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006564:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006566:	4619      	mov	r1, r3
 8006568:	4a66      	ldr	r2, [pc, #408]	; (8006704 <OTM8009A_Init+0x7f8>)
 800656a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800656c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800656e:	f000 f9b1 	bl	80068d4 <otm8009a_write_reg>
 8006572:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006574:	2310      	movs	r3, #16
 8006576:	4a66      	ldr	r2, [pc, #408]	; (8006710 <OTM8009A_Init+0x804>)
 8006578:	21e2      	movs	r1, #226	; 0xe2
 800657a:	4638      	mov	r0, r7
 800657c:	f000 f9aa 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006580:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006582:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006584:	2300      	movs	r3, #0
 8006586:	4a63      	ldr	r2, [pc, #396]	; (8006714 <OTM8009A_Init+0x808>)
 8006588:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800658a:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800658c:	4638      	mov	r0, r7
 800658e:	f000 f9a1 	bl	80068d4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8006592:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006596:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8006598:	4798      	blx	r3
 800659a:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800659c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065a0:	4798      	blx	r3
 80065a2:	1b40      	subs	r0, r0, r5
 80065a4:	2877      	cmp	r0, #119	; 0x77
 80065a6:	d9f9      	bls.n	800659c <OTM8009A_Init+0x690>
  switch(ColorCoding)
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	d074      	beq.n	8006698 <OTM8009A_Init+0x78c>
 80065ae:	f1b9 0f02 	cmp.w	r9, #2
 80065b2:	d14f      	bne.n	8006654 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80065b4:	2300      	movs	r3, #0
 80065b6:	4a58      	ldr	r2, [pc, #352]	; (8006718 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80065b8:	213a      	movs	r1, #58	; 0x3a
 80065ba:	4638      	mov	r0, r7
 80065bc:	f000 f98a 	bl	80068d4 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80065c0:	4d56      	ldr	r5, [pc, #344]	; (800671c <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80065c2:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80065c6:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80065c8:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80065cc:	d046      	beq.n	800665c <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80065ce:	2300      	movs	r3, #0
 80065d0:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80065d2:	2300      	movs	r3, #0
 80065d4:	4a52      	ldr	r2, [pc, #328]	; (8006720 <OTM8009A_Init+0x814>)
 80065d6:	2151      	movs	r1, #81	; 0x51
 80065d8:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80065da:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80065dc:	f000 f97a 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80065e0:	4a50      	ldr	r2, [pc, #320]	; (8006724 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80065e2:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80065e6:	4653      	mov	r3, sl
 80065e8:	2153      	movs	r1, #83	; 0x53
 80065ea:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80065ec:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80065f0:	f000 f970 	bl	80068d4 <otm8009a_write_reg>
 80065f4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80065f6:	4653      	mov	r3, sl
 80065f8:	4a4b      	ldr	r2, [pc, #300]	; (8006728 <OTM8009A_Init+0x81c>)
 80065fa:	2155      	movs	r1, #85	; 0x55
 80065fc:	4638      	mov	r0, r7
 80065fe:	f000 f969 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006602:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8006604:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006606:	4653      	mov	r3, sl
 8006608:	4a48      	ldr	r2, [pc, #288]	; (800672c <OTM8009A_Init+0x820>)
 800660a:	215e      	movs	r1, #94	; 0x5e
 800660c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800660e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006610:	f000 f960 	bl	80068d4 <otm8009a_write_reg>
 8006614:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006616:	4653      	mov	r3, sl
 8006618:	4a45      	ldr	r2, [pc, #276]	; (8006730 <OTM8009A_Init+0x824>)
 800661a:	2129      	movs	r1, #41	; 0x29
 800661c:	4638      	mov	r0, r7
 800661e:	f000 f959 	bl	80068d4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006622:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006624:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006626:	4653      	mov	r3, sl
 8006628:	4651      	mov	r1, sl
 800662a:	4a36      	ldr	r2, [pc, #216]	; (8006704 <OTM8009A_Init+0x7f8>)
 800662c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800662e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006630:	f000 f950 	bl	80068d4 <otm8009a_write_reg>
 8006634:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006636:	4653      	mov	r3, sl
 8006638:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800663a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800663c:	4a3d      	ldr	r2, [pc, #244]	; (8006734 <OTM8009A_Init+0x828>)
 800663e:	212c      	movs	r1, #44	; 0x2c
 8006640:	f000 f948 	bl	80068d4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8006644:	42c4      	cmn	r4, r0
}
 8006646:	bf14      	ite	ne
 8006648:	f04f 30ff 	movne.w	r0, #4294967295
 800664c:	4650      	moveq	r0, sl
 800664e:	b002      	add	sp, #8
 8006650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006654:	f1ba 0f01 	cmp.w	sl, #1
 8006658:	4d30      	ldr	r5, [pc, #192]	; (800671c <OTM8009A_Init+0x810>)
 800665a:	d1b8      	bne.n	80065ce <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800665c:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800665e:	2300      	movs	r3, #0
 8006660:	f10d 0207 	add.w	r2, sp, #7
 8006664:	2136      	movs	r1, #54	; 0x36
 8006666:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006668:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800666c:	f000 f932 	bl	80068d4 <otm8009a_write_reg>
 8006670:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006672:	2304      	movs	r3, #4
 8006674:	4a30      	ldr	r2, [pc, #192]	; (8006738 <OTM8009A_Init+0x82c>)
 8006676:	212a      	movs	r1, #42	; 0x2a
 8006678:	4638      	mov	r0, r7
 800667a:	f000 f92b 	bl	80068d4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800667e:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006680:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006682:	2304      	movs	r3, #4
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <OTM8009A_Init+0x830>)
 8006686:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006688:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800668a:	4638      	mov	r0, r7
 800668c:	f000 f922 	bl	80068d4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006690:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006694:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006696:	e79c      	b.n	80065d2 <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006698:	464b      	mov	r3, r9
 800669a:	4a29      	ldr	r2, [pc, #164]	; (8006740 <OTM8009A_Init+0x834>)
 800669c:	e78c      	b.n	80065b8 <OTM8009A_Init+0x6ac>
 800669e:	bf00      	nop
 80066a0:	08045ede 	.word	0x08045ede
 80066a4:	08045dcc 	.word	0x08045dcc
 80066a8:	08045edf 	.word	0x08045edf
 80066ac:	08045dd8 	.word	0x08045dd8
 80066b0:	08045ee0 	.word	0x08045ee0
 80066b4:	08045de8 	.word	0x08045de8
 80066b8:	08045ee2 	.word	0x08045ee2
 80066bc:	08045df8 	.word	0x08045df8
 80066c0:	08045ee3 	.word	0x08045ee3
 80066c4:	08045e04 	.word	0x08045e04
 80066c8:	08045ec2 	.word	0x08045ec2
 80066cc:	08045e10 	.word	0x08045e10
 80066d0:	08045ee1 	.word	0x08045ee1
 80066d4:	08045e20 	.word	0x08045e20
 80066d8:	08045edd 	.word	0x08045edd
 80066dc:	08045e30 	.word	0x08045e30
 80066e0:	08045e40 	.word	0x08045e40
 80066e4:	08045e4c 	.word	0x08045e4c
 80066e8:	08045e5c 	.word	0x08045e5c
 80066ec:	08045ecd 	.word	0x08045ecd
 80066f0:	08045eee 	.word	0x08045eee
 80066f4:	08045eef 	.word	0x08045eef
 80066f8:	08045ef0 	.word	0x08045ef0
 80066fc:	08045ef1 	.word	0x08045ef1
 8006700:	08045ef2 	.word	0x08045ef2
 8006704:	08045ec1 	.word	0x08045ec1
 8006708:	08045e6c 	.word	0x08045e6c
 800670c:	08045e70 	.word	0x08045e70
 8006710:	08045e80 	.word	0x08045e80
 8006714:	08045ee4 	.word	0x08045ee4
 8006718:	08045ee5 	.word	0x08045ee5
 800671c:	24004698 	.word	0x24004698
 8006720:	08045ee7 	.word	0x08045ee7
 8006724:	08045ee8 	.word	0x08045ee8
 8006728:	08045ee9 	.word	0x08045ee9
 800672c:	08045eea 	.word	0x08045eea
 8006730:	08045eeb 	.word	0x08045eeb
 8006734:	08045eec 	.word	0x08045eec
 8006738:	08045d88 	.word	0x08045d88
 800673c:	08045d8c 	.word	0x08045d8c
 8006740:	08045ee6 	.word	0x08045ee6

08006744 <OTM8009A_SetBrightness>:
{
 8006744:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006746:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 800674a:	4e0b      	ldr	r6, [pc, #44]	; (8006778 <OTM8009A_SetBrightness+0x34>)
{
 800674c:	b082      	sub	sp, #8
 800674e:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006750:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006754:	2300      	movs	r3, #0
 8006756:	f10d 0207 	add.w	r2, sp, #7
 800675a:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800675c:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800675e:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006760:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006764:	f000 f8b6 	bl	80068d4 <otm8009a_write_reg>
 8006768:	b918      	cbnz	r0, 8006772 <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 800676a:	4b04      	ldr	r3, [pc, #16]	; (800677c <OTM8009A_SetBrightness+0x38>)
 800676c:	609d      	str	r5, [r3, #8]
}
 800676e:	b002      	add	sp, #8
 8006770:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8006772:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8006776:	e7fa      	b.n	800676e <OTM8009A_SetBrightness+0x2a>
 8006778:	51eb851f 	.word	0x51eb851f
 800677c:	24004698 	.word	0x24004698

08006780 <OTM8009A_DisplayOn>:
{
 8006780:	b500      	push	{lr}
 8006782:	b083      	sub	sp, #12
  uint8_t display = 0;
 8006784:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8006786:	2129      	movs	r1, #41	; 0x29
 8006788:	3010      	adds	r0, #16
 800678a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800678e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8006792:	f000 f89f 	bl	80068d4 <otm8009a_write_reg>
 8006796:	3800      	subs	r0, #0
 8006798:	bf18      	it	ne
 800679a:	2001      	movne	r0, #1
}
 800679c:	4240      	negs	r0, r0
 800679e:	b003      	add	sp, #12
 80067a0:	f85d fb04 	ldr.w	pc, [sp], #4

080067a4 <OTM8009A_DisplayOff>:
{
 80067a4:	b500      	push	{lr}
 80067a6:	b083      	sub	sp, #12
  uint8_t display = 0;
 80067a8:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80067aa:	2128      	movs	r1, #40	; 0x28
 80067ac:	3010      	adds	r0, #16
 80067ae:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80067b2:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80067b6:	f000 f88d 	bl	80068d4 <otm8009a_write_reg>
 80067ba:	3800      	subs	r0, #0
 80067bc:	bf18      	it	ne
 80067be:	2001      	movne	r0, #1
}
 80067c0:	4240      	negs	r0, r0
 80067c2:	b003      	add	sp, #12
 80067c4:	f85d fb04 	ldr.w	pc, [sp], #4

080067c8 <OTM8009A_SetOrientation>:
{
 80067c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80067ca:	2360      	movs	r3, #96	; 0x60
{
 80067cc:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80067ce:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80067d0:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80067d2:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80067d6:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80067da:	d83e      	bhi.n	800685a <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80067dc:	d020      	beq.n	8006820 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80067de:	f100 0510 	add.w	r5, r0, #16
 80067e2:	4633      	mov	r3, r6
 80067e4:	f10d 0207 	add.w	r2, sp, #7
 80067e8:	2136      	movs	r1, #54	; 0x36
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f872 	bl	80068d4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80067f0:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80067f2:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80067f4:	4a1a      	ldr	r2, [pc, #104]	; (8006860 <OTM8009A_SetOrientation+0x98>)
 80067f6:	212a      	movs	r1, #42	; 0x2a
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 f86b 	bl	80068d4 <otm8009a_write_reg>
 80067fe:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006800:	2304      	movs	r3, #4
 8006802:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006804:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006806:	4a17      	ldr	r2, [pc, #92]	; (8006864 <OTM8009A_SetOrientation+0x9c>)
 8006808:	212b      	movs	r1, #43	; 0x2b
 800680a:	f000 f863 	bl	80068d4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800680e:	4b16      	ldr	r3, [pc, #88]	; (8006868 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006810:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006812:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8006814:	3800      	subs	r0, #0
 8006816:	bf18      	it	ne
 8006818:	2001      	movne	r0, #1
 800681a:	4240      	negs	r0, r0
}
 800681c:	b003      	add	sp, #12
 800681e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006820:	f100 0510 	add.w	r5, r0, #16
 8006824:	4633      	mov	r3, r6
 8006826:	460f      	mov	r7, r1
 8006828:	f10d 0206 	add.w	r2, sp, #6
 800682c:	2136      	movs	r1, #54	; 0x36
 800682e:	4628      	mov	r0, r5
 8006830:	f000 f850 	bl	80068d4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006834:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006836:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <OTM8009A_SetOrientation+0x98>)
 800683a:	212a      	movs	r1, #42	; 0x2a
 800683c:	4628      	mov	r0, r5
 800683e:	f000 f849 	bl	80068d4 <otm8009a_write_reg>
 8006842:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006844:	2304      	movs	r3, #4
 8006846:	4628      	mov	r0, r5
 8006848:	4a06      	ldr	r2, [pc, #24]	; (8006864 <OTM8009A_SetOrientation+0x9c>)
 800684a:	212b      	movs	r1, #43	; 0x2b
 800684c:	f000 f842 	bl	80068d4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006850:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006854:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006856:	601f      	str	r7, [r3, #0]
 8006858:	e7dc      	b.n	8006814 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 800685a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800685e:	e7dd      	b.n	800681c <OTM8009A_SetOrientation+0x54>
 8006860:	08045d88 	.word	0x08045d88
 8006864:	08045d8c 	.word	0x08045d8c
 8006868:	24004698 	.word	0x24004698

0800686c <OTM8009A_ReadID>:
{ 
 800686c:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800686e:	3010      	adds	r0, #16
 8006870:	21da      	movs	r1, #218	; 0xda
{ 
 8006872:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8006874:	2300      	movs	r3, #0
 8006876:	f000 f825 	bl	80068c4 <otm8009a_read_reg>
 800687a:	3800      	subs	r0, #0
 800687c:	bf18      	it	ne
 800687e:	2001      	movne	r0, #1
}  
 8006880:	4240      	negs	r0, r0
 8006882:	bd08      	pop	{r3, pc}

08006884 <OTM8009A_DrawVLine>:
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop

0800688c <OTM8009A_GetPixel>:
 800688c:	f04f 30ff 	mov.w	r0, #4294967295
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006894:	b178      	cbz	r0, 80068b6 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006896:	684a      	ldr	r2, [r1, #4]
 8006898:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 800689a:	2000      	movs	r0, #0
{
 800689c:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 800689e:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80068a4:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80068a6:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 80068a8:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80068ac:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 80068b0:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80068b2:	611a      	str	r2, [r3, #16]
}
 80068b4:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068ba:	4770      	bx	lr
 80068bc:	08005eed 	.word	0x08005eed
 80068c0:	08005efd 	.word	0x08005efd

080068c4 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80068c4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80068c6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80068ca:	46a4      	mov	ip, r4
}
 80068cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80068d0:	4760      	bx	ip
 80068d2:	bf00      	nop

080068d4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80068d4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80068d6:	6804      	ldr	r4, [r0, #0]
 80068d8:	6880      	ldr	r0, [r0, #8]
 80068da:	46a4      	mov	ip, r4
}
 80068dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80068e0:	4760      	bx	ip
 80068e2:	bf00      	nop

080068e4 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 80068e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d102      	bne.n	80068f2 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 80068f2:	2000      	movs	r0, #0
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop

080068f8 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8006900:	b160      	cbz	r0, 800691c <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8006902:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8006904:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8006906:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8006908:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800690a:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 800690c:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800690e:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8006910:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8006912:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8006914:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8006916:	e9c1 3305 	strd	r3, r3, [r1, #20]
    ret = OV5640_OK;
 800691a:	4770      	bx	lr
    ret = OV5640_ERROR;
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop

08006924 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006924:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006926:	6904      	ldr	r4, [r0, #16]
 8006928:	8900      	ldrh	r0, [r0, #8]
 800692a:	46a4      	mov	ip, r4
}
 800692c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006930:	4760      	bx	ip
 8006932:	bf00      	nop

08006934 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006934:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006936:	68c4      	ldr	r4, [r0, #12]
 8006938:	8900      	ldrh	r0, [r0, #8]
 800693a:	46a4      	mov	ip, r4
}
 800693c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006940:	4760      	bx	ip
 8006942:	bf00      	nop

08006944 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8006944:	2904      	cmp	r1, #4
 8006946:	d869      	bhi.n	8006a1c <OV5640_SetResolution+0xd8>
    switch (Resolution)
 8006948:	3901      	subs	r1, #1
{
 800694a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694c:	f100 0418 	add.w	r4, r0, #24
 8006950:	b083      	sub	sp, #12
  if (Resolution > OV5640_R800x480)
 8006952:	2600      	movs	r6, #0
 8006954:	2903      	cmp	r1, #3
 8006956:	d864      	bhi.n	8006a22 <OV5640_SetResolution+0xde>
 8006958:	e8df f001 	tbb	[pc, r1]
 800695c:	02192f45 	.word	0x02192f45
          if (ret != OV5640_ERROR)
 8006960:	f10d 0507 	add.w	r5, sp, #7
 8006964:	4f3a      	ldr	r7, [pc, #232]	; (8006a50 <OV5640_SetResolution+0x10c>)
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006966:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800696a:	2301      	movs	r3, #1
 800696c:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8006970:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006972:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006976:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8006978:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800697a:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800697e:	f001 f879 	bl	8007a74 <ov5640_write_reg>
 8006982:	2800      	cmp	r0, #0
 8006984:	d047      	beq.n	8006a16 <OV5640_SetResolution+0xd2>
    ret = OV5640_ERROR;
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
}
 800698a:	b003      	add	sp, #12
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (ret != OV5640_ERROR)
 800698e:	f10d 0507 	add.w	r5, sp, #7
 8006992:	4f30      	ldr	r7, [pc, #192]	; (8006a54 <OV5640_SetResolution+0x110>)
            tmp = (uint8_t)OV5640_VGA[index][1];
 8006994:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8006998:	2301      	movs	r3, #1
 800699a:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800699e:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_VGA[index][1];
 80069a0:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80069a4:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80069a6:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_VGA[index][1];
 80069a8:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80069ac:	f001 f862 	bl	8007a74 <ov5640_write_reg>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d1e8      	bne.n	8006986 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80069b4:	2e04      	cmp	r6, #4
 80069b6:	d1ed      	bne.n	8006994 <OV5640_SetResolution+0x50>
 80069b8:	e02a      	b.n	8006a10 <OV5640_SetResolution+0xcc>
          if (ret != OV5640_ERROR)
 80069ba:	f10d 0507 	add.w	r5, sp, #7
 80069be:	4f26      	ldr	r7, [pc, #152]	; (8006a58 <OV5640_SetResolution+0x114>)
            tmp = (uint8_t)OV5640_480x272[index][1];
 80069c0:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80069c4:	2301      	movs	r3, #1
 80069c6:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80069ca:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_480x272[index][1];
 80069cc:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80069d0:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80069d2:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_480x272[index][1];
 80069d4:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80069d8:	f001 f84c 	bl	8007a74 <ov5640_write_reg>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d1d2      	bne.n	8006986 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80069e0:	2e04      	cmp	r6, #4
 80069e2:	d1ed      	bne.n	80069c0 <OV5640_SetResolution+0x7c>
 80069e4:	e014      	b.n	8006a10 <OV5640_SetResolution+0xcc>
          if (ret != OV5640_ERROR)
 80069e6:	f10d 0507 	add.w	r5, sp, #7
 80069ea:	4f1c      	ldr	r7, [pc, #112]	; (8006a5c <OV5640_SetResolution+0x118>)
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80069ec:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80069f0:	2301      	movs	r3, #1
 80069f2:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80069f6:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80069f8:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80069fc:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80069fe:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8006a00:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8006a04:	f001 f836 	bl	8007a74 <ov5640_write_reg>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d1bc      	bne.n	8006986 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8006a0c:	2e04      	cmp	r6, #4
 8006a0e:	d1ed      	bne.n	80069ec <OV5640_SetResolution+0xa8>
  if (Resolution > OV5640_R800x480)
 8006a10:	2000      	movs	r0, #0
}
 8006a12:	b003      	add	sp, #12
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8006a16:	2e04      	cmp	r6, #4
 8006a18:	d1a5      	bne.n	8006966 <OV5640_SetResolution+0x22>
 8006a1a:	e7f9      	b.n	8006a10 <OV5640_SetResolution+0xcc>
    ret = OV5640_ERROR;
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a20:	4770      	bx	lr
          if (ret != OV5640_ERROR)
 8006a22:	4f0f      	ldr	r7, [pc, #60]	; (8006a60 <OV5640_SetResolution+0x11c>)
 8006a24:	f10d 0507 	add.w	r5, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8006a28:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8006a32:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8006a34:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8006a38:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8006a3a:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8006a3c:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8006a40:	f001 f818 	bl	8007a74 <ov5640_write_reg>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d19e      	bne.n	8006986 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8006a48:	2e04      	cmp	r6, #4
 8006a4a:	d1ed      	bne.n	8006a28 <OV5640_SetResolution+0xe4>
 8006a4c:	e7e0      	b.n	8006a10 <OV5640_SetResolution+0xcc>
 8006a4e:	bf00      	nop
 8006a50:	080463d4 	.word	0x080463d4
 8006a54:	080463c4 	.word	0x080463c4
 8006a58:	08045f10 	.word	0x08045f10
 8006a5c:	080463b4 	.word	0x080463b4
 8006a60:	080463a4 	.word	0x080463a4

08006a64 <OV5640_SetLightMode>:
{
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8006a66:	f100 0618 	add.w	r6, r0, #24
{
 8006a6a:	b083      	sub	sp, #12
  tmp = 0x00;
 8006a6c:	2400      	movs	r4, #0
{
 8006a6e:	460d      	mov	r5, r1
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8006a70:	f10d 0207 	add.w	r2, sp, #7
 8006a74:	2301      	movs	r3, #1
 8006a76:	f243 4106 	movw	r1, #13318	; 0x3406
 8006a7a:	4630      	mov	r0, r6
  tmp = 0x00;
 8006a7c:	f88d 4007 	strb.w	r4, [sp, #7]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8006a80:	f000 fff8 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006a84:	4604      	mov	r4, r0
 8006a86:	b110      	cbz	r0, 8006a8e <OV5640_SetLightMode+0x2a>
}
 8006a88:	4620      	mov	r0, r4
 8006a8a:	b003      	add	sp, #12
 8006a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x46;
 8006a8e:	2446      	movs	r4, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8006a90:	2301      	movs	r3, #1
 8006a92:	f10d 0207 	add.w	r2, sp, #7
 8006a96:	f245 1190 	movw	r1, #20880	; 0x5190
 8006a9a:	4630      	mov	r0, r6
    tmp = 0x46;
 8006a9c:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8006aa0:	f000 ffe8 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d1ee      	bne.n	8006a88 <OV5640_SetLightMode+0x24>
    tmp = 0xF8;
 8006aaa:	24f8      	movs	r4, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8006aac:	2301      	movs	r3, #1
 8006aae:	f10d 0207 	add.w	r2, sp, #7
 8006ab2:	f245 1191 	movw	r1, #20881	; 0x5191
 8006ab6:	4630      	mov	r0, r6
    tmp = 0xF8;
 8006ab8:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8006abc:	f000 ffda 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d1e0      	bne.n	8006a88 <OV5640_SetLightMode+0x24>
    tmp = 0x04;
 8006ac6:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f10d 0207 	add.w	r2, sp, #7
 8006ace:	f245 1192 	movw	r1, #20882	; 0x5192
 8006ad2:	4630      	mov	r0, r6
    tmp = 0x04;
 8006ad4:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8006ad8:	f000 ffcc 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006adc:	4604      	mov	r4, r0
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d1d2      	bne.n	8006a88 <OV5640_SetLightMode+0x24>
    switch (LightMode)
 8006ae2:	1e69      	subs	r1, r5, #1
  if (ret == OV5640_OK)
 8006ae4:	2500      	movs	r5, #0
 8006ae6:	2907      	cmp	r1, #7
 8006ae8:	f200 8082 	bhi.w	8006bf0 <OV5640_SetLightMode+0x18c>
 8006aec:	e8df f001 	tbb	[pc, r1]
 8006af0:	27804563 	.word	0x27804563
 8006af4:	04808080 	.word	0x04808080
 8006af8:	4f57      	ldr	r7, [pc, #348]	; (8006c58 <OV5640_SetLightMode+0x1f4>)
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8006afa:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8006afe:	2301      	movs	r3, #1
 8006b00:	f10d 0207 	add.w	r2, sp, #7
 8006b04:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8006b08:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8006b0c:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8006b0e:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8006b12:	f000 ffaf 	bl	8007a74 <ov5640_write_reg>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f000 8094 	beq.w	8006c44 <OV5640_SetLightMode+0x1e0>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8006b1c:	2d06      	cmp	r5, #6
 8006b1e:	d009      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b20:	2d05      	cmp	r5, #5
 8006b22:	f105 0302 	add.w	r3, r5, #2
 8006b26:	d005      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b28:	2b06      	cmp	r3, #6
 8006b2a:	f103 0302 	add.w	r3, r3, #2
 8006b2e:	d001      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b30:	2b07      	cmp	r3, #7
 8006b32:	d1f9      	bne.n	8006b28 <OV5640_SetLightMode+0xc4>
  if (ret == OV5640_OK)
 8006b34:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006b38:	4620      	mov	r0, r4
 8006b3a:	b003      	add	sp, #12
 8006b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3e:	4f47      	ldr	r7, [pc, #284]	; (8006c5c <OV5640_SetLightMode+0x1f8>)
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8006b40:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8006b44:	2301      	movs	r3, #1
 8006b46:	f10d 0207 	add.w	r2, sp, #7
 8006b4a:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8006b4e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8006b52:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8006b54:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8006b58:	f000 ff8c 	bl	8007a74 <ov5640_write_reg>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d06c      	beq.n	8006c3a <OV5640_SetLightMode+0x1d6>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8006b60:	2d06      	cmp	r5, #6
 8006b62:	d0e7      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b64:	2d05      	cmp	r5, #5
 8006b66:	f105 0302 	add.w	r3, r5, #2
 8006b6a:	d0e3      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b6c:	2b06      	cmp	r3, #6
 8006b6e:	f103 0302 	add.w	r3, r3, #2
 8006b72:	d0df      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b74:	2b07      	cmp	r3, #7
 8006b76:	d1f9      	bne.n	8006b6c <OV5640_SetLightMode+0x108>
 8006b78:	e7dc      	b.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006b7a:	4f39      	ldr	r7, [pc, #228]	; (8006c60 <OV5640_SetLightMode+0x1fc>)
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8006b7c:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8006b80:	2301      	movs	r3, #1
 8006b82:	f10d 0207 	add.w	r2, sp, #7
 8006b86:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8006b8a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8006b8e:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8006b90:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8006b94:	f000 ff6e 	bl	8007a74 <ov5640_write_reg>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d058      	beq.n	8006c4e <OV5640_SetLightMode+0x1ea>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8006b9c:	2d06      	cmp	r5, #6
 8006b9e:	d0c9      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006ba0:	2d05      	cmp	r5, #5
 8006ba2:	f105 0302 	add.w	r3, r5, #2
 8006ba6:	d0c5      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	f103 0302 	add.w	r3, r3, #2
 8006bae:	d0c1      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	d1f9      	bne.n	8006ba8 <OV5640_SetLightMode+0x144>
 8006bb4:	e7be      	b.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006bb6:	4f2b      	ldr	r7, [pc, #172]	; (8006c64 <OV5640_SetLightMode+0x200>)
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8006bb8:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f10d 0207 	add.w	r2, sp, #7
 8006bc2:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8006bc6:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8006bca:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8006bcc:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8006bd0:	f000 ff50 	bl	8007a74 <ov5640_write_reg>
 8006bd4:	b368      	cbz	r0, 8006c32 <OV5640_SetLightMode+0x1ce>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8006bd6:	2d06      	cmp	r5, #6
 8006bd8:	d0ac      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006bda:	2d05      	cmp	r5, #5
 8006bdc:	f105 0302 	add.w	r3, r5, #2
 8006be0:	d0a8      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006be2:	2b06      	cmp	r3, #6
 8006be4:	f103 0302 	add.w	r3, r3, #2
 8006be8:	d0a4      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006bea:	2b07      	cmp	r3, #7
 8006bec:	d1f9      	bne.n	8006be2 <OV5640_SetLightMode+0x17e>
 8006bee:	e7a1      	b.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006bf0:	4f1d      	ldr	r7, [pc, #116]	; (8006c68 <OV5640_SetLightMode+0x204>)
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8006bf2:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f10d 0207 	add.w	r2, sp, #7
 8006bfc:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8006c00:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8006c04:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8006c06:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8006c0a:	f000 ff33 	bl	8007a74 <ov5640_write_reg>
 8006c0e:	b160      	cbz	r0, 8006c2a <OV5640_SetLightMode+0x1c6>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8006c10:	2d06      	cmp	r5, #6
 8006c12:	d08f      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006c14:	2d05      	cmp	r5, #5
 8006c16:	f105 0302 	add.w	r3, r5, #2
 8006c1a:	d08b      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006c1c:	2b06      	cmp	r3, #6
 8006c1e:	f103 0302 	add.w	r3, r3, #2
 8006c22:	d087      	beq.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d1f9      	bne.n	8006c1c <OV5640_SetLightMode+0x1b8>
 8006c28:	e784      	b.n	8006b34 <OV5640_SetLightMode+0xd0>
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	2d07      	cmp	r5, #7
 8006c2e:	d1e0      	bne.n	8006bf2 <OV5640_SetLightMode+0x18e>
 8006c30:	e72a      	b.n	8006a88 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8006c32:	3501      	adds	r5, #1
 8006c34:	2d07      	cmp	r5, #7
 8006c36:	d1bf      	bne.n	8006bb8 <OV5640_SetLightMode+0x154>
 8006c38:	e726      	b.n	8006a88 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8006c3a:	3501      	adds	r5, #1
 8006c3c:	2d07      	cmp	r5, #7
 8006c3e:	f47f af7f 	bne.w	8006b40 <OV5640_SetLightMode+0xdc>
 8006c42:	e721      	b.n	8006a88 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8006c44:	3501      	adds	r5, #1
 8006c46:	2d07      	cmp	r5, #7
 8006c48:	f47f af57 	bne.w	8006afa <OV5640_SetLightMode+0x96>
 8006c4c:	e71c      	b.n	8006a88 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8006c4e:	3501      	adds	r5, #1
 8006c50:	2d07      	cmp	r5, #7
 8006c52:	d193      	bne.n	8006b7c <OV5640_SetLightMode+0x118>
 8006c54:	e718      	b.n	8006a88 <OV5640_SetLightMode+0x24>
 8006c56:	bf00      	nop
 8006c58:	08046334 	.word	0x08046334
 8006c5c:	08046350 	.word	0x08046350
 8006c60:	0804636c 	.word	0x0804636c
 8006c64:	08046388 	.word	0x08046388
 8006c68:	08046318 	.word	0x08046318

08006c6c <OV5640_SetColorEffect>:
  switch (Effect)
 8006c6c:	3901      	subs	r1, #1
{
 8006c6e:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006c70:	f100 0418 	add.w	r4, r0, #24
{
 8006c74:	b083      	sub	sp, #12
 8006c76:	291f      	cmp	r1, #31
 8006c78:	d821      	bhi.n	8006cbe <OV5640_SetColorEffect+0x52>
 8006c7a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006c7e:	0033      	.short	0x0033
 8006c80:	00200062 	.word	0x00200062
 8006c84:	00200091 	.word	0x00200091
 8006c88:	00200020 	.word	0x00200020
 8006c8c:	002000ad 	.word	0x002000ad
 8006c90:	00200020 	.word	0x00200020
 8006c94:	00200020 	.word	0x00200020
 8006c98:	00200020 	.word	0x00200020
 8006c9c:	002000d6 	.word	0x002000d6
 8006ca0:	00200020 	.word	0x00200020
 8006ca4:	00200020 	.word	0x00200020
 8006ca8:	00200020 	.word	0x00200020
 8006cac:	00200020 	.word	0x00200020
 8006cb0:	00200020 	.word	0x00200020
 8006cb4:	00200020 	.word	0x00200020
 8006cb8:	00200020 	.word	0x00200020
 8006cbc:	0108      	.short	0x0108
      tmp = 0x7F;
 8006cbe:	257f      	movs	r5, #127	; 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f10d 0207 	add.w	r2, sp, #7
 8006cc8:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0x7F;
 8006ccc:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006cd0:	f000 fed0 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f000 80f8 	beq.w	8006ecc <OV5640_SetColorEffect+0x260>
        ret = OV5640_ERROR;
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ce0:	b003      	add	sp, #12
 8006ce2:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8006ce4:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f10d 0207 	add.w	r2, sp, #7
 8006cee:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006cf2:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006cf6:	f000 febd 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d1ee      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006cfe:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d00:	2301      	movs	r3, #1
 8006d02:	f10d 0207 	add.w	r2, sp, #7
 8006d06:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006d0a:	4620      	mov	r0, r4
        tmp = 0x18;
 8006d0c:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d10:	f000 feb0 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d1e1      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8006d18:	25a0      	movs	r5, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f10d 0207 	add.w	r2, sp, #7
 8006d20:	f245 5183 	movw	r1, #21891	; 0x5583
 8006d24:	4620      	mov	r0, r4
        tmp = 0xA0;
 8006d26:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006d2a:	f000 fea3 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d1d4      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8006d32:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006d34:	f10d 0207 	add.w	r2, sp, #7
 8006d38:	4620      	mov	r0, r4
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f245 5184 	movw	r1, #21892	; 0x5584
 8006d40:	e0ba      	b.n	8006eb8 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 8006d42:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006d44:	2301      	movs	r3, #1
 8006d46:	4620      	mov	r0, r4
 8006d48:	f10d 0207 	add.w	r2, sp, #7
 8006d4c:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006d50:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006d54:	f000 fe8e 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d1bf      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006d5c:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f10d 0207 	add.w	r2, sp, #7
 8006d64:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006d68:	4620      	mov	r0, r4
        tmp = 0x18;
 8006d6a:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d6e:	f000 fe81 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1b2      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8006d76:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f10d 0207 	add.w	r2, sp, #7
 8006d7e:	f245 5183 	movw	r1, #21891	; 0x5583
 8006d82:	4620      	mov	r0, r4
        tmp = 0x80;
 8006d84:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006d88:	f000 fe74 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d1a5      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 8006d90:	25c0      	movs	r5, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006d92:	f10d 0207 	add.w	r2, sp, #7
 8006d96:	4620      	mov	r0, r4
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f245 5184 	movw	r1, #21892	; 0x5584
 8006d9e:	e08b      	b.n	8006eb8 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 8006da0:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006da2:	2301      	movs	r3, #1
 8006da4:	4620      	mov	r0, r4
 8006da6:	f10d 0207 	add.w	r2, sp, #7
 8006daa:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006dae:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006db2:	f000 fe5f 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d190      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006dba:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f10d 0207 	add.w	r2, sp, #7
 8006dc2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006dc6:	4620      	mov	r0, r4
        tmp = 0x18;
 8006dc8:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006dcc:	f000 fe52 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d183      	bne.n	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8006dd4:	2560      	movs	r5, #96	; 0x60
 8006dd6:	e01c      	b.n	8006e12 <OV5640_SetColorEffect+0x1a6>
      tmp = 0xFF;
 8006dd8:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f10d 0207 	add.w	r2, sp, #7
 8006de2:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006de6:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006dea:	f000 fe43 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f47f af74 	bne.w	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006df4:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006df6:	2301      	movs	r3, #1
 8006df8:	f10d 0207 	add.w	r2, sp, #7
 8006dfc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006e00:	4620      	mov	r0, r4
        tmp = 0x18;
 8006e02:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006e06:	f000 fe35 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f47f af66 	bne.w	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8006e10:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006e12:	2301      	movs	r3, #1
 8006e14:	f10d 0207 	add.w	r2, sp, #7
 8006e18:	f245 5183 	movw	r1, #21891	; 0x5583
 8006e1c:	4620      	mov	r0, r4
        tmp = 0x80;
 8006e1e:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006e22:	f000 fe27 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006e26:	b358      	cbz	r0, 8006e80 <OV5640_SetColorEffect+0x214>
 8006e28:	e758      	b.n	8006cdc <OV5640_SetColorEffect+0x70>
      tmp = 0xFF;
 8006e2a:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f10d 0207 	add.w	r2, sp, #7
 8006e34:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006e38:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006e3c:	f000 fe1a 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f47f af4b 	bne.w	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006e46:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f10d 0207 	add.w	r2, sp, #7
 8006e4e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006e52:	4620      	mov	r0, r4
        tmp = 0x18;
 8006e54:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006e58:	f000 fe0c 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f47f af3d 	bne.w	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8006e62:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006e64:	2301      	movs	r3, #1
 8006e66:	f10d 0207 	add.w	r2, sp, #7
 8006e6a:	f245 5183 	movw	r1, #21891	; 0x5583
 8006e6e:	4620      	mov	r0, r4
        tmp = 0x40;
 8006e70:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006e74:	f000 fdfe 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f47f af2f 	bne.w	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8006e7e:	25a0      	movs	r5, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006e80:	f10d 0207 	add.w	r2, sp, #7
 8006e84:	4620      	mov	r0, r4
 8006e86:	2301      	movs	r3, #1
 8006e88:	f245 5184 	movw	r1, #21892	; 0x5584
 8006e8c:	e014      	b.n	8006eb8 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 8006e8e:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006e90:	2301      	movs	r3, #1
 8006e92:	f10d 0207 	add.w	r2, sp, #7
 8006e96:	4620      	mov	r0, r4
 8006e98:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006e9c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006ea0:	f000 fde8 	bl	8007a74 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f47f af19 	bne.w	8006cdc <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8006eaa:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006eac:	4620      	mov	r0, r4
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f10d 0207 	add.w	r2, sp, #7
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006eb4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
        tmp = 0x00;
 8006eb8:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006ebc:	f000 fdda 	bl	8007a74 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8006ec0:	3800      	subs	r0, #0
 8006ec2:	bf18      	it	ne
 8006ec4:	2001      	movne	r0, #1
 8006ec6:	4240      	negs	r0, r0
}
 8006ec8:	b003      	add	sp, #12
 8006eca:	bd30      	pop	{r4, r5, pc}
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006ecc:	f10d 0207 	add.w	r2, sp, #7
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e7ee      	b.n	8006eb4 <OV5640_SetColorEffect+0x248>
 8006ed6:	bf00      	nop

08006ed8 <OV5640_SetBrightness>:
{
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <OV5640_SetBrightness+0xb4>)
{
 8006edc:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006ede:	f100 0518 	add.w	r5, r0, #24
{
 8006ee2:	460e      	mov	r6, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006ee4:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8006ee6:	27ff      	movs	r7, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006ee8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006eec:	2301      	movs	r3, #1
  tmp = 0xFF;
 8006eee:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006ef2:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006ef4:	4628      	mov	r0, r5
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006ef6:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006ef8:	f245 0101 	movw	r1, #20481	; 0x5001
 8006efc:	f10d 0203 	add.w	r2, sp, #3
 8006f00:	f000 fdb8 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006f04:	b108      	cbz	r0, 8006f0a <OV5640_SetBrightness+0x32>
}
 8006f06:	b005      	add	sp, #20
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = brightness_level[Level + 4];
 8006f0a:	a804      	add	r0, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f10d 0203 	add.w	r2, sp, #3
 8006f12:	f245 5187 	movw	r1, #21895	; 0x5587
    tmp = brightness_level[Level + 4];
 8006f16:	4430      	add	r0, r6
 8006f18:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8006f1c:	4628      	mov	r0, r5
    tmp = brightness_level[Level + 4];
 8006f1e:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8006f22:	f000 fda7 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d1ed      	bne.n	8006f06 <OV5640_SetBrightness+0x2e>
    tmp = 0x04;
 8006f2a:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f10d 0203 	add.w	r2, sp, #3
 8006f32:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006f36:	4628      	mov	r0, r5
    tmp = 0x04;
 8006f38:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006f3c:	f000 fd9a 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1e0      	bne.n	8006f06 <OV5640_SetBrightness+0x2e>
    if (Level < 0)
 8006f44:	2e00      	cmp	r6, #0
 8006f46:	db10      	blt.n	8006f6a <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 8006f48:	2409      	movs	r4, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006f4a:	f10d 0203 	add.w	r2, sp, #3
 8006f4e:	4628      	mov	r0, r5
 8006f50:	2301      	movs	r3, #1
 8006f52:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x09;
 8006f56:	f88d 4003 	strb.w	r4, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006f5a:	f000 fd8b 	bl	8007a74 <ov5640_write_reg>
 8006f5e:	3800      	subs	r0, #0
 8006f60:	bf18      	it	ne
 8006f62:	2001      	movne	r0, #1
 8006f64:	4240      	negs	r0, r0
}
 8006f66:	b005      	add	sp, #20
 8006f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp = 0x01;
 8006f6a:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006f6c:	f10d 0203 	add.w	r2, sp, #3
 8006f70:	4628      	mov	r0, r5
 8006f72:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x01;
 8006f76:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006f7a:	f000 fd7b 	bl	8007a74 <ov5640_write_reg>
 8006f7e:	3800      	subs	r0, #0
 8006f80:	bf18      	it	ne
 8006f82:	2001      	movne	r0, #1
 8006f84:	4240      	negs	r0, r0
}
 8006f86:	b005      	add	sp, #20
 8006f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08023fc0 	.word	0x08023fc0

08006f90 <OV5640_SetSaturation>:
{
 8006f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006f92:	4b29      	ldr	r3, [pc, #164]	; (8007038 <OV5640_SetSaturation+0xa8>)
{
 8006f94:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006f96:	f100 0518 	add.w	r5, r0, #24
{
 8006f9a:	460e      	mov	r6, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006f9c:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8006f9e:	27ff      	movs	r7, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006fa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006fa4:	2301      	movs	r3, #1
  tmp = 0xFF;
 8006fa6:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006faa:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006fac:	4628      	mov	r0, r5
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006fae:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006fb0:	f245 0101 	movw	r1, #20481	; 0x5001
 8006fb4:	f10d 0203 	add.w	r2, sp, #3
 8006fb8:	f000 fd5c 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006fbc:	b118      	cbz	r0, 8006fc6 <OV5640_SetSaturation+0x36>
    ret = OV5640_ERROR;
 8006fbe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006fc2:	b005      	add	sp, #20
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = saturation_level[Level + 4];
 8006fc6:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006fc8:	f10d 0203 	add.w	r2, sp, #3
 8006fcc:	f245 5183 	movw	r1, #21891	; 0x5583
 8006fd0:	4628      	mov	r0, r5
    tmp = saturation_level[Level + 4];
 8006fd2:	441e      	add	r6, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006fd4:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8006fd6:	f816 4c08 	ldrb.w	r4, [r6, #-8]
 8006fda:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006fde:	f000 fd49 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1eb      	bne.n	8006fbe <OV5640_SetSaturation+0x2e>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f10d 0203 	add.w	r2, sp, #3
 8006fec:	f245 5184 	movw	r1, #21892	; 0x5584
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 fd3f 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d1e1      	bne.n	8006fbe <OV5640_SetSaturation+0x2e>
    tmp = 0x02;
 8006ffa:	2402      	movs	r4, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f10d 0203 	add.w	r2, sp, #3
 8007002:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007006:	4628      	mov	r0, r5
    tmp = 0x02;
 8007008:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800700c:	f000 fd32 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007010:	2800      	cmp	r0, #0
 8007012:	d1d4      	bne.n	8006fbe <OV5640_SetSaturation+0x2e>
    tmp = 0x41;
 8007014:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007016:	f10d 0203 	add.w	r2, sp, #3
 800701a:	4628      	mov	r0, r5
 800701c:	2301      	movs	r3, #1
 800701e:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8007022:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007026:	f000 fd25 	bl	8007a74 <ov5640_write_reg>
  if (ret != OV5640_OK)
 800702a:	3800      	subs	r0, #0
 800702c:	bf18      	it	ne
 800702e:	2001      	movne	r0, #1
 8007030:	4240      	negs	r0, r0
}
 8007032:	b005      	add	sp, #20
 8007034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007036:	bf00      	nop
 8007038:	08023fcc 	.word	0x08023fcc

0800703c <OV5640_SetContrast>:
{
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <OV5640_SetContrast+0xa8>)
{
 8007040:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007042:	f100 0518 	add.w	r5, r0, #24
{
 8007046:	460e      	mov	r6, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007048:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 800704a:	27ff      	movs	r7, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800704c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007050:	2301      	movs	r3, #1
  tmp = 0xFF;
 8007052:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007056:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007058:	4628      	mov	r0, r5
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800705a:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800705c:	f245 0101 	movw	r1, #20481	; 0x5001
 8007060:	f10d 0203 	add.w	r2, sp, #3
 8007064:	f000 fd06 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007068:	b118      	cbz	r0, 8007072 <OV5640_SetContrast+0x36>
    ret = OV5640_ERROR;
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800706e:	b005      	add	sp, #20
 8007070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x04;
 8007072:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007074:	2301      	movs	r3, #1
 8007076:	f10d 0203 	add.w	r2, sp, #3
 800707a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800707e:	4628      	mov	r0, r5
    tmp = 0x04;
 8007080:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007084:	f000 fcf6 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007088:	2800      	cmp	r0, #0
 800708a:	d1ee      	bne.n	800706a <OV5640_SetContrast+0x2e>
    tmp = contrast_level[Level + 4];
 800708c:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800708e:	f10d 0203 	add.w	r2, sp, #3
 8007092:	f245 5186 	movw	r1, #21894	; 0x5586
 8007096:	4628      	mov	r0, r5
    tmp = contrast_level[Level + 4];
 8007098:	441e      	add	r6, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800709a:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 800709c:	f816 4c08 	ldrb.w	r4, [r6, #-8]
 80070a0:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80070a4:	f000 fce6 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d1de      	bne.n	800706a <OV5640_SetContrast+0x2e>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80070ac:	2301      	movs	r3, #1
 80070ae:	f10d 0203 	add.w	r2, sp, #3
 80070b2:	f245 5185 	movw	r1, #21893	; 0x5585
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fcdc 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80070bc:	2800      	cmp	r0, #0
 80070be:	d1d4      	bne.n	800706a <OV5640_SetContrast+0x2e>
    tmp = 0x41;
 80070c0:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80070c2:	f10d 0203 	add.w	r2, sp, #3
 80070c6:	4628      	mov	r0, r5
 80070c8:	2301      	movs	r3, #1
 80070ca:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 80070ce:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80070d2:	f000 fccf 	bl	8007a74 <ov5640_write_reg>
  if (ret != OV5640_OK)
 80070d6:	3800      	subs	r0, #0
 80070d8:	bf18      	it	ne
 80070da:	2001      	movne	r0, #1
 80070dc:	4240      	negs	r0, r0
}
 80070de:	b005      	add	sp, #20
 80070e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e2:	bf00      	nop
 80070e4:	08045ef4 	.word	0x08045ef4

080070e8 <OV5640_SetHueDegree>:
{
 80070e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80070ec:	4b33      	ldr	r3, [pc, #204]	; (80071bc <OV5640_SetHueDegree+0xd4>)
{
 80070ee:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80070f0:	f100 0418 	add.w	r4, r0, #24
{
 80070f4:	4688      	mov	r8, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80070f6:	f103 060c 	add.w	r6, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80070fa:	af01      	add	r7, sp, #4
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80070fc:	ad04      	add	r5, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80070fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8007102:	4b2f      	ldr	r3, [pc, #188]	; (80071c0 <OV5640_SetHueDegree+0xd8>)
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8007104:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8007108:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800710c:	ae0a      	add	r6, sp, #40	; 0x28
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800710e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8007112:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8007116:	25ff      	movs	r5, #255	; 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007118:	2301      	movs	r3, #1
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800711a:	e906 0007 	stmdb	r6, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800711e:	4620      	mov	r0, r4
 8007120:	f10d 0203 	add.w	r2, sp, #3
 8007124:	f245 0101 	movw	r1, #20481	; 0x5001
  tmp = 0xFF;
 8007128:	f88d 5003 	strb.w	r5, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800712c:	f000 fca2 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007130:	b120      	cbz	r0, 800713c <OV5640_SetHueDegree+0x54>
    ret = OV5640_ERROR;
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007136:	b00a      	add	sp, #40	; 0x28
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x01;
 800713c:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800713e:	f10d 0203 	add.w	r2, sp, #3
 8007142:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007146:	4620      	mov	r0, r4
 8007148:	4633      	mov	r3, r6
    tmp = 0x01;
 800714a:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800714e:	f000 fc91 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007152:	2800      	cmp	r0, #0
 8007154:	d1ed      	bne.n	8007132 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8007156:	a80a      	add	r0, sp, #40	; 0x28
 8007158:	f108 0506 	add.w	r5, r8, #6
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 800715c:	4633      	mov	r3, r6
 800715e:	f10d 0203 	add.w	r2, sp, #3
    tmp = hue_degree_ctrl1[Degree + 6];
 8007162:	4405      	add	r5, r0
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8007164:	f245 5181 	movw	r1, #21889	; 0x5581
 8007168:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 800716a:	f815 7c24 	ldrb.w	r7, [r5, #-36]
 800716e:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8007172:	f000 fc7f 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007176:	2800      	cmp	r0, #0
 8007178:	d1db      	bne.n	8007132 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 800717a:	f815 7c18 	ldrb.w	r7, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800717e:	4633      	mov	r3, r6
 8007180:	f10d 0203 	add.w	r2, sp, #3
 8007184:	f245 5182 	movw	r1, #21890	; 0x5582
 8007188:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 800718a:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800718e:	f000 fc71 	bl	8007a74 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007192:	2800      	cmp	r0, #0
 8007194:	d1cd      	bne.n	8007132 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8007196:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800719a:	4633      	mov	r3, r6
 800719c:	f10d 0203 	add.w	r2, sp, #3
 80071a0:	4620      	mov	r0, r4
 80071a2:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = hue_degree_ctrl8[Degree + 6];
 80071a6:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80071aa:	f000 fc63 	bl	8007a74 <ov5640_write_reg>
  if (ret != OV5640_OK)
 80071ae:	3800      	subs	r0, #0
 80071b0:	bf18      	it	ne
 80071b2:	2001      	movne	r0, #1
 80071b4:	4240      	negs	r0, r0
}
 80071b6:	b00a      	add	sp, #40	; 0x28
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	08023fd8 	.word	0x08023fd8
 80071c0:	08045f00 	.word	0x08045f00

080071c4 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80071c4:	2902      	cmp	r1, #2
{
 80071c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ca:	4604      	mov	r4, r0
 80071cc:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80071ce:	d902      	bls.n	80071d6 <OV5640_SetPixelFormat+0x12>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80071d0:	1fcb      	subs	r3, r1, #7
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d82f      	bhi.n	8007236 <OV5640_SetPixelFormat+0x72>
    switch (PixelFormat)
 80071d6:	3901      	subs	r1, #1
 80071d8:	f104 0718 	add.w	r7, r4, #24
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80071dc:	f10d 0507 	add.w	r5, sp, #7
 80071e0:	2907      	cmp	r1, #7
 80071e2:	f200 8089 	bhi.w	80072f8 <OV5640_SetPixelFormat+0x134>
 80071e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80071ea:	0008      	.short	0x0008
 80071ec:	008700b1 	.word	0x008700b1
 80071f0:	00870087 	.word	0x00870087
 80071f4:	00da0087 	.word	0x00da0087
 80071f8:	002c      	.short	0x002c
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80071fa:	2623      	movs	r6, #35	; 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80071fc:	2301      	movs	r3, #1
 80071fe:	4638      	mov	r0, r7
 8007200:	462a      	mov	r2, r5
 8007202:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007206:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800720a:	f000 fc33 	bl	8007a74 <ov5640_write_reg>
 800720e:	b990      	cbnz	r0, 8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007210:	6963      	ldr	r3, [r4, #20]
 8007212:	4798      	blx	r3
 8007214:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007216:	6963      	ldr	r3, [r4, #20]
 8007218:	4798      	blx	r3
 800721a:	4286      	cmp	r6, r0
 800721c:	d0fb      	beq.n	8007216 <OV5640_SetPixelFormat+0x52>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800721e:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8007220:	462a      	mov	r2, r5
 8007222:	4638      	mov	r0, r7
 8007224:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007228:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800722c:	f000 fc22 	bl	8007a74 <ov5640_write_reg>
 8007230:	2800      	cmp	r0, #0
 8007232:	f000 80fa 	beq.w	800742a <OV5640_SetPixelFormat+0x266>
    ret = OV5640_ERROR;
 8007236:	f04f 36ff 	mov.w	r6, #4294967295
}
 800723a:	4630      	mov	r0, r6
 800723c:	b002      	add	sp, #8
 800723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8007242:	2630      	movs	r6, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8007244:	2301      	movs	r3, #1
 8007246:	4638      	mov	r0, r7
 8007248:	462a      	mov	r2, r5
 800724a:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800724e:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8007252:	f000 fc0f 	bl	8007a74 <ov5640_write_reg>
 8007256:	2800      	cmp	r0, #0
 8007258:	f000 80ca 	beq.w	80073f0 <OV5640_SetPixelFormat+0x22c>
              ret = OV5640_ERROR;
 800725c:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007260:	2301      	movs	r3, #1
 8007262:	462a      	mov	r2, r5
 8007264:	f643 0121 	movw	r1, #14369	; 0x3821
 8007268:	4638      	mov	r0, r7
 800726a:	f000 fbfb 	bl	8007a64 <ov5640_read_reg>
 800726e:	2800      	cmp	r0, #0
 8007270:	d1e1      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
        tmp |= (1 << 5);
 8007272:	f89d 4007 	ldrb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007276:	2301      	movs	r3, #1
 8007278:	462a      	mov	r2, r5
 800727a:	f643 0121 	movw	r1, #14369	; 0x3821
        tmp |= (1 << 5);
 800727e:	f044 0420 	orr.w	r4, r4, #32
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007282:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 8007284:	f88d 4007 	strb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007288:	f000 fbf4 	bl	8007a74 <ov5640_write_reg>
 800728c:	2800      	cmp	r0, #0
 800728e:	d1d2      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007290:	2301      	movs	r3, #1
 8007292:	462a      	mov	r2, r5
 8007294:	f243 0102 	movw	r1, #12290	; 0x3002
 8007298:	4638      	mov	r0, r7
 800729a:	f000 fbe3 	bl	8007a64 <ov5640_read_reg>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d1c9      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80072a2:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80072a6:	2301      	movs	r3, #1
 80072a8:	462a      	mov	r2, r5
 80072aa:	f243 0102 	movw	r1, #12290	; 0x3002
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80072ae:	f024 041c 	bic.w	r4, r4, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80072b2:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80072b4:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80072b8:	f000 fbdc 	bl	8007a74 <ov5640_write_reg>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d1ba      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80072c0:	2301      	movs	r3, #1
 80072c2:	462a      	mov	r2, r5
 80072c4:	f243 0106 	movw	r1, #12294	; 0x3006
 80072c8:	4638      	mov	r0, r7
 80072ca:	f000 fbcb 	bl	8007a64 <ov5640_read_reg>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d1b1      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
                tmp |= ((1 << 5) | (1 << 3));
 80072d2:	f89d 4007 	ldrb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80072d6:	462a      	mov	r2, r5
 80072d8:	4638      	mov	r0, r7
 80072da:	2301      	movs	r3, #1
                tmp |= ((1 << 5) | (1 << 3));
 80072dc:	f044 0428 	orr.w	r4, r4, #40	; 0x28
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80072e0:	f243 0106 	movw	r1, #12294	; 0x3006
                tmp |= ((1 << 5) | (1 << 3));
 80072e4:	f88d 4007 	strb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80072e8:	f000 fbc4 	bl	8007a74 <ov5640_write_reg>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d1a2      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
}
 80072f0:	4630      	mov	r0, r6
 80072f2:	b002      	add	sp, #8
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80072f8:	266f      	movs	r6, #111	; 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80072fa:	2301      	movs	r3, #1
 80072fc:	4638      	mov	r0, r7
 80072fe:	462a      	mov	r2, r5
 8007300:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007304:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007308:	f000 fbb4 	bl	8007a74 <ov5640_write_reg>
 800730c:	2800      	cmp	r0, #0
 800730e:	d192      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007310:	6963      	ldr	r3, [r4, #20]
 8007312:	4798      	blx	r3
 8007314:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007316:	6963      	ldr	r3, [r4, #20]
 8007318:	4798      	blx	r3
 800731a:	42b0      	cmp	r0, r6
 800731c:	d0fb      	beq.n	8007316 <OV5640_SetPixelFormat+0x152>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800731e:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007320:	462a      	mov	r2, r5
 8007322:	4638      	mov	r0, r7
 8007324:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007328:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800732c:	f000 fba2 	bl	8007a74 <ov5640_write_reg>
 8007330:	2800      	cmp	r0, #0
 8007332:	d180      	bne.n	8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007334:	6963      	ldr	r3, [r4, #20]
 8007336:	4798      	blx	r3
 8007338:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800733a:	6963      	ldr	r3, [r4, #20]
 800733c:	4798      	blx	r3
 800733e:	4285      	cmp	r5, r0
 8007340:	d0fb      	beq.n	800733a <OV5640_SetPixelFormat+0x176>
{
 8007342:	2600      	movs	r6, #0
}
 8007344:	4630      	mov	r0, r6
 8007346:	b002      	add	sp, #8
 8007348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800734c:	2630      	movs	r6, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800734e:	2301      	movs	r3, #1
 8007350:	4638      	mov	r0, r7
 8007352:	462a      	mov	r2, r5
 8007354:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007358:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800735c:	f000 fb8a 	bl	8007a74 <ov5640_write_reg>
 8007360:	2800      	cmp	r0, #0
 8007362:	f47f af68 	bne.w	8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007366:	6963      	ldr	r3, [r4, #20]
 8007368:	4798      	blx	r3
 800736a:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800736c:	6963      	ldr	r3, [r4, #20]
 800736e:	4798      	blx	r3
 8007370:	42b0      	cmp	r0, r6
 8007372:	d0fb      	beq.n	800736c <OV5640_SetPixelFormat+0x1a8>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007374:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8007376:	462a      	mov	r2, r5
 8007378:	4638      	mov	r0, r7
 800737a:	2301      	movs	r3, #1
 800737c:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007380:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8007384:	f000 fb76 	bl	8007a74 <ov5640_write_reg>
 8007388:	2800      	cmp	r0, #0
 800738a:	f47f af54 	bne.w	8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 800738e:	6963      	ldr	r3, [r4, #20]
 8007390:	4798      	blx	r3
 8007392:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007394:	6963      	ldr	r3, [r4, #20]
 8007396:	4798      	blx	r3
 8007398:	4285      	cmp	r5, r0
 800739a:	d0fb      	beq.n	8007394 <OV5640_SetPixelFormat+0x1d0>
 800739c:	e7d1      	b.n	8007342 <OV5640_SetPixelFormat+0x17e>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800739e:	2610      	movs	r6, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80073a0:	2301      	movs	r3, #1
 80073a2:	4638      	mov	r0, r7
 80073a4:	462a      	mov	r2, r5
 80073a6:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80073aa:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80073ae:	f000 fb61 	bl	8007a74 <ov5640_write_reg>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f47f af3f 	bne.w	8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 80073b8:	6963      	ldr	r3, [r4, #20]
 80073ba:	4798      	blx	r3
 80073bc:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80073be:	6963      	ldr	r3, [r4, #20]
 80073c0:	4798      	blx	r3
 80073c2:	42b0      	cmp	r0, r6
 80073c4:	d0fb      	beq.n	80073be <OV5640_SetPixelFormat+0x1fa>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80073c6:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80073c8:	462a      	mov	r2, r5
 80073ca:	4638      	mov	r0, r7
 80073cc:	2301      	movs	r3, #1
 80073ce:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80073d2:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80073d6:	f000 fb4d 	bl	8007a74 <ov5640_write_reg>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f47f af2b 	bne.w	8007236 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 80073e0:	6963      	ldr	r3, [r4, #20]
 80073e2:	4798      	blx	r3
 80073e4:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80073e6:	6963      	ldr	r3, [r4, #20]
 80073e8:	4798      	blx	r3
 80073ea:	4285      	cmp	r5, r0
 80073ec:	d0fb      	beq.n	80073e6 <OV5640_SetPixelFormat+0x222>
 80073ee:	e7a8      	b.n	8007342 <OV5640_SetPixelFormat+0x17e>
  tickstart = pObj->IO.GetTick();
 80073f0:	6963      	ldr	r3, [r4, #20]
 80073f2:	4798      	blx	r3
 80073f4:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80073f6:	6963      	ldr	r3, [r4, #20]
 80073f8:	4798      	blx	r3
 80073fa:	42b0      	cmp	r0, r6
 80073fc:	d0fb      	beq.n	80073f6 <OV5640_SetPixelFormat+0x232>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80073fe:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8007400:	2301      	movs	r3, #1
 8007402:	462a      	mov	r2, r5
 8007404:	f245 011f 	movw	r1, #20511	; 0x501f
 8007408:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800740a:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800740e:	f000 fb31 	bl	8007a74 <ov5640_write_reg>
 8007412:	4606      	mov	r6, r0
 8007414:	2800      	cmp	r0, #0
 8007416:	f47f af21 	bne.w	800725c <OV5640_SetPixelFormat+0x98>
  tickstart = pObj->IO.GetTick();
 800741a:	6963      	ldr	r3, [r4, #20]
 800741c:	4798      	blx	r3
 800741e:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007420:	6963      	ldr	r3, [r4, #20]
 8007422:	4798      	blx	r3
 8007424:	4580      	cmp	r8, r0
 8007426:	d0fb      	beq.n	8007420 <OV5640_SetPixelFormat+0x25c>
 8007428:	e71a      	b.n	8007260 <OV5640_SetPixelFormat+0x9c>
  tickstart = pObj->IO.GetTick();
 800742a:	6963      	ldr	r3, [r4, #20]
 800742c:	4798      	blx	r3
 800742e:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007430:	6963      	ldr	r3, [r4, #20]
 8007432:	4798      	blx	r3
 8007434:	4285      	cmp	r5, r0
 8007436:	d0fb      	beq.n	8007430 <OV5640_SetPixelFormat+0x26c>
 8007438:	e783      	b.n	8007342 <OV5640_SetPixelFormat+0x17e>
 800743a:	bf00      	nop

0800743c <OV5640_GetResolution>:
{
 800743c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800743e:	f100 0418 	add.w	r4, r0, #24
{
 8007442:	b083      	sub	sp, #12
 8007444:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8007446:	2301      	movs	r3, #1
 8007448:	f10d 0207 	add.w	r2, sp, #7
 800744c:	f643 0108 	movw	r1, #14344	; 0x3808
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fb07 	bl	8007a64 <ov5640_read_reg>
 8007456:	2800      	cmp	r0, #0
 8007458:	d150      	bne.n	80074fc <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 800745a:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 800745e:	2301      	movs	r3, #1
 8007460:	f10d 0207 	add.w	r2, sp, #7
 8007464:	f643 0109 	movw	r1, #14345	; 0x3809
 8007468:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 800746a:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 800746c:	f000 fafa 	bl	8007a64 <ov5640_read_reg>
 8007470:	2800      	cmp	r0, #0
 8007472:	d143      	bne.n	80074fc <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 8007474:	f89d 6007 	ldrb.w	r6, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8007478:	2301      	movs	r3, #1
 800747a:	f10d 0207 	add.w	r2, sp, #7
 800747e:	f643 010a 	movw	r1, #14346	; 0x380a
 8007482:	4620      	mov	r0, r4
      x_size |= tmp;
 8007484:	4335      	orrs	r5, r6
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8007486:	f000 faed 	bl	8007a64 <ov5640_read_reg>
 800748a:	bbb8      	cbnz	r0, 80074fc <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 800748c:	f89d 6007 	ldrb.w	r6, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8007490:	f10d 0207 	add.w	r2, sp, #7
 8007494:	4620      	mov	r0, r4
 8007496:	2301      	movs	r3, #1
 8007498:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 800749c:	0236      	lsls	r6, r6, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800749e:	f000 fae1 	bl	8007a64 <ov5640_read_reg>
 80074a2:	bb58      	cbnz	r0, 80074fc <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 80074a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 80074a8:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
          y_size |= tmp;
 80074ac:	ea43 0306 	orr.w	r3, r3, r6
          if ((x_size == 800U) && (y_size == 480U))
 80074b0:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80074b4:	fab2 f282 	clz	r2, r2
 80074b8:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80074bc:	d104      	bne.n	80074c8 <OV5640_GetResolution+0x8c>
 80074be:	b11a      	cbz	r2, 80074c8 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 80074c0:	2304      	movs	r3, #4
 80074c2:	603b      	str	r3, [r7, #0]
}
 80074c4:	b003      	add	sp, #12
 80074c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 80074c8:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 80074cc:	d104      	bne.n	80074d8 <OV5640_GetResolution+0x9c>
 80074ce:	b11a      	cbz	r2, 80074d8 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 80074d0:	2303      	movs	r3, #3
 80074d2:	603b      	str	r3, [r7, #0]
}
 80074d4:	b003      	add	sp, #12
 80074d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 80074d8:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 80074dc:	d106      	bne.n	80074ec <OV5640_GetResolution+0xb0>
 80074de:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80074e2:	d103      	bne.n	80074ec <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 80074e4:	2302      	movs	r3, #2
 80074e6:	603b      	str	r3, [r7, #0]
}
 80074e8:	b003      	add	sp, #12
 80074ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 80074ec:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 80074f0:	d108      	bne.n	8007504 <OV5640_GetResolution+0xc8>
 80074f2:	2bf0      	cmp	r3, #240	; 0xf0
 80074f4:	d106      	bne.n	8007504 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 80074f6:	2301      	movs	r3, #1
 80074f8:	603b      	str	r3, [r7, #0]
            ret = OV5640_OK;
 80074fa:	e7e3      	b.n	80074c4 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007500:	b003      	add	sp, #12
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8007504:	2da0      	cmp	r5, #160	; 0xa0
 8007506:	d1f9      	bne.n	80074fc <OV5640_GetResolution+0xc0>
 8007508:	2b78      	cmp	r3, #120	; 0x78
 800750a:	d1f7      	bne.n	80074fc <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 800750c:	2300      	movs	r3, #0
 800750e:	603b      	str	r3, [r7, #0]
  return ret;
 8007510:	e7d8      	b.n	80074c4 <OV5640_GetResolution+0x88>
 8007512:	bf00      	nop

08007514 <OV5640_ReadID>:
{
 8007514:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8007516:	4606      	mov	r6, r0
{
 8007518:	b083      	sub	sp, #12
  tmp = 0x80;
 800751a:	2580      	movs	r5, #128	; 0x80
{
 800751c:	460f      	mov	r7, r1
  pObj->IO.Init();
 800751e:	f856 3b18 	ldr.w	r3, [r6], #24
{
 8007522:	4604      	mov	r4, r0
  pObj->IO.Init();
 8007524:	4798      	blx	r3
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8007526:	f10d 0207 	add.w	r2, sp, #7
 800752a:	4630      	mov	r0, r6
 800752c:	2301      	movs	r3, #1
 800752e:	f243 0108 	movw	r1, #12296	; 0x3008
  tmp = 0x80;
 8007532:	f88d 5007 	strb.w	r5, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8007536:	f000 fa9d 	bl	8007a74 <ov5640_write_reg>
 800753a:	bb28      	cbnz	r0, 8007588 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 800753c:	6963      	ldr	r3, [r4, #20]
 800753e:	4798      	blx	r3
 8007540:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007542:	6963      	ldr	r3, [r4, #20]
 8007544:	4798      	blx	r3
 8007546:	1b43      	subs	r3, r0, r5
 8007548:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800754c:	d3f9      	bcc.n	8007542 <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800754e:	2301      	movs	r3, #1
 8007550:	f10d 0207 	add.w	r2, sp, #7
 8007554:	f243 010a 	movw	r1, #12298	; 0x300a
 8007558:	4630      	mov	r0, r6
 800755a:	f000 fa83 	bl	8007a64 <ov5640_read_reg>
 800755e:	b998      	cbnz	r0, 8007588 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 8007560:	f89d 4007 	ldrb.w	r4, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007564:	f10d 0207 	add.w	r2, sp, #7
 8007568:	4630      	mov	r0, r6
 800756a:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 800756c:	0224      	lsls	r4, r4, #8
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800756e:	f243 010b 	movw	r1, #12299	; 0x300b
      *Id = (uint32_t)tmp << 8U;
 8007572:	603c      	str	r4, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007574:	f000 fa76 	bl	8007a64 <ov5640_read_reg>
 8007578:	b930      	cbnz	r0, 8007588 <OV5640_ReadID+0x74>
        *Id |= tmp;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007580:	4313      	orrs	r3, r2
 8007582:	603b      	str	r3, [r7, #0]
}
 8007584:	b003      	add	sp, #12
 8007586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	e7fa      	b.n	8007584 <OV5640_ReadID+0x70>
 800758e:	bf00      	nop

08007590 <OV5640_MirrorFlipConfig>:
{
 8007590:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007592:	f100 0418 	add.w	r4, r0, #24
{
 8007596:	b082      	sub	sp, #8
  uint8_t tmp3820 = 0;
 8007598:	2600      	movs	r6, #0
{
 800759a:	460d      	mov	r5, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800759c:	f10d 0206 	add.w	r2, sp, #6
 80075a0:	2301      	movs	r3, #1
 80075a2:	f643 0120 	movw	r1, #14368	; 0x3820
 80075a6:	4620      	mov	r0, r4
  uint8_t tmp3820 = 0;
 80075a8:	f88d 6006 	strb.w	r6, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80075ac:	f000 fa5a 	bl	8007a64 <ov5640_read_reg>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d174      	bne.n	800769e <OV5640_MirrorFlipConfig+0x10e>
    tmp3820 &= 0xF9U;
 80075b4:	f89d 6006 	ldrb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80075b8:	2301      	movs	r3, #1
 80075ba:	f643 0121 	movw	r1, #14369	; 0x3821
 80075be:	f10d 0207 	add.w	r2, sp, #7
    tmp3820 &= 0xF9U;
 80075c2:	f026 0606 	bic.w	r6, r6, #6
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80075c6:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 80075c8:	f88d 6006 	strb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80075cc:	f000 fa4a 	bl	8007a64 <ov5640_read_reg>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d164      	bne.n	800769e <OV5640_MirrorFlipConfig+0x10e>
      tmp3821 &= 0xF9U;
 80075d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 80075d8:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 80075da:	f023 0306 	bic.w	r3, r3, #6
 80075de:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 80075e2:	d01b      	beq.n	800761c <OV5640_MirrorFlipConfig+0x8c>
 80075e4:	2d03      	cmp	r5, #3
 80075e6:	d04a      	beq.n	800767e <OV5640_MirrorFlipConfig+0xee>
 80075e8:	2d01      	cmp	r5, #1
 80075ea:	d034      	beq.n	8007656 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80075ec:	f10d 0206 	add.w	r2, sp, #6
 80075f0:	2301      	movs	r3, #1
 80075f2:	f643 0120 	movw	r1, #14368	; 0x3820
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fa3c 	bl	8007a74 <ov5640_write_reg>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d14e      	bne.n	800769e <OV5640_MirrorFlipConfig+0x10e>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007600:	f10d 0207 	add.w	r2, sp, #7
 8007604:	4620      	mov	r0, r4
 8007606:	2301      	movs	r3, #1
 8007608:	f643 0121 	movw	r1, #14369	; 0x3821
 800760c:	f000 fa32 	bl	8007a74 <ov5640_write_reg>
 8007610:	3800      	subs	r0, #0
 8007612:	bf18      	it	ne
 8007614:	2001      	movne	r0, #1
 8007616:	4240      	negs	r0, r0
}
 8007618:	b002      	add	sp, #8
 800761a:	bd70      	pop	{r4, r5, r6, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800761c:	f10d 0206 	add.w	r2, sp, #6
 8007620:	2301      	movs	r3, #1
 8007622:	f643 0120 	movw	r1, #14368	; 0x3820
 8007626:	4620      	mov	r0, r4
 8007628:	f000 fa24 	bl	8007a74 <ov5640_write_reg>
 800762c:	bbb8      	cbnz	r0, 800769e <OV5640_MirrorFlipConfig+0x10e>
            tmp3821 |= 0x06U;
 800762e:	f89d 1007 	ldrb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007632:	4620      	mov	r0, r4
 8007634:	f10d 0207 	add.w	r2, sp, #7
 8007638:	2301      	movs	r3, #1
            tmp3821 |= 0x06U;
 800763a:	f041 0406 	orr.w	r4, r1, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800763e:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8007642:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007646:	f000 fa15 	bl	8007a74 <ov5640_write_reg>
 800764a:	3800      	subs	r0, #0
 800764c:	bf18      	it	ne
 800764e:	2001      	movne	r0, #1
 8007650:	4240      	negs	r0, r0
}
 8007652:	b002      	add	sp, #8
 8007654:	bd70      	pop	{r4, r5, r6, pc}
          tmp3820 |= 0x06U;
 8007656:	f89d 6006 	ldrb.w	r6, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800765a:	f10d 0206 	add.w	r2, sp, #6
 800765e:	462b      	mov	r3, r5
 8007660:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 8007664:	f046 0606 	orr.w	r6, r6, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007668:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 800766a:	f88d 6006 	strb.w	r6, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800766e:	f000 fa01 	bl	8007a74 <ov5640_write_reg>
 8007672:	b9a0      	cbnz	r0, 800769e <OV5640_MirrorFlipConfig+0x10e>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007674:	462b      	mov	r3, r5
 8007676:	f10d 0207 	add.w	r2, sp, #7
 800767a:	4620      	mov	r0, r4
 800767c:	e7c4      	b.n	8007608 <OV5640_MirrorFlipConfig+0x78>
          tmp3820 |= 0x06U;
 800767e:	f89d 5006 	ldrb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007682:	f10d 0206 	add.w	r2, sp, #6
 8007686:	2301      	movs	r3, #1
 8007688:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 800768c:	f045 0506 	orr.w	r5, r5, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007690:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8007692:	f88d 5006 	strb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007696:	f000 f9ed 	bl	8007a74 <ov5640_write_reg>
 800769a:	2800      	cmp	r0, #0
 800769c:	d0c7      	beq.n	800762e <OV5640_MirrorFlipConfig+0x9e>
    ret = OV5640_ERROR;
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	e7b9      	b.n	8007618 <OV5640_MirrorFlipConfig+0x88>

080076a4 <OV5640_NightModeConfig>:
{
 80076a4:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 80076a6:	2200      	movs	r2, #0
{
 80076a8:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 80076aa:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 80076ac:	f88d 2007 	strb.w	r2, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 80076b0:	d01e      	beq.n	80076f0 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80076b2:	f100 0418 	add.w	r4, r0, #24
 80076b6:	2301      	movs	r3, #1
 80076b8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80076bc:	f10d 0207 	add.w	r2, sp, #7
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 f9cf 	bl	8007a64 <ov5640_read_reg>
 80076c6:	b9f8      	cbnz	r0, 8007708 <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 80076c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80076cc:	4620      	mov	r0, r4
 80076ce:	f10d 0207 	add.w	r2, sp, #7
 80076d2:	2301      	movs	r3, #1
      tmp &= 0xFBU;
 80076d4:	f021 0404 	bic.w	r4, r1, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80076d8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 80076dc:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80076e0:	f000 f9c8 	bl	8007a74 <ov5640_write_reg>
 80076e4:	3800      	subs	r0, #0
 80076e6:	bf18      	it	ne
 80076e8:	2001      	movne	r0, #1
 80076ea:	4240      	negs	r0, r0
}
 80076ec:	b002      	add	sp, #8
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80076f0:	f100 0418 	add.w	r4, r0, #24
 80076f4:	460d      	mov	r5, r1
 80076f6:	460b      	mov	r3, r1
 80076f8:	f10d 0207 	add.w	r2, sp, #7
 80076fc:	f243 0138 	movw	r1, #12344	; 0x3038
 8007700:	4620      	mov	r0, r4
 8007702:	f000 f9b7 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007706:	b118      	cbz	r0, 8007710 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
}
 800770c:	b002      	add	sp, #8
 800770e:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8007710:	462b      	mov	r3, r5
 8007712:	f10d 0207 	add.w	r2, sp, #7
 8007716:	f243 0139 	movw	r1, #12345	; 0x3039
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f9aa 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007720:	2800      	cmp	r0, #0
 8007722:	d1f1      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 8007724:	267c      	movs	r6, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8007726:	462b      	mov	r3, r5
 8007728:	f10d 0207 	add.w	r2, sp, #7
 800772c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8007730:	4620      	mov	r0, r4
      tmp = 0x7C;
 8007732:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8007736:	f000 f99d 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800773a:	2800      	cmp	r0, #0
 800773c:	d1e4      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 800773e:	462b      	mov	r3, r5
 8007740:	f10d 0207 	add.w	r2, sp, #7
 8007744:	f643 2108 	movw	r1, #14856	; 0x3a08
 8007748:	4620      	mov	r0, r4
      tmp = 0x01;
 800774a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 800774e:	f000 f991 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007752:	2800      	cmp	r0, #0
 8007754:	d1d8      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 8007756:	2627      	movs	r6, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8007758:	462b      	mov	r3, r5
 800775a:	f10d 0207 	add.w	r2, sp, #7
 800775e:	f643 2109 	movw	r1, #14857	; 0x3a09
 8007762:	4620      	mov	r0, r4
      tmp = 0x27;
 8007764:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8007768:	f000 f984 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800776c:	4606      	mov	r6, r0
 800776e:	2800      	cmp	r0, #0
 8007770:	d1ca      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8007772:	462b      	mov	r3, r5
 8007774:	f10d 0207 	add.w	r2, sp, #7
 8007778:	f643 210a 	movw	r1, #14858	; 0x3a0a
 800777c:	4620      	mov	r0, r4
      tmp = 0x00;
 800777e:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8007782:	f000 f977 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007786:	2800      	cmp	r0, #0
 8007788:	d1be      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 800778a:	26f6      	movs	r6, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800778c:	462b      	mov	r3, r5
 800778e:	f10d 0207 	add.w	r2, sp, #7
 8007792:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8007796:	4620      	mov	r0, r4
      tmp = 0xF6;
 8007798:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800779c:	f000 f96a 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d1b1      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 80077a4:	2604      	movs	r6, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80077a6:	462b      	mov	r3, r5
 80077a8:	f10d 0207 	add.w	r2, sp, #7
 80077ac:	f643 210d 	movw	r1, #14861	; 0x3a0d
 80077b0:	4620      	mov	r0, r4
      tmp = 0x04;
 80077b2:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80077b6:	f000 f95d 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d1a4      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 80077be:	462b      	mov	r3, r5
 80077c0:	f10d 0207 	add.w	r2, sp, #7
 80077c4:	f643 210e 	movw	r1, #14862	; 0x3a0e
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 f953 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d19a      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 80077d2:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80077d4:	2301      	movs	r3, #1
 80077d6:	f10d 0207 	add.w	r2, sp, #7
 80077da:	f643 2102 	movw	r1, #14850	; 0x3a02
 80077de:	4620      	mov	r0, r4
      tmp = 0x0B;
 80077e0:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80077e4:	f000 f946 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d18d      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 80077ec:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80077ee:	2301      	movs	r3, #1
 80077f0:	f10d 0207 	add.w	r2, sp, #7
 80077f4:	f643 2103 	movw	r1, #14851	; 0x3a03
 80077f8:	4620      	mov	r0, r4
      tmp = 0x88;
 80077fa:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80077fe:	f000 f939 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007802:	2800      	cmp	r0, #0
 8007804:	d180      	bne.n	8007708 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8007806:	2301      	movs	r3, #1
 8007808:	f10d 0207 	add.w	r2, sp, #7
 800780c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8007810:	4620      	mov	r0, r4
      tmp = 0x0B;
 8007812:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8007816:	f000 f92d 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800781a:	2800      	cmp	r0, #0
 800781c:	f47f af74 	bne.w	8007708 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8007820:	f10d 0207 	add.w	r2, sp, #7
 8007824:	4620      	mov	r0, r4
 8007826:	2301      	movs	r3, #1
 8007828:	f643 2115 	movw	r1, #14869	; 0x3a15
      tmp = 0x88;
 800782c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8007830:	f000 f920 	bl	8007a74 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8007834:	3800      	subs	r0, #0
 8007836:	bf18      	it	ne
 8007838:	2001      	movne	r0, #1
 800783a:	4240      	negs	r0, r0
}
 800783c:	b002      	add	sp, #8
 800783e:	bd70      	pop	{r4, r5, r6, pc}

08007840 <OV5640_ZoomConfig>:
{
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	460d      	mov	r5, r1
 8007846:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8007848:	a901      	add	r1, sp, #4
 800784a:	f7ff fdf7 	bl	800743c <OV5640_GetResolution>
 800784e:	2800      	cmp	r0, #0
 8007850:	d13a      	bne.n	80078c8 <OV5640_ZoomConfig+0x88>
    if (zoom == OV5640_ZOOM_x1)
 8007852:	2d44      	cmp	r5, #68	; 0x44
 8007854:	d026      	beq.n	80078a4 <OV5640_ZoomConfig+0x64>
      switch (res)
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d91f      	bls.n	800789c <OV5640_ZoomConfig+0x5c>
 800785c:	2b03      	cmp	r3, #3
 800785e:	d100      	bne.n	8007862 <OV5640_ZoomConfig+0x22>
          zoom = zoom >> 2U;
 8007860:	08ad      	lsrs	r5, r5, #2
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007862:	3418      	adds	r4, #24
      tmp = 0x00;
 8007864:	2600      	movs	r6, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007866:	2301      	movs	r3, #1
 8007868:	f10d 0203 	add.w	r2, sp, #3
 800786c:	4620      	mov	r0, r4
 800786e:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x00;
 8007872:	f88d 6003 	strb.w	r6, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007876:	f000 f8fd 	bl	8007a74 <ov5640_write_reg>
 800787a:	bb28      	cbnz	r0, 80078c8 <OV5640_ZoomConfig+0x88>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800787c:	f10d 0203 	add.w	r2, sp, #3
 8007880:	4620      	mov	r0, r4
 8007882:	2301      	movs	r3, #1
 8007884:	f245 6101 	movw	r1, #22017	; 0x5601
        tmp = (uint8_t)zoom;
 8007888:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800788c:	f000 f8f2 	bl	8007a74 <ov5640_write_reg>
 8007890:	1b80      	subs	r0, r0, r6
 8007892:	bf18      	it	ne
 8007894:	2001      	movne	r0, #1
 8007896:	4240      	negs	r0, r0
}
 8007898:	b002      	add	sp, #8
 800789a:	bd70      	pop	{r4, r5, r6, pc}
      switch (res)
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0e0      	beq.n	8007862 <OV5640_ZoomConfig+0x22>
          zoom = zoom >> 1U;
 80078a0:	086d      	lsrs	r5, r5, #1
          break;
 80078a2:	e7de      	b.n	8007862 <OV5640_ZoomConfig+0x22>
      tmp = 0x10;
 80078a4:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80078a6:	f104 0018 	add.w	r0, r4, #24
 80078aa:	2301      	movs	r3, #1
 80078ac:	f10d 0203 	add.w	r2, sp, #3
 80078b0:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x10;
 80078b4:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80078b8:	f000 f8dc 	bl	8007a74 <ov5640_write_reg>
 80078bc:	3800      	subs	r0, #0
 80078be:	bf18      	it	ne
 80078c0:	2001      	movne	r0, #1
 80078c2:	4240      	negs	r0, r0
}
 80078c4:	b002      	add	sp, #8
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV5640_ERROR;
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	e7e4      	b.n	8007898 <OV5640_ZoomConfig+0x58>
 80078ce:	bf00      	nop

080078d0 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 80078d0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80078d4:	bb83      	cbnz	r3, 8007938 <OV5640_Init+0x68>
    if ((Resolution > OV5640_R800x480) ||
 80078d6:	2904      	cmp	r1, #4
{
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	468a      	mov	sl, r1
 80078de:	b082      	sub	sp, #8
    if ((Resolution > OV5640_R800x480) ||
 80078e0:	d825      	bhi.n	800792e <OV5640_Init+0x5e>
 80078e2:	2a02      	cmp	r2, #2
 80078e4:	4680      	mov	r8, r0
 80078e6:	4691      	mov	r9, r2
 80078e8:	d902      	bls.n	80078f0 <OV5640_Init+0x20>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80078ea:	1fd3      	subs	r3, r2, #7
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d81e      	bhi.n	800792e <OV5640_Init+0x5e>
        if (ret != OV5640_ERROR)
 80078f0:	f108 0718 	add.w	r7, r8, #24
{
 80078f4:	2400      	movs	r4, #0
 80078f6:	4e22      	ldr	r6, [pc, #136]	; (8007980 <OV5640_Init+0xb0>)
          tmp = (uint8_t)OV5640_Common[index][1];
 80078f8:	eb06 0584 	add.w	r5, r6, r4, lsl #2
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80078fc:	2301      	movs	r3, #1
 80078fe:	f10d 0206 	add.w	r2, sp, #6
 8007902:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
          tmp = (uint8_t)OV5640_Common[index][1];
 8007906:	886d      	ldrh	r5, [r5, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007908:	4638      	mov	r0, r7
          tmp = (uint8_t)OV5640_Common[index][1];
 800790a:	f88d 5006 	strb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800790e:	f000 f8b1 	bl	8007a74 <ov5640_write_reg>
 8007912:	b198      	cbz	r0, 800793c <OV5640_Init+0x6c>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8007914:	2cfd      	cmp	r4, #253	; 0xfd
 8007916:	d00a      	beq.n	800792e <OV5640_Init+0x5e>
 8007918:	2cfc      	cmp	r4, #252	; 0xfc
 800791a:	f104 0302 	add.w	r3, r4, #2
 800791e:	d102      	bne.n	8007926 <OV5640_Init+0x56>
 8007920:	e005      	b.n	800792e <OV5640_Init+0x5e>
 8007922:	2bfe      	cmp	r3, #254	; 0xfe
 8007924:	d003      	beq.n	800792e <OV5640_Init+0x5e>
 8007926:	2bfd      	cmp	r3, #253	; 0xfd
 8007928:	f103 0302 	add.w	r3, r3, #2
 800792c:	d1f9      	bne.n	8007922 <OV5640_Init+0x52>
          ret = OV5640_ERROR;
 800792e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007932:	b002      	add	sp, #8
 8007934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int32_t ret = OV5640_OK;
 8007938:	2000      	movs	r0, #0
}
 800793a:	4770      	bx	lr
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800793c:	3401      	adds	r4, #1
 800793e:	2cfe      	cmp	r4, #254	; 0xfe
 8007940:	d1da      	bne.n	80078f8 <OV5640_Init+0x28>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8007942:	4651      	mov	r1, sl
 8007944:	4640      	mov	r0, r8
 8007946:	f7fe fffd 	bl	8006944 <OV5640_SetResolution>
 800794a:	2800      	cmp	r0, #0
 800794c:	d1ef      	bne.n	800792e <OV5640_Init+0x5e>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	f7ff fc37 	bl	80071c4 <OV5640_SetPixelFormat>
 8007956:	2800      	cmp	r0, #0
 8007958:	d1e9      	bne.n	800792e <OV5640_Init+0x5e>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 800795a:	2422      	movs	r4, #34	; 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800795c:	4638      	mov	r0, r7
 800795e:	2301      	movs	r3, #1
 8007960:	f10d 0207 	add.w	r2, sp, #7
 8007964:	f244 7140 	movw	r1, #18240	; 0x4740
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8007968:	f88d 4007 	strb.w	r4, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800796c:	f000 f882 	bl	8007a74 <ov5640_write_reg>
 8007970:	2800      	cmp	r0, #0
 8007972:	d1dc      	bne.n	800792e <OV5640_Init+0x5e>
          pObj->IsInitialized = 1U;
 8007974:	2301      	movs	r3, #1
 8007976:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
}
 800797a:	b002      	add	sp, #8
 800797c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007980:	08045f20 	.word	0x08045f20

08007984 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8007984:	b1c0      	cbz	r0, 80079b8 <OV5640_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007986:	68ca      	ldr	r2, [r1, #12]
{
 8007988:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 800798a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800798e:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8007990:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8007994:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8007998:	4909      	ldr	r1, [pc, #36]	; (80079c0 <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800799a:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800799c:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <OV5640_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 800799e:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80079a0:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80079a2:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80079a6:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if (pObj->IO.Init != NULL)
 80079aa:	b10b      	cbz	r3, 80079b0 <OV5640_RegisterBusIO+0x2c>
}
 80079ac:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 80079ae:	4718      	bx	r3
}
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	bc70      	pop	{r4, r5, r6}
 80079b6:	4770      	bx	lr
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	08006925 	.word	0x08006925
 80079c4:	08006935 	.word	0x08006935

080079c8 <OV5640_ColorbarModeConfig>:
  uint8_t tmp = 0x40;
 80079c8:	2340      	movs	r3, #64	; 0x40
{
 80079ca:	b530      	push	{r4, r5, lr}
 80079cc:	b083      	sub	sp, #12
  uint8_t tmp = 0x40;
 80079ce:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 80079d2:	1e4b      	subs	r3, r1, #1
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d922      	bls.n	8007a1e <OV5640_ColorbarModeConfig+0x56>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80079d8:	f100 0418 	add.w	r4, r0, #24
    tmp = 0x10;
 80079dc:	2510      	movs	r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80079de:	2301      	movs	r3, #1
 80079e0:	f10d 0207 	add.w	r2, sp, #7
 80079e4:	4620      	mov	r0, r4
 80079e6:	f245 5184 	movw	r1, #21892	; 0x5584
    tmp = 0x10;
 80079ea:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80079ee:	f000 f841 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80079f2:	4605      	mov	r5, r0
 80079f4:	b118      	cbz	r0, 80079fe <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079fa:	b003      	add	sp, #12
 80079fc:	bd30      	pop	{r4, r5, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80079fe:	f10d 0207 	add.w	r2, sp, #7
 8007a02:	4620      	mov	r0, r4
 8007a04:	2301      	movs	r3, #1
 8007a06:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = 0x00;
 8007a0a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007a0e:	f000 f831 	bl	8007a74 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8007a12:	3800      	subs	r0, #0
 8007a14:	bf18      	it	ne
 8007a16:	2001      	movne	r0, #1
 8007a18:	4240      	negs	r0, r0
}
 8007a1a:	b003      	add	sp, #12
 8007a1c:	bd30      	pop	{r4, r5, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007a1e:	f100 0418 	add.w	r4, r0, #24
 8007a22:	460d      	mov	r5, r1
 8007a24:	2301      	movs	r3, #1
 8007a26:	f245 5184 	movw	r1, #21892	; 0x5584
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f10d 0207 	add.w	r2, sp, #7
 8007a30:	f000 f820 	bl	8007a74 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1de      	bne.n	80079f6 <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8007a38:	2d02      	cmp	r5, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f10d 0207 	add.w	r2, sp, #7
 8007a40:	f04f 0301 	mov.w	r3, #1
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8007a44:	bf0c      	ite	eq
 8007a46:	248c      	moveq	r4, #140	; 0x8c
 8007a48:	2480      	movne	r4, #128	; 0x80
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007a4a:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8007a4e:	f88d 4007 	strb.w	r4, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007a52:	f000 f80f 	bl	8007a74 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8007a56:	3800      	subs	r0, #0
 8007a58:	bf18      	it	ne
 8007a5a:	2001      	movne	r0, #1
 8007a5c:	4240      	negs	r0, r0
}
 8007a5e:	b003      	add	sp, #12
 8007a60:	bd30      	pop	{r4, r5, pc}
 8007a62:	bf00      	nop

08007a64 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8007a64:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007a66:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8007a6a:	46a4      	mov	ip, r4
}
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007a70:	4760      	bx	ip
 8007a72:	bf00      	nop

08007a74 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8007a74:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8007a76:	6804      	ldr	r4, [r0, #0]
 8007a78:	6880      	ldr	r0, [r0, #8]
 8007a7a:	46a4      	mov	ip, r4
}
 8007a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8007a80:	4760      	bx	ip
 8007a82:	bf00      	nop

08007a84 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8007a84:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d102      	bne.n	8007a92 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8007a92:	2000      	movs	r0, #0
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop

08007aa0 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8007aa0:	b168      	cbz	r0, 8007abe <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8007aa2:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8007aa4:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8007aa6:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8007aa8:	4610      	mov	r0, r2
    Capabilities->Config_Contrast      = 1;
 8007aaa:	614b      	str	r3, [r1, #20]
    Capabilities->Config_MirrorFlip    = 1;
 8007aac:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8007aae:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8007ab0:	600b      	str	r3, [r1, #0]
    Capabilities->Config_SpecialEffect = 1;
 8007ab2:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 8007ab4:	618a      	str	r2, [r1, #24]
    Capabilities->Config_LightMode     = 0;
 8007ab6:	604a      	str	r2, [r1, #4]
    Capabilities->Config_Saturation    = 0;
 8007ab8:	610a      	str	r2, [r1, #16]
    Capabilities->Config_Zoom          = 0;
 8007aba:	620a      	str	r2, [r1, #32]
    ret = OV9655_OK;
 8007abc:	4770      	bx	lr
    ret = OV9655_ERROR;
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8007ac2:	4770      	bx	lr

08007ac4 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop

08007acc <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007ad4:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007ad6:	6904      	ldr	r4, [r0, #16]
 8007ad8:	8900      	ldrh	r0, [r0, #8]
 8007ada:	46a4      	mov	ip, r4
}
 8007adc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007ae0:	4760      	bx	ip
 8007ae2:	bf00      	nop

08007ae4 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007ae4:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007ae6:	68c4      	ldr	r4, [r0, #12]
 8007ae8:	8900      	ldrh	r0, [r0, #8]
 8007aea:	46a4      	mov	ip, r4
}
 8007aec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007af0:	4760      	bx	ip
 8007af2:	bf00      	nop

08007af4 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8007af4:	2903      	cmp	r1, #3
{
 8007af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 8007afc:	d831      	bhi.n	8007b62 <OV9655_SetResolution+0x6e>
    switch (Resolution)
 8007afe:	2901      	cmp	r1, #1
 8007b00:	4604      	mov	r4, r0
 8007b02:	d034      	beq.n	8007b6e <OV9655_SetResolution+0x7a>
 8007b04:	3902      	subs	r1, #2
 8007b06:	2600      	movs	r6, #0
 8007b08:	2901      	cmp	r1, #1
 8007b0a:	d864      	bhi.n	8007bd6 <OV9655_SetResolution+0xe2>
 8007b0c:	f10d 0907 	add.w	r9, sp, #7
 8007b10:	f100 0a18 	add.w	sl, r0, #24
 8007b14:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8007cc0 <OV9655_SetResolution+0x1cc>
          tmp = OV9655_VGA[index][1];
 8007b18:	eb0b 0046 	add.w	r0, fp, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	464a      	mov	r2, r9
 8007b20:	f81b 1016 	ldrb.w	r1, [fp, r6, lsl #1]
          tmp = OV9655_VGA[index][1];
 8007b24:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007b26:	4650      	mov	r0, sl
          tmp = OV9655_VGA[index][1];
 8007b28:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007b2c:	f000 fc3e 	bl	80083ac <ov9655_write_reg>
 8007b30:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8007b32:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007b34:	4680      	mov	r8, r0
 8007b36:	bf18      	it	ne
 8007b38:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8007b3a:	4798      	blx	r3
 8007b3c:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007b3e:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007b40:	6963      	ldr	r3, [r4, #20]
 8007b42:	4798      	blx	r3
 8007b44:	1b40      	subs	r0, r0, r5
 8007b46:	2801      	cmp	r0, #1
 8007b48:	d9fa      	bls.n	8007b40 <OV9655_SetResolution+0x4c>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	2e93      	cmp	r6, #147	; 0x93
 8007b4e:	d00a      	beq.n	8007b66 <OV9655_SetResolution+0x72>
        if(ret != OV9655_ERROR)
 8007b50:	f1b8 0f00 	cmp.w	r8, #0
 8007b54:	d0e0      	beq.n	8007b18 <OV9655_SetResolution+0x24>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8007b56:	2e92      	cmp	r6, #146	; 0x92
 8007b58:	f106 0602 	add.w	r6, r6, #2
 8007b5c:	d001      	beq.n	8007b62 <OV9655_SetResolution+0x6e>
 8007b5e:	2e93      	cmp	r6, #147	; 0x93
 8007b60:	d1f9      	bne.n	8007b56 <OV9655_SetResolution+0x62>
    ret = OV9655_ERROR;
 8007b62:	f04f 37ff 	mov.w	r7, #4294967295
}
 8007b66:	4638      	mov	r0, r7
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (Resolution)
 8007b6e:	2600      	movs	r6, #0
 8007b70:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8007cc4 <OV9655_SetResolution+0x1d0>
 8007b74:	f10d 0907 	add.w	r9, sp, #7
 8007b78:	f100 0a18 	add.w	sl, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007b7c:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007b80:	2301      	movs	r3, #1
 8007b82:	464a      	mov	r2, r9
 8007b84:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007b88:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007b8a:	4650      	mov	r0, sl
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007b8c:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007b90:	f000 fc0c 	bl	80083ac <ov9655_write_reg>
 8007b94:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8007b96:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007b98:	4683      	mov	fp, r0
 8007b9a:	bf18      	it	ne
 8007b9c:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8007b9e:	4798      	blx	r3
 8007ba0:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007ba2:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007ba4:	6963      	ldr	r3, [r4, #20]
 8007ba6:	4798      	blx	r3
 8007ba8:	1b40      	subs	r0, r0, r5
 8007baa:	2801      	cmp	r0, #1
 8007bac:	d9fa      	bls.n	8007ba4 <OV9655_SetResolution+0xb0>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8007bae:	3601      	adds	r6, #1
 8007bb0:	2e91      	cmp	r6, #145	; 0x91
 8007bb2:	d043      	beq.n	8007c3c <OV9655_SetResolution+0x148>
        if(ret != OV9655_ERROR)
 8007bb4:	f1bb 0f00 	cmp.w	fp, #0
 8007bb8:	d0e0      	beq.n	8007b7c <OV9655_SetResolution+0x88>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8007bba:	2e90      	cmp	r6, #144	; 0x90
 8007bbc:	f106 0602 	add.w	r6, r6, #2
 8007bc0:	d001      	beq.n	8007bc6 <OV9655_SetResolution+0xd2>
 8007bc2:	2e91      	cmp	r6, #145	; 0x91
 8007bc4:	d1f9      	bne.n	8007bba <OV9655_SetResolution+0xc6>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	2d04      	cmp	r5, #4
 8007bca:	f105 0502 	add.w	r5, r5, #2
 8007bce:	d0c8      	beq.n	8007b62 <OV9655_SetResolution+0x6e>
 8007bd0:	2d05      	cmp	r5, #5
 8007bd2:	d1f9      	bne.n	8007bc8 <OV9655_SetResolution+0xd4>
 8007bd4:	e7c5      	b.n	8007b62 <OV9655_SetResolution+0x6e>
 8007bd6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8007cc4 <OV9655_SetResolution+0x1d0>
 8007bda:	f10d 0907 	add.w	r9, sp, #7
 8007bde:	f100 0a18 	add.w	sl, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007be2:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007be6:	2301      	movs	r3, #1
 8007be8:	464a      	mov	r2, r9
 8007bea:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007bee:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007bf0:	4650      	mov	r0, sl
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007bf2:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007bf6:	f000 fbd9 	bl	80083ac <ov9655_write_reg>
 8007bfa:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8007bfc:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007bfe:	4683      	mov	fp, r0
 8007c00:	bf18      	it	ne
 8007c02:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8007c04:	4798      	blx	r3
 8007c06:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c08:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007c0a:	6963      	ldr	r3, [r4, #20]
 8007c0c:	4798      	blx	r3
 8007c0e:	1b40      	subs	r0, r0, r5
 8007c10:	2801      	cmp	r0, #1
 8007c12:	d9fa      	bls.n	8007c0a <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8007c14:	3601      	adds	r6, #1
 8007c16:	2e91      	cmp	r6, #145	; 0x91
 8007c18:	d031      	beq.n	8007c7e <OV9655_SetResolution+0x18a>
        if(ret != OV9655_ERROR)
 8007c1a:	f1bb 0f00 	cmp.w	fp, #0
 8007c1e:	d0e0      	beq.n	8007be2 <OV9655_SetResolution+0xee>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8007c20:	2e90      	cmp	r6, #144	; 0x90
 8007c22:	f106 0602 	add.w	r6, r6, #2
 8007c26:	d001      	beq.n	8007c2c <OV9655_SetResolution+0x138>
 8007c28:	2e91      	cmp	r6, #145	; 0x91
 8007c2a:	d1f9      	bne.n	8007c20 <OV9655_SetResolution+0x12c>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	2d04      	cmp	r5, #4
 8007c30:	f105 0502 	add.w	r5, r5, #2
 8007c34:	d095      	beq.n	8007b62 <OV9655_SetResolution+0x6e>
 8007c36:	2d05      	cmp	r5, #5
 8007c38:	d1f9      	bne.n	8007c2e <OV9655_SetResolution+0x13a>
 8007c3a:	e792      	b.n	8007b62 <OV9655_SetResolution+0x6e>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8007c3c:	2500      	movs	r5, #0
          tmp = OV9655_QVGA[index][1];
 8007c3e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007cc8 <OV9655_SetResolution+0x1d4>
        if(ret != OV9655_ERROR)
 8007c42:	2f00      	cmp	r7, #0
 8007c44:	d1c0      	bne.n	8007bc8 <OV9655_SetResolution+0xd4>
          tmp = OV9655_QVGA[index][1];
 8007c46:	eb08 0045 	add.w	r0, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	464a      	mov	r2, r9
 8007c4e:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
          tmp = OV9655_QVGA[index][1];
 8007c52:	7846      	ldrb	r6, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c54:	4650      	mov	r0, sl
          tmp = OV9655_QVGA[index][1];
 8007c56:	f88d 6007 	strb.w	r6, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c5a:	f000 fba7 	bl	80083ac <ov9655_write_reg>
 8007c5e:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8007c60:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c62:	bf18      	it	ne
 8007c64:	2001      	movne	r0, #1
 8007c66:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 8007c68:	4798      	blx	r3
 8007c6a:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007c6c:	6963      	ldr	r3, [r4, #20]
 8007c6e:	4798      	blx	r3
 8007c70:	1b80      	subs	r0, r0, r6
 8007c72:	2801      	cmp	r0, #1
 8007c74:	d9fa      	bls.n	8007c6c <OV9655_SetResolution+0x178>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8007c76:	3501      	adds	r5, #1
 8007c78:	2d05      	cmp	r5, #5
 8007c7a:	d1e2      	bne.n	8007c42 <OV9655_SetResolution+0x14e>
 8007c7c:	e773      	b.n	8007b66 <OV9655_SetResolution+0x72>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8007c7e:	2500      	movs	r5, #0
          tmp = OV9655_QQVGA[index][1];
 8007c80:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8007ccc <OV9655_SetResolution+0x1d8>
        if(ret != OV9655_ERROR)
 8007c84:	2f00      	cmp	r7, #0
 8007c86:	d1d2      	bne.n	8007c2e <OV9655_SetResolution+0x13a>
          tmp = OV9655_QQVGA[index][1];
 8007c88:	eb08 0045 	add.w	r0, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	464a      	mov	r2, r9
 8007c90:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
          tmp = OV9655_QQVGA[index][1];
 8007c94:	7846      	ldrb	r6, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c96:	4650      	mov	r0, sl
          tmp = OV9655_QQVGA[index][1];
 8007c98:	f88d 6007 	strb.w	r6, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007c9c:	f000 fb86 	bl	80083ac <ov9655_write_reg>
 8007ca0:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8007ca2:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007ca4:	bf18      	it	ne
 8007ca6:	2001      	movne	r0, #1
 8007ca8:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 8007caa:	4798      	blx	r3
 8007cac:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007cae:	6963      	ldr	r3, [r4, #20]
 8007cb0:	4798      	blx	r3
 8007cb2:	1b80      	subs	r0, r0, r6
 8007cb4:	2801      	cmp	r0, #1
 8007cb6:	d9fa      	bls.n	8007cae <OV9655_SetResolution+0x1ba>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8007cb8:	3501      	adds	r5, #1
 8007cba:	2d05      	cmp	r5, #5
 8007cbc:	d1e2      	bne.n	8007c84 <OV9655_SetResolution+0x190>
 8007cbe:	e752      	b.n	8007b66 <OV9655_SetResolution+0x72>
 8007cc0:	0804652c 	.word	0x0804652c
 8007cc4:	08046408 	.word	0x08046408
 8007cc8:	080463fc 	.word	0x080463fc
 8007ccc:	080463f0 	.word	0x080463f0

08007cd0 <OV9655_SetColorEffect>:
{
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	3901      	subs	r1, #1
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	9001      	str	r0, [sp, #4]
 8007cda:	291f      	cmp	r1, #31
 8007cdc:	d821      	bhi.n	8007d22 <OV9655_SetColorEffect+0x52>
 8007cde:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007ce2:	0073      	.short	0x0073
 8007ce4:	002000bd 	.word	0x002000bd
 8007ce8:	002000fa 	.word	0x002000fa
 8007cec:	00200020 	.word	0x00200020
 8007cf0:	00200146 	.word	0x00200146
 8007cf4:	00200020 	.word	0x00200020
 8007cf8:	00200020 	.word	0x00200020
 8007cfc:	00200020 	.word	0x00200020
 8007d00:	00200165 	.word	0x00200165
 8007d04:	00200020 	.word	0x00200020
 8007d08:	00200020 	.word	0x00200020
 8007d0c:	00200020 	.word	0x00200020
 8007d10:	00200020 	.word	0x00200020
 8007d14:	00200020 	.word	0x00200020
 8007d18:	00200020 	.word	0x00200020
 8007d1c:	00200020 	.word	0x00200020
 8007d20:	019f      	.short	0x019f
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007d22:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8007d26:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f10d 020f 	add.w	r2, sp, #15
 8007d2e:	213a      	movs	r1, #58	; 0x3a
 8007d30:	4648      	mov	r0, r9
    tmp = 0x80;
 8007d32:	f04f 0a80 	mov.w	sl, #128	; 0x80
    tmp = 0xCC;
 8007d36:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007d3a:	f000 fb37 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007d3e:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007d42:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007d44:	2301      	movs	r3, #1
 8007d46:	214f      	movs	r1, #79	; 0x4f
 8007d48:	4648      	mov	r0, r9
    tmp = 0x80;
 8007d4a:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007d4e:	f000 fb2d 	bl	80083ac <ov9655_write_reg>
 8007d52:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007d54:	f10d 020f 	add.w	r2, sp, #15
 8007d58:	2301      	movs	r3, #1
 8007d5a:	2150      	movs	r1, #80	; 0x50
 8007d5c:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007d5e:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007d60:	f000 fb24 	bl	80083ac <ov9655_write_reg>
    tmp = 0x00;
 8007d64:	f04f 0c00 	mov.w	ip, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007d68:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007d6a:	f10d 020f 	add.w	r2, sp, #15
 8007d6e:	2301      	movs	r3, #1
 8007d70:	2151      	movs	r1, #81	; 0x51
 8007d72:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007d74:	44b0      	add	r8, r6
    tmp = 0x00;
 8007d76:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007d7a:	f000 fb17 	bl	80083ac <ov9655_write_reg>
 8007d7e:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007d80:	f10d 020f 	add.w	r2, sp, #15
 8007d84:	4648      	mov	r0, r9
 8007d86:	2301      	movs	r3, #1
 8007d88:	2152      	movs	r1, #82	; 0x52
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007d8a:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007d8c:	f000 fb0e 	bl	80083ac <ov9655_write_reg>
 8007d90:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007d92:	f10d 020f 	add.w	r2, sp, #15
 8007d96:	4648      	mov	r0, r9
 8007d98:	2301      	movs	r3, #1
 8007d9a:	2153      	movs	r1, #83	; 0x53
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007d9c:	4426      	add	r6, r4
    tmp = 0x80;
 8007d9e:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007da2:	f000 fb03 	bl	80083ac <ov9655_write_reg>
 8007da6:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007da8:	f10d 020f 	add.w	r2, sp, #15
 8007dac:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007dae:	4434      	add	r4, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007db0:	2301      	movs	r3, #1
 8007db2:	2154      	movs	r1, #84	; 0x54
 8007db4:	f000 fafa 	bl	80083ac <ov9655_write_reg>
 8007db8:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 8007dba:	3800      	subs	r0, #0
 8007dbc:	bf18      	it	ne
 8007dbe:	2001      	movne	r0, #1
}
 8007dc0:	4240      	negs	r0, r0
 8007dc2:	b004      	add	sp, #16
 8007dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007dc8:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8007dcc:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f10d 020f 	add.w	r2, sp, #15
 8007dd4:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007dd6:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007dda:	4648      	mov	r0, r9
    tmp = 0x00;
 8007ddc:	2400      	movs	r4, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007dde:	f000 fae5 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007de2:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007de6:	9001      	str	r0, [sp, #4]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007de8:	2301      	movs	r3, #1
 8007dea:	214f      	movs	r1, #79	; 0x4f
 8007dec:	4648      	mov	r0, r9
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007dee:	9f01      	ldr	r7, [sp, #4]
    tmp = 0x60;
 8007df0:	2660      	movs	r6, #96	; 0x60
    tmp = 0x00;
 8007df2:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007df6:	f000 fad9 	bl	80083ac <ov9655_write_reg>
 8007dfa:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007dfc:	f10d 020f 	add.w	r2, sp, #15
 8007e00:	2301      	movs	r3, #1
 8007e02:	2150      	movs	r1, #80	; 0x50
 8007e04:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007e06:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007e08:	f000 fad0 	bl	80083ac <ov9655_write_reg>
 8007e0c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007e0e:	f10d 020f 	add.w	r2, sp, #15
 8007e12:	2301      	movs	r3, #1
 8007e14:	2151      	movs	r1, #81	; 0x51
 8007e16:	4648      	mov	r0, r9
 8007e18:	f000 fac8 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007e1c:	4447      	add	r7, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007e1e:	4605      	mov	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007e20:	f10d 020f 	add.w	r2, sp, #15
 8007e24:	2301      	movs	r3, #1
 8007e26:	2152      	movs	r1, #82	; 0x52
 8007e28:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007e2a:	442f      	add	r7, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007e2c:	f000 fabe 	bl	80083ac <ov9655_write_reg>
 8007e30:	4605      	mov	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007e32:	f10d 020f 	add.w	r2, sp, #15
 8007e36:	2301      	movs	r3, #1
 8007e38:	2153      	movs	r1, #83	; 0x53
 8007e3a:	4648      	mov	r0, r9
 8007e3c:	f000 fab6 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007e40:	443d      	add	r5, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007e42:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007e44:	f10d 020f 	add.w	r2, sp, #15
 8007e48:	4648      	mov	r0, r9
 8007e4a:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007e4c:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007e4e:	2154      	movs	r1, #84	; 0x54
    tmp = 0x60;
 8007e50:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007e54:	f000 faaa 	bl	80083ac <ov9655_write_reg>
 8007e58:	4420      	add	r0, r4
    break;
 8007e5a:	e7ae      	b.n	8007dba <OV9655_SetColorEffect+0xea>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007e5c:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8007e60:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007e62:	2301      	movs	r3, #1
 8007e64:	f10d 020f 	add.w	r2, sp, #15
 8007e68:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007e6a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007e6e:	4648      	mov	r0, r9
    tmp = 0x60;
 8007e70:	2460      	movs	r4, #96	; 0x60
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007e72:	f000 fa9b 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007e76:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007e7a:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	214f      	movs	r1, #79	; 0x4f
 8007e80:	4648      	mov	r0, r9
    tmp = 0x60;
 8007e82:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007e86:	f000 fa91 	bl	80083ac <ov9655_write_reg>
 8007e8a:	4680      	mov	r8, r0
    tmp = 0x00;
 8007e8c:	2400      	movs	r4, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007e8e:	f10d 020f 	add.w	r2, sp, #15
 8007e92:	4648      	mov	r0, r9
 8007e94:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007e96:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007e98:	2150      	movs	r1, #80	; 0x50
    tmp = 0x00;
 8007e9a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007e9e:	f000 fa85 	bl	80083ac <ov9655_write_reg>
 8007ea2:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007ea4:	f10d 020f 	add.w	r2, sp, #15
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	2151      	movs	r1, #81	; 0x51
 8007eac:	4648      	mov	r0, r9
 8007eae:	f000 fa7d 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007eb2:	44b0      	add	r8, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007eb4:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007eb6:	f10d 020f 	add.w	r2, sp, #15
 8007eba:	2301      	movs	r3, #1
 8007ebc:	2152      	movs	r1, #82	; 0x52
 8007ebe:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007ec0:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007ec2:	f000 fa73 	bl	80083ac <ov9655_write_reg>
 8007ec6:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007ec8:	f10d 020f 	add.w	r2, sp, #15
 8007ecc:	4648      	mov	r0, r9
 8007ece:	2301      	movs	r3, #1
 8007ed0:	2153      	movs	r1, #83	; 0x53
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007ed2:	4426      	add	r6, r4
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007ed4:	e765      	b.n	8007da2 <OV9655_SetColorEffect+0xd2>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007ed6:	f100 0a18 	add.w	sl, r0, #24
    tmp = 0xCC;
 8007eda:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007edc:	2301      	movs	r3, #1
 8007ede:	f10d 020f 	add.w	r2, sp, #15
 8007ee2:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 8007ee4:	f04f 0900 	mov.w	r9, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007ee8:	4650      	mov	r0, sl
    tmp = 0xCC;
 8007eea:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007eee:	f000 fa5d 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007ef2:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007ef6:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007ef8:	2301      	movs	r3, #1
 8007efa:	214f      	movs	r1, #79	; 0x4f
 8007efc:	4650      	mov	r0, sl
    tmp = 0x00;
 8007efe:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007f02:	f000 fa53 	bl	80083ac <ov9655_write_reg>
 8007f06:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007f08:	f10d 020f 	add.w	r2, sp, #15
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	2150      	movs	r1, #80	; 0x50
 8007f10:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007f12:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007f14:	f000 fa4a 	bl	80083ac <ov9655_write_reg>
 8007f18:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007f1a:	f10d 020f 	add.w	r2, sp, #15
 8007f1e:	2301      	movs	r3, #1
 8007f20:	2151      	movs	r1, #81	; 0x51
 8007f22:	4650      	mov	r0, sl
 8007f24:	f000 fa42 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007f28:	44b0      	add	r8, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007f2a:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007f2c:	f10d 020f 	add.w	r2, sp, #15
 8007f30:	2301      	movs	r3, #1
 8007f32:	2152      	movs	r1, #82	; 0x52
 8007f34:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007f36:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007f38:	f000 fa38 	bl	80083ac <ov9655_write_reg>
    tmp = 0x80;
 8007f3c:	2780      	movs	r7, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007f3e:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007f40:	f10d 020f 	add.w	r2, sp, #15
 8007f44:	2301      	movs	r3, #1
 8007f46:	2153      	movs	r1, #83	; 0x53
 8007f48:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007f4a:	4426      	add	r6, r4
    tmp = 0x80;
 8007f4c:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007f50:	f000 fa2c 	bl	80083ac <ov9655_write_reg>
 8007f54:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007f56:	f10d 020f 	add.w	r2, sp, #15
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007f5e:	4434      	add	r4, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007f60:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 8007f62:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007f66:	f000 fa21 	bl	80083ac <ov9655_write_reg>
 8007f6a:	4420      	add	r0, r4
    break;
 8007f6c:	e725      	b.n	8007dba <OV9655_SetColorEffect+0xea>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007f6e:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8007f72:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007f74:	2301      	movs	r3, #1
 8007f76:	f10d 020f 	add.w	r2, sp, #15
 8007f7a:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007f7c:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007f80:	4648      	mov	r0, r9
    tmp = 0x00;
 8007f82:	2400      	movs	r4, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007f84:	f000 fa12 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007f88:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007f8c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007f8e:	2301      	movs	r3, #1
 8007f90:	214f      	movs	r1, #79	; 0x4f
 8007f92:	4648      	mov	r0, r9
    tmp = 0x00;
 8007f94:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007f98:	f000 fa08 	bl	80083ac <ov9655_write_reg>
 8007f9c:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007f9e:	f10d 020f 	add.w	r2, sp, #15
 8007fa2:	4648      	mov	r0, r9
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	2150      	movs	r1, #80	; 0x50
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007fa8:	44b8      	add	r8, r7
 8007faa:	e778      	b.n	8007e9e <OV9655_SetColorEffect+0x1ce>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007fac:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8007fb0:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f10d 020f 	add.w	r2, sp, #15
 8007fb8:	213a      	movs	r1, #58	; 0x3a
 8007fba:	4648      	mov	r0, r9
    tmp = 0x00;
 8007fbc:	f04f 0a00 	mov.w	sl, #0
    tmp = 0xCC;
 8007fc0:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007fc4:	f000 f9f2 	bl	80083ac <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007fc8:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007fcc:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007fce:	2301      	movs	r3, #1
 8007fd0:	214f      	movs	r1, #79	; 0x4f
 8007fd2:	4648      	mov	r0, r9
    tmp = 0x00;
 8007fd4:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007fd8:	f000 f9e8 	bl	80083ac <ov9655_write_reg>
 8007fdc:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007fde:	f10d 020f 	add.w	r2, sp, #15
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	2150      	movs	r1, #80	; 0x50
 8007fe6:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007fe8:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007fea:	f000 f9df 	bl	80083ac <ov9655_write_reg>
    tmp = 0x20;
 8007fee:	f04f 0c20 	mov.w	ip, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007ff2:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007ff4:	f10d 020f 	add.w	r2, sp, #15
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	2151      	movs	r1, #81	; 0x51
 8007ffc:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007ffe:	44b0      	add	r8, r6
    tmp = 0x20;
 8008000:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008004:	f000 f9d2 	bl	80083ac <ov9655_write_reg>
    tmp = 0xF0;
 8008008:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800800c:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800800e:	f10d 020f 	add.w	r2, sp, #15
 8008012:	4648      	mov	r0, r9
 8008014:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008016:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008018:	2152      	movs	r1, #82	; 0x52
    tmp = 0xF0;
 800801a:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800801e:	e6b5      	b.n	8007d8c <OV9655_SetColorEffect+0xbc>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008020:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xEC;
 8008024:	24ec      	movs	r4, #236	; 0xec
 8008026:	e67f      	b.n	8007d28 <OV9655_SetColorEffect+0x58>

08008028 <OV9655_SetBrightness>:
{
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	b084      	sub	sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 800802c:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <OV9655_SetBrightness+0x38>)
{
 800802e:	4606      	mov	r6, r0
  tmp = brightness_level[Level + 4];
 8008030:	ab04      	add	r3, sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8008032:	ac01      	add	r4, sp, #4
  tmp = brightness_level[Level + 4];
 8008034:	185d      	adds	r5, r3, r1
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008036:	2301      	movs	r3, #1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8008038:	ca07      	ldmia	r2, {r0, r1, r2}
 800803a:	c403      	stmia	r4!, {r0, r1}
 800803c:	7022      	strb	r2, [r4, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800803e:	f106 0018 	add.w	r0, r6, #24
  tmp = brightness_level[Level + 4];
 8008042:	f815 4c08 	ldrb.w	r4, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008046:	f10d 0203 	add.w	r2, sp, #3
 800804a:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 800804c:	f88d 4003 	strb.w	r4, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008050:	f000 f9ac 	bl	80083ac <ov9655_write_reg>
 8008054:	3800      	subs	r0, #0
 8008056:	bf18      	it	ne
 8008058:	2001      	movne	r0, #1
}
 800805a:	4240      	negs	r0, r0
 800805c:	b004      	add	sp, #16
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	08023ff0 	.word	0x08023ff0

08008064 <OV9655_SetContrast>:
{
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	b084      	sub	sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8008068:	4a0c      	ldr	r2, [pc, #48]	; (800809c <OV9655_SetContrast+0x38>)
{
 800806a:	4606      	mov	r6, r0
  tmp = contrast_level[Level + 4];
 800806c:	ab04      	add	r3, sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 800806e:	ac01      	add	r4, sp, #4
  tmp = contrast_level[Level + 4];
 8008070:	185d      	adds	r5, r3, r1
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008072:	2301      	movs	r3, #1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8008074:	ca07      	ldmia	r2, {r0, r1, r2}
 8008076:	c403      	stmia	r4!, {r0, r1}
 8008078:	7022      	strb	r2, [r4, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800807a:	f106 0018 	add.w	r0, r6, #24
  tmp = contrast_level[Level + 4];
 800807e:	f815 4c08 	ldrb.w	r4, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008082:	f10d 0203 	add.w	r2, sp, #3
 8008086:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 8008088:	f88d 4003 	strb.w	r4, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800808c:	f000 f98e 	bl	80083ac <ov9655_write_reg>
 8008090:	3800      	subs	r0, #0
 8008092:	bf18      	it	ne
 8008094:	2001      	movne	r0, #1
}
 8008096:	4240      	negs	r0, r0
 8008098:	b004      	add	sp, #16
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	080463e4 	.word	0x080463e4

080080a0 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 80080a0:	f031 0302 	bics.w	r3, r1, #2
{
 80080a4:	b530      	push	{r4, r5, lr}
 80080a6:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 80080a8:	d177      	bne.n	800819a <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80080aa:	f100 0418 	add.w	r4, r0, #24
 80080ae:	460d      	mov	r5, r1
 80080b0:	2301      	movs	r3, #1
 80080b2:	2112      	movs	r1, #18
 80080b4:	4620      	mov	r0, r4
 80080b6:	f10d 0207 	add.w	r2, sp, #7
 80080ba:	f000 f96f 	bl	800839c <ov9655_read_reg>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d16b      	bne.n	800819a <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 80080c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 80080c6:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 80080c8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 80080cc:	d029      	beq.n	8008122 <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 80080ce:	f043 0503 	orr.w	r5, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80080d2:	f10d 0207 	add.w	r2, sp, #7
 80080d6:	2301      	movs	r3, #1
 80080d8:	2112      	movs	r1, #18
 80080da:	4620      	mov	r0, r4
      tmp |= 0x03U;
 80080dc:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80080e0:	f000 f964 	bl	80083ac <ov9655_write_reg>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d158      	bne.n	800819a <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80080e8:	2301      	movs	r3, #1
 80080ea:	f10d 0207 	add.w	r2, sp, #7
 80080ee:	2140      	movs	r1, #64	; 0x40
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 f953 	bl	800839c <ov9655_read_reg>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d14f      	bne.n	800819a <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 80080fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80080fe:	4620      	mov	r0, r4
 8008100:	f10d 0207 	add.w	r2, sp, #7
 8008104:	2301      	movs	r3, #1
        tmp |= 0x10U;
 8008106:	f041 0410 	orr.w	r4, r1, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800810a:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 800810c:	f88d 4007 	strb.w	r4, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008110:	f000 f94c 	bl	80083ac <ov9655_write_reg>
 8008114:	3800      	subs	r0, #0
 8008116:	bf18      	it	ne
 8008118:	2001      	movne	r0, #1
 800811a:	4245      	negs	r5, r0
}
 800811c:	4628      	mov	r0, r5
 800811e:	b003      	add	sp, #12
 8008120:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 8008122:	f043 0502 	orr.w	r5, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008126:	f10d 0207 	add.w	r2, sp, #7
 800812a:	2301      	movs	r3, #1
 800812c:	2112      	movs	r1, #18
 800812e:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8008130:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008134:	f000 f93a 	bl	80083ac <ov9655_write_reg>
 8008138:	bb78      	cbnz	r0, 800819a <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 800813a:	2301      	movs	r3, #1
 800813c:	f10d 0207 	add.w	r2, sp, #7
 8008140:	213a      	movs	r1, #58	; 0x3a
 8008142:	4620      	mov	r0, r4
 8008144:	f000 f92a 	bl	800839c <ov9655_read_reg>
 8008148:	bb38      	cbnz	r0, 800819a <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 800814a:	f89d 5007 	ldrb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 800814e:	2301      	movs	r3, #1
 8008150:	f10d 0207 	add.w	r2, sp, #7
 8008154:	213a      	movs	r1, #58	; 0x3a
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8008156:	f025 052c 	bic.w	r5, r5, #44	; 0x2c
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 800815a:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 800815c:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008160:	f000 f924 	bl	80083ac <ov9655_write_reg>
 8008164:	b9c8      	cbnz	r0, 800819a <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008166:	2301      	movs	r3, #1
 8008168:	f10d 0207 	add.w	r2, sp, #7
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	4620      	mov	r0, r4
 8008170:	f000 f914 	bl	800839c <ov9655_read_reg>
 8008174:	4605      	mov	r5, r0
 8008176:	b9a8      	cbnz	r0, 80081a4 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8008178:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800817c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008180:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008184:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008188:	f10d 0207 	add.w	r2, sp, #7
 800818c:	4620      	mov	r0, r4
 800818e:	2301      	movs	r3, #1
 8008190:	2140      	movs	r1, #64	; 0x40
 8008192:	f000 f90b 	bl	80083ac <ov9655_write_reg>
 8008196:	2800      	cmp	r0, #0
 8008198:	d0c0      	beq.n	800811c <OV9655_SetPixelFormat+0x7c>
              ret = OV9655_ERROR;
 800819a:	f04f 35ff 	mov.w	r5, #4294967295
}
 800819e:	4628      	mov	r0, r5
 80081a0:	b003      	add	sp, #12
 80081a2:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 80081a4:	f04f 35ff 	mov.w	r5, #4294967295
 80081a8:	e7ee      	b.n	8008188 <OV9655_SetPixelFormat+0xe8>
 80081aa:	bf00      	nop

080081ac <OV9655_GetResolution>:
{
 80081ac:	b510      	push	{r4, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 80081b2:	2301      	movs	r3, #1
 80081b4:	3018      	adds	r0, #24
 80081b6:	f10d 0207 	add.w	r2, sp, #7
 80081ba:	2132      	movs	r1, #50	; 0x32
 80081bc:	f000 f8ee 	bl	800839c <ov9655_read_reg>
 80081c0:	b938      	cbnz	r0, 80081d2 <OV9655_GetResolution+0x26>
    switch (tmp)
 80081c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80081c6:	2ba4      	cmp	r3, #164	; 0xa4
 80081c8:	d007      	beq.n	80081da <OV9655_GetResolution+0x2e>
 80081ca:	2bff      	cmp	r3, #255	; 0xff
 80081cc:	d00c      	beq.n	80081e8 <OV9655_GetResolution+0x3c>
 80081ce:	2b12      	cmp	r3, #18
 80081d0:	d006      	beq.n	80081e0 <OV9655_GetResolution+0x34>
    ret = OV9655_ERROR;
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80081d6:	b002      	add	sp, #8
 80081d8:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 80081da:	6020      	str	r0, [r4, #0]
}
 80081dc:	b002      	add	sp, #8
 80081de:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 80081e0:	2301      	movs	r3, #1
 80081e2:	6023      	str	r3, [r4, #0]
}
 80081e4:	b002      	add	sp, #8
 80081e6:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 80081e8:	2303      	movs	r3, #3
 80081ea:	6023      	str	r3, [r4, #0]
}
 80081ec:	b002      	add	sp, #8
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <OV9655_ReadID>:
{
 80081f0:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 80081f2:	4604      	mov	r4, r0
{
 80081f4:	b083      	sub	sp, #12
 80081f6:	460d      	mov	r5, r1
  pObj->IO.Init();
 80081f8:	f854 3b18 	ldr.w	r3, [r4], #24
 80081fc:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 80081fe:	f10d 0207 	add.w	r2, sp, #7
 8008202:	4620      	mov	r0, r4
 8008204:	2301      	movs	r3, #1
 8008206:	210a      	movs	r1, #10
 8008208:	f000 f8c8 	bl	800839c <ov9655_read_reg>
 800820c:	b990      	cbnz	r0, 8008234 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 800820e:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8008212:	4620      	mov	r0, r4
 8008214:	f10d 0207 	add.w	r2, sp, #7
 8008218:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 800821a:	020c      	lsls	r4, r1, #8
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 800821c:	210b      	movs	r1, #11
      *Id = (uint32_t)tmp << 8U;
 800821e:	602c      	str	r4, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8008220:	f000 f8bc 	bl	800839c <ov9655_read_reg>
 8008224:	b930      	cbnz	r0, 8008234 <OV9655_ReadID+0x44>
        *Id |= tmp;
 8008226:	682b      	ldr	r3, [r5, #0]
 8008228:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800822c:	4313      	orrs	r3, r2
 800822e:	602b      	str	r3, [r5, #0]
}
 8008230:	b003      	add	sp, #12
 8008232:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e7fa      	b.n	8008230 <OV9655_ReadID+0x40>
 800823a:	bf00      	nop

0800823c <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 800823c:	2903      	cmp	r1, #3
 800823e:	d824      	bhi.n	800828a <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008240:	2301      	movs	r3, #1
{
 8008242:	b570      	push	{r4, r5, r6, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008244:	f100 0418 	add.w	r4, r0, #24
{
 8008248:	b082      	sub	sp, #8
 800824a:	460e      	mov	r6, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800824c:	211e      	movs	r1, #30
 800824e:	4620      	mov	r0, r4
 8008250:	f10d 0207 	add.w	r2, sp, #7
 8008254:	f000 f8a2 	bl	800839c <ov9655_read_reg>
 8008258:	b9a0      	cbnz	r0, 8008284 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 800825a:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800825e:	4620      	mov	r0, r4
 8008260:	f10d 0207 	add.w	r2, sp, #7
 8008264:	2301      	movs	r3, #1
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8008266:	f025 0530 	bic.w	r5, r5, #48	; 0x30
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800826a:	211e      	movs	r1, #30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 800826c:	ea45 1406 	orr.w	r4, r5, r6, lsl #4
 8008270:	f88d 4007 	strb.w	r4, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008274:	f000 f89a 	bl	80083ac <ov9655_write_reg>
 8008278:	3800      	subs	r0, #0
 800827a:	bf18      	it	ne
 800827c:	2001      	movne	r0, #1
 800827e:	4240      	negs	r0, r0
}
 8008280:	b002      	add	sp, #8
 8008282:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e7fa      	b.n	8008280 <OV9655_MirrorFlipConfig+0x44>
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800828e:	4770      	bx	lr

08008290 <OV9655_NightModeConfig>:
{
 8008290:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8008292:	f100 0418 	add.w	r4, r0, #24
{
 8008296:	b083      	sub	sp, #12
 8008298:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 800829a:	2301      	movs	r3, #1
 800829c:	f10d 0207 	add.w	r2, sp, #7
 80082a0:	213b      	movs	r1, #59	; 0x3b
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 f87a 	bl	800839c <ov9655_read_reg>
 80082a8:	b9b0      	cbnz	r0, 80082d8 <OV9655_NightModeConfig+0x48>
    if(Cmd == NIGHT_MODE_ENABLE)
 80082aa:	2d01      	cmp	r5, #1
      tmp |= 0x80U;
 80082ac:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 80082b0:	f10d 0207 	add.w	r2, sp, #7
 80082b4:	4620      	mov	r0, r4
      tmp |= 0x80U;
 80082b6:	bf0c      	ite	eq
 80082b8:	f045 0580 	orreq.w	r5, r5, #128	; 0x80
      tmp &= 0x7FU;
 80082bc:	f005 057f 	andne.w	r5, r5, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 80082c0:	2301      	movs	r3, #1
 80082c2:	213b      	movs	r1, #59	; 0x3b
 80082c4:	f88d 5007 	strb.w	r5, [sp, #7]
 80082c8:	f000 f870 	bl	80083ac <ov9655_write_reg>
 80082cc:	3800      	subs	r0, #0
 80082ce:	bf18      	it	ne
 80082d0:	2001      	movne	r0, #1
 80082d2:	4240      	negs	r0, r0
}
 80082d4:	b003      	add	sp, #12
 80082d6:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80082dc:	e7fa      	b.n	80082d4 <OV9655_NightModeConfig+0x44>
 80082de:	bf00      	nop

080082e0 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 80082e0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80082e4:	bb5b      	cbnz	r3, 800833e <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80082e6:	2903      	cmp	r1, #3
{
 80082e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ea:	460e      	mov	r6, r1
 80082ec:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80082ee:	d828      	bhi.n	8008342 <OV9655_Init+0x62>
 80082f0:	f032 0302 	bics.w	r3, r2, #2
 80082f4:	4617      	mov	r7, r2
 80082f6:	d124      	bne.n	8008342 <OV9655_Init+0x62>
      tmp = 0x80U;
 80082f8:	2580      	movs	r5, #128	; 0x80
 80082fa:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80082fc:	2301      	movs	r3, #1
 80082fe:	f10d 0207 	add.w	r2, sp, #7
 8008302:	2112      	movs	r1, #18
 8008304:	3018      	adds	r0, #24
      tmp = 0x80U;
 8008306:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 800830a:	f000 f84f 	bl	80083ac <ov9655_write_reg>
 800830e:	b9c0      	cbnz	r0, 8008342 <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 8008310:	6963      	ldr	r3, [r4, #20]
 8008312:	4798      	blx	r3
 8008314:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008316:	6963      	ldr	r3, [r4, #20]
 8008318:	4798      	blx	r3
 800831a:	1b43      	subs	r3, r0, r5
 800831c:	2bc7      	cmp	r3, #199	; 0xc7
 800831e:	d9fa      	bls.n	8008316 <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8008320:	4631      	mov	r1, r6
 8008322:	4620      	mov	r0, r4
 8008324:	f7ff fbe6 	bl	8007af4 <OV9655_SetResolution>
 8008328:	b958      	cbnz	r0, 8008342 <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 800832a:	4639      	mov	r1, r7
 800832c:	4620      	mov	r0, r4
 800832e:	f7ff feb7 	bl	80080a0 <OV9655_SetPixelFormat>
 8008332:	b930      	cbnz	r0, 8008342 <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8008334:	2301      	movs	r3, #1
 8008336:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800833a:	b003      	add	sp, #12
 800833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 800833e:	2000      	movs	r0, #0
}
 8008340:	4770      	bx	lr
      ret = OV9655_ERROR;
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	e7f8      	b.n	800833a <OV9655_Init+0x5a>

08008348 <OV9655_SetHueDegree>:
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop

08008350 <OV9655_ZoomConfig>:
 8008350:	f04f 30ff 	mov.w	r0, #4294967295
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 8008358:	b1c0      	cbz	r0, 800838c <OV9655_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800835a:	68ca      	ldr	r2, [r1, #12]
{
 800835c:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 800835e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8008362:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008364:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8008368:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 800836c:	4909      	ldr	r1, [pc, #36]	; (8008394 <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800836e:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8008370:	4a09      	ldr	r2, [pc, #36]	; (8008398 <OV9655_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 8008372:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8008374:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8008376:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 800837a:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if(pObj->IO.Init != NULL)
 800837e:	b10b      	cbz	r3, 8008384 <OV9655_RegisterBusIO+0x2c>
}
 8008380:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 8008382:	4718      	bx	r3
}
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	bc70      	pop	{r4, r5, r6}
 800838a:	4770      	bx	lr
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	08007ad5 	.word	0x08007ad5
 8008398:	08007ae5 	.word	0x08007ae5

0800839c <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800839c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800839e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80083a2:	46a4      	mov	ip, r4
}
 80083a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80083a8:	4760      	bx	ip
 80083aa:	bf00      	nop

080083ac <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80083ac:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80083ae:	6804      	ldr	r4, [r0, #0]
 80083b0:	6880      	ldr	r0, [r0, #8]
 80083b2:	46a4      	mov	ip, r4
}
 80083b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80083b8:	4760      	bx	ip
 80083ba:	bf00      	nop

080083bc <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 80083bc:	4a13      	ldr	r2, [pc, #76]	; (800840c <BSP_LED_Init+0x50>)
{
 80083be:	4603      	mov	r3, r0
  LEDx_GPIO_CLK_ENABLE();
 80083c0:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
{
 80083c4:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE();
 80083c6:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80083ca:	4d11      	ldr	r5, [pc, #68]	; (8008410 <BSP_LED_Init+0x54>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80083cc:	4e11      	ldr	r6, [pc, #68]	; (8008414 <BSP_LED_Init+0x58>)
{
 80083ce:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE();
 80083d0:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083d4:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80083d6:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80083da:	a903      	add	r1, sp, #12
  LEDx_GPIO_CLK_ENABLE();
 80083dc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80083e0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083e4:	2603      	movs	r6, #3
  LEDx_GPIO_CLK_ENABLE();
 80083e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80083ea:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80083ec:	9001      	str	r0, [sp, #4]
  LEDx_GPIO_CLK_ENABLE();
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083f2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80083f8:	f004 fdcc 	bl	800cf94 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80083fc:	9801      	ldr	r0, [sp, #4]
 80083fe:	4622      	mov	r2, r4
 8008400:	b2a9      	uxth	r1, r5
 8008402:	f004 ffb9 	bl	800d378 <HAL_GPIO_WritePin>
 return ret;
}
 8008406:	2000      	movs	r0, #0
 8008408:	b008      	add	sp, #32
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	58024400 	.word	0x58024400
 8008410:	080466bc 	.word	0x080466bc
 8008414:	080466cc 	.word	0x080466cc

08008418 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 8008418:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800841a:	4905      	ldr	r1, [pc, #20]	; (8008430 <BSP_LED_On+0x18>)
 800841c:	2200      	movs	r2, #0
 800841e:	4b05      	ldr	r3, [pc, #20]	; (8008434 <BSP_LED_On+0x1c>)
 8008420:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 8008424:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008428:	f004 ffa6 	bl	800d378 <HAL_GPIO_WritePin>
  return ret;
}
 800842c:	2000      	movs	r0, #0
 800842e:	bd08      	pop	{r3, pc}
 8008430:	080466bc 	.word	0x080466bc
 8008434:	080466cc 	.word	0x080466cc

08008438 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 8008438:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800843a:	4905      	ldr	r1, [pc, #20]	; (8008450 <BSP_LED_Off+0x18>)
 800843c:	2201      	movs	r2, #1
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <BSP_LED_Off+0x1c>)
 8008440:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 8008444:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008448:	f004 ff96 	bl	800d378 <HAL_GPIO_WritePin>
  return ret;
}
 800844c:	2000      	movs	r0, #0
 800844e:	bd08      	pop	{r3, pc}
 8008450:	080466bc 	.word	0x080466bc
 8008454:	080466cc 	.word	0x080466cc

08008458 <BSP_LED_Toggle>:
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8008458:	4a05      	ldr	r2, [pc, #20]	; (8008470 <BSP_LED_Toggle+0x18>)
{
 800845a:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <BSP_LED_Toggle+0x1c>)
 800845e:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 8008462:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008466:	f004 ff8b 	bl	800d380 <HAL_GPIO_TogglePin>
  return ret;
}
 800846a:	2000      	movs	r0, #0
 800846c:	bd08      	pop	{r3, pc}
 800846e:	bf00      	nop
 8008470:	080466bc 	.word	0x080466bc
 8008474:	080466cc 	.word	0x080466cc

08008478 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008478:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <BSP_PB_Init+0x7c>)
  gpio_init_structure.Pin = BUTTON_PIN [Button];
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;

  if(ButtonMode == BUTTON_MODE_GPIO)
 800847a:	460b      	mov	r3, r1
  gpio_init_structure.Pull = GPIO_NOPULL;
 800847c:	2102      	movs	r1, #2
{
 800847e:	b570      	push	{r4, r5, r6, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008480:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
{
 8008484:	b088      	sub	sp, #32
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008486:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{
 800848a:	4605      	mov	r5, r0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800848c:	f044 0404 	orr.w	r4, r4, #4
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008490:	2000      	movs	r0, #0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008492:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8008496:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800849a:	9602      	str	r6, [sp, #8]
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800849c:	f002 0204 	and.w	r2, r2, #4
 80084a0:	9201      	str	r2, [sp, #4]
 80084a2:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80084a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if(ButtonMode == BUTTON_MODE_GPIO)
 80084a8:	b93b      	cbnz	r3, 80084ba <BSP_PB_Init+0x42>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80084aa:	a902      	add	r1, sp, #8
 80084ac:	4812      	ldr	r0, [pc, #72]	; (80084f8 <BSP_PB_Init+0x80>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80084ae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80084b0:	f004 fd70 	bl	800cf94 <HAL_GPIO_Init>
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  return BSP_ERROR_NONE;
}
 80084b4:	2000      	movs	r0, #0
 80084b6:	b008      	add	sp, #32
 80084b8:	bd70      	pop	{r4, r5, r6, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80084ba:	4b10      	ldr	r3, [pc, #64]	; (80084fc <BSP_PB_Init+0x84>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80084bc:	a902      	add	r1, sp, #8
 80084be:	480e      	ldr	r0, [pc, #56]	; (80084f8 <BSP_PB_Init+0x80>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80084c0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80084c2:	f004 fd67 	bl	800cf94 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80084c6:	480e      	ldr	r0, [pc, #56]	; (8008500 <BSP_PB_Init+0x88>)
 80084c8:	490e      	ldr	r1, [pc, #56]	; (8008504 <BSP_PB_Init+0x8c>)
 80084ca:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80084ce:	4628      	mov	r0, r5
 80084d0:	f004 fd5a 	bl	800cf88 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80084d4:	4628      	mov	r0, r5
 80084d6:	4a0c      	ldr	r2, [pc, #48]	; (8008508 <BSP_PB_Init+0x90>)
 80084d8:	2100      	movs	r1, #0
 80084da:	f004 fd4d 	bl	800cf78 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80084de:	2200      	movs	r2, #0
 80084e0:	210f      	movs	r1, #15
 80084e2:	2028      	movs	r0, #40	; 0x28
 80084e4:	f002 f86c 	bl	800a5c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80084e8:	2028      	movs	r0, #40	; 0x28
 80084ea:	f002 f8a3 	bl	800a634 <HAL_NVIC_EnableIRQ>
}
 80084ee:	2000      	movs	r0, #0
 80084f0:	b008      	add	sp, #32
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	58024400 	.word	0x58024400
 80084f8:	58020800 	.word	0x58020800
 80084fc:	11110000 	.word	0x11110000
 8008500:	2400630c 	.word	0x2400630c
 8008504:	1670000d 	.word	0x1670000d
 8008508:	08008525 	.word	0x08008525

0800850c <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800850c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008510:	4802      	ldr	r0, [pc, #8]	; (800851c <BSP_PB_GetState+0x10>)
{
 8008512:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008514:	f004 ff2a 	bl	800d36c <HAL_GPIO_ReadPin>
}
 8008518:	bd08      	pop	{r3, pc}
 800851a:	bf00      	nop
 800851c:	58020800 	.word	0x58020800

08008520 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop

08008524 <BUTTON_WAKEUP_EXTI_Callback>:
  BSP_PB_Callback(BUTTON_WAKEUP);
 8008524:	2000      	movs	r0, #0
{
 8008526:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 8008528:	f7ff fffa 	bl	8008520 <BSP_PB_Callback>
}
 800852c:	bd08      	pop	{r3, pc}
 800852e:	bf00      	nop

08008530 <BSP_JOY_Init>:
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 8008530:	f8df c114 	ldr.w	ip, [pc, #276]	; 8008648 <BSP_JOY_Init+0x118>
{
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JoyPinsMask |= (uint32_t)JoyPins;
 8008538:	f8dc 3000 	ldr.w	r3, [ip]
 800853c:	fab0 f880 	clz	r8, r0
{
 8008540:	b08f      	sub	sp, #60	; 0x3c
 8008542:	4615      	mov	r5, r2
  JoyPinsMask |= (uint32_t)JoyPins;
 8008544:	4313      	orrs	r3, r2
{
 8008546:	4689      	mov	r9, r1
 8008548:	ea4f 1858 	mov.w	r8, r8, lsr #5

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800854c:	2400      	movs	r4, #0
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800854e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800864c <BSP_JOY_Init+0x11c>
        gpio_init_structure.Pull = GPIO_PULLUP;
 8008552:	2601      	movs	r6, #1
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008554:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8008650 <BSP_JOY_Init+0x120>
        gpio_init_structure.Pull = GPIO_PULLUP;
 8008558:	2703      	movs	r7, #3
  JoyPinsMask |= (uint32_t)JoyPins;
 800855a:	f8cc 3000 	str.w	r3, [ip]
    key_pressed = 1UL << joykey;
 800855e:	2301      	movs	r3, #1
 8008560:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 8008562:	43ab      	bics	r3, r5
 8008564:	d102      	bne.n	800856c <BSP_JOY_Init+0x3c>
 8008566:	f1b8 0f00 	cmp.w	r8, #0
 800856a:	d106      	bne.n	800857a <BSP_JOY_Init+0x4a>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800856c:	3401      	adds	r4, #1
 800856e:	2c05      	cmp	r4, #5
 8008570:	d1f5      	bne.n	800855e <BSP_JOY_Init+0x2e>
      }
    }
  }

  return ret;
}
 8008572:	2000      	movs	r0, #0
 8008574:	b00f      	add	sp, #60	; 0x3c
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 800857a:	4b2c      	ldr	r3, [pc, #176]	; (800862c <BSP_JOY_Init+0xfc>)
 800857c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008584:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800858c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 8008590:	2c00      	cmp	r4, #0
 8008592:	d03e      	beq.n	8008612 <BSP_JOY_Init+0xe2>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 8008594:	2c01      	cmp	r4, #1
 8008596:	d03f      	beq.n	8008618 <BSP_JOY_Init+0xe8>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8008598:	2c02      	cmp	r4, #2
 800859a:	d040      	beq.n	800861e <BSP_JOY_Init+0xee>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 800859c:	2c03      	cmp	r4, #3
 800859e:	d041      	beq.n	8008624 <BSP_JOY_Init+0xf4>
            JOY1_UP_GPIO_CLK_ENABLE();
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	9b07      	ldr	r3, [sp, #28]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 80085a4:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80085a8:	a908      	add	r1, sp, #32
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 80085aa:	9308      	str	r3, [sp, #32]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80085ac:	4b20      	ldr	r3, [pc, #128]	; (8008630 <BSP_JOY_Init+0x100>)
        gpio_init_structure.Pull = GPIO_PULLUP;
 80085ae:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
        if (JoyMode == JOY_MODE_GPIO)
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	d106      	bne.n	80085c6 <BSP_JOY_Init+0x96>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80085b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80085bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80085c0:	f004 fce8 	bl	800cf94 <HAL_GPIO_Init>
 80085c4:	e7d2      	b.n	800856c <BSP_JOY_Init+0x3c>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80085c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80085ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80085ce:	f004 fce1 	bl	800cf94 <HAL_GPIO_Init>
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 80085d2:	4b18      	ldr	r3, [pc, #96]	; (8008634 <BSP_JOY_Init+0x104>)
 80085d4:	4a18      	ldr	r2, [pc, #96]	; (8008638 <BSP_JOY_Init+0x108>)
 80085d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085da:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80085de:	4618      	mov	r0, r3
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	f004 fcd1 	bl	800cf88 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 80085e6:	9b01      	ldr	r3, [sp, #4]
 80085e8:	4a14      	ldr	r2, [pc, #80]	; (800863c <BSP_JOY_Init+0x10c>)
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80085f2:	f004 fcc1 	bl	800cf78 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 80085f6:	4912      	ldr	r1, [pc, #72]	; (8008640 <BSP_JOY_Init+0x110>)
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <BSP_JOY_Init+0x114>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	f931 0014 	ldrsh.w	r0, [r1, r4, lsl #1]
 8008600:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008604:	9001      	str	r0, [sp, #4]
 8008606:	f001 ffdb 	bl	800a5c0 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 800860a:	9801      	ldr	r0, [sp, #4]
 800860c:	f002 f812 	bl	800a634 <HAL_NVIC_EnableIRQ>
 8008610:	e7ac      	b.n	800856c <BSP_JOY_Init+0x3c>
          JOY1_SEL_GPIO_CLK_ENABLE();
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	e7c5      	b.n	80085a4 <BSP_JOY_Init+0x74>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	e7c2      	b.n	80085a4 <BSP_JOY_Init+0x74>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 800861e:	9305      	str	r3, [sp, #20]
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	e7bf      	b.n	80085a4 <BSP_JOY_Init+0x74>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 8008624:	9306      	str	r3, [sp, #24]
 8008626:	9b06      	ldr	r3, [sp, #24]
 8008628:	e7bc      	b.n	80085a4 <BSP_JOY_Init+0x74>
 800862a:	bf00      	nop
 800862c:	58024400 	.word	0x58024400
 8008630:	08046680 	.word	0x08046680
 8008634:	240046a8 	.word	0x240046a8
 8008638:	08046694 	.word	0x08046694
 800863c:	080466a8 	.word	0x080466a8
 8008640:	08046668 	.word	0x08046668
 8008644:	08046654 	.word	0x08046654
 8008648:	240046a4 	.word	0x240046a4
 800864c:	08046674 	.word	0x08046674
 8008650:	11310000 	.word	0x11310000

08008654 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 8008654:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008656:	4d21      	ldr	r5, [pc, #132]	; (80086dc <BSP_JOY_GetState+0x88>)
 8008658:	fab0 f480 	clz	r4, r0
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	0964      	lsrs	r4, r4, #5
    {
      if(JOY == JOY1)
 8008660:	07db      	lsls	r3, r3, #31
 8008662:	d500      	bpl.n	8008666 <BSP_JOY_GetState+0x12>
 8008664:	b98c      	cbnz	r4, 800868a <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008666:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008668:	0798      	lsls	r0, r3, #30
 800866a:	d500      	bpl.n	800866e <BSP_JOY_GetState+0x1a>
 800866c:	b9ac      	cbnz	r4, 800869a <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800866e:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008670:	0759      	lsls	r1, r3, #29
 8008672:	d500      	bpl.n	8008676 <BSP_JOY_GetState+0x22>
 8008674:	b9cc      	cbnz	r4, 80086aa <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008676:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008678:	071a      	lsls	r2, r3, #28
 800867a:	d500      	bpl.n	800867e <BSP_JOY_GetState+0x2a>
 800867c:	b9ec      	cbnz	r4, 80086ba <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800867e:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008680:	06db      	lsls	r3, r3, #27
 8008682:	d500      	bpl.n	8008686 <BSP_JOY_GetState+0x32>
 8008684:	bb0c      	cbnz	r4, 80086ca <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 8008686:	2000      	movs	r0, #0

}
 8008688:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800868a:	2104      	movs	r1, #4
 800868c:	4814      	ldr	r0, [pc, #80]	; (80086e0 <BSP_JOY_GetState+0x8c>)
 800868e:	f004 fe6d 	bl	800d36c <HAL_GPIO_ReadPin>
 8008692:	2801      	cmp	r0, #1
 8008694:	d0e7      	beq.n	8008666 <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 8008696:	2001      	movs	r0, #1
}
 8008698:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800869a:	2108      	movs	r1, #8
 800869c:	4810      	ldr	r0, [pc, #64]	; (80086e0 <BSP_JOY_GetState+0x8c>)
 800869e:	f004 fe65 	bl	800d36c <HAL_GPIO_ReadPin>
 80086a2:	2801      	cmp	r0, #1
 80086a4:	d0e3      	beq.n	800866e <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 80086a6:	2002      	movs	r0, #2
}
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 80086aa:	2110      	movs	r1, #16
 80086ac:	480c      	ldr	r0, [pc, #48]	; (80086e0 <BSP_JOY_GetState+0x8c>)
 80086ae:	f004 fe5d 	bl	800d36c <HAL_GPIO_ReadPin>
 80086b2:	2801      	cmp	r0, #1
 80086b4:	d0df      	beq.n	8008676 <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 80086b6:	2004      	movs	r0, #4
}
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 80086ba:	2120      	movs	r1, #32
 80086bc:	4808      	ldr	r0, [pc, #32]	; (80086e0 <BSP_JOY_GetState+0x8c>)
 80086be:	f004 fe55 	bl	800d36c <HAL_GPIO_ReadPin>
 80086c2:	2801      	cmp	r0, #1
 80086c4:	d0db      	beq.n	800867e <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 80086c6:	2008      	movs	r0, #8
}
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 80086ca:	2140      	movs	r1, #64	; 0x40
 80086cc:	4804      	ldr	r0, [pc, #16]	; (80086e0 <BSP_JOY_GetState+0x8c>)
 80086ce:	f004 fe4d 	bl	800d36c <HAL_GPIO_ReadPin>
 80086d2:	2801      	cmp	r0, #1
 80086d4:	d0d7      	beq.n	8008686 <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 80086d6:	2010      	movs	r0, #16
}
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	bf00      	nop
 80086dc:	240046a4 	.word	0x240046a4
 80086e0:	58022800 	.word	0x58022800

080086e4 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop

080086e8 <JOY1_UP_EXTI_Callback>:
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_UP);
 80086e8:	2110      	movs	r1, #16
 80086ea:	2000      	movs	r0, #0
{
 80086ec:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 80086ee:	f7ff fff9 	bl	80086e4 <BSP_JOY_Callback>
}
 80086f2:	bd08      	pop	{r3, pc}

080086f4 <JOY1_RIGHT_EXTI_Callback>:
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 80086f4:	2108      	movs	r1, #8
 80086f6:	2000      	movs	r0, #0
{
 80086f8:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 80086fa:	f7ff fff3 	bl	80086e4 <BSP_JOY_Callback>
}
 80086fe:	bd08      	pop	{r3, pc}

08008700 <JOY1_LEFT_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8008700:	2104      	movs	r1, #4
 8008702:	2000      	movs	r0, #0
{
 8008704:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8008706:	f7ff ffed 	bl	80086e4 <BSP_JOY_Callback>
}
 800870a:	bd08      	pop	{r3, pc}

0800870c <JOY1_DOWN_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 800870c:	2102      	movs	r1, #2
 800870e:	2000      	movs	r0, #0
{
 8008710:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8008712:	f7ff ffe7 	bl	80086e4 <BSP_JOY_Callback>
}
 8008716:	bd08      	pop	{r3, pc}

08008718 <JOY1_SEL_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8008718:	2101      	movs	r1, #1
 800871a:	2000      	movs	r0, #0
{
 800871c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 800871e:	f7ff ffe1 	bl	80086e4 <BSP_JOY_Callback>
}
 8008722:	bd08      	pop	{r3, pc}

08008724 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8008724:	4a10      	ldr	r2, [pc, #64]	; (8008768 <BSP_I2C4_DeInit+0x44>)
{
 8008726:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8008728:	6813      	ldr	r3, [r2, #0]
 800872a:	3b01      	subs	r3, #1
 800872c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800872e:	b10b      	cbz	r3, 8008734 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8008730:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8008732:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8008734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008738:	480c      	ldr	r0, [pc, #48]	; (800876c <BSP_I2C4_DeInit+0x48>)
 800873a:	f004 fd49 	bl	800d1d0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800873e:	480b      	ldr	r0, [pc, #44]	; (800876c <BSP_I2C4_DeInit+0x48>)
 8008740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008744:	f004 fd44 	bl	800d1d0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8008748:	4a09      	ldr	r2, [pc, #36]	; (8008770 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800874a:	480a      	ldr	r0, [pc, #40]	; (8008774 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800874c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8008750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008754:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008758:	f004 ff24 	bl	800d5a4 <HAL_I2C_DeInit>
 800875c:	2800      	cmp	r0, #0
 800875e:	d0e7      	beq.n	8008730 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8008760:	f06f 0007 	mvn.w	r0, #7
}
 8008764:	bd08      	pop	{r3, pc}
 8008766:	bf00      	nop
 8008768:	240046d0 	.word	0x240046d0
 800876c:	58020c00 	.word	0x58020c00
 8008770:	58024400 	.word	0x58024400
 8008774:	24006314 	.word	0x24006314

08008778 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8008778:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800877a:	2201      	movs	r2, #1
{
 800877c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800877e:	6041      	str	r1, [r0, #4]
{
 8008780:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008782:	6203      	str	r3, [r0, #32]
  hI2c->Init.OwnAddress1      = 0;
 8008784:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8008788:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800878c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8008790:	f004 feb2 	bl	800d4f8 <HAL_I2C_Init>
 8008794:	b108      	cbz	r0, 800879a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8008796:	2001      	movs	r0, #1
}
 8008798:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800879a:	4601      	mov	r1, r0
 800879c:	4620      	mov	r0, r4
 800879e:	f005 f98f 	bl	800dac0 <HAL_I2CEx_ConfigAnalogFilter>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d1f7      	bne.n	8008796 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80087a6:	4601      	mov	r1, r0
 80087a8:	4620      	mov	r0, r4
 80087aa:	f005 f9b5 	bl	800db18 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80087ae:	3800      	subs	r0, #0
 80087b0:	bf18      	it	ne
 80087b2:	2001      	movne	r0, #1
}
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	bf00      	nop

080087b8 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 80087b8:	4b95      	ldr	r3, [pc, #596]	; (8008a10 <BSP_I2C4_Init+0x258>)
  hbus_i2c4.Instance = BUS_I2C4;
 80087ba:	4896      	ldr	r0, [pc, #600]	; (8008a14 <BSP_I2C4_Init+0x25c>)
  if (I2c4InitCounter == 0U)
 80087bc:	681a      	ldr	r2, [r3, #0]
{
 80087be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c2:	b09d      	sub	sp, #116	; 0x74
  if (I2c4InitCounter == 0U)
 80087c4:	4611      	mov	r1, r2
 80087c6:	9200      	str	r2, [sp, #0]
  hbus_i2c4.Instance = BUS_I2C4;
 80087c8:	4a93      	ldr	r2, [pc, #588]	; (8008a18 <BSP_I2C4_Init+0x260>)
 80087ca:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 80087cc:	b119      	cbz	r1, 80087d6 <BSP_I2C4_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 80087ce:	2000      	movs	r0, #0
}
 80087d0:	b01d      	add	sp, #116	; 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80087da:	f005 f96b 	bl	800dab4 <HAL_I2C_GetState>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1f5      	bne.n	80087ce <BSP_I2C4_Init+0x16>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80087e2:	4c8e      	ldr	r4, [pc, #568]	; (8008a1c <BSP_I2C4_Init+0x264>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80087e4:	2600      	movs	r6, #0
 80087e6:	2702      	movs	r7, #2
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80087e8:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80087ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80087ee:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80087f2:	f04f 0912 	mov.w	r9, #18
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80087f6:	a916      	add	r1, sp, #88	; 0x58
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80087f8:	f043 0308 	orr.w	r3, r3, #8
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80087fc:	4888      	ldr	r0, [pc, #544]	; (8008a20 <BSP_I2C4_Init+0x268>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80087fe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008802:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	9313      	str	r3, [sp, #76]	; 0x4c
 800880c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800880e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008812:	f043 0308 	orr.w	r3, r3, #8
 8008816:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800881a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800881e:	951a      	str	r5, [sp, #104]	; 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	9314      	str	r3, [sp, #80]	; 0x50
 8008826:	9b14      	ldr	r3, [sp, #80]	; 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008828:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 800882c:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8008830:	f004 fbb0 	bl	800cf94 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8008834:	2312      	movs	r3, #18
 8008836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800883a:	a916      	add	r1, sp, #88	; 0x58
 800883c:	4878      	ldr	r0, [pc, #480]	; (8008a20 <BSP_I2C4_Init+0x268>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800883e:	951a      	str	r5, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8008840:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008844:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8008848:	f004 fba4 	bl	800cf94 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800884c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8008858:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800885c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008860:	9315      	str	r3, [sp, #84]	; 0x54
 8008862:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_FORCE_RESET();
 8008864:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8008870:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008878:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800887c:	f006 faee 	bl	800ee5c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8008880:	2800      	cmp	r0, #0
 8008882:	f000 81bf 	beq.w	8008c04 <BSP_I2C4_Init+0x44c>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008886:	4b67      	ldr	r3, [pc, #412]	; (8008a24 <BSP_I2C4_Init+0x26c>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8008888:	f06f 011d 	mvn.w	r1, #29
 800888c:	4c66      	ldr	r4, [pc, #408]	; (8008a28 <BSP_I2C4_Init+0x270>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800888e:	f640 12f6 	movw	r2, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008892:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008896:	f8dd e000 	ldr.w	lr, [sp]
 800889a:	6825      	ldr	r5, [r4, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800889c:	2610      	movs	r6, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800889e:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8008a2c <BSP_I2C4_Init+0x274>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80088a2:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80088a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80088aa:	4604      	mov	r4, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80088ac:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80088b0:	4681      	mov	r9, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80088b2:	1acb      	subs	r3, r1, r3
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80088b4:	9002      	str	r0, [sp, #8]
  if (tsdadel_min <= 0)
 80088b6:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80088ba:	0062      	lsls	r2, r4, #1
 80088bc:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80088c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80088c4:	9211      	str	r2, [sp, #68]	; 0x44
 80088c6:	462b      	mov	r3, r5
 80088c8:	4654      	mov	r4, sl
 80088ca:	4672      	mov	r2, lr
 80088cc:	9010      	str	r0, [sp, #64]	; 0x40
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80088ce:	9001      	str	r0, [sp, #4]
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80088d0:	2100      	movs	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80088d2:	ebb4 0f49 	cmp.w	r4, r9, lsl #1
 80088d6:	eb09 0549 	add.w	r5, r9, r9, lsl #1
 80088da:	4648      	mov	r0, r9
 80088dc:	bf94      	ite	ls
 80088de:	f04f 0801 	movls.w	r8, #1
 80088e2:	4688      	movhi	r8, r1
 80088e4:	ebbb 0f49 	cmp.w	fp, r9, lsl #1
 80088e8:	46ae      	mov	lr, r5
 80088ea:	f008 0701 	and.w	r7, r8, #1
 80088ee:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 80088f2:	bf38      	it	cc
 80088f4:	2700      	movcc	r7, #0
 80088f6:	42ac      	cmp	r4, r5
 80088f8:	bf8c      	ite	hi
 80088fa:	2500      	movhi	r5, #0
 80088fc:	2501      	movls	r5, #1
 80088fe:	45f3      	cmp	fp, lr
 8008900:	9703      	str	r7, [sp, #12]
 8008902:	bf38      	it	cc
 8008904:	2500      	movcc	r5, #0
 8008906:	ebb4 0f89 	cmp.w	r4, r9, lsl #2
 800890a:	bf94      	ite	ls
 800890c:	f04f 0801 	movls.w	r8, #1
 8008910:	4688      	movhi	r8, r1
 8008912:	ebbb 0f89 	cmp.w	fp, r9, lsl #2
 8008916:	9504      	str	r5, [sp, #16]
 8008918:	f008 0701 	and.w	r7, r8, #1
 800891c:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 8008920:	bf38      	it	cc
 8008922:	2700      	movcc	r7, #0
 8008924:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
 8008928:	4544      	cmp	r4, r8
 800892a:	9705      	str	r7, [sp, #20]
 800892c:	bf8c      	ite	hi
 800892e:	2700      	movhi	r7, #0
 8008930:	2701      	movls	r7, #1
 8008932:	45c3      	cmp	fp, r8
 8008934:	bf38      	it	cc
 8008936:	2700      	movcc	r7, #0
 8008938:	ebb4 0f4e 	cmp.w	r4, lr, lsl #1
 800893c:	9706      	str	r7, [sp, #24]
 800893e:	eb09 0748 	add.w	r7, r9, r8, lsl #1
 8008942:	970b      	str	r7, [sp, #44]	; 0x2c
 8008944:	bf94      	ite	ls
 8008946:	2701      	movls	r7, #1
 8008948:	460f      	movhi	r7, r1
 800894a:	ebbb 0f4e 	cmp.w	fp, lr, lsl #1
 800894e:	9707      	str	r7, [sp, #28]
 8008950:	eb09 078e 	add.w	r7, r9, lr, lsl #2
 8008954:	970c      	str	r7, [sp, #48]	; 0x30
 8008956:	9f07      	ldr	r7, [sp, #28]
 8008958:	f007 0701 	and.w	r7, r7, #1
 800895c:	bf38      	it	cc
 800895e:	2700      	movcc	r7, #0
 8008960:	4554      	cmp	r4, sl
 8008962:	9707      	str	r7, [sp, #28]
 8008964:	bf8c      	ite	hi
 8008966:	2700      	movhi	r7, #0
 8008968:	2701      	movls	r7, #1
 800896a:	45d3      	cmp	fp, sl
 800896c:	bf38      	it	cc
 800896e:	2700      	movcc	r7, #0
 8008970:	ebb4 0fc9 	cmp.w	r4, r9, lsl #3
 8008974:	9708      	str	r7, [sp, #32]
 8008976:	bf94      	ite	ls
 8008978:	2701      	movls	r7, #1
 800897a:	460f      	movhi	r7, r1
 800897c:	ebbb 0fc9 	cmp.w	fp, r9, lsl #3
 8008980:	f007 0701 	and.w	r7, r7, #1
 8008984:	bf38      	it	cc
 8008986:	2700      	movcc	r7, #0
 8008988:	42ac      	cmp	r4, r5
 800898a:	9709      	str	r7, [sp, #36]	; 0x24
 800898c:	bf8c      	ite	hi
 800898e:	2700      	movhi	r7, #0
 8008990:	2701      	movls	r7, #1
 8008992:	45ab      	cmp	fp, r5
 8008994:	bf38      	it	cc
 8008996:	2700      	movcc	r7, #0
 8008998:	ebb4 0f48 	cmp.w	r4, r8, lsl #1
 800899c:	463d      	mov	r5, r7
 800899e:	970a      	str	r7, [sp, #40]	; 0x28
 80089a0:	bf98      	it	ls
 80089a2:	2501      	movls	r5, #1
 80089a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80089a6:	bf88      	it	hi
 80089a8:	460d      	movhi	r5, r1
 80089aa:	ebbb 0f48 	cmp.w	fp, r8, lsl #1
 80089ae:	f005 0501 	and.w	r5, r5, #1
 80089b2:	bf38      	it	cc
 80089b4:	2500      	movcc	r5, #0
 80089b6:	42bc      	cmp	r4, r7
 80089b8:	950d      	str	r5, [sp, #52]	; 0x34
 80089ba:	463d      	mov	r5, r7
 80089bc:	bf8c      	ite	hi
 80089be:	2500      	movhi	r5, #0
 80089c0:	2501      	movls	r5, #1
 80089c2:	45bb      	cmp	fp, r7
 80089c4:	bf38      	it	cc
 80089c6:	2500      	movcc	r5, #0
 80089c8:	ebb4 0f8e 	cmp.w	r4, lr, lsl #2
 80089cc:	950b      	str	r5, [sp, #44]	; 0x2c
 80089ce:	bf94      	ite	ls
 80089d0:	2501      	movls	r5, #1
 80089d2:	460d      	movhi	r5, r1
 80089d4:	ebbb 0f8e 	cmp.w	fp, lr, lsl #2
 80089d8:	f005 0501 	and.w	r5, r5, #1
 80089dc:	bf38      	it	cc
 80089de:	2500      	movcc	r5, #0
 80089e0:	950e      	str	r5, [sp, #56]	; 0x38
 80089e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089e4:	42ac      	cmp	r4, r5
 80089e6:	462f      	mov	r7, r5
 80089e8:	bf8c      	ite	hi
 80089ea:	2700      	movhi	r7, #0
 80089ec:	2701      	movls	r7, #1
 80089ee:	45ab      	cmp	fp, r5
 80089f0:	bf38      	it	cc
 80089f2:	2700      	movcc	r7, #0
 80089f4:	ebb4 0f4a 	cmp.w	r4, sl, lsl #1
 80089f8:	bf94      	ite	ls
 80089fa:	2501      	movls	r5, #1
 80089fc:	460d      	movhi	r5, r1
 80089fe:	ebbb 0f4a 	cmp.w	fp, sl, lsl #1
 8008a02:	970c      	str	r7, [sp, #48]	; 0x30
 8008a04:	f005 0501 	and.w	r5, r5, #1
 8008a08:	bf38      	it	cc
 8008a0a:	2500      	movcc	r5, #0
 8008a0c:	950f      	str	r5, [sp, #60]	; 0x3c
 8008a0e:	e013      	b.n	8008a38 <BSP_I2C4_Init+0x280>
 8008a10:	240046d0 	.word	0x240046d0
 8008a14:	24006314 	.word	0x24006314
 8008a18:	58001c00 	.word	0x58001c00
 8008a1c:	58024400 	.word	0x58024400
 8008a20:	58020c00 	.word	0x58020c00
 8008a24:	3b9aca00 	.word	0x3b9aca00
 8008a28:	240050d4 	.word	0x240050d4
 8008a2c:	240046d4 	.word	0x240046d4
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008a30:	2910      	cmp	r1, #16
 8008a32:	4448      	add	r0, r9
 8008a34:	f000 822b 	beq.w	8008e8e <BSP_I2C4_Init+0x6d6>
      if (tscldel >= (uint32_t)tscldel_min)
 8008a38:	f240 3779 	movw	r7, #889	; 0x379
 8008a3c:	460d      	mov	r5, r1
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8008a3e:	3101      	adds	r1, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8008a40:	42b8      	cmp	r0, r7
 8008a42:	d9f5      	bls.n	8008a30 <BSP_I2C4_Init+0x278>
            if(presc != prev_presc)
 8008a44:	2c00      	cmp	r4, #0
 8008a46:	f040 80e7 	bne.w	8008c18 <BSP_I2C4_Init+0x460>
 8008a4a:	4296      	cmp	r6, r2
 8008a4c:	f000 80e4 	beq.w	8008c18 <BSP_I2C4_Init+0x460>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a50:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008a54:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a56:	f04f 0a00 	mov.w	sl, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a5a:	4666      	mov	r6, ip
 8008a5c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a60:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a62:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a66:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a6a:	f200 819c 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008a6e:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008a70:	4296      	cmp	r6, r2
 8008a72:	d013      	beq.n	8008a9c <BSP_I2C4_Init+0x2e4>
 8008a74:	9f03      	ldr	r7, [sp, #12]
 8008a76:	2f00      	cmp	r7, #0
 8008a78:	f000 80ef 	beq.w	8008c5a <BSP_I2C4_Init+0x4a2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a7c:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008a80:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a82:	f04f 0a02 	mov.w	sl, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a86:	4666      	mov	r6, ip
 8008a88:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a8c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a8e:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a92:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a96:	f200 8186 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008a9a:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008a9c:	42b2      	cmp	r2, r6
 8008a9e:	f000 815e 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
 8008aa2:	9f05      	ldr	r7, [sp, #20]
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	f000 80ef 	beq.w	8008c88 <BSP_I2C4_Init+0x4d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008aaa:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008aae:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008ab0:	f04f 0a04 	mov.w	sl, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ab4:	4666      	mov	r6, ip
 8008ab6:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008aba:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008abc:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008ac0:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008ac4:	f200 816f 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008ac8:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008aca:	42b2      	cmp	r2, r6
 8008acc:	f000 8147 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
 8008ad0:	9f07      	ldr	r7, [sp, #28]
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	f000 80ed 	beq.w	8008cb2 <BSP_I2C4_Init+0x4fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ad8:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008adc:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008ade:	f04f 0a06 	mov.w	sl, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ae2:	4666      	mov	r6, ip
 8008ae4:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008ae8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008aea:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008aee:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008af2:	f200 8158 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008af6:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008af8:	42b2      	cmp	r2, r6
 8008afa:	f000 8130 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
 8008afe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b00:	2f00      	cmp	r7, #0
 8008b02:	f000 80eb 	beq.w	8008cdc <BSP_I2C4_Init+0x524>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b06:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008b0a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b0c:	f04f 0a08 	mov.w	sl, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b10:	4666      	mov	r6, ip
 8008b12:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b16:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b18:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b1c:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b20:	f200 8141 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008b24:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008b26:	42b2      	cmp	r2, r6
 8008b28:	f000 8119 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
 8008b2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	f000 80e9 	beq.w	8008d06 <BSP_I2C4_Init+0x54e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b34:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008b38:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b3a:	270a      	movs	r7, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b3c:	4666      	mov	r6, ip
 8008b3e:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b42:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b44:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008b48:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b4c:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b50:	f200 8129 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008b54:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008b56:	42b2      	cmp	r2, r6
 8008b58:	f000 8101 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
 8008b5c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008b5e:	2f00      	cmp	r7, #0
 8008b60:	f000 80e7 	beq.w	8008d32 <BSP_I2C4_Init+0x57a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b64:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008b68:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b6a:	270c      	movs	r7, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b6c:	4666      	mov	r6, ip
 8008b6e:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b72:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b74:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008b78:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b7c:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b80:	f200 8111 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008b84:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008b86:	42b2      	cmp	r2, r6
 8008b88:	f000 80e9 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
 8008b8c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008b8e:	2f00      	cmp	r7, #0
 8008b90:	f000 80e5 	beq.w	8008d5e <BSP_I2C4_Init+0x5a6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b94:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008b98:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b9a:	4666      	mov	r6, ip
 8008b9c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008ba0:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ba2:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008ba6:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008baa:	f04f 050e 	mov.w	r5, #14
 8008bae:	f8ce 5008 	str.w	r5, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008bb2:	f200 80f8 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008bb6:	4616      	mov	r6, r2
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8008bb8:	e73a      	b.n	8008a30 <BSP_I2C4_Init+0x278>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	f10e 0e14 	add.w	lr, lr, #20
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	f040 810c 	bne.w	8008de4 <BSP_I2C4_Init+0x62c>
        if (idx < I2C_VALID_TIMING_NBR)
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd0:	d818      	bhi.n	8008c04 <BSP_I2C4_Init+0x44c>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bd8:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8008bdc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8008be0:	6862      	ldr	r2, [r4, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8008be2:	7c23      	ldrb	r3, [r4, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8008be4:	0510      	lsls	r0, r2, #20
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8008be6:	68a1      	ldr	r1, [r4, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008be8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8008bec:	68e2      	ldr	r2, [r4, #12]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8008bee:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8008bf2:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8008bf4:	0212      	lsls	r2, r2, #8
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008bf6:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8008bf8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8008bfc:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008c04:	9900      	ldr	r1, [sp, #0]
 8008c06:	48ab      	ldr	r0, [pc, #684]	; (8008eb4 <BSP_I2C4_Init+0x6fc>)
 8008c08:	f7ff fdb6 	bl	8008778 <MX_I2C4_Init>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f43f adde 	beq.w	80087ce <BSP_I2C4_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 8008c12:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8008c16:	e5db      	b.n	80087d0 <BSP_I2C4_Init+0x18>
            if(presc != prev_presc)
 8008c18:	454c      	cmp	r4, r9
 8008c1a:	bf8c      	ite	hi
 8008c1c:	f04f 0e00 	movhi.w	lr, #0
 8008c20:	f04f 0e01 	movls.w	lr, #1
 8008c24:	45cb      	cmp	fp, r9
 8008c26:	bf38      	it	cc
 8008c28:	f04f 0e00 	movcc.w	lr, #0
 8008c2c:	f1be 0f00 	cmp.w	lr, #0
 8008c30:	f43f af1e 	beq.w	8008a70 <BSP_I2C4_Init+0x2b8>
 8008c34:	4296      	cmp	r6, r2
 8008c36:	f43f af31 	beq.w	8008a9c <BSP_I2C4_Init+0x2e4>
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008c3a:	f04f 0a01 	mov.w	sl, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c3e:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 8008c42:	4666      	mov	r6, ip
              I2c_valid_timing_nbr ++;
 8008c44:	4453      	add	r3, sl
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c46:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
 8008c4a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008c4e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008c50:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008c54:	f200 80a7 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008c58:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008c5a:	4296      	cmp	r6, r2
 8008c5c:	f43f af1e 	beq.w	8008a9c <BSP_I2C4_Init+0x2e4>
 8008c60:	9f04      	ldr	r7, [sp, #16]
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	f43f af1a 	beq.w	8008a9c <BSP_I2C4_Init+0x2e4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c68:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008c6c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008c6e:	f04f 0a03 	mov.w	sl, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c72:	4666      	mov	r6, ip
 8008c74:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008c78:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c7a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008c7e:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008c82:	f200 8090 	bhi.w	8008da6 <BSP_I2C4_Init+0x5ee>
 8008c86:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008c88:	42b2      	cmp	r2, r6
 8008c8a:	d068      	beq.n	8008d5e <BSP_I2C4_Init+0x5a6>
 8008c8c:	9f06      	ldr	r7, [sp, #24]
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	f43f af1b 	beq.w	8008aca <BSP_I2C4_Init+0x312>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c94:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008c98:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008c9a:	f04f 0a05 	mov.w	sl, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008c9e:	4666      	mov	r6, ip
 8008ca0:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008ca4:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ca6:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008caa:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008cae:	d87a      	bhi.n	8008da6 <BSP_I2C4_Init+0x5ee>
 8008cb0:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008cb2:	42b2      	cmp	r2, r6
 8008cb4:	d053      	beq.n	8008d5e <BSP_I2C4_Init+0x5a6>
 8008cb6:	9f08      	ldr	r7, [sp, #32]
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	f43f af1d 	beq.w	8008af8 <BSP_I2C4_Init+0x340>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008cbe:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008cc2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008cc4:	f04f 0a07 	mov.w	sl, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008cc8:	4666      	mov	r6, ip
 8008cca:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008cce:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008cd0:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008cd4:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008cd8:	d865      	bhi.n	8008da6 <BSP_I2C4_Init+0x5ee>
 8008cda:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008cdc:	42b2      	cmp	r2, r6
 8008cde:	d03e      	beq.n	8008d5e <BSP_I2C4_Init+0x5a6>
 8008ce0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008ce2:	2f00      	cmp	r7, #0
 8008ce4:	f43f af1f 	beq.w	8008b26 <BSP_I2C4_Init+0x36e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ce8:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008cec:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008cee:	f04f 0a09 	mov.w	sl, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008cf2:	4666      	mov	r6, ip
 8008cf4:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008cf8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008cfa:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008cfe:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008d02:	d850      	bhi.n	8008da6 <BSP_I2C4_Init+0x5ee>
 8008d04:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008d06:	42b2      	cmp	r2, r6
 8008d08:	d029      	beq.n	8008d5e <BSP_I2C4_Init+0x5a6>
 8008d0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	f43f af22 	beq.w	8008b56 <BSP_I2C4_Init+0x39e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d12:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008d16:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008d18:	270b      	movs	r7, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d1a:	4666      	mov	r6, ip
 8008d1c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008d20:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d22:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008d26:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008d2a:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008d2e:	d83a      	bhi.n	8008da6 <BSP_I2C4_Init+0x5ee>
 8008d30:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008d32:	42b2      	cmp	r2, r6
 8008d34:	d013      	beq.n	8008d5e <BSP_I2C4_Init+0x5a6>
 8008d36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008d38:	2f00      	cmp	r7, #0
 8008d3a:	f43f af24 	beq.w	8008b86 <BSP_I2C4_Init+0x3ce>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d3e:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008d42:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008d44:	270d      	movs	r7, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d46:	4666      	mov	r6, ip
 8008d48:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008d4c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d4e:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008d52:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008d56:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008d5a:	d824      	bhi.n	8008da6 <BSP_I2C4_Init+0x5ee>
 8008d5c:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8008d5e:	9f01      	ldr	r7, [sp, #4]
 8008d60:	42bc      	cmp	r4, r7
 8008d62:	46be      	mov	lr, r7
 8008d64:	bf8c      	ite	hi
 8008d66:	f04f 0e00 	movhi.w	lr, #0
 8008d6a:	f04f 0e01 	movls.w	lr, #1
 8008d6e:	45bb      	cmp	fp, r7
 8008d70:	bf38      	it	cc
 8008d72:	f04f 0e00 	movcc.w	lr, #0
 8008d76:	f1be 0f00 	cmp.w	lr, #0
 8008d7a:	f43f ae59 	beq.w	8008a30 <BSP_I2C4_Init+0x278>
 8008d7e:	42b2      	cmp	r2, r6
 8008d80:	f43f ae56 	beq.w	8008a30 <BSP_I2C4_Init+0x278>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d84:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8008d88:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d8a:	4666      	mov	r6, ip
 8008d8c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008d90:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008d92:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008d96:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008d9a:	f04f 050f 	mov.w	r5, #15
 8008d9e:	f8ce 5008 	str.w	r5, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008da2:	f67f af08 	bls.w	8008bb6 <BSP_I2C4_Init+0x3fe>
 8008da6:	4a44      	ldr	r2, [pc, #272]	; (8008eb8 <BSP_I2C4_Init+0x700>)
 8008da8:	9307      	str	r3, [sp, #28]
 8008daa:	960b      	str	r6, [sp, #44]	; 0x2c
 8008dac:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008db0:	f241 200c 	movw	r0, #4620	; 0x120c
 8008db4:	f640 739f 	movw	r3, #3999	; 0xf9f
 8008db8:	4c40      	ldr	r4, [pc, #256]	; (8008ebc <BSP_I2C4_Init+0x704>)
 8008dba:	4611      	mov	r1, r2
 8008dbc:	f8df e100 	ldr.w	lr, [pc, #256]	; 8008ec0 <BSP_I2C4_Init+0x708>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008dc0:	f242 7b10 	movw	fp, #10000	; 0x2710
 8008dc4:	3132      	adds	r1, #50	; 0x32
 8008dc6:	9108      	str	r1, [sp, #32]
 8008dc8:	1a81      	subs	r1, r0, r2
 8008dca:	9109      	str	r1, [sp, #36]	; 0x24
 8008dcc:	9902      	ldr	r1, [sp, #8]
 8008dce:	428b      	cmp	r3, r1
 8008dd0:	bf38      	it	cc
 8008dd2:	460b      	movcc	r3, r1
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	1913      	adds	r3, r2, r4
 8008dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295
 8008de2:	9303      	str	r3, [sp, #12]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8008de4:	9b02      	ldr	r3, [sp, #8]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8008de6:	2400      	movs	r4, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8008de8:	f8de 0000 	ldr.w	r0, [lr]
 8008dec:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8008df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df2:	1a1f      	subs	r7, r3, r0
 8008df4:	9b08      	ldr	r3, [sp, #32]
 8008df6:	181a      	adds	r2, r3, r0
 8008df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfa:	007f      	lsls	r7, r7, #1
 8008dfc:	4403      	add	r3, r0
 8008dfe:	9306      	str	r3, [sp, #24]
 8008e00:	e006      	b.n	8008e10 <BSP_I2C4_Init+0x658>
 8008e02:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8008e06:	4402      	add	r2, r0
 8008e08:	eba7 0700 	sub.w	r7, r7, r0
 8008e0c:	f43f aed5 	beq.w	8008bba <BSP_I2C4_Init+0x402>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8008e10:	f241 235c 	movw	r3, #4700	; 0x125c
 8008e14:	46a0      	mov	r8, r4
 8008e16:	f1a2 0532 	sub.w	r5, r2, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008e1a:	3401      	adds	r4, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d9f0      	bls.n	8008e02 <BSP_I2C4_Init+0x64a>
 8008e20:	9b02      	ldr	r3, [sp, #8]
 8008e22:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 8008e26:	d2ec      	bcs.n	8008e02 <BSP_I2C4_Init+0x64a>
 8008e28:	f242 4c4a 	movw	ip, #9290	; 0x244a
 8008e2c:	9b06      	ldr	r3, [sp, #24]
 8008e2e:	463e      	mov	r6, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008e30:	2100      	movs	r1, #0
 8008e32:	4413      	add	r3, r2
 8008e34:	ebac 0c05 	sub.w	ip, ip, r5
 8008e38:	4692      	mov	sl, r2
 8008e3a:	9405      	str	r4, [sp, #20]
 8008e3c:	e005      	b.n	8008e4a <BSP_I2C4_Init+0x692>
 8008e3e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008e42:	eba6 0600 	sub.w	r6, r6, r0
 8008e46:	4403      	add	r3, r0
 8008e48:	d01e      	beq.n	8008e88 <BSP_I2C4_Init+0x6d0>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8008e4a:	eb0c 0503 	add.w	r5, ip, r3
 8008e4e:	9c04      	ldr	r4, [sp, #16]
 8008e50:	460a      	mov	r2, r1
 8008e52:	f203 6983 	addw	r9, r3, #1667	; 0x683
 8008e56:	42a5      	cmp	r5, r4
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8008e58:	f101 0101 	add.w	r1, r1, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8008e5c:	d9ef      	bls.n	8008e3e <BSP_I2C4_Init+0x686>
 8008e5e:	f241 0447 	movw	r4, #4167	; 0x1047
 8008e62:	45a1      	cmp	r9, r4
 8008e64:	d8eb      	bhi.n	8008e3e <BSP_I2C4_Init+0x686>
            if (error < 0)
 8008e66:	ea33 0523 	bics.w	r5, r3, r3, asr #32
 8008e6a:	bf28      	it	cs
 8008e6c:	4635      	movcs	r5, r6
            if ((uint32_t)error < prev_error)
 8008e6e:	45ab      	cmp	fp, r5
 8008e70:	d9e5      	bls.n	8008e3e <BSP_I2C4_Init+0x686>
              I2c_valid_timing[count].sclh = sclh;
 8008e72:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008e74:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
              I2c_valid_timing[count].sclh = sclh;
 8008e78:	46ab      	mov	fp, r5
 8008e7a:	eba6 0600 	sub.w	r6, r6, r0
 8008e7e:	4403      	add	r3, r0
 8008e80:	9403      	str	r4, [sp, #12]
 8008e82:	e9ce 2803 	strd	r2, r8, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008e86:	d1e0      	bne.n	8008e4a <BSP_I2C4_Init+0x692>
 8008e88:	9c05      	ldr	r4, [sp, #20]
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	e7b9      	b.n	8008e02 <BSP_I2C4_Init+0x64a>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8008e8e:	9902      	ldr	r1, [sp, #8]
 8008e90:	3201      	adds	r2, #1
 8008e92:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e94:	4489      	add	r9, r1
 8008e96:	9901      	ldr	r1, [sp, #4]
 8008e98:	2a10      	cmp	r2, #16
 8008e9a:	4401      	add	r1, r0
 8008e9c:	9101      	str	r1, [sp, #4]
 8008e9e:	f47f ad17 	bne.w	80088d0 <BSP_I2C4_Init+0x118>
 8008ea2:	4a05      	ldr	r2, [pc, #20]	; (8008eb8 <BSP_I2C4_Init+0x700>)
 8008ea4:	9307      	str	r3, [sp, #28]
 8008ea6:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f43f aeab 	beq.w	8008c04 <BSP_I2C4_Init+0x44c>
 8008eae:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <BSP_I2C4_Init+0x708>)
 8008eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eb2:	e77c      	b.n	8008dae <BSP_I2C4_Init+0x5f6>
 8008eb4:	24006314 	.word	0x24006314
 8008eb8:	240050d4 	.word	0x240050d4
 8008ebc:	ffffdbb6 	.word	0xffffdbb6
 8008ec0:	240046d4 	.word	0x240046d4

08008ec4 <BSP_I2C4_WriteReg>:
{
 8008ec4:	b530      	push	{r4, r5, lr}
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008eca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008ece:	4601      	mov	r1, r0
 8008ed0:	9200      	str	r2, [sp, #0]
 8008ed2:	462a      	mov	r2, r5
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <BSP_I2C4_WriteReg+0x38>)
 8008eda:	9402      	str	r4, [sp, #8]
 8008edc:	f004 fb7c 	bl	800d5d8 <HAL_I2C_Mem_Write>
 8008ee0:	b908      	cbnz	r0, 8008ee6 <BSP_I2C4_WriteReg+0x22>
}
 8008ee2:	b005      	add	sp, #20
 8008ee4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008ee6:	4805      	ldr	r0, [pc, #20]	; (8008efc <BSP_I2C4_WriteReg+0x38>)
 8008ee8:	f004 fde8 	bl	800dabc <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008eec:	2804      	cmp	r0, #4
 8008eee:	bf0c      	ite	eq
 8008ef0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008ef4:	f06f 0003 	mvnne.w	r0, #3
 8008ef8:	e7f3      	b.n	8008ee2 <BSP_I2C4_WriteReg+0x1e>
 8008efa:	bf00      	nop
 8008efc:	24006314 	.word	0x24006314

08008f00 <BSP_I2C4_ReadReg>:
{
 8008f00:	b530      	push	{r4, r5, lr}
 8008f02:	460d      	mov	r5, r1
 8008f04:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008f06:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	9200      	str	r2, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	2301      	movs	r3, #1
 8008f14:	4808      	ldr	r0, [pc, #32]	; (8008f38 <BSP_I2C4_ReadReg+0x38>)
 8008f16:	9402      	str	r4, [sp, #8]
 8008f18:	f004 fc8e 	bl	800d838 <HAL_I2C_Mem_Read>
 8008f1c:	b908      	cbnz	r0, 8008f22 <BSP_I2C4_ReadReg+0x22>
}
 8008f1e:	b005      	add	sp, #20
 8008f20:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <BSP_I2C4_ReadReg+0x38>)
 8008f24:	f004 fdca 	bl	800dabc <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008f28:	2804      	cmp	r0, #4
 8008f2a:	bf0c      	ite	eq
 8008f2c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008f30:	f06f 0003 	mvnne.w	r0, #3
 8008f34:	e7f3      	b.n	8008f1e <BSP_I2C4_ReadReg+0x1e>
 8008f36:	bf00      	nop
 8008f38:	24006314 	.word	0x24006314

08008f3c <BSP_I2C4_WriteReg16>:
{
 8008f3c:	b530      	push	{r4, r5, lr}
 8008f3e:	460d      	mov	r5, r1
 8008f40:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008f42:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008f46:	4601      	mov	r1, r0
 8008f48:	9200      	str	r2, [sp, #0]
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	2302      	movs	r3, #2
 8008f50:	4808      	ldr	r0, [pc, #32]	; (8008f74 <BSP_I2C4_WriteReg16+0x38>)
 8008f52:	9402      	str	r4, [sp, #8]
 8008f54:	f004 fb40 	bl	800d5d8 <HAL_I2C_Mem_Write>
 8008f58:	b908      	cbnz	r0, 8008f5e <BSP_I2C4_WriteReg16+0x22>
}
 8008f5a:	b005      	add	sp, #20
 8008f5c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008f5e:	4805      	ldr	r0, [pc, #20]	; (8008f74 <BSP_I2C4_WriteReg16+0x38>)
 8008f60:	f004 fdac 	bl	800dabc <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008f64:	2804      	cmp	r0, #4
 8008f66:	bf0c      	ite	eq
 8008f68:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008f6c:	f06f 0003 	mvnne.w	r0, #3
 8008f70:	e7f3      	b.n	8008f5a <BSP_I2C4_WriteReg16+0x1e>
 8008f72:	bf00      	nop
 8008f74:	24006314 	.word	0x24006314

08008f78 <BSP_I2C4_ReadReg16>:
{
 8008f78:	b530      	push	{r4, r5, lr}
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008f7e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8008f82:	4601      	mov	r1, r0
 8008f84:	9200      	str	r2, [sp, #0]
 8008f86:	462a      	mov	r2, r5
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	4808      	ldr	r0, [pc, #32]	; (8008fb0 <BSP_I2C4_ReadReg16+0x38>)
 8008f8e:	9402      	str	r4, [sp, #8]
 8008f90:	f004 fc52 	bl	800d838 <HAL_I2C_Mem_Read>
 8008f94:	b908      	cbnz	r0, 8008f9a <BSP_I2C4_ReadReg16+0x22>
}
 8008f96:	b005      	add	sp, #20
 8008f98:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008f9a:	4805      	ldr	r0, [pc, #20]	; (8008fb0 <BSP_I2C4_ReadReg16+0x38>)
 8008f9c:	f004 fd8e 	bl	800dabc <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008fa0:	2804      	cmp	r0, #4
 8008fa2:	bf0c      	ite	eq
 8008fa4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008fa8:	f06f 0003 	mvnne.w	r0, #3
 8008fac:	e7f3      	b.n	8008f96 <BSP_I2C4_ReadReg16+0x1e>
 8008fae:	bf00      	nop
 8008fb0:	24006314 	.word	0x24006314

08008fb4 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8008fb4:	f001 baca 	b.w	800a54c <HAL_GetTick>

08008fb8 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 8008fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fbc:	b089      	sub	sp, #36	; 0x24
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d174      	bne.n	80090ac <BSP_CAMERA_DeInit+0xf4>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 8008fc2:	4e3c      	ldr	r6, [pc, #240]	; (80090b4 <BSP_CAMERA_DeInit+0xfc>)
 8008fc4:	6833      	ldr	r3, [r6, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d06d      	beq.n	80090a6 <BSP_CAMERA_DeInit+0xee>
 8008fca:	4f3b      	ldr	r7, [pc, #236]	; (80090b8 <BSP_CAMERA_DeInit+0x100>)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d069      	beq.n	80090a6 <BSP_CAMERA_DeInit+0xee>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 8008fd2:	4c3a      	ldr	r4, [pc, #232]	; (80090bc <BSP_CAMERA_DeInit+0x104>)
 8008fd4:	4b3a      	ldr	r3, [pc, #232]	; (80090c0 <BSP_CAMERA_DeInit+0x108>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8008fd6:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 8008fd8:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8008fda:	f001 fc0f 	bl	800a7fc <HAL_DCMI_Stop>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d15b      	bne.n	800909a <BSP_CAMERA_DeInit+0xe2>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f001 fd26 	bl	800aa34 <HAL_DCMI_DisableCrop>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d156      	bne.n	800909a <BSP_CAMERA_DeInit+0xe2>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 8008fec:	4620      	mov	r0, r4
 8008fee:	f001 fbf9 	bl	800a7e4 <HAL_DCMI_DeInit>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d151      	bne.n	800909a <BSP_CAMERA_DeInit+0xe2>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8008ff6:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 8008ff8:	4d32      	ldr	r5, [pc, #200]	; (80090c4 <BSP_CAMERA_DeInit+0x10c>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8008ffa:	f001 fb29 	bl	800a650 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 8008ffe:	203b      	movs	r0, #59	; 0x3b
 8009000:	f001 fb26 	bl	800a650 <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 8009004:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009006:	f002 f8ab 	bl	800b160 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 800900a:	2150      	movs	r1, #80	; 0x50
 800900c:	482e      	ldr	r0, [pc, #184]	; (80090c8 <BSP_CAMERA_DeInit+0x110>)
 800900e:	f004 f8df 	bl	800d1d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 8009012:	f44f 7160 	mov.w	r1, #896	; 0x380
 8009016:	482d      	ldr	r0, [pc, #180]	; (80090cc <BSP_CAMERA_DeInit+0x114>)
 8009018:	f004 f8da 	bl	800d1d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800901c:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8009020:	482b      	ldr	r0, [pc, #172]	; (80090d0 <BSP_CAMERA_DeInit+0x118>)
 8009022:	f004 f8d5 	bl	800d1d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8009026:	2108      	movs	r1, #8
 8009028:	482a      	ldr	r0, [pc, #168]	; (80090d4 <BSP_CAMERA_DeInit+0x11c>)
 800902a:	f004 f8d1 	bl	800d1d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 800902e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009032:	4829      	ldr	r0, [pc, #164]	; (80090d8 <BSP_CAMERA_DeInit+0x120>)
 8009034:	f004 f8cc 	bl	800d1d0 <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 8009038:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800903c:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4798      	blx	r3
 800904c:	4604      	mov	r4, r0
 800904e:	bb38      	cbnz	r0, 80090a0 <BSP_CAMERA_DeInit+0xe8>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009050:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009054:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8009058:	2701      	movs	r7, #1
 800905a:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800905e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009062:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009066:	a902      	add	r1, sp, #8
 8009068:	481c      	ldr	r0, [pc, #112]	; (80090dc <BSP_CAMERA_DeInit+0x124>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800906a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800906e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8009072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800907a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800907e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009082:	f003 ff87 	bl	800cf94 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8009086:	2201      	movs	r2, #1
 8009088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800908c:	4813      	ldr	r0, [pc, #76]	; (80090dc <BSP_CAMERA_DeInit+0x124>)
 800908e:	f004 f973 	bl	800d378 <HAL_GPIO_WritePin>
}
 8009092:	4620      	mov	r0, r4
 8009094:	b009      	add	sp, #36	; 0x24
 8009096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 800909a:	f06f 0403 	mvn.w	r4, #3
 800909e:	e7f8      	b.n	8009092 <BSP_CAMERA_DeInit+0xda>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80090a0:	f06f 0404 	mvn.w	r4, #4
  return ret;
 80090a4:	e7f5      	b.n	8009092 <BSP_CAMERA_DeInit+0xda>
      ret = BSP_ERROR_NO_INIT;
 80090a6:	f04f 34ff 	mov.w	r4, #4294967295
 80090aa:	e7f2      	b.n	8009092 <BSP_CAMERA_DeInit+0xda>
    ret = BSP_ERROR_WRONG_PARAM;
 80090ac:	f06f 0401 	mvn.w	r4, #1
 80090b0:	e7ef      	b.n	8009092 <BSP_CAMERA_DeInit+0xda>
 80090b2:	bf00      	nop
 80090b4:	24005104 	.word	0x24005104
 80090b8:	24005108 	.word	0x24005108
 80090bc:	24006360 	.word	0x24006360
 80090c0:	48020000 	.word	0x48020000
 80090c4:	58024400 	.word	0x58024400
 80090c8:	58020000 	.word	0x58020000
 80090cc:	58020400 	.word	0x58020400
 80090d0:	58020800 	.word	0x58020800
 80090d4:	58020c00 	.word	0x58020c00
 80090d8:	58021800 	.word	0x58021800
 80090dc:	58022400 	.word	0x58022400

080090e0 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 80090e0:	4a09      	ldr	r2, [pc, #36]	; (8009108 <MX_DCMI_Init+0x28>)
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 80090e2:	2120      	movs	r1, #32
{
 80090e4:	b570      	push	{r4, r5, r6, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 80090e6:	6815      	ldr	r5, [r2, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80090e8:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80090ea:	2200      	movs	r2, #0
  hdcmi->Instance              = DCMI;
 80090ec:	4e07      	ldr	r6, [pc, #28]	; (800910c <MX_DCMI_Init+0x2c>)
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 80090ee:	6081      	str	r1, [r0, #8]
  hdcmi->Instance              = DCMI;
 80090f0:	6006      	str	r6, [r0, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80090f2:	6142      	str	r2, [r0, #20]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 80090f4:	6042      	str	r2, [r0, #4]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80090f6:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80090f8:	e9c0 4503 	strd	r4, r5, [r0, #12]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 80090fc:	f001 fb20 	bl	800a740 <HAL_DCMI_Init>
}
 8009100:	3800      	subs	r0, #0
 8009102:	bf18      	it	ne
 8009104:	2001      	movne	r0, #1
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	2400510c 	.word	0x2400510c
 800910c:	48020000 	.word	0x48020000

08009110 <BSP_CAMERA_Init>:
{
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	b095      	sub	sp, #84	; 0x54
 8009116:	9203      	str	r2, [sp, #12]
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009118:	2800      	cmp	r0, #0
 800911a:	f040 8217 	bne.w	800954c <BSP_CAMERA_Init+0x43c>
  __HAL_RCC_DCMI_CLK_ENABLE();
 800911e:	4dcc      	ldr	r5, [pc, #816]	; (8009450 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009120:	f04f 0a50 	mov.w	sl, #80	; 0x50
 8009124:	f04f 0b02 	mov.w	fp, #2
 8009128:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_DCMI_CLK_ENABLE();
 800912c:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009130:	f04f 0903 	mov.w	r9, #3
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009134:	270d      	movs	r7, #13
 8009136:	4606      	mov	r6, r0
  __HAL_RCC_DCMI_CLK_ENABLE();
 8009138:	f042 0201 	orr.w	r2, r2, #1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800913c:	48c5      	ldr	r0, [pc, #788]	; (8009454 <BSP_CAMERA_Init+0x344>)
 800913e:	460c      	mov	r4, r1
 8009140:	a90e      	add	r1, sp, #56	; 0x38
  __HAL_RCC_DCMI_CLK_ENABLE();
 8009142:	f8c5 20dc 	str.w	r2, [r5, #220]	; 0xdc
 8009146:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
 800914a:	f002 0201 	and.w	r2, r2, #1
 800914e:	9205      	str	r2, [sp, #20]
 8009150:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009152:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8009156:	f042 0202 	orr.w	r2, r2, #2
 800915a:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
 800915e:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8009162:	f002 0202 	and.w	r2, r2, #2
 8009166:	9206      	str	r2, [sp, #24]
 8009168:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800916a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8009176:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 800917a:	f002 0201 	and.w	r2, r2, #1
 800917e:	9207      	str	r2, [sp, #28]
 8009180:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009182:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009186:	f042 0202 	orr.w	r2, r2, #2
 800918a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 800918e:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009192:	f002 0202 	and.w	r2, r2, #2
 8009196:	9208      	str	r2, [sp, #32]
 8009198:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800919a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 800919e:	f042 0204 	orr.w	r2, r2, #4
 80091a2:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 80091a6:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 80091aa:	f002 0204 	and.w	r2, r2, #4
 80091ae:	9209      	str	r2, [sp, #36]	; 0x24
 80091b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091b2:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 80091b6:	f042 0208 	orr.w	r2, r2, #8
 80091ba:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 80091be:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 80091c2:	f002 0208 	and.w	r2, r2, #8
 80091c6:	920a      	str	r2, [sp, #40]	; 0x28
 80091c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80091ca:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 80091ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091d2:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 80091d6:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80091da:	9712      	str	r7, [sp, #72]	; 0x48
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80091dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 80091e0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80091e4:	f44f 7a60 	mov.w	sl, #896	; 0x380
 80091e8:	f04f 0b02 	mov.w	fp, #2
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80091ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80091ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 80091f0:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80091f4:	f003 fece 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 80091f8:	a90e      	add	r1, sp, #56	; 0x38
 80091fa:	4897      	ldr	r0, [pc, #604]	; (8009458 <BSP_CAMERA_Init+0x348>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80091fc:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80091fe:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8009202:	f44f 6a2c 	mov.w	sl, #2752	; 0xac0
 8009206:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800920a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800920e:	f003 fec1 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009212:	a90e      	add	r1, sp, #56	; 0x38
 8009214:	4891      	ldr	r0, [pc, #580]	; (800945c <BSP_CAMERA_Init+0x34c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009216:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8009218:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800921c:	f04f 0a08 	mov.w	sl, #8
 8009220:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8009224:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009228:	f003 feb4 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800922c:	a90e      	add	r1, sp, #56	; 0x38
 800922e:	488c      	ldr	r0, [pc, #560]	; (8009460 <BSP_CAMERA_Init+0x350>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009230:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8009232:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8009236:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800923a:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800923e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009242:	f003 fea7 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009246:	a90e      	add	r1, sp, #56	; 0x38
 8009248:	4886      	ldr	r0, [pc, #536]	; (8009464 <BSP_CAMERA_Init+0x354>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800924a:	9712      	str	r7, [sp, #72]	; 0x48
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800924c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8009250:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009254:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009258:	f003 fe9c 	bl	800cf94 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800925c:	4b82      	ldr	r3, [pc, #520]	; (8009468 <BSP_CAMERA_Init+0x358>)
 800925e:	f04f 0e4b 	mov.w	lr, #75	; 0x4b
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8009262:	f04f 0904 	mov.w	r9, #4
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8009266:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800926a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800926e:	f8c3 e004 	str.w	lr, [r3, #4]
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009272:	f04f 0e03 	mov.w	lr, #3
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8009276:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800927a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800927e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8009494 <BSP_CAMERA_Init+0x384>
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8009282:	61d9      	str	r1, [r3, #28]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009284:	210f      	movs	r1, #15
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8009286:	6218      	str	r0, [r3, #32]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009288:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 800928a:	62de      	str	r6, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800928c:	631e      	str	r6, [r3, #48]	; 0x30
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800928e:	619f      	str	r7, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8009290:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8009294:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009298:	e9c3 9e09 	strd	r9, lr, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 800929c:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8009498 <BSP_CAMERA_Init+0x388>
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80092a0:	e9c3 a204 	strd	sl, r2, [r3, #16]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80092a4:	4632      	mov	r2, r6
  hdma_handler.Instance                 = DMA2_Stream3;
 80092a6:	f8c3 e000 	str.w	lr, [r3]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 80092aa:	e9c3 6602 	strd	r6, r6, [r3, #8]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80092ae:	f001 f987 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80092b2:	204e      	movs	r0, #78	; 0x4e
 80092b4:	f001 f9be 	bl	800a634 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 80092b8:	4632      	mov	r2, r6
 80092ba:	210f      	movs	r1, #15
 80092bc:	203b      	movs	r0, #59	; 0x3b
 80092be:	f001 f97f 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80092c2:	203b      	movs	r0, #59	; 0x3b
 80092c4:	f001 f9b6 	bl	800a634 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 80092c8:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 80092cc:	f001 fcce 	bl	800ac6c <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80092d0:	4640      	mov	r0, r8
 80092d2:	f7ff ff05 	bl	80090e0 <MX_DCMI_Init>
 80092d6:	4682      	mov	sl, r0
 80092d8:	2800      	cmp	r0, #0
 80092da:	f040 80b4 	bne.w	8009446 <BSP_CAMERA_Init+0x336>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80092de:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80092e8:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80092ec:	f440 7c00 	orr.w	ip, r0, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80092f0:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80092f4:	a90e      	add	r1, sp, #56	; 0x38
 80092f6:	485d      	ldr	r0, [pc, #372]	; (800946c <BSP_CAMERA_Init+0x35c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80092f8:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 80092fc:	f8d5 50e0 	ldr.w	r5, [r5, #224]	; 0xe0
  static OV9655_Object_t   OV9655Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009300:	f8df b198 	ldr.w	fp, [pc, #408]	; 800949c <BSP_CAMERA_Init+0x38c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009304:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8009308:	950c      	str	r5, [sp, #48]	; 0x30
 800930a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  IOCtx.Init        = BSP_I2C4_Init;
 800930c:	4d58      	ldr	r5, [pc, #352]	; (8009470 <BSP_CAMERA_Init+0x360>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800930e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009312:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009316:	f003 fe3d 	bl	800cf94 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800931a:	4639      	mov	r1, r7
 800931c:	2201      	movs	r2, #1
 800931e:	4853      	ldr	r0, [pc, #332]	; (800946c <BSP_CAMERA_Init+0x35c>)
 8009320:	f004 f82a 	bl	800d378 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8009324:	2064      	movs	r0, #100	; 0x64
 8009326:	f001 f917 	bl	800a558 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800932a:	4652      	mov	r2, sl
 800932c:	4639      	mov	r1, r7
 800932e:	484f      	ldr	r0, [pc, #316]	; (800946c <BSP_CAMERA_Init+0x35c>)
 8009330:	f004 f822 	bl	800d378 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8009334:	2014      	movs	r0, #20
 8009336:	f001 f90f 	bl	800a558 <HAL_Delay>
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800933a:	4f4e      	ldr	r7, [pc, #312]	; (8009474 <BSP_CAMERA_Init+0x364>)
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800933c:	2160      	movs	r1, #96	; 0x60
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800933e:	4a4e      	ldr	r2, [pc, #312]	; (8009478 <BSP_CAMERA_Init+0x368>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8009340:	4b4e      	ldr	r3, [pc, #312]	; (800947c <BSP_CAMERA_Init+0x36c>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8009342:	4638      	mov	r0, r7
  IOCtx.GetTick     = BSP_GetTick;
 8009344:	f8df a158 	ldr.w	sl, [pc, #344]	; 80094a0 <BSP_CAMERA_Init+0x390>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8009348:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800934c:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800934e:	9212      	str	r2, [sp, #72]	; 0x48
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8009350:	9311      	str	r3, [sp, #68]	; 0x44
  IOCtx.GetTick     = BSP_GetTick;
 8009352:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009356:	e9cd 5b0e 	strd	r5, fp, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800935a:	f7fe fffd 	bl	8008358 <OV9655_RegisterBusIO>
 800935e:	2800      	cmp	r0, #0
 8009360:	f040 80a6 	bne.w	80094b0 <BSP_CAMERA_Init+0x3a0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 8009364:	4d46      	ldr	r5, [pc, #280]	; (8009480 <BSP_CAMERA_Init+0x370>)
 8009366:	4638      	mov	r0, r7
 8009368:	4629      	mov	r1, r5
 800936a:	f7fe ff41 	bl	80081f0 <OV9655_ReadID>
 800936e:	2800      	cmp	r0, #0
 8009370:	f040 809e 	bne.w	80094b0 <BSP_CAMERA_Init+0x3a0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 8009374:	682a      	ldr	r2, [r5, #0]
 8009376:	4b43      	ldr	r3, [pc, #268]	; (8009484 <BSP_CAMERA_Init+0x374>)
 8009378:	4413      	add	r3, r2
 800937a:	2b01      	cmp	r3, #1
 800937c:	f200 8098 	bhi.w	80094b0 <BSP_CAMERA_Init+0x3a0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8009380:	f8df c120 	ldr.w	ip, [pc, #288]	; 80094a4 <BSP_CAMERA_Init+0x394>
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009384:	4638      	mov	r0, r7
      Camera_CompObj = &OV9655Obj;
 8009386:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80094a8 <BSP_CAMERA_Init+0x398>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800938a:	4621      	mov	r1, r4
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800938c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80094ac <BSP_CAMERA_Init+0x39c>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009390:	9a03      	ldr	r2, [sp, #12]
 8009392:	f8dc 3000 	ldr.w	r3, [ip]
      Camera_CompObj = &OV9655Obj;
 8009396:	f8c8 7000 	str.w	r7, [r8]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800939a:	f8c9 c000 	str.w	ip, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800939e:	4798      	blx	r3
 80093a0:	2800      	cmp	r0, #0
 80093a2:	f040 8085 	bne.w	80094b0 <BSP_CAMERA_Init+0x3a0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 80093a6:	f8d9 3000 	ldr.w	r3, [r9]
 80093aa:	f8d8 0000 	ldr.w	r0, [r8]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4935      	ldr	r1, [pc, #212]	; (8009488 <BSP_CAMERA_Init+0x378>)
 80093b2:	4798      	blx	r3
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d17b      	bne.n	80094b0 <BSP_CAMERA_Init+0x3a0>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 80093b8:	682a      	ldr	r2, [r5, #0]
 80093ba:	4b32      	ldr	r3, [pc, #200]	; (8009484 <BSP_CAMERA_Init+0x374>)
 80093bc:	4413      	add	r3, r2
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d839      	bhi.n	8009436 <BSP_CAMERA_Init+0x326>
          if(Resolution == CAMERA_R480x272)
 80093c2:	2c02      	cmp	r4, #2
 80093c4:	f000 80af 	beq.w	8009526 <BSP_CAMERA_Init+0x416>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80093c8:	4b21      	ldr	r3, [pc, #132]	; (8009450 <BSP_CAMERA_Init+0x340>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80093ca:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80093ce:	f04f 0901 	mov.w	r9, #1
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80093d2:	a90e      	add	r1, sp, #56	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80093d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80093d8:	4824      	ldr	r0, [pc, #144]	; (800946c <BSP_CAMERA_Init+0x35c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80093da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80093e2:	2200      	movs	r2, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80093e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ec:	930d      	str	r3, [sp, #52]	; 0x34
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80093ee:	2302      	movs	r3, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80093f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80093f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80093f6:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80093fa:	f003 fdcb 	bl	800cf94 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 80093fe:	2201      	movs	r2, #1
 8009400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009404:	4819      	ldr	r0, [pc, #100]	; (800946c <BSP_CAMERA_Init+0x35c>)
 8009406:	f003 ffb7 	bl	800d378 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800940a:	2064      	movs	r0, #100	; 0x64
 800940c:	f001 f8a4 	bl	800a558 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8009410:	2200      	movs	r2, #0
 8009412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009416:	4815      	ldr	r0, [pc, #84]	; (800946c <BSP_CAMERA_Init+0x35c>)
 8009418:	f003 ffae 	bl	800d378 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800941c:	2014      	movs	r0, #20
 800941e:	f001 f89b 	bl	800a558 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 8009422:	682a      	ldr	r2, [r5, #0]
 8009424:	4b19      	ldr	r3, [pc, #100]	; (800948c <BSP_CAMERA_Init+0x37c>)
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8009426:	2000      	movs	r0, #0
          Camera_Ctx[Instance].Resolution  = Resolution;
 8009428:	e9c3 2400 	strd	r2, r4, [r3]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800942c:	9a03      	ldr	r2, [sp, #12]
 800942e:	609a      	str	r2, [r3, #8]
}
 8009430:	b015      	add	sp, #84	; 0x54
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 8009436:	4b16      	ldr	r3, [pc, #88]	; (8009490 <BSP_CAMERA_Init+0x380>)
 8009438:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800943a:	4816      	ldr	r0, [pc, #88]	; (8009494 <BSP_CAMERA_Init+0x384>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800943c:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800943e:	f7ff fe4f 	bl	80090e0 <MX_DCMI_Init>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0c0      	beq.n	80093c8 <BSP_CAMERA_Init+0x2b8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009446:	f06f 0003 	mvn.w	r0, #3
}
 800944a:	b015      	add	sp, #84	; 0x54
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	58024400 	.word	0x58024400
 8009454:	58020000 	.word	0x58020000
 8009458:	58020400 	.word	0x58020400
 800945c:	58020800 	.word	0x58020800
 8009460:	58020c00 	.word	0x58020c00
 8009464:	58021800 	.word	0x58021800
 8009468:	24005160 	.word	0x24005160
 800946c:	58022400 	.word	0x58022400
 8009470:	080087b9 	.word	0x080087b9
 8009474:	24005138 	.word	0x24005138
 8009478:	08008f01 	.word	0x08008f01
 800947c:	08008ec5 	.word	0x08008ec5
 8009480:	240050d8 	.word	0x240050d8
 8009484:	ffff69aa 	.word	0xffff69aa
 8009488:	240050dc 	.word	0x240050dc
 800948c:	240063b0 	.word	0x240063b0
 8009490:	2400510c 	.word	0x2400510c
 8009494:	24006360 	.word	0x24006360
 8009498:	40020458 	.word	0x40020458
 800949c:	08008725 	.word	0x08008725
 80094a0:	08008fb5 	.word	0x08008fb5
 80094a4:	24002fec 	.word	0x24002fec
 80094a8:	24005104 	.word	0x24005104
 80094ac:	24005108 	.word	0x24005108
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80094b0:	2378      	movs	r3, #120	; 0x78
  IOCtx.Init        = BSP_I2C4_Init;
 80094b2:	4a28      	ldr	r2, [pc, #160]	; (8009554 <BSP_CAMERA_Init+0x444>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80094b4:	4f28      	ldr	r7, [pc, #160]	; (8009558 <BSP_CAMERA_Init+0x448>)
 80094b6:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.Init        = BSP_I2C4_Init;
 80094b8:	920e      	str	r2, [sp, #56]	; 0x38
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 80094ba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80094be:	4638      	mov	r0, r7
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 80094c0:	4a26      	ldr	r2, [pc, #152]	; (800955c <BSP_CAMERA_Init+0x44c>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 80094c2:	4b27      	ldr	r3, [pc, #156]	; (8009560 <BSP_CAMERA_Init+0x450>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80094c4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  IOCtx.GetTick     = BSP_GetTick;
 80094c8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 80094cc:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 80094d0:	f7fe fa58 	bl	8007984 <OV5640_RegisterBusIO>
 80094d4:	bb20      	cbnz	r0, 8009520 <BSP_CAMERA_Init+0x410>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 80094d6:	4d23      	ldr	r5, [pc, #140]	; (8009564 <BSP_CAMERA_Init+0x454>)
 80094d8:	4638      	mov	r0, r7
 80094da:	4629      	mov	r1, r5
 80094dc:	f7fe f81a 	bl	8007514 <OV5640_ReadID>
 80094e0:	b9f0      	cbnz	r0, 8009520 <BSP_CAMERA_Init+0x410>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 80094e2:	682a      	ldr	r2, [r5, #0]
 80094e4:	f245 6340 	movw	r3, #22080	; 0x5640
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d119      	bne.n	8009520 <BSP_CAMERA_Init+0x410>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80094ec:	4b1e      	ldr	r3, [pc, #120]	; (8009568 <BSP_CAMERA_Init+0x458>)
      Camera_CompObj = &OV5640Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80094ee:	4638      	mov	r0, r7
      Camera_CompObj = &OV5640Obj;
 80094f0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009574 <BSP_CAMERA_Init+0x464>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80094f4:	4621      	mov	r1, r4
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 80094f6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8009578 <BSP_CAMERA_Init+0x468>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 80094fa:	9a03      	ldr	r2, [sp, #12]
 80094fc:	f8d3 a000 	ldr.w	sl, [r3]
      Camera_CompObj = &OV5640Obj;
 8009500:	f8c8 7000 	str.w	r7, [r8]
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8009504:	f8c9 3000 	str.w	r3, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8009508:	47d0      	blx	sl
 800950a:	b948      	cbnz	r0, 8009520 <BSP_CAMERA_Init+0x410>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 800950c:	f8d9 3000 	ldr.w	r3, [r9]
 8009510:	f8d8 0000 	ldr.w	r0, [r8]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	4915      	ldr	r1, [pc, #84]	; (800956c <BSP_CAMERA_Init+0x45c>)
 8009518:	4798      	blx	r3
 800951a:	2800      	cmp	r0, #0
 800951c:	f43f af4c 	beq.w	80093b8 <BSP_CAMERA_Init+0x2a8>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009520:	f06f 0006 	mvn.w	r0, #6
 8009524:	e784      	b.n	8009430 <BSP_CAMERA_Init+0x320>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 8009526:	f240 100f 	movw	r0, #271	; 0x10f
 800952a:	f240 33bf 	movw	r3, #959	; 0x3bf
 800952e:	2268      	movs	r2, #104	; 0x68
 8009530:	2150      	movs	r1, #80	; 0x50
 8009532:	9000      	str	r0, [sp, #0]
 8009534:	480e      	ldr	r0, [pc, #56]	; (8009570 <BSP_CAMERA_Init+0x460>)
 8009536:	f001 fa5f 	bl	800a9f8 <HAL_DCMI_ConfigCrop>
 800953a:	2800      	cmp	r0, #0
 800953c:	d183      	bne.n	8009446 <BSP_CAMERA_Init+0x336>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 800953e:	480c      	ldr	r0, [pc, #48]	; (8009570 <BSP_CAMERA_Init+0x460>)
 8009540:	f001 fa92 	bl	800aa68 <HAL_DCMI_EnableCrop>
 8009544:	2800      	cmp	r0, #0
 8009546:	f47f af7e 	bne.w	8009446 <BSP_CAMERA_Init+0x336>
 800954a:	e73d      	b.n	80093c8 <BSP_CAMERA_Init+0x2b8>
    ret = BSP_ERROR_WRONG_PARAM;
 800954c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009550:	e76e      	b.n	8009430 <BSP_CAMERA_Init+0x320>
 8009552:	bf00      	nop
 8009554:	080087b9 	.word	0x080087b9
 8009558:	24005110 	.word	0x24005110
 800955c:	08008f79 	.word	0x08008f79
 8009560:	08008f3d 	.word	0x08008f3d
 8009564:	240050d8 	.word	0x240050d8
 8009568:	24002fa8 	.word	0x24002fa8
 800956c:	240050dc 	.word	0x240050dc
 8009570:	24006360 	.word	0x24006360
 8009574:	24005104 	.word	0x24005104
 8009578:	24005108 	.word	0x24005108

0800957c <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800957c:	b948      	cbnz	r0, 8009592 <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800957e:	4806      	ldr	r0, [pc, #24]	; (8009598 <BSP_CAMERA_Suspend+0x1c>)
{
 8009580:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8009582:	f001 f97d 	bl	800a880 <HAL_DCMI_Suspend>
 8009586:	2800      	cmp	r0, #0
    return BSP_ERROR_PERIPH_FAILURE;
 8009588:	bf0c      	ite	eq
 800958a:	2000      	moveq	r0, #0
 800958c:	f06f 0003 	mvnne.w	r0, #3
}
 8009590:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009592:	f06f 0001 	mvn.w	r0, #1
}
 8009596:	4770      	bx	lr
 8009598:	24006360 	.word	0x24006360

0800959c <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800959c:	b948      	cbnz	r0, 80095b2 <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800959e:	4806      	ldr	r0, [pc, #24]	; (80095b8 <BSP_CAMERA_Resume+0x1c>)
{
 80095a0:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 80095a2:	f001 f9b1 	bl	800a908 <HAL_DCMI_Resume>
 80095a6:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 80095a8:	bf14      	ite	ne
 80095aa:	f06f 0003 	mvnne.w	r0, #3
 80095ae:	2000      	moveq	r0, #0
}
 80095b0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80095b2:	f06f 0001 	mvn.w	r0, #1
}
 80095b6:	4770      	bx	lr
 80095b8:	24006360 	.word	0x24006360

080095bc <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 80095bc:	b988      	cbnz	r0, 80095e2 <BSP_CAMERA_SetBrightness+0x26>
{
 80095be:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Brightness == 0U)
 80095c0:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <BSP_CAMERA_SetBrightness+0x38>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	b183      	cbz	r3, 80095e8 <BSP_CAMERA_SetBrightness+0x2c>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 80095c6:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <BSP_CAMERA_SetBrightness+0x3c>)
 80095c8:	4604      	mov	r4, r0
 80095ca:	4a0c      	ldr	r2, [pc, #48]	; (80095fc <BSP_CAMERA_SetBrightness+0x40>)
 80095cc:	460d      	mov	r5, r1
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6810      	ldr	r0, [r2, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	4798      	blx	r3
 80095d6:	2800      	cmp	r0, #0
 80095d8:	db09      	blt.n	80095ee <BSP_CAMERA_SetBrightness+0x32>
    Camera_Ctx[Instance].Brightness = Brightness;
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 80095dc:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 80095de:	615d      	str	r5, [r3, #20]
}
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80095e2:	f06f 0001 	mvn.w	r0, #1
}
 80095e6:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80095e8:	f06f 000a 	mvn.w	r0, #10
}
 80095ec:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80095ee:	f06f 0004 	mvn.w	r0, #4
}
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	240050dc 	.word	0x240050dc
 80095f8:	24005108 	.word	0x24005108
 80095fc:	24005104 	.word	0x24005104
 8009600:	240063b0 	.word	0x240063b0

08009604 <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 8009604:	b988      	cbnz	r0, 800962a <BSP_CAMERA_SetContrast+0x26>
{
 8009606:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Contrast == 0U)
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <BSP_CAMERA_SetContrast+0x38>)
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	b183      	cbz	r3, 8009630 <BSP_CAMERA_SetContrast+0x2c>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <BSP_CAMERA_SetContrast+0x3c>)
 8009610:	4604      	mov	r4, r0
 8009612:	4a0c      	ldr	r2, [pc, #48]	; (8009644 <BSP_CAMERA_SetContrast+0x40>)
 8009614:	460d      	mov	r5, r1
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6810      	ldr	r0, [r2, #0]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	4798      	blx	r3
 800961e:	2800      	cmp	r0, #0
 8009620:	db09      	blt.n	8009636 <BSP_CAMERA_SetContrast+0x32>
    Camera_Ctx[Instance].Contrast = Contrast;
 8009622:	4b09      	ldr	r3, [pc, #36]	; (8009648 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 8009624:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 8009626:	61dd      	str	r5, [r3, #28]
}
 8009628:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800962a:	f06f 0001 	mvn.w	r0, #1
}
 800962e:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009630:	f06f 000a 	mvn.w	r0, #10
}
 8009634:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009636:	f06f 0004 	mvn.w	r0, #4
}
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	240050dc 	.word	0x240050dc
 8009640:	24005108 	.word	0x24005108
 8009644:	24005104 	.word	0x24005104
 8009648:	240063b0 	.word	0x240063b0

0800964c <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800964c:	b988      	cbnz	r0, 8009672 <BSP_CAMERA_SetMirrorFlip+0x26>
{
 800964e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 8009650:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <BSP_CAMERA_SetMirrorFlip+0x38>)
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	b183      	cbz	r3, 8009678 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 8009658:	4604      	mov	r4, r0
 800965a:	4a0c      	ldr	r2, [pc, #48]	; (800968c <BSP_CAMERA_SetMirrorFlip+0x40>)
 800965c:	460d      	mov	r5, r1
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6810      	ldr	r0, [r2, #0]
 8009662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009664:	4798      	blx	r3
 8009666:	2800      	cmp	r0, #0
 8009668:	db09      	blt.n	800967e <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800966a:	4b09      	ldr	r3, [pc, #36]	; (8009690 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 800966c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800966e:	625d      	str	r5, [r3, #36]	; 0x24
}
 8009670:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009672:	f06f 0001 	mvn.w	r0, #1
}
 8009676:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009678:	f06f 000a 	mvn.w	r0, #10
}
 800967c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800967e:	f06f 0004 	mvn.w	r0, #4
}
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	240050dc 	.word	0x240050dc
 8009688:	24005108 	.word	0x24005108
 800968c:	24005104 	.word	0x24005104
 8009690:	240063b0 	.word	0x240063b0

08009694 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009694:	bb48      	cbnz	r0, 80096ea <BSP_CAMERA_PwrDown+0x56>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009696:	4b16      	ldr	r3, [pc, #88]	; (80096f0 <BSP_CAMERA_PwrDown+0x5c>)
 8009698:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800969c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80096a0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80096a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80096a8:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80096aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80096ae:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 80096b2:	2701      	movs	r7, #1
 80096b4:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80096b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80096bc:	f04f 0902 	mov.w	r9, #2
 80096c0:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80096c2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80096c4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80096c6:	480b      	ldr	r0, [pc, #44]	; (80096f4 <BSP_CAMERA_PwrDown+0x60>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80096c8:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80096ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80096ce:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80096d2:	f003 fc5f 	bl	800cf94 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 80096d6:	2201      	movs	r2, #1
 80096d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80096dc:	4805      	ldr	r0, [pc, #20]	; (80096f4 <BSP_CAMERA_PwrDown+0x60>)
 80096de:	f003 fe4b 	bl	800d378 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80096e2:	4620      	mov	r0, r4
}
 80096e4:	b008      	add	sp, #32
 80096e6:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80096ea:	f06f 0001 	mvn.w	r0, #1
}
 80096ee:	4770      	bx	lr
 80096f0:	58024400 	.word	0x58024400
 80096f4:	58022400 	.word	0x58022400

080096f8 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 80096f8:	4801      	ldr	r0, [pc, #4]	; (8009700 <BSP_CAMERA_IRQHandler+0x8>)
 80096fa:	f001 b92f 	b.w	800a95c <HAL_DCMI_IRQHandler>
 80096fe:	bf00      	nop
 8009700:	24006360 	.word	0x24006360

08009704 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8009704:	4b01      	ldr	r3, [pc, #4]	; (800970c <BSP_CAMERA_DMA_IRQHandler+0x8>)
 8009706:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009708:	f002 ba3e 	b.w	800bb88 <HAL_DMA_IRQHandler>
 800970c:	24006360 	.word	0x24006360

08009710 <BSP_CAMERA_LineEventCallback>:
}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop

08009714 <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 8009714:	2000      	movs	r0, #0
{
 8009716:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 8009718:	f7ff fffa 	bl	8009710 <BSP_CAMERA_LineEventCallback>
}
 800971c:	bd08      	pop	{r3, pc}
 800971e:	bf00      	nop

08009720 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 8009720:	2000      	movs	r0, #0
{
 8009722:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 8009724:	f7f7 ff52 	bl	80015cc <BSP_CAMERA_FrameEventCallback>
}
 8009728:	bd08      	pop	{r3, pc}
 800972a:	bf00      	nop

0800972c <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 800972c:	2000      	movs	r0, #0
{
 800972e:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 8009730:	f7f7 ff68 	bl	8001604 <BSP_CAMERA_VsyncEventCallback>
}
 8009734:	bd08      	pop	{r3, pc}
 8009736:	bf00      	nop

08009738 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 8009738:	2000      	movs	r0, #0
{
 800973a:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 800973c:	f7f7 ff98 	bl	8001670 <BSP_CAMERA_ErrorCallback>
}
 8009740:	bd08      	pop	{r3, pc}
 8009742:	bf00      	nop

08009744 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009744:	b910      	cbnz	r0, 800974c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8009746:	4b03      	ldr	r3, [pc, #12]	; (8009754 <BSP_LCD_SetActiveLayer+0x10>)
 8009748:	6099      	str	r1, [r3, #8]
 800974a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800974c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	2400648c 	.word	0x2400648c

08009758 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009758:	b918      	cbnz	r0, 8009762 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800975a:	4b03      	ldr	r3, [pc, #12]	; (8009768 <BSP_LCD_GetPixelFormat+0x10>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	600b      	str	r3, [r1, #0]
 8009760:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009762:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8009766:	4770      	bx	lr
 8009768:	2400648c 	.word	0x2400648c

0800976c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800976c:	b948      	cbnz	r0, 8009782 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800976e:	4b06      	ldr	r3, [pc, #24]	; (8009788 <BSP_LCD_GetXSize+0x1c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009774:	b11b      	cbz	r3, 800977e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <BSP_LCD_GetXSize+0x20>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	600b      	str	r3, [r1, #0]
 800977c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800977e:	4618      	mov	r0, r3
  }

  return ret;
}
 8009780:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009782:	f06f 0001 	mvn.w	r0, #1
 8009786:	4770      	bx	lr
 8009788:	240051dc 	.word	0x240051dc
 800978c:	2400648c 	.word	0x2400648c

08009790 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009790:	b948      	cbnz	r0, 80097a6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <BSP_LCD_GetYSize+0x1c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009798:	b11b      	cbz	r3, 80097a2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <BSP_LCD_GetYSize+0x20>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	600b      	str	r3, [r1, #0]
 80097a0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80097a2:	4618      	mov	r0, r3
  }

  return ret;
}
 80097a4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80097a6:	f06f 0001 	mvn.w	r0, #1
 80097aa:	4770      	bx	lr
 80097ac:	240051dc 	.word	0x240051dc
 80097b0:	2400648c 	.word	0x2400648c

080097b4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80097b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b8:	e9dd 7408 	ldrd	r7, r4, [sp, #32]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80097bc:	b324      	cbz	r4, 8009808 <BSP_LCD_FillRGBRect+0x54>
 80097be:	b31f      	cbz	r7, 8009808 <BSP_LCD_FillRGBRect+0x54>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80097c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80097c4:	4d1a      	ldr	r5, [pc, #104]	; (8009830 <BSP_LCD_FillRGBRect+0x7c>)
 80097c6:	eb04 0802 	add.w	r8, r4, r2
 80097ca:	440f      	add	r7, r1
 80097cc:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80097d0:	f8df e060 	ldr.w	lr, [pc, #96]	; 8009834 <BSP_LCD_FillRGBRect+0x80>
 80097d4:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
 80097d8:	460c      	mov	r4, r1
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80097da:	68a8      	ldr	r0, [r5, #8]
 80097dc:	f8d3 9000 	ldr.w	r9, [r3]
 80097e0:	fb0c e000 	mla	r0, ip, r0, lr
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80097e4:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80097e8:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80097ea:	b986      	cbnz	r6, 800980e <BSP_LCD_FillRGBRect+0x5a>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80097ec:	682e      	ldr	r6, [r5, #0]
 80097ee:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80097f0:	fb06 4602 	mla	r6, r6, r2, r4
 80097f4:	3401      	adds	r4, #1
 80097f6:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 80097fa:	42bc      	cmp	r4, r7
      pData += Lcd_Ctx[Instance].BppFactor;
 80097fc:	6928      	ldr	r0, [r5, #16]
 80097fe:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8009800:	d1eb      	bne.n	80097da <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
 8009802:	3201      	adds	r2, #1
 8009804:	4542      	cmp	r2, r8
 8009806:	d1e7      	bne.n	80097d8 <BSP_LCD_FillRGBRect+0x24>
}
 8009808:	2000      	movs	r0, #0
 800980a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800980e:	682e      	ldr	r6, [r5, #0]
 8009810:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
 8009814:	fb06 4602 	mla	r6, r6, r2, r4
 8009818:	3401      	adds	r4, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800981a:	6928      	ldr	r0, [r5, #16]
    for(j = 0; j < Width; j++)
 800981c:	42a7      	cmp	r7, r4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800981e:	f829 a016 	strh.w	sl, [r9, r6, lsl #1]
      pData += Lcd_Ctx[Instance].BppFactor;
 8009822:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8009824:	d1d9      	bne.n	80097da <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
 8009826:	3201      	adds	r2, #1
 8009828:	4542      	cmp	r2, r8
 800982a:	d1d5      	bne.n	80097d8 <BSP_LCD_FillRGBRect+0x24>
 800982c:	e7ec      	b.n	8009808 <BSP_LCD_FillRGBRect+0x54>
 800982e:	bf00      	nop
 8009830:	2400648c 	.word	0x2400648c
 8009834:	240063e4 	.word	0x240063e4

08009838 <BSP_LCD_ReadPixel>:
{
 8009838:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800983a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800983e:	4e10      	ldr	r6, [pc, #64]	; (8009880 <BSP_LCD_ReadPixel+0x48>)
 8009840:	4f10      	ldr	r7, [pc, #64]	; (8009884 <BSP_LCD_ReadPixel+0x4c>)
 8009842:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8009846:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800984a:	0080      	lsls	r0, r0, #2
 800984c:	68ac      	ldr	r4, [r5, #8]
 800984e:	fb0c 7404 	mla	r4, ip, r4, r7
 8009852:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8009854:	b94d      	cbnz	r5, 800986a <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009856:	5830      	ldr	r0, [r6, r0]
 8009858:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 800985a:	fb00 1202 	mla	r2, r0, r2, r1
}
 800985e:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009860:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8009864:	bcf0      	pop	{r4, r5, r6, r7}
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800986a:	5835      	ldr	r5, [r6, r0]
 800986c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800986e:	fb05 1202 	mla	r2, r5, r2, r1
 8009872:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8009876:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009878:	b292      	uxth	r2, r2
}
 800987a:	bcf0      	pop	{r4, r5, r6, r7}
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	4770      	bx	lr
 8009880:	2400648c 	.word	0x2400648c
 8009884:	240063e4 	.word	0x240063e4

08009888 <BSP_LCD_WritePixel>:
{
 8009888:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800988a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800988e:	4e0f      	ldr	r6, [pc, #60]	; (80098cc <BSP_LCD_WritePixel+0x44>)
 8009890:	4f0f      	ldr	r7, [pc, #60]	; (80098d0 <BSP_LCD_WritePixel+0x48>)
 8009892:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8009896:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800989a:	0080      	lsls	r0, r0, #2
 800989c:	68ac      	ldr	r4, [r5, #8]
 800989e:	fb0c 7404 	mla	r4, ip, r4, r7
 80098a2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80098a4:	b945      	cbnz	r5, 80098b8 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80098a6:	5830      	ldr	r0, [r6, r0]
 80098a8:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80098aa:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 80098ae:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80098b0:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80098b4:	bcf0      	pop	{r4, r5, r6, r7}
 80098b6:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80098b8:	5835      	ldr	r5, [r6, r0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80098be:	fb05 1202 	mla	r2, r5, r2, r1
}
 80098c2:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80098c4:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80098c8:	2000      	movs	r0, #0
 80098ca:	4770      	bx	lr
 80098cc:	2400648c 	.word	0x2400648c
 80098d0:	240063e4 	.word	0x240063e4

080098d4 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80098d4:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80098d6:	2406      	movs	r4, #6
{
 80098d8:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80098da:	9101      	str	r1, [sp, #4]
 80098dc:	4601      	mov	r1, r0
 80098de:	9202      	str	r2, [sp, #8]
 80098e0:	9400      	str	r4, [sp, #0]
 80098e2:	4805      	ldr	r0, [pc, #20]	; (80098f8 <DSI_IO_Read+0x24>)
 80098e4:	f003 faaa 	bl	800ce3c <HAL_DSI_Read>
 80098e8:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80098ea:	bf14      	ite	ne
 80098ec:	f06f 0007 	mvnne.w	r0, #7
 80098f0:	2000      	moveq	r0, #0
 80098f2:	b004      	add	sp, #16
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	240064a8 	.word	0x240064a8

080098fc <BSP_LCD_DrawBitmap>:
{
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009900:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8009904:	4e4f      	ldr	r6, [pc, #316]	; (8009a44 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009906:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009908:	f04f 0934 	mov.w	r9, #52	; 0x34
 800990c:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8009910:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8009914:	f8df e138 	ldr.w	lr, [pc, #312]	; 8009a50 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009918:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800991a:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800991e:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009922:	68b9      	ldr	r1, [r7, #8]
{
 8009924:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009926:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009928:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800992c:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009930:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8009934:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009938:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800993a:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800993e:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009942:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009946:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009948:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800994c:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8009950:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009954:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009956:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800995a:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800995e:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009962:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009964:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8009968:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800996a:	4465      	add	r5, ip
 800996c:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800996e:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009970:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009972:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8009976:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800997a:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800997c:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8009980:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009982:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009986:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 800998c:	d957      	bls.n	8009a3e <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800998e:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8009992:	2c08      	cmp	r4, #8
 8009994:	bf34      	ite	cc
 8009996:	f04f 0b02 	movcc.w	fp, #2
 800999a:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800999e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80099a2:	9c03      	ldr	r4, [sp, #12]
 80099a4:	f10a 35ff 	add.w	r5, sl, #4294967295
 80099a8:	fb04 f909 	mul.w	r9, r4, r9
 80099ac:	fb09 1505 	mla	r5, r9, r5, r1
 80099b0:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 80099b2:	f1ba 0f00 	cmp.w	sl, #0
 80099b6:	d03e      	beq.n	8009a36 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80099b8:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 80099ba:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 80099be:	2700      	movs	r7, #0
 80099c0:	4c21      	ldr	r4, [pc, #132]	; (8009a48 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80099c2:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80099c6:	e006      	b.n	80099d6 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80099c8:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 80099ca:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80099cc:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 80099ce:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80099d0:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 80099d4:	d02f      	beq.n	8009a36 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80099d6:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 80099d8:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80099da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80099de:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80099e2:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 80099e4:	4919      	ldr	r1, [pc, #100]	; (8009a4c <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80099e6:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 80099ea:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80099ee:	bf18      	it	ne
 80099f0:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80099f2:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80099f4:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80099f6:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80099fa:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80099fe:	4812      	ldr	r0, [pc, #72]	; (8009a48 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8009a00:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009a04:	f002 fc20 	bl	800c248 <HAL_DMA2D_Init>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1dd      	bne.n	80099c8 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	480e      	ldr	r0, [pc, #56]	; (8009a48 <BSP_LCD_DrawBitmap+0x14c>)
 8009a10:	f002 fe70 	bl	800c6f4 <HAL_DMA2D_ConfigLayer>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d1d7      	bne.n	80099c8 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8009a18:	2001      	movs	r0, #1
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	4642      	mov	r2, r8
 8009a1e:	4629      	mov	r1, r5
 8009a20:	9000      	str	r0, [sp, #0]
 8009a22:	4809      	ldr	r0, [pc, #36]	; (8009a48 <BSP_LCD_DrawBitmap+0x14c>)
 8009a24:	f002 fcda 	bl	800c3dc <HAL_DMA2D_Start>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d1cd      	bne.n	80099c8 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8009a2c:	2132      	movs	r1, #50	; 0x32
 8009a2e:	4806      	ldr	r0, [pc, #24]	; (8009a48 <BSP_LCD_DrawBitmap+0x14c>)
 8009a30:	f002 fd30 	bl	800c494 <HAL_DMA2D_PollForTransfer>
 8009a34:	e7c8      	b.n	80099c8 <BSP_LCD_DrawBitmap+0xcc>
}
 8009a36:	2000      	movs	r0, #0
 8009a38:	b005      	add	sp, #20
 8009a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8009a3e:	f04f 0b00 	mov.w	fp, #0
 8009a42:	e7ac      	b.n	800999e <BSP_LCD_DrawBitmap+0xa2>
 8009a44:	2400648c 	.word	0x2400648c
 8009a48:	240064c4 	.word	0x240064c4
 8009a4c:	52001000 	.word	0x52001000
 8009a50:	240063e4 	.word	0x240063e4

08009a54 <BSP_LCD_DrawVLine>:
{
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009a58:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b40 <BSP_LCD_DrawVLine+0xec>
{
 8009a5c:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009a5e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
{
 8009a62:	4616      	mov	r6, r2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8009a64:	eb02 0e05 	add.w	lr, r2, r5
{
 8009a68:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009a6a:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8009a6e:	f85c 8023 	ldr.w	r8, [ip, r3, lsl #2]
 8009a72:	00c3      	lsls	r3, r0, #3
 8009a74:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8009b44 <BSP_LCD_DrawVLine+0xf0>
 8009a78:	f04f 0a34 	mov.w	sl, #52	; 0x34
{
 8009a7c:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009a7e:	1a18      	subs	r0, r3, r0
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8009a80:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009a84:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8009a88:	458e      	cmp	lr, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009a8a:	fb0a 9202 	mla	r2, sl, r2, r9
 8009a8e:	f8d4 a010 	ldr.w	sl, [r4, #16]
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8009a92:	bf88      	it	hi
 8009a94:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009a96:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009a9a:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8009a9e:	f108 32ff 	add.w	r2, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009aa2:	2902      	cmp	r1, #2
{
 8009aa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009aa6:	d013      	beq.n	8009ad0 <BSP_LCD_DrawVLine+0x7c>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009aa8:	2100      	movs	r1, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8009aaa:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8009b48 <BSP_LCD_DrawVLine+0xf4>
 8009aae:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8009ab2:	4b22      	ldr	r3, [pc, #136]	; (8009b3c <BSP_LCD_DrawVLine+0xe8>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009ab4:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8009ab6:	f8cb 1008 	str.w	r1, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8009aba:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 8009abe:	e9cb 3c00 	strd	r3, ip, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009ac2:	f002 fbc1 	bl	800c248 <HAL_DMA2D_Init>
 8009ac6:	b310      	cbz	r0, 8009b0e <BSP_LCD_DrawVLine+0xba>
}
 8009ac8:	2000      	movs	r0, #0
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8009ad0:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8009ad4:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8009ad8:	f004 0c1f 	and.w	ip, r4, #31
 8009adc:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 8009ae0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8009ae4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8009ae8:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8009aec:	3421      	adds	r4, #33	; 0x21
 8009aee:	eb0c 130c 	add.w	r3, ip, ip, lsl #4
 8009af2:	3017      	adds	r0, #23
 8009af4:	09a4      	lsrs	r4, r4, #6
 8009af6:	0980      	lsrs	r0, r0, #6
 8009af8:	0224      	lsls	r4, r4, #8
 8009afa:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8009afe:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8009b02:	3317      	adds	r3, #23
 8009b04:	ea44 1493 	orr.w	r4, r4, r3, lsr #6
 8009b08:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
    break;
 8009b0c:	e7cd      	b.n	8009aaa <BSP_LCD_DrawVLine+0x56>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009b0e:	2101      	movs	r1, #1
 8009b10:	4658      	mov	r0, fp
 8009b12:	f002 fdef 	bl	800c6f4 <HAL_DMA2D_ConfigLayer>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1d6      	bne.n	8009ac8 <BSP_LCD_DrawVLine+0x74>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009b1a:	fb06 7208 	mla	r2, r6, r8, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009b1e:	4621      	mov	r1, r4
 8009b20:	2301      	movs	r3, #1
 8009b22:	4658      	mov	r0, fp
 8009b24:	fb0a 9202 	mla	r2, sl, r2, r9
 8009b28:	9500      	str	r5, [sp, #0]
 8009b2a:	f002 fc57 	bl	800c3dc <HAL_DMA2D_Start>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d1ca      	bne.n	8009ac8 <BSP_LCD_DrawVLine+0x74>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8009b32:	4658      	mov	r0, fp
 8009b34:	2119      	movs	r1, #25
 8009b36:	f002 fcad 	bl	800c494 <HAL_DMA2D_PollForTransfer>
 8009b3a:	e7c5      	b.n	8009ac8 <BSP_LCD_DrawVLine+0x74>
 8009b3c:	52001000 	.word	0x52001000
 8009b40:	2400648c 	.word	0x2400648c
 8009b44:	240063e4 	.word	0x240063e4
 8009b48:	240064c4 	.word	0x240064c4

08009b4c <DSI_IO_Write>:
  if(Size <= 1U)
 8009b4c:	2b01      	cmp	r3, #1
{
 8009b4e:	b530      	push	{r4, r5, lr}
 8009b50:	460d      	mov	r5, r1
 8009b52:	b083      	sub	sp, #12
 8009b54:	4601      	mov	r1, r0
  if(Size <= 1U)
 8009b56:	d909      	bls.n	8009b6c <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8009b58:	480a      	ldr	r0, [pc, #40]	; (8009b84 <DSI_IO_Write+0x38>)
 8009b5a:	e9cd 5200 	strd	r5, r2, [sp]
 8009b5e:	2239      	movs	r2, #57	; 0x39
 8009b60:	f003 f8fc 	bl	800cd5c <HAL_DSI_LongWrite>
 8009b64:	b958      	cbnz	r0, 8009b7e <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 8009b66:	2000      	movs	r0, #0
}
 8009b68:	b003      	add	sp, #12
 8009b6a:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8009b6c:	5cd0      	ldrb	r0, [r2, r3]
 8009b6e:	462b      	mov	r3, r5
 8009b70:	2215      	movs	r2, #21
 8009b72:	9000      	str	r0, [sp, #0]
 8009b74:	4803      	ldr	r0, [pc, #12]	; (8009b84 <DSI_IO_Write+0x38>)
 8009b76:	f003 f8c5 	bl	800cd04 <HAL_DSI_ShortWrite>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d0f3      	beq.n	8009b66 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8009b7e:	f06f 0007 	mvn.w	r0, #7
 8009b82:	e7f1      	b.n	8009b68 <DSI_IO_Write+0x1c>
 8009b84:	240064a8 	.word	0x240064a8

08009b88 <BSP_LCD_FillRect>:
{
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009b8c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009b90:	4d30      	ldr	r5, [pc, #192]	; (8009c54 <BSP_LCD_FillRect+0xcc>)
{
 8009b92:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009b94:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8009c60 <BSP_LCD_FillRect+0xd8>
 8009b98:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8009b9c:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 8009ba0:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009ba2:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
 8009ba6:	68a3      	ldr	r3, [r4, #8]
{
 8009ba8:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009baa:	68e1      	ldr	r1, [r4, #12]
{
 8009bac:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009bae:	fb0e c303 	mla	r3, lr, r3, ip
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8009bb2:	eba9 0206 	sub.w	r2, r9, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009bb6:	2902      	cmp	r1, #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009bb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bbc:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
{
 8009bc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009bc2:	d010      	beq.n	8009be6 <BSP_LCD_FillRect+0x5e>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009bc4:	2100      	movs	r1, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8009bc6:	4c24      	ldr	r4, [pc, #144]	; (8009c58 <BSP_LCD_FillRect+0xd0>)
 8009bc8:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8009bcc:	4b23      	ldr	r3, [pc, #140]	; (8009c5c <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009bce:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8009bd0:	60a1      	str	r1, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8009bd2:	60e2      	str	r2, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8009bd4:	e9c4 3c00 	strd	r3, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009bd8:	f002 fb36 	bl	800c248 <HAL_DMA2D_Init>
 8009bdc:	b310      	cbz	r0, 8009c24 <BSP_LCD_FillRect+0x9c>
}
 8009bde:	2000      	movs	r0, #0
 8009be0:	b003      	add	sp, #12
 8009be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8009be6:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8009bea:	f3c5 20c4 	ubfx	r0, r5, #11, #5
 8009bee:	f005 041f 	and.w	r4, r5, #31
 8009bf2:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 8009bf6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8009bfa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8009bfe:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8009c02:	3521      	adds	r5, #33	; 0x21
 8009c04:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8009c08:	3017      	adds	r0, #23
 8009c0a:	09ad      	lsrs	r5, r5, #6
 8009c0c:	0980      	lsrs	r0, r0, #6
 8009c0e:	022d      	lsls	r5, r5, #8
 8009c10:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8009c14:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8009c18:	3317      	adds	r3, #23
 8009c1a:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 8009c1e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8009c22:	e7d0      	b.n	8009bc6 <BSP_LCD_FillRect+0x3e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009c24:	2101      	movs	r1, #1
 8009c26:	4620      	mov	r0, r4
 8009c28:	f002 fd64 	bl	800c6f4 <HAL_DMA2D_ConfigLayer>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d1d6      	bne.n	8009bde <BSP_LCD_FillRect+0x56>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009c30:	990c      	ldr	r1, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009c32:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009c36:	4633      	mov	r3, r6
 8009c38:	4620      	mov	r0, r4
 8009c3a:	9100      	str	r1, [sp, #0]
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	fb0b a202 	mla	r2, fp, r2, sl
 8009c42:	f002 fbcb 	bl	800c3dc <HAL_DMA2D_Start>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d1c9      	bne.n	8009bde <BSP_LCD_FillRect+0x56>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	2119      	movs	r1, #25
 8009c4e:	f002 fc21 	bl	800c494 <HAL_DMA2D_PollForTransfer>
 8009c52:	e7c4      	b.n	8009bde <BSP_LCD_FillRect+0x56>
 8009c54:	2400648c 	.word	0x2400648c
 8009c58:	240064c4 	.word	0x240064c4
 8009c5c:	52001000 	.word	0x52001000
 8009c60:	240063e4 	.word	0x240063e4

08009c64 <BSP_LCD_DrawHLine>:
{
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009c68:	4c36      	ldr	r4, [pc, #216]	; (8009d44 <BSP_LCD_DrawHLine+0xe0>)
{
 8009c6a:	469b      	mov	fp, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009c6c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009c70:	f04f 0934 	mov.w	r9, #52	; 0x34
 8009c74:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8009d50 <BSP_LCD_DrawHLine+0xec>
{
 8009c78:	4617      	mov	r7, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009c7a:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8009c7e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8009c82:	00c3      	lsls	r3, r0, #3
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8009c84:	eb01 0c0b 	add.w	ip, r1, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009c88:	68aa      	ldr	r2, [r5, #8]
{
 8009c8a:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009c8c:	1a18      	subs	r0, r3, r0
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8009c8e:	45e0      	cmp	r8, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009c90:	fb09 e202 	mla	r2, r9, r2, lr
 8009c94:	f8d5 a010 	ldr.w	sl, [r5, #16]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009c98:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8009c9c:	bf38      	it	cc
 8009c9e:	eba8 0b01 	subcc.w	fp, r8, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009ca2:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
{
 8009ca6:	460e      	mov	r6, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009ca8:	68e2      	ldr	r2, [r4, #12]
{
 8009caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009cac:	2a02      	cmp	r2, #2
 8009cae:	d011      	beq.n	8009cd4 <BSP_LCD_DrawHLine+0x70>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009cb0:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8009cb2:	4c25      	ldr	r4, [pc, #148]	; (8009d48 <BSP_LCD_DrawHLine+0xe4>)
 8009cb4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8009cb8:	2100      	movs	r1, #0
  hlcd_dma2d.Instance = DMA2D;
 8009cba:	4b24      	ldr	r3, [pc, #144]	; (8009d4c <BSP_LCD_DrawHLine+0xe8>)
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8009cbc:	e9c4 0201 	strd	r0, r2, [r4, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009cc0:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8009cc2:	60e1      	str	r1, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8009cc4:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009cc6:	f002 fabf 	bl	800c248 <HAL_DMA2D_Init>
 8009cca:	b310      	cbz	r0, 8009d12 <BSP_LCD_DrawHLine+0xae>
}
 8009ccc:	2000      	movs	r0, #0
 8009cce:	b003      	add	sp, #12
 8009cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8009cd4:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8009cd8:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8009cdc:	f005 001f 	and.w	r0, r5, #31
 8009ce0:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 8009ce4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8009ce8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8009cec:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8009cf0:	3521      	adds	r5, #33	; 0x21
 8009cf2:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8009cf6:	3117      	adds	r1, #23
 8009cf8:	09ad      	lsrs	r5, r5, #6
 8009cfa:	0989      	lsrs	r1, r1, #6
 8009cfc:	022d      	lsls	r5, r5, #8
 8009cfe:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8009d02:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8009d06:	3317      	adds	r3, #23
 8009d08:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 8009d0c:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8009d10:	e7cf      	b.n	8009cb2 <BSP_LCD_DrawHLine+0x4e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009d12:	2101      	movs	r1, #1
 8009d14:	4620      	mov	r0, r4
 8009d16:	f002 fced 	bl	800c6f4 <HAL_DMA2D_ConfigLayer>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d1d6      	bne.n	8009ccc <BSP_LCD_DrawHLine+0x68>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009d1e:	fb07 6208 	mla	r2, r7, r8, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009d22:	2601      	movs	r6, #1
 8009d24:	465b      	mov	r3, fp
 8009d26:	4629      	mov	r1, r5
 8009d28:	fb0a 9202 	mla	r2, sl, r2, r9
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	9600      	str	r6, [sp, #0]
 8009d30:	f002 fb54 	bl	800c3dc <HAL_DMA2D_Start>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d1c9      	bne.n	8009ccc <BSP_LCD_DrawHLine+0x68>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8009d38:	4620      	mov	r0, r4
 8009d3a:	2119      	movs	r1, #25
 8009d3c:	f002 fbaa 	bl	800c494 <HAL_DMA2D_PollForTransfer>
 8009d40:	e7c4      	b.n	8009ccc <BSP_LCD_DrawHLine+0x68>
 8009d42:	bf00      	nop
 8009d44:	2400648c 	.word	0x2400648c
 8009d48:	240064c4 	.word	0x240064c4
 8009d4c:	52001000 	.word	0x52001000
 8009d50:	240063e4 	.word	0x240063e4

08009d54 <MX_DSIHOST_DSI_Init>:
{
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdsi->Instance = DSI;
 8009d58:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8009d5c:	b09f      	sub	sp, #124	; 0x7c
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8009d5e:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 8009d60:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8009d64:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8009d66:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8009d6a:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 8009d6e:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8009d70:	60c6      	str	r6, [r0, #12]
{
 8009d72:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8009d74:	4669      	mov	r1, sp
{
 8009d76:	4604      	mov	r4, r0
 8009d78:	4690      	mov	r8, r2
 8009d7a:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8009d7c:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 8009d7e:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLNDIV = 100;
 8009d82:	e9cd bc00 	strd	fp, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8009d86:	f002 fd25 	bl	800c7d4 <HAL_DSI_Init>
 8009d8a:	b118      	cbz	r0, 8009d94 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8009d8c:	4630      	mov	r0, r6
}
 8009d8e:	b01f      	add	sp, #124	; 0x7c
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8009d94:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009d98:	4a22      	ldr	r2, [pc, #136]	; (8009e24 <MX_DSIHOST_DSI_Init+0xd0>)
 8009d9a:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8009d9c:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8009d9e:	fb03 2207 	mla	r2, r3, r7, r2
 8009da2:	4b21      	ldr	r3, [pc, #132]	; (8009e28 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8009da4:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8009da6:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8009da8:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8009dac:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8009db0:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8009db4:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8009db8:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8009dba:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8009dbc:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8009dbe:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8009dc0:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8009dc2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8009dc6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8009dca:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8009dce:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8009dd0:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8009dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8009dd6:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8009dd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8009ddc:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8009dde:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 8009de2:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8009de6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8009dea:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8009dee:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8009df0:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8009df4:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8009df6:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8009dfa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8009dfe:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8009e02:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8009e04:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8009e08:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8009e0c:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8009e10:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8009e14:	f002 fe16 	bl	800ca44 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8009e18:	3800      	subs	r0, #0
 8009e1a:	bf18      	it	ne
 8009e1c:	2001      	movne	r0, #1
}
 8009e1e:	b01f      	add	sp, #124	; 0x7c
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	0042c1d8 	.word	0x0042c1d8
 8009e28:	4c751ce3 	.word	0x4c751ce3

08009e2c <MX_LTDC_Init>:
{
 8009e2c:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 8009e2e:	4d0e      	ldr	r5, [pc, #56]	; (8009e68 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8009e30:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8009e34:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8009e36:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8009e38:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8009e3a:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8009e3c:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8009e3e:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8009e40:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8009e42:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009e44:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8009e46:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8009e48:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8009e4a:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8009e4c:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8009e4e:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8009e50:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 8009e52:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8009e56:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8009e58:	6181      	str	r1, [r0, #24]
}
 8009e5a:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009e5c:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009e60:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8009e64:	f003 be84 	b.w	800db70 <HAL_LTDC_Init>
 8009e68:	50001000 	.word	0x50001000

08009e6c <MX_LTDC_ConfigLayer>:
{
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6e:	4613      	mov	r3, r2
 8009e70:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8009e72:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8009e74:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8009e76:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009e78:	f04f 0c07 	mov.w	ip, #7
  pLayerCfg.Alpha = 255;
 8009e7c:	9405      	str	r4, [sp, #20]
  pLayerCfg.Backcolor.Blue = 0;
 8009e7e:	2500      	movs	r5, #0
  pLayerCfg.WindowY0 = Config->Y0;
 8009e80:	9102      	str	r1, [sp, #8]
  pLayerCfg.Alpha0 = 0;
 8009e82:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009e86:	f8cd c020 	str.w	ip, [sp, #32]
  pLayerCfg.Backcolor.Blue = 0;
 8009e8a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Red = 0;
 8009e8e:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  pLayerCfg.WindowX1 = Config->X1;
 8009e92:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8009e96:	9400      	str	r4, [sp, #0]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8009e98:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8009e9a:	9601      	str	r6, [sp, #4]
  pLayerCfg.WindowY1 = Config->Y1;
 8009e9c:	68de      	ldr	r6, [r3, #12]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8009e9e:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8009ea0:	1a71      	subs	r1, r6, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8009ea2:	9603      	str	r6, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8009ea4:	2600      	movs	r6, #0
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8009ea6:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.FBStartAdress = Config->Address;
 8009ea8:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.Alpha0 = 0;
 8009eac:	e9cd 6706 	strd	r6, r7, [sp, #24]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8009eb0:	9104      	str	r1, [sp, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8009eb2:	4669      	mov	r1, sp
  pLayerCfg.FBStartAdress = Config->Address;
 8009eb4:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8009eb6:	f003 ff35 	bl	800dd24 <HAL_LTDC_ConfigLayer>
}
 8009eba:	b00f      	add	sp, #60	; 0x3c
 8009ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ebe:	bf00      	nop

08009ec0 <MX_LTDC_ClockConfig>:
{
 8009ec0:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8009ec2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8009ec6:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8009ec8:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8009eca:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8009ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8009ed0:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8009ed2:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8009ed4:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8009ed6:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8009ed8:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8009eda:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8009edc:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8009ede:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8009ee2:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8009ee6:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8009eea:	f005 f8f7 	bl	800f0dc <HAL_RCCEx_PeriphCLKConfig>
}
 8009eee:	b031      	add	sp, #196	; 0xc4
 8009ef0:	bd30      	pop	{r4, r5, pc}
 8009ef2:	bf00      	nop

08009ef4 <BSP_LCD_InitEx>:
{
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8009ef8:	2901      	cmp	r1, #1
{
 8009efa:	b095      	sub	sp, #84	; 0x54
 8009efc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8009efe:	f200 814d 	bhi.w	800a19c <BSP_LCD_InitEx+0x2a8>
 8009f02:	f1b0 0b00 	subs.w	fp, r0, #0
 8009f06:	bf18      	it	ne
 8009f08:	f04f 0b01 	movne.w	fp, #1
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f040 8145 	bne.w	800a19c <BSP_LCD_InitEx+0x2a8>
 8009f12:	4689      	mov	r9, r1
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8009f14:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8009f16:	2901      	cmp	r1, #1
 8009f18:	f200 8140 	bhi.w	800a19c <BSP_LCD_InitEx+0x2a8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009f1c:	2a02      	cmp	r2, #2
 8009f1e:	461d      	mov	r5, r3
 8009f20:	f000 810a 	beq.w	800a138 <BSP_LCD_InitEx+0x244>
      Lcd_Ctx[Instance].BppFactor = 4U;
 8009f24:	2004      	movs	r0, #4
      dsi_pixel_format = DSI_RGB888;
 8009f26:	2305      	movs	r3, #5
  LCD_RESET_GPIO_CLK_ENABLE();
 8009f28:	4c9e      	ldr	r4, [pc, #632]	; (800a1a4 <BSP_LCD_InitEx+0x2b0>)
 8009f2a:	4e9f      	ldr	r6, [pc, #636]	; (800a1a8 <BSP_LCD_InitEx+0x2b4>)
 8009f2c:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8009f2e:	2301      	movs	r3, #1
    Lcd_Ctx[Instance].XSize  = Width;
 8009f30:	6035      	str	r5, [r6, #0]
  LCD_RESET_GPIO_CLK_ENABLE();
 8009f32:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8009f36:	6130      	str	r0, [r6, #16]
 8009f38:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8009f3c:	60f2      	str	r2, [r6, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 8009f3e:	6077      	str	r7, [r6, #4]
  LCD_RESET_GPIO_CLK_ENABLE();
 8009f40:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8009f44:	a90e      	add	r1, sp, #56	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 8009f46:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8009f4a:	4898      	ldr	r0, [pc, #608]	; (800a1ac <BSP_LCD_InitEx+0x2b8>)
  LCD_RESET_GPIO_CLK_ENABLE();
 8009f4c:	f002 0240 	and.w	r2, r2, #64	; 0x40
    hlcd_ltdc.Instance = LTDC;
 8009f50:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800a1d8 <BSP_LCD_InitEx+0x2e4>
    hlcd_dsi.Instance = DSI;
 8009f54:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a1dc <BSP_LCD_InitEx+0x2e8>
  LCD_RESET_GPIO_CLK_ENABLE();
 8009f58:	9208      	str	r2, [sp, #32]
 8009f5a:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009f62:	2303      	movs	r3, #3
 8009f64:	2201      	movs	r2, #1
 8009f66:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8009f6a:	f003 f813 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2108      	movs	r1, #8
 8009f72:	488e      	ldr	r0, [pc, #568]	; (800a1ac <BSP_LCD_InitEx+0x2b8>)
 8009f74:	f003 fa00 	bl	800d378 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8009f78:	2014      	movs	r0, #20
 8009f7a:	f000 faed 	bl	800a558 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8009f7e:	2201      	movs	r2, #1
 8009f80:	2108      	movs	r1, #8
 8009f82:	488a      	ldr	r0, [pc, #552]	; (800a1ac <BSP_LCD_InitEx+0x2b8>)
 8009f84:	f003 f9f8 	bl	800d378 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8009f88:	200a      	movs	r0, #10
 8009f8a:	f000 fae5 	bl	800a558 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009f8e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8009f92:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009f94:	a90e      	add	r1, sp, #56	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009f9a:	4885      	ldr	r0, [pc, #532]	; (800a1b0 <BSP_LCD_InitEx+0x2bc>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009f9c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8009fa0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8009fa4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8009fa8:	9206      	str	r2, [sp, #24]
 8009faa:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8009fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009fb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009fbc:	f002 ffea 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009fc6:	487a      	ldr	r0, [pc, #488]	; (800a1b0 <BSP_LCD_InitEx+0x2bc>)
 8009fc8:	f003 f9d6 	bl	800d378 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8009fcc:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009fd0:	2002      	movs	r0, #2
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8009fd2:	2300      	movs	r3, #0
  LCD_TE_GPIO_CLK_ENABLE();
 8009fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8009fd8:	a90e      	add	r1, sp, #56	; 0x38
  LCD_TE_GPIO_CLK_ENABLE();
 8009fda:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8009fde:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009fe2:	9011      	str	r0, [sp, #68]	; 0x44
  LCD_TE_GPIO_CLK_ENABLE();
 8009fe4:	f402 7200 	and.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8009fe8:	4871      	ldr	r0, [pc, #452]	; (800a1b0 <BSP_LCD_InitEx+0x2bc>)
  LCD_TE_GPIO_CLK_ENABLE();
 8009fea:	9207      	str	r2, [sp, #28]
 8009fec:	9a07      	ldr	r2, [sp, #28]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8009fee:	2204      	movs	r2, #4
 8009ff0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8009ff4:	f002 ffce 	bl	800cf94 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	486c      	ldr	r0, [pc, #432]	; (800a1b0 <BSP_LCD_InitEx+0x2bc>)
 8009ffe:	f003 f9bb 	bl	800d378 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800a002:	2200      	movs	r2, #0
 800a004:	210f      	movs	r1, #15
 800a006:	2058      	movs	r0, #88	; 0x58
 800a008:	f000 fada 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800a00c:	2058      	movs	r0, #88	; 0x58
 800a00e:	f000 fb11 	bl	800a634 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800a012:	2200      	movs	r2, #0
 800a014:	210f      	movs	r1, #15
 800a016:	205a      	movs	r0, #90	; 0x5a
 800a018:	f000 fad2 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a01c:	205a      	movs	r0, #90	; 0x5a
 800a01e:	f000 fb09 	bl	800a634 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800a022:	2200      	movs	r2, #0
 800a024:	210f      	movs	r1, #15
 800a026:	207b      	movs	r0, #123	; 0x7b
 800a028:	f000 faca 	bl	800a5c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800a02c:	207b      	movs	r0, #123	; 0x7b
 800a02e:	f000 fb01 	bl	800a634 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a032:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
    hlcd_ltdc.Instance = LTDC;
 800a036:	495f      	ldr	r1, [pc, #380]	; (800a1b4 <BSP_LCD_InitEx+0x2c0>)
    hlcd_dsi.Instance = DSI;
 800a038:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    hlcd_dma2d.Instance = DMA2D;
 800a03c:	4a5e      	ldr	r2, [pc, #376]	; (800a1b8 <BSP_LCD_InitEx+0x2c4>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a03e:	f04c 0c08 	orr.w	ip, ip, #8
    hlcd_ltdc.Instance = LTDC;
 800a042:	f8c8 1000 	str.w	r1, [r8]
    hlcd_dma2d.Instance = DMA2D;
 800a046:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
    hlcd_dsi.Instance = DSI;
 800a04a:	f8ca 0000 	str.w	r0, [sl]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a04e:	4650      	mov	r0, sl
    hlcd_dma2d.Instance = DMA2D;
 800a050:	6011      	str	r1, [r2, #0]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a052:	463a      	mov	r2, r7
 800a054:	9b01      	ldr	r3, [sp, #4]
 800a056:	4629      	mov	r1, r5
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a058:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
 800a05c:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 800a060:	f00c 0c08 	and.w	ip, ip, #8
 800a064:	f8cd c014 	str.w	ip, [sp, #20]
 800a068:	f8dd c014 	ldr.w	ip, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 800a06c:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800a070:	f04c 0c08 	orr.w	ip, ip, #8
 800a074:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800a078:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800a07c:	f02c 0c08 	bic.w	ip, ip, #8
 800a080:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a084:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
 800a088:	f04c 0c10 	orr.w	ip, ip, #16
 800a08c:	f8c4 c0d4 	str.w	ip, [r4, #212]	; 0xd4
 800a090:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
 800a094:	f00c 0c10 	and.w	ip, ip, #16
 800a098:	f8cd c010 	str.w	ip, [sp, #16]
 800a09c:	f8dd c010 	ldr.w	ip, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800a0a0:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 800a0a4:	f04c 0c10 	orr.w	ip, ip, #16
 800a0a8:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800a0ac:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 800a0b0:	f02c 0c10 	bic.w	ip, ip, #16
 800a0b4:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 800a0b8:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 800a0bc:	f04c 0c10 	orr.w	ip, ip, #16
 800a0c0:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
 800a0c4:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 800a0c8:	f00c 0c10 	and.w	ip, ip, #16
 800a0cc:	f8cd c00c 	str.w	ip, [sp, #12]
 800a0d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 800a0d4:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800a0d8:	f04c 0c10 	orr.w	ip, ip, #16
 800a0dc:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800a0e0:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800a0e4:	f02c 0c10 	bic.w	ip, ip, #16
 800a0e8:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a0ec:	f7ff fe32 	bl	8009d54 <MX_DSIHOST_DSI_Init>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d14e      	bne.n	800a192 <BSP_LCD_InitEx+0x29e>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	f7ff fee3 	bl	8009ec0 <MX_LTDC_ClockConfig>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d149      	bne.n	800a192 <BSP_LCD_InitEx+0x29e>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800a0fe:	4629      	mov	r1, r5
 800a100:	463a      	mov	r2, r7
 800a102:	4640      	mov	r0, r8
 800a104:	f7ff fe92 	bl	8009e2c <MX_LTDC_Init>
 800a108:	4601      	mov	r1, r0
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d141      	bne.n	800a192 <BSP_LCD_InitEx+0x29e>
      config.Address     = LCD_LAYER_0_ADDRESS;
 800a10e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800a112:	aa0e      	add	r2, sp, #56	; 0x38
 800a114:	4640      	mov	r0, r8
      config.X1          = Width;
 800a116:	e9cd 150e 	strd	r1, r5, [sp, #56]	; 0x38
      config.Y1          = Height;
 800a11a:	e9cd 1710 	strd	r1, r7, [sp, #64]	; 0x40
      config.Address     = LCD_LAYER_0_ADDRESS;
 800a11e:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800a122:	f7ff fea3 	bl	8009e6c <MX_LTDC_ConfigLayer>
 800a126:	4604      	mov	r4, r0
 800a128:	b150      	cbz	r0, 800a140 <BSP_LCD_InitEx+0x24c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a12a:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800a12e:	2301      	movs	r3, #1
 800a130:	61b3      	str	r3, [r6, #24]
}
 800a132:	b015      	add	sp, #84	; 0x54
 800a134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 800a138:	465b      	mov	r3, fp
      Lcd_Ctx[Instance].BppFactor = 2U;
 800a13a:	4610      	mov	r0, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800a13c:	4693      	mov	fp, r2
 800a13e:	e6f3      	b.n	8009f28 <BSP_LCD_InitEx+0x34>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800a140:	4650      	mov	r0, sl
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a142:	4d1e      	ldr	r5, [pc, #120]	; (800a1bc <BSP_LCD_InitEx+0x2c8>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 800a144:	f002 fdb6 	bl	800ccb4 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800a148:	2104      	movs	r1, #4
 800a14a:	4650      	mov	r0, sl
 800a14c:	f002 fd9e 	bl	800cc8c <HAL_DSI_ConfigFlowControl>
  IOCtx.WriteReg    = DSI_IO_Write;
 800a150:	4b1b      	ldr	r3, [pc, #108]	; (800a1c0 <BSP_LCD_InitEx+0x2cc>)
  IOCtx.GetTick     = BSP_GetTick;
 800a152:	4a1c      	ldr	r2, [pc, #112]	; (800a1c4 <BSP_LCD_InitEx+0x2d0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a154:	4628      	mov	r0, r5
  IOCtx.WriteReg    = DSI_IO_Write;
 800a156:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a158:	a90a      	add	r1, sp, #40	; 0x28
  IOCtx.ReadReg     = DSI_IO_Read;
 800a15a:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <BSP_LCD_InitEx+0x2d4>)
  IOCtx.Address     = 0;
 800a15c:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  IOCtx.GetTick     = BSP_GetTick;
 800a160:	920d      	str	r2, [sp, #52]	; 0x34
  IOCtx.ReadReg     = DSI_IO_Read;
 800a162:	930c      	str	r3, [sp, #48]	; 0x30
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a164:	f7fc fb96 	bl	8006894 <OTM8009A_RegisterBusIO>
 800a168:	b980      	cbnz	r0, 800a18c <BSP_LCD_InitEx+0x298>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800a16a:	4c18      	ldr	r4, [pc, #96]	; (800a1cc <BSP_LCD_InitEx+0x2d8>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800a16c:	4628      	mov	r0, r5
 800a16e:	a909      	add	r1, sp, #36	; 0x24
    Lcd_CompObj = &OTM8009AObj;
 800a170:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800a172:	f7fc fb7b 	bl	800686c <OTM8009A_ReadID>
 800a176:	b948      	cbnz	r0, 800a18c <BSP_LCD_InitEx+0x298>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <BSP_LCD_InitEx+0x2dc>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800a17a:	464a      	mov	r2, r9
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800a17c:	4d15      	ldr	r5, [pc, #84]	; (800a1d4 <BSP_LCD_InitEx+0x2e0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800a17e:	4659      	mov	r1, fp
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800a184:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800a186:	47a0      	blx	r4
 800a188:	2800      	cmp	r0, #0
 800a18a:	d0d0      	beq.n	800a12e <BSP_LCD_InitEx+0x23a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a18c:	f06f 0006 	mvn.w	r0, #6
 800a190:	e7cd      	b.n	800a12e <BSP_LCD_InitEx+0x23a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a192:	f06f 0003 	mvn.w	r0, #3
}
 800a196:	b015      	add	sp, #84	; 0x54
 800a198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a19c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a1a0:	e7c7      	b.n	800a132 <BSP_LCD_InitEx+0x23e>
 800a1a2:	bf00      	nop
 800a1a4:	58024400 	.word	0x58024400
 800a1a8:	2400648c 	.word	0x2400648c
 800a1ac:	58021800 	.word	0x58021800
 800a1b0:	58022400 	.word	0x58022400
 800a1b4:	50001000 	.word	0x50001000
 800a1b8:	240064c4 	.word	0x240064c4
 800a1bc:	240051e0 	.word	0x240051e0
 800a1c0:	08009b4d 	.word	0x08009b4d
 800a1c4:	08008fb5 	.word	0x08008fb5
 800a1c8:	080098d5 	.word	0x080098d5
 800a1cc:	240051d8 	.word	0x240051d8
 800a1d0:	24002f5c 	.word	0x24002f5c
 800a1d4:	240051dc 	.word	0x240051dc
 800a1d8:	240063e4 	.word	0x240063e4
 800a1dc:	240064a8 	.word	0x240064a8

0800a1e0 <BSP_LCD_Init>:
{
 800a1e0:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800a1e2:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800a1e6:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800a1e8:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	9400      	str	r4, [sp, #0]
 800a1f0:	f7ff fe80 	bl	8009ef4 <BSP_LCD_InitEx>
}
 800a1f4:	b002      	add	sp, #8
 800a1f6:	bd10      	pop	{r4, pc}

0800a1f8 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 800a1f8:	b948      	cbnz	r0, 800a20e <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800a1fa:	4806      	ldr	r0, [pc, #24]	; (800a214 <BSP_LCD_ConfigLayer+0x1c>)
{
 800a1fc:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800a1fe:	f7ff fe35 	bl	8009e6c <MX_LTDC_ConfigLayer>
 800a202:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a204:	bf0c      	ite	eq
 800a206:	2000      	moveq	r0, #0
 800a208:	f06f 0003 	mvnne.w	r0, #3
}
 800a20c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a20e:	f06f 0001 	mvn.w	r0, #1
}
 800a212:	4770      	bx	lr
 800a214:	240063e4 	.word	0x240063e4

0800a218 <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 800a218:	b958      	cbnz	r0, 800a232 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800a21a:	4a07      	ldr	r2, [pc, #28]	; (800a238 <BSP_LCD_SetBrightness+0x20>)
{
 800a21c:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <BSP_LCD_SetBrightness+0x24>)
 800a220:	6810      	ldr	r0, [r2, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	4798      	blx	r3
 800a228:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a22a:	bf18      	it	ne
 800a22c:	f06f 0003 	mvnne.w	r0, #3
}
 800a230:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a232:	f06f 0001 	mvn.w	r0, #1
}
 800a236:	4770      	bx	lr
 800a238:	240051d8 	.word	0x240051d8
 800a23c:	240051dc 	.word	0x240051dc

0800a240 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800a240:	b9d0      	cbnz	r0, 800a278 <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800a242:	4810      	ldr	r0, [pc, #64]	; (800a284 <BSP_SD_DeInit+0x44>)
{
 800a244:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800a246:	f006 fbab 	bl	80109a0 <HAL_SD_DeInit>
 800a24a:	4604      	mov	r4, r0
 800a24c:	b9b8      	cbnz	r0, 800a27e <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800a24e:	2031      	movs	r0, #49	; 0x31
 800a250:	f000 f9fe 	bl	800a650 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800a254:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a256:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800a25a:	480c      	ldr	r0, [pc, #48]	; (800a28c <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800a25c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800a260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a264:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a268:	f002 ffb2 	bl	800d1d0 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800a26c:	2104      	movs	r1, #4
 800a26e:	4808      	ldr	r0, [pc, #32]	; (800a290 <BSP_SD_DeInit+0x50>)
 800a270:	f002 ffae 	bl	800d1d0 <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800a274:	4620      	mov	r0, r4
}
 800a276:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a278:	f06f 0001 	mvn.w	r0, #1
}
 800a27c:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a27e:	f06f 0003 	mvn.w	r0, #3
}
 800a282:	bd10      	pop	{r4, pc}
 800a284:	2400652c 	.word	0x2400652c
 800a288:	58024400 	.word	0x58024400
 800a28c:	58020800 	.word	0x58020800
 800a290:	58020c00 	.word	0x58020c00

0800a294 <MX_SDMMC1_SD_Init>:
{
 800a294:	b538      	push	{r3, r4, r5, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a296:	2200      	movs	r2, #0
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800a298:	2104      	movs	r1, #4
  hsd->Instance                 = SDMMC1;
 800a29a:	4d07      	ldr	r5, [pc, #28]	; (800a2b8 <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800a29c:	2402      	movs	r4, #2
  hsd->Instance                 = SDMMC1;
 800a29e:	6005      	str	r5, [r0, #0]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800a2a0:	e9c0 1405 	strd	r1, r4, [r0, #20]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a2a4:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a2a8:	e9c0 2203 	strd	r2, r2, [r0, #12]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800a2ac:	f006 fff4 	bl	8011298 <HAL_SD_Init>
}
 800a2b0:	3800      	subs	r0, #0
 800a2b2:	bf18      	it	ne
 800a2b4:	2001      	movne	r0, #1
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	52007000 	.word	0x52007000

0800a2bc <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f040 8088 	bne.w	800a3d2 <BSP_SD_Init+0x116>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800a2c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2c6:	4846      	ldr	r0, [pc, #280]	; (800a3e0 <BSP_SD_Init+0x124>)
{
 800a2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2cc:	b08d      	sub	sp, #52	; 0x34
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800a2ce:	f003 f84d 	bl	800d36c <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d177      	bne.n	800a3c8 <BSP_SD_Init+0x10c>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a2d8:	4c42      	ldr	r4, [pc, #264]	; (800a3e4 <BSP_SD_Init+0x128>)
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800a2da:	220c      	movs	r2, #12
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a2dc:	f44f 5688 	mov.w	r6, #4352	; 0x1100
 800a2e0:	2702      	movs	r7, #2
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a2e2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a2e6:	f04f 0801 	mov.w	r8, #1
 800a2ea:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a2ee:	a906      	add	r1, sp, #24
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a2f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a2f4:	483c      	ldr	r0, [pc, #240]	; (800a3e8 <BSP_SD_Init+0x12c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a2f6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800a2fa:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800a2fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a306:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a30a:	f043 0302 	orr.w	r3, r3, #2
 800a30e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a312:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	9302      	str	r3, [sp, #8]
 800a31c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a31e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a322:	f043 0304 	orr.w	r3, r3, #4
 800a326:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a32a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a32e:	f003 0304 	and.w	r3, r3, #4
 800a332:	9303      	str	r3, [sp, #12]
 800a334:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a336:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a33a:	f043 0308 	orr.w	r3, r3, #8
 800a33e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a342:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800a346:	920a      	str	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a350:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a354:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a358:	f002 fe1c 	bl	800cf94 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a35c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a35e:	a906      	add	r1, sp, #24
 800a360:	4822      	ldr	r0, [pc, #136]	; (800a3ec <BSP_SD_Init+0x130>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a362:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a364:	f002 fe16 	bl	800cf94 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800a368:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a36c:	f44f 7680 	mov.w	r6, #256	; 0x100
 800a370:	2700      	movs	r7, #0
 800a372:	f04f 0801 	mov.w	r8, #1
  SD_DETECT_GPIO_CLK_ENABLE();
 800a376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a37a:	f04f 0902 	mov.w	r9, #2
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a37e:	a906      	add	r1, sp, #24
 800a380:	4817      	ldr	r0, [pc, #92]	; (800a3e0 <BSP_SD_Init+0x124>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800a382:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a386:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a38a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38e:	9305      	str	r3, [sp, #20]
 800a390:	9b05      	ldr	r3, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a392:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a396:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a39a:	f002 fdfb 	bl	800cf94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800a39e:	462a      	mov	r2, r5
 800a3a0:	210e      	movs	r1, #14
 800a3a2:	2031      	movs	r0, #49	; 0x31
 800a3a4:	f000 f90c 	bl	800a5c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800a3a8:	2031      	movs	r0, #49	; 0x31
 800a3aa:	f000 f943 	bl	800a634 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800a3ae:	4810      	ldr	r0, [pc, #64]	; (800a3f0 <BSP_SD_Init+0x134>)
 800a3b0:	f7ff ff70 	bl	800a294 <MX_SDMMC1_SD_Init>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	b978      	cbnz	r0, 800a3d8 <BSP_SD_Init+0x11c>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800a3b8:	2102      	movs	r1, #2
 800a3ba:	480d      	ldr	r0, [pc, #52]	; (800a3f0 <BSP_SD_Init+0x134>)
 800a3bc:	f006 ffd2 	bl	8011364 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800a3c0:	4620      	mov	r0, r4
}
 800a3c2:	b00d      	add	sp, #52	; 0x34
 800a3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a3c8:	f06f 0006 	mvn.w	r0, #6
}
 800a3cc:	b00d      	add	sp, #52	; 0x34
 800a3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a3d2:	f06f 0001 	mvn.w	r0, #1
}
 800a3d6:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a3d8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a3dc:	e7f1      	b.n	800a3c2 <BSP_SD_Init+0x106>
 800a3de:	bf00      	nop
 800a3e0:	58022000 	.word	0x58022000
 800a3e4:	58024400 	.word	0x58024400
 800a3e8:	58020800 	.word	0x58020800
 800a3ec:	58020c00 	.word	0x58020c00
 800a3f0:	2400652c 	.word	0x2400652c

0800a3f4 <BSP_SD_ReadBlocks>:
{
 800a3f4:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a3f6:	2464      	movs	r4, #100	; 0x64
{
 800a3f8:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a3fa:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800a3fe:	b950      	cbnz	r0, 800a416 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800a400:	4806      	ldr	r0, [pc, #24]	; (800a41c <BSP_SD_ReadBlocks+0x28>)
 800a402:	9400      	str	r4, [sp, #0]
 800a404:	f006 f8c2 	bl	801058c <HAL_SD_ReadBlocks>
 800a408:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a40a:	bf0c      	ite	eq
 800a40c:	2000      	moveq	r0, #0
 800a40e:	f06f 0003 	mvnne.w	r0, #3
}
 800a412:	b002      	add	sp, #8
 800a414:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a416:	f06f 0001 	mvn.w	r0, #1
 800a41a:	e7fa      	b.n	800a412 <BSP_SD_ReadBlocks+0x1e>
 800a41c:	2400652c 	.word	0x2400652c

0800a420 <BSP_SD_WriteBlocks>:
{
 800a420:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a422:	2464      	movs	r4, #100	; 0x64
{
 800a424:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a426:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800a42a:	b950      	cbnz	r0, 800a442 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800a42c:	4806      	ldr	r0, [pc, #24]	; (800a448 <BSP_SD_WriteBlocks+0x28>)
 800a42e:	9400      	str	r4, [sp, #0]
 800a430:	f006 f9ca 	bl	80107c8 <HAL_SD_WriteBlocks>
 800a434:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a436:	bf0c      	ite	eq
 800a438:	2000      	moveq	r0, #0
 800a43a:	f06f 0003 	mvnne.w	r0, #3
}
 800a43e:	b002      	add	sp, #8
 800a440:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a442:	f06f 0001 	mvn.w	r0, #1
 800a446:	e7fa      	b.n	800a43e <BSP_SD_WriteBlocks+0x1e>
 800a448:	2400652c 	.word	0x2400652c

0800a44c <BSP_SD_GetCardState>:
{
 800a44c:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <BSP_SD_GetCardState+0x14>)
 800a450:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800a454:	f007 f8ea 	bl	801162c <HAL_SD_GetCardState>
}
 800a458:	3804      	subs	r0, #4
 800a45a:	bf18      	it	ne
 800a45c:	2001      	movne	r0, #1
 800a45e:	bd08      	pop	{r3, pc}
 800a460:	2400652c 	.word	0x2400652c

0800a464 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800a464:	b948      	cbnz	r0, 800a47a <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800a466:	4806      	ldr	r0, [pc, #24]	; (800a480 <BSP_SD_GetCardInfo+0x1c>)
{
 800a468:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800a46a:	f006 fe5b 	bl	8011124 <HAL_SD_GetCardInfo>
 800a46e:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a470:	bf0c      	ite	eq
 800a472:	2000      	moveq	r0, #0
 800a474:	f06f 0003 	mvnne.w	r0, #3
}
 800a478:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a47a:	f06f 0001 	mvn.w	r0, #1
}
 800a47e:	4770      	bx	lr
 800a480:	2400652c 	.word	0x2400652c

0800a484 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop

0800a488 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <HAL_InitTick+0x40>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	b90b      	cbnz	r3, 800a492 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800a48e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a490:	4770      	bx	lr
{
 800a492:	b510      	push	{r4, lr}
 800a494:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a49a:	4a0c      	ldr	r2, [pc, #48]	; (800a4cc <HAL_InitTick+0x44>)
 800a49c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4a0:	6810      	ldr	r0, [r2, #0]
 800a4a2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a4a6:	f000 f8e7 	bl	800a678 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a4aa:	2c0f      	cmp	r4, #15
 800a4ac:	d800      	bhi.n	800a4b0 <HAL_InitTick+0x28>
 800a4ae:	b108      	cbz	r0, 800a4b4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800a4b0:	2001      	movs	r0, #1
}
 800a4b2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	f000 f880 	bl	800a5c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a4c0:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <HAL_InitTick+0x48>)
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	601c      	str	r4, [r3, #0]
}
 800a4c6:	bd10      	pop	{r4, pc}
 800a4c8:	24003030 	.word	0x24003030
 800a4cc:	24002f54 	.word	0x24002f54
 800a4d0:	24003034 	.word	0x24003034

0800a4d4 <HAL_Init>:
{
 800a4d4:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4d6:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4d8:	4c12      	ldr	r4, [pc, #72]	; (800a524 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4da:	f000 f85d 	bl	800a598 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4de:	4d12      	ldr	r5, [pc, #72]	; (800a528 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4e0:	f004 fa6a 	bl	800e9b8 <HAL_RCC_GetSysClockFreq>
 800a4e4:	4b11      	ldr	r3, [pc, #68]	; (800a52c <HAL_Init+0x58>)
 800a4e6:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a4e8:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4ea:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4ec:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4ee:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4f2:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4f4:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4f6:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4f8:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 800a4fc:	4c0c      	ldr	r4, [pc, #48]	; (800a530 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4fe:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a502:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800a508:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a50a:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a50c:	f7ff ffbc 	bl	800a488 <HAL_InitTick>
 800a510:	b110      	cbz	r0, 800a518 <HAL_Init+0x44>
    return HAL_ERROR;
 800a512:	2401      	movs	r4, #1
}
 800a514:	4620      	mov	r0, r4
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	4604      	mov	r4, r0
  HAL_MspInit();
 800a51a:	f7fb fa09 	bl	8005930 <HAL_MspInit>
}
 800a51e:	4620      	mov	r0, r4
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	bf00      	nop
 800a524:	08045d78 	.word	0x08045d78
 800a528:	24002f58 	.word	0x24002f58
 800a52c:	58024400 	.word	0x58024400
 800a530:	24002f54 	.word	0x24002f54

0800a534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a534:	4a03      	ldr	r2, [pc, #12]	; (800a544 <HAL_IncTick+0x10>)
 800a536:	4b04      	ldr	r3, [pc, #16]	; (800a548 <HAL_IncTick+0x14>)
 800a538:	6811      	ldr	r1, [r2, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	440b      	add	r3, r1
 800a53e:	6013      	str	r3, [r2, #0]
}
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	240065b4 	.word	0x240065b4
 800a548:	24003030 	.word	0x24003030

0800a54c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a54c:	4b01      	ldr	r3, [pc, #4]	; (800a554 <HAL_GetTick+0x8>)
 800a54e:	6818      	ldr	r0, [r3, #0]
}
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	240065b4 	.word	0x240065b4

0800a558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a55c:	f7ff fff6 	bl	800a54c <HAL_GetTick>
 800a560:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a562:	1c63      	adds	r3, r4, #1
 800a564:	d002      	beq.n	800a56c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800a566:	4b04      	ldr	r3, [pc, #16]	; (800a578 <HAL_Delay+0x20>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a56c:	f7ff ffee 	bl	800a54c <HAL_GetTick>
 800a570:	1b43      	subs	r3, r0, r5
 800a572:	42a3      	cmp	r3, r4
 800a574:	d3fa      	bcc.n	800a56c <HAL_Delay+0x14>
  {
  }
}
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	24003030 	.word	0x24003030

0800a57c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a57c:	4b01      	ldr	r3, [pc, #4]	; (800a584 <HAL_GetREVID+0x8>)
 800a57e:	6818      	ldr	r0, [r3, #0]
}
 800a580:	0c00      	lsrs	r0, r0, #16
 800a582:	4770      	bx	lr
 800a584:	5c001000 	.word	0x5c001000

0800a588 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800a588:	4a02      	ldr	r2, [pc, #8]	; (800a594 <HAL_EnableCompensationCell+0xc>)
 800a58a:	6a13      	ldr	r3, [r2, #32]
 800a58c:	f043 0301 	orr.w	r3, r3, #1
 800a590:	6213      	str	r3, [r2, #32]
}
 800a592:	4770      	bx	lr
 800a594:	58000400 	.word	0x58000400

0800a598 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a598:	4907      	ldr	r1, [pc, #28]	; (800a5b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a59a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800a59c:	4b07      	ldr	r3, [pc, #28]	; (800a5bc <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a59e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5a0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5a4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5a6:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800a5aa:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5b0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800a5b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800a5b4:	60cb      	str	r3, [r1, #12]
 800a5b6:	4770      	bx	lr
 800a5b8:	e000ed00 	.word	0xe000ed00
 800a5bc:	05fa0000 	.word	0x05fa0000

0800a5c0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a5c0:	4b19      	ldr	r3, [pc, #100]	; (800a628 <HAL_NVIC_SetPriority+0x68>)
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5c8:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5ca:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5ce:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5d0:	2d04      	cmp	r5, #4
 800a5d2:	bf28      	it	cs
 800a5d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5d6:	2c06      	cmp	r4, #6
 800a5d8:	d919      	bls.n	800a60e <HAL_NVIC_SetPriority+0x4e>
 800a5da:	3b03      	subs	r3, #3
 800a5dc:	f04f 34ff 	mov.w	r4, #4294967295
 800a5e0:	409c      	lsls	r4, r3
 800a5e2:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5e6:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800a5ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5ec:	fa04 f405 	lsl.w	r4, r4, r5
 800a5f0:	ea21 0104 	bic.w	r1, r1, r4
 800a5f4:	fa01 f103 	lsl.w	r1, r1, r3
 800a5f8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800a5fc:	db0a      	blt.n	800a614 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5fe:	0109      	lsls	r1, r1, #4
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <HAL_NVIC_SetPriority+0x6c>)
 800a602:	b2c9      	uxtb	r1, r1
 800a604:	4403      	add	r3, r0
 800a606:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a60a:	bc30      	pop	{r4, r5}
 800a60c:	4770      	bx	lr
 800a60e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a610:	4613      	mov	r3, r2
 800a612:	e7e8      	b.n	800a5e6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a614:	f000 000f 	and.w	r0, r0, #15
 800a618:	0109      	lsls	r1, r1, #4
 800a61a:	4b05      	ldr	r3, [pc, #20]	; (800a630 <HAL_NVIC_SetPriority+0x70>)
 800a61c:	b2c9      	uxtb	r1, r1
 800a61e:	4403      	add	r3, r0
 800a620:	7619      	strb	r1, [r3, #24]
 800a622:	bc30      	pop	{r4, r5}
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	e000ed00 	.word	0xe000ed00
 800a62c:	e000e100 	.word	0xe000e100
 800a630:	e000ecfc 	.word	0xe000ecfc

0800a634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a634:	2800      	cmp	r0, #0
 800a636:	db07      	blt.n	800a648 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a638:	f000 011f 	and.w	r1, r0, #31
 800a63c:	2301      	movs	r3, #1
 800a63e:	0940      	lsrs	r0, r0, #5
 800a640:	4a02      	ldr	r2, [pc, #8]	; (800a64c <HAL_NVIC_EnableIRQ+0x18>)
 800a642:	408b      	lsls	r3, r1
 800a644:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	e000e100 	.word	0xe000e100

0800a650 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a650:	2800      	cmp	r0, #0
 800a652:	db0d      	blt.n	800a670 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a654:	0943      	lsrs	r3, r0, #5
 800a656:	2201      	movs	r2, #1
 800a658:	f000 001f 	and.w	r0, r0, #31
 800a65c:	4905      	ldr	r1, [pc, #20]	; (800a674 <HAL_NVIC_DisableIRQ+0x24>)
 800a65e:	3320      	adds	r3, #32
 800a660:	fa02 f000 	lsl.w	r0, r2, r0
 800a664:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a668:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a66c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	e000e100 	.word	0xe000e100

0800a678 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a678:	3801      	subs	r0, #1
 800a67a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800a67e:	d20d      	bcs.n	800a69c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a682:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a684:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a686:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a688:	25f0      	movs	r5, #240	; 0xf0
 800a68a:	4c06      	ldr	r4, [pc, #24]	; (800a6a4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a68c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a68e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a690:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a696:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800a698:	bc30      	pop	{r4, r5}
 800a69a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800a69c:	2001      	movs	r0, #1
 800a69e:	4770      	bx	lr
 800a6a0:	e000e010 	.word	0xe000e010
 800a6a4:	e000ed00 	.word	0xe000ed00

0800a6a8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800a6a8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a6ac:	4a04      	ldr	r2, [pc, #16]	; (800a6c0 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a6b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a6b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b8:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800a6ba:	6048      	str	r0, [r1, #4]
}
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	e000ed00 	.word	0xe000ed00
 800a6c4:	e000ed90 	.word	0xe000ed90

0800a6c8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a6c8:	4a06      	ldr	r2, [pc, #24]	; (800a6e4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a6ca:	f040 0001 	orr.w	r0, r0, #1
 800a6ce:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <HAL_MPU_Enable+0x20>)
 800a6d0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a6d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a6d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a6da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6de:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a6e2:	4770      	bx	lr
 800a6e4:	e000ed00 	.word	0xe000ed00
 800a6e8:	e000ed90 	.word	0xe000ed90

0800a6ec <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a6ec:	4a12      	ldr	r2, [pc, #72]	; (800a738 <HAL_MPU_ConfigRegion+0x4c>)
 800a6ee:	7843      	ldrb	r3, [r0, #1]
 800a6f0:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800a6f2:	7801      	ldrb	r1, [r0, #0]
 800a6f4:	b1e9      	cbz	r1, 800a732 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800a6f6:	6843      	ldr	r3, [r0, #4]
{
 800a6f8:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800a6fa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a6fc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a6fe:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a700:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a702:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a704:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a706:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a70a:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a70c:	430b      	orrs	r3, r1
 800a70e:	7a01      	ldrb	r1, [r0, #8]
 800a710:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a714:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a716:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a71a:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a71c:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800a720:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a724:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a728:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800a72c:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a72e:	6113      	str	r3, [r2, #16]
}
 800a730:	4770      	bx	lr
    MPU->RBAR = 0x00;
 800a732:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800a734:	6111      	str	r1, [r2, #16]
 800a736:	4770      	bx	lr
 800a738:	e000ed90 	.word	0xe000ed90

0800a73c <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop

0800a740 <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800a740:	2800      	cmp	r0, #0
 800a742:	d048      	beq.n	800a7d6 <HAL_DCMI_Init+0x96>
{
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800a746:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a74a:	4604      	mov	r4, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d03f      	beq.n	800a7d0 <HAL_DCMI_Init+0x90>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a750:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a752:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a754:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d135      	bne.n	800a7c8 <HAL_DCMI_Init+0x88>
 800a75c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a75e:	6861      	ldr	r1, [r4, #4]
 800a760:	6960      	ldr	r0, [r4, #20]
 800a762:	430b      	orrs	r3, r1
 800a764:	6a26      	ldr	r6, [r4, #32]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800a766:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a768:	ea43 0300 	orr.w	r3, r3, r0
 800a76c:	68a0      	ldr	r0, [r4, #8]
 800a76e:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
 800a772:	ea43 0305 	orr.w	r3, r3, r5
 800a776:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a778:	ea43 0302 	orr.w	r3, r3, r2
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a77c:	6822      	ldr	r2, [r4, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a77e:	ea43 0300 	orr.w	r3, r3, r0
 800a782:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a784:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a788:	6816      	ldr	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a78a:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a78e:	4d13      	ldr	r5, [pc, #76]	; (800a7dc <HAL_DCMI_Init+0x9c>)
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a790:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a794:	ea05 0506 	and.w	r5, r5, r6
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a798:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a79a:	6015      	str	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a79c:	ea43 0300 	orr.w	r3, r3, r0
 800a7a0:	6810      	ldr	r0, [r2, #0]
 800a7a2:	ea43 0300 	orr.w	r3, r3, r0
 800a7a6:	ea43 0307 	orr.w	r3, r3, r7
 800a7aa:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800a7ac:	d101      	bne.n	800a7b2 <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800a7ae:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800a7b0:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a7b2:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a7b4:	2100      	movs	r1, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800a7b6:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a7b8:	f043 031e 	orr.w	r3, r3, #30
  return HAL_OK;
 800a7bc:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a7be:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a7c0:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800a7c2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4617      	mov	r7, r2
 800a7cc:	6262      	str	r2, [r4, #36]	; 0x24
 800a7ce:	e7c6      	b.n	800a75e <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800a7d0:	f7ff ffb4 	bl	800a73c <HAL_DCMI_MspInit>
 800a7d4:	e7bc      	b.n	800a750 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 800a7d6:	2001      	movs	r0, #1
}
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	ffe0f007 	.word	0xffe0f007

0800a7e0 <HAL_DCMI_MspDeInit>:
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop

0800a7e4 <HAL_DCMI_DeInit>:
{
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800a7e8:	f7ff fffa 	bl	800a7e0 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	64e0      	str	r0, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800a7f0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800a7f4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	bf00      	nop

0800a7fc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800a7fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a7fe:	4b1e      	ldr	r3, [pc, #120]	; (800a878 <HAL_DCMI_Stop+0x7c>)
 800a800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a804:	491d      	ldr	r1, [pc, #116]	; (800a87c <HAL_DCMI_Stop+0x80>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800a80c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a810:	0a5b      	lsrs	r3, r3, #9
  __HAL_LOCK(hdcmi);
 800a812:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a814:	fb02 f203 	mul.w	r2, r2, r3
  __HAL_LOCK(hdcmi);
 800a818:	d02a      	beq.n	800a870 <HAL_DCMI_Stop+0x74>
 800a81a:	4605      	mov	r5, r0

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a81c:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800a81e:	2001      	movs	r0, #1

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a820:	6829      	ldr	r1, [r5, #0]
  __HAL_LOCK(hdcmi);
 800a822:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a826:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a82a:	680b      	ldr	r3, [r1, #0]
 800a82c:	f023 0301 	bic.w	r3, r3, #1
 800a830:	600b      	str	r3, [r1, #0]
 800a832:	e003      	b.n	800a83c <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800a834:	680b      	ldr	r3, [r1, #0]
 800a836:	f013 0301 	ands.w	r3, r3, #1
 800a83a:	d017      	beq.n	800a86c <HAL_DCMI_Stop+0x70>
    if (count == 0U)
 800a83c:	3a01      	subs	r2, #1
 800a83e:	d1f9      	bne.n	800a834 <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a840:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800a842:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a844:	f043 0320 	orr.w	r3, r3, #32
 800a848:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800a84a:	680b      	ldr	r3, [r1, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800a84c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800a84e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a852:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800a854:	f000 ff4a 	bl	800b6ec <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800a858:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800a85a:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800a85c:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800a85e:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800a860:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800a862:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800a866:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800a86c:	461c      	mov	r4, r3
 800a86e:	e7ec      	b.n	800a84a <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800a870:	2402      	movs	r4, #2
}
 800a872:	4620      	mov	r0, r4
 800a874:	bd38      	pop	{r3, r4, r5, pc}
 800a876:	bf00      	nop
 800a878:	24002f54 	.word	0x24002f54
 800a87c:	10624dd3 	.word	0x10624dd3

0800a880 <HAL_DCMI_Suspend>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a880:	4b1f      	ldr	r3, [pc, #124]	; (800a900 <HAL_DCMI_Suspend+0x80>)
 800a882:	6819      	ldr	r1, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800a884:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d036      	beq.n	800a8fa <HAL_DCMI_Suspend+0x7a>
 800a88c:	4602      	mov	r2, r0
 800a88e:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800a890:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800a894:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d004      	beq.n	800a8a6 <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800a89c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a89e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800a8a0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

  /* Return function status */
  return status;
}
 800a8a4:	4770      	bx	lr
{
 800a8a6:	b430      	push	{r4, r5}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8a8:	6810      	ldr	r0, [r2, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800a8aa:	2405      	movs	r4, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8ac:	4d15      	ldr	r5, [pc, #84]	; (800a904 <HAL_DCMI_Suspend+0x84>)
 800a8ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800a8b2:	f882 4035 	strb.w	r4, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8b6:	fba5 5101 	umull	r5, r1, r5, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8ba:	6804      	ldr	r4, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8bc:	0a49      	lsrs	r1, r1, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8be:	f024 0401 	bic.w	r4, r4, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8c2:	fb03 f301 	mul.w	r3, r3, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8c6:	6004      	str	r4, [r0, #0]
 800a8c8:	e002      	b.n	800a8d0 <HAL_DCMI_Suspend+0x50>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800a8ca:	6801      	ldr	r1, [r0, #0]
 800a8cc:	07c9      	lsls	r1, r1, #31
 800a8ce:	d50e      	bpl.n	800a8ee <HAL_DCMI_Suspend+0x6e>
      if (count == 0U)
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	d1fa      	bne.n	800a8ca <HAL_DCMI_Suspend+0x4a>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a8d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800a8d6:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 800a8d8:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a8da:	f043 0320 	orr.w	r3, r3, #32
 800a8de:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800a8e0:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800a8e2:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800a8e6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800a8ea:	bc30      	pop	{r4, r5}
 800a8ec:	4770      	bx	lr
  __HAL_UNLOCK(hdcmi);
 800a8ee:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a8f0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800a8f2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800a8f6:	bc30      	pop	{r4, r5}
 800a8f8:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800a8fa:	2002      	movs	r0, #2
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	24002f54 	.word	0x24002f54
 800a904:	10624dd3 	.word	0x10624dd3

0800a908 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800a908:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d013      	beq.n	800a938 <HAL_DCMI_Resume+0x30>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800a910:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800a914:	2201      	movs	r2, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800a916:	2b05      	cmp	r3, #5
  __HAL_LOCK(hdcmi);
 800a918:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800a91c:	d107      	bne.n	800a92e <HAL_DCMI_Resume+0x26>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a91e:	2302      	movs	r3, #2

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800a920:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a922:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800a926:	6813      	ldr	r3, [r2, #0]
 800a928:	f043 0301 	orr.w	r3, r3, #1
 800a92c:	6013      	str	r3, [r2, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800a92e:	2300      	movs	r3, #0
 800a930:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800a934:	4618      	mov	r0, r3
 800a936:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800a938:	2002      	movs	r0, #2
}
 800a93a:	4770      	bx	lr

0800a93c <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a93c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a93e:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800a940:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a944:	2b02      	cmp	r3, #2
 800a946:	d006      	beq.n	800a956 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800a948:	2301      	movs	r3, #1
 800a94a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800a94e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a954:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800a956:	f7fe feef 	bl	8009738 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800a95a:	bd08      	pop	{r3, pc}

0800a95c <HAL_DCMI_IRQHandler>:
{
 800a95c:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800a95e:	6803      	ldr	r3, [r0, #0]
{
 800a960:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800a962:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800a964:	0769      	lsls	r1, r5, #29
 800a966:	d437      	bmi.n	800a9d8 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800a968:	07aa      	lsls	r2, r5, #30
 800a96a:	d425      	bmi.n	800a9b8 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800a96c:	06eb      	lsls	r3, r5, #27
 800a96e:	d41c      	bmi.n	800a9aa <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800a970:	0728      	lsls	r0, r5, #28
 800a972:	d413      	bmi.n	800a99c <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800a974:	07e9      	lsls	r1, r5, #31
 800a976:	d510      	bpl.n	800a99a <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	0792      	lsls	r2, r2, #30
 800a97e:	d503      	bpl.n	800a988 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	f022 021e 	bic.w	r2, r2, #30
 800a986:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800a988:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800a98a:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800a98c:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800a98e:	f022 0201 	bic.w	r2, r2, #1
 800a992:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800a994:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800a996:	f7fe fec3 	bl	8009720 <HAL_DCMI_FrameEventCallback>
}
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800a9a0:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800a9a2:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800a9a4:	f7fe fec2 	bl	800972c <HAL_DCMI_VsyncEventCallback>
 800a9a8:	e7e4      	b.n	800a974 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800a9ae:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800a9b0:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800a9b2:	f7fe feaf 	bl	8009714 <HAL_DCMI_LineEventCallback>
 800a9b6:	e7db      	b.n	800a970 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800a9bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800a9be:	2104      	movs	r1, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800a9c0:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800a9c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800a9c4:	4a0b      	ldr	r2, [pc, #44]	; (800a9f4 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800a9c6:	f043 0301 	orr.w	r3, r3, #1
 800a9ca:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800a9cc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800a9d0:	6502      	str	r2, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800a9d2:	f001 f80b 	bl	800b9ec <HAL_DMA_Abort_IT>
 800a9d6:	e7c9      	b.n	800a96c <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800a9d8:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800a9da:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a9dc:	4905      	ldr	r1, [pc, #20]	; (800a9f4 <HAL_DCMI_IRQHandler+0x98>)
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800a9de:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800a9e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800a9e8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800a9ec:	6501      	str	r1, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800a9ee:	f000 fffd 	bl	800b9ec <HAL_DMA_Abort_IT>
 800a9f2:	e7b9      	b.n	800a968 <HAL_DCMI_IRQHandler+0xc>
 800a9f4:	0800a93d 	.word	0x0800a93d

0800a9f8 <HAL_DCMI_ConfigCrop>:
{
 800a9f8:	b470      	push	{r4, r5, r6}
 800a9fa:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 800a9fc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800aa00:	2801      	cmp	r0, #1
 800aa02:	d013      	beq.n	800aa2c <HAL_DCMI_ConfigCrop+0x34>
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aa04:	9803      	ldr	r0, [sp, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aa06:	2602      	movs	r6, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800aa08:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800aa0c:	2501      	movs	r5, #1
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aa0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  __HAL_UNLOCK(hdcmi);
 800aa12:	2100      	movs	r1, #0
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aa14:	6820      	ldr	r0, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aa16:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aa1a:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800aa1c:	6202      	str	r2, [r0, #32]
  return HAL_OK;
 800aa1e:	4608      	mov	r0, r1
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800aa20:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800aa24:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
}
 800aa28:	bc70      	pop	{r4, r5, r6}
 800aa2a:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800aa2c:	2002      	movs	r0, #2
}
 800aa2e:	bc70      	pop	{r4, r5, r6}
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop

0800aa34 <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800aa34:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800aa38:	2a01      	cmp	r2, #1
 800aa3a:	d012      	beq.n	800aa62 <HAL_DCMI_DisableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800aa40:	2100      	movs	r1, #0
{
 800aa42:	b430      	push	{r4, r5}
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800aa44:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800aa46:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aa48:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800aa4c:	4608      	mov	r0, r1
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800aa4e:	6822      	ldr	r2, [r4, #0]
 800aa50:	f022 0204 	bic.w	r2, r2, #4
 800aa54:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800aa56:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800aa5a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800aa5e:	bc30      	pop	{r4, r5}
 800aa60:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800aa62:	2002      	movs	r0, #2
}
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop

0800aa68 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800aa68:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800aa6c:	2a01      	cmp	r2, #1
 800aa6e:	d012      	beq.n	800aa96 <HAL_DCMI_EnableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aa70:	2202      	movs	r2, #2
 800aa72:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800aa74:	2100      	movs	r1, #0
{
 800aa76:	b430      	push	{r4, r5}
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800aa78:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800aa7a:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aa7c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800aa80:	4608      	mov	r0, r1
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	f042 0204 	orr.w	r2, r2, #4
 800aa88:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800aa8a:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800aa8e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800aa92:	bc30      	pop	{r4, r5}
 800aa94:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800aa96:	2002      	movs	r0, #2
}
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop

0800aa9c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa9c:	6802      	ldr	r2, [r0, #0]
 800aa9e:	4b35      	ldr	r3, [pc, #212]	; (800ab74 <DMA_CalcBaseAndBitshift+0xd8>)
 800aaa0:	4935      	ldr	r1, [pc, #212]	; (800ab78 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800aaa2:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aaa4:	4c35      	ldr	r4, [pc, #212]	; (800ab7c <DMA_CalcBaseAndBitshift+0xe0>)
 800aaa6:	4d36      	ldr	r5, [pc, #216]	; (800ab80 <DMA_CalcBaseAndBitshift+0xe4>)
 800aaa8:	42a2      	cmp	r2, r4
 800aaaa:	bf18      	it	ne
 800aaac:	429a      	cmpne	r2, r3
 800aaae:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800aab2:	bf0c      	ite	eq
 800aab4:	2301      	moveq	r3, #1
 800aab6:	2300      	movne	r3, #0
 800aab8:	428a      	cmp	r2, r1
 800aaba:	bf08      	it	eq
 800aabc:	f043 0301 	orreq.w	r3, r3, #1
 800aac0:	3148      	adds	r1, #72	; 0x48
 800aac2:	42aa      	cmp	r2, r5
 800aac4:	bf08      	it	eq
 800aac6:	f043 0301 	orreq.w	r3, r3, #1
 800aaca:	3548      	adds	r5, #72	; 0x48
 800aacc:	42a2      	cmp	r2, r4
 800aace:	bf08      	it	eq
 800aad0:	f043 0301 	orreq.w	r3, r3, #1
 800aad4:	3448      	adds	r4, #72	; 0x48
 800aad6:	428a      	cmp	r2, r1
 800aad8:	bf08      	it	eq
 800aada:	f043 0301 	orreq.w	r3, r3, #1
 800aade:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800aae2:	42aa      	cmp	r2, r5
 800aae4:	bf08      	it	eq
 800aae6:	f043 0301 	orreq.w	r3, r3, #1
 800aaea:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800aaee:	42a2      	cmp	r2, r4
 800aaf0:	bf08      	it	eq
 800aaf2:	f043 0301 	orreq.w	r3, r3, #1
 800aaf6:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800aafa:	428a      	cmp	r2, r1
 800aafc:	bf08      	it	eq
 800aafe:	f043 0301 	orreq.w	r3, r3, #1
 800ab02:	3148      	adds	r1, #72	; 0x48
 800ab04:	42aa      	cmp	r2, r5
 800ab06:	bf08      	it	eq
 800ab08:	f043 0301 	orreq.w	r3, r3, #1
 800ab0c:	3548      	adds	r5, #72	; 0x48
 800ab0e:	42a2      	cmp	r2, r4
 800ab10:	bf08      	it	eq
 800ab12:	f043 0301 	orreq.w	r3, r3, #1
 800ab16:	3448      	adds	r4, #72	; 0x48
 800ab18:	428a      	cmp	r2, r1
 800ab1a:	bf08      	it	eq
 800ab1c:	f043 0301 	orreq.w	r3, r3, #1
 800ab20:	3148      	adds	r1, #72	; 0x48
 800ab22:	42aa      	cmp	r2, r5
 800ab24:	bf08      	it	eq
 800ab26:	f043 0301 	orreq.w	r3, r3, #1
 800ab2a:	42a2      	cmp	r2, r4
 800ab2c:	bf08      	it	eq
 800ab2e:	f043 0301 	orreq.w	r3, r3, #1
 800ab32:	428a      	cmp	r2, r1
 800ab34:	bf08      	it	eq
 800ab36:	f043 0301 	orreq.w	r3, r3, #1
 800ab3a:	b913      	cbnz	r3, 800ab42 <DMA_CalcBaseAndBitshift+0xa6>
 800ab3c:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <DMA_CalcBaseAndBitshift+0xe8>)
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d113      	bne.n	800ab6a <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ab42:	b2d3      	uxtb	r3, r2
 800ab44:	4910      	ldr	r1, [pc, #64]	; (800ab88 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ab46:	4c11      	ldr	r4, [pc, #68]	; (800ab8c <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ab48:	3b10      	subs	r3, #16
 800ab4a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800ab4e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ab52:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ab56:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ab5a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ab5c:	bf88      	it	hi
 800ab5e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ab60:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ab62:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	bc30      	pop	{r4, r5}
 800ab68:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ab6a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800ab6e:	6583      	str	r3, [r0, #88]	; 0x58
 800ab70:	e7f8      	b.n	800ab64 <DMA_CalcBaseAndBitshift+0xc8>
 800ab72:	bf00      	nop
 800ab74:	40020010 	.word	0x40020010
 800ab78:	40020040 	.word	0x40020040
 800ab7c:	40020028 	.word	0x40020028
 800ab80:	40020058 	.word	0x40020058
 800ab84:	400204b8 	.word	0x400204b8
 800ab88:	aaaaaaab 	.word	0xaaaaaaab
 800ab8c:	08046708 	.word	0x08046708
 800ab90:	fffffc00 	.word	0xfffffc00

0800ab94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ab94:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ab96:	4a29      	ldr	r2, [pc, #164]	; (800ac3c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800ab98:	4929      	ldr	r1, [pc, #164]	; (800ac40 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800ab9a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ab9c:	4d29      	ldr	r5, [pc, #164]	; (800ac44 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800ab9e:	4c2a      	ldr	r4, [pc, #168]	; (800ac48 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800aba0:	42ab      	cmp	r3, r5
 800aba2:	bf18      	it	ne
 800aba4:	4293      	cmpne	r3, r2
 800aba6:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800abaa:	bf0c      	ite	eq
 800abac:	2201      	moveq	r2, #1
 800abae:	2200      	movne	r2, #0
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	bf08      	it	eq
 800abb4:	f042 0201 	orreq.w	r2, r2, #1
 800abb8:	343c      	adds	r4, #60	; 0x3c
 800abba:	428b      	cmp	r3, r1
 800abbc:	bf08      	it	eq
 800abbe:	f042 0201 	orreq.w	r2, r2, #1
 800abc2:	313c      	adds	r1, #60	; 0x3c
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	bf08      	it	eq
 800abc8:	f042 0201 	orreq.w	r2, r2, #1
 800abcc:	42a3      	cmp	r3, r4
 800abce:	bf08      	it	eq
 800abd0:	f042 0201 	orreq.w	r2, r2, #1
 800abd4:	428b      	cmp	r3, r1
 800abd6:	bf08      	it	eq
 800abd8:	f042 0201 	orreq.w	r2, r2, #1
 800abdc:	b912      	cbnz	r2, 800abe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800abde:	4a1b      	ldr	r2, [pc, #108]	; (800ac4c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d113      	bne.n	800ac0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	4d1a      	ldr	r5, [pc, #104]	; (800ac50 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800abe8:	4a1a      	ldr	r2, [pc, #104]	; (800ac54 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800abea:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800abec:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800abee:	4c1a      	ldr	r4, [pc, #104]	; (800ac58 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800abf0:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800abf4:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800abf6:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800abfa:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800abfe:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ac00:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ac04:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ac06:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ac08:	bc30      	pop	{r4, r5}
 800ac0a:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ac0c:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ac0e:	4913      	ldr	r1, [pc, #76]	; (800ac5c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ac10:	4c13      	ldr	r4, [pc, #76]	; (800ac60 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ac12:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ac14:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ac16:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ac18:	fba4 2302 	umull	r2, r3, r4, r2
 800ac1c:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ac20:	d800      	bhi.n	800ac24 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 800ac22:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ac24:	4a0f      	ldr	r2, [pc, #60]	; (800ac64 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ac26:	f003 051f 	and.w	r5, r3, #31
 800ac2a:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ac2c:	4c0e      	ldr	r4, [pc, #56]	; (800ac68 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ac2e:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ac30:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ac32:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ac34:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ac36:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ac38:	6602      	str	r2, [r0, #96]	; 0x60
}
 800ac3a:	e7e5      	b.n	800ac08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 800ac3c:	58025408 	.word	0x58025408
 800ac40:	58025444 	.word	0x58025444
 800ac44:	5802541c 	.word	0x5802541c
 800ac48:	58025430 	.word	0x58025430
 800ac4c:	58025494 	.word	0x58025494
 800ac50:	cccccccd 	.word	0xcccccccd
 800ac54:	16009600 	.word	0x16009600
 800ac58:	58025880 	.word	0x58025880
 800ac5c:	bffdfbf0 	.word	0xbffdfbf0
 800ac60:	aaaaaaab 	.word	0xaaaaaaab
 800ac64:	10008200 	.word	0x10008200
 800ac68:	40020880 	.word	0x40020880

0800ac6c <HAL_DMA_Init>:
{
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ac70:	f7ff fc6c 	bl	800a54c <HAL_GetTick>
  if(hdma == NULL)
 800ac74:	2c00      	cmp	r4, #0
 800ac76:	f000 818a 	beq.w	800af8e <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	4a95      	ldr	r2, [pc, #596]	; (800aed4 <HAL_DMA_Init+0x268>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d049      	beq.n	800ad18 <HAL_DMA_Init+0xac>
 800ac84:	3218      	adds	r2, #24
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d046      	beq.n	800ad18 <HAL_DMA_Init+0xac>
 800ac8a:	3230      	adds	r2, #48	; 0x30
 800ac8c:	4892      	ldr	r0, [pc, #584]	; (800aed8 <HAL_DMA_Init+0x26c>)
 800ac8e:	4993      	ldr	r1, [pc, #588]	; (800aedc <HAL_DMA_Init+0x270>)
 800ac90:	4283      	cmp	r3, r0
 800ac92:	bf18      	it	ne
 800ac94:	4293      	cmpne	r3, r2
 800ac96:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800ac9a:	bf0c      	ite	eq
 800ac9c:	2201      	moveq	r2, #1
 800ac9e:	2200      	movne	r2, #0
 800aca0:	428b      	cmp	r3, r1
 800aca2:	bf08      	it	eq
 800aca4:	f042 0201 	orreq.w	r2, r2, #1
 800aca8:	3130      	adds	r1, #48	; 0x30
 800acaa:	4283      	cmp	r3, r0
 800acac:	bf08      	it	eq
 800acae:	f042 0201 	orreq.w	r2, r2, #1
 800acb2:	3030      	adds	r0, #48	; 0x30
 800acb4:	428b      	cmp	r3, r1
 800acb6:	bf08      	it	eq
 800acb8:	f042 0201 	orreq.w	r2, r2, #1
 800acbc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800acc0:	4283      	cmp	r3, r0
 800acc2:	bf08      	it	eq
 800acc4:	f042 0201 	orreq.w	r2, r2, #1
 800acc8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800accc:	428b      	cmp	r3, r1
 800acce:	bf08      	it	eq
 800acd0:	f042 0201 	orreq.w	r2, r2, #1
 800acd4:	3130      	adds	r1, #48	; 0x30
 800acd6:	4283      	cmp	r3, r0
 800acd8:	bf08      	it	eq
 800acda:	f042 0201 	orreq.w	r2, r2, #1
 800acde:	3030      	adds	r0, #48	; 0x30
 800ace0:	428b      	cmp	r3, r1
 800ace2:	bf08      	it	eq
 800ace4:	f042 0201 	orreq.w	r2, r2, #1
 800ace8:	3130      	adds	r1, #48	; 0x30
 800acea:	4283      	cmp	r3, r0
 800acec:	bf08      	it	eq
 800acee:	f042 0201 	orreq.w	r2, r2, #1
 800acf2:	3030      	adds	r0, #48	; 0x30
 800acf4:	428b      	cmp	r3, r1
 800acf6:	bf08      	it	eq
 800acf8:	f042 0201 	orreq.w	r2, r2, #1
 800acfc:	3130      	adds	r1, #48	; 0x30
 800acfe:	4283      	cmp	r3, r0
 800ad00:	bf08      	it	eq
 800ad02:	f042 0201 	orreq.w	r2, r2, #1
 800ad06:	428b      	cmp	r3, r1
 800ad08:	bf08      	it	eq
 800ad0a:	f042 0201 	orreq.w	r2, r2, #1
 800ad0e:	b91a      	cbnz	r2, 800ad18 <HAL_DMA_Init+0xac>
 800ad10:	4a73      	ldr	r2, [pc, #460]	; (800aee0 <HAL_DMA_Init+0x274>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	f040 81a1 	bne.w	800b05a <HAL_DMA_Init+0x3ee>
    hdma->State = HAL_DMA_STATE_BUSY;
 800ad18:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800ad1a:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800ad1c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800ad20:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	f022 0201 	bic.w	r2, r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e006      	b.n	800ad3c <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad2e:	f7ff fc0d 	bl	800a54c <HAL_GetTick>
 800ad32:	1b43      	subs	r3, r0, r5
 800ad34:	2b05      	cmp	r3, #5
 800ad36:	f200 8111 	bhi.w	800af5c <HAL_DMA_Init+0x2f0>
 800ad3a:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	07d0      	lsls	r0, r2, #31
 800ad40:	d4f5      	bmi.n	800ad2e <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 800ad42:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad46:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800ad48:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ad4a:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad4c:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad50:	430a      	orrs	r2, r1
 800ad52:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ad54:	4e63      	ldr	r6, [pc, #396]	; (800aee4 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 800ad56:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad5a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ad5c:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad5e:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad60:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 800ad62:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad64:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ad66:	4960      	ldr	r1, [pc, #384]	; (800aee8 <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 800ad68:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ad6c:	4e5f      	ldr	r6, [pc, #380]	; (800aeec <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad6e:	f000 8110 	beq.w	800af92 <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ad72:	6836      	ldr	r6, [r6, #0]
 800ad74:	4031      	ands	r1, r6
 800ad76:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800ad7a:	f080 80c3 	bcs.w	800af04 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ad7e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ad80:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad82:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800ad86:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ad88:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7ff fe86 	bl	800aa9c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ad90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad92:	233f      	movs	r3, #63	; 0x3f
 800ad94:	f002 021f 	and.w	r2, r2, #31
 800ad98:	4093      	lsls	r3, r2
 800ad9a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ad9c:	6822      	ldr	r2, [r4, #0]
 800ad9e:	4b4d      	ldr	r3, [pc, #308]	; (800aed4 <HAL_DMA_Init+0x268>)
 800ada0:	4953      	ldr	r1, [pc, #332]	; (800aef0 <HAL_DMA_Init+0x284>)
 800ada2:	4d4d      	ldr	r5, [pc, #308]	; (800aed8 <HAL_DMA_Init+0x26c>)
 800ada4:	428a      	cmp	r2, r1
 800ada6:	bf18      	it	ne
 800ada8:	429a      	cmpne	r2, r3
 800adaa:	4852      	ldr	r0, [pc, #328]	; (800aef4 <HAL_DMA_Init+0x288>)
 800adac:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800adb0:	bf0c      	ite	eq
 800adb2:	2301      	moveq	r3, #1
 800adb4:	2300      	movne	r3, #0
 800adb6:	42aa      	cmp	r2, r5
 800adb8:	bf08      	it	eq
 800adba:	f043 0301 	orreq.w	r3, r3, #1
 800adbe:	3548      	adds	r5, #72	; 0x48
 800adc0:	4282      	cmp	r2, r0
 800adc2:	bf08      	it	eq
 800adc4:	f043 0301 	orreq.w	r3, r3, #1
 800adc8:	3048      	adds	r0, #72	; 0x48
 800adca:	428a      	cmp	r2, r1
 800adcc:	bf08      	it	eq
 800adce:	f043 0301 	orreq.w	r3, r3, #1
 800add2:	3148      	adds	r1, #72	; 0x48
 800add4:	42aa      	cmp	r2, r5
 800add6:	bf08      	it	eq
 800add8:	f043 0301 	orreq.w	r3, r3, #1
 800addc:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800ade0:	4282      	cmp	r2, r0
 800ade2:	bf08      	it	eq
 800ade4:	f043 0301 	orreq.w	r3, r3, #1
 800ade8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800adec:	428a      	cmp	r2, r1
 800adee:	bf08      	it	eq
 800adf0:	f043 0301 	orreq.w	r3, r3, #1
 800adf4:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800adf8:	42aa      	cmp	r2, r5
 800adfa:	bf08      	it	eq
 800adfc:	f043 0301 	orreq.w	r3, r3, #1
 800ae00:	3548      	adds	r5, #72	; 0x48
 800ae02:	4282      	cmp	r2, r0
 800ae04:	bf08      	it	eq
 800ae06:	f043 0301 	orreq.w	r3, r3, #1
 800ae0a:	3048      	adds	r0, #72	; 0x48
 800ae0c:	428a      	cmp	r2, r1
 800ae0e:	bf08      	it	eq
 800ae10:	f043 0301 	orreq.w	r3, r3, #1
 800ae14:	3148      	adds	r1, #72	; 0x48
 800ae16:	42aa      	cmp	r2, r5
 800ae18:	bf08      	it	eq
 800ae1a:	f043 0301 	orreq.w	r3, r3, #1
 800ae1e:	3548      	adds	r5, #72	; 0x48
 800ae20:	4282      	cmp	r2, r0
 800ae22:	bf08      	it	eq
 800ae24:	f043 0301 	orreq.w	r3, r3, #1
 800ae28:	3048      	adds	r0, #72	; 0x48
 800ae2a:	428a      	cmp	r2, r1
 800ae2c:	bf08      	it	eq
 800ae2e:	f043 0301 	orreq.w	r3, r3, #1
 800ae32:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 800ae36:	42aa      	cmp	r2, r5
 800ae38:	bf08      	it	eq
 800ae3a:	f043 0301 	orreq.w	r3, r3, #1
 800ae3e:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 800ae42:	4d2d      	ldr	r5, [pc, #180]	; (800aef8 <HAL_DMA_Init+0x28c>)
 800ae44:	4282      	cmp	r2, r0
 800ae46:	bf08      	it	eq
 800ae48:	f043 0301 	orreq.w	r3, r3, #1
 800ae4c:	482b      	ldr	r0, [pc, #172]	; (800aefc <HAL_DMA_Init+0x290>)
 800ae4e:	428a      	cmp	r2, r1
 800ae50:	bf08      	it	eq
 800ae52:	f043 0301 	orreq.w	r3, r3, #1
 800ae56:	313c      	adds	r1, #60	; 0x3c
 800ae58:	42aa      	cmp	r2, r5
 800ae5a:	bf08      	it	eq
 800ae5c:	f043 0301 	orreq.w	r3, r3, #1
 800ae60:	353c      	adds	r5, #60	; 0x3c
 800ae62:	4282      	cmp	r2, r0
 800ae64:	bf08      	it	eq
 800ae66:	f043 0301 	orreq.w	r3, r3, #1
 800ae6a:	303c      	adds	r0, #60	; 0x3c
 800ae6c:	428a      	cmp	r2, r1
 800ae6e:	bf08      	it	eq
 800ae70:	f043 0301 	orreq.w	r3, r3, #1
 800ae74:	313c      	adds	r1, #60	; 0x3c
 800ae76:	42aa      	cmp	r2, r5
 800ae78:	bf08      	it	eq
 800ae7a:	f043 0301 	orreq.w	r3, r3, #1
 800ae7e:	4282      	cmp	r2, r0
 800ae80:	bf08      	it	eq
 800ae82:	f043 0301 	orreq.w	r3, r3, #1
 800ae86:	428a      	cmp	r2, r1
 800ae88:	bf08      	it	eq
 800ae8a:	f043 0301 	orreq.w	r3, r3, #1
 800ae8e:	b913      	cbnz	r3, 800ae96 <HAL_DMA_Init+0x22a>
 800ae90:	4b1b      	ldr	r3, [pc, #108]	; (800af00 <HAL_DMA_Init+0x294>)
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d118      	bne.n	800aec8 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff fe7c 	bl	800ab94 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ae9c:	68a3      	ldr	r3, [r4, #8]
 800ae9e:	2b80      	cmp	r3, #128	; 0x80
 800aea0:	d069      	beq.n	800af76 <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800aea6:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800aea8:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aeaa:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800aeae:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800aeb0:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aeb2:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800aeb4:	d866      	bhi.n	800af84 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800aeb6:	1e50      	subs	r0, r2, #1
 800aeb8:	2807      	cmp	r0, #7
 800aeba:	d97c      	bls.n	800afb6 <HAL_DMA_Init+0x34a>
 800aebc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800aebe:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800aec2:	2000      	movs	r0, #0
 800aec4:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aec6:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aec8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800aeca:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aecc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800aece:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800aed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed4:	40020010 	.word	0x40020010
 800aed8:	40020040 	.word	0x40020040
 800aedc:	40020070 	.word	0x40020070
 800aee0:	400204b8 	.word	0x400204b8
 800aee4:	fe10803f 	.word	0xfe10803f
 800aee8:	ffff0000 	.word	0xffff0000
 800aeec:	5c001000 	.word	0x5c001000
 800aef0:	40020028 	.word	0x40020028
 800aef4:	40020058 	.word	0x40020058
 800aef8:	5802541c 	.word	0x5802541c
 800aefc:	58025430 	.word	0x58025430
 800af00:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800af04:	6861      	ldr	r1, [r4, #4]
 800af06:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 800af0a:	2e1f      	cmp	r6, #31
 800af0c:	d92d      	bls.n	800af6a <HAL_DMA_Init+0x2fe>
 800af0e:	394f      	subs	r1, #79	; 0x4f
 800af10:	2903      	cmp	r1, #3
 800af12:	d801      	bhi.n	800af18 <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 800af14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800af18:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af1a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800af1c:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800af1e:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800af22:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af26:	f47f af2f 	bne.w	800ad88 <HAL_DMA_Init+0x11c>
 800af2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800af2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800af2e:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800af30:	2e00      	cmp	r6, #0
 800af32:	f43f af29 	beq.w	800ad88 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af36:	2800      	cmp	r0, #0
 800af38:	d173      	bne.n	800b022 <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 800af3a:	2a01      	cmp	r2, #1
 800af3c:	f000 8088 	beq.w	800b050 <HAL_DMA_Init+0x3e4>
 800af40:	f032 0202 	bics.w	r2, r2, #2
 800af44:	f47f af20 	bne.w	800ad88 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af48:	01f2      	lsls	r2, r6, #7
 800af4a:	f57f af1d 	bpl.w	800ad88 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 800af4e:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800af50:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800af52:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800af54:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800af56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800af5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af5c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800af5e:	2303      	movs	r3, #3
        return HAL_ERROR;
 800af60:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af62:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800af64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800af68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800af6a:	4970      	ldr	r1, [pc, #448]	; (800b12c <HAL_DMA_Init+0x4c0>)
 800af6c:	fa21 f606 	lsr.w	r6, r1, r6
 800af70:	07f1      	lsls	r1, r6, #31
 800af72:	d5d1      	bpl.n	800af18 <HAL_DMA_Init+0x2ac>
 800af74:	e7ce      	b.n	800af14 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800af76:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af78:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800af7a:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800af7e:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af80:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af82:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800af84:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800af86:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800af8a:	6763      	str	r3, [r4, #116]	; 0x74
 800af8c:	e79c      	b.n	800aec8 <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 800af8e:	2001      	movs	r0, #1
}
 800af90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af92:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af96:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af98:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af9a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af9e:	ea46 0707 	orr.w	r7, r6, r7
 800afa2:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800afa6:	d2ad      	bcs.n	800af04 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800afa8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800afaa:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800afac:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800afb0:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800afb4:	e7ba      	b.n	800af2c <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800afb6:	6821      	ldr	r1, [r4, #0]
 800afb8:	4b5d      	ldr	r3, [pc, #372]	; (800b130 <HAL_DMA_Init+0x4c4>)
 800afba:	4e5e      	ldr	r6, [pc, #376]	; (800b134 <HAL_DMA_Init+0x4c8>)
 800afbc:	4d5e      	ldr	r5, [pc, #376]	; (800b138 <HAL_DMA_Init+0x4cc>)
 800afbe:	42b1      	cmp	r1, r6
 800afc0:	bf18      	it	ne
 800afc2:	4299      	cmpne	r1, r3
 800afc4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800afc8:	bf0c      	ite	eq
 800afca:	2301      	moveq	r3, #1
 800afcc:	2300      	movne	r3, #0
 800afce:	42a9      	cmp	r1, r5
 800afd0:	bf08      	it	eq
 800afd2:	f043 0301 	orreq.w	r3, r3, #1
 800afd6:	3528      	adds	r5, #40	; 0x28
 800afd8:	42b1      	cmp	r1, r6
 800afda:	bf08      	it	eq
 800afdc:	f043 0301 	orreq.w	r3, r3, #1
 800afe0:	3628      	adds	r6, #40	; 0x28
 800afe2:	42a9      	cmp	r1, r5
 800afe4:	bf08      	it	eq
 800afe6:	f043 0301 	orreq.w	r3, r3, #1
 800afea:	3528      	adds	r5, #40	; 0x28
 800afec:	42b1      	cmp	r1, r6
 800afee:	bf08      	it	eq
 800aff0:	f043 0301 	orreq.w	r3, r3, #1
 800aff4:	42a9      	cmp	r1, r5
 800aff6:	bf08      	it	eq
 800aff8:	f043 0301 	orreq.w	r3, r3, #1
 800affc:	b93b      	cbnz	r3, 800b00e <HAL_DMA_Init+0x3a2>
 800affe:	4b4f      	ldr	r3, [pc, #316]	; (800b13c <HAL_DMA_Init+0x4d0>)
 800b000:	4299      	cmp	r1, r3
 800b002:	d004      	beq.n	800b00e <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b004:	4b4e      	ldr	r3, [pc, #312]	; (800b140 <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b006:	494f      	ldr	r1, [pc, #316]	; (800b144 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b00c:	e003      	b.n	800b016 <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b00e:	4b4e      	ldr	r3, [pc, #312]	; (800b148 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b010:	494e      	ldr	r1, [pc, #312]	; (800b14c <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b016:	2201      	movs	r2, #1
 800b018:	4082      	lsls	r2, r0
 800b01a:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800b01e:	6762      	str	r2, [r4, #116]	; 0x74
 800b020:	e74f      	b.n	800aec2 <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b022:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b026:	d004      	beq.n	800b032 <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 800b028:	2a02      	cmp	r2, #2
 800b02a:	d990      	bls.n	800af4e <HAL_DMA_Init+0x2e2>
 800b02c:	2a03      	cmp	r2, #3
 800b02e:	d08b      	beq.n	800af48 <HAL_DMA_Init+0x2dc>
 800b030:	e6aa      	b.n	800ad88 <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 800b032:	2a03      	cmp	r2, #3
 800b034:	f63f aea8 	bhi.w	800ad88 <HAL_DMA_Init+0x11c>
 800b038:	a001      	add	r0, pc, #4	; (adr r0, 800b040 <HAL_DMA_Init+0x3d4>)
 800b03a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800b03e:	bf00      	nop
 800b040:	0800af4f 	.word	0x0800af4f
 800b044:	0800af49 	.word	0x0800af49
 800b048:	0800af4f 	.word	0x0800af4f
 800b04c:	0800b051 	.word	0x0800b051
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b050:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 800b054:	f47f ae98 	bne.w	800ad88 <HAL_DMA_Init+0x11c>
 800b058:	e779      	b.n	800af4e <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b05a:	4a35      	ldr	r2, [pc, #212]	; (800b130 <HAL_DMA_Init+0x4c4>)
 800b05c:	4935      	ldr	r1, [pc, #212]	; (800b134 <HAL_DMA_Init+0x4c8>)
 800b05e:	4836      	ldr	r0, [pc, #216]	; (800b138 <HAL_DMA_Init+0x4cc>)
 800b060:	428b      	cmp	r3, r1
 800b062:	bf18      	it	ne
 800b064:	4293      	cmpne	r3, r2
 800b066:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800b06a:	4d39      	ldr	r5, [pc, #228]	; (800b150 <HAL_DMA_Init+0x4e4>)
 800b06c:	bf0c      	ite	eq
 800b06e:	2201      	moveq	r2, #1
 800b070:	2200      	movne	r2, #0
 800b072:	4283      	cmp	r3, r0
 800b074:	bf08      	it	eq
 800b076:	f042 0201 	orreq.w	r2, r2, #1
 800b07a:	303c      	adds	r0, #60	; 0x3c
 800b07c:	428b      	cmp	r3, r1
 800b07e:	bf08      	it	eq
 800b080:	f042 0201 	orreq.w	r2, r2, #1
 800b084:	313c      	adds	r1, #60	; 0x3c
 800b086:	42ab      	cmp	r3, r5
 800b088:	bf08      	it	eq
 800b08a:	f042 0201 	orreq.w	r2, r2, #1
 800b08e:	4283      	cmp	r3, r0
 800b090:	bf08      	it	eq
 800b092:	f042 0201 	orreq.w	r2, r2, #1
 800b096:	428b      	cmp	r3, r1
 800b098:	bf08      	it	eq
 800b09a:	f042 0201 	orreq.w	r2, r2, #1
 800b09e:	b912      	cbnz	r2, 800b0a6 <HAL_DMA_Init+0x43a>
 800b0a0:	4a26      	ldr	r2, [pc, #152]	; (800b13c <HAL_DMA_Init+0x4d0>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d13a      	bne.n	800b11c <HAL_DMA_Init+0x4b0>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0a6:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800b0a8:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b0aa:	4f2a      	ldr	r7, [pc, #168]	; (800b154 <HAL_DMA_Init+0x4e8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0ac:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0b0:	68a2      	ldr	r2, [r4, #8]
    __HAL_UNLOCK(hdma);
 800b0b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0b6:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b0b8:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b0ba:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0be:	d02b      	beq.n	800b118 <HAL_DMA_Init+0x4ac>
 800b0c0:	2a80      	cmp	r2, #128	; 0x80
 800b0c2:	bf0c      	ite	eq
 800b0c4:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 800b0c8:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b0ca:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b0cc:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b0ce:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b0d0:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b0d2:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b0d4:	f8df c084 	ldr.w	ip, [pc, #132]	; 800b15c <HAL_DMA_Init+0x4f0>
 800b0d8:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b0dc:	69a6      	ldr	r6, [r4, #24]
 800b0de:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b0e2:	69e5      	ldr	r5, [r4, #28]
 800b0e4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b0e8:	4e1b      	ldr	r6, [pc, #108]	; (800b158 <HAL_DMA_Init+0x4ec>)
 800b0ea:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800b0ee:	441e      	add	r6, r3
 800b0f0:	6a25      	ldr	r5, [r4, #32]
 800b0f2:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 800b0f6:	fbac 6506 	umull	r6, r5, ip, r6
 800b0fa:	433a      	orrs	r2, r7
 800b0fc:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0fe:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b100:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b102:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b104:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b106:	f7ff fcc9 	bl	800aa9c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b10a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b10c:	2301      	movs	r3, #1
 800b10e:	f002 021f 	and.w	r2, r2, #31
 800b112:	4093      	lsls	r3, r2
 800b114:	6043      	str	r3, [r0, #4]
 800b116:	e641      	b.n	800ad9c <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b118:	2110      	movs	r1, #16
 800b11a:	e7d6      	b.n	800b0ca <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b11c:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b11e:	2303      	movs	r3, #3
    return HAL_ERROR;
 800b120:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b122:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b124:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b12a:	bf00      	nop
 800b12c:	c3c0003f 	.word	0xc3c0003f
 800b130:	58025408 	.word	0x58025408
 800b134:	5802541c 	.word	0x5802541c
 800b138:	58025430 	.word	0x58025430
 800b13c:	58025494 	.word	0x58025494
 800b140:	1000823f 	.word	0x1000823f
 800b144:	40020940 	.word	0x40020940
 800b148:	1600963f 	.word	0x1600963f
 800b14c:	58025940 	.word	0x58025940
 800b150:	58025458 	.word	0x58025458
 800b154:	fffe000f 	.word	0xfffe000f
 800b158:	a7fdabf8 	.word	0xa7fdabf8
 800b15c:	cccccccd 	.word	0xcccccccd

0800b160 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800b160:	2800      	cmp	r0, #0
 800b162:	f000 80f5 	beq.w	800b350 <HAL_DMA_DeInit+0x1f0>
  __HAL_DMA_DISABLE(hdma);
 800b166:	6802      	ldr	r2, [r0, #0]
 800b168:	4b7d      	ldr	r3, [pc, #500]	; (800b360 <HAL_DMA_DeInit+0x200>)
 800b16a:	497e      	ldr	r1, [pc, #504]	; (800b364 <HAL_DMA_DeInit+0x204>)
 800b16c:	428a      	cmp	r2, r1
 800b16e:	bf18      	it	ne
 800b170:	429a      	cmpne	r2, r3
 800b172:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800b176:	bf0c      	ite	eq
 800b178:	2301      	moveq	r3, #1
 800b17a:	2300      	movne	r3, #0
{
 800b17c:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(hdma);
 800b17e:	4d7a      	ldr	r5, [pc, #488]	; (800b368 <HAL_DMA_DeInit+0x208>)
 800b180:	4604      	mov	r4, r0
 800b182:	487a      	ldr	r0, [pc, #488]	; (800b36c <HAL_DMA_DeInit+0x20c>)
 800b184:	42aa      	cmp	r2, r5
 800b186:	bf08      	it	eq
 800b188:	f043 0301 	orreq.w	r3, r3, #1
 800b18c:	3548      	adds	r5, #72	; 0x48
 800b18e:	4282      	cmp	r2, r0
 800b190:	bf08      	it	eq
 800b192:	f043 0301 	orreq.w	r3, r3, #1
 800b196:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800b19a:	428a      	cmp	r2, r1
 800b19c:	bf08      	it	eq
 800b19e:	f043 0301 	orreq.w	r3, r3, #1
 800b1a2:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800b1a6:	42aa      	cmp	r2, r5
 800b1a8:	bf08      	it	eq
 800b1aa:	f043 0301 	orreq.w	r3, r3, #1
 800b1ae:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800b1b2:	4282      	cmp	r2, r0
 800b1b4:	bf08      	it	eq
 800b1b6:	f043 0301 	orreq.w	r3, r3, #1
 800b1ba:	3048      	adds	r0, #72	; 0x48
 800b1bc:	428a      	cmp	r2, r1
 800b1be:	bf08      	it	eq
 800b1c0:	f043 0301 	orreq.w	r3, r3, #1
 800b1c4:	3148      	adds	r1, #72	; 0x48
 800b1c6:	42aa      	cmp	r2, r5
 800b1c8:	bf08      	it	eq
 800b1ca:	f043 0301 	orreq.w	r3, r3, #1
 800b1ce:	3548      	adds	r5, #72	; 0x48
 800b1d0:	4282      	cmp	r2, r0
 800b1d2:	bf08      	it	eq
 800b1d4:	f043 0301 	orreq.w	r3, r3, #1
 800b1d8:	3048      	adds	r0, #72	; 0x48
 800b1da:	428a      	cmp	r2, r1
 800b1dc:	bf08      	it	eq
 800b1de:	f043 0301 	orreq.w	r3, r3, #1
 800b1e2:	3148      	adds	r1, #72	; 0x48
 800b1e4:	42aa      	cmp	r2, r5
 800b1e6:	bf08      	it	eq
 800b1e8:	f043 0301 	orreq.w	r3, r3, #1
 800b1ec:	4282      	cmp	r2, r0
 800b1ee:	bf08      	it	eq
 800b1f0:	f043 0301 	orreq.w	r3, r3, #1
 800b1f4:	428a      	cmp	r2, r1
 800b1f6:	bf08      	it	eq
 800b1f8:	f043 0301 	orreq.w	r3, r3, #1
 800b1fc:	b933      	cbnz	r3, 800b20c <HAL_DMA_DeInit+0xac>
 800b1fe:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800b202:	4b5b      	ldr	r3, [pc, #364]	; (800b370 <HAL_DMA_DeInit+0x210>)
 800b204:	429a      	cmp	r2, r3
 800b206:	bf18      	it	ne
 800b208:	428a      	cmpne	r2, r1
 800b20a:	d165      	bne.n	800b2d8 <HAL_DMA_DeInit+0x178>
 800b20c:	6811      	ldr	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b20e:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b210:	2521      	movs	r5, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b212:	4620      	mov	r0, r4
  __HAL_DMA_DISABLE(hdma);
 800b214:	f021 0101 	bic.w	r1, r1, #1
 800b218:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b21a:	6013      	str	r3, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800b21c:	6053      	str	r3, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800b21e:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800b220:	60d3      	str	r3, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800b222:	6113      	str	r3, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b224:	6155      	str	r5, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b226:	f7ff fc39 	bl	800aa9c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b22a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b22c:	233f      	movs	r3, #63	; 0x3f
 800b22e:	f002 021f 	and.w	r2, r2, #31
 800b232:	4093      	lsls	r3, r2
 800b234:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b236:	4620      	mov	r0, r4
 800b238:	f7ff fcac 	bl	800ab94 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 800b23c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b23e:	b123      	cbz	r3, 800b24a <HAL_DMA_DeInit+0xea>
      hdma->DMAmuxChannel->CCR = 0U;
 800b240:	2000      	movs	r0, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b242:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 800b246:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b248:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b24a:	6861      	ldr	r1, [r4, #4]
 800b24c:	1e4b      	subs	r3, r1, #1
 800b24e:	2b07      	cmp	r3, #7
 800b250:	d910      	bls.n	800b274 <HAL_DMA_DeInit+0x114>
    hdma->DMAmuxRequestGen = 0U;
 800b252:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b254:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800b256:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b258:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800b25a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800b25e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800b262:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800b266:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800b26a:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800b26e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800b272:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b274:	6820      	ldr	r0, [r4, #0]
 800b276:	4a3f      	ldr	r2, [pc, #252]	; (800b374 <HAL_DMA_DeInit+0x214>)
 800b278:	4e3f      	ldr	r6, [pc, #252]	; (800b378 <HAL_DMA_DeInit+0x218>)
 800b27a:	4d40      	ldr	r5, [pc, #256]	; (800b37c <HAL_DMA_DeInit+0x21c>)
 800b27c:	42b0      	cmp	r0, r6
 800b27e:	bf18      	it	ne
 800b280:	4290      	cmpne	r0, r2
 800b282:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b286:	bf0c      	ite	eq
 800b288:	2201      	moveq	r2, #1
 800b28a:	2200      	movne	r2, #0
 800b28c:	42a8      	cmp	r0, r5
 800b28e:	bf08      	it	eq
 800b290:	f042 0201 	orreq.w	r2, r2, #1
 800b294:	3528      	adds	r5, #40	; 0x28
 800b296:	42b0      	cmp	r0, r6
 800b298:	bf08      	it	eq
 800b29a:	f042 0201 	orreq.w	r2, r2, #1
 800b29e:	3628      	adds	r6, #40	; 0x28
 800b2a0:	42a8      	cmp	r0, r5
 800b2a2:	bf08      	it	eq
 800b2a4:	f042 0201 	orreq.w	r2, r2, #1
 800b2a8:	3528      	adds	r5, #40	; 0x28
 800b2aa:	42b0      	cmp	r0, r6
 800b2ac:	bf08      	it	eq
 800b2ae:	f042 0201 	orreq.w	r2, r2, #1
 800b2b2:	42a8      	cmp	r0, r5
 800b2b4:	bf08      	it	eq
 800b2b6:	f042 0201 	orreq.w	r2, r2, #1
 800b2ba:	b912      	cbnz	r2, 800b2c2 <HAL_DMA_DeInit+0x162>
 800b2bc:	4a30      	ldr	r2, [pc, #192]	; (800b380 <HAL_DMA_DeInit+0x220>)
 800b2be:	4290      	cmp	r0, r2
 800b2c0:	d148      	bne.n	800b354 <HAL_DMA_DeInit+0x1f4>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b2c2:	4a30      	ldr	r2, [pc, #192]	; (800b384 <HAL_DMA_DeInit+0x224>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b2c4:	4d30      	ldr	r5, [pc, #192]	; (800b388 <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b2c6:	440a      	add	r2, r1
 800b2c8:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b2ca:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b2cc:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b2ce:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b2d2:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2d4:	606b      	str	r3, [r5, #4]
 800b2d6:	e7bc      	b.n	800b252 <HAL_DMA_DeInit+0xf2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b2d8:	4b26      	ldr	r3, [pc, #152]	; (800b374 <HAL_DMA_DeInit+0x214>)
 800b2da:	4927      	ldr	r1, [pc, #156]	; (800b378 <HAL_DMA_DeInit+0x218>)
 800b2dc:	4d27      	ldr	r5, [pc, #156]	; (800b37c <HAL_DMA_DeInit+0x21c>)
 800b2de:	428a      	cmp	r2, r1
 800b2e0:	bf18      	it	ne
 800b2e2:	429a      	cmpne	r2, r3
 800b2e4:	4829      	ldr	r0, [pc, #164]	; (800b38c <HAL_DMA_DeInit+0x22c>)
 800b2e6:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800b2ea:	bf0c      	ite	eq
 800b2ec:	2301      	moveq	r3, #1
 800b2ee:	2300      	movne	r3, #0
 800b2f0:	42aa      	cmp	r2, r5
 800b2f2:	bf08      	it	eq
 800b2f4:	f043 0301 	orreq.w	r3, r3, #1
 800b2f8:	353c      	adds	r5, #60	; 0x3c
 800b2fa:	4282      	cmp	r2, r0
 800b2fc:	bf08      	it	eq
 800b2fe:	f043 0301 	orreq.w	r3, r3, #1
 800b302:	303c      	adds	r0, #60	; 0x3c
 800b304:	428a      	cmp	r2, r1
 800b306:	bf08      	it	eq
 800b308:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 800b30c:	6811      	ldr	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b30e:	42aa      	cmp	r2, r5
 800b310:	bf08      	it	eq
 800b312:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 800b316:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b31a:	4282      	cmp	r2, r0
 800b31c:	bf08      	it	eq
 800b31e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 800b322:	6011      	str	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b324:	b913      	cbnz	r3, 800b32c <HAL_DMA_DeInit+0x1cc>
 800b326:	4b16      	ldr	r3, [pc, #88]	; (800b380 <HAL_DMA_DeInit+0x220>)
 800b328:	429a      	cmp	r2, r3
 800b32a:	d10f      	bne.n	800b34c <HAL_DMA_DeInit+0x1ec>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b32c:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b32e:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b330:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800b332:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800b334:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800b336:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800b338:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b33a:	f7ff fbaf 	bl	800aa9c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b33e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b340:	2301      	movs	r3, #1
 800b342:	f002 021f 	and.w	r2, r2, #31
 800b346:	4093      	lsls	r3, r2
 800b348:	6043      	str	r3, [r0, #4]
 800b34a:	e774      	b.n	800b236 <HAL_DMA_DeInit+0xd6>
    return HAL_ERROR;
 800b34c:	2001      	movs	r0, #1
}
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800b350:	2001      	movs	r0, #1
}
 800b352:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b354:	4a0e      	ldr	r2, [pc, #56]	; (800b390 <HAL_DMA_DeInit+0x230>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b356:	4d0f      	ldr	r5, [pc, #60]	; (800b394 <HAL_DMA_DeInit+0x234>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b358:	440a      	add	r2, r1
 800b35a:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b35c:	e7b5      	b.n	800b2ca <HAL_DMA_DeInit+0x16a>
 800b35e:	bf00      	nop
 800b360:	40020058 	.word	0x40020058
 800b364:	40020040 	.word	0x40020040
 800b368:	40020070 	.word	0x40020070
 800b36c:	40020088 	.word	0x40020088
 800b370:	40020028 	.word	0x40020028
 800b374:	58025408 	.word	0x58025408
 800b378:	5802541c 	.word	0x5802541c
 800b37c:	58025430 	.word	0x58025430
 800b380:	58025494 	.word	0x58025494
 800b384:	1600963f 	.word	0x1600963f
 800b388:	58025940 	.word	0x58025940
 800b38c:	58025444 	.word	0x58025444
 800b390:	1000823f 	.word	0x1000823f
 800b394:	40020940 	.word	0x40020940

0800b398 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800b398:	2800      	cmp	r0, #0
 800b39a:	f000 818a 	beq.w	800b6b2 <HAL_DMA_Start_IT+0x31a>
{
 800b39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800b3a4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800b3a8:	2801      	cmp	r0, #1
 800b3aa:	f000 8184 	beq.w	800b6b6 <HAL_DMA_Start_IT+0x31e>
 800b3ae:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800b3b0:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 800b3b4:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 800b3b6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800b3ba:	d007      	beq.n	800b3cc <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 800b3bc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b3be:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800b3c2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b3c6:	6563      	str	r3, [r4, #84]	; 0x54
}
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 800b3cc:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3ce:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 800b3d2:	4858      	ldr	r0, [pc, #352]	; (800b534 <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3d4:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 800b3d6:	4e58      	ldr	r6, [pc, #352]	; (800b538 <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3d8:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3dc:	42b5      	cmp	r5, r6
 800b3de:	bf18      	it	ne
 800b3e0:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 800b3e2:	f8df c15c 	ldr.w	ip, [pc, #348]	; 800b540 <HAL_DMA_Start_IT+0x1a8>
 800b3e6:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3ea:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800b3ec:	bf0c      	ite	eq
 800b3ee:	2001      	moveq	r0, #1
 800b3f0:	2000      	movne	r0, #0
 800b3f2:	4f52      	ldr	r7, [pc, #328]	; (800b53c <HAL_DMA_Start_IT+0x1a4>)
 800b3f4:	4565      	cmp	r5, ip
 800b3f6:	bf08      	it	eq
 800b3f8:	f040 0001 	orreq.w	r0, r0, #1
 800b3fc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800b400:	42b5      	cmp	r5, r6
 800b402:	bf08      	it	eq
 800b404:	f040 0001 	orreq.w	r0, r0, #1
 800b408:	f506 7662 	add.w	r6, r6, #904	; 0x388
 800b40c:	4565      	cmp	r5, ip
 800b40e:	bf08      	it	eq
 800b410:	f040 0001 	orreq.w	r0, r0, #1
 800b414:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 800b418:	42bd      	cmp	r5, r7
 800b41a:	bf08      	it	eq
 800b41c:	f040 0001 	orreq.w	r0, r0, #1
 800b420:	f507 7762 	add.w	r7, r7, #904	; 0x388
 800b424:	42b5      	cmp	r5, r6
 800b426:	bf08      	it	eq
 800b428:	f040 0001 	orreq.w	r0, r0, #1
 800b42c:	3648      	adds	r6, #72	; 0x48
 800b42e:	4565      	cmp	r5, ip
 800b430:	bf08      	it	eq
 800b432:	f040 0001 	orreq.w	r0, r0, #1
 800b436:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800b43a:	42bd      	cmp	r5, r7
 800b43c:	bf08      	it	eq
 800b43e:	f040 0001 	orreq.w	r0, r0, #1
 800b442:	3748      	adds	r7, #72	; 0x48
 800b444:	42b5      	cmp	r5, r6
 800b446:	bf08      	it	eq
 800b448:	f040 0001 	orreq.w	r0, r0, #1
 800b44c:	3648      	adds	r6, #72	; 0x48
 800b44e:	4565      	cmp	r5, ip
 800b450:	bf08      	it	eq
 800b452:	f040 0001 	orreq.w	r0, r0, #1
 800b456:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800b45a:	42bd      	cmp	r5, r7
 800b45c:	bf08      	it	eq
 800b45e:	f040 0001 	orreq.w	r0, r0, #1
 800b462:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 800b466:	42b5      	cmp	r5, r6
 800b468:	bf08      	it	eq
 800b46a:	f040 0001 	orreq.w	r0, r0, #1
 800b46e:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 800b472:	4565      	cmp	r5, ip
 800b474:	bf14      	ite	ne
 800b476:	4682      	movne	sl, r0
 800b478:	f040 0a01 	orreq.w	sl, r0, #1
 800b47c:	42b5      	cmp	r5, r6
 800b47e:	bf18      	it	ne
 800b480:	42bd      	cmpne	r5, r7
 800b482:	bf0c      	ite	eq
 800b484:	2601      	moveq	r6, #1
 800b486:	2600      	movne	r6, #0
 800b488:	d002      	beq.n	800b490 <HAL_DMA_Start_IT+0xf8>
 800b48a:	f1ba 0f00 	cmp.w	sl, #0
 800b48e:	d059      	beq.n	800b544 <HAL_DMA_Start_IT+0x1ac>
 800b490:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b492:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800b496:	f027 0701 	bic.w	r7, r7, #1
 800b49a:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b49c:	2e00      	cmp	r6, #0
 800b49e:	f000 8084 	beq.w	800b5aa <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b4a2:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800b4a4:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 800b4a8:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800b4aa:	f1be 0f00 	cmp.w	lr, #0
 800b4ae:	d002      	beq.n	800b4b6 <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4b0:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 800b4b4:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b4b6:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800b4b8:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4bc:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b4c0:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4c4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b4c8:	fa09 f707 	lsl.w	r7, r9, r7
 800b4cc:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b4d0:	682f      	ldr	r7, [r5, #0]
 800b4d2:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800b4d6:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b4d8:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4da:	f000 80ef 	beq.w	800b6bc <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b4de:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b4e0:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b4e2:	b91e      	cbnz	r6, 800b4ec <HAL_DMA_Start_IT+0x154>
 800b4e4:	f1ba 0f00 	cmp.w	sl, #0
 800b4e8:	f000 80ee 	beq.w	800b6c8 <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b4ec:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b4ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b4f0:	f023 031e 	bic.w	r3, r3, #30
 800b4f4:	f043 0316 	orr.w	r3, r3, #22
 800b4f8:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b4fa:	b11a      	cbz	r2, 800b504 <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	f043 0308 	orr.w	r3, r3, #8
 800b502:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b504:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	03d2      	lsls	r2, r2, #15
 800b50a:	d503      	bpl.n	800b514 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b512:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800b514:	f1be 0f00 	cmp.w	lr, #0
 800b518:	d005      	beq.n	800b526 <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b51a:	f8de 3000 	ldr.w	r3, [lr]
 800b51e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b522:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800b526:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b528:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800b52a:	f043 0301 	orr.w	r3, r3, #1
 800b52e:	602b      	str	r3, [r5, #0]
}
 800b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b534:	40020040 	.word	0x40020040
 800b538:	40020058 	.word	0x40020058
 800b53c:	400200b8 	.word	0x400200b8
 800b540:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b544:	4f65      	ldr	r7, [pc, #404]	; (800b6dc <HAL_DMA_Start_IT+0x344>)
 800b546:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800b6e4 <HAL_DMA_Start_IT+0x34c>
 800b54a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800b6e8 <HAL_DMA_Start_IT+0x350>
 800b54e:	4575      	cmp	r5, lr
 800b550:	bf18      	it	ne
 800b552:	42bd      	cmpne	r5, r7
 800b554:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 800b558:	bf0c      	ite	eq
 800b55a:	2701      	moveq	r7, #1
 800b55c:	2700      	movne	r7, #0
 800b55e:	4565      	cmp	r5, ip
 800b560:	bf08      	it	eq
 800b562:	f047 0701 	orreq.w	r7, r7, #1
 800b566:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800b56a:	4575      	cmp	r5, lr
 800b56c:	bf08      	it	eq
 800b56e:	f047 0701 	orreq.w	r7, r7, #1
 800b572:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b576:	4565      	cmp	r5, ip
 800b578:	bf08      	it	eq
 800b57a:	f047 0701 	orreq.w	r7, r7, #1
 800b57e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800b582:	4575      	cmp	r5, lr
 800b584:	bf08      	it	eq
 800b586:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800b58a:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b58e:	4565      	cmp	r5, ip
 800b590:	bf08      	it	eq
 800b592:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800b596:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b59a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800b59e:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b5a2:	b917      	cbnz	r7, 800b5aa <HAL_DMA_Start_IT+0x212>
 800b5a4:	4f4e      	ldr	r7, [pc, #312]	; (800b6e0 <HAL_DMA_Start_IT+0x348>)
 800b5a6:	42bd      	cmp	r5, r7
 800b5a8:	d10d      	bne.n	800b5c6 <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b5aa:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800b5ac:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 800b5b0:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800b5b2:	f1be 0f00 	cmp.w	lr, #0
 800b5b6:	d002      	beq.n	800b5be <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b5b8:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 800b5bc:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b5be:	f1ba 0f00 	cmp.w	sl, #0
 800b5c2:	f47f af78 	bne.w	800b4b6 <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b5c6:	4f47      	ldr	r7, [pc, #284]	; (800b6e4 <HAL_DMA_Start_IT+0x34c>)
 800b5c8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800b6dc <HAL_DMA_Start_IT+0x344>
 800b5cc:	f8df e118 	ldr.w	lr, [pc, #280]	; 800b6e8 <HAL_DMA_Start_IT+0x350>
 800b5d0:	4545      	cmp	r5, r8
 800b5d2:	bf18      	it	ne
 800b5d4:	42bd      	cmpne	r5, r7
 800b5d6:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800b5da:	bf0c      	ite	eq
 800b5dc:	2701      	moveq	r7, #1
 800b5de:	2700      	movne	r7, #0
 800b5e0:	4575      	cmp	r5, lr
 800b5e2:	bf08      	it	eq
 800b5e4:	f047 0701 	orreq.w	r7, r7, #1
 800b5e8:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b5ec:	4545      	cmp	r5, r8
 800b5ee:	bf08      	it	eq
 800b5f0:	f047 0701 	orreq.w	r7, r7, #1
 800b5f4:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800b5f8:	4575      	cmp	r5, lr
 800b5fa:	bf08      	it	eq
 800b5fc:	f047 0701 	orreq.w	r7, r7, #1
 800b600:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b604:	4545      	cmp	r5, r8
 800b606:	bf08      	it	eq
 800b608:	f047 0701 	orreq.w	r7, r7, #1
 800b60c:	4575      	cmp	r5, lr
 800b60e:	bf08      	it	eq
 800b610:	f047 0701 	orreq.w	r7, r7, #1
 800b614:	b917      	cbnz	r7, 800b61c <HAL_DMA_Start_IT+0x284>
 800b616:	4f32      	ldr	r7, [pc, #200]	; (800b6e0 <HAL_DMA_Start_IT+0x348>)
 800b618:	42bd      	cmp	r5, r7
 800b61a:	d155      	bne.n	800b6c8 <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b61c:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800b61e:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b622:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b626:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b62a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b62e:	fa0e f707 	lsl.w	r7, lr, r7
 800b632:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b636:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b638:	d043      	beq.n	800b6c2 <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b63a:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b63c:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b63e:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b640:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b642:	f023 030e 	bic.w	r3, r3, #14
 800b646:	f043 030a 	orr.w	r3, r3, #10
 800b64a:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b64c:	2a00      	cmp	r2, #0
 800b64e:	d02d      	beq.n	800b6ac <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	f043 0304 	orr.w	r3, r3, #4
 800b656:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b658:	4b20      	ldr	r3, [pc, #128]	; (800b6dc <HAL_DMA_Start_IT+0x344>)
 800b65a:	4a22      	ldr	r2, [pc, #136]	; (800b6e4 <HAL_DMA_Start_IT+0x34c>)
 800b65c:	4922      	ldr	r1, [pc, #136]	; (800b6e8 <HAL_DMA_Start_IT+0x350>)
 800b65e:	4295      	cmp	r5, r2
 800b660:	bf18      	it	ne
 800b662:	429d      	cmpne	r5, r3
 800b664:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800b668:	bf0c      	ite	eq
 800b66a:	2301      	moveq	r3, #1
 800b66c:	2300      	movne	r3, #0
 800b66e:	428d      	cmp	r5, r1
 800b670:	bf08      	it	eq
 800b672:	f043 0301 	orreq.w	r3, r3, #1
 800b676:	3128      	adds	r1, #40	; 0x28
 800b678:	4295      	cmp	r5, r2
 800b67a:	bf08      	it	eq
 800b67c:	f043 0301 	orreq.w	r3, r3, #1
 800b680:	3228      	adds	r2, #40	; 0x28
 800b682:	428d      	cmp	r5, r1
 800b684:	bf08      	it	eq
 800b686:	f043 0301 	orreq.w	r3, r3, #1
 800b68a:	3128      	adds	r1, #40	; 0x28
 800b68c:	4295      	cmp	r5, r2
 800b68e:	bf08      	it	eq
 800b690:	f043 0301 	orreq.w	r3, r3, #1
 800b694:	3228      	adds	r2, #40	; 0x28
 800b696:	428d      	cmp	r5, r1
 800b698:	bf08      	it	eq
 800b69a:	f043 0301 	orreq.w	r3, r3, #1
 800b69e:	4295      	cmp	r5, r2
 800b6a0:	bf08      	it	eq
 800b6a2:	f043 0301 	orreq.w	r3, r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f43f af3d 	beq.w	800b526 <HAL_DMA_Start_IT+0x18e>
 800b6ac:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 800b6b0:	e728      	b.n	800b504 <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 800b6b2:	2001      	movs	r0, #1
}
 800b6b4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800b6b6:	2002      	movs	r0, #2
}
 800b6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b6bc:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b6be:	60e9      	str	r1, [r5, #12]
 800b6c0:	e70f      	b.n	800b4e2 <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b6c2:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b6c4:	60e9      	str	r1, [r5, #12]
 800b6c6:	e7ba      	b.n	800b63e <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b6c8:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b6ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b6cc:	f023 030e 	bic.w	r3, r3, #14
 800b6d0:	f043 030a 	orr.w	r3, r3, #10
 800b6d4:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	d1ba      	bne.n	800b650 <HAL_DMA_Start_IT+0x2b8>
 800b6da:	e7bd      	b.n	800b658 <HAL_DMA_Start_IT+0x2c0>
 800b6dc:	5802541c 	.word	0x5802541c
 800b6e0:	58025494 	.word	0x58025494
 800b6e4:	58025408 	.word	0x58025408
 800b6e8:	58025430 	.word	0x58025430

0800b6ec <HAL_DMA_Abort>:
{
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800b6f0:	f7fe ff2c 	bl	800a54c <HAL_GetTick>
  if(hdma == NULL)
 800b6f4:	2d00      	cmp	r5, #0
 800b6f6:	f000 8128 	beq.w	800b94a <HAL_DMA_Abort+0x25e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b6fa:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	f040 80e1 	bne.w	800b8c6 <HAL_DMA_Abort+0x1da>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b704:	682c      	ldr	r4, [r5, #0]
 800b706:	4606      	mov	r6, r0
 800b708:	4b91      	ldr	r3, [pc, #580]	; (800b950 <HAL_DMA_Abort+0x264>)
 800b70a:	4992      	ldr	r1, [pc, #584]	; (800b954 <HAL_DMA_Abort+0x268>)
 800b70c:	4a92      	ldr	r2, [pc, #584]	; (800b958 <HAL_DMA_Abort+0x26c>)
 800b70e:	428c      	cmp	r4, r1
 800b710:	bf18      	it	ne
 800b712:	429c      	cmpne	r4, r3
 800b714:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800b718:	4890      	ldr	r0, [pc, #576]	; (800b95c <HAL_DMA_Abort+0x270>)
 800b71a:	bf0c      	ite	eq
 800b71c:	2301      	moveq	r3, #1
 800b71e:	2300      	movne	r3, #0
 800b720:	4294      	cmp	r4, r2
 800b722:	bf08      	it	eq
 800b724:	f043 0301 	orreq.w	r3, r3, #1
 800b728:	3248      	adds	r2, #72	; 0x48
 800b72a:	428c      	cmp	r4, r1
 800b72c:	bf08      	it	eq
 800b72e:	f043 0301 	orreq.w	r3, r3, #1
 800b732:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800b736:	4284      	cmp	r4, r0
 800b738:	bf08      	it	eq
 800b73a:	f043 0301 	orreq.w	r3, r3, #1
 800b73e:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800b742:	4294      	cmp	r4, r2
 800b744:	bf08      	it	eq
 800b746:	f043 0301 	orreq.w	r3, r3, #1
 800b74a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800b74e:	428c      	cmp	r4, r1
 800b750:	bf08      	it	eq
 800b752:	f043 0301 	orreq.w	r3, r3, #1
 800b756:	3148      	adds	r1, #72	; 0x48
 800b758:	4284      	cmp	r4, r0
 800b75a:	bf08      	it	eq
 800b75c:	f043 0301 	orreq.w	r3, r3, #1
 800b760:	3048      	adds	r0, #72	; 0x48
 800b762:	4294      	cmp	r4, r2
 800b764:	bf08      	it	eq
 800b766:	f043 0301 	orreq.w	r3, r3, #1
 800b76a:	3248      	adds	r2, #72	; 0x48
 800b76c:	428c      	cmp	r4, r1
 800b76e:	bf08      	it	eq
 800b770:	f043 0301 	orreq.w	r3, r3, #1
 800b774:	3148      	adds	r1, #72	; 0x48
 800b776:	4284      	cmp	r4, r0
 800b778:	bf08      	it	eq
 800b77a:	f043 0301 	orreq.w	r3, r3, #1
 800b77e:	3048      	adds	r0, #72	; 0x48
 800b780:	4294      	cmp	r4, r2
 800b782:	bf08      	it	eq
 800b784:	f043 0301 	orreq.w	r3, r3, #1
 800b788:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800b78c:	428c      	cmp	r4, r1
 800b78e:	bf08      	it	eq
 800b790:	f043 0301 	orreq.w	r3, r3, #1
 800b794:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800b798:	4284      	cmp	r4, r0
 800b79a:	bf08      	it	eq
 800b79c:	f043 0301 	orreq.w	r3, r3, #1
 800b7a0:	428c      	cmp	r4, r1
 800b7a2:	bf18      	it	ne
 800b7a4:	4294      	cmpne	r4, r2
 800b7a6:	bf0c      	ite	eq
 800b7a8:	2201      	moveq	r2, #1
 800b7aa:	2200      	movne	r2, #0
 800b7ac:	d002      	beq.n	800b7b4 <HAL_DMA_Abort+0xc8>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8090 	beq.w	800b8d4 <HAL_DMA_Abort+0x1e8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b7b4:	6821      	ldr	r1, [r4, #0]
 800b7b6:	f021 011e 	bic.w	r1, r1, #30
 800b7ba:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b7bc:	6961      	ldr	r1, [r4, #20]
 800b7be:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b7c2:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	f000 80b0 	beq.w	800b92a <HAL_DMA_Abort+0x23e>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b7ca:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800b7cc:	6813      	ldr	r3, [r2, #0]
 800b7ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7d2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	f023 0301 	bic.w	r3, r3, #1
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	e005      	b.n	800b7ea <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b7de:	f7fe feb5 	bl	800a54c <HAL_GetTick>
 800b7e2:	1b83      	subs	r3, r0, r6
 800b7e4:	2b05      	cmp	r3, #5
 800b7e6:	f200 80a6 	bhi.w	800b936 <HAL_DMA_Abort+0x24a>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	07db      	lsls	r3, r3, #31
 800b7ee:	d4f6      	bmi.n	800b7de <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b7f0:	682a      	ldr	r2, [r5, #0]
 800b7f2:	4b57      	ldr	r3, [pc, #348]	; (800b950 <HAL_DMA_Abort+0x264>)
 800b7f4:	4957      	ldr	r1, [pc, #348]	; (800b954 <HAL_DMA_Abort+0x268>)
 800b7f6:	4c58      	ldr	r4, [pc, #352]	; (800b958 <HAL_DMA_Abort+0x26c>)
 800b7f8:	428a      	cmp	r2, r1
 800b7fa:	bf18      	it	ne
 800b7fc:	429a      	cmpne	r2, r3
 800b7fe:	4858      	ldr	r0, [pc, #352]	; (800b960 <HAL_DMA_Abort+0x274>)
 800b800:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800b804:	bf0c      	ite	eq
 800b806:	2301      	moveq	r3, #1
 800b808:	2300      	movne	r3, #0
 800b80a:	42a2      	cmp	r2, r4
 800b80c:	bf08      	it	eq
 800b80e:	f043 0301 	orreq.w	r3, r3, #1
 800b812:	3448      	adds	r4, #72	; 0x48
 800b814:	4282      	cmp	r2, r0
 800b816:	bf08      	it	eq
 800b818:	f043 0301 	orreq.w	r3, r3, #1
 800b81c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800b820:	428a      	cmp	r2, r1
 800b822:	bf08      	it	eq
 800b824:	f043 0301 	orreq.w	r3, r3, #1
 800b828:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800b82c:	42a2      	cmp	r2, r4
 800b82e:	bf08      	it	eq
 800b830:	f043 0301 	orreq.w	r3, r3, #1
 800b834:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800b838:	4282      	cmp	r2, r0
 800b83a:	bf08      	it	eq
 800b83c:	f043 0301 	orreq.w	r3, r3, #1
 800b840:	3048      	adds	r0, #72	; 0x48
 800b842:	428a      	cmp	r2, r1
 800b844:	bf08      	it	eq
 800b846:	f043 0301 	orreq.w	r3, r3, #1
 800b84a:	3148      	adds	r1, #72	; 0x48
 800b84c:	42a2      	cmp	r2, r4
 800b84e:	bf08      	it	eq
 800b850:	f043 0301 	orreq.w	r3, r3, #1
 800b854:	3448      	adds	r4, #72	; 0x48
 800b856:	4282      	cmp	r2, r0
 800b858:	bf08      	it	eq
 800b85a:	f043 0301 	orreq.w	r3, r3, #1
 800b85e:	3048      	adds	r0, #72	; 0x48
 800b860:	428a      	cmp	r2, r1
 800b862:	bf08      	it	eq
 800b864:	f043 0301 	orreq.w	r3, r3, #1
 800b868:	3148      	adds	r1, #72	; 0x48
 800b86a:	42a2      	cmp	r2, r4
 800b86c:	bf08      	it	eq
 800b86e:	f043 0301 	orreq.w	r3, r3, #1
 800b872:	4282      	cmp	r2, r0
 800b874:	bf08      	it	eq
 800b876:	f043 0301 	orreq.w	r3, r3, #1
 800b87a:	428a      	cmp	r2, r1
 800b87c:	bf08      	it	eq
 800b87e:	f043 0301 	orreq.w	r3, r3, #1
 800b882:	b933      	cbnz	r3, 800b892 <HAL_DMA_Abort+0x1a6>
 800b884:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800b888:	4b36      	ldr	r3, [pc, #216]	; (800b964 <HAL_DMA_Abort+0x278>)
 800b88a:	429a      	cmp	r2, r3
 800b88c:	bf18      	it	ne
 800b88e:	428a      	cmpne	r2, r1
 800b890:	d172      	bne.n	800b978 <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b892:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800b894:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b896:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b898:	f002 021f 	and.w	r2, r2, #31
 800b89c:	4093      	lsls	r3, r2
 800b89e:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800b8a0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b8a2:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800b8a6:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800b8a8:	b133      	cbz	r3, 800b8b8 <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b8aa:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8ac:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800b8ae:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b8b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8b4:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8b6:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800b8b8:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800b8ba:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800b8bc:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800b8c0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8c6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800b8c8:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b8ca:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8cc:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800b8ce:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b8d4:	4a24      	ldr	r2, [pc, #144]	; (800b968 <HAL_DMA_Abort+0x27c>)
 800b8d6:	4925      	ldr	r1, [pc, #148]	; (800b96c <HAL_DMA_Abort+0x280>)
 800b8d8:	4825      	ldr	r0, [pc, #148]	; (800b970 <HAL_DMA_Abort+0x284>)
 800b8da:	428c      	cmp	r4, r1
 800b8dc:	bf18      	it	ne
 800b8de:	4294      	cmpne	r4, r2
 800b8e0:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800b8e4:	bf0c      	ite	eq
 800b8e6:	2201      	moveq	r2, #1
 800b8e8:	2200      	movne	r2, #0
 800b8ea:	4284      	cmp	r4, r0
 800b8ec:	bf08      	it	eq
 800b8ee:	f042 0201 	orreq.w	r2, r2, #1
 800b8f2:	3028      	adds	r0, #40	; 0x28
 800b8f4:	428c      	cmp	r4, r1
 800b8f6:	bf08      	it	eq
 800b8f8:	f042 0201 	orreq.w	r2, r2, #1
 800b8fc:	3128      	adds	r1, #40	; 0x28
 800b8fe:	4284      	cmp	r4, r0
 800b900:	bf08      	it	eq
 800b902:	f042 0201 	orreq.w	r2, r2, #1
 800b906:	3028      	adds	r0, #40	; 0x28
 800b908:	428c      	cmp	r4, r1
 800b90a:	bf08      	it	eq
 800b90c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b910:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b912:	4284      	cmp	r4, r0
 800b914:	bf08      	it	eq
 800b916:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b91a:	f021 010e 	bic.w	r1, r1, #14
 800b91e:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b920:	b91a      	cbnz	r2, 800b92a <HAL_DMA_Abort+0x23e>
 800b922:	4a14      	ldr	r2, [pc, #80]	; (800b974 <HAL_DMA_Abort+0x288>)
 800b924:	4294      	cmp	r4, r2
 800b926:	f47f af55 	bne.w	800b7d4 <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b92a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800b92c:	680a      	ldr	r2, [r1, #0]
 800b92e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b932:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800b934:	e74e      	b.n	800b7d4 <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b936:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800b938:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800b93a:	2303      	movs	r3, #3
        return HAL_ERROR;
 800b93c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b93e:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800b940:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800b944:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800b948:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800b94a:	2001      	movs	r0, #1
}
 800b94c:	bd70      	pop	{r4, r5, r6, pc}
 800b94e:	bf00      	nop
 800b950:	40020058 	.word	0x40020058
 800b954:	40020040 	.word	0x40020040
 800b958:	40020070 	.word	0x40020070
 800b95c:	400200a0 	.word	0x400200a0
 800b960:	40020088 	.word	0x40020088
 800b964:	40020028 	.word	0x40020028
 800b968:	5802541c 	.word	0x5802541c
 800b96c:	58025408 	.word	0x58025408
 800b970:	58025430 	.word	0x58025430
 800b974:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b978:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800b97c:	4b18      	ldr	r3, [pc, #96]	; (800b9e0 <HAL_DMA_Abort+0x2f4>)
 800b97e:	4819      	ldr	r0, [pc, #100]	; (800b9e4 <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b980:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b982:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800b986:	42a2      	cmp	r2, r4
 800b988:	bf18      	it	ne
 800b98a:	429a      	cmpne	r2, r3
 800b98c:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 800b990:	bf0c      	ite	eq
 800b992:	2301      	moveq	r3, #1
 800b994:	2300      	movne	r3, #0
 800b996:	4282      	cmp	r2, r0
 800b998:	bf08      	it	eq
 800b99a:	f043 0301 	orreq.w	r3, r3, #1
 800b99e:	3028      	adds	r0, #40	; 0x28
 800b9a0:	42a2      	cmp	r2, r4
 800b9a2:	bf08      	it	eq
 800b9a4:	f043 0301 	orreq.w	r3, r3, #1
 800b9a8:	3428      	adds	r4, #40	; 0x28
 800b9aa:	4282      	cmp	r2, r0
 800b9ac:	bf08      	it	eq
 800b9ae:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b9b2:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b9b4:	42a2      	cmp	r2, r4
 800b9b6:	bf08      	it	eq
 800b9b8:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b9bc:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b9c0:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b9c2:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b9c4:	42a2      	cmp	r2, r4
 800b9c6:	bf08      	it	eq
 800b9c8:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b9cc:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b9ce:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f47f af65 	bne.w	800b8a0 <HAL_DMA_Abort+0x1b4>
 800b9d6:	4b04      	ldr	r3, [pc, #16]	; (800b9e8 <HAL_DMA_Abort+0x2fc>)
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	f43f af61 	beq.w	800b8a0 <HAL_DMA_Abort+0x1b4>
 800b9de:	e76b      	b.n	800b8b8 <HAL_DMA_Abort+0x1cc>
 800b9e0:	5802541c 	.word	0x5802541c
 800b9e4:	58025430 	.word	0x58025430
 800b9e8:	58025494 	.word	0x58025494

0800b9ec <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d060      	beq.n	800bab2 <HAL_DMA_Abort_IT+0xc6>
{
 800b9f0:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b9f2:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2a02      	cmp	r2, #2
 800b9fa:	d156      	bne.n	800baaa <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b9fc:	6801      	ldr	r1, [r0, #0]
 800b9fe:	4a59      	ldr	r2, [pc, #356]	; (800bb64 <HAL_DMA_Abort_IT+0x178>)
 800ba00:	4291      	cmp	r1, r2
 800ba02:	d049      	beq.n	800ba98 <HAL_DMA_Abort_IT+0xac>
 800ba04:	3218      	adds	r2, #24
 800ba06:	4291      	cmp	r1, r2
 800ba08:	d046      	beq.n	800ba98 <HAL_DMA_Abort_IT+0xac>
 800ba0a:	3230      	adds	r2, #48	; 0x30
 800ba0c:	4856      	ldr	r0, [pc, #344]	; (800bb68 <HAL_DMA_Abort_IT+0x17c>)
 800ba0e:	4c57      	ldr	r4, [pc, #348]	; (800bb6c <HAL_DMA_Abort_IT+0x180>)
 800ba10:	4281      	cmp	r1, r0
 800ba12:	bf18      	it	ne
 800ba14:	4291      	cmpne	r1, r2
 800ba16:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800ba1a:	4d55      	ldr	r5, [pc, #340]	; (800bb70 <HAL_DMA_Abort_IT+0x184>)
 800ba1c:	bf0c      	ite	eq
 800ba1e:	2201      	moveq	r2, #1
 800ba20:	2200      	movne	r2, #0
 800ba22:	42a1      	cmp	r1, r4
 800ba24:	bf08      	it	eq
 800ba26:	f042 0201 	orreq.w	r2, r2, #1
 800ba2a:	3448      	adds	r4, #72	; 0x48
 800ba2c:	4281      	cmp	r1, r0
 800ba2e:	bf08      	it	eq
 800ba30:	f042 0201 	orreq.w	r2, r2, #1
 800ba34:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800ba38:	42a9      	cmp	r1, r5
 800ba3a:	bf08      	it	eq
 800ba3c:	f042 0201 	orreq.w	r2, r2, #1
 800ba40:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800ba44:	42a1      	cmp	r1, r4
 800ba46:	bf08      	it	eq
 800ba48:	f042 0201 	orreq.w	r2, r2, #1
 800ba4c:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800ba50:	4281      	cmp	r1, r0
 800ba52:	bf08      	it	eq
 800ba54:	f042 0201 	orreq.w	r2, r2, #1
 800ba58:	3048      	adds	r0, #72	; 0x48
 800ba5a:	42a9      	cmp	r1, r5
 800ba5c:	bf08      	it	eq
 800ba5e:	f042 0201 	orreq.w	r2, r2, #1
 800ba62:	3548      	adds	r5, #72	; 0x48
 800ba64:	42a1      	cmp	r1, r4
 800ba66:	bf08      	it	eq
 800ba68:	f042 0201 	orreq.w	r2, r2, #1
 800ba6c:	3448      	adds	r4, #72	; 0x48
 800ba6e:	4281      	cmp	r1, r0
 800ba70:	bf08      	it	eq
 800ba72:	f042 0201 	orreq.w	r2, r2, #1
 800ba76:	3048      	adds	r0, #72	; 0x48
 800ba78:	42a9      	cmp	r1, r5
 800ba7a:	bf08      	it	eq
 800ba7c:	f042 0201 	orreq.w	r2, r2, #1
 800ba80:	42a1      	cmp	r1, r4
 800ba82:	bf08      	it	eq
 800ba84:	f042 0201 	orreq.w	r2, r2, #1
 800ba88:	4281      	cmp	r1, r0
 800ba8a:	bf08      	it	eq
 800ba8c:	f042 0201 	orreq.w	r2, r2, #1
 800ba90:	b912      	cbnz	r2, 800ba98 <HAL_DMA_Abort_IT+0xac>
 800ba92:	4a38      	ldr	r2, [pc, #224]	; (800bb74 <HAL_DMA_Abort_IT+0x188>)
 800ba94:	4291      	cmp	r1, r2
 800ba96:	d10e      	bne.n	800bab6 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba98:	2204      	movs	r2, #4
  return HAL_OK;
 800ba9a:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800baa0:	680b      	ldr	r3, [r1, #0]
 800baa2:	f023 0301 	bic.w	r3, r3, #1
 800baa6:	600b      	str	r3, [r1, #0]
}
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800baaa:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800baac:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800baae:	655a      	str	r2, [r3, #84]	; 0x54
}
 800bab0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800bab2:	2001      	movs	r0, #1
}
 800bab4:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bab6:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800baba:	4a2f      	ldr	r2, [pc, #188]	; (800bb78 <HAL_DMA_Abort_IT+0x18c>)
 800babc:	482f      	ldr	r0, [pc, #188]	; (800bb7c <HAL_DMA_Abort_IT+0x190>)
 800babe:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800bac2:	4d2f      	ldr	r5, [pc, #188]	; (800bb80 <HAL_DMA_Abort_IT+0x194>)
 800bac4:	42a1      	cmp	r1, r4
 800bac6:	bf18      	it	ne
 800bac8:	4291      	cmpne	r1, r2
 800baca:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800bace:	bf0c      	ite	eq
 800bad0:	2201      	moveq	r2, #1
 800bad2:	2200      	movne	r2, #0
 800bad4:	4281      	cmp	r1, r0
 800bad6:	bf08      	it	eq
 800bad8:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800badc:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bade:	42a9      	cmp	r1, r5
 800bae0:	bf08      	it	eq
 800bae2:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bae6:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800baea:	3528      	adds	r5, #40	; 0x28
 800baec:	42a1      	cmp	r1, r4
 800baee:	bf08      	it	eq
 800baf0:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800baf4:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800baf6:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800baf8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bafa:	42a9      	cmp	r1, r5
 800bafc:	bf08      	it	eq
 800bafe:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800bb02:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bb06:	42a1      	cmp	r1, r4
 800bb08:	bf08      	it	eq
 800bb0a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800bb0e:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bb10:	b912      	cbnz	r2, 800bb18 <HAL_DMA_Abort_IT+0x12c>
 800bb12:	4a1c      	ldr	r2, [pc, #112]	; (800bb84 <HAL_DMA_Abort_IT+0x198>)
 800bb14:	4291      	cmp	r1, r2
 800bb16:	d117      	bne.n	800bb48 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb18:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb1e:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bb20:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb24:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bb2a:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb2c:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb2e:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800bb30:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bb34:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb36:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800bb38:	b132      	cbz	r2, 800bb48 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb3a:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800bb3e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb40:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bb44:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb46:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800bb48:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800bb4a:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800bb4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800bb4e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800bb52:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800bb56:	b11a      	cbz	r2, 800bb60 <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 800bb58:	4618      	mov	r0, r3
 800bb5a:	4790      	blx	r2
  return HAL_OK;
 800bb5c:	4620      	mov	r0, r4
}
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800bb60:	4610      	mov	r0, r2
}
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	40020010 	.word	0x40020010
 800bb68:	40020040 	.word	0x40020040
 800bb6c:	40020070 	.word	0x40020070
 800bb70:	400200a0 	.word	0x400200a0
 800bb74:	400204b8 	.word	0x400204b8
 800bb78:	5802541c 	.word	0x5802541c
 800bb7c:	58025430 	.word	0x58025430
 800bb80:	58025444 	.word	0x58025444
 800bb84:	58025494 	.word	0x58025494

0800bb88 <HAL_DMA_IRQHandler>:
{
 800bb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bb8c:	4a9f      	ldr	r2, [pc, #636]	; (800be0c <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 800bb8e:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bb90:	4e9f      	ldr	r6, [pc, #636]	; (800be10 <HAL_DMA_IRQHandler+0x288>)
{
 800bb92:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bb94:	6803      	ldr	r3, [r0, #0]
{
 800bb96:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800bb98:	499e      	ldr	r1, [pc, #632]	; (800be14 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb9a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	bf18      	it	ne
 800bba0:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 800bba2:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bba4:	bf08      	it	eq
 800bba6:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800bba8:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 800bbaa:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bbac:	bf18      	it	ne
 800bbae:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 800bbb0:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bbb2:	d04a      	beq.n	800bc4a <HAL_DMA_IRQHandler+0xc2>
 800bbb4:	3230      	adds	r2, #48	; 0x30
 800bbb6:	f8df e26c 	ldr.w	lr, [pc, #620]	; 800be24 <HAL_DMA_IRQHandler+0x29c>
 800bbba:	4897      	ldr	r0, [pc, #604]	; (800be18 <HAL_DMA_IRQHandler+0x290>)
 800bbbc:	4573      	cmp	r3, lr
 800bbbe:	bf18      	it	ne
 800bbc0:	4293      	cmpne	r3, r2
 800bbc2:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800bbc6:	bf0c      	ite	eq
 800bbc8:	2201      	moveq	r2, #1
 800bbca:	2200      	movne	r2, #0
 800bbcc:	4283      	cmp	r3, r0
 800bbce:	bf08      	it	eq
 800bbd0:	f042 0201 	orreq.w	r2, r2, #1
 800bbd4:	3030      	adds	r0, #48	; 0x30
 800bbd6:	4573      	cmp	r3, lr
 800bbd8:	bf08      	it	eq
 800bbda:	f042 0201 	orreq.w	r2, r2, #1
 800bbde:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800bbe2:	4283      	cmp	r3, r0
 800bbe4:	bf08      	it	eq
 800bbe6:	f042 0201 	orreq.w	r2, r2, #1
 800bbea:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800bbee:	4573      	cmp	r3, lr
 800bbf0:	bf08      	it	eq
 800bbf2:	f042 0201 	orreq.w	r2, r2, #1
 800bbf6:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800bbfa:	4283      	cmp	r3, r0
 800bbfc:	bf08      	it	eq
 800bbfe:	f042 0201 	orreq.w	r2, r2, #1
 800bc02:	3030      	adds	r0, #48	; 0x30
 800bc04:	4573      	cmp	r3, lr
 800bc06:	bf08      	it	eq
 800bc08:	f042 0201 	orreq.w	r2, r2, #1
 800bc0c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800bc10:	4283      	cmp	r3, r0
 800bc12:	bf08      	it	eq
 800bc14:	f042 0201 	orreq.w	r2, r2, #1
 800bc18:	3030      	adds	r0, #48	; 0x30
 800bc1a:	4573      	cmp	r3, lr
 800bc1c:	bf08      	it	eq
 800bc1e:	f042 0201 	orreq.w	r2, r2, #1
 800bc22:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800bc26:	4283      	cmp	r3, r0
 800bc28:	bf08      	it	eq
 800bc2a:	f042 0201 	orreq.w	r2, r2, #1
 800bc2e:	3030      	adds	r0, #48	; 0x30
 800bc30:	4573      	cmp	r3, lr
 800bc32:	bf08      	it	eq
 800bc34:	f042 0201 	orreq.w	r2, r2, #1
 800bc38:	4283      	cmp	r3, r0
 800bc3a:	bf08      	it	eq
 800bc3c:	f042 0201 	orreq.w	r2, r2, #1
 800bc40:	b91a      	cbnz	r2, 800bc4a <HAL_DMA_IRQHandler+0xc2>
 800bc42:	4a76      	ldr	r2, [pc, #472]	; (800be1c <HAL_DMA_IRQHandler+0x294>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	f040 820b 	bne.w	800c060 <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bc4a:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 800bc4e:	2208      	movs	r2, #8
 800bc50:	f001 0c1f 	and.w	ip, r1, #31
 800bc54:	fa02 f20c 	lsl.w	r2, r2, ip
 800bc58:	4217      	tst	r7, r2
 800bc5a:	f040 818d 	bne.w	800bf78 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bc5e:	fa27 f20c 	lsr.w	r2, r7, ip
 800bc62:	07d2      	lsls	r2, r2, #31
 800bc64:	d50c      	bpl.n	800bc80 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800bc66:	695a      	ldr	r2, [r3, #20]
 800bc68:	0610      	lsls	r0, r2, #24
 800bc6a:	d509      	bpl.n	800bc80 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	fa02 f20c 	lsl.w	r2, r2, ip
 800bc72:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bc74:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800bc78:	f042 0202 	orr.w	r2, r2, #2
 800bc7c:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bc80:	f04f 0e04 	mov.w	lr, #4
 800bc84:	fa0e f00c 	lsl.w	r0, lr, ip
 800bc88:	4238      	tst	r0, r7
 800bc8a:	d05b      	beq.n	800bd44 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800bc8c:	2e00      	cmp	r6, #0
 800bc8e:	d14f      	bne.n	800bd30 <HAL_DMA_IRQHandler+0x1a8>
 800bc90:	4a63      	ldr	r2, [pc, #396]	; (800be20 <HAL_DMA_IRQHandler+0x298>)
 800bc92:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800be24 <HAL_DMA_IRQHandler+0x29c>
 800bc96:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800be18 <HAL_DMA_IRQHandler+0x290>
 800bc9a:	454b      	cmp	r3, r9
 800bc9c:	bf18      	it	ne
 800bc9e:	4293      	cmpne	r3, r2
 800bca0:	f109 0948 	add.w	r9, r9, #72	; 0x48
 800bca4:	bf0c      	ite	eq
 800bca6:	2201      	moveq	r2, #1
 800bca8:	2200      	movne	r2, #0
 800bcaa:	4543      	cmp	r3, r8
 800bcac:	bf08      	it	eq
 800bcae:	f042 0201 	orreq.w	r2, r2, #1
 800bcb2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bcb6:	454b      	cmp	r3, r9
 800bcb8:	bf08      	it	eq
 800bcba:	f042 0201 	orreq.w	r2, r2, #1
 800bcbe:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bcc2:	4543      	cmp	r3, r8
 800bcc4:	bf08      	it	eq
 800bcc6:	f042 0201 	orreq.w	r2, r2, #1
 800bcca:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800bcce:	454b      	cmp	r3, r9
 800bcd0:	bf08      	it	eq
 800bcd2:	f042 0201 	orreq.w	r2, r2, #1
 800bcd6:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800bcda:	4543      	cmp	r3, r8
 800bcdc:	bf08      	it	eq
 800bcde:	f042 0201 	orreq.w	r2, r2, #1
 800bce2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bce6:	454b      	cmp	r3, r9
 800bce8:	bf08      	it	eq
 800bcea:	f042 0201 	orreq.w	r2, r2, #1
 800bcee:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bcf2:	4543      	cmp	r3, r8
 800bcf4:	bf08      	it	eq
 800bcf6:	f042 0201 	orreq.w	r2, r2, #1
 800bcfa:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bcfe:	454b      	cmp	r3, r9
 800bd00:	bf08      	it	eq
 800bd02:	f042 0201 	orreq.w	r2, r2, #1
 800bd06:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bd0a:	4543      	cmp	r3, r8
 800bd0c:	bf08      	it	eq
 800bd0e:	f042 0201 	orreq.w	r2, r2, #1
 800bd12:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bd16:	454b      	cmp	r3, r9
 800bd18:	bf08      	it	eq
 800bd1a:	f042 0201 	orreq.w	r2, r2, #1
 800bd1e:	4543      	cmp	r3, r8
 800bd20:	bf08      	it	eq
 800bd22:	f042 0201 	orreq.w	r2, r2, #1
 800bd26:	b91a      	cbnz	r2, 800bd30 <HAL_DMA_IRQHandler+0x1a8>
 800bd28:	4a3c      	ldr	r2, [pc, #240]	; (800be1c <HAL_DMA_IRQHandler+0x294>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	f040 822f 	bne.w	800c18e <HAL_DMA_IRQHandler+0x606>
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	0792      	lsls	r2, r2, #30
 800bd34:	d506      	bpl.n	800bd44 <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bd36:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bd38:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800bd3c:	f042 0204 	orr.w	r2, r2, #4
 800bd40:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bd44:	2210      	movs	r2, #16
 800bd46:	fa02 fc0c 	lsl.w	ip, r2, ip
 800bd4a:	ea1c 0f07 	tst.w	ip, r7
 800bd4e:	d06f      	beq.n	800be30 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800bd50:	2e00      	cmp	r6, #0
 800bd52:	d146      	bne.n	800bde2 <HAL_DMA_IRQHandler+0x25a>
 800bd54:	4a32      	ldr	r2, [pc, #200]	; (800be20 <HAL_DMA_IRQHandler+0x298>)
 800bd56:	4833      	ldr	r0, [pc, #204]	; (800be24 <HAL_DMA_IRQHandler+0x29c>)
 800bd58:	4e2f      	ldr	r6, [pc, #188]	; (800be18 <HAL_DMA_IRQHandler+0x290>)
 800bd5a:	4283      	cmp	r3, r0
 800bd5c:	bf18      	it	ne
 800bd5e:	4293      	cmpne	r3, r2
 800bd60:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800bd64:	bf0c      	ite	eq
 800bd66:	2201      	moveq	r2, #1
 800bd68:	2200      	movne	r2, #0
 800bd6a:	42b3      	cmp	r3, r6
 800bd6c:	bf08      	it	eq
 800bd6e:	f042 0201 	orreq.w	r2, r2, #1
 800bd72:	3630      	adds	r6, #48	; 0x30
 800bd74:	4283      	cmp	r3, r0
 800bd76:	bf08      	it	eq
 800bd78:	f042 0201 	orreq.w	r2, r2, #1
 800bd7c:	3030      	adds	r0, #48	; 0x30
 800bd7e:	42b3      	cmp	r3, r6
 800bd80:	bf08      	it	eq
 800bd82:	f042 0201 	orreq.w	r2, r2, #1
 800bd86:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800bd8a:	4283      	cmp	r3, r0
 800bd8c:	bf08      	it	eq
 800bd8e:	f042 0201 	orreq.w	r2, r2, #1
 800bd92:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800bd96:	42b3      	cmp	r3, r6
 800bd98:	bf08      	it	eq
 800bd9a:	f042 0201 	orreq.w	r2, r2, #1
 800bd9e:	3630      	adds	r6, #48	; 0x30
 800bda0:	4283      	cmp	r3, r0
 800bda2:	bf08      	it	eq
 800bda4:	f042 0201 	orreq.w	r2, r2, #1
 800bda8:	3030      	adds	r0, #48	; 0x30
 800bdaa:	42b3      	cmp	r3, r6
 800bdac:	bf08      	it	eq
 800bdae:	f042 0201 	orreq.w	r2, r2, #1
 800bdb2:	3630      	adds	r6, #48	; 0x30
 800bdb4:	4283      	cmp	r3, r0
 800bdb6:	bf08      	it	eq
 800bdb8:	f042 0201 	orreq.w	r2, r2, #1
 800bdbc:	3030      	adds	r0, #48	; 0x30
 800bdbe:	42b3      	cmp	r3, r6
 800bdc0:	bf08      	it	eq
 800bdc2:	f042 0201 	orreq.w	r2, r2, #1
 800bdc6:	3630      	adds	r6, #48	; 0x30
 800bdc8:	4283      	cmp	r3, r0
 800bdca:	bf08      	it	eq
 800bdcc:	f042 0201 	orreq.w	r2, r2, #1
 800bdd0:	42b3      	cmp	r3, r6
 800bdd2:	bf08      	it	eq
 800bdd4:	f042 0201 	orreq.w	r2, r2, #1
 800bdd8:	b91a      	cbnz	r2, 800bde2 <HAL_DMA_IRQHandler+0x25a>
 800bdda:	4a10      	ldr	r2, [pc, #64]	; (800be1c <HAL_DMA_IRQHandler+0x294>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	f040 81de 	bne.w	800c19e <HAL_DMA_IRQHandler+0x616>
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800bde8:	b312      	cbz	r2, 800be30 <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bdea:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	0352      	lsls	r2, r2, #13
 800bdf2:	f100 818b 	bmi.w	800c10c <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	05d6      	lsls	r6, r2, #23
 800bdfa:	d403      	bmi.n	800be04 <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	f022 0208 	bic.w	r2, r2, #8
 800be02:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800be04:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800be08:	b193      	cbz	r3, 800be30 <HAL_DMA_IRQHandler+0x2a8>
 800be0a:	e00d      	b.n	800be28 <HAL_DMA_IRQHandler+0x2a0>
 800be0c:	40020028 	.word	0x40020028
 800be10:	40020010 	.word	0x40020010
 800be14:	24002f54 	.word	0x24002f54
 800be18:	40020070 	.word	0x40020070
 800be1c:	400204b8 	.word	0x400204b8
 800be20:	40020058 	.word	0x40020058
 800be24:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800be28:	4650      	mov	r0, sl
 800be2a:	4798      	blx	r3
 800be2c:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800be30:	f001 011f 	and.w	r1, r1, #31
 800be34:	2620      	movs	r6, #32
 800be36:	408e      	lsls	r6, r1
 800be38:	423e      	tst	r6, r7
 800be3a:	d06a      	beq.n	800bf12 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800be3c:	f8da 2000 	ldr.w	r2, [sl]
 800be40:	4ba7      	ldr	r3, [pc, #668]	; (800c0e0 <HAL_DMA_IRQHandler+0x558>)
 800be42:	48a8      	ldr	r0, [pc, #672]	; (800c0e4 <HAL_DMA_IRQHandler+0x55c>)
 800be44:	4fa8      	ldr	r7, [pc, #672]	; (800c0e8 <HAL_DMA_IRQHandler+0x560>)
 800be46:	4282      	cmp	r2, r0
 800be48:	bf18      	it	ne
 800be4a:	429a      	cmpne	r2, r3
 800be4c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800be50:	bf0c      	ite	eq
 800be52:	2301      	moveq	r3, #1
 800be54:	2300      	movne	r3, #0
 800be56:	42ba      	cmp	r2, r7
 800be58:	bf08      	it	eq
 800be5a:	f043 0301 	orreq.w	r3, r3, #1
 800be5e:	3730      	adds	r7, #48	; 0x30
 800be60:	4282      	cmp	r2, r0
 800be62:	bf08      	it	eq
 800be64:	f043 0301 	orreq.w	r3, r3, #1
 800be68:	3030      	adds	r0, #48	; 0x30
 800be6a:	42ba      	cmp	r2, r7
 800be6c:	bf08      	it	eq
 800be6e:	f043 0301 	orreq.w	r3, r3, #1
 800be72:	3730      	adds	r7, #48	; 0x30
 800be74:	4282      	cmp	r2, r0
 800be76:	bf08      	it	eq
 800be78:	f043 0301 	orreq.w	r3, r3, #1
 800be7c:	3030      	adds	r0, #48	; 0x30
 800be7e:	42ba      	cmp	r2, r7
 800be80:	bf08      	it	eq
 800be82:	f043 0301 	orreq.w	r3, r3, #1
 800be86:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800be8a:	4282      	cmp	r2, r0
 800be8c:	bf08      	it	eq
 800be8e:	f043 0301 	orreq.w	r3, r3, #1
 800be92:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800be96:	42ba      	cmp	r2, r7
 800be98:	bf08      	it	eq
 800be9a:	f043 0301 	orreq.w	r3, r3, #1
 800be9e:	3730      	adds	r7, #48	; 0x30
 800bea0:	4282      	cmp	r2, r0
 800bea2:	bf08      	it	eq
 800bea4:	f043 0301 	orreq.w	r3, r3, #1
 800bea8:	3030      	adds	r0, #48	; 0x30
 800beaa:	42ba      	cmp	r2, r7
 800beac:	bf08      	it	eq
 800beae:	f043 0301 	orreq.w	r3, r3, #1
 800beb2:	3730      	adds	r7, #48	; 0x30
 800beb4:	4282      	cmp	r2, r0
 800beb6:	bf08      	it	eq
 800beb8:	f043 0301 	orreq.w	r3, r3, #1
 800bebc:	3030      	adds	r0, #48	; 0x30
 800bebe:	42ba      	cmp	r2, r7
 800bec0:	bf08      	it	eq
 800bec2:	f043 0301 	orreq.w	r3, r3, #1
 800bec6:	3730      	adds	r7, #48	; 0x30
 800bec8:	4282      	cmp	r2, r0
 800beca:	bf08      	it	eq
 800becc:	f043 0301 	orreq.w	r3, r3, #1
 800bed0:	42ba      	cmp	r2, r7
 800bed2:	bf08      	it	eq
 800bed4:	f043 0301 	orreq.w	r3, r3, #1
 800bed8:	b91b      	cbnz	r3, 800bee2 <HAL_DMA_IRQHandler+0x35a>
 800beda:	4b84      	ldr	r3, [pc, #528]	; (800c0ec <HAL_DMA_IRQHandler+0x564>)
 800bedc:	429a      	cmp	r2, r3
 800bede:	f040 8173 	bne.w	800c1c8 <HAL_DMA_IRQHandler+0x640>
 800bee2:	6813      	ldr	r3, [r2, #0]
 800bee4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bee8:	b19b      	cbz	r3, 800bf12 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800beea:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800beec:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 800bef0:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bef2:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800bef4:	f000 8114 	beq.w	800c120 <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bef8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800befc:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800befe:	f000 812d 	beq.w	800c15c <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800bf02:	031c      	lsls	r4, r3, #12
 800bf04:	f140 8138 	bpl.w	800c178 <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 800bf08:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800bf0c:	b10b      	cbz	r3, 800bf12 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 800bf0e:	4650      	mov	r0, sl
 800bf10:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bf12:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 80df 	beq.w	800c0da <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800bf1c:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800bf20:	07d8      	lsls	r0, r3, #31
 800bf22:	d51f      	bpl.n	800bf64 <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 800bf24:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 800bf28:	2404      	movs	r4, #4
 800bf2a:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800bf2e:	6813      	ldr	r3, [r2, #0]
 800bf30:	f023 0301 	bic.w	r3, r3, #1
 800bf34:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bf36:	4b6e      	ldr	r3, [pc, #440]	; (800c0f0 <HAL_DMA_IRQHandler+0x568>)
 800bf38:	fba3 3505 	umull	r3, r5, r3, r5
 800bf3c:	0aad      	lsrs	r5, r5, #10
 800bf3e:	e002      	b.n	800bf46 <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800bf40:	6813      	ldr	r3, [r2, #0]
 800bf42:	07d9      	lsls	r1, r3, #31
 800bf44:	d504      	bpl.n	800bf50 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	42ab      	cmp	r3, r5
 800bf4c:	9301      	str	r3, [sp, #4]
 800bf4e:	d9f7      	bls.n	800bf40 <HAL_DMA_IRQHandler+0x3b8>
        __HAL_UNLOCK(hdma);
 800bf50:	2300      	movs	r3, #0
 800bf52:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bf56:	6813      	ldr	r3, [r2, #0]
 800bf58:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800bf5a:	bf4c      	ite	mi
 800bf5c:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800bf5e:	2301      	movpl	r3, #1
 800bf60:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800bf64:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 80b6 	beq.w	800c0da <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 800bf6e:	4650      	mov	r0, sl
}
 800bf70:	b002      	add	sp, #8
 800bf72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 800bf76:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	0740      	lsls	r0, r0, #29
 800bf7c:	d50a      	bpl.n	800bf94 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	f020 0004 	bic.w	r0, r0, #4
 800bf84:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bf86:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bf88:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800bf8c:	f042 0201 	orr.w	r2, r2, #1
 800bf90:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bf94:	fa27 f20c 	lsr.w	r2, r7, ip
 800bf98:	07d2      	lsls	r2, r2, #31
 800bf9a:	f57f ae71 	bpl.w	800bc80 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800bf9e:	4a55      	ldr	r2, [pc, #340]	; (800c0f4 <HAL_DMA_IRQHandler+0x56c>)
 800bfa0:	4851      	ldr	r0, [pc, #324]	; (800c0e8 <HAL_DMA_IRQHandler+0x560>)
 800bfa2:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800c108 <HAL_DMA_IRQHandler+0x580>
 800bfa6:	4283      	cmp	r3, r0
 800bfa8:	bf18      	it	ne
 800bfaa:	4293      	cmpne	r3, r2
 800bfac:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800bfb0:	bf0c      	ite	eq
 800bfb2:	2201      	moveq	r2, #1
 800bfb4:	2200      	movne	r2, #0
 800bfb6:	4543      	cmp	r3, r8
 800bfb8:	bf08      	it	eq
 800bfba:	f042 0201 	orreq.w	r2, r2, #1
 800bfbe:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bfc2:	4283      	cmp	r3, r0
 800bfc4:	bf08      	it	eq
 800bfc6:	f042 0201 	orreq.w	r2, r2, #1
 800bfca:	3030      	adds	r0, #48	; 0x30
 800bfcc:	4543      	cmp	r3, r8
 800bfce:	bf08      	it	eq
 800bfd0:	f042 0201 	orreq.w	r2, r2, #1
 800bfd4:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800bfd8:	4283      	cmp	r3, r0
 800bfda:	bf08      	it	eq
 800bfdc:	f042 0201 	orreq.w	r2, r2, #1
 800bfe0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800bfe4:	4543      	cmp	r3, r8
 800bfe6:	bf08      	it	eq
 800bfe8:	f042 0201 	orreq.w	r2, r2, #1
 800bfec:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bff0:	4283      	cmp	r3, r0
 800bff2:	bf08      	it	eq
 800bff4:	f042 0201 	orreq.w	r2, r2, #1
 800bff8:	3030      	adds	r0, #48	; 0x30
 800bffa:	4543      	cmp	r3, r8
 800bffc:	bf08      	it	eq
 800bffe:	f042 0201 	orreq.w	r2, r2, #1
 800c002:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c006:	4283      	cmp	r3, r0
 800c008:	bf08      	it	eq
 800c00a:	f042 0201 	orreq.w	r2, r2, #1
 800c00e:	3030      	adds	r0, #48	; 0x30
 800c010:	4543      	cmp	r3, r8
 800c012:	bf08      	it	eq
 800c014:	f042 0201 	orreq.w	r2, r2, #1
 800c018:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c01c:	4283      	cmp	r3, r0
 800c01e:	bf08      	it	eq
 800c020:	f042 0201 	orreq.w	r2, r2, #1
 800c024:	3030      	adds	r0, #48	; 0x30
 800c026:	4543      	cmp	r3, r8
 800c028:	bf08      	it	eq
 800c02a:	f042 0201 	orreq.w	r2, r2, #1
 800c02e:	4283      	cmp	r3, r0
 800c030:	bf08      	it	eq
 800c032:	f042 0201 	orreq.w	r2, r2, #1
 800c036:	2a00      	cmp	r2, #0
 800c038:	f47f ae15 	bne.w	800bc66 <HAL_DMA_IRQHandler+0xde>
 800c03c:	2e00      	cmp	r6, #0
 800c03e:	f47f ae12 	bne.w	800bc66 <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c042:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c044:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c046:	fa02 f20c 	lsl.w	r2, r2, ip
 800c04a:	423a      	tst	r2, r7
 800c04c:	f040 809f 	bne.w	800c18e <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c050:	2210      	movs	r2, #16
 800c052:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c056:	ea17 0f0c 	tst.w	r7, ip
 800c05a:	f43f aee9 	beq.w	800be30 <HAL_DMA_IRQHandler+0x2a8>
 800c05e:	e679      	b.n	800bd54 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c060:	4a25      	ldr	r2, [pc, #148]	; (800c0f8 <HAL_DMA_IRQHandler+0x570>)
 800c062:	4e26      	ldr	r6, [pc, #152]	; (800c0fc <HAL_DMA_IRQHandler+0x574>)
 800c064:	4d26      	ldr	r5, [pc, #152]	; (800c100 <HAL_DMA_IRQHandler+0x578>)
 800c066:	42b3      	cmp	r3, r6
 800c068:	bf18      	it	ne
 800c06a:	4293      	cmpne	r3, r2
 800c06c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c070:	bf0c      	ite	eq
 800c072:	2201      	moveq	r2, #1
 800c074:	2200      	movne	r2, #0
 800c076:	42ab      	cmp	r3, r5
 800c078:	bf08      	it	eq
 800c07a:	f042 0201 	orreq.w	r2, r2, #1
 800c07e:	3528      	adds	r5, #40	; 0x28
 800c080:	42b3      	cmp	r3, r6
 800c082:	bf08      	it	eq
 800c084:	f042 0201 	orreq.w	r2, r2, #1
 800c088:	3628      	adds	r6, #40	; 0x28
 800c08a:	42ab      	cmp	r3, r5
 800c08c:	bf08      	it	eq
 800c08e:	f042 0201 	orreq.w	r2, r2, #1
 800c092:	3528      	adds	r5, #40	; 0x28
 800c094:	42b3      	cmp	r3, r6
 800c096:	bf08      	it	eq
 800c098:	f042 0201 	orreq.w	r2, r2, #1
 800c09c:	42ab      	cmp	r3, r5
 800c09e:	bf08      	it	eq
 800c0a0:	f042 0201 	orreq.w	r2, r2, #1
 800c0a4:	b912      	cbnz	r2, 800c0ac <HAL_DMA_IRQHandler+0x524>
 800c0a6:	4a17      	ldr	r2, [pc, #92]	; (800c104 <HAL_DMA_IRQHandler+0x57c>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d116      	bne.n	800c0da <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c0ac:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 800c0b0:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800c0b2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c0b4:	f005 051f 	and.w	r5, r5, #31
 800c0b8:	40ae      	lsls	r6, r5
 800c0ba:	420e      	tst	r6, r1
 800c0bc:	d073      	beq.n	800c1a6 <HAL_DMA_IRQHandler+0x61e>
 800c0be:	0757      	lsls	r7, r2, #29
 800c0c0:	d571      	bpl.n	800c1a6 <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c0c2:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800c0c4:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c0c6:	f140 809f 	bpl.w	800c208 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c0ca:	03d1      	lsls	r1, r2, #15
 800c0cc:	f100 80a2 	bmi.w	800c214 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c0d0:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f47f af4a 	bne.w	800bf6e <HAL_DMA_IRQHandler+0x3e6>
}
 800c0da:	b002      	add	sp, #8
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e0:	40020010 	.word	0x40020010
 800c0e4:	40020028 	.word	0x40020028
 800c0e8:	40020040 	.word	0x40020040
 800c0ec:	400204b8 	.word	0x400204b8
 800c0f0:	1b4e81b5 	.word	0x1b4e81b5
 800c0f4:	40020058 	.word	0x40020058
 800c0f8:	58025408 	.word	0x58025408
 800c0fc:	5802541c 	.word	0x5802541c
 800c100:	58025430 	.word	0x58025430
 800c104:	58025494 	.word	0x58025494
 800c108:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	031b      	lsls	r3, r3, #12
 800c110:	f57f ae78 	bpl.w	800be04 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c114:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f47f ae85 	bne.w	800be28 <HAL_DMA_IRQHandler+0x2a0>
 800c11e:	e687      	b.n	800be30 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c120:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c124:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c128:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c12a:	6953      	ldr	r3, [r2, #20]
 800c12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c130:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c132:	b33d      	cbz	r5, 800c184 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c134:	6813      	ldr	r3, [r2, #0]
 800c136:	f023 0308 	bic.w	r3, r3, #8
 800c13a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c13c:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800c13e:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 800c140:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c142:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800c146:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c14a:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800c14c:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c150:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800c154:	2b00      	cmp	r3, #0
 800c156:	f47f af0a 	bne.w	800bf6e <HAL_DMA_IRQHandler+0x3e6>
 800c15a:	e7be      	b.n	800c0da <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c15c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800c160:	f47f aed2 	bne.w	800bf08 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c164:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800c166:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c168:	f021 0110 	bic.w	r1, r1, #16
 800c16c:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 800c16e:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800c172:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 800c176:	e6c7      	b.n	800bf08 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 800c178:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f47f aec6 	bne.w	800bf0e <HAL_DMA_IRQHandler+0x386>
 800c182:	e6c6      	b.n	800bf12 <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c184:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1d3      	bne.n	800c134 <HAL_DMA_IRQHandler+0x5ac>
 800c18c:	e7d6      	b.n	800c13c <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c18e:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c190:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c192:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c196:	ea17 0f0c 	tst.w	r7, ip
 800c19a:	f43f ae49 	beq.w	800be30 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800c1a4:	e620      	b.n	800bde8 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800c1a6:	2602      	movs	r6, #2
 800c1a8:	40ae      	lsls	r6, r5
 800c1aa:	420e      	tst	r6, r1
 800c1ac:	d010      	beq.n	800c1d0 <HAL_DMA_IRQHandler+0x648>
 800c1ae:	0797      	lsls	r7, r2, #30
 800c1b0:	d50e      	bpl.n	800c1d0 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c1b2:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c1b4:	0414      	lsls	r4, r2, #16
 800c1b6:	d533      	bpl.n	800c220 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c1b8:	03d0      	lsls	r0, r2, #15
 800c1ba:	d43d      	bmi.n	800c238 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 800c1bc:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f47f aed4 	bne.w	800bf6e <HAL_DMA_IRQHandler+0x3e6>
 800c1c6:	e788      	b.n	800c0da <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c1c8:	6813      	ldr	r3, [r2, #0]
 800c1ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c1ce:	e68b      	b.n	800bee8 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c1d0:	2608      	movs	r6, #8
 800c1d2:	40ae      	lsls	r6, r5
 800c1d4:	420e      	tst	r6, r1
 800c1d6:	d080      	beq.n	800c0da <HAL_DMA_IRQHandler+0x552>
 800c1d8:	0711      	lsls	r1, r2, #28
 800c1da:	f57f af7e 	bpl.w	800c0da <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1de:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c1e0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800c1e2:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1e4:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c1e8:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1ec:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800c1ee:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c1f2:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c1f4:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800c1f8:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800c1fc:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800c200:	2b00      	cmp	r3, #0
 800c202:	f47f aeb4 	bne.w	800bf6e <HAL_DMA_IRQHandler+0x3e6>
 800c206:	e768      	b.n	800c0da <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c208:	0692      	lsls	r2, r2, #26
 800c20a:	d403      	bmi.n	800c214 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	f022 0204 	bic.w	r2, r2, #4
 800c212:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800c214:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f47f aea8 	bne.w	800bf6e <HAL_DMA_IRQHandler+0x3e6>
 800c21e:	e75c      	b.n	800c0da <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c220:	f012 0220 	ands.w	r2, r2, #32
 800c224:	d108      	bne.n	800c238 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c226:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800c228:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c22a:	f021 010a 	bic.w	r1, r1, #10
 800c22e:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800c230:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c234:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800c238:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f ae96 	bne.w	800bf6e <HAL_DMA_IRQHandler+0x3e6>
 800c242:	e74a      	b.n	800c0da <HAL_DMA_IRQHandler+0x552>

0800c244 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop

0800c248 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800c248:	2800      	cmp	r0, #0
 800c24a:	d036      	beq.n	800c2ba <HAL_DMA2D_Init+0x72>
{
 800c24c:	b570      	push	{r4, r5, r6, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c24e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800c252:	4604      	mov	r4, r0
 800c254:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c258:	b353      	cbz	r3, 800c2b0 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c25a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c25c:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c25e:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c260:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c262:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c266:	4916      	ldr	r1, [pc, #88]	; (800c2c0 <HAL_DMA2D_Init+0x78>)
 800c268:	681e      	ldr	r6, [r3, #0]
 800c26a:	6862      	ldr	r2, [r4, #4]
 800c26c:	4031      	ands	r1, r6
 800c26e:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c270:	4814      	ldr	r0, [pc, #80]	; (800c2c4 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c272:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c274:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c276:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c278:	69a1      	ldr	r1, [r4, #24]
 800c27a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800c27c:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c27e:	4912      	ldr	r1, [pc, #72]	; (800c2c8 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c280:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c282:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c284:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c286:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c288:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c28a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c28c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c28e:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c290:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c292:	0552      	lsls	r2, r2, #21
 800c294:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c296:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c29a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800c29e:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c2a0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c2a8:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c2aa:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800c2b0:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800c2b4:	f7ff ffc6 	bl	800c244 <HAL_DMA2D_MspInit>
 800c2b8:	e7cf      	b.n	800c25a <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800c2ba:	2001      	movs	r0, #1
}
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	fff8ffbf 	.word	0xfff8ffbf
 800c2c4:	fffffef8 	.word	0xfffffef8
 800c2c8:	ffff0000 	.word	0xffff0000

0800c2cc <HAL_DMA2D_MspDeInit>:
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop

0800c2d0 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d06b      	beq.n	800c3ac <HAL_DMA2D_DeInit+0xdc>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800c2d4:	4b40      	ldr	r3, [pc, #256]	; (800c3d8 <HAL_DMA2D_DeInit+0x108>)
 800c2d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800c2da:	b570      	push	{r4, r5, r6, lr}
 800c2dc:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800c2de:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800c2e0:	06d8      	lsls	r0, r3, #27
 800c2e2:	d508      	bpl.n	800c2f6 <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	07d9      	lsls	r1, r3, #31
 800c2e8:	d418      	bmi.n	800c31c <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800c2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ec:	069a      	lsls	r2, r3, #26
 800c2ee:	d45f      	bmi.n	800c3b0 <HAL_DMA2D_DeInit+0xe0>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800c2f0:	69e3      	ldr	r3, [r4, #28]
 800c2f2:	069b      	lsls	r3, r3, #26
 800c2f4:	d431      	bmi.n	800c35a <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800c2f6:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800c2f8:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800c2fa:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800c2fc:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800c2fe:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800c300:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800c302:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800c304:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800c306:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800c308:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800c30a:	f7ff ffdf 	bl	800c2cc <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c30e:	666e      	str	r6, [r5, #100]	; 0x64
  return HAL_OK;
 800c310:	4630      	mov	r0, r6
  __HAL_UNLOCK(hdma2d);
 800c312:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800c316:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
}
 800c31a:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	f023 0305 	bic.w	r3, r3, #5
 800c322:	f043 0304 	orr.w	r3, r3, #4
 800c326:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c328:	f7fe f910 	bl	800a54c <HAL_GetTick>
 800c32c:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c32e:	e005      	b.n	800c33c <HAL_DMA2D_DeInit+0x6c>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c330:	f7fe f90c 	bl	800a54c <HAL_GetTick>
 800c334:	1b83      	subs	r3, r0, r6
 800c336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c33a:	d82b      	bhi.n	800c394 <HAL_DMA2D_DeInit+0xc4>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c33c:	682c      	ldr	r4, [r5, #0]
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	f013 0301 	ands.w	r3, r3, #1
 800c344:	d1f4      	bne.n	800c330 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800c346:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c348:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800c34a:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800c34e:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800c350:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c354:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  return HAL_OK;
 800c358:	e7cd      	b.n	800c2f6 <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	f043 0304 	orr.w	r3, r3, #4
 800c360:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800c362:	f7fe f8f3 	bl	800a54c <HAL_GetTick>
 800c366:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c368:	e005      	b.n	800c376 <HAL_DMA2D_DeInit+0xa6>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c36a:	f7fe f8ef 	bl	800a54c <HAL_GetTick>
 800c36e:	1b80      	subs	r0, r0, r6
 800c370:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c374:	d80e      	bhi.n	800c394 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c376:	69e3      	ldr	r3, [r4, #28]
 800c378:	f013 0320 	ands.w	r3, r3, #32
 800c37c:	d1f5      	bne.n	800c36a <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800c37e:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c380:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800c382:	6822      	ldr	r2, [r4, #0]
 800c384:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800c388:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800c38a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c38e:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  return HAL_OK;
 800c392:	e7b0      	b.n	800c2f6 <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c396:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800c398:	2100      	movs	r1, #0
            return HAL_ERROR;
 800c39a:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c39c:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800c3a0:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c3a4:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c3a6:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800c3ac:	2001      	movs	r0, #1
}
 800c3ae:	4770      	bx	lr
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	f043 0304 	orr.w	r3, r3, #4
 800c3b6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c3b8:	f7fe f8c8 	bl	800a54c <HAL_GetTick>
 800c3bc:	4606      	mov	r6, r0
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c3be:	e005      	b.n	800c3cc <HAL_DMA2D_DeInit+0xfc>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c3c0:	f7fe f8c4 	bl	800a54c <HAL_GetTick>
 800c3c4:	1b80      	subs	r0, r0, r6
 800c3c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c3ca:	d8e3      	bhi.n	800c394 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ce:	f013 0320 	ands.w	r3, r3, #32
 800c3d2:	d1f5      	bne.n	800c3c0 <HAL_DMA2D_DeInit+0xf0>
 800c3d4:	e7d3      	b.n	800c37e <HAL_DMA2D_DeInit+0xae>
 800c3d6:	bf00      	nop
 800c3d8:	58024400 	.word	0x58024400

0800c3dc <HAL_DMA2D_Start>:
{
 800c3dc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma2d);
 800c3de:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800c3e2:	2c01      	cmp	r4, #1
 800c3e4:	d03a      	beq.n	800c45c <HAL_DMA2D_Start+0x80>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c3e6:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma2d);
 800c3e8:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c3ea:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c3ec:	9f04      	ldr	r7, [sp, #16]
  __HAL_LOCK(hdma2d);
 800c3ee:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c3f2:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c3f6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800c3fa:	6c65      	ldr	r5, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c3fc:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c3fe:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c402:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c406:	ea43 0305 	orr.w	r3, r3, r5
 800c40a:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800c40c:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c40e:	d00a      	beq.n	800c426 <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800c410:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800c414:	d025      	beq.n	800c462 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800c416:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800c418:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800c41a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800c41c:	f043 0301 	orr.w	r3, r3, #1
 800c420:	6023      	str	r3, [r4, #0]
}
 800c422:	bcf0      	pop	{r4, r5, r6, r7}
 800c424:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800c426:	6883      	ldr	r3, [r0, #8]
 800c428:	b1b3      	cbz	r3, 800c458 <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d026      	beq.n	800c47c <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c42e:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800c430:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800c434:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800c438:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c43a:	d022      	beq.n	800c482 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c43c:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800c43e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c442:	d010      	beq.n	800c466 <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800c444:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800c446:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c448:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800c44a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c44c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800c450:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800c454:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800c458:	63a1      	str	r1, [r4, #56]	; 0x38
 800c45a:	e7dd      	b.n	800c418 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800c45c:	2002      	movs	r0, #2
}
 800c45e:	bcf0      	pop	{r4, r5, r6, r7}
 800c460:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800c462:	6161      	str	r1, [r4, #20]
 800c464:	e7d8      	b.n	800c418 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800c466:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 800c468:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c46a:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 800c46c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c46e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800c472:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800c476:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800c47a:	e7ed      	b.n	800c458 <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800c47c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800c480:	e7ea      	b.n	800c458 <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800c482:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 800c484:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800c486:	02c9      	lsls	r1, r1, #11
 800c488:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800c48c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c490:	e7e2      	b.n	800c458 <HAL_DMA2D_Start+0x7c>
 800c492:	bf00      	nop

0800c494 <HAL_DMA2D_PollForTransfer>:
{
 800c494:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800c496:	2300      	movs	r3, #0
{
 800c498:	b082      	sub	sp, #8
 800c49a:	4604      	mov	r4, r0
 800c49c:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800c49e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c4a0:	6803      	ldr	r3, [r0, #0]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	07d6      	lsls	r6, r2, #31
 800c4a6:	d40f      	bmi.n	800c4c8 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800c4a8:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800c4aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c4ac:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800c4ae:	0691      	lsls	r1, r2, #26
 800c4b0:	d432      	bmi.n	800c518 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800c4b2:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800c4b4:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c4b6:	2101      	movs	r1, #1
  return HAL_OK;
 800c4b8:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800c4ba:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800c4bc:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c4c0:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
}
 800c4c4:	b002      	add	sp, #8
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800c4c8:	f7fe f840 	bl	800a54c <HAL_GetTick>
 800c4cc:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c4ce:	1c6a      	adds	r2, r5, #1
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	d147      	bne.n	800c564 <HAL_DMA2D_PollForTransfer+0xd0>
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	0796      	lsls	r6, r2, #30
 800c4d8:	d4e6      	bmi.n	800c4a8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c4de:	9a01      	ldr	r2, [sp, #4]
 800c4e0:	f012 0f21 	tst.w	r2, #33	; 0x21
 800c4e4:	d0f6      	beq.n	800c4d4 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c4e6:	9a01      	ldr	r2, [sp, #4]
 800c4e8:	0690      	lsls	r0, r2, #26
 800c4ea:	d503      	bpl.n	800c4f4 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c4ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4ee:	f042 0202 	orr.w	r2, r2, #2
 800c4f2:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c4f4:	9a01      	ldr	r2, [sp, #4]
 800c4f6:	07d1      	lsls	r1, r2, #31
 800c4f8:	d503      	bpl.n	800c502 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4fc:	f042 0201 	orr.w	r2, r2, #1
 800c500:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c502:	2521      	movs	r5, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800c504:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800c506:	2200      	movs	r2, #0
        return HAL_ERROR;
 800c508:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c50a:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800c50c:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800c510:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800c514:	b002      	add	sp, #8
 800c516:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800c518:	f7fe f818 	bl	800a54c <HAL_GetTick>
 800c51c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c51e:	1c68      	adds	r0, r5, #1
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	d13b      	bne.n	800c59c <HAL_DMA2D_PollForTransfer+0x108>
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	06d1      	lsls	r1, r2, #27
 800c528:	d4c3      	bmi.n	800c4b2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	f012 0f29 	tst.w	r2, #41	; 0x29
 800c534:	d0f6      	beq.n	800c524 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c536:	9a01      	ldr	r2, [sp, #4]
 800c538:	0712      	lsls	r2, r2, #28
 800c53a:	d503      	bpl.n	800c544 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c53c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c53e:	f042 0204 	orr.w	r2, r2, #4
 800c542:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c544:	9a01      	ldr	r2, [sp, #4]
 800c546:	0696      	lsls	r6, r2, #26
 800c548:	d503      	bpl.n	800c552 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c54a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c54c:	f042 0202 	orr.w	r2, r2, #2
 800c550:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c552:	9a01      	ldr	r2, [sp, #4]
 800c554:	07d5      	lsls	r5, r2, #31
 800c556:	d503      	bpl.n	800c560 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c558:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c55a:	f042 0201 	orr.w	r2, r2, #1
 800c55e:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c560:	2529      	movs	r5, #41	; 0x29
 800c562:	e7cf      	b.n	800c504 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	0790      	lsls	r0, r2, #30
 800c568:	d49e      	bmi.n	800c4a8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c56e:	9a01      	ldr	r2, [sp, #4]
 800c570:	f012 0f21 	tst.w	r2, #33	; 0x21
 800c574:	d1b7      	bne.n	800c4e6 <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800c576:	f7fd ffe9 	bl	800a54c <HAL_GetTick>
 800c57a:	1b80      	subs	r0, r0, r6
 800c57c:	42a8      	cmp	r0, r5
 800c57e:	d801      	bhi.n	800c584 <HAL_DMA2D_PollForTransfer+0xf0>
 800c580:	2d00      	cmp	r5, #0
 800c582:	d1a4      	bne.n	800c4ce <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c584:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800c586:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800c588:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c58a:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800c58e:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800c590:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c594:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800c596:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800c59a:	e793      	b.n	800c4c4 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	06d2      	lsls	r2, r2, #27
 800c5a0:	d487      	bmi.n	800c4b2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c5a6:	9a01      	ldr	r2, [sp, #4]
 800c5a8:	f012 0f29 	tst.w	r2, #41	; 0x29
 800c5ac:	d1c3      	bne.n	800c536 <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800c5ae:	f7fd ffcd 	bl	800a54c <HAL_GetTick>
 800c5b2:	1b80      	subs	r0, r0, r6
 800c5b4:	42a8      	cmp	r0, r5
 800c5b6:	d8e5      	bhi.n	800c584 <HAL_DMA2D_PollForTransfer+0xf0>
 800c5b8:	2d00      	cmp	r5, #0
 800c5ba:	d1b0      	bne.n	800c51e <HAL_DMA2D_PollForTransfer+0x8a>
 800c5bc:	e7e2      	b.n	800c584 <HAL_DMA2D_PollForTransfer+0xf0>
 800c5be:	bf00      	nop

0800c5c0 <HAL_DMA2D_LineEventCallback>:
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop

0800c5c4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop

0800c5c8 <HAL_DMA2D_IRQHandler>:
{
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c5ca:	6803      	ldr	r3, [r0, #0]
{
 800c5cc:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c5ce:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c5d0:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c5d2:	07e9      	lsls	r1, r5, #31
 800c5d4:	d501      	bpl.n	800c5da <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c5d6:	05f2      	lsls	r2, r6, #23
 800c5d8:	d456      	bmi.n	800c688 <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c5da:	06af      	lsls	r7, r5, #26
 800c5dc:	d501      	bpl.n	800c5e2 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c5de:	04b0      	lsls	r0, r6, #18
 800c5e0:	d43b      	bmi.n	800c65a <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c5e2:	0729      	lsls	r1, r5, #28
 800c5e4:	d501      	bpl.n	800c5ea <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c5e6:	0532      	lsls	r2, r6, #20
 800c5e8:	d421      	bmi.n	800c62e <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c5ea:	076b      	lsls	r3, r5, #29
 800c5ec:	d501      	bpl.n	800c5f2 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c5ee:	0577      	lsls	r7, r6, #21
 800c5f0:	d475      	bmi.n	800c6de <HAL_DMA2D_IRQHandler+0x116>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c5f2:	07a8      	lsls	r0, r5, #30
 800c5f4:	d501      	bpl.n	800c5fa <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c5f6:	05b1      	lsls	r1, r6, #22
 800c5f8:	d404      	bmi.n	800c604 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c5fa:	06ea      	lsls	r2, r5, #27
 800c5fc:	d501      	bpl.n	800c602 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c5fe:	04f3      	lsls	r3, r6, #19
 800c600:	d45a      	bmi.n	800c6b8 <HAL_DMA2D_IRQHandler+0xf0>
}
 800c602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c604:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c606:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c608:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800c60a:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c612:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c614:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 800c616:	6a23      	ldr	r3, [r4, #32]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c618:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c61a:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c61e:	6662      	str	r2, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c620:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferCpltCallback != NULL)
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0e8      	beq.n	800c5fa <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800c628:	4620      	mov	r0, r4
 800c62a:	4798      	blx	r3
 800c62c:	e7e5      	b.n	800c5fa <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c62e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c630:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c632:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c63a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800c63c:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c63e:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c640:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c642:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c646:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 800c648:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c64a:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c64c:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800c650:	2a00      	cmp	r2, #0
 800c652:	d0ca      	beq.n	800c5ea <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800c654:	4620      	mov	r0, r4
 800c656:	4790      	blx	r2
 800c658:	e7c7      	b.n	800c5ea <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c65a:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c65c:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c65e:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c666:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800c668:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c66a:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c66e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c672:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 800c676:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c678:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c67a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800c67e:	2a00      	cmp	r2, #0
 800c680:	d0af      	beq.n	800c5e2 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800c682:	4620      	mov	r0, r4
 800c684:	4790      	blx	r2
 800c686:	e7ac      	b.n	800c5e2 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c688:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c68a:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c68e:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800c692:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 800c698:	6a41      	ldr	r1, [r0, #36]	; 0x24
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c69a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c69c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800c69e:	ea42 020e 	orr.w	r2, r2, lr
 800c6a2:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c6a4:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c6a8:	f880 c061 	strb.w	ip, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800c6ac:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800c6b0:	2900      	cmp	r1, #0
 800c6b2:	d092      	beq.n	800c5da <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800c6b4:	4788      	blx	r1
 800c6b6:	e790      	b.n	800c5da <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c6b8:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c6ba:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c6bc:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800c6be:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c6c0:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c6c2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c6c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c6ca:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c6cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c6ce:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c6d2:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c6d4:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c6d8:	f7ff ff74 	bl	800c5c4 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800c6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c6de:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c6e0:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c6e2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c6ec:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c6ee:	f7ff ff67 	bl	800c5c0 <HAL_DMA2D_LineEventCallback>
 800c6f2:	e77e      	b.n	800c5f2 <HAL_DMA2D_IRQHandler+0x2a>

0800c6f4 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800c6f4:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800c6f8:	2a01      	cmp	r2, #1
 800c6fa:	d063      	beq.n	800c7c4 <HAL_DMA2D_ConfigLayer+0xd0>
 800c6fc:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c6fe:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c702:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c704:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800c708:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800c70a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c70c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800c710:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c714:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c716:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800c718:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c71a:	0512      	lsls	r2, r2, #20
 800c71c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c71e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c722:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c726:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c728:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c72a:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c72e:	d922      	bls.n	800c776 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c730:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c732:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c736:	b981      	cbnz	r1, 800c75a <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	4923      	ldr	r1, [pc, #140]	; (800c7c8 <HAL_DMA2D_ConfigLayer+0xd4>)
 800c73c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c73e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c740:	4029      	ands	r1, r5
 800c742:	430a      	orrs	r2, r1
 800c744:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c746:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800c748:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c74a:	2101      	movs	r1, #1
  return HAL_OK;
 800c74c:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c74e:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800c752:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800c756:	bc70      	pop	{r4, r5, r6}
 800c758:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c75a:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c75c:	681c      	ldr	r4, [r3, #0]
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c75e:	d129      	bne.n	800c7b4 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c760:	69e6      	ldr	r6, [r4, #28]
 800c762:	491a      	ldr	r1, [pc, #104]	; (800c7cc <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800c764:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c766:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c768:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c76a:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800c76e:	430a      	orrs	r2, r1
 800c770:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c772:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c774:	e7e8      	b.n	800c748 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c776:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c778:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800c77c:	4322      	orrs	r2, r4
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c77e:	b161      	cbz	r1, 800c79a <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c780:	6819      	ldr	r1, [r3, #0]
 800c782:	4c11      	ldr	r4, [pc, #68]	; (800c7c8 <HAL_DMA2D_ConfigLayer+0xd4>)
 800c784:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800c786:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c788:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c78a:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800c78c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c790:	4322      	orrs	r2, r4
 800c792:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c794:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800c796:	620d      	str	r5, [r1, #32]
 800c798:	e7d6      	b.n	800c748 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c79a:	6819      	ldr	r1, [r3, #0]
 800c79c:	4c0a      	ldr	r4, [pc, #40]	; (800c7c8 <HAL_DMA2D_ConfigLayer+0xd4>)
 800c79e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800c7a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c7a2:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c7a4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800c7a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c7aa:	4322      	orrs	r2, r4
 800c7ac:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c7ae:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800c7b0:	6288      	str	r0, [r1, #40]	; 0x28
 800c7b2:	e7c9      	b.n	800c748 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c7b4:	69e5      	ldr	r5, [r4, #28]
 800c7b6:	4904      	ldr	r1, [pc, #16]	; (800c7c8 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c7b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c7ba:	4029      	ands	r1, r5
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c7c0:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c7c2:	e7c1      	b.n	800c748 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 800c7c4:	2002      	movs	r0, #2
}
 800c7c6:	4770      	bx	lr
 800c7c8:	00ccfff0 	.word	0x00ccfff0
 800c7cc:	00c0fff0 	.word	0x00c0fff0

0800c7d0 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop

0800c7d4 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f000 80b3 	beq.w	800c940 <HAL_DSI_Init+0x16c>
{
 800c7da:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800c7dc:	7c43      	ldrb	r3, [r0, #17]
{
 800c7de:	b083      	sub	sp, #12
 800c7e0:	460d      	mov	r5, r1
 800c7e2:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 80a8 	beq.w	800c93a <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 800c7ea:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800c7ec:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800c7ee:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800c7f0:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800c7f2:	9200      	str	r2, [sp, #0]
 800c7f4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800c7f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800c7fc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800c800:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800c804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800c80c:	f7fd fe9e 	bl	800a54c <HAL_GetTick>
 800c810:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800c812:	e006      	b.n	800c822 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c814:	f7fd fe9a 	bl	800a54c <HAL_GetTick>
 800c818:	1b83      	subs	r3, r0, r6
 800c81a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c81e:	f200 8089 	bhi.w	800c934 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800c828:	04d1      	lsls	r1, r2, #19
 800c82a:	d5f3      	bpl.n	800c814 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c82c:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800c82e:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c830:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c834:	682e      	ldr	r6, [r5, #0]
 800c836:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c838:	4942      	ldr	r1, [pc, #264]	; (800c944 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c83a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800c83e:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c840:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c842:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c846:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c84a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800c84e:	430a      	orrs	r2, r1
 800c850:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800c854:	9001      	str	r0, [sp, #4]
 800c856:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800c85a:	f042 0201 	orr.w	r2, r2, #1
 800c85e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800c862:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800c866:	f003 0301 	and.w	r3, r3, #1
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800c86e:	f7fd fe6d 	bl	800a54c <HAL_GetTick>
 800c872:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c874:	e005      	b.n	800c882 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c876:	f7fd fe69 	bl	800a54c <HAL_GetTick>
 800c87a:	1b80      	subs	r0, r0, r6
 800c87c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c880:	d858      	bhi.n	800c934 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800c888:	05d2      	lsls	r2, r2, #23
 800c88a:	d5f4      	bpl.n	800c876 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800c88c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c890:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c894:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 800c896:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800c898:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c89c:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800c89e:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800c8a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800c8a6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c8aa:	f022 0203 	bic.w	r2, r2, #3
 800c8ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c8b2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8b6:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c8b8:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8ba:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c8bc:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8c0:	bf38      	it	cc
 800c8c2:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c8c4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800c8c8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8cc:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800c8ce:	f020 0003 	bic.w	r0, r0, #3
 800c8d2:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c8d6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8da:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c8dc:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8de:	682d      	ldr	r5, [r5, #0]
 800c8e0:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c8e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800c8e8:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8ea:	fb0c f505 	mul.w	r5, ip, r5
 800c8ee:	4a16      	ldr	r2, [pc, #88]	; (800c948 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800c8f0:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8f4:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800c8f8:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800c8fa:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c8fc:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800c8fe:	ea46 060e 	orr.w	r6, r6, lr
 800c902:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 800c904:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800c906:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800c90a:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800c90e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800c912:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 800c916:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800c918:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 800c91c:	432a      	orrs	r2, r5
 800c91e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800c922:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800c926:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800c92a:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800c92c:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800c92e:	7466      	strb	r6, [r4, #17]
}
 800c930:	b003      	add	sp, #12
 800c932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800c934:	2003      	movs	r0, #3
}
 800c936:	b003      	add	sp, #12
 800c938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 800c93a:	f7ff ff49 	bl	800c7d0 <HAL_DSI_MspInit>
 800c93e:	e754      	b.n	800c7ea <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800c940:	2001      	movs	r0, #1
}
 800c942:	4770      	bx	lr
 800c944:	fffc8603 	.word	0xfffc8603
 800c948:	003d0900 	.word	0x003d0900

0800c94c <HAL_DSI_TearingEffectCallback>:
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop

0800c950 <HAL_DSI_EndOfRefreshCallback>:
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop

0800c954 <HAL_DSI_ErrorCallback>:
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop

0800c958 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800c958:	6803      	ldr	r3, [r0, #0]
 800c95a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800c95e:	07d1      	lsls	r1, r2, #31
{
 800c960:	b510      	push	{r4, lr}
 800c962:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800c964:	d503      	bpl.n	800c96e <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800c966:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c96a:	07d2      	lsls	r2, r2, #31
 800c96c:	d462      	bmi.n	800ca34 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800c96e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800c972:	0791      	lsls	r1, r2, #30
 800c974:	d503      	bpl.n	800c97e <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800c976:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c97a:	0792      	lsls	r2, r2, #30
 800c97c:	d44f      	bmi.n	800ca1e <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800c97e:	69a3      	ldr	r3, [r4, #24]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d04b      	beq.n	800ca1c <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800c984:	6821      	ldr	r1, [r4, #0]
 800c986:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800c98a:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800c98e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800c992:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800c994:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800c998:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800c99a:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800c99c:	b119      	cbz	r1, 800c9a6 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800c99e:	6961      	ldr	r1, [r4, #20]
 800c9a0:	f041 0101 	orr.w	r1, r1, #1
 800c9a4:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800c9a6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800c9aa:	d003      	beq.n	800c9b4 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800c9ac:	6962      	ldr	r2, [r4, #20]
 800c9ae:	f042 0202 	orr.w	r2, r2, #2
 800c9b2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800c9b4:	07d8      	lsls	r0, r3, #31
 800c9b6:	d503      	bpl.n	800c9c0 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800c9b8:	6962      	ldr	r2, [r4, #20]
 800c9ba:	f042 0204 	orr.w	r2, r2, #4
 800c9be:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800c9c0:	0799      	lsls	r1, r3, #30
 800c9c2:	d503      	bpl.n	800c9cc <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800c9c4:	6962      	ldr	r2, [r4, #20]
 800c9c6:	f042 0208 	orr.w	r2, r2, #8
 800c9ca:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800c9cc:	f013 0f0c 	tst.w	r3, #12
 800c9d0:	d003      	beq.n	800c9da <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800c9d2:	6962      	ldr	r2, [r4, #20]
 800c9d4:	f042 0210 	orr.w	r2, r2, #16
 800c9d8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800c9da:	06da      	lsls	r2, r3, #27
 800c9dc:	d503      	bpl.n	800c9e6 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800c9de:	6962      	ldr	r2, [r4, #20]
 800c9e0:	f042 0220 	orr.w	r2, r2, #32
 800c9e4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800c9e6:	0698      	lsls	r0, r3, #26
 800c9e8:	d503      	bpl.n	800c9f2 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800c9ea:	6962      	ldr	r2, [r4, #20]
 800c9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9f0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800c9f2:	0659      	lsls	r1, r3, #25
 800c9f4:	d503      	bpl.n	800c9fe <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800c9f6:	6962      	ldr	r2, [r4, #20]
 800c9f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9fc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800c9fe:	061a      	lsls	r2, r3, #24
 800ca00:	d503      	bpl.n	800ca0a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800ca02:	6962      	ldr	r2, [r4, #20]
 800ca04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca08:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800ca0a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800ca0e:	d003      	beq.n	800ca18 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800ca10:	6963      	ldr	r3, [r4, #20]
 800ca12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca16:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800ca18:	6963      	ldr	r3, [r4, #20]
 800ca1a:	b93b      	cbnz	r3, 800ca2c <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800ca1c:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800ca1e:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800ca20:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800ca22:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800ca26:	f7ff ff93 	bl	800c950 <HAL_DSI_EndOfRefreshCallback>
 800ca2a:	e7a8      	b.n	800c97e <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f7ff ff91 	bl	800c954 <HAL_DSI_ErrorCallback>
}
 800ca32:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800ca34:	2201      	movs	r2, #1
 800ca36:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800ca3a:	f7ff ff87 	bl	800c94c <HAL_DSI_TearingEffectCallback>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	e795      	b.n	800c96e <HAL_DSI_IRQHandler+0x16>
 800ca42:	bf00      	nop

0800ca44 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ca44:	7c03      	ldrb	r3, [r0, #16]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	f000 8113 	beq.w	800cc72 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800ca4c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800ca4e:	2201      	movs	r2, #1
{
 800ca50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800ca54:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ca56:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800ca58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ca5a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800ca5c:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800ca60:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800ca64:	4e84      	ldr	r6, [pc, #528]	; (800cc78 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ca66:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800ca68:	4d84      	ldr	r5, [pc, #528]	; (800cc7c <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800ca6a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800ca6e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800ca70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ca74:	f022 0201 	bic.w	r2, r2, #1
 800ca78:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800ca7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca7e:	f022 0203 	bic.w	r2, r2, #3
 800ca82:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800ca84:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800ca86:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ca8a:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800ca8e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800ca90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca92:	ea06 0602 	and.w	r6, r6, r2
 800ca96:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800ca98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca9a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ca9e:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800caa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800caa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caa6:	ea02 0205 	and.w	r2, r2, r5
 800caaa:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800caac:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800caae:	ea47 0708 	orr.w	r7, r7, r8
 800cab2:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800cab4:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800cab6:	ea06 0605 	and.w	r6, r6, r5
 800caba:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800cabc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800cabe:	ea45 050e 	orr.w	r5, r5, lr
 800cac2:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800cac4:	68dd      	ldr	r5, [r3, #12]
 800cac6:	f025 0503 	bic.w	r5, r5, #3
 800caca:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	ea42 020c 	orr.w	r2, r2, ip
 800cad2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cad4:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cad6:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cad8:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cadc:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cae0:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cae2:	ea42 0206 	orr.w	r2, r2, r6
 800cae6:	695d      	ldr	r5, [r3, #20]
 800cae8:	ea42 0207 	orr.w	r2, r2, r7
 800caec:	ea42 0205 	orr.w	r2, r2, r5
 800caf0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800caf2:	691a      	ldr	r2, [r3, #16]
 800caf4:	f022 020f 	bic.w	r2, r2, #15
 800caf8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800cafa:	691a      	ldr	r2, [r3, #16]
 800cafc:	ea42 0200 	orr.w	r2, r2, r0
 800cb00:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800cb02:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cb06:	f022 020e 	bic.w	r2, r2, #14
 800cb0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800cb0e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cb12:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800cb16:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800cb1a:	d107      	bne.n	800cb2c <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800cb1c:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800cb1e:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800cb20:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800cb24:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800cb26:	691a      	ldr	r2, [r3, #16]
 800cb28:	432a      	orrs	r2, r5
 800cb2a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cb2c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cb2e:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cb30:	4a53      	ldr	r2, [pc, #332]	; (800cc80 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800cb32:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cb34:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cb36:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800cb3a:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cb3e:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800cb40:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800cb42:	4f50      	ldr	r7, [pc, #320]	; (800cc84 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800cb44:	4305      	orrs	r5, r0
 800cb46:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800cb48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb4a:	4010      	ands	r0, r2
 800cb4c:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cb4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800cb50:	484d      	ldr	r0, [pc, #308]	; (800cc88 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cb52:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800cb56:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cb5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800cb5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb5e:	4017      	ands	r7, r2
 800cb60:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800cb62:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800cb64:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800cb68:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800cb6c:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800cb6e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800cb70:	4005      	ands	r5, r0
 800cb72:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800cb74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb76:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800cb7a:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800cb7e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800cb80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb82:	4002      	ands	r2, r0
 800cb84:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800cb86:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800cb88:	4a3b      	ldr	r2, [pc, #236]	; (800cc78 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800cb8a:	ea47 070e 	orr.w	r7, r7, lr
 800cb8e:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800cb90:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800cb92:	4007      	ands	r7, r0

  return HAL_OK;
 800cb94:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800cb96:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800cb98:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800cb9a:	ea45 050c 	orr.w	r5, r5, ip
 800cb9e:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800cba0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800cba2:	402a      	ands	r2, r5
 800cba4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800cba6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800cba8:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800cbaa:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800cbae:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800cbb0:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800cbb4:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800cbb6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800cbb8:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 800cbbc:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800cbbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbc0:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cbc4:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800cbc8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800cbca:	699f      	ldr	r7, [r3, #24]
 800cbcc:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 800cbd0:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800cbd2:	699d      	ldr	r5, [r3, #24]
 800cbd4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cbd8:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800cbdc:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800cbde:	699d      	ldr	r5, [r3, #24]
 800cbe0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800cbe4:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cbe6:	699a      	ldr	r2, [r3, #24]
 800cbe8:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800cbec:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cbf0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800cbf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbf8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cbfa:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800cbfc:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800cc00:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cc04:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800cc06:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800cc08:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800cc0c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800cc0e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800cc10:	ea45 050e 	orr.w	r5, r5, lr
 800cc14:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800cc16:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800cc18:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800cc1c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800cc1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc20:	ea42 020c 	orr.w	r2, r2, ip
 800cc24:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cc26:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cc28:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cc2a:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800cc2e:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cc32:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc36:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800cc38:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cc3c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800cc3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cc44:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800cc46:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800cc48:	ea45 050e 	orr.w	r5, r5, lr
 800cc4c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800cc4e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800cc50:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800cc54:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800cc56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cc58:	ea41 010c 	orr.w	r1, r1, ip
 800cc5c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800cc5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cc60:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800cc64:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800cc66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc68:	433a      	orrs	r2, r7
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800cc6c:	7426      	strb	r6, [r4, #16]
}
 800cc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 800cc72:	2002      	movs	r0, #2
}
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	ffffc000 	.word	0xffffc000
 800cc7c:	ffffe000 	.word	0xffffe000
 800cc80:	fffff000 	.word	0xfffff000
 800cc84:	ffff8000 	.word	0xffff8000
 800cc88:	fffffc00 	.word	0xfffffc00

0800cc8c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cc8c:	7c02      	ldrb	r2, [r0, #16]
 800cc8e:	2a01      	cmp	r2, #1
 800cc90:	d00e      	beq.n	800ccb0 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cc92:	6802      	ldr	r2, [r0, #0]
 800cc94:	4603      	mov	r3, r0
{
 800cc96:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cc98:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cc9a:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cc9c:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 800cca0:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cca2:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800cca4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800cca6:	4321      	orrs	r1, r4
 800cca8:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800ccaa:	741d      	strb	r5, [r3, #16]
}
 800ccac:	bc30      	pop	{r4, r5}
 800ccae:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ccb0:	2002      	movs	r0, #2
}
 800ccb2:	4770      	bx	lr

0800ccb4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ccb4:	7c03      	ldrb	r3, [r0, #16]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d021      	beq.n	800ccfe <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800ccba:	6803      	ldr	r3, [r0, #0]
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800ccc0:	4608      	mov	r0, r1
{
 800ccc2:	b410      	push	{r4}
 800ccc4:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800ccc6:	9100      	str	r1, [sp, #0]
 800ccc8:	685c      	ldr	r4, [r3, #4]
 800ccca:	f044 0401 	orr.w	r4, r4, #1
 800ccce:	605c      	str	r4, [r3, #4]
 800ccd0:	685c      	ldr	r4, [r3, #4]
 800ccd2:	f004 0401 	and.w	r4, r4, #1
 800ccd6:	9400      	str	r4, [sp, #0]
 800ccd8:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ccda:	9101      	str	r1, [sp, #4]
 800ccdc:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800cce0:	f044 0408 	orr.w	r4, r4, #8
 800cce4:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 800cce8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800ccec:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ccee:	f003 0308 	and.w	r3, r3, #8
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	9b01      	ldr	r3, [sp, #4]
}
 800ccf6:	b003      	add	sp, #12
 800ccf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccfc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ccfe:	2002      	movs	r0, #2
}
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop

0800cd04 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800cd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd08:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800cd0a:	7c03      	ldrb	r3, [r0, #16]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d022      	beq.n	800cd56 <HAL_DSI_ShortWrite+0x52>
 800cd10:	2301      	movs	r3, #1
 800cd12:	4604      	mov	r4, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	4615      	mov	r5, r2
 800cd18:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800cd1a:	f7fd fc17 	bl	800a54c <HAL_GetTick>
 800cd1e:	4681      	mov	r9, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cd20:	e006      	b.n	800cd30 <HAL_DSI_ShortWrite+0x2c>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800cd22:	f7fd fc13 	bl	800a54c <HAL_GetTick>
 800cd26:	eba0 0609 	sub.w	r6, r0, r9
 800cd2a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 800cd2e:	d810      	bhi.n	800cd52 <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cd30:	6826      	ldr	r6, [r4, #0]
 800cd32:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800cd34:	07db      	lsls	r3, r3, #31
 800cd36:	d5f4      	bpl.n	800cd22 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800cd38:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
 800cd3c:	9a08      	ldr	r2, [sp, #32]
  return HAL_OK;
 800cd3e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800cd40:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800cd44:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800cd48:	66f2      	str	r2, [r6, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	7423      	strb	r3, [r4, #16]

  return status;
}
 800cd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800cd52:	2003      	movs	r0, #3
 800cd54:	e7f9      	b.n	800cd4a <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 800cd56:	2002      	movs	r0, #2
}
 800cd58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cd5c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800cd5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	4699      	mov	r9, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800cd62:	7c03      	ldrb	r3, [r0, #16]
{
 800cd64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  __HAL_LOCK(hdsi);
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d061      	beq.n	800ce2e <HAL_DSI_LongWrite+0xd2>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	468a      	mov	sl, r1
 800cd70:	4693      	mov	fp, r2
 800cd72:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd74:	f7fd fbea 	bl	800a54c <HAL_GetTick>
 800cd78:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cd7a:	e006      	b.n	800cd8a <HAL_DSI_LongWrite+0x2e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cd7c:	f7fd fbe6 	bl	800a54c <HAL_GetTick>
 800cd80:	eba0 0508 	sub.w	r5, r0, r8
 800cd84:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800cd88:	d84d      	bhi.n	800ce26 <HAL_DSI_LongWrite+0xca>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800cd8e:	f014 0401 	ands.w	r4, r4, #1
 800cd92:	d0f3      	beq.n	800cd7c <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800cd94:	464b      	mov	r3, r9
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	bf28      	it	cs
 800cd9a:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 800cd9c:	f1b9 0f00 	cmp.w	r9, #0
 800cda0:	d048      	beq.n	800ce34 <HAL_DSI_LongWrite+0xd8>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cda2:	7831      	ldrb	r1, [r6, #0]
  for (count = 0U; count < nbBytes; count++)
 800cda4:	f1b9 0f01 	cmp.w	r9, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cda8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdaa:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800cdae:	d908      	bls.n	800cdc2 <HAL_DSI_LongWrite+0x66>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cdb0:	7870      	ldrb	r0, [r6, #1]
  for (count = 0U; count < nbBytes; count++)
 800cdb2:	f1b9 0f02 	cmp.w	r9, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cdb6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800cdba:	d902      	bls.n	800cdc2 <HAL_DSI_LongWrite+0x66>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cdbc:	78b0      	ldrb	r0, [r6, #2]
 800cdbe:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800cdc2:	441e      	add	r6, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800cdc4:	ebb9 0303 	subs.w	r3, r9, r3
  hdsi->Instance->GPDR = fifoword;
 800cdc8:	6711      	str	r1, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800cdca:	d017      	beq.n	800cdfc <HAL_DSI_LongWrite+0xa0>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	4618      	mov	r0, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cdd0:	7831      	ldrb	r1, [r6, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800cdd2:	bf28      	it	cs
 800cdd4:	2004      	movcs	r0, #4
    for (count = 0U; count < nbBytes; count++)
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d00c      	beq.n	800cdf4 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cdda:	7874      	ldrb	r4, [r6, #1]
    for (count = 0U; count < nbBytes; count++)
 800cddc:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cdde:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    for (count = 0U; count < nbBytes; count++)
 800cde2:	d007      	beq.n	800cdf4 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cde4:	78b4      	ldrb	r4, [r6, #2]
    for (count = 0U; count < nbBytes; count++)
 800cde6:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cde8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    for (count = 0U; count < nbBytes; count++)
 800cdec:	d902      	bls.n	800cdf4 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cdee:	78f4      	ldrb	r4, [r6, #3]
 800cdf0:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
  while (uicounter != 0U)
 800cdf4:	1a1b      	subs	r3, r3, r0
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800cdf6:	4406      	add	r6, r0
    hdsi->Instance->GPDR = fifoword;
 800cdf8:	6711      	str	r1, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800cdfa:	d1e7      	bne.n	800cdcc <HAL_DSI_LongWrite+0x70>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800cdfc:	f109 0901 	add.w	r9, r9, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ce00:	ea4b 138a 	orr.w	r3, fp, sl, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ce04:	2100      	movs	r1, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ce06:	ea4f 2a09 	mov.w	sl, r9, lsl #8

  return HAL_OK;
 800ce0a:	4608      	mov	r0, r1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ce0c:	46d1      	mov	r9, sl
 800ce0e:	fa1f fa8a 	uxth.w	sl, sl
 800ce12:	f409 097f 	and.w	r9, r9, #16711680	; 0xff0000
 800ce16:	ea43 030a 	orr.w	r3, r3, sl
 800ce1a:	ea43 0309 	orr.w	r3, r3, r9
 800ce1e:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800ce20:	7439      	strb	r1, [r7, #16]
}
 800ce22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_TIMEOUT;
 800ce26:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800ce28:	743c      	strb	r4, [r7, #16]
}
 800ce2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hdsi);
 800ce2e:	2002      	movs	r0, #2
}
 800ce30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hdsi->Instance->GPDR = fifoword;
 800ce34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce36:	6713      	str	r3, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800ce38:	e7e0      	b.n	800cdfc <HAL_DSI_LongWrite+0xa0>
 800ce3a:	bf00      	nop

0800ce3c <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800ce3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce40:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ce42:	7c03      	ldrb	r3, [r0, #16]
{
 800ce44:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	f000 8088 	beq.w	800cf5e <HAL_DSI_Read+0x122>
 800ce4e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800ce50:	2c02      	cmp	r4, #2
 800ce52:	4605      	mov	r5, r0
 800ce54:	460f      	mov	r7, r1
 800ce56:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800ce58:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800ce5a:	d810      	bhi.n	800ce7e <HAL_DSI_Read+0x42>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800ce5c:	f1b9 0f06 	cmp.w	r9, #6
 800ce60:	d02b      	beq.n	800ceba <HAL_DSI_Read+0x7e>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800ce62:	f1b9 0f04 	cmp.w	r9, #4
 800ce66:	d066      	beq.n	800cf36 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800ce68:	f1b9 0f14 	cmp.w	r9, #20
 800ce6c:	d07a      	beq.n	800cf64 <HAL_DSI_Read+0x128>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800ce6e:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800ce72:	d066      	beq.n	800cf42 <HAL_DSI_Read+0x106>
      __HAL_UNLOCK(hdsi);
 800ce74:	2300      	movs	r3, #0
      return HAL_ERROR;
 800ce76:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800ce78:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800ce7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800ce7e:	f7fd fb65 	bl	800a54c <HAL_GetTick>
 800ce82:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ce84:	e006      	b.n	800ce94 <HAL_DSI_Read+0x58>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800ce86:	f7fd fb61 	bl	800a54c <HAL_GetTick>
 800ce8a:	eba0 0008 	sub.w	r0, r0, r8
 800ce8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ce92:	d8ef      	bhi.n	800ce74 <HAL_DSI_Read+0x38>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ce98:	07d1      	lsls	r1, r2, #31
 800ce9a:	d5f4      	bpl.n	800ce86 <HAL_DSI_Read+0x4a>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ce9c:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800ce9e:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800cea2:	4611      	mov	r1, r2
 800cea4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800cea8:	b289      	uxth	r1, r1
 800ceaa:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800ceae:	ea42 0201 	orr.w	r2, r2, r1
 800ceb2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800ceb6:	66da      	str	r2, [r3, #108]	; 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800ceb8:	d1d3      	bne.n	800ce62 <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ceba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800cebc:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cebe:	021b      	lsls	r3, r3, #8
 800cec0:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 800cec4:	f047 0706 	orr.w	r7, r7, #6
 800cec8:	66d7      	str	r7, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800ceca:	f7fd fb3f 	bl	800a54c <HAL_GetTick>
 800cece:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 800ced0:	e005      	b.n	800cede <HAL_DSI_Read+0xa2>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ced2:	f7fd fb3b 	bl	800a54c <HAL_GetTick>
 800ced6:	1bc1      	subs	r1, r0, r7
 800ced8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800cedc:	d822      	bhi.n	800cf24 <HAL_DSI_Read+0xe8>
  while (((int32_t)(datasize)) > 0)
 800cede:	2c00      	cmp	r4, #0
 800cee0:	dd25      	ble.n	800cf2e <HAL_DSI_Read+0xf2>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800cee2:	682b      	ldr	r3, [r5, #0]
 800cee4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800cee6:	06ca      	lsls	r2, r1, #27
 800cee8:	d4f3      	bmi.n	800ced2 <HAL_DSI_Read+0x96>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800ceea:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 800ceec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800ceee:	4622      	mov	r2, r4
 800cef0:	bf28      	it	cs
 800cef2:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800cef4:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800cef6:	ea4f 2113 	mov.w	r1, r3, lsr #8
 800cefa:	7033      	strb	r3, [r6, #0]
 800cefc:	ea4f 4013 	mov.w	r0, r3, lsr #16
 800cf00:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800cf04:	d006      	beq.n	800cf14 <HAL_DSI_Read+0xd8>
 800cf06:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800cf08:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800cf0a:	d003      	beq.n	800cf14 <HAL_DSI_Read+0xd8>
 800cf0c:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800cf0e:	70b0      	strb	r0, [r6, #2]
 800cf10:	bf88      	it	hi
 800cf12:	70f3      	strbhi	r3, [r6, #3]
      for (count = 0U; count < nbbytes; count++)
 800cf14:	4416      	add	r6, r2
 800cf16:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cf18:	f7fd fb18 	bl	800a54c <HAL_GetTick>
 800cf1c:	1bc1      	subs	r1, r0, r7
 800cf1e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800cf22:	d9dc      	bls.n	800cede <HAL_DSI_Read+0xa2>
      __HAL_UNLOCK(hdsi);
 800cf24:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800cf26:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800cf28:	742b      	strb	r3, [r5, #16]
}
 800cf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800cf2e:	2000      	movs	r0, #0
 800cf30:	7428      	strb	r0, [r5, #16]
}
 800cf32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf36:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800cf38:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf3a:	f047 0704 	orr.w	r7, r7, #4
 800cf3e:	66df      	str	r7, [r3, #108]	; 0x6c
}
 800cf40:	e7c3      	b.n	800ceca <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cf42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf44:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cf46:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf48:	7852      	ldrb	r2, [r2, #1]
 800cf4a:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cf50:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cf56:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800cf5a:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800cf5c:	e7b5      	b.n	800ceca <HAL_DSI_Read+0x8e>
  __HAL_LOCK(hdsi);
 800cf5e:	2002      	movs	r0, #2
}
 800cf60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800cf64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf66:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800cf68:	7811      	ldrb	r1, [r2, #0]
 800cf6a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cf70:	f043 0314 	orr.w	r3, r3, #20
 800cf74:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800cf76:	e7a8      	b.n	800ceca <HAL_DSI_Read+0x8e>

0800cf78 <HAL_EXTI_RegisterCallback>:
  if (hexti == NULL)
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800cf78:	b919      	cbnz	r1, 800cf82 <HAL_EXTI_RegisterCallback+0xa>
 800cf7a:	b110      	cbz	r0, 800cf82 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800cf7c:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf7e:	2000      	movs	r0, #0
      break;
 800cf80:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800cf82:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop

0800cf88 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800cf88:	b110      	cbz	r0, 800cf90 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800cf8a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	4770      	bx	lr
    return HAL_ERROR;
 800cf90:	2001      	movs	r0, #1
  }
}
 800cf92:	4770      	bx	lr

0800cf94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cf98:	680e      	ldr	r6, [r1, #0]
{
 800cf9a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cf9c:	2e00      	cmp	r6, #0
 800cf9e:	f000 80d3 	beq.w	800d148 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 800cfa2:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfa4:	f8df a220 	ldr.w	sl, [pc, #544]	; 800d1c8 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cfa8:	f8df b220 	ldr.w	fp, [pc, #544]	; 800d1cc <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cfac:	46b1      	mov	r9, r6
 800cfae:	e020      	b.n	800cff2 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800cfb0:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cfb2:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cfb6:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cfba:	f04f 0e0f 	mov.w	lr, #15
 800cfbe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cfc2:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cfc4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cfc8:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 800cfcc:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cfce:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cfd2:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cfd6:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cfda:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800cfde:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800cfe0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cfe2:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cfe4:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800cfe6:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800cfe8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cfea:	fa39 f203 	lsrs.w	r2, r9, r3
 800cfee:	f000 80ab 	beq.w	800d148 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cff2:	2201      	movs	r2, #1
 800cff4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800cff6:	ea12 0809 	ands.w	r8, r2, r9
 800cffa:	d0f5      	beq.n	800cfe8 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cffc:	684c      	ldr	r4, [r1, #4]
 800cffe:	005f      	lsls	r7, r3, #1
 800d000:	f024 0c10 	bic.w	ip, r4, #16
 800d004:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d008:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d00a:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d00e:	f200 809e 	bhi.w	800d14e <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d012:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800d016:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d01a:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d01c:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d01e:	ea2e 0e05 	bic.w	lr, lr, r5
 800d022:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d024:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d026:	68ce      	ldr	r6, [r1, #12]
 800d028:	40be      	lsls	r6, r7
 800d02a:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d02e:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800d030:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800d034:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d038:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d03c:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800d03e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800d040:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d042:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d046:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d048:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d04c:	fa02 f207 	lsl.w	r2, r2, r7
 800d050:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 800d054:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d056:	d0ab      	beq.n	800cfb0 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 800d058:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d05a:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d05e:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d060:	fa02 f707 	lsl.w	r7, r2, r7
 800d064:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800d066:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d068:	00e6      	lsls	r6, r4, #3
 800d06a:	d5bd      	bpl.n	800cfe8 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d06c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800d070:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d074:	f003 0203 	and.w	r2, r3, #3
 800d078:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d07a:	f046 0602 	orr.w	r6, r6, #2
 800d07e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d082:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d084:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 800d088:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800d08c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d090:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d094:	f006 0602 	and.w	r6, r6, #2
 800d098:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d09a:	4e42      	ldr	r6, [pc, #264]	; (800d1a4 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d09c:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d09e:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800d0a0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d0a2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d0a6:	d020      	beq.n	800d0ea <HAL_GPIO_Init+0x156>
 800d0a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d0ac:	42b0      	cmp	r0, r6
 800d0ae:	d056      	beq.n	800d15e <HAL_GPIO_Init+0x1ca>
 800d0b0:	4e3d      	ldr	r6, [pc, #244]	; (800d1a8 <HAL_GPIO_Init+0x214>)
 800d0b2:	42b0      	cmp	r0, r6
 800d0b4:	d058      	beq.n	800d168 <HAL_GPIO_Init+0x1d4>
 800d0b6:	4e3d      	ldr	r6, [pc, #244]	; (800d1ac <HAL_GPIO_Init+0x218>)
 800d0b8:	42b0      	cmp	r0, r6
 800d0ba:	d04b      	beq.n	800d154 <HAL_GPIO_Init+0x1c0>
 800d0bc:	4e3c      	ldr	r6, [pc, #240]	; (800d1b0 <HAL_GPIO_Init+0x21c>)
 800d0be:	42b0      	cmp	r0, r6
 800d0c0:	d05c      	beq.n	800d17c <HAL_GPIO_Init+0x1e8>
 800d0c2:	4e3c      	ldr	r6, [pc, #240]	; (800d1b4 <HAL_GPIO_Init+0x220>)
 800d0c4:	42b0      	cmp	r0, r6
 800d0c6:	d05e      	beq.n	800d186 <HAL_GPIO_Init+0x1f2>
 800d0c8:	4e3b      	ldr	r6, [pc, #236]	; (800d1b8 <HAL_GPIO_Init+0x224>)
 800d0ca:	42b0      	cmp	r0, r6
 800d0cc:	d051      	beq.n	800d172 <HAL_GPIO_Init+0x1de>
 800d0ce:	4e3b      	ldr	r6, [pc, #236]	; (800d1bc <HAL_GPIO_Init+0x228>)
 800d0d0:	42b0      	cmp	r0, r6
 800d0d2:	d05d      	beq.n	800d190 <HAL_GPIO_Init+0x1fc>
 800d0d4:	4e3a      	ldr	r6, [pc, #232]	; (800d1c0 <HAL_GPIO_Init+0x22c>)
 800d0d6:	42b0      	cmp	r0, r6
 800d0d8:	d05f      	beq.n	800d19a <HAL_GPIO_Init+0x206>
 800d0da:	4e3a      	ldr	r6, [pc, #232]	; (800d1c4 <HAL_GPIO_Init+0x230>)
 800d0dc:	42b0      	cmp	r0, r6
 800d0de:	bf0c      	ite	eq
 800d0e0:	2609      	moveq	r6, #9
 800d0e2:	260a      	movne	r6, #10
 800d0e4:	fa06 f202 	lsl.w	r2, r6, r2
 800d0e8:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d0ea:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800d0ec:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 800d0f0:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d0f4:	03e5      	lsls	r5, r4, #15
    position++;
 800d0f6:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800d0fa:	bf54      	ite	pl
 800d0fc:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800d0fe:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800d102:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d106:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800d108:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800d10c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800d110:	bf54      	ite	pl
 800d112:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800d114:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d118:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800d11a:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800d11e:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 800d120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800d124:	bf54      	ite	pl
 800d126:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800d128:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d12c:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800d12e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800d132:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800d134:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800d136:	bf54      	ite	pl
 800d138:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800d13a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800d13e:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d140:	fa39 f203 	lsrs.w	r2, r9, r3
 800d144:	f47f af55 	bne.w	800cff2 <HAL_GPIO_Init+0x5e>
  }
}
 800d148:	b005      	add	sp, #20
 800d14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14e:	40bd      	lsls	r5, r7
 800d150:	43ed      	mvns	r5, r5
 800d152:	e775      	b.n	800d040 <HAL_GPIO_Init+0xac>
 800d154:	2603      	movs	r6, #3
 800d156:	fa06 f202 	lsl.w	r2, r6, r2
 800d15a:	4315      	orrs	r5, r2
 800d15c:	e7c5      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d15e:	2601      	movs	r6, #1
 800d160:	fa06 f202 	lsl.w	r2, r6, r2
 800d164:	4315      	orrs	r5, r2
 800d166:	e7c0      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d168:	2602      	movs	r6, #2
 800d16a:	fa06 f202 	lsl.w	r2, r6, r2
 800d16e:	4315      	orrs	r5, r2
 800d170:	e7bb      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d172:	2606      	movs	r6, #6
 800d174:	fa06 f202 	lsl.w	r2, r6, r2
 800d178:	4315      	orrs	r5, r2
 800d17a:	e7b6      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d17c:	2604      	movs	r6, #4
 800d17e:	fa06 f202 	lsl.w	r2, r6, r2
 800d182:	4315      	orrs	r5, r2
 800d184:	e7b1      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d186:	2605      	movs	r6, #5
 800d188:	fa06 f202 	lsl.w	r2, r6, r2
 800d18c:	4315      	orrs	r5, r2
 800d18e:	e7ac      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d190:	2607      	movs	r6, #7
 800d192:	fa06 f202 	lsl.w	r2, r6, r2
 800d196:	4315      	orrs	r5, r2
 800d198:	e7a7      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d19a:	2608      	movs	r6, #8
 800d19c:	fa06 f202 	lsl.w	r2, r6, r2
 800d1a0:	4315      	orrs	r5, r2
 800d1a2:	e7a2      	b.n	800d0ea <HAL_GPIO_Init+0x156>
 800d1a4:	58020000 	.word	0x58020000
 800d1a8:	58020800 	.word	0x58020800
 800d1ac:	58020c00 	.word	0x58020c00
 800d1b0:	58021000 	.word	0x58021000
 800d1b4:	58021400 	.word	0x58021400
 800d1b8:	58021800 	.word	0x58021800
 800d1bc:	58021c00 	.word	0x58021c00
 800d1c0:	58022000 	.word	0x58022000
 800d1c4:	58022400 	.word	0x58022400
 800d1c8:	58024400 	.word	0x58024400
 800d1cc:	58000080 	.word	0x58000080

0800d1d0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d1d0:	2900      	cmp	r1, #0
 800d1d2:	f000 80ac 	beq.w	800d32e <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
 800d1d6:	2300      	movs	r3, #0
{
 800d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	f8df a170 	ldr.w	sl, [pc, #368]	; 800d350 <HAL_GPIO_DeInit+0x180>
 800d1e0:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d1e2:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800d354 <HAL_GPIO_DeInit+0x184>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d1e6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800d358 <HAL_GPIO_DeInit+0x188>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d1ea:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d35c <HAL_GPIO_DeInit+0x18c>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d1ee:	f04f 0e01 	mov.w	lr, #1
 800d1f2:	fa0e f403 	lsl.w	r4, lr, r3
    if (iocurrent != 0x00U)
 800d1f6:	ea14 0c01 	ands.w	ip, r4, r1
 800d1fa:	d073      	beq.n	800d2e4 <HAL_GPIO_DeInit+0x114>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d1fc:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d200:	f003 0203 	and.w	r2, r3, #3
 800d204:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d206:	4548      	cmp	r0, r9
 800d208:	4455      	add	r5, sl
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d20a:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d20e:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d210:	fa06 f602 	lsl.w	r6, r6, r2
 800d214:	ea07 0706 	and.w	r7, r7, r6
 800d218:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d21a:	d023      	beq.n	800d264 <HAL_GPIO_DeInit+0x94>
 800d21c:	4558      	cmp	r0, fp
 800d21e:	d06a      	beq.n	800d2f6 <HAL_GPIO_DeInit+0x126>
 800d220:	4f46      	ldr	r7, [pc, #280]	; (800d33c <HAL_GPIO_DeInit+0x16c>)
 800d222:	42b8      	cmp	r0, r7
 800d224:	d06a      	beq.n	800d2fc <HAL_GPIO_DeInit+0x12c>
 800d226:	4f46      	ldr	r7, [pc, #280]	; (800d340 <HAL_GPIO_DeInit+0x170>)
 800d228:	42b8      	cmp	r0, r7
 800d22a:	d071      	beq.n	800d310 <HAL_GPIO_DeInit+0x140>
 800d22c:	4f45      	ldr	r7, [pc, #276]	; (800d344 <HAL_GPIO_DeInit+0x174>)
 800d22e:	42b8      	cmp	r0, r7
 800d230:	d073      	beq.n	800d31a <HAL_GPIO_DeInit+0x14a>
 800d232:	4f45      	ldr	r7, [pc, #276]	; (800d348 <HAL_GPIO_DeInit+0x178>)
 800d234:	42b8      	cmp	r0, r7
 800d236:	d066      	beq.n	800d306 <HAL_GPIO_DeInit+0x136>
 800d238:	4f44      	ldr	r7, [pc, #272]	; (800d34c <HAL_GPIO_DeInit+0x17c>)
 800d23a:	42b8      	cmp	r0, r7
 800d23c:	d059      	beq.n	800d2f2 <HAL_GPIO_DeInit+0x122>
 800d23e:	f8df e120 	ldr.w	lr, [pc, #288]	; 800d360 <HAL_GPIO_DeInit+0x190>
 800d242:	4570      	cmp	r0, lr
 800d244:	d074      	beq.n	800d330 <HAL_GPIO_DeInit+0x160>
 800d246:	f8df e11c 	ldr.w	lr, [pc, #284]	; 800d364 <HAL_GPIO_DeInit+0x194>
 800d24a:	4570      	cmp	r0, lr
 800d24c:	d06a      	beq.n	800d324 <HAL_GPIO_DeInit+0x154>
 800d24e:	f8df e118 	ldr.w	lr, [pc, #280]	; 800d368 <HAL_GPIO_DeInit+0x198>
 800d252:	4570      	cmp	r0, lr
 800d254:	bf14      	ite	ne
 800d256:	f04f 0e0a 	movne.w	lr, #10
 800d25a:	f04f 0e09 	moveq.w	lr, #9
 800d25e:	fa0e f202 	lsl.w	r2, lr, r2
 800d262:	e000      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d264:	2200      	movs	r2, #0
 800d266:	9f01      	ldr	r7, [sp, #4]
 800d268:	4297      	cmp	r7, r2
 800d26a:	d119      	bne.n	800d2a0 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d26c:	f8d8 7000 	ldr.w	r7, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800d270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d274:	ea27 070c 	bic.w	r7, r7, ip
 800d278:	f8c8 7000 	str.w	r7, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d27c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d280:	ea27 070c 	bic.w	r7, r7, ip
 800d284:	f8c8 7004 	str.w	r7, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d288:	6817      	ldr	r7, [r2, #0]
 800d28a:	ea27 070c 	bic.w	r7, r7, ip
 800d28e:	6017      	str	r7, [r2, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800d290:	6857      	ldr	r7, [r2, #4]
 800d292:	ea27 070c 	bic.w	r7, r7, ip
 800d296:	6057      	str	r7, [r2, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d298:	68aa      	ldr	r2, [r5, #8]
 800d29a:	ea22 0606 	bic.w	r6, r2, r6
 800d29e:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d2a0:	005a      	lsls	r2, r3, #1
 800d2a2:	2603      	movs	r6, #3
 800d2a4:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d2a8:	270f      	movs	r7, #15
 800d2aa:	fa23 f506 	lsr.w	r5, r3, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d2ae:	4096      	lsls	r6, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d2b0:	f003 0207 	and.w	r2, r3, #7
 800d2b4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d2b8:	ea4c 0c06 	orr.w	ip, ip, r6
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d2bc:	0092      	lsls	r2, r2, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d2be:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d2c2:	4097      	lsls	r7, r2
 800d2c4:	6a2a      	ldr	r2, [r5, #32]
 800d2c6:	ea22 0207 	bic.w	r2, r2, r7
 800d2ca:	622a      	str	r2, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d2cc:	68c2      	ldr	r2, [r0, #12]
 800d2ce:	ea22 0206 	bic.w	r2, r2, r6
 800d2d2:	60c2      	str	r2, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d2d4:	6842      	ldr	r2, [r0, #4]
 800d2d6:	ea22 0404 	bic.w	r4, r2, r4
 800d2da:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d2dc:	6882      	ldr	r2, [r0, #8]
 800d2de:	ea22 0606 	bic.w	r6, r2, r6
 800d2e2:	6086      	str	r6, [r0, #8]
    }

    position++;
 800d2e4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800d2e6:	fa31 f203 	lsrs.w	r2, r1, r3
 800d2ea:	d180      	bne.n	800d1ee <HAL_GPIO_DeInit+0x1e>
  }
}
 800d2ec:	b003      	add	sp, #12
 800d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f2:	f04f 0e06 	mov.w	lr, #6
 800d2f6:	fa0e f202 	lsl.w	r2, lr, r2
 800d2fa:	e7b4      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d2fc:	f04f 0e02 	mov.w	lr, #2
 800d300:	fa0e f202 	lsl.w	r2, lr, r2
 800d304:	e7af      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d306:	f04f 0e05 	mov.w	lr, #5
 800d30a:	fa0e f202 	lsl.w	r2, lr, r2
 800d30e:	e7aa      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d310:	f04f 0e03 	mov.w	lr, #3
 800d314:	fa0e f202 	lsl.w	r2, lr, r2
 800d318:	e7a5      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d31a:	f04f 0e04 	mov.w	lr, #4
 800d31e:	fa0e f202 	lsl.w	r2, lr, r2
 800d322:	e7a0      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d324:	f04f 0e08 	mov.w	lr, #8
 800d328:	fa0e f202 	lsl.w	r2, lr, r2
 800d32c:	e79b      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d32e:	4770      	bx	lr
 800d330:	f04f 0e07 	mov.w	lr, #7
 800d334:	fa0e f202 	lsl.w	r2, lr, r2
 800d338:	e795      	b.n	800d266 <HAL_GPIO_DeInit+0x96>
 800d33a:	bf00      	nop
 800d33c:	58020800 	.word	0x58020800
 800d340:	58020c00 	.word	0x58020c00
 800d344:	58021000 	.word	0x58021000
 800d348:	58021400 	.word	0x58021400
 800d34c:	58021800 	.word	0x58021800
 800d350:	58000400 	.word	0x58000400
 800d354:	58020000 	.word	0x58020000
 800d358:	58000080 	.word	0x58000080
 800d35c:	58020400 	.word	0x58020400
 800d360:	58021c00 	.word	0x58021c00
 800d364:	58022000 	.word	0x58022000
 800d368:	58022400 	.word	0x58022400

0800d36c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d36c:	6903      	ldr	r3, [r0, #16]
 800d36e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800d370:	bf14      	ite	ne
 800d372:	2001      	movne	r0, #1
 800d374:	2000      	moveq	r0, #0
 800d376:	4770      	bx	lr

0800d378 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d378:	b902      	cbnz	r2, 800d37c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d37a:	0409      	lsls	r1, r1, #16
 800d37c:	6181      	str	r1, [r0, #24]
  }
}
 800d37e:	4770      	bx	lr

0800d380 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800d380:	6943      	ldr	r3, [r0, #20]
 800d382:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d386:	bf08      	it	eq
 800d388:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800d38a:	6181      	str	r1, [r0, #24]
  }
}
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop

0800d390 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	4604      	mov	r4, r0
 800d394:	460d      	mov	r5, r1
 800d396:	4616      	mov	r6, r2
 800d398:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	d12c      	bne.n	800d3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800d39e:	699a      	ldr	r2, [r3, #24]
 800d3a0:	0790      	lsls	r0, r2, #30
 800d3a2:	d427      	bmi.n	800d3f4 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d3a4:	699a      	ldr	r2, [r3, #24]
 800d3a6:	06d1      	lsls	r1, r2, #27
 800d3a8:	d5f9      	bpl.n	800d39e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d3aa:	699a      	ldr	r2, [r3, #24]
 800d3ac:	0691      	lsls	r1, r2, #26
 800d3ae:	d5fc      	bpl.n	800d3aa <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3b0:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3b2:	2110      	movs	r1, #16
 800d3b4:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3b6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d3b8:	699a      	ldr	r2, [r3, #24]
 800d3ba:	0790      	lsls	r0, r2, #30
 800d3bc:	d501      	bpl.n	800d3c2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800d3be:	2200      	movs	r2, #0
 800d3c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d3c2:	699a      	ldr	r2, [r3, #24]
 800d3c4:	07d1      	lsls	r1, r2, #31
 800d3c6:	d403      	bmi.n	800d3d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d3c8:	699a      	ldr	r2, [r3, #24]
 800d3ca:	f042 0201 	orr.w	r2, r2, #1
 800d3ce:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d3d0:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3d2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800d3d4:	4e1b      	ldr	r6, [pc, #108]	; (800d444 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800d3d6:	2520      	movs	r5, #32
      return HAL_ERROR;
 800d3d8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800d3da:	4032      	ands	r2, r6
 800d3dc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3de:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d3e0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3e4:	f043 0304 	orr.w	r3, r3, #4
 800d3e8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d3ea:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3ee:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800d3f4:	2000      	movs	r0, #0
}
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3f8:	699a      	ldr	r2, [r3, #24]
 800d3fa:	0792      	lsls	r2, r2, #30
 800d3fc:	d4fa      	bmi.n	800d3f4 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d3fe:	699a      	ldr	r2, [r3, #24]
 800d400:	06d0      	lsls	r0, r2, #27
 800d402:	d41b      	bmi.n	800d43c <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d404:	f7fd f8a2 	bl	800a54c <HAL_GetTick>
 800d408:	1b80      	subs	r0, r0, r6
 800d40a:	42a8      	cmp	r0, r5
 800d40c:	d801      	bhi.n	800d412 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d40e:	2d00      	cmp	r5, #0
 800d410:	d1c2      	bne.n	800d398 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d412:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d414:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d416:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d418:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d41a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d41c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d420:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d422:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d426:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d42c:	f7fd f88e 	bl	800a54c <HAL_GetTick>
 800d430:	1b80      	subs	r0, r0, r6
 800d432:	4285      	cmp	r5, r0
 800d434:	d3ed      	bcc.n	800d412 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d436:	2d00      	cmp	r5, #0
 800d438:	d0eb      	beq.n	800d412 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d43a:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d43c:	6999      	ldr	r1, [r3, #24]
 800d43e:	068a      	lsls	r2, r1, #26
 800d440:	d5f4      	bpl.n	800d42c <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 800d442:	e7b5      	b.n	800d3b0 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800d444:	fe00e800 	.word	0xfe00e800

0800d448 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	4604      	mov	r4, r0
 800d44c:	460d      	mov	r5, r1
 800d44e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	6999      	ldr	r1, [r3, #24]
 800d454:	068a      	lsls	r2, r1, #26
 800d456:	d449      	bmi.n	800d4ec <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d458:	6999      	ldr	r1, [r3, #24]
 800d45a:	06ca      	lsls	r2, r1, #27
 800d45c:	d526      	bpl.n	800d4ac <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 800d45e:	1c68      	adds	r0, r5, #1
 800d460:	d138      	bne.n	800d4d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d462:	699a      	ldr	r2, [r3, #24]
 800d464:	0691      	lsls	r1, r2, #26
 800d466:	d5fc      	bpl.n	800d462 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d468:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d46a:	2110      	movs	r1, #16
 800d46c:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d46e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	0790      	lsls	r0, r2, #30
 800d474:	d501      	bpl.n	800d47a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800d476:	2200      	movs	r2, #0
 800d478:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d47a:	699a      	ldr	r2, [r3, #24]
 800d47c:	07d1      	lsls	r1, r2, #31
 800d47e:	d403      	bmi.n	800d488 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d480:	699a      	ldr	r2, [r3, #24]
 800d482:	f042 0201 	orr.w	r2, r2, #1
 800d486:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800d488:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d48a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800d48c:	4e18      	ldr	r6, [pc, #96]	; (800d4f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 800d48e:	2520      	movs	r5, #32
      return HAL_ERROR;
 800d490:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800d492:	4032      	ands	r2, r6
 800d494:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d496:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800d498:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d49c:	f043 0304 	orr.w	r3, r3, #4
 800d4a0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d4a2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4a6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ac:	f7fd f84e 	bl	800a54c <HAL_GetTick>
 800d4b0:	1b80      	subs	r0, r0, r6
 800d4b2:	42a8      	cmp	r0, r5
 800d4b4:	d801      	bhi.n	800d4ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800d4b6:	2d00      	cmp	r5, #0
 800d4b8:	d1ca      	bne.n	800d450 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d4bc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4be:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d4c0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4c2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d4c4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4c8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d4ca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4ce:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d4d2:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4d4:	699a      	ldr	r2, [r3, #24]
 800d4d6:	0692      	lsls	r2, r2, #26
 800d4d8:	d4c6      	bmi.n	800d468 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4da:	f7fd f837 	bl	800a54c <HAL_GetTick>
 800d4de:	1b80      	subs	r0, r0, r6
 800d4e0:	4285      	cmp	r5, r0
 800d4e2:	d3ea      	bcc.n	800d4ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800d4e4:	2d00      	cmp	r5, #0
 800d4e6:	d0e8      	beq.n	800d4ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	e7b8      	b.n	800d45e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800d4ec:	2000      	movs	r0, #0
}
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	fe00e800 	.word	0xfe00e800

0800d4f4 <HAL_I2C_MspInit>:
}
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop

0800d4f8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d04d      	beq.n	800d598 <HAL_I2C_Init+0xa0>
{
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d4fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d502:	4604      	mov	r4, r0
 800d504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d040      	beq.n	800d58e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d50c:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d50e:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d510:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d514:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d518:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800d51a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d51c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800d520:	f021 0101 	bic.w	r1, r1, #1
 800d524:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d526:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d52e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d530:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d532:	d028      	beq.n	800d586 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d534:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d538:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d53a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d53c:	d102      	bne.n	800d544 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d53e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d542:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d544:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d546:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d548:	4814      	ldr	r0, [pc, #80]	; (800d59c <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 800d54a:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d54c:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d54e:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d550:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d554:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d556:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d558:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d55a:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d55c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d560:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d562:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d566:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d568:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 800d56a:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d56c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d56e:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	f042 0201 	orr.w	r2, r2, #1
 800d576:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d578:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d57a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d57e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d580:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d58a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d58c:	e7da      	b.n	800d544 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800d58e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d592:	f7ff ffaf 	bl	800d4f4 <HAL_I2C_MspInit>
 800d596:	e7b9      	b.n	800d50c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800d598:	2001      	movs	r0, #1
}
 800d59a:	4770      	bx	lr
 800d59c:	02008000 	.word	0x02008000

0800d5a0 <HAL_I2C_MspDeInit>:
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop

0800d5a4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800d5a4:	b1b0      	cbz	r0, 800d5d4 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800d5a6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d5a8:	2324      	movs	r3, #36	; 0x24
{
 800d5aa:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d5ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800d5b0:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800d5b2:	6813      	ldr	r3, [r2, #0]
 800d5b4:	f023 0301 	bic.w	r3, r3, #1
 800d5b8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800d5ba:	f7ff fff1 	bl	800d5a0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800d5c2:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800d5c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800d5c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800d5cc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800d5d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d5d4:	2001      	movs	r0, #1
}
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_I2C_Mem_Write>:
{
 800d5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5dc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d5e2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5e6:	2b20      	cmp	r3, #32
{
 800d5e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5ea:	f040 80b0 	bne.w	800d74e <HAL_I2C_Mem_Write+0x176>
    if ((pData == NULL) || (Size == 0U))
 800d5ee:	9b08      	ldr	r3, [sp, #32]
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 80a5 	beq.w	800d742 <HAL_I2C_Mem_Write+0x16a>
 800d5f8:	f1ba 0f00 	cmp.w	sl, #0
 800d5fc:	f000 80a1 	beq.w	800d742 <HAL_I2C_Mem_Write+0x16a>
    __HAL_LOCK(hi2c);
 800d600:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d604:	2b01      	cmp	r3, #1
 800d606:	f000 80a2 	beq.w	800d74e <HAL_I2C_Mem_Write+0x176>
 800d60a:	2301      	movs	r3, #1
 800d60c:	460e      	mov	r6, r1
 800d60e:	4690      	mov	r8, r2
 800d610:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d614:	f7fc ff9a 	bl	800a54c <HAL_GetTick>
 800d618:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800d61a:	e005      	b.n	800d628 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d61c:	f7fc ff96 	bl	800a54c <HAL_GetTick>
 800d620:	1b40      	subs	r0, r0, r5
 800d622:	2819      	cmp	r0, #25
 800d624:	f200 80af 	bhi.w	800d786 <HAL_I2C_Mem_Write+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d628:	f8d4 c000 	ldr.w	ip, [r4]
 800d62c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800d630:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800d634:	d1f2      	bne.n	800d61c <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d636:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d638:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 800d63a:	9808      	ldr	r0, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d63c:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d640:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d644:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 800d830 <HAL_I2C_Mem_Write+0x258>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d648:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d64c:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d64e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d650:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d654:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 800d658:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d65a:	fa5f f089 	uxtb.w	r0, r9
 800d65e:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800d662:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d664:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800d834 <HAL_I2C_Mem_Write+0x25c>
 800d668:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d66c:	4639      	mov	r1, r7
 800d66e:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d670:	4333      	orrs	r3, r6
 800d672:	ea43 0e0e 	orr.w	lr, r3, lr
 800d676:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d67a:	f7ff fe89 	bl	800d390 <I2C_WaitOnTXISFlagUntilTimeout>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d171      	bne.n	800d766 <HAL_I2C_Mem_Write+0x18e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d682:	f1b9 0f01 	cmp.w	r9, #1
 800d686:	d00a      	beq.n	800d69e <HAL_I2C_Mem_Write+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d688:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800d68c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d68e:	462a      	mov	r2, r5
 800d690:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d692:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d694:	4620      	mov	r0, r4
 800d696:	f7ff fe7b 	bl	800d390 <I2C_WaitOnTXISFlagUntilTimeout>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d163      	bne.n	800d766 <HAL_I2C_Mem_Write+0x18e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d69e:	fa5f f288 	uxtb.w	r2, r8
 800d6a2:	6821      	ldr	r1, [r4, #0]
 800d6a4:	628a      	str	r2, [r1, #40]	; 0x28
 800d6a6:	1c78      	adds	r0, r7, #1
 800d6a8:	f040 8089 	bne.w	800d7be <HAL_I2C_Mem_Write+0x1e6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6ac:	698b      	ldr	r3, [r1, #24]
 800d6ae:	061a      	lsls	r2, r3, #24
 800d6b0:	d5fc      	bpl.n	800d6ac <HAL_I2C_Mem_Write+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	2bff      	cmp	r3, #255	; 0xff
 800d6b8:	f240 8090 	bls.w	800d7dc <HAL_I2C_Mem_Write+0x204>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d6bc:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6be:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d6c0:	4a58      	ldr	r2, [pc, #352]	; (800d824 <HAL_I2C_Mem_Write+0x24c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6c2:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	4a58      	ldr	r2, [pc, #352]	; (800d828 <HAL_I2C_Mem_Write+0x250>)
 800d6c8:	4333      	orrs	r3, r6
 800d6ca:	431a      	orrs	r2, r3
 800d6cc:	604a      	str	r2, [r1, #4]
 800d6ce:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800d824 <HAL_I2C_Mem_Write+0x24c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6d2:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d6d6:	f8df 9150 	ldr.w	r9, [pc, #336]	; 800d828 <HAL_I2C_Mem_Write+0x250>
 800d6da:	e004      	b.n	800d6e6 <HAL_I2C_Mem_Write+0x10e>
    while (hi2c->XferCount > 0U);
 800d6dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 8089 	beq.w	800d7f8 <HAL_I2C_Mem_Write+0x220>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6e6:	462a      	mov	r2, r5
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f7ff fe50 	bl	800d390 <I2C_WaitOnTXISFlagUntilTimeout>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d171      	bne.n	800d7d8 <HAL_I2C_Mem_Write+0x200>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d6f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6f6:	6821      	ldr	r1, [r4, #0]
 800d6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800d6fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d6fe:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d700:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d702:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800d704:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d706:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800d708:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d70a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d70c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d70e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d710:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d712:	b292      	uxth	r2, r2
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e1      	bne.n	800d6dc <HAL_I2C_Mem_Write+0x104>
 800d718:	2a00      	cmp	r2, #0
 800d71a:	d0df      	beq.n	800d6dc <HAL_I2C_Mem_Write+0x104>
 800d71c:	1c78      	adds	r0, r7, #1
 800d71e:	d127      	bne.n	800d770 <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d720:	698b      	ldr	r3, [r1, #24]
 800d722:	061a      	lsls	r2, r3, #24
 800d724:	d5fc      	bpl.n	800d720 <HAL_I2C_Mem_Write+0x148>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d726:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d728:	b29b      	uxth	r3, r3
 800d72a:	2bff      	cmp	r3, #255	; 0xff
 800d72c:	d939      	bls.n	800d7a2 <HAL_I2C_Mem_Write+0x1ca>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d72e:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d730:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d734:	ea03 0308 	and.w	r3, r3, r8
 800d738:	4333      	orrs	r3, r6
 800d73a:	ea43 0309 	orr.w	r3, r3, r9
 800d73e:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d740:	e7cc      	b.n	800d6dc <HAL_I2C_Mem_Write+0x104>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d742:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d746:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d748:	6463      	str	r3, [r4, #68]	; 0x44
}
 800d74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800d74e:	2002      	movs	r0, #2
}
 800d750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d754:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d756:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d758:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d75a:	430b      	orrs	r3, r1
 800d75c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d75e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d762:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d766:	2300      	movs	r3, #0
      return HAL_ERROR;
 800d768:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d76a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800d76e:	e7ec      	b.n	800d74a <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d770:	698b      	ldr	r3, [r1, #24]
 800d772:	061b      	lsls	r3, r3, #24
 800d774:	d4d7      	bmi.n	800d726 <HAL_I2C_Mem_Write+0x14e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d776:	f7fc fee9 	bl	800a54c <HAL_GetTick>
 800d77a:	1b40      	subs	r0, r0, r5
 800d77c:	4287      	cmp	r7, r0
 800d77e:	d302      	bcc.n	800d786 <HAL_I2C_Mem_Write+0x1ae>
 800d780:	b10f      	cbz	r7, 800d786 <HAL_I2C_Mem_Write+0x1ae>
 800d782:	6821      	ldr	r1, [r4, #0]
 800d784:	e7ca      	b.n	800d71c <HAL_I2C_Mem_Write+0x144>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d786:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d788:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d78a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d78c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d78e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d790:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d794:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d796:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d79a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
 800d7a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7a4:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800d7a6:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7a8:	ea03 0308 	and.w	r3, r3, r8
 800d7ac:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
 800d7ae:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7b0:	4333      	orrs	r3, r6
 800d7b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d7b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d7ba:	604b      	str	r3, [r1, #4]
}
 800d7bc:	e78e      	b.n	800d6dc <HAL_I2C_Mem_Write+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7be:	698b      	ldr	r3, [r1, #24]
 800d7c0:	061b      	lsls	r3, r3, #24
 800d7c2:	f53f af76 	bmi.w	800d6b2 <HAL_I2C_Mem_Write+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7c6:	f7fc fec1 	bl	800a54c <HAL_GetTick>
 800d7ca:	1b40      	subs	r0, r0, r5
 800d7cc:	4287      	cmp	r7, r0
 800d7ce:	d3c1      	bcc.n	800d754 <HAL_I2C_Mem_Write+0x17c>
 800d7d0:	2f00      	cmp	r7, #0
 800d7d2:	d0bf      	beq.n	800d754 <HAL_I2C_Mem_Write+0x17c>
 800d7d4:	6821      	ldr	r1, [r4, #0]
 800d7d6:	e766      	b.n	800d6a6 <HAL_I2C_Mem_Write+0xce>
        return HAL_ERROR;
 800d7d8:	2001      	movs	r0, #1
 800d7da:	e7b6      	b.n	800d74a <HAL_I2C_Mem_Write+0x172>
      hi2c->XferSize = hi2c->XferCount;
 800d7dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7de:	4811      	ldr	r0, [pc, #68]	; (800d824 <HAL_I2C_Mem_Write+0x24c>)
 800d7e0:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 800d7e2:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7e4:	4003      	ands	r3, r0
 800d7e6:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
 800d7e8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7ea:	4333      	orrs	r3, r6
 800d7ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d7f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d7f4:	604b      	str	r3, [r1, #4]
}
 800d7f6:	e76a      	b.n	800d6ce <HAL_I2C_Mem_Write+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7f8:	462a      	mov	r2, r5
 800d7fa:	4639      	mov	r1, r7
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f7ff fe23 	bl	800d448 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d802:	2800      	cmp	r0, #0
 800d804:	d1e8      	bne.n	800d7d8 <HAL_I2C_Mem_Write+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d80a:	4d08      	ldr	r5, [pc, #32]	; (800d82c <HAL_I2C_Mem_Write+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d80c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	402a      	ands	r2, r5
 800d812:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d814:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d818:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d81c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d820:	e793      	b.n	800d74a <HAL_I2C_Mem_Write+0x172>
 800d822:	bf00      	nop
 800d824:	fc009c00 	.word	0xfc009c00
 800d828:	01ff0000 	.word	0x01ff0000
 800d82c:	fe00e800 	.word	0xfe00e800
 800d830:	fc009800 	.word	0xfc009800
 800d834:	81002000 	.word	0x81002000

0800d838 <HAL_I2C_Mem_Read>:
{
 800d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d83e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d842:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d846:	2b20      	cmp	r3, #32
{
 800d848:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d84a:	f040 80b3 	bne.w	800d9b4 <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
 800d84e:	9b08      	ldr	r3, [sp, #32]
 800d850:	4604      	mov	r4, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 80a8 	beq.w	800d9a8 <HAL_I2C_Mem_Read+0x170>
 800d858:	f1ba 0f00 	cmp.w	sl, #0
 800d85c:	f000 80a4 	beq.w	800d9a8 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
 800d860:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d864:	2b01      	cmp	r3, #1
 800d866:	f000 80a5 	beq.w	800d9b4 <HAL_I2C_Mem_Read+0x17c>
 800d86a:	2301      	movs	r3, #1
 800d86c:	460f      	mov	r7, r1
 800d86e:	4690      	mov	r8, r2
 800d870:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d874:	f7fc fe6a 	bl	800a54c <HAL_GetTick>
 800d878:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800d87a:	e005      	b.n	800d888 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d87c:	f7fc fe66 	bl	800a54c <HAL_GetTick>
 800d880:	1b80      	subs	r0, r0, r6
 800d882:	2819      	cmp	r0, #25
 800d884:	f200 8082 	bhi.w	800d98c <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d888:	f8d4 c000 	ldr.w	ip, [r4]
 800d88c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800d890:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800d894:	d1f2      	bne.n	800d87c <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d896:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d898:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 800d89a:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d89c:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d8a0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d8a4:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800da98 <HAL_I2C_Mem_Read+0x260>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d8a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8ac:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8ae:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d8b0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d8b4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 800d8b8:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d8ba:	fa5f f089 	uxtb.w	r0, r9
 800d8be:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800d8c2:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d8c4:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 800daa8 <HAL_I2C_Mem_Read+0x270>
 800d8c8:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d8d0:	433b      	orrs	r3, r7
 800d8d2:	ea43 0e0e 	orr.w	lr, r3, lr
 800d8d6:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8da:	f7ff fd59 	bl	800d390 <I2C_WaitOnTXISFlagUntilTimeout>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d174      	bne.n	800d9cc <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d8e2:	f1b9 0f01 	cmp.w	r9, #1
 800d8e6:	d00a      	beq.n	800d8fe <HAL_I2C_Mem_Read+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d8e8:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800d8ec:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8ee:	4632      	mov	r2, r6
 800d8f0:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d8f2:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7ff fd4b 	bl	800d390 <I2C_WaitOnTXISFlagUntilTimeout>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d166      	bne.n	800d9cc <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d8fe:	fa5f f288 	uxtb.w	r2, r8
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	629a      	str	r2, [r3, #40]	; 0x28
 800d906:	1c68      	adds	r0, r5, #1
 800d908:	f040 8091 	bne.w	800da2e <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d90c:	699a      	ldr	r2, [r3, #24]
 800d90e:	0651      	lsls	r1, r2, #25
 800d910:	d5fc      	bpl.n	800d90c <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d912:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d914:	b292      	uxth	r2, r2
 800d916:	2aff      	cmp	r2, #255	; 0xff
 800d918:	f240 8096 	bls.w	800da48 <HAL_I2C_Mem_Read+0x210>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d91c:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d91e:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d920:	495d      	ldr	r1, [pc, #372]	; (800da98 <HAL_I2C_Mem_Read+0x260>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d922:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d924:	400a      	ands	r2, r1
 800d926:	495d      	ldr	r1, [pc, #372]	; (800da9c <HAL_I2C_Mem_Read+0x264>)
 800d928:	433a      	orrs	r2, r7
 800d92a:	4311      	orrs	r1, r2
 800d92c:	6059      	str	r1, [r3, #4]
 800d92e:	1c68      	adds	r0, r5, #1
 800d930:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800daac <HAL_I2C_Mem_Read+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d934:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d938:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800dab0 <HAL_I2C_Mem_Read+0x278>
 800d93c:	d11c      	bne.n	800d978 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d93e:	699a      	ldr	r2, [r3, #24]
 800d940:	0751      	lsls	r1, r2, #29
 800d942:	d5fc      	bpl.n	800d93e <HAL_I2C_Mem_Read+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d948:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d94a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d94c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d94e:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800d950:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d952:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d954:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800d956:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800d958:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d95a:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d95c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d95e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d960:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800d962:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d964:	b90b      	cbnz	r3, 800d96a <HAL_I2C_Mem_Read+0x132>
 800d966:	2900      	cmp	r1, #0
 800d968:	d13f      	bne.n	800d9ea <HAL_I2C_Mem_Read+0x1b2>
    while (hi2c->XferCount > 0U);
 800d96a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d07b      	beq.n	800da6a <HAL_I2C_Mem_Read+0x232>
 800d972:	1c68      	adds	r0, r5, #1
 800d974:	6823      	ldr	r3, [r4, #0]
 800d976:	d0e2      	beq.n	800d93e <HAL_I2C_Mem_Read+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d978:	699a      	ldr	r2, [r3, #24]
 800d97a:	0752      	lsls	r2, r2, #29
 800d97c:	d4e2      	bmi.n	800d944 <HAL_I2C_Mem_Read+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d97e:	f7fc fde5 	bl	800a54c <HAL_GetTick>
 800d982:	1b80      	subs	r0, r0, r6
 800d984:	4285      	cmp	r5, r0
 800d986:	d301      	bcc.n	800d98c <HAL_I2C_Mem_Read+0x154>
 800d988:	2d00      	cmp	r5, #0
 800d98a:	d1f2      	bne.n	800d972 <HAL_I2C_Mem_Read+0x13a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d98c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d98e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d990:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d992:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d994:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d996:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d99a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d99c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9a0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d9a8:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d9ac:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d9ae:	6463      	str	r3, [r4, #68]	; 0x44
}
 800d9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800d9b4:	2002      	movs	r0, #2
}
 800d9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d9ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d9bc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9be:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d9c0:	430b      	orrs	r3, r1
 800d9c2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d9c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d9cc:	2300      	movs	r3, #0
      return HAL_ERROR;
 800d9ce:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d9d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800d9d4:	e7ec      	b.n	800d9b0 <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9d6:	6993      	ldr	r3, [r2, #24]
 800d9d8:	061b      	lsls	r3, r3, #24
 800d9da:	d40c      	bmi.n	800d9f6 <HAL_I2C_Mem_Read+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9dc:	f7fc fdb6 	bl	800a54c <HAL_GetTick>
 800d9e0:	1b80      	subs	r0, r0, r6
 800d9e2:	4285      	cmp	r5, r0
 800d9e4:	d3d2      	bcc.n	800d98c <HAL_I2C_Mem_Read+0x154>
 800d9e6:	2d00      	cmp	r5, #0
 800d9e8:	d0d0      	beq.n	800d98c <HAL_I2C_Mem_Read+0x154>
 800d9ea:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9ec:	6822      	ldr	r2, [r4, #0]
 800d9ee:	d1f2      	bne.n	800d9d6 <HAL_I2C_Mem_Read+0x19e>
 800d9f0:	6993      	ldr	r3, [r2, #24]
 800d9f2:	0619      	lsls	r1, r3, #24
 800d9f4:	d5fc      	bpl.n	800d9f0 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d9f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	2bff      	cmp	r3, #255	; 0xff
 800d9fc:	d909      	bls.n	800da12 <HAL_I2C_Mem_Read+0x1da>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d9fe:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800da00:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da04:	ea03 0308 	and.w	r3, r3, r8
 800da08:	433b      	orrs	r3, r7
 800da0a:	ea43 0309 	orr.w	r3, r3, r9
 800da0e:	6053      	str	r3, [r2, #4]
}
 800da10:	e7ab      	b.n	800d96a <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = hi2c->XferCount;
 800da12:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da14:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800da16:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da18:	ea03 0308 	and.w	r3, r3, r8
 800da1c:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 800da1e:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da20:	433b      	orrs	r3, r7
 800da22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800da2a:	6053      	str	r3, [r2, #4]
}
 800da2c:	e79d      	b.n	800d96a <HAL_I2C_Mem_Read+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da2e:	699a      	ldr	r2, [r3, #24]
 800da30:	0652      	lsls	r2, r2, #25
 800da32:	f53f af6e 	bmi.w	800d912 <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da36:	f7fc fd89 	bl	800a54c <HAL_GetTick>
 800da3a:	1b80      	subs	r0, r0, r6
 800da3c:	4285      	cmp	r5, r0
 800da3e:	d3bc      	bcc.n	800d9ba <HAL_I2C_Mem_Read+0x182>
 800da40:	2d00      	cmp	r5, #0
 800da42:	d0ba      	beq.n	800d9ba <HAL_I2C_Mem_Read+0x182>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	e75e      	b.n	800d906 <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = hi2c->XferCount;
 800da48:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da4a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800da98 <HAL_I2C_Mem_Read+0x260>
 800da4e:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800da50:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da52:	4813      	ldr	r0, [pc, #76]	; (800daa0 <HAL_I2C_Mem_Read+0x268>)
 800da54:	ea02 020c 	and.w	r2, r2, ip
 800da58:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 800da5c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da5e:	433a      	orrs	r2, r7
 800da60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800da64:	4310      	orrs	r0, r2
 800da66:	6058      	str	r0, [r3, #4]
}
 800da68:	e761      	b.n	800d92e <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da6a:	4632      	mov	r2, r6
 800da6c:	4629      	mov	r1, r5
 800da6e:	4620      	mov	r0, r4
 800da70:	f7ff fcea 	bl	800d448 <I2C_WaitOnSTOPFlagUntilTimeout>
 800da74:	b968      	cbnz	r0, 800da92 <HAL_I2C_Mem_Read+0x25a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800da7a:	4d0a      	ldr	r5, [pc, #40]	; (800daa4 <HAL_I2C_Mem_Read+0x26c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da7c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	402a      	ands	r2, r5
 800da82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800da84:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800da88:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800da8c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800da90:	e78e      	b.n	800d9b0 <HAL_I2C_Mem_Read+0x178>
      return HAL_ERROR;
 800da92:	2001      	movs	r0, #1
 800da94:	e78c      	b.n	800d9b0 <HAL_I2C_Mem_Read+0x178>
 800da96:	bf00      	nop
 800da98:	fc009800 	.word	0xfc009800
 800da9c:	81ff2400 	.word	0x81ff2400
 800daa0:	82002400 	.word	0x82002400
 800daa4:	fe00e800 	.word	0xfe00e800
 800daa8:	80002000 	.word	0x80002000
 800daac:	fc009c00 	.word	0xfc009c00
 800dab0:	01ff0000 	.word	0x01ff0000

0800dab4 <HAL_I2C_GetState>:
  return hi2c->State;
 800dab4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop

0800dabc <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800dabc:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800dabe:	4770      	bx	lr

0800dac0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dac0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800dac4:	2a20      	cmp	r2, #32
 800dac6:	d121      	bne.n	800db0c <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 800dac8:	4603      	mov	r3, r0
{
 800daca:	b470      	push	{r4, r5, r6}
 800dacc:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dace:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800dad2:	2a01      	cmp	r2, #1
 800dad4:	d01c      	beq.n	800db10 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dad6:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dad8:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dada:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dadc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800dae0:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800dae2:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800dae4:	f024 0401 	bic.w	r4, r4, #1
 800dae8:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800daea:	6814      	ldr	r4, [r2, #0]
 800daec:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800daf0:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800daf2:	6814      	ldr	r4, [r2, #0]
 800daf4:	4321      	orrs	r1, r4
 800daf6:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800daf8:	6811      	ldr	r1, [r2, #0]
 800dafa:	f041 0101 	orr.w	r1, r1, #1
 800dafe:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800db00:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800db04:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800db08:	bc70      	pop	{r4, r5, r6}
 800db0a:	4770      	bx	lr
    return HAL_BUSY;
 800db0c:	2002      	movs	r0, #2
}
 800db0e:	4770      	bx	lr
    return HAL_BUSY;
 800db10:	2002      	movs	r0, #2
}
 800db12:	bc70      	pop	{r4, r5, r6}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db18:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800db1c:	2a20      	cmp	r2, #32
 800db1e:	d120      	bne.n	800db62 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800db20:	4603      	mov	r3, r0
{
 800db22:	b470      	push	{r4, r5, r6}
 800db24:	b2d6      	uxtb	r6, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db26:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800db2a:	2a01      	cmp	r2, #1
 800db2c:	d01b      	beq.n	800db66 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800db2e:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800db30:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db32:	2500      	movs	r5, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800db34:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800db38:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800db3a:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 800db3c:	f024 0401 	bic.w	r4, r4, #1
 800db40:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800db42:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800db44:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800db48:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800db4c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800db4e:	6811      	ldr	r1, [r2, #0]
 800db50:	f041 0101 	orr.w	r1, r1, #1
 800db54:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800db56:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800db5a:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800db5e:	bc70      	pop	{r4, r5, r6}
 800db60:	4770      	bx	lr
    return HAL_BUSY;
 800db62:	2002      	movs	r0, #2
}
 800db64:	4770      	bx	lr
    return HAL_BUSY;
 800db66:	2002      	movs	r0, #2
}
 800db68:	bc70      	pop	{r4, r5, r6}
 800db6a:	4770      	bx	lr

0800db6c <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop

0800db70 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800db70:	2800      	cmp	r0, #0
 800db72:	d06d      	beq.n	800dc50 <HAL_LTDC_Init+0xe0>
{
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800db76:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800db7a:	4604      	mov	r4, r0
 800db7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800db80:	2b00      	cmp	r3, #0
 800db82:	d060      	beq.n	800dc46 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800db84:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800db86:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800db88:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800db8a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800db8c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800db90:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800db92:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800db94:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800db98:	e9d4 3200 	ldrd	r3, r2, [r4]
 800db9c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800db9e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dba0:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800dba2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800dba6:	4e2b      	ldr	r6, [pc, #172]	; (800dc54 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800dba8:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800dbaa:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dbac:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800dbae:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dbb0:	4302      	orrs	r2, r0
 800dbb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800dbb4:	689a      	ldr	r2, [r3, #8]
 800dbb6:	4032      	ands	r2, r6
 800dbb8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dbba:	6898      	ldr	r0, [r3, #8]
 800dbbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800dbc0:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dbc2:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dbc6:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dbca:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800dbcc:	68d8      	ldr	r0, [r3, #12]
 800dbce:	4030      	ands	r0, r6
 800dbd0:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800dbd8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dbda:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dbde:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dbe2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800dbe4:	691a      	ldr	r2, [r3, #16]
 800dbe6:	4032      	ands	r2, r6
 800dbe8:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dbea:	6918      	ldr	r0, [r3, #16]
 800dbec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 800dbf0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dbf2:	ea40 000c 	orr.w	r0, r0, ip
 800dbf6:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800dbf8:	6958      	ldr	r0, [r3, #20]
 800dbfa:	4006      	ands	r6, r0
 800dbfc:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800dbfe:	695a      	ldr	r2, [r3, #20]
 800dc00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dc02:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800dc06:	4302      	orrs	r2, r0
 800dc08:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dc0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800dc0c:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dc10:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800dc14:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dc18:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800dc1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dc1c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800dc20:	4302      	orrs	r2, r0
  return HAL_OK;
 800dc22:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800dc24:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800dc28:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800dc2c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800dc2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc30:	f042 0206 	orr.w	r2, r2, #6
 800dc34:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800dc36:	699a      	ldr	r2, [r3, #24]
 800dc38:	432a      	orrs	r2, r5
 800dc3a:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800dc3c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800dc40:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800dc46:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800dc4a:	f7ff ff8f 	bl	800db6c <HAL_LTDC_MspInit>
 800dc4e:	e799      	b.n	800db84 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800dc50:	2001      	movs	r0, #1
}
 800dc52:	4770      	bx	lr
 800dc54:	f000f800 	.word	0xf000f800

0800dc58 <HAL_LTDC_ErrorCallback>:
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop

0800dc5c <HAL_LTDC_LineEventCallback>:
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop

0800dc60 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800dc62:	6803      	ldr	r3, [r0, #0]
{
 800dc64:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800dc66:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800dc68:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800dc6a:	0769      	lsls	r1, r5, #29
 800dc6c:	d501      	bpl.n	800dc72 <HAL_LTDC_IRQHandler+0x12>
 800dc6e:	0772      	lsls	r2, r6, #29
 800dc70:	d41d      	bmi.n	800dcae <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800dc72:	07ab      	lsls	r3, r5, #30
 800dc74:	d501      	bpl.n	800dc7a <HAL_LTDC_IRQHandler+0x1a>
 800dc76:	07b7      	lsls	r7, r6, #30
 800dc78:	d42d      	bmi.n	800dcd6 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800dc7a:	07e8      	lsls	r0, r5, #31
 800dc7c:	d501      	bpl.n	800dc82 <HAL_LTDC_IRQHandler+0x22>
 800dc7e:	07f1      	lsls	r1, r6, #31
 800dc80:	d440      	bmi.n	800dd04 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800dc82:	072a      	lsls	r2, r5, #28
 800dc84:	d501      	bpl.n	800dc8a <HAL_LTDC_IRQHandler+0x2a>
 800dc86:	0733      	lsls	r3, r6, #28
 800dc88:	d400      	bmi.n	800dc8c <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800dc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dc8c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800dc8e:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800dc90:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800dc92:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dc94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800dc96:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dc98:	f022 0208 	bic.w	r2, r2, #8
 800dc9c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800dc9e:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800dca0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800dca4:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800dca8:	f7f3 fe44 	bl	8001934 <HAL_LTDC_ReloadEventCallback>
}
 800dcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800dcae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800dcb0:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800dcb2:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800dcb4:	f022 0204 	bic.w	r2, r2, #4
 800dcb8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800dcba:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800dcbc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800dcc0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800dcc4:	f043 0301 	orr.w	r3, r3, #1
 800dcc8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dccc:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800dcd0:	f7ff ffc2 	bl	800dc58 <HAL_LTDC_ErrorCallback>
 800dcd4:	e7cd      	b.n	800dc72 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800dcd6:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800dcd8:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dcda:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800dcdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcde:	f022 0202 	bic.w	r2, r2, #2
 800dce2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 800dce4:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800dce6:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 800dce8:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800dcea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800dcee:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800dcf2:	f043 0302 	orr.w	r3, r3, #2
 800dcf6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dcfa:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800dcfe:	f7ff ffab 	bl	800dc58 <HAL_LTDC_ErrorCallback>
 800dd02:	e7ba      	b.n	800dc7a <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dd04:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800dd06:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 800dd08:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 800dd0a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dd0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd0e:	f022 0201 	bic.w	r2, r2, #1
 800dd12:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800dd14:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800dd16:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800dd1a:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800dd1e:	f7ff ff9d 	bl	800dc5c <HAL_LTDC_LineEventCallback>
 800dd22:	e7ae      	b.n	800dc82 <HAL_LTDC_IRQHandler+0x22>

0800dd24 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dd24:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	f000 80b7 	beq.w	800de9c <HAL_LTDC_ConfigLayer+0x178>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd2e:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dd32:	2302      	movs	r3, #2
{
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dd38:	f04f 0834 	mov.w	r8, #52	; 0x34
 800dd3c:	460d      	mov	r5, r1
 800dd3e:	4689      	mov	r9, r1
  __HAL_LOCK(hltdc);
 800dd40:	f04f 0101 	mov.w	r1, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dd44:	fb08 0202 	mla	r2, r8, r2, r0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd48:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hltdc);
 800dd4a:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dd4e:	4606      	mov	r6, r0
 800dd50:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dd54:	f102 0838 	add.w	r8, r2, #56	; 0x38
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd58:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd5c:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dd60:	f8df e144 	ldr.w	lr, [pc, #324]	; 800dea8 <HAL_LTDC_ConfigLayer+0x184>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd64:	eb07 040c 	add.w	r4, r7, ip
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd68:	f3ca 4a0b 	ubfx	sl, sl, #16, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dd6c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800dd70:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800dd74:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800dd78:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800dd7c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800dd80:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd84:	6862      	ldr	r2, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dd86:	f8d9 3000 	ldr.w	r3, [r9]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dd8e:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd92:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd94:	6062      	str	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dd96:	68f9      	ldr	r1, [r7, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd98:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dd9a:	f8d5 8000 	ldr.w	r8, [r5]
 800dd9e:	f3c1 410b 	ubfx	r1, r1, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dda2:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dda6:	f108 0001 	add.w	r0, r8, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ddaa:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ddac:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ddae:	6928      	ldr	r0, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ddb0:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ddb2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ddb6:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ddba:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ddbc:	68f9      	ldr	r1, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ddbe:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ddc2:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ddc6:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ddca:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ddcc:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ddd0:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ddd4:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800ddd8:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800dddc:	445a      	add	r2, fp
 800ddde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dde2:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dde4:	6922      	ldr	r2, [r4, #16]
 800dde6:	f022 0207 	bic.w	r2, r2, #7
 800ddea:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ddec:	6120      	str	r0, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ddee:	69a2      	ldr	r2, [r4, #24]
 800ddf0:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ddf2:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ddf6:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ddfa:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ddfc:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800de00:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800de04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de08:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800de0a:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de0e:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800de10:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de14:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800de16:	6962      	ldr	r2, [r4, #20]
 800de18:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800de1c:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800de1e:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800de22:	69e2      	ldr	r2, [r4, #28]
 800de24:	ea02 0e0e 	and.w	lr, r2, lr
 800de28:	f8c4 e01c 	str.w	lr, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de2c:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800de2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800de30:	2200      	movs	r2, #0
 800de32:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800de34:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800de36:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800de38:	bb28      	cbnz	r0, 800de86 <HAL_LTDC_ConfigLayer+0x162>
  {
    tmp = 4U;
 800de3a:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de3c:	eba3 0308 	sub.w	r3, r3, r8
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800de40:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de44:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800de48:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de4a:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de50:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de52:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800de5a:	4a12      	ldr	r2, [pc, #72]	; (800dea4 <HAL_LTDC_ConfigLayer+0x180>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de5c:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 800de5e:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de60:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800de62:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800de64:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800de66:	401a      	ands	r2, r3
 800de68:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800de6a:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800de6e:	f857 300c 	ldr.w	r3, [r7, ip]
 800de72:	432b      	orrs	r3, r5
 800de74:	f847 300c 	str.w	r3, [r7, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800de78:	627d      	str	r5, [r7, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800de7a:	f886 50a1 	strb.w	r5, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800de7e:	f886 10a0 	strb.w	r1, [r6, #160]	; 0xa0
}
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800de86:	2801      	cmp	r0, #1
 800de88:	d00a      	beq.n	800dea0 <HAL_LTDC_ConfigLayer+0x17c>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800de8a:	1e82      	subs	r2, r0, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800de8c:	2a02      	cmp	r2, #2
 800de8e:	d903      	bls.n	800de98 <HAL_LTDC_ConfigLayer+0x174>
 800de90:	2807      	cmp	r0, #7
 800de92:	d001      	beq.n	800de98 <HAL_LTDC_ConfigLayer+0x174>
    tmp = 1U;
 800de94:	2201      	movs	r2, #1
 800de96:	e7d1      	b.n	800de3c <HAL_LTDC_ConfigLayer+0x118>
    tmp = 2U;
 800de98:	2202      	movs	r2, #2
 800de9a:	e7cf      	b.n	800de3c <HAL_LTDC_ConfigLayer+0x118>
  __HAL_LOCK(hltdc);
 800de9c:	2002      	movs	r0, #2
}
 800de9e:	4770      	bx	lr
    tmp = 3U;
 800dea0:	2203      	movs	r2, #3
 800dea2:	e7cb      	b.n	800de3c <HAL_LTDC_ConfigLayer+0x118>
 800dea4:	fffff800 	.word	0xfffff800
 800dea8:	fffff8f8 	.word	0xfffff8f8

0800deac <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800deac:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800deb0:	2a01      	cmp	r2, #1
 800deb2:	d013      	beq.n	800dedc <HAL_LTDC_Reload+0x30>
 800deb4:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800deb6:	2002      	movs	r0, #2
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800deb8:	681a      	ldr	r2, [r3, #0]
{
 800deba:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800debc:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800dec0:	2500      	movs	r5, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800dec2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800dec4:	2601      	movs	r6, #1
  return HAL_OK;
 800dec6:	4628      	mov	r0, r5
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800dec8:	f044 0408 	orr.w	r4, r4, #8
 800decc:	6354      	str	r4, [r2, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 800dece:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800ded0:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800ded4:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
}
 800ded8:	bc70      	pop	{r4, r5, r6}
 800deda:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800dedc:	2002      	movs	r0, #2
}
 800dede:	4770      	bx	lr

0800dee0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800dee4:	f7fc fb32 	bl	800a54c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800dee8:	2c00      	cmp	r4, #0
 800deea:	d05a      	beq.n	800dfa2 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800deec:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800deee:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800def0:	2100      	movs	r1, #0
 800def2:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800def4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800def8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800defc:	68da      	ldr	r2, [r3, #12]
 800defe:	f022 0201 	bic.w	r2, r2, #1
 800df02:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800df04:	e005      	b.n	800df12 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800df06:	f7fc fb21 	bl	800a54c <HAL_GetTick>
 800df0a:	1b43      	subs	r3, r0, r5
 800df0c:	2b05      	cmp	r3, #5
 800df0e:	d841      	bhi.n	800df94 <HAL_MDMA_Init+0xb4>
 800df10:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800df12:	68da      	ldr	r2, [r3, #12]
 800df14:	07d2      	lsls	r2, r2, #31
 800df16:	d4f6      	bmi.n	800df06 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800df18:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800df1c:	69e1      	ldr	r1, [r4, #28]
 800df1e:	4302      	orrs	r2, r0
 800df20:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 800df24:	430a      	orrs	r2, r1
 800df26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800df28:	432a      	orrs	r2, r5
 800df2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800df2c:	4302      	orrs	r2, r0
 800df2e:	68a0      	ldr	r0, [r4, #8]
 800df30:	430a      	orrs	r2, r1
 800df32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800df34:	432a      	orrs	r2, r5
 800df36:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800df38:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800df3a:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800df3c:	6920      	ldr	r0, [r4, #16]
 800df3e:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800df40:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800df42:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800df46:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800df4a:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800df4c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800df4e:	d103      	bne.n	800df58 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800df50:	691a      	ldr	r2, [r3, #16]
 800df52:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800df56:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800df58:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800df5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800df5c:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 800df5e:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800df60:	db30      	blt.n	800dfc4 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800df62:	b292      	uxth	r2, r2
 800df64:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800df66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800df68:	2a00      	cmp	r2, #0
 800df6a:	db1c      	blt.n	800dfa6 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800df6c:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800df6e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800df72:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800df76:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800df78:	d021      	beq.n	800dfbe <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800df7a:	b2c9      	uxtb	r1, r1
 800df7c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800df7e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800df80:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800df82:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800df84:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800df86:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800df88:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800df8a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800df8e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800df92:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800df94:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800df96:	2303      	movs	r3, #3
      return HAL_ERROR;
 800df98:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800df9a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800df9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dfa0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800dfa2:	2001      	movs	r0, #1
}
 800dfa4:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800dfa6:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800dfa8:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800dfaa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800dfae:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800dfb2:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800dfb4:	6a18      	ldr	r0, [r3, #32]
 800dfb6:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800dfba:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800dfbc:	d1dd      	bne.n	800df7a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	629a      	str	r2, [r3, #40]	; 0x28
 800dfc2:	e7dc      	b.n	800df7e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800dfc4:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800dfc6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800dfc8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800dfcc:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800dfce:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800dfd0:	621a      	str	r2, [r3, #32]
 800dfd2:	e7c8      	b.n	800df66 <HAL_MDMA_Init+0x86>

0800dfd4 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d06a      	beq.n	800e0ae <HAL_MDMA_Start_IT+0xda>
{
 800dfd8:	b4f0      	push	{r4, r5, r6, r7}
 800dfda:	4604      	mov	r4, r0
  __HAL_LOCK(hmdma);
 800dfdc:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800dfe0:	2801      	cmp	r0, #1
 800dfe2:	d06d      	beq.n	800e0c0 <HAL_MDMA_Start_IT+0xec>
 800dfe4:	2501      	movs	r5, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800dfe6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800dfea:	42a8      	cmp	r0, r5
  __HAL_LOCK(hmdma);
 800dfec:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800dff0:	d005      	beq.n	800dffe <HAL_MDMA_Start_IT+0x2a>
    __HAL_UNLOCK(hmdma);
 800dff2:	2300      	movs	r3, #0
    return HAL_BUSY;
 800dff4:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
 800dff6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800dffa:	bcf0      	pop	{r4, r5, r6, r7}
 800dffc:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800dffe:	6825      	ldr	r5, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800e000:	2602      	movs	r6, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e002:	2000      	movs	r0, #0
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e004:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800e008:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800e00c:	f04f 0c1f 	mov.w	ip, #31
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e010:	66a0      	str	r0, [r4, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e012:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
 800e016:	68ef      	ldr	r7, [r5, #12]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800e018:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e01c:	9e04      	ldr	r6, [sp, #16]
    __HAL_MDMA_DISABLE(hmdma);
 800e01e:	f027 0701 	bic.w	r7, r7, #1
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e022:	f106 36ff 	add.w	r6, r6, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 800e026:	60ef      	str	r7, [r5, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e028:	696f      	ldr	r7, [r5, #20]
 800e02a:	ea00 0007 	and.w	r0, r0, r7
 800e02e:	ea43 0300 	orr.w	r3, r3, r0
 800e032:	616b      	str	r3, [r5, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e034:	696b      	ldr	r3, [r5, #20]
 800e036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e03a:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 800e03e:	616b      	str	r3, [r5, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800e040:	f8c5 c004 	str.w	ip, [r5, #4]
  hmdma->Instance->CDAR = DstAddress;
 800e044:	61ea      	str	r2, [r5, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800e046:	61a9      	str	r1, [r5, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800e048:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e04a:	bf0c      	ite	eq
 800e04c:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800e050:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800e054:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800e058:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800e05a:	62ab      	str	r3, [r5, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800e05c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e05e:	bf0c      	ite	eq
 800e060:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800e064:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 800e068:	62ab      	str	r3, [r5, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800e06a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e06c:	626b      	str	r3, [r5, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800e06e:	68eb      	ldr	r3, [r5, #12]
 800e070:	f043 0306 	orr.w	r3, r3, #6
 800e074:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800e076:	b11a      	cbz	r2, 800e080 <HAL_MDMA_Start_IT+0xac>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800e078:	68eb      	ldr	r3, [r5, #12]
 800e07a:	f043 0310 	orr.w	r3, r3, #16
 800e07e:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e080:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e082:	b11b      	cbz	r3, 800e08c <HAL_MDMA_Start_IT+0xb8>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800e084:	68eb      	ldr	r3, [r5, #12]
 800e086:	f043 0308 	orr.w	r3, r3, #8
 800e08a:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800e08c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e08e:	b11b      	cbz	r3, 800e098 <HAL_MDMA_Start_IT+0xc4>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800e090:	68eb      	ldr	r3, [r5, #12]
 800e092:	f043 0320 	orr.w	r3, r3, #32
 800e096:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800e098:	68eb      	ldr	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e09a:	6862      	ldr	r2, [r4, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800e09c:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e0a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800e0a4:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e0a6:	d004      	beq.n	800e0b2 <HAL_MDMA_Start_IT+0xde>
  return HAL_OK;
 800e0a8:	2000      	movs	r0, #0
}
 800e0aa:	bcf0      	pop	{r4, r5, r6, r7}
 800e0ac:	4770      	bx	lr
    return HAL_ERROR;
 800e0ae:	2001      	movs	r0, #1
}
 800e0b0:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800e0b2:	68eb      	ldr	r3, [r5, #12]
  return HAL_OK;
 800e0b4:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800e0b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0ba:	60eb      	str	r3, [r5, #12]
}
 800e0bc:	bcf0      	pop	{r4, r5, r6, r7}
 800e0be:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 800e0c0:	2002      	movs	r0, #2
}
 800e0c2:	bcf0      	pop	{r4, r5, r6, r7}
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop

0800e0c8 <HAL_MDMA_IRQHandler>:
{
 800e0c8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t count = 0;
 800e0ca:	2300      	movs	r3, #0
{
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	b082      	sub	sp, #8
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e0d0:	4a59      	ldr	r2, [pc, #356]	; (800e238 <HAL_MDMA_IRQHandler+0x170>)
 800e0d2:	2101      	movs	r1, #1
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e0d4:	f04f 40a4 	mov.w	r0, #1375731712	; 0x52000000
  __IO uint32_t count = 0;
 800e0d8:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e0da:	6823      	ldr	r3, [r4, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e0dc:	6800      	ldr	r0, [r0, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e0de:	441a      	add	r2, r3
 800e0e0:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800e0e4:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e0e8:	4202      	tst	r2, r0
 800e0ea:	f000 80a2 	beq.w	800e232 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e0ee:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e0f0:	4952      	ldr	r1, [pc, #328]	; (800e23c <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e0f2:	07d2      	lsls	r2, r2, #31
  uint32_t timeout = SystemCoreClock / 9600U;
 800e0f4:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e0f6:	d529      	bpl.n	800e14c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800e0f8:	68da      	ldr	r2, [r3, #12]
 800e0fa:	0796      	lsls	r6, r2, #30
 800e0fc:	d526      	bpl.n	800e14c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800e0fe:	68da      	ldr	r2, [r3, #12]
 800e100:	f022 0202 	bic.w	r2, r2, #2
 800e104:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800e106:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800e108:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800e10a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800e10c:	bf54      	ite	pl
 800e10e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800e112:	f041 0102 	orrmi.w	r1, r1, #2
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800e116:	0596      	lsls	r6, r2, #22
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800e118:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800e11a:	d503      	bpl.n	800e124 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800e11c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e11e:	f041 0104 	orr.w	r1, r1, #4
 800e122:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800e124:	05d0      	lsls	r0, r2, #23
 800e126:	d503      	bpl.n	800e130 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800e128:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e12a:	f041 0108 	orr.w	r1, r1, #8
 800e12e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800e130:	0551      	lsls	r1, r2, #21
 800e132:	d503      	bpl.n	800e13c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800e134:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e136:	f041 0110 	orr.w	r1, r1, #16
 800e13a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800e13c:	0516      	lsls	r6, r2, #20
 800e13e:	d503      	bpl.n	800e148 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800e140:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800e142:	f042 0220 	orr.w	r2, r2, #32
 800e146:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800e148:	2201      	movs	r2, #1
 800e14a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	06d0      	lsls	r0, r2, #27
 800e150:	d509      	bpl.n	800e166 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800e152:	68da      	ldr	r2, [r3, #12]
 800e154:	0691      	lsls	r1, r2, #26
 800e156:	d506      	bpl.n	800e166 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e158:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800e15a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e15c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800e15e:	b112      	cbz	r2, 800e166 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800e160:	4620      	mov	r0, r4
 800e162:	4790      	blx	r2
 800e164:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	0712      	lsls	r2, r2, #28
 800e16a:	d509      	bpl.n	800e180 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800e16c:	68da      	ldr	r2, [r3, #12]
 800e16e:	06d6      	lsls	r6, r2, #27
 800e170:	d506      	bpl.n	800e180 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e172:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800e174:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e176:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800e178:	b112      	cbz	r2, 800e180 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800e17a:	4620      	mov	r0, r4
 800e17c:	4790      	blx	r2
 800e17e:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	0750      	lsls	r0, r2, #29
 800e184:	d509      	bpl.n	800e19a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800e186:	68da      	ldr	r2, [r3, #12]
 800e188:	0711      	lsls	r1, r2, #28
 800e18a:	d506      	bpl.n	800e19a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e18c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e18e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e190:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e192:	b112      	cbz	r2, 800e19a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800e194:	4620      	mov	r0, r4
 800e196:	4790      	blx	r2
 800e198:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	0792      	lsls	r2, r2, #30
 800e19e:	d516      	bpl.n	800e1ce <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800e1a0:	68da      	ldr	r2, [r3, #12]
 800e1a2:	0756      	lsls	r6, r2, #29
 800e1a4:	d513      	bpl.n	800e1ce <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800e1a6:	68da      	ldr	r2, [r3, #12]
 800e1a8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800e1ac:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800e1ae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800e1b2:	2a04      	cmp	r2, #4
 800e1b4:	d034      	beq.n	800e220 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e1b6:	2602      	movs	r6, #2
      __HAL_UNLOCK(hmdma);
 800e1b8:	2000      	movs	r0, #0
      hmdma->State = HAL_MDMA_STATE_READY;
 800e1ba:	2101      	movs	r1, #1
      if(hmdma->XferCpltCallback != NULL)
 800e1bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e1be:	605e      	str	r6, [r3, #4]
      __HAL_UNLOCK(hmdma);
 800e1c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800e1c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800e1c8:	b10a      	cbz	r2, 800e1ce <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	4790      	blx	r2
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800e1ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d02e      	beq.n	800e232 <HAL_MDMA_IRQHandler+0x16a>
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e1d4:	2304      	movs	r3, #4
    __HAL_MDMA_DISABLE(hmdma);
 800e1d6:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e1d8:	4a19      	ldr	r2, [pc, #100]	; (800e240 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e1da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800e1de:	fba2 3205 	umull	r3, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 800e1e2:	68cb      	ldr	r3, [r1, #12]
 800e1e4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800e1e8:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800e1ea:	60cb      	str	r3, [r1, #12]
 800e1ec:	e002      	b.n	800e1f4 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800e1ee:	68cb      	ldr	r3, [r1, #12]
 800e1f0:	07d8      	lsls	r0, r3, #31
 800e1f2:	d504      	bpl.n	800e1fe <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800e1f4:	9b01      	ldr	r3, [sp, #4]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	9301      	str	r3, [sp, #4]
 800e1fc:	d9f7      	bls.n	800e1ee <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800e1fe:	2300      	movs	r3, #0
 800e200:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e204:	68cb      	ldr	r3, [r1, #12]
 800e206:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e208:	bf4c      	ite	mi
 800e20a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800e20c:	2301      	movpl	r3, #1
 800e20e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800e212:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e214:	b16b      	cbz	r3, 800e232 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800e216:	4620      	mov	r0, r4
}
 800e218:	b002      	add	sp, #8
 800e21a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hmdma->XferErrorCallback(hmdma);
 800e21e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800e220:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800e222:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800e224:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 800e226:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800e22a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1f1      	bne.n	800e216 <HAL_MDMA_IRQHandler+0x14e>
}
 800e232:	b002      	add	sp, #8
 800e234:	bd70      	pop	{r4, r5, r6, pc}
 800e236:	bf00      	nop
 800e238:	adffffc0 	.word	0xadffffc0
 800e23c:	24002f54 	.word	0x24002f54
 800e240:	1b4e81b5 	.word	0x1b4e81b5

0800e244 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e244:	4a1c      	ldr	r2, [pc, #112]	; (800e2b8 <HAL_PWREx_ConfigSupply+0x74>)
 800e246:	68d3      	ldr	r3, [r2, #12]
 800e248:	f003 0307 	and.w	r3, r3, #7
 800e24c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e24e:	68d3      	ldr	r3, [r2, #12]
{
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e254:	d005      	beq.n	800e262 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e25a:	1a18      	subs	r0, r3, r0
 800e25c:	bf18      	it	ne
 800e25e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800e260:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e262:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e266:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e268:	4303      	orrs	r3, r0
 800e26a:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800e26c:	f7fc f96e 	bl	800a54c <HAL_GetTick>
 800e270:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e272:	e005      	b.n	800e280 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e274:	f7fc f96a 	bl	800a54c <HAL_GetTick>
 800e278:	1b43      	subs	r3, r0, r5
 800e27a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e27e:	d819      	bhi.n	800e2b4 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e280:	6873      	ldr	r3, [r6, #4]
 800e282:	049a      	lsls	r2, r3, #18
 800e284:	d5f6      	bpl.n	800e274 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e286:	f1a4 031d 	sub.w	r3, r4, #29
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d905      	bls.n	800e29a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800e28e:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e292:	2801      	cmp	r0, #1
 800e294:	d901      	bls.n	800e29a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800e296:	2000      	movs	r0, #0
}
 800e298:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800e29a:	f7fc f957 	bl	800a54c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e29e:	4d06      	ldr	r5, [pc, #24]	; (800e2b8 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800e2a0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e2a2:	68eb      	ldr	r3, [r5, #12]
 800e2a4:	03db      	lsls	r3, r3, #15
 800e2a6:	d4f6      	bmi.n	800e296 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e2a8:	f7fc f950 	bl	800a54c <HAL_GetTick>
 800e2ac:	1b00      	subs	r0, r0, r4
 800e2ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e2b2:	d9f6      	bls.n	800e2a2 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 800e2b4:	2001      	movs	r0, #1
}
 800e2b6:	bd70      	pop	{r4, r5, r6, pc}
 800e2b8:	58024800 	.word	0x58024800

0800e2bc <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e2bc:	4b3b      	ldr	r3, [pc, #236]	; (800e3ac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800e2be:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e2c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e2c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800e2c6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e2ca:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e2ce:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 800e2d0:	d038      	beq.n	800e344 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e2d2:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e2d6:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e2da:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e2de:	fb01 f105 	mul.w	r1, r1, r5
 800e2e2:	2a01      	cmp	r2, #1
 800e2e4:	ee07 1a90 	vmov	s15, r1
 800e2e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800e2ec:	d002      	beq.n	800e2f4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800e2ee:	2a02      	cmp	r2, #2
 800e2f0:	d04e      	beq.n	800e390 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800e2f2:	b34a      	cbz	r2, 800e348 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e2f4:	ee07 0a90 	vmov	s15, r0
 800e2f8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e3b0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800e2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e302:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800e306:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800e3b4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800e30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e30e:	ee06 3a90 	vmov	s13, r3
 800e312:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e316:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e31a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e31e:	eee7 6a25 	vfma.f32	s13, s14, s11
 800e322:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800e326:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800e328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e32e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800e330:	ee07 3a90 	vmov	s15, r3
 800e334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e340:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800e344:	bc30      	pop	{r4, r5}
 800e346:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	0692      	lsls	r2, r2, #26
 800e34c:	d527      	bpl.n	800e39e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e34e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e350:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e354:	4a18      	ldr	r2, [pc, #96]	; (800e3b8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e356:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e35a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e35e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e364:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e366:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e3b4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800e36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e36e:	ee06 2a10 	vmov	s12, r2
 800e372:	ee06 3a90 	vmov	s13, r3
 800e376:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800e37a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e37e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800e382:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e386:	eee7 6a05 	vfma.f32	s13, s14, s10
 800e38a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e38e:	e7ca      	b.n	800e326 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e390:	ee07 0a90 	vmov	s15, r0
 800e394:	eddf 6a09 	vldr	s13, [pc, #36]	; 800e3bc <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800e398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e39c:	e7b0      	b.n	800e300 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e39e:	ee07 0a90 	vmov	s15, r0
 800e3a2:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e3c0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800e3a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3aa:	e7a9      	b.n	800e300 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800e3ac:	58024400 	.word	0x58024400
 800e3b0:	4a742400 	.word	0x4a742400
 800e3b4:	39000000 	.word	0x39000000
 800e3b8:	03d09000 	.word	0x03d09000
 800e3bc:	4bbebc20 	.word	0x4bbebc20
 800e3c0:	4c742400 	.word	0x4c742400

0800e3c4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	f000 81fb 	beq.w	800e7c0 <HAL_RCC_OscConfig+0x3fc>
{
 800e3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e3cc:	6803      	ldr	r3, [r0, #0]
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	07d9      	lsls	r1, r3, #31
 800e3d2:	d530      	bpl.n	800e436 <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e3d4:	49a4      	ldr	r1, [pc, #656]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e3d6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e3d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e3da:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e3de:	2a10      	cmp	r2, #16
 800e3e0:	f000 812e 	beq.w	800e640 <HAL_RCC_OscConfig+0x27c>
 800e3e4:	2a18      	cmp	r2, #24
 800e3e6:	f000 8126 	beq.w	800e636 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e3ea:	6863      	ldr	r3, [r4, #4]
 800e3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3f0:	f000 8169 	beq.w	800e6c6 <HAL_RCC_OscConfig+0x302>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 8181 	beq.w	800e6fc <HAL_RCC_OscConfig+0x338>
 800e3fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e3fe:	4b9a      	ldr	r3, [pc, #616]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	f000 827c 	beq.w	800e8fe <HAL_RCC_OscConfig+0x53a>
 800e406:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e412:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e414:	f7fc f89a 	bl	800a54c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e418:	4e93      	ldr	r6, [pc, #588]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e41a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e41e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e420:	e005      	b.n	800e42e <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e422:	f7fc f893 	bl	800a54c <HAL_GetTick>
 800e426:	1b40      	subs	r0, r0, r5
 800e428:	42b8      	cmp	r0, r7
 800e42a:	f200 8165 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e42e:	6833      	ldr	r3, [r6, #0]
 800e430:	039b      	lsls	r3, r3, #14
 800e432:	d5f6      	bpl.n	800e422 <HAL_RCC_OscConfig+0x5e>
 800e434:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e436:	0799      	lsls	r1, r3, #30
 800e438:	d521      	bpl.n	800e47e <HAL_RCC_OscConfig+0xba>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e43a:	4a8b      	ldr	r2, [pc, #556]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e43c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e43e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e440:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800e444:	f040 80a8 	bne.w	800e598 <HAL_RCC_OscConfig+0x1d4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e448:	4b87      	ldr	r3, [pc, #540]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	075b      	lsls	r3, r3, #29
 800e44e:	d503      	bpl.n	800e458 <HAL_RCC_OscConfig+0x94>
 800e450:	68e3      	ldr	r3, [r4, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 80ed 	beq.w	800e632 <HAL_RCC_OscConfig+0x26e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e458:	f7fc f890 	bl	800a57c <HAL_GetREVID>
 800e45c:	f241 0303 	movw	r3, #4099	; 0x1003
 800e460:	4298      	cmp	r0, r3
 800e462:	f200 818b 	bhi.w	800e77c <HAL_RCC_OscConfig+0x3b8>
 800e466:	6922      	ldr	r2, [r4, #16]
 800e468:	2a40      	cmp	r2, #64	; 0x40
 800e46a:	f000 8250 	beq.w	800e90e <HAL_RCC_OscConfig+0x54a>
 800e46e:	497e      	ldr	r1, [pc, #504]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e470:	684b      	ldr	r3, [r1, #4]
 800e472:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e476:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e47a:	604b      	str	r3, [r1, #4]
 800e47c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e47e:	06d9      	lsls	r1, r3, #27
 800e480:	d456      	bmi.n	800e530 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e482:	071d      	lsls	r5, r3, #28
 800e484:	d517      	bpl.n	800e4b6 <HAL_RCC_OscConfig+0xf2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e486:	6963      	ldr	r3, [r4, #20]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 80b4 	beq.w	800e5f6 <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 800e48e:	4b76      	ldr	r3, [pc, #472]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e490:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e492:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800e494:	f042 0201 	orr.w	r2, r2, #1
 800e498:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e49a:	f7fc f857 	bl	800a54c <HAL_GetTick>
 800e49e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e4a0:	e005      	b.n	800e4ae <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e4a2:	f7fc f853 	bl	800a54c <HAL_GetTick>
 800e4a6:	1b40      	subs	r0, r0, r5
 800e4a8:	2802      	cmp	r0, #2
 800e4aa:	f200 8125 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e4ae:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800e4b0:	0798      	lsls	r0, r3, #30
 800e4b2:	d5f6      	bpl.n	800e4a2 <HAL_RCC_OscConfig+0xde>
 800e4b4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e4b6:	069a      	lsls	r2, r3, #26
 800e4b8:	d517      	bpl.n	800e4ea <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800e4ba:	69a3      	ldr	r3, [r4, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f000 8136 	beq.w	800e72e <HAL_RCC_OscConfig+0x36a>
      __HAL_RCC_HSI48_ENABLE();
 800e4c2:	4b69      	ldr	r3, [pc, #420]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e4c4:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4c6:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 800e4c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800e4ce:	f7fc f83d 	bl	800a54c <HAL_GetTick>
 800e4d2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4d4:	e005      	b.n	800e4e2 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e4d6:	f7fc f839 	bl	800a54c <HAL_GetTick>
 800e4da:	1b40      	subs	r0, r0, r5
 800e4dc:	2802      	cmp	r0, #2
 800e4de:	f200 810b 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4e2:	6833      	ldr	r3, [r6, #0]
 800e4e4:	049f      	lsls	r7, r3, #18
 800e4e6:	d5f6      	bpl.n	800e4d6 <HAL_RCC_OscConfig+0x112>
 800e4e8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e4ea:	0759      	lsls	r1, r3, #29
 800e4ec:	f100 80b2 	bmi.w	800e654 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e4f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e4f2:	b1d8      	cbz	r0, 800e52c <HAL_RCC_OscConfig+0x168>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e4f4:	4b5c      	ldr	r3, [pc, #368]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e4f6:	691a      	ldr	r2, [r3, #16]
 800e4f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800e4fc:	2a18      	cmp	r2, #24
 800e4fe:	f000 81d0 	beq.w	800e8a2 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_PLL_DISABLE();
 800e502:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e504:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e506:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800e508:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e50c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e50e:	f000 8163 	beq.w	800e7d8 <HAL_RCC_OscConfig+0x414>
        tickstart = HAL_GetTick();
 800e512:	f7fc f81b 	bl	800a54c <HAL_GetTick>
 800e516:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e518:	e005      	b.n	800e526 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e51a:	f7fc f817 	bl	800a54c <HAL_GetTick>
 800e51e:	1b00      	subs	r0, r0, r4
 800e520:	2802      	cmp	r0, #2
 800e522:	f200 80e9 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e526:	682b      	ldr	r3, [r5, #0]
 800e528:	019b      	lsls	r3, r3, #6
 800e52a:	d4f6      	bmi.n	800e51a <HAL_RCC_OscConfig+0x156>
  return HAL_OK;
 800e52c:	2000      	movs	r0, #0
}
 800e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e530:	4a4d      	ldr	r2, [pc, #308]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e532:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e534:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e536:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e53a:	2b08      	cmp	r3, #8
 800e53c:	d072      	beq.n	800e624 <HAL_RCC_OscConfig+0x260>
 800e53e:	2b18      	cmp	r3, #24
 800e540:	d06c      	beq.n	800e61c <HAL_RCC_OscConfig+0x258>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e542:	69e3      	ldr	r3, [r4, #28]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 8105 	beq.w	800e754 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_ENABLE();
 800e54a:	4b47      	ldr	r3, [pc, #284]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e54c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e54e:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 800e550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e554:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e556:	f7fb fff9 	bl	800a54c <HAL_GetTick>
 800e55a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e55c:	e005      	b.n	800e56a <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e55e:	f7fb fff5 	bl	800a54c <HAL_GetTick>
 800e562:	1b40      	subs	r0, r0, r5
 800e564:	2802      	cmp	r0, #2
 800e566:	f200 80c7 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e56a:	6833      	ldr	r3, [r6, #0]
 800e56c:	05db      	lsls	r3, r3, #23
 800e56e:	d5f6      	bpl.n	800e55e <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e570:	f7fc f804 	bl	800a57c <HAL_GetREVID>
 800e574:	f241 0303 	movw	r3, #4099	; 0x1003
 800e578:	4298      	cmp	r0, r3
 800e57a:	f200 81f1 	bhi.w	800e960 <HAL_RCC_OscConfig+0x59c>
 800e57e:	6a22      	ldr	r2, [r4, #32]
 800e580:	6873      	ldr	r3, [r6, #4]
 800e582:	2a20      	cmp	r2, #32
 800e584:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e588:	bf0c      	ite	eq
 800e58a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800e58e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800e592:	6073      	str	r3, [r6, #4]
 800e594:	6823      	ldr	r3, [r4, #0]
 800e596:	e774      	b.n	800e482 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e598:	2b18      	cmp	r3, #24
 800e59a:	f000 810d 	beq.w	800e7b8 <HAL_RCC_OscConfig+0x3f4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e59e:	68e2      	ldr	r2, [r4, #12]
 800e5a0:	2a00      	cmp	r2, #0
 800e5a2:	f000 80f5 	beq.w	800e790 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e5a6:	4930      	ldr	r1, [pc, #192]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e5a8:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5aa:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e5ac:	f023 0319 	bic.w	r3, r3, #25
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800e5b4:	f7fb ffca 	bl	800a54c <HAL_GetTick>
 800e5b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5ba:	e005      	b.n	800e5c8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e5bc:	f7fb ffc6 	bl	800a54c <HAL_GetTick>
 800e5c0:	1b40      	subs	r0, r0, r5
 800e5c2:	2802      	cmp	r0, #2
 800e5c4:	f200 8098 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5c8:	6833      	ldr	r3, [r6, #0]
 800e5ca:	075f      	lsls	r7, r3, #29
 800e5cc:	d5f6      	bpl.n	800e5bc <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5ce:	f7fb ffd5 	bl	800a57c <HAL_GetREVID>
 800e5d2:	f241 0303 	movw	r3, #4099	; 0x1003
 800e5d6:	4298      	cmp	r0, r3
 800e5d8:	f200 81cb 	bhi.w	800e972 <HAL_RCC_OscConfig+0x5ae>
 800e5dc:	6922      	ldr	r2, [r4, #16]
 800e5de:	6873      	ldr	r3, [r6, #4]
 800e5e0:	2a40      	cmp	r2, #64	; 0x40
 800e5e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e5e6:	bf0c      	ite	eq
 800e5e8:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800e5ec:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800e5f0:	6073      	str	r3, [r6, #4]
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	e743      	b.n	800e47e <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 800e5f6:	4b1c      	ldr	r3, [pc, #112]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e5f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e5fa:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800e5fc:	f022 0201 	bic.w	r2, r2, #1
 800e600:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e602:	f7fb ffa3 	bl	800a54c <HAL_GetTick>
 800e606:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e608:	e004      	b.n	800e614 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e60a:	f7fb ff9f 	bl	800a54c <HAL_GetTick>
 800e60e:	1b40      	subs	r0, r0, r5
 800e610:	2802      	cmp	r0, #2
 800e612:	d871      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e614:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800e616:	0799      	lsls	r1, r3, #30
 800e618:	d4f7      	bmi.n	800e60a <HAL_RCC_OscConfig+0x246>
 800e61a:	e74b      	b.n	800e4b4 <HAL_RCC_OscConfig+0xf0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e61c:	f002 0203 	and.w	r2, r2, #3
 800e620:	2a01      	cmp	r2, #1
 800e622:	d18e      	bne.n	800e542 <HAL_RCC_OscConfig+0x17e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e624:	4b10      	ldr	r3, [pc, #64]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	05da      	lsls	r2, r3, #23
 800e62a:	d552      	bpl.n	800e6d2 <HAL_RCC_OscConfig+0x30e>
 800e62c:	69e3      	ldr	r3, [r4, #28]
 800e62e:	2b80      	cmp	r3, #128	; 0x80
 800e630:	d04f      	beq.n	800e6d2 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800e632:	2001      	movs	r0, #1
}
 800e634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e636:	f001 0103 	and.w	r1, r1, #3
 800e63a:	2902      	cmp	r1, #2
 800e63c:	f47f aed5 	bne.w	800e3ea <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e640:	4a09      	ldr	r2, [pc, #36]	; (800e668 <HAL_RCC_OscConfig+0x2a4>)
 800e642:	6812      	ldr	r2, [r2, #0]
 800e644:	0392      	lsls	r2, r2, #14
 800e646:	f57f aef6 	bpl.w	800e436 <HAL_RCC_OscConfig+0x72>
 800e64a:	6862      	ldr	r2, [r4, #4]
 800e64c:	2a00      	cmp	r2, #0
 800e64e:	f47f aef2 	bne.w	800e436 <HAL_RCC_OscConfig+0x72>
 800e652:	e7ee      	b.n	800e632 <HAL_RCC_OscConfig+0x26e>
    PWR->CR1 |= PWR_CR1_DBP;
 800e654:	4b05      	ldr	r3, [pc, #20]	; (800e66c <HAL_RCC_OscConfig+0x2a8>)
 800e656:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e658:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800e65a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e65e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800e660:	f7fb ff74 	bl	800a54c <HAL_GetTick>
 800e664:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e666:	e008      	b.n	800e67a <HAL_RCC_OscConfig+0x2b6>
 800e668:	58024400 	.word	0x58024400
 800e66c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e670:	f7fb ff6c 	bl	800a54c <HAL_GetTick>
 800e674:	1b40      	subs	r0, r0, r5
 800e676:	2864      	cmp	r0, #100	; 0x64
 800e678:	d83e      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e67a:	6833      	ldr	r3, [r6, #0]
 800e67c:	05da      	lsls	r2, r3, #23
 800e67e:	d5f7      	bpl.n	800e670 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e680:	68a3      	ldr	r3, [r4, #8]
 800e682:	2b01      	cmp	r3, #1
 800e684:	f000 817e 	beq.w	800e984 <HAL_RCC_OscConfig+0x5c0>
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 8149 	beq.w	800e920 <HAL_RCC_OscConfig+0x55c>
 800e68e:	2b05      	cmp	r3, #5
 800e690:	4bb0      	ldr	r3, [pc, #704]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e694:	f000 8185 	beq.w	800e9a2 <HAL_RCC_OscConfig+0x5de>
 800e698:	f022 0201 	bic.w	r2, r2, #1
 800e69c:	671a      	str	r2, [r3, #112]	; 0x70
 800e69e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e6a0:	f022 0204 	bic.w	r2, r2, #4
 800e6a4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800e6a6:	f7fb ff51 	bl	800a54c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e6aa:	4eaa      	ldr	r6, [pc, #680]	; (800e954 <HAL_RCC_OscConfig+0x590>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e6ac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800e6b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e6b2:	e004      	b.n	800e6be <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e6b4:	f7fb ff4a 	bl	800a54c <HAL_GetTick>
 800e6b8:	1b40      	subs	r0, r0, r5
 800e6ba:	42b8      	cmp	r0, r7
 800e6bc:	d81c      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e6be:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e6c0:	079b      	lsls	r3, r3, #30
 800e6c2:	d5f7      	bpl.n	800e6b4 <HAL_RCC_OscConfig+0x2f0>
 800e6c4:	e714      	b.n	800e4f0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e6c6:	4aa3      	ldr	r2, [pc, #652]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e6c8:	6813      	ldr	r3, [r2, #0]
 800e6ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6ce:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e6d0:	e6a0      	b.n	800e414 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e6d2:	f7fb ff53 	bl	800a57c <HAL_GetREVID>
 800e6d6:	f241 0303 	movw	r3, #4099	; 0x1003
 800e6da:	4298      	cmp	r0, r3
 800e6dc:	d872      	bhi.n	800e7c4 <HAL_RCC_OscConfig+0x400>
 800e6de:	6a22      	ldr	r2, [r4, #32]
 800e6e0:	2a20      	cmp	r2, #32
 800e6e2:	f000 8155 	beq.w	800e990 <HAL_RCC_OscConfig+0x5cc>
 800e6e6:	499b      	ldr	r1, [pc, #620]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e6e8:	684b      	ldr	r3, [r1, #4]
 800e6ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e6ee:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800e6f2:	604b      	str	r3, [r1, #4]
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	e6c4      	b.n	800e482 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800e6f8:	2003      	movs	r0, #3
}
 800e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e6fc:	4b95      	ldr	r3, [pc, #596]	; (800e954 <HAL_RCC_OscConfig+0x590>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e6fe:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e702:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e704:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e706:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e712:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e714:	f7fb ff1a 	bl	800a54c <HAL_GetTick>
 800e718:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e71a:	e004      	b.n	800e726 <HAL_RCC_OscConfig+0x362>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e71c:	f7fb ff16 	bl	800a54c <HAL_GetTick>
 800e720:	1b40      	subs	r0, r0, r5
 800e722:	42b8      	cmp	r0, r7
 800e724:	d8e8      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e726:	6833      	ldr	r3, [r6, #0]
 800e728:	0398      	lsls	r0, r3, #14
 800e72a:	d4f7      	bmi.n	800e71c <HAL_RCC_OscConfig+0x358>
 800e72c:	e682      	b.n	800e434 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSI48_DISABLE();
 800e72e:	4b89      	ldr	r3, [pc, #548]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e730:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e732:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 800e734:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e738:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800e73a:	f7fb ff07 	bl	800a54c <HAL_GetTick>
 800e73e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e740:	e004      	b.n	800e74c <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e742:	f7fb ff03 	bl	800a54c <HAL_GetTick>
 800e746:	1b40      	subs	r0, r0, r5
 800e748:	2802      	cmp	r0, #2
 800e74a:	d8d5      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e74c:	6833      	ldr	r3, [r6, #0]
 800e74e:	0498      	lsls	r0, r3, #18
 800e750:	d4f7      	bmi.n	800e742 <HAL_RCC_OscConfig+0x37e>
 800e752:	e6c9      	b.n	800e4e8 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_DISABLE();
 800e754:	4b7f      	ldr	r3, [pc, #508]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e756:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e758:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800e75a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e75e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e760:	f7fb fef4 	bl	800a54c <HAL_GetTick>
 800e764:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e766:	e004      	b.n	800e772 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e768:	f7fb fef0 	bl	800a54c <HAL_GetTick>
 800e76c:	1b40      	subs	r0, r0, r5
 800e76e:	2802      	cmp	r0, #2
 800e770:	d8c2      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e772:	6833      	ldr	r3, [r6, #0]
 800e774:	05df      	lsls	r7, r3, #23
 800e776:	d4f7      	bmi.n	800e768 <HAL_RCC_OscConfig+0x3a4>
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	e682      	b.n	800e482 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e77c:	4a75      	ldr	r2, [pc, #468]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e77e:	6921      	ldr	r1, [r4, #16]
 800e780:	6853      	ldr	r3, [r2, #4]
 800e782:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e786:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e78a:	6053      	str	r3, [r2, #4]
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	e676      	b.n	800e47e <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 800e790:	4b70      	ldr	r3, [pc, #448]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e792:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e794:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800e796:	f022 0201 	bic.w	r2, r2, #1
 800e79a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e79c:	f7fb fed6 	bl	800a54c <HAL_GetTick>
 800e7a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e7a2:	e004      	b.n	800e7ae <HAL_RCC_OscConfig+0x3ea>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7a4:	f7fb fed2 	bl	800a54c <HAL_GetTick>
 800e7a8:	1b40      	subs	r0, r0, r5
 800e7aa:	2802      	cmp	r0, #2
 800e7ac:	d8a4      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e7ae:	6833      	ldr	r3, [r6, #0]
 800e7b0:	0758      	lsls	r0, r3, #29
 800e7b2:	d4f7      	bmi.n	800e7a4 <HAL_RCC_OscConfig+0x3e0>
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	e662      	b.n	800e47e <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e7b8:	0792      	lsls	r2, r2, #30
 800e7ba:	f47f aef0 	bne.w	800e59e <HAL_RCC_OscConfig+0x1da>
 800e7be:	e643      	b.n	800e448 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800e7c0:	2001      	movs	r0, #1
}
 800e7c2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e7c4:	4a63      	ldr	r2, [pc, #396]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e7c6:	6a21      	ldr	r1, [r4, #32]
 800e7c8:	68d3      	ldr	r3, [r2, #12]
 800e7ca:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800e7ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e7d2:	60d3      	str	r3, [r2, #12]
 800e7d4:	6823      	ldr	r3, [r4, #0]
 800e7d6:	e654      	b.n	800e482 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800e7d8:	f7fb feb8 	bl	800a54c <HAL_GetTick>
 800e7dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7de:	e004      	b.n	800e7ea <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e7e0:	f7fb feb4 	bl	800a54c <HAL_GetTick>
 800e7e4:	1b80      	subs	r0, r0, r6
 800e7e6:	2802      	cmp	r0, #2
 800e7e8:	d886      	bhi.n	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7ea:	682b      	ldr	r3, [r5, #0]
 800e7ec:	0199      	lsls	r1, r3, #6
 800e7ee:	d4f7      	bmi.n	800e7e0 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e7f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e7f2:	4b59      	ldr	r3, [pc, #356]	; (800e958 <HAL_RCC_OscConfig+0x594>)
 800e7f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e7fa:	4958      	ldr	r1, [pc, #352]	; (800e95c <HAL_RCC_OscConfig+0x598>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e7fc:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e7fe:	4e55      	ldr	r6, [pc, #340]	; (800e954 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e800:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800e804:	62ab      	str	r3, [r5, #40]	; 0x28
 800e806:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800e808:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800e80c:	3f01      	subs	r7, #1
 800e80e:	1e50      	subs	r0, r2, #1
 800e810:	3b01      	subs	r3, #1
 800e812:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e814:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800e818:	025b      	lsls	r3, r3, #9
 800e81a:	0400      	lsls	r0, r0, #16
 800e81c:	3a01      	subs	r2, #1
 800e81e:	b29b      	uxth	r3, r3
 800e820:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800e824:	0612      	lsls	r2, r2, #24
 800e826:	4303      	orrs	r3, r0
 800e828:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e82c:	433b      	orrs	r3, r7
 800e82e:	4313      	orrs	r3, r2
 800e830:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800e832:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e834:	f023 0301 	bic.w	r3, r3, #1
 800e838:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e83a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800e83c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e83e:	4011      	ands	r1, r2
 800e840:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800e844:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e846:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e84a:	f023 030c 	bic.w	r3, r3, #12
 800e84e:	4313      	orrs	r3, r2
 800e850:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e852:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e854:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e856:	f023 0302 	bic.w	r3, r3, #2
 800e85a:	4313      	orrs	r3, r2
 800e85c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e85e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e864:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e866:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e86c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e86e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e874:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800e876:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e878:	f043 0301 	orr.w	r3, r3, #1
 800e87c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800e87e:	682b      	ldr	r3, [r5, #0]
 800e880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e884:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e886:	f7fb fe61 	bl	800a54c <HAL_GetTick>
 800e88a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e88c:	e005      	b.n	800e89a <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e88e:	f7fb fe5d 	bl	800a54c <HAL_GetTick>
 800e892:	1b00      	subs	r0, r0, r4
 800e894:	2802      	cmp	r0, #2
 800e896:	f63f af2f 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e89a:	6833      	ldr	r3, [r6, #0]
 800e89c:	019a      	lsls	r2, r3, #6
 800e89e:	d5f6      	bpl.n	800e88e <HAL_RCC_OscConfig+0x4ca>
 800e8a0:	e644      	b.n	800e52c <HAL_RCC_OscConfig+0x168>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8a2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e8a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e8a6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8a8:	f43f ae41 	beq.w	800e52e <HAL_RCC_OscConfig+0x16a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8ac:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e8b2:	428b      	cmp	r3, r1
 800e8b4:	f47f aebd 	bne.w	800e632 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e8b8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	f47f aeb7 	bne.w	800e632 <HAL_RCC_OscConfig+0x26e>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e8c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e8c6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800e8ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	f47f aeb0 	bne.w	800e632 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e8d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8d4:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800e8d8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	f47f aea9 	bne.w	800e632 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e8e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8e2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800e8e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	f47f aea2 	bne.w	800e632 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e8ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e8f0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800e8f4:	3801      	subs	r0, #1
  return HAL_OK;
 800e8f6:	1a28      	subs	r0, r5, r0
 800e8f8:	bf18      	it	ne
 800e8fa:	2001      	movne	r0, #1
}
 800e8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e8fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e902:	601a      	str	r2, [r3, #0]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	e582      	b.n	800e414 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e90e:	4a11      	ldr	r2, [pc, #68]	; (800e954 <HAL_RCC_OscConfig+0x590>)
 800e910:	6853      	ldr	r3, [r2, #4]
 800e912:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e91a:	6053      	str	r3, [r2, #4]
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	e5ae      	b.n	800e47e <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e920:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <HAL_RCC_OscConfig+0x590>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e922:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e928:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e92a:	f022 0201 	bic.w	r2, r2, #1
 800e92e:	671a      	str	r2, [r3, #112]	; 0x70
 800e930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e932:	f022 0204 	bic.w	r2, r2, #4
 800e936:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800e938:	f7fb fe08 	bl	800a54c <HAL_GetTick>
 800e93c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e93e:	e005      	b.n	800e94c <HAL_RCC_OscConfig+0x588>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e940:	f7fb fe04 	bl	800a54c <HAL_GetTick>
 800e944:	1b40      	subs	r0, r0, r5
 800e946:	42b8      	cmp	r0, r7
 800e948:	f63f aed6 	bhi.w	800e6f8 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e94c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e94e:	0798      	lsls	r0, r3, #30
 800e950:	d4f6      	bmi.n	800e940 <HAL_RCC_OscConfig+0x57c>
 800e952:	e5cd      	b.n	800e4f0 <HAL_RCC_OscConfig+0x12c>
 800e954:	58024400 	.word	0x58024400
 800e958:	fffffc0c 	.word	0xfffffc0c
 800e95c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e960:	68f3      	ldr	r3, [r6, #12]
 800e962:	6a22      	ldr	r2, [r4, #32]
 800e964:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800e968:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e96c:	60f3      	str	r3, [r6, #12]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	e587      	b.n	800e482 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e972:	6873      	ldr	r3, [r6, #4]
 800e974:	6922      	ldr	r2, [r4, #16]
 800e976:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e97a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e97e:	6073      	str	r3, [r6, #4]
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	e57c      	b.n	800e47e <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e984:	4a0b      	ldr	r2, [pc, #44]	; (800e9b4 <HAL_RCC_OscConfig+0x5f0>)
 800e986:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e988:	f043 0301 	orr.w	r3, r3, #1
 800e98c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e98e:	e68a      	b.n	800e6a6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e990:	4a08      	ldr	r2, [pc, #32]	; (800e9b4 <HAL_RCC_OscConfig+0x5f0>)
 800e992:	6853      	ldr	r3, [r2, #4]
 800e994:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e99c:	6053      	str	r3, [r2, #4]
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	e56f      	b.n	800e482 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e9a2:	f042 0204 	orr.w	r2, r2, #4
 800e9a6:	671a      	str	r2, [r3, #112]	; 0x70
 800e9a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e9aa:	f042 0201 	orr.w	r2, r2, #1
 800e9ae:	671a      	str	r2, [r3, #112]	; 0x70
 800e9b0:	e679      	b.n	800e6a6 <HAL_RCC_OscConfig+0x2e2>
 800e9b2:	bf00      	nop
 800e9b4:	58024400 	.word	0x58024400

0800e9b8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e9b8:	4a47      	ldr	r2, [pc, #284]	; (800ead8 <HAL_RCC_GetSysClockFreq+0x120>)
 800e9ba:	6913      	ldr	r3, [r2, #16]
 800e9bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9c0:	2b10      	cmp	r3, #16
 800e9c2:	d004      	beq.n	800e9ce <HAL_RCC_GetSysClockFreq+0x16>
 800e9c4:	2b18      	cmp	r3, #24
 800e9c6:	d00d      	beq.n	800e9e4 <HAL_RCC_GetSysClockFreq+0x2c>
 800e9c8:	b11b      	cbz	r3, 800e9d2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800e9ca:	4844      	ldr	r0, [pc, #272]	; (800eadc <HAL_RCC_GetSysClockFreq+0x124>)
 800e9cc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e9ce:	4844      	ldr	r0, [pc, #272]	; (800eae0 <HAL_RCC_GetSysClockFreq+0x128>)
 800e9d0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9d2:	6813      	ldr	r3, [r2, #0]
 800e9d4:	0699      	lsls	r1, r3, #26
 800e9d6:	d54a      	bpl.n	800ea6e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e9d8:	6813      	ldr	r3, [r2, #0]
 800e9da:	4842      	ldr	r0, [pc, #264]	; (800eae4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800e9dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e9e0:	40d8      	lsrs	r0, r3
 800e9e2:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e9e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800e9e6:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e9e8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e9ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800e9ec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e9f0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e9f4:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 800e9f6:	d038      	beq.n	800ea6a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e9f8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e9fc:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ea00:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ea04:	fb01 f105 	mul.w	r1, r1, r5
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	ee07 1a90 	vmov	s15, r1
 800ea0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800ea12:	d002      	beq.n	800ea1a <HAL_RCC_GetSysClockFreq+0x62>
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d02c      	beq.n	800ea72 <HAL_RCC_GetSysClockFreq+0xba>
 800ea18:	b393      	cbz	r3, 800ea80 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea1a:	ee07 0a90 	vmov	s15, r0
 800ea1e:	eddf 6a32 	vldr	s13, [pc, #200]	; 800eae8 <HAL_RCC_GetSysClockFreq+0x130>
 800ea22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ea28:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800ea2c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800eaec <HAL_RCC_GetSysClockFreq+0x134>
 800ea30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea34:	ee06 3a90 	vmov	s13, r3
 800ea38:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ea3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ea40:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ea44:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ea48:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ea4c:	4b22      	ldr	r3, [pc, #136]	; (800ead8 <HAL_RCC_GetSysClockFreq+0x120>)
 800ea4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea50:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ea54:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ea56:	ee07 3a90 	vmov	s15, r3
 800ea5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ea5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea66:	ee17 0a90 	vmov	r0, s15
}
 800ea6a:	bc30      	pop	{r4, r5}
 800ea6c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ea6e:	481d      	ldr	r0, [pc, #116]	; (800eae4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800ea70:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea72:	ee07 0a90 	vmov	s15, r0
 800ea76:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800eaf0 <HAL_RCC_GetSysClockFreq+0x138>
 800ea7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea7e:	e7d2      	b.n	800ea26 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea80:	6813      	ldr	r3, [r2, #0]
 800ea82:	069b      	lsls	r3, r3, #26
 800ea84:	d520      	bpl.n	800eac8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ea86:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea88:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ea8c:	4915      	ldr	r1, [pc, #84]	; (800eae4 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea8e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ea92:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ea9c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea9e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800eaec <HAL_RCC_GetSysClockFreq+0x134>
 800eaa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa6:	ee06 1a10 	vmov	s12, r1
 800eaaa:	ee06 3a90 	vmov	s13, r3
 800eaae:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800eab2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eab6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800eaba:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800eabe:	eee7 6a05 	vfma.f32	s13, s14, s10
 800eac2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800eac6:	e7c1      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eac8:	ee07 0a90 	vmov	s15, r0
 800eacc:	eddf 6a09 	vldr	s13, [pc, #36]	; 800eaf4 <HAL_RCC_GetSysClockFreq+0x13c>
 800ead0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ead4:	e7a7      	b.n	800ea26 <HAL_RCC_GetSysClockFreq+0x6e>
 800ead6:	bf00      	nop
 800ead8:	58024400 	.word	0x58024400
 800eadc:	003d0900 	.word	0x003d0900
 800eae0:	017d7840 	.word	0x017d7840
 800eae4:	03d09000 	.word	0x03d09000
 800eae8:	4a742400 	.word	0x4a742400
 800eaec:	39000000 	.word	0x39000000
 800eaf0:	4bbebc20 	.word	0x4bbebc20
 800eaf4:	4c742400 	.word	0x4c742400

0800eaf8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	f000 810e 	beq.w	800ed1a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eafe:	4a8d      	ldr	r2, [pc, #564]	; (800ed34 <HAL_RCC_ClockConfig+0x23c>)
 800eb00:	6813      	ldr	r3, [r2, #0]
 800eb02:	f003 030f 	and.w	r3, r3, #15
 800eb06:	428b      	cmp	r3, r1
{
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eb10:	d20c      	bcs.n	800eb2c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb12:	6813      	ldr	r3, [r2, #0]
 800eb14:	f023 030f 	bic.w	r3, r3, #15
 800eb18:	430b      	orrs	r3, r1
 800eb1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb1c:	6813      	ldr	r3, [r2, #0]
 800eb1e:	f003 030f 	and.w	r3, r3, #15
 800eb22:	428b      	cmp	r3, r1
 800eb24:	d002      	beq.n	800eb2c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800eb26:	2001      	movs	r0, #1
}
 800eb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	075f      	lsls	r7, r3, #29
 800eb30:	d50b      	bpl.n	800eb4a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800eb32:	4981      	ldr	r1, [pc, #516]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800eb34:	6920      	ldr	r0, [r4, #16]
 800eb36:	698a      	ldr	r2, [r1, #24]
 800eb38:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800eb3c:	4290      	cmp	r0, r2
 800eb3e:	d904      	bls.n	800eb4a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eb40:	698a      	ldr	r2, [r1, #24]
 800eb42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eb46:	4302      	orrs	r2, r0
 800eb48:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb4a:	071e      	lsls	r6, r3, #28
 800eb4c:	d50b      	bpl.n	800eb66 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eb4e:	497a      	ldr	r1, [pc, #488]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800eb50:	6960      	ldr	r0, [r4, #20]
 800eb52:	69ca      	ldr	r2, [r1, #28]
 800eb54:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800eb58:	4290      	cmp	r0, r2
 800eb5a:	d904      	bls.n	800eb66 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eb5c:	69ca      	ldr	r2, [r1, #28]
 800eb5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eb62:	4302      	orrs	r2, r0
 800eb64:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb66:	06d8      	lsls	r0, r3, #27
 800eb68:	d50b      	bpl.n	800eb82 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eb6a:	4973      	ldr	r1, [pc, #460]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800eb6c:	69a0      	ldr	r0, [r4, #24]
 800eb6e:	69ca      	ldr	r2, [r1, #28]
 800eb70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800eb74:	4290      	cmp	r0, r2
 800eb76:	d904      	bls.n	800eb82 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eb78:	69ca      	ldr	r2, [r1, #28]
 800eb7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eb7e:	4302      	orrs	r2, r0
 800eb80:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eb82:	0699      	lsls	r1, r3, #26
 800eb84:	d50b      	bpl.n	800eb9e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eb86:	496c      	ldr	r1, [pc, #432]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800eb88:	69e0      	ldr	r0, [r4, #28]
 800eb8a:	6a0a      	ldr	r2, [r1, #32]
 800eb8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800eb90:	4290      	cmp	r0, r2
 800eb92:	d904      	bls.n	800eb9e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800eb94:	6a0a      	ldr	r2, [r1, #32]
 800eb96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800eb9a:	4302      	orrs	r2, r0
 800eb9c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb9e:	079a      	lsls	r2, r3, #30
 800eba0:	f140 80ad 	bpl.w	800ecfe <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eba4:	4864      	ldr	r0, [pc, #400]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800eba6:	68e1      	ldr	r1, [r4, #12]
 800eba8:	6982      	ldr	r2, [r0, #24]
 800ebaa:	f002 020f 	and.w	r2, r2, #15
 800ebae:	4291      	cmp	r1, r2
 800ebb0:	d904      	bls.n	800ebbc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ebb2:	6982      	ldr	r2, [r0, #24]
 800ebb4:	f022 020f 	bic.w	r2, r2, #15
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ebbc:	07d8      	lsls	r0, r3, #31
 800ebbe:	d531      	bpl.n	800ec24 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ebc0:	4a5d      	ldr	r2, [pc, #372]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ebc2:	68a1      	ldr	r1, [r4, #8]
 800ebc4:	6993      	ldr	r3, [r2, #24]
 800ebc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ebce:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ebd0:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ebd2:	2902      	cmp	r1, #2
 800ebd4:	f000 80a3 	beq.w	800ed1e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ebd8:	2903      	cmp	r1, #3
 800ebda:	f000 809a 	beq.w	800ed12 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ebde:	2901      	cmp	r1, #1
 800ebe0:	f000 80a3 	beq.w	800ed2a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ebe4:	0758      	lsls	r0, r3, #29
 800ebe6:	d59e      	bpl.n	800eb26 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ebe8:	4a53      	ldr	r2, [pc, #332]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ebea:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ebee:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebf0:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ebf2:	f023 0307 	bic.w	r3, r3, #7
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800ebfa:	f7fb fca7 	bl	800a54c <HAL_GetTick>
 800ebfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec00:	e005      	b.n	800ec0e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec02:	f7fb fca3 	bl	800a54c <HAL_GetTick>
 800ec06:	1b80      	subs	r0, r0, r6
 800ec08:	4540      	cmp	r0, r8
 800ec0a:	f200 808c 	bhi.w	800ed26 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6862      	ldr	r2, [r4, #4]
 800ec12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec16:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800ec1a:	d1f2      	bne.n	800ec02 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec1c:	6823      	ldr	r3, [r4, #0]
 800ec1e:	0799      	lsls	r1, r3, #30
 800ec20:	d506      	bpl.n	800ec30 <HAL_RCC_ClockConfig+0x138>
 800ec22:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ec24:	4844      	ldr	r0, [pc, #272]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ec26:	6982      	ldr	r2, [r0, #24]
 800ec28:	f002 020f 	and.w	r2, r2, #15
 800ec2c:	428a      	cmp	r2, r1
 800ec2e:	d86a      	bhi.n	800ed06 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec30:	4940      	ldr	r1, [pc, #256]	; (800ed34 <HAL_RCC_ClockConfig+0x23c>)
 800ec32:	680a      	ldr	r2, [r1, #0]
 800ec34:	f002 020f 	and.w	r2, r2, #15
 800ec38:	42aa      	cmp	r2, r5
 800ec3a:	d90a      	bls.n	800ec52 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec3c:	680a      	ldr	r2, [r1, #0]
 800ec3e:	f022 020f 	bic.w	r2, r2, #15
 800ec42:	432a      	orrs	r2, r5
 800ec44:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec46:	680a      	ldr	r2, [r1, #0]
 800ec48:	f002 020f 	and.w	r2, r2, #15
 800ec4c:	42aa      	cmp	r2, r5
 800ec4e:	f47f af6a 	bne.w	800eb26 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ec52:	075a      	lsls	r2, r3, #29
 800ec54:	d50b      	bpl.n	800ec6e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ec56:	4938      	ldr	r1, [pc, #224]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ec58:	6920      	ldr	r0, [r4, #16]
 800ec5a:	698a      	ldr	r2, [r1, #24]
 800ec5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800ec60:	4290      	cmp	r0, r2
 800ec62:	d204      	bcs.n	800ec6e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ec64:	698a      	ldr	r2, [r1, #24]
 800ec66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ec6a:	4302      	orrs	r2, r0
 800ec6c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec6e:	071f      	lsls	r7, r3, #28
 800ec70:	d50b      	bpl.n	800ec8a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ec72:	4931      	ldr	r1, [pc, #196]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ec74:	6960      	ldr	r0, [r4, #20]
 800ec76:	69ca      	ldr	r2, [r1, #28]
 800ec78:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800ec7c:	4290      	cmp	r0, r2
 800ec7e:	d204      	bcs.n	800ec8a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ec80:	69ca      	ldr	r2, [r1, #28]
 800ec82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ec86:	4302      	orrs	r2, r0
 800ec88:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec8a:	06de      	lsls	r6, r3, #27
 800ec8c:	d50b      	bpl.n	800eca6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ec8e:	492a      	ldr	r1, [pc, #168]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ec90:	69a0      	ldr	r0, [r4, #24]
 800ec92:	69ca      	ldr	r2, [r1, #28]
 800ec94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800ec98:	4290      	cmp	r0, r2
 800ec9a:	d204      	bcs.n	800eca6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ec9c:	69ca      	ldr	r2, [r1, #28]
 800ec9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eca2:	4302      	orrs	r2, r0
 800eca4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eca6:	069d      	lsls	r5, r3, #26
 800eca8:	d50b      	bpl.n	800ecc2 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ecaa:	4a23      	ldr	r2, [pc, #140]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ecac:	69e1      	ldr	r1, [r4, #28]
 800ecae:	6a13      	ldr	r3, [r2, #32]
 800ecb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ecb4:	4299      	cmp	r1, r3
 800ecb6:	d204      	bcs.n	800ecc2 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ecb8:	6a13      	ldr	r3, [r2, #32]
 800ecba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecbe:	430b      	orrs	r3, r1
 800ecc0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ecc2:	f7ff fe79 	bl	800e9b8 <HAL_RCC_GetSysClockFreq>
 800ecc6:	4b1c      	ldr	r3, [pc, #112]	; (800ed38 <HAL_RCC_ClockConfig+0x240>)
 800ecc8:	4602      	mov	r2, r0
 800ecca:	481c      	ldr	r0, [pc, #112]	; (800ed3c <HAL_RCC_ClockConfig+0x244>)
 800eccc:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecce:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ecd0:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800ecd4:	4d1a      	ldr	r5, [pc, #104]	; (800ed40 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecd6:	f003 030f 	and.w	r3, r3, #15
 800ecda:	4c1a      	ldr	r4, [pc, #104]	; (800ed44 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ecdc:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecde:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ece0:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800ece4:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ece6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800ecea:	4d17      	ldr	r5, [pc, #92]	; (800ed48 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ecec:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecee:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800ecf2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecf4:	6023      	str	r3, [r4, #0]
}
 800ecf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800ecfa:	f7fb bbc5 	b.w	800a488 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ecfe:	07da      	lsls	r2, r3, #31
 800ed00:	f53f af5e 	bmi.w	800ebc0 <HAL_RCC_ClockConfig+0xc8>
 800ed04:	e794      	b.n	800ec30 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ed06:	6982      	ldr	r2, [r0, #24]
 800ed08:	f022 020f 	bic.w	r2, r2, #15
 800ed0c:	4311      	orrs	r1, r2
 800ed0e:	6181      	str	r1, [r0, #24]
 800ed10:	e78e      	b.n	800ec30 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed12:	019f      	lsls	r7, r3, #6
 800ed14:	f53f af68 	bmi.w	800ebe8 <HAL_RCC_ClockConfig+0xf0>
 800ed18:	e705      	b.n	800eb26 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800ed1a:	2001      	movs	r0, #1
}
 800ed1c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ed1e:	039b      	lsls	r3, r3, #14
 800ed20:	f53f af62 	bmi.w	800ebe8 <HAL_RCC_ClockConfig+0xf0>
 800ed24:	e6ff      	b.n	800eb26 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800ed26:	2003      	movs	r0, #3
 800ed28:	e6fe      	b.n	800eb28 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ed2a:	05de      	lsls	r6, r3, #23
 800ed2c:	f53f af5c 	bmi.w	800ebe8 <HAL_RCC_ClockConfig+0xf0>
 800ed30:	e6f9      	b.n	800eb26 <HAL_RCC_ClockConfig+0x2e>
 800ed32:	bf00      	nop
 800ed34:	52002000 	.word	0x52002000
 800ed38:	58024400 	.word	0x58024400
 800ed3c:	08045d78 	.word	0x08045d78
 800ed40:	24003034 	.word	0x24003034
 800ed44:	24002f58 	.word	0x24002f58
 800ed48:	24002f54 	.word	0x24002f54

0800ed4c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed4c:	4a18      	ldr	r2, [pc, #96]	; (800edb0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed4e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed50:	6913      	ldr	r3, [r2, #16]
 800ed52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed56:	2b10      	cmp	r3, #16
 800ed58:	d01a      	beq.n	800ed90 <HAL_RCC_GetHCLKFreq+0x44>
 800ed5a:	2b18      	cmp	r3, #24
 800ed5c:	d023      	beq.n	800eda6 <HAL_RCC_GetHCLKFreq+0x5a>
 800ed5e:	b1cb      	cbz	r3, 800ed94 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 800ed60:	4814      	ldr	r0, [pc, #80]	; (800edb4 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed62:	4b13      	ldr	r3, [pc, #76]	; (800edb0 <HAL_RCC_GetHCLKFreq+0x64>)
 800ed64:	4914      	ldr	r1, [pc, #80]	; (800edb8 <HAL_RCC_GetHCLKFreq+0x6c>)
 800ed66:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ed68:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed6a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ed6e:	4c13      	ldr	r4, [pc, #76]	; (800edbc <HAL_RCC_GetHCLKFreq+0x70>)
 800ed70:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ed74:	4d12      	ldr	r5, [pc, #72]	; (800edc0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed76:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ed78:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed7a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ed7e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed82:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ed86:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 800ed8a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ed8c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ed8e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed90:	480c      	ldr	r0, [pc, #48]	; (800edc4 <HAL_RCC_GetHCLKFreq+0x78>)
 800ed92:	e7e6      	b.n	800ed62 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed94:	6813      	ldr	r3, [r2, #0]
 800ed96:	069b      	lsls	r3, r3, #26
 800ed98:	d508      	bpl.n	800edac <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ed9a:	6812      	ldr	r2, [r2, #0]
 800ed9c:	480a      	ldr	r0, [pc, #40]	; (800edc8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800ed9e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800eda2:	40d0      	lsrs	r0, r2
 800eda4:	e7dd      	b.n	800ed62 <HAL_RCC_GetHCLKFreq+0x16>
 800eda6:	f7ff fa89 	bl	800e2bc <HAL_RCC_GetSysClockFreq.part.0>
 800edaa:	e7da      	b.n	800ed62 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800edac:	4806      	ldr	r0, [pc, #24]	; (800edc8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800edae:	e7d8      	b.n	800ed62 <HAL_RCC_GetHCLKFreq+0x16>
 800edb0:	58024400 	.word	0x58024400
 800edb4:	003d0900 	.word	0x003d0900
 800edb8:	08045d78 	.word	0x08045d78
 800edbc:	24002f58 	.word	0x24002f58
 800edc0:	24002f54 	.word	0x24002f54
 800edc4:	017d7840 	.word	0x017d7840
 800edc8:	03d09000 	.word	0x03d09000

0800edcc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800edcc:	4a1c      	ldr	r2, [pc, #112]	; (800ee40 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800edce:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800edd0:	6913      	ldr	r3, [r2, #16]
 800edd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800edd6:	2b10      	cmp	r3, #16
 800edd8:	d021      	beq.n	800ee1e <HAL_RCC_GetPCLK1Freq+0x52>
 800edda:	2b18      	cmp	r3, #24
 800eddc:	d02a      	beq.n	800ee34 <HAL_RCC_GetPCLK1Freq+0x68>
 800edde:	b303      	cbz	r3, 800ee22 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800ede0:	4818      	ldr	r0, [pc, #96]	; (800ee44 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ede2:	4a17      	ldr	r2, [pc, #92]	; (800ee40 <HAL_RCC_GetPCLK1Freq+0x74>)
 800ede4:	4918      	ldr	r1, [pc, #96]	; (800ee48 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800ede6:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ede8:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800edea:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800edee:	4d17      	ldr	r5, [pc, #92]	; (800ee4c <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800edf0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800edf4:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800edf6:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800edf8:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800edfc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee00:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee02:	4c13      	ldr	r4, [pc, #76]	; (800ee50 <HAL_RCC_GetPCLK1Freq+0x84>)
 800ee04:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800ee08:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee0a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ee0c:	69d2      	ldr	r2, [r2, #28]
 800ee0e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800ee12:	5c88      	ldrb	r0, [r1, r2]
 800ee14:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ee18:	fa23 f000 	lsr.w	r0, r3, r0
 800ee1c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee1e:	480d      	ldr	r0, [pc, #52]	; (800ee54 <HAL_RCC_GetPCLK1Freq+0x88>)
 800ee20:	e7df      	b.n	800ede2 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee22:	6813      	ldr	r3, [r2, #0]
 800ee24:	069b      	lsls	r3, r3, #26
 800ee26:	d508      	bpl.n	800ee3a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ee28:	6813      	ldr	r3, [r2, #0]
 800ee2a:	480b      	ldr	r0, [pc, #44]	; (800ee58 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ee2c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ee30:	40d8      	lsrs	r0, r3
 800ee32:	e7d6      	b.n	800ede2 <HAL_RCC_GetPCLK1Freq+0x16>
 800ee34:	f7ff fa42 	bl	800e2bc <HAL_RCC_GetSysClockFreq.part.0>
 800ee38:	e7d3      	b.n	800ede2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ee3a:	4807      	ldr	r0, [pc, #28]	; (800ee58 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ee3c:	e7d1      	b.n	800ede2 <HAL_RCC_GetPCLK1Freq+0x16>
 800ee3e:	bf00      	nop
 800ee40:	58024400 	.word	0x58024400
 800ee44:	003d0900 	.word	0x003d0900
 800ee48:	08045d78 	.word	0x08045d78
 800ee4c:	24002f54 	.word	0x24002f54
 800ee50:	24002f58 	.word	0x24002f58
 800ee54:	017d7840 	.word	0x017d7840
 800ee58:	03d09000 	.word	0x03d09000

0800ee5c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee5c:	4a1c      	ldr	r2, [pc, #112]	; (800eed0 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee5e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee60:	6913      	ldr	r3, [r2, #16]
 800ee62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee66:	2b10      	cmp	r3, #16
 800ee68:	d021      	beq.n	800eeae <HAL_RCC_GetPCLK2Freq+0x52>
 800ee6a:	2b18      	cmp	r3, #24
 800ee6c:	d02a      	beq.n	800eec4 <HAL_RCC_GetPCLK2Freq+0x68>
 800ee6e:	b303      	cbz	r3, 800eeb2 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800ee70:	4818      	ldr	r0, [pc, #96]	; (800eed4 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee72:	4a17      	ldr	r2, [pc, #92]	; (800eed0 <HAL_RCC_GetPCLK2Freq+0x74>)
 800ee74:	4918      	ldr	r1, [pc, #96]	; (800eed8 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800ee76:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee78:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee7a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800ee7e:	4d17      	ldr	r5, [pc, #92]	; (800eedc <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee80:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee84:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee86:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee88:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee8c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee90:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee92:	4c13      	ldr	r4, [pc, #76]	; (800eee0 <HAL_RCC_GetPCLK2Freq+0x84>)
 800ee94:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800ee98:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ee9a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ee9c:	69d2      	ldr	r2, [r2, #28]
 800ee9e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800eea2:	5c88      	ldrb	r0, [r1, r2]
 800eea4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800eea8:	fa23 f000 	lsr.w	r0, r3, r0
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eeae:	480d      	ldr	r0, [pc, #52]	; (800eee4 <HAL_RCC_GetPCLK2Freq+0x88>)
 800eeb0:	e7df      	b.n	800ee72 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eeb2:	6813      	ldr	r3, [r2, #0]
 800eeb4:	069b      	lsls	r3, r3, #26
 800eeb6:	d508      	bpl.n	800eeca <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eeb8:	6813      	ldr	r3, [r2, #0]
 800eeba:	480b      	ldr	r0, [pc, #44]	; (800eee8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800eebc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800eec0:	40d8      	lsrs	r0, r3
 800eec2:	e7d6      	b.n	800ee72 <HAL_RCC_GetPCLK2Freq+0x16>
 800eec4:	f7ff f9fa 	bl	800e2bc <HAL_RCC_GetSysClockFreq.part.0>
 800eec8:	e7d3      	b.n	800ee72 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800eeca:	4807      	ldr	r0, [pc, #28]	; (800eee8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800eecc:	e7d1      	b.n	800ee72 <HAL_RCC_GetPCLK2Freq+0x16>
 800eece:	bf00      	nop
 800eed0:	58024400 	.word	0x58024400
 800eed4:	003d0900 	.word	0x003d0900
 800eed8:	08045d78 	.word	0x08045d78
 800eedc:	24002f54 	.word	0x24002f54
 800eee0:	24002f58 	.word	0x24002f58
 800eee4:	017d7840 	.word	0x017d7840
 800eee8:	03d09000 	.word	0x03d09000

0800eeec <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eeec:	4a3b      	ldr	r2, [pc, #236]	; (800efdc <RCCEx_PLL2_Config+0xf0>)
{
 800eeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eef0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800eef2:	f003 0303 	and.w	r3, r3, #3
 800eef6:	2b03      	cmp	r3, #3
 800eef8:	d069      	beq.n	800efce <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eefa:	6813      	ldr	r3, [r2, #0]
 800eefc:	4606      	mov	r6, r0
 800eefe:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ef00:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800ef02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef06:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ef08:	f7fb fb20 	bl	800a54c <HAL_GetTick>
 800ef0c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ef0e:	e004      	b.n	800ef1a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ef10:	f7fb fb1c 	bl	800a54c <HAL_GetTick>
 800ef14:	1b43      	subs	r3, r0, r5
 800ef16:	2b02      	cmp	r3, #2
 800ef18:	d857      	bhi.n	800efca <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	011a      	lsls	r2, r3, #4
 800ef1e:	d4f7      	bmi.n	800ef10 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ef20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef22:	6832      	ldr	r2, [r6, #0]
 800ef24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ef28:	492d      	ldr	r1, [pc, #180]	; (800efe0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ef2a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ef2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef30:	6875      	ldr	r5, [r6, #4]
 800ef32:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ef36:	3d01      	subs	r5, #1
 800ef38:	1e50      	subs	r0, r2, #1
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	6932      	ldr	r2, [r6, #16]
 800ef3e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800ef42:	025b      	lsls	r3, r3, #9
 800ef44:	0400      	lsls	r0, r0, #16
 800ef46:	3a01      	subs	r2, #1
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800ef4e:	0612      	lsls	r2, r2, #24
 800ef50:	4303      	orrs	r3, r0
 800ef52:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ef56:	432b      	orrs	r3, r5
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ef5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef5e:	6972      	ldr	r2, [r6, #20]
 800ef60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ef64:	4313      	orrs	r3, r2
 800ef66:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ef68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef6a:	69b2      	ldr	r2, [r6, #24]
 800ef6c:	f023 0320 	bic.w	r3, r3, #32
 800ef70:	4313      	orrs	r3, r2
 800ef72:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ef74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef76:	f023 0310 	bic.w	r3, r3, #16
 800ef7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ef7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ef7e:	69f3      	ldr	r3, [r6, #28]
 800ef80:	4011      	ands	r1, r2
 800ef82:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800ef86:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ef88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef8a:	f043 0310 	orr.w	r3, r3, #16
 800ef8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ef90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800ef92:	b1f7      	cbz	r7, 800efd2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ef94:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ef96:	bf0c      	ite	eq
 800ef98:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ef9c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800efa0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800efa2:	4b0e      	ldr	r3, [pc, #56]	; (800efdc <RCCEx_PLL2_Config+0xf0>)
 800efa4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800efa6:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 800efa8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800efac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800efae:	f7fb facd 	bl	800a54c <HAL_GetTick>
 800efb2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800efb4:	e004      	b.n	800efc0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800efb6:	f7fb fac9 	bl	800a54c <HAL_GetTick>
 800efba:	1b00      	subs	r0, r0, r4
 800efbc:	2802      	cmp	r0, #2
 800efbe:	d804      	bhi.n	800efca <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	011b      	lsls	r3, r3, #4
 800efc4:	d5f7      	bpl.n	800efb6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800efc6:	2000      	movs	r0, #0
}
 800efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800efca:	2003      	movs	r0, #3
}
 800efcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800efce:	2001      	movs	r0, #1
}
 800efd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800efd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efd8:	e7e3      	b.n	800efa2 <RCCEx_PLL2_Config+0xb6>
 800efda:	bf00      	nop
 800efdc:	58024400 	.word	0x58024400
 800efe0:	ffff0007 	.word	0xffff0007

0800efe4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800efe4:	4a3b      	ldr	r2, [pc, #236]	; (800f0d4 <RCCEx_PLL3_Config+0xf0>)
{
 800efe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800efe8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800efea:	f003 0303 	and.w	r3, r3, #3
 800efee:	2b03      	cmp	r3, #3
 800eff0:	d069      	beq.n	800f0c6 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800eff2:	6813      	ldr	r3, [r2, #0]
 800eff4:	4606      	mov	r6, r0
 800eff6:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eff8:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800effa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800effe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f000:	f7fb faa4 	bl	800a54c <HAL_GetTick>
 800f004:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f006:	e004      	b.n	800f012 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f008:	f7fb faa0 	bl	800a54c <HAL_GetTick>
 800f00c:	1b43      	subs	r3, r0, r5
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d857      	bhi.n	800f0c2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	009a      	lsls	r2, r3, #2
 800f016:	d4f7      	bmi.n	800f008 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f01a:	6832      	ldr	r2, [r6, #0]
 800f01c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f020:	492d      	ldr	r1, [pc, #180]	; (800f0d8 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f022:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f026:	62a3      	str	r3, [r4, #40]	; 0x28
 800f028:	6875      	ldr	r5, [r6, #4]
 800f02a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800f02e:	3d01      	subs	r5, #1
 800f030:	1e50      	subs	r0, r2, #1
 800f032:	3b01      	subs	r3, #1
 800f034:	6932      	ldr	r2, [r6, #16]
 800f036:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800f03a:	025b      	lsls	r3, r3, #9
 800f03c:	0400      	lsls	r0, r0, #16
 800f03e:	3a01      	subs	r2, #1
 800f040:	b29b      	uxth	r3, r3
 800f042:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800f046:	0612      	lsls	r2, r2, #24
 800f048:	4303      	orrs	r3, r0
 800f04a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f04e:	432b      	orrs	r3, r5
 800f050:	4313      	orrs	r3, r2
 800f052:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f056:	6972      	ldr	r2, [r6, #20]
 800f058:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f05c:	4313      	orrs	r3, r2
 800f05e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f062:	69b2      	ldr	r2, [r6, #24]
 800f064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f068:	4313      	orrs	r3, r2
 800f06a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f06c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f06e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f072:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f074:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f076:	69f3      	ldr	r3, [r6, #28]
 800f078:	4011      	ands	r1, r2
 800f07a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800f07e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f086:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800f08a:	b1f7      	cbz	r7, 800f0ca <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f08c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f08e:	bf0c      	ite	eq
 800f090:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f094:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800f098:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f09a:	4b0e      	ldr	r3, [pc, #56]	; (800f0d4 <RCCEx_PLL3_Config+0xf0>)
 800f09c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f09e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 800f0a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f0a4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f0a6:	f7fb fa51 	bl	800a54c <HAL_GetTick>
 800f0aa:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f0ac:	e004      	b.n	800f0b8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f0ae:	f7fb fa4d 	bl	800a54c <HAL_GetTick>
 800f0b2:	1b00      	subs	r0, r0, r4
 800f0b4:	2802      	cmp	r0, #2
 800f0b6:	d804      	bhi.n	800f0c2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	d5f7      	bpl.n	800f0ae <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800f0be:	2000      	movs	r0, #0
}
 800f0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800f0c2:	2003      	movs	r0, #3
}
 800f0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f0c6:	2001      	movs	r0, #1
}
 800f0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f0ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f0ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0d0:	e7e3      	b.n	800f09a <RCCEx_PLL3_Config+0xb6>
 800f0d2:	bf00      	nop
 800f0d4:	58024400 	.word	0x58024400
 800f0d8:	ffff0007 	.word	0xffff0007

0800f0dc <HAL_RCCEx_PeriphCLKConfig>:
{
 800f0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f0e0:	6803      	ldr	r3, [r0, #0]
{
 800f0e2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f0e4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800f0e8:	d01c      	beq.n	800f124 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800f0ea:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f0ec:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f0f0:	f000 84bb 	beq.w	800fa6a <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800f0f4:	d823      	bhi.n	800f13e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800f0f6:	2a00      	cmp	r2, #0
 800f0f8:	f000 8422 	beq.w	800f940 <HAL_RCCEx_PeriphCLKConfig+0x864>
 800f0fc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f100:	d120      	bne.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f102:	2102      	movs	r1, #2
 800f104:	3004      	adds	r0, #4
 800f106:	f7ff fef1 	bl	800eeec <RCCEx_PLL2_Config>
 800f10a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800f10c:	2e00      	cmp	r6, #0
 800f10e:	f040 84b4 	bne.w	800fa7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800f112:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f114:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f116:	48b0      	ldr	r0, [pc, #704]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f118:	2600      	movs	r6, #0
 800f11a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800f11c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800f120:	430a      	orrs	r2, r1
 800f122:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f124:	05da      	lsls	r2, r3, #23
 800f126:	d511      	bpl.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f128:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f12a:	2a04      	cmp	r2, #4
 800f12c:	f200 8574 	bhi.w	800fc18 <HAL_RCCEx_PeriphCLKConfig+0xb3c>
 800f130:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f134:	04b504ae 	.word	0x04b504ae
 800f138:	033104a6 	.word	0x033104a6
 800f13c:	0331      	.short	0x0331
    switch(PeriphClkInit->SpdifrxClockSelection)
 800f13e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800f142:	d0e8      	beq.n	800f116 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f144:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800f146:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f14a:	d4ed      	bmi.n	800f128 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f14c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f14e:	059f      	lsls	r7, r3, #22
 800f150:	d51b      	bpl.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800f152:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f154:	2a80      	cmp	r2, #128	; 0x80
 800f156:	f000 84ab 	beq.w	800fab0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800f15a:	f200 8127 	bhi.w	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800f15e:	2a00      	cmp	r2, #0
 800f160:	f000 83dc 	beq.w	800f91c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800f164:	2a40      	cmp	r2, #64	; 0x40
 800f166:	f040 8128 	bne.w	800f3ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f16a:	2100      	movs	r1, #0
 800f16c:	1d20      	adds	r0, r4, #4
 800f16e:	f7ff febd 	bl	800eeec <RCCEx_PLL2_Config>
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f176:	2d00      	cmp	r5, #0
 800f178:	f040 83c2 	bne.w	800f900 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f17c:	4996      	ldr	r1, [pc, #600]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f17e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800f180:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f182:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800f186:	4302      	orrs	r2, r0
 800f188:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f18a:	0558      	lsls	r0, r3, #21
 800f18c:	d51f      	bpl.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800f18e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800f192:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f196:	f000 8457 	beq.w	800fa48 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 800f19a:	f200 8111 	bhi.w	800f3c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800f19e:	2a00      	cmp	r2, #0
 800f1a0:	f000 83b6 	beq.w	800f910 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800f1a4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f1a8:	f040 8112 	bne.w	800f3d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	1d20      	adds	r0, r4, #4
 800f1b0:	f7ff fe9c 	bl	800eeec <RCCEx_PLL2_Config>
 800f1b4:	6823      	ldr	r3, [r4, #0]
 800f1b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	f040 83a7 	bne.w	800f90c <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f1be:	4986      	ldr	r1, [pc, #536]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f1c0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800f1c4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f1c6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800f1ca:	4302      	orrs	r2, r0
 800f1cc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f1ce:	0519      	lsls	r1, r3, #20
 800f1d0:	d51f      	bpl.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 800f1d2:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800f1d6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800f1da:	f000 842c 	beq.w	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800f1de:	f200 80fd 	bhi.w	800f3dc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800f1e2:	2a00      	cmp	r2, #0
 800f1e4:	f000 83a0 	beq.w	800f928 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800f1e8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f1ec:	f040 80fe 	bne.w	800f3ec <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	1d20      	adds	r0, r4, #4
 800f1f4:	f7ff fe7a 	bl	800eeec <RCCEx_PLL2_Config>
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f1fc:	2d00      	cmp	r5, #0
 800f1fe:	f040 837d 	bne.w	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f202:	4975      	ldr	r1, [pc, #468]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f204:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800f208:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f20a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800f20e:	4302      	orrs	r2, r0
 800f210:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f212:	019a      	lsls	r2, r3, #6
 800f214:	d518      	bpl.n	800f248 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800f216:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f218:	2a20      	cmp	r2, #32
 800f21a:	f000 8403 	beq.w	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800f21e:	f200 80e8 	bhi.w	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800f222:	b13a      	cbz	r2, 800f234 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800f224:	2a10      	cmp	r2, #16
 800f226:	f040 80e7 	bne.w	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f22a:	496b      	ldr	r1, [pc, #428]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f22c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f22e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f232:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800f234:	2d00      	cmp	r5, #0
 800f236:	f040 83b0 	bne.w	800f99a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f23a:	4967      	ldr	r1, [pc, #412]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f23c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f23e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800f240:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f244:	4302      	orrs	r2, r0
 800f246:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f248:	04df      	lsls	r7, r3, #19
 800f24a:	d51d      	bpl.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 800f24c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800f24e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f252:	f000 8402 	beq.w	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800f256:	f200 80d2 	bhi.w	800f3fe <HAL_RCCEx_PeriphCLKConfig+0x322>
 800f25a:	2a00      	cmp	r2, #0
 800f25c:	f000 836a 	beq.w	800f934 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800f260:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800f264:	f040 80d3 	bne.w	800f40e <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f268:	2100      	movs	r1, #0
 800f26a:	1d20      	adds	r0, r4, #4
 800f26c:	f7ff fe3e 	bl	800eeec <RCCEx_PLL2_Config>
 800f270:	6823      	ldr	r3, [r4, #0]
 800f272:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f274:	2d00      	cmp	r5, #0
 800f276:	f040 8345 	bne.w	800f904 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f27a:	4957      	ldr	r1, [pc, #348]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f27c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800f27e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f280:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800f284:	4302      	orrs	r2, r0
 800f286:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f288:	0498      	lsls	r0, r3, #18
 800f28a:	d51b      	bpl.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 800f28c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f28e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800f292:	f000 83b3 	beq.w	800f9fc <HAL_RCCEx_PeriphCLKConfig+0x920>
 800f296:	f200 80bd 	bhi.w	800f414 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800f29a:	b14a      	cbz	r2, 800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f29c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f2a0:	f040 80c2 	bne.w	800f428 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	1d20      	adds	r0, r4, #4
 800f2a8:	f7ff fe20 	bl	800eeec <RCCEx_PLL2_Config>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f2b0:	2d00      	cmp	r5, #0
 800f2b2:	f040 8374 	bne.w	800f99e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f2b6:	4948      	ldr	r1, [pc, #288]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f2b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800f2ba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f2bc:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f2c0:	4302      	orrs	r2, r0
 800f2c2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f2c4:	0459      	lsls	r1, r3, #17
 800f2c6:	d51d      	bpl.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 800f2c8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800f2cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f2d0:	f000 839e 	beq.w	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800f2d4:	f200 80ab 	bhi.w	800f42e <HAL_RCCEx_PeriphCLKConfig+0x352>
 800f2d8:	b14a      	cbz	r2, 800f2ee <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f2da:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f2de:	f040 80b0 	bne.w	800f442 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	1d20      	adds	r0, r4, #4
 800f2e6:	f7ff fe01 	bl	800eeec <RCCEx_PLL2_Config>
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f2ee:	2d00      	cmp	r5, #0
 800f2f0:	f040 8359 	bne.w	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f2f4:	4938      	ldr	r1, [pc, #224]	; (800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800f2f6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800f2fa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f2fc:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800f300:	4302      	orrs	r2, r0
 800f302:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800f304:	015a      	lsls	r2, r3, #5
 800f306:	d509      	bpl.n	800f31c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 800f308:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800f30a:	2a00      	cmp	r2, #0
 800f30c:	f000 825a 	beq.w	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 800f310:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f314:	f000 8250 	beq.w	800f7b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800f318:	2601      	movs	r6, #1
 800f31a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f31c:	041f      	lsls	r7, r3, #16
 800f31e:	d50d      	bpl.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 800f320:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f322:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f326:	f000 8414 	beq.w	800fb52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800f32a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f32e:	f000 82c4 	beq.w	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800f332:	2a00      	cmp	r2, #0
 800f334:	f000 82c7 	beq.w	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 800f338:	2601      	movs	r6, #1
 800f33a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f33c:	01d8      	lsls	r0, r3, #7
 800f33e:	f100 81c5 	bmi.w	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f342:	0259      	lsls	r1, r3, #9
 800f344:	f100 81e5 	bmi.w	800f712 <HAL_RCCEx_PeriphCLKConfig+0x636>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f348:	07df      	lsls	r7, r3, #31
 800f34a:	f140 8088 	bpl.w	800f45e <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 800f34e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f350:	2a28      	cmp	r2, #40	; 0x28
 800f352:	f200 81c5 	bhi.w	800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800f356:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f35a:	007e      	.short	0x007e
 800f35c:	01c301c3 	.word	0x01c301c3
 800f360:	01c301c3 	.word	0x01c301c3
 800f364:	01c301c3 	.word	0x01c301c3
 800f368:	03c801c3 	.word	0x03c801c3
 800f36c:	01c301c3 	.word	0x01c301c3
 800f370:	01c301c3 	.word	0x01c301c3
 800f374:	01c301c3 	.word	0x01c301c3
 800f378:	007701c3 	.word	0x007701c3
 800f37c:	01c301c3 	.word	0x01c301c3
 800f380:	01c301c3 	.word	0x01c301c3
 800f384:	01c301c3 	.word	0x01c301c3
 800f388:	007e01c3 	.word	0x007e01c3
 800f38c:	01c301c3 	.word	0x01c301c3
 800f390:	01c301c3 	.word	0x01c301c3
 800f394:	01c301c3 	.word	0x01c301c3
 800f398:	007e01c3 	.word	0x007e01c3
 800f39c:	01c301c3 	.word	0x01c301c3
 800f3a0:	01c301c3 	.word	0x01c301c3
 800f3a4:	01c301c3 	.word	0x01c301c3
 800f3a8:	007e01c3 	.word	0x007e01c3
    switch(PeriphClkInit->Sai23ClockSelection)
 800f3ac:	2ac0      	cmp	r2, #192	; 0xc0
 800f3ae:	f43f aee2 	beq.w	800f176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800f3b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f3b6:	f43f aede 	beq.w	800f176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800f3ba:	2601      	movs	r6, #1
 800f3bc:	4635      	mov	r5, r6
 800f3be:	e6e4      	b.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 800f3c0:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800f3c4:	f43f aef8 	beq.w	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800f3c8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f3cc:	f43f aef4 	beq.w	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800f3d0:	2601      	movs	r6, #1
 800f3d2:	4635      	mov	r5, r6
 800f3d4:	e6fb      	b.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800f3d6:	bf00      	nop
 800f3d8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 800f3dc:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800f3e0:	f43f af0c 	beq.w	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x120>
 800f3e4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800f3e8:	f43f af08 	beq.w	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x120>
 800f3ec:	2601      	movs	r6, #1
 800f3ee:	4635      	mov	r5, r6
 800f3f0:	e70f      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 800f3f2:	2a30      	cmp	r2, #48	; 0x30
 800f3f4:	f43f af1e 	beq.w	800f234 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800f3f8:	2601      	movs	r6, #1
 800f3fa:	4635      	mov	r5, r6
 800f3fc:	e724      	b.n	800f248 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800f3fe:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800f402:	f43f af37 	beq.w	800f274 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800f406:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f40a:	f43f af33 	beq.w	800f274 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800f40e:	2601      	movs	r6, #1
 800f410:	4635      	mov	r5, r6
 800f412:	e739      	b.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 800f414:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800f418:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800f41c:	f43f af48 	beq.w	800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f420:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800f424:	f43f af44 	beq.w	800f2b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f428:	2601      	movs	r6, #1
 800f42a:	4635      	mov	r5, r6
 800f42c:	e74a      	b.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 800f42e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800f432:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800f436:	f43f af5a 	beq.w	800f2ee <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f43a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800f43e:	f43f af56 	beq.w	800f2ee <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f442:	2601      	movs	r6, #1
 800f444:	4635      	mov	r5, r6
 800f446:	e75d      	b.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f448:	2101      	movs	r1, #1
 800f44a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f44e:	f7ff fdc9 	bl	800efe4 <RCCEx_PLL3_Config>
 800f452:	6823      	ldr	r3, [r4, #0]
 800f454:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f456:	2d00      	cmp	r5, #0
 800f458:	f000 82b6 	beq.w	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800f45c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f45e:	0798      	lsls	r0, r3, #30
 800f460:	d516      	bpl.n	800f490 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800f462:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800f464:	2a05      	cmp	r2, #5
 800f466:	f200 83da 	bhi.w	800fc1e <HAL_RCCEx_PeriphCLKConfig+0xb42>
 800f46a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f46e:	000d      	.short	0x000d
 800f470:	0006032a 	.word	0x0006032a
 800f474:	000d000d 	.word	0x000d000d
 800f478:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f47a:	2101      	movs	r1, #1
 800f47c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f480:	f7ff fdb0 	bl	800efe4 <RCCEx_PLL3_Config>
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f488:	2d00      	cmp	r5, #0
 800f48a:	f000 826f 	beq.w	800f96c <HAL_RCCEx_PeriphCLKConfig+0x890>
 800f48e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f490:	0759      	lsls	r1, r3, #29
 800f492:	d517      	bpl.n	800f4c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800f494:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800f498:	2a05      	cmp	r2, #5
 800f49a:	f200 83ba 	bhi.w	800fc12 <HAL_RCCEx_PeriphCLKConfig+0xb36>
 800f49e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f4a2:	000d      	.short	0x000d
 800f4a4:	0006031a 	.word	0x0006031a
 800f4a8:	000d000d 	.word	0x000d000d
 800f4ac:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f4b4:	f7ff fd96 	bl	800efe4 <RCCEx_PLL3_Config>
 800f4b8:	6823      	ldr	r3, [r4, #0]
 800f4ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f4bc:	2d00      	cmp	r5, #0
 800f4be:	f000 8260 	beq.w	800f982 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800f4c2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f4c4:	069a      	lsls	r2, r3, #26
 800f4c6:	d51d      	bpl.n	800f504 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800f4c8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800f4cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f4d0:	f000 8334 	beq.w	800fb3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800f4d4:	f200 81a5 	bhi.w	800f822 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800f4d8:	b14a      	cbz	r2, 800f4ee <HAL_RCCEx_PeriphCLKConfig+0x412>
 800f4da:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f4de:	f040 81aa 	bne.w	800f836 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	1d20      	adds	r0, r4, #4
 800f4e6:	f7ff fd01 	bl	800eeec <RCCEx_PLL2_Config>
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	f040 8232 	bne.w	800f958 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f4f4:	49ae      	ldr	r1, [pc, #696]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f4f6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800f4fa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800f4fc:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800f500:	4302      	orrs	r2, r0
 800f502:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f504:	065f      	lsls	r7, r3, #25
 800f506:	d51d      	bpl.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800f508:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800f50c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800f510:	f000 8328 	beq.w	800fb64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800f514:	f200 8175 	bhi.w	800f802 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800f518:	b14a      	cbz	r2, 800f52e <HAL_RCCEx_PeriphCLKConfig+0x452>
 800f51a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f51e:	f040 817a 	bne.w	800f816 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f522:	2100      	movs	r1, #0
 800f524:	1d20      	adds	r0, r4, #4
 800f526:	f7ff fce1 	bl	800eeec <RCCEx_PLL2_Config>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f52e:	2d00      	cmp	r5, #0
 800f530:	f040 8217 	bne.w	800f962 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f534:	499e      	ldr	r1, [pc, #632]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f536:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800f53a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f53c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800f540:	4302      	orrs	r2, r0
 800f542:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f544:	0618      	lsls	r0, r3, #24
 800f546:	d51d      	bpl.n	800f584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800f548:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800f54c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f550:	f000 8313 	beq.w	800fb7a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 800f554:	f200 8145 	bhi.w	800f7e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
 800f558:	b14a      	cbz	r2, 800f56e <HAL_RCCEx_PeriphCLKConfig+0x492>
 800f55a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f55e:	f040 814a 	bne.w	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f562:	2100      	movs	r1, #0
 800f564:	1d20      	adds	r0, r4, #4
 800f566:	f7ff fcc1 	bl	800eeec <RCCEx_PLL2_Config>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f56e:	2d00      	cmp	r5, #0
 800f570:	f040 81ed 	bne.w	800f94e <HAL_RCCEx_PeriphCLKConfig+0x872>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f574:	498e      	ldr	r1, [pc, #568]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f576:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800f57a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f57c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f580:	4302      	orrs	r2, r0
 800f582:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f584:	0719      	lsls	r1, r3, #28
 800f586:	d50b      	bpl.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800f588:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800f58c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f590:	f000 8312 	beq.w	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f594:	4886      	ldr	r0, [pc, #536]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f596:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f598:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f59c:	430a      	orrs	r2, r1
 800f59e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f5a0:	06da      	lsls	r2, r3, #27
 800f5a2:	d50b      	bpl.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800f5a4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800f5a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f5ac:	f000 82f9 	beq.w	800fba2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f5b0:	487f      	ldr	r0, [pc, #508]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f5b2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800f5b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f5b8:	430a      	orrs	r2, r1
 800f5ba:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f5bc:	031f      	lsls	r7, r3, #12
 800f5be:	d50e      	bpl.n	800f5de <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 800f5c0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800f5c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f5c8:	f000 8161 	beq.w	800f88e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 800f5cc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800f5d0:	f000 8164 	beq.w	800f89c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	f000 82db 	beq.w	800fb90 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800f5da:	2601      	movs	r6, #1
 800f5dc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f5de:	0358      	lsls	r0, r3, #13
 800f5e0:	d50f      	bpl.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 800f5e2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800f5e6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f5ea:	f000 813a 	beq.w	800f862 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800f5ee:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800f5f2:	f000 813d 	beq.w	800f870 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f5f6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f5fa:	f000 8296 	beq.w	800fb2a <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800f5fe:	2601      	movs	r6, #1
 800f600:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f602:	03d9      	lsls	r1, r3, #15
 800f604:	d517      	bpl.n	800f636 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 800f606:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f608:	2a00      	cmp	r2, #0
 800f60a:	f000 827c 	beq.w	800fb06 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800f60e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f612:	f040 8170 	bne.w	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f616:	2102      	movs	r1, #2
 800f618:	1d20      	adds	r0, r4, #4
 800f61a:	f7ff fc67 	bl	800eeec <RCCEx_PLL2_Config>
 800f61e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	2d00      	cmp	r5, #0
 800f624:	f040 81db 	bne.w	800f9de <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f628:	4961      	ldr	r1, [pc, #388]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f62a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f62c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800f62e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f632:	4302      	orrs	r2, r0
 800f634:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f636:	009a      	lsls	r2, r3, #2
 800f638:	f100 8152 	bmi.w	800f8e0 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f63c:	039f      	lsls	r7, r3, #14
 800f63e:	d435      	bmi.n	800f6ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800f640:	1e30      	subs	r0, r6, #0
 800f642:	bf18      	it	ne
 800f644:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f646:	02de      	lsls	r6, r3, #11
 800f648:	d506      	bpl.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f64a:	4959      	ldr	r1, [pc, #356]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f64c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800f64e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f650:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800f654:	432a      	orrs	r2, r5
 800f656:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f658:	00dd      	lsls	r5, r3, #3
 800f65a:	d507      	bpl.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f65c:	4954      	ldr	r1, [pc, #336]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f65e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800f662:	690a      	ldr	r2, [r1, #16]
 800f664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f668:	432a      	orrs	r2, r5
 800f66a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f66c:	0299      	lsls	r1, r3, #10
 800f66e:	d506      	bpl.n	800f67e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f670:	494f      	ldr	r1, [pc, #316]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f672:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800f674:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f676:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800f67a:	432a      	orrs	r2, r5
 800f67c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f67e:	005a      	lsls	r2, r3, #1
 800f680:	d509      	bpl.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f682:	4a4b      	ldr	r2, [pc, #300]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f684:	6911      	ldr	r1, [r2, #16]
 800f686:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800f68a:	6111      	str	r1, [r2, #16]
 800f68c:	6911      	ldr	r1, [r2, #16]
 800f68e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800f692:	4329      	orrs	r1, r5
 800f694:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f696:	2b00      	cmp	r3, #0
 800f698:	da06      	bge.n	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f69a:	4a45      	ldr	r2, [pc, #276]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f69c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f69e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800f6a0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800f6a4:	430b      	orrs	r3, r1
 800f6a6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800f6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800f6ac:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f6b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f6b4:	f000 8230 	beq.w	800fb18 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800f6b8:	f240 80c3 	bls.w	800f842 <HAL_RCCEx_PeriphCLKConfig+0x766>
 800f6bc:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800f6c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f6c4:	f000 80c0 	beq.w	800f848 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 800f6c8:	2001      	movs	r0, #1
 800f6ca:	e7bc      	b.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 800f6cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f6ce:	2a03      	cmp	r2, #3
 800f6d0:	f200 82a8 	bhi.w	800fc24 <HAL_RCCEx_PeriphCLKConfig+0xb48>
 800f6d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f6d8:	018a0010 	.word	0x018a0010
 800f6dc:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 800f6e0:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f6e2:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 800f6e4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f6e6:	f57f aed3 	bpl.w	800f490 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800f6ea:	e6ba      	b.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	1d20      	adds	r0, r4, #4
 800f6f0:	f7ff fbfc 	bl	800eeec <RCCEx_PLL2_Config>
 800f6f4:	6823      	ldr	r3, [r4, #0]
 800f6f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	f040 8152 	bne.w	800f9a2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f6fe:	492c      	ldr	r1, [pc, #176]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f700:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f702:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800f704:	f022 0203 	bic.w	r2, r2, #3
 800f708:	4302      	orrs	r2, r0
 800f70a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f70c:	0259      	lsls	r1, r3, #9
 800f70e:	f57f ae1b 	bpl.w	800f348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f712:	4b28      	ldr	r3, [pc, #160]	; (800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 800f714:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f716:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f71c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f71e:	f7fa ff15 	bl	800a54c <HAL_GetTick>
 800f722:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f724:	e005      	b.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x656>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f726:	f7fa ff11 	bl	800a54c <HAL_GetTick>
 800f72a:	1bc0      	subs	r0, r0, r7
 800f72c:	2864      	cmp	r0, #100	; 0x64
 800f72e:	f200 81e6 	bhi.w	800fafe <HAL_RCCEx_PeriphCLKConfig+0xa22>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f732:	f8d8 3000 	ldr.w	r3, [r8]
 800f736:	05da      	lsls	r2, r3, #23
 800f738:	d5f5      	bpl.n	800f726 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    if(ret == HAL_OK)
 800f73a:	2d00      	cmp	r5, #0
 800f73c:	f040 8265 	bne.w	800fc0a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f740:	4a1b      	ldr	r2, [pc, #108]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f742:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800f746:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f748:	4059      	eors	r1, r3
 800f74a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800f74e:	d00b      	beq.n	800f768 <HAL_RCCEx_PeriphCLKConfig+0x68c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f750:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800f752:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f754:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800f758:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800f75c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f75e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800f760:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800f764:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800f766:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f76c:	f000 822f 	beq.w	800fbce <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f770:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800f774:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800f778:	f000 823d 	beq.w	800fbf6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800f77c:	490c      	ldr	r1, [pc, #48]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f77e:	690a      	ldr	r2, [r1, #16]
 800f780:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800f784:	610a      	str	r2, [r1, #16]
 800f786:	4a0a      	ldr	r2, [pc, #40]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f78c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f78e:	430b      	orrs	r3, r1
 800f790:	6713      	str	r3, [r2, #112]	; 0x70
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	e5d8      	b.n	800f348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f796:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800f798:	2d00      	cmp	r5, #0
 800f79a:	f040 80b5 	bne.w	800f908 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f79e:	4904      	ldr	r1, [pc, #16]	; (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7a2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f7a4:	f022 0207 	bic.w	r2, r2, #7
 800f7a8:	4302      	orrs	r2, r0
 800f7aa:	650a      	str	r2, [r1, #80]	; 0x50
 800f7ac:	e4cf      	b.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800f7ae:	bf00      	nop
 800f7b0:	58024400 	.word	0x58024400
 800f7b4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f7b8:	2101      	movs	r1, #1
 800f7ba:	1d20      	adds	r0, r4, #4
 800f7bc:	f7ff fb96 	bl	800eeec <RCCEx_PLL2_Config>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f7c4:	2d00      	cmp	r5, #0
 800f7c6:	f040 810c 	bne.w	800f9e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800f7ca:	49b8      	ldr	r1, [pc, #736]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f7cc:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800f7ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800f7d0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800f7d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f7d6:	ea42 0200 	orr.w	r2, r2, r0
 800f7da:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f7dc:	f57f adae 	bpl.w	800f33c <HAL_RCCEx_PeriphCLKConfig+0x260>
 800f7e0:	e59e      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800f7e2:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800f7e6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800f7ea:	f43f aec0 	beq.w	800f56e <HAL_RCCEx_PeriphCLKConfig+0x492>
 800f7ee:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800f7f2:	f43f aebc 	beq.w	800f56e <HAL_RCCEx_PeriphCLKConfig+0x492>
 800f7f6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f7f8:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 800f7fa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f7fc:	f57f aed0 	bpl.w	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800f800:	e6c2      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800f802:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800f806:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f80a:	f43f ae90 	beq.w	800f52e <HAL_RCCEx_PeriphCLKConfig+0x452>
 800f80e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800f812:	f43f ae8c 	beq.w	800f52e <HAL_RCCEx_PeriphCLKConfig+0x452>
 800f816:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f818:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 800f81a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f81c:	f57f aeb2 	bpl.w	800f584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f820:	e692      	b.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800f822:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800f826:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800f82a:	f43f ae60 	beq.w	800f4ee <HAL_RCCEx_PeriphCLKConfig+0x412>
 800f82e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800f832:	f43f ae5c 	beq.w	800f4ee <HAL_RCCEx_PeriphCLKConfig+0x412>
 800f836:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f838:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 800f83a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f83c:	f57f ae82 	bpl.w	800f544 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800f840:	e662      	b.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 800f842:	2a00      	cmp	r2, #0
 800f844:	f47f af40 	bne.w	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    if(ret == HAL_OK)
 800f848:	2d00      	cmp	r5, #0
 800f84a:	f47f af3d 	bne.w	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f84e:	4d97      	ldr	r5, [pc, #604]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f850:	1e30      	subs	r0, r6, #0
 800f852:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800f854:	bf18      	it	ne
 800f856:	2001      	movne	r0, #1
 800f858:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800f85c:	430a      	orrs	r2, r1
 800f85e:	656a      	str	r2, [r5, #84]	; 0x54
 800f860:	e6f1      	b.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f862:	2101      	movs	r1, #1
 800f864:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f868:	f7ff fbbc 	bl	800efe4 <RCCEx_PLL3_Config>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f870:	2d00      	cmp	r5, #0
 800f872:	f040 80a4 	bne.w	800f9be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f876:	498d      	ldr	r1, [pc, #564]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f878:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800f87c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800f87e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800f882:	4302      	orrs	r2, r0
 800f884:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f886:	03d9      	lsls	r1, r3, #15
 800f888:	f57f aed5 	bpl.w	800f636 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800f88c:	e6bb      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f88e:	2102      	movs	r1, #2
 800f890:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f894:	f7ff fba6 	bl	800efe4 <RCCEx_PLL3_Config>
 800f898:	6823      	ldr	r3, [r4, #0]
 800f89a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f89c:	2d00      	cmp	r5, #0
 800f89e:	f040 8089 	bne.w	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f8a2:	4982      	ldr	r1, [pc, #520]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f8a4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800f8a8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f8aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f8ae:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f8b0:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f8b2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f8b4:	f57f aea5 	bpl.w	800f602 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800f8b8:	e693      	b.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	1d20      	adds	r0, r4, #4
 800f8be:	f7ff fb15 	bl	800eeec <RCCEx_PLL2_Config>
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f8c6:	2d00      	cmp	r5, #0
 800f8c8:	d16f      	bne.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f8ca:	4978      	ldr	r1, [pc, #480]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f8cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800f8ce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f8d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f8d4:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f8d6:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f8d8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f8da:	f57f ad32 	bpl.w	800f342 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800f8de:	e6f5      	b.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800f8e0:	2102      	movs	r1, #2
 800f8e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f8e6:	f7ff fb7d 	bl	800efe4 <RCCEx_PLL3_Config>
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	f43f aea5 	beq.w	800f63c <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 800f8f2:	2601      	movs	r6, #1
 800f8f4:	e6a2      	b.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 800f8f6:	2601      	movs	r6, #1
 800f8f8:	4635      	mov	r5, r6
 800f8fa:	e69c      	b.n	800f636 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800f8fc:	462e      	mov	r6, r5
 800f8fe:	e488      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f900:	462e      	mov	r6, r5
 800f902:	e442      	b.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800f904:	462e      	mov	r6, r5
 800f906:	e4bf      	b.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800f908:	462e      	mov	r6, r5
 800f90a:	e420      	b.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800f90c:	462e      	mov	r6, r5
 800f90e:	e45e      	b.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f910:	4966      	ldr	r1, [pc, #408]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f912:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f914:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f918:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800f91a:	e44d      	b.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f91c:	4963      	ldr	r1, [pc, #396]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f91e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f920:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f924:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800f926:	e426      	b.n	800f176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f928:	4960      	ldr	r1, [pc, #384]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f92a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f92c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f930:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800f932:	e463      	b.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f934:	495d      	ldr	r1, [pc, #372]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f936:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f938:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f93c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800f93e:	e499      	b.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f940:	485a      	ldr	r0, [pc, #360]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f942:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800f944:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800f948:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800f94a:	f7ff bbe4 	b.w	800f116 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f94e:	0719      	lsls	r1, r3, #28
 800f950:	462e      	mov	r6, r5
 800f952:	f57f ae25 	bpl.w	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800f956:	e617      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f958:	065f      	lsls	r7, r3, #25
 800f95a:	462e      	mov	r6, r5
 800f95c:	f57f adf2 	bpl.w	800f544 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800f960:	e5d2      	b.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f962:	0618      	lsls	r0, r3, #24
 800f964:	462e      	mov	r6, r5
 800f966:	f57f ae0d 	bpl.w	800f584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f96a:	e5ed      	b.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f96c:	494f      	ldr	r1, [pc, #316]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f96e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f970:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800f972:	f022 0207 	bic.w	r2, r2, #7
 800f976:	4302      	orrs	r2, r0
 800f978:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f97a:	0759      	lsls	r1, r3, #29
 800f97c:	f57f ada2 	bpl.w	800f4c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800f980:	e588      	b.n	800f494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f982:	494a      	ldr	r1, [pc, #296]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f984:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800f988:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f98a:	f022 0207 	bic.w	r2, r2, #7
 800f98e:	4302      	orrs	r2, r0
 800f990:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f992:	069a      	lsls	r2, r3, #26
 800f994:	f57f adb6 	bpl.w	800f504 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800f998:	e596      	b.n	800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800f99a:	462e      	mov	r6, r5
 800f99c:	e454      	b.n	800f248 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800f99e:	462e      	mov	r6, r5
 800f9a0:	e490      	b.n	800f2c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f9a2:	462e      	mov	r6, r5
 800f9a4:	e4cd      	b.n	800f342 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800f9a6:	462e      	mov	r6, r5
 800f9a8:	e4ac      	b.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f9aa:	01d8      	lsls	r0, r3, #7
 800f9ac:	462e      	mov	r6, r5
 800f9ae:	f57f acc8 	bpl.w	800f342 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800f9b2:	e68b      	b.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f9b4:	0358      	lsls	r0, r3, #13
 800f9b6:	462e      	mov	r6, r5
 800f9b8:	f57f ae23 	bpl.w	800f602 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800f9bc:	e611      	b.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f9be:	03d9      	lsls	r1, r3, #15
 800f9c0:	462e      	mov	r6, r5
 800f9c2:	f57f ae38 	bpl.w	800f636 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800f9c6:	e61e      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f9c8:	4938      	ldr	r1, [pc, #224]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f9ca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f9cc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800f9ce:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800f9d2:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f9d4:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f9d6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f9d8:	f57f ad5a 	bpl.w	800f490 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800f9dc:	e541      	b.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800f9de:	462e      	mov	r6, r5
 800f9e0:	e629      	b.n	800f636 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f9e2:	041f      	lsls	r7, r3, #16
 800f9e4:	462e      	mov	r6, r5
 800f9e6:	f57f aca9 	bpl.w	800f33c <HAL_RCCEx_PeriphCLKConfig+0x260>
 800f9ea:	e499      	b.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9ec:	492f      	ldr	r1, [pc, #188]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 800f9ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f9f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f9f4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	d1d3      	bne.n	800f9a2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800f9fa:	e680      	b.n	800f6fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f9fc:	2101      	movs	r1, #1
 800f9fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa02:	f7ff faef 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa06:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	2d00      	cmp	r5, #0
 800fa0c:	d1c7      	bne.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 800fa0e:	e452      	b.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fa10:	2101      	movs	r1, #1
 800fa12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa16:	f7ff fae5 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa1a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa1c:	6823      	ldr	r3, [r4, #0]
 800fa1e:	2d00      	cmp	r5, #0
 800fa20:	d1c1      	bne.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800fa22:	e467      	b.n	800f2f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fa24:	2102      	movs	r1, #2
 800fa26:	1d20      	adds	r0, r4, #4
 800fa28:	f7ff fa60 	bl	800eeec <RCCEx_PLL2_Config>
 800fa2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	2d00      	cmp	r5, #0
 800fa32:	d1b2      	bne.n	800f99a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800fa34:	e401      	b.n	800f23a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fa36:	2100      	movs	r1, #0
 800fa38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa3c:	f7ff fad2 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa40:	6823      	ldr	r3, [r4, #0]
 800fa42:	4605      	mov	r5, r0
      break;
 800fa44:	f7ff bbda 	b.w	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800fa48:	2100      	movs	r1, #0
 800fa4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa4e:	f7ff fac9 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	4605      	mov	r5, r0
      break;
 800fa56:	f7ff bbaf 	b.w	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa60:	f7ff fac0 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	4605      	mov	r5, r0
      break;
 800fa68:	e404      	b.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fa6a:	2102      	movs	r1, #2
 800fa6c:	3024      	adds	r0, #36	; 0x24
 800fa6e:	f7ff fab9 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa72:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800fa74:	2e00      	cmp	r6, #0
 800fa76:	f43f ab4c 	beq.w	800f112 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	f7ff bb52 	b.w	800f124 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800fa80:	2100      	movs	r1, #0
 800fa82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa86:	f7ff faad 	bl	800efe4 <RCCEx_PLL3_Config>
 800fa8a:	6823      	ldr	r3, [r4, #0]
 800fa8c:	4605      	mov	r5, r0
      break;
 800fa8e:	e683      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa90:	4906      	ldr	r1, [pc, #24]	; (800faac <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
      break;
 800fa92:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa94:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fa96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fa9a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800fa9c:	e67c      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fa9e:	2100      	movs	r1, #0
 800faa0:	1d20      	adds	r0, r4, #4
 800faa2:	f7ff fa23 	bl	800eeec <RCCEx_PLL2_Config>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	4605      	mov	r5, r0
      break;
 800faaa:	e675      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800faac:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800fab0:	2100      	movs	r1, #0
 800fab2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fab6:	f7ff fa95 	bl	800efe4 <RCCEx_PLL3_Config>
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	4605      	mov	r5, r0
      break;
 800fabe:	f7ff bb5a 	b.w	800f176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fac2:	2101      	movs	r1, #1
 800fac4:	1d20      	adds	r0, r4, #4
 800fac6:	f7ff fa11 	bl	800eeec <RCCEx_PLL2_Config>
 800faca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800facc:	6823      	ldr	r3, [r4, #0]
 800face:	2d00      	cmp	r5, #0
 800fad0:	f47f acdd 	bne.w	800f48e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800fad4:	e74a      	b.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0x890>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fad6:	2101      	movs	r1, #1
 800fad8:	1d20      	adds	r0, r4, #4
 800fada:	f7ff fa07 	bl	800eeec <RCCEx_PLL2_Config>
 800fade:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fae0:	6823      	ldr	r3, [r4, #0]
 800fae2:	2d00      	cmp	r5, #0
 800fae4:	f47f aced 	bne.w	800f4c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800fae8:	e74b      	b.n	800f982 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800faea:	2101      	movs	r1, #1
 800faec:	1d20      	adds	r0, r4, #4
 800faee:	f7ff f9fd 	bl	800eeec <RCCEx_PLL2_Config>
 800faf2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	2d00      	cmp	r5, #0
 800faf8:	f47f acb0 	bne.w	800f45c <HAL_RCCEx_PeriphCLKConfig+0x380>
 800fafc:	e764      	b.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
            ret = HAL_TIMEOUT;
 800fafe:	2603      	movs	r6, #3
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	4635      	mov	r5, r6
 800fb04:	e420      	b.n	800f348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb06:	4949      	ldr	r1, [pc, #292]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800fb08:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fb0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb0e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800fb10:	2d00      	cmp	r5, #0
 800fb12:	f47f af64 	bne.w	800f9de <HAL_RCCEx_PeriphCLKConfig+0x902>
 800fb16:	e587      	b.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb18:	4844      	ldr	r0, [pc, #272]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800fb1a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fb1c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800fb20:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800fb22:	2d00      	cmp	r5, #0
 800fb24:	f47f add0 	bne.w	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800fb28:	e691      	b.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x772>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb2a:	4940      	ldr	r1, [pc, #256]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800fb2c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fb2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb32:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	f47f af42 	bne.w	800f9be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800fb3a:	e69c      	b.n	800f876 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fb3c:	2102      	movs	r1, #2
 800fb3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fb42:	f7ff fa4f 	bl	800efe4 <RCCEx_PLL3_Config>
 800fb46:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb48:	6823      	ldr	r3, [r4, #0]
 800fb4a:	2d00      	cmp	r5, #0
 800fb4c:	f47f af04 	bne.w	800f958 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800fb50:	e4d0      	b.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb52:	4936      	ldr	r1, [pc, #216]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800fb54:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fb56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb5a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800fb5c:	2d00      	cmp	r5, #0
 800fb5e:	f47f af24 	bne.w	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800fb62:	e6b2      	b.n	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fb64:	2102      	movs	r1, #2
 800fb66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fb6a:	f7ff fa3b 	bl	800efe4 <RCCEx_PLL3_Config>
 800fb6e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb70:	6823      	ldr	r3, [r4, #0]
 800fb72:	2d00      	cmp	r5, #0
 800fb74:	f47f aef5 	bne.w	800f962 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800fb78:	e4dc      	b.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fb7a:	2102      	movs	r1, #2
 800fb7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fb80:	f7ff fa30 	bl	800efe4 <RCCEx_PLL3_Config>
 800fb84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	2d00      	cmp	r5, #0
 800fb8a:	f47f aee0 	bne.w	800f94e <HAL_RCCEx_PeriphCLKConfig+0x872>
 800fb8e:	e4f1      	b.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fb90:	1d20      	adds	r0, r4, #4
 800fb92:	f7ff f9ab 	bl	800eeec <RCCEx_PLL2_Config>
 800fb96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb98:	6823      	ldr	r3, [r4, #0]
 800fb9a:	2d00      	cmp	r5, #0
 800fb9c:	f47f af0a 	bne.w	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800fba0:	e67f      	b.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800fba2:	2102      	movs	r1, #2
 800fba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fba8:	f7ff fa1c 	bl	800efe4 <RCCEx_PLL3_Config>
 800fbac:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800fbb0:	b100      	cbz	r0, 800fbb4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
        status = HAL_ERROR;
 800fbb2:	2601      	movs	r6, #1
 800fbb4:	6823      	ldr	r3, [r4, #0]
 800fbb6:	e4fb      	b.n	800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800fbb8:	2102      	movs	r1, #2
 800fbba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fbbe:	f7ff fa11 	bl	800efe4 <RCCEx_PLL3_Config>
 800fbc2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800fbc6:	b100      	cbz	r0, 800fbca <HAL_RCCEx_PeriphCLKConfig+0xaee>
          status = HAL_ERROR;
 800fbc8:	2601      	movs	r6, #1
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	e4e2      	b.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 800fbce:	f7fa fcbd 	bl	800a54c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbd2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800fc2c <HAL_RCCEx_PeriphCLKConfig+0xb50>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbd6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800fbda:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbdc:	e004      	b.n	800fbe8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbde:	f7fa fcb5 	bl	800a54c <HAL_GetTick>
 800fbe2:	1bc0      	subs	r0, r0, r7
 800fbe4:	4548      	cmp	r0, r9
 800fbe6:	d88a      	bhi.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0xa22>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbe8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800fbec:	079b      	lsls	r3, r3, #30
 800fbee:	d5f6      	bpl.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800fbf0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800fbf4:	e5bc      	b.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x694>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fbf6:	480d      	ldr	r0, [pc, #52]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 800fbf8:	4a0d      	ldr	r2, [pc, #52]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
 800fbfa:	6901      	ldr	r1, [r0, #16]
 800fbfc:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800fc00:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800fc04:	430a      	orrs	r2, r1
 800fc06:	6102      	str	r2, [r0, #16]
 800fc08:	e5bd      	b.n	800f786 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800fc0a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800fc0c:	462e      	mov	r6, r5
 800fc0e:	f7ff bb9b 	b.w	800f348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800fc12:	2601      	movs	r6, #1
 800fc14:	4635      	mov	r5, r6
 800fc16:	e455      	b.n	800f4c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800fc18:	2601      	movs	r6, #1
 800fc1a:	f7ff ba97 	b.w	800f14c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800fc1e:	2601      	movs	r6, #1
 800fc20:	4635      	mov	r5, r6
 800fc22:	e435      	b.n	800f490 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800fc24:	2601      	movs	r6, #1
 800fc26:	4635      	mov	r5, r6
 800fc28:	f7ff bb8b 	b.w	800f342 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800fc2c:	58024400 	.word	0x58024400
 800fc30:	00ffffcf 	.word	0x00ffffcf

0800fc34 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800fc34:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fc36:	f7ff f889 	bl	800ed4c <HAL_RCC_GetHCLKFreq>
 800fc3a:	4b05      	ldr	r3, [pc, #20]	; (800fc50 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800fc3c:	4a05      	ldr	r2, [pc, #20]	; (800fc54 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800fc3e:	6a1b      	ldr	r3, [r3, #32]
 800fc40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fc44:	5cd3      	ldrb	r3, [r2, r3]
 800fc46:	f003 031f 	and.w	r3, r3, #31
}
 800fc4a:	40d8      	lsrs	r0, r3
 800fc4c:	bd08      	pop	{r3, pc}
 800fc4e:	bf00      	nop
 800fc50:	58024400 	.word	0x58024400
 800fc54:	08045d78 	.word	0x08045d78

0800fc58 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc58:	4b4f      	ldr	r3, [pc, #316]	; (800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800fc5a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc5c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800fc5e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fc60:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800fc62:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800fc66:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fc6a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800fc6c:	d05c      	beq.n	800fd28 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fc6e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fc72:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc76:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fc7a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800fc7e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fc80:	ee07 4a90 	vmov	s15, r4
 800fc84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800fc88:	d003      	beq.n	800fc92 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800fc8a:	2902      	cmp	r1, #2
 800fc8c:	d075      	beq.n	800fd7a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800fc8e:	2900      	cmp	r1, #0
 800fc90:	d04f      	beq.n	800fd32 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fc92:	ee07 2a90 	vmov	s15, r2
 800fc96:	eddf 6a41 	vldr	s13, [pc, #260]	; 800fd9c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800fc9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800fca4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800fda0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800fca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcac:	ee06 3a90 	vmov	s13, r3
 800fcb0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800fcb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fcb8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fcbc:	eee7 6a25 	vfma.f32	s13, s14, s11
 800fcc0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800fcc4:	4a34      	ldr	r2, [pc, #208]	; (800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800fcc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fcca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800fccc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800fcd0:	ee07 3a10 	vmov	s14, r3
 800fcd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800fcd8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800fcda:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fcde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fce6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800fcea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800fcec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800fcf0:	ee07 3a10 	vmov	s14, r3
 800fcf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcf8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fcfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd04:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800fd08:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800fd0a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800fd0e:	ee07 3a90 	vmov	s15, r3
 800fd12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd16:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd1e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fd22:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800fd26:	4770      	bx	lr
 800fd28:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fd2a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fd2e:	6082      	str	r2, [r0, #8]
}
 800fd30:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd32:	6819      	ldr	r1, [r3, #0]
 800fd34:	0689      	lsls	r1, r1, #26
 800fd36:	d527      	bpl.n	800fd88 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd38:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fd3a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd3e:	4a19      	ldr	r2, [pc, #100]	; (800fda4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fd40:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd44:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fd48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd4e:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fd50:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800fda0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800fd54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd58:	ee06 2a10 	vmov	s12, r2
 800fd5c:	ee06 3a90 	vmov	s13, r3
 800fd60:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800fd64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fd68:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800fd6c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800fd70:	eee7 6a05 	vfma.f32	s13, s14, s10
 800fd74:	ee66 6a26 	vmul.f32	s13, s12, s13
 800fd78:	e7a4      	b.n	800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fd7a:	ee07 2a90 	vmov	s15, r2
 800fd7e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800fda8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800fd82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd86:	e78a      	b.n	800fc9e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fd88:	ee07 2a90 	vmov	s15, r2
 800fd8c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800fdac <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800fd90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd94:	e783      	b.n	800fc9e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800fd96:	bf00      	nop
 800fd98:	58024400 	.word	0x58024400
 800fd9c:	4a742400 	.word	0x4a742400
 800fda0:	39000000 	.word	0x39000000
 800fda4:	03d09000 	.word	0x03d09000
 800fda8:	4bbebc20 	.word	0x4bbebc20
 800fdac:	4c742400 	.word	0x4c742400

0800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdb0:	4b4f      	ldr	r3, [pc, #316]	; (800fef0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800fdb2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800fdb6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fdb8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800fdba:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800fdbe:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fdc2:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800fdc4:	d05c      	beq.n	800fe80 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fdc6:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fdca:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdce:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fdd2:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800fdd6:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fdd8:	ee07 4a90 	vmov	s15, r4
 800fddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800fde0:	d003      	beq.n	800fdea <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800fde2:	2902      	cmp	r1, #2
 800fde4:	d075      	beq.n	800fed2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800fde6:	2900      	cmp	r1, #0
 800fde8:	d04f      	beq.n	800fe8a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fdea:	ee07 2a90 	vmov	s15, r2
 800fdee:	eddf 6a41 	vldr	s13, [pc, #260]	; 800fef4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800fdf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800fdfc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800fef8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800fe00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe04:	ee06 3a90 	vmov	s13, r3
 800fe08:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800fe0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fe10:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fe14:	eee7 6a25 	vfma.f32	s13, s14, s11
 800fe18:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800fe1c:	4a34      	ldr	r2, [pc, #208]	; (800fef0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800fe1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fe22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fe24:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800fe28:	ee07 3a10 	vmov	s14, r3
 800fe2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800fe30:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800fe32:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fe36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe3e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800fe42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fe44:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800fe48:	ee07 3a10 	vmov	s14, r3
 800fe4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe50:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fe54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe5c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800fe60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fe62:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800fe66:	ee07 3a90 	vmov	s15, r3
 800fe6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800fe72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe76:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fe7a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800fe7e:	4770      	bx	lr
 800fe80:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fe82:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fe86:	6082      	str	r2, [r0, #8]
}
 800fe88:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe8a:	6819      	ldr	r1, [r3, #0]
 800fe8c:	0689      	lsls	r1, r1, #26
 800fe8e:	d527      	bpl.n	800fee0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fe90:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fe92:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fe96:	4a19      	ldr	r2, [pc, #100]	; (800fefc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fe98:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fe9c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fea6:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fea8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800fef8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800feac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb0:	ee06 2a10 	vmov	s12, r2
 800feb4:	ee06 3a90 	vmov	s13, r3
 800feb8:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800febc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fec0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800fec4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800fec8:	eee7 6a05 	vfma.f32	s13, s14, s10
 800fecc:	ee66 6a26 	vmul.f32	s13, s12, s13
 800fed0:	e7a4      	b.n	800fe1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fed2:	ee07 2a90 	vmov	s15, r2
 800fed6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800ff00 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800feda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fede:	e78a      	b.n	800fdf6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fee0:	ee07 2a90 	vmov	s15, r2
 800fee4:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ff04 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800fee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800feec:	e783      	b.n	800fdf6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800feee:	bf00      	nop
 800fef0:	58024400 	.word	0x58024400
 800fef4:	4a742400 	.word	0x4a742400
 800fef8:	39000000 	.word	0x39000000
 800fefc:	03d09000 	.word	0x03d09000
 800ff00:	4bbebc20 	.word	0x4bbebc20
 800ff04:	4c742400 	.word	0x4c742400

0800ff08 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff08:	4b4f      	ldr	r3, [pc, #316]	; (8010048 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800ff0a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ff0e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ff10:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800ff12:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ff16:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ff1a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800ff1c:	d05c      	beq.n	800ffd8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ff1e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ff22:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff26:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ff2a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800ff2e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ff30:	ee07 4a90 	vmov	s15, r4
 800ff34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800ff38:	d003      	beq.n	800ff42 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
 800ff3a:	2902      	cmp	r1, #2
 800ff3c:	d075      	beq.n	801002a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800ff3e:	2900      	cmp	r1, #0
 800ff40:	d04f      	beq.n	800ffe2 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ff42:	ee07 2a90 	vmov	s15, r2
 800ff46:	eddf 6a41 	vldr	s13, [pc, #260]	; 801004c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800ff4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff50:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800ff54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010050 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800ff58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff5c:	ee06 3a90 	vmov	s13, r3
 800ff60:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ff64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ff68:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ff6c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ff70:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ff74:	4a34      	ldr	r2, [pc, #208]	; (8010048 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800ff76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ff7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ff7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ff80:	ee07 3a10 	vmov	s14, r3
 800ff84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ff88:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ff8a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ff8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff96:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800ff9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ff9c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ffa0:	ee07 3a10 	vmov	s14, r3
 800ffa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ffa8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ffac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffb4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ffb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ffba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ffbe:	ee07 3a90 	vmov	s15, r3
 800ffc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ffca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ffd2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800ffd6:	4770      	bx	lr
 800ffd8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ffda:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ffde:	6082      	str	r2, [r0, #8]
}
 800ffe0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffe2:	6819      	ldr	r1, [r3, #0]
 800ffe4:	0689      	lsls	r1, r1, #26
 800ffe6:	d527      	bpl.n	8010038 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ffe8:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ffea:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ffee:	4a19      	ldr	r2, [pc, #100]	; (8010054 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fff0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fff4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fffe:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010000:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8010050 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8010004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010008:	ee06 2a10 	vmov	s12, r2
 801000c:	ee06 3a90 	vmov	s13, r3
 8010010:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8010014:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010018:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 801001c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010020:	eee7 6a05 	vfma.f32	s13, s14, s10
 8010024:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010028:	e7a4      	b.n	800ff74 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801002a:	ee07 2a90 	vmov	s15, r2
 801002e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8010058 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8010032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010036:	e78a      	b.n	800ff4e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010038:	ee07 2a90 	vmov	s15, r2
 801003c:	eddf 6a07 	vldr	s13, [pc, #28]	; 801005c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8010040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010044:	e783      	b.n	800ff4e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8010046:	bf00      	nop
 8010048:	58024400 	.word	0x58024400
 801004c:	4a742400 	.word	0x4a742400
 8010050:	39000000 	.word	0x39000000
 8010054:	03d09000 	.word	0x03d09000
 8010058:	4bbebc20 	.word	0x4bbebc20
 801005c:	4c742400 	.word	0x4c742400

08010060 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010060:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8010064:	b500      	push	{lr}
 8010066:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010068:	d050      	beq.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801006a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801006e:	d019      	beq.n	80100a4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010070:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010074:	f000 808a 	beq.w	801018c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010078:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801007c:	d05a      	beq.n	8010134 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801007e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8010082:	d034      	beq.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010084:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8010088:	f000 80b1 	beq.w	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801008c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010090:	f000 80be 	beq.w	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010094:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8010098:	f000 8096 	beq.w	80101c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      frequency = 0;
 801009c:	2000      	movs	r0, #0
}
 801009e:	b005      	add	sp, #20
 80100a0:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80100a4:	4a70      	ldr	r2, [pc, #448]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80100a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80100a8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80100ac:	2b80      	cmp	r3, #128	; 0x80
 80100ae:	d059      	beq.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80100b0:	d912      	bls.n	80100d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80100b2:	2bc0      	cmp	r3, #192	; 0xc0
 80100b4:	d026      	beq.n	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80100b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100ba:	d1ef      	bne.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80100bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80100be:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80100c2:	d05b      	beq.n	801017c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80100c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100c8:	f000 80a0 	beq.w	801020c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
            frequency = HSE_VALUE;
 80100cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100d0:	4866      	ldr	r0, [pc, #408]	; (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80100d2:	bf18      	it	ne
 80100d4:	2000      	movne	r0, #0
 80100d6:	e7e2      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d03c      	beq.n	8010156 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80100dc:	2b40      	cmp	r3, #64	; 0x40
 80100de:	d1dd      	bne.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100e0:	a801      	add	r0, sp, #4
 80100e2:	f7ff fdb9 	bl	800fc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80100e6:	9801      	ldr	r0, [sp, #4]
}
 80100e8:	b005      	add	sp, #20
 80100ea:	f85d fb04 	ldr.w	pc, [sp], #4
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80100ee:	4a5e      	ldr	r2, [pc, #376]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80100f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80100f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80100f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100fa:	d033      	beq.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80100fc:	d929      	bls.n	8010152 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80100fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010102:	d158      	bne.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = EXTERNAL_CLOCK_VALUE;
 8010104:	485a      	ldr	r0, [pc, #360]	; (8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
}
 8010106:	b005      	add	sp, #20
 8010108:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 801010c:	4b56      	ldr	r3, [pc, #344]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801010e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	2b04      	cmp	r3, #4
 8010116:	d8c1      	bhi.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010118:	a201      	add	r2, pc, #4	; (adr r2, 8010120 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 801011a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011e:	bf00      	nop
 8010120:	08010157 	.word	0x08010157
 8010124:	080100e1 	.word	0x080100e1
 8010128:	08010165 	.word	0x08010165
 801012c:	08010105 	.word	0x08010105
 8010130:	08010173 	.word	0x08010173
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8010134:	4a4c      	ldr	r2, [pc, #304]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010136:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010138:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 801013c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010140:	d010      	beq.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8010142:	d91d      	bls.n	8010180 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8010144:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010148:	d0dc      	beq.n	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 801014a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801014e:	d0b5      	beq.n	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010150:	e7a4      	b.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8010152:	2b00      	cmp	r3, #0
 8010154:	d134      	bne.n	80101c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010156:	a801      	add	r0, sp, #4
 8010158:	f7ff fed6 	bl	800ff08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801015c:	9802      	ldr	r0, [sp, #8]
}
 801015e:	b005      	add	sp, #20
 8010160:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010164:	a801      	add	r0, sp, #4
 8010166:	f7ff fe23 	bl	800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801016a:	9801      	ldr	r0, [sp, #4]
}
 801016c:	b005      	add	sp, #20
 801016e:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010172:	4b3d      	ldr	r3, [pc, #244]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8010176:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 801017a:	d1a3      	bne.n	80100c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSI_VALUE;
 801017c:	483d      	ldr	r0, [pc, #244]	; (8010274 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 801017e:	e78e      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8010180:	2b00      	cmp	r3, #0
 8010182:	d0e8      	beq.n	8010156 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010188:	d0aa      	beq.n	80100e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 801018a:	e787      	b.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 801018c:	4a36      	ldr	r2, [pc, #216]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801018e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010190:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8010194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010198:	d0e4      	beq.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801019a:	d805      	bhi.n	80101a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 801019c:	2b00      	cmp	r3, #0
 801019e:	d0da      	beq.n	8010156 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80101a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101a4:	d09c      	beq.n	80100e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 80101a6:	e779      	b.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80101a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80101ac:	d0aa      	beq.n	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80101ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80101b2:	d083      	beq.n	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80101b4:	e772      	b.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 80101b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80101ba:	f43f af7f 	beq.w	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80101be:	e76d      	b.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80101c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101c4:	d08c      	beq.n	80100e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 80101c6:	e769      	b.n	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80101c8:	4b27      	ldr	r3, [pc, #156]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80101ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101cc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80101d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80101d4:	d0d2      	beq.n	801017c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80101d6:	d824      	bhi.n	8010222 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80101d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101dc:	d03e      	beq.n	801025c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80101de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101e2:	d127      	bne.n	8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101e4:	a801      	add	r0, sp, #4
 80101e6:	f7ff fde3 	bl	800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80101ea:	9802      	ldr	r0, [sp, #8]
          break;
 80101ec:	e757      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80101ee:	4a1e      	ldr	r2, [pc, #120]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80101f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80101f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80101f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101fa:	d02a      	beq.n	8010252 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80101fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010200:	f43f af5c 	beq.w	80100bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010204:	2b00      	cmp	r3, #0
 8010206:	f47f af49 	bne.w	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 801020a:	e769      	b.n	80100e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      switch (srcclk)
 801020c:	481a      	ldr	r0, [pc, #104]	; (8010278 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 801020e:	e746      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8010210:	4b15      	ldr	r3, [pc, #84]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8010214:	03db      	lsls	r3, r3, #15
 8010216:	d59e      	bpl.n	8010156 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010218:	a801      	add	r0, sp, #4
 801021a:	f7ff fd1d 	bl	800fc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801021e:	9803      	ldr	r0, [sp, #12]
          break;
 8010220:	e73d      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 8010222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010226:	d0f1      	beq.n	801020c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = HSE_VALUE;
 8010228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801022c:	480f      	ldr	r0, [pc, #60]	; (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 801022e:	bf18      	it	ne
 8010230:	2000      	movne	r0, #0
 8010232:	e734      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 8010234:	2b00      	cmp	r3, #0
 8010236:	f47f af31 	bne.w	801009c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801023a:	f7fe fd87 	bl	800ed4c <HAL_RCC_GetHCLKFreq>
 801023e:	4b0a      	ldr	r3, [pc, #40]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010240:	4a0e      	ldr	r2, [pc, #56]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>)
 8010242:	6a1b      	ldr	r3, [r3, #32]
 8010244:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010248:	5cd3      	ldrb	r3, [r2, r3]
 801024a:	f003 031f 	and.w	r3, r3, #31
 801024e:	40d8      	lsrs	r0, r3
          break;
 8010250:	e725      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010252:	a801      	add	r0, sp, #4
 8010254:	f7ff fdac 	bl	800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010258:	9803      	ldr	r0, [sp, #12]
          break;
 801025a:	e720      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801025c:	a801      	add	r0, sp, #4
 801025e:	f7ff fcfb 	bl	800fc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010262:	9802      	ldr	r0, [sp, #8]
          break;
 8010264:	e71b      	b.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8010266:	bf00      	nop
 8010268:	58024400 	.word	0x58024400
 801026c:	017d7840 	.word	0x017d7840
 8010270:	00bb8000 	.word	0x00bb8000
 8010274:	03d09000 	.word	0x03d09000
 8010278:	003d0900 	.word	0x003d0900
 801027c:	08045d78 	.word	0x08045d78

08010280 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010280:	2800      	cmp	r0, #0
 8010282:	d036      	beq.n	80102f2 <HAL_RNG_Init+0x72>
{
 8010284:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8010286:	7a43      	ldrb	r3, [r0, #9]
 8010288:	4604      	mov	r4, r0
 801028a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801028e:	b333      	cbz	r3, 80102de <HAL_RNG_Init+0x5e>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8010290:	2202      	movs	r2, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010292:	e9d4 3100 	ldrd	r3, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8010296:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	f022 0220 	bic.w	r2, r2, #32
 801029e:	430a      	orrs	r2, r1
 80102a0:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	f042 0204 	orr.w	r2, r2, #4
 80102a8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	065b      	lsls	r3, r3, #25
 80102ae:	d503      	bpl.n	80102b8 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80102b0:	2304      	movs	r3, #4
    return HAL_ERROR;
 80102b2:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80102b4:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80102b8:	f7fa f948 	bl	800a54c <HAL_GetTick>
 80102bc:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80102be:	e004      	b.n	80102ca <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80102c0:	f7fa f944 	bl	800a54c <HAL_GetTick>
 80102c4:	1b43      	subs	r3, r0, r5
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d80d      	bhi.n	80102e6 <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	f013 0304 	ands.w	r3, r3, #4
 80102d2:	d1f5      	bne.n	80102c0 <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 80102d4:	2201      	movs	r2, #1
  return HAL_OK;
 80102d6:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80102d8:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80102da:	60e3      	str	r3, [r4, #12]
}
 80102dc:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80102de:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80102e0:	f7f5 fb28 	bl	8005934 <HAL_RNG_MspInit>
 80102e4:	e7d4      	b.n	8010290 <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 80102e6:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80102e8:	2302      	movs	r3, #2
      return HAL_ERROR;
 80102ea:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 80102ec:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80102ee:	60e3      	str	r3, [r4, #12]
}
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80102f2:	2001      	movs	r0, #1
}
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop

080102f8 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80102f8:	b1b0      	cbz	r0, 8010328 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 80102fa:	6803      	ldr	r3, [r0, #0]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	f022 0220 	bic.w	r2, r2, #32
{
 8010302:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8010304:	601a      	str	r2, [r3, #0]
 8010306:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	f022 020c 	bic.w	r2, r2, #12
 801030e:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010316:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8010318:	f7f5 fb2a 	bl	8005970 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 801031c:	2300      	movs	r3, #0
 801031e:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 8010320:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010322:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 8010324:	7223      	strb	r3, [r4, #8]
}
 8010326:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010328:	2001      	movs	r0, #1
}
 801032a:	4770      	bx	lr

0801032c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801032c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8010330:	7a03      	ldrb	r3, [r0, #8]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d028      	beq.n	8010388 <HAL_RNG_GenerateRandomNumber+0x5c>
 8010336:	2201      	movs	r2, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8010338:	7a43      	ldrb	r3, [r0, #9]
 801033a:	4604      	mov	r4, r0
 801033c:	4293      	cmp	r3, r2
 801033e:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 8010342:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8010344:	d007      	beq.n	8010356 <HAL_RNG_GenerateRandomNumber+0x2a>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8010346:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8010348:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801034a:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801034c:	2300      	movs	r3, #0
 801034e:	7223      	strb	r3, [r4, #8]

  return status;
}
 8010350:	4640      	mov	r0, r8
 8010352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8010356:	2302      	movs	r3, #2
 8010358:	460e      	mov	r6, r1
 801035a:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 801035c:	f7fa f8f6 	bl	800a54c <HAL_GetTick>
 8010360:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8010362:	e004      	b.n	801036e <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8010364:	f7fa f8f2 	bl	800a54c <HAL_GetTick>
 8010368:	1bc0      	subs	r0, r0, r7
 801036a:	2802      	cmp	r0, #2
 801036c:	d811      	bhi.n	8010392 <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801036e:	6822      	ldr	r2, [r4, #0]
 8010370:	6855      	ldr	r5, [r2, #4]
 8010372:	f015 0501 	ands.w	r5, r5, #1
 8010376:	d0f5      	beq.n	8010364 <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 8010378:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 801037a:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 801037c:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8010380:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8010382:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8010384:	7262      	strb	r2, [r4, #9]
 8010386:	e7e1      	b.n	801034c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8010388:	f04f 0802 	mov.w	r8, #2
}
 801038c:	4640      	mov	r0, r8
 801038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 8010392:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010394:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8010396:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8010398:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801039a:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 801039c:	e7d8      	b.n	8010350 <HAL_RNG_GenerateRandomNumber+0x24>
 801039e:	bf00      	nop

080103a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80103a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a4:	4605      	mov	r5, r0
 80103a6:	b086      	sub	sp, #24
 80103a8:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80103aa:	f7fa f8cf 	bl	800a54c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80103ae:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80103b0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80103b2:	6828      	ldr	r0, [r5, #0]
 80103b4:	f001 ffc0 	bl	8012338 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80103b8:	4604      	mov	r4, r0
 80103ba:	b118      	cbz	r0, 80103c4 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80103bc:	4620      	mov	r0, r4
 80103be:	b006      	add	sp, #24
 80103c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80103c4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80103c6:	6828      	ldr	r0, [r5, #0]
 80103c8:	0409      	lsls	r1, r1, #16
 80103ca:	f002 fd01 	bl	8012dd0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80103ce:	4604      	mov	r4, r0
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d1f3      	bne.n	80103bc <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80103d4:	f04f 32ff 	mov.w	r2, #4294967295
 80103d8:	2308      	movs	r3, #8
 80103da:	2030      	movs	r0, #48	; 0x30
 80103dc:	2102      	movs	r1, #2
 80103de:	e9cd 2300 	strd	r2, r3, [sp]
 80103e2:	2200      	movs	r2, #0
 80103e4:	2301      	movs	r3, #1
 80103e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80103ea:	4669      	mov	r1, sp
 80103ec:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80103ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80103f2:	f001 ff8b 	bl	801230c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80103f6:	6828      	ldr	r0, [r5, #0]
 80103f8:	f002 fe6a 	bl	80130d0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80103fc:	4604      	mov	r4, r0
 80103fe:	2800      	cmp	r0, #0
 8010400:	d1dc      	bne.n	80103bc <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010402:	4682      	mov	sl, r0
 8010404:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010406:	f240 582a 	movw	r8, #1322	; 0x52a
 801040a:	e004      	b.n	8010416 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801040c:	f7fa f89e 	bl	800a54c <HAL_GetTick>
 8010410:	1b83      	subs	r3, r0, r6
 8010412:	3301      	adds	r3, #1
 8010414:	d024      	beq.n	8010460 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010416:	6828      	ldr	r0, [r5, #0]
 8010418:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801041a:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801041e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010420:	d10c      	bne.n	801043c <SD_FindSCR+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010422:	0319      	lsls	r1, r3, #12
 8010424:	d4f2      	bmi.n	801040c <SD_FindSCR+0x6c>
 8010426:	2c00      	cmp	r4, #0
 8010428:	d1f0      	bne.n	801040c <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801042a:	f001 ff4d 	bl	80122c8 <SDMMC_ReadFIFO>
 801042e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010430:	6828      	ldr	r0, [r5, #0]
      index++;
 8010432:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010434:	f001 ff48 	bl	80122c8 <SDMMC_ReadFIFO>
 8010438:	4682      	mov	sl, r0
      index++;
 801043a:	e7e7      	b.n	801040c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801043c:	071a      	lsls	r2, r3, #28
 801043e:	d415      	bmi.n	801046c <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010440:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010442:	079b      	lsls	r3, r3, #30
 8010444:	d40f      	bmi.n	8010466 <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010446:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010448:	f014 0420 	ands.w	r4, r4, #32
 801044c:	d111      	bne.n	8010472 <SD_FindSCR+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801044e:	fa9a f28a 	rev.w	r2, sl
 8010452:	fa99 f389 	rev.w	r3, r9
 8010456:	4908      	ldr	r1, [pc, #32]	; (8010478 <SD_FindSCR+0xd8>)
 8010458:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801045a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 801045e:	e7ad      	b.n	80103bc <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8010460:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010464:	e7aa      	b.n	80103bc <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010466:	2402      	movs	r4, #2
 8010468:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801046a:	e7a7      	b.n	80103bc <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801046c:	2408      	movs	r4, #8
 801046e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010470:	e7a4      	b.n	80103bc <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010472:	2420      	movs	r4, #32
 8010474:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8010476:	e7a1      	b.n	80103bc <SD_FindSCR+0x1c>
 8010478:	18000f3a 	.word	0x18000f3a

0801047c <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 801047c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010480:	b096      	sub	sp, #88	; 0x58
 8010482:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8010484:	2240      	movs	r2, #64	; 0x40
 8010486:	2100      	movs	r1, #0
 8010488:	a806      	add	r0, sp, #24
 801048a:	f010 fb4b 	bl	8020b24 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 801048e:	f7fa f85d 	bl	800a54c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8010492:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010494:	b13b      	cbz	r3, 80104a6 <SD_HighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801049a:	d00a      	beq.n	80104b2 <SD_HighSpeed+0x36>
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);


    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 801049c:	2600      	movs	r6, #0
    }

  }

  return errorstate;
}
 801049e:	4630      	mov	r0, r6
 80104a0:	b016      	add	sp, #88	; 0x58
 80104a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80104a6:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 80104aa:	4630      	mov	r0, r6
 80104ac:	b016      	add	sp, #88	; 0x58
 80104ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	4607      	mov	r7, r0
 80104b6:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80104b8:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 80104ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80104bc:	f001 ff3c 	bl	8012338 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 80104c0:	4606      	mov	r6, r0
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d1eb      	bne.n	801049e <SD_HighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80104c6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ca:	2340      	movs	r3, #64	; 0x40
 80104cc:	2060      	movs	r0, #96	; 0x60
 80104ce:	2102      	movs	r1, #2
 80104d0:	e9cd 2300 	strd	r2, r3, [sp]
 80104d4:	2200      	movs	r2, #0
 80104d6:	2301      	movs	r3, #1
 80104d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80104dc:	4669      	mov	r1, sp
 80104de:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80104e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80104e4:	f001 ff12 	bl	801230c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 80104e8:	4924      	ldr	r1, [pc, #144]	; (801057c <SD_HighSpeed+0x100>)
 80104ea:	6820      	ldr	r0, [r4, #0]
 80104ec:	f003 f8ac 	bl	8013648 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80104f0:	4606      	mov	r6, r0
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d1d3      	bne.n	801049e <SD_HighSpeed+0x22>
  uint32_t count, loop = 0 ;
 80104f6:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80104f8:	f240 5a2a 	movw	sl, #1322	; 0x52a
 80104fc:	e004      	b.n	8010508 <SD_HighSpeed+0x8c>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80104fe:	f7fa f825 	bl	800a54c <HAL_GetTick>
 8010502:	1bc0      	subs	r0, r0, r7
 8010504:	3001      	adds	r0, #1
 8010506:	d029      	beq.n	801055c <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010508:	6820      	ldr	r0, [r4, #0]
 801050a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801050c:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010510:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010512:	d112      	bne.n	801053a <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010514:	0415      	lsls	r5, r2, #16
 8010516:	d5f2      	bpl.n	80104fe <SD_HighSpeed+0x82>
 8010518:	ab06      	add	r3, sp, #24
 801051a:	eb03 1549 	add.w	r5, r3, r9, lsl #5
 801051e:	ab0e      	add	r3, sp, #56	; 0x38
 8010520:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8010524:	e000      	b.n	8010528 <SD_HighSpeed+0xac>
 8010526:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8010528:	f001 fece 	bl	80122c8 <SDMMC_ReadFIFO>
 801052c:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8010530:	4545      	cmp	r5, r8
 8010532:	d1f8      	bne.n	8010526 <SD_HighSpeed+0xaa>
        loop ++;
 8010534:	f109 0901 	add.w	r9, r9, #1
 8010538:	e7e1      	b.n	80104fe <SD_HighSpeed+0x82>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801053a:	0714      	lsls	r4, r2, #28
 801053c:	d415      	bmi.n	801056a <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801053e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010540:	0791      	lsls	r1, r2, #30
 8010542:	d415      	bmi.n	8010570 <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010544:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010546:	0692      	lsls	r2, r2, #26
 8010548:	d415      	bmi.n	8010576 <SD_HighSpeed+0xfa>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801054a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801054e:	490c      	ldr	r1, [pc, #48]	; (8010580 <SD_HighSpeed+0x104>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010550:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010552:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010554:	d4a2      	bmi.n	801049c <SD_HighSpeed+0x20>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8010556:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 801055a:	e7a0      	b.n	801049e <SD_HighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801055c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8010560:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010562:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010564:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8010568:	e799      	b.n	801049e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801056a:	2208      	movs	r2, #8
 801056c:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 801056e:	e796      	b.n	801049e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010570:	2602      	movs	r6, #2
 8010572:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 8010574:	e793      	b.n	801049e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010576:	2620      	movs	r6, #32
 8010578:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 801057a:	e790      	b.n	801049e <SD_HighSpeed+0x22>
 801057c:	80ffff01 	.word	0x80ffff01
 8010580:	18000f3a 	.word	0x18000f3a

08010584 <HAL_SD_MspInit>:
 8010584:	4770      	bx	lr
 8010586:	bf00      	nop

08010588 <HAL_SD_MspDeInit>:
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop

0801058c <HAL_SD_ReadBlocks>:
{
 801058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010590:	460c      	mov	r4, r1
 8010592:	b087      	sub	sp, #28
 8010594:	4683      	mov	fp, r0
 8010596:	4691      	mov	r9, r2
 8010598:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 801059a:	f7f9 ffd7 	bl	800a54c <HAL_GetTick>
  if(NULL == pData)
 801059e:	2c00      	cmp	r4, #0
 80105a0:	f000 8082 	beq.w	80106a8 <HAL_SD_ReadBlocks+0x11c>
  if(hsd->State == HAL_SD_STATE_READY)
 80105a4:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	fa5f f883 	uxtb.w	r8, r3
 80105ae:	d168      	bne.n	8010682 <HAL_SD_ReadBlocks+0xf6>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80105b0:	eb09 0306 	add.w	r3, r9, r6
 80105b4:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80105b8:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80105ba:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80105bc:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80105c0:	d87e      	bhi.n	80106c0 <HAL_SD_ReadBlocks+0x134>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80105c2:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 80105c6:	2203      	movs	r2, #3
 80105c8:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 80105ca:	f8db 0000 	ldr.w	r0, [fp]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80105ce:	2b01      	cmp	r3, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80105d0:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 80105d4:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80105d8:	f04f 0a02 	mov.w	sl, #2
    hsd->Instance->DCTRL = 0U;
 80105dc:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80105de:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80105e2:	f04f 0290 	mov.w	r2, #144	; 0x90
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80105e6:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80105e8:	f04f 0300 	mov.w	r3, #0
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80105ec:	9100      	str	r1, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80105ee:	4669      	mov	r1, sp
      add *= 512U;
 80105f0:	bf18      	it	ne
 80105f2:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80105f6:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80105f8:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80105fa:	e9cd a303 	strd	sl, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80105fe:	f001 fe85 	bl	801230c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010602:	f8db 0000 	ldr.w	r0, [fp]
    if(NumberOfBlocks > 1U)
 8010606:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010608:	68c3      	ldr	r3, [r0, #12]
 801060a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801060e:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8010610:	d943      	bls.n	801069a <HAL_SD_ReadBlocks+0x10e>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010612:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010614:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010618:	f001 ffd6 	bl	80125c8 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 801061c:	2800      	cmp	r0, #0
 801061e:	d159      	bne.n	80106d4 <HAL_SD_ReadBlocks+0x148>
    dataremaining = config.DataLength;
 8010620:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010624:	e006      	b.n	8010634 <HAL_SD_ReadBlocks+0xa8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010626:	f7f9 ff91 	bl	800a54c <HAL_GetTick>
 801062a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801062c:	1b40      	subs	r0, r0, r5
 801062e:	4298      	cmp	r0, r3
 8010630:	f080 8083 	bcs.w	801073a <HAL_SD_ReadBlocks+0x1ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010634:	f8db 0000 	ldr.w	r0, [fp]
 8010638:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801063a:	f413 7f95 	tst.w	r3, #298	; 0x12a
 801063e:	d159      	bne.n	80106f4 <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8010640:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010642:	041a      	lsls	r2, r3, #16
 8010644:	d5ef      	bpl.n	8010626 <HAL_SD_ReadBlocks+0x9a>
 8010646:	f1ba 0f1f 	cmp.w	sl, #31
 801064a:	d9ec      	bls.n	8010626 <HAL_SD_ReadBlocks+0x9a>
 801064c:	1d27      	adds	r7, r4, #4
 801064e:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8010652:	e001      	b.n	8010658 <HAL_SD_ReadBlocks+0xcc>
 8010654:	f8db 0000 	ldr.w	r0, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 8010658:	f001 fe36 	bl	80122c8 <SDMMC_ReadFIFO>
 801065c:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 801065e:	0a00      	lsrs	r0, r0, #8
 8010660:	3704      	adds	r7, #4
          *tempbuff = (uint8_t)(data & 0xFFU);
 8010662:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010666:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010668:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 801066a:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 801066e:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010672:	f807 2c05 	strb.w	r2, [r7, #-5]
        for(count = 0U; count < 8U; count++)
 8010676:	454f      	cmp	r7, r9
 8010678:	d1ec      	bne.n	8010654 <HAL_SD_ReadBlocks+0xc8>
 801067a:	3420      	adds	r4, #32
        dataremaining -= 32U;
 801067c:	f1aa 0a20 	sub.w	sl, sl, #32
 8010680:	e7d1      	b.n	8010626 <HAL_SD_ReadBlocks+0x9a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010682:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 8010686:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801068a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801068e:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8010692:	4640      	mov	r0, r8
 8010694:	b007      	add	sp, #28
 8010696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801069a:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801069c:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801069e:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80106a2:	f001 feed 	bl	8012480 <SDMMC_CmdReadSingleBlock>
 80106a6:	e7b9      	b.n	801061c <HAL_SD_ReadBlocks+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80106a8:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 80106ac:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80106b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80106b4:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80106b6:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 80106ba:	b007      	add	sp, #28
 80106bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80106c0:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
}
 80106c4:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80106c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106ca:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 80106ce:	b007      	add	sp, #28
 80106d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106d4:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 80106d8:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106da:	4c39      	ldr	r4, [pc, #228]	; (80107c0 <HAL_SD_ReadBlocks+0x234>)
          hsd->Context = SD_CONTEXT_NONE;
 80106dc:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106de:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80106e0:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80106e4:	4318      	orrs	r0, r3
 80106e6:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80106ea:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80106ee:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
          return HAL_ERROR;
 80106f2:	e7ce      	b.n	8010692 <HAL_SD_ReadBlocks+0x106>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80106f4:	68c3      	ldr	r3, [r0, #12]
 80106f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106fa:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80106fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80106fe:	05db      	lsls	r3, r3, #23
 8010700:	d501      	bpl.n	8010706 <HAL_SD_ReadBlocks+0x17a>
 8010702:	2e01      	cmp	r6, #1
 8010704:	d82c      	bhi.n	8010760 <HAL_SD_ReadBlocks+0x1d4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010706:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010708:	f013 0308 	ands.w	r3, r3, #8
 801070c:	d141      	bne.n	8010792 <HAL_SD_ReadBlocks+0x206>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801070e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010710:	f012 0202 	ands.w	r2, r2, #2
 8010714:	d12f      	bne.n	8010776 <HAL_SD_ReadBlocks+0x1ea>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010716:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010718:	f013 0320 	ands.w	r3, r3, #32
 801071c:	d048      	beq.n	80107b0 <HAL_SD_ReadBlocks+0x224>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801071e:	4b28      	ldr	r3, [pc, #160]	; (80107c0 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 8010720:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010722:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010724:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8010728:	f043 0320 	orr.w	r3, r3, #32
 801072c:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010730:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010734:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 8010738:	e7ab      	b.n	8010692 <HAL_SD_ReadBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801073a:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 801073e:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010740:	481f      	ldr	r0, [pc, #124]	; (80107c0 <HAL_SD_ReadBlocks+0x234>)
        hsd->Context = SD_CONTEXT_NONE;
 8010742:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8010744:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010748:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 801074a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 801074e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010752:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010756:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801075a:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        return HAL_TIMEOUT;
 801075e:	e798      	b.n	8010692 <HAL_SD_ReadBlocks+0x106>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8010760:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8010764:	2b03      	cmp	r3, #3
 8010766:	d0ce      	beq.n	8010706 <HAL_SD_ReadBlocks+0x17a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010768:	f002 f91a 	bl	80129a0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 801076c:	2800      	cmp	r0, #0
 801076e:	d1b1      	bne.n	80106d4 <HAL_SD_ReadBlocks+0x148>
 8010770:	f8db 0000 	ldr.w	r0, [fp]
 8010774:	e7c7      	b.n	8010706 <HAL_SD_ReadBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010776:	4a12      	ldr	r2, [pc, #72]	; (80107c0 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 8010778:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801077a:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801077c:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 8010780:	f042 0202 	orr.w	r2, r2, #2
 8010784:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010788:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801078c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      return HAL_ERROR;
 8010790:	e77f      	b.n	8010692 <HAL_SD_ReadBlocks+0x106>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010792:	4b0b      	ldr	r3, [pc, #44]	; (80107c0 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 8010794:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8010796:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010798:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801079a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 801079e:	f043 0308 	orr.w	r3, r3, #8
 80107a2:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80107a6:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80107aa:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 80107ae:	e770      	b.n	8010692 <HAL_SD_ReadBlocks+0x106>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80107b0:	4904      	ldr	r1, [pc, #16]	; (80107c4 <HAL_SD_ReadBlocks+0x238>)
    hsd->State = HAL_SD_STATE_READY;
 80107b2:	2201      	movs	r2, #1
    return HAL_OK;
 80107b4:	4698      	mov	r8, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80107b6:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80107b8:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    return HAL_OK;
 80107bc:	e769      	b.n	8010692 <HAL_SD_ReadBlocks+0x106>
 80107be:	bf00      	nop
 80107c0:	1fe00fff 	.word	0x1fe00fff
 80107c4:	18000f3a 	.word	0x18000f3a

080107c8 <HAL_SD_WriteBlocks>:
{
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	460d      	mov	r5, r1
 80107ce:	b089      	sub	sp, #36	; 0x24
 80107d0:	4604      	mov	r4, r0
 80107d2:	4692      	mov	sl, r2
 80107d4:	461f      	mov	r7, r3
 80107d6:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80107da:	f7f9 feb7 	bl	800a54c <HAL_GetTick>
  if(NULL == pData)
 80107de:	2d00      	cmp	r5, #0
 80107e0:	d068      	beq.n	80108b4 <HAL_SD_WriteBlocks+0xec>
  if(hsd->State == HAL_SD_STATE_READY)
 80107e2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	fa5f f983 	uxtb.w	r9, r3
 80107ec:	d152      	bne.n	8010894 <HAL_SD_WriteBlocks+0xcc>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80107ee:	eb0a 0307 	add.w	r3, sl, r7
 80107f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80107f4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80107f6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80107f8:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80107fa:	d865      	bhi.n	80108c8 <HAL_SD_WriteBlocks+0x100>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80107fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 80107fe:	2203      	movs	r2, #3
 8010800:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8010802:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010804:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010806:	f04f 33ff 	mov.w	r3, #4294967295
    hsd->State = HAL_SD_STATE_BUSY;
 801080a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801080e:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8010812:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010814:	ea4f 2147 	mov.w	r1, r7, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010818:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801081a:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801081e:	9103      	str	r1, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010820:	a902      	add	r1, sp, #8
      add *= 512U;
 8010822:	bf18      	it	ne
 8010824:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8010828:	e9cd 2304 	strd	r2, r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801082c:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010830:	f001 fd6c 	bl	801230c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010834:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8010836:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010838:	68c3      	ldr	r3, [r0, #12]
 801083a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801083e:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8010840:	d932      	bls.n	80108a8 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8010842:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010844:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8010846:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010848:	f002 f806 	bl	8012858 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 801084c:	2800      	cmp	r0, #0
 801084e:	d143      	bne.n	80108d8 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8010850:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010854:	e004      	b.n	8010860 <HAL_SD_WriteBlocks+0x98>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010856:	f7f9 fe79 	bl	800a54c <HAL_GetTick>
 801085a:	1b80      	subs	r0, r0, r6
 801085c:	4540      	cmp	r0, r8
 801085e:	d267      	bcs.n	8010930 <HAL_SD_WriteBlocks+0x168>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010860:	6820      	ldr	r0, [r4, #0]
 8010862:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010864:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8010868:	d142      	bne.n	80108f0 <HAL_SD_WriteBlocks+0x128>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 801086a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801086c:	045a      	lsls	r2, r3, #17
 801086e:	d5f2      	bpl.n	8010856 <HAL_SD_WriteBlocks+0x8e>
 8010870:	f1bb 0f1f 	cmp.w	fp, #31
 8010874:	d9ef      	bls.n	8010856 <HAL_SD_WriteBlocks+0x8e>
 8010876:	f105 0a20 	add.w	sl, r5, #32
 801087a:	e000      	b.n	801087e <HAL_SD_WriteBlocks+0xb6>
 801087c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 801087e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010882:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010884:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010886:	f001 fd23 	bl	80122d0 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 801088a:	4555      	cmp	r5, sl
 801088c:	d1f6      	bne.n	801087c <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 801088e:	f1ab 0b20 	sub.w	fp, fp, #32
 8010892:	e7e0      	b.n	8010856 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8010896:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801089a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801089e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80108a0:	4648      	mov	r0, r9
 80108a2:	b009      	add	sp, #36	; 0x24
 80108a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80108a8:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80108aa:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80108ac:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80108ae:	f001 ff2f 	bl	8012710 <SDMMC_CmdWriteSingleBlock>
 80108b2:	e7cb      	b.n	801084c <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80108b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80108b6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80108ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80108be:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80108c0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80108c2:	b009      	add	sp, #36	; 0x24
 80108c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80108c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 80108ca:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80108cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80108d0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80108d2:	b009      	add	sp, #36	; 0x24
 80108d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108d8:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80108da:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108dc:	4d2e      	ldr	r5, [pc, #184]	; (8010998 <HAL_SD_WriteBlocks+0x1d0>)
          hsd->Context = SD_CONTEXT_NONE;
 80108de:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108e0:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80108e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80108e4:	4318      	orrs	r0, r3
 80108e6:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80108e8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80108ec:	6322      	str	r2, [r4, #48]	; 0x30
          return HAL_ERROR;
 80108ee:	e7d7      	b.n	80108a0 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80108f0:	68c3      	ldr	r3, [r0, #12]
 80108f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108f6:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80108f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80108fa:	05db      	lsls	r3, r3, #23
 80108fc:	d501      	bpl.n	8010902 <HAL_SD_WriteBlocks+0x13a>
 80108fe:	2f01      	cmp	r7, #1
 8010900:	d823      	bhi.n	801094a <HAL_SD_WriteBlocks+0x182>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010902:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010904:	f013 0308 	ands.w	r3, r3, #8
 8010908:	d133      	bne.n	8010972 <HAL_SD_WriteBlocks+0x1aa>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801090a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801090c:	f012 0202 	ands.w	r2, r2, #2
 8010910:	d124      	bne.n	801095c <HAL_SD_WriteBlocks+0x194>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8010912:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010914:	f013 0310 	ands.w	r3, r3, #16
 8010918:	d037      	beq.n	801098a <HAL_SD_WriteBlocks+0x1c2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801091a:	4b1f      	ldr	r3, [pc, #124]	; (8010998 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 801091c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801091e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010922:	f043 0310 	orr.w	r3, r3, #16
 8010926:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010928:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801092c:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 801092e:	e7b7      	b.n	80108a0 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010930:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8010932:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010934:	4818      	ldr	r0, [pc, #96]	; (8010998 <HAL_SD_WriteBlocks+0x1d0>)
        hsd->Context = SD_CONTEXT_NONE;
 8010936:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8010938:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801093c:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 801093e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010940:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010942:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010946:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8010948:	e7aa      	b.n	80108a0 <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 801094a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801094c:	2b03      	cmp	r3, #3
 801094e:	d0d8      	beq.n	8010902 <HAL_SD_WriteBlocks+0x13a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010950:	f002 f826 	bl	80129a0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010954:	2800      	cmp	r0, #0
 8010956:	d1bf      	bne.n	80108d8 <HAL_SD_WriteBlocks+0x110>
 8010958:	6820      	ldr	r0, [r4, #0]
 801095a:	e7d2      	b.n	8010902 <HAL_SD_WriteBlocks+0x13a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801095c:	4a0e      	ldr	r2, [pc, #56]	; (8010998 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 801095e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010960:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010962:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010964:	f042 0202 	orr.w	r2, r2, #2
 8010968:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801096a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801096e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010970:	e796      	b.n	80108a0 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010972:	4b09      	ldr	r3, [pc, #36]	; (8010998 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 8010974:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8010976:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010978:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801097a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801097c:	f043 0308 	orr.w	r3, r3, #8
 8010980:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010982:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010986:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010988:	e78a      	b.n	80108a0 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801098a:	4904      	ldr	r1, [pc, #16]	; (801099c <HAL_SD_WriteBlocks+0x1d4>)
    hsd->State = HAL_SD_STATE_READY;
 801098c:	2201      	movs	r2, #1
    return HAL_OK;
 801098e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010990:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010992:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8010996:	e783      	b.n	80108a0 <HAL_SD_WriteBlocks+0xd8>
 8010998:	1fe00fff 	.word	0x1fe00fff
 801099c:	18000f3a 	.word	0x18000f3a

080109a0 <HAL_SD_DeInit>:
  if(hsd == NULL)
 80109a0:	b198      	cbz	r0, 80109ca <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80109a2:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 80109a4:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80109a6:	2b02      	cmp	r3, #2
{
 80109a8:	b510      	push	{r4, lr}
 80109aa:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 80109ac:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80109b0:	d00d      	beq.n	80109ce <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80109b2:	6820      	ldr	r0, [r4, #0]
 80109b4:	f001 fc9a 	bl	80122ec <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 80109b8:	4620      	mov	r0, r4
 80109ba:	f7ff fde5 	bl	8010588 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80109be:	2300      	movs	r3, #0
 80109c0:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 80109c2:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 80109c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80109c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80109ca:	2001      	movs	r0, #1
}
 80109cc:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 80109ce:	2000      	movs	r0, #0
 80109d0:	f7f9 fd58 	bl	800a484 <HAL_SD_DriveTransceiver_1_8V_Callback>
 80109d4:	e7ed      	b.n	80109b2 <HAL_SD_DeInit+0x12>
 80109d6:	bf00      	nop

080109d8 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 80109d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109dc:	b096      	sub	sp, #88	; 0x58
 80109de:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 80109e0:	2240      	movs	r2, #64	; 0x40
 80109e2:	2100      	movs	r1, #0
 80109e4:	a806      	add	r0, sp, #24
 80109e6:	f010 f89d 	bl	8020b24 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 80109ea:	f7f9 fdaf 	bl	800a54c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80109ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80109f0:	b13b      	cbz	r3, 8010a02 <SD_UltraHighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80109f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109f6:	d00a      	beq.n	8010a0e <SD_UltraHighSpeed+0x36>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 80109f8:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 80109fa:	4628      	mov	r0, r5
 80109fc:	b016      	add	sp, #88	; 0x58
 80109fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010a02:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8010a06:	4628      	mov	r0, r5
 8010a08:	b016      	add	sp, #88	; 0x58
 8010a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	4606      	mov	r6, r0
 8010a12:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010a14:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 8010a16:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010a18:	f001 fc8e 	bl	8012338 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	d1eb      	bne.n	80109fa <SD_UltraHighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a22:	f04f 32ff 	mov.w	r2, #4294967295
 8010a26:	2340      	movs	r3, #64	; 0x40
 8010a28:	2060      	movs	r0, #96	; 0x60
 8010a2a:	2102      	movs	r1, #2
 8010a2c:	e9cd 2300 	strd	r2, r3, [sp]
 8010a30:	2200      	movs	r2, #0
 8010a32:	2301      	movs	r3, #1
 8010a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8010a38:	4669      	mov	r1, sp
 8010a3a:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8010a40:	f001 fc64 	bl	801230c <SDMMC_ConfigData>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d14a      	bne.n	8010ade <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8010a48:	4930      	ldr	r1, [pc, #192]	; (8010b0c <SD_UltraHighSpeed+0x134>)
 8010a4a:	6820      	ldr	r0, [r4, #0]
 8010a4c:	f002 fdfc 	bl	8013648 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010a50:	4605      	mov	r5, r0
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d1d1      	bne.n	80109fa <SD_UltraHighSpeed+0x22>
  uint32_t count, loop = 0 ;
 8010a56:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010a58:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8010a5c:	e004      	b.n	8010a68 <SD_UltraHighSpeed+0x90>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8010a5e:	f7f9 fd75 	bl	800a54c <HAL_GetTick>
 8010a62:	1b80      	subs	r0, r0, r6
 8010a64:	3001      	adds	r0, #1
 8010a66:	d03d      	beq.n	8010ae4 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010a68:	6820      	ldr	r0, [r4, #0]
 8010a6a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010a6c:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010a70:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010a72:	d112      	bne.n	8010a9a <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010a74:	0417      	lsls	r7, r2, #16
 8010a76:	d5f2      	bpl.n	8010a5e <SD_UltraHighSpeed+0x86>
 8010a78:	ab06      	add	r3, sp, #24
 8010a7a:	eb03 1749 	add.w	r7, r3, r9, lsl #5
 8010a7e:	ab0e      	add	r3, sp, #56	; 0x38
 8010a80:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8010a84:	e000      	b.n	8010a88 <SD_UltraHighSpeed+0xb0>
 8010a86:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8010a88:	f001 fc1e 	bl	80122c8 <SDMMC_ReadFIFO>
 8010a8c:	f847 0b04 	str.w	r0, [r7], #4
        for (count = 0U; count < 8U; count++)
 8010a90:	4547      	cmp	r7, r8
 8010a92:	d1f8      	bne.n	8010a86 <SD_UltraHighSpeed+0xae>
        loop ++;
 8010a94:	f109 0901 	add.w	r9, r9, #1
 8010a98:	e7e1      	b.n	8010a5e <SD_UltraHighSpeed+0x86>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010a9a:	0716      	lsls	r6, r2, #28
 8010a9c:	d429      	bmi.n	8010af2 <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010a9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010aa0:	0791      	lsls	r1, r2, #30
 8010aa2:	d42c      	bmi.n	8010afe <SD_UltraHighSpeed+0x126>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010aa4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010aa6:	0692      	lsls	r2, r2, #26
 8010aa8:	d42c      	bmi.n	8010b04 <SD_UltraHighSpeed+0x12c>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010aaa:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010aae:	4918      	ldr	r1, [pc, #96]	; (8010b10 <SD_UltraHighSpeed+0x138>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010ab0:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010ab2:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010ab4:	d520      	bpl.n	8010af8 <SD_UltraHighSpeed+0x120>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	f7f9 fce4 	bl	800a484 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010abc:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010abe:	4815      	ldr	r0, [pc, #84]	; (8010b14 <SD_UltraHighSpeed+0x13c>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010ac0:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010ac2:	4c15      	ldr	r4, [pc, #84]	; (8010b18 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010ac4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010ac8:	4914      	ldr	r1, [pc, #80]	; (8010b1c <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010ace:	42a2      	cmp	r2, r4
 8010ad0:	bf18      	it	ne
 8010ad2:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010ad4:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010ad6:	f001 fb91 	bl	80121fc <DelayBlock_Enable>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d08c      	beq.n	80109f8 <SD_UltraHighSpeed+0x20>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 8010ade:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8010ae2:	e78a      	b.n	80109fa <SD_UltraHighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010ae4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8010ae8:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010aea:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010aec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8010af0:	e783      	b.n	80109fa <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010af2:	2208      	movs	r2, #8
 8010af4:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8010af6:	e780      	b.n	80109fa <SD_UltraHighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8010af8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010afc:	e77d      	b.n	80109fa <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010afe:	2502      	movs	r5, #2
 8010b00:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8010b02:	e77a      	b.n	80109fa <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010b04:	2520      	movs	r5, #32
 8010b06:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8010b08:	e777      	b.n	80109fa <SD_UltraHighSpeed+0x22>
 8010b0a:	bf00      	nop
 8010b0c:	80ff1f03 	.word	0x80ff1f03
 8010b10:	18000f3a 	.word	0x18000f3a
 8010b14:	52008000 	.word	0x52008000
 8010b18:	52007000 	.word	0x52007000
 8010b1c:	48022800 	.word	0x48022800

08010b20 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010b20:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 8010b22:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010b24:	0f90      	lsrs	r0, r2, #30
{
 8010b26:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010b28:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010b2a:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010b2e:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010b32:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010b36:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010b3a:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010b3c:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010b3e:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010b40:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010b42:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010b44:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010b46:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010b48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010b4a:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010b4c:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010b50:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010b54:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010b58:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010b5a:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010b5e:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010b60:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010b64:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010b66:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010b68:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010b6a:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010b6c:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8010b6e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010b70:	2800      	cmp	r0, #0
 8010b72:	d16e      	bne.n	8010c52 <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010b74:	f640 74fc 	movw	r4, #4092	; 0xffc
 8010b78:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010b7a:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 8010b7c:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010b80:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010b84:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010b88:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010b8c:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010b90:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010b94:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010b98:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010b9a:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010b9e:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010ba2:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010ba6:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010ba8:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010baa:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010bac:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010bae:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010bb0:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010bb2:	f004 0407 	and.w	r4, r4, #7
 8010bb6:	3402      	adds	r4, #2
 8010bb8:	40a2      	lsls	r2, r4
 8010bba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010bbc:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8010bbe:	659e      	str	r6, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010bc0:	f004 040f 	and.w	r4, r4, #15
 8010bc4:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010bc6:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010bc8:	651d      	str	r5, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010bca:	fb02 f204 	mul.w	r2, r2, r4
 8010bce:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010bd0:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010bd4:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010bd8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 8010bdc:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010bde:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 8010be0:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010be2:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8010be4:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010be6:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bea:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010bec:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010bf0:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010bf4:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010bf8:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010bfa:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010bfe:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010c00:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010c04:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010c06:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010c0a:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010c0c:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010c10:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010c14:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8010c18:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010c1c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010c20:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010c24:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010c28:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010c2c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010c30:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010c34:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010c38:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010c3c:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010c40:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010c44:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010c48:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8010c4c:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 8010c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010c52:	2801      	cmp	r0, #1
 8010c54:	d110      	bne.n	8010c78 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010c56:	0412      	lsls	r2, r2, #16
 8010c58:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 8010c5a:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010c5e:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8010c62:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8010c66:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010c68:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8010c6a:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010c6c:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010c6e:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010c70:	0292      	lsls	r2, r2, #10
 8010c72:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010c74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010c76:	e7ab      	b.n	8010bd0 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c78:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8010c7a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c7c:	4c04      	ldr	r4, [pc, #16]	; (8010c90 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 8010c7e:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c80:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010c88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010c8a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8010c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c90:	1fe00fff 	.word	0x1fe00fff

08010c94 <HAL_SD_InitCard>:
{
 8010c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8010c98:	2200      	movs	r2, #0
 8010c9a:	2300      	movs	r3, #0
{
 8010c9c:	b098      	sub	sp, #96	; 0x60
 8010c9e:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010ca0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8010ca4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ca8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010cac:	f7ff f9d8 	bl	8010060 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8010cb0:	4ab0      	ldr	r2, [pc, #704]	; (8010f74 <HAL_SD_InitCard+0x2e0>)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010cb2:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8010cb4:	0a05      	lsrs	r5, r0, #8
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010cb6:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8010cb8:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8010cba:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010cbe:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8010cc0:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010cc4:	d103      	bne.n	8010cce <HAL_SD_InitCard+0x3a>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	f043 0310 	orr.w	r3, r3, #16
 8010ccc:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8010cce:	aa09      	add	r2, sp, #36	; 0x24
 8010cd0:	950a      	str	r5, [sp, #40]	; 0x28
 8010cd2:	ab06      	add	r3, sp, #24
 8010cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8010cd6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010cda:	4638      	mov	r0, r7
 8010cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010cde:	f001 fad9 	bl	8012294 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8010ce2:	6820      	ldr	r0, [r4, #0]
 8010ce4:	f001 fafa 	bl	80122dc <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 8010ce8:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8010cec:	ea4f 0045 	mov.w	r0, r5, lsl #1
  if(sdmmc_clk != 0U)
 8010cf0:	d31b      	bcc.n	8010d2a <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8010cf2:	4ba1      	ldr	r3, [pc, #644]	; (8010f78 <HAL_SD_InitCard+0x2e4>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8010cf4:	fbb6 f0f0 	udiv	r0, r6, r0
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8010cf8:	fbb3 f0f0 	udiv	r0, r3, r0
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	f7f9 fc2b 	bl	800a558 <HAL_Delay>
  __IO uint32_t count = 0U;
 8010d02:	2300      	movs	r3, #0
 8010d04:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 8010d06:	f7f9 fc21 	bl	800a54c <HAL_GetTick>
 8010d0a:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010d0c:	6820      	ldr	r0, [r4, #0]
 8010d0e:	f001 fff5 	bl	8012cfc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010d12:	4605      	mov	r5, r0
 8010d14:	b168      	cbz	r0, 8010d32 <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 8010d16:	2601      	movs	r6, #1
 8010d18:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010d1c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010d1e:	4328      	orrs	r0, r5
 8010d20:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8010d22:	4630      	mov	r0, r6
 8010d24:	b018      	add	sp, #96	; 0x60
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8010d2a:	2002      	movs	r0, #2
 8010d2c:	f7f9 fc14 	bl	800a558 <HAL_Delay>
 8010d30:	e7e7      	b.n	8010d02 <HAL_SD_InitCard+0x6e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010d32:	6820      	ldr	r0, [r4, #0]
 8010d34:	f002 f80e 	bl	8012d54 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	f040 80c2 	bne.w	8010ec2 <HAL_SD_InitCard+0x22e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010d42:	2100      	movs	r1, #0
 8010d44:	6820      	ldr	r0, [r4, #0]
 8010d46:	f002 f843 	bl	8012dd0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d4a:	bb10      	cbnz	r0, 8010d92 <HAL_SD_InitCard+0xfe>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010d4c:	9b05      	ldr	r3, [sp, #20]
 8010d4e:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8010d52:	42bb      	cmp	r3, r7
 8010d54:	f200 80c5 	bhi.w	8010ee2 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010d58:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8010f80 <HAL_SD_InitCard+0x2ec>
 8010d5c:	e00b      	b.n	8010d76 <HAL_SD_InitCard+0xe2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010d5e:	6820      	ldr	r0, [r4, #0]
 8010d60:	f001 fad0 	bl	8012304 <SDMMC_GetResponse>
    count++;
 8010d64:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010d66:	2800      	cmp	r0, #0
    count++;
 8010d68:	f103 0301 	add.w	r3, r3, #1
 8010d6c:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010d6e:	9b05      	ldr	r3, [sp, #20]
 8010d70:	db12      	blt.n	8010d98 <HAL_SD_InitCard+0x104>
 8010d72:	42bb      	cmp	r3, r7
 8010d74:	d810      	bhi.n	8010d98 <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010d76:	2100      	movs	r1, #0
 8010d78:	6820      	ldr	r0, [r4, #0]
 8010d7a:	f002 f829 	bl	8012dd0 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010d7e:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d80:	4605      	mov	r5, r0
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d1c7      	bne.n	8010d16 <HAL_SD_InitCard+0x82>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010d86:	6820      	ldr	r0, [r4, #0]
 8010d88:	f002 f8c6 	bl	8012f18 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d8c:	4601      	mov	r1, r0
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d0e5      	beq.n	8010d5e <HAL_SD_InitCard+0xca>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010d92:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010d96:	e7be      	b.n	8010d16 <HAL_SD_InitCard+0x82>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010d98:	9a05      	ldr	r2, [sp, #20]
 8010d9a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	f200 80a3 	bhi.w	8010eea <HAL_SD_InitCard+0x256>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010da4:	0045      	lsls	r5, r0, #1
 8010da6:	d505      	bpl.n	8010db4 <HAL_SD_InitCard+0x120>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010da8:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010daa:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010dac:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010dae:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010db0:	f000 809e 	beq.w	8010ef0 <HAL_SD_InitCard+0x25c>
 8010db4:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8010db6:	2301      	movs	r3, #1
 8010db8:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010dbc:	f001 fa9e 	bl	80122fc <SDMMC_GetPowerState>
 8010dc0:	b348      	cbz	r0, 8010e16 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010dc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010dc4:	2b03      	cmp	r3, #3
 8010dc6:	d132      	bne.n	8010e2e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010dc8:	2104      	movs	r1, #4
 8010dca:	6820      	ldr	r0, [r4, #0]
 8010dcc:	f001 fa9a 	bl	8012304 <SDMMC_GetResponse>
 8010dd0:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010dd2:	a90d      	add	r1, sp, #52	; 0x34
 8010dd4:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010dd6:	0d1b      	lsrs	r3, r3, #20
 8010dd8:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010dda:	f7ff fea1 	bl	8010b20 <HAL_SD_GetCardCSD>
 8010dde:	4606      	mov	r6, r0
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d17b      	bne.n	8010edc <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010de4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010de6:	4603      	mov	r3, r0
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	0412      	lsls	r2, r2, #16
 8010dec:	f001 fee2 	bl	8012bb4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010df0:	b998      	cbnz	r0, 8010e1a <HAL_SD_InitCard+0x186>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010df6:	6820      	ldr	r0, [r4, #0]
 8010df8:	f001 fa9e 	bl	8012338 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d090      	beq.n	8010d22 <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e00:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8010e02:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e04:	495d      	ldr	r1, [pc, #372]	; (8010f7c <HAL_SD_InitCard+0x2e8>)
    return HAL_ERROR;
 8010e06:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e08:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e0c:	4318      	orrs	r0, r3
 8010e0e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010e10:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8010e14:	e785      	b.n	8010d22 <HAL_SD_InitCard+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010e16:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8010e1a:	2601      	movs	r6, #1
 8010e1c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010e20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010e22:	4308      	orrs	r0, r1
 8010e24:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8010e26:	4630      	mov	r0, r6
 8010e28:	b018      	add	sp, #96	; 0x60
 8010e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010e2e:	6820      	ldr	r0, [r4, #0]
 8010e30:	f002 f9f4 	bl	801321c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d1f0      	bne.n	8010e1a <HAL_SD_InitCard+0x186>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010e38:	4601      	mov	r1, r0
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	f001 fa62 	bl	8012304 <SDMMC_GetResponse>
 8010e40:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010e42:	2104      	movs	r1, #4
 8010e44:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010e46:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010e48:	f001 fa5c 	bl	8012304 <SDMMC_GetResponse>
 8010e4c:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010e4e:	2108      	movs	r1, #8
 8010e50:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010e52:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010e54:	f001 fa56 	bl	8012304 <SDMMC_GetResponse>
 8010e58:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010e5a:	210c      	movs	r1, #12
 8010e5c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010e5e:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010e60:	f001 fa50 	bl	8012304 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010e66:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010e68:	2b03      	cmp	r3, #3
 8010e6a:	d0ad      	beq.n	8010dc8 <HAL_SD_InitCard+0x134>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010e6c:	f10d 0112 	add.w	r1, sp, #18
 8010e70:	6820      	ldr	r0, [r4, #0]
 8010e72:	f002 fa49 	bl	8013308 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010e76:	2800      	cmp	r0, #0
 8010e78:	d1cf      	bne.n	8010e1a <HAL_SD_InitCard+0x186>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8010e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010e7c:	2b03      	cmp	r3, #3
 8010e7e:	d0a3      	beq.n	8010dc8 <HAL_SD_InitCard+0x134>
    hsd->SdCard.RelCardAdd = sd_rca;
 8010e80:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010e84:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8010e86:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010e88:	0409      	lsls	r1, r1, #16
 8010e8a:	f002 fa03 	bl	8013294 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d1c3      	bne.n	8010e1a <HAL_SD_InitCard+0x186>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010e92:	4601      	mov	r1, r0
 8010e94:	6820      	ldr	r0, [r4, #0]
 8010e96:	f001 fa35 	bl	8012304 <SDMMC_GetResponse>
 8010e9a:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010e9c:	2104      	movs	r1, #4
 8010e9e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010ea0:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010ea2:	f001 fa2f 	bl	8012304 <SDMMC_GetResponse>
 8010ea6:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010ea8:	2108      	movs	r1, #8
 8010eaa:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010eac:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010eae:	f001 fa29 	bl	8012304 <SDMMC_GetResponse>
 8010eb2:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010eb4:	210c      	movs	r1, #12
 8010eb6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010eb8:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010eba:	f001 fa23 	bl	8012304 <SDMMC_GetResponse>
 8010ebe:	66e0      	str	r0, [r4, #108]	; 0x6c
 8010ec0:	e782      	b.n	8010dc8 <HAL_SD_InitCard+0x134>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010ec2:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010ec4:	6820      	ldr	r0, [r4, #0]
 8010ec6:	f001 ff19 	bl	8012cfc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010eca:	4605      	mov	r5, r0
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	f47f af22 	bne.w	8010d16 <HAL_SD_InitCard+0x82>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8010ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	f47f af39 	bne.w	8010d4c <HAL_SD_InitCard+0xb8>
 8010eda:	e732      	b.n	8010d42 <HAL_SD_InitCard+0xae>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010edc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010ee0:	e79b      	b.n	8010e1a <HAL_SD_InitCard+0x186>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010ee2:	9b05      	ldr	r3, [sp, #20]
 8010ee4:	42bb      	cmp	r3, r7
 8010ee6:	f67f af65 	bls.w	8010db4 <HAL_SD_InitCard+0x120>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010eea:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8010eee:	e712      	b.n	8010d16 <HAL_SD_InitCard+0x82>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8010ef0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8010ef4:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8010ef6:	f43f af5e 	beq.w	8010db6 <HAL_SD_InitCard+0x122>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8010efa:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8010efc:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8010f00:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8010f04:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8010f06:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8010f08:	f002 fc42 	bl	8013790 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	b128      	cbz	r0, 8010f1c <HAL_SD_InitCard+0x288>
 8010f10:	e701      	b.n	8010d16 <HAL_SD_InitCard+0x82>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010f12:	f7f9 fb1b 	bl	800a54c <HAL_GetTick>
 8010f16:	1b80      	subs	r0, r0, r6
 8010f18:	3001      	adds	r0, #1
 8010f1a:	d028      	beq.n	8010f6e <HAL_SD_InitCard+0x2da>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8010f1c:	6823      	ldr	r3, [r4, #0]
 8010f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f20:	0150      	lsls	r0, r2, #5
 8010f22:	d5f6      	bpl.n	8010f12 <HAL_SD_InitCard+0x27e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8010f24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8010f28:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8010f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2c:	02d9      	lsls	r1, r3, #11
 8010f2e:	f57f af30 	bpl.w	8010d92 <HAL_SD_InitCard+0xfe>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8010f32:	2001      	movs	r0, #1
 8010f34:	f7f9 faa6 	bl	800a484 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8010f38:	6820      	ldr	r0, [r4, #0]
 8010f3a:	6803      	ldr	r3, [r0, #0]
 8010f3c:	f043 0304 	orr.w	r3, r3, #4
 8010f40:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8010f42:	e005      	b.n	8010f50 <HAL_SD_InitCard+0x2bc>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010f44:	f7f9 fb02 	bl	800a54c <HAL_GetTick>
 8010f48:	1b80      	subs	r0, r0, r6
 8010f4a:	3001      	adds	r0, #1
 8010f4c:	d00f      	beq.n	8010f6e <HAL_SD_InitCard+0x2da>
 8010f4e:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8010f50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f52:	019a      	lsls	r2, r3, #6
 8010f54:	d5f6      	bpl.n	8010f44 <HAL_SD_InitCard+0x2b0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8010f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010f5a:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8010f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f5e:	02db      	lsls	r3, r3, #11
 8010f60:	d4c3      	bmi.n	8010eea <HAL_SD_InitCard+0x256>
          hsd->Instance->POWER = 0x13U;
 8010f62:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8010f64:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 8010f68:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8010f6a:	6383      	str	r3, [r0, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 8010f6c:	e723      	b.n	8010db6 <HAL_SD_InitCard+0x122>
            return HAL_SD_ERROR_TIMEOUT;
 8010f6e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8010f72:	e6d0      	b.n	8010d16 <HAL_SD_InitCard+0x82>
 8010f74:	014f8b59 	.word	0x014f8b59
 8010f78:	00012110 	.word	0x00012110
 8010f7c:	1fe00fff 	.word	0x1fe00fff
 8010f80:	c1100000 	.word	0xc1100000

08010f84 <HAL_SD_GetCardStatus>:
{
 8010f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f88:	4604      	mov	r4, r0
 8010f8a:	b097      	sub	sp, #92	; 0x5c
 8010f8c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8010f8e:	f7f9 fadd 	bl	800a54c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010f92:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8010f94:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010f96:	6820      	ldr	r0, [r4, #0]
 8010f98:	f001 f9b4 	bl	8012304 <SDMMC_GetResponse>
 8010f9c:	0182      	lsls	r2, r0, #6
 8010f9e:	d45b      	bmi.n	8011058 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010fa0:	2140      	movs	r1, #64	; 0x40
 8010fa2:	6820      	ldr	r0, [r4, #0]
 8010fa4:	f001 f9c8 	bl	8012338 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010fa8:	4603      	mov	r3, r0
 8010faa:	b1e0      	cbz	r0, 8010fe6 <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010fac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010fae:	63a2      	str	r2, [r4, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 8010fb0:	6820      	ldr	r0, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fb2:	4a5a      	ldr	r2, [pc, #360]	; (801111c <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 8010fb4:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fb6:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8010fb8:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8010fba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010fc0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010fc8:	f001 f9b6 	bl	8012338 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010fcc:	b138      	cbz	r0, 8010fde <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8010fce:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fd0:	6822      	ldr	r2, [r4, #0]
 8010fd2:	4952      	ldr	r1, [pc, #328]	; (801111c <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 8010fd4:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fd6:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010fd8:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010fda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8010fde:	4630      	mov	r0, r6
 8010fe0:	b017      	add	sp, #92	; 0x5c
 8010fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010fe6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010fe8:	6820      	ldr	r0, [r4, #0]
 8010fea:	0409      	lsls	r1, r1, #16
 8010fec:	f001 fef0 	bl	8012dd0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d1da      	bne.n	8010fac <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8010ffa:	2340      	movs	r3, #64	; 0x40
 8010ffc:	2060      	movs	r0, #96	; 0x60
 8010ffe:	2102      	movs	r1, #2
 8011000:	e9cd 2300 	strd	r2, r3, [sp]
 8011004:	2301      	movs	r3, #1
 8011006:	2200      	movs	r2, #0
 8011008:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801100c:	4669      	mov	r1, sp
 801100e:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011010:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011014:	f001 f97a 	bl	801230c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011018:	6820      	ldr	r0, [r4, #0]
 801101a:	f002 fa6f 	bl	80134fc <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 801101e:	4603      	mov	r3, r0
 8011020:	2800      	cmp	r0, #0
 8011022:	d1c3      	bne.n	8010fac <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 8011024:	af06      	add	r7, sp, #24
 8011026:	e004      	b.n	8011032 <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011028:	f7f9 fa90 	bl	800a54c <HAL_GetTick>
 801102c:	1b80      	subs	r0, r0, r6
 801102e:	3001      	adds	r0, #1
 8011030:	d016      	beq.n	8011060 <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011032:	6820      	ldr	r0, [r4, #0]
 8011034:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011036:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801103a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801103c:	d113      	bne.n	8011066 <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801103e:	041b      	lsls	r3, r3, #16
 8011040:	d5f2      	bpl.n	8011028 <HAL_SD_GetCardStatus+0xa4>
 8011042:	f107 0820 	add.w	r8, r7, #32
 8011046:	e000      	b.n	801104a <HAL_SD_GetCardStatus+0xc6>
 8011048:	6820      	ldr	r0, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 801104a:	f001 f93d 	bl	80122c8 <SDMMC_ReadFIFO>
 801104e:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8011052:	4547      	cmp	r7, r8
 8011054:	d1f8      	bne.n	8011048 <HAL_SD_GetCardStatus+0xc4>
 8011056:	e7e7      	b.n	8011028 <HAL_SD_GetCardStatus+0xa4>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011058:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801105a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801105e:	e7a8      	b.n	8010fb2 <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 8011060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011064:	e7a4      	b.n	8010fb0 <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011066:	0719      	lsls	r1, r3, #28
 8011068:	d451      	bmi.n	801110e <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801106a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801106c:	079a      	lsls	r2, r3, #30
 801106e:	d450      	bmi.n	8011112 <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011070:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011072:	069b      	lsls	r3, r3, #26
 8011074:	d50a      	bpl.n	801108c <HAL_SD_GetCardStatus+0x108>
 8011076:	e04e      	b.n	8011116 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011078:	f001 f926 	bl	80122c8 <SDMMC_ReadFIFO>
 801107c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011080:	f7f9 fa64 	bl	800a54c <HAL_GetTick>
 8011084:	1b80      	subs	r0, r0, r6
 8011086:	3001      	adds	r0, #1
 8011088:	d0ea      	beq.n	8011060 <HAL_SD_GetCardStatus+0xdc>
 801108a:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801108c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801108e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8011092:	d1f1      	bne.n	8011078 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8011094:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8011096:	461e      	mov	r6, r3
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011098:	9908      	ldr	r1, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801109a:	0a3a      	lsrs	r2, r7, #8
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801109c:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80110a0:	f3c7 1881 	ubfx	r8, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80110a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80110a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80110aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80110ae:	fa5f f983 	uxtb.w	r9, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80110b2:	ea42 6217 	orr.w	r2, r2, r7, lsr #24
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80110b6:	4f1a      	ldr	r7, [pc, #104]	; (8011120 <HAL_SD_GetCardStatus+0x19c>)
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80110b8:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80110bc:	6387      	str	r7, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80110be:	b292      	uxth	r2, r2
 80110c0:	9f07      	ldr	r7, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80110c2:	ea4c 0c09 	orr.w	ip, ip, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80110c6:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80110ca:	ba3f      	rev	r7, r7
 80110cc:	f885 e001 	strb.w	lr, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80110d0:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80110d2:	fa5f fe81 	uxtb.w	lr, r1
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80110d6:	606f      	str	r7, [r5, #4]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80110d8:	f3c1 5203 	ubfx	r2, r1, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80110dc:	f3c1 2707 	ubfx	r7, r1, #8, #8
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80110e0:	f885 e008 	strb.w	lr, [r5, #8]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80110e4:	f3c3 1103 	ubfx	r1, r3, #4, #4
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80110e8:	f3c3 2e85 	ubfx	lr, r3, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80110ec:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80110ee:	f3c3 2701 	ubfx	r7, r3, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80110f2:	72aa      	strb	r2, [r5, #10]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80110f4:	f003 030f 	and.w	r3, r3, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80110f8:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80110fc:	f8a5 c00c 	strh.w	ip, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8011100:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8011104:	73ef      	strb	r7, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8011106:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8011108:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801110a:	74aa      	strb	r2, [r5, #18]
 801110c:	e75a      	b.n	8010fc4 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801110e:	2308      	movs	r3, #8
 8011110:	e74f      	b.n	8010fb2 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011112:	2302      	movs	r3, #2
 8011114:	e74d      	b.n	8010fb2 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 8011116:	2320      	movs	r3, #32
 8011118:	e74b      	b.n	8010fb2 <HAL_SD_GetCardStatus+0x2e>
 801111a:	bf00      	nop
 801111c:	1fe00fff 	.word	0x1fe00fff
 8011120:	18000f3a 	.word	0x18000f3a

08011124 <HAL_SD_GetCardInfo>:
{
 8011124:	4603      	mov	r3, r0
}
 8011126:	2000      	movs	r0, #0
{
 8011128:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801112a:	e9d3 ec0f 	ldrd	lr, ip, [r3, #60]	; 0x3c
 801112e:	e9d3 7611 	ldrd	r7, r6, [r3, #68]	; 0x44
 8011132:	e9d3 5413 	ldrd	r5, r4, [r3, #76]	; 0x4c
 8011136:	e9d3 2315 	ldrd	r2, r3, [r3, #84]	; 0x54
 801113a:	e9c1 ec00 	strd	lr, ip, [r1]
 801113e:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8011142:	e9c1 5404 	strd	r5, r4, [r1, #16]
 8011146:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 801114a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801114c <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 801114c:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 801114e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011150:	4293      	cmp	r3, r2
{
 8011152:	b530      	push	{r4, r5, lr}
 8011154:	4604      	mov	r4, r0
 8011156:	b08b      	sub	sp, #44	; 0x2c
 8011158:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 801115a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 801115e:	d025      	beq.n	80111ac <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8011160:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8011164:	d022      	beq.n	80111ac <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8011166:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 801116a:	d064      	beq.n	8011236 <HAL_SD_ConfigWideBusOperation+0xea>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801116c:	2900      	cmp	r1, #0
 801116e:	d043      	beq.n	80111f8 <HAL_SD_ConfigWideBusOperation+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011170:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011176:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801117a:	b9f3      	cbnz	r3, 80111ba <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.BusWide             = WideMode;
 801117c:	9506      	str	r5, [sp, #24]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801117e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011182:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8011186:	2b03      	cmp	r3, #3
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011188:	9207      	str	r2, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801118a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801118e:	d92a      	bls.n	80111e6 <HAL_SD_ConfigWideBusOperation+0x9a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8011190:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8011192:	aa0a      	add	r2, sp, #40	; 0x28
 8011194:	ab04      	add	r3, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8011196:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8011198:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 801119c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80111a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80111a2:	6820      	ldr	r0, [r4, #0]
 80111a4:	f001 f876 	bl	8012294 <SDMMC_Init>
 80111a8:	6820      	ldr	r0, [r4, #0]
 80111aa:	e00a      	b.n	80111c2 <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80111ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80111ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111b2:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80111b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d0e0      	beq.n	801117c <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111ba:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 80111bc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111be:	4b35      	ldr	r3, [pc, #212]	; (8011294 <HAL_SD_ConfigWideBusOperation+0x148>)
 80111c0:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80111c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80111c6:	f001 f8b7 	bl	8012338 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80111ca:	b130      	cbz	r0, 80111da <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111cc:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80111ce:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111d0:	4a30      	ldr	r2, [pc, #192]	; (8011294 <HAL_SD_ConfigWideBusOperation+0x148>)
 80111d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80111d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80111d6:	4318      	orrs	r0, r3
 80111d8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80111da:	2301      	movs	r3, #1
}
 80111dc:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80111de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80111e2:	b00b      	add	sp, #44	; 0x2c
 80111e4:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80111e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80111e8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80111ec:	d0d0      	beq.n	8011190 <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80111ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80111f2:	d040      	beq.n	8011276 <HAL_SD_ConfigWideBusOperation+0x12a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80111f4:	2304      	movs	r3, #4
 80111f6:	e7cb      	b.n	8011190 <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0UL, 0UL};
 80111f8:	2200      	movs	r2, #0
 80111fa:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80111fc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80111fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011202:	f001 f87f 	bl	8012304 <SDMMC_GetResponse>
 8011206:	0182      	lsls	r2, r0, #6
 8011208:	d438      	bmi.n	801127c <HAL_SD_ConfigWideBusOperation+0x130>
  errorstate = SD_FindSCR(hsd, scr);
 801120a:	a904      	add	r1, sp, #16
 801120c:	4620      	mov	r0, r4
 801120e:	f7ff f8c7 	bl	80103a0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011212:	b960      	cbnz	r0, 801122e <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011214:	9b05      	ldr	r3, [sp, #20]
 8011216:	03db      	lsls	r3, r3, #15
 8011218:	d536      	bpl.n	8011288 <HAL_SD_ConfigWideBusOperation+0x13c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801121a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801121c:	6820      	ldr	r0, [r4, #0]
 801121e:	0409      	lsls	r1, r1, #16
 8011220:	f001 fdd6 	bl	8012dd0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011224:	b918      	cbnz	r0, 801122e <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011226:	4601      	mov	r1, r0
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	f001 fead 	bl	8012f88 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 801122e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011230:	4308      	orrs	r0, r1
 8011232:	63a0      	str	r0, [r4, #56]	; 0x38
 8011234:	e7be      	b.n	80111b4 <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0UL, 0UL};
 8011236:	2200      	movs	r2, #0
 8011238:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801123a:	2100      	movs	r1, #0
 801123c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 801123e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011242:	f001 f85f 	bl	8012304 <SDMMC_GetResponse>
 8011246:	0180      	lsls	r0, r0, #6
 8011248:	d41b      	bmi.n	8011282 <HAL_SD_ConfigWideBusOperation+0x136>
  errorstate = SD_FindSCR(hsd, scr);
 801124a:	a904      	add	r1, sp, #16
 801124c:	4620      	mov	r0, r4
 801124e:	f7ff f8a7 	bl	80103a0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011252:	b960      	cbnz	r0, 801126e <HAL_SD_ConfigWideBusOperation+0x122>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011254:	9b05      	ldr	r3, [sp, #20]
 8011256:	0359      	lsls	r1, r3, #13
 8011258:	d519      	bpl.n	801128e <HAL_SD_ConfigWideBusOperation+0x142>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801125a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801125c:	6820      	ldr	r0, [r4, #0]
 801125e:	0409      	lsls	r1, r1, #16
 8011260:	f001 fdb6 	bl	8012dd0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011264:	b918      	cbnz	r0, 801126e <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011266:	2102      	movs	r1, #2
 8011268:	6820      	ldr	r0, [r4, #0]
 801126a:	f001 fe8d 	bl	8012f88 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 801126e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011270:	4318      	orrs	r0, r3
 8011272:	63a0      	str	r0, [r4, #56]	; 0x38
 8011274:	e79e      	b.n	80111b4 <HAL_SD_ConfigWideBusOperation+0x68>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8011276:	2302      	movs	r3, #2
 8011278:	9308      	str	r3, [sp, #32]
 801127a:	e78a      	b.n	8011192 <HAL_SD_ConfigWideBusOperation+0x46>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801127c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011280:	e7d5      	b.n	801122e <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011282:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011286:	e7f2      	b.n	801126e <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011288:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801128c:	e7cf      	b.n	801122e <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801128e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011292:	e7ec      	b.n	801126e <HAL_SD_ConfigWideBusOperation+0x122>
 8011294:	1fe00fff 	.word	0x1fe00fff

08011298 <HAL_SD_Init>:
{
 8011298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801129a:	b087      	sub	sp, #28
  if(hsd == NULL)
 801129c:	b1a0      	cbz	r0, 80112c8 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 801129e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80112a2:	4604      	mov	r4, r0
 80112a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80112a8:	b93b      	cbnz	r3, 80112ba <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80112aa:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 80112ac:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80112ae:	b90b      	cbnz	r3, 80112b4 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80112b0:	2302      	movs	r3, #2
 80112b2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80112b4:	4620      	mov	r0, r4
 80112b6:	f7ff f965 	bl	8010584 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80112ba:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80112bc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80112be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80112c2:	f7ff fce7 	bl	8010c94 <HAL_SD_InitCard>
 80112c6:	b118      	cbz	r0, 80112d0 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 80112c8:	2601      	movs	r6, #1
}
 80112ca:	4630      	mov	r0, r6
 80112cc:	b007      	add	sp, #28
 80112ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80112d0:	a901      	add	r1, sp, #4
 80112d2:	4620      	mov	r0, r4
 80112d4:	f7ff fe56 	bl	8010f84 <HAL_SD_GetCardStatus>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d1f5      	bne.n	80112c8 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80112dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80112de:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80112e2:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80112e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80112e8:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 80112ea:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80112ec:	d024      	beq.n	8011338 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80112ee:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80112f0:	68e1      	ldr	r1, [r4, #12]
 80112f2:	4620      	mov	r0, r4
 80112f4:	f7ff ff2a 	bl	801114c <HAL_SD_ConfigWideBusOperation>
 80112f8:	4606      	mov	r6, r0
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d1e4      	bne.n	80112c8 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 80112fe:	f7f9 f925 	bl	800a54c <HAL_GetTick>
 8011302:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011304:	e00c      	b.n	8011320 <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011306:	6820      	ldr	r0, [r4, #0]
 8011308:	4629      	mov	r1, r5
 801130a:	f000 fffb 	bl	8012304 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 801130e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011312:	2804      	cmp	r0, #4
 8011314:	d018      	beq.n	8011348 <HAL_SD_Init+0xb0>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8011316:	f7f9 f919 	bl	800a54c <HAL_GetTick>
 801131a:	1bc3      	subs	r3, r0, r7
 801131c:	3301      	adds	r3, #1
 801131e:	d019      	beq.n	8011354 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011320:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	0409      	lsls	r1, r1, #16
 8011326:	f002 f845 	bl	80133b4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 801132a:	4605      	mov	r5, r0
 801132c:	2800      	cmp	r0, #0
 801132e:	d0ea      	beq.n	8011306 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 8011330:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011332:	4301      	orrs	r1, r0
 8011334:	63a1      	str	r1, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8011336:	e7ee      	b.n	8011316 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011338:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801133a:	bf14      	ite	ne
 801133c:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8011340:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8011344:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011346:	e7d3      	b.n	80112f0 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8011348:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801134a:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 801134c:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 801134e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8011352:	e7ba      	b.n	80112ca <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011354:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8011358:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 801135a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801135c:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801135e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8011362:	e7b2      	b.n	80112ca <HAL_SD_Init+0x32>

08011364 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011364:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8011366:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011368:	2b02      	cmp	r3, #2
{
 801136a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801136e:	4604      	mov	r4, r0
 8011370:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 8011372:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011376:	d043      	beq.n	8011400 <HAL_SD_ConfigSpeedBusOperation+0x9c>
    switch (SpeedMode)
 8011378:	2901      	cmp	r1, #1
 801137a:	d015      	beq.n	80113a8 <HAL_SD_ConfigSpeedBusOperation+0x44>
 801137c:	2902      	cmp	r1, #2
 801137e:	d05c      	beq.n	801143a <HAL_SD_ConfigSpeedBusOperation+0xd6>
 8011380:	2900      	cmp	r1, #0
 8011382:	d072      	beq.n	801146a <HAL_SD_ConfigSpeedBusOperation+0x106>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 8011386:	2501      	movs	r5, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011388:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801138c:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 801138e:	e00c      	b.n	80113aa <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011390:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011396:	f000 80af 	beq.w	80114f8 <HAL_SD_ConfigSpeedBusOperation+0x194>
 801139a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801139c:	2a01      	cmp	r2, #1
 801139e:	f000 80ab 	beq.w	80114f8 <HAL_SD_ConfigSpeedBusOperation+0x194>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 80113a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113a6:	d06a      	beq.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
    switch (SpeedMode)
 80113a8:	2500      	movs	r5, #0
  tickstart = HAL_GetTick();
 80113aa:	f7f9 f8cf 	bl	800a54c <HAL_GetTick>
 80113ae:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80113b0:	e00b      	b.n	80113ca <HAL_SD_ConfigSpeedBusOperation+0x66>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80113b2:	6820      	ldr	r0, [r4, #0]
 80113b4:	f000 ffa6 	bl	8012304 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80113b8:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80113bc:	2804      	cmp	r0, #4
 80113be:	d02f      	beq.n	8011420 <HAL_SD_ConfigSpeedBusOperation+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80113c0:	f7f9 f8c4 	bl	800a54c <HAL_GetTick>
 80113c4:	1b80      	subs	r0, r0, r6
 80113c6:	3001      	adds	r0, #1
 80113c8:	d00f      	beq.n	80113ea <HAL_SD_ConfigSpeedBusOperation+0x86>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80113ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80113cc:	6820      	ldr	r0, [r4, #0]
 80113ce:	0409      	lsls	r1, r1, #16
 80113d0:	f001 fff0 	bl	80133b4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80113d4:	4601      	mov	r1, r0
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d0eb      	beq.n	80113b2 <HAL_SD_ConfigSpeedBusOperation+0x4e>
    hsd->ErrorCode |= errorstate;
 80113da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80113dc:	4319      	orrs	r1, r3
 80113de:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80113e0:	f7f9 f8b4 	bl	800a54c <HAL_GetTick>
 80113e4:	1b80      	subs	r0, r0, r6
 80113e6:	3001      	adds	r0, #1
 80113e8:	d1ef      	bne.n	80113ca <HAL_SD_ConfigSpeedBusOperation+0x66>
      return HAL_TIMEOUT;
 80113ea:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80113ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 80113f0:	2301      	movs	r3, #1
}
 80113f2:	4628      	mov	r0, r5
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80113f4:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80113f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80113fa:	b016      	add	sp, #88	; 0x58
 80113fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 8011400:	2904      	cmp	r1, #4
 8011402:	d8bf      	bhi.n	8011384 <HAL_SD_ConfigSpeedBusOperation+0x20>
 8011404:	a301      	add	r3, pc, #4	; (adr r3, 801140c <HAL_SD_ConfigSpeedBusOperation+0xa8>)
 8011406:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801140a:	bf00      	nop
 801140c:	08011391 	.word	0x08011391
 8011410:	080113a9 	.word	0x080113a9
 8011414:	0801143b 	.word	0x0801143b
 8011418:	080114cd 	.word	0x080114cd
 801141c:	08011495 	.word	0x08011495
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011424:	6820      	ldr	r0, [r4, #0]
 8011426:	f000 ff87 	bl	8012338 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801142a:	b9b0      	cbnz	r0, 801145a <HAL_SD_ConfigSpeedBusOperation+0xf6>
  hsd->State = HAL_SD_STATE_READY;
 801142c:	2301      	movs	r3, #1
}
 801142e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8011430:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011434:	b016      	add	sp, #88	; 0x58
 8011436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801143a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801143c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011440:	d01d      	beq.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
 8011442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011446:	d01a      	beq.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8011448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801144a:	2b01      	cmp	r3, #1
 801144c:	d017      	beq.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801144e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8011450:	2501      	movs	r5, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011456:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8011458:	e7a7      	b.n	80113aa <HAL_SD_ConfigSpeedBusOperation+0x46>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801145a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 801145c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801145e:	4a6d      	ldr	r2, [pc, #436]	; (8011614 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)
 8011460:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011464:	4318      	orrs	r0, r3
 8011466:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8011468:	e7e0      	b.n	801142c <HAL_SD_ConfigSpeedBusOperation+0xc8>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801146a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801146c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011470:	d005      	beq.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
 8011472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011476:	d002      	beq.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8011478:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801147a:	2b01      	cmp	r3, #1
 801147c:	d194      	bne.n	80113a8 <HAL_SD_ConfigSpeedBusOperation+0x44>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 801147e:	4620      	mov	r0, r4
 8011480:	f7fe fffc 	bl	801047c <SD_HighSpeed>
 8011484:	2800      	cmp	r0, #0
 8011486:	d08f      	beq.n	80113a8 <HAL_SD_ConfigSpeedBusOperation+0x44>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011488:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 801148a:	2501      	movs	r5, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011490:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8011492:	e78a      	b.n	80113aa <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011494:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801149a:	d002      	beq.n	80114a2 <HAL_SD_ConfigSpeedBusOperation+0x13e>
 801149c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d1d5      	bne.n	801144e <HAL_SD_ConfigSpeedBusOperation+0xea>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 80114a2:	2240      	movs	r2, #64	; 0x40
 80114a4:	2100      	movs	r1, #0
 80114a6:	a806      	add	r0, sp, #24
 80114a8:	f00f fb3c 	bl	8020b24 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 80114ac:	f7f9 f84e 	bl	800a54c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80114b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80114b2:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d050      	beq.n	801155a <HAL_SD_ConfigSpeedBusOperation+0x1f6>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80114b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114bc:	d054      	beq.n	8011568 <HAL_SD_ConfigSpeedBusOperation+0x204>
  HAL_StatusTypeDef status = HAL_OK;
 80114be:	2500      	movs	r5, #0
 80114c0:	6823      	ldr	r3, [r4, #0]
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 80114c2:	685a      	ldr	r2, [r3, #4]
 80114c4:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80114c8:	605a      	str	r2, [r3, #4]
 80114ca:	e76e      	b.n	80113aa <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80114cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80114ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114d2:	d002      	beq.n	80114da <HAL_SD_ConfigSpeedBusOperation+0x176>
 80114d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d1b9      	bne.n	801144e <HAL_SD_ConfigSpeedBusOperation+0xea>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80114da:	4620      	mov	r0, r4
 80114dc:	f7ff fa7c 	bl	80109d8 <SD_UltraHighSpeed>
 80114e0:	b1b0      	cbz	r0, 8011510 <HAL_SD_ConfigSpeedBusOperation+0x1ac>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80114e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 80114e4:	2501      	movs	r5, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80114e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114ea:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80114ec:	6822      	ldr	r2, [r4, #0]
 80114ee:	6853      	ldr	r3, [r2, #4]
 80114f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114f4:	6053      	str	r3, [r2, #4]
 80114f6:	e758      	b.n	80113aa <HAL_SD_ConfigSpeedBusOperation+0x46>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80114f8:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80114fa:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80114fc:	6853      	ldr	r3, [r2, #4]
 80114fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011502:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8011504:	f7ff fa68 	bl	80109d8 <SD_UltraHighSpeed>
 8011508:	2800      	cmp	r0, #0
 801150a:	f43f af4d 	beq.w	80113a8 <HAL_SD_ConfigSpeedBusOperation+0x44>
 801150e:	e7b6      	b.n	801147e <HAL_SD_ConfigSpeedBusOperation+0x11a>
  HAL_StatusTypeDef status = HAL_OK;
 8011510:	4605      	mov	r5, r0
 8011512:	e7eb      	b.n	80114ec <HAL_SD_ConfigSpeedBusOperation+0x188>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011516:	0716      	lsls	r6, r2, #28
 8011518:	d478      	bmi.n	801160c <HAL_SD_ConfigSpeedBusOperation+0x2a8>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801151c:	0790      	lsls	r0, r2, #30
 801151e:	d472      	bmi.n	8011606 <HAL_SD_ConfigSpeedBusOperation+0x2a2>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011522:	0691      	lsls	r1, r2, #26
 8011524:	d46c      	bmi.n	8011600 <HAL_SD_ConfigSpeedBusOperation+0x29c>

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011526:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801152a:	493b      	ldr	r1, [pc, #236]	; (8011618 <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801152c:	0792      	lsls	r2, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801152e:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011530:	d514      	bpl.n	801155c <HAL_SD_ConfigSpeedBusOperation+0x1f8>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011532:	2001      	movs	r0, #1
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011534:	4d39      	ldr	r5, [pc, #228]	; (801161c <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011536:	f7f8 ffa5 	bl	800a484 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801153a:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801153c:	4838      	ldr	r0, [pc, #224]	; (8011620 <HAL_SD_ConfigSpeedBusOperation+0x2bc>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801153e:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011540:	4938      	ldr	r1, [pc, #224]	; (8011624 <HAL_SD_ConfigSpeedBusOperation+0x2c0>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011542:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011546:	42aa      	cmp	r2, r5
 8011548:	bf18      	it	ne
 801154a:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801154c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011550:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011552:	f000 fe53 	bl	80121fc <DelayBlock_Enable>
 8011556:	2800      	cmp	r0, #0
 8011558:	d0b1      	beq.n	80114be <HAL_SD_ConfigSpeedBusOperation+0x15a>
 801155a:	6823      	ldr	r3, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801155c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 801155e:	2501      	movs	r5, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011560:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011564:	63a2      	str	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8011566:	e7ac      	b.n	80114c2 <HAL_SD_ConfigSpeedBusOperation+0x15e>
    hsd->Instance->DCTRL = 0;
 8011568:	6820      	ldr	r0, [r4, #0]
 801156a:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801156c:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 801156e:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011570:	f000 fee2 	bl	8012338 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8011574:	2800      	cmp	r0, #0
 8011576:	d1f0      	bne.n	801155a <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011578:	f04f 32ff 	mov.w	r2, #4294967295
 801157c:	2340      	movs	r3, #64	; 0x40
 801157e:	2060      	movs	r0, #96	; 0x60
 8011580:	2102      	movs	r1, #2
 8011582:	e9cd 2300 	strd	r2, r3, [sp]
 8011586:	2200      	movs	r2, #0
 8011588:	2301      	movs	r3, #1
 801158a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 801158e:	4669      	mov	r1, sp
 8011590:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011592:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011596:	f000 feb9 	bl	801230c <SDMMC_ConfigData>
 801159a:	4605      	mov	r5, r0
 801159c:	2800      	cmp	r0, #0
 801159e:	d1dc      	bne.n	801155a <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 80115a0:	4921      	ldr	r1, [pc, #132]	; (8011628 <HAL_SD_ConfigSpeedBusOperation+0x2c4>)
 80115a2:	6820      	ldr	r0, [r4, #0]
 80115a4:	f002 f850 	bl	8013648 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80115a8:	4606      	mov	r6, r0
 80115aa:	2800      	cmp	r0, #0
 80115ac:	d1d5      	bne.n	801155a <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80115ae:	f240 582a 	movw	r8, #1322	; 0x52a
 80115b2:	e004      	b.n	80115be <HAL_SD_ConfigSpeedBusOperation+0x25a>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80115b4:	f7f8 ffca 	bl	800a54c <HAL_GetTick>
 80115b8:	1bc0      	subs	r0, r0, r7
 80115ba:	3001      	adds	r0, #1
 80115bc:	d018      	beq.n	80115f0 <HAL_SD_ConfigSpeedBusOperation+0x28c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115c2:	4618      	mov	r0, r3
 80115c4:	ea12 0f08 	tst.w	r2, r8
 80115c8:	d1a4      	bne.n	8011514 <HAL_SD_ConfigSpeedBusOperation+0x1b0>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80115ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115cc:	041b      	lsls	r3, r3, #16
 80115ce:	d5f1      	bpl.n	80115b4 <HAL_SD_ConfigSpeedBusOperation+0x250>
 80115d0:	ab06      	add	r3, sp, #24
 80115d2:	eb03 1946 	add.w	r9, r3, r6, lsl #5
 80115d6:	ab0e      	add	r3, sp, #56	; 0x38
 80115d8:	eb03 1a46 	add.w	sl, r3, r6, lsl #5
 80115dc:	e000      	b.n	80115e0 <HAL_SD_ConfigSpeedBusOperation+0x27c>
 80115de:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 80115e0:	f000 fe72 	bl	80122c8 <SDMMC_ReadFIFO>
 80115e4:	f849 0b04 	str.w	r0, [r9], #4
        for (count = 0U; count < 8U; count++)
 80115e8:	45d1      	cmp	r9, sl
 80115ea:	d1f8      	bne.n	80115de <HAL_SD_ConfigSpeedBusOperation+0x27a>
        loop ++;
 80115ec:	3601      	adds	r6, #1
 80115ee:	e7e1      	b.n	80115b4 <HAL_SD_ConfigSpeedBusOperation+0x250>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80115f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 80115f4:	2201      	movs	r2, #1
 80115f6:	6823      	ldr	r3, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80115f8:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80115fa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 80115fe:	e7ad      	b.n	801155c <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011600:	2220      	movs	r2, #32
 8011602:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8011604:	e7aa      	b.n	801155c <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011606:	2202      	movs	r2, #2
 8011608:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 801160a:	e7a7      	b.n	801155c <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801160c:	2208      	movs	r2, #8
 801160e:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8011610:	e757      	b.n	80114c2 <HAL_SD_ConfigSpeedBusOperation+0x15e>
 8011612:	bf00      	nop
 8011614:	1fe00fff 	.word	0x1fe00fff
 8011618:	18000f3a 	.word	0x18000f3a
 801161c:	52007000 	.word	0x52007000
 8011620:	52008000 	.word	0x52008000
 8011624:	48022800 	.word	0x48022800
 8011628:	80ffff04 	.word	0x80ffff04

0801162c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801162c:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 801162e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011630:	0409      	lsls	r1, r1, #16
{
 8011632:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011634:	6800      	ldr	r0, [r0, #0]
 8011636:	f001 febd 	bl	80133b4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 801163a:	4601      	mov	r1, r0
 801163c:	b120      	cbz	r0, 8011648 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 801163e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011640:	2000      	movs	r0, #0
 8011642:	4319      	orrs	r1, r3
 8011644:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8011646:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011648:	6820      	ldr	r0, [r4, #0]
 801164a:	f000 fe5b 	bl	8012304 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 801164e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8011652:	bd10      	pop	{r4, pc}

08011654 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011656:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
 801165a:	2f20      	cmp	r7, #32
 801165c:	d141      	bne.n	80116e2 <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 801165e:	2900      	cmp	r1, #0
 8011660:	d03d      	beq.n	80116de <HAL_UART_Transmit_DMA+0x8a>
 8011662:	fab2 f682 	clz	r6, r2
 8011666:	0976      	lsrs	r6, r6, #5
 8011668:	2a00      	cmp	r2, #0
 801166a:	d038      	beq.n	80116de <HAL_UART_Transmit_DMA+0x8a>
 801166c:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801166e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 8011672:	2801      	cmp	r0, #1
 8011674:	d035      	beq.n	80116e2 <HAL_UART_Transmit_DMA+0x8e>
 8011676:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011678:	f04f 0c21 	mov.w	ip, #33	; 0x21

    if (huart->hdmatx != NULL)
 801167c:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 801167e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8011682:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011684:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->TxXferSize  = Size;
 8011688:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 801168c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011690:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8011694:	b1c0      	cbz	r0, 80116c8 <HAL_UART_Transmit_DMA+0x74>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011696:	f8df c054 	ldr.w	ip, [pc, #84]	; 80116ec <HAL_UART_Transmit_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801169a:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801169c:	4a12      	ldr	r2, [pc, #72]	; (80116e8 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 801169e:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80116a0:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80116a4:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80116a6:	f8df c048 	ldr.w	ip, [pc, #72]	; 80116f0 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80116aa:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80116ac:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80116b0:	f7f9 fe72 	bl	800b398 <HAL_DMA_Start_IT>
 80116b4:	b140      	cbz	r0, 80116c8 <HAL_UART_Transmit_DMA+0x74>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80116b6:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 80116b8:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 80116ba:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80116be:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 80116c2:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 80116c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80116c8:	6823      	ldr	r3, [r4, #0]
 80116ca:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 80116cc:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80116ce:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80116d0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80116d4:	689a      	ldr	r2, [r3, #8]
 80116d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80116da:	609a      	str	r2, [r3, #8]
}
 80116dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80116de:	2001      	movs	r0, #1
}
 80116e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80116e2:	2002      	movs	r0, #2
}
 80116e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116e6:	bf00      	nop
 80116e8:	080117d1 	.word	0x080117d1
 80116ec:	080117a1 	.word	0x080117a1
 80116f0:	08011829 	.word	0x08011829

080116f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80116f6:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 80116fa:	2f20      	cmp	r7, #32
 80116fc:	d146      	bne.n	801178c <HAL_UART_Receive_DMA+0x98>
  {
    if ((pData == NULL) || (Size == 0U))
 80116fe:	2900      	cmp	r1, #0
 8011700:	d042      	beq.n	8011788 <HAL_UART_Receive_DMA+0x94>
 8011702:	fab2 f682 	clz	r6, r2
 8011706:	0976      	lsrs	r6, r6, #5
 8011708:	2a00      	cmp	r2, #0
 801170a:	d03d      	beq.n	8011788 <HAL_UART_Receive_DMA+0x94>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801170c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8011710:	4604      	mov	r4, r0
 8011712:	2b01      	cmp	r3, #1
 8011714:	d03a      	beq.n	801178c <HAL_UART_Receive_DMA+0x98>
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 8011716:	6f80      	ldr	r0, [r0, #120]	; 0x78
    __HAL_LOCK(huart);
 8011718:	2501      	movs	r5, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801171a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801171c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->pRxBuffPtr = pData;
 8011720:	65a1      	str	r1, [r4, #88]	; 0x58
    huart->RxXferSize = Size;
 8011722:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    __HAL_LOCK(huart);
 8011726:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801172a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmarx != NULL)
 801172e:	b1d0      	cbz	r0, 8011766 <HAL_UART_Receive_DMA+0x72>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011730:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8011790 <HAL_UART_Receive_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011734:	4613      	mov	r3, r2
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011736:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8011794 <HAL_UART_Receive_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801173a:	460a      	mov	r2, r1
 801173c:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferAbortCallback = NULL;
 801173e:	6506      	str	r6, [r0, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011740:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011742:	e9c0 ec0f 	strd	lr, ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011746:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011798 <HAL_UART_Receive_DMA+0xa4>
 801174a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801174e:	f7f9 fe23 	bl	800b398 <HAL_DMA_Start_IT>
 8011752:	b140      	cbz	r0, 8011766 <HAL_UART_Receive_DMA+0x72>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011754:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8011756:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011758:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801175c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8011760:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011766:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8011768:	2000      	movs	r0, #0
 801176a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011774:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011776:	689a      	ldr	r2, [r3, #8]
 8011778:	f042 0201 	orr.w	r2, r2, #1
 801177c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801177e:	689a      	ldr	r2, [r3, #8]
 8011780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011784:	609a      	str	r2, [r3, #8]
}
 8011786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011788:	2001      	movs	r0, #1
}
 801178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801178c:	2002      	movs	r0, #2
}
 801178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011790:	0801181d 	.word	0x0801181d
 8011794:	080117e1 	.word	0x080117e1
 8011798:	08011829 	.word	0x08011829

0801179c <HAL_UART_TxCpltCallback>:
 801179c:	4770      	bx	lr
 801179e:	bf00      	nop

080117a0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80117a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80117a2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80117a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117aa:	d00c      	beq.n	80117c6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80117ac:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 80117ae:	2200      	movs	r2, #0
 80117b0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80117b4:	689a      	ldr	r2, [r3, #8]
 80117b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80117ba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117c2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80117c4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80117c6:	f7ff ffe9 	bl	801179c <HAL_UART_TxCpltCallback>
}
 80117ca:	bd08      	pop	{r3, pc}

080117cc <HAL_UART_TxHalfCpltCallback>:
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop

080117d0 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80117d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80117d2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80117d4:	f7ff fffa 	bl	80117cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117d8:	bd08      	pop	{r3, pc}
 80117da:	bf00      	nop

080117dc <HAL_UART_RxCpltCallback>:
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop

080117e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80117e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80117e2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80117e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117ea:	d012      	beq.n	8011812 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117ec:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 80117ee:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80117f0:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 80117f2:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80117fc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117fe:	689a      	ldr	r2, [r3, #8]
 8011800:	f022 0201 	bic.w	r2, r2, #1
 8011804:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011806:	689a      	ldr	r2, [r3, #8]
 8011808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801180c:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 801180e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011812:	f7ff ffe3 	bl	80117dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011816:	bd08      	pop	{r3, pc}

08011818 <HAL_UART_RxHalfCpltCallback>:
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop

0801181c <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801181c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801181e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8011820:	f7ff fffa 	bl	8011818 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011824:	bd08      	pop	{r3, pc}
 8011826:	bf00      	nop

08011828 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011828:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801182a:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801182c:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 801182e:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011832:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011836:	689a      	ldr	r2, [r3, #8]
 8011838:	0615      	lsls	r5, r2, #24
 801183a:	d501      	bpl.n	8011840 <UART_DMAError+0x18>
 801183c:	2c21      	cmp	r4, #33	; 0x21
 801183e:	d01d      	beq.n	801187c <UART_DMAError+0x54>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011840:	689a      	ldr	r2, [r3, #8]
 8011842:	0652      	lsls	r2, r2, #25
 8011844:	d501      	bpl.n	801184a <UART_DMAError+0x22>
 8011846:	2922      	cmp	r1, #34	; 0x22
 8011848:	d008      	beq.n	801185c <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801184a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801184e:	f043 0310 	orr.w	r3, r3, #16
 8011852:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011856:	f7f3 f895 	bl	8004984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801185a:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 801185c:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801185e:	4a0f      	ldr	r2, [pc, #60]	; (801189c <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 8011860:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 8011862:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011866:	6819      	ldr	r1, [r3, #0]
 8011868:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 801186c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801186e:	6899      	ldr	r1, [r3, #8]
 8011870:	400a      	ands	r2, r1
 8011872:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 8011874:	66c4      	str	r4, [r0, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8011876:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
}
 801187a:	e7e6      	b.n	801184a <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 801187c:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 801187e:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8011880:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801188a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801188c:	689a      	ldr	r2, [r3, #8]
 801188e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8011892:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8011894:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
 8011898:	e7d2      	b.n	8011840 <UART_DMAError+0x18>
 801189a:	bf00      	nop
 801189c:	effffffe 	.word	0xeffffffe

080118a0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80118a0:	6802      	ldr	r2, [r0, #0]
{
 80118a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80118a6:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80118a8:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80118ac:	6815      	ldr	r5, [r2, #0]
{
 80118ae:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80118b0:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80118b2:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80118b4:	f000 8090 	beq.w	80119d8 <HAL_UART_IRQHandler+0x138>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80118b8:	4872      	ldr	r0, [pc, #456]	; (8011a84 <HAL_UART_IRQHandler+0x1e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80118ba:	4e73      	ldr	r6, [pc, #460]	; (8011a88 <HAL_UART_IRQHandler+0x1e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80118bc:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80118be:	402e      	ands	r6, r5
 80118c0:	4306      	orrs	r6, r0
 80118c2:	d11e      	bne.n	8011902 <HAL_UART_IRQHandler+0x62>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80118c4:	02de      	lsls	r6, r3, #11
 80118c6:	d502      	bpl.n	80118ce <HAL_UART_IRQHandler+0x2e>
 80118c8:	0248      	lsls	r0, r1, #9
 80118ca:	f100 80aa 	bmi.w	8011a22 <HAL_UART_IRQHandler+0x182>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80118ce:	061f      	lsls	r7, r3, #24
 80118d0:	d506      	bpl.n	80118e0 <HAL_UART_IRQHandler+0x40>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80118d2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80118d6:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80118da:	4301      	orrs	r1, r0
 80118dc:	f040 8099 	bne.w	8011a12 <HAL_UART_IRQHandler+0x172>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80118e0:	065e      	lsls	r6, r3, #25
 80118e2:	d502      	bpl.n	80118ea <HAL_UART_IRQHandler+0x4a>
 80118e4:	0668      	lsls	r0, r5, #25
 80118e6:	f100 80a8 	bmi.w	8011a3a <HAL_UART_IRQHandler+0x19a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80118ea:	0219      	lsls	r1, r3, #8
 80118ec:	d502      	bpl.n	80118f4 <HAL_UART_IRQHandler+0x54>
 80118ee:	006a      	lsls	r2, r5, #1
 80118f0:	f100 80b0 	bmi.w	8011a54 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80118f4:	01db      	lsls	r3, r3, #7
 80118f6:	d502      	bpl.n	80118fe <HAL_UART_IRQHandler+0x5e>
 80118f8:	2d00      	cmp	r5, #0
 80118fa:	f2c0 80b7 	blt.w	8011a6c <HAL_UART_IRQHandler+0x1cc>
}
 80118fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011902:	07de      	lsls	r6, r3, #31
 8011904:	d509      	bpl.n	801191a <HAL_UART_IRQHandler+0x7a>
 8011906:	05ef      	lsls	r7, r5, #23
 8011908:	d507      	bpl.n	801191a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801190a:	2601      	movs	r6, #1
 801190c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801190e:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8011912:	f046 0601 	orr.w	r6, r6, #1
 8011916:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801191a:	079e      	lsls	r6, r3, #30
 801191c:	d56c      	bpl.n	80119f8 <HAL_UART_IRQHandler+0x158>
 801191e:	07cf      	lsls	r7, r1, #31
 8011920:	d509      	bpl.n	8011936 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011922:	2602      	movs	r6, #2
 8011924:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011926:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 801192a:	f046 0604 	orr.w	r6, r6, #4
 801192e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011932:	075e      	lsls	r6, r3, #29
 8011934:	d464      	bmi.n	8011a00 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011936:	071f      	lsls	r7, r3, #28
 8011938:	d50b      	bpl.n	8011952 <HAL_UART_IRQHandler+0xb2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801193a:	f005 0620 	and.w	r6, r5, #32
 801193e:	4330      	orrs	r0, r6
 8011940:	d007      	beq.n	8011952 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011942:	2008      	movs	r0, #8
 8011944:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011946:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801194a:	f040 0008 	orr.w	r0, r0, #8
 801194e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011952:	051e      	lsls	r6, r3, #20
 8011954:	d50a      	bpl.n	801196c <HAL_UART_IRQHandler+0xcc>
 8011956:	0168      	lsls	r0, r5, #5
 8011958:	d508      	bpl.n	801196c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801195a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801195e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011960:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011964:	f040 0020 	orr.w	r0, r0, #32
 8011968:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801196c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011970:	2800      	cmp	r0, #0
 8011972:	d0c4      	beq.n	80118fe <HAL_UART_IRQHandler+0x5e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011974:	069b      	lsls	r3, r3, #26
 8011976:	d506      	bpl.n	8011986 <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011978:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801197c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8011980:	ea55 0301 	orrs.w	r3, r5, r1
 8011984:	d16b      	bne.n	8011a5e <HAL_UART_IRQHandler+0x1be>
      errorcode = huart->ErrorCode;
 8011986:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801198a:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801198c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011994:	431d      	orrs	r5, r3
 8011996:	d06e      	beq.n	8011a76 <HAL_UART_IRQHandler+0x1d6>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011998:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 801199a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801199c:	4b3b      	ldr	r3, [pc, #236]	; (8011a8c <HAL_UART_IRQHandler+0x1ec>)
  huart->RxISR = NULL;
 801199e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119a0:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80119a4:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80119a6:	6891      	ldr	r1, [r2, #8]
 80119a8:	400b      	ands	r3, r1
 80119aa:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80119ac:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119b0:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 80119b2:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119b4:	065f      	lsls	r7, r3, #25
 80119b6:	d53c      	bpl.n	8011a32 <HAL_UART_IRQHandler+0x192>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119b8:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80119ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80119c0:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d035      	beq.n	8011a32 <HAL_UART_IRQHandler+0x192>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80119c6:	4b32      	ldr	r3, [pc, #200]	; (8011a90 <HAL_UART_IRQHandler+0x1f0>)
 80119c8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80119ca:	f7fa f80f 	bl	800b9ec <HAL_DMA_Abort_IT>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d095      	beq.n	80118fe <HAL_UART_IRQHandler+0x5e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80119d2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80119d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80119d6:	e00c      	b.n	80119f2 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80119d8:	069f      	lsls	r7, r3, #26
 80119da:	f57f af73 	bpl.w	80118c4 <HAL_UART_IRQHandler+0x24>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80119de:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80119e2:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 80119e6:	433e      	orrs	r6, r7
 80119e8:	f43f af6c 	beq.w	80118c4 <HAL_UART_IRQHandler+0x24>
      if (huart->RxISR != NULL)
 80119ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d085      	beq.n	80118fe <HAL_UART_IRQHandler+0x5e>
}
 80119f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80119f6:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80119f8:	075f      	lsls	r7, r3, #29
 80119fa:	d59c      	bpl.n	8011936 <HAL_UART_IRQHandler+0x96>
 80119fc:	07ce      	lsls	r6, r1, #31
 80119fe:	d59a      	bpl.n	8011936 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011a00:	2604      	movs	r6, #4
 8011a02:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011a04:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8011a08:	f046 0602 	orr.w	r6, r6, #2
 8011a0c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8011a10:	e791      	b.n	8011936 <HAL_UART_IRQHandler+0x96>
    if (huart->TxISR != NULL)
 8011a12:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f43f af72 	beq.w	80118fe <HAL_UART_IRQHandler+0x5e>
      huart->TxISR(huart);
 8011a1a:	4620      	mov	r0, r4
}
 8011a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8011a20:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011a22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8011a26:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011a28:	6213      	str	r3, [r2, #32]
}
 8011a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8011a2e:	f000 bbdf 	b.w	80121f0 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8011a32:	4620      	mov	r0, r4
 8011a34:	f7f2 ffa6 	bl	8004984 <HAL_UART_ErrorCallback>
 8011a38:	e761      	b.n	80118fe <HAL_UART_IRQHandler+0x5e>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a3a:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a3c:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011a3e:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011a40:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a46:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011a48:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8011a4c:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8011a4e:	f7ff fea5 	bl	801179c <HAL_UART_TxCpltCallback>
    return;
 8011a52:	e754      	b.n	80118fe <HAL_UART_IRQHandler+0x5e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011a54:	4620      	mov	r0, r4
}
 8011a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011a5a:	f000 bbcd 	b.w	80121f8 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8011a5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d090      	beq.n	8011986 <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 8011a64:	4620      	mov	r0, r4
 8011a66:	4798      	blx	r3
 8011a68:	6822      	ldr	r2, [r4, #0]
 8011a6a:	e78c      	b.n	8011986 <HAL_UART_IRQHandler+0xe6>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011a6c:	4620      	mov	r0, r4
}
 8011a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011a72:	f000 bbbf 	b.w	80121f4 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8011a76:	4620      	mov	r0, r4
 8011a78:	f7f2 ff84 	bl	8004984 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a7c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8011a80:	e73d      	b.n	80118fe <HAL_UART_IRQHandler+0x5e>
 8011a82:	bf00      	nop
 8011a84:	10000001 	.word	0x10000001
 8011a88:	04000120 	.word	0x04000120
 8011a8c:	effffffe 	.word	0xeffffffe
 8011a90:	08011a95 	.word	0x08011a95

08011a94 <UART_DMAAbortOnError>:
{
 8011a94:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a96:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a9e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8011aa2:	f7f2 ff6f 	bl	8004984 <HAL_UART_ErrorCallback>
}
 8011aa6:	bd08      	pop	{r3, pc}

08011aa8 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8011aa8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8011aac:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8011ab0:	4310      	orrs	r0, r2
 8011ab2:	4770      	bx	lr

08011ab4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011ab6:	07da      	lsls	r2, r3, #31
{
 8011ab8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011aba:	d506      	bpl.n	8011aca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011abc:	6801      	ldr	r1, [r0, #0]
 8011abe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011ac0:	684a      	ldr	r2, [r1, #4]
 8011ac2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011ac6:	4322      	orrs	r2, r4
 8011ac8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011aca:	079c      	lsls	r4, r3, #30
 8011acc:	d506      	bpl.n	8011adc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ace:	6801      	ldr	r1, [r0, #0]
 8011ad0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011ad2:	684a      	ldr	r2, [r1, #4]
 8011ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011ad8:	4322      	orrs	r2, r4
 8011ada:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011adc:	0759      	lsls	r1, r3, #29
 8011ade:	d506      	bpl.n	8011aee <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011ae0:	6801      	ldr	r1, [r0, #0]
 8011ae2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011ae4:	684a      	ldr	r2, [r1, #4]
 8011ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011aea:	4322      	orrs	r2, r4
 8011aec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011aee:	071a      	lsls	r2, r3, #28
 8011af0:	d506      	bpl.n	8011b00 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011af2:	6801      	ldr	r1, [r0, #0]
 8011af4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8011af6:	684a      	ldr	r2, [r1, #4]
 8011af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011afc:	4322      	orrs	r2, r4
 8011afe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011b00:	06dc      	lsls	r4, r3, #27
 8011b02:	d506      	bpl.n	8011b12 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011b04:	6801      	ldr	r1, [r0, #0]
 8011b06:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8011b08:	688a      	ldr	r2, [r1, #8]
 8011b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011b0e:	4322      	orrs	r2, r4
 8011b10:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b12:	0699      	lsls	r1, r3, #26
 8011b14:	d506      	bpl.n	8011b24 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b16:	6801      	ldr	r1, [r0, #0]
 8011b18:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8011b1a:	688a      	ldr	r2, [r1, #8]
 8011b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011b20:	4322      	orrs	r2, r4
 8011b22:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b24:	065a      	lsls	r2, r3, #25
 8011b26:	d50a      	bpl.n	8011b3e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b28:	6801      	ldr	r1, [r0, #0]
 8011b2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8011b2c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b2e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b32:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8011b36:	ea42 0204 	orr.w	r2, r2, r4
 8011b3a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b3c:	d00b      	beq.n	8011b56 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b3e:	061b      	lsls	r3, r3, #24
 8011b40:	d506      	bpl.n	8011b50 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b42:	6802      	ldr	r2, [r0, #0]
 8011b44:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011b46:	6853      	ldr	r3, [r2, #4]
 8011b48:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8011b4c:	430b      	orrs	r3, r1
 8011b4e:	6053      	str	r3, [r2, #4]
}
 8011b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b54:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b56:	684a      	ldr	r2, [r1, #4]
 8011b58:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8011b5a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8011b5e:	4322      	orrs	r2, r4
 8011b60:	604a      	str	r2, [r1, #4]
 8011b62:	e7ec      	b.n	8011b3e <UART_AdvFeatureConfig+0x8a>

08011b64 <UART_CheckIdleState>:
{
 8011b64:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b66:	2300      	movs	r3, #0
{
 8011b68:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b6a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8011b6e:	f7f8 fced 	bl	800a54c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b72:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8011b74:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	0711      	lsls	r1, r2, #28
 8011b7a:	d40c      	bmi.n	8011b96 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	0752      	lsls	r2, r2, #29
 8011b80:	d430      	bmi.n	8011be4 <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 8011b82:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8011b84:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8011b86:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 8011b8a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8011b8c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8011b90:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8011b94:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b96:	69da      	ldr	r2, [r3, #28]
 8011b98:	0292      	lsls	r2, r2, #10
 8011b9a:	d4ef      	bmi.n	8011b7c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b9c:	f7f8 fcd6 	bl	800a54c <HAL_GetTick>
 8011ba0:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011ba2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ba4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8011ba8:	d22d      	bcs.n	8011c06 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	0750      	lsls	r0, r2, #29
 8011bae:	d5f2      	bpl.n	8011b96 <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bb0:	69da      	ldr	r2, [r3, #28]
 8011bb2:	0511      	lsls	r1, r2, #20
 8011bb4:	d5ef      	bpl.n	8011b96 <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8011bba:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8011bbc:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8011bbe:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bc0:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011bc2:	6819      	ldr	r1, [r3, #0]
 8011bc4:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8011bc8:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bca:	6899      	ldr	r1, [r3, #8]
 8011bcc:	f021 0101 	bic.w	r1, r1, #1
 8011bd0:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8011bd2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8011bd6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8011bda:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011bde:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8011be2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011be4:	69db      	ldr	r3, [r3, #28]
 8011be6:	0258      	lsls	r0, r3, #9
 8011be8:	d4cb      	bmi.n	8011b82 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bea:	f7f8 fcaf 	bl	800a54c <HAL_GetTick>
 8011bee:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011bf0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bf2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8011bf6:	d206      	bcs.n	8011c06 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	0751      	lsls	r1, r2, #29
 8011bfc:	d5f2      	bpl.n	8011be4 <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bfe:	69da      	ldr	r2, [r3, #28]
 8011c00:	0512      	lsls	r2, r2, #20
 8011c02:	d5ef      	bpl.n	8011be4 <UART_CheckIdleState+0x80>
 8011c04:	e7d7      	b.n	8011bb6 <UART_CheckIdleState+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011c06:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8011c08:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8011c0a:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8011c0c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011c0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011c12:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c14:	689a      	ldr	r2, [r3, #8]
 8011c16:	f022 0201 	bic.w	r2, r2, #1
 8011c1a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8011c1c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8011c20:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8011c24:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8011c28:	bd38      	pop	{r3, r4, r5, pc}
 8011c2a:	bf00      	nop

08011c2c <HAL_UART_Init>:
  if (huart == NULL)
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	f000 819a 	beq.w	8011f66 <HAL_UART_Init+0x33a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011c32:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8011c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d061      	beq.n	8011d06 <HAL_UART_Init+0xda>
  __HAL_UART_DISABLE(huart);
 8011c42:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011c44:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c46:	6921      	ldr	r1, [r4, #16]
 8011c48:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8011c4a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c4e:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8011c50:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c52:	6961      	ldr	r1, [r4, #20]
 8011c54:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8011c56:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c5a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c5c:	49cb      	ldr	r1, [pc, #812]	; (8011f8c <HAL_UART_Init+0x360>)
  __HAL_UART_DISABLE(huart);
 8011c5e:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c62:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8011c64:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c66:	4031      	ands	r1, r6
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011c68:	69a7      	ldr	r7, [r4, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8011c6a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c6c:	68e6      	ldr	r6, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c6e:	4dc8      	ldr	r5, [pc, #800]	; (8011f90 <HAL_UART_Init+0x364>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c70:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c72:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c76:	685a      	ldr	r2, [r3, #4]
 8011c78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8011c7c:	ea42 0206 	orr.w	r2, r2, r6
 8011c80:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c82:	d045      	beq.n	8011d10 <HAL_UART_Init+0xe4>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c84:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8011c86:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c88:	49c2      	ldr	r1, [pc, #776]	; (8011f94 <HAL_UART_Init+0x368>)
    tmpreg |= huart->Init.OneBitSampling;
 8011c8a:	433a      	orrs	r2, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011c8c:	4ec2      	ldr	r6, [pc, #776]	; (8011f98 <HAL_UART_Init+0x36c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c8e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011c90:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011c92:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c94:	ea42 0201 	orr.w	r2, r2, r1
 8011c98:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c9c:	f022 020f 	bic.w	r2, r2, #15
 8011ca0:	ea42 0205 	orr.w	r2, r2, r5
 8011ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ca6:	d025      	beq.n	8011cf4 <HAL_UART_Init+0xc8>
 8011ca8:	4abc      	ldr	r2, [pc, #752]	; (8011f9c <HAL_UART_Init+0x370>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	f000 808c 	beq.w	8011dc8 <HAL_UART_Init+0x19c>
 8011cb0:	4abb      	ldr	r2, [pc, #748]	; (8011fa0 <HAL_UART_Init+0x374>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	f000 8159 	beq.w	8011f6a <HAL_UART_Init+0x33e>
 8011cb8:	4aba      	ldr	r2, [pc, #744]	; (8011fa4 <HAL_UART_Init+0x378>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	f000 813f 	beq.w	8011f3e <HAL_UART_Init+0x312>
 8011cc0:	4ab9      	ldr	r2, [pc, #740]	; (8011fa8 <HAL_UART_Init+0x37c>)
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	f000 81fa 	beq.w	80120bc <HAL_UART_Init+0x490>
 8011cc8:	4ab8      	ldr	r2, [pc, #736]	; (8011fac <HAL_UART_Init+0x380>)
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	f000 8265 	beq.w	801219a <HAL_UART_Init+0x56e>
 8011cd0:	4ab7      	ldr	r2, [pc, #732]	; (8011fb0 <HAL_UART_Init+0x384>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	f000 826b 	beq.w	80121ae <HAL_UART_Init+0x582>
 8011cd8:	4ab6      	ldr	r2, [pc, #728]	; (8011fb4 <HAL_UART_Init+0x388>)
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	f000 8251 	beq.w	8012182 <HAL_UART_Init+0x556>
  huart->RxISR = NULL;
 8011ce0:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8011ce2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8011ce6:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8011ce8:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8011cea:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 8011cee:	b006      	add	sp, #24
 8011cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011cf4:	4bb0      	ldr	r3, [pc, #704]	; (8011fb8 <HAL_UART_Init+0x38c>)
 8011cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011cfc:	2b28      	cmp	r3, #40	; 0x28
 8011cfe:	d8ef      	bhi.n	8011ce0 <HAL_UART_Init+0xb4>
 8011d00:	4aae      	ldr	r2, [pc, #696]	; (8011fbc <HAL_UART_Init+0x390>)
 8011d02:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8011d04:	e068      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
    huart->Lock = HAL_UNLOCKED;
 8011d06:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8011d0a:	f7f3 fe41 	bl	8005990 <HAL_UART_MspInit>
 8011d0e:	e798      	b.n	8011c42 <HAL_UART_Init+0x16>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011d10:	6899      	ldr	r1, [r3, #8]
 8011d12:	4aa0      	ldr	r2, [pc, #640]	; (8011f94 <HAL_UART_Init+0x368>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011d14:	48a8      	ldr	r0, [pc, #672]	; (8011fb8 <HAL_UART_Init+0x38c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011d16:	400a      	ands	r2, r1
 8011d18:	433a      	orrs	r2, r7
 8011d1a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011d20:	f022 020f 	bic.w	r2, r2, #15
 8011d24:	430a      	orrs	r2, r1
 8011d26:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011d28:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8011d2a:	f003 0307 	and.w	r3, r3, #7
 8011d2e:	2b05      	cmp	r3, #5
 8011d30:	d8d6      	bhi.n	8011ce0 <HAL_UART_Init+0xb4>
 8011d32:	4aa3      	ldr	r2, [pc, #652]	; (8011fc0 <HAL_UART_Init+0x394>)
 8011d34:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8011d36:	2b20      	cmp	r3, #32
 8011d38:	f200 8121 	bhi.w	8011f7e <HAL_UART_Init+0x352>
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d9cf      	bls.n	8011ce0 <HAL_UART_Init+0xb4>
 8011d40:	3b02      	subs	r3, #2
 8011d42:	2b1e      	cmp	r3, #30
 8011d44:	d8cc      	bhi.n	8011ce0 <HAL_UART_Init+0xb4>
 8011d46:	a201      	add	r2, pc, #4	; (adr r2, 8011d4c <HAL_UART_Init+0x120>)
 8011d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d4c:	08012143 	.word	0x08012143
 8011d50:	08011ce1 	.word	0x08011ce1
 8011d54:	08012139 	.word	0x08012139
 8011d58:	08011ce1 	.word	0x08011ce1
 8011d5c:	08011ce1 	.word	0x08011ce1
 8011d60:	08011ce1 	.word	0x08011ce1
 8011d64:	08012129 	.word	0x08012129
 8011d68:	08011ce1 	.word	0x08011ce1
 8011d6c:	08011ce1 	.word	0x08011ce1
 8011d70:	08011ce1 	.word	0x08011ce1
 8011d74:	08011ce1 	.word	0x08011ce1
 8011d78:	08011ce1 	.word	0x08011ce1
 8011d7c:	08011ce1 	.word	0x08011ce1
 8011d80:	08011ce1 	.word	0x08011ce1
 8011d84:	08012115 	.word	0x08012115
 8011d88:	08011ce1 	.word	0x08011ce1
 8011d8c:	08011ce1 	.word	0x08011ce1
 8011d90:	08011ce1 	.word	0x08011ce1
 8011d94:	08011ce1 	.word	0x08011ce1
 8011d98:	08011ce1 	.word	0x08011ce1
 8011d9c:	08011ce1 	.word	0x08011ce1
 8011da0:	08011ce1 	.word	0x08011ce1
 8011da4:	08011ce1 	.word	0x08011ce1
 8011da8:	08011ce1 	.word	0x08011ce1
 8011dac:	08011ce1 	.word	0x08011ce1
 8011db0:	08011ce1 	.word	0x08011ce1
 8011db4:	08011ce1 	.word	0x08011ce1
 8011db8:	08011ce1 	.word	0x08011ce1
 8011dbc:	08011ce1 	.word	0x08011ce1
 8011dc0:	08011ce1 	.word	0x08011ce1
 8011dc4:	08011edb 	.word	0x08011edb
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011dc8:	4b7b      	ldr	r3, [pc, #492]	; (8011fb8 <HAL_UART_Init+0x38c>)
 8011dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dcc:	f003 0307 	and.w	r3, r3, #7
 8011dd0:	2b05      	cmp	r3, #5
 8011dd2:	d885      	bhi.n	8011ce0 <HAL_UART_Init+0xb4>
 8011dd4:	4a7b      	ldr	r2, [pc, #492]	; (8011fc4 <HAL_UART_Init+0x398>)
 8011dd6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011dd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011ddc:	f000 80fe 	beq.w	8011fdc <HAL_UART_Init+0x3b0>
    switch (clocksource)
 8011de0:	2b20      	cmp	r3, #32
 8011de2:	f200 80ba 	bhi.w	8011f5a <HAL_UART_Init+0x32e>
 8011de6:	2b20      	cmp	r3, #32
 8011de8:	f63f af7a 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 8011dec:	a201      	add	r2, pc, #4	; (adr r2, 8011df4 <HAL_UART_Init+0x1c8>)
 8011dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011df2:	bf00      	nop
 8011df4:	0801210f 	.word	0x0801210f
 8011df8:	08012109 	.word	0x08012109
 8011dfc:	08011ce1 	.word	0x08011ce1
 8011e00:	08011ce1 	.word	0x08011ce1
 8011e04:	080120ff 	.word	0x080120ff
 8011e08:	08011ce1 	.word	0x08011ce1
 8011e0c:	08011ce1 	.word	0x08011ce1
 8011e10:	08011ce1 	.word	0x08011ce1
 8011e14:	080120e5 	.word	0x080120e5
 8011e18:	08011ce1 	.word	0x08011ce1
 8011e1c:	08011ce1 	.word	0x08011ce1
 8011e20:	08011ce1 	.word	0x08011ce1
 8011e24:	08011ce1 	.word	0x08011ce1
 8011e28:	08011ce1 	.word	0x08011ce1
 8011e2c:	08011ce1 	.word	0x08011ce1
 8011e30:	08011ce1 	.word	0x08011ce1
 8011e34:	080120d1 	.word	0x080120d1
 8011e38:	08011ce1 	.word	0x08011ce1
 8011e3c:	08011ce1 	.word	0x08011ce1
 8011e40:	08011ce1 	.word	0x08011ce1
 8011e44:	08011ce1 	.word	0x08011ce1
 8011e48:	08011ce1 	.word	0x08011ce1
 8011e4c:	08011ce1 	.word	0x08011ce1
 8011e50:	08011ce1 	.word	0x08011ce1
 8011e54:	08011ce1 	.word	0x08011ce1
 8011e58:	08011ce1 	.word	0x08011ce1
 8011e5c:	08011ce1 	.word	0x08011ce1
 8011e60:	08011ce1 	.word	0x08011ce1
 8011e64:	08011ce1 	.word	0x08011ce1
 8011e68:	08011ce1 	.word	0x08011ce1
 8011e6c:	08011ce1 	.word	0x08011ce1
 8011e70:	08011ce1 	.word	0x08011ce1
 8011e74:	08011e79 	.word	0x08011e79
        pclk = (uint32_t) CSI_VALUE;
 8011e78:	4853      	ldr	r0, [pc, #332]	; (8011fc8 <HAL_UART_Init+0x39c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e7a:	4b54      	ldr	r3, [pc, #336]	; (8011fcc <HAL_UART_Init+0x3a0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e7c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e80:	6862      	ldr	r2, [r4, #4]
 8011e82:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8011e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8011e8a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8011e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e92:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e94:	f1a3 0210 	sub.w	r2, r3, #16
 8011e98:	428a      	cmp	r2, r1
 8011e9a:	f63f af21 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
  huart->RxISR = NULL;
 8011e9e:	2200      	movs	r2, #0
        huart->Instance->BRR = usartdiv;
 8011ea0:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8011ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 8011ea6:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8011ea8:	6722      	str	r2, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8011eaa:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d14e      	bne.n	8011f52 <HAL_UART_Init+0x326>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011eb4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8011eb6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011eb8:	685a      	ldr	r2, [r3, #4]
 8011eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011ec0:	689a      	ldr	r2, [r3, #8]
 8011ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011ec6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	f042 0201 	orr.w	r2, r2, #1
 8011ece:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011ed0:	f7ff fe48 	bl	8011b64 <UART_CheckIdleState>
}
 8011ed4:	b006      	add	sp, #24
 8011ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = (uint32_t) CSI_VALUE;
 8011eda:	483b      	ldr	r0, [pc, #236]	; (8011fc8 <HAL_UART_Init+0x39c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011edc:	4b3b      	ldr	r3, [pc, #236]	; (8011fcc <HAL_UART_Init+0x3a0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ede:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011ee0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ee4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011ee8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011eec:	428b      	cmp	r3, r1
 8011eee:	f4ff aef7 	bcc.w	8011ce0 <HAL_UART_Init+0xb4>
 8011ef2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8011ef6:	f63f aef3 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011efa:	f04f 0800 	mov.w	r8, #0
 8011efe:	2300      	movs	r3, #0
 8011f00:	4641      	mov	r1, r8
 8011f02:	f7ee fa55 	bl	80003b0 <__aeabi_uldivmod>
 8011f06:	462a      	mov	r2, r5
 8011f08:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8011f0c:	4643      	mov	r3, r8
 8011f0e:	020f      	lsls	r7, r1, #8
 8011f10:	0206      	lsls	r6, r0, #8
 8011f12:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8011f16:	eb16 000c 	adds.w	r0, r6, ip
 8011f1a:	f147 0100 	adc.w	r1, r7, #0
 8011f1e:	f7ee fa47 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011f22:	4b2b      	ldr	r3, [pc, #172]	; (8011fd0 <HAL_UART_Init+0x3a4>)
 8011f24:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	f63f aed9 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 8011f2e:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8011f30:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8011f34:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 8011f36:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8011f38:	e9c4 881b 	strd	r8, r8, [r4, #108]	; 0x6c
  return ret;
 8011f3c:	e7b7      	b.n	8011eae <HAL_UART_Init+0x282>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011f3e:	4b1e      	ldr	r3, [pc, #120]	; (8011fb8 <HAL_UART_Init+0x38c>)
 8011f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f42:	f003 0307 	and.w	r3, r3, #7
 8011f46:	2b05      	cmp	r3, #5
 8011f48:	f63f aeca 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 8011f4c:	4a21      	ldr	r2, [pc, #132]	; (8011fd4 <HAL_UART_Init+0x3a8>)
 8011f4e:	5cd3      	ldrb	r3, [r2, r3]
 8011f50:	e742      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
    UART_AdvFeatureConfig(huart);
 8011f52:	4620      	mov	r0, r4
 8011f54:	f7ff fdae 	bl	8011ab4 <UART_AdvFeatureConfig>
 8011f58:	e7ac      	b.n	8011eb4 <HAL_UART_Init+0x288>
    switch (clocksource)
 8011f5a:	2b40      	cmp	r3, #64	; 0x40
 8011f5c:	f47f aec0 	bne.w	8011ce0 <HAL_UART_Init+0xb4>
 8011f60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011f64:	e789      	b.n	8011e7a <HAL_UART_Init+0x24e>
    return HAL_ERROR;
 8011f66:	2001      	movs	r0, #1
}
 8011f68:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011f6a:	4b13      	ldr	r3, [pc, #76]	; (8011fb8 <HAL_UART_Init+0x38c>)
 8011f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f6e:	f003 0307 	and.w	r3, r3, #7
 8011f72:	2b05      	cmp	r3, #5
 8011f74:	f63f aeb4 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 8011f78:	4a17      	ldr	r2, [pc, #92]	; (8011fd8 <HAL_UART_Init+0x3ac>)
 8011f7a:	5cd3      	ldrb	r3, [r2, r3]
 8011f7c:	e72c      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
    switch (clocksource)
 8011f7e:	2b40      	cmp	r3, #64	; 0x40
 8011f80:	f47f aeae 	bne.w	8011ce0 <HAL_UART_Init+0xb4>
 8011f84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011f88:	e7a8      	b.n	8011edc <HAL_UART_Init+0x2b0>
 8011f8a:	bf00      	nop
 8011f8c:	cfff69f3 	.word	0xcfff69f3
 8011f90:	58000c00 	.word	0x58000c00
 8011f94:	11fff4ff 	.word	0x11fff4ff
 8011f98:	40011000 	.word	0x40011000
 8011f9c:	40004400 	.word	0x40004400
 8011fa0:	40004800 	.word	0x40004800
 8011fa4:	40004c00 	.word	0x40004c00
 8011fa8:	40005000 	.word	0x40005000
 8011fac:	40011400 	.word	0x40011400
 8011fb0:	40007800 	.word	0x40007800
 8011fb4:	40007c00 	.word	0x40007c00
 8011fb8:	58024400 	.word	0x58024400
 8011fbc:	08046710 	.word	0x08046710
 8011fc0:	08046744 	.word	0x08046744
 8011fc4:	0804673c 	.word	0x0804673c
 8011fc8:	003d0900 	.word	0x003d0900
 8011fcc:	0804674c 	.word	0x0804674c
 8011fd0:	000ffcff 	.word	0x000ffcff
 8011fd4:	0804673c 	.word	0x0804673c
 8011fd8:	0804673c 	.word	0x0804673c
    switch (clocksource)
 8011fdc:	2b20      	cmp	r3, #32
 8011fde:	d86a      	bhi.n	80120b6 <HAL_UART_Init+0x48a>
 8011fe0:	2b20      	cmp	r3, #32
 8011fe2:	f63f ae7d 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 8011fe6:	a201      	add	r2, pc, #4	; (adr r2, 8011fec <HAL_UART_Init+0x3c0>)
 8011fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fec:	08012155 	.word	0x08012155
 8011ff0:	08012149 	.word	0x08012149
 8011ff4:	08011ce1 	.word	0x08011ce1
 8011ff8:	08011ce1 	.word	0x08011ce1
 8011ffc:	08012179 	.word	0x08012179
 8012000:	08011ce1 	.word	0x08011ce1
 8012004:	08011ce1 	.word	0x08011ce1
 8012008:	08011ce1 	.word	0x08011ce1
 801200c:	0801216f 	.word	0x0801216f
 8012010:	08011ce1 	.word	0x08011ce1
 8012014:	08011ce1 	.word	0x08011ce1
 8012018:	08011ce1 	.word	0x08011ce1
 801201c:	08011ce1 	.word	0x08011ce1
 8012020:	08011ce1 	.word	0x08011ce1
 8012024:	08011ce1 	.word	0x08011ce1
 8012028:	08011ce1 	.word	0x08011ce1
 801202c:	0801215b 	.word	0x0801215b
 8012030:	08011ce1 	.word	0x08011ce1
 8012034:	08011ce1 	.word	0x08011ce1
 8012038:	08011ce1 	.word	0x08011ce1
 801203c:	08011ce1 	.word	0x08011ce1
 8012040:	08011ce1 	.word	0x08011ce1
 8012044:	08011ce1 	.word	0x08011ce1
 8012048:	08011ce1 	.word	0x08011ce1
 801204c:	08011ce1 	.word	0x08011ce1
 8012050:	08011ce1 	.word	0x08011ce1
 8012054:	08011ce1 	.word	0x08011ce1
 8012058:	08011ce1 	.word	0x08011ce1
 801205c:	08011ce1 	.word	0x08011ce1
 8012060:	08011ce1 	.word	0x08011ce1
 8012064:	08011ce1 	.word	0x08011ce1
 8012068:	08011ce1 	.word	0x08011ce1
 801206c:	08012071 	.word	0x08012071
        pclk = (uint32_t) CSI_VALUE;
 8012070:	4857      	ldr	r0, [pc, #348]	; (80121d0 <HAL_UART_Init+0x5a4>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012072:	4b58      	ldr	r3, [pc, #352]	; (80121d4 <HAL_UART_Init+0x5a8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012074:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012078:	6862      	ldr	r2, [r4, #4]
 801207a:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 801207e:	0853      	lsrs	r3, r2, #1
 8012080:	fbb0 f0f5 	udiv	r0, r0, r5
 8012084:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012088:	fbb0 f0f2 	udiv	r0, r0, r2
 801208c:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801208e:	f1a2 0310 	sub.w	r3, r2, #16
 8012092:	428b      	cmp	r3, r1
 8012094:	f63f ae24 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012098:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801209c:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->RxISR = NULL;
 80120a0:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80120a2:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80120a4:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 80120a6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 80120aa:	4313      	orrs	r3, r2
 80120ac:	60eb      	str	r3, [r5, #12]
  huart->TxISR = NULL;
 80120ae:	6721      	str	r1, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80120b0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 80120b4:	e6fb      	b.n	8011eae <HAL_UART_Init+0x282>
    switch (clocksource)
 80120b6:	2b40      	cmp	r3, #64	; 0x40
 80120b8:	d0db      	beq.n	8012072 <HAL_UART_Init+0x446>
 80120ba:	e611      	b.n	8011ce0 <HAL_UART_Init+0xb4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120bc:	4b46      	ldr	r3, [pc, #280]	; (80121d8 <HAL_UART_Init+0x5ac>)
 80120be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120c0:	f003 0307 	and.w	r3, r3, #7
 80120c4:	2b05      	cmp	r3, #5
 80120c6:	f63f ae0b 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 80120ca:	4a44      	ldr	r2, [pc, #272]	; (80121dc <HAL_UART_Init+0x5b0>)
 80120cc:	5cd3      	ldrb	r3, [r2, r3]
 80120ce:	e683      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120d0:	4b41      	ldr	r3, [pc, #260]	; (80121d8 <HAL_UART_Init+0x5ac>)
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	0692      	lsls	r2, r2, #26
 80120d6:	d574      	bpl.n	80121c2 <HAL_UART_Init+0x596>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4841      	ldr	r0, [pc, #260]	; (80121e0 <HAL_UART_Init+0x5b4>)
 80120dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80120e0:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80120e2:	e6ca      	b.n	8011e7a <HAL_UART_Init+0x24e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120e4:	a803      	add	r0, sp, #12
 80120e6:	f7fd fe63 	bl	800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80120ea:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d152      	bne.n	8012196 <HAL_UART_Init+0x56a>
  huart->RxISR = NULL;
 80120f0:	2300      	movs	r3, #0
 80120f2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80120f6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80120f8:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 80120fc:	e6d7      	b.n	8011eae <HAL_UART_Init+0x282>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80120fe:	4668      	mov	r0, sp
 8012100:	f7fd fdaa 	bl	800fc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012104:	9801      	ldr	r0, [sp, #4]
        break;
 8012106:	e7f1      	b.n	80120ec <HAL_UART_Init+0x4c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012108:	f7fc fea8 	bl	800ee5c <HAL_RCC_GetPCLK2Freq>
        break;
 801210c:	e7ee      	b.n	80120ec <HAL_UART_Init+0x4c0>
        pclk = HAL_RCC_GetPCLK1Freq();
 801210e:	f7fc fe5d 	bl	800edcc <HAL_RCC_GetPCLK1Freq>
        break;
 8012112:	e7eb      	b.n	80120ec <HAL_UART_Init+0x4c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012114:	4b30      	ldr	r3, [pc, #192]	; (80121d8 <HAL_UART_Init+0x5ac>)
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	0690      	lsls	r0, r2, #26
 801211a:	d554      	bpl.n	80121c6 <HAL_UART_Init+0x59a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	4830      	ldr	r0, [pc, #192]	; (80121e0 <HAL_UART_Init+0x5b4>)
 8012120:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012124:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8012126:	e6d9      	b.n	8011edc <HAL_UART_Init+0x2b0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012128:	a803      	add	r0, sp, #12
 801212a:	f7fd fe41 	bl	800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801212e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8012130:	2800      	cmp	r0, #0
 8012132:	d0dd      	beq.n	80120f0 <HAL_UART_Init+0x4c4>
 8012134:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012136:	e6d1      	b.n	8011edc <HAL_UART_Init+0x2b0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012138:	4668      	mov	r0, sp
 801213a:	f7fd fd8d 	bl	800fc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801213e:	9801      	ldr	r0, [sp, #4]
        break;
 8012140:	e7f6      	b.n	8012130 <HAL_UART_Init+0x504>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012142:	f7fd fd77 	bl	800fc34 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8012146:	e7f3      	b.n	8012130 <HAL_UART_Init+0x504>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012148:	f7fc fe88 	bl	800ee5c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801214c:	2800      	cmp	r0, #0
 801214e:	d0cf      	beq.n	80120f0 <HAL_UART_Init+0x4c4>
 8012150:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012152:	e78e      	b.n	8012072 <HAL_UART_Init+0x446>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012154:	f7fc fe3a 	bl	800edcc <HAL_RCC_GetPCLK1Freq>
        break;
 8012158:	e7f8      	b.n	801214c <HAL_UART_Init+0x520>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801215a:	4b1f      	ldr	r3, [pc, #124]	; (80121d8 <HAL_UART_Init+0x5ac>)
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	0691      	lsls	r1, r2, #26
 8012160:	d533      	bpl.n	80121ca <HAL_UART_Init+0x59e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	481e      	ldr	r0, [pc, #120]	; (80121e0 <HAL_UART_Init+0x5b4>)
 8012166:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801216a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 801216c:	e781      	b.n	8012072 <HAL_UART_Init+0x446>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801216e:	a803      	add	r0, sp, #12
 8012170:	f7fd fe1e 	bl	800fdb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012174:	9804      	ldr	r0, [sp, #16]
        break;
 8012176:	e7e9      	b.n	801214c <HAL_UART_Init+0x520>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012178:	4668      	mov	r0, sp
 801217a:	f7fd fd6d 	bl	800fc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801217e:	9801      	ldr	r0, [sp, #4]
        break;
 8012180:	e7e4      	b.n	801214c <HAL_UART_Init+0x520>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012182:	4b15      	ldr	r3, [pc, #84]	; (80121d8 <HAL_UART_Init+0x5ac>)
 8012184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012186:	f003 0307 	and.w	r3, r3, #7
 801218a:	2b05      	cmp	r3, #5
 801218c:	f63f ada8 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 8012190:	4a14      	ldr	r2, [pc, #80]	; (80121e4 <HAL_UART_Init+0x5b8>)
 8012192:	5cd3      	ldrb	r3, [r2, r3]
 8012194:	e620      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
 8012196:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012198:	e66f      	b.n	8011e7a <HAL_UART_Init+0x24e>
 801219a:	4b0f      	ldr	r3, [pc, #60]	; (80121d8 <HAL_UART_Init+0x5ac>)
 801219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801219e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80121a2:	2b28      	cmp	r3, #40	; 0x28
 80121a4:	f63f ad9c 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 80121a8:	4a0f      	ldr	r2, [pc, #60]	; (80121e8 <HAL_UART_Init+0x5bc>)
 80121aa:	5cd3      	ldrb	r3, [r2, r3]
 80121ac:	e614      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
 80121ae:	4b0a      	ldr	r3, [pc, #40]	; (80121d8 <HAL_UART_Init+0x5ac>)
 80121b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121b2:	f003 0307 	and.w	r3, r3, #7
 80121b6:	2b05      	cmp	r3, #5
 80121b8:	f63f ad92 	bhi.w	8011ce0 <HAL_UART_Init+0xb4>
 80121bc:	4a0b      	ldr	r2, [pc, #44]	; (80121ec <HAL_UART_Init+0x5c0>)
 80121be:	5cd3      	ldrb	r3, [r2, r3]
 80121c0:	e60a      	b.n	8011dd8 <HAL_UART_Init+0x1ac>
          pclk = (uint32_t) HSI_VALUE;
 80121c2:	4807      	ldr	r0, [pc, #28]	; (80121e0 <HAL_UART_Init+0x5b4>)
 80121c4:	e659      	b.n	8011e7a <HAL_UART_Init+0x24e>
          pclk = (uint32_t) HSI_VALUE;
 80121c6:	4806      	ldr	r0, [pc, #24]	; (80121e0 <HAL_UART_Init+0x5b4>)
 80121c8:	e688      	b.n	8011edc <HAL_UART_Init+0x2b0>
          pclk = (uint32_t) HSI_VALUE;
 80121ca:	4805      	ldr	r0, [pc, #20]	; (80121e0 <HAL_UART_Init+0x5b4>)
 80121cc:	e751      	b.n	8012072 <HAL_UART_Init+0x446>
 80121ce:	bf00      	nop
 80121d0:	003d0900 	.word	0x003d0900
 80121d4:	0804674c 	.word	0x0804674c
 80121d8:	58024400 	.word	0x58024400
 80121dc:	0804673c 	.word	0x0804673c
 80121e0:	03d09000 	.word	0x03d09000
 80121e4:	0804673c 	.word	0x0804673c
 80121e8:	08046710 	.word	0x08046710
 80121ec:	0804673c 	.word	0x0804673c

080121f0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop

080121f4 <HAL_UARTEx_RxFifoFullCallback>:
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop

080121f8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop

080121fc <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012200:	2700      	movs	r7, #0
{
 8012202:	b083      	sub	sp, #12
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012204:	2303      	movs	r3, #3

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012206:	f44f 3980 	mov.w	r9, #65536	; 0x10000
{
 801220a:	4604      	mov	r4, r0
  uint32_t sel = 0U;
 801220c:	46bb      	mov	fp, r7
  uint32_t unit = 0U;
 801220e:	9701      	str	r7, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012210:	6003      	str	r3, [r0, #0]
    tuning = 0U;
 8012212:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012216:	fa09 fa07 	lsl.w	sl, r9, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 801221a:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 801221c:	0233      	lsls	r3, r6, #8
 801221e:	f043 030c 	orr.w	r3, r3, #12
 8012222:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 8012224:	f7f8 f992 	bl	800a54c <HAL_GetTick>
 8012228:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 801222a:	e004      	b.n	8012236 <DelayBlock_Enable+0x3a>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 801222c:	f7f8 f98e 	bl	800a54c <HAL_GetTick>
 8012230:	1b40      	subs	r0, r0, r5
 8012232:	28fe      	cmp	r0, #254	; 0xfe
 8012234:	d81a      	bhi.n	801226c <DelayBlock_Enable+0x70>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012236:	6863      	ldr	r3, [r4, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	daf7      	bge.n	801222c <DelayBlock_Enable+0x30>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 801223c:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 801223e:	f1b8 0f00 	cmp.w	r8, #0
 8012242:	d017      	beq.n	8012274 <DelayBlock_Enable+0x78>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 8012244:	ea13 0f0a 	tst.w	r3, sl
 8012248:	d01c      	beq.n	8012284 <DelayBlock_Enable+0x88>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 801224a:	3601      	adds	r6, #1
 801224c:	2e80      	cmp	r6, #128	; 0x80
 801224e:	d1e5      	bne.n	801221c <DelayBlock_Enable+0x20>
 8012250:	3701      	adds	r7, #1
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8012252:	2f0c      	cmp	r7, #12
 8012254:	d1dd      	bne.n	8012212 <DelayBlock_Enable+0x16>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012256:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8012258:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 801225a:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 801225c:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 801225e:	ea4b 2303 	orr.w	r3, fp, r3, lsl #8
  DLYBx->CR   = 0U;
 8012262:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012264:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012266:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8012268:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 801226a:	e000      	b.n	801226e <DelayBlock_Enable+0x72>
          return HAL_TIMEOUT;
 801226c:	2003      	movs	r0, #3
}
 801226e:	b003      	add	sp, #12
 8012270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012274:	ea13 0f0a 	tst.w	r3, sl
 8012278:	bf14      	ite	ne
 801227a:	f04f 0801 	movne.w	r8, #1
 801227e:	f04f 0800 	moveq.w	r8, #0
 8012282:	e7e2      	b.n	801224a <DelayBlock_Enable+0x4e>
          if( unit == 0U )
 8012284:	9b01      	ldr	r3, [sp, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d1e2      	bne.n	8012250 <DelayBlock_Enable+0x54>
            sel  = sel_current + 1U;
 801228a:	f107 0b01 	add.w	fp, r7, #1
          if( unit == 0U )
 801228e:	9601      	str	r6, [sp, #4]
 8012290:	465f      	mov	r7, fp
 8012292:	e7de      	b.n	8012252 <DelayBlock_Enable+0x56>

08012294 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012294:	b084      	sub	sp, #16
 8012296:	b470      	push	{r4, r5, r6}
 8012298:	ae04      	add	r6, sp, #16
 801229a:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 801229c:	9c07      	ldr	r4, [sp, #28]

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);

  return HAL_OK;
}
 801229e:	2000      	movs	r0, #0
{
 80122a0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80122a4:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80122a6:	686e      	ldr	r6, [r5, #4]
             Init.ClockPowerSave      |\
 80122a8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 80122ac:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80122ae:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 80122b0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80122b2:	4a04      	ldr	r2, [pc, #16]	; (80122c4 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 80122b4:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80122b6:	4032      	ands	r2, r6
             Init.HardwareFlowControl |\
 80122b8:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80122ba:	4313      	orrs	r3, r2
 80122bc:	606b      	str	r3, [r5, #4]
}
 80122be:	bc70      	pop	{r4, r5, r6}
 80122c0:	b004      	add	sp, #16
 80122c2:	4770      	bx	lr
 80122c4:	ffc02c00 	.word	0xffc02c00

080122c8 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80122c8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop

080122d0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80122d0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80122d2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80122d4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80122d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80122da:	4770      	bx	lr

080122dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80122dc:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80122de:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	f042 0203 	orr.w	r2, r2, #3
 80122e6:	601a      	str	r2, [r3, #0]
}
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop

080122ec <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80122ec:	4603      	mov	r3, r0
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);

  return HAL_OK;
}
 80122ee:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	f022 0203 	bic.w	r2, r2, #3
 80122f6:	601a      	str	r2, [r3, #0]
}
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop

080122fc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80122fc:	6800      	ldr	r0, [r0, #0]
}
 80122fe:	f000 0003 	and.w	r0, r0, #3
 8012302:	4770      	bx	lr

08012304 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012304:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8012306:	5840      	ldr	r0, [r0, r1]
}
 8012308:	4770      	bx	lr
 801230a:	bf00      	nop

0801230c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801230c:	b430      	push	{r4, r5}
 801230e:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012310:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 8012312:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012314:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8012318:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 801231a:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 801231c:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 801231e:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8012320:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8012322:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8012324:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012326:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8012328:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801232a:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 801232e:	430b      	orrs	r3, r1
}
 8012330:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012332:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop

08012338 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012338:	4b4b      	ldr	r3, [pc, #300]	; (8012468 <SDMMC_CmdBlockLength+0x130>)
 801233a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 801233e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012340:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012342:	f241 1410 	movw	r4, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012346:	4d49      	ldr	r5, [pc, #292]	; (801246c <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012348:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801234a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801234e:	4948      	ldr	r1, [pc, #288]	; (8012470 <SDMMC_CmdBlockLength+0x138>)
 8012350:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012352:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012354:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012356:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801235a:	430c      	orrs	r4, r1
 801235c:	60c4      	str	r4, [r0, #12]

  do
  {
    if (count-- == 0U)
 801235e:	b14b      	cbz	r3, 8012374 <SDMMC_CmdBlockLength+0x3c>
 8012360:	1e5a      	subs	r2, r3, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012362:	4944      	ldr	r1, [pc, #272]	; (8012474 <SDMMC_CmdBlockLength+0x13c>)
    sta_reg = SDMMCx->STA;
 8012364:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012366:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012368:	420b      	tst	r3, r1
 801236a:	d001      	beq.n	8012370 <SDMMC_CmdBlockLength+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801236c:	049c      	lsls	r4, r3, #18
 801236e:	d506      	bpl.n	801237e <SDMMC_CmdBlockLength+0x46>
    if (count-- == 0U)
 8012370:	1c55      	adds	r5, r2, #1
 8012372:	d1f7      	bne.n	8012364 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012378:	4618      	mov	r0, r3
 801237a:	bc30      	pop	{r4, r5}
 801237c:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801237e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012380:	075b      	lsls	r3, r3, #29
 8012382:	d43d      	bmi.n	8012400 <SDMMC_CmdBlockLength+0xc8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012384:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012386:	f013 0301 	ands.w	r3, r3, #1
 801238a:	d134      	bne.n	80123f6 <SDMMC_CmdBlockLength+0xbe>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801238c:	4b3a      	ldr	r3, [pc, #232]	; (8012478 <SDMMC_CmdBlockLength+0x140>)
 801238e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012390:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b10      	cmp	r3, #16
 8012396:	d131      	bne.n	80123fc <SDMMC_CmdBlockLength+0xc4>
  return (*(__IO uint32_t *) tmp);
 8012398:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801239a:	4b38      	ldr	r3, [pc, #224]	; (801247c <SDMMC_CmdBlockLength+0x144>)
 801239c:	4013      	ands	r3, r2
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d0ea      	beq.n	8012378 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80123a2:	2a00      	cmp	r2, #0
 80123a4:	db2f      	blt.n	8012406 <SDMMC_CmdBlockLength+0xce>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80123a6:	0055      	lsls	r5, r2, #1
 80123a8:	d430      	bmi.n	801240c <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80123aa:	0094      	lsls	r4, r2, #2
 80123ac:	d430      	bmi.n	8012410 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80123ae:	00d0      	lsls	r0, r2, #3
 80123b0:	d430      	bmi.n	8012414 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80123b2:	0111      	lsls	r1, r2, #4
 80123b4:	d431      	bmi.n	801241a <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80123b6:	0155      	lsls	r5, r2, #5
 80123b8:	d432      	bmi.n	8012420 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80123ba:	01d4      	lsls	r4, r2, #7
 80123bc:	d433      	bmi.n	8012426 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80123be:	0210      	lsls	r0, r2, #8
 80123c0:	d434      	bmi.n	801242c <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80123c2:	0251      	lsls	r1, r2, #9
 80123c4:	d435      	bmi.n	8012432 <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80123c6:	0295      	lsls	r5, r2, #10
 80123c8:	d436      	bmi.n	8012438 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80123ca:	02d4      	lsls	r4, r2, #11
 80123cc:	d437      	bmi.n	801243e <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80123ce:	0350      	lsls	r0, r2, #13
 80123d0:	d438      	bmi.n	8012444 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80123d2:	0391      	lsls	r1, r2, #14
 80123d4:	d439      	bmi.n	801244a <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80123d6:	03d5      	lsls	r5, r2, #15
 80123d8:	d43a      	bmi.n	8012450 <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80123da:	0414      	lsls	r4, r2, #16
 80123dc:	d43b      	bmi.n	8012456 <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80123de:	0450      	lsls	r0, r2, #17
 80123e0:	d43f      	bmi.n	8012462 <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80123e2:	0491      	lsls	r1, r2, #18
 80123e4:	d43a      	bmi.n	801245c <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80123e6:	f012 0f08 	tst.w	r2, #8
 80123ea:	bf14      	ite	ne
 80123ec:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80123f0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80123f4:	e7c0      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80123f6:	2201      	movs	r2, #1
 80123f8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123fa:	e7bd      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123fc:	2301      	movs	r3, #1
 80123fe:	e7bb      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012400:	2304      	movs	r3, #4
 8012402:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012404:	e7b8      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801240a:	e7b5      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801240c:	2340      	movs	r3, #64	; 0x40
 801240e:	e7b3      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012410:	2380      	movs	r3, #128	; 0x80
 8012412:	e7b1      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012418:	e7ae      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801241e:	e7ab      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012424:	e7a8      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801242a:	e7a5      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801242c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012430:	e7a2      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012436:	e79f      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012438:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801243c:	e79c      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 801243e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012442:	e799      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012448:	e796      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801244a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801244e:	e793      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012450:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012454:	e790      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012456:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801245a:	e78d      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801245c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012460:	e78a      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012462:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012466:	e787      	b.n	8012378 <SDMMC_CmdBlockLength+0x40>
 8012468:	24002f54 	.word	0x24002f54
 801246c:	10624dd3 	.word	0x10624dd3
 8012470:	fffee0c0 	.word	0xfffee0c0
 8012474:	00200045 	.word	0x00200045
 8012478:	002000c5 	.word	0x002000c5
 801247c:	fdffe008 	.word	0xfdffe008

08012480 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012480:	4b4b      	ldr	r3, [pc, #300]	; (80125b0 <SDMMC_CmdReadSingleBlock+0x130>)
 8012482:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8012486:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012488:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801248a:	f241 1411 	movw	r4, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801248e:	4d49      	ldr	r5, [pc, #292]	; (80125b4 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012490:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012492:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012496:	4948      	ldr	r1, [pc, #288]	; (80125b8 <SDMMC_CmdReadSingleBlock+0x138>)
 8012498:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801249a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801249c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801249e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80124a2:	430c      	orrs	r4, r1
 80124a4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80124a6:	b14b      	cbz	r3, 80124bc <SDMMC_CmdReadSingleBlock+0x3c>
 80124a8:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80124aa:	4944      	ldr	r1, [pc, #272]	; (80125bc <SDMMC_CmdReadSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 80124ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80124ae:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80124b0:	420b      	tst	r3, r1
 80124b2:	d001      	beq.n	80124b8 <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80124b4:	049c      	lsls	r4, r3, #18
 80124b6:	d506      	bpl.n	80124c6 <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 80124b8:	1c55      	adds	r5, r2, #1
 80124ba:	d1f7      	bne.n	80124ac <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80124bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	bc30      	pop	{r4, r5}
 80124c4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80124c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80124c8:	075b      	lsls	r3, r3, #29
 80124ca:	d43d      	bmi.n	8012548 <SDMMC_CmdReadSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80124cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80124ce:	f013 0301 	ands.w	r3, r3, #1
 80124d2:	d134      	bne.n	801253e <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80124d4:	4b3a      	ldr	r3, [pc, #232]	; (80125c0 <SDMMC_CmdReadSingleBlock+0x140>)
 80124d6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80124d8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b11      	cmp	r3, #17
 80124de:	d131      	bne.n	8012544 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80124e0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80124e2:	4b38      	ldr	r3, [pc, #224]	; (80125c4 <SDMMC_CmdReadSingleBlock+0x144>)
 80124e4:	4013      	ands	r3, r2
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d0ea      	beq.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80124ea:	2a00      	cmp	r2, #0
 80124ec:	db2f      	blt.n	801254e <SDMMC_CmdReadSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80124ee:	0055      	lsls	r5, r2, #1
 80124f0:	d430      	bmi.n	8012554 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80124f2:	0094      	lsls	r4, r2, #2
 80124f4:	d430      	bmi.n	8012558 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80124f6:	00d0      	lsls	r0, r2, #3
 80124f8:	d430      	bmi.n	801255c <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80124fa:	0111      	lsls	r1, r2, #4
 80124fc:	d431      	bmi.n	8012562 <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80124fe:	0155      	lsls	r5, r2, #5
 8012500:	d432      	bmi.n	8012568 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012502:	01d4      	lsls	r4, r2, #7
 8012504:	d433      	bmi.n	801256e <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012506:	0210      	lsls	r0, r2, #8
 8012508:	d434      	bmi.n	8012574 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801250a:	0251      	lsls	r1, r2, #9
 801250c:	d435      	bmi.n	801257a <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801250e:	0295      	lsls	r5, r2, #10
 8012510:	d436      	bmi.n	8012580 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012512:	02d4      	lsls	r4, r2, #11
 8012514:	d437      	bmi.n	8012586 <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012516:	0350      	lsls	r0, r2, #13
 8012518:	d438      	bmi.n	801258c <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801251a:	0391      	lsls	r1, r2, #14
 801251c:	d439      	bmi.n	8012592 <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801251e:	03d5      	lsls	r5, r2, #15
 8012520:	d43a      	bmi.n	8012598 <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012522:	0414      	lsls	r4, r2, #16
 8012524:	d43b      	bmi.n	801259e <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012526:	0450      	lsls	r0, r2, #17
 8012528:	d43f      	bmi.n	80125aa <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801252a:	0491      	lsls	r1, r2, #18
 801252c:	d43a      	bmi.n	80125a4 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801252e:	f012 0f08 	tst.w	r2, #8
 8012532:	bf14      	ite	ne
 8012534:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012538:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801253c:	e7c0      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801253e:	2201      	movs	r2, #1
 8012540:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012542:	e7bd      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012544:	2301      	movs	r3, #1
 8012546:	e7bb      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012548:	2304      	movs	r3, #4
 801254a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801254c:	e7b8      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801254e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012552:	e7b5      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012554:	2340      	movs	r3, #64	; 0x40
 8012556:	e7b3      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012558:	2380      	movs	r3, #128	; 0x80
 801255a:	e7b1      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801255c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012560:	e7ae      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012566:	e7ab      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801256c:	e7a8      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801256e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012572:	e7a5      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012578:	e7a2      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801257a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801257e:	e79f      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012584:	e79c      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801258a:	e799      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801258c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012590:	e796      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012592:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012596:	e793      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012598:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801259c:	e790      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801259e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80125a2:	e78d      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80125a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80125a8:	e78a      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80125aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80125ae:	e787      	b.n	80124c0 <SDMMC_CmdReadSingleBlock+0x40>
 80125b0:	24002f54 	.word	0x24002f54
 80125b4:	10624dd3 	.word	0x10624dd3
 80125b8:	fffee0c0 	.word	0xfffee0c0
 80125bc:	00200045 	.word	0x00200045
 80125c0:	002000c5 	.word	0x002000c5
 80125c4:	fdffe008 	.word	0xfdffe008

080125c8 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125c8:	4b4b      	ldr	r3, [pc, #300]	; (80126f8 <SDMMC_CmdReadMultiBlock+0x130>)
 80125ca:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80125ce:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125d0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80125d2:	f241 1412 	movw	r4, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125d6:	4d49      	ldr	r5, [pc, #292]	; (80126fc <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80125d8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125da:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80125de:	4948      	ldr	r1, [pc, #288]	; (8012700 <SDMMC_CmdReadMultiBlock+0x138>)
 80125e0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125e2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80125e4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80125e6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80125ea:	430c      	orrs	r4, r1
 80125ec:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80125ee:	b14b      	cbz	r3, 8012604 <SDMMC_CmdReadMultiBlock+0x3c>
 80125f0:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80125f2:	4944      	ldr	r1, [pc, #272]	; (8012704 <SDMMC_CmdReadMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 80125f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80125f6:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80125f8:	420b      	tst	r3, r1
 80125fa:	d001      	beq.n	8012600 <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80125fc:	049c      	lsls	r4, r3, #18
 80125fe:	d506      	bpl.n	801260e <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 8012600:	1c55      	adds	r5, r2, #1
 8012602:	d1f7      	bne.n	80125f4 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012608:	4618      	mov	r0, r3
 801260a:	bc30      	pop	{r4, r5}
 801260c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801260e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012610:	075b      	lsls	r3, r3, #29
 8012612:	d43d      	bmi.n	8012690 <SDMMC_CmdReadMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012614:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012616:	f013 0301 	ands.w	r3, r3, #1
 801261a:	d134      	bne.n	8012686 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801261c:	4b3a      	ldr	r3, [pc, #232]	; (8012708 <SDMMC_CmdReadMultiBlock+0x140>)
 801261e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012620:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012622:	b2db      	uxtb	r3, r3
 8012624:	2b12      	cmp	r3, #18
 8012626:	d131      	bne.n	801268c <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8012628:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801262a:	4b38      	ldr	r3, [pc, #224]	; (801270c <SDMMC_CmdReadMultiBlock+0x144>)
 801262c:	4013      	ands	r3, r2
 801262e:	2b00      	cmp	r3, #0
 8012630:	d0ea      	beq.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012632:	2a00      	cmp	r2, #0
 8012634:	db2f      	blt.n	8012696 <SDMMC_CmdReadMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012636:	0055      	lsls	r5, r2, #1
 8012638:	d430      	bmi.n	801269c <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801263a:	0094      	lsls	r4, r2, #2
 801263c:	d430      	bmi.n	80126a0 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801263e:	00d0      	lsls	r0, r2, #3
 8012640:	d430      	bmi.n	80126a4 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012642:	0111      	lsls	r1, r2, #4
 8012644:	d431      	bmi.n	80126aa <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012646:	0155      	lsls	r5, r2, #5
 8012648:	d432      	bmi.n	80126b0 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801264a:	01d4      	lsls	r4, r2, #7
 801264c:	d433      	bmi.n	80126b6 <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801264e:	0210      	lsls	r0, r2, #8
 8012650:	d434      	bmi.n	80126bc <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012652:	0251      	lsls	r1, r2, #9
 8012654:	d435      	bmi.n	80126c2 <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012656:	0295      	lsls	r5, r2, #10
 8012658:	d436      	bmi.n	80126c8 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801265a:	02d4      	lsls	r4, r2, #11
 801265c:	d437      	bmi.n	80126ce <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801265e:	0350      	lsls	r0, r2, #13
 8012660:	d438      	bmi.n	80126d4 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012662:	0391      	lsls	r1, r2, #14
 8012664:	d439      	bmi.n	80126da <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012666:	03d5      	lsls	r5, r2, #15
 8012668:	d43a      	bmi.n	80126e0 <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801266a:	0414      	lsls	r4, r2, #16
 801266c:	d43b      	bmi.n	80126e6 <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801266e:	0450      	lsls	r0, r2, #17
 8012670:	d43f      	bmi.n	80126f2 <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012672:	0491      	lsls	r1, r2, #18
 8012674:	d43a      	bmi.n	80126ec <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012676:	f012 0f08 	tst.w	r2, #8
 801267a:	bf14      	ite	ne
 801267c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012680:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012684:	e7c0      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012686:	2201      	movs	r2, #1
 8012688:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801268a:	e7bd      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801268c:	2301      	movs	r3, #1
 801268e:	e7bb      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012690:	2304      	movs	r3, #4
 8012692:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012694:	e7b8      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801269a:	e7b5      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801269c:	2340      	movs	r3, #64	; 0x40
 801269e:	e7b3      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80126a0:	2380      	movs	r3, #128	; 0x80
 80126a2:	e7b1      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126a8:	e7ae      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80126aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126ae:	e7ab      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126b4:	e7a8      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126ba:	e7a5      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126c0:	e7a2      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126c6:	e79f      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80126c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126cc:	e79c      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80126ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126d2:	e799      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80126d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126d8:	e796      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80126da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126de:	e793      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80126e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80126e4:	e790      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80126e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80126ea:	e78d      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80126ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80126f0:	e78a      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80126f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80126f6:	e787      	b.n	8012608 <SDMMC_CmdReadMultiBlock+0x40>
 80126f8:	24002f54 	.word	0x24002f54
 80126fc:	10624dd3 	.word	0x10624dd3
 8012700:	fffee0c0 	.word	0xfffee0c0
 8012704:	00200045 	.word	0x00200045
 8012708:	002000c5 	.word	0x002000c5
 801270c:	fdffe008 	.word	0xfdffe008

08012710 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012710:	4b4b      	ldr	r3, [pc, #300]	; (8012840 <SDMMC_CmdWriteSingleBlock+0x130>)
 8012712:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8012716:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012718:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801271a:	f241 1418 	movw	r4, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801271e:	4d49      	ldr	r5, [pc, #292]	; (8012844 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012720:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012722:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012726:	4948      	ldr	r1, [pc, #288]	; (8012848 <SDMMC_CmdWriteSingleBlock+0x138>)
 8012728:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801272a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801272c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801272e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012732:	430c      	orrs	r4, r1
 8012734:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012736:	b14b      	cbz	r3, 801274c <SDMMC_CmdWriteSingleBlock+0x3c>
 8012738:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801273a:	4944      	ldr	r1, [pc, #272]	; (801284c <SDMMC_CmdWriteSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 801273c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 801273e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012740:	420b      	tst	r3, r1
 8012742:	d001      	beq.n	8012748 <SDMMC_CmdWriteSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012744:	049c      	lsls	r4, r3, #18
 8012746:	d506      	bpl.n	8012756 <SDMMC_CmdWriteSingleBlock+0x46>
    if (count-- == 0U)
 8012748:	1c55      	adds	r5, r2, #1
 801274a:	d1f7      	bne.n	801273c <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801274c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012750:	4618      	mov	r0, r3
 8012752:	bc30      	pop	{r4, r5}
 8012754:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012756:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012758:	075b      	lsls	r3, r3, #29
 801275a:	d43d      	bmi.n	80127d8 <SDMMC_CmdWriteSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801275c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801275e:	f013 0301 	ands.w	r3, r3, #1
 8012762:	d134      	bne.n	80127ce <SDMMC_CmdWriteSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012764:	4b3a      	ldr	r3, [pc, #232]	; (8012850 <SDMMC_CmdWriteSingleBlock+0x140>)
 8012766:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012768:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801276a:	b2db      	uxtb	r3, r3
 801276c:	2b18      	cmp	r3, #24
 801276e:	d131      	bne.n	80127d4 <SDMMC_CmdWriteSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8012770:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012772:	4b38      	ldr	r3, [pc, #224]	; (8012854 <SDMMC_CmdWriteSingleBlock+0x144>)
 8012774:	4013      	ands	r3, r2
 8012776:	2b00      	cmp	r3, #0
 8012778:	d0ea      	beq.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801277a:	2a00      	cmp	r2, #0
 801277c:	db2f      	blt.n	80127de <SDMMC_CmdWriteSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801277e:	0055      	lsls	r5, r2, #1
 8012780:	d430      	bmi.n	80127e4 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012782:	0094      	lsls	r4, r2, #2
 8012784:	d430      	bmi.n	80127e8 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012786:	00d0      	lsls	r0, r2, #3
 8012788:	d430      	bmi.n	80127ec <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801278a:	0111      	lsls	r1, r2, #4
 801278c:	d431      	bmi.n	80127f2 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801278e:	0155      	lsls	r5, r2, #5
 8012790:	d432      	bmi.n	80127f8 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012792:	01d4      	lsls	r4, r2, #7
 8012794:	d433      	bmi.n	80127fe <SDMMC_CmdWriteSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012796:	0210      	lsls	r0, r2, #8
 8012798:	d434      	bmi.n	8012804 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801279a:	0251      	lsls	r1, r2, #9
 801279c:	d435      	bmi.n	801280a <SDMMC_CmdWriteSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801279e:	0295      	lsls	r5, r2, #10
 80127a0:	d436      	bmi.n	8012810 <SDMMC_CmdWriteSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80127a2:	02d4      	lsls	r4, r2, #11
 80127a4:	d437      	bmi.n	8012816 <SDMMC_CmdWriteSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80127a6:	0350      	lsls	r0, r2, #13
 80127a8:	d438      	bmi.n	801281c <SDMMC_CmdWriteSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80127aa:	0391      	lsls	r1, r2, #14
 80127ac:	d439      	bmi.n	8012822 <SDMMC_CmdWriteSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80127ae:	03d5      	lsls	r5, r2, #15
 80127b0:	d43a      	bmi.n	8012828 <SDMMC_CmdWriteSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80127b2:	0414      	lsls	r4, r2, #16
 80127b4:	d43b      	bmi.n	801282e <SDMMC_CmdWriteSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80127b6:	0450      	lsls	r0, r2, #17
 80127b8:	d43f      	bmi.n	801283a <SDMMC_CmdWriteSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80127ba:	0491      	lsls	r1, r2, #18
 80127bc:	d43a      	bmi.n	8012834 <SDMMC_CmdWriteSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127be:	f012 0f08 	tst.w	r2, #8
 80127c2:	bf14      	ite	ne
 80127c4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80127c8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80127cc:	e7c0      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80127ce:	2201      	movs	r2, #1
 80127d0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127d2:	e7bd      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127d4:	2301      	movs	r3, #1
 80127d6:	e7bb      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127d8:	2304      	movs	r3, #4
 80127da:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127dc:	e7b8      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80127de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80127e2:	e7b5      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80127e4:	2340      	movs	r3, #64	; 0x40
 80127e6:	e7b3      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80127e8:	2380      	movs	r3, #128	; 0x80
 80127ea:	e7b1      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80127ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127f0:	e7ae      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80127f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127f6:	e7ab      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80127f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127fc:	e7a8      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80127fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012802:	e7a5      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012808:	e7a2      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801280a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801280e:	e79f      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012810:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012814:	e79c      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801281a:	e799      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801281c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012820:	e796      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012822:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012826:	e793      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801282c:	e790      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801282e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012832:	e78d      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012834:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012838:	e78a      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801283a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801283e:	e787      	b.n	8012750 <SDMMC_CmdWriteSingleBlock+0x40>
 8012840:	24002f54 	.word	0x24002f54
 8012844:	10624dd3 	.word	0x10624dd3
 8012848:	fffee0c0 	.word	0xfffee0c0
 801284c:	00200045 	.word	0x00200045
 8012850:	002000c5 	.word	0x002000c5
 8012854:	fdffe008 	.word	0xfdffe008

08012858 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012858:	4b4b      	ldr	r3, [pc, #300]	; (8012988 <SDMMC_CmdWriteMultiBlock+0x130>)
 801285a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 801285e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012860:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012862:	f241 1419 	movw	r4, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012866:	4d49      	ldr	r5, [pc, #292]	; (801298c <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012868:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801286a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801286e:	4948      	ldr	r1, [pc, #288]	; (8012990 <SDMMC_CmdWriteMultiBlock+0x138>)
 8012870:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012872:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012874:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012876:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801287a:	430c      	orrs	r4, r1
 801287c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801287e:	b14b      	cbz	r3, 8012894 <SDMMC_CmdWriteMultiBlock+0x3c>
 8012880:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012882:	4944      	ldr	r1, [pc, #272]	; (8012994 <SDMMC_CmdWriteMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8012884:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012886:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012888:	420b      	tst	r3, r1
 801288a:	d001      	beq.n	8012890 <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801288c:	049c      	lsls	r4, r3, #18
 801288e:	d506      	bpl.n	801289e <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 8012890:	1c55      	adds	r5, r2, #1
 8012892:	d1f7      	bne.n	8012884 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012898:	4618      	mov	r0, r3
 801289a:	bc30      	pop	{r4, r5}
 801289c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801289e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80128a0:	075b      	lsls	r3, r3, #29
 80128a2:	d43d      	bmi.n	8012920 <SDMMC_CmdWriteMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80128a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80128a6:	f013 0301 	ands.w	r3, r3, #1
 80128aa:	d134      	bne.n	8012916 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ac:	4b3a      	ldr	r3, [pc, #232]	; (8012998 <SDMMC_CmdWriteMultiBlock+0x140>)
 80128ae:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80128b0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	2b19      	cmp	r3, #25
 80128b6:	d131      	bne.n	801291c <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80128b8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80128ba:	4b38      	ldr	r3, [pc, #224]	; (801299c <SDMMC_CmdWriteMultiBlock+0x144>)
 80128bc:	4013      	ands	r3, r2
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d0ea      	beq.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80128c2:	2a00      	cmp	r2, #0
 80128c4:	db2f      	blt.n	8012926 <SDMMC_CmdWriteMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80128c6:	0055      	lsls	r5, r2, #1
 80128c8:	d430      	bmi.n	801292c <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80128ca:	0094      	lsls	r4, r2, #2
 80128cc:	d430      	bmi.n	8012930 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80128ce:	00d0      	lsls	r0, r2, #3
 80128d0:	d430      	bmi.n	8012934 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80128d2:	0111      	lsls	r1, r2, #4
 80128d4:	d431      	bmi.n	801293a <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80128d6:	0155      	lsls	r5, r2, #5
 80128d8:	d432      	bmi.n	8012940 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80128da:	01d4      	lsls	r4, r2, #7
 80128dc:	d433      	bmi.n	8012946 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80128de:	0210      	lsls	r0, r2, #8
 80128e0:	d434      	bmi.n	801294c <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80128e2:	0251      	lsls	r1, r2, #9
 80128e4:	d435      	bmi.n	8012952 <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80128e6:	0295      	lsls	r5, r2, #10
 80128e8:	d436      	bmi.n	8012958 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80128ea:	02d4      	lsls	r4, r2, #11
 80128ec:	d437      	bmi.n	801295e <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80128ee:	0350      	lsls	r0, r2, #13
 80128f0:	d438      	bmi.n	8012964 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80128f2:	0391      	lsls	r1, r2, #14
 80128f4:	d439      	bmi.n	801296a <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80128f6:	03d5      	lsls	r5, r2, #15
 80128f8:	d43a      	bmi.n	8012970 <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80128fa:	0414      	lsls	r4, r2, #16
 80128fc:	d43b      	bmi.n	8012976 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80128fe:	0450      	lsls	r0, r2, #17
 8012900:	d43f      	bmi.n	8012982 <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012902:	0491      	lsls	r1, r2, #18
 8012904:	d43a      	bmi.n	801297c <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012906:	f012 0f08 	tst.w	r2, #8
 801290a:	bf14      	ite	ne
 801290c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012910:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012914:	e7c0      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012916:	2201      	movs	r2, #1
 8012918:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801291a:	e7bd      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801291c:	2301      	movs	r3, #1
 801291e:	e7bb      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012920:	2304      	movs	r3, #4
 8012922:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012924:	e7b8      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801292a:	e7b5      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801292c:	2340      	movs	r3, #64	; 0x40
 801292e:	e7b3      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012930:	2380      	movs	r3, #128	; 0x80
 8012932:	e7b1      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012938:	e7ae      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801293a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801293e:	e7ab      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012944:	e7a8      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801294a:	e7a5      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801294c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012950:	e7a2      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012956:	e79f      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801295c:	e79c      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 801295e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012962:	e799      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012968:	e796      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801296a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801296e:	e793      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012974:	e790      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012976:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801297a:	e78d      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801297c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012980:	e78a      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012982:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012986:	e787      	b.n	8012898 <SDMMC_CmdWriteMultiBlock+0x40>
 8012988:	24002f54 	.word	0x24002f54
 801298c:	10624dd3 	.word	0x10624dd3
 8012990:	fffee0c0 	.word	0xfffee0c0
 8012994:	00200045 	.word	0x00200045
 8012998:	002000c5 	.word	0x002000c5
 801299c:	fdffe008 	.word	0xfdffe008

080129a0 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80129a0:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129a2:	4b7d      	ldr	r3, [pc, #500]	; (8012b98 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80129a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129a8:	497c      	ldr	r1, [pc, #496]	; (8012b9c <SDMMC_CmdStopTransfer+0x1fc>)
 80129aa:	681b      	ldr	r3, [r3, #0]
{
 80129ac:	b470      	push	{r4, r5, r6}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80129ae:	60c2      	str	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 80129b0:	2600      	movs	r6, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80129b2:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129b4:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80129b8:	4c79      	ldr	r4, [pc, #484]	; (8012ba0 <SDMMC_CmdStopTransfer+0x200>)
 80129ba:	f241 110c 	movw	r1, #4364	; 0x110c
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80129be:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129c2:	0a5b      	lsrs	r3, r3, #9
 80129c4:	4a77      	ldr	r2, [pc, #476]	; (8012ba4 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80129c6:	60c5      	str	r5, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 80129c8:	6086      	str	r6, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80129ca:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129cc:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80129d0:	402c      	ands	r4, r5
 80129d2:	4321      	orrs	r1, r4
 80129d4:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80129d6:	b14b      	cbz	r3, 80129ec <SDMMC_CmdStopTransfer+0x4c>
 80129d8:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80129da:	4973      	ldr	r1, [pc, #460]	; (8012ba8 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 80129dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80129de:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80129e0:	420b      	tst	r3, r1
 80129e2:	d001      	beq.n	80129e8 <SDMMC_CmdStopTransfer+0x48>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80129e4:	049c      	lsls	r4, r3, #18
 80129e6:	d50a      	bpl.n	80129fe <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 80129e8:	1c55      	adds	r5, r2, #1
 80129ea:	d1f7      	bne.n	80129dc <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80129ec:	68c2      	ldr	r2, [r0, #12]
 80129ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80129f6:	60c2      	str	r2, [r0, #12]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	bc70      	pop	{r4, r5, r6}
 80129fc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012a00:	075a      	lsls	r2, r3, #29
 8012a02:	d454      	bmi.n	8012aae <SDMMC_CmdStopTransfer+0x10e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012a06:	f013 0301 	ands.w	r3, r3, #1
 8012a0a:	d13c      	bne.n	8012a86 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a0c:	4a67      	ldr	r2, [pc, #412]	; (8012bac <SDMMC_CmdStopTransfer+0x20c>)
 8012a0e:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012a10:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012a12:	b2d2      	uxtb	r2, r2
 8012a14:	2a0c      	cmp	r2, #12
 8012a16:	d144      	bne.n	8012aa2 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8012a18:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012a1a:	4965      	ldr	r1, [pc, #404]	; (8012bb0 <SDMMC_CmdStopTransfer+0x210>)
 8012a1c:	4011      	ands	r1, r2
 8012a1e:	2900      	cmp	r1, #0
 8012a20:	d038      	beq.n	8012a94 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012a22:	2a00      	cmp	r2, #0
 8012a24:	db36      	blt.n	8012a94 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012a26:	0053      	lsls	r3, r2, #1
 8012a28:	d448      	bmi.n	8012abc <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012a2a:	0096      	lsls	r6, r2, #2
 8012a2c:	d44c      	bmi.n	8012ac8 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012a2e:	00d5      	lsls	r5, r2, #3
 8012a30:	d450      	bmi.n	8012ad4 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012a32:	0114      	lsls	r4, r2, #4
 8012a34:	d455      	bmi.n	8012ae2 <SDMMC_CmdStopTransfer+0x142>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012a36:	0151      	lsls	r1, r2, #5
 8012a38:	d45a      	bmi.n	8012af0 <SDMMC_CmdStopTransfer+0x150>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012a3a:	01d3      	lsls	r3, r2, #7
 8012a3c:	d45f      	bmi.n	8012afe <SDMMC_CmdStopTransfer+0x15e>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012a3e:	0216      	lsls	r6, r2, #8
 8012a40:	d464      	bmi.n	8012b0c <SDMMC_CmdStopTransfer+0x16c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012a42:	0255      	lsls	r5, r2, #9
 8012a44:	d469      	bmi.n	8012b1a <SDMMC_CmdStopTransfer+0x17a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012a46:	0294      	lsls	r4, r2, #10
 8012a48:	d46e      	bmi.n	8012b28 <SDMMC_CmdStopTransfer+0x188>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012a4a:	02d1      	lsls	r1, r2, #11
 8012a4c:	d473      	bmi.n	8012b36 <SDMMC_CmdStopTransfer+0x196>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012a4e:	0353      	lsls	r3, r2, #13
 8012a50:	d478      	bmi.n	8012b44 <SDMMC_CmdStopTransfer+0x1a4>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012a52:	0396      	lsls	r6, r2, #14
 8012a54:	d47d      	bmi.n	8012b52 <SDMMC_CmdStopTransfer+0x1b2>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012a56:	03d5      	lsls	r5, r2, #15
 8012a58:	f100 8082 	bmi.w	8012b60 <SDMMC_CmdStopTransfer+0x1c0>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012a5c:	0414      	lsls	r4, r2, #16
 8012a5e:	f100 8086 	bmi.w	8012b6e <SDMMC_CmdStopTransfer+0x1ce>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012a62:	0451      	lsls	r1, r2, #17
 8012a64:	f100 8091 	bmi.w	8012b8a <SDMMC_CmdStopTransfer+0x1ea>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012a68:	0493      	lsls	r3, r2, #18
 8012a6a:	f100 8087 	bmi.w	8012b7c <SDMMC_CmdStopTransfer+0x1dc>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012a6e:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012a72:	68c2      	ldr	r2, [r0, #12]
 8012a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012a78:	bf14      	ite	ne
 8012a7a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012a7e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012a82:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012a84:	e7b8      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a86:	2201      	movs	r2, #1
 8012a88:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012a8a:	68c2      	ldr	r2, [r0, #12]
 8012a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012a90:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012a92:	e7b1      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012a94:	68c2      	ldr	r2, [r0, #12]
 8012a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 8012a9a:	bc70      	pop	{r4, r5, r6}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012a9c:	60c2      	str	r2, [r0, #12]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012aa2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012aa4:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012aaa:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012aac:	e7a4      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012aae:	2304      	movs	r3, #4
 8012ab0:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ab2:	68c2      	ldr	r2, [r0, #12]
 8012ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012ab8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012aba:	e79d      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012abc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012abe:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012ac4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012ac6:	e797      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ac8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012aca:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012ad0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012ad2:	e791      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ad4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012ade:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012ae0:	e78a      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ae2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012aec:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012aee:	e783      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012af0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012afa:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012afc:	e77c      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012afe:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b08:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b0a:	e775      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b0c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b16:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b18:	e76e      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b1a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b24:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b26:	e767      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b28:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b32:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b34:	e760      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b36:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8012b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b40:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b42:	e759      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b44:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b4e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b50:	e752      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b52:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012b54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b5c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b5e:	e74b      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b60:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012b62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b6a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b6c:	e744      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b6e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b78:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b7a:	e73d      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b7c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8012b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b86:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b88:	e736      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b8a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b94:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012b96:	e72f      	b.n	80129f8 <SDMMC_CmdStopTransfer+0x58>
 8012b98:	24002f54 	.word	0x24002f54
 8012b9c:	10624dd3 	.word	0x10624dd3
 8012ba0:	fffee0c0 	.word	0xfffee0c0
 8012ba4:	05f5e100 	.word	0x05f5e100
 8012ba8:	00200045 	.word	0x00200045
 8012bac:	002000c5 	.word	0x002000c5
 8012bb0:	fdffe008 	.word	0xfdffe008

08012bb4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012bb4:	4b4b      	ldr	r3, [pc, #300]	; (8012ce4 <SDMMC_CmdSelDesel+0x130>)
 8012bb6:	f241 3188 	movw	r1, #5000	; 0x1388
{
 8012bba:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012bbc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012bbe:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012bc2:	4d49      	ldr	r5, [pc, #292]	; (8012ce8 <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012bc4:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012bc6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012bca:	4a48      	ldr	r2, [pc, #288]	; (8012cec <SDMMC_CmdSelDesel+0x138>)
 8012bcc:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012bce:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012bd0:	402a      	ands	r2, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012bd2:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012bd6:	4314      	orrs	r4, r2
 8012bd8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012bda:	b14b      	cbz	r3, 8012bf0 <SDMMC_CmdSelDesel+0x3c>
 8012bdc:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012bde:	4944      	ldr	r1, [pc, #272]	; (8012cf0 <SDMMC_CmdSelDesel+0x13c>)
    sta_reg = SDMMCx->STA;
 8012be0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012be2:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012be4:	420b      	tst	r3, r1
 8012be6:	d001      	beq.n	8012bec <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012be8:	049c      	lsls	r4, r3, #18
 8012bea:	d506      	bpl.n	8012bfa <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 8012bec:	1c55      	adds	r5, r2, #1
 8012bee:	d1f7      	bne.n	8012be0 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012bf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	bc30      	pop	{r4, r5}
 8012bf8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012bfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012bfc:	075b      	lsls	r3, r3, #29
 8012bfe:	d43d      	bmi.n	8012c7c <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c02:	f013 0301 	ands.w	r3, r3, #1
 8012c06:	d134      	bne.n	8012c72 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c08:	4b3a      	ldr	r3, [pc, #232]	; (8012cf4 <SDMMC_CmdSelDesel+0x140>)
 8012c0a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012c0c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	2b07      	cmp	r3, #7
 8012c12:	d131      	bne.n	8012c78 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8012c14:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012c16:	4b38      	ldr	r3, [pc, #224]	; (8012cf8 <SDMMC_CmdSelDesel+0x144>)
 8012c18:	4013      	ands	r3, r2
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d0ea      	beq.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012c1e:	2a00      	cmp	r2, #0
 8012c20:	db2f      	blt.n	8012c82 <SDMMC_CmdSelDesel+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012c22:	0055      	lsls	r5, r2, #1
 8012c24:	d430      	bmi.n	8012c88 <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012c26:	0094      	lsls	r4, r2, #2
 8012c28:	d430      	bmi.n	8012c8c <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012c2a:	00d0      	lsls	r0, r2, #3
 8012c2c:	d430      	bmi.n	8012c90 <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012c2e:	0111      	lsls	r1, r2, #4
 8012c30:	d431      	bmi.n	8012c96 <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012c32:	0155      	lsls	r5, r2, #5
 8012c34:	d432      	bmi.n	8012c9c <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012c36:	01d4      	lsls	r4, r2, #7
 8012c38:	d433      	bmi.n	8012ca2 <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012c3a:	0210      	lsls	r0, r2, #8
 8012c3c:	d434      	bmi.n	8012ca8 <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012c3e:	0251      	lsls	r1, r2, #9
 8012c40:	d435      	bmi.n	8012cae <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012c42:	0295      	lsls	r5, r2, #10
 8012c44:	d436      	bmi.n	8012cb4 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012c46:	02d4      	lsls	r4, r2, #11
 8012c48:	d437      	bmi.n	8012cba <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012c4a:	0350      	lsls	r0, r2, #13
 8012c4c:	d438      	bmi.n	8012cc0 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012c4e:	0391      	lsls	r1, r2, #14
 8012c50:	d439      	bmi.n	8012cc6 <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012c52:	03d5      	lsls	r5, r2, #15
 8012c54:	d43a      	bmi.n	8012ccc <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012c56:	0414      	lsls	r4, r2, #16
 8012c58:	d43b      	bmi.n	8012cd2 <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012c5a:	0450      	lsls	r0, r2, #17
 8012c5c:	d43f      	bmi.n	8012cde <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012c5e:	0491      	lsls	r1, r2, #18
 8012c60:	d43a      	bmi.n	8012cd8 <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012c62:	f012 0f08 	tst.w	r2, #8
 8012c66:	bf14      	ite	ne
 8012c68:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012c6c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012c70:	e7c0      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c72:	2201      	movs	r2, #1
 8012c74:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c76:	e7bd      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e7bb      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c7c:	2304      	movs	r3, #4
 8012c7e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c80:	e7b8      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012c86:	e7b5      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012c88:	2340      	movs	r3, #64	; 0x40
 8012c8a:	e7b3      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012c8c:	2380      	movs	r3, #128	; 0x80
 8012c8e:	e7b1      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c94:	e7ae      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c9a:	e7ab      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ca0:	e7a8      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ca6:	e7a5      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cac:	e7a2      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012cb2:	e79f      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012cb8:	e79c      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cbe:	e799      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012cc4:	e796      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012cc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012cca:	e793      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012ccc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012cd0:	e790      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012cd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012cd6:	e78d      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012cd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012cdc:	e78a      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012cde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012ce2:	e787      	b.n	8012bf4 <SDMMC_CmdSelDesel+0x40>
 8012ce4:	24002f54 	.word	0x24002f54
 8012ce8:	10624dd3 	.word	0x10624dd3
 8012cec:	fffee0c0 	.word	0xfffee0c0
 8012cf0:	00200045 	.word	0x00200045
 8012cf4:	002000c5 	.word	0x002000c5
 8012cf8:	fdffe008 	.word	0xfdffe008

08012cfc <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012cfc:	4b11      	ldr	r3, [pc, #68]	; (8012d44 <SDMMC_CmdGoIdleState+0x48>)
{
 8012cfe:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d00:	4a11      	ldr	r2, [pc, #68]	; (8012d48 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d02:	6818      	ldr	r0, [r3, #0]
 8012d04:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8012d08:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d0a:	4c10      	ldr	r4, [pc, #64]	; (8012d4c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8012d0c:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d0e:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 8012d12:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d14:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d16:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d18:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d1a:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012d22:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d24:	e002      	b.n	8012d2c <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012d26:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8012d28:	0612      	lsls	r2, r2, #24
 8012d2a:	d405      	bmi.n	8012d38 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	d2fa      	bcs.n	8012d26 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8012d30:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012d34:	bc30      	pop	{r4, r5}
 8012d36:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d38:	4b05      	ldr	r3, [pc, #20]	; (8012d50 <SDMMC_CmdGoIdleState+0x54>)
  return SDMMC_ERROR_NONE;
 8012d3a:	2000      	movs	r0, #0
}
 8012d3c:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d3e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop
 8012d44:	24002f54 	.word	0x24002f54
 8012d48:	fffee0c0 	.word	0xfffee0c0
 8012d4c:	10624dd3 	.word	0x10624dd3
 8012d50:	002000c5 	.word	0x002000c5

08012d54 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d54:	4a1b      	ldr	r2, [pc, #108]	; (8012dc4 <SDMMC_CmdOperCond+0x70>)
{
 8012d56:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d58:	491b      	ldr	r1, [pc, #108]	; (8012dc8 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d5a:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d5e:	6812      	ldr	r2, [r2, #0]
{
 8012d60:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8012d62:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d66:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d6a:	4c18      	ldr	r4, [pc, #96]	; (8012dcc <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d6c:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8012d70:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d72:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d74:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d76:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d7a:	402c      	ands	r4, r5
 8012d7c:	4320      	orrs	r0, r4
 8012d7e:	60d8      	str	r0, [r3, #12]

  do
  {
    if (count-- == 0U)
 8012d80:	b14a      	cbz	r2, 8012d96 <SDMMC_CmdOperCond+0x42>
 8012d82:	1e51      	subs	r1, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8012d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8012d86:	3901      	subs	r1, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d88:	f012 0f45 	tst.w	r2, #69	; 0x45
 8012d8c:	d001      	beq.n	8012d92 <SDMMC_CmdOperCond+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d8e:	0490      	lsls	r0, r2, #18
 8012d90:	d505      	bpl.n	8012d9e <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 8012d92:	1c4c      	adds	r4, r1, #1
 8012d94:	d1f6      	bne.n	8012d84 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8012d96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012d9a:	bc30      	pop	{r4, r5}
 8012d9c:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012da0:	0751      	lsls	r1, r2, #29
 8012da2:	d40c      	bmi.n	8012dbe <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012da4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012da6:	f010 0001 	ands.w	r0, r0, #1
 8012daa:	d105      	bne.n	8012db8 <SDMMC_CmdOperCond+0x64>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012dae:	0652      	lsls	r2, r2, #25
 8012db0:	d5f3      	bpl.n	8012d9a <SDMMC_CmdOperCond+0x46>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012db2:	2240      	movs	r2, #64	; 0x40
 8012db4:	639a      	str	r2, [r3, #56]	; 0x38
 8012db6:	e7f0      	b.n	8012d9a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012db8:	2201      	movs	r2, #1
 8012dba:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012dbc:	e7ed      	b.n	8012d9a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012dbe:	2004      	movs	r0, #4
 8012dc0:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012dc2:	e7ea      	b.n	8012d9a <SDMMC_CmdOperCond+0x46>
 8012dc4:	24002f54 	.word	0x24002f54
 8012dc8:	10624dd3 	.word	0x10624dd3
 8012dcc:	fffee0c0 	.word	0xfffee0c0

08012dd0 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012dd0:	4b4b      	ldr	r3, [pc, #300]	; (8012f00 <SDMMC_CmdAppCommand+0x130>)
 8012dd2:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8012dd6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012dd8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012dda:	f241 1437 	movw	r4, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012dde:	4d49      	ldr	r5, [pc, #292]	; (8012f04 <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012de0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012de2:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012de6:	4948      	ldr	r1, [pc, #288]	; (8012f08 <SDMMC_CmdAppCommand+0x138>)
 8012de8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012dea:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012dec:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012dee:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012df2:	430c      	orrs	r4, r1
 8012df4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012df6:	b14b      	cbz	r3, 8012e0c <SDMMC_CmdAppCommand+0x3c>
 8012df8:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012dfa:	4944      	ldr	r1, [pc, #272]	; (8012f0c <SDMMC_CmdAppCommand+0x13c>)
    sta_reg = SDMMCx->STA;
 8012dfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012dfe:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012e00:	420b      	tst	r3, r1
 8012e02:	d001      	beq.n	8012e08 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012e04:	049c      	lsls	r4, r3, #18
 8012e06:	d506      	bpl.n	8012e16 <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 8012e08:	1c55      	adds	r5, r2, #1
 8012e0a:	d1f7      	bne.n	8012dfc <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012e0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	bc30      	pop	{r4, r5}
 8012e14:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e18:	075b      	lsls	r3, r3, #29
 8012e1a:	d43d      	bmi.n	8012e98 <SDMMC_CmdAppCommand+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e1e:	f013 0301 	ands.w	r3, r3, #1
 8012e22:	d134      	bne.n	8012e8e <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e24:	4b3a      	ldr	r3, [pc, #232]	; (8012f10 <SDMMC_CmdAppCommand+0x140>)
 8012e26:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012e28:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b37      	cmp	r3, #55	; 0x37
 8012e2e:	d131      	bne.n	8012e94 <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 8012e30:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012e32:	4b38      	ldr	r3, [pc, #224]	; (8012f14 <SDMMC_CmdAppCommand+0x144>)
 8012e34:	4013      	ands	r3, r2
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d0ea      	beq.n	8012e10 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012e3a:	2a00      	cmp	r2, #0
 8012e3c:	db2f      	blt.n	8012e9e <SDMMC_CmdAppCommand+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012e3e:	0055      	lsls	r5, r2, #1
 8012e40:	d430      	bmi.n	8012ea4 <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012e42:	0094      	lsls	r4, r2, #2
 8012e44:	d430      	bmi.n	8012ea8 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012e46:	00d0      	lsls	r0, r2, #3
 8012e48:	d430      	bmi.n	8012eac <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012e4a:	0111      	lsls	r1, r2, #4
 8012e4c:	d431      	bmi.n	8012eb2 <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012e4e:	0155      	lsls	r5, r2, #5
 8012e50:	d432      	bmi.n	8012eb8 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012e52:	01d4      	lsls	r4, r2, #7
 8012e54:	d433      	bmi.n	8012ebe <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012e56:	0210      	lsls	r0, r2, #8
 8012e58:	d434      	bmi.n	8012ec4 <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012e5a:	0251      	lsls	r1, r2, #9
 8012e5c:	d435      	bmi.n	8012eca <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012e5e:	0295      	lsls	r5, r2, #10
 8012e60:	d436      	bmi.n	8012ed0 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012e62:	02d4      	lsls	r4, r2, #11
 8012e64:	d437      	bmi.n	8012ed6 <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012e66:	0350      	lsls	r0, r2, #13
 8012e68:	d438      	bmi.n	8012edc <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012e6a:	0391      	lsls	r1, r2, #14
 8012e6c:	d439      	bmi.n	8012ee2 <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012e6e:	03d5      	lsls	r5, r2, #15
 8012e70:	d43a      	bmi.n	8012ee8 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012e72:	0414      	lsls	r4, r2, #16
 8012e74:	d43b      	bmi.n	8012eee <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012e76:	0450      	lsls	r0, r2, #17
 8012e78:	d43f      	bmi.n	8012efa <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012e7a:	0491      	lsls	r1, r2, #18
 8012e7c:	d43a      	bmi.n	8012ef4 <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012e7e:	f012 0f08 	tst.w	r2, #8
 8012e82:	bf14      	ite	ne
 8012e84:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012e88:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012e8c:	e7c0      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e8e:	2201      	movs	r2, #1
 8012e90:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e92:	e7bd      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e94:	2301      	movs	r3, #1
 8012e96:	e7bb      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e98:	2304      	movs	r3, #4
 8012e9a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e9c:	e7b8      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012ea2:	e7b5      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012ea4:	2340      	movs	r3, #64	; 0x40
 8012ea6:	e7b3      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012ea8:	2380      	movs	r3, #128	; 0x80
 8012eaa:	e7b1      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012eb0:	e7ae      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012eb6:	e7ab      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ebc:	e7a8      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ec2:	e7a5      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ec8:	e7a2      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ece:	e79f      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012ed0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ed4:	e79c      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012eda:	e799      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012ee0:	e796      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012ee2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ee6:	e793      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012ee8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012eec:	e790      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012eee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012ef2:	e78d      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012ef4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012ef8:	e78a      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012efe:	e787      	b.n	8012e10 <SDMMC_CmdAppCommand+0x40>
 8012f00:	24002f54 	.word	0x24002f54
 8012f04:	10624dd3 	.word	0x10624dd3
 8012f08:	fffee0c0 	.word	0xfffee0c0
 8012f0c:	00200045 	.word	0x00200045
 8012f10:	002000c5 	.word	0x002000c5
 8012f14:	fdffe008 	.word	0xfdffe008

08012f18 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012f18:	4b17      	ldr	r3, [pc, #92]	; (8012f78 <SDMMC_CmdAppOperCommand+0x60>)
 8012f1a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8012f1e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012f20:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f22:	f241 1429 	movw	r4, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012f26:	4d15      	ldr	r5, [pc, #84]	; (8012f7c <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 8012f28:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012f2a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f2e:	4914      	ldr	r1, [pc, #80]	; (8012f80 <SDMMC_CmdAppOperCommand+0x68>)
 8012f30:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012f32:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f34:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012f36:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f3a:	430c      	orrs	r4, r1
 8012f3c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012f3e:	b14b      	cbz	r3, 8012f54 <SDMMC_CmdAppOperCommand+0x3c>
 8012f40:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8012f42:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012f44:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012f46:	f013 0f45 	tst.w	r3, #69	; 0x45
 8012f4a:	d001      	beq.n	8012f50 <SDMMC_CmdAppOperCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f4c:	049b      	lsls	r3, r3, #18
 8012f4e:	d506      	bpl.n	8012f5e <SDMMC_CmdAppOperCommand+0x46>
    if (count-- == 0U)
 8012f50:	1c51      	adds	r1, r2, #1
 8012f52:	d1f6      	bne.n	8012f42 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8012f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	bc30      	pop	{r4, r5}
 8012f5c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012f60:	f013 0304 	ands.w	r3, r3, #4
 8012f64:	d104      	bne.n	8012f70 <SDMMC_CmdAppOperCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f66:	4a07      	ldr	r2, [pc, #28]	; (8012f84 <SDMMC_CmdAppOperCommand+0x6c>)
}
 8012f68:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f6a:	6382      	str	r2, [r0, #56]	; 0x38
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f70:	2304      	movs	r3, #4
 8012f72:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f74:	e7f0      	b.n	8012f58 <SDMMC_CmdAppOperCommand+0x40>
 8012f76:	bf00      	nop
 8012f78:	24002f54 	.word	0x24002f54
 8012f7c:	10624dd3 	.word	0x10624dd3
 8012f80:	fffee0c0 	.word	0xfffee0c0
 8012f84:	002000c5 	.word	0x002000c5

08012f88 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f88:	4b4b      	ldr	r3, [pc, #300]	; (80130b8 <SDMMC_CmdBusWidth+0x130>)
 8012f8a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8012f8e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f90:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f92:	f241 1406 	movw	r4, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f96:	4d49      	ldr	r5, [pc, #292]	; (80130bc <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012f98:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f9a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f9e:	4948      	ldr	r1, [pc, #288]	; (80130c0 <SDMMC_CmdBusWidth+0x138>)
 8012fa0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fa2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fa4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fa6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012faa:	430c      	orrs	r4, r1
 8012fac:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012fae:	b14b      	cbz	r3, 8012fc4 <SDMMC_CmdBusWidth+0x3c>
 8012fb0:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012fb2:	4944      	ldr	r1, [pc, #272]	; (80130c4 <SDMMC_CmdBusWidth+0x13c>)
    sta_reg = SDMMCx->STA;
 8012fb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012fb6:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012fb8:	420b      	tst	r3, r1
 8012fba:	d001      	beq.n	8012fc0 <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012fbc:	049c      	lsls	r4, r3, #18
 8012fbe:	d506      	bpl.n	8012fce <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8012fc0:	1c55      	adds	r5, r2, #1
 8012fc2:	d1f7      	bne.n	8012fb4 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	bc30      	pop	{r4, r5}
 8012fcc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012fce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012fd0:	075b      	lsls	r3, r3, #29
 8012fd2:	d43d      	bmi.n	8013050 <SDMMC_CmdBusWidth+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012fd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012fd6:	f013 0301 	ands.w	r3, r3, #1
 8012fda:	d134      	bne.n	8013046 <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012fdc:	4b3a      	ldr	r3, [pc, #232]	; (80130c8 <SDMMC_CmdBusWidth+0x140>)
 8012fde:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012fe0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	2b06      	cmp	r3, #6
 8012fe6:	d131      	bne.n	801304c <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8012fe8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012fea:	4b38      	ldr	r3, [pc, #224]	; (80130cc <SDMMC_CmdBusWidth+0x144>)
 8012fec:	4013      	ands	r3, r2
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d0ea      	beq.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012ff2:	2a00      	cmp	r2, #0
 8012ff4:	db2f      	blt.n	8013056 <SDMMC_CmdBusWidth+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012ff6:	0055      	lsls	r5, r2, #1
 8012ff8:	d430      	bmi.n	801305c <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012ffa:	0094      	lsls	r4, r2, #2
 8012ffc:	d430      	bmi.n	8013060 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012ffe:	00d0      	lsls	r0, r2, #3
 8013000:	d430      	bmi.n	8013064 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013002:	0111      	lsls	r1, r2, #4
 8013004:	d431      	bmi.n	801306a <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013006:	0155      	lsls	r5, r2, #5
 8013008:	d432      	bmi.n	8013070 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801300a:	01d4      	lsls	r4, r2, #7
 801300c:	d433      	bmi.n	8013076 <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801300e:	0210      	lsls	r0, r2, #8
 8013010:	d434      	bmi.n	801307c <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013012:	0251      	lsls	r1, r2, #9
 8013014:	d435      	bmi.n	8013082 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013016:	0295      	lsls	r5, r2, #10
 8013018:	d436      	bmi.n	8013088 <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801301a:	02d4      	lsls	r4, r2, #11
 801301c:	d437      	bmi.n	801308e <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801301e:	0350      	lsls	r0, r2, #13
 8013020:	d438      	bmi.n	8013094 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013022:	0391      	lsls	r1, r2, #14
 8013024:	d439      	bmi.n	801309a <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013026:	03d5      	lsls	r5, r2, #15
 8013028:	d43a      	bmi.n	80130a0 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801302a:	0414      	lsls	r4, r2, #16
 801302c:	d43b      	bmi.n	80130a6 <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801302e:	0450      	lsls	r0, r2, #17
 8013030:	d43f      	bmi.n	80130b2 <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013032:	0491      	lsls	r1, r2, #18
 8013034:	d43a      	bmi.n	80130ac <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013036:	f012 0f08 	tst.w	r2, #8
 801303a:	bf14      	ite	ne
 801303c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013040:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013044:	e7c0      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013046:	2201      	movs	r2, #1
 8013048:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801304a:	e7bd      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801304c:	2301      	movs	r3, #1
 801304e:	e7bb      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013050:	2304      	movs	r3, #4
 8013052:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013054:	e7b8      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801305a:	e7b5      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801305c:	2340      	movs	r3, #64	; 0x40
 801305e:	e7b3      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013060:	2380      	movs	r3, #128	; 0x80
 8013062:	e7b1      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013068:	e7ae      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801306a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801306e:	e7ab      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013074:	e7a8      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801307a:	e7a5      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801307c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013080:	e7a2      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013086:	e79f      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801308c:	e79c      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 801308e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013092:	e799      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013098:	e796      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801309a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801309e:	e793      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80130a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80130a4:	e790      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80130a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80130aa:	e78d      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80130ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80130b0:	e78a      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80130b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80130b6:	e787      	b.n	8012fc8 <SDMMC_CmdBusWidth+0x40>
 80130b8:	24002f54 	.word	0x24002f54
 80130bc:	10624dd3 	.word	0x10624dd3
 80130c0:	fffee0c0 	.word	0xfffee0c0
 80130c4:	00200045 	.word	0x00200045
 80130c8:	002000c5 	.word	0x002000c5
 80130cc:	fdffe008 	.word	0xfdffe008

080130d0 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130d0:	4b4c      	ldr	r3, [pc, #304]	; (8013204 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130d2:	f241 1133 	movw	r1, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130d6:	4a4c      	ldr	r2, [pc, #304]	; (8013208 <SDMMC_CmdSendSCR+0x138>)
 80130d8:	681b      	ldr	r3, [r3, #0]
{
 80130da:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80130dc:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130de:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130e2:	4c4a      	ldr	r4, [pc, #296]	; (801320c <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130e4:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80130e8:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130ea:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130ec:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130ee:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130f2:	402c      	ands	r4, r5
 80130f4:	4321      	orrs	r1, r4
 80130f6:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80130f8:	b14b      	cbz	r3, 801310e <SDMMC_CmdSendSCR+0x3e>
 80130fa:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80130fc:	4944      	ldr	r1, [pc, #272]	; (8013210 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 80130fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013100:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013102:	420b      	tst	r3, r1
 8013104:	d001      	beq.n	801310a <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013106:	049c      	lsls	r4, r3, #18
 8013108:	d506      	bpl.n	8013118 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 801310a:	1c55      	adds	r5, r2, #1
 801310c:	d1f7      	bne.n	80130fe <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 801310e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013112:	4618      	mov	r0, r3
 8013114:	bc30      	pop	{r4, r5}
 8013116:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013118:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801311a:	075b      	lsls	r3, r3, #29
 801311c:	d43d      	bmi.n	801319a <SDMMC_CmdSendSCR+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801311e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013120:	f013 0301 	ands.w	r3, r3, #1
 8013124:	d134      	bne.n	8013190 <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013126:	4b3b      	ldr	r3, [pc, #236]	; (8013214 <SDMMC_CmdSendSCR+0x144>)
 8013128:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801312a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801312c:	b2db      	uxtb	r3, r3
 801312e:	2b33      	cmp	r3, #51	; 0x33
 8013130:	d131      	bne.n	8013196 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 8013132:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013134:	4b38      	ldr	r3, [pc, #224]	; (8013218 <SDMMC_CmdSendSCR+0x148>)
 8013136:	4013      	ands	r3, r2
 8013138:	2b00      	cmp	r3, #0
 801313a:	d0ea      	beq.n	8013112 <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801313c:	2a00      	cmp	r2, #0
 801313e:	db2f      	blt.n	80131a0 <SDMMC_CmdSendSCR+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013140:	0055      	lsls	r5, r2, #1
 8013142:	d430      	bmi.n	80131a6 <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013144:	0094      	lsls	r4, r2, #2
 8013146:	d430      	bmi.n	80131aa <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013148:	00d0      	lsls	r0, r2, #3
 801314a:	d430      	bmi.n	80131ae <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801314c:	0111      	lsls	r1, r2, #4
 801314e:	d431      	bmi.n	80131b4 <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013150:	0155      	lsls	r5, r2, #5
 8013152:	d432      	bmi.n	80131ba <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013154:	01d4      	lsls	r4, r2, #7
 8013156:	d433      	bmi.n	80131c0 <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013158:	0210      	lsls	r0, r2, #8
 801315a:	d434      	bmi.n	80131c6 <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801315c:	0251      	lsls	r1, r2, #9
 801315e:	d435      	bmi.n	80131cc <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013160:	0295      	lsls	r5, r2, #10
 8013162:	d436      	bmi.n	80131d2 <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013164:	02d4      	lsls	r4, r2, #11
 8013166:	d437      	bmi.n	80131d8 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013168:	0350      	lsls	r0, r2, #13
 801316a:	d438      	bmi.n	80131de <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801316c:	0391      	lsls	r1, r2, #14
 801316e:	d439      	bmi.n	80131e4 <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013170:	03d5      	lsls	r5, r2, #15
 8013172:	d43a      	bmi.n	80131ea <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013174:	0414      	lsls	r4, r2, #16
 8013176:	d43b      	bmi.n	80131f0 <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013178:	0450      	lsls	r0, r2, #17
 801317a:	d43f      	bmi.n	80131fc <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801317c:	0491      	lsls	r1, r2, #18
 801317e:	d43a      	bmi.n	80131f6 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013180:	f012 0f08 	tst.w	r2, #8
 8013184:	bf14      	ite	ne
 8013186:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801318a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801318e:	e7c0      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013190:	2201      	movs	r2, #1
 8013192:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013194:	e7bd      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013196:	2301      	movs	r3, #1
 8013198:	e7bb      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801319a:	2304      	movs	r3, #4
 801319c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801319e:	e7b8      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80131a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80131a4:	e7b5      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80131a6:	2340      	movs	r3, #64	; 0x40
 80131a8:	e7b3      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80131aa:	2380      	movs	r3, #128	; 0x80
 80131ac:	e7b1      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80131ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131b2:	e7ae      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80131b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131b8:	e7ab      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80131ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131be:	e7a8      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80131c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131c4:	e7a5      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80131c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131ca:	e7a2      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80131cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80131d0:	e79f      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80131d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80131d6:	e79c      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 80131d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80131dc:	e799      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80131de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80131e2:	e796      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80131e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80131e8:	e793      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80131ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80131ee:	e790      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80131f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80131f4:	e78d      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80131f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80131fa:	e78a      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80131fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013200:	e787      	b.n	8013112 <SDMMC_CmdSendSCR+0x42>
 8013202:	bf00      	nop
 8013204:	24002f54 	.word	0x24002f54
 8013208:	10624dd3 	.word	0x10624dd3
 801320c:	fffee0c0 	.word	0xfffee0c0
 8013210:	00200045 	.word	0x00200045
 8013214:	002000c5 	.word	0x002000c5
 8013218:	fdffe008 	.word	0xfdffe008

0801321c <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801321c:	4a19      	ldr	r2, [pc, #100]	; (8013284 <SDMMC_CmdSendCID+0x68>)
{
 801321e:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013220:	4919      	ldr	r1, [pc, #100]	; (8013288 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013222:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013226:	6812      	ldr	r2, [r2, #0]
{
 8013228:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 801322a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801322c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013230:	4c16      	ldr	r4, [pc, #88]	; (801328c <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013232:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8013236:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013238:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801323a:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801323c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013240:	402c      	ands	r4, r5
 8013242:	4320      	orrs	r0, r4
 8013244:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 8013246:	b14a      	cbz	r2, 801325c <SDMMC_CmdSendCID+0x40>
 8013248:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 801324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 801324c:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801324e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013252:	d001      	beq.n	8013258 <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013254:	0490      	lsls	r0, r2, #18
 8013256:	d505      	bpl.n	8013264 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 8013258:	1c4c      	adds	r4, r1, #1
 801325a:	d1f6      	bne.n	801324a <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 801325c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013260:	bc30      	pop	{r4, r5}
 8013262:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013266:	0752      	lsls	r2, r2, #29
 8013268:	d408      	bmi.n	801327c <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801326a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801326c:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013270:	bf14      	ite	ne
 8013272:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013274:	4a06      	ldreq	r2, [pc, #24]	; (8013290 <SDMMC_CmdSendCID+0x74>)
}
 8013276:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013278:	639a      	str	r2, [r3, #56]	; 0x38
}
 801327a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801327c:	2004      	movs	r0, #4
 801327e:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013280:	e7ee      	b.n	8013260 <SDMMC_CmdSendCID+0x44>
 8013282:	bf00      	nop
 8013284:	24002f54 	.word	0x24002f54
 8013288:	10624dd3 	.word	0x10624dd3
 801328c:	fffee0c0 	.word	0xfffee0c0
 8013290:	002000c5 	.word	0x002000c5

08013294 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013294:	4a18      	ldr	r2, [pc, #96]	; (80132f8 <SDMMC_CmdSendCSD+0x64>)
{
 8013296:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013298:	f241 3088 	movw	r0, #5000	; 0x1388
 801329c:	6812      	ldr	r2, [r2, #0]
{
 801329e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80132a0:	4d16      	ldr	r5, [pc, #88]	; (80132fc <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132a2:	f241 3409 	movw	r4, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 80132a6:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80132a8:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132ac:	4914      	ldr	r1, [pc, #80]	; (8013300 <SDMMC_CmdSendCSD+0x6c>)
 80132ae:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80132b0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132b2:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80132b4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132b8:	430c      	orrs	r4, r1
 80132ba:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 80132bc:	b14a      	cbz	r2, 80132d2 <SDMMC_CmdSendCSD+0x3e>
 80132be:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 80132c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 80132c2:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80132c4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80132c8:	d001      	beq.n	80132ce <SDMMC_CmdSendCSD+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132ca:	0490      	lsls	r0, r2, #18
 80132cc:	d505      	bpl.n	80132da <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 80132ce:	1c4c      	adds	r4, r1, #1
 80132d0:	d1f6      	bne.n	80132c0 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80132d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80132d6:	bc30      	pop	{r4, r5}
 80132d8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132dc:	0752      	lsls	r2, r2, #29
 80132de:	d408      	bmi.n	80132f2 <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80132e2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80132e6:	bf14      	ite	ne
 80132e8:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80132ea:	4a06      	ldreq	r2, [pc, #24]	; (8013304 <SDMMC_CmdSendCSD+0x70>)
}
 80132ec:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80132ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80132f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80132f2:	2004      	movs	r0, #4
 80132f4:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132f6:	e7ee      	b.n	80132d6 <SDMMC_CmdSendCSD+0x42>
 80132f8:	24002f54 	.word	0x24002f54
 80132fc:	10624dd3 	.word	0x10624dd3
 8013300:	fffee0c0 	.word	0xfffee0c0
 8013304:	002000c5 	.word	0x002000c5

08013308 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013308:	4b26      	ldr	r3, [pc, #152]	; (80133a4 <SDMMC_CmdSetRelAdd+0x9c>)
 801330a:	4a27      	ldr	r2, [pc, #156]	; (80133a8 <SDMMC_CmdSetRelAdd+0xa0>)
 801330c:	681b      	ldr	r3, [r3, #0]
{
 801330e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013310:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013312:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013316:	4d25      	ldr	r5, [pc, #148]	; (80133ac <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 8013318:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801331a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801331c:	68c2      	ldr	r2, [r0, #12]
 801331e:	f241 1403 	movw	r4, #4355	; 0x1103
 8013322:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013324:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013328:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801332a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801332e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013330:	b14b      	cbz	r3, 8013346 <SDMMC_CmdSetRelAdd+0x3e>
 8013332:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8013334:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013336:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013338:	f013 0f45 	tst.w	r3, #69	; 0x45
 801333c:	d001      	beq.n	8013342 <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801333e:	049d      	lsls	r5, r3, #18
 8013340:	d506      	bpl.n	8013350 <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 8013342:	1c53      	adds	r3, r2, #1
 8013344:	d1f6      	bne.n	8013334 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013346:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801334a:	4618      	mov	r0, r3
 801334c:	bc30      	pop	{r4, r5}
 801334e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013350:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013352:	075c      	lsls	r4, r3, #29
 8013354:	d41c      	bmi.n	8013390 <SDMMC_CmdSetRelAdd+0x88>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013356:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013358:	f013 0301 	ands.w	r3, r3, #1
 801335c:	d113      	bne.n	8013386 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 801335e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013360:	b2db      	uxtb	r3, r3
 8013362:	2b03      	cmp	r3, #3
 8013364:	d112      	bne.n	801338c <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013366:	4b12      	ldr	r3, [pc, #72]	; (80133b0 <SDMMC_CmdSetRelAdd+0xa8>)
 8013368:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 801336a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801336c:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8013370:	d014      	beq.n	801339c <SDMMC_CmdSetRelAdd+0x94>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013372:	0451      	lsls	r1, r2, #17
 8013374:	d40f      	bmi.n	8013396 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013376:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 801337a:	bf14      	ite	ne
 801337c:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8013380:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013384:	e7e1      	b.n	801334a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013386:	2201      	movs	r2, #1
 8013388:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801338a:	e7de      	b.n	801334a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801338c:	2301      	movs	r3, #1
 801338e:	e7dc      	b.n	801334a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013390:	2304      	movs	r3, #4
 8013392:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013394:	e7d9      	b.n	801334a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801339a:	e7d6      	b.n	801334a <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 801339c:	0c12      	lsrs	r2, r2, #16
 801339e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 80133a0:	e7d3      	b.n	801334a <SDMMC_CmdSetRelAdd+0x42>
 80133a2:	bf00      	nop
 80133a4:	24002f54 	.word	0x24002f54
 80133a8:	10624dd3 	.word	0x10624dd3
 80133ac:	fffee0c0 	.word	0xfffee0c0
 80133b0:	002000c5 	.word	0x002000c5

080133b4 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133b4:	4b4b      	ldr	r3, [pc, #300]	; (80134e4 <SDMMC_CmdSendStatus+0x130>)
 80133b6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80133ba:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133bc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133be:	f241 140d 	movw	r4, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133c2:	4d49      	ldr	r5, [pc, #292]	; (80134e8 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 80133c4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133c6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133ca:	4948      	ldr	r1, [pc, #288]	; (80134ec <SDMMC_CmdSendStatus+0x138>)
 80133cc:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133ce:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133d0:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133d2:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133d6:	430c      	orrs	r4, r1
 80133d8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80133da:	b14b      	cbz	r3, 80133f0 <SDMMC_CmdSendStatus+0x3c>
 80133dc:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80133de:	4944      	ldr	r1, [pc, #272]	; (80134f0 <SDMMC_CmdSendStatus+0x13c>)
    sta_reg = SDMMCx->STA;
 80133e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80133e2:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80133e4:	420b      	tst	r3, r1
 80133e6:	d001      	beq.n	80133ec <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80133e8:	049c      	lsls	r4, r3, #18
 80133ea:	d506      	bpl.n	80133fa <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 80133ec:	1c55      	adds	r5, r2, #1
 80133ee:	d1f7      	bne.n	80133e0 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80133f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	bc30      	pop	{r4, r5}
 80133f8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80133fc:	075b      	lsls	r3, r3, #29
 80133fe:	d43d      	bmi.n	801347c <SDMMC_CmdSendStatus+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013400:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013402:	f013 0301 	ands.w	r3, r3, #1
 8013406:	d134      	bne.n	8013472 <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013408:	4b3a      	ldr	r3, [pc, #232]	; (80134f4 <SDMMC_CmdSendStatus+0x140>)
 801340a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801340c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801340e:	b2db      	uxtb	r3, r3
 8013410:	2b0d      	cmp	r3, #13
 8013412:	d131      	bne.n	8013478 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013414:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013416:	4b38      	ldr	r3, [pc, #224]	; (80134f8 <SDMMC_CmdSendStatus+0x144>)
 8013418:	4013      	ands	r3, r2
 801341a:	2b00      	cmp	r3, #0
 801341c:	d0ea      	beq.n	80133f4 <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801341e:	2a00      	cmp	r2, #0
 8013420:	db2f      	blt.n	8013482 <SDMMC_CmdSendStatus+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013422:	0055      	lsls	r5, r2, #1
 8013424:	d430      	bmi.n	8013488 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013426:	0094      	lsls	r4, r2, #2
 8013428:	d430      	bmi.n	801348c <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801342a:	00d0      	lsls	r0, r2, #3
 801342c:	d430      	bmi.n	8013490 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801342e:	0111      	lsls	r1, r2, #4
 8013430:	d431      	bmi.n	8013496 <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013432:	0155      	lsls	r5, r2, #5
 8013434:	d432      	bmi.n	801349c <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013436:	01d4      	lsls	r4, r2, #7
 8013438:	d433      	bmi.n	80134a2 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801343a:	0210      	lsls	r0, r2, #8
 801343c:	d434      	bmi.n	80134a8 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801343e:	0251      	lsls	r1, r2, #9
 8013440:	d435      	bmi.n	80134ae <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013442:	0295      	lsls	r5, r2, #10
 8013444:	d436      	bmi.n	80134b4 <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013446:	02d4      	lsls	r4, r2, #11
 8013448:	d437      	bmi.n	80134ba <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801344a:	0350      	lsls	r0, r2, #13
 801344c:	d438      	bmi.n	80134c0 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801344e:	0391      	lsls	r1, r2, #14
 8013450:	d439      	bmi.n	80134c6 <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013452:	03d5      	lsls	r5, r2, #15
 8013454:	d43a      	bmi.n	80134cc <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013456:	0414      	lsls	r4, r2, #16
 8013458:	d43b      	bmi.n	80134d2 <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801345a:	0450      	lsls	r0, r2, #17
 801345c:	d43f      	bmi.n	80134de <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801345e:	0491      	lsls	r1, r2, #18
 8013460:	d43a      	bmi.n	80134d8 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013462:	f012 0f08 	tst.w	r2, #8
 8013466:	bf14      	ite	ne
 8013468:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801346c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013470:	e7c0      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013472:	2201      	movs	r2, #1
 8013474:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013476:	e7bd      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013478:	2301      	movs	r3, #1
 801347a:	e7bb      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801347c:	2304      	movs	r3, #4
 801347e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013480:	e7b8      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013486:	e7b5      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013488:	2340      	movs	r3, #64	; 0x40
 801348a:	e7b3      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801348c:	2380      	movs	r3, #128	; 0x80
 801348e:	e7b1      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013494:	e7ae      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013496:	f44f 7300 	mov.w	r3, #512	; 0x200
 801349a:	e7ab      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134a0:	e7a8      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80134a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134a6:	e7a5      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80134a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134ac:	e7a2      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80134ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80134b2:	e79f      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80134b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80134b8:	e79c      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 80134ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134be:	e799      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80134c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80134c4:	e796      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80134c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80134ca:	e793      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80134cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80134d0:	e790      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80134d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80134d6:	e78d      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80134d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80134dc:	e78a      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80134de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80134e2:	e787      	b.n	80133f4 <SDMMC_CmdSendStatus+0x40>
 80134e4:	24002f54 	.word	0x24002f54
 80134e8:	10624dd3 	.word	0x10624dd3
 80134ec:	fffee0c0 	.word	0xfffee0c0
 80134f0:	00200045 	.word	0x00200045
 80134f4:	002000c5 	.word	0x002000c5
 80134f8:	fdffe008 	.word	0xfdffe008

080134fc <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134fc:	4b4c      	ldr	r3, [pc, #304]	; (8013630 <SDMMC_CmdStatusRegister+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134fe:	f241 110d 	movw	r1, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013502:	4a4c      	ldr	r2, [pc, #304]	; (8013634 <SDMMC_CmdStatusRegister+0x138>)
 8013504:	681b      	ldr	r3, [r3, #0]
{
 8013506:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013508:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801350a:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801350e:	4c4a      	ldr	r4, [pc, #296]	; (8013638 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013510:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8013514:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013516:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013518:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801351a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801351e:	402c      	ands	r4, r5
 8013520:	4321      	orrs	r1, r4
 8013522:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8013524:	b14b      	cbz	r3, 801353a <SDMMC_CmdStatusRegister+0x3e>
 8013526:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013528:	4944      	ldr	r1, [pc, #272]	; (801363c <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 801352a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 801352c:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801352e:	420b      	tst	r3, r1
 8013530:	d001      	beq.n	8013536 <SDMMC_CmdStatusRegister+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013532:	049c      	lsls	r4, r3, #18
 8013534:	d506      	bpl.n	8013544 <SDMMC_CmdStatusRegister+0x48>
    if (count-- == 0U)
 8013536:	1c55      	adds	r5, r2, #1
 8013538:	d1f7      	bne.n	801352a <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 801353a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801353e:	4618      	mov	r0, r3
 8013540:	bc30      	pop	{r4, r5}
 8013542:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013544:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013546:	075b      	lsls	r3, r3, #29
 8013548:	d43d      	bmi.n	80135c6 <SDMMC_CmdStatusRegister+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801354a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801354c:	f013 0301 	ands.w	r3, r3, #1
 8013550:	d134      	bne.n	80135bc <SDMMC_CmdStatusRegister+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013552:	4b3b      	ldr	r3, [pc, #236]	; (8013640 <SDMMC_CmdStatusRegister+0x144>)
 8013554:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013556:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013558:	b2db      	uxtb	r3, r3
 801355a:	2b0d      	cmp	r3, #13
 801355c:	d131      	bne.n	80135c2 <SDMMC_CmdStatusRegister+0xc6>
  return (*(__IO uint32_t *) tmp);
 801355e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013560:	4b38      	ldr	r3, [pc, #224]	; (8013644 <SDMMC_CmdStatusRegister+0x148>)
 8013562:	4013      	ands	r3, r2
 8013564:	2b00      	cmp	r3, #0
 8013566:	d0ea      	beq.n	801353e <SDMMC_CmdStatusRegister+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013568:	2a00      	cmp	r2, #0
 801356a:	db2f      	blt.n	80135cc <SDMMC_CmdStatusRegister+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801356c:	0055      	lsls	r5, r2, #1
 801356e:	d430      	bmi.n	80135d2 <SDMMC_CmdStatusRegister+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013570:	0094      	lsls	r4, r2, #2
 8013572:	d430      	bmi.n	80135d6 <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013574:	00d0      	lsls	r0, r2, #3
 8013576:	d430      	bmi.n	80135da <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013578:	0111      	lsls	r1, r2, #4
 801357a:	d431      	bmi.n	80135e0 <SDMMC_CmdStatusRegister+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801357c:	0155      	lsls	r5, r2, #5
 801357e:	d432      	bmi.n	80135e6 <SDMMC_CmdStatusRegister+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013580:	01d4      	lsls	r4, r2, #7
 8013582:	d433      	bmi.n	80135ec <SDMMC_CmdStatusRegister+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013584:	0210      	lsls	r0, r2, #8
 8013586:	d434      	bmi.n	80135f2 <SDMMC_CmdStatusRegister+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013588:	0251      	lsls	r1, r2, #9
 801358a:	d435      	bmi.n	80135f8 <SDMMC_CmdStatusRegister+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801358c:	0295      	lsls	r5, r2, #10
 801358e:	d436      	bmi.n	80135fe <SDMMC_CmdStatusRegister+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013590:	02d4      	lsls	r4, r2, #11
 8013592:	d437      	bmi.n	8013604 <SDMMC_CmdStatusRegister+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013594:	0350      	lsls	r0, r2, #13
 8013596:	d438      	bmi.n	801360a <SDMMC_CmdStatusRegister+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013598:	0391      	lsls	r1, r2, #14
 801359a:	d439      	bmi.n	8013610 <SDMMC_CmdStatusRegister+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801359c:	03d5      	lsls	r5, r2, #15
 801359e:	d43a      	bmi.n	8013616 <SDMMC_CmdStatusRegister+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80135a0:	0414      	lsls	r4, r2, #16
 80135a2:	d43b      	bmi.n	801361c <SDMMC_CmdStatusRegister+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80135a4:	0450      	lsls	r0, r2, #17
 80135a6:	d43f      	bmi.n	8013628 <SDMMC_CmdStatusRegister+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80135a8:	0491      	lsls	r1, r2, #18
 80135aa:	d43a      	bmi.n	8013622 <SDMMC_CmdStatusRegister+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80135ac:	f012 0f08 	tst.w	r2, #8
 80135b0:	bf14      	ite	ne
 80135b2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80135b6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80135ba:	e7c0      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135bc:	2201      	movs	r2, #1
 80135be:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135c0:	e7bd      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135c2:	2301      	movs	r3, #1
 80135c4:	e7bb      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135c6:	2304      	movs	r3, #4
 80135c8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135ca:	e7b8      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80135cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80135d0:	e7b5      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80135d2:	2340      	movs	r3, #64	; 0x40
 80135d4:	e7b3      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80135d6:	2380      	movs	r3, #128	; 0x80
 80135d8:	e7b1      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80135da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135de:	e7ae      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80135e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135e4:	e7ab      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80135e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135ea:	e7a8      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80135ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80135f0:	e7a5      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80135f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135f6:	e7a2      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80135f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135fc:	e79f      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80135fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013602:	e79c      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 8013604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013608:	e799      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801360a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801360e:	e796      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013610:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013614:	e793      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013616:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801361a:	e790      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801361c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013620:	e78d      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8013622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013626:	e78a      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801362c:	e787      	b.n	801353e <SDMMC_CmdStatusRegister+0x42>
 801362e:	bf00      	nop
 8013630:	24002f54 	.word	0x24002f54
 8013634:	10624dd3 	.word	0x10624dd3
 8013638:	fffee0c0 	.word	0xfffee0c0
 801363c:	00200045 	.word	0x00200045
 8013640:	002000c5 	.word	0x002000c5
 8013644:	fdffe008 	.word	0xfdffe008

08013648 <SDMMC_CmdSwitch>:
 8013648:	4b4b      	ldr	r3, [pc, #300]	; (8013778 <SDMMC_CmdSwitch+0x130>)
 801364a:	f241 3288 	movw	r2, #5000	; 0x1388
 801364e:	b430      	push	{r4, r5}
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	f241 1406 	movw	r4, #4358	; 0x1106
 8013656:	4d49      	ldr	r5, [pc, #292]	; (801377c <SDMMC_CmdSwitch+0x134>)
 8013658:	6081      	str	r1, [r0, #8]
 801365a:	fba5 5303 	umull	r5, r3, r5, r3
 801365e:	4948      	ldr	r1, [pc, #288]	; (8013780 <SDMMC_CmdSwitch+0x138>)
 8013660:	68c5      	ldr	r5, [r0, #12]
 8013662:	0a5b      	lsrs	r3, r3, #9
 8013664:	4029      	ands	r1, r5
 8013666:	fb02 f303 	mul.w	r3, r2, r3
 801366a:	430c      	orrs	r4, r1
 801366c:	60c4      	str	r4, [r0, #12]
 801366e:	b14b      	cbz	r3, 8013684 <SDMMC_CmdSwitch+0x3c>
 8013670:	1e5a      	subs	r2, r3, #1
 8013672:	4944      	ldr	r1, [pc, #272]	; (8013784 <SDMMC_CmdSwitch+0x13c>)
 8013674:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013676:	3a01      	subs	r2, #1
 8013678:	420b      	tst	r3, r1
 801367a:	d001      	beq.n	8013680 <SDMMC_CmdSwitch+0x38>
 801367c:	049c      	lsls	r4, r3, #18
 801367e:	d506      	bpl.n	801368e <SDMMC_CmdSwitch+0x46>
 8013680:	1c55      	adds	r5, r2, #1
 8013682:	d1f7      	bne.n	8013674 <SDMMC_CmdSwitch+0x2c>
 8013684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013688:	4618      	mov	r0, r3
 801368a:	bc30      	pop	{r4, r5}
 801368c:	4770      	bx	lr
 801368e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013690:	075b      	lsls	r3, r3, #29
 8013692:	d43d      	bmi.n	8013710 <SDMMC_CmdSwitch+0xc8>
 8013694:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013696:	f013 0301 	ands.w	r3, r3, #1
 801369a:	d134      	bne.n	8013706 <SDMMC_CmdSwitch+0xbe>
 801369c:	4b3a      	ldr	r3, [pc, #232]	; (8013788 <SDMMC_CmdSwitch+0x140>)
 801369e:	6383      	str	r3, [r0, #56]	; 0x38
 80136a0:	6903      	ldr	r3, [r0, #16]
 80136a2:	b2db      	uxtb	r3, r3
 80136a4:	2b06      	cmp	r3, #6
 80136a6:	d131      	bne.n	801370c <SDMMC_CmdSwitch+0xc4>
 80136a8:	6942      	ldr	r2, [r0, #20]
 80136aa:	4b38      	ldr	r3, [pc, #224]	; (801378c <SDMMC_CmdSwitch+0x144>)
 80136ac:	4013      	ands	r3, r2
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d0ea      	beq.n	8013688 <SDMMC_CmdSwitch+0x40>
 80136b2:	2a00      	cmp	r2, #0
 80136b4:	db2f      	blt.n	8013716 <SDMMC_CmdSwitch+0xce>
 80136b6:	0055      	lsls	r5, r2, #1
 80136b8:	d430      	bmi.n	801371c <SDMMC_CmdSwitch+0xd4>
 80136ba:	0094      	lsls	r4, r2, #2
 80136bc:	d430      	bmi.n	8013720 <SDMMC_CmdSwitch+0xd8>
 80136be:	00d0      	lsls	r0, r2, #3
 80136c0:	d430      	bmi.n	8013724 <SDMMC_CmdSwitch+0xdc>
 80136c2:	0111      	lsls	r1, r2, #4
 80136c4:	d431      	bmi.n	801372a <SDMMC_CmdSwitch+0xe2>
 80136c6:	0155      	lsls	r5, r2, #5
 80136c8:	d432      	bmi.n	8013730 <SDMMC_CmdSwitch+0xe8>
 80136ca:	01d4      	lsls	r4, r2, #7
 80136cc:	d433      	bmi.n	8013736 <SDMMC_CmdSwitch+0xee>
 80136ce:	0210      	lsls	r0, r2, #8
 80136d0:	d434      	bmi.n	801373c <SDMMC_CmdSwitch+0xf4>
 80136d2:	0251      	lsls	r1, r2, #9
 80136d4:	d435      	bmi.n	8013742 <SDMMC_CmdSwitch+0xfa>
 80136d6:	0295      	lsls	r5, r2, #10
 80136d8:	d436      	bmi.n	8013748 <SDMMC_CmdSwitch+0x100>
 80136da:	02d4      	lsls	r4, r2, #11
 80136dc:	d437      	bmi.n	801374e <SDMMC_CmdSwitch+0x106>
 80136de:	0350      	lsls	r0, r2, #13
 80136e0:	d438      	bmi.n	8013754 <SDMMC_CmdSwitch+0x10c>
 80136e2:	0391      	lsls	r1, r2, #14
 80136e4:	d439      	bmi.n	801375a <SDMMC_CmdSwitch+0x112>
 80136e6:	03d5      	lsls	r5, r2, #15
 80136e8:	d43a      	bmi.n	8013760 <SDMMC_CmdSwitch+0x118>
 80136ea:	0414      	lsls	r4, r2, #16
 80136ec:	d43b      	bmi.n	8013766 <SDMMC_CmdSwitch+0x11e>
 80136ee:	0450      	lsls	r0, r2, #17
 80136f0:	d43f      	bmi.n	8013772 <SDMMC_CmdSwitch+0x12a>
 80136f2:	0491      	lsls	r1, r2, #18
 80136f4:	d43a      	bmi.n	801376c <SDMMC_CmdSwitch+0x124>
 80136f6:	f012 0f08 	tst.w	r2, #8
 80136fa:	bf14      	ite	ne
 80136fc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013700:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013704:	e7c0      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013706:	2201      	movs	r2, #1
 8013708:	6382      	str	r2, [r0, #56]	; 0x38
 801370a:	e7bd      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801370c:	2301      	movs	r3, #1
 801370e:	e7bb      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013710:	2304      	movs	r3, #4
 8013712:	6383      	str	r3, [r0, #56]	; 0x38
 8013714:	e7b8      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801371a:	e7b5      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801371c:	2340      	movs	r3, #64	; 0x40
 801371e:	e7b3      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013720:	2380      	movs	r3, #128	; 0x80
 8013722:	e7b1      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013728:	e7ae      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801372a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801372e:	e7ab      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013734:	e7a8      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801373a:	e7a5      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801373c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013740:	e7a2      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013746:	e79f      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801374c:	e79c      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801374e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013752:	e799      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013758:	e796      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801375a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801375e:	e793      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013760:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013764:	e790      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013766:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801376a:	e78d      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 801376c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013770:	e78a      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013772:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013776:	e787      	b.n	8013688 <SDMMC_CmdSwitch+0x40>
 8013778:	24002f54 	.word	0x24002f54
 801377c:	10624dd3 	.word	0x10624dd3
 8013780:	fffee0c0 	.word	0xfffee0c0
 8013784:	00200045 	.word	0x00200045
 8013788:	002000c5 	.word	0x002000c5
 801378c:	fdffe008 	.word	0xfdffe008

08013790 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013790:	4b4c      	ldr	r3, [pc, #304]	; (80138c4 <SDMMC_CmdVoltageSwitch+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013792:	f241 110b 	movw	r1, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013796:	4a4c      	ldr	r2, [pc, #304]	; (80138c8 <SDMMC_CmdVoltageSwitch+0x138>)
 8013798:	681b      	ldr	r3, [r3, #0]
{
 801379a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 801379c:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801379e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137a2:	4c4a      	ldr	r4, [pc, #296]	; (80138cc <SDMMC_CmdVoltageSwitch+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80137a4:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80137a8:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80137aa:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137ac:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80137ae:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137b2:	402c      	ands	r4, r5
 80137b4:	4321      	orrs	r1, r4
 80137b6:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80137b8:	b14b      	cbz	r3, 80137ce <SDMMC_CmdVoltageSwitch+0x3e>
 80137ba:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80137bc:	4944      	ldr	r1, [pc, #272]	; (80138d0 <SDMMC_CmdVoltageSwitch+0x140>)
    sta_reg = SDMMCx->STA;
 80137be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80137c0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80137c2:	420b      	tst	r3, r1
 80137c4:	d001      	beq.n	80137ca <SDMMC_CmdVoltageSwitch+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80137c6:	049c      	lsls	r4, r3, #18
 80137c8:	d506      	bpl.n	80137d8 <SDMMC_CmdVoltageSwitch+0x48>
    if (count-- == 0U)
 80137ca:	1c55      	adds	r5, r2, #1
 80137cc:	d1f7      	bne.n	80137be <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80137ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	bc30      	pop	{r4, r5}
 80137d6:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80137d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80137da:	075b      	lsls	r3, r3, #29
 80137dc:	d43d      	bmi.n	801385a <SDMMC_CmdVoltageSwitch+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80137de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80137e0:	f013 0301 	ands.w	r3, r3, #1
 80137e4:	d134      	bne.n	8013850 <SDMMC_CmdVoltageSwitch+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80137e6:	4b3b      	ldr	r3, [pc, #236]	; (80138d4 <SDMMC_CmdVoltageSwitch+0x144>)
 80137e8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80137ea:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	2b0b      	cmp	r3, #11
 80137f0:	d131      	bne.n	8013856 <SDMMC_CmdVoltageSwitch+0xc6>
  return (*(__IO uint32_t *) tmp);
 80137f2:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80137f4:	4b38      	ldr	r3, [pc, #224]	; (80138d8 <SDMMC_CmdVoltageSwitch+0x148>)
 80137f6:	4013      	ands	r3, r2
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d0ea      	beq.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80137fc:	2a00      	cmp	r2, #0
 80137fe:	db2f      	blt.n	8013860 <SDMMC_CmdVoltageSwitch+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013800:	0055      	lsls	r5, r2, #1
 8013802:	d430      	bmi.n	8013866 <SDMMC_CmdVoltageSwitch+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013804:	0094      	lsls	r4, r2, #2
 8013806:	d430      	bmi.n	801386a <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013808:	00d0      	lsls	r0, r2, #3
 801380a:	d430      	bmi.n	801386e <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801380c:	0111      	lsls	r1, r2, #4
 801380e:	d431      	bmi.n	8013874 <SDMMC_CmdVoltageSwitch+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013810:	0155      	lsls	r5, r2, #5
 8013812:	d432      	bmi.n	801387a <SDMMC_CmdVoltageSwitch+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013814:	01d4      	lsls	r4, r2, #7
 8013816:	d433      	bmi.n	8013880 <SDMMC_CmdVoltageSwitch+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013818:	0210      	lsls	r0, r2, #8
 801381a:	d434      	bmi.n	8013886 <SDMMC_CmdVoltageSwitch+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801381c:	0251      	lsls	r1, r2, #9
 801381e:	d435      	bmi.n	801388c <SDMMC_CmdVoltageSwitch+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013820:	0295      	lsls	r5, r2, #10
 8013822:	d436      	bmi.n	8013892 <SDMMC_CmdVoltageSwitch+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013824:	02d4      	lsls	r4, r2, #11
 8013826:	d437      	bmi.n	8013898 <SDMMC_CmdVoltageSwitch+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013828:	0350      	lsls	r0, r2, #13
 801382a:	d438      	bmi.n	801389e <SDMMC_CmdVoltageSwitch+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801382c:	0391      	lsls	r1, r2, #14
 801382e:	d439      	bmi.n	80138a4 <SDMMC_CmdVoltageSwitch+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013830:	03d5      	lsls	r5, r2, #15
 8013832:	d43a      	bmi.n	80138aa <SDMMC_CmdVoltageSwitch+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013834:	0414      	lsls	r4, r2, #16
 8013836:	d43b      	bmi.n	80138b0 <SDMMC_CmdVoltageSwitch+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013838:	0450      	lsls	r0, r2, #17
 801383a:	d43f      	bmi.n	80138bc <SDMMC_CmdVoltageSwitch+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801383c:	0491      	lsls	r1, r2, #18
 801383e:	d43a      	bmi.n	80138b6 <SDMMC_CmdVoltageSwitch+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013840:	f012 0f08 	tst.w	r2, #8
 8013844:	bf14      	ite	ne
 8013846:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801384a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801384e:	e7c0      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013850:	2201      	movs	r2, #1
 8013852:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013854:	e7bd      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013856:	2301      	movs	r3, #1
 8013858:	e7bb      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801385a:	2304      	movs	r3, #4
 801385c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801385e:	e7b8      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013864:	e7b5      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013866:	2340      	movs	r3, #64	; 0x40
 8013868:	e7b3      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801386a:	2380      	movs	r3, #128	; 0x80
 801386c:	e7b1      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801386e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013872:	e7ae      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013878:	e7ab      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801387a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801387e:	e7a8      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013884:	e7a5      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801388a:	e7a2      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801388c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013890:	e79f      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013896:	e79c      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8013898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801389c:	e799      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801389e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80138a2:	e796      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80138a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80138a8:	e793      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80138aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80138ae:	e790      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80138b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80138b4:	e78d      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80138b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80138ba:	e78a      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80138bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80138c0:	e787      	b.n	80137d2 <SDMMC_CmdVoltageSwitch+0x42>
 80138c2:	bf00      	nop
 80138c4:	24002f54 	.word	0x24002f54
 80138c8:	10624dd3 	.word	0x10624dd3
 80138cc:	fffee0c0 	.word	0xfffee0c0
 80138d0:	00200045 	.word	0x00200045
 80138d4:	002000c5 	.word	0x002000c5
 80138d8:	fdffe008 	.word	0xfdffe008

080138dc <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80138dc:	287f      	cmp	r0, #127	; 0x7f
 80138de:	d911      	bls.n	8013904 <ff_convert+0x28>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80138e0:	b989      	cbnz	r1, 8013906 <ff_convert+0x2a>
 80138e2:	4b0e      	ldr	r3, [pc, #56]	; (801391c <ff_convert+0x40>)
{
 80138e4:	b410      	push	{r4}
 80138e6:	e001      	b.n	80138ec <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80138e8:	2980      	cmp	r1, #128	; 0x80
 80138ea:	d015      	beq.n	8013918 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 80138ec:	f833 2b02 	ldrh.w	r2, [r3], #2
 80138f0:	b28c      	uxth	r4, r1
 80138f2:	3101      	adds	r1, #1
 80138f4:	4282      	cmp	r2, r0
 80138f6:	d1f7      	bne.n	80138e8 <ff_convert+0xc>
 80138f8:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80138fc:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80138fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013902:	4770      	bx	lr
 8013904:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013906:	28ff      	cmp	r0, #255	; 0xff
 8013908:	d804      	bhi.n	8013914 <ff_convert+0x38>
 801390a:	4b04      	ldr	r3, [pc, #16]	; (801391c <ff_convert+0x40>)
 801390c:	3880      	subs	r0, #128	; 0x80
 801390e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013912:	4770      	bx	lr
 8013914:	2000      	movs	r0, #0
 8013916:	4770      	bx	lr
 8013918:	2000      	movs	r0, #0
 801391a:	e7f0      	b.n	80138fe <ff_convert+0x22>
 801391c:	08046764 	.word	0x08046764

08013920 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013920:	4b22      	ldr	r3, [pc, #136]	; (80139ac <ff_wtoupper+0x8c>)
 8013922:	4a23      	ldr	r2, [pc, #140]	; (80139b0 <ff_wtoupper+0x90>)
 8013924:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013928:	bf28      	it	cs
 801392a:	4613      	movcs	r3, r2
{
 801392c:	b470      	push	{r4, r5, r6}
 801392e:	3304      	adds	r3, #4
 8013930:	e001      	b.n	8013936 <ff_wtoupper+0x16>
 8013932:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8013934:	b1d2      	cbz	r2, 801396c <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 8013936:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 801393a:	461e      	mov	r6, r3
 801393c:	b1a1      	cbz	r1, 8013968 <ff_wtoupper+0x48>
 801393e:	4288      	cmp	r0, r1
 8013940:	d312      	bcc.n	8013968 <ff_wtoupper+0x48>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013942:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8013946:	b2d4      	uxtb	r4, r2
 8013948:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 801394a:	1865      	adds	r5, r4, r1
 801394c:	42a8      	cmp	r0, r5
 801394e:	daf0      	bge.n	8013932 <ff_wtoupper+0x12>
			switch (cmd) {
 8013950:	2a08      	cmp	r2, #8
 8013952:	d809      	bhi.n	8013968 <ff_wtoupper+0x48>
 8013954:	e8df f002 	tbb	[pc, r2]
 8013958:	1a171105 	.word	0x1a171105
 801395c:	2623201d 	.word	0x2623201d
 8013960:	0d          	.byte	0x0d
 8013961:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013962:	1a41      	subs	r1, r0, r1
 8013964:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8013968:	bc70      	pop	{r4, r5, r6}
 801396a:	4770      	bx	lr
		if (!cmd) p += nc;
 801396c:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8013970:	e7dd      	b.n	801392e <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013972:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8013976:	b280      	uxth	r0, r0
 8013978:	e7f6      	b.n	8013968 <ff_wtoupper+0x48>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801397a:	1a41      	subs	r1, r0, r1
 801397c:	f001 0301 	and.w	r3, r1, #1
 8013980:	1ac0      	subs	r0, r0, r3
 8013982:	b280      	uxth	r0, r0
 8013984:	e7f0      	b.n	8013968 <ff_wtoupper+0x48>
			case 2: chr -= 16; break;				/* Shift -16 */
 8013986:	3810      	subs	r0, #16
 8013988:	b280      	uxth	r0, r0
 801398a:	e7ed      	b.n	8013968 <ff_wtoupper+0x48>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801398c:	3820      	subs	r0, #32
 801398e:	b280      	uxth	r0, r0
 8013990:	e7ea      	b.n	8013968 <ff_wtoupper+0x48>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013992:	3830      	subs	r0, #48	; 0x30
 8013994:	b280      	uxth	r0, r0
 8013996:	e7e7      	b.n	8013968 <ff_wtoupper+0x48>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013998:	381a      	subs	r0, #26
 801399a:	b280      	uxth	r0, r0
 801399c:	e7e4      	b.n	8013968 <ff_wtoupper+0x48>
			case 6:	chr += 8; break;				/* Shift +8 */
 801399e:	3008      	adds	r0, #8
 80139a0:	b280      	uxth	r0, r0
 80139a2:	e7e1      	b.n	8013968 <ff_wtoupper+0x48>
			case 7: chr -= 80; break;				/* Shift -80 */
 80139a4:	3850      	subs	r0, #80	; 0x50
 80139a6:	b280      	uxth	r0, r0
 80139a8:	e7de      	b.n	8013968 <ff_wtoupper+0x48>
 80139aa:	bf00      	nop
 80139ac:	08046864 	.word	0x08046864
 80139b0:	08046a58 	.word	0x08046a58

080139b4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80139b4:	4b03      	ldr	r3, [pc, #12]	; (80139c4 <disk_status+0x10>)
 80139b6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80139ba:	4418      	add	r0, r3
 80139bc:	6853      	ldr	r3, [r2, #4]
 80139be:	7b00      	ldrb	r0, [r0, #12]
 80139c0:	685b      	ldr	r3, [r3, #4]
 80139c2:	4718      	bx	r3
 80139c4:	2400524c 	.word	0x2400524c

080139c8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80139c8:	4b08      	ldr	r3, [pc, #32]	; (80139ec <disk_initialize+0x24>)
 80139ca:	5c1a      	ldrb	r2, [r3, r0]
 80139cc:	b95a      	cbnz	r2, 80139e6 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80139ce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80139d2:	1819      	adds	r1, r3, r0
{
 80139d4:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 80139d6:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80139d8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80139da:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 80139dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80139e0:	7b08      	ldrb	r0, [r1, #12]
 80139e2:	6813      	ldr	r3, [r2, #0]
 80139e4:	4718      	bx	r3
}
 80139e6:	2000      	movs	r0, #0
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	2400524c 	.word	0x2400524c

080139f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80139f0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80139f2:	4c05      	ldr	r4, [pc, #20]	; (8013a08 <disk_read+0x18>)
 80139f4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80139f8:	4420      	add	r0, r4
 80139fa:	686c      	ldr	r4, [r5, #4]
 80139fc:	7b00      	ldrb	r0, [r0, #12]
 80139fe:	68a4      	ldr	r4, [r4, #8]
 8013a00:	46a4      	mov	ip, r4
  return res;
}
 8013a02:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013a04:	4760      	bx	ip
 8013a06:	bf00      	nop
 8013a08:	2400524c 	.word	0x2400524c

08013a0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013a0c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013a0e:	4c05      	ldr	r4, [pc, #20]	; (8013a24 <disk_write+0x18>)
 8013a10:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8013a14:	4420      	add	r0, r4
 8013a16:	686c      	ldr	r4, [r5, #4]
 8013a18:	7b00      	ldrb	r0, [r0, #12]
 8013a1a:	68e4      	ldr	r4, [r4, #12]
 8013a1c:	46a4      	mov	ip, r4
  return res;
}
 8013a1e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013a20:	4760      	bx	ip
 8013a22:	bf00      	nop
 8013a24:	2400524c 	.word	0x2400524c

08013a28 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013a28:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <disk_ioctl+0x18>)
{
 8013a2a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013a2c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8013a30:	4418      	add	r0, r3
 8013a32:	6863      	ldr	r3, [r4, #4]
 8013a34:	7b00      	ldrb	r0, [r0, #12]
 8013a36:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8013a38:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013a3c:	4718      	bx	r3
 8013a3e:	bf00      	nop
 8013a40:	2400524c 	.word	0x2400524c

08013a44 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8013a44:	2000      	movs	r0, #0
 8013a46:	4770      	bx	lr

08013a48 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013a4c:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 8013a4e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8013a52:	758f      	strb	r7, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013a54:	69c3      	ldr	r3, [r0, #28]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d066      	beq.n	8013b28 <get_fileinfo+0xe0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8013a5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013a5c:	4606      	mov	r6, r0
 8013a5e:	460d      	mov	r5, r1
 8013a60:	3301      	adds	r3, #1
 8013a62:	d01e      	beq.n	8013aa2 <get_fileinfo+0x5a>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013a64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a68:	8818      	ldrh	r0, [r3, #0]
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d06c      	beq.n	8013b48 <get_fileinfo+0x100>
 8013a6e:	f101 0715 	add.w	r7, r1, #21
 8013a72:	2401      	movs	r4, #1
 8013a74:	e000      	b.n	8013a78 <get_fileinfo+0x30>
 8013a76:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8013a78:	2100      	movs	r1, #0
 8013a7a:	f7ff ff2f 	bl	80138dc <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8013a7e:	1c63      	adds	r3, r4, #1
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d061      	beq.n	8013b48 <get_fileinfo+0x100>
 8013a84:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8013a88:	d05e      	beq.n	8013b48 <get_fileinfo+0x100>
				fno->fname[i++] = (TCHAR)w;
 8013a8a:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013a8e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8013a92:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d1ed      	bne.n	8013a76 <get_fileinfo+0x2e>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8013a9a:	442c      	add	r4, r5
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	75a3      	strb	r3, [r4, #22]
 8013aa0:	7daf      	ldrb	r7, [r5, #22]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 8013aa2:	6a36      	ldr	r6, [r6, #32]
	i = j = 0;
 8013aa4:	2400      	movs	r4, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 8013aa6:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8013aaa:	1e70      	subs	r0, r6, #1
 8013aac:	f106 0c0a 	add.w	ip, r6, #10
		c = (TCHAR)dp->dir[i++];
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 8013ab6:	2b20      	cmp	r3, #32
 8013ab8:	d01c      	beq.n	8013af4 <get_fileinfo+0xac>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013aba:	3202      	adds	r2, #2
 8013abc:	2b05      	cmp	r3, #5
 8013abe:	eba2 0206 	sub.w	r2, r2, r6
 8013ac2:	bf08      	it	eq
 8013ac4:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8013ac6:	2a09      	cmp	r2, #9
 8013ac8:	d030      	beq.n	8013b2c <get_fileinfo+0xe4>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8013aca:	1929      	adds	r1, r5, r4
 8013acc:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 8013ace:	b987      	cbnz	r7, 8013af2 <get_fileinfo+0xaa>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8013ad0:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8013ad4:	f1be 0f19 	cmp.w	lr, #25
 8013ad8:	d80a      	bhi.n	8013af0 <get_fileinfo+0xa8>
 8013ada:	2a09      	cmp	r2, #9
 8013adc:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8013ae0:	bf34      	ite	cc
 8013ae2:	2208      	movcc	r2, #8
 8013ae4:	2210      	movcs	r2, #16
 8013ae6:	ea1e 0f02 	tst.w	lr, r2
 8013aea:	d001      	beq.n	8013af0 <get_fileinfo+0xa8>
				c += 0x20;			/* To lower */
 8013aec:	3320      	adds	r3, #32
 8013aee:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8013af0:	758b      	strb	r3, [r1, #22]
		}
		j++;
 8013af2:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 8013af4:	4584      	cmp	ip, r0
 8013af6:	d1db      	bne.n	8013ab0 <get_fileinfo+0x68>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8013af8:	1929      	adds	r1, r5, r4
	if (!lfv) {
 8013afa:	b1ff      	cbz	r7, 8013b3c <get_fileinfo+0xf4>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8013afc:	2300      	movs	r3, #0
 8013afe:	724b      	strb	r3, [r1, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013b00:	7af3      	ldrb	r3, [r6, #11]
 8013b02:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 8013b04:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 8013b06:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 8013b08:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 8013b0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8013b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013b12:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8013b14:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 8013b16:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 8013b18:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 8013b1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8013b1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013b22:	0c1a      	lsrs	r2, r3, #16
 8013b24:	80eb      	strh	r3, [r5, #6]
 8013b26:	80aa      	strh	r2, [r5, #4]
}
 8013b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 8013b2c:	1929      	adds	r1, r5, r4
 8013b2e:	b90f      	cbnz	r7, 8013b34 <get_fileinfo+0xec>
 8013b30:	f881 8016 	strb.w	r8, [r1, #22]
			fno->altname[j++] = '.';
 8013b34:	3401      	adds	r4, #1
 8013b36:	f881 8009 	strb.w	r8, [r1, #9]
 8013b3a:	e7c6      	b.n	8013aca <get_fileinfo+0x82>
		fno->fname[j] = 0;
 8013b3c:	758f      	strb	r7, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8013b3e:	7b33      	ldrb	r3, [r6, #12]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	bf08      	it	eq
 8013b44:	4629      	moveq	r1, r5
 8013b46:	e7d9      	b.n	8013afc <get_fileinfo+0xb4>
			i = j = 0;
 8013b48:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	442c      	add	r4, r5
 8013b4e:	75a3      	strb	r3, [r4, #22]
 8013b50:	7daf      	ldrb	r7, [r5, #22]
 8013b52:	e7a6      	b.n	8013aa2 <get_fileinfo+0x5a>

08013b54 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8013b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013b56:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8013b58:	b083      	sub	sp, #12
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013b5e:	b973      	cbnz	r3, 8013b7e <move_window.part.0+0x2a>
 8013b60:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013b64:	2301      	movs	r3, #1
 8013b66:	462a      	mov	r2, r5
 8013b68:	7860      	ldrb	r0, [r4, #1]
 8013b6a:	f7ff ff41 	bl	80139f0 <disk_read>
 8013b6e:	b910      	cbnz	r0, 8013b76 <move_window.part.0+0x22>
			fs->winsect = sector;
 8013b70:	6325      	str	r5, [r4, #48]	; 0x30
}
 8013b72:	b003      	add	sp, #12
 8013b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 8013b76:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013b78:	f04f 35ff 	mov.w	r5, #4294967295
 8013b7c:	e7f8      	b.n	8013b70 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 8013b7e:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013b80:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8013b84:	2301      	movs	r3, #1
 8013b86:	7840      	ldrb	r0, [r0, #1]
 8013b88:	4632      	mov	r2, r6
 8013b8a:	9101      	str	r1, [sp, #4]
 8013b8c:	f7ff ff3e 	bl	8013a0c <disk_write>
 8013b90:	b9b8      	cbnz	r0, 8013bc2 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013b92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013b94:	69e3      	ldr	r3, [r4, #28]
 8013b96:	1ab2      	subs	r2, r6, r2
 8013b98:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8013b9a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d2e1      	bcs.n	8013b64 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013ba0:	78a7      	ldrb	r7, [r4, #2]
 8013ba2:	2f01      	cmp	r7, #1
 8013ba4:	d801      	bhi.n	8013baa <move_window.part.0+0x56>
 8013ba6:	e7dd      	b.n	8013b64 <move_window.part.0+0x10>
 8013ba8:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8013baa:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013bac:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8013bae:	2301      	movs	r3, #1
 8013bb0:	7860      	ldrb	r0, [r4, #1]
 8013bb2:	4632      	mov	r2, r6
 8013bb4:	9101      	str	r1, [sp, #4]
 8013bb6:	f7ff ff29 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013bba:	2f01      	cmp	r7, #1
 8013bbc:	9901      	ldr	r1, [sp, #4]
 8013bbe:	d1f3      	bne.n	8013ba8 <move_window.part.0+0x54>
 8013bc0:	e7d0      	b.n	8013b64 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8013bc2:	2001      	movs	r0, #1
}
 8013bc4:	b003      	add	sp, #12
 8013bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013bc8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8013bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8013bcc:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8013bce:	4604      	mov	r4, r0
 8013bd0:	460d      	mov	r5, r1
 8013bd2:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8013bd4:	2b02      	cmp	r3, #2
 8013bd6:	d006      	beq.n	8013be6 <put_fat.part.0+0x1e>
 8013bd8:	2b03      	cmp	r3, #3
 8013bda:	d052      	beq.n	8013c82 <put_fat.part.0+0xba>
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d01b      	beq.n	8013c18 <put_fat.part.0+0x50>
 8013be0:	2002      	movs	r0, #2
}
 8013be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013be6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013be8:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013bea:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013bee:	4299      	cmp	r1, r3
 8013bf0:	d003      	beq.n	8013bfa <put_fat.part.0+0x32>
 8013bf2:	f7ff ffaf 	bl	8013b54 <move_window.part.0>
			if (res != FR_OK) break;
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d1f3      	bne.n	8013be2 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013bfa:	006d      	lsls	r5, r5, #1
 8013bfc:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8013c00:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 8013c04:	2201      	movs	r2, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013c06:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			break;
 8013c0a:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8013c0c:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013c0e:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 8013c10:	7059      	strb	r1, [r3, #1]
			fs->wflag = 1;
 8013c12:	70e2      	strb	r2, [r4, #3]
}
 8013c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8013c18:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c20:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c24:	4299      	cmp	r1, r3
 8013c26:	d003      	beq.n	8013c30 <put_fat.part.0+0x68>
 8013c28:	f7ff ff94 	bl	8013b54 <move_window.part.0>
			if (res != FR_OK) break;
 8013c2c:	2800      	cmp	r0, #0
 8013c2e:	d1d8      	bne.n	8013be2 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013c30:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 8013c32:	f107 0801 	add.w	r8, r7, #1
 8013c36:	f104 0934 	add.w	r9, r4, #52	; 0x34
 8013c3a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013c3e:	d545      	bpl.n	8013ccc <put_fat.part.0+0x104>
 8013c40:	f819 3007 	ldrb.w	r3, [r9, r7]
			fs->wflag = 1;
 8013c44:	2201      	movs	r2, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013c46:	f003 030f 	and.w	r3, r3, #15
 8013c4a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8013c4e:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c52:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c54:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c56:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 8013c5a:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c5c:	4299      	cmp	r1, r3
 8013c5e:	d004      	beq.n	8013c6a <put_fat.part.0+0xa2>
 8013c60:	4620      	mov	r0, r4
 8013c62:	f7ff ff77 	bl	8013b54 <move_window.part.0>
			if (res != FR_OK) break;
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d1bb      	bne.n	8013be2 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8013c6a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013c6e:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 8013c72:	44c8      	add	r8, r9
			fs->wflag = 1;
 8013c74:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013c76:	f888 2000 	strb.w	r2, [r8]
			break;
 8013c7a:	2000      	movs	r0, #0
			fs->wflag = 1;
 8013c7c:	70e3      	strb	r3, [r4, #3]
}
 8013c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013c82:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c84:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013c86:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c8a:	4299      	cmp	r1, r3
 8013c8c:	d003      	beq.n	8013c96 <put_fat.part.0+0xce>
 8013c8e:	f7ff ff61 	bl	8013b54 <move_window.part.0>
			if (res != FR_OK) break;
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d1a5      	bne.n	8013be2 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013c96:	00ad      	lsls	r5, r5, #2
 8013c98:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8013c9c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
			fs->wflag = 1;
 8013ca0:	f04f 0c01 	mov.w	ip, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013ca4:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			break;
 8013ca8:	2000      	movs	r0, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013caa:	194f      	adds	r7, r1, r5
	rv = rv << 8 | ptr[2];
 8013cac:	887b      	ldrh	r3, [r7, #2]
	rv = rv << 8 | ptr[0];
 8013cae:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013cb0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013cb4:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8013cb6:	554b      	strb	r3, [r1, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 8013cb8:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013cba:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013cbc:	0e1b      	lsrs	r3, r3, #24
 8013cbe:	70ba      	strb	r2, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013cc0:	7079      	strb	r1, [r7, #1]
	*ptr++ = (BYTE)val;
 8013cc2:	70fb      	strb	r3, [r7, #3]
			fs->wflag = 1;
 8013cc4:	f884 c003 	strb.w	ip, [r4, #3]
}
 8013cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013ccc:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8013cd0:	2201      	movs	r2, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013cd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013cd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013cd6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 8013cda:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013cdc:	4299      	cmp	r1, r3
 8013cde:	d005      	beq.n	8013cec <put_fat.part.0+0x124>
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f7ff ff37 	bl	8013b54 <move_window.part.0>
			if (res != FR_OK) break;
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f47f af7b 	bne.w	8013be2 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8013cec:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013cf0:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 8013cf4:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013cf6:	f898 1000 	ldrb.w	r1, [r8]
 8013cfa:	f021 060f 	bic.w	r6, r1, #15
 8013cfe:	4332      	orrs	r2, r6
 8013d00:	e7b8      	b.n	8013c74 <put_fat.part.0+0xac>
 8013d02:	bf00      	nop

08013d04 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013d04:	2901      	cmp	r1, #1
 8013d06:	d90e      	bls.n	8013d26 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8013d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013d0a:	6983      	ldr	r3, [r0, #24]
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	4605      	mov	r5, r0
 8013d10:	4299      	cmp	r1, r3
 8013d12:	d206      	bcs.n	8013d22 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8013d14:	7803      	ldrb	r3, [r0, #0]
 8013d16:	2b02      	cmp	r3, #2
 8013d18:	d046      	beq.n	8013da8 <get_fat.isra.0+0xa4>
 8013d1a:	2b03      	cmp	r3, #3
 8013d1c:	d02c      	beq.n	8013d78 <get_fat.isra.0+0x74>
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d003      	beq.n	8013d2a <get_fat.isra.0+0x26>
 8013d22:	2001      	movs	r0, #1
}
 8013d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8013d26:	2001      	movs	r0, #1
}
 8013d28:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 8013d2a:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013d2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d30:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013d32:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d36:	4291      	cmp	r1, r2
 8013d38:	d005      	beq.n	8013d46 <get_fat.isra.0+0x42>
 8013d3a:	f7ff ff0b 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d13b      	bne.n	8013dba <get_fat.isra.0+0xb6>
 8013d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d44:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8013d46:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8013d4a:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013d4c:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8013d50:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d52:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8013d54:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d58:	d003      	beq.n	8013d62 <get_fat.isra.0+0x5e>
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	f7ff fefa 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013d60:	bb58      	cbnz	r0, 8013dba <get_fat.isra.0+0xb6>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013d62:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013d66:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8013d68:	443d      	add	r5, r7
 8013d6a:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8013d6e:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013d72:	d52f      	bpl.n	8013dd4 <get_fat.isra.0+0xd0>
 8013d74:	0900      	lsrs	r0, r0, #4
}
 8013d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013d78:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013d7c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d80:	4299      	cmp	r1, r3
 8013d82:	d002      	beq.n	8013d8a <get_fat.isra.0+0x86>
 8013d84:	f7ff fee6 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013d88:	b9b8      	cbnz	r0, 8013dba <get_fat.isra.0+0xb6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013d8a:	00a4      	lsls	r4, r4, #2
 8013d8c:	3534      	adds	r5, #52	; 0x34
 8013d8e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8013d92:	192a      	adds	r2, r5, r4
	rv = rv << 8 | ptr[0];
 8013d94:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 8013d96:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8013d98:	7853      	ldrb	r3, [r2, #1]
 8013d9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8013d9e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013da2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8013da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013da8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013daa:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013dac:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013db0:	4299      	cmp	r1, r3
 8013db2:	d005      	beq.n	8013dc0 <get_fat.isra.0+0xbc>
 8013db4:	f7ff fece 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013db8:	b110      	cbz	r0, 8013dc0 <get_fat.isra.0+0xbc>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013dba:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013dc0:	0064      	lsls	r4, r4, #1
 8013dc2:	3534      	adds	r5, #52	; 0x34
 8013dc4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8013dc8:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8013dca:	5d28      	ldrb	r0, [r5, r4]
 8013dcc:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013dce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8013dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013dd4:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8013dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dda:	bf00      	nop

08013ddc <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013ddc:	69c3      	ldr	r3, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8013dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013de2:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013de4:	b37b      	cbz	r3, 8013e46 <dir_next.constprop.0+0x6a>
 8013de6:	3520      	adds	r5, #32
 8013de8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8013dec:	d22b      	bcs.n	8013e46 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013dee:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8013df2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8013df4:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013df6:	b137      	cbz	r7, 8013e06 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013df8:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 8013dfa:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8013dfc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013dfe:	443e      	add	r6, r7
 8013e00:	6226      	str	r6, [r4, #32]
}
 8013e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8013e06:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8013e08:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8013e0a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8013e0c:	b1f1      	cbz	r1, 8013e4c <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013e0e:	8973      	ldrh	r3, [r6, #10]
 8013e10:	3b01      	subs	r3, #1
 8013e12:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8013e16:	d1ef      	bne.n	8013df8 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7ff ff73 	bl	8013d04 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013e1e:	2801      	cmp	r0, #1
 8013e20:	d91c      	bls.n	8013e5c <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013e22:	1c43      	adds	r3, r0, #1
 8013e24:	d01c      	beq.n	8013e60 <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013e26:	69b3      	ldr	r3, [r6, #24]
 8013e28:	4298      	cmp	r0, r3
 8013e2a:	d213      	bcs.n	8013e54 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013e2c:	3b02      	subs	r3, #2
	clst -= 2;
 8013e2e:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8013e30:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d204      	bcs.n	8013e40 <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 8013e36:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 8013e3a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8013e3c:	fb02 3808 	mla	r8, r2, r8, r3
				dp->sect = clust2sect(fs, clst);
 8013e40:	f8c4 801c 	str.w	r8, [r4, #28]
 8013e44:	e7d8      	b.n	8013df8 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013e46:	2004      	movs	r0, #4
}
 8013e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013e4c:	8933      	ldrh	r3, [r6, #8]
 8013e4e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8013e52:	d8d1      	bhi.n	8013df8 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 8013e54:	2300      	movs	r3, #0
 8013e56:	2004      	movs	r0, #4
 8013e58:	61e3      	str	r3, [r4, #28]
 8013e5a:	e7d2      	b.n	8013e02 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013e5c:	2002      	movs	r0, #2
 8013e5e:	e7d0      	b.n	8013e02 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013e60:	2001      	movs	r0, #1
 8013e62:	e7ce      	b.n	8013e02 <dir_next.constprop.0+0x26>

08013e64 <dir_read.constprop.0>:
FRESULT dir_read (
 8013e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8013e68:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
 8013e6c:	b083      	sub	sp, #12
 8013e6e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8013e70:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 8013e72:	f1ba 0f00 	cmp.w	sl, #0
 8013e76:	d064      	beq.n	8013f42 <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
 8013e78:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8013e7c:	f106 0834 	add.w	r8, r6, #52	; 0x34
 8013e80:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013e82:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8013e84:	4555      	cmp	r5, sl
 8013e86:	d015      	beq.n	8013eb4 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013e88:	78f3      	ldrb	r3, [r6, #3]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	f040 8102 	bne.w	8014094 <dir_read.constprop.0+0x230>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013e90:	2301      	movs	r3, #1
 8013e92:	4652      	mov	r2, sl
 8013e94:	4641      	mov	r1, r8
 8013e96:	7870      	ldrb	r0, [r6, #1]
 8013e98:	f7ff fdaa 	bl	80139f0 <disk_read>
 8013e9c:	b140      	cbz	r0, 8013eb0 <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 8013e9e:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8013ea2:	2001      	movs	r0, #1
			fs->winsect = sector;
 8013ea4:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	61e3      	str	r3, [r4, #28]
}
 8013eaa:	b003      	add	sp, #12
 8013eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8013eb0:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013eb4:	6a21      	ldr	r1, [r4, #32]
 8013eb6:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8013eb8:	2a00      	cmp	r2, #0
 8013eba:	d042      	beq.n	8013f42 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013ebc:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8013ebe:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ec4:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8013ec6:	d005      	beq.n	8013ed4 <dir_read.constprop.0+0x70>
 8013ec8:	2a2e      	cmp	r2, #46	; 0x2e
 8013eca:	d003      	beq.n	8013ed4 <dir_read.constprop.0+0x70>
 8013ecc:	f023 0020 	bic.w	r0, r3, #32
 8013ed0:	2808      	cmp	r0, #8
 8013ed2:	d13d      	bne.n	8013f50 <dir_read.constprop.0+0xec>
 8013ed4:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8013ed6:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013ed8:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013eda:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8013ede:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8013ee2:	d22e      	bcs.n	8013f42 <dir_read.constprop.0+0xde>
 8013ee4:	f1ba 0f00 	cmp.w	sl, #0
 8013ee8:	d02b      	beq.n	8013f42 <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013eea:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8013eee:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013ef0:	bb4a      	cbnz	r2, 8013f46 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
 8013ef2:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8013ef6:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8013ef8:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8013efc:	b969      	cbnz	r1, 8013f1a <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013efe:	891a      	ldrh	r2, [r3, #8]
 8013f00:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8013f04:	d91d      	bls.n	8013f42 <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f06:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8013f08:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f0a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8013f0c:	f1ba 0f00 	cmp.w	sl, #0
 8013f10:	d1b7      	bne.n	8013e82 <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8013f12:	2000      	movs	r0, #0
}
 8013f14:	b003      	add	sp, #12
 8013f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013f1a:	895a      	ldrh	r2, [r3, #10]
 8013f1c:	3a01      	subs	r2, #1
 8013f1e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8013f22:	d1f0      	bne.n	8013f06 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013f24:	4618      	mov	r0, r3
 8013f26:	9301      	str	r3, [sp, #4]
 8013f28:	f7ff feec 	bl	8013d04 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013f2c:	2801      	cmp	r0, #1
 8013f2e:	f240 80e6 	bls.w	80140fe <dir_read.constprop.0+0x29a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013f32:	1c43      	adds	r3, r0, #1
 8013f34:	f000 80b5 	beq.w	80140a2 <dir_read.constprop.0+0x23e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013f38:	9b01      	ldr	r3, [sp, #4]
 8013f3a:	699a      	ldr	r2, [r3, #24]
 8013f3c:	4290      	cmp	r0, r2
 8013f3e:	f0c0 80d1 	bcc.w	80140e4 <dir_read.constprop.0+0x280>
	FRESULT res = FR_NO_FILE;
 8013f42:	2004      	movs	r0, #4
 8013f44:	e7af      	b.n	8013ea6 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f46:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8013f48:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f4a:	441a      	add	r2, r3
 8013f4c:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 8013f4e:	e798      	b.n	8013e82 <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8013f50:	2b0f      	cmp	r3, #15
 8013f52:	f040 80dc 	bne.w	801410e <dir_read.constprop.0+0x2aa>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8013f56:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 8013f58:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8013f5a:	f140 80a4 	bpl.w	80140a6 <dir_read.constprop.0+0x242>
						c &= (BYTE)~LLEF; ord = c;
 8013f5e:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8013f62:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 8013f66:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013f68:	7b4b      	ldrb	r3, [r1, #13]
 8013f6a:	454b      	cmp	r3, r9
 8013f6c:	d1b3      	bne.n	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8013f6e:	7eca      	ldrb	r2, [r1, #27]
 8013f70:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8013f72:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8013f76:	d1ae      	bne.n	8013ed6 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013f78:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 8013f7a:	788a      	ldrb	r2, [r1, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 8013f80:	7848      	ldrb	r0, [r1, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013f82:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 8013f84:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013f88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013f8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8013f90:	2bfe      	cmp	r3, #254	; 0xfe
 8013f92:	d8a0      	bhi.n	8013ed6 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013f94:	f8d6 e00c 	ldr.w	lr, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8013f98:	1c5a      	adds	r2, r3, #1
 8013f9a:	f82e 0013 	strh.w	r0, [lr, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 8013f9e:	f891 a004 	ldrb.w	sl, [r1, #4]
 8013fa2:	f891 c003 	ldrb.w	ip, [r1, #3]
 8013fa6:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
		if (wc) {
 8013faa:	2800      	cmp	r0, #0
 8013fac:	f040 80b7 	bne.w	801411e <dir_read.constprop.0+0x2ba>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fb4:	459c      	cmp	ip, r3
 8013fb6:	d18e      	bne.n	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8013fb8:	798b      	ldrb	r3, [r1, #6]
 8013fba:	f891 b005 	ldrb.w	fp, [r1, #5]
 8013fbe:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fc6:	459b      	cmp	fp, r3
 8013fc8:	d185      	bne.n	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8013fca:	7a0b      	ldrb	r3, [r1, #8]
 8013fcc:	f891 a007 	ldrb.w	sl, [r1, #7]
 8013fd0:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fd8:	459a      	cmp	sl, r3
 8013fda:	f47f af7c 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8013fde:	7a8b      	ldrb	r3, [r1, #10]
 8013fe0:	f891 c009 	ldrb.w	ip, [r1, #9]
 8013fe4:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fec:	459c      	cmp	ip, r3
 8013fee:	f47f af72 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8013ff2:	7bcb      	ldrb	r3, [r1, #15]
 8013ff4:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8013ff8:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014000:	459b      	cmp	fp, r3
 8014002:	f47f af68 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014006:	7c4b      	ldrb	r3, [r1, #17]
 8014008:	f891 a010 	ldrb.w	sl, [r1, #16]
 801400c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014014:	459a      	cmp	sl, r3
 8014016:	f47f af5e 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801401a:	7ccb      	ldrb	r3, [r1, #19]
 801401c:	f891 c012 	ldrb.w	ip, [r1, #18]
 8014020:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014028:	459c      	cmp	ip, r3
 801402a:	f47f af54 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801402e:	7d4b      	ldrb	r3, [r1, #21]
 8014030:	f891 a014 	ldrb.w	sl, [r1, #20]
 8014034:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801403c:	459a      	cmp	sl, r3
 801403e:	f47f af4a 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014042:	7dcb      	ldrb	r3, [r1, #23]
 8014044:	f891 c016 	ldrb.w	ip, [r1, #22]
 8014048:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801404c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014050:	459c      	cmp	ip, r3
 8014052:	f47f af40 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014056:	7e4b      	ldrb	r3, [r1, #25]
 8014058:	f891 a018 	ldrb.w	sl, [r1, #24]
 801405c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014064:	459a      	cmp	sl, r3
 8014066:	f47f af36 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801406a:	7f4b      	ldrb	r3, [r1, #29]
 801406c:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8014070:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014078:	459c      	cmp	ip, r3
 801407a:	f47f af2c 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 801407e:	7fcb      	ldrb	r3, [r1, #31]
 8014080:	f891 a01e 	ldrb.w	sl, [r1, #30]
 8014084:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801408c:	459a      	cmp	sl, r3
 801408e:	f000 8101 	beq.w	8014294 <dir_read.constprop.0+0x430>
 8014092:	e720      	b.n	8013ed6 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014094:	2301      	movs	r3, #1
 8014096:	462a      	mov	r2, r5
 8014098:	4641      	mov	r1, r8
 801409a:	7870      	ldrb	r0, [r6, #1]
 801409c:	f7ff fcb6 	bl	8013a0c <disk_write>
 80140a0:	b128      	cbz	r0, 80140ae <dir_read.constprop.0+0x24a>
	FRESULT res = FR_NO_FILE;
 80140a2:	2001      	movs	r0, #1
 80140a4:	e6ff      	b.n	8013ea6 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80140a6:	42ba      	cmp	r2, r7
 80140a8:	f47f af15 	bne.w	8013ed6 <dir_read.constprop.0+0x72>
 80140ac:	e75c      	b.n	8013f68 <dir_read.constprop.0+0x104>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80140ae:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80140b0:	69f3      	ldr	r3, [r6, #28]
 80140b2:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80140b4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80140b6:	429a      	cmp	r2, r3
 80140b8:	f4bf aeea 	bcs.w	8013e90 <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80140bc:	f896 b002 	ldrb.w	fp, [r6, #2]
 80140c0:	f1bb 0f01 	cmp.w	fp, #1
 80140c4:	d801      	bhi.n	80140ca <dir_read.constprop.0+0x266>
 80140c6:	e6e3      	b.n	8013e90 <dir_read.constprop.0+0x2c>
 80140c8:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80140ca:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80140cc:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80140d0:	2301      	movs	r3, #1
 80140d2:	4641      	mov	r1, r8
 80140d4:	462a      	mov	r2, r5
 80140d6:	7870      	ldrb	r0, [r6, #1]
 80140d8:	f7ff fc98 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80140dc:	f1bb 0f01 	cmp.w	fp, #1
 80140e0:	d1f2      	bne.n	80140c8 <dir_read.constprop.0+0x264>
 80140e2:	e6d5      	b.n	8013e90 <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80140e4:	3a02      	subs	r2, #2
	clst -= 2;
 80140e6:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80140e8:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80140ea:	4291      	cmp	r1, r2
 80140ec:	d209      	bcs.n	8014102 <dir_read.constprop.0+0x29e>
	return clst * fs->csize + fs->database;
 80140ee:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 80140f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140f4:	fb01 2a0a 	mla	sl, r1, sl, r2
				dp->sect = clust2sect(fs, clst);
 80140f8:	f8c4 a01c 	str.w	sl, [r4, #28]
 80140fc:	e703      	b.n	8013f06 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80140fe:	2002      	movs	r0, #2
 8014100:	e6d1      	b.n	8013ea6 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014102:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 8014104:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8014108:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801410a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 801410c:	e701      	b.n	8013f12 <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801410e:	2f00      	cmp	r7, #0
 8014110:	f000 80cb 	beq.w	80142aa <dir_read.constprop.0+0x446>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014114:	f04f 33ff 	mov.w	r3, #4294967295
 8014118:	2000      	movs	r0, #0
 801411a:	6323      	str	r3, [r4, #48]	; 0x30
 801411c:	e6c5      	b.n	8013eaa <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801411e:	2aff      	cmp	r2, #255	; 0xff
 8014120:	f000 810d 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014124:	f82e c012 	strh.w	ip, [lr, r2, lsl #1]
 8014128:	0050      	lsls	r0, r2, #1
	rv = rv << 8 | ptr[0];
 801412a:	f891 a006 	ldrb.w	sl, [r1, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 801412e:	1c9a      	adds	r2, r3, #2
	rv = rv << 8 | ptr[0];
 8014130:	f891 b005 	ldrb.w	fp, [r1, #5]
 8014134:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 8014138:	f1bc 0f00 	cmp.w	ip, #0
 801413c:	f43f af41 	beq.w	8013fc2 <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014140:	2aff      	cmp	r2, #255	; 0xff
 8014142:	f000 80fc 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014146:	4470      	add	r0, lr
 8014148:	1cda      	adds	r2, r3, #3
 801414a:	f8a0 b002 	strh.w	fp, [r0, #2]
	rv = rv << 8 | ptr[0];
 801414e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8014152:	f891 a007 	ldrb.w	sl, [r1, #7]
 8014156:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 801415a:	f1bb 0f00 	cmp.w	fp, #0
 801415e:	f43f af39 	beq.w	8013fd4 <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014162:	2aff      	cmp	r2, #255	; 0xff
 8014164:	f000 80eb 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014168:	f8a0 a004 	strh.w	sl, [r0, #4]
 801416c:	1d1a      	adds	r2, r3, #4
	rv = rv << 8 | ptr[0];
 801416e:	f891 b00a 	ldrb.w	fp, [r1, #10]
 8014172:	f891 c009 	ldrb.w	ip, [r1, #9]
 8014176:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 801417a:	f1ba 0f00 	cmp.w	sl, #0
 801417e:	f43f af33 	beq.w	8013fe8 <dir_read.constprop.0+0x184>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014182:	2aff      	cmp	r2, #255	; 0xff
 8014184:	f000 80db 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014188:	f8a0 c006 	strh.w	ip, [r0, #6]
 801418c:	1d5a      	adds	r2, r3, #5
	rv = rv << 8 | ptr[0];
 801418e:	f891 a00f 	ldrb.w	sl, [r1, #15]
 8014192:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8014196:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 801419a:	f1bc 0f00 	cmp.w	ip, #0
 801419e:	f43f af2d 	beq.w	8013ffc <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80141a2:	2aff      	cmp	r2, #255	; 0xff
 80141a4:	f000 80cb 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80141a8:	f8a0 b008 	strh.w	fp, [r0, #8]
 80141ac:	1d9a      	adds	r2, r3, #6
	rv = rv << 8 | ptr[0];
 80141ae:	f891 c011 	ldrb.w	ip, [r1, #17]
 80141b2:	f891 a010 	ldrb.w	sl, [r1, #16]
 80141b6:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 80141ba:	f1bb 0f00 	cmp.w	fp, #0
 80141be:	f43f af27 	beq.w	8014010 <dir_read.constprop.0+0x1ac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80141c2:	2aff      	cmp	r2, #255	; 0xff
 80141c4:	f000 80bb 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80141c8:	f8a0 a00a 	strh.w	sl, [r0, #10]
 80141cc:	1dda      	adds	r2, r3, #7
	rv = rv << 8 | ptr[0];
 80141ce:	f891 b013 	ldrb.w	fp, [r1, #19]
 80141d2:	f891 c012 	ldrb.w	ip, [r1, #18]
 80141d6:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 80141da:	f1ba 0f00 	cmp.w	sl, #0
 80141de:	f43f af21 	beq.w	8014024 <dir_read.constprop.0+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80141e2:	2aff      	cmp	r2, #255	; 0xff
 80141e4:	f000 80ab 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80141e8:	f8a0 c00c 	strh.w	ip, [r0, #12]
 80141ec:	f103 0208 	add.w	r2, r3, #8
	rv = rv << 8 | ptr[0];
 80141f0:	f891 b015 	ldrb.w	fp, [r1, #21]
 80141f4:	f891 a014 	ldrb.w	sl, [r1, #20]
 80141f8:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 80141fc:	f1bc 0f00 	cmp.w	ip, #0
 8014200:	f43f af1a 	beq.w	8014038 <dir_read.constprop.0+0x1d4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014204:	2aff      	cmp	r2, #255	; 0xff
 8014206:	f000 809a 	beq.w	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801420a:	f8a0 a00e 	strh.w	sl, [r0, #14]
 801420e:	f103 0209 	add.w	r2, r3, #9
	rv = rv << 8 | ptr[0];
 8014212:	f891 b017 	ldrb.w	fp, [r1, #23]
 8014216:	f891 c016 	ldrb.w	ip, [r1, #22]
 801421a:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 801421e:	f1ba 0f00 	cmp.w	sl, #0
 8014222:	f43f af13 	beq.w	801404c <dir_read.constprop.0+0x1e8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014226:	2aff      	cmp	r2, #255	; 0xff
 8014228:	f43f ae55 	beq.w	8013ed6 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801422c:	f8a0 c010 	strh.w	ip, [r0, #16]
 8014230:	f103 020a 	add.w	r2, r3, #10
	rv = rv << 8 | ptr[0];
 8014234:	f891 b019 	ldrb.w	fp, [r1, #25]
 8014238:	f891 a018 	ldrb.w	sl, [r1, #24]
 801423c:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8014240:	f1bc 0f00 	cmp.w	ip, #0
 8014244:	f43f af0c 	beq.w	8014060 <dir_read.constprop.0+0x1fc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014248:	2aff      	cmp	r2, #255	; 0xff
 801424a:	d078      	beq.n	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801424c:	f8a0 a012 	strh.w	sl, [r0, #18]
 8014250:	f103 020b 	add.w	r2, r3, #11
	rv = rv << 8 | ptr[0];
 8014254:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8014258:	f891 c01c 	ldrb.w	ip, [r1, #28]
 801425c:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8014260:	f1ba 0f00 	cmp.w	sl, #0
 8014264:	f43f af06 	beq.w	8014074 <dir_read.constprop.0+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014268:	2aff      	cmp	r2, #255	; 0xff
 801426a:	d068      	beq.n	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801426c:	f8a0 c014 	strh.w	ip, [r0, #20]
 8014270:	f103 020c 	add.w	r2, r3, #12
	rv = rv << 8 | ptr[0];
 8014274:	f891 b01f 	ldrb.w	fp, [r1, #31]
 8014278:	f891 a01e 	ldrb.w	sl, [r1, #30]
 801427c:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8014280:	f1bc 0f00 	cmp.w	ip, #0
 8014284:	f43f af00 	beq.w	8014088 <dir_read.constprop.0+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014288:	2aff      	cmp	r2, #255	; 0xff
 801428a:	d058      	beq.n	801433e <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801428c:	f103 020d 	add.w	r2, r3, #13
 8014290:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014294:	780b      	ldrb	r3, [r1, #0]
 8014296:	0659      	lsls	r1, r3, #25
 8014298:	d504      	bpl.n	80142a4 <dir_read.constprop.0+0x440>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801429a:	2aff      	cmp	r2, #255	; 0xff
 801429c:	d04f      	beq.n	801433e <dir_read.constprop.0+0x4da>
		lfnbuf[i] = 0;
 801429e:	2300      	movs	r3, #0
 80142a0:	f82e 3012 	strh.w	r3, [lr, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80142a4:	3f01      	subs	r7, #1
 80142a6:	b2ff      	uxtb	r7, r7
 80142a8:	e616      	b.n	8013ed8 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80142aa:	780a      	ldrb	r2, [r1, #0]
 80142ac:	784e      	ldrb	r6, [r1, #1]
 80142ae:	01d3      	lsls	r3, r2, #7
 80142b0:	788d      	ldrb	r5, [r1, #2]
 80142b2:	78c8      	ldrb	r0, [r1, #3]
 80142b4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80142b8:	199a      	adds	r2, r3, r6
 80142ba:	790e      	ldrb	r6, [r1, #4]
 80142bc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80142c0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80142c4:	fa55 f283 	uxtab	r2, r5, r3
 80142c8:	794d      	ldrb	r5, [r1, #5]
 80142ca:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80142ce:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80142d2:	fa50 f283 	uxtab	r2, r0, r3
 80142d6:	7988      	ldrb	r0, [r1, #6]
 80142d8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80142dc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80142e0:	fa56 f283 	uxtab	r2, r6, r3
 80142e4:	79ce      	ldrb	r6, [r1, #7]
 80142e6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80142ea:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80142ee:	fa55 f283 	uxtab	r2, r5, r3
 80142f2:	7a0d      	ldrb	r5, [r1, #8]
 80142f4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80142f8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80142fc:	fa50 f283 	uxtab	r2, r0, r3
 8014300:	7a48      	ldrb	r0, [r1, #9]
 8014302:	7a89      	ldrb	r1, [r1, #10]
 8014304:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014308:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801430c:	fa56 f283 	uxtab	r2, r6, r3
 8014310:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014314:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014318:	fa55 f283 	uxtab	r2, r5, r3
 801431c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014320:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014324:	fa50 f283 	uxtab	r2, r0, r3
 8014328:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801432c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014330:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014334:	b2db      	uxtb	r3, r3
 8014336:	4599      	cmp	r9, r3
 8014338:	f47f aeec 	bne.w	8014114 <dir_read.constprop.0+0x2b0>
 801433c:	e5e9      	b.n	8013f12 <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801433e:	4617      	mov	r7, r2
 8014340:	e5ca      	b.n	8013ed8 <dir_read.constprop.0+0x74>
 8014342:	bf00      	nop

08014344 <sync_fs>:
{
 8014344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014346:	78c3      	ldrb	r3, [r0, #3]
{
 8014348:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801434a:	b95b      	cbnz	r3, 8014364 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801434c:	7823      	ldrb	r3, [r4, #0]
 801434e:	2b03      	cmp	r3, #3
 8014350:	d029      	beq.n	80143a6 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014352:	2200      	movs	r2, #0
 8014354:	7860      	ldrb	r0, [r4, #1]
 8014356:	4611      	mov	r1, r2
 8014358:	f7ff fb66 	bl	8013a28 <disk_ioctl>
			res = FR_DISK_ERR;
 801435c:	3800      	subs	r0, #0
 801435e:	bf18      	it	ne
 8014360:	2001      	movne	r0, #1
}
 8014362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8014364:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014366:	f100 0734 	add.w	r7, r0, #52	; 0x34
 801436a:	2301      	movs	r3, #1
 801436c:	7840      	ldrb	r0, [r0, #1]
 801436e:	462a      	mov	r2, r5
 8014370:	4639      	mov	r1, r7
 8014372:	f7ff fb4b 	bl	8013a0c <disk_write>
 8014376:	2800      	cmp	r0, #0
 8014378:	d150      	bne.n	801441c <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801437a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801437c:	69e3      	ldr	r3, [r4, #28]
 801437e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8014380:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014382:	429a      	cmp	r2, r3
 8014384:	d2e2      	bcs.n	801434c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014386:	78a6      	ldrb	r6, [r4, #2]
 8014388:	2e01      	cmp	r6, #1
 801438a:	d801      	bhi.n	8014390 <sync_fs+0x4c>
 801438c:	e7de      	b.n	801434c <sync_fs+0x8>
 801438e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8014390:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014392:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8014394:	2301      	movs	r3, #1
 8014396:	4639      	mov	r1, r7
 8014398:	462a      	mov	r2, r5
 801439a:	7860      	ldrb	r0, [r4, #1]
 801439c:	f7ff fb36 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80143a0:	2e01      	cmp	r6, #1
 80143a2:	d1f4      	bne.n	801438e <sync_fs+0x4a>
 80143a4:	e7d2      	b.n	801434c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80143a6:	7926      	ldrb	r6, [r4, #4]
 80143a8:	2e01      	cmp	r6, #1
 80143aa:	d1d2      	bne.n	8014352 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 80143ac:	f104 0334 	add.w	r3, r4, #52	; 0x34
	BYTE *d = (BYTE*)dst;
 80143b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80143b4:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80143b6:	2755      	movs	r7, #85	; 0x55
 80143b8:	4618      	mov	r0, r3
 80143ba:	f00c fbb3 	bl	8020b24 <memset>
 80143be:	4603      	mov	r3, r0
			fs->winsect = fs->volbase + 1;
 80143c0:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80143c2:	4619      	mov	r1, r3
 80143c4:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 80143c6:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80143c8:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80143cc:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
			fs->winsect = fs->volbase + 1;
 80143d0:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80143d2:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 80143d6:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 80143da:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80143dc:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 80143e0:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80143e2:	f884 c21d 	strb.w	ip, [r4, #541]	; 0x21d
	*ptr++ = (BYTE)val; val >>= 8;
 80143e6:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val; val >>= 8;
 80143ea:	0a06      	lsrs	r6, r0, #8
	*ptr++ = (BYTE)val;
 80143ec:	f884 521f 	strb.w	r5, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 80143f0:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80143f2:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80143f4:	f884 6221 	strb.w	r6, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 80143f8:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 80143fc:	26aa      	movs	r6, #170	; 0xaa
	*ptr++ = (BYTE)val;
 80143fe:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 8014402:	4d07      	ldr	r5, [pc, #28]	; (8014420 <sync_fs+0xdc>)
 8014404:	4807      	ldr	r0, [pc, #28]	; (8014424 <sync_fs+0xe0>)
	*ptr++ = (BYTE)val;
 8014406:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 801440a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 801440e:	6365      	str	r5, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014410:	7860      	ldrb	r0, [r4, #1]
 8014412:	f7ff fafb 	bl	8013a0c <disk_write>
			fs->fsi_flag = 0;
 8014416:	2300      	movs	r3, #0
 8014418:	7123      	strb	r3, [r4, #4]
 801441a:	e79a      	b.n	8014352 <sync_fs+0xe>
			res = FR_DISK_ERR;
 801441c:	2001      	movs	r0, #1
}
 801441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014420:	41615252 	.word	0x41615252
 8014424:	61417272 	.word	0x61417272

08014428 <create_chain>:
{
 8014428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442c:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 801442e:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 8014430:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8014434:	2900      	cmp	r1, #0
 8014436:	f040 80bc 	bne.w	80145b2 <create_chain+0x18a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801443a:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801443e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014442:	b9ce      	cbnz	r6, 8014478 <create_chain+0x50>
 8014444:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8014446:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8014448:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801444a:	429c      	cmp	r4, r3
 801444c:	d318      	bcc.n	8014480 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 801444e:	2e01      	cmp	r6, #1
 8014450:	f240 80ab 	bls.w	80145aa <create_chain+0x182>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014454:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8014458:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801445a:	69ab      	ldr	r3, [r5, #24]
 801445c:	42a3      	cmp	r3, r4
 801445e:	d907      	bls.n	8014470 <create_chain+0x48>
		switch (fs->fs_type) {
 8014460:	782b      	ldrb	r3, [r5, #0]
 8014462:	2b02      	cmp	r3, #2
 8014464:	f000 808c 	beq.w	8014580 <create_chain+0x158>
 8014468:	2b03      	cmp	r3, #3
 801446a:	d044      	beq.n	80144f6 <create_chain+0xce>
 801446c:	2b01      	cmp	r3, #1
 801446e:	d00c      	beq.n	801448a <create_chain+0x62>
 8014470:	2401      	movs	r4, #1
}
 8014472:	4620      	mov	r0, r4
 8014474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014478:	42b3      	cmp	r3, r6
 801447a:	bf98      	it	ls
 801447c:	2601      	movls	r6, #1
 801447e:	e7e2      	b.n	8014446 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014480:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014482:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014486:	d9f3      	bls.n	8014470 <create_chain+0x48>
 8014488:	e7e7      	b.n	801445a <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 801448a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801448e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014490:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014492:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014496:	4291      	cmp	r1, r2
 8014498:	d005      	beq.n	80144a6 <create_chain+0x7e>
 801449a:	4628      	mov	r0, r5
 801449c:	f7ff fb5a 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80144a0:	bb20      	cbnz	r0, 80144ec <create_chain+0xc4>
 80144a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80144a4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80144a6:	f3cb 0008 	ubfx	r0, fp, #0, #9
 80144aa:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80144ae:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80144b2:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144b4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80144b6:	f890 a034 	ldrb.w	sl, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144ba:	d003      	beq.n	80144c4 <create_chain+0x9c>
 80144bc:	4628      	mov	r0, r5
 80144be:	f7ff fb49 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80144c2:	b998      	cbnz	r0, 80144ec <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 80144c4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80144c8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80144ca:	445d      	add	r5, fp
 80144cc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80144d0:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80144d4:	d57d      	bpl.n	80145d2 <create_chain+0x1aa>
 80144d6:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 80144d8:	b343      	cbz	r3, 801452c <create_chain+0x104>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d0c8      	beq.n	8014470 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 80144de:	42a6      	cmp	r6, r4
 80144e0:	d063      	beq.n	80145aa <create_chain+0x182>
 80144e2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80144e6:	e7af      	b.n	8014448 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80144e8:	2801      	cmp	r0, #1
 80144ea:	d1c1      	bne.n	8014470 <create_chain+0x48>
 80144ec:	f04f 34ff 	mov.w	r4, #4294967295
}
 80144f0:	4620      	mov	r0, r4
 80144f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80144f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80144fa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144fe:	4299      	cmp	r1, r3
 8014500:	d004      	beq.n	801450c <create_chain+0xe4>
 8014502:	4628      	mov	r0, r5
 8014504:	f7ff fb26 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014508:	2800      	cmp	r0, #0
 801450a:	d1ef      	bne.n	80144ec <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801450c:	00a3      	lsls	r3, r4, #2
 801450e:	3534      	adds	r5, #52	; 0x34
 8014510:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014514:	18e9      	adds	r1, r5, r3
	rv = rv << 8 | ptr[0];
 8014516:	5ceb      	ldrb	r3, [r5, r3]
	rv = rv << 8 | ptr[2];
 8014518:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 801451a:	784a      	ldrb	r2, [r1, #1]
 801451c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8014520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014524:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8014528:	2b00      	cmp	r3, #0
 801452a:	d1d6      	bne.n	80144da <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801452c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014530:	42a3      	cmp	r3, r4
 8014532:	d99d      	bls.n	8014470 <create_chain+0x48>
 8014534:	f04f 32ff 	mov.w	r2, #4294967295
 8014538:	4621      	mov	r1, r4
 801453a:	4640      	mov	r0, r8
 801453c:	f7ff fb44 	bl	8013bc8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8014540:	b958      	cbnz	r0, 801455a <create_chain+0x132>
 8014542:	b157      	cbz	r7, 801455a <create_chain+0x132>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014544:	2f01      	cmp	r7, #1
 8014546:	d993      	bls.n	8014470 <create_chain+0x48>
 8014548:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801454c:	429f      	cmp	r7, r3
 801454e:	d28f      	bcs.n	8014470 <create_chain+0x48>
 8014550:	4639      	mov	r1, r7
 8014552:	4622      	mov	r2, r4
 8014554:	4640      	mov	r0, r8
 8014556:	f7ff fb37 	bl	8013bc8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801455a:	2800      	cmp	r0, #0
 801455c:	d1c4      	bne.n	80144e8 <create_chain+0xc0>
		fs->last_clst = ncl;
 801455e:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014562:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 8014566:	3b02      	subs	r3, #2
 8014568:	429a      	cmp	r2, r3
 801456a:	d802      	bhi.n	8014572 <create_chain+0x14a>
 801456c:	3a01      	subs	r2, #1
 801456e:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8014572:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014576:	f043 0301 	orr.w	r3, r3, #1
 801457a:	f888 3004 	strb.w	r3, [r8, #4]
 801457e:	e778      	b.n	8014472 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014580:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014582:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014584:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014588:	4299      	cmp	r1, r3
 801458a:	d004      	beq.n	8014596 <create_chain+0x16e>
 801458c:	4628      	mov	r0, r5
 801458e:	f7ff fae1 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014592:	2800      	cmp	r0, #0
 8014594:	d1aa      	bne.n	80144ec <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014596:	0063      	lsls	r3, r4, #1
 8014598:	3534      	adds	r5, #52	; 0x34
 801459a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801459e:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 80145a0:	5ceb      	ldrb	r3, [r5, r3]
 80145a2:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80145a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			break;
 80145a8:	e796      	b.n	80144d8 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 80145aa:	2400      	movs	r4, #0
}
 80145ac:	4620      	mov	r0, r4
 80145ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80145b2:	4640      	mov	r0, r8
 80145b4:	f7ff fba6 	bl	8013d04 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80145b8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80145ba:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80145bc:	f67f af58 	bls.w	8014470 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80145c0:	1c41      	adds	r1, r0, #1
 80145c2:	d093      	beq.n	80144ec <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80145c4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80145c8:	4283      	cmp	r3, r0
 80145ca:	f63f af52 	bhi.w	8014472 <create_chain+0x4a>
 80145ce:	463e      	mov	r6, r7
 80145d0:	e739      	b.n	8014446 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80145d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80145d6:	e77f      	b.n	80144d8 <create_chain+0xb0>

080145d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80145d8:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80145da:	f04f 36ff 	mov.w	r6, #4294967295
 80145de:	2300      	movs	r3, #0
{
 80145e0:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80145e2:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80145e4:	70c3      	strb	r3, [r0, #3]
 80145e6:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80145e8:	d00c      	beq.n	8014604 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80145ea:	460d      	mov	r5, r1
 80145ec:	460a      	mov	r2, r1
 80145ee:	2301      	movs	r3, #1
 80145f0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80145f4:	7840      	ldrb	r0, [r0, #1]
 80145f6:	f7ff f9fb 	bl	80139f0 <disk_read>
 80145fa:	b110      	cbz	r0, 8014602 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80145fc:	2004      	movs	r0, #4
			fs->winsect = sector;
 80145fe:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8014600:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8014602:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8014604:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014608:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801460c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8014610:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014614:	4293      	cmp	r3, r2
 8014616:	d12a      	bne.n	801466e <check_fs+0x96>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014618:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801461c:	2be9      	cmp	r3, #233	; 0xe9
 801461e:	d007      	beq.n	8014630 <check_fs+0x58>
 8014620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014622:	4a15      	ldr	r2, [pc, #84]	; (8014678 <check_fs+0xa0>)
 8014624:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014628:	4293      	cmp	r3, r2
 801462a:	d001      	beq.n	8014630 <check_fs+0x58>
	return 2;
 801462c:	2002      	movs	r0, #2
}
 801462e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 8014630:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 8014634:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 8014638:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 801463c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014640:	490e      	ldr	r1, [pc, #56]	; (801467c <check_fs+0xa4>)
	rv = rv << 8 | ptr[0];
 8014642:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014646:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801464a:	428b      	cmp	r3, r1
 801464c:	d011      	beq.n	8014672 <check_fs+0x9a>
	rv = rv << 8 | ptr[2];
 801464e:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 8014652:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 8014656:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 801465a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801465e:	4a08      	ldr	r2, [pc, #32]	; (8014680 <check_fs+0xa8>)
	rv = rv << 8 | ptr[0];
 8014660:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014664:	4290      	cmp	r0, r2
 8014666:	bf14      	ite	ne
 8014668:	2002      	movne	r0, #2
 801466a:	2000      	moveq	r0, #0
}
 801466c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801466e:	2003      	movs	r0, #3
}
 8014670:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014672:	2000      	movs	r0, #0
}
 8014674:	bd70      	pop	{r4, r5, r6, pc}
 8014676:	bf00      	nop
 8014678:	009000eb 	.word	0x009000eb
 801467c:	00544146 	.word	0x00544146
 8014680:	33544146 	.word	0x33544146

08014684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 8014688:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801468a:	2400      	movs	r4, #0
 801468c:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 801468e:	b193      	cbz	r3, 80146b6 <find_volume+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014690:	781e      	ldrb	r6, [r3, #0]
 8014692:	2e1f      	cmp	r6, #31
 8014694:	d913      	bls.n	80146be <find_volume+0x3a>
 8014696:	2e3a      	cmp	r6, #58	; 0x3a
 8014698:	d011      	beq.n	80146be <find_volume+0x3a>
 801469a:	461d      	mov	r5, r3
 801469c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80146a0:	2c1f      	cmp	r4, #31
 80146a2:	d90e      	bls.n	80146c2 <find_volume+0x3e>
 80146a4:	2c3a      	cmp	r4, #58	; 0x3a
 80146a6:	d1f9      	bne.n	801469c <find_volume+0x18>
			i = *tp++ - '0';
 80146a8:	3301      	adds	r3, #1
 80146aa:	3e30      	subs	r6, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80146ac:	429d      	cmp	r5, r3
 80146ae:	d102      	bne.n	80146b6 <find_volume+0x32>
 80146b0:	2e01      	cmp	r6, #1
 80146b2:	f240 814d 	bls.w	8014950 <find_volume+0x2cc>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 80146b6:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80146b8:	4628      	mov	r0, r5
 80146ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80146be:	4634      	mov	r4, r6
 80146c0:	461d      	mov	r5, r3
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80146c2:	2c3a      	cmp	r4, #58	; 0x3a
 80146c4:	d0f0      	beq.n	80146a8 <find_volume+0x24>
		vol = 0;		/* Drive 0 */
 80146c6:	2600      	movs	r6, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80146c8:	4bc8      	ldr	r3, [pc, #800]	; (80149ec <find_volume+0x368>)
 80146ca:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80146ce:	2c00      	cmp	r4, #0
 80146d0:	f000 812a 	beq.w	8014928 <find_volume+0x2a4>
	*rfs = fs;							/* Return pointer to the file system object */
 80146d4:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80146d6:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80146da:	7823      	ldrb	r3, [r4, #0]
 80146dc:	b17b      	cbz	r3, 80146fe <find_volume+0x7a>
		stat = disk_status(fs->drv);
 80146de:	7860      	ldrb	r0, [r4, #1]
 80146e0:	f7ff f968 	bl	80139b4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80146e4:	07c1      	lsls	r1, r0, #31
 80146e6:	d40a      	bmi.n	80146fe <find_volume+0x7a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80146e8:	2d00      	cmp	r5, #0
 80146ea:	f000 810c 	beq.w	8014906 <find_volume+0x282>
 80146ee:	f010 0504 	ands.w	r5, r0, #4
 80146f2:	f000 8108 	beq.w	8014906 <find_volume+0x282>
				return FR_WRITE_PROTECTED;
 80146f6:	250a      	movs	r5, #10
}
 80146f8:	4628      	mov	r0, r5
 80146fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80146fe:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8014700:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014702:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 8014704:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014706:	f7ff f95f 	bl	80139c8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801470a:	07c2      	lsls	r2, r0, #31
 801470c:	f100 80fe 	bmi.w	801490c <find_volume+0x288>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014710:	b10d      	cbz	r5, 8014716 <find_volume+0x92>
 8014712:	0743      	lsls	r3, r0, #29
 8014714:	d4ef      	bmi.n	80146f6 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014716:	2100      	movs	r1, #0
 8014718:	4620      	mov	r0, r4
 801471a:	f7ff ff5d 	bl	80145d8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801471e:	2802      	cmp	r0, #2
 8014720:	f000 80ae 	beq.w	8014880 <find_volume+0x1fc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014724:	2804      	cmp	r0, #4
 8014726:	f000 80fd 	beq.w	8014924 <find_volume+0x2a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801472a:	2801      	cmp	r0, #1
 801472c:	f200 80ea 	bhi.w	8014904 <find_volume+0x280>
	bsect = 0;
 8014730:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 8014732:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8014736:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 801473a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801473e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014742:	f040 80df 	bne.w	8014904 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 8014746:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 801474a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801474e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8014752:	d109      	bne.n	8014768 <find_volume+0xe4>
	rv = rv << 8 | ptr[2];
 8014754:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 8014758:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 801475c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 8014760:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8014764:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014768:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
		fs->fsize = fasize;
 801476c:	61e3      	str	r3, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801476e:	1e42      	subs	r2, r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014770:	70a0      	strb	r0, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014772:	2a01      	cmp	r2, #1
 8014774:	f200 80c6 	bhi.w	8014904 <find_volume+0x280>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014778:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 801477c:	b2ba      	uxth	r2, r7
 801477e:	8162      	strh	r2, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014780:	2a00      	cmp	r2, #0
 8014782:	f000 80bf 	beq.w	8014904 <find_volume+0x280>
 8014786:	1e7a      	subs	r2, r7, #1
 8014788:	423a      	tst	r2, r7
 801478a:	f040 80bb 	bne.w	8014904 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 801478e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8014792:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8014796:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801479a:	f012 0f0f 	tst.w	r2, #15
	rv = rv << 8 | ptr[0];
 801479e:	4694      	mov	ip, r2
 80147a0:	b216      	sxth	r6, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80147a2:	8122      	strh	r2, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80147a4:	f040 80ae 	bne.w	8014904 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 80147a8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80147ac:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80147b0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 80147b4:	d109      	bne.n	80147ca <find_volume+0x146>
	rv = rv << 8 | ptr[2];
 80147b6:	f8b4 e056 	ldrh.w	lr, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 80147ba:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 80147be:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 80147c2:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	rv = rv << 8 | ptr[0];
 80147c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80147ca:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
 80147ce:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80147d2:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 80147d6:	f000 8095 	beq.w	8014904 <find_volume+0x280>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80147da:	fb03 f000 	mul.w	r0, r3, r0
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80147de:	eb01 1e1c 	add.w	lr, r1, ip, lsr #4
 80147e2:	4486      	add	lr, r0
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80147e4:	4572      	cmp	r2, lr
 80147e6:	f0c0 808d 	bcc.w	8014904 <find_volume+0x280>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80147ea:	eba2 020e 	sub.w	r2, r2, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80147ee:	42ba      	cmp	r2, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80147f0:	fbb2 f8f7 	udiv	r8, r2, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80147f4:	f0c0 8086 	bcc.w	8014904 <find_volume+0x280>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80147f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80147fc:	4590      	cmp	r8, r2
 80147fe:	f200 80aa 	bhi.w	8014956 <find_volume+0x2d2>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014802:	f640 72f5 	movw	r2, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014806:	4429      	add	r1, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8014808:	eb0e 0605 	add.w	r6, lr, r5
		fs->volbase = bsect;							/* Volume start sector */
 801480c:	6225      	str	r5, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801480e:	4590      	cmp	r8, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014810:	f108 0202 	add.w	r2, r8, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014814:	6261      	str	r1, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014816:	61a2      	str	r2, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8014818:	62e6      	str	r6, [r4, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801481a:	f200 80dd 	bhi.w	80149d8 <find_volume+0x354>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801481e:	f1bc 0f00 	cmp.w	ip, #0
 8014822:	d06f      	beq.n	8014904 <find_volume+0x280>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014824:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8014828:	f002 0201 	and.w	r2, r2, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801482c:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801482e:	2001      	movs	r0, #1
 8014830:	eb02 0255 	add.w	r2, r2, r5, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014834:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014836:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 801483a:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 801483e:	d361      	bcc.n	8014904 <find_volume+0x280>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014840:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8014844:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014846:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 801484a:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 801484c:	4968      	ldr	r1, [pc, #416]	; (80149f0 <find_volume+0x36c>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 801484e:	4a69      	ldr	r2, [pc, #420]	; (80149f4 <find_volume+0x370>)
	fs->id = ++Fsid;		/* File system mount ID */
 8014850:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8014852:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014854:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014856:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014858:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 801485a:	4284      	cmp	r4, r0
	fs->id = ++Fsid;		/* File system mount ID */
 801485c:	800b      	strh	r3, [r1, #0]
 801485e:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014860:	f000 80b7 	beq.w	80149d2 <find_volume+0x34e>
 8014864:	6913      	ldr	r3, [r2, #16]
 8014866:	429c      	cmp	r4, r3
 8014868:	f000 80b0 	beq.w	80149cc <find_volume+0x348>
 801486c:	6a13      	ldr	r3, [r2, #32]
 801486e:	429c      	cmp	r4, r3
 8014870:	f000 80a9 	beq.w	80149c6 <find_volume+0x342>
 8014874:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8014876:	429c      	cmp	r4, r3
 8014878:	f000 80a2 	beq.w	80149c0 <find_volume+0x33c>
	return FR_OK;
 801487c:	2500      	movs	r5, #0
 801487e:	e042      	b.n	8014906 <find_volume+0x282>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014880:	f894 11f6 	ldrb.w	r1, [r4, #502]	; 0x1f6
 8014884:	2900      	cmp	r1, #0
 8014886:	d051      	beq.n	801492c <find_volume+0x2a8>
	rv = rv << 8 | ptr[2];
 8014888:	f8b4 31fc 	ldrh.w	r3, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 801488c:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 8014890:	f894 81fa 	ldrb.w	r8, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 8014894:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8014898:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801489c:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 80148a0:	b14d      	cbz	r5, 80148b6 <find_volume+0x232>
	rv = rv << 8 | ptr[2];
 80148a2:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 80148a6:	f894 320b 	ldrb.w	r3, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 80148aa:	f894 520a 	ldrb.w	r5, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 80148ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80148b2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80148b6:	f894 7216 	ldrb.w	r7, [r4, #534]	; 0x216
 80148ba:	b14f      	cbz	r7, 80148d0 <find_volume+0x24c>
	rv = rv << 8 | ptr[2];
 80148bc:	f8b4 221c 	ldrh.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 80148c0:	f894 321b 	ldrb.w	r3, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 80148c4:	f894 721a 	ldrb.w	r7, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 80148c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80148cc:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80148d0:	f894 6226 	ldrb.w	r6, [r4, #550]	; 0x226
 80148d4:	b14e      	cbz	r6, 80148ea <find_volume+0x266>
	rv = rv << 8 | ptr[2];
 80148d6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 80148da:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 80148de:	f894 622a 	ldrb.w	r6, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 80148e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80148e6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80148ea:	f1b8 0f00 	cmp.w	r8, #0
 80148ee:	d11f      	bne.n	8014930 <find_volume+0x2ac>
 80148f0:	b135      	cbz	r5, 8014900 <find_volume+0x27c>
 80148f2:	4629      	mov	r1, r5
 80148f4:	4620      	mov	r0, r4
 80148f6:	f7ff fe6f 	bl	80145d8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80148fa:	2801      	cmp	r0, #1
 80148fc:	f67f af19 	bls.w	8014732 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014900:	b9f7      	cbnz	r7, 8014940 <find_volume+0x2bc>
 8014902:	b93e      	cbnz	r6, 8014914 <find_volume+0x290>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014904:	250d      	movs	r5, #13
}
 8014906:	4628      	mov	r0, r5
 8014908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801490c:	2503      	movs	r5, #3
}
 801490e:	4628      	mov	r0, r5
 8014910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014914:	4631      	mov	r1, r6
 8014916:	4620      	mov	r0, r4
 8014918:	f7ff fe5e 	bl	80145d8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801491c:	2801      	cmp	r0, #1
 801491e:	d963      	bls.n	80149e8 <find_volume+0x364>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014920:	2804      	cmp	r0, #4
 8014922:	d1ef      	bne.n	8014904 <find_volume+0x280>
 8014924:	2501      	movs	r5, #1
 8014926:	e7ee      	b.n	8014906 <find_volume+0x282>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014928:	250c      	movs	r5, #12
 801492a:	e7ec      	b.n	8014906 <find_volume+0x282>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801492c:	4688      	mov	r8, r1
 801492e:	e7b5      	b.n	801489c <find_volume+0x218>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014930:	4641      	mov	r1, r8
 8014932:	4620      	mov	r0, r4
 8014934:	f7ff fe50 	bl	80145d8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014938:	2801      	cmp	r0, #1
 801493a:	d8d9      	bhi.n	80148f0 <find_volume+0x26c>
 801493c:	4645      	mov	r5, r8
 801493e:	e6f8      	b.n	8014732 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014940:	4639      	mov	r1, r7
 8014942:	4620      	mov	r0, r4
 8014944:	f7ff fe48 	bl	80145d8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014948:	2801      	cmp	r0, #1
 801494a:	d8da      	bhi.n	8014902 <find_volume+0x27e>
 801494c:	463d      	mov	r5, r7
 801494e:	e6f0      	b.n	8014732 <find_volume+0xae>
					*path = ++tt;
 8014950:	3501      	adds	r5, #1
 8014952:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014954:	e6b8      	b.n	80146c8 <find_volume+0x44>
	rv = rv << 8 | ptr[0];
 8014956:	f894 c05f 	ldrb.w	ip, [r4, #95]	; 0x5f
		fs->database = bsect + sysect;					/* Data start sector */
 801495a:	eb0e 0205 	add.w	r2, lr, r5
	rv = rv << 8 | ptr[0];
 801495e:	f894 705e 	ldrb.w	r7, [r4, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014962:	f108 0002 	add.w	r0, r8, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8014966:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014968:	4429      	add	r1, r5
	rv = rv << 8 | ptr[0];
 801496a:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801496e:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014970:	6261      	str	r1, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014972:	ea46 0207 	orr.w	r2, r6, r7
		fs->volbase = bsect;							/* Volume start sector */
 8014976:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014978:	b212      	sxth	r2, r2
 801497a:	2a00      	cmp	r2, #0
 801497c:	d1c2      	bne.n	8014904 <find_volume+0x280>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801497e:	0082      	lsls	r2, r0, #2
	rv = rv << 8 | ptr[2];
 8014980:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 8014984:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8014988:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801498c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 8014990:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014994:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
	rv = rv << 8 | ptr[0];
 8014998:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801499c:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801499e:	d3b1      	bcc.n	8014904 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 80149a0:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80149a4:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 80149a8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
 80149ac:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80149ae:	6162      	str	r2, [r4, #20]
	rv = rv << 8 | ptr[0];
 80149b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80149b4:	6122      	str	r2, [r4, #16]
		fs->fsi_flag = 0x80;
 80149b6:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d01d      	beq.n	80149f8 <find_volume+0x374>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80149bc:	2003      	movs	r0, #3
 80149be:	e745      	b.n	801484c <find_volume+0x1c8>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80149c0:	2300      	movs	r3, #0
 80149c2:	6313      	str	r3, [r2, #48]	; 0x30
 80149c4:	e75a      	b.n	801487c <find_volume+0x1f8>
 80149c6:	2300      	movs	r3, #0
 80149c8:	6213      	str	r3, [r2, #32]
 80149ca:	e753      	b.n	8014874 <find_volume+0x1f0>
 80149cc:	2300      	movs	r3, #0
 80149ce:	6113      	str	r3, [r2, #16]
 80149d0:	e74c      	b.n	801486c <find_volume+0x1e8>
 80149d2:	2300      	movs	r3, #0
 80149d4:	6013      	str	r3, [r2, #0]
 80149d6:	e745      	b.n	8014864 <find_volume+0x1e0>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80149d8:	f1bc 0f00 	cmp.w	ip, #0
 80149dc:	d092      	beq.n	8014904 <find_volume+0x280>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80149de:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80149e0:	0052      	lsls	r2, r2, #1
 80149e2:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80149e4:	62a1      	str	r1, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80149e6:	e726      	b.n	8014836 <find_volume+0x1b2>
 80149e8:	4635      	mov	r5, r6
 80149ea:	e6a2      	b.n	8014732 <find_volume+0xae>
 80149ec:	24005200 	.word	0x24005200
 80149f0:	24005248 	.word	0x24005248
 80149f4:	24005208 	.word	0x24005208
			&& move_window(fs, bsect + 1) == FR_OK)
 80149f8:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80149fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149fc:	4299      	cmp	r1, r3
 80149fe:	d004      	beq.n	8014a0a <find_volume+0x386>
 8014a00:	4620      	mov	r0, r4
 8014a02:	f7ff f8a7 	bl	8013b54 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d1d8      	bne.n	80149bc <find_volume+0x338>
	rv = rv << 8 | ptr[0];
 8014a0a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014a0e:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8014a12:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8014a16:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 8014a18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			fs->fsi_flag = 0;
 8014a1c:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d1cc      	bne.n	80149bc <find_volume+0x338>
	rv = rv << 8 | ptr[2];
 8014a22:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 8014a24:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 8014a28:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 8014a2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014a30:	4914      	ldr	r1, [pc, #80]	; (8014a84 <find_volume+0x400>)
	rv = rv << 8 | ptr[0];
 8014a32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014a36:	428b      	cmp	r3, r1
 8014a38:	d1c0      	bne.n	80149bc <find_volume+0x338>
	rv = rv << 8 | ptr[2];
 8014a3a:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 8014a3e:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 8014a42:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
 8014a46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014a4a:	490f      	ldr	r1, [pc, #60]	; (8014a88 <find_volume+0x404>)
	rv = rv << 8 | ptr[0];
 8014a4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014a50:	428b      	cmp	r3, r1
 8014a52:	d1b3      	bne.n	80149bc <find_volume+0x338>
	rv = rv << 8 | ptr[1];
 8014a54:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014a58:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 8014a5a:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 8014a5e:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 8014a62:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8014a66:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 8014a6a:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 8014a6e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8014a72:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 8014a76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8014a7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014a7e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8014a82:	e6e3      	b.n	801484c <find_volume+0x1c8>
 8014a84:	41615252 	.word	0x41615252
 8014a88:	61417272 	.word	0x61417272

08014a8c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014a8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8014a90:	d274      	bcs.n	8014b7c <dir_sdi+0xf0>
 8014a92:	06ca      	lsls	r2, r1, #27
{
 8014a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a98:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014a9a:	d151      	bne.n	8014b40 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014a9c:	6885      	ldr	r5, [r0, #8]
 8014a9e:	4607      	mov	r7, r0
	FATFS *fs = dp->obj.fs;
 8014aa0:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8014aa4:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014aa6:	2d00      	cmp	r5, #0
 8014aa8:	d04d      	beq.n	8014b46 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014aaa:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014aae:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014ab2:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8014ab6:	f0c0 8099 	bcc.w	8014bec <dir_sdi+0x160>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014aba:	2d01      	cmp	r5, #1
 8014abc:	d940      	bls.n	8014b40 <dir_sdi+0xb4>
 8014abe:	4646      	mov	r6, r8
 8014ac0:	e03b      	b.n	8014b3a <dir_sdi+0xae>
		switch (fs->fs_type) {
 8014ac2:	7833      	ldrb	r3, [r6, #0]
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	d07a      	beq.n	8014bbe <dir_sdi+0x132>
 8014ac8:	2b03      	cmp	r3, #3
 8014aca:	d05f      	beq.n	8014b8c <dir_sdi+0x100>
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d137      	bne.n	8014b40 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8014ad0:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ad4:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014ad6:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ad8:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014adc:	4291      	cmp	r1, r2
 8014ade:	d006      	beq.n	8014aee <dir_sdi+0x62>
 8014ae0:	4630      	mov	r0, r6
 8014ae2:	f7ff f837 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ae6:	2800      	cmp	r0, #0
 8014ae8:	d17d      	bne.n	8014be6 <dir_sdi+0x15a>
 8014aea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014aec:	6b32      	ldr	r2, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8014aee:	f3ca 0008 	ubfx	r0, sl, #0, #9
 8014af2:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014af6:	eb03 215a 	add.w	r1, r3, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8014afa:	4430      	add	r0, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014afc:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8014afe:	f890 b034 	ldrb.w	fp, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014b02:	d004      	beq.n	8014b0e <dir_sdi+0x82>
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7ff f825 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d16b      	bne.n	8014be6 <dir_sdi+0x15a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014b0e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8014b12:	4456      	add	r6, sl
 8014b14:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8014b18:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014b1c:	07eb      	lsls	r3, r5, #31
 8014b1e:	d573      	bpl.n	8014c08 <dir_sdi+0x17c>
 8014b20:	ea4f 151b 	mov.w	r5, fp, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014b24:	2d01      	cmp	r5, #1
 8014b26:	d90b      	bls.n	8014b40 <dir_sdi+0xb4>
 8014b28:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014b2c:	42ab      	cmp	r3, r5
 8014b2e:	d907      	bls.n	8014b40 <dir_sdi+0xb4>
			ofs -= csz;
 8014b30:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8014b34:	45a1      	cmp	r9, r4
 8014b36:	d85b      	bhi.n	8014bf0 <dir_sdi+0x164>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014b38:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014b3a:	69b3      	ldr	r3, [r6, #24]
 8014b3c:	42ab      	cmp	r3, r5
 8014b3e:	d8c0      	bhi.n	8014ac2 <dir_sdi+0x36>
		switch (fs->fs_type) {
 8014b40:	2002      	movs	r0, #2
}
 8014b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014b46:	f898 3000 	ldrb.w	r3, [r8]
 8014b4a:	2b02      	cmp	r3, #2
 8014b4c:	d818      	bhi.n	8014b80 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014b4e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8014b52:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8014b56:	d9f3      	bls.n	8014b40 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 8014b58:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8014b5c:	61f9      	str	r1, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 8014b5e:	61bd      	str	r5, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014b60:	2900      	cmp	r1, #0
 8014b62:	d0ed      	beq.n	8014b40 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014b64:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8014b68:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014b6c:	eb01 2154 	add.w	r1, r1, r4, lsr #9
	return FR_OK;
 8014b70:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014b72:	4443      	add	r3, r8
 8014b74:	e9c7 1307 	strd	r1, r3, [r7, #28]
}
 8014b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8014b7c:	2002      	movs	r0, #2
}
 8014b7e:	4770      	bx	lr
		clst = fs->dirbase;
 8014b80:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d0e2      	beq.n	8014b4e <dir_sdi+0xc2>
 8014b88:	461d      	mov	r5, r3
 8014b8a:	e78e      	b.n	8014aaa <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014b8c:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014b8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014b90:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014b94:	4299      	cmp	r1, r3
 8014b96:	d003      	beq.n	8014ba0 <dir_sdi+0x114>
 8014b98:	4630      	mov	r0, r6
 8014b9a:	f7fe ffdb 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014b9e:	bb10      	cbnz	r0, 8014be6 <dir_sdi+0x15a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014ba0:	00ad      	lsls	r5, r5, #2
 8014ba2:	3634      	adds	r6, #52	; 0x34
 8014ba4:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8014ba8:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[0];
 8014baa:	5d75      	ldrb	r5, [r6, r5]
	rv = rv << 8 | ptr[2];
 8014bac:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8014bae:	7853      	ldrb	r3, [r2, #1]
 8014bb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8014bb4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014bb8:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8014bbc:	e7b2      	b.n	8014b24 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014bbe:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014bc0:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014bc2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014bc6:	4299      	cmp	r1, r3
 8014bc8:	d003      	beq.n	8014bd2 <dir_sdi+0x146>
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f7fe ffc2 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014bd0:	b948      	cbnz	r0, 8014be6 <dir_sdi+0x15a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014bd2:	006d      	lsls	r5, r5, #1
 8014bd4:	3634      	adds	r6, #52	; 0x34
 8014bd6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8014bda:	1973      	adds	r3, r6, r5
	rv = rv << 8 | ptr[0];
 8014bdc:	5d75      	ldrb	r5, [r6, r5]
 8014bde:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014be0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 8014be4:	e79e      	b.n	8014b24 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014be6:	2001      	movs	r0, #1
}
 8014be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014bf0:	3b02      	subs	r3, #2
	clst -= 2;
 8014bf2:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d20a      	bcs.n	8014c0e <dir_sdi+0x182>
	return clst * fs->csize + fs->database;
 8014bf8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8014bfc:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8014c00:	fb02 3101 	mla	r1, r2, r1, r3
		dp->sect = clust2sect(fs, clst);
 8014c04:	61f9      	str	r1, [r7, #28]
 8014c06:	e7aa      	b.n	8014b5e <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014c08:	f3cb 050b 	ubfx	r5, fp, #0, #12
 8014c0c:	e78a      	b.n	8014b24 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8014c0e:	2300      	movs	r3, #0
 8014c10:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014c14:	e794      	b.n	8014b40 <dir_sdi+0xb4>
 8014c16:	bf00      	nop

08014c18 <dir_find>:
{
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014c1c:	2100      	movs	r1, #0
{
 8014c1e:	b087      	sub	sp, #28
 8014c20:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8014c22:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014c24:	f7ff ff32 	bl	8014a8c <dir_sdi>
	if (res != FR_OK) return res;
 8014c28:	4681      	mov	r9, r0
 8014c2a:	b9e0      	cbnz	r0, 8014c66 <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014c2c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8014c30:	f04f 33ff 	mov.w	r3, #4294967295
 8014c34:	69e7      	ldr	r7, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c36:	f64f 7bff 	movw	fp, #65535	; 0xffff
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014c3a:	46c1      	mov	r9, r8
 8014c3c:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014c3e:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8014c40:	42bd      	cmp	r5, r7
 8014c42:	d015      	beq.n	8014c70 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014c44:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014c46:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	f040 8086 	bne.w	8014d5c <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014c50:	2301      	movs	r3, #1
 8014c52:	463a      	mov	r2, r7
 8014c54:	7870      	ldrb	r0, [r6, #1]
 8014c56:	f7fe fecb 	bl	80139f0 <disk_read>
 8014c5a:	b140      	cbz	r0, 8014c6e <dir_find+0x56>
			fs->winsect = sector;
 8014c5c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8014c60:	f04f 0901 	mov.w	r9, #1
			fs->winsect = sector;
 8014c64:	6333      	str	r3, [r6, #48]	; 0x30
}
 8014c66:	4648      	mov	r0, r9
 8014c68:	b007      	add	sp, #28
 8014c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8014c6e:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8014c70:	6a25      	ldr	r5, [r4, #32]
 8014c72:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014c74:	b34f      	cbz	r7, 8014cca <dir_find+0xb2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014c76:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014c78:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014c7a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8014c7e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014c80:	d004      	beq.n	8014c8c <dir_find+0x74>
 8014c82:	0712      	lsls	r2, r2, #28
 8014c84:	d527      	bpl.n	8014cd6 <dir_find+0xbe>
 8014c86:	2b0f      	cmp	r3, #15
 8014c88:	f000 8095 	beq.w	8014db6 <dir_find+0x19e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c90:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8014c94:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014c96:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014c98:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014c9a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014c9c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8014ca0:	d213      	bcs.n	8014cca <dir_find+0xb2>
 8014ca2:	b197      	cbz	r7, 8014cca <dir_find+0xb2>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014ca4:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8014ca8:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014caa:	b94a      	cbnz	r2, 8014cc0 <dir_find+0xa8>
		dp->sect++;				/* Next sector */
 8014cac:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 8014cae:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8014cb0:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8014cb2:	2900      	cmp	r1, #0
 8014cb4:	d15e      	bne.n	8014d74 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014cb6:	8919      	ldrh	r1, [r3, #8]
 8014cb8:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8014cbc:	f240 813f 	bls.w	8014f3e <dir_find+0x326>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014cc0:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014cc2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014cc4:	4413      	add	r3, r2
 8014cc6:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8014cc8:	e7b9      	b.n	8014c3e <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014cca:	f04f 0904 	mov.w	r9, #4
}
 8014cce:	4648      	mov	r0, r9
 8014cd0:	b007      	add	sp, #28
 8014cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014cd6:	2b0f      	cmp	r3, #15
 8014cd8:	d06d      	beq.n	8014db6 <dir_find+0x19e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014cda:	f1b9 0f00 	cmp.w	r9, #0
 8014cde:	f000 80e4 	beq.w	8014eaa <dir_find+0x292>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014ce2:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 8014ce6:	f019 0901 	ands.w	r9, r9, #1
 8014cea:	d1cf      	bne.n	8014c8c <dir_find+0x74>
	} while (--cnt && r == 0);
 8014cec:	782a      	ldrb	r2, [r5, #0]
 8014cee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d1ca      	bne.n	8014c8c <dir_find+0x74>
 8014cf6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8014cfa:	786b      	ldrb	r3, [r5, #1]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d1c5      	bne.n	8014c8c <dir_find+0x74>
 8014d00:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8014d04:	78ab      	ldrb	r3, [r5, #2]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d1c0      	bne.n	8014c8c <dir_find+0x74>
 8014d0a:	78ea      	ldrb	r2, [r5, #3]
 8014d0c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d1bb      	bne.n	8014c8c <dir_find+0x74>
 8014d14:	792a      	ldrb	r2, [r5, #4]
 8014d16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d1b6      	bne.n	8014c8c <dir_find+0x74>
 8014d1e:	796a      	ldrb	r2, [r5, #5]
 8014d20:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d1b1      	bne.n	8014c8c <dir_find+0x74>
 8014d28:	79aa      	ldrb	r2, [r5, #6]
 8014d2a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d1ac      	bne.n	8014c8c <dir_find+0x74>
 8014d32:	79ea      	ldrb	r2, [r5, #7]
 8014d34:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d1a7      	bne.n	8014c8c <dir_find+0x74>
 8014d3c:	7a2a      	ldrb	r2, [r5, #8]
 8014d3e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d1a2      	bne.n	8014c8c <dir_find+0x74>
 8014d46:	7a6a      	ldrb	r2, [r5, #9]
 8014d48:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d19d      	bne.n	8014c8c <dir_find+0x74>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014d50:	7aaa      	ldrb	r2, [r5, #10]
 8014d52:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d198      	bne.n	8014c8c <dir_find+0x74>
 8014d5a:	e784      	b.n	8014c66 <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	462a      	mov	r2, r5
 8014d60:	7870      	ldrb	r0, [r6, #1]
 8014d62:	9101      	str	r1, [sp, #4]
 8014d64:	f7fe fe52 	bl	8013a0c <disk_write>
 8014d68:	9901      	ldr	r1, [sp, #4]
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d07d      	beq.n	8014e6a <dir_find+0x252>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014d6e:	f04f 0901 	mov.w	r9, #1
 8014d72:	e778      	b.n	8014c66 <dir_find+0x4e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014d74:	8958      	ldrh	r0, [r3, #10]
 8014d76:	3801      	subs	r0, #1
 8014d78:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8014d7c:	d1a0      	bne.n	8014cc0 <dir_find+0xa8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014d7e:	4618      	mov	r0, r3
 8014d80:	9202      	str	r2, [sp, #8]
 8014d82:	9301      	str	r3, [sp, #4]
 8014d84:	f7fe ffbe 	bl	8013d04 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014d88:	2801      	cmp	r0, #1
 8014d8a:	f240 80dd 	bls.w	8014f48 <dir_find+0x330>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014d8e:	1c43      	adds	r3, r0, #1
 8014d90:	d0ed      	beq.n	8014d6e <dir_find+0x156>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014d92:	9b01      	ldr	r3, [sp, #4]
 8014d94:	6999      	ldr	r1, [r3, #24]
 8014d96:	4288      	cmp	r0, r1
 8014d98:	f080 80d1 	bcs.w	8014f3e <dir_find+0x326>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014d9c:	3902      	subs	r1, #2
	clst -= 2;
 8014d9e:	1e87      	subs	r7, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014da0:	9a02      	ldr	r2, [sp, #8]
 8014da2:	428f      	cmp	r7, r1
				dp->clust = clst;		/* Initialize data for new cluster */
 8014da4:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014da6:	f080 80d2 	bcs.w	8014f4e <dir_find+0x336>
	return clst * fs->csize + fs->database;
 8014daa:	8958      	ldrh	r0, [r3, #10]
 8014dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014dae:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 8014db2:	61e7      	str	r7, [r4, #28]
 8014db4:	e784      	b.n	8014cc0 <dir_find+0xa8>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014db6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8014dba:	0658      	lsls	r0, r3, #25
 8014dbc:	f53f af6b 	bmi.w	8014c96 <dir_find+0x7e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014dc0:	0679      	lsls	r1, r7, #25
 8014dc2:	d54d      	bpl.n	8014e60 <dir_find+0x248>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014dc4:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014dc6:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8014dca:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014dce:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014dd0:	7b6b      	ldrb	r3, [r5, #13]
 8014dd2:	4543      	cmp	r3, r8
 8014dd4:	d146      	bne.n	8014e64 <dir_find+0x24c>
	rv = rv << 8 | ptr[0];
 8014dd6:	7eea      	ldrb	r2, [r5, #27]
 8014dd8:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8014dda:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8014dde:	d141      	bne.n	8014e64 <dir_find+0x24c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014de0:	f895 a000 	ldrb.w	sl, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014de4:	2101      	movs	r1, #1
 8014de6:	4b65      	ldr	r3, [pc, #404]	; (8014f7c <dir_find+0x364>)
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014de8:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014dec:	68f0      	ldr	r0, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014dee:	9704      	str	r7, [sp, #16]
 8014df0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014df4:	9403      	str	r4, [sp, #12]
 8014df6:	4607      	mov	r7, r0
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014df8:	9005      	str	r0, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014dfa:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8014dfe:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8014e02:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8014e06:	4654      	mov	r4, sl
 8014e08:	46aa      	mov	sl, r5
 8014e0a:	461d      	mov	r5, r3
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	e011      	b.n	8014e34 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014e10:	2cfe      	cmp	r4, #254	; 0xfe
 8014e12:	4648      	mov	r0, r9
 8014e14:	d81e      	bhi.n	8014e54 <dir_find+0x23c>
 8014e16:	f7fe fd83 	bl	8013920 <ff_wtoupper>
 8014e1a:	4606      	mov	r6, r0
 8014e1c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8014e20:	4644      	mov	r4, r8
 8014e22:	f7fe fd7d 	bl	8013920 <ff_wtoupper>
 8014e26:	4286      	cmp	r6, r0
	rv = rv << 8 | ptr[0];
 8014e28:	464b      	mov	r3, r9
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014e2a:	d113      	bne.n	8014e54 <dir_find+0x23c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014e2c:	4a54      	ldr	r2, [pc, #336]	; (8014f80 <dir_find+0x368>)
 8014e2e:	42aa      	cmp	r2, r5
 8014e30:	f000 808f 	beq.w	8014f52 <dir_find+0x33a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014e34:	f815 0b01 	ldrb.w	r0, [r5], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014e38:	f104 0801 	add.w	r8, r4, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014e3c:	eb0a 0e00 	add.w	lr, sl, r0
	rv = rv << 8 | ptr[0];
 8014e40:	f81a 9000 	ldrb.w	r9, [sl, r0]
 8014e44:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8014e48:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
		if (wc) {
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d1df      	bne.n	8014e10 <dir_find+0x1f8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e50:	45d9      	cmp	r9, fp
 8014e52:	d0eb      	beq.n	8014e2c <dir_find+0x214>
 8014e54:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 8014e58:	9c03      	ldr	r4, [sp, #12]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014e5a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8014e5e:	e71a      	b.n	8014c96 <dir_find+0x7e>
 8014e60:	45b9      	cmp	r9, r7
 8014e62:	d0b5      	beq.n	8014dd0 <dir_find+0x1b8>
 8014e64:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8014e68:	e715      	b.n	8014c96 <dir_find+0x7e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014e6a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014e6c:	69f3      	ldr	r3, [r6, #28]
 8014e6e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8014e70:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014e72:	429a      	cmp	r2, r3
 8014e74:	f4bf aeec 	bcs.w	8014c50 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014e78:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014e7c:	f1ba 0f01 	cmp.w	sl, #1
 8014e80:	f67f aee6 	bls.w	8014c50 <dir_find+0x38>
 8014e84:	9401      	str	r4, [sp, #4]
 8014e86:	460c      	mov	r4, r1
 8014e88:	e000      	b.n	8014e8c <dir_find+0x274>
 8014e8a:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8014e8c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014e92:	2301      	movs	r3, #1
 8014e94:	4621      	mov	r1, r4
 8014e96:	462a      	mov	r2, r5
 8014e98:	7870      	ldrb	r0, [r6, #1]
 8014e9a:	f7fe fdb7 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014e9e:	f1ba 0f01 	cmp.w	sl, #1
 8014ea2:	d1f2      	bne.n	8014e8a <dir_find+0x272>
 8014ea4:	4621      	mov	r1, r4
 8014ea6:	9c01      	ldr	r4, [sp, #4]
 8014ea8:	e6d2      	b.n	8014c50 <dir_find+0x38>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014eaa:	782b      	ldrb	r3, [r5, #0]
 8014eac:	786f      	ldrb	r7, [r5, #1]
 8014eae:	01da      	lsls	r2, r3, #7
 8014eb0:	78a8      	ldrb	r0, [r5, #2]
 8014eb2:	78e9      	ldrb	r1, [r5, #3]
 8014eb4:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
 8014eb8:	19da      	adds	r2, r3, r7
 8014eba:	792f      	ldrb	r7, [r5, #4]
 8014ebc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014ec0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014ec4:	fa50 f383 	uxtab	r3, r0, r3
 8014ec8:	7968      	ldrb	r0, [r5, #5]
 8014eca:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8014ece:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8014ed2:	fa51 f283 	uxtab	r2, r1, r3
 8014ed6:	79a9      	ldrb	r1, [r5, #6]
 8014ed8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014edc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014ee0:	fa57 f383 	uxtab	r3, r7, r3
 8014ee4:	79ef      	ldrb	r7, [r5, #7]
 8014ee6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8014eea:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8014eee:	fa50 f283 	uxtab	r2, r0, r3
 8014ef2:	7a68      	ldrb	r0, [r5, #9]
 8014ef4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014ef8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014efc:	7a2a      	ldrb	r2, [r5, #8]
 8014efe:	fa51 f383 	uxtab	r3, r1, r3
 8014f02:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8014f06:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8014f0a:	fa57 f183 	uxtab	r1, r7, r3
 8014f0e:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8014f12:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8014f16:	7aa9      	ldrb	r1, [r5, #10]
 8014f18:	fa52 f383 	uxtab	r3, r2, r3
 8014f1c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8014f20:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8014f24:	fa50 f283 	uxtab	r2, r0, r3
 8014f28:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014f2c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014f30:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	4598      	cmp	r8, r3
 8014f38:	f47f aed3 	bne.w	8014ce2 <dir_find+0xca>
 8014f3c:	e693      	b.n	8014c66 <dir_find+0x4e>
				dp->sect = 0; return FR_NO_FILE;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f04f 0904 	mov.w	r9, #4
 8014f44:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8014f46:	e68e      	b.n	8014c66 <dir_find+0x4e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014f48:	f04f 0902 	mov.w	r9, #2
 8014f4c:	e68b      	b.n	8014c66 <dir_find+0x4e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014f4e:	4617      	mov	r7, r2
 8014f50:	e72f      	b.n	8014db2 <dir_find+0x19a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014f52:	4655      	mov	r5, sl
 8014f54:	4619      	mov	r1, r3
 8014f56:	46a2      	mov	sl, r4
 8014f58:	9f04      	ldr	r7, [sp, #16]
 8014f5a:	782b      	ldrb	r3, [r5, #0]
 8014f5c:	9c03      	ldr	r4, [sp, #12]
 8014f5e:	065a      	lsls	r2, r3, #25
 8014f60:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 8014f64:	d500      	bpl.n	8014f68 <dir_find+0x350>
 8014f66:	b919      	cbnz	r1, 8014f70 <dir_find+0x358>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014f68:	3f01      	subs	r7, #1
 8014f6a:	fa5f f987 	uxtb.w	r9, r7
 8014f6e:	e692      	b.n	8014c96 <dir_find+0x7e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014f70:	9b05      	ldr	r3, [sp, #20]
 8014f72:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d0f6      	beq.n	8014f68 <dir_find+0x350>
 8014f7a:	e773      	b.n	8014e64 <dir_find+0x24c>
 8014f7c:	08046ba8 	.word	0x08046ba8
 8014f80:	08046bb5 	.word	0x08046bb5

08014f84 <follow_path>:
{
 8014f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014f88:	780b      	ldrb	r3, [r1, #0]
{
 8014f8a:	b083      	sub	sp, #12
 8014f8c:	4688      	mov	r8, r1
 8014f8e:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014f90:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8014f92:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014f96:	d103      	bne.n	8014fa0 <follow_path+0x1c>
 8014f98:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8014f9c:	2b2f      	cmp	r3, #47	; 0x2f
 8014f9e:	d0fb      	beq.n	8014f98 <follow_path+0x14>
 8014fa0:	2b5c      	cmp	r3, #92	; 0x5c
 8014fa2:	d0f9      	beq.n	8014f98 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014fa8:	f898 3000 	ldrb.w	r3, [r8]
 8014fac:	2b1f      	cmp	r3, #31
 8014fae:	f240 8156 	bls.w	801525e <follow_path+0x2da>
 8014fb2:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8014fb4:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8014fb6:	f8d2 900c 	ldr.w	r9, [r2, #12]
		w = p[si++];					/* Get a character */
 8014fba:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8014fbc:	d929      	bls.n	8015012 <follow_path+0x8e>
 8014fbe:	f1a9 0a02 	sub.w	sl, r9, #2
 8014fc2:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8014fc4:	2501      	movs	r5, #1
 8014fc6:	e008      	b.n	8014fda <follow_path+0x56>
		lfn[di++] = w;					/* Store the Unicode character */
 8014fc8:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8014fcc:	1c6b      	adds	r3, r5, #1
 8014fce:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8014fd2:	281f      	cmp	r0, #31
 8014fd4:	f240 8104 	bls.w	80151e0 <follow_path+0x25c>
		w = p[si++];					/* Get a character */
 8014fd8:	461d      	mov	r5, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014fda:	282f      	cmp	r0, #47	; 0x2f
 8014fdc:	f105 34ff 	add.w	r4, r5, #4294967295
 8014fe0:	d01e      	beq.n	8015020 <follow_path+0x9c>
 8014fe2:	285c      	cmp	r0, #92	; 0x5c
 8014fe4:	d01c      	beq.n	8015020 <follow_path+0x9c>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8014fe6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8014fea:	d00e      	beq.n	801500a <follow_path+0x86>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8014fec:	2101      	movs	r1, #1
 8014fee:	f7fe fc75 	bl	80138dc <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8014ff2:	b150      	cbz	r0, 801500a <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8014ff4:	287f      	cmp	r0, #127	; 0x7f
 8014ff6:	d8e7      	bhi.n	8014fc8 <follow_path+0x44>
	while (*str && *str != chr) str++;
 8014ff8:	2322      	movs	r3, #34	; 0x22
 8014ffa:	4aad      	ldr	r2, [pc, #692]	; (80152b0 <follow_path+0x32c>)
 8014ffc:	e003      	b.n	8015006 <follow_path+0x82>
 8014ffe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015002:	2b00      	cmp	r3, #0
 8015004:	d0e0      	beq.n	8014fc8 <follow_path+0x44>
 8015006:	4298      	cmp	r0, r3
 8015008:	d1f9      	bne.n	8014ffe <follow_path+0x7a>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801500a:	2006      	movs	r0, #6
}
 801500c:	b003      	add	sp, #12
 801500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8015012:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015014:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8015016:	f8a9 3000 	strh.w	r3, [r9]
}
 801501a:	b003      	add	sp, #12
 801501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015020:	f818 3005 	ldrb.w	r3, [r8, r5]
 8015024:	eb08 0205 	add.w	r2, r8, r5
 8015028:	2b5c      	cmp	r3, #92	; 0x5c
 801502a:	d002      	beq.n	8015032 <follow_path+0xae>
 801502c:	2b2f      	cmp	r3, #47	; 0x2f
 801502e:	f040 812b 	bne.w	8015288 <follow_path+0x304>
 8015032:	3501      	adds	r5, #1
 8015034:	4445      	add	r5, r8
 8015036:	46a8      	mov	r8, r5
 8015038:	f815 3b01 	ldrb.w	r3, [r5], #1
 801503c:	2b2f      	cmp	r3, #47	; 0x2f
 801503e:	d0fa      	beq.n	8015036 <follow_path+0xb2>
 8015040:	2b5c      	cmp	r3, #92	; 0x5c
 8015042:	d0f8      	beq.n	8015036 <follow_path+0xb2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015044:	2c00      	cmp	r4, #0
 8015046:	d0e4      	beq.n	8015012 <follow_path+0x8e>
 8015048:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801504a:	2500      	movs	r5, #0
 801504c:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 8015050:	e001      	b.n	8015056 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015052:	3c01      	subs	r4, #1
 8015054:	d0dd      	beq.n	8015012 <follow_path+0x8e>
		w = lfn[di - 1];
 8015056:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 801505a:	2b20      	cmp	r3, #32
 801505c:	d0f9      	beq.n	8015052 <follow_path+0xce>
 801505e:	2b2e      	cmp	r3, #46	; 0x2e
 8015060:	d0f7      	beq.n	8015052 <follow_path+0xce>
		*d++ = (BYTE)val;
 8015062:	2320      	movs	r3, #32
 8015064:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8015068:	2100      	movs	r1, #0
 801506a:	f829 1014 	strh.w	r1, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
 801506e:	627a      	str	r2, [r7, #36]	; 0x24
 8015070:	62ba      	str	r2, [r7, #40]	; 0x28
 8015072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8015076:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801507a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801507e:	f8b9 0000 	ldrh.w	r0, [r9]
 8015082:	282e      	cmp	r0, #46	; 0x2e
 8015084:	d002      	beq.n	801508c <follow_path+0x108>
 8015086:	4298      	cmp	r0, r3
 8015088:	f040 80f2 	bne.w	8015270 <follow_path+0x2ec>
 801508c:	464a      	mov	r2, r9
 801508e:	2300      	movs	r3, #0
 8015090:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8015094:	461d      	mov	r5, r3
 8015096:	3301      	adds	r3, #1
 8015098:	2820      	cmp	r0, #32
 801509a:	d0f9      	beq.n	8015090 <follow_path+0x10c>
 801509c:	282e      	cmp	r0, #46	; 0x2e
 801509e:	d0f7      	beq.n	8015090 <follow_path+0x10c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80150a0:	3502      	adds	r5, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80150a2:	eb09 0344 	add.w	r3, r9, r4, lsl #1
 80150a6:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80150aa:	2a2e      	cmp	r2, #46	; 0x2e
 80150ac:	d001      	beq.n	80150b2 <follow_path+0x12e>
 80150ae:	3c01      	subs	r4, #1
 80150b0:	d1f9      	bne.n	80150a6 <follow_path+0x122>
		if (!w) break;					/* Break on end of the LFN */
 80150b2:	2800      	cmp	r0, #0
 80150b4:	d03a      	beq.n	801512c <follow_path+0x1a8>
 80150b6:	2300      	movs	r3, #0
 80150b8:	2208      	movs	r2, #8
 80150ba:	4641      	mov	r1, r8
 80150bc:	469a      	mov	sl, r3
 80150be:	4698      	mov	r8, r3
 80150c0:	465b      	mov	r3, fp
 80150c2:	46bb      	mov	fp, r7
 80150c4:	464f      	mov	r7, r9
 80150c6:	4691      	mov	r9, r2
 80150c8:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80150ca:	2820      	cmp	r0, #32
 80150cc:	d003      	beq.n	80150d6 <follow_path+0x152>
 80150ce:	282e      	cmp	r0, #46	; 0x2e
 80150d0:	d155      	bne.n	801517e <follow_path+0x1fa>
 80150d2:	42ac      	cmp	r4, r5
 80150d4:	d053      	beq.n	801517e <follow_path+0x1fa>
			cf |= NS_LOSS | NS_LFN; continue;
 80150d6:	f046 0603 	orr.w	r6, r6, #3
 80150da:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 80150dc:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 80150e0:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d1f1      	bne.n	80150ca <follow_path+0x146>
 80150e6:	465f      	mov	r7, fp
 80150e8:	469b      	mov	fp, r3
 80150ea:	4643      	mov	r3, r8
 80150ec:	4690      	mov	r8, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80150ee:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80150f2:	464a      	mov	r2, r9
 80150f4:	29e5      	cmp	r1, #229	; 0xe5
 80150f6:	d102      	bne.n	80150fe <follow_path+0x17a>
 80150f8:	2105      	movs	r1, #5
 80150fa:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80150fe:	2a08      	cmp	r2, #8
 8015100:	f000 809c 	beq.w	801523c <follow_path+0x2b8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015104:	f003 020c 	and.w	r2, r3, #12
 8015108:	2a0c      	cmp	r2, #12
 801510a:	d06e      	beq.n	80151ea <follow_path+0x266>
 801510c:	f003 0303 	and.w	r3, r3, #3
 8015110:	2b03      	cmp	r3, #3
 8015112:	d06a      	beq.n	80151ea <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015114:	07b1      	lsls	r1, r6, #30
 8015116:	d409      	bmi.n	801512c <follow_path+0x1a8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015118:	2b01      	cmp	r3, #1
 801511a:	d102      	bne.n	8015122 <follow_path+0x19e>
 801511c:	f046 0610 	orr.w	r6, r6, #16
 8015120:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015122:	2a04      	cmp	r2, #4
 8015124:	d102      	bne.n	801512c <follow_path+0x1a8>
 8015126:	f046 0608 	orr.w	r6, r6, #8
 801512a:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 801512c:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801512e:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8015132:	f7ff fd71 	bl	8014c18 <dir_find>
			ns = dp->fn[NSFLAG];
 8015136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 801513a:	2800      	cmp	r0, #0
 801513c:	d161      	bne.n	8015202 <follow_path+0x27e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801513e:	075a      	lsls	r2, r3, #29
 8015140:	f53f af64 	bmi.w	801500c <follow_path+0x88>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015144:	79bb      	ldrb	r3, [r7, #6]
 8015146:	06db      	lsls	r3, r3, #27
 8015148:	f140 80a0 	bpl.w	801528c <follow_path+0x308>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801514c:	697a      	ldr	r2, [r7, #20]
 801514e:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8015152:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015156:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 801515a:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801515c:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 801515e:	7ed8      	ldrb	r0, [r3, #27]
 8015160:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8015162:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8015166:	d105      	bne.n	8015174 <follow_path+0x1f0>
	rv = rv << 8 | ptr[0];
 8015168:	7d59      	ldrb	r1, [r3, #21]
 801516a:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801516c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8015170:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015174:	60ba      	str	r2, [r7, #8]
		for (;;) {
 8015176:	683a      	ldr	r2, [r7, #0]
 8015178:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801517c:	e71a      	b.n	8014fb4 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801517e:	45d1      	cmp	r9, sl
 8015180:	d91b      	bls.n	80151ba <follow_path+0x236>
 8015182:	1b61      	subs	r1, r4, r5
 8015184:	fab1 f181 	clz	r1, r1
 8015188:	0949      	lsrs	r1, r1, #5
 801518a:	b9b1      	cbnz	r1, 80151ba <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
 801518c:	287f      	cmp	r0, #127	; 0x7f
 801518e:	d840      	bhi.n	8015212 <follow_path+0x28e>
	while (*str && *str != chr) str++;
 8015190:	212b      	movs	r1, #43	; 0x2b
 8015192:	f8df c124 	ldr.w	ip, [pc, #292]	; 80152b8 <follow_path+0x334>
 8015196:	e003      	b.n	80151a0 <follow_path+0x21c>
 8015198:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 801519c:	2900      	cmp	r1, #0
 801519e:	d056      	beq.n	801524e <follow_path+0x2ca>
 80151a0:	4281      	cmp	r1, r0
 80151a2:	d1f9      	bne.n	8015198 <follow_path+0x214>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80151a4:	f046 0603 	orr.w	r6, r6, #3
 80151a8:	205f      	movs	r0, #95	; 0x5f
 80151aa:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 80151ac:	eb0b 010a 	add.w	r1, fp, sl
 80151b0:	f10a 0a01 	add.w	sl, sl, #1
 80151b4:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80151b8:	e790      	b.n	80150dc <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 80151ba:	f1b9 0f0b 	cmp.w	r9, #11
 80151be:	d067      	beq.n	8015290 <follow_path+0x30c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80151c0:	42ac      	cmp	r4, r5
 80151c2:	d003      	beq.n	80151cc <follow_path+0x248>
 80151c4:	f046 0603 	orr.w	r6, r6, #3
 80151c8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 80151ca:	d38c      	bcc.n	80150e6 <follow_path+0x162>
			b <<= 2; continue;
 80151cc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80151d0:	4625      	mov	r5, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80151d2:	f04f 090b 	mov.w	r9, #11
 80151d6:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 80151da:	fa5f f888 	uxtb.w	r8, r8
 80151de:	e77d      	b.n	80150dc <follow_path+0x158>
	*path = &p[si];						/* Return pointer to the next segment */
 80151e0:	462c      	mov	r4, r5
 80151e2:	4498      	add	r8, r3
 80151e4:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80151e6:	2504      	movs	r5, #4
 80151e8:	e730      	b.n	801504c <follow_path+0xc8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80151ea:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 80151ee:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80151f0:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80151f2:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80151f6:	f7ff fd0f 	bl	8014c18 <dir_find>
			ns = dp->fn[NSFLAG];
 80151fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80151fe:	2800      	cmp	r0, #0
 8015200:	d09d      	beq.n	801513e <follow_path+0x1ba>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015202:	2804      	cmp	r0, #4
 8015204:	f47f af02 	bne.w	801500c <follow_path+0x88>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015208:	f013 0f04 	tst.w	r3, #4
 801520c:	bf08      	it	eq
 801520e:	2005      	moveq	r0, #5
 8015210:	e6fc      	b.n	801500c <follow_path+0x88>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015212:	e9cd 3200 	strd	r3, r2, [sp]
 8015216:	f7fe fb61 	bl	80138dc <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801521a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801521e:	b918      	cbnz	r0, 8015228 <follow_path+0x2a4>
			cf |= NS_LFN;				/* Force create LFN entry */
 8015220:	f046 0602 	orr.w	r6, r6, #2
 8015224:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015226:	e7bd      	b.n	80151a4 <follow_path+0x220>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015228:	4922      	ldr	r1, [pc, #136]	; (80152b4 <follow_path+0x330>)
			cf |= NS_LFN;				/* Force create LFN entry */
 801522a:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801522e:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 8015230:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015232:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015236:	2800      	cmp	r0, #0
 8015238:	d0b4      	beq.n	80151a4 <follow_path+0x220>
 801523a:	e7a9      	b.n	8015190 <follow_path+0x20c>
	if (ni == 8) b <<= 2;
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015242:	2a0c      	cmp	r2, #12
 8015244:	d0d1      	beq.n	80151ea <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015246:	07b0      	lsls	r0, r6, #30
 8015248:	f57f af6b 	bpl.w	8015122 <follow_path+0x19e>
 801524c:	e76e      	b.n	801512c <follow_path+0x1a8>
				if (IsUpper(w)) {		/* ASCII large capital */
 801524e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8015252:	2919      	cmp	r1, #25
 8015254:	d80f      	bhi.n	8015276 <follow_path+0x2f2>
					b |= 2;
 8015256:	f048 0802 	orr.w	r8, r8, #2
 801525a:	b2c0      	uxtb	r0, r0
 801525c:	e7a6      	b.n	80151ac <follow_path+0x228>
		dp->fn[NSFLAG] = NS_NONAME;
 801525e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8015260:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8015262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8015266:	b003      	add	sp, #12
 8015268:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 801526c:	f7ff bc0e 	b.w	8014a8c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015270:	462e      	mov	r6, r5
 8015272:	2501      	movs	r5, #1
 8015274:	e715      	b.n	80150a2 <follow_path+0x11e>
					if (IsLower(w)) {	/* ASCII small capital */
 8015276:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 801527a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 801527c:	bf9c      	itt	ls
 801527e:	3820      	subls	r0, #32
 8015280:	f048 0801 	orrls.w	r8, r8, #1
 8015284:	b2c0      	uxtb	r0, r0
 8015286:	e791      	b.n	80151ac <follow_path+0x228>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015288:	4690      	mov	r8, r2
 801528a:	e6db      	b.n	8015044 <follow_path+0xc0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801528c:	2005      	movs	r0, #5
 801528e:	e6bd      	b.n	801500c <follow_path+0x88>
 8015290:	465f      	mov	r7, fp
 8015292:	469b      	mov	fp, r3
 8015294:	4643      	mov	r3, r8
 8015296:	4690      	mov	r8, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015298:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 801529c:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80152a0:	2ae5      	cmp	r2, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 80152a2:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80152a4:	f47f af2e 	bne.w	8015104 <follow_path+0x180>
 80152a8:	2205      	movs	r2, #5
 80152aa:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80152ae:	e729      	b.n	8015104 <follow_path+0x180>
 80152b0:	08046b14 	.word	0x08046b14
 80152b4:	08046b28 	.word	0x08046b28
 80152b8:	08046b20 	.word	0x08046b20

080152bc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80152bc:	2901      	cmp	r1, #1
{
 80152be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80152c2:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80152c4:	d90f      	bls.n	80152e6 <remove_chain+0x2a>
 80152c6:	69ab      	ldr	r3, [r5, #24]
 80152c8:	460c      	mov	r4, r1
 80152ca:	428b      	cmp	r3, r1
 80152cc:	d90b      	bls.n	80152e6 <remove_chain+0x2a>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80152ce:	4606      	mov	r6, r0
 80152d0:	b962      	cbnz	r2, 80152ec <remove_chain+0x30>
 80152d2:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80152d4:	429c      	cmp	r4, r3
 80152d6:	d206      	bcs.n	80152e6 <remove_chain+0x2a>
		switch (fs->fs_type) {
 80152d8:	783b      	ldrb	r3, [r7, #0]
 80152da:	2b02      	cmp	r3, #2
 80152dc:	d07a      	beq.n	80153d4 <remove_chain+0x118>
 80152de:	2b03      	cmp	r3, #3
 80152e0:	d05e      	beq.n	80153a0 <remove_chain+0xe4>
 80152e2:	2b01      	cmp	r3, #1
 80152e4:	d011      	beq.n	801530a <remove_chain+0x4e>
 80152e6:	2002      	movs	r0, #2
}
 80152e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80152ec:	4293      	cmp	r3, r2
 80152ee:	d9fa      	bls.n	80152e6 <remove_chain+0x2a>
 80152f0:	2a01      	cmp	r2, #1
 80152f2:	d9f8      	bls.n	80152e6 <remove_chain+0x2a>
 80152f4:	4611      	mov	r1, r2
 80152f6:	4628      	mov	r0, r5
 80152f8:	f04f 32ff 	mov.w	r2, #4294967295
 80152fc:	f7fe fc64 	bl	8013bc8 <put_fat.part.0>
		if (res != FR_OK) return res;
 8015300:	2800      	cmp	r0, #0
 8015302:	d1f1      	bne.n	80152e8 <remove_chain+0x2c>
 8015304:	6837      	ldr	r7, [r6, #0]
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	e7e4      	b.n	80152d4 <remove_chain+0x18>
			bc = (UINT)clst; bc += bc / 2;
 801530a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015312:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015316:	4291      	cmp	r1, r2
 8015318:	d006      	beq.n	8015328 <remove_chain+0x6c>
 801531a:	4638      	mov	r0, r7
 801531c:	f7fe fc1a 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015320:	2800      	cmp	r0, #0
 8015322:	d16c      	bne.n	80153fe <remove_chain+0x142>
 8015324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8015328:	f3c8 0008 	ubfx	r0, r8, #0, #9
 801532c:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015330:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8015334:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015336:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8015338:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801533c:	d004      	beq.n	8015348 <remove_chain+0x8c>
 801533e:	4638      	mov	r0, r7
 8015340:	f7fe fc08 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015344:	2800      	cmp	r0, #0
 8015346:	d15a      	bne.n	80153fe <remove_chain+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015348:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801534c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 801534e:	4447      	add	r7, r8
 8015350:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8015354:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015358:	d553      	bpl.n	8015402 <remove_chain+0x146>
 801535a:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 801535e:	f1b8 0f00 	cmp.w	r8, #0
 8015362:	d051      	beq.n	8015408 <remove_chain+0x14c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015364:	f1b8 0f01 	cmp.w	r8, #1
 8015368:	d0bd      	beq.n	80152e6 <remove_chain+0x2a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801536a:	69ab      	ldr	r3, [r5, #24]
 801536c:	42a3      	cmp	r3, r4
 801536e:	d9ba      	bls.n	80152e6 <remove_chain+0x2a>
 8015370:	4621      	mov	r1, r4
 8015372:	2200      	movs	r2, #0
 8015374:	4628      	mov	r0, r5
 8015376:	f7fe fc27 	bl	8013bc8 <put_fat.part.0>
			if (res != FR_OK) return res;
 801537a:	2800      	cmp	r0, #0
 801537c:	d1b4      	bne.n	80152e8 <remove_chain+0x2c>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801537e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8015382:	1e91      	subs	r1, r2, #2
 8015384:	428b      	cmp	r3, r1
 8015386:	d205      	bcs.n	8015394 <remove_chain+0xd8>
			fs->fsi_flag |= 1;
 8015388:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 801538a:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 801538c:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8015390:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8015392:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015394:	4542      	cmp	r2, r8
 8015396:	d937      	bls.n	8015408 <remove_chain+0x14c>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015398:	6837      	ldr	r7, [r6, #0]
 801539a:	4644      	mov	r4, r8
 801539c:	69bb      	ldr	r3, [r7, #24]
 801539e:	e799      	b.n	80152d4 <remove_chain+0x18>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80153a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80153a4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153a8:	4299      	cmp	r1, r3
 80153aa:	d003      	beq.n	80153b4 <remove_chain+0xf8>
 80153ac:	4638      	mov	r0, r7
 80153ae:	f7fe fbd1 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80153b2:	bb20      	cbnz	r0, 80153fe <remove_chain+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80153b4:	00a3      	lsls	r3, r4, #2
 80153b6:	3734      	adds	r7, #52	; 0x34
 80153b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80153bc:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 80153be:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 80153c2:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80153c4:	7853      	ldrb	r3, [r2, #1]
 80153c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80153ca:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80153ce:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 80153d2:	e7c4      	b.n	801535e <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80153d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80153d8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80153dc:	4299      	cmp	r1, r3
 80153de:	d003      	beq.n	80153e8 <remove_chain+0x12c>
 80153e0:	4638      	mov	r0, r7
 80153e2:	f7fe fbb7 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80153e6:	b950      	cbnz	r0, 80153fe <remove_chain+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80153e8:	0063      	lsls	r3, r4, #1
 80153ea:	3734      	adds	r7, #52	; 0x34
 80153ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80153f0:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 80153f2:	f817 8003 	ldrb.w	r8, [r7, r3]
 80153f6:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80153f8:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 80153fc:	e7af      	b.n	801535e <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80153fe:	2001      	movs	r0, #1
 8015400:	e772      	b.n	80152e8 <remove_chain+0x2c>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015402:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8015406:	e7aa      	b.n	801535e <remove_chain+0xa2>
	return FR_OK;
 8015408:	2000      	movs	r0, #0
 801540a:	e76d      	b.n	80152e8 <remove_chain+0x2c>

0801540c <dir_register>:
{
 801540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015410:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 8015414:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015416:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 801541a:	f040 8334 	bne.w	8015a86 <dir_register+0x67a>
	FATFS *fs = dp->obj.fs;
 801541e:	6803      	ldr	r3, [r0, #0]
 8015420:	4681      	mov	r9, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015422:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	FATFS *fs = dp->obj.fs;
 8015426:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015428:	f8bc 3000 	ldrh.w	r3, [ip]
 801542c:	2b00      	cmp	r3, #0
 801542e:	f000 8348 	beq.w	8015ac2 <dir_register+0x6b6>
 8015432:	4663      	mov	r3, ip
 8015434:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8015438:	3501      	adds	r5, #1
 801543a:	2a00      	cmp	r2, #0
 801543c:	d1fa      	bne.n	8015434 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 801543e:	f109 0a24 	add.w	sl, r9, #36	; 0x24
	if (cnt) {
 8015442:	ab10      	add	r3, sp, #64	; 0x40
 8015444:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8015448:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801544c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8015450:	07d9      	lsls	r1, r3, #31
 8015452:	9308      	str	r3, [sp, #32]
 8015454:	f100 809a 	bmi.w	801558c <dir_register+0x180>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015458:	f013 0302 	ands.w	r3, r3, #2
 801545c:	9f00      	ldr	r7, [sp, #0]
 801545e:	f000 82ba 	beq.w	80159d6 <dir_register+0x5ca>
 8015462:	4b74      	ldr	r3, [pc, #464]	; (8015634 <dir_register+0x228>)
 8015464:	350c      	adds	r5, #12
	res = dir_sdi(dp, 0);
 8015466:	2100      	movs	r1, #0
 8015468:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801546a:	fba3 3505 	umull	r3, r5, r3, r5
 801546e:	08ab      	lsrs	r3, r5, #2
 8015470:	9301      	str	r3, [sp, #4]
 8015472:	3301      	adds	r3, #1
 8015474:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8015476:	f7ff fb09 	bl	8014a8c <dir_sdi>
	if (res == FR_OK) {
 801547a:	4683      	mov	fp, r0
 801547c:	2800      	cmp	r0, #0
 801547e:	f040 82b5 	bne.w	80159ec <dir_register+0x5e0>
						fs->wflag = 1;
 8015482:	f8cd a00c 	str.w	sl, [sp, #12]
		n = 0;
 8015486:	4680      	mov	r8, r0
 8015488:	f8d9 101c 	ldr.w	r1, [r9, #28]
						fs->wflag = 1;
 801548c:	46a3      	mov	fp, r4
 801548e:	46ba      	mov	sl, r7
 8015490:	9002      	str	r0, [sp, #8]
 8015492:	e029      	b.n	80154e8 <dir_register+0xdc>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015494:	fab3 f283 	clz	r2, r3
 8015498:	0952      	lsrs	r2, r2, #5
 801549a:	b3a3      	cbz	r3, 8015506 <dir_register+0xfa>
				n = 0;					/* Not a blank entry. Restart to search */
 801549c:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801549e:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80154a2:	f8d9 101c 	ldr.w	r1, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80154a6:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80154a8:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 80154ac:	f080 82a1 	bcs.w	80159f2 <dir_register+0x5e6>
 80154b0:	2900      	cmp	r1, #0
 80154b2:	f000 829e 	beq.w	80159f2 <dir_register+0x5e6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80154b6:	f3c4 0708 	ubfx	r7, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 80154ba:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80154be:	b967      	cbnz	r7, 80154da <dir_register+0xce>
		dp->sect++;				/* Next sector */
 80154c0:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
 80154c2:	f8d9 3018 	ldr.w	r3, [r9, #24]
		dp->sect++;				/* Next sector */
 80154c6:	f8c9 101c 	str.w	r1, [r9, #28]
		if (!dp->clust) {		/* Static table */
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f040 82ab 	bne.w	8015a26 <dir_register+0x61a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80154d0:	8932      	ldrh	r2, [r6, #8]
 80154d2:	ebb2 1f54 	cmp.w	r2, r4, lsr #5
 80154d6:	f240 82f1 	bls.w	8015abc <dir_register+0x6b0>
 80154da:	f106 0534 	add.w	r5, r6, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80154de:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 80154e0:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80154e4:	f8c9 5020 	str.w	r5, [r9, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80154e8:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80154ec:	428b      	cmp	r3, r1
 80154ee:	d005      	beq.n	80154fc <dir_register+0xf0>
 80154f0:	4650      	mov	r0, sl
 80154f2:	f7fe fb2f 	bl	8013b54 <move_window.part.0>
			if (res != FR_OK) break;
 80154f6:	2800      	cmp	r0, #0
 80154f8:	f040 82e5 	bne.w	8015ac6 <dir_register+0x6ba>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80154fc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	2be5      	cmp	r3, #229	; 0xe5
 8015504:	d1c6      	bne.n	8015494 <dir_register+0x88>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015506:	f108 0801 	add.w	r8, r8, #1
 801550a:	45c3      	cmp	fp, r8
 801550c:	d1c7      	bne.n	801549e <dir_register+0x92>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801550e:	9b01      	ldr	r3, [sp, #4]
 8015510:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 8015514:	2b00      	cmp	r3, #0
 8015516:	f040 82bc 	bne.w	8015a92 <dir_register+0x686>
	if (sector != fs->winsect) {	/* Window offset changed? */
 801551a:	9b00      	ldr	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 801551c:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015522:	4299      	cmp	r1, r3
 8015524:	d005      	beq.n	8015532 <dir_register+0x126>
 8015526:	9800      	ldr	r0, [sp, #0]
 8015528:	f7fe fb14 	bl	8013b54 <move_window.part.0>
		if (res == FR_OK) {
 801552c:	2800      	cmp	r0, #0
 801552e:	f040 82ba 	bne.w	8015aa6 <dir_register+0x69a>
	BYTE *d = (BYTE*)dst;
 8015532:	2220      	movs	r2, #32
 8015534:	2100      	movs	r1, #0
 8015536:	f8d9 0020 	ldr.w	r0, [r9, #32]
 801553a:	f00b faf3 	bl	8020b24 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801553e:	f8d9 3020 	ldr.w	r3, [r9, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015542:	1d1a      	adds	r2, r3, #4
 8015544:	4592      	cmp	sl, r2
 8015546:	d204      	bcs.n	8015552 <dir_register+0x146>
 8015548:	f109 0228 	add.w	r2, r9, #40	; 0x28
 801554c:	4293      	cmp	r3, r2
 801554e:	f0c0 8489 	bcc.w	8015e64 <dir_register+0xa58>
			*d++ = *s++;
 8015552:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8015556:	601a      	str	r2, [r3, #0]
 8015558:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801555c:	605a      	str	r2, [r3, #4]
 801555e:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
}
 8015562:	4658      	mov	r0, fp
			*d++ = *s++;
 8015564:	721a      	strb	r2, [r3, #8]
 8015566:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
 801556a:	725a      	strb	r2, [r3, #9]
 801556c:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
 8015570:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8015572:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015574:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 8015578:	f8d9 1020 	ldr.w	r1, [r9, #32]
 801557c:	f003 0318 	and.w	r3, r3, #24
 8015580:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8015582:	9b00      	ldr	r3, [sp, #0]
 8015584:	70da      	strb	r2, [r3, #3]
}
 8015586:	b011      	add	sp, #68	; 0x44
 8015588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801558c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8015590:	2340      	movs	r3, #64	; 0x40
 8015592:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		for (n = 1; n < 100; n++) {
 8015596:	2701      	movs	r7, #1
 8015598:	9201      	str	r2, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801559a:	f04f 0820 	mov.w	r8, #32
 801559e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80155a2:	468b      	mov	fp, r1
 80155a4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 80155a8:	9204      	str	r2, [sp, #16]
 80155aa:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80155ae:	9509      	str	r5, [sp, #36]	; 0x24
 80155b0:	4605      	mov	r5, r0
 80155b2:	9203      	str	r2, [sp, #12]
 80155b4:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 80155b8:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
 80155bc:	9202      	str	r2, [sp, #8]
 80155be:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
				if (sr & 0x10000) sr ^= 0x11021;
 80155c2:	4c1d      	ldr	r4, [pc, #116]	; (8015638 <dir_register+0x22c>)
 80155c4:	9207      	str	r2, [sp, #28]
 80155c6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80155ca:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80155ce:	9206      	str	r2, [sp, #24]
 80155d0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80155d4:	9205      	str	r2, [sp, #20]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80155d6:	4662      	mov	r2, ip
			*d++ = *s++;
 80155d8:	9801      	ldr	r0, [sp, #4]
 80155da:	2100      	movs	r1, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80155dc:	2f05      	cmp	r7, #5
			*d++ = *s++;
 80155de:	f889 602e 	strb.w	r6, [r9, #46]	; 0x2e
 80155e2:	f8a9 002c 	strh.w	r0, [r9, #44]	; 0x2c
 80155e6:	460b      	mov	r3, r1
 80155e8:	9804      	ldr	r0, [sp, #16]
 80155ea:	f360 0107 	bfi	r1, r0, #0, #8
 80155ee:	9806      	ldr	r0, [sp, #24]
 80155f0:	f360 0307 	bfi	r3, r0, #0, #8
 80155f4:	9803      	ldr	r0, [sp, #12]
 80155f6:	f360 210f 	bfi	r1, r0, #8, #8
 80155fa:	9805      	ldr	r0, [sp, #20]
 80155fc:	f360 230f 	bfi	r3, r0, #8, #8
 8015600:	9802      	ldr	r0, [sp, #8]
 8015602:	f36b 4317 	bfi	r3, fp, #16, #8
 8015606:	f360 4117 	bfi	r1, r0, #16, #8
 801560a:	9807      	ldr	r0, [sp, #28]
 801560c:	f365 631f 	bfi	r3, r5, #24, #8
 8015610:	f360 611f 	bfi	r1, r0, #24, #8
 8015614:	e9c9 1309 	strd	r1, r3, [r9, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015618:	f240 8158 	bls.w	80158cc <dir_register+0x4c0>
		while (*lfn) {	/* Create a CRC */
 801561c:	8813      	ldrh	r3, [r2, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 8154 	beq.w	80158cc <dir_register+0x4c0>
				sr = (sr << 1) + (wc & 1);
 8015624:	f003 0101 	and.w	r1, r3, #1
 8015628:	4694      	mov	ip, r2
				wc >>= 1;
 801562a:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 801562c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015630:	e00c      	b.n	801564c <dir_register+0x240>
 8015632:	bf00      	nop
 8015634:	4ec4ec4f 	.word	0x4ec4ec4f
 8015638:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 801563c:	f003 0101 	and.w	r1, r3, #1
				wc >>= 1;
 8015640:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 8015642:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015646:	0412      	lsls	r2, r2, #16
 8015648:	bf48      	it	mi
 801564a:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 801564c:	f000 0001 	and.w	r0, r0, #1
				wc >>= 1;
 8015650:	089a      	lsrs	r2, r3, #2
				sr = (sr << 1) + (wc & 1);
 8015652:	eb00 0041 	add.w	r0, r0, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015656:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8015658:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 801565c:	ea4f 02d3 	mov.w	r2, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8015660:	bf48      	it	mi
 8015662:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8015664:	f002 0201 	and.w	r2, r2, #1
 8015668:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801566c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 801566e:	ea4f 1013 	mov.w	r0, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8015672:	bf48      	it	mi
 8015674:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015676:	f000 0001 	and.w	r0, r0, #1
 801567a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801567e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8015680:	ea4f 1153 	mov.w	r1, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8015684:	bf48      	it	mi
 8015686:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8015688:	f001 0101 	and.w	r1, r1, #1
 801568c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015690:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8015692:	ea4f 1293 	mov.w	r2, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8015696:	bf48      	it	mi
 8015698:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801569a:	f002 0201 	and.w	r2, r2, #1
 801569e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80156a2:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80156a4:	ea4f 10d3 	mov.w	r0, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 80156a8:	bf48      	it	mi
 80156aa:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80156ac:	f000 0001 	and.w	r0, r0, #1
 80156b0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80156b4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80156b6:	ea4f 2113 	mov.w	r1, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 80156ba:	bf48      	it	mi
 80156bc:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 80156be:	f001 0101 	and.w	r1, r1, #1
 80156c2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80156c6:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 80156c8:	ea4f 2253 	mov.w	r2, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 80156cc:	bf48      	it	mi
 80156ce:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80156d0:	f002 0201 	and.w	r2, r2, #1
 80156d4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80156d8:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80156da:	ea4f 2093 	mov.w	r0, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 80156de:	bf48      	it	mi
 80156e0:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80156e2:	f000 0001 	and.w	r0, r0, #1
 80156e6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80156ea:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80156ec:	ea4f 21d3 	mov.w	r1, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 80156f0:	bf48      	it	mi
 80156f2:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 80156f4:	f001 0101 	and.w	r1, r1, #1
 80156f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80156fc:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 80156fe:	ea4f 3213 	mov.w	r2, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8015702:	bf48      	it	mi
 8015704:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8015706:	f002 0201 	and.w	r2, r2, #1
 801570a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801570e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8015710:	ea4f 3053 	mov.w	r0, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8015714:	bf48      	it	mi
 8015716:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015718:	f000 0001 	and.w	r0, r0, #1
 801571c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015720:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8015722:	ea4f 3193 	mov.w	r1, r3, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8015726:	bf48      	it	mi
 8015728:	4062      	eormi	r2, r4
				wc >>= 1;
 801572a:	0bdb      	lsrs	r3, r3, #15
				sr = (sr << 1) + (wc & 1);
 801572c:	f001 0101 	and.w	r1, r1, #1
 8015730:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015734:	0412      	lsls	r2, r2, #16
 8015736:	bf48      	it	mi
 8015738:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801573a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801573e:	0400      	lsls	r0, r0, #16
 8015740:	bf48      	it	mi
 8015742:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015744:	eb03 0241 	add.w	r2, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015748:	0409      	lsls	r1, r1, #16
		while (*lfn) {	/* Create a CRC */
 801574a:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 801574e:	bf48      	it	mi
 8015750:	4062      	eormi	r2, r4
		while (*lfn) {	/* Create a CRC */
 8015752:	2b00      	cmp	r3, #0
 8015754:	f47f af72 	bne.w	801563c <dir_register+0x230>
		c = (BYTE)((seq % 16) + '0');
 8015758:	f002 010f 	and.w	r1, r2, #15
 801575c:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8015760:	2b39      	cmp	r3, #57	; 0x39
 8015762:	bf88      	it	hi
 8015764:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8015768:	2a0f      	cmp	r2, #15
		seq /= 16;
 801576a:	ea4f 1112 	mov.w	r1, r2, lsr #4
		ns[i--] = c;
 801576e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	} while (seq);
 8015772:	f240 8144 	bls.w	80159fe <dir_register+0x5f2>
		c = (BYTE)((seq % 16) + '0');
 8015776:	f001 000f 	and.w	r0, r1, #15
 801577a:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 801577e:	2b39      	cmp	r3, #57	; 0x39
 8015780:	bf88      	it	hi
 8015782:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8015786:	290f      	cmp	r1, #15
		seq /= 16;
 8015788:	ea4f 2012 	mov.w	r0, r2, lsr #8
		ns[i--] = c;
 801578c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	} while (seq);
 8015790:	f240 813a 	bls.w	8015a08 <dir_register+0x5fc>
		c = (BYTE)((seq % 16) + '0');
 8015794:	f000 010f 	and.w	r1, r0, #15
 8015798:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 801579c:	2b39      	cmp	r3, #57	; 0x39
 801579e:	bf88      	it	hi
 80157a0:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 80157a4:	280f      	cmp	r0, #15
		seq /= 16;
 80157a6:	ea4f 3112 	mov.w	r1, r2, lsr #12
		ns[i--] = c;
 80157aa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	} while (seq);
 80157ae:	f240 8130 	bls.w	8015a12 <dir_register+0x606>
		c = (BYTE)((seq % 16) + '0');
 80157b2:	f001 000f 	and.w	r0, r1, #15
 80157b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 80157ba:	2b39      	cmp	r3, #57	; 0x39
 80157bc:	bf88      	it	hi
 80157be:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 80157c2:	290f      	cmp	r1, #15
		seq /= 16;
 80157c4:	ea4f 4012 	mov.w	r0, r2, lsr #16
		ns[i--] = c;
 80157c8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	} while (seq);
 80157cc:	f240 8126 	bls.w	8015a1c <dir_register+0x610>
		c = (BYTE)((seq % 16) + '0');
 80157d0:	f000 010f 	and.w	r1, r0, #15
 80157d4:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 80157d8:	2b39      	cmp	r3, #57	; 0x39
 80157da:	bf88      	it	hi
 80157dc:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 80157e0:	280f      	cmp	r0, #15
		seq /= 16;
 80157e2:	ea4f 5112 	mov.w	r1, r2, lsr #20
		ns[i--] = c;
 80157e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	} while (seq);
 80157ea:	f240 8142 	bls.w	8015a72 <dir_register+0x666>
		c = (BYTE)((seq % 16) + '0');
 80157ee:	f001 000f 	and.w	r0, r1, #15
 80157f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 80157f6:	2b39      	cmp	r3, #57	; 0x39
 80157f8:	bf88      	it	hi
 80157fa:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 80157fe:	290f      	cmp	r1, #15
		seq /= 16;
 8015800:	ea4f 6012 	mov.w	r0, r2, lsr #24
		ns[i--] = c;
 8015804:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	} while (seq);
 8015808:	f240 8138 	bls.w	8015a7c <dir_register+0x670>
		c = (BYTE)((seq % 16) + '0');
 801580c:	f000 010f 	and.w	r1, r0, #15
		seq /= 16;
 8015810:	0f12      	lsrs	r2, r2, #28
		c = (BYTE)((seq % 16) + '0');
 8015812:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8015816:	2b39      	cmp	r3, #57	; 0x39
 8015818:	bf88      	it	hi
 801581a:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 801581e:	280f      	cmp	r0, #15
		ns[i--] = c;
 8015820:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	} while (seq);
 8015824:	d954      	bls.n	80158d0 <dir_register+0x4c4>
		c = (BYTE)((seq % 16) + '0');
 8015826:	f102 0330 	add.w	r3, r2, #48	; 0x30
 801582a:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
 801582c:	2b39      	cmp	r3, #57	; 0x39
 801582e:	bf88      	it	hi
 8015830:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
		ns[i--] = c;
 8015834:	f04f 32ff 	mov.w	r2, #4294967295
 8015838:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801583c:	f109 0123 	add.w	r1, r9, #35	; 0x23
 8015840:	2300      	movs	r3, #0
 8015842:	e002      	b.n	801584a <dir_register+0x43e>
 8015844:	3301      	adds	r3, #1
 8015846:	4293      	cmp	r3, r2
 8015848:	d003      	beq.n	8015852 <dir_register+0x446>
 801584a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801584e:	2820      	cmp	r0, #32
 8015850:	d1f8      	bne.n	8015844 <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015852:	2a07      	cmp	r2, #7
 8015854:	d941      	bls.n	80158da <dir_register+0x4ce>
 8015856:	1c59      	adds	r1, r3, #1
 8015858:	f80a 8003 	strb.w	r8, [sl, r3]
	} while (j < 8);
 801585c:	2907      	cmp	r1, #7
 801585e:	d829      	bhi.n	80158b4 <dir_register+0x4a8>
 8015860:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015862:	f101 0001 	add.w	r0, r1, #1
 8015866:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801586a:	d023      	beq.n	80158b4 <dir_register+0x4a8>
 801586c:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801586e:	f100 0101 	add.w	r1, r0, #1
 8015872:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8015876:	d01d      	beq.n	80158b4 <dir_register+0x4a8>
 8015878:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801587a:	f101 0001 	add.w	r0, r1, #1
 801587e:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8015882:	d017      	beq.n	80158b4 <dir_register+0x4a8>
 8015884:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015886:	f100 0101 	add.w	r1, r0, #1
 801588a:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 801588e:	d011      	beq.n	80158b4 <dir_register+0x4a8>
 8015890:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015892:	f101 0001 	add.w	r0, r1, #1
 8015896:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801589a:	d00b      	beq.n	80158b4 <dir_register+0x4a8>
 801589c:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801589e:	f100 0101 	add.w	r1, r0, #1
 80158a2:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 80158a6:	d005      	beq.n	80158b4 <dir_register+0x4a8>
 80158a8:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158aa:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 80158ae:	d101      	bne.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158b0:	f889 802b 	strb.w	r8, [r9, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80158b4:	4648      	mov	r0, r9
 80158b6:	f7ff f9af 	bl	8014c18 <dir_find>
			if (res != FR_OK) break;
 80158ba:	2800      	cmp	r0, #0
 80158bc:	d17e      	bne.n	80159bc <dir_register+0x5b0>
		for (n = 1; n < 100; n++) {
 80158be:	3701      	adds	r7, #1
 80158c0:	2f64      	cmp	r7, #100	; 0x64
 80158c2:	f000 8096 	beq.w	80159f2 <dir_register+0x5e6>
 80158c6:	9b00      	ldr	r3, [sp, #0]
 80158c8:	68da      	ldr	r2, [r3, #12]
 80158ca:	e685      	b.n	80155d8 <dir_register+0x1cc>
 80158cc:	463a      	mov	r2, r7
 80158ce:	e743      	b.n	8015758 <dir_register+0x34c>
	ns[i] = '~';
 80158d0:	237e      	movs	r3, #126	; 0x7e
 80158d2:	2200      	movs	r2, #0
 80158d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80158d8:	4613      	mov	r3, r2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158da:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80158de:	1c59      	adds	r1, r3, #1
 80158e0:	1c50      	adds	r0, r2, #1
 80158e2:	4494      	add	ip, r2
	} while (j < 8);
 80158e4:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158e6:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 80158ea:	f80a c003 	strb.w	ip, [sl, r3]
	} while (j < 8);
 80158ee:	d8e1      	bhi.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158f0:	2807      	cmp	r0, #7
 80158f2:	d8b5      	bhi.n	8015860 <dir_register+0x454>
 80158f4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
	} while (j < 8);
 80158f8:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80158fa:	4460      	add	r0, ip
 80158fc:	f102 0c02 	add.w	ip, r2, #2
 8015900:	f810 ec14 	ldrb.w	lr, [r0, #-20]
 8015904:	f103 0002 	add.w	r0, r3, #2
 8015908:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 801590c:	d0d2      	beq.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801590e:	f1bc 0f08 	cmp.w	ip, #8
 8015912:	d0ab      	beq.n	801586c <dir_register+0x460>
 8015914:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8015916:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015918:	f102 0e03 	add.w	lr, r2, #3
 801591c:	448c      	add	ip, r1
 801591e:	f103 0103 	add.w	r1, r3, #3
 8015922:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8015926:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 801592a:	d0c3      	beq.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801592c:	f1be 0f07 	cmp.w	lr, #7
 8015930:	d8a2      	bhi.n	8015878 <dir_register+0x46c>
 8015932:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 8015934:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015936:	f102 0c04 	add.w	ip, r2, #4
 801593a:	4486      	add	lr, r0
 801593c:	f103 0004 	add.w	r0, r3, #4
 8015940:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8015944:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8015948:	d0b4      	beq.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801594a:	f1bc 0f08 	cmp.w	ip, #8
 801594e:	d099      	beq.n	8015884 <dir_register+0x478>
 8015950:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8015952:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015954:	f102 0e05 	add.w	lr, r2, #5
 8015958:	448c      	add	ip, r1
 801595a:	f103 0105 	add.w	r1, r3, #5
 801595e:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8015962:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 8015966:	d0a5      	beq.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015968:	f1be 0f07 	cmp.w	lr, #7
 801596c:	d890      	bhi.n	8015890 <dir_register+0x484>
 801596e:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 8015970:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015972:	f102 0c06 	add.w	ip, r2, #6
 8015976:	4486      	add	lr, r0
 8015978:	f103 0006 	add.w	r0, r3, #6
 801597c:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8015980:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8015984:	d096      	beq.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015986:	f1bc 0f08 	cmp.w	ip, #8
 801598a:	d087      	beq.n	801589c <dir_register+0x490>
 801598c:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 801598e:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015990:	448c      	add	ip, r1
 8015992:	f103 0107 	add.w	r1, r3, #7
 8015996:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 801599a:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 801599e:	d089      	beq.n	80158b4 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80159a0:	2a00      	cmp	r2, #0
 80159a2:	d181      	bne.n	80158a8 <dir_register+0x49c>
 80159a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	} while (j < 8);
 80159a8:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80159aa:	f80a 3001 	strb.w	r3, [sl, r1]
	} while (j < 8);
 80159ae:	f43f af7f 	beq.w	80158b0 <dir_register+0x4a4>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80159b2:	4648      	mov	r0, r9
 80159b4:	f7ff f930 	bl	8014c18 <dir_find>
			if (res != FR_OK) break;
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d080      	beq.n	80158be <dir_register+0x4b2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80159bc:	2804      	cmp	r0, #4
 80159be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80159c0:	4683      	mov	fp, r0
 80159c2:	d118      	bne.n	80159f6 <dir_register+0x5ea>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80159c4:	9b08      	ldr	r3, [sp, #32]
 80159c6:	f8d9 7000 	ldr.w	r7, [r9]
 80159ca:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80159ce:	f013 0302 	ands.w	r3, r3, #2
 80159d2:	f47f ad46 	bne.w	8015462 <dir_register+0x56>
 80159d6:	9301      	str	r3, [sp, #4]
 80159d8:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 80159da:	2100      	movs	r1, #0
 80159dc:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80159de:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 80159e0:	f7ff f854 	bl	8014a8c <dir_sdi>
	if (res == FR_OK) {
 80159e4:	4683      	mov	fp, r0
 80159e6:	2800      	cmp	r0, #0
 80159e8:	f43f ad4b 	beq.w	8015482 <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80159ec:	f1bb 0f04 	cmp.w	fp, #4
 80159f0:	d101      	bne.n	80159f6 <dir_register+0x5ea>
 80159f2:	f04f 0b07 	mov.w	fp, #7
}
 80159f6:	4658      	mov	r0, fp
 80159f8:	b011      	add	sp, #68	; 0x44
 80159fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 80159fe:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015a00:	2206      	movs	r2, #6
	ns[i] = '~';
 8015a02:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a06:	e719      	b.n	801583c <dir_register+0x430>
	ns[i] = '~';
 8015a08:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015a0a:	2205      	movs	r2, #5
	ns[i] = '~';
 8015a0c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a10:	e714      	b.n	801583c <dir_register+0x430>
	ns[i] = '~';
 8015a12:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015a14:	2204      	movs	r2, #4
	ns[i] = '~';
 8015a16:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a1a:	e70f      	b.n	801583c <dir_register+0x430>
	ns[i] = '~';
 8015a1c:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015a1e:	2203      	movs	r2, #3
	ns[i] = '~';
 8015a20:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a24:	e70a      	b.n	801583c <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015a26:	8972      	ldrh	r2, [r6, #10]
 8015a28:	3a01      	subs	r2, #1
 8015a2a:	ea12 2254 	ands.w	r2, r2, r4, lsr #9
 8015a2e:	f47f ad54 	bne.w	80154da <dir_register+0xce>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015a32:	4619      	mov	r1, r3
 8015a34:	4630      	mov	r0, r6
 8015a36:	f7fe f965 	bl	8013d04 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015a3a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015a3c:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015a3e:	f240 822b 	bls.w	8015e98 <dir_register+0xa8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015a42:	1c42      	adds	r2, r0, #1
 8015a44:	d034      	beq.n	8015ab0 <dir_register+0x6a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015a46:	69b3      	ldr	r3, [r6, #24]
 8015a48:	4298      	cmp	r0, r3
 8015a4a:	d23e      	bcs.n	8015aca <dir_register+0x6be>
 8015a4c:	1e82      	subs	r2, r0, #2
 8015a4e:	3b02      	subs	r3, #2
 8015a50:	f106 0534 	add.w	r5, r6, #52	; 0x34
 8015a54:	9205      	str	r2, [sp, #20]
				dp->clust = clst;		/* Initialize data for new cluster */
 8015a56:	9a04      	ldr	r2, [sp, #16]
 8015a58:	f8c9 2018 	str.w	r2, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015a5c:	9a05      	ldr	r2, [sp, #20]
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	f240 81fe 	bls.w	8015e60 <dir_register+0xa54>
	return clst * fs->csize + fs->database;
 8015a64:	8971      	ldrh	r1, [r6, #10]
 8015a66:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015a68:	fb02 3101 	mla	r1, r2, r1, r3
				dp->sect = clust2sect(fs, clst);
 8015a6c:	f8c9 101c 	str.w	r1, [r9, #28]
 8015a70:	e535      	b.n	80154de <dir_register+0xd2>
	ns[i] = '~';
 8015a72:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015a74:	2202      	movs	r2, #2
	ns[i] = '~';
 8015a76:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a7a:	e6df      	b.n	801583c <dir_register+0x430>
	ns[i] = '~';
 8015a7c:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015a7e:	2201      	movs	r2, #1
	ns[i] = '~';
 8015a80:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a84:	e6da      	b.n	801583c <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015a86:	f04f 0b06 	mov.w	fp, #6
}
 8015a8a:	4658      	mov	r0, fp
 8015a8c:	b011      	add	sp, #68	; 0x44
 8015a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015a92:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015a96:	4648      	mov	r0, r9
 8015a98:	461e      	mov	r6, r3
 8015a9a:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 8015a9e:	f7fe fff5 	bl	8014a8c <dir_sdi>
		if (res == FR_OK) {
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	d074      	beq.n	8015b90 <dir_register+0x784>
 8015aa6:	4683      	mov	fp, r0
}
 8015aa8:	4658      	mov	r0, fp
 8015aaa:	b011      	add	sp, #68	; 0x44
 8015aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015ab0:	f04f 0b01 	mov.w	fp, #1
}
 8015ab4:	4658      	mov	r0, fp
 8015ab6:	b011      	add	sp, #68	; 0x44
 8015ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 8015abc:	f8c9 301c 	str.w	r3, [r9, #28]
 8015ac0:	e797      	b.n	80159f2 <dir_register+0x5e6>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015ac2:	461d      	mov	r5, r3
 8015ac4:	e4bb      	b.n	801543e <dir_register+0x32>
 8015ac6:	4683      	mov	fp, r0
 8015ac8:	e790      	b.n	80159ec <dir_register+0x5e0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015aca:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8015ace:	4648      	mov	r0, r9
 8015ad0:	f7fe fcaa 	bl	8014428 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	9004      	str	r0, [sp, #16]
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	d08a      	beq.n	80159f2 <dir_register+0x5e6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015adc:	2801      	cmp	r0, #1
 8015ade:	f000 81db 	beq.w	8015e98 <dir_register+0xa8c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	d0e4      	beq.n	8015ab0 <dir_register+0x6a4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015ae6:	78f3      	ldrb	r3, [r6, #3]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f040 81e7 	bne.w	8015ebc <dir_register+0xab0>
 8015aee:	f106 0534 	add.w	r5, r6, #52	; 0x34
	clst -= 2;
 8015af2:	9b04      	ldr	r3, [sp, #16]
 8015af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015af8:	2100      	movs	r1, #0
 8015afa:	4628      	mov	r0, r5
 8015afc:	3b02      	subs	r3, #2
 8015afe:	9305      	str	r3, [sp, #20]
 8015b00:	f00b f810 	bl	8020b24 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015b04:	69b3      	ldr	r3, [r6, #24]
 8015b06:	9a05      	ldr	r2, [sp, #20]
 8015b08:	3b02      	subs	r3, #2
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	f080 8203 	bcs.w	8015f16 <dir_register+0xb0a>
	return clst * fs->csize + fs->database;
 8015b10:	4610      	mov	r0, r2
 8015b12:	8971      	ldrh	r1, [r6, #10]
 8015b14:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8015b16:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015b1a:	6332      	str	r2, [r6, #48]	; 0x30
 8015b1c:	2900      	cmp	r1, #0
 8015b1e:	f000 81cb 	beq.w	8015eb8 <dir_register+0xaac>
 8015b22:	2300      	movs	r3, #0
 8015b24:	9708      	str	r7, [sp, #32]
 8015b26:	462f      	mov	r7, r5
 8015b28:	4615      	mov	r5, r2
 8015b2a:	e9cd b406 	strd	fp, r4, [sp, #24]
 8015b2e:	461c      	mov	r4, r3
						fs->wflag = 1;
 8015b30:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015b34:	462a      	mov	r2, r5
 8015b36:	4639      	mov	r1, r7
 8015b38:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 8015b3a:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	f7fd ff65 	bl	8013a0c <disk_write>
 8015b42:	2800      	cmp	r0, #0
 8015b44:	d1b4      	bne.n	8015ab0 <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015b46:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015b48:	69f3      	ldr	r3, [r6, #28]
 8015b4a:	eba5 0c02 	sub.w	ip, r5, r2
			fs->wflag = 0;
 8015b4e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015b50:	459c      	cmp	ip, r3
 8015b52:	d212      	bcs.n	8015b7a <dir_register+0x76e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b54:	f896 b002 	ldrb.w	fp, [r6, #2]
 8015b58:	f1bb 0f01 	cmp.w	fp, #1
 8015b5c:	d801      	bhi.n	8015b62 <dir_register+0x756>
 8015b5e:	e00c      	b.n	8015b7a <dir_register+0x76e>
 8015b60:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8015b62:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b64:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8015b68:	2301      	movs	r3, #1
 8015b6a:	4639      	mov	r1, r7
 8015b6c:	462a      	mov	r2, r5
 8015b6e:	7870      	ldrb	r0, [r6, #1]
 8015b70:	f7fd ff4c 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b74:	f1bb 0f01 	cmp.w	fp, #1
 8015b78:	d1f2      	bne.n	8015b60 <dir_register+0x754>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015b7a:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8015b7c:	1c63      	adds	r3, r4, #1
 8015b7e:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8015b82:	1c45      	adds	r5, r0, #1
 8015b84:	4563      	cmp	r3, ip
 8015b86:	6335      	str	r5, [r6, #48]	; 0x30
 8015b88:	f080 818d 	bcs.w	8015ea6 <dir_register+0xa9a>
 8015b8c:	461c      	mov	r4, r3
 8015b8e:	e7cf      	b.n	8015b30 <dir_register+0x724>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015b90:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8015b94:	4604      	mov	r4, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015b96:	f899 1025 	ldrb.w	r1, [r9, #37]	; 0x25
 8015b9a:	01d3      	lsls	r3, r2, #7
 8015b9c:	f899 5026 	ldrb.w	r5, [r9, #38]	; 0x26
 8015ba0:	f899 0027 	ldrb.w	r0, [r9, #39]	; 0x27
 8015ba4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8015ba8:	9f00      	ldr	r7, [sp, #0]
 8015baa:	185a      	adds	r2, r3, r1
 8015bac:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8015bb0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015bb4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015bb8:	fa55 f283 	uxtab	r2, r5, r3
 8015bbc:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8015bc0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015bc4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015bc8:	fa50 f283 	uxtab	r2, r0, r3
 8015bcc:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 8015bd0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015bd4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015bd8:	fa51 f283 	uxtab	r2, r1, r3
 8015bdc:	f899 102b 	ldrb.w	r1, [r9, #43]	; 0x2b
 8015be0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015be4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015be8:	fa55 f283 	uxtab	r2, r5, r3
 8015bec:	f899 502c 	ldrb.w	r5, [r9, #44]	; 0x2c
 8015bf0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015bf4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015bf8:	fa50 f283 	uxtab	r2, r0, r3
 8015bfc:	f899 002d 	ldrb.w	r0, [r9, #45]	; 0x2d
 8015c00:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015c04:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015c08:	fa51 f283 	uxtab	r2, r1, r3
 8015c0c:	f899 102e 	ldrb.w	r1, [r9, #46]	; 0x2e
 8015c10:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015c14:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015c18:	fa55 f283 	uxtab	r2, r5, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8015c1c:	25ff      	movs	r5, #255	; 0xff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015c1e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015c22:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015c26:	fa50 f383 	uxtab	r3, r0, r3
 8015c2a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8015c2e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8015c32:	fa51 f183 	uxtab	r1, r1, r3
 8015c36:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8015c3a:	fa5f f881 	uxtb.w	r8, r1
	} while (--n);
 8015c3e:	e025      	b.n	8015c8c <dir_register+0x880>
	*ptr++ = (BYTE)val; val >>= 8;
 8015c40:	70dd      	strb	r5, [r3, #3]
	*ptr++ = (BYTE)val;
 8015c42:	711d      	strb	r5, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c44:	715d      	strb	r5, [r3, #5]
	*ptr++ = (BYTE)val;
 8015c46:	719d      	strb	r5, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c48:	71dd      	strb	r5, [r3, #7]
	*ptr++ = (BYTE)val;
 8015c4a:	721d      	strb	r5, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c4c:	725d      	strb	r5, [r3, #9]
	*ptr++ = (BYTE)val;
 8015c4e:	729d      	strb	r5, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c50:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val;
 8015c52:	73dd      	strb	r5, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c54:	741d      	strb	r5, [r3, #16]
	*ptr++ = (BYTE)val;
 8015c56:	745d      	strb	r5, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c58:	749d      	strb	r5, [r3, #18]
	*ptr++ = (BYTE)val;
 8015c5a:	74dd      	strb	r5, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c5c:	751d      	strb	r5, [r3, #20]
	*ptr++ = (BYTE)val;
 8015c5e:	755d      	strb	r5, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c60:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val;
 8015c62:	75dd      	strb	r5, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c64:	761d      	strb	r5, [r3, #24]
	*ptr++ = (BYTE)val;
 8015c66:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c68:	771d      	strb	r5, [r3, #28]
	*ptr++ = (BYTE)val;
 8015c6a:	775d      	strb	r5, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8015c6c:	779d      	strb	r5, [r3, #30]
	*ptr++ = (BYTE)val;
 8015c6e:	77dd      	strb	r5, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015c70:	f040 0040 	orr.w	r0, r0, #64	; 0x40
				fs->wflag = 1;
 8015c74:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015c76:	7018      	strb	r0, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8015c78:	4648      	mov	r0, r9
				fs->wflag = 1;
 8015c7a:	70fa      	strb	r2, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015c7c:	f7fe f8ae 	bl	8013ddc <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8015c80:	2800      	cmp	r0, #0
 8015c82:	f47f af10 	bne.w	8015aa6 <dir_register+0x69a>
 8015c86:	3e01      	subs	r6, #1
 8015c88:	f000 8109 	beq.w	8015e9e <dir_register+0xa92>
				res = move_window(fs, dp->sect);
 8015c8c:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c92:	4299      	cmp	r1, r3
 8015c94:	d005      	beq.n	8015ca2 <dir_register+0x896>
 8015c96:	4638      	mov	r0, r7
 8015c98:	f7fd ff5c 	bl	8013b54 <move_window.part.0>
				if (res != FR_OK) break;
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	f47f af02 	bne.w	8015aa6 <dir_register+0x69a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015ca2:	b2f0      	uxtb	r0, r6
 8015ca4:	68f9      	ldr	r1, [r7, #12]
 8015ca6:	f8d9 3020 	ldr.w	r3, [r9, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015caa:	f04f 0e0f 	mov.w	lr, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015cae:	1e42      	subs	r2, r0, #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015cb0:	f883 e00b 	strb.w	lr, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015cb4:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015cb8:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 8015cbc:	731c      	strb	r4, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015cbe:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 8015cc2:	769c      	strb	r4, [r3, #26]
	*ptr++ = (BYTE)val;
 8015cc4:	76dc      	strb	r4, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015cc6:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8015cca:	ea4f 0e42 	mov.w	lr, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 8015cce:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8015cd2:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 8015cd6:	f883 a002 	strb.w	sl, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015cda:	f1bc 0f00 	cmp.w	ip, #0
 8015cde:	d0af      	beq.n	8015c40 <dir_register+0x834>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015ce0:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8015ce4:	45d4      	cmp	ip, sl
 8015ce6:	d0ab      	beq.n	8015c40 <dir_register+0x834>
 8015ce8:	3201      	adds	r2, #1
 8015cea:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8015cee:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8015cf0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015cf4:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 8015cf8:	f883 b004 	strb.w	fp, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015cfc:	f1bc 0f00 	cmp.w	ip, #0
 8015d00:	d0a0      	beq.n	8015c44 <dir_register+0x838>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015d02:	45d4      	cmp	ip, sl
 8015d04:	d09e      	beq.n	8015c44 <dir_register+0x838>
 8015d06:	440a      	add	r2, r1
 8015d08:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d0c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015d10:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 8015d14:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015d18:	f1bc 0f00 	cmp.w	ip, #0
 8015d1c:	d094      	beq.n	8015c48 <dir_register+0x83c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015d1e:	45d4      	cmp	ip, sl
 8015d20:	d092      	beq.n	8015c48 <dir_register+0x83c>
 8015d22:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d26:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015d2a:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 8015d2e:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015d32:	f1bc 0f00 	cmp.w	ip, #0
 8015d36:	d089      	beq.n	8015c4c <dir_register+0x840>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015d38:	45d4      	cmp	ip, sl
 8015d3a:	d087      	beq.n	8015c4c <dir_register+0x840>
 8015d3c:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d40:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015d44:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 8015d48:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015d4c:	f1bc 0f00 	cmp.w	ip, #0
 8015d50:	f43f af7e 	beq.w	8015c50 <dir_register+0x844>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015d54:	45d4      	cmp	ip, sl
 8015d56:	f43f af7b 	beq.w	8015c50 <dir_register+0x844>
 8015d5a:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d5e:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8015d62:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 8015d66:	f883 a00f 	strb.w	sl, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015d6a:	f1bc 0f00 	cmp.w	ip, #0
 8015d6e:	f43f af71 	beq.w	8015c54 <dir_register+0x848>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015d72:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8015d76:	45d4      	cmp	ip, sl
 8015d78:	f43f af6c 	beq.w	8015c54 <dir_register+0x848>
 8015d7c:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d80:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015d84:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 8015d88:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015d8c:	f1bc 0f00 	cmp.w	ip, #0
 8015d90:	f43f af62 	beq.w	8015c58 <dir_register+0x84c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015d94:	45d4      	cmp	ip, sl
 8015d96:	f43f af5f 	beq.w	8015c58 <dir_register+0x84c>
 8015d9a:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d9e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015da2:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 8015da6:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015daa:	f1bc 0f00 	cmp.w	ip, #0
 8015dae:	f43f af55 	beq.w	8015c5c <dir_register+0x850>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015db2:	45d4      	cmp	ip, sl
 8015db4:	f43f af52 	beq.w	8015c5c <dir_register+0x850>
 8015db8:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8015dbc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015dc0:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 8015dc4:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015dc8:	f1bc 0f00 	cmp.w	ip, #0
 8015dcc:	f43f af48 	beq.w	8015c60 <dir_register+0x854>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015dd0:	45d4      	cmp	ip, sl
 8015dd2:	f43f af45 	beq.w	8015c60 <dir_register+0x854>
 8015dd6:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8015dda:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015dde:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 8015de2:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015de6:	f1bc 0f00 	cmp.w	ip, #0
 8015dea:	f43f af3b 	beq.w	8015c64 <dir_register+0x858>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015dee:	45d4      	cmp	ip, sl
 8015df0:	f43f af38 	beq.w	8015c64 <dir_register+0x858>
 8015df4:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8015df8:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8015dfc:	f883 c018 	strb.w	ip, [r3, #24]
	*ptr++ = (BYTE)val;
 8015e00:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015e04:	f1bc 0f00 	cmp.w	ip, #0
 8015e08:	f43f af2e 	beq.w	8015c68 <dir_register+0x85c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015e0c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8015e10:	45dc      	cmp	ip, fp
 8015e12:	f43f af29 	beq.w	8015c68 <dir_register+0x85c>
 8015e16:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8015e1a:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8015e1e:	f883 c01c 	strb.w	ip, [r3, #28]
	*ptr++ = (BYTE)val;
 8015e22:	f883 a01d 	strb.w	sl, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015e26:	f1bc 0f00 	cmp.w	ip, #0
 8015e2a:	f43f af1f 	beq.w	8015c6c <dir_register+0x860>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015e2e:	45dc      	cmp	ip, fp
 8015e30:	f43f af1c 	beq.w	8015c6c <dir_register+0x860>
 8015e34:	f8b2 c016 	ldrh.w	ip, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015e38:	f64f 7afd 	movw	sl, #65533	; 0xfffd
 8015e3c:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8015e40:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8015e44:	f883 c01e 	strb.w	ip, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015e48:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 8015e4a:	f883 b01f 	strb.w	fp, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015e4e:	4552      	cmp	r2, sl
 8015e50:	f63f af0e 	bhi.w	8015c70 <dir_register+0x864>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015e54:	4471      	add	r1, lr
 8015e56:	8b4a      	ldrh	r2, [r1, #26]
 8015e58:	2a00      	cmp	r2, #0
 8015e5a:	f47f af0b 	bne.w	8015c74 <dir_register+0x868>
 8015e5e:	e707      	b.n	8015c70 <dir_register+0x864>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e60:	2100      	movs	r1, #0
 8015e62:	e603      	b.n	8015a6c <dir_register+0x660>
			*d++ = *s++;
 8015e64:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
 8015e68:	701a      	strb	r2, [r3, #0]
 8015e6a:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
 8015e6e:	705a      	strb	r2, [r3, #1]
 8015e70:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
 8015e74:	709a      	strb	r2, [r3, #2]
 8015e76:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
 8015e7a:	70da      	strb	r2, [r3, #3]
 8015e7c:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 8015e80:	711a      	strb	r2, [r3, #4]
 8015e82:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8015e86:	715a      	strb	r2, [r3, #5]
 8015e88:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
 8015e8c:	719a      	strb	r2, [r3, #6]
 8015e8e:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
 8015e92:	71da      	strb	r2, [r3, #7]
 8015e94:	f7ff bb63 	b.w	801555e <dir_register+0x152>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015e98:	f04f 0b02 	mov.w	fp, #2
 8015e9c:	e5ab      	b.n	80159f6 <dir_register+0x5ea>
 8015e9e:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
 8015ea2:	f7ff bb3a 	b.w	801551a <dir_register+0x10e>
 8015ea6:	4622      	mov	r2, r4
 8015ea8:	69b3      	ldr	r3, [r6, #24]
 8015eaa:	463d      	mov	r5, r7
 8015eac:	f8dd b018 	ldr.w	fp, [sp, #24]
 8015eb0:	9f08      	ldr	r7, [sp, #32]
 8015eb2:	1a82      	subs	r2, r0, r2
 8015eb4:	9c07      	ldr	r4, [sp, #28]
 8015eb6:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8015eb8:	6332      	str	r2, [r6, #48]	; 0x30
 8015eba:	e5cc      	b.n	8015a56 <dir_register+0x64a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015ebc:	f106 0534 	add.w	r5, r6, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 8015ec0:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	7870      	ldrb	r0, [r6, #1]
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	9205      	str	r2, [sp, #20]
 8015eca:	f7fd fd9f 	bl	8013a0c <disk_write>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	f47f adee 	bne.w	8015ab0 <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015ed4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015ed6:	9a05      	ldr	r2, [sp, #20]
 8015ed8:	69f3      	ldr	r3, [r6, #28]
 8015eda:	1a51      	subs	r1, r2, r1
			fs->wflag = 0;
 8015edc:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015ede:	4299      	cmp	r1, r3
 8015ee0:	f4bf ae07 	bcs.w	8015af2 <dir_register+0x6e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015ee4:	78b1      	ldrb	r1, [r6, #2]
 8015ee6:	2901      	cmp	r1, #1
 8015ee8:	f67f ae03 	bls.w	8015af2 <dir_register+0x6e6>
 8015eec:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8015ef0:	462f      	mov	r7, r5
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	4615      	mov	r5, r2
 8015ef6:	e000      	b.n	8015efa <dir_register+0xaee>
 8015ef8:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8015efa:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015efc:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015efe:	2301      	movs	r3, #1
 8015f00:	4639      	mov	r1, r7
 8015f02:	462a      	mov	r2, r5
 8015f04:	7870      	ldrb	r0, [r6, #1]
 8015f06:	f7fd fd81 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015f0a:	2c01      	cmp	r4, #1
 8015f0c:	d1f4      	bne.n	8015ef8 <dir_register+0xaec>
 8015f0e:	463d      	mov	r5, r7
 8015f10:	9c05      	ldr	r4, [sp, #20]
 8015f12:	9f06      	ldr	r7, [sp, #24]
 8015f14:	e5ed      	b.n	8015af2 <dir_register+0x6e6>
 8015f16:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015f18:	2200      	movs	r2, #0
 8015f1a:	e5fe      	b.n	8015b1a <dir_register+0x70e>

08015f1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015f1c:	b530      	push	{r4, r5, lr}
 8015f1e:	b083      	sub	sp, #12
 8015f20:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8015f24:	b189      	cbz	r1, 8015f4a <f_mount+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015f26:	780c      	ldrb	r4, [r1, #0]
 8015f28:	2c1f      	cmp	r4, #31
 8015f2a:	d911      	bls.n	8015f50 <f_mount+0x34>
 8015f2c:	2c3a      	cmp	r4, #58	; 0x3a
 8015f2e:	d00f      	beq.n	8015f50 <f_mount+0x34>
 8015f30:	4608      	mov	r0, r1
 8015f32:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015f36:	2b1f      	cmp	r3, #31
 8015f38:	d90c      	bls.n	8015f54 <f_mount+0x38>
 8015f3a:	2b3a      	cmp	r3, #58	; 0x3a
 8015f3c:	d1f9      	bne.n	8015f32 <f_mount+0x16>
			i = *tp++ - '0';
 8015f3e:	3101      	adds	r1, #1
 8015f40:	3c30      	subs	r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015f42:	4288      	cmp	r0, r1
 8015f44:	d101      	bne.n	8015f4a <f_mount+0x2e>
 8015f46:	2c01      	cmp	r4, #1
 8015f48:	d907      	bls.n	8015f5a <f_mount+0x3e>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8015f4a:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8015f4c:	b003      	add	sp, #12
 8015f4e:	bd30      	pop	{r4, r5, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015f50:	4623      	mov	r3, r4
 8015f52:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015f54:	2b3a      	cmp	r3, #58	; 0x3a
 8015f56:	d0f2      	beq.n	8015f3e <f_mount+0x22>
		vol = 0;		/* Drive 0 */
 8015f58:	2400      	movs	r4, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015f5a:	4d1d      	ldr	r5, [pc, #116]	; (8015fd0 <f_mount+0xb4>)
 8015f5c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
	if (cfs) {
 8015f60:	b173      	cbz	r3, 8015f80 <f_mount+0x64>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015f62:	491c      	ldr	r1, [pc, #112]	; (8015fd4 <f_mount+0xb8>)
 8015f64:	6808      	ldr	r0, [r1, #0]
 8015f66:	4283      	cmp	r3, r0
 8015f68:	d021      	beq.n	8015fae <f_mount+0x92>
 8015f6a:	6908      	ldr	r0, [r1, #16]
 8015f6c:	4298      	cmp	r0, r3
 8015f6e:	d023      	beq.n	8015fb8 <f_mount+0x9c>
 8015f70:	6a08      	ldr	r0, [r1, #32]
 8015f72:	4283      	cmp	r3, r0
 8015f74:	d025      	beq.n	8015fc2 <f_mount+0xa6>
 8015f76:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8015f78:	4298      	cmp	r0, r3
 8015f7a:	d015      	beq.n	8015fa8 <f_mount+0x8c>
		cfs->fs_type = 0;				/* Clear old fs object */
 8015f7c:	2100      	movs	r1, #0
 8015f7e:	7019      	strb	r1, [r3, #0]
	if (fs) {
 8015f80:	9b01      	ldr	r3, [sp, #4]
 8015f82:	b163      	cbz	r3, 8015f9e <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
 8015f84:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015f86:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8015f88:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8015f8c:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015f8e:	d1dd      	bne.n	8015f4c <f_mount+0x30>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015f90:	4602      	mov	r2, r0
 8015f92:	a901      	add	r1, sp, #4
 8015f94:	4668      	mov	r0, sp
 8015f96:	f7fe fb75 	bl	8014684 <find_volume>
}
 8015f9a:	b003      	add	sp, #12
 8015f9c:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015f9e:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8015fa0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8015fa4:	b003      	add	sp, #12
 8015fa6:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015fa8:	2000      	movs	r0, #0
 8015faa:	6308      	str	r0, [r1, #48]	; 0x30
 8015fac:	e7e6      	b.n	8015f7c <f_mount+0x60>
 8015fae:	2000      	movs	r0, #0
 8015fb0:	6008      	str	r0, [r1, #0]
 8015fb2:	6908      	ldr	r0, [r1, #16]
 8015fb4:	4298      	cmp	r0, r3
 8015fb6:	d1db      	bne.n	8015f70 <f_mount+0x54>
 8015fb8:	2000      	movs	r0, #0
 8015fba:	6108      	str	r0, [r1, #16]
 8015fbc:	6a08      	ldr	r0, [r1, #32]
 8015fbe:	4283      	cmp	r3, r0
 8015fc0:	d1d9      	bne.n	8015f76 <f_mount+0x5a>
 8015fc2:	2000      	movs	r0, #0
 8015fc4:	6208      	str	r0, [r1, #32]
 8015fc6:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8015fc8:	4298      	cmp	r0, r3
 8015fca:	d1d7      	bne.n	8015f7c <f_mount+0x60>
 8015fcc:	e7ec      	b.n	8015fa8 <f_mount+0x8c>
 8015fce:	bf00      	nop
 8015fd0:	24005200 	.word	0x24005200
 8015fd4:	24005208 	.word	0x24005208

08015fd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fdc:	b093      	sub	sp, #76	; 0x4c
 8015fde:	9103      	str	r1, [sp, #12]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	f000 80ff 	beq.w	80161e4 <f_open+0x20c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015fe6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8015fea:	4616      	mov	r6, r2
 8015fec:	4604      	mov	r4, r0
 8015fee:	a904      	add	r1, sp, #16
 8015ff0:	a803      	add	r0, sp, #12
 8015ff2:	463a      	mov	r2, r7
 8015ff4:	f7fe fb46 	bl	8014684 <find_volume>
	if (res == FR_OK) {
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	b128      	cbz	r0, 8016008 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8016000:	4628      	mov	r0, r5
 8016002:	b013      	add	sp, #76	; 0x4c
 8016004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8016008:	9b04      	ldr	r3, [sp, #16]
		INIT_NAMBUF(fs);
 801600a:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 801600e:	9305      	str	r3, [sp, #20]
		INIT_NAMBUF(fs);
 8016010:	f001 fd90 	bl	8017b34 <ff_memalloc>
 8016014:	4680      	mov	r8, r0
 8016016:	2800      	cmp	r0, #0
 8016018:	f000 80e9 	beq.w	80161ee <f_open+0x216>
		res = follow_path(&dj, path);	/* Follow the file path */
 801601c:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
		INIT_NAMBUF(fs);
 8016020:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016022:	a805      	add	r0, sp, #20
 8016024:	f7fe ffae 	bl	8014f84 <follow_path>
		if (res == FR_OK) {
 8016028:	2800      	cmp	r0, #0
 801602a:	d139      	bne.n	80160a0 <f_open+0xc8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801602c:	f99d 3043 	ldrsb.w	r3, [sp, #67]	; 0x43
 8016030:	2b00      	cmp	r3, #0
 8016032:	f2c0 8121 	blt.w	8016278 <f_open+0x2a0>
		if (Files[i].fs) {	/* Existing entry */
 8016036:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 80164d4 <f_open+0x4fc>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801603a:	f027 0301 	bic.w	r3, r7, #1
				Files[i].ofs == dp->dptr) break;
 801603e:	990a      	ldr	r1, [sp, #40]	; 0x28
		if (Files[i].fs) {	/* Existing entry */
 8016040:	f8d9 2000 	ldr.w	r2, [r9]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016044:	9805      	ldr	r0, [sp, #20]
				Files[i].clu == dp->obj.sclust &&
 8016046:	f8dd c01c 	ldr.w	ip, [sp, #28]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801604a:	9300      	str	r3, [sp, #0]
				Files[i].ofs == dp->dptr) break;
 801604c:	9101      	str	r1, [sp, #4]
		if (Files[i].fs) {	/* Existing entry */
 801604e:	2a00      	cmp	r2, #0
 8016050:	f000 80cf 	beq.w	80161f2 <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016054:	4290      	cmp	r0, r2
 8016056:	f000 80cf 	beq.w	80161f8 <f_open+0x220>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801605a:	46ae      	mov	lr, r5
		if (Files[i].fs) {	/* Existing entry */
 801605c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016060:	2900      	cmp	r1, #0
 8016062:	f000 81d1 	beq.w	8016408 <f_open+0x430>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016066:	4288      	cmp	r0, r1
 8016068:	f000 81db 	beq.w	8016422 <f_open+0x44a>
		if (Files[i].fs) {	/* Existing entry */
 801606c:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8016070:	2900      	cmp	r1, #0
 8016072:	f000 81cc 	beq.w	801640e <f_open+0x436>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016076:	4288      	cmp	r0, r1
 8016078:	f000 81e0 	beq.w	801643c <f_open+0x464>
		if (Files[i].fs) {	/* Existing entry */
 801607c:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 8016080:	2900      	cmp	r1, #0
 8016082:	f000 80ce 	beq.w	8016222 <f_open+0x24a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016086:	4281      	cmp	r1, r0
 8016088:	f000 80d9 	beq.w	801623e <f_open+0x266>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801608c:	f1be 0f00 	cmp.w	lr, #0
 8016090:	f040 80c7 	bne.w	8016222 <f_open+0x24a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016094:	2012      	movs	r0, #18
		FREE_NAMBUF();
 8016096:	4605      	mov	r5, r0
 8016098:	4640      	mov	r0, r8
 801609a:	f001 fd4d 	bl	8017b38 <ff_memfree>
 801609e:	e7ad      	b.n	8015ffc <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80160a0:	f016 0f1c 	tst.w	r6, #28
 80160a4:	d0f7      	beq.n	8016096 <f_open+0xbe>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80160a6:	2804      	cmp	r0, #4
 80160a8:	d1f5      	bne.n	8016096 <f_open+0xbe>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80160aa:	f8df 9428 	ldr.w	r9, [pc, #1064]	; 80164d4 <f_open+0x4fc>
 80160ae:	f8d9 3000 	ldr.w	r3, [r9]
 80160b2:	b14b      	cbz	r3, 80160c8 <f_open+0xf0>
 80160b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160b8:	b133      	cbz	r3, 80160c8 <f_open+0xf0>
 80160ba:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80160be:	b11b      	cbz	r3, 80160c8 <f_open+0xf0>
 80160c0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d1e5      	bne.n	8016094 <f_open+0xbc>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80160c8:	a805      	add	r0, sp, #20
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80160ca:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80160ce:	f7ff f99d 	bl	801540c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d1df      	bne.n	8016096 <f_open+0xbe>
				dw = GET_FATTIME();
 80160d6:	f7fd fcb5 	bl	8013a44 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80160da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80160dc:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80160e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80160e4:	fa5f fe80 	uxtb.w	lr, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80160e8:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val;
 80160ec:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80160ee:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80160f0:	f883 e00e 	strb.w	lr, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80160f4:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 80160f6:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80160f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80160fa:	9e04      	ldr	r6, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80160fc:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80160fe:	f883 e016 	strb.w	lr, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8016102:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8016104:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016108:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801610c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	if (fs->fs_type == FS_FAT32) {
 801610e:	7832      	ldrb	r2, [r6, #0]
	rv = rv << 8 | ptr[0];
 8016110:	7ed9      	ldrb	r1, [r3, #27]
 8016112:	f893 a01a 	ldrb.w	sl, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8016116:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8016118:	ea4a 2a01 	orr.w	sl, sl, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801611c:	d105      	bne.n	801612a <f_open+0x152>
	rv = rv << 8 | ptr[0];
 801611e:	7d59      	ldrb	r1, [r3, #21]
 8016120:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016122:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016126:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 801612a:	2200      	movs	r2, #0
 801612c:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801612e:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8016130:	7831      	ldrb	r1, [r6, #0]
 8016132:	2903      	cmp	r1, #3
 8016134:	d101      	bne.n	801613a <f_open+0x162>
	*ptr++ = (BYTE)val; val >>= 8;
 8016136:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8016138:	755a      	strb	r2, [r3, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 801613a:	990d      	ldr	r1, [sp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 801613c:	2200      	movs	r2, #0
					fs->wflag = 1;
 801613e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016140:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8016142:	70f3      	strb	r3, [r6, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8016144:	f1ba 0f00 	cmp.w	sl, #0
 8016148:	d017      	beq.n	801617a <f_open+0x1a2>
						dw = fs->winsect;
 801614a:	6b33      	ldr	r3, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 801614c:	a805      	add	r0, sp, #20
 801614e:	4651      	mov	r1, sl
						dw = fs->winsect;
 8016150:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 8016152:	f7ff f8b3 	bl	80152bc <remove_chain>
						if (res == FR_OK) {
 8016156:	2800      	cmp	r0, #0
 8016158:	d19d      	bne.n	8016096 <f_open+0xbe>
							res = move_window(fs, dw);
 801615a:	9e04      	ldr	r6, [sp, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801615c:	9b00      	ldr	r3, [sp, #0]
 801615e:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8016160:	4293      	cmp	r3, r2
 8016162:	f000 81a3 	beq.w	80164ac <f_open+0x4d4>
 8016166:	4619      	mov	r1, r3
 8016168:	4630      	mov	r0, r6
 801616a:	f7fd fcf3 	bl	8013b54 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801616e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016172:	9e04      	ldr	r6, [sp, #16]
 8016174:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 8016176:	2800      	cmp	r0, #0
 8016178:	d18d      	bne.n	8016096 <f_open+0xbe>
 801617a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801617c:	9805      	ldr	r0, [sp, #20]
 801617e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016182:	9301      	str	r3, [sp, #4]
				mode |= FA_MODIFIED;
 8016184:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8016188:	f027 0301 	bic.w	r3, r7, #1
 801618c:	9300      	str	r3, [sp, #0]
		if (Files[i].fs == dp->obj.fs &&
 801618e:	f8d9 1000 	ldr.w	r1, [r9]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016192:	6b32      	ldr	r2, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8016194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		if (Files[i].fs == dp->obj.fs &&
 8016196:	4281      	cmp	r1, r0
 8016198:	9102      	str	r1, [sp, #8]
			fp->dir_ptr = dj.dir;
 801619a:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 801619e:	d06d      	beq.n	801627c <f_open+0x2a4>
 80161a0:	f8d9 e010 	ldr.w	lr, [r9, #16]
 80161a4:	4586      	cmp	lr, r0
 80161a6:	f000 80dc 	beq.w	8016362 <f_open+0x38a>
 80161aa:	f8d9 b020 	ldr.w	fp, [r9, #32]
 80161ae:	4583      	cmp	fp, r0
 80161b0:	f000 80e4 	beq.w	801637c <f_open+0x3a4>
 80161b4:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 80161b8:	4282      	cmp	r2, r0
 80161ba:	f000 80ec 	beq.w	8016396 <f_open+0x3be>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80161be:	9902      	ldr	r1, [sp, #8]
 80161c0:	2900      	cmp	r1, #0
 80161c2:	f000 80fd 	beq.w	80163c0 <f_open+0x3e8>
 80161c6:	f1be 0f00 	cmp.w	lr, #0
 80161ca:	f000 8144 	beq.w	8016456 <f_open+0x47e>
 80161ce:	f1bb 0f00 	cmp.w	fp, #0
 80161d2:	f000 80f4 	beq.w	80163be <f_open+0x3e6>
 80161d6:	2a00      	cmp	r2, #0
 80161d8:	f000 813f 	beq.w	801645a <f_open+0x482>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80161dc:	2300      	movs	r3, #0
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80161de:	2002      	movs	r0, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80161e0:	6123      	str	r3, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80161e2:	e758      	b.n	8016096 <f_open+0xbe>
	if (!fp) return FR_INVALID_OBJECT;
 80161e4:	2509      	movs	r5, #9
}
 80161e6:	4628      	mov	r0, r5
 80161e8:	b013      	add	sp, #76	; 0x4c
 80161ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 80161ee:	2511      	movs	r5, #17
 80161f0:	e706      	b.n	8016000 <f_open+0x28>
			be = 1;
 80161f2:	f04f 0e01 	mov.w	lr, #1
 80161f6:	e731      	b.n	801605c <f_open+0x84>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80161f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80161fc:	4594      	cmp	ip, r2
 80161fe:	f47f af2c 	bne.w	801605a <f_open+0x82>
				Files[i].clu == dp->obj.sclust &&
 8016202:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016206:	4291      	cmp	r1, r2
 8016208:	f47f af27 	bne.w	801605a <f_open+0x82>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801620c:	462a      	mov	r2, r5
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801620e:	2b00      	cmp	r3, #0
 8016210:	f040 80d3 	bne.w	80163ba <f_open+0x3e2>
 8016214:	eb09 1202 	add.w	r2, r9, r2, lsl #4
 8016218:	8992      	ldrh	r2, [r2, #12]
 801621a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801621e:	f000 80cc 	beq.w	80163ba <f_open+0x3e2>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016222:	f016 0f1c 	tst.w	r6, #28
 8016226:	d017      	beq.n	8016258 <f_open+0x280>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016228:	f89d 301a 	ldrb.w	r3, [sp, #26]
 801622c:	f013 0f11 	tst.w	r3, #17
 8016230:	f040 80f0 	bne.w	8016414 <f_open+0x43c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016234:	0773      	lsls	r3, r6, #29
 8016236:	f140 80db 	bpl.w	80163f0 <f_open+0x418>
 801623a:	2008      	movs	r0, #8
 801623c:	e72b      	b.n	8016096 <f_open+0xbe>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801623e:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8016242:	4561      	cmp	r1, ip
 8016244:	f47f af22 	bne.w	801608c <f_open+0xb4>
				Files[i].clu == dp->obj.sclust &&
 8016248:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 801624c:	9901      	ldr	r1, [sp, #4]
 801624e:	428a      	cmp	r2, r1
 8016250:	f47f af1c 	bne.w	801608c <f_open+0xb4>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016254:	2203      	movs	r2, #3
 8016256:	e7da      	b.n	801620e <f_open+0x236>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016258:	f89d 201a 	ldrb.w	r2, [sp, #26]
 801625c:	06d1      	lsls	r1, r2, #27
 801625e:	f100 80db 	bmi.w	8016418 <f_open+0x440>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016262:	07b1      	lsls	r1, r6, #30
 8016264:	f140 80c9 	bpl.w	80163fa <f_open+0x422>
 8016268:	07d2      	lsls	r2, r2, #31
 801626a:	f140 80c6 	bpl.w	80163fa <f_open+0x422>
		FREE_NAMBUF();
 801626e:	4640      	mov	r0, r8
						res = FR_DENIED;
 8016270:	2507      	movs	r5, #7
		FREE_NAMBUF();
 8016272:	f001 fc61 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016276:	e6c1      	b.n	8015ffc <f_open+0x24>
				res = FR_INVALID_NAME;
 8016278:	2006      	movs	r0, #6
 801627a:	e70c      	b.n	8016096 <f_open+0xbe>
		if (Files[i].fs == dp->obj.fs &&
 801627c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016280:	4594      	cmp	ip, r2
 8016282:	d18d      	bne.n	80161a0 <f_open+0x1c8>
			Files[i].clu == dp->obj.sclust &&
 8016284:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016288:	9901      	ldr	r1, [sp, #4]
 801628a:	428a      	cmp	r2, r1
 801628c:	d188      	bne.n	80161a0 <f_open+0x1c8>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801628e:	2100      	movs	r1, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016290:	9a00      	ldr	r2, [sp, #0]
 8016292:	eb09 1001 	add.w	r0, r9, r1, lsl #4
 8016296:	2a00      	cmp	r2, #0
 8016298:	d05b      	beq.n	8016352 <f_open+0x37a>
 801629a:	8980      	ldrh	r0, [r0, #12]
 801629c:	010a      	lsls	r2, r1, #4
 801629e:	2800      	cmp	r0, #0
 80162a0:	d19c      	bne.n	80161dc <f_open+0x204>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80162a2:	f44f 7e80 	mov.w	lr, #256	; 0x100
	return i + 1;
 80162a6:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80162a8:	4491      	add	r9, r2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80162aa:	6121      	str	r1, [r4, #16]
	if (fs->fs_type == FS_FAT32) {
 80162ac:	7831      	ldrb	r1, [r6, #0]
	rv = rv << 8 | ptr[0];
 80162ae:	7ed8      	ldrb	r0, [r3, #27]
 80162b0:	f893 a01a 	ldrb.w	sl, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 80162b4:	2903      	cmp	r1, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80162b6:	f8a9 e00c 	strh.w	lr, [r9, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 80162ba:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80162be:	d105      	bne.n	80162cc <f_open+0x2f4>
	rv = rv << 8 | ptr[0];
 80162c0:	7d59      	ldrb	r1, [r3, #21]
 80162c2:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80162c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80162c8:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80162cc:	f8c4 a008 	str.w	sl, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80162d0:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[2];
 80162d2:	8bd8      	ldrh	r0, [r3, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80162d4:	f104 0930 	add.w	r9, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 80162d8:	7f5a      	ldrb	r2, [r3, #29]
	rv = rv << 8 | ptr[0];
 80162da:	f893 b01c 	ldrb.w	fp, [r3, #28]
	rv = rv << 8 | ptr[1];
 80162de:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
			fp->obj.id = fs->id;
 80162e2:	88f2      	ldrh	r2, [r6, #6]
 80162e4:	4648      	mov	r0, r9
			fp->flag = mode;		/* Set file access mode */
 80162e6:	7527      	strb	r7, [r4, #20]
	rv = rv << 8 | ptr[0];
 80162e8:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			fp->obj.id = fs->id;
 80162ec:	80a2      	strh	r2, [r4, #4]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80162ee:	6026      	str	r6, [r4, #0]
 80162f0:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 80162f4:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 80162f6:	7561      	strb	r1, [r4, #21]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80162f8:	f8c4 b00c 	str.w	fp, [r4, #12]
			fp->sect = 0;			/* Invalidate current data sector */
 80162fc:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80162fe:	61a1      	str	r1, [r4, #24]
 8016300:	f00a fc10 	bl	8020b24 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016304:	f017 0720 	ands.w	r7, r7, #32
 8016308:	d01e      	beq.n	8016348 <f_open+0x370>
 801630a:	f1bb 0f00 	cmp.w	fp, #0
 801630e:	d050      	beq.n	80163b2 <f_open+0x3da>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016310:	8973      	ldrh	r3, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016312:	f8c4 b018 	str.w	fp, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016316:	ebbb 2f43 	cmp.w	fp, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801631a:	ea4f 2643 	mov.w	r6, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801631e:	f240 809e 	bls.w	801645e <f_open+0x486>
 8016322:	4651      	mov	r1, sl
 8016324:	e005      	b.n	8016332 <f_open+0x35a>
 8016326:	1c47      	adds	r7, r0, #1
 8016328:	f000 80c9 	beq.w	80164be <f_open+0x4e6>
 801632c:	455e      	cmp	r6, fp
 801632e:	f080 80c6 	bcs.w	80164be <f_open+0x4e6>
					clst = get_fat(&fp->obj, clst);
 8016332:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016334:	ebab 0b06 	sub.w	fp, fp, r6
					clst = get_fat(&fp->obj, clst);
 8016338:	f7fd fce4 	bl	8013d04 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 801633c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 801633e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8016340:	d8f1      	bhi.n	8016326 <f_open+0x34e>
				fp->clust = clst;
 8016342:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8016344:	2002      	movs	r0, #2
 8016346:	e6a6      	b.n	8016096 <f_open+0xbe>
		FREE_NAMBUF();
 8016348:	4640      	mov	r0, r8
 801634a:	463d      	mov	r5, r7
 801634c:	f001 fbf4 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016350:	e656      	b.n	8016000 <f_open+0x28>
 8016352:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
 8016356:	010a      	lsls	r2, r1, #4
 8016358:	f10e 0e01 	add.w	lr, lr, #1
 801635c:	fa1f fe8e 	uxth.w	lr, lr
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016360:	e7a1      	b.n	80162a6 <f_open+0x2ce>
		if (Files[i].fs == dp->obj.fs &&
 8016362:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8016366:	4594      	cmp	ip, r2
 8016368:	f47f af1f 	bne.w	80161aa <f_open+0x1d2>
			Files[i].clu == dp->obj.sclust &&
 801636c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8016370:	9901      	ldr	r1, [sp, #4]
 8016372:	428a      	cmp	r2, r1
 8016374:	f47f af19 	bne.w	80161aa <f_open+0x1d2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016378:	2101      	movs	r1, #1
 801637a:	e789      	b.n	8016290 <f_open+0x2b8>
		if (Files[i].fs == dp->obj.fs &&
 801637c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8016380:	4594      	cmp	ip, r2
 8016382:	f47f af17 	bne.w	80161b4 <f_open+0x1dc>
			Files[i].clu == dp->obj.sclust &&
 8016386:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801638a:	9901      	ldr	r1, [sp, #4]
 801638c:	428a      	cmp	r2, r1
 801638e:	f47f af11 	bne.w	80161b4 <f_open+0x1dc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016392:	2102      	movs	r1, #2
 8016394:	e77c      	b.n	8016290 <f_open+0x2b8>
		if (Files[i].fs == dp->obj.fs &&
 8016396:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 801639a:	458c      	cmp	ip, r1
 801639c:	f47f af0f 	bne.w	80161be <f_open+0x1e6>
			Files[i].clu == dp->obj.sclust &&
 80163a0:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 80163a4:	468a      	mov	sl, r1
 80163a6:	9901      	ldr	r1, [sp, #4]
 80163a8:	458a      	cmp	sl, r1
 80163aa:	f47f af08 	bne.w	80161be <f_open+0x1e6>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80163ae:	2103      	movs	r1, #3
 80163b0:	e76e      	b.n	8016290 <f_open+0x2b8>
		FREE_NAMBUF();
 80163b2:	4640      	mov	r0, r8
 80163b4:	f001 fbc0 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80163b8:	e622      	b.n	8016000 <f_open+0x28>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80163ba:	2010      	movs	r0, #16
 80163bc:	e66b      	b.n	8016096 <f_open+0xbe>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80163be:	2102      	movs	r1, #2
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80163c0:	9a00      	ldr	r2, [sp, #0]
		Files[i].fs = dp->obj.fs;
 80163c2:	eb09 1a01 	add.w	sl, r9, r1, lsl #4
		Files[i].ctr = 0;
 80163c6:	f04f 0b00 	mov.w	fp, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80163ca:	2a00      	cmp	r2, #0
		Files[i].fs = dp->obj.fs;
 80163cc:	ea4f 1201 	mov.w	r2, r1, lsl #4
		Files[i].clu = dp->obj.sclust;
 80163d0:	f8ca c004 	str.w	ip, [sl, #4]
		Files[i].fs = dp->obj.fs;
 80163d4:	f849 0002 	str.w	r0, [r9, r2]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80163d8:	bf18      	it	ne
 80163da:	f44f 7e80 	movne.w	lr, #256	; 0x100
		Files[i].ofs = dp->dptr;
 80163de:	9801      	ldr	r0, [sp, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80163e0:	bf08      	it	eq
 80163e2:	f04f 0e01 	moveq.w	lr, #1
		Files[i].ctr = 0;
 80163e6:	f8aa b00c 	strh.w	fp, [sl, #12]
		Files[i].ofs = dp->dptr;
 80163ea:	f8ca 0008 	str.w	r0, [sl, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80163ee:	e75a      	b.n	80162a6 <f_open+0x2ce>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80163f0:	0736      	lsls	r6, r6, #28
 80163f2:	f53f ae70 	bmi.w	80160d6 <f_open+0xfe>
 80163f6:	9e04      	ldr	r6, [sp, #16]
 80163f8:	e6c9      	b.n	801618e <f_open+0x1b6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80163fa:	f006 0208 	and.w	r2, r6, #8
 80163fe:	9e04      	ldr	r6, [sp, #16]
 8016400:	2a00      	cmp	r2, #0
 8016402:	f43f aec3 	beq.w	801618c <f_open+0x1b4>
 8016406:	e6bd      	b.n	8016184 <f_open+0x1ac>
			be = 1;
 8016408:	f04f 0e01 	mov.w	lr, #1
 801640c:	e62e      	b.n	801606c <f_open+0x94>
 801640e:	f04f 0e01 	mov.w	lr, #1
 8016412:	e633      	b.n	801607c <f_open+0xa4>
					res = FR_DENIED;
 8016414:	2007      	movs	r0, #7
 8016416:	e63e      	b.n	8016096 <f_open+0xbe>
		FREE_NAMBUF();
 8016418:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 801641a:	2504      	movs	r5, #4
		FREE_NAMBUF();
 801641c:	f001 fb8c 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016420:	e5ec      	b.n	8015ffc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016422:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016426:	458c      	cmp	ip, r1
 8016428:	f47f ae20 	bne.w	801606c <f_open+0x94>
				Files[i].clu == dp->obj.sclust &&
 801642c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8016430:	9901      	ldr	r1, [sp, #4]
 8016432:	4291      	cmp	r1, r2
 8016434:	f47f ae1a 	bne.w	801606c <f_open+0x94>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016438:	2201      	movs	r2, #1
 801643a:	e6e8      	b.n	801620e <f_open+0x236>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801643c:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 8016440:	458c      	cmp	ip, r1
 8016442:	f47f ae1b 	bne.w	801607c <f_open+0xa4>
				Files[i].clu == dp->obj.sclust &&
 8016446:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801644a:	9901      	ldr	r1, [sp, #4]
 801644c:	4291      	cmp	r1, r2
 801644e:	f47f ae15 	bne.w	801607c <f_open+0xa4>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016452:	2202      	movs	r2, #2
 8016454:	e6db      	b.n	801620e <f_open+0x236>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016456:	2101      	movs	r1, #1
 8016458:	e7b2      	b.n	80163c0 <f_open+0x3e8>
 801645a:	2103      	movs	r1, #3
 801645c:	e7b0      	b.n	80163c0 <f_open+0x3e8>
				fp->clust = clst;
 801645e:	f8c4 a01c 	str.w	sl, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016462:	f3cb 0308 	ubfx	r3, fp, #0, #9
 8016466:	2b00      	cmp	r3, #0
 8016468:	d0a3      	beq.n	80163b2 <f_open+0x3da>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801646a:	9804      	ldr	r0, [sp, #16]
	clst -= 2;
 801646c:	f1aa 0a02 	sub.w	sl, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016470:	6983      	ldr	r3, [r0, #24]
 8016472:	3b02      	subs	r3, #2
 8016474:	459a      	cmp	sl, r3
 8016476:	d204      	bcs.n	8016482 <f_open+0x4aa>
	return clst * fs->csize + fs->database;
 8016478:	8943      	ldrh	r3, [r0, #10]
 801647a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801647c:	fb0a 2203 	mla	r2, sl, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016480:	b922      	cbnz	r2, 801648c <f_open+0x4b4>
		FREE_NAMBUF();
 8016482:	4640      	mov	r0, r8
						res = FR_INT_ERR;
 8016484:	2502      	movs	r5, #2
		FREE_NAMBUF();
 8016486:	f001 fb57 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801648a:	e5b7      	b.n	8015ffc <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801648c:	eb02 225b 	add.w	r2, r2, fp, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016490:	4649      	mov	r1, r9
 8016492:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016494:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016496:	7840      	ldrb	r0, [r0, #1]
 8016498:	f7fd faaa 	bl	80139f0 <disk_read>
 801649c:	4605      	mov	r5, r0
		FREE_NAMBUF();
 801649e:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80164a0:	2d00      	cmp	r5, #0
 80164a2:	d087      	beq.n	80163b4 <f_open+0x3dc>
 80164a4:	2501      	movs	r5, #1
		FREE_NAMBUF();
 80164a6:	f001 fb47 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80164aa:	e5a7      	b.n	8015ffc <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80164ac:	f10a 33ff 	add.w	r3, sl, #4294967295
 80164b0:	9805      	ldr	r0, [sp, #20]
 80164b2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80164b6:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 80164b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ba:	9301      	str	r3, [sp, #4]
 80164bc:	e662      	b.n	8016184 <f_open+0x1ac>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80164be:	f1b1 3fff 	cmp.w	r1, #4294967295
 80164c2:	468a      	mov	sl, r1
				fp->clust = clst;
 80164c4:	61e1      	str	r1, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80164c6:	bf0c      	ite	eq
 80164c8:	2001      	moveq	r0, #1
 80164ca:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80164cc:	f43f ade3 	beq.w	8016096 <f_open+0xbe>
 80164d0:	e7c7      	b.n	8016462 <f_open+0x48a>
 80164d2:	bf00      	nop
 80164d4:	24005208 	.word	0x24005208

080164d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80164d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164dc:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80164de:	2300      	movs	r3, #0
{
 80164e0:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80164e2:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80164e4:	b150      	cbz	r0, 80164fc <f_read+0x24>
 80164e6:	6803      	ldr	r3, [r0, #0]
 80164e8:	4604      	mov	r4, r0
 80164ea:	b13b      	cbz	r3, 80164fc <f_read+0x24>
 80164ec:	4690      	mov	r8, r2
 80164ee:	781a      	ldrb	r2, [r3, #0]
 80164f0:	b122      	cbz	r2, 80164fc <f_read+0x24>
 80164f2:	460e      	mov	r6, r1
 80164f4:	88da      	ldrh	r2, [r3, #6]
 80164f6:	8881      	ldrh	r1, [r0, #4]
 80164f8:	4291      	cmp	r1, r2
 80164fa:	d005      	beq.n	8016508 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80164fc:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8016500:	4648      	mov	r0, r9
 8016502:	b005      	add	sp, #20
 8016504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016508:	7858      	ldrb	r0, [r3, #1]
 801650a:	f7fd fa53 	bl	80139b4 <disk_status>
 801650e:	07c2      	lsls	r2, r0, #31
 8016510:	d4f4      	bmi.n	80164fc <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016512:	f894 9015 	ldrb.w	r9, [r4, #21]
 8016516:	f1b9 0f00 	cmp.w	r9, #0
 801651a:	d1f1      	bne.n	8016500 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801651c:	7d23      	ldrb	r3, [r4, #20]
 801651e:	f013 0301 	ands.w	r3, r3, #1
 8016522:	9301      	str	r3, [sp, #4]
 8016524:	f000 80d3 	beq.w	80166ce <f_read+0x1f6>
	remain = fp->obj.objsize - fp->fptr;
 8016528:	69a1      	ldr	r1, [r4, #24]
 801652a:	68e2      	ldr	r2, [r4, #12]
 801652c:	1a52      	subs	r2, r2, r1
 801652e:	4590      	cmp	r8, r2
 8016530:	bf28      	it	cs
 8016532:	4690      	movcs	r8, r2
	for ( ;  btr;								/* Repeat until all data read */
 8016534:	f1b8 0f00 	cmp.w	r8, #0
 8016538:	d0e2      	beq.n	8016500 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801653a:	46a3      	mov	fp, r4
 801653c:	f104 0334 	add.w	r3, r4, #52	; 0x34
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016540:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016544:	f85b ab30 	ldr.w	sl, [fp], #48
 8016548:	9302      	str	r3, [sp, #8]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801654a:	2a00      	cmp	r2, #0
 801654c:	d13f      	bne.n	80165ce <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801654e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8016552:	0a4b      	lsrs	r3, r1, #9
 8016554:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8016556:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 801655a:	d06a      	beq.n	8016632 <f_read+0x15a>
 801655c:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801655e:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8016562:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016564:	3b02      	subs	r3, #2
 8016566:	4298      	cmp	r0, r3
 8016568:	d270      	bcs.n	801664c <f_read+0x174>
	return clst * fs->csize + fs->database;
 801656a:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 801656e:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8016572:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016576:	2d00      	cmp	r5, #0
 8016578:	d068      	beq.n	801664c <f_read+0x174>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801657a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
			sect += csect;
 801657e:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016580:	d36c      	bcc.n	801665c <f_read+0x184>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016582:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016586:	ea4f 2358 	mov.w	r3, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801658a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801658c:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 8016590:	bf88      	it	hi
 8016592:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016594:	462a      	mov	r2, r5
 8016596:	4631      	mov	r1, r6
 8016598:	9303      	str	r3, [sp, #12]
 801659a:	f7fd fa29 	bl	80139f0 <disk_read>
 801659e:	2800      	cmp	r0, #0
 80165a0:	f040 8084 	bne.w	80166ac <f_read+0x1d4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80165a4:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80165a8:	9b03      	ldr	r3, [sp, #12]
 80165aa:	2a00      	cmp	r2, #0
 80165ac:	f2c0 80a6 	blt.w	80166fc <f_read+0x224>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80165b0:	025b      	lsls	r3, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80165b2:	69a1      	ldr	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 80165b4:	ebb8 0803 	subs.w	r8, r8, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80165b8:	683a      	ldr	r2, [r7, #0]
 80165ba:	441e      	add	r6, r3
 80165bc:	4419      	add	r1, r3
 80165be:	441a      	add	r2, r3
 80165c0:	61a1      	str	r1, [r4, #24]
 80165c2:	603a      	str	r2, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80165c4:	d09c      	beq.n	8016500 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80165c6:	f3c1 0208 	ubfx	r2, r1, #0, #9
 80165ca:	2a00      	cmp	r2, #0
 80165cc:	d0bf      	beq.n	801654e <f_read+0x76>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80165ce:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80165d2:	1d10      	adds	r0, r2, #4
 80165d4:	1d31      	adds	r1, r6, #4
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80165d6:	445a      	add	r2, fp
 80165d8:	4543      	cmp	r3, r8
 80165da:	4458      	add	r0, fp
 80165dc:	bf28      	it	cs
 80165de:	4643      	movcs	r3, r8
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80165e0:	428a      	cmp	r2, r1
 80165e2:	bf38      	it	cc
 80165e4:	4286      	cmpcc	r6, r0
 80165e6:	f103 3cff 	add.w	ip, r3, #4294967295
 80165ea:	d367      	bcc.n	80166bc <f_read+0x1e4>
 80165ec:	f1bc 0f07 	cmp.w	ip, #7
 80165f0:	d964      	bls.n	80166bc <f_read+0x1e4>
 80165f2:	f023 0003 	bic.w	r0, r3, #3
 80165f6:	4631      	mov	r1, r6
 80165f8:	4615      	mov	r5, r2
 80165fa:	4430      	add	r0, r6
			*d++ = *s++;
 80165fc:	f855 eb04 	ldr.w	lr, [r5], #4
 8016600:	f841 eb04 	str.w	lr, [r1], #4
		} while (--cnt);
 8016604:	4288      	cmp	r0, r1
 8016606:	d1f9      	bne.n	80165fc <f_read+0x124>
 8016608:	f023 0103 	bic.w	r1, r3, #3
 801660c:	428b      	cmp	r3, r1
 801660e:	eb06 0001 	add.w	r0, r6, r1
 8016612:	eb02 0501 	add.w	r5, r2, r1
 8016616:	d0cc      	beq.n	80165b2 <f_read+0xda>
			*d++ = *s++;
 8016618:	5c52      	ldrb	r2, [r2, r1]
		} while (--cnt);
 801661a:	ebbc 0c01 	subs.w	ip, ip, r1
			*d++ = *s++;
 801661e:	5472      	strb	r2, [r6, r1]
		} while (--cnt);
 8016620:	d0c7      	beq.n	80165b2 <f_read+0xda>
			*d++ = *s++;
 8016622:	786a      	ldrb	r2, [r5, #1]
		} while (--cnt);
 8016624:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 8016628:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 801662a:	d0c2      	beq.n	80165b2 <f_read+0xda>
			*d++ = *s++;
 801662c:	78aa      	ldrb	r2, [r5, #2]
 801662e:	7082      	strb	r2, [r0, #2]
		} while (--cnt);
 8016630:	e7bf      	b.n	80165b2 <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8016632:	bb39      	cbnz	r1, 8016684 <f_read+0x1ac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016634:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016636:	2801      	cmp	r0, #1
 8016638:	d908      	bls.n	801664c <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801663a:	1c43      	adds	r3, r0, #1
 801663c:	d036      	beq.n	80166ac <f_read+0x1d4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801663e:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 8016642:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8016644:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016646:	3b02      	subs	r3, #2
 8016648:	4298      	cmp	r0, r3
 801664a:	d38e      	bcc.n	801656a <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801664c:	f04f 0902 	mov.w	r9, #2
}
 8016650:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016652:	f884 9015 	strb.w	r9, [r4, #21]
}
 8016656:	b005      	add	sp, #20
 8016658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801665c:	6a22      	ldr	r2, [r4, #32]
 801665e:	42aa      	cmp	r2, r5
 8016660:	d00b      	beq.n	801667a <f_read+0x1a2>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8016662:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8016666:	2b00      	cmp	r3, #0
 8016668:	db3b      	blt.n	80166e2 <f_read+0x20a>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801666a:	2301      	movs	r3, #1
 801666c:	462a      	mov	r2, r5
 801666e:	4659      	mov	r1, fp
 8016670:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016674:	f7fd f9bc 	bl	80139f0 <disk_read>
 8016678:	b9c0      	cbnz	r0, 80166ac <f_read+0x1d4>
			fp->sect = sect;
 801667a:	69a2      	ldr	r2, [r4, #24]
 801667c:	6225      	str	r5, [r4, #32]
 801667e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016682:	e7a4      	b.n	80165ce <f_read+0xf6>
					if (fp->cltbl) {
 8016684:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016686:	b329      	cbz	r1, 80166d4 <f_read+0x1fc>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016688:	6825      	ldr	r5, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801668a:	1d08      	adds	r0, r1, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801668c:	6849      	ldr	r1, [r1, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801668e:	896d      	ldrh	r5, [r5, #10]
 8016690:	fbb3 f3f5 	udiv	r3, r3, r5
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016694:	b929      	cbnz	r1, 80166a2 <f_read+0x1ca>
 8016696:	e7d9      	b.n	801664c <f_read+0x174>
		cl -= ncl; tbl++;		/* Next fragment */
 8016698:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801669a:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801669e:	2900      	cmp	r1, #0
 80166a0:	d0d4      	beq.n	801664c <f_read+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 80166a2:	4299      	cmp	r1, r3
 80166a4:	d9f8      	bls.n	8016698 <f_read+0x1c0>
	return cl + *tbl;	/* Return the cluster number */
 80166a6:	6840      	ldr	r0, [r0, #4]
 80166a8:	4418      	add	r0, r3
 80166aa:	e7c4      	b.n	8016636 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80166ac:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80166b0:	2301      	movs	r3, #1
}
 80166b2:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80166b4:	7563      	strb	r3, [r4, #21]
}
 80166b6:	b005      	add	sp, #20
 80166b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166bc:	1e71      	subs	r1, r6, #1
 80166be:	18d5      	adds	r5, r2, r3
			*d++ = *s++;
 80166c0:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 80166c4:	42aa      	cmp	r2, r5
			*d++ = *s++;
 80166c6:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 80166ca:	d1f9      	bne.n	80166c0 <f_read+0x1e8>
 80166cc:	e771      	b.n	80165b2 <f_read+0xda>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80166ce:	f04f 0907 	mov.w	r9, #7
 80166d2:	e715      	b.n	8016500 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80166d4:	69e1      	ldr	r1, [r4, #28]
 80166d6:	6820      	ldr	r0, [r4, #0]
 80166d8:	9203      	str	r2, [sp, #12]
 80166da:	f7fd fb13 	bl	8013d04 <get_fat.isra.0>
 80166de:	9a03      	ldr	r2, [sp, #12]
 80166e0:	e7a9      	b.n	8016636 <f_read+0x15e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80166e2:	2301      	movs	r3, #1
 80166e4:	4659      	mov	r1, fp
 80166e6:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80166ea:	f7fd f98f 	bl	8013a0c <disk_write>
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d1dc      	bne.n	80166ac <f_read+0x1d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 80166f2:	7d23      	ldrb	r3, [r4, #20]
 80166f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166f8:	7523      	strb	r3, [r4, #20]
 80166fa:	e7b6      	b.n	801666a <f_read+0x192>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80166fc:	6a22      	ldr	r2, [r4, #32]
 80166fe:	1b55      	subs	r5, r2, r5
 8016700:	429d      	cmp	r5, r3
 8016702:	f4bf af55 	bcs.w	80165b0 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8016706:	eb06 2045 	add.w	r0, r6, r5, lsl #9
 801670a:	4659      	mov	r1, fp
 801670c:	4602      	mov	r2, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801670e:	3004      	adds	r0, #4
 8016710:	4583      	cmp	fp, r0
 8016712:	d202      	bcs.n	801671a <f_read+0x242>
 8016714:	9802      	ldr	r0, [sp, #8]
 8016716:	4282      	cmp	r2, r0
 8016718:	d309      	bcc.n	801672e <f_read+0x256>
 801671a:	4659      	mov	r1, fp
 801671c:	f502 7500 	add.w	r5, r2, #512	; 0x200
			*d++ = *s++;
 8016720:	f851 0b04 	ldr.w	r0, [r1], #4
 8016724:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8016728:	42aa      	cmp	r2, r5
 801672a:	d1f9      	bne.n	8016720 <f_read+0x248>
 801672c:	e740      	b.n	80165b0 <f_read+0xd8>
 801672e:	3a01      	subs	r2, #1
 8016730:	f504 750c 	add.w	r5, r4, #560	; 0x230
			*d++ = *s++;
 8016734:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8016738:	428d      	cmp	r5, r1
			*d++ = *s++;
 801673a:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 801673e:	d1f9      	bne.n	8016734 <f_read+0x25c>
 8016740:	e736      	b.n	80165b0 <f_read+0xd8>
 8016742:	bf00      	nop

08016744 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016748:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 801674a:	2300      	movs	r3, #0
{
 801674c:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 801674e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016750:	b150      	cbz	r0, 8016768 <f_write+0x24>
 8016752:	6803      	ldr	r3, [r0, #0]
 8016754:	4604      	mov	r4, r0
 8016756:	b13b      	cbz	r3, 8016768 <f_write+0x24>
 8016758:	4616      	mov	r6, r2
 801675a:	781a      	ldrb	r2, [r3, #0]
 801675c:	b122      	cbz	r2, 8016768 <f_write+0x24>
 801675e:	460d      	mov	r5, r1
 8016760:	88da      	ldrh	r2, [r3, #6]
 8016762:	8881      	ldrh	r1, [r0, #4]
 8016764:	4291      	cmp	r1, r2
 8016766:	d005      	beq.n	8016774 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8016768:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 801676c:	4640      	mov	r0, r8
 801676e:	b005      	add	sp, #20
 8016770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016774:	7858      	ldrb	r0, [r3, #1]
 8016776:	f7fd f91d 	bl	80139b4 <disk_status>
 801677a:	07c1      	lsls	r1, r0, #31
 801677c:	d4f4      	bmi.n	8016768 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801677e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8016782:	f1b8 0f00 	cmp.w	r8, #0
 8016786:	d1f1      	bne.n	801676c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016788:	7d23      	ldrb	r3, [r4, #20]
 801678a:	079a      	lsls	r2, r3, #30
 801678c:	f140 80f5 	bpl.w	801697a <f_write+0x236>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016790:	69a2      	ldr	r2, [r4, #24]
 8016792:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016794:	bf28      	it	cs
 8016796:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8016798:	2e00      	cmp	r6, #0
 801679a:	d064      	beq.n	8016866 <f_write+0x122>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801679c:	46a2      	mov	sl, r4
 801679e:	f504 730c 	add.w	r3, r4, #560	; 0x230
 80167a2:	f85a 9b30 	ldr.w	r9, [sl], #48
 80167a6:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80167a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80167ac:	2900      	cmp	r1, #0
 80167ae:	d169      	bne.n	8016884 <f_write+0x140>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80167b0:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 80167b4:	0a53      	lsrs	r3, r2, #9
 80167b6:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 80167ba:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 80167be:	d110      	bne.n	80167e2 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80167c0:	2a00      	cmp	r2, #0
 80167c2:	f040 80a2 	bne.w	801690a <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80167c6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80167c8:	2800      	cmp	r0, #0
 80167ca:	f000 80e3 	beq.w	8016994 <f_write+0x250>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80167ce:	2801      	cmp	r0, #1
 80167d0:	f000 8093 	beq.w	80168fa <f_write+0x1b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80167d4:	1c43      	adds	r3, r0, #1
 80167d6:	f000 80bd 	beq.w	8016954 <f_write+0x210>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80167da:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80167dc:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80167de:	b903      	cbnz	r3, 80167e2 <f_write+0x9e>
 80167e0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80167e2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	f2c0 80a7 	blt.w	801693a <f_write+0x1f6>
	clst -= 2;
 80167ec:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80167ee:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 80167f2:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80167f4:	3b02      	subs	r3, #2
 80167f6:	429a      	cmp	r2, r3
 80167f8:	d27f      	bcs.n	80168fa <f_write+0x1b6>
	return clst * fs->csize + fs->database;
 80167fa:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80167fe:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8016802:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016806:	2a00      	cmp	r2, #0
 8016808:	d077      	beq.n	80168fa <f_write+0x1b6>
			if (cc) {						/* Write maximum contiguous sectors directly */
 801680a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 801680e:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016810:	d32d      	bcc.n	801686e <f_write+0x12a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016812:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016816:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016818:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801681a:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 801681e:	bf88      	it	hi
 8016820:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016824:	4629      	mov	r1, r5
 8016826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801682a:	f7fd f8ef 	bl	8013a0c <disk_write>
 801682e:	2800      	cmp	r0, #0
 8016830:	f040 8090 	bne.w	8016954 <f_write+0x210>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016834:	6a21      	ldr	r1, [r4, #32]
 8016836:	9a02      	ldr	r2, [sp, #8]
 8016838:	9b03      	ldr	r3, [sp, #12]
 801683a:	1a8a      	subs	r2, r1, r2
 801683c:	429a      	cmp	r2, r3
 801683e:	f0c0 80bd 	bcc.w	80169bc <f_write+0x278>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016842:	eb05 2143 	add.w	r1, r5, r3, lsl #9
 8016846:	025b      	lsls	r3, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016848:	69a2      	ldr	r2, [r4, #24]
 801684a:	460d      	mov	r5, r1
 801684c:	68e0      	ldr	r0, [r4, #12]
 801684e:	441a      	add	r2, r3
 8016850:	6839      	ldr	r1, [r7, #0]
 8016852:	4290      	cmp	r0, r2
 8016854:	4419      	add	r1, r3
 8016856:	61a2      	str	r2, [r4, #24]
 8016858:	bf38      	it	cc
 801685a:	4610      	movcc	r0, r2
	for ( ;  btw;							/* Repeat until all data written */
 801685c:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801685e:	60e0      	str	r0, [r4, #12]
 8016860:	6039      	str	r1, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8016862:	d1a1      	bne.n	80167a8 <f_write+0x64>
 8016864:	7d23      	ldrb	r3, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801686a:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 801686c:	e77e      	b.n	801676c <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801686e:	6a23      	ldr	r3, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 8016870:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016872:	4293      	cmp	r3, r2
 8016874:	d003      	beq.n	801687e <f_write+0x13a>
 8016876:	68e3      	ldr	r3, [r4, #12]
 8016878:	4299      	cmp	r1, r3
 801687a:	f0c0 8093 	bcc.w	80169a4 <f_write+0x260>
			fp->sect = sect;
 801687e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8016882:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016884:	f5c1 7300 	rsb	r3, r1, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016888:	1d08      	adds	r0, r1, #4
 801688a:	1d2a      	adds	r2, r5, #4
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801688c:	4451      	add	r1, sl
 801688e:	42b3      	cmp	r3, r6
 8016890:	4450      	add	r0, sl
 8016892:	bf28      	it	cs
 8016894:	4633      	movcs	r3, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016896:	4291      	cmp	r1, r2
 8016898:	bf38      	it	cc
 801689a:	4285      	cmpcc	r5, r0
 801689c:	f103 3eff 	add.w	lr, r3, #4294967295
 80168a0:	d360      	bcc.n	8016964 <f_write+0x220>
 80168a2:	f1be 0f07 	cmp.w	lr, #7
 80168a6:	d95d      	bls.n	8016964 <f_write+0x220>
 80168a8:	f023 0003 	bic.w	r0, r3, #3
 80168ac:	462a      	mov	r2, r5
 80168ae:	468c      	mov	ip, r1
 80168b0:	4428      	add	r0, r5
			*d++ = *s++;
 80168b2:	f852 bb04 	ldr.w	fp, [r2], #4
 80168b6:	4290      	cmp	r0, r2
 80168b8:	f84c bb04 	str.w	fp, [ip], #4
		} while (--cnt);
 80168bc:	d1f9      	bne.n	80168b2 <f_write+0x16e>
 80168be:	f023 0203 	bic.w	r2, r3, #3
 80168c2:	4293      	cmp	r3, r2
 80168c4:	eb01 0002 	add.w	r0, r1, r2
 80168c8:	eb05 0c02 	add.w	ip, r5, r2
 80168cc:	d053      	beq.n	8016976 <f_write+0x232>
			*d++ = *s++;
 80168ce:	f815 b002 	ldrb.w	fp, [r5, r2]
		} while (--cnt);
 80168d2:	ebbe 0e02 	subs.w	lr, lr, r2
			*d++ = *s++;
 80168d6:	f801 b002 	strb.w	fp, [r1, r2]
		} while (--cnt);
 80168da:	d051      	beq.n	8016980 <f_write+0x23c>
			*d++ = *s++;
 80168dc:	f89c 2001 	ldrb.w	r2, [ip, #1]
		} while (--cnt);
 80168e0:	f1be 0f01 	cmp.w	lr, #1
			*d++ = *s++;
 80168e4:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 80168e6:	d04b      	beq.n	8016980 <f_write+0x23c>
			*d++ = *s++;
 80168e8:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80168ec:	18e9      	adds	r1, r5, r3
 80168ee:	7082      	strb	r2, [r0, #2]
		fp->flag |= FA_DIRTY;
 80168f0:	7d22      	ldrb	r2, [r4, #20]
 80168f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80168f6:	7522      	strb	r2, [r4, #20]
 80168f8:	e7a6      	b.n	8016848 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80168fa:	f04f 0802 	mov.w	r8, #2
}
 80168fe:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016900:	f884 8015 	strb.w	r8, [r4, #21]
}
 8016904:	b005      	add	sp, #20
 8016906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 801690a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801690c:	2a00      	cmp	r2, #0
 801690e:	d039      	beq.n	8016984 <f_write+0x240>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016910:	6820      	ldr	r0, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016912:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016914:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016916:	8940      	ldrh	r0, [r0, #10]
 8016918:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 801691c:	b92a      	cbnz	r2, 801692a <f_write+0x1e6>
 801691e:	e7a1      	b.n	8016864 <f_write+0x120>
		cl -= ncl; tbl++;		/* Next fragment */
 8016920:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016922:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016926:	2a00      	cmp	r2, #0
 8016928:	d09c      	beq.n	8016864 <f_write+0x120>
		if (cl < ncl) break;	/* In this fragment? */
 801692a:	4293      	cmp	r3, r2
 801692c:	d2f8      	bcs.n	8016920 <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 801692e:	6848      	ldr	r0, [r1, #4]
 8016930:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016932:	2800      	cmp	r0, #0
 8016934:	f47f af4b 	bne.w	80167ce <f_write+0x8a>
 8016938:	e794      	b.n	8016864 <f_write+0x120>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801693a:	2301      	movs	r3, #1
 801693c:	6a22      	ldr	r2, [r4, #32]
 801693e:	4651      	mov	r1, sl
 8016940:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016944:	f7fd f862 	bl	8013a0c <disk_write>
 8016948:	b920      	cbnz	r0, 8016954 <f_write+0x210>
				fp->flag &= (BYTE)~FA_DIRTY;
 801694a:	7d23      	ldrb	r3, [r4, #20]
 801694c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016950:	7523      	strb	r3, [r4, #20]
 8016952:	e74b      	b.n	80167ec <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016954:	f04f 0801 	mov.w	r8, #1
}
 8016958:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801695a:	f884 8015 	strb.w	r8, [r4, #21]
}
 801695e:	b005      	add	sp, #20
 8016960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016964:	1e4a      	subs	r2, r1, #1
 8016966:	18e9      	adds	r1, r5, r3
			*d++ = *s++;
 8016968:	f815 0b01 	ldrb.w	r0, [r5], #1
		} while (--cnt);
 801696c:	428d      	cmp	r5, r1
			*d++ = *s++;
 801696e:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8016972:	d1f9      	bne.n	8016968 <f_write+0x224>
 8016974:	e7bc      	b.n	80168f0 <f_write+0x1ac>
 8016976:	4661      	mov	r1, ip
 8016978:	e7ba      	b.n	80168f0 <f_write+0x1ac>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801697a:	f04f 0807 	mov.w	r8, #7
 801697e:	e6f5      	b.n	801676c <f_write+0x28>
 8016980:	18e9      	adds	r1, r5, r3
 8016982:	e7b5      	b.n	80168f0 <f_write+0x1ac>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016984:	69e1      	ldr	r1, [r4, #28]
 8016986:	4620      	mov	r0, r4
 8016988:	f7fd fd4e 	bl	8014428 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801698c:	2800      	cmp	r0, #0
 801698e:	f47f af1e 	bne.w	80167ce <f_write+0x8a>
 8016992:	e767      	b.n	8016864 <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016994:	4659      	mov	r1, fp
 8016996:	4620      	mov	r0, r4
 8016998:	f7fd fd46 	bl	8014428 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801699c:	2800      	cmp	r0, #0
 801699e:	f47f af16 	bne.w	80167ce <f_write+0x8a>
 80169a2:	e75f      	b.n	8016864 <f_write+0x120>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80169a4:	2301      	movs	r3, #1
 80169a6:	4651      	mov	r1, sl
 80169a8:	f899 0001 	ldrb.w	r0, [r9, #1]
 80169ac:	9202      	str	r2, [sp, #8]
 80169ae:	f7fd f81f 	bl	80139f0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80169b2:	2800      	cmp	r0, #0
 80169b4:	d1ce      	bne.n	8016954 <f_write+0x210>
 80169b6:	69a1      	ldr	r1, [r4, #24]
 80169b8:	9a02      	ldr	r2, [sp, #8]
 80169ba:	e760      	b.n	801687e <f_write+0x13a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80169bc:	eb05 2142 	add.w	r1, r5, r2, lsl #9
 80169c0:	460a      	mov	r2, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80169c2:	3104      	adds	r1, #4
 80169c4:	458a      	cmp	sl, r1
 80169c6:	d203      	bcs.n	80169d0 <f_write+0x28c>
 80169c8:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80169cc:	428a      	cmp	r2, r1
 80169ce:	d30d      	bcc.n	80169ec <f_write+0x2a8>
 80169d0:	4651      	mov	r1, sl
 80169d2:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 80169d6:	f852 0b04 	ldr.w	r0, [r2], #4
 80169da:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 80169de:	4561      	cmp	r1, ip
 80169e0:	d1f9      	bne.n	80169d6 <f_write+0x292>
					fp->flag &= (BYTE)~FA_DIRTY;
 80169e2:	7d22      	ldrb	r2, [r4, #20]
 80169e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80169e8:	7522      	strb	r2, [r4, #20]
 80169ea:	e72a      	b.n	8016842 <f_write+0xfe>
 80169ec:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 80169f0:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 80169f4:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 80169f8:	4594      	cmp	ip, r2
			*d++ = *s++;
 80169fa:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 80169fe:	d1f9      	bne.n	80169f4 <f_write+0x2b0>
 8016a00:	e7ef      	b.n	80169e2 <f_write+0x29e>
 8016a02:	bf00      	nop

08016a04 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016a04:	b158      	cbz	r0, 8016a1e <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016a08:	6803      	ldr	r3, [r0, #0]
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	b12b      	cbz	r3, 8016a1a <f_close+0x16>
 8016a0e:	781a      	ldrb	r2, [r3, #0]
 8016a10:	b11a      	cbz	r2, 8016a1a <f_close+0x16>
 8016a12:	8881      	ldrh	r1, [r0, #4]
 8016a14:	88da      	ldrh	r2, [r3, #6]
 8016a16:	4291      	cmp	r1, r2
 8016a18:	d003      	beq.n	8016a22 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8016a1a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8016a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8016a1e:	2009      	movs	r0, #9
}
 8016a20:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016a22:	7858      	ldrb	r0, [r3, #1]
 8016a24:	f7fc ffc6 	bl	80139b4 <disk_status>
 8016a28:	07c1      	lsls	r1, r0, #31
 8016a2a:	d4f6      	bmi.n	8016a1a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016a2c:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016a2e:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016a30:	065a      	lsls	r2, r3, #25
 8016a32:	d53d      	bpl.n	8016ab0 <f_close+0xac>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016a34:	061b      	lsls	r3, r3, #24
 8016a36:	d45e      	bmi.n	8016af6 <f_close+0xf2>
			tm = GET_FATTIME();				/* Modified time */
 8016a38:	f7fd f804 	bl	8013a44 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8016a3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016a3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8016a40:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016a42:	4299      	cmp	r1, r3
 8016a44:	d004      	beq.n	8016a50 <f_close+0x4c>
 8016a46:	4628      	mov	r0, r5
 8016a48:	f7fd f884 	bl	8013b54 <move_window.part.0>
				if (res == FR_OK) {
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	d1e5      	bne.n	8016a1c <f_close+0x18>
					dir = fp->dir_ptr;
 8016a50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016a52:	7acb      	ldrb	r3, [r1, #11]
 8016a54:	f043 0320 	orr.w	r3, r3, #32
 8016a58:	72cb      	strb	r3, [r1, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016a5a:	68a3      	ldr	r3, [r4, #8]
 8016a5c:	6822      	ldr	r2, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a5e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016a62:	768b      	strb	r3, [r1, #26]
	*ptr++ = (BYTE)val;
 8016a64:	76c8      	strb	r0, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8016a66:	7812      	ldrb	r2, [r2, #0]
 8016a68:	2a03      	cmp	r2, #3
 8016a6a:	d103      	bne.n	8016a74 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016a6c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016a6e:	0a1a      	lsrs	r2, r3, #8
 8016a70:	750b      	strb	r3, [r1, #20]
	*ptr++ = (BYTE)val;
 8016a72:	754a      	strb	r2, [r1, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016a74:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a76:	0a37      	lsrs	r7, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8016a78:	0c32      	lsrs	r2, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016a7a:	758e      	strb	r6, [r1, #22]
 8016a7c:	0a18      	lsrs	r0, r3, #8
 8016a7e:	770b      	strb	r3, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a80:	75cf      	strb	r7, [r1, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a82:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8016a84:	7748      	strb	r0, [r1, #29]
					fs->wflag = 1;
 8016a86:	2701      	movs	r7, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016a88:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016a8a:	760a      	strb	r2, [r1, #24]
 8016a8c:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8016a8e:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8016a90:	7788      	strb	r0, [r1, #30]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016a92:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 8016a94:	77cb      	strb	r3, [r1, #31]
 8016a96:	764e      	strb	r6, [r1, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a98:	748a      	strb	r2, [r1, #18]
	*ptr++ = (BYTE)val;
 8016a9a:	74ca      	strb	r2, [r1, #19]
					fs->wflag = 1;
 8016a9c:	70ef      	strb	r7, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016a9e:	f7fd fc51 	bl	8014344 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016aa2:	7d23      	ldrb	r3, [r4, #20]
 8016aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016aa8:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8016aaa:	2800      	cmp	r0, #0
 8016aac:	d1b6      	bne.n	8016a1c <f_close+0x18>
 8016aae:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016ab0:	2d00      	cmp	r5, #0
 8016ab2:	d0b2      	beq.n	8016a1a <f_close+0x16>
 8016ab4:	782b      	ldrb	r3, [r5, #0]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d0af      	beq.n	8016a1a <f_close+0x16>
 8016aba:	88a2      	ldrh	r2, [r4, #4]
 8016abc:	88eb      	ldrh	r3, [r5, #6]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d1ab      	bne.n	8016a1a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016ac2:	7868      	ldrb	r0, [r5, #1]
 8016ac4:	f7fc ff76 	bl	80139b4 <disk_status>
 8016ac8:	f010 0001 	ands.w	r0, r0, #1
 8016acc:	d1a5      	bne.n	8016a1a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016ace:	6923      	ldr	r3, [r4, #16]
 8016ad0:	3b01      	subs	r3, #1
 8016ad2:	2b03      	cmp	r3, #3
 8016ad4:	d820      	bhi.n	8016b18 <f_close+0x114>
		n = Files[i].ctr;
 8016ad6:	4912      	ldr	r1, [pc, #72]	; (8016b20 <f_close+0x11c>)
 8016ad8:	011d      	lsls	r5, r3, #4
 8016ada:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8016ade:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016ae0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8016ae4:	d014      	beq.n	8016b10 <f_close+0x10c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8016ae6:	b1a2      	cbz	r2, 8016b12 <f_close+0x10e>
 8016ae8:	3a01      	subs	r2, #1
 8016aea:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8016aec:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016aee:	b182      	cbz	r2, 8016b12 <f_close+0x10e>
				fp->obj.fs = 0;			/* Invalidate file object */
 8016af0:	2300      	movs	r3, #0
 8016af2:	6023      	str	r3, [r4, #0]
}
 8016af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016af6:	2301      	movs	r3, #1
 8016af8:	6a22      	ldr	r2, [r4, #32]
 8016afa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016afe:	7868      	ldrb	r0, [r5, #1]
 8016b00:	f7fc ff84 	bl	8013a0c <disk_write>
 8016b04:	b950      	cbnz	r0, 8016b1c <f_close+0x118>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016b06:	7d23      	ldrb	r3, [r4, #20]
 8016b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b0c:	7523      	strb	r3, [r4, #20]
 8016b0e:	e793      	b.n	8016a38 <f_close+0x34>
		Files[i].ctr = n;
 8016b10:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016b12:	2300      	movs	r3, #0
 8016b14:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8016b16:	e7eb      	b.n	8016af0 <f_close+0xec>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016b18:	2002      	movs	r0, #2
}
 8016b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016b1c:	2001      	movs	r0, #1
}
 8016b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b20:	24005208 	.word	0x24005208

08016b24 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8016b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b28:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016b2a:	b148      	cbz	r0, 8016b40 <f_lseek+0x1c>
 8016b2c:	6803      	ldr	r3, [r0, #0]
 8016b2e:	4604      	mov	r4, r0
 8016b30:	b133      	cbz	r3, 8016b40 <f_lseek+0x1c>
 8016b32:	781a      	ldrb	r2, [r3, #0]
 8016b34:	b122      	cbz	r2, 8016b40 <f_lseek+0x1c>
 8016b36:	460d      	mov	r5, r1
 8016b38:	88da      	ldrh	r2, [r3, #6]
 8016b3a:	8881      	ldrh	r1, [r0, #4]
 8016b3c:	4291      	cmp	r1, r2
 8016b3e:	d004      	beq.n	8016b4a <f_lseek+0x26>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8016b40:	2609      	movs	r6, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8016b42:	4630      	mov	r0, r6
 8016b44:	b005      	add	sp, #20
 8016b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016b4a:	7858      	ldrb	r0, [r3, #1]
 8016b4c:	f7fc ff32 	bl	80139b4 <disk_status>
 8016b50:	07c3      	lsls	r3, r0, #31
 8016b52:	d4f5      	bmi.n	8016b40 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8016b54:	7d66      	ldrb	r6, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016b56:	f8d4 a000 	ldr.w	sl, [r4]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8016b5a:	2e00      	cmp	r6, #0
 8016b5c:	d1f1      	bne.n	8016b42 <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 8016b5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016b60:	2800      	cmp	r0, #0
 8016b62:	d049      	beq.n	8016bf8 <f_lseek+0xd4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8016b64:	1c6f      	adds	r7, r5, #1
 8016b66:	f000 8097 	beq.w	8016c98 <f_lseek+0x174>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8016b6a:	68e1      	ldr	r1, [r4, #12]
 8016b6c:	428d      	cmp	r5, r1
 8016b6e:	bf28      	it	cs
 8016b70:	460d      	movcs	r5, r1
			fp->fptr = ofs;				/* Set file pointer */
 8016b72:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8016b74:	2d00      	cmp	r5, #0
 8016b76:	d0e4      	beq.n	8016b42 <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8016b78:	1e69      	subs	r1, r5, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016b7a:	f8ba 700a 	ldrh.w	r7, [sl, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016b7e:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016b80:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016b82:	0a49      	lsrs	r1, r1, #9
 8016b84:	fbb1 f0f7 	udiv	r0, r1, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016b88:	b933      	cbnz	r3, 8016b98 <f_lseek+0x74>
 8016b8a:	e11e      	b.n	8016dca <f_lseek+0x2a6>
		cl -= ncl; tbl++;		/* Next fragment */
 8016b8c:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016b8e:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	f000 8119 	beq.w	8016dca <f_lseek+0x2a6>
		if (cl < ncl) break;	/* In this fragment? */
 8016b98:	4298      	cmp	r0, r3
 8016b9a:	d2f7      	bcs.n	8016b8c <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 8016b9c:	6853      	ldr	r3, [r2, #4]
 8016b9e:	4403      	add	r3, r0
 8016ba0:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ba2:	f8da 0018 	ldr.w	r0, [sl, #24]
				fp->clust = clmt_clust(fp, ofs - 1);
 8016ba6:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ba8:	1e83      	subs	r3, r0, #2
 8016baa:	4293      	cmp	r3, r2
 8016bac:	f240 80cf 	bls.w	8016d4e <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8016bb0:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8016bb4:	fb02 3307 	mla	r3, r2, r7, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	f000 80c8 	beq.w	8016d4e <f_lseek+0x22a>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8016bbe:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8016bc2:	2d00      	cmp	r5, #0
 8016bc4:	d0bd      	beq.n	8016b42 <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8016bc6:	3f01      	subs	r7, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8016bc8:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8016bca:	4039      	ands	r1, r7
 8016bcc:	18cf      	adds	r7, r1, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8016bce:	42ba      	cmp	r2, r7
 8016bd0:	d0b7      	beq.n	8016b42 <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8016bd2:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016bd6:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	f2c0 8142 	blt.w	8016e64 <f_lseek+0x340>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016be0:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016be4:	2301      	movs	r3, #1
 8016be6:	463a      	mov	r2, r7
 8016be8:	f7fc ff02 	bl	80139f0 <disk_read>
 8016bec:	4606      	mov	r6, r0
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	f040 80aa 	bne.w	8016d48 <f_lseek+0x224>
			fp->sect = nsect;
 8016bf4:	6227      	str	r7, [r4, #32]
 8016bf6:	e7a4      	b.n	8016b42 <f_lseek+0x1e>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8016bf8:	68e3      	ldr	r3, [r4, #12]
 8016bfa:	42ab      	cmp	r3, r5
 8016bfc:	d204      	bcs.n	8016c08 <f_lseek+0xe4>
 8016bfe:	7d22      	ldrb	r2, [r4, #20]
 8016c00:	f012 0f02 	tst.w	r2, #2
 8016c04:	bf08      	it	eq
 8016c06:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8016c08:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8016c0a:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8016c0c:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8016c0e:	2d00      	cmp	r5, #0
 8016c10:	d097      	beq.n	8016b42 <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8016c12:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 8016c16:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d035      	beq.n	8016c8a <f_lseek+0x166>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8016c1e:	3b01      	subs	r3, #1
 8016c20:	1e6a      	subs	r2, r5, #1
 8016c22:	fbb3 f1f8 	udiv	r1, r3, r8
 8016c26:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 8016c2a:	428a      	cmp	r2, r1
 8016c2c:	d32d      	bcc.n	8016c8a <f_lseek+0x166>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016c2e:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 8016c32:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016c34:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8016c36:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016c38:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 8016c3a:	2f00      	cmp	r7, #0
 8016c3c:	f000 80ec 	beq.w	8016e18 <f_lseek+0x2f4>
				while (ofs > bcs) {						/* Cluster following loop */
 8016c40:	4545      	cmp	r5, r8
 8016c42:	f240 80d3 	bls.w	8016dec <f_lseek+0x2c8>
 8016c46:	4639      	mov	r1, r7
 8016c48:	e012      	b.n	8016c70 <f_lseek+0x14c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8016c4a:	f7fd fbed 	bl	8014428 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8016c4e:	4601      	mov	r1, r0
 8016c50:	2800      	cmp	r0, #0
 8016c52:	f000 8126 	beq.w	8016ea2 <f_lseek+0x37e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016c56:	1c4b      	adds	r3, r1, #1
 8016c58:	d076      	beq.n	8016d48 <f_lseek+0x224>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8016c5a:	2901      	cmp	r1, #1
 8016c5c:	d977      	bls.n	8016d4e <f_lseek+0x22a>
 8016c5e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8016c62:	428b      	cmp	r3, r1
 8016c64:	d973      	bls.n	8016d4e <f_lseek+0x22a>
				while (ofs > bcs) {						/* Cluster following loop */
 8016c66:	45a8      	cmp	r8, r5
					fp->clust = clst;
 8016c68:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8016c6a:	f080 80bd 	bcs.w	8016de8 <f_lseek+0x2c4>
 8016c6e:	69a3      	ldr	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016c70:	7d22      	ldrb	r2, [r4, #20]
					ofs -= bcs; fp->fptr += bcs;
 8016c72:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8016c74:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 8016c76:	eba5 0508 	sub.w	r5, r5, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016c7a:	0792      	lsls	r2, r2, #30
					ofs -= bcs; fp->fptr += bcs;
 8016c7c:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016c7e:	d4e4      	bmi.n	8016c4a <f_lseek+0x126>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8016c80:	6820      	ldr	r0, [r4, #0]
 8016c82:	f7fd f83f 	bl	8013d04 <get_fat.isra.0>
 8016c86:	4601      	mov	r1, r0
 8016c88:	e7e5      	b.n	8016c56 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8016c8a:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8016c8c:	2f00      	cmp	r7, #0
 8016c8e:	f000 809f 	beq.w	8016dd0 <f_lseek+0x2ac>
 8016c92:	2300      	movs	r3, #0
				fp->clust = clst;
 8016c94:	61e7      	str	r7, [r4, #28]
 8016c96:	e7d0      	b.n	8016c3a <f_lseek+0x116>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016c98:	4683      	mov	fp, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8016c9a:	68a3      	ldr	r3, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016c9c:	f85b 2b04 	ldr.w	r2, [fp], #4
 8016ca0:	9200      	str	r2, [sp, #0]
			if (cl) {
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f000 8088 	beq.w	8016db8 <f_lseek+0x294>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016ca8:	2202      	movs	r2, #2
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016caa:	4657      	mov	r7, sl
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016cac:	4699      	mov	r9, r3
 8016cae:	9603      	str	r6, [sp, #12]
 8016cb0:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8016cb4:	4692      	mov	sl, r2
 8016cb6:	46a3      	mov	fp, r4
 8016cb8:	464d      	mov	r5, r9
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8016cba:	2400      	movs	r4, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016cbc:	2d01      	cmp	r5, #1
						pcl = cl; ncl++;
 8016cbe:	f104 0401 	add.w	r4, r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016cc2:	d902      	bls.n	8016cca <f_lseek+0x1a6>
 8016cc4:	69bb      	ldr	r3, [r7, #24]
 8016cc6:	429d      	cmp	r5, r3
 8016cc8:	d303      	bcc.n	8016cd2 <f_lseek+0x1ae>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8016cca:	2602      	movs	r6, #2
 8016ccc:	f88b 6015 	strb.w	r6, [fp, #21]
 8016cd0:	e737      	b.n	8016b42 <f_lseek+0x1e>
		switch (fs->fs_type) {
 8016cd2:	783b      	ldrb	r3, [r7, #0]
 8016cd4:	2b02      	cmp	r3, #2
 8016cd6:	d02c      	beq.n	8016d32 <f_lseek+0x20e>
 8016cd8:	2b03      	cmp	r3, #3
 8016cda:	d03e      	beq.n	8016d5a <f_lseek+0x236>
 8016cdc:	2b01      	cmp	r3, #1
 8016cde:	d1f4      	bne.n	8016cca <f_lseek+0x1a6>
			bc = (UINT)clst; bc += bc / 2;
 8016ce0:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016ce8:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016cec:	4291      	cmp	r1, r2
 8016cee:	d005      	beq.n	8016cfc <f_lseek+0x1d8>
 8016cf0:	4638      	mov	r0, r7
 8016cf2:	f7fc ff2f 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cf6:	bb30      	cbnz	r0, 8016d46 <f_lseek+0x222>
 8016cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8016cfc:	f3c6 0008 	ubfx	r0, r6, #0, #9
 8016d00:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d02:	eb03 2156 	add.w	r1, r3, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8016d06:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016d08:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8016d0a:	f890 8034 	ldrb.w	r8, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016d0e:	d003      	beq.n	8016d18 <f_lseek+0x1f4>
 8016d10:	4638      	mov	r0, r7
 8016d12:	f7fc ff1f 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d16:	b9b0      	cbnz	r0, 8016d46 <f_lseek+0x222>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016d18:	f3c6 0608 	ubfx	r6, r6, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016d1c:	07e8      	lsls	r0, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8016d1e:	4437      	add	r7, r6
 8016d20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016d24:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016d28:	f140 80ad 	bpl.w	8016e86 <f_lseek+0x362>
 8016d2c:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8016d30:	e02d      	b.n	8016d8e <f_lseek+0x26a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d36:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016d3a:	4299      	cmp	r1, r3
 8016d3c:	d031      	beq.n	8016da2 <f_lseek+0x27e>
 8016d3e:	4638      	mov	r0, r7
 8016d40:	f7fc ff08 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d44:	b368      	cbz	r0, 8016da2 <f_lseek+0x27e>
 8016d46:	465c      	mov	r4, fp
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016d48:	2601      	movs	r6, #1
 8016d4a:	7566      	strb	r6, [r4, #21]
 8016d4c:	e6f9      	b.n	8016b42 <f_lseek+0x1e>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8016d4e:	2602      	movs	r6, #2
}
 8016d50:	4630      	mov	r0, r6
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8016d52:	7566      	strb	r6, [r4, #21]
}
 8016d54:	b005      	add	sp, #20
 8016d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d5e:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016d62:	4299      	cmp	r1, r3
 8016d64:	d004      	beq.n	8016d70 <f_lseek+0x24c>
 8016d66:	4638      	mov	r0, r7
 8016d68:	f7fc fef4 	bl	8013b54 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	d1ea      	bne.n	8016d46 <f_lseek+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016d70:	00ab      	lsls	r3, r5, #2
 8016d72:	3734      	adds	r7, #52	; 0x34
 8016d74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016d78:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8016d7a:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 8016d7e:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8016d80:	7853      	ldrb	r3, [r2, #1]
 8016d82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8016d86:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016d8a:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8016d8e:	f1b8 0f01 	cmp.w	r8, #1
 8016d92:	d99a      	bls.n	8016cca <f_lseek+0x1a6>
					} while (cl == pcl + 1);
 8016d94:	3501      	adds	r5, #1
 8016d96:	4545      	cmp	r5, r8
 8016d98:	d150      	bne.n	8016e3c <f_lseek+0x318>
 8016d9a:	4645      	mov	r5, r8
 8016d9c:	f8db 7000 	ldr.w	r7, [fp]
 8016da0:	e78c      	b.n	8016cbc <f_lseek+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016da2:	006b      	lsls	r3, r5, #1
 8016da4:	3734      	adds	r7, #52	; 0x34
 8016da6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016daa:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8016dac:	f817 8003 	ldrb.w	r8, [r7, r3]
 8016db0:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016db2:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 8016db6:	e7ea      	b.n	8016d8e <f_lseek+0x26a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016db8:	2202      	movs	r2, #2
			if (ulen <= tlen) {
 8016dba:	9b00      	ldr	r3, [sp, #0]
			*fp->cltbl = ulen;	/* Number of items used */
 8016dbc:	6002      	str	r2, [r0, #0]
			if (ulen <= tlen) {
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d85f      	bhi.n	8016e82 <f_lseek+0x35e>
				*tbl = 0;		/* Terminate table */
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	f8cb 3000 	str.w	r3, [fp]
 8016dc8:	e6bb      	b.n	8016b42 <f_lseek+0x1e>
 8016dca:	f06f 0201 	mvn.w	r2, #1
 8016dce:	e6e8      	b.n	8016ba2 <f_lseek+0x7e>
					clst = create_chain(&fp->obj, 0);
 8016dd0:	4639      	mov	r1, r7
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	f7fd fb28 	bl	8014428 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016dd8:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8016dda:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016ddc:	d0b7      	beq.n	8016d4e <f_lseek+0x22a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016dde:	1c41      	adds	r1, r0, #1
 8016de0:	d0b2      	beq.n	8016d48 <f_lseek+0x224>
					fp->obj.sclust = clst;
 8016de2:	69a3      	ldr	r3, [r4, #24]
 8016de4:	60a0      	str	r0, [r4, #8]
 8016de6:	e755      	b.n	8016c94 <f_lseek+0x170>
 8016de8:	460f      	mov	r7, r1
 8016dea:	69a3      	ldr	r3, [r4, #24]
				fp->fptr += ofs;
 8016dec:	442b      	add	r3, r5
				if (ofs % SS(fs)) {
 8016dee:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 8016df2:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8016df4:	2a00      	cmp	r2, #0
 8016df6:	d057      	beq.n	8016ea8 <f_lseek+0x384>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016df8:	f8da 2018 	ldr.w	r2, [sl, #24]
	clst -= 2;
 8016dfc:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016dfe:	3a02      	subs	r2, #2
 8016e00:	4291      	cmp	r1, r2
 8016e02:	d2a4      	bcs.n	8016d4e <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8016e04:	f8ba 700a 	ldrh.w	r7, [sl, #10]
 8016e08:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8016e0c:	fb01 2707 	mla	r7, r1, r7, r2
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8016e10:	2f00      	cmp	r7, #0
 8016e12:	d09c      	beq.n	8016d4e <f_lseek+0x22a>
					nsect += (DWORD)(ofs / SS(fs));
 8016e14:	eb07 2755 	add.w	r7, r7, r5, lsr #9
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8016e18:	68e2      	ldr	r2, [r4, #12]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d204      	bcs.n	8016e28 <f_lseek+0x304>
			fp->flag |= FA_MODIFIED;
 8016e1e:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8016e20:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8016e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016e26:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8016e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f43f ae88 	beq.w	8016b42 <f_lseek+0x1e>
 8016e32:	6a22      	ldr	r2, [r4, #32]
 8016e34:	42ba      	cmp	r2, r7
 8016e36:	f47f aecc 	bne.w	8016bd2 <f_lseek+0xae>
 8016e3a:	e682      	b.n	8016b42 <f_lseek+0x1e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8016e3c:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8016e40:	9b00      	ldr	r3, [sp, #0]
 8016e42:	4553      	cmp	r3, sl
 8016e44:	d322      	bcc.n	8016e8c <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 8016e46:	9b01      	ldr	r3, [sp, #4]
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f840 4b08 	str.w	r4, [r0], #8
 8016e4e:	f8c3 9004 	str.w	r9, [r3, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8016e52:	9b02      	ldr	r3, [sp, #8]
 8016e54:	699a      	ldr	r2, [r3, #24]
 8016e56:	4590      	cmp	r8, r2
 8016e58:	d228      	bcs.n	8016eac <f_lseek+0x388>
						*tbl++ = ncl; *tbl++ = tcl;
 8016e5a:	9001      	str	r0, [sp, #4]
{
 8016e5c:	46c1      	mov	r9, r8
 8016e5e:	f8db 7000 	ldr.w	r7, [fp]
 8016e62:	e729      	b.n	8016cb8 <f_lseek+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e64:	2301      	movs	r3, #1
 8016e66:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016e6a:	9100      	str	r1, [sp, #0]
 8016e6c:	f7fc fdce 	bl	8013a0c <disk_write>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	f47f af69 	bne.w	8016d48 <f_lseek+0x224>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016e76:	7d23      	ldrb	r3, [r4, #20]
 8016e78:	9900      	ldr	r1, [sp, #0]
 8016e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e7e:	7523      	strb	r3, [r4, #20]
 8016e80:	e6ae      	b.n	8016be0 <f_lseek+0xbc>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8016e82:	2611      	movs	r6, #17
 8016e84:	e65d      	b.n	8016b42 <f_lseek+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016e86:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8016e8a:	e780      	b.n	8016d8e <f_lseek+0x26a>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8016e8c:	9b02      	ldr	r3, [sp, #8]
 8016e8e:	699a      	ldr	r2, [r3, #24]
 8016e90:	4542      	cmp	r2, r8
 8016e92:	d8e3      	bhi.n	8016e5c <f_lseek+0x338>
 8016e94:	465c      	mov	r4, fp
 8016e96:	4652      	mov	r2, sl
 8016e98:	9e03      	ldr	r6, [sp, #12]
 8016e9a:	f8dd b004 	ldr.w	fp, [sp, #4]
 8016e9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016ea0:	e78b      	b.n	8016dba <f_lseek+0x296>
 8016ea2:	4607      	mov	r7, r0
 8016ea4:	69a3      	ldr	r3, [r4, #24]
 8016ea6:	e7b7      	b.n	8016e18 <f_lseek+0x2f4>
		fp->fptr = nsect = 0;
 8016ea8:	4617      	mov	r7, r2
 8016eaa:	e7b5      	b.n	8016e18 <f_lseek+0x2f4>
 8016eac:	465c      	mov	r4, fp
 8016eae:	4652      	mov	r2, sl
 8016eb0:	9e03      	ldr	r6, [sp, #12]
						*tbl++ = ncl; *tbl++ = tcl;
 8016eb2:	4683      	mov	fp, r0
 8016eb4:	e7f3      	b.n	8016e9e <f_lseek+0x37a>
 8016eb6:	bf00      	nop

08016eb8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ebc:	b085      	sub	sp, #20
 8016ebe:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d04b      	beq.n	8016f5c <f_opendir+0xa4>

	/* Get logical drive */
	obj = &dp->obj;
 8016ec4:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	a903      	add	r1, sp, #12
 8016eca:	a801      	add	r0, sp, #4
 8016ecc:	f7fd fbda 	bl	8014684 <find_volume>
	if (res == FR_OK) {
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	b128      	cbz	r0, 8016ee0 <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8016ed8:	4620      	mov	r0, r4
 8016eda:	b005      	add	sp, #20
 8016edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 8016ee0:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8016ee2:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 8016ee6:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 8016ee8:	f000 fe24 	bl	8017b34 <ff_memalloc>
 8016eec:	4606      	mov	r6, r0
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d039      	beq.n	8016f66 <f_opendir+0xae>
 8016ef2:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8016ef8:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016efa:	f7fe f843 	bl	8014f84 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8016efe:	4604      	mov	r4, r0
 8016f00:	bb28      	cbnz	r0, 8016f4e <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016f02:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	db34      	blt.n	8016f74 <f_opendir+0xbc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016f0a:	79ab      	ldrb	r3, [r5, #6]
 8016f0c:	06db      	lsls	r3, r3, #27
 8016f0e:	d52c      	bpl.n	8016f6a <f_opendir+0xb2>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016f10:	9a03      	ldr	r2, [sp, #12]
 8016f12:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 8016f14:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 8016f16:	7ecc      	ldrb	r4, [r1, #27]
 8016f18:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8016f1a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8016f1c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8016f20:	d105      	bne.n	8016f2e <f_opendir+0x76>
	rv = rv << 8 | ptr[0];
 8016f22:	7d48      	ldrb	r0, [r1, #21]
 8016f24:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016f26:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8016f2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016f2e:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 8016f30:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016f32:	2100      	movs	r1, #0
 8016f34:	4628      	mov	r0, r5
				obj->id = fs->id;
 8016f36:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016f38:	f7fd fda8 	bl	8014a8c <dir_sdi>
				if (res == FR_OK) {
 8016f3c:	4604      	mov	r4, r0
 8016f3e:	b930      	cbnz	r0, 8016f4e <f_opendir+0x96>
					if (obj->sclust) {
 8016f40:	68aa      	ldr	r2, [r5, #8]
 8016f42:	b9ca      	cbnz	r2, 8016f78 <f_opendir+0xc0>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8016f44:	6128      	str	r0, [r5, #16]
		FREE_NAMBUF();
 8016f46:	4630      	mov	r0, r6
 8016f48:	f000 fdf6 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016f4c:	e7c4      	b.n	8016ed8 <f_opendir+0x20>
		FREE_NAMBUF();
 8016f4e:	4630      	mov	r0, r6
 8016f50:	f000 fdf2 	bl	8017b38 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016f54:	2c04      	cmp	r4, #4
 8016f56:	bf08      	it	eq
 8016f58:	2405      	moveq	r4, #5
 8016f5a:	e7bb      	b.n	8016ed4 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8016f5c:	2409      	movs	r4, #9
}
 8016f5e:	4620      	mov	r0, r4
 8016f60:	b005      	add	sp, #20
 8016f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_NAMBUF(fs);
 8016f66:	2411      	movs	r4, #17
 8016f68:	e7b6      	b.n	8016ed8 <f_opendir+0x20>
		FREE_NAMBUF();
 8016f6a:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 8016f6c:	2405      	movs	r4, #5
		FREE_NAMBUF();
 8016f6e:	f000 fde3 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016f72:	e7af      	b.n	8016ed4 <f_opendir+0x1c>
 8016f74:	9a03      	ldr	r2, [sp, #12]
 8016f76:	e7db      	b.n	8016f30 <f_opendir+0x78>
		if (Files[i].fs == dp->obj.fs &&
 8016f78:	4b38      	ldr	r3, [pc, #224]	; (801705c <f_opendir+0x1a4>)
 8016f7a:	6829      	ldr	r1, [r5, #0]
 8016f7c:	f8d3 9000 	ldr.w	r9, [r3]
 8016f80:	4589      	cmp	r9, r1
 8016f82:	d04a      	beq.n	801701a <f_opendir+0x162>
 8016f84:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8016f88:	4571      	cmp	r1, lr
 8016f8a:	d03c      	beq.n	8017006 <f_opendir+0x14e>
 8016f8c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8016f90:	4541      	cmp	r1, r8
 8016f92:	d02e      	beq.n	8016ff2 <f_opendir+0x13a>
 8016f94:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8016f96:	428f      	cmp	r7, r1
 8016f98:	d011      	beq.n	8016fbe <f_opendir+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016f9a:	f1b9 0f00 	cmp.w	r9, #0
 8016f9e:	d055      	beq.n	801704c <f_opendir+0x194>
 8016fa0:	f1be 0f00 	cmp.w	lr, #0
 8016fa4:	d042      	beq.n	801702c <f_opendir+0x174>
 8016fa6:	f1b8 0f00 	cmp.w	r8, #0
 8016faa:	d054      	beq.n	8017056 <f_opendir+0x19e>
 8016fac:	2f00      	cmp	r7, #0
 8016fae:	d04f      	beq.n	8017050 <f_opendir+0x198>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016fb0:	2300      	movs	r3, #0
		FREE_NAMBUF();
 8016fb2:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8016fb4:	2412      	movs	r4, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016fb6:	612b      	str	r3, [r5, #16]
		FREE_NAMBUF();
 8016fb8:	f000 fdbe 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016fbc:	e78a      	b.n	8016ed4 <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 8016fbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016fc0:	4282      	cmp	r2, r0
 8016fc2:	d1ea      	bne.n	8016f9a <f_opendir+0xe2>
			Files[i].clu == dp->obj.sclust &&
 8016fc4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016fc6:	4684      	mov	ip, r0
 8016fc8:	6968      	ldr	r0, [r5, #20]
 8016fca:	4584      	cmp	ip, r0
 8016fcc:	d1e5      	bne.n	8016f9a <f_opendir+0xe2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016fce:	f04f 0c03 	mov.w	ip, #3
 8016fd2:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8016fd6:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8016fda:	8992      	ldrh	r2, [r2, #12]
 8016fdc:	3201      	adds	r2, #1
 8016fde:	b292      	uxth	r2, r2
	return i + 1;
 8016fe0:	f10c 0101 	add.w	r1, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016fe4:	443b      	add	r3, r7
		FREE_NAMBUF();
 8016fe6:	4630      	mov	r0, r6
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016fe8:	6129      	str	r1, [r5, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016fea:	819a      	strh	r2, [r3, #12]
		FREE_NAMBUF();
 8016fec:	f000 fda4 	bl	8017b38 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016ff0:	e772      	b.n	8016ed8 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 8016ff2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8016ff4:	42ba      	cmp	r2, r7
 8016ff6:	d1cd      	bne.n	8016f94 <f_opendir+0xdc>
			Files[i].clu == dp->obj.sclust &&
 8016ff8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8016ffa:	6968      	ldr	r0, [r5, #20]
 8016ffc:	4287      	cmp	r7, r0
 8016ffe:	d1c9      	bne.n	8016f94 <f_opendir+0xdc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017000:	f04f 0c02 	mov.w	ip, #2
 8017004:	e7e5      	b.n	8016fd2 <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 8017006:	695f      	ldr	r7, [r3, #20]
 8017008:	42ba      	cmp	r2, r7
 801700a:	d1bf      	bne.n	8016f8c <f_opendir+0xd4>
			Files[i].clu == dp->obj.sclust &&
 801700c:	699f      	ldr	r7, [r3, #24]
 801700e:	6968      	ldr	r0, [r5, #20]
 8017010:	4287      	cmp	r7, r0
 8017012:	d1bb      	bne.n	8016f8c <f_opendir+0xd4>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017014:	f04f 0c01 	mov.w	ip, #1
 8017018:	e7db      	b.n	8016fd2 <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 801701a:	685f      	ldr	r7, [r3, #4]
 801701c:	42ba      	cmp	r2, r7
 801701e:	d1b1      	bne.n	8016f84 <f_opendir+0xcc>
			Files[i].clu == dp->obj.sclust &&
 8017020:	689f      	ldr	r7, [r3, #8]
 8017022:	6968      	ldr	r0, [r5, #20]
 8017024:	4287      	cmp	r7, r0
 8017026:	d1ad      	bne.n	8016f84 <f_opendir+0xcc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017028:	46a4      	mov	ip, r4
 801702a:	e7d2      	b.n	8016fd2 <f_opendir+0x11a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801702c:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 8017030:	eb03 1e0c 	add.w	lr, r3, ip, lsl #4
		Files[i].ofs = dp->dptr;
 8017034:	6968      	ldr	r0, [r5, #20]
		Files[i].fs = dp->obj.fs;
 8017036:	ea4f 170c 	mov.w	r7, ip, lsl #4
		Files[i].ctr = 0;
 801703a:	f04f 0800 	mov.w	r8, #0
		Files[i].ofs = dp->dptr;
 801703e:	e9ce 2001 	strd	r2, r0, [lr, #4]
		Files[i].fs = dp->obj.fs;
 8017042:	51d9      	str	r1, [r3, r7]
		Files[i].ctr = 0;
 8017044:	2201      	movs	r2, #1
 8017046:	f8ae 800c 	strh.w	r8, [lr, #12]
 801704a:	e7c9      	b.n	8016fe0 <f_opendir+0x128>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801704c:	46cc      	mov	ip, r9
 801704e:	e7ef      	b.n	8017030 <f_opendir+0x178>
 8017050:	f04f 0c03 	mov.w	ip, #3
 8017054:	e7ec      	b.n	8017030 <f_opendir+0x178>
 8017056:	f04f 0c02 	mov.w	ip, #2
 801705a:	e7e9      	b.n	8017030 <f_opendir+0x178>
 801705c:	24005208 	.word	0x24005208

08017060 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017060:	b330      	cbz	r0, 80170b0 <f_closedir+0x50>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017062:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017064:	6803      	ldr	r3, [r0, #0]
 8017066:	4604      	mov	r4, r0
 8017068:	b12b      	cbz	r3, 8017076 <f_closedir+0x16>
 801706a:	781a      	ldrb	r2, [r3, #0]
 801706c:	b11a      	cbz	r2, 8017076 <f_closedir+0x16>
 801706e:	8881      	ldrh	r1, [r0, #4]
 8017070:	88da      	ldrh	r2, [r3, #6]
 8017072:	4291      	cmp	r1, r2
 8017074:	d001      	beq.n	801707a <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 8017076:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8017078:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801707a:	7858      	ldrb	r0, [r3, #1]
 801707c:	f7fc fc9a 	bl	80139b4 <disk_status>
 8017080:	f010 0001 	ands.w	r0, r0, #1
 8017084:	d1f7      	bne.n	8017076 <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8017086:	6923      	ldr	r3, [r4, #16]
 8017088:	b17b      	cbz	r3, 80170aa <f_closedir+0x4a>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801708a:	3b01      	subs	r3, #1
 801708c:	2b03      	cmp	r3, #3
 801708e:	d815      	bhi.n	80170bc <f_closedir+0x5c>
		n = Files[i].ctr;
 8017090:	490b      	ldr	r1, [pc, #44]	; (80170c0 <f_closedir+0x60>)
 8017092:	011d      	lsls	r5, r3, #4
 8017094:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8017098:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801709a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801709e:	d009      	beq.n	80170b4 <f_closedir+0x54>
		if (n > 0) n--;				/* Decrement read mode open count */
 80170a0:	b14a      	cbz	r2, 80170b6 <f_closedir+0x56>
 80170a2:	3a01      	subs	r2, #1
 80170a4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80170a6:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80170a8:	b12a      	cbz	r2, 80170b6 <f_closedir+0x56>
			dp->obj.fs = 0;			/* Invalidate directory object */
 80170aa:	2300      	movs	r3, #0
 80170ac:	6023      	str	r3, [r4, #0]
}
 80170ae:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80170b0:	2009      	movs	r0, #9
}
 80170b2:	4770      	bx	lr
		Files[i].ctr = n;
 80170b4:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80170b6:	2300      	movs	r3, #0
 80170b8:	514b      	str	r3, [r1, r5]
		if (res == FR_OK)
 80170ba:	e7f6      	b.n	80170aa <f_closedir+0x4a>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80170bc:	2002      	movs	r0, #2
}
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	24005208 	.word	0x24005208

080170c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80170c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80170c6:	b148      	cbz	r0, 80170dc <f_readdir+0x18>
 80170c8:	6803      	ldr	r3, [r0, #0]
 80170ca:	4604      	mov	r4, r0
 80170cc:	b133      	cbz	r3, 80170dc <f_readdir+0x18>
 80170ce:	781a      	ldrb	r2, [r3, #0]
 80170d0:	b122      	cbz	r2, 80170dc <f_readdir+0x18>
 80170d2:	460e      	mov	r6, r1
 80170d4:	88da      	ldrh	r2, [r3, #6]
 80170d6:	8881      	ldrh	r1, [r0, #4]
 80170d8:	4291      	cmp	r1, r2
 80170da:	d002      	beq.n	80170e2 <f_readdir+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 80170dc:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 80170de:	4628      	mov	r0, r5
 80170e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80170e2:	7858      	ldrb	r0, [r3, #1]
 80170e4:	f7fc fc66 	bl	80139b4 <disk_status>
 80170e8:	07c3      	lsls	r3, r0, #31
 80170ea:	d4f7      	bmi.n	80170dc <f_readdir+0x18>
		if (!fno) {
 80170ec:	b1f6      	cbz	r6, 801712c <f_readdir+0x68>
			INIT_NAMBUF(fs);
 80170ee:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80170f2:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 80170f4:	f000 fd1e 	bl	8017b34 <ff_memalloc>
 80170f8:	4607      	mov	r7, r0
 80170fa:	b1e8      	cbz	r0, 8017138 <f_readdir+0x74>
 80170fc:	60e8      	str	r0, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 80170fe:	4620      	mov	r0, r4
 8017100:	f7fc feb0 	bl	8013e64 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8017104:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8017108:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 801710a:	d10a      	bne.n	8017122 <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 801710c:	4631      	mov	r1, r6
 801710e:	4620      	mov	r0, r4
 8017110:	f7fc fc9a 	bl	8013a48 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8017114:	4620      	mov	r0, r4
 8017116:	f7fc fe61 	bl	8013ddc <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801711a:	2804      	cmp	r0, #4
 801711c:	bf14      	ite	ne
 801711e:	4605      	movne	r5, r0
 8017120:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 8017122:	4638      	mov	r0, r7
 8017124:	f000 fd08 	bl	8017b38 <ff_memfree>
}
 8017128:	4628      	mov	r0, r5
 801712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801712c:	4631      	mov	r1, r6
 801712e:	4620      	mov	r0, r4
}
 8017130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017134:	f7fd bcaa 	b.w	8014a8c <dir_sdi>
			INIT_NAMBUF(fs);
 8017138:	2511      	movs	r5, #17
 801713a:	e7d0      	b.n	80170de <f_readdir+0x1a>

0801713c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801713c:	b570      	push	{r4, r5, r6, lr}
 801713e:	b090      	sub	sp, #64	; 0x40
 8017140:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8017142:	2200      	movs	r2, #0
{
 8017144:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 8017146:	a903      	add	r1, sp, #12
 8017148:	a801      	add	r0, sp, #4
 801714a:	f7fd fa9b 	bl	8014684 <find_volume>
	if (res == FR_OK) {
 801714e:	4604      	mov	r4, r0
 8017150:	b110      	cbz	r0, 8017158 <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8017152:	4620      	mov	r0, r4
 8017154:	b010      	add	sp, #64	; 0x40
 8017156:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8017158:	f44f 7000 	mov.w	r0, #512	; 0x200
 801715c:	f000 fcea 	bl	8017b34 <ff_memalloc>
 8017160:	4606      	mov	r6, r0
 8017162:	b1b0      	cbz	r0, 8017192 <f_stat+0x56>
 8017164:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8017166:	a803      	add	r0, sp, #12
 8017168:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 801716a:	60de      	str	r6, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801716c:	f7fd ff0a 	bl	8014f84 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8017170:	4604      	mov	r4, r0
 8017172:	b940      	cbnz	r0, 8017186 <f_stat+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8017174:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8017178:	2b00      	cmp	r3, #0
 801717a:	db0c      	blt.n	8017196 <f_stat+0x5a>
				if (fno) get_fileinfo(&dj, fno);
 801717c:	b11d      	cbz	r5, 8017186 <f_stat+0x4a>
 801717e:	4629      	mov	r1, r5
 8017180:	a803      	add	r0, sp, #12
 8017182:	f7fc fc61 	bl	8013a48 <get_fileinfo>
		FREE_NAMBUF();
 8017186:	4630      	mov	r0, r6
 8017188:	f000 fcd6 	bl	8017b38 <ff_memfree>
}
 801718c:	4620      	mov	r0, r4
 801718e:	b010      	add	sp, #64	; 0x40
 8017190:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8017192:	2411      	movs	r4, #17
 8017194:	e7dd      	b.n	8017152 <f_stat+0x16>
				res = FR_INVALID_NAME;
 8017196:	2406      	movs	r4, #6
 8017198:	e7f5      	b.n	8017186 <f_stat+0x4a>
 801719a:	bf00      	nop

0801719c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a0:	b097      	sub	sp, #92	; 0x5c
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80171a2:	2202      	movs	r2, #2
{
 80171a4:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 80171a6:	a908      	add	r1, sp, #32
 80171a8:	a807      	add	r0, sp, #28
 80171aa:	f7fd fa6b 	bl	8014684 <find_volume>
	dj.obj.fs = fs;
 80171ae:	9b08      	ldr	r3, [sp, #32]
	if (res == FR_OK) {
 80171b0:	4606      	mov	r6, r0
	dj.obj.fs = fs;
 80171b2:	9309      	str	r3, [sp, #36]	; 0x24
	if (res == FR_OK) {
 80171b4:	b118      	cbz	r0, 80171be <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80171b6:	4630      	mov	r0, r6
 80171b8:	b017      	add	sp, #92	; 0x5c
 80171ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 80171be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80171c2:	f000 fcb7 	bl	8017b34 <ff_memalloc>
 80171c6:	4604      	mov	r4, r0
 80171c8:	b190      	cbz	r0, 80171f0 <f_mkdir+0x54>
		res = follow_path(&dj, path);			/* Follow the file path */
 80171ca:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
		INIT_NAMBUF(fs);
 80171ce:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 80171d0:	a809      	add	r0, sp, #36	; 0x24
 80171d2:	f7fd fed7 	bl	8014f84 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80171d6:	b148      	cbz	r0, 80171ec <f_mkdir+0x50>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80171d8:	2804      	cmp	r0, #4
 80171da:	d00b      	beq.n	80171f4 <f_mkdir+0x58>
 80171dc:	4606      	mov	r6, r0
		FREE_NAMBUF();
 80171de:	4620      	mov	r0, r4
 80171e0:	f000 fcaa 	bl	8017b38 <ff_memfree>
}
 80171e4:	4630      	mov	r0, r6
 80171e6:	b017      	add	sp, #92	; 0x5c
 80171e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80171ec:	2608      	movs	r6, #8
 80171ee:	e7f6      	b.n	80171de <f_mkdir+0x42>
		INIT_NAMBUF(fs);
 80171f0:	2611      	movs	r6, #17
 80171f2:	e7e0      	b.n	80171b6 <f_mkdir+0x1a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80171f4:	4631      	mov	r1, r6
 80171f6:	a809      	add	r0, sp, #36	; 0x24
 80171f8:	f7fd f916 	bl	8014428 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80171fc:	9d08      	ldr	r5, [sp, #32]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80171fe:	4680      	mov	r8, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017200:	896b      	ldrh	r3, [r5, #10]
 8017202:	025b      	lsls	r3, r3, #9
 8017204:	930c      	str	r3, [sp, #48]	; 0x30
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017206:	2800      	cmp	r0, #0
 8017208:	f000 810e 	beq.w	8017428 <f_mkdir+0x28c>
			if (dcl == 1) res = FR_INT_ERR;
 801720c:	2801      	cmp	r0, #1
 801720e:	f000 810f 	beq.w	8017430 <f_mkdir+0x294>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017212:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017216:	f000 8117 	beq.w	8017448 <f_mkdir+0x2ac>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801721a:	78eb      	ldrb	r3, [r5, #3]
 801721c:	2b00      	cmp	r3, #0
 801721e:	f040 8115 	bne.w	801744c <f_mkdir+0x2b0>
			tm = GET_FATTIME();
 8017222:	f7fc fc0f 	bl	8013a44 <get_fattime>
				dsc = clust2sect(fs, dcl);
 8017226:	f8dd 9020 	ldr.w	r9, [sp, #32]
	clst -= 2;
 801722a:	f1a8 0202 	sub.w	r2, r8, #2
			tm = GET_FATTIME();
 801722e:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017230:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8017234:	3b02      	subs	r3, #2
 8017236:	429a      	cmp	r2, r3
 8017238:	f080 8103 	bcs.w	8017442 <f_mkdir+0x2a6>
	return clst * fs->csize + fs->database;
 801723c:	f8b9 700a 	ldrh.w	r7, [r9, #10]
 8017240:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8017244:	fb02 3307 	mla	r3, r2, r7, r3
 8017248:	469b      	mov	fp, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801724a:	b2eb      	uxtb	r3, r5
				dir = fs->win;
 801724c:	f109 0a34 	add.w	sl, r9, #52	; 0x34
				mem_set(dir, 0, SS(fs));
 8017250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017254:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8017256:	9302      	str	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8017258:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801725c:	4650      	mov	r0, sl
	*ptr++ = (BYTE)val; val >>= 8;
 801725e:	fa5f f788 	uxtb.w	r7, r8
	*ptr++ = (BYTE)val; val >>= 8;
 8017262:	9303      	str	r3, [sp, #12]
 8017264:	f009 fc5e 	bl	8020b24 <memset>
 8017268:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
					dir[DIR_Attr] = AM_DIR;
 801726c:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801726e:	9701      	str	r7, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8017270:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8017274:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
	*ptr++ = (BYTE)val;
 8017278:	0e2d      	lsrs	r5, r5, #24
 801727a:	f8ca 3004 	str.w	r3, [sl, #4]
	*ptr++ = (BYTE)val;
 801727e:	f3c8 2707 	ubfx	r7, r8, #8, #8
 8017282:	f8ca 3007 	str.w	r3, [sl, #7]
					dir[DIR_Name] = '.';
 8017286:	212e      	movs	r1, #46	; 0x2e
					dir[DIR_Attr] = AM_DIR;
 8017288:	f889 203f 	strb.w	r2, [r9, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 801728c:	9a02      	ldr	r2, [sp, #8]
	if (fs->fs_type == FS_FAT32) {
 801728e:	f899 3000 	ldrb.w	r3, [r9]
	*ptr++ = (BYTE)val; val >>= 8;
 8017292:	f889 204a 	strb.w	r2, [r9, #74]	; 0x4a
	*ptr++ = (BYTE)val; val >>= 8;
 8017296:	9a03      	ldr	r2, [sp, #12]
	if (fs->fs_type == FS_FAT32) {
 8017298:	2b03      	cmp	r3, #3
	*ptr++ = (BYTE)val; val >>= 8;
 801729a:	9005      	str	r0, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 801729c:	f889 204b 	strb.w	r2, [r9, #75]	; 0x4b
	*ptr++ = (BYTE)val; val >>= 8;
 80172a0:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val;
 80172a2:	9506      	str	r5, [sp, #24]
	*ptr++ = (BYTE)val;
 80172a4:	9704      	str	r7, [sp, #16]
					dir[DIR_Name] = '.';
 80172a6:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80172aa:	f889 004c 	strb.w	r0, [r9, #76]	; 0x4c
	*ptr++ = (BYTE)val;
 80172ae:	f889 504d 	strb.w	r5, [r9, #77]	; 0x4d
	*ptr++ = (BYTE)val; val >>= 8;
 80172b2:	f889 204e 	strb.w	r2, [r9, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 80172b6:	f889 704f 	strb.w	r7, [r9, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 80172ba:	d106      	bne.n	80172ca <f_mkdir+0x12e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80172bc:	ea4f 4318 	mov.w	r3, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80172c0:	0a1a      	lsrs	r2, r3, #8
 80172c2:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
	*ptr++ = (BYTE)val;
 80172c6:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80172ca:	f109 0358 	add.w	r3, r9, #88	; 0x58
 80172ce:	459a      	cmp	sl, r3
 80172d0:	d206      	bcs.n	80172e0 <f_mkdir+0x144>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80172d2:	f109 0154 	add.w	r1, r9, #84	; 0x54
 80172d6:	f109 0338 	add.w	r3, r9, #56	; 0x38
 80172da:	4299      	cmp	r1, r3
 80172dc:	f0c0 80c4 	bcc.w	8017468 <f_mkdir+0x2cc>
			*d++ = *s++;
 80172e0:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 80172e4:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 80172e8:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
 80172ec:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
 80172f0:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 80172f4:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80172f8:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 80172fc:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
 8017300:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8017304:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8017308:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 801730c:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
 8017310:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
 8017314:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8017318:	f8c9 206c 	str.w	r2, [r9, #108]	; 0x6c
 801731c:	f8c9 3070 	str.w	r3, [r9, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017320:	222e      	movs	r2, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017322:	9d08      	ldr	r5, [sp, #32]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017326:	f889 2055 	strb.w	r2, [r9, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801732a:	782a      	ldrb	r2, [r5, #0]
 801732c:	2a03      	cmp	r2, #3
 801732e:	f000 8081 	beq.w	8017434 <f_mkdir+0x298>
 8017332:	b2de      	uxtb	r6, r3
 8017334:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017338:	f889 606e 	strb.w	r6, [r9, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 801733c:	f889 206f 	strb.w	r2, [r9, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 8017340:	782a      	ldrb	r2, [r5, #0]
 8017342:	2a03      	cmp	r2, #3
 8017344:	d105      	bne.n	8017352 <f_mkdir+0x1b6>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017346:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017348:	0a1a      	lsrs	r2, r3, #8
 801734a:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
	*ptr++ = (BYTE)val;
 801734e:	f889 2069 	strb.w	r2, [r9, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017352:	896b      	ldrh	r3, [r5, #10]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d03b      	beq.n	80173d0 <f_mkdir+0x234>
 8017358:	3b01      	subs	r3, #1
 801735a:	465f      	mov	r7, fp
 801735c:	9400      	str	r4, [sp, #0]
 801735e:	445b      	add	r3, fp
 8017360:	469b      	mov	fp, r3
					fs->wflag = 1;
 8017362:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017366:	f105 0434 	add.w	r4, r5, #52	; 0x34
 801736a:	463a      	mov	r2, r7
 801736c:	7868      	ldrb	r0, [r5, #1]
					fs->wflag = 1;
 801736e:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017370:	4621      	mov	r1, r4
 8017372:	2301      	movs	r3, #1
					fs->winsect = dsc++;
 8017374:	632f      	str	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017376:	f7fc fb49 	bl	8013a0c <disk_write>
 801737a:	bb00      	cbnz	r0, 80173be <f_mkdir+0x222>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801737c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801737e:	69eb      	ldr	r3, [r5, #28]
 8017380:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8017382:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017384:	429a      	cmp	r2, r3
 8017386:	d20f      	bcs.n	80173a8 <f_mkdir+0x20c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017388:	78ae      	ldrb	r6, [r5, #2]
 801738a:	2e01      	cmp	r6, #1
 801738c:	d90c      	bls.n	80173a8 <f_mkdir+0x20c>
 801738e:	46b9      	mov	r9, r7
 8017390:	e000      	b.n	8017394 <f_mkdir+0x1f8>
 8017392:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8017394:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017396:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8017398:	2301      	movs	r3, #1
 801739a:	4621      	mov	r1, r4
 801739c:	464a      	mov	r2, r9
 801739e:	7868      	ldrb	r0, [r5, #1]
 80173a0:	f7fc fb34 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80173a4:	2e01      	cmp	r6, #1
 80173a6:	d1f4      	bne.n	8017392 <f_mkdir+0x1f6>
 80173a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80173ac:	2100      	movs	r1, #0
 80173ae:	4650      	mov	r0, sl
 80173b0:	f009 fbb8 	bl	8020b24 <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80173b4:	45bb      	cmp	fp, r7
 80173b6:	d00a      	beq.n	80173ce <f_mkdir+0x232>
 80173b8:	3701      	adds	r7, #1
 80173ba:	9d08      	ldr	r5, [sp, #32]
 80173bc:	e7d1      	b.n	8017362 <f_mkdir+0x1c6>
 80173be:	9c00      	ldr	r4, [sp, #0]
			res = FR_DISK_ERR;
 80173c0:	2601      	movs	r6, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80173c2:	4641      	mov	r1, r8
 80173c4:	a809      	add	r0, sp, #36	; 0x24
 80173c6:	2200      	movs	r2, #0
 80173c8:	f7fd ff78 	bl	80152bc <remove_chain>
 80173cc:	e707      	b.n	80171de <f_mkdir+0x42>
 80173ce:	9c00      	ldr	r4, [sp, #0]
				res = dir_register(&dj);	/* Register the object to the directoy */
 80173d0:	a809      	add	r0, sp, #36	; 0x24
 80173d2:	f7fe f81b 	bl	801540c <dir_register>
			if (res == FR_OK) {
 80173d6:	4606      	mov	r6, r0
 80173d8:	2800      	cmp	r0, #0
 80173da:	d1f2      	bne.n	80173c2 <f_mkdir+0x226>
	*ptr++ = (BYTE)val; val >>= 8;
 80173dc:	9a02      	ldr	r2, [sp, #8]
					dir = dj.dir;
 80173de:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 80173e0:	f362 0607 	bfi	r6, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80173e4:	9a01      	ldr	r2, [sp, #4]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80173e6:	9808      	ldr	r0, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 80173e8:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val; val >>= 8;
 80173ea:	9a03      	ldr	r2, [sp, #12]
 80173ec:	f362 260f 	bfi	r6, r2, #8, #8
	*ptr++ = (BYTE)val;
 80173f0:	9a04      	ldr	r2, [sp, #16]
 80173f2:	76da      	strb	r2, [r3, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 80173f4:	9a05      	ldr	r2, [sp, #20]
 80173f6:	f362 4617 	bfi	r6, r2, #16, #8
 80173fa:	9a06      	ldr	r2, [sp, #24]
 80173fc:	f362 661f 	bfi	r6, r2, #24, #8
 8017400:	f8c3 6016 	str.w	r6, [r3, #22]
	if (fs->fs_type == FS_FAT32) {
 8017404:	7802      	ldrb	r2, [r0, #0]
 8017406:	2a03      	cmp	r2, #3
 8017408:	d106      	bne.n	8017418 <f_mkdir+0x27c>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801740a:	ea4f 4818 	mov.w	r8, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 801740e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8017412:	f883 8014 	strb.w	r8, [r3, #20]
	*ptr++ = (BYTE)val;
 8017416:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017418:	2110      	movs	r1, #16
					fs->wflag = 1;
 801741a:	2201      	movs	r2, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801741c:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 801741e:	70c2      	strb	r2, [r0, #3]
					res = sync_fs(fs);
 8017420:	f7fc ff90 	bl	8014344 <sync_fs>
 8017424:	4606      	mov	r6, r0
 8017426:	e6da      	b.n	80171de <f_mkdir+0x42>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017428:	2607      	movs	r6, #7
			tm = GET_FATTIME();
 801742a:	f7fc fb0b 	bl	8013a44 <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 801742e:	e7c8      	b.n	80173c2 <f_mkdir+0x226>
			if (dcl == 1) res = FR_INT_ERR;
 8017430:	2602      	movs	r6, #2
 8017432:	e7fa      	b.n	801742a <f_mkdir+0x28e>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017434:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8017436:	429a      	cmp	r2, r3
 8017438:	f47f af7b 	bne.w	8017332 <f_mkdir+0x196>
 801743c:	2200      	movs	r2, #0
 801743e:	4613      	mov	r3, r2
 8017440:	e77a      	b.n	8017338 <f_mkdir+0x19c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017442:	2300      	movs	r3, #0
 8017444:	469b      	mov	fp, r3
 8017446:	e700      	b.n	801724a <f_mkdir+0xae>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017448:	2601      	movs	r6, #1
 801744a:	e7ee      	b.n	801742a <f_mkdir+0x28e>
		wsect = fs->winsect;	/* Current sector number */
 801744c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801744e:	f105 0a34 	add.w	sl, r5, #52	; 0x34
 8017452:	2301      	movs	r3, #1
 8017454:	7868      	ldrb	r0, [r5, #1]
 8017456:	463a      	mov	r2, r7
 8017458:	4651      	mov	r1, sl
 801745a:	f7fc fad7 	bl	8013a0c <disk_write>
 801745e:	b160      	cbz	r0, 801747a <f_mkdir+0x2de>
			res = FR_DISK_ERR;
 8017460:	2601      	movs	r6, #1
			tm = GET_FATTIME();
 8017462:	f7fc faef 	bl	8013a44 <get_fattime>
			if (res == FR_OK) {
 8017466:	e7ac      	b.n	80173c2 <f_mkdir+0x226>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017468:	4653      	mov	r3, sl
 801746a:	465f      	mov	r7, fp
			*d++ = *s++;
 801746c:	f813 2b01 	ldrb.w	r2, [r3], #1
		} while (--cnt);
 8017470:	4299      	cmp	r1, r3
			*d++ = *s++;
 8017472:	77da      	strb	r2, [r3, #31]
		} while (--cnt);
 8017474:	d1fa      	bne.n	801746c <f_mkdir+0x2d0>
 8017476:	46bb      	mov	fp, r7
 8017478:	e752      	b.n	8017320 <f_mkdir+0x184>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801747a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801747c:	69eb      	ldr	r3, [r5, #28]
 801747e:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8017480:	70ee      	strb	r6, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017482:	429a      	cmp	r2, r3
 8017484:	f4bf aecd 	bcs.w	8017222 <f_mkdir+0x86>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017488:	f895 9002 	ldrb.w	r9, [r5, #2]
 801748c:	f1b9 0f01 	cmp.w	r9, #1
 8017490:	d801      	bhi.n	8017496 <f_mkdir+0x2fa>
 8017492:	e6c6      	b.n	8017222 <f_mkdir+0x86>
 8017494:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8017496:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017498:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801749c:	2301      	movs	r3, #1
 801749e:	4651      	mov	r1, sl
 80174a0:	463a      	mov	r2, r7
 80174a2:	7868      	ldrb	r0, [r5, #1]
 80174a4:	f7fc fab2 	bl	8013a0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80174a8:	f1b9 0f01 	cmp.w	r9, #1
 80174ac:	d1f2      	bne.n	8017494 <f_mkdir+0x2f8>
 80174ae:	e6b8      	b.n	8017222 <f_mkdir+0x86>

080174b0 <f_putc>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80174b0:	b171      	cbz	r1, 80174d0 <f_putc+0x20>
 80174b2:	680b      	ldr	r3, [r1, #0]

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 80174b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174b8:	460c      	mov	r4, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80174ba:	b12b      	cbz	r3, 80174c8 <f_putc+0x18>
 80174bc:	781a      	ldrb	r2, [r3, #0]
 80174be:	b11a      	cbz	r2, 80174c8 <f_putc+0x18>
 80174c0:	8889      	ldrh	r1, [r1, #4]
 80174c2:	88da      	ldrh	r2, [r3, #6]
 80174c4:	4291      	cmp	r1, r2
 80174c6:	d006      	beq.n	80174d6 <f_putc+0x26>
	return EOF;
 80174c8:	f04f 30ff 	mov.w	r0, #4294967295


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
	return putc_flush(&pb);
}
 80174cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return EOF;
 80174d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80174d4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80174d6:	4605      	mov	r5, r0
 80174d8:	7858      	ldrb	r0, [r3, #1]
 80174da:	f7fc fa6b 	bl	80139b4 <disk_status>
 80174de:	07c2      	lsls	r2, r0, #31
 80174e0:	d4f2      	bmi.n	80174c8 <f_putc+0x18>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80174e2:	7d63      	ldrb	r3, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80174e4:	6826      	ldr	r6, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d1ee      	bne.n	80174c8 <f_putc+0x18>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80174ea:	7d20      	ldrb	r0, [r4, #20]
 80174ec:	0783      	lsls	r3, r0, #30
 80174ee:	d5eb      	bpl.n	80174c8 <f_putc+0x18>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80174f0:	69a1      	ldr	r1, [r4, #24]
 80174f2:	1c4f      	adds	r7, r1, #1
 80174f4:	d044      	beq.n	8017580 <f_putc+0xd0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80174f6:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d17b      	bne.n	80175f6 <f_putc+0x146>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80174fe:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8017502:	0a4b      	lsrs	r3, r1, #9
 8017504:	f10c 37ff 	add.w	r7, ip, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8017508:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 801750c:	d10d      	bne.n	801752a <f_putc+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801750e:	2900      	cmp	r1, #0
 8017510:	d140      	bne.n	8017594 <f_putc+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017512:	68a3      	ldr	r3, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8017514:	2b00      	cmp	r3, #0
 8017516:	d067      	beq.n	80175e8 <f_putc+0x138>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017518:	2b01      	cmp	r3, #1
 801751a:	d035      	beq.n	8017588 <f_putc+0xd8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801751c:	1c5a      	adds	r2, r3, #1
 801751e:	d075      	beq.n	801760c <f_putc+0x15c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017520:	68a2      	ldr	r2, [r4, #8]
 8017522:	7d20      	ldrb	r0, [r4, #20]
				fp->clust = clst;			/* Update current cluster */
 8017524:	61e3      	str	r3, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017526:	b902      	cbnz	r2, 801752a <f_putc+0x7a>
 8017528:	60a3      	str	r3, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801752a:	0603      	lsls	r3, r0, #24
 801752c:	d44a      	bmi.n	80175c4 <f_putc+0x114>
	clst -= 2;
 801752e:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017530:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 8017532:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017534:	3b02      	subs	r3, #2
 8017536:	429a      	cmp	r2, r3
 8017538:	d226      	bcs.n	8017588 <f_putc+0xd8>
	return clst * fs->csize + fs->database;
 801753a:	8973      	ldrh	r3, [r6, #10]
 801753c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 801753e:	fb02 1203 	mla	r2, r2, r3, r1
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017542:	b30a      	cbz	r2, 8017588 <f_putc+0xd8>
			sect += csect;
 8017544:	4417      	add	r7, r2
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017546:	6a23      	ldr	r3, [r4, #32]
 8017548:	429f      	cmp	r7, r3
 801754a:	d048      	beq.n	80175de <f_putc+0x12e>
				fp->fptr < fp->obj.objsize &&
 801754c:	69a3      	ldr	r3, [r4, #24]
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801754e:	f104 0830 	add.w	r8, r4, #48	; 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017552:	68e2      	ldr	r2, [r4, #12]
 8017554:	4293      	cmp	r3, r2
 8017556:	d351      	bcc.n	80175fc <f_putc+0x14c>
			fp->sect = sect;
 8017558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801755c:	6227      	str	r7, [r4, #32]
			*d++ = *s++;
 801755e:	f808 5003 	strb.w	r5, [r8, r3]
		&& (UINT)pb->idx == nw) return pb->nchr;
 8017562:	2001      	movs	r0, #1
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017564:	69a3      	ldr	r3, [r4, #24]
 8017566:	68e1      	ldr	r1, [r4, #12]
 8017568:	4403      	add	r3, r0
		fp->flag |= FA_DIRTY;
 801756a:	7d22      	ldrb	r2, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801756c:	4299      	cmp	r1, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801756e:	f062 023f 	orn	r2, r2, #63	; 0x3f
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017572:	61a3      	str	r3, [r4, #24]
 8017574:	bf38      	it	cc
 8017576:	4619      	movcc	r1, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017578:	7522      	strb	r2, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801757a:	60e1      	str	r1, [r4, #12]
}
 801757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017580:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8017584:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8017586:	e79f      	b.n	80174c8 <f_putc+0x18>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017588:	2302      	movs	r3, #2
	return EOF;
 801758a:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801758e:	7563      	strb	r3, [r4, #21]
}
 8017590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (fp->cltbl) {
 8017594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017596:	b331      	cbz	r1, 80175e6 <f_putc+0x136>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017598:	684a      	ldr	r2, [r1, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801759a:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801759c:	fbb3 f3fc 	udiv	r3, r3, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 80175a0:	b92a      	cbnz	r2, 80175ae <f_putc+0xfe>
 80175a2:	e7ed      	b.n	8017580 <f_putc+0xd0>
		cl -= ncl; tbl++;		/* Next fragment */
 80175a4:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80175a6:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80175aa:	2a00      	cmp	r2, #0
 80175ac:	d0e8      	beq.n	8017580 <f_putc+0xd0>
		if (cl < ncl) break;	/* In this fragment? */
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d9f8      	bls.n	80175a4 <f_putc+0xf4>
	return cl + *tbl;	/* Return the cluster number */
 80175b2:	6848      	ldr	r0, [r1, #4]
 80175b4:	4403      	add	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d1ae      	bne.n	8017518 <f_putc+0x68>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80175ba:	7d23      	ldrb	r3, [r4, #20]
 80175bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175c0:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80175c2:	e781      	b.n	80174c8 <f_putc+0x18>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80175c4:	2301      	movs	r3, #1
 80175c6:	6a22      	ldr	r2, [r4, #32]
 80175c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80175cc:	7870      	ldrb	r0, [r6, #1]
 80175ce:	f7fc fa1d 	bl	8013a0c <disk_write>
 80175d2:	b9d8      	cbnz	r0, 801760c <f_putc+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80175d4:	7d23      	ldrb	r3, [r4, #20]
 80175d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175da:	7523      	strb	r3, [r4, #20]
 80175dc:	e7a7      	b.n	801752e <f_putc+0x7e>
 80175de:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80175e2:	69a3      	ldr	r3, [r4, #24]
 80175e4:	e7b8      	b.n	8017558 <f_putc+0xa8>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80175e6:	69e1      	ldr	r1, [r4, #28]
 80175e8:	4620      	mov	r0, r4
 80175ea:	f7fc ff1d 	bl	8014428 <create_chain>
 80175ee:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d191      	bne.n	8017518 <f_putc+0x68>
 80175f4:	e7e1      	b.n	80175ba <f_putc+0x10a>
 80175f6:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80175fa:	e7b0      	b.n	801755e <f_putc+0xae>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80175fc:	7870      	ldrb	r0, [r6, #1]
 80175fe:	2301      	movs	r3, #1
 8017600:	463a      	mov	r2, r7
 8017602:	4641      	mov	r1, r8
 8017604:	f7fc f9f4 	bl	80139f0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8017608:	2800      	cmp	r0, #0
 801760a:	d0ea      	beq.n	80175e2 <f_putc+0x132>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801760c:	2301      	movs	r3, #1
	return EOF;
 801760e:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017612:	7563      	strb	r3, [r4, #21]
 8017614:	e75a      	b.n	80174cc <f_putc+0x1c>
 8017616:	bf00      	nop

08017618 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8017618:	b40e      	push	{r1, r2, r3}
 801761a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801761e:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 8017620:	2300      	movs	r3, #0
{
 8017622:	a929      	add	r1, sp, #164	; 0xa4
	pb->fp = fp;
 8017624:	900d      	str	r0, [sp, #52]	; 0x34
	pb->nchr = pb->idx = 0;
 8017626:	930e      	str	r3, [sp, #56]	; 0x38
{
 8017628:	f851 bb04 	ldr.w	fp, [r1], #4
	pb->nchr = pb->idx = 0;
 801762c:	930f      	str	r3, [sp, #60]	; 0x3c
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
 801762e:	465c      	mov	r4, fp
	va_start(arp, fmt);
 8017630:	9103      	str	r1, [sp, #12]
		c = *fmt++;
 8017632:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 8017636:	b9b1      	cbnz	r1, 8017666 <f_printf+0x4e>
 8017638:	e24b      	b.n	8017ad2 <f_printf+0x4ba>
	if (i < 0) return;
 801763a:	2b00      	cmp	r3, #0
 801763c:	f2c0 81bc 	blt.w	80179b8 <f_printf+0x3a0>
	pb->buf[i++] = (BYTE)c;
 8017640:	aa20      	add	r2, sp, #128	; 0x80
 8017642:	1c5d      	adds	r5, r3, #1
 8017644:	441a      	add	r2, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017646:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017648:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801764c:	f300 81b6 	bgt.w	80179bc <f_printf+0x3a4>
	pb->nchr++;
 8017650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017652:	462b      	mov	r3, r5
 8017654:	46a3      	mov	fp, r4
	pb->idx = i;
 8017656:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 8017658:	3201      	adds	r2, #1
 801765a:	920f      	str	r2, [sp, #60]	; 0x3c
		c = *fmt++;
 801765c:	465c      	mov	r4, fp
 801765e:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 8017662:	2900      	cmp	r1, #0
 8017664:	d062      	beq.n	801772c <f_printf+0x114>
		if (c != '%') {				/* Non escape character */
 8017666:	2925      	cmp	r1, #37	; 0x25
 8017668:	d1e7      	bne.n	801763a <f_printf+0x22>
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 801766a:	f89b 5001 	ldrb.w	r5, [fp, #1]
		if (c == '0') {				/* Flag: '0' padding */
 801766e:	2d30      	cmp	r5, #48	; 0x30
 8017670:	f000 8198 	beq.w	80179a4 <f_printf+0x38c>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 8017674:	2d2d      	cmp	r5, #45	; 0x2d
 8017676:	f000 81ad 	beq.w	80179d4 <f_printf+0x3bc>
		c = *fmt++;
 801767a:	2200      	movs	r2, #0
 801767c:	f10b 0b02 	add.w	fp, fp, #2
 8017680:	2104      	movs	r1, #4
		w = f = 0;
 8017682:	4692      	mov	sl, r2
		c = *fmt++;
 8017684:	9200      	str	r2, [sp, #0]
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8017686:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 801768a:	2400      	movs	r4, #0
 801768c:	2a09      	cmp	r2, #9
 801768e:	d80a      	bhi.n	80176a6 <f_printf+0x8e>
			w = w * 10 + c - '0';
 8017690:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017694:	eb05 0444 	add.w	r4, r5, r4, lsl #1
			c = *fmt++;
 8017698:	f81b 5b01 	ldrb.w	r5, [fp], #1
		while (IsDigit(c)) {		/* Precision */
 801769c:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			w = w * 10 + c - '0';
 80176a0:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 80176a2:	2a09      	cmp	r2, #9
 80176a4:	d9f4      	bls.n	8017690 <f_printf+0x78>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80176a6:	f005 02df 	and.w	r2, r5, #223	; 0xdf
 80176aa:	2a4c      	cmp	r2, #76	; 0x4c
 80176ac:	f040 8176 	bne.w	801799c <f_printf+0x384>
			f |= 4; c = *fmt++;
 80176b0:	468a      	mov	sl, r1
 80176b2:	2604      	movs	r6, #4
 80176b4:	f81b 5b01 	ldrb.w	r5, [fp], #1
		}
		if (!c) break;
 80176b8:	2d00      	cmp	r5, #0
 80176ba:	d037      	beq.n	801772c <f_printf+0x114>
		d = c;
		if (IsLower(d)) d -= 0x20;
 80176bc:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 80176c0:	2a19      	cmp	r2, #25
 80176c2:	f200 816d 	bhi.w	80179a0 <f_printf+0x388>
 80176c6:	f1a5 0220 	sub.w	r2, r5, #32
 80176ca:	b2d2      	uxtb	r2, r2
		switch (d) {				/* Type is... */
 80176cc:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 80176d0:	2916      	cmp	r1, #22
 80176d2:	d818      	bhi.n	8017706 <f_printf+0xee>
 80176d4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80176d8:	0054018f 	.word	0x0054018f
 80176dc:	00170041 	.word	0x00170041
 80176e0:	00170017 	.word	0x00170017
 80176e4:	00170017 	.word	0x00170017
 80176e8:	00170017 	.word	0x00170017
 80176ec:	00170017 	.word	0x00170017
 80176f0:	00a60017 	.word	0x00a60017
 80176f4:	00170017 	.word	0x00170017
 80176f8:	006f0017 	.word	0x006f0017
 80176fc:	00410017 	.word	0x00410017
 8017700:	00170017 	.word	0x00170017
 8017704:	0191      	.short	0x0191
	if (i < 0) return;
 8017706:	2b00      	cmp	r3, #0
 8017708:	dba8      	blt.n	801765c <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 801770a:	aa20      	add	r2, sp, #128	; 0x80
 801770c:	1c5c      	adds	r4, r3, #1
 801770e:	441a      	add	r2, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017710:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017712:	f802 5c40 	strb.w	r5, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017716:	dc42      	bgt.n	801779e <f_printf+0x186>
	pb->nchr++;
 8017718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801771a:	4623      	mov	r3, r4
	pb->idx = i;
 801771c:	940e      	str	r4, [sp, #56]	; 0x38
		c = *fmt++;
 801771e:	465c      	mov	r4, fp
	pb->nchr++;
 8017720:	3201      	adds	r2, #1
		c = *fmt++;
 8017722:	f814 1b01 	ldrb.w	r1, [r4], #1
	pb->nchr++;
 8017726:	920f      	str	r2, [sp, #60]	; 0x3c
		if (c == 0) break;			/* End of string */
 8017728:	2900      	cmp	r1, #0
 801772a:	d19c      	bne.n	8017666 <f_printf+0x4e>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801772c:	2b00      	cmp	r3, #0
 801772e:	f2c0 81c9 	blt.w	8017ac4 <f_printf+0x4ac>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8017732:	461a      	mov	r2, r3
 8017734:	a910      	add	r1, sp, #64	; 0x40
 8017736:	ab04      	add	r3, sp, #16
 8017738:	980d      	ldr	r0, [sp, #52]	; 0x34
 801773a:	f7ff f803 	bl	8016744 <f_write>
 801773e:	2800      	cmp	r0, #0
 8017740:	f040 81c0 	bne.w	8017ac4 <f_printf+0x4ac>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8017744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017746:	9b04      	ldr	r3, [sp, #16]
 8017748:	429a      	cmp	r2, r3
 801774a:	f040 81bb 	bne.w	8017ac4 <f_printf+0x4ac>
 801774e:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 8017750:	b020      	add	sp, #128	; 0x80
 8017752:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017756:	b003      	add	sp, #12
 8017758:	4770      	bx	lr
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801775a:	2e00      	cmp	r6, #0
 801775c:	f040 814f 	bne.w	80179fe <f_printf+0x3e6>
 8017760:	2a44      	cmp	r2, #68	; 0x44
 8017762:	f040 8140 	bne.w	80179e6 <f_printf+0x3ce>
 8017766:	9903      	ldr	r1, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 8017768:	2a44      	cmp	r2, #68	; 0x44
 801776a:	f04f 000a 	mov.w	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801776e:	f101 0704 	add.w	r7, r1, #4
 8017772:	680e      	ldr	r6, [r1, #0]
 8017774:	9703      	str	r7, [sp, #12]
 8017776:	4631      	mov	r1, r6
		if (d == 'D' && (v & 0x80000000)) {
 8017778:	d060      	beq.n	801783c <f_printf+0x224>
 801777a:	2200      	movs	r2, #0
 801777c:	9201      	str	r2, [sp, #4]
 801777e:	e069      	b.n	8017854 <f_printf+0x23c>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8017780:	9a03      	ldr	r2, [sp, #12]
	if (i < 0) return;
 8017782:	2b00      	cmp	r3, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8017784:	f102 0104 	add.w	r1, r2, #4
 8017788:	9103      	str	r1, [sp, #12]
	if (i < 0) return;
 801778a:	f6ff af67 	blt.w	801765c <f_printf+0x44>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801778e:	6811      	ldr	r1, [r2, #0]
	pb->buf[i++] = (BYTE)c;
 8017790:	1c5c      	adds	r4, r3, #1
 8017792:	aa20      	add	r2, sp, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017794:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017796:	441a      	add	r2, r3
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8017798:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801779c:	ddbc      	ble.n	8017718 <f_printf+0x100>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801779e:	ab04      	add	r3, sp, #16
 80177a0:	4622      	mov	r2, r4
 80177a2:	a910      	add	r1, sp, #64	; 0x40
 80177a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80177a6:	f7fe ffcd 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80177aa:	9b04      	ldr	r3, [sp, #16]
 80177ac:	1b1c      	subs	r4, r3, r4
 80177ae:	bf18      	it	ne
 80177b0:	f04f 34ff 	movne.w	r4, #4294967295
 80177b4:	e7b0      	b.n	8017718 <f_printf+0x100>
			p = va_arg(arp, TCHAR*);
 80177b6:	9a03      	ldr	r2, [sp, #12]
 80177b8:	6815      	ldr	r5, [r2, #0]
 80177ba:	3204      	adds	r2, #4
			for (j = 0; p[j]; j++) ;
 80177bc:	7829      	ldrb	r1, [r5, #0]
			p = va_arg(arp, TCHAR*);
 80177be:	9203      	str	r2, [sp, #12]
			for (j = 0; p[j]; j++) ;
 80177c0:	2900      	cmp	r1, #0
 80177c2:	f000 811e 	beq.w	8017a02 <f_printf+0x3ea>
 80177c6:	462a      	mov	r2, r5
 80177c8:	f1c5 0601 	rsb	r6, r5, #1
 80177cc:	18b7      	adds	r7, r6, r2
 80177ce:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80177d2:	2800      	cmp	r0, #0
 80177d4:	d1fa      	bne.n	80177cc <f_printf+0x1b4>
			if (!(f & 2)) {
 80177d6:	9a00      	ldr	r2, [sp, #0]
 80177d8:	2a00      	cmp	r2, #0
 80177da:	f000 813c 	beq.w	8017a56 <f_printf+0x43e>
			while (*p) putc_bfd(&pb, *p++);
 80177de:	1c7e      	adds	r6, r7, #1
 80177e0:	46a8      	mov	r8, r5
 80177e2:	e009      	b.n	80177f8 <f_printf+0x1e0>
	pb->nchr++;
 80177e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177e6:	462b      	mov	r3, r5
	pb->idx = i;
 80177e8:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 80177ea:	3201      	adds	r2, #1
 80177ec:	920f      	str	r2, [sp, #60]	; 0x3c
			while (*p) putc_bfd(&pb, *p++);
 80177ee:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80177f2:	2900      	cmp	r1, #0
 80177f4:	f000 810a 	beq.w	8017a0c <f_printf+0x3f4>
	pb->buf[i++] = (BYTE)c;
 80177f8:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 80177fa:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 80177fc:	f103 0501 	add.w	r5, r3, #1
 8017800:	441a      	add	r2, r3
	if (i < 0) return;
 8017802:	dbf4      	blt.n	80177ee <f_printf+0x1d6>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017804:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017806:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801780a:	ddeb      	ble.n	80177e4 <f_printf+0x1cc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801780c:	ab04      	add	r3, sp, #16
 801780e:	462a      	mov	r2, r5
 8017810:	a910      	add	r1, sp, #64	; 0x40
 8017812:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017814:	f7fe ff96 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017818:	9b04      	ldr	r3, [sp, #16]
 801781a:	1b5d      	subs	r5, r3, r5
 801781c:	bf18      	it	ne
 801781e:	f04f 35ff 	movne.w	r5, #4294967295
 8017822:	e7df      	b.n	80177e4 <f_printf+0x1cc>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8017824:	2008      	movs	r0, #8
 8017826:	2e00      	cmp	r6, #0
 8017828:	f000 80de 	beq.w	80179e8 <f_printf+0x3d0>
 801782c:	9903      	ldr	r1, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 801782e:	2a44      	cmp	r2, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8017830:	f101 0704 	add.w	r7, r1, #4
 8017834:	680e      	ldr	r6, [r1, #0]
 8017836:	9703      	str	r7, [sp, #12]
 8017838:	4631      	mov	r1, r6
		if (d == 'D' && (v & 0x80000000)) {
 801783a:	d19e      	bne.n	801777a <f_printf+0x162>
 801783c:	2e00      	cmp	r6, #0
 801783e:	da9c      	bge.n	801777a <f_printf+0x162>
			f |= 8;
 8017840:	f04a 0208 	orr.w	r2, sl, #8
			v = 0 - v;
 8017844:	4271      	negs	r1, r6
			f |= 8;
 8017846:	f00a 0602 	and.w	r6, sl, #2
 801784a:	fa5f fa82 	uxtb.w	sl, r2
 801784e:	9600      	str	r6, [sp, #0]
 8017850:	2608      	movs	r6, #8
 8017852:	9601      	str	r6, [sp, #4]
		i = 0;
 8017854:	2d78      	cmp	r5, #120	; 0x78
 8017856:	ae05      	add	r6, sp, #20
 8017858:	f04f 0e00 	mov.w	lr, #0
 801785c:	bf0c      	ite	eq
 801785e:	f04f 0927 	moveq.w	r9, #39	; 0x27
 8017862:	f04f 0907 	movne.w	r9, #7
 8017866:	46b4      	mov	ip, r6
 8017868:	e000      	b.n	801786c <f_printf+0x254>
		} while (v && i < sizeof str / sizeof str[0]);
 801786a:	46ae      	mov	lr, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801786c:	460f      	mov	r7, r1
			str[i++] = d + '0';
 801786e:	f10e 0501 	add.w	r5, lr, #1
			d = (TCHAR)(v % r); v /= r;
 8017872:	fbb1 f2f0 	udiv	r2, r1, r0
 8017876:	fb00 1812 	mls	r8, r0, r2, r1
 801787a:	4611      	mov	r1, r2
 801787c:	fa5f f288 	uxtb.w	r2, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8017880:	f1b8 0f09 	cmp.w	r8, #9
 8017884:	eb09 0802 	add.w	r8, r9, r2
 8017888:	bf88      	it	hi
 801788a:	fa5f f288 	uxtbhi.w	r2, r8
		} while (v && i < sizeof str / sizeof str[0]);
 801788e:	2d1f      	cmp	r5, #31
			str[i++] = d + '0';
 8017890:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8017894:	f80c 2b01 	strb.w	r2, [ip], #1
		} while (v && i < sizeof str / sizeof str[0]);
 8017898:	d801      	bhi.n	801789e <f_printf+0x286>
 801789a:	4287      	cmp	r7, r0
 801789c:	d2e5      	bcs.n	801786a <f_printf+0x252>
		if (f & 8) str[i++] = '-';
 801789e:	9a01      	ldr	r2, [sp, #4]
 80178a0:	b132      	cbz	r2, 80178b0 <f_printf+0x298>
 80178a2:	aa20      	add	r2, sp, #128	; 0x80
 80178a4:	212d      	movs	r1, #45	; 0x2d
 80178a6:	442a      	add	r2, r5
 80178a8:	f10e 0502 	add.w	r5, lr, #2
 80178ac:	f802 1c6c 	strb.w	r1, [r2, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 80178b0:	f01a 0f01 	tst.w	sl, #1
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80178b4:	9a00      	ldr	r2, [sp, #0]
		j = i; d = (f & 1) ? '0' : ' ';
 80178b6:	bf0c      	ite	eq
 80178b8:	f04f 0820 	moveq.w	r8, #32
 80178bc:	f04f 0830 	movne.w	r8, #48	; 0x30
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80178c0:	bb22      	cbnz	r2, 801790c <f_printf+0x2f4>
 80178c2:	42a5      	cmp	r5, r4
 80178c4:	f105 0901 	add.w	r9, r5, #1
 80178c8:	d30a      	bcc.n	80178e0 <f_printf+0x2c8>
 80178ca:	e020      	b.n	801790e <f_printf+0x2f6>
	pb->nchr++;
 80178cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178ce:	463b      	mov	r3, r7
	pb->idx = i;
 80178d0:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 80178d2:	3201      	adds	r2, #1
 80178d4:	920f      	str	r2, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80178d6:	f109 0201 	add.w	r2, r9, #1
 80178da:	454c      	cmp	r4, r9
 80178dc:	4691      	mov	r9, r2
 80178de:	d016      	beq.n	801790e <f_printf+0x2f6>
	pb->buf[i++] = (BYTE)c;
 80178e0:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 80178e2:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 80178e4:	f103 0701 	add.w	r7, r3, #1
 80178e8:	441a      	add	r2, r3
	if (i < 0) return;
 80178ea:	dbf4      	blt.n	80178d6 <f_printf+0x2be>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80178ec:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80178ee:	f802 8c40 	strb.w	r8, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80178f2:	ddeb      	ble.n	80178cc <f_printf+0x2b4>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80178f4:	ab04      	add	r3, sp, #16
 80178f6:	463a      	mov	r2, r7
 80178f8:	a910      	add	r1, sp, #64	; 0x40
 80178fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80178fc:	f7fe ff22 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017900:	9b04      	ldr	r3, [sp, #16]
 8017902:	1bdf      	subs	r7, r3, r7
 8017904:	bf18      	it	ne
 8017906:	f04f 37ff 	movne.w	r7, #4294967295
 801790a:	e7df      	b.n	80178cc <f_printf+0x2b4>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801790c:	46a9      	mov	r9, r5
 801790e:	4435      	add	r5, r6
 8017910:	e007      	b.n	8017922 <f_printf+0x30a>
	pb->nchr++;
 8017912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017914:	463b      	mov	r3, r7
	pb->idx = i;
 8017916:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 8017918:	3201      	adds	r2, #1
 801791a:	920f      	str	r2, [sp, #60]	; 0x3c
		} while (i);
 801791c:	3d01      	subs	r5, #1
 801791e:	42b5      	cmp	r5, r6
 8017920:	d017      	beq.n	8017952 <f_printf+0x33a>
	pb->buf[i++] = (BYTE)c;
 8017922:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8017924:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8017926:	f103 0701 	add.w	r7, r3, #1
 801792a:	441a      	add	r2, r3
	if (i < 0) return;
 801792c:	dbf6      	blt.n	801791c <f_printf+0x304>
	pb->buf[i++] = (BYTE)c;
 801792e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017932:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017934:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017938:	ddeb      	ble.n	8017912 <f_printf+0x2fa>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801793a:	ab04      	add	r3, sp, #16
 801793c:	463a      	mov	r2, r7
 801793e:	a910      	add	r1, sp, #64	; 0x40
 8017940:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017942:	f7fe feff 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017946:	9b04      	ldr	r3, [sp, #16]
 8017948:	1bdf      	subs	r7, r3, r7
 801794a:	bf18      	it	ne
 801794c:	f04f 37ff 	movne.w	r7, #4294967295
 8017950:	e7df      	b.n	8017912 <f_printf+0x2fa>
		while (j++ < w) putc_bfd(&pb, d);
 8017952:	454c      	cmp	r4, r9
 8017954:	f109 0501 	add.w	r5, r9, #1
 8017958:	d80a      	bhi.n	8017970 <f_printf+0x358>
 801795a:	e67f      	b.n	801765c <f_printf+0x44>
	pb->nchr++;
 801795c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801795e:	4613      	mov	r3, r2
	pb->idx = i;
 8017960:	920e      	str	r2, [sp, #56]	; 0x38
	pb->nchr++;
 8017962:	3101      	adds	r1, #1
 8017964:	910f      	str	r1, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 8017966:	1c6a      	adds	r2, r5, #1
 8017968:	42ac      	cmp	r4, r5
 801796a:	4615      	mov	r5, r2
 801796c:	f43f ae76 	beq.w	801765c <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 8017970:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8017972:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8017974:	eb02 0103 	add.w	r1, r2, r3
 8017978:	f103 0201 	add.w	r2, r3, #1
	if (i < 0) return;
 801797c:	dbf3      	blt.n	8017966 <f_printf+0x34e>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801797e:	2b3c      	cmp	r3, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017980:	f801 8c40 	strb.w	r8, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017984:	d1ea      	bne.n	801795c <f_printf+0x344>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017986:	ab04      	add	r3, sp, #16
 8017988:	a910      	add	r1, sp, #64	; 0x40
 801798a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801798c:	f7fe feda 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017990:	9a04      	ldr	r2, [sp, #16]
 8017992:	3a3d      	subs	r2, #61	; 0x3d
 8017994:	bf18      	it	ne
 8017996:	f04f 32ff 	movne.w	r2, #4294967295
 801799a:	e7df      	b.n	801795c <f_printf+0x344>
 801799c:	2600      	movs	r6, #0
 801799e:	e68b      	b.n	80176b8 <f_printf+0xa0>
 80179a0:	462a      	mov	r2, r5
 80179a2:	e693      	b.n	80176cc <f_printf+0xb4>
			f = 1; c = *fmt++;
 80179a4:	2200      	movs	r2, #0
 80179a6:	f89b 5002 	ldrb.w	r5, [fp, #2]
 80179aa:	2105      	movs	r1, #5
 80179ac:	f10b 0b03 	add.w	fp, fp, #3
 80179b0:	f04f 0a01 	mov.w	sl, #1
 80179b4:	9200      	str	r2, [sp, #0]
 80179b6:	e666      	b.n	8017686 <f_printf+0x6e>
	if (i < 0) return;
 80179b8:	46a3      	mov	fp, r4
 80179ba:	e64f      	b.n	801765c <f_printf+0x44>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80179bc:	ab04      	add	r3, sp, #16
 80179be:	462a      	mov	r2, r5
 80179c0:	a910      	add	r1, sp, #64	; 0x40
 80179c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80179c4:	f7fe febe 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80179c8:	9b04      	ldr	r3, [sp, #16]
 80179ca:	1b5d      	subs	r5, r3, r5
 80179cc:	bf18      	it	ne
 80179ce:	f04f 35ff 	movne.w	r5, #4294967295
 80179d2:	e63d      	b.n	8017650 <f_printf+0x38>
				f = 2; c = *fmt++;
 80179d4:	2202      	movs	r2, #2
 80179d6:	f89b 5002 	ldrb.w	r5, [fp, #2]
 80179da:	2106      	movs	r1, #6
 80179dc:	f10b 0b03 	add.w	fp, fp, #3
 80179e0:	4692      	mov	sl, r2
 80179e2:	9200      	str	r2, [sp, #0]
 80179e4:	e64f      	b.n	8017686 <f_printf+0x6e>
 80179e6:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80179e8:	9a03      	ldr	r2, [sp, #12]
 80179ea:	2100      	movs	r1, #0
 80179ec:	1d16      	adds	r6, r2, #4
 80179ee:	9101      	str	r1, [sp, #4]
 80179f0:	6811      	ldr	r1, [r2, #0]
 80179f2:	9603      	str	r6, [sp, #12]
 80179f4:	e72e      	b.n	8017854 <f_printf+0x23c>
	return EOF;
 80179f6:	2002      	movs	r0, #2
 80179f8:	e715      	b.n	8017826 <f_printf+0x20e>
 80179fa:	2010      	movs	r0, #16
 80179fc:	e713      	b.n	8017826 <f_printf+0x20e>
 80179fe:	200a      	movs	r0, #10
 8017a00:	e714      	b.n	801782c <f_printf+0x214>
			if (!(f & 2)) {
 8017a02:	9a00      	ldr	r2, [sp, #0]
 8017a04:	2a00      	cmp	r2, #0
 8017a06:	d068      	beq.n	8017ada <f_printf+0x4c2>
			for (j = 0; p[j]; j++) ;
 8017a08:	460f      	mov	r7, r1
			if (!(f & 2)) {
 8017a0a:	2601      	movs	r6, #1
			while (j++ < w) putc_bfd(&pb, ' ');
 8017a0c:	42a7      	cmp	r7, r4
 8017a0e:	f4bf ae25 	bcs.w	801765c <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 8017a12:	2720      	movs	r7, #32
 8017a14:	e009      	b.n	8017a2a <f_printf+0x412>
	pb->nchr++;
 8017a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a18:	462b      	mov	r3, r5
	pb->idx = i;
 8017a1a:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 8017a1c:	3201      	adds	r2, #1
 8017a1e:	920f      	str	r2, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 8017a20:	1c72      	adds	r2, r6, #1
 8017a22:	42b4      	cmp	r4, r6
 8017a24:	4616      	mov	r6, r2
 8017a26:	f67f ae19 	bls.w	801765c <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 8017a2a:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8017a2c:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8017a2e:	f103 0501 	add.w	r5, r3, #1
 8017a32:	441a      	add	r2, r3
	if (i < 0) return;
 8017a34:	dbf4      	blt.n	8017a20 <f_printf+0x408>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a36:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017a38:	f802 7c40 	strb.w	r7, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a3c:	ddeb      	ble.n	8017a16 <f_printf+0x3fe>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017a3e:	ab04      	add	r3, sp, #16
 8017a40:	462a      	mov	r2, r5
 8017a42:	a910      	add	r1, sp, #64	; 0x40
 8017a44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017a46:	f7fe fe7d 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017a4a:	9b04      	ldr	r3, [sp, #16]
 8017a4c:	1b5d      	subs	r5, r3, r5
 8017a4e:	bf18      	it	ne
 8017a50:	f04f 35ff 	movne.w	r5, #4294967295
 8017a54:	e7df      	b.n	8017a16 <f_printf+0x3fe>
				while (j++ < w) putc_bfd(&pb, ' ');
 8017a56:	42bc      	cmp	r4, r7
 8017a58:	f107 0801 	add.w	r8, r7, #1
 8017a5c:	f107 0602 	add.w	r6, r7, #2
 8017a60:	d939      	bls.n	8017ad6 <f_printf+0x4be>
 8017a62:	4647      	mov	r7, r8
	pb->buf[i++] = (BYTE)c;
 8017a64:	f04f 0920 	mov.w	r9, #32
 8017a68:	e008      	b.n	8017a7c <f_printf+0x464>
	pb->nchr++;
 8017a6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a6c:	4633      	mov	r3, r6
	pb->idx = i;
 8017a6e:	960e      	str	r6, [sp, #56]	; 0x38
	pb->nchr++;
 8017a70:	3201      	adds	r2, #1
 8017a72:	920f      	str	r2, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 8017a74:	1c7a      	adds	r2, r7, #1
 8017a76:	42bc      	cmp	r4, r7
 8017a78:	4617      	mov	r7, r2
 8017a7a:	d915      	bls.n	8017aa8 <f_printf+0x490>
	pb->buf[i++] = (BYTE)c;
 8017a7c:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8017a7e:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8017a80:	f103 0601 	add.w	r6, r3, #1
 8017a84:	441a      	add	r2, r3
	if (i < 0) return;
 8017a86:	dbf5      	blt.n	8017a74 <f_printf+0x45c>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a88:	2e3c      	cmp	r6, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017a8a:	f802 9c40 	strb.w	r9, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a8e:	ddec      	ble.n	8017a6a <f_printf+0x452>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017a90:	ab04      	add	r3, sp, #16
 8017a92:	4632      	mov	r2, r6
 8017a94:	a910      	add	r1, sp, #64	; 0x40
 8017a96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017a98:	f7fe fe54 	bl	8016744 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017a9c:	9b04      	ldr	r3, [sp, #16]
 8017a9e:	1b9e      	subs	r6, r3, r6
 8017aa0:	bf18      	it	ne
 8017aa2:	f04f 36ff 	movne.w	r6, #4294967295
 8017aa6:	e7e0      	b.n	8017a6a <f_printf+0x452>
 8017aa8:	eba4 0708 	sub.w	r7, r4, r8
 8017aac:	f108 0201 	add.w	r2, r8, #1
 8017ab0:	7829      	ldrb	r1, [r5, #0]
 8017ab2:	4544      	cmp	r4, r8
 8017ab4:	bf38      	it	cc
 8017ab6:	2700      	movcc	r7, #0
 8017ab8:	4417      	add	r7, r2
 8017aba:	1c7e      	adds	r6, r7, #1
			while (*p) putc_bfd(&pb, *p++);
 8017abc:	2900      	cmp	r1, #0
 8017abe:	f47f ae8f 	bne.w	80177e0 <f_printf+0x1c8>
 8017ac2:	e7a3      	b.n	8017a0c <f_printf+0x3f4>
	return EOF;
 8017ac4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017ac8:	b020      	add	sp, #128	; 0x80
 8017aca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ace:	b003      	add	sp, #12
 8017ad0:	4770      	bx	lr
 8017ad2:	460b      	mov	r3, r1
 8017ad4:	e62d      	b.n	8017732 <f_printf+0x11a>
				while (j++ < w) putc_bfd(&pb, ' ');
 8017ad6:	4647      	mov	r7, r8
 8017ad8:	e682      	b.n	80177e0 <f_printf+0x1c8>
 8017ada:	2c00      	cmp	r4, #0
 8017adc:	f43f adbe 	beq.w	801765c <f_printf+0x44>
 8017ae0:	f04f 0801 	mov.w	r8, #1
 8017ae4:	e7bd      	b.n	8017a62 <f_printf+0x44a>
 8017ae6:	bf00      	nop

08017ae8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8017ae8:	4b11      	ldr	r3, [pc, #68]	; (8017b30 <FATFS_LinkDriver+0x48>)
 8017aea:	7b9a      	ldrb	r2, [r3, #14]
 8017aec:	2a01      	cmp	r2, #1
 8017aee:	d901      	bls.n	8017af4 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8017af0:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8017af2:	4770      	bx	lr
{
 8017af4:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 8017af6:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8017afa:	2200      	movs	r2, #0
    disk.drv[disk.nbr] = drv;
 8017afc:	7b9e      	ldrb	r6, [r3, #14]
    path[1] = ':';
 8017afe:	273a      	movs	r7, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8017b00:	7b9d      	ldrb	r5, [r3, #14]
    disk.is_initialized[disk.nbr] = 0;
 8017b02:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 8017b06:	7b9c      	ldrb	r4, [r3, #14]
    disk.drv[disk.nbr] = drv;
 8017b08:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8017b0c:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8017b0e:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8017b12:	6070      	str	r0, [r6, #4]
    DiskNum = disk.nbr++;
 8017b14:	1c60      	adds	r0, r4, #1
    disk.lun[disk.nbr] = lun;
 8017b16:	732a      	strb	r2, [r5, #12]
    path[0] = DiskNum + '0';
 8017b18:	3430      	adds	r4, #48	; 0x30
    DiskNum = disk.nbr++;
 8017b1a:	b2c0      	uxtb	r0, r0
    path[2] = '/';
 8017b1c:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 8017b1e:	7398      	strb	r0, [r3, #14]
    path[3] = 0;
 8017b20:	4610      	mov	r0, r2
    path[0] = DiskNum + '0';
 8017b22:	700c      	strb	r4, [r1, #0]
    path[1] = ':';
 8017b24:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 8017b26:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 8017b28:	70ca      	strb	r2, [r1, #3]
}
 8017b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8017b2c:	4770      	bx	lr
 8017b2e:	bf00      	nop
 8017b30:	2400524c 	.word	0x2400524c

08017b34 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8017b34:	f008 bfbe 	b.w	8020ab4 <malloc>

08017b38 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8017b38:	f008 bfc4 	b.w	8020ac4 <free>

08017b3c <Init_DataMemoryLayout>:
/**
* @brief Initializes the application data memory layout
* @param  Pointer to Application context
*/
void Init_DataMemoryLayout(AppContext_TypeDef *App_Context_Ptr)
{
 8017b3c:	b4f0      	push	{r4, r5, r6, r7}
  AIContext->nn_input_buffer = NULL;
  #else
  AIContext->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 8017b3e:	4d08      	ldr	r5, [pc, #32]	; (8017b60 <Init_DataMemoryLayout+0x24>)
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
  AIContext->activation_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  AIContext->nn_input_buffer = NULL;
 8017b40:	2600      	movs	r6, #0
  AiContext_TypeDef *AIContext = App_Context_Ptr->Ai_ContextPtr;
 8017b42:	6f02      	ldr	r2, [r0, #112]	; 0x70
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017b44:	f505 2316 	add.w	r3, r5, #614400	; 0x96000
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 8017b48:	4f06      	ldr	r7, [pc, #24]	; (8017b64 <Init_DataMemoryLayout+0x28>)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017b4a:	e9d0 4117 	ldrd	r4, r1, [r0, #92]	; 0x5c
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017b4e:	e9c4 5300 	strd	r5, r3, [r4]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 8017b52:	648f      	str	r7, [r1, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017b54:	628b      	str	r3, [r1, #40]	; 0x28
  AIContext->nn_input_buffer = NULL;
 8017b56:	e9c2 6301 	strd	r6, r3, [r2, #4]
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #endif /* MEMORY_SCHEME == SPLIT_INT_EXT */
#else
  #error "Please check definition of MEMORY_SCHEME define"
#endif /* MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT */
}
 8017b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop
 8017b60:	d0000000 	.word	0xd0000000
 8017b64:	d0113800 	.word	0xd0113800

08017b68 <Run_Preprocessing>:
* @brief  Run preprocessing stages on captured frame
* @param  App context ptr
* @retval None
*/
void Run_Preprocessing(AppContext_TypeDef *App_Context_Ptr)
{
 8017b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b6c:	4605      	mov	r5, r0
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8017b6e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
  TestRunCtxt_Ptr->rb_swap=0;
 8017b70:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->PerformCapture=1;
 8017b72:	f04f 0901 	mov.w	r9, #1
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8017b76:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8017b78:	f04f 0b02 	mov.w	fp, #2
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8017b7c:	6842      	ldr	r2, [r0, #4]
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8017b7e:	f44f 7320 	mov.w	r3, #640	; 0x280
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 8017b82:	6e2e      	ldr	r6, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8017b84:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8017b88:	f8c4 2b48 	str.w	r2, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8017b8c:	f44f 2116 	mov.w	r1, #614400	; 0x96000
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8017b90:	4a61      	ldr	r2, [pc, #388]	; (8017d18 <Run_Preprocessing+0x1b0>)
{
 8017b92:	b083      	sub	sp, #12
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8017b94:	f8c4 3b50 	str.w	r3, [r4, #2896]	; 0xb50
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017b98:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8017b9a:	f8c4 2b4c 	str.w	r2, [r4, #2892]	; 0xb4c
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
  PreprocCtxt_Ptr->Resize_Dst_Img.w=AI_NETWORK_WIDTH;
 8017b9e:	f04f 08e0 	mov.w	r8, #224	; 0xe0
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8017ba2:	f8c4 ab54 	str.w	sl, [r4, #2900]	; 0xb54
  TestRunCtxt_Ptr->PerformCapture=1;
 8017ba6:	f8c4 9b60 	str.w	r9, [r4, #2912]	; 0xb60
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8017baa:	f884 9b64 	strb.w	r9, [r4, #2916]	; 0xb64
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8017bae:	f8c4 1b5c 	str.w	r1, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8017bb2:	f8c4 bb58 	str.w	fp, [r4, #2904]	; 0xb58
  TestRunCtxt_Ptr->rb_swap=0;
 8017bb6:	f8c4 7b68 	str.w	r7, [r4, #2920]	; 0xb68
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017bba:	7829      	ldrb	r1, [r5, #0]
 8017bbc:	f7eb ffd8 	bl	8003b70 <TEST_Run>
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017bc0:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8017bc2:	f7ec ff05 	bl	80049d0 <UTILS_GetTimeStamp>
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
 8017bc6:	f44f 7320 	mov.w	r3, #640	; 0x280
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017bca:	9000      	str	r0, [sp, #0]
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017bcc:	e9d5 1c17 	ldrd	r1, ip, [r5, #92]	; 0x5c
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8017bd0:	684a      	ldr	r2, [r1, #4]
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 8017bd2:	4660      	mov	r0, ip
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017bd4:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8017bd8:	63b2      	str	r2, [r6, #56]	; 0x38
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
 8017bda:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
 8017bde:	e9c6 3a0b 	strd	r3, sl, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
 8017be2:	e9c6 b111 	strd	fp, r1, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
 8017be6:	e9c6 880f 	strd	r8, r8, [r6, #60]	; 0x3c
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 8017bea:	f7e9 feab 	bl	8001944 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017bee:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8017bf0:	f7ec feee 	bl	80049d0 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8017bf4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8017bf6:	465a      	mov	r2, fp
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017bf8:	4682      	mov	sl, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8017bfa:	f44f 31c4 	mov.w	r1, #100352	; 0x18800
 8017bfe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8017c00:	f7ec ffa4 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8017c04:	6e29      	ldr	r1, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8017c06:	4a44      	ldr	r2, [pc, #272]	; (8017d18 <Run_Preprocessing+0x1b0>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 8017c08:	f44f 33c4 	mov.w	r3, #100352	; 0x18800
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8017c0c:	6c89      	ldr	r1, [r1, #72]	; 0x48
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8017c0e:	f102 0020 	add.w	r0, r2, #32
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8017c12:	f884 9b64 	strb.w	r9, [r4, #2916]	; 0xb64
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 8017c16:	f8c4 3b5c 	str.w	r3, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8017c1a:	f8c4 8b50 	str.w	r8, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8017c1e:	f8c4 8b54 	str.w	r8, [r4, #2900]	; 0xb54
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8017c22:	f8c4 0b4c 	str.w	r0, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8017c26:	f8c4 1b48 	str.w	r1, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017c2a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8017c2c:	f8c4 bb58 	str.w	fp, [r4, #2904]	; 0xb58
  TestRunCtxt_Ptr->PerformCapture=0;
 8017c30:	f8c4 7b60 	str.w	r7, [r4, #2912]	; 0xb60
  TestRunCtxt_Ptr->rb_swap=0;
 8017c34:	f8c4 7b68 	str.w	r7, [r4, #2920]	; 0xb68
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017c38:	7829      	ldrb	r1, [r5, #0]
 8017c3a:	f7eb ff99 	bl	8003b70 <TEST_Run>
  
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017c3e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8017c40:	f7ec fec6 	bl	80049d0 <UTILS_GetTimeStamp>
  
  /*************************************/
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017c44:	6e29      	ldr	r1, [r5, #96]	; 0x60
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017c46:	9001      	str	r0, [sp, #4]
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017c48:	6c8b      	ldr	r3, [r1, #72]	; 0x48
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->red_blue_swap=1;
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 8017c4a:	4608      	mov	r0, r1
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 8017c4c:	6a89      	ldr	r1, [r1, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017c4e:	61b3      	str	r3, [r6, #24]
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 8017c50:	62b1      	str	r1, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
 8017c52:	e9c6 7800 	strd	r7, r8, [r6]
  PreprocCtxt_Ptr->Pfc_Src_Img.w=AI_NETWORK_WIDTH;
 8017c56:	e9c6 9802 	strd	r9, r8, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Src_Img.bpp=IMAGE_BPP_RGB565;
 8017c5a:	e9c6 8b04 	strd	r8, fp, [r6, #16]
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
 8017c5e:	e9c6 8807 	strd	r8, r8, [r6, #28]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 8017c62:	f7e9 fe83 	bl	800196c <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017c66:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8017c68:	f7ec feb2 	bl	80049d0 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8017c6c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8017c6e:	464a      	mov	r2, r9
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017c70:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8017c72:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
 8017c76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8017c78:	f7ec ff68 	bl	8004b4c <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8017c7c:	6e29      	ldr	r1, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8017c7e:	4a26      	ldr	r2, [pc, #152]	; (8017d18 <Run_Preprocessing+0x1b0>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 8017c80:	f44f 3013 	mov.w	r0, #150528	; 0x24c00
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8017c84:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8017c88:	3240      	adds	r2, #64	; 0x40
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8017c8a:	f884 9b64 	strb.w	r9, [r4, #2916]	; 0xb64
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8017c8e:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8017c92:	f8c4 2b4c 	str.w	r2, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8017c96:	f8c4 8b50 	str.w	r8, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8017c9a:	f8c4 8b54 	str.w	r8, [r4, #2900]	; 0xb54
  TestRunCtxt_Ptr->rb_swap=1;
 8017c9e:	f8c4 9b68 	str.w	r9, [r4, #2920]	; 0xb68
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 8017ca2:	f8c4 0b5c 	str.w	r0, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8017ca6:	f8c4 1b58 	str.w	r1, [r4, #2904]	; 0xb58
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017caa:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
  TestRunCtxt_Ptr->PerformCapture=0;
 8017cac:	f8c4 7b60 	str.w	r7, [r4, #2912]	; 0xb60
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017cb0:	7829      	ldrb	r1, [r5, #0]
 8017cb2:	f7eb ff5d 	bl	8003b70 <TEST_Run>

  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017cb6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8017cb8:	f7ec fe8a 	bl	80049d0 <UTILS_GetTimeStamp>
#ifdef OBJECTDETECT
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
#else
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
 8017cbc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017cbe:	4681      	mov	r9, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
 8017cc0:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8017cc2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8017cc4:	f7e8 ff48 	bl	8000b58 <AI_PixelValueConversion>
#endif /* OBJECTDETECT */

  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017cc8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8017cca:	f7ec fe81 	bl	80049d0 <UTILS_GetTimeStamp>
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
  TestRunCtxt_Ptr->src_buff_name="";
 8017cce:	4a13      	ldr	r2, [pc, #76]	; (8017d1c <Run_Preprocessing+0x1b4>)
  TestRunCtxt_Ptr->src_width_size=0;
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=0;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8017cd0:	f884 7b64 	strb.w	r7, [r4, #2916]	; 0xb64
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017cd4:	4680      	mov	r8, r0
  TestRunCtxt_Ptr->src_buff_name="";
 8017cd6:	f8c4 2b4c 	str.w	r2, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017cda:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 8017cdc:	f8c4 7b48 	str.w	r7, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_width_size=0;
 8017ce0:	f8c4 7b50 	str.w	r7, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=0;
 8017ce4:	f8c4 7b54 	str.w	r7, [r4, #2900]	; 0xb54
  TestRunCtxt_Ptr->src_size=0;
 8017ce8:	f8c4 7b5c 	str.w	r7, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->PerformCapture=0;
 8017cec:	f8c4 7b60 	str.w	r7, [r4, #2912]	; 0xb60
  TestRunCtxt_Ptr->rb_swap=0;
 8017cf0:	f8c4 7b68 	str.w	r7, [r4, #2920]	; 0xb68
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017cf4:	7829      	ldrb	r1, [r5, #0]
 8017cf6:	f7eb ff3b 	bl	8003b70 <TEST_Run>
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8017cfa:	9900      	ldr	r1, [sp, #0]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8017cfc:	9b01      	ldr	r3, [sp, #4]
 8017cfe:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8017d00:	ebaa 0001 	sub.w	r0, sl, r1
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8017d04:	1af3      	subs	r3, r6, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 8017d06:	eba8 0109 	sub.w	r1, r8, r9
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8017d0a:	e9c2 0301 	strd	r0, r3, [r2, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 8017d0e:	60d1      	str	r1, [r2, #12]
}
 8017d10:	b003      	add	sp, #12
 8017d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d16:	bf00      	nop
 8017d18:	24000054 	.word	0x24000054
 8017d1c:	080246c0 	.word	0x080246c0

08017d20 <Image_CheckResizeMemoryLayout>:

bool Image_CheckResizeMemoryLayout(image_t *src_img, image_t *dst_img)
{
 8017d20:	b570      	push	{r4, r5, r6, lr}
 8017d22:	460c      	mov	r4, r1
 8017d24:	4606      	mov	r6, r0
  uint32_t src_size = STM32Ipl_ImageDataSize(src_img);
 8017d26:	f000 f84b 	bl	8017dc0 <STM32Ipl_ImageDataSize>
 8017d2a:	4605      	mov	r5, r0
  uint32_t dst_size = STM32Ipl_ImageDataSize(dst_img);
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	f000 f847 	bl	8017dc0 <STM32Ipl_ImageDataSize>
  uint32_t src_start = (uint32_t)src_img->data;
  uint32_t dst_start = (uint32_t)dst_img->data;
 8017d32:	68e4      	ldr	r4, [r4, #12]
  uint32_t src_end = src_start + src_size - 1;
 8017d34:	68f2      	ldr	r2, [r6, #12]
  uint32_t dst_end = dst_start + dst_size - 1;
 8017d36:	1e61      	subs	r1, r4, #1
  uint32_t src_end = src_start + src_size - 1;
 8017d38:	3a01      	subs	r2, #1
  uint32_t dst_end = dst_start + dst_size - 1;
 8017d3a:	4408      	add	r0, r1
  uint32_t src_end = src_start + src_size - 1;
 8017d3c:	442a      	add	r2, r5
  {
    reverse = false; /* ((src_start >= dst_start) || (src_end <= dst_start)) */
  }

  return reverse;
}
 8017d3e:	4282      	cmp	r2, r0
 8017d40:	bf98      	it	ls
 8017d42:	4294      	cmpls	r4, r2
 8017d44:	bf34      	ite	cc
 8017d46:	2001      	movcc	r0, #1
 8017d48:	2000      	movcs	r0, #0
 8017d4a:	bd70      	pop	{r4, r5, r6, pc}

08017d4c <STM32Ipl_InitLib>:
 * @param memAddr	Address of the memory buffer allocated to STM32IPL for its internal purposes.
 * @param memSize	Size of the memory buffer (bytes).
 * @return			void.
 */
void STM32Ipl_InitLib(void *memAddr, uint32_t memSize)
{
 8017d4c:	b508      	push	{r3, lr}
	umm_init(memAddr, memSize);
 8017d4e:	f001 ffdd 	bl	8019d0c <umm_init>
	fb_init();
}
 8017d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fb_init();
 8017d56:	f001 bd6d 	b.w	8019834 <fb_init>
 8017d5a:	bf00      	nop

08017d5c <STM32Ipl_Init>:
 * @param data		Pointer to the pixel data assigned to image.
 * @return			void.
 */
void STM32Ipl_Init(image_t *img, uint32_t width, uint32_t height, image_bpp_t format, void *data)
{
	if (img) {
 8017d5c:	b120      	cbz	r0, 8017d68 <STM32Ipl_Init+0xc>
		img->w = width;
		img->h = height;
		img->bpp = format;
 8017d5e:	6083      	str	r3, [r0, #8]
		img->data = data;
 8017d60:	9b00      	ldr	r3, [sp, #0]
		img->h = height;
 8017d62:	e9c0 1200 	strd	r1, r2, [r0]
		img->data = data;
 8017d66:	60c3      	str	r3, [r0, #12]
	}
}
 8017d68:	4770      	bx	lr
 8017d6a:	bf00      	nop

08017d6c <STM32Ipl_ReleaseData>:
 * @param img	Image.
 * @return		void.
 */
void STM32Ipl_ReleaseData(image_t *img)
{
	if (img) {
 8017d6c:	b150      	cbz	r0, 8017d84 <STM32Ipl_ReleaseData+0x18>
{
 8017d6e:	b510      	push	{r4, lr}
 8017d70:	4604      	mov	r4, r0
		xfree(img->data);
 8017d72:	68c0      	ldr	r0, [r0, #12]
 8017d74:	f001 fd5c 	bl	8019830 <xfree>
		img->w = width;
 8017d78:	2300      	movs	r3, #0
		img->h = height;
 8017d7a:	e9c4 3300 	strd	r3, r3, [r4]
		img->data = data;
 8017d7e:	e9c4 3302 	strd	r3, r3, [r4, #8]
		STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
	}
}
 8017d82:	bd10      	pop	{r4, pc}
 8017d84:	4770      	bx	lr
 8017d86:	bf00      	nop

08017d88 <STM32Ipl_DataSize>:
 * @param format	Image format.
 * @return			Size of the image data buffer (bytes), 0 in case of wrong/unsupported arguments.
 */
uint32_t STM32Ipl_DataSize(uint32_t width, uint32_t height, image_bpp_t format)
{
	switch ((uint32_t)format) {
 8017d88:	2a04      	cmp	r2, #4
 8017d8a:	d816      	bhi.n	8017dba <STM32Ipl_DataSize+0x32>
 8017d8c:	e8df f002 	tbb	[pc, r2]
 8017d90:	030c0306 	.word	0x030c0306
 8017d94:	10          	.byte	0x10
 8017d95:	00          	.byte	0x00
		case IMAGE_BPP_BINARY:
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);

		case IMAGE_BPP_GRAYSCALE:
			return width * height * sizeof(uint8_t);
 8017d96:	fb01 f000 	mul.w	r0, r1, r0
 8017d9a:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8017d9c:	301f      	adds	r0, #31
 8017d9e:	0940      	lsrs	r0, r0, #5
 8017da0:	fb01 f000 	mul.w	r0, r1, r0
 8017da4:	0080      	lsls	r0, r0, #2
 8017da6:	4770      	bx	lr

		case IMAGE_BPP_RGB565:
			return width * height * sizeof(uint16_t);
 8017da8:	fb01 f000 	mul.w	r0, r1, r0
 8017dac:	0040      	lsls	r0, r0, #1
 8017dae:	4770      	bx	lr

		case IMAGE_BPP_BAYER:
			return width * height * sizeof(uint8_t);

		case IMAGE_BPP_RGB888:
			return width * height * 3;
 8017db0:	fb01 f000 	mul.w	r0, r1, r0
 8017db4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017db8:	4770      	bx	lr
{
 8017dba:	2000      	movs	r0, #0
	}

	return 0;
}
 8017dbc:	4770      	bx	lr
 8017dbe:	bf00      	nop

08017dc0 <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8017dc0:	b150      	cbz	r0, 8017dd8 <STM32Ipl_ImageDataSize+0x18>
 8017dc2:	7a03      	ldrb	r3, [r0, #8]
 8017dc4:	e9d0 2000 	ldrd	r2, r0, [r0]
	switch ((uint32_t)format) {
 8017dc8:	2b04      	cmp	r3, #4
 8017dca:	d804      	bhi.n	8017dd6 <STM32Ipl_ImageDataSize+0x16>
 8017dcc:	e8df f003 	tbb	[pc, r3]
 8017dd0:	050e0508 	.word	0x050e0508
 8017dd4:	12          	.byte	0x12
 8017dd5:	00          	.byte	0x00
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8017dd6:	2000      	movs	r0, #0
}
 8017dd8:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 8017dda:	fb00 f002 	mul.w	r0, r0, r2
 8017dde:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8017de0:	321f      	adds	r2, #31
 8017de2:	0952      	lsrs	r2, r2, #5
 8017de4:	fb00 f002 	mul.w	r0, r0, r2
 8017de8:	0080      	lsls	r0, r0, #2
 8017dea:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 8017dec:	fb00 f002 	mul.w	r0, r0, r2
 8017df0:	0040      	lsls	r0, r0, #1
 8017df2:	4770      	bx	lr
			return width * height * 3;
 8017df4:	fb00 f002 	mul.w	r0, r0, r2
 8017df8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017dfc:	4770      	bx	lr
 8017dfe:	bf00      	nop

08017e00 <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 8017e00:	6883      	ldr	r3, [r0, #8]
 8017e02:	2b04      	cmp	r3, #4
 8017e04:	d810      	bhi.n	8017e28 <STM32Ipl_ImageFormatSupported+0x28>
 8017e06:	e8df f003 	tbb	[pc, r3]
 8017e0a:	0903      	.short	0x0903
 8017e0c:	0f0d      	.short	0x0f0d
 8017e0e:	0b          	.byte	0x0b
 8017e0f:	00          	.byte	0x00
 8017e10:	2301      	movs	r3, #1

		default:
			return false;
	}

	return (format & formats);
 8017e12:	4219      	tst	r1, r3
 8017e14:	bf14      	ite	ne
 8017e16:	2001      	movne	r0, #1
 8017e18:	2000      	moveq	r0, #0
 8017e1a:	4770      	bx	lr
	switch (img->bpp) {
 8017e1c:	2302      	movs	r3, #2
 8017e1e:	e7f8      	b.n	8017e12 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8017e20:	2308      	movs	r3, #8
 8017e22:	e7f6      	b.n	8017e12 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8017e24:	2304      	movs	r3, #4
 8017e26:	e7f4      	b.n	8017e12 <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 8017e28:	2000      	movs	r0, #0
}
 8017e2a:	4770      	bx	lr

08017e2c <STM32Ipl_CopyData>:
 * @param dst   Destination image; if it is not valid, an error is returned.
 * @return		stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_CopyData(const image_t *src, image_t *dst)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d033      	beq.n	8017e98 <STM32Ipl_CopyData+0x6c>
{
 8017e30:	b570      	push	{r4, r5, r6, lr}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017e32:	68c6      	ldr	r6, [r0, #12]
	STM32IPL_CHECK_VALID_IMAGE(dst)
 8017e34:	b36e      	cbz	r6, 8017e92 <STM32Ipl_CopyData+0x66>
 8017e36:	b361      	cbz	r1, 8017e92 <STM32Ipl_CopyData+0x66>
 8017e38:	68cd      	ldr	r5, [r1, #12]
 8017e3a:	b355      	cbz	r5, 8017e92 <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 8017e3c:	680b      	ldr	r3, [r1, #0]
 8017e3e:	6804      	ldr	r4, [r0, #0]
 8017e40:	429c      	cmp	r4, r3
 8017e42:	d126      	bne.n	8017e92 <STM32Ipl_CopyData+0x66>
 8017e44:	684b      	ldr	r3, [r1, #4]
 8017e46:	6842      	ldr	r2, [r0, #4]
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d122      	bne.n	8017e92 <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 8017e4c:	6889      	ldr	r1, [r1, #8]
 8017e4e:	6883      	ldr	r3, [r0, #8]
 8017e50:	428b      	cmp	r3, r1
 8017e52:	d11e      	bne.n	8017e92 <STM32Ipl_CopyData+0x66>
	switch ((uint32_t)format) {
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	2b04      	cmp	r3, #4
 8017e58:	d821      	bhi.n	8017e9e <STM32Ipl_CopyData+0x72>
 8017e5a:	e8df f003 	tbb	[pc, r3]
 8017e5e:	030b      	.short	0x030b
 8017e60:	0311      	.short	0x0311
 8017e62:	15          	.byte	0x15
 8017e63:	00          	.byte	0x00
			return width * height * sizeof(uint8_t);
 8017e64:	fb02 f204 	mul.w	r2, r2, r4

	memcpy(dst->data, src->data, STM32Ipl_ImageDataSize(dst));
 8017e68:	4631      	mov	r1, r6
 8017e6a:	4628      	mov	r0, r5
 8017e6c:	f008 fe32 	bl	8020ad4 <memcpy>

	return stm32ipl_err_Ok;
 8017e70:	2000      	movs	r0, #0
}
 8017e72:	bd70      	pop	{r4, r5, r6, pc}
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8017e74:	341f      	adds	r4, #31
 8017e76:	0964      	lsrs	r4, r4, #5
 8017e78:	fb02 f204 	mul.w	r2, r2, r4
 8017e7c:	0092      	lsls	r2, r2, #2
 8017e7e:	e7f3      	b.n	8017e68 <STM32Ipl_CopyData+0x3c>
			return width * height * sizeof(uint16_t);
 8017e80:	fb02 f204 	mul.w	r2, r2, r4
 8017e84:	0052      	lsls	r2, r2, #1
 8017e86:	e7ef      	b.n	8017e68 <STM32Ipl_CopyData+0x3c>
			return width * height * 3;
 8017e88:	fb02 f204 	mul.w	r2, r2, r4
 8017e8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e90:	e7ea      	b.n	8017e68 <STM32Ipl_CopyData+0x3c>
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017e92:	f06f 0001 	mvn.w	r0, #1
}
 8017e96:	bd70      	pop	{r4, r5, r6, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017e98:	f06f 0001 	mvn.w	r0, #1
}
 8017e9c:	4770      	bx	lr
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	e7e2      	b.n	8017e68 <STM32Ipl_CopyData+0x3c>
 8017ea2:	bf00      	nop

08017ea4 <writeBmpHeader>:
 * paletteColorUsed	The number of palette items used.
 * return stm32ipl_err_Ok on success, errors otherwise.
 */
static stm32ipl_err_t writeBmpHeader(FIL *fp, uint32_t width, uint32_t height, uint32_t dataOffset, uint32_t lineSize,
		uint32_t bitsPP, uint32_t compression, uint32_t paletteColorUsed)
{
 8017ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ea8:	b091      	sub	sp, #68	; 0x44
 8017eaa:	460f      	mov	r7, r1
 8017eac:	4615      	mov	r5, r2
 8017eae:	4606      	mov	r6, r0
 8017eb0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
	uint8_t header[54];
	uint32_t fileSize;
	uint32_t imageSize;
	UINT bytesWritten;

	memset(&header, 0, 54);
 8017eb2:	2232      	movs	r2, #50	; 0x32
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	a803      	add	r0, sp, #12

	imageSize = lineSize * height;
 8017eb8:	fb05 f404 	mul.w	r4, r5, r4
{
 8017ebc:	4698      	mov	r8, r3
	header[14] = 40;

	/* biWidth. */
	header[18] = (uint8_t)((width & 0XFF));
	header[19] = (uint8_t)((width >> 8) & 0xFF);
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8017ebe:	ea4f 4b17 	mov.w	fp, r7, lsr #16
	header[23] = (uint8_t)((height >> 8) & 0xFF);
	header[24] = (uint8_t)((height >> 16) & 0xFF);
	header[25] = (uint8_t)((height >> 24) & 0xFF);

	/* biPlanes. */
	header[26] = 1;
 8017ec2:	f04f 0a01 	mov.w	sl, #1
	memset(&header, 0, 54);
 8017ec6:	f008 fe2d 	bl	8020b24 <memset>
	header[18] = (uint8_t)((width & 0XFF));
 8017eca:	f8ad 701a 	strh.w	r7, [sp, #26]
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 8017ece:	0e3a      	lsrs	r2, r7, #24

	/* biBitCount. */
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8017ed0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
	fileSize = dataOffset + imageSize;
 8017ed2:	eb04 0308 	add.w	r3, r4, r8
	header[30] = (uint8_t)compression;

	/* biSizeImage. */
	header[34] = (uint8_t)((imageSize & 0XFF));
	header[35] = (uint8_t)((imageSize >> 8) & 0xFF);
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 8017ed6:	0c20      	lsrs	r0, r4, #16
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8017ed8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 8017edc:	ea4f 4915 	mov.w	r9, r5, lsr #16
	header[30] = (uint8_t)compression;
 8017ee0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 8017ee2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	header[2] = (uint8_t)((fileSize & 0XFF));
 8017ee6:	f8ad 300a 	strh.w	r3, [sp, #10]
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 8017eea:	0e1b      	lsrs	r3, r3, #24
	header[30] = (uint8_t)compression;
 8017eec:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	header[0] = 'B';
 8017ef0:	f644 5e42 	movw	lr, #19778	; 0x4d42
	header[43] = (uint8_t)((2835 >> 8) & 0xFF);
	header[44] = (uint8_t)((2835 >> 16) & 0xFF);
	header[45] = (uint8_t)((2835 >> 24) & 0xFF);

	/* biClrUsed. */
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8017ef4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
	header[49] = (uint8_t)((paletteColorUsed >> 24) & 0xFF);

	/* biClrImportant. */
	//header[50] = 0;
	/* Write header */
	res = f_write(fp, header, 14, &bytesWritten);
 8017ef6:	a902      	add	r1, sp, #8
	header[34] = (uint8_t)((imageSize & 0XFF));
 8017ef8:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8017efc:	0e24      	lsrs	r4, r4, #24
	header[10] = (uint8_t)((dataOffset & 0XFF));
 8017efe:	f8ad 8012 	strh.w	r8, [sp, #18]
	header[14] = 40;
 8017f02:	f04f 0828 	mov.w	r8, #40	; 0x28
	header[22] = (uint8_t)((height & 0XFF));
 8017f06:	f8ad 501e 	strh.w	r5, [sp, #30]
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 8017f0a:	0e2d      	lsrs	r5, r5, #24
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8017f0c:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
	header[12] = (uint8_t)((dataOffset >> 16) & 0xFF);
 8017f10:	2700      	movs	r7, #0
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 8017f12:	f88d c00c 	strb.w	ip, [sp, #12]
	header[38] = (uint8_t)((2835 & 0XFF));
 8017f16:	f640 3c13 	movw	ip, #2835	; 0xb13
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 8017f1a:	f88d 300d 	strb.w	r3, [sp, #13]
	res = f_write(fp, header, 14, &bytesWritten);
 8017f1e:	ab01      	add	r3, sp, #4
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 8017f20:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
	res = f_write(fp, header, 14, &bytesWritten);
 8017f24:	4630      	mov	r0, r6
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 8017f26:	f88d 201d 	strb.w	r2, [sp, #29]
	res = f_write(fp, header, 14, &bytesWritten);
 8017f2a:	220e      	movs	r2, #14
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8017f2c:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8017f30:	f88d b01c 	strb.w	fp, [sp, #28]
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 8017f34:	f88d 9020 	strb.w	r9, [sp, #32]
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 8017f38:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
	header[0] = 'B';
 8017f3c:	f8ad e008 	strh.w	lr, [sp, #8]
	header[12] = (uint8_t)((dataOffset >> 16) & 0xFF);
 8017f40:	f8ad 7014 	strh.w	r7, [sp, #20]
	header[29] = (uint8_t)((bitsPP >> 8) & 0xFF);
 8017f44:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	header[48] = (uint8_t)((paletteColorUsed >> 16) & 0xFF);
 8017f48:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
	header[14] = 40;
 8017f4c:	f88d 8016 	strb.w	r8, [sp, #22]
	header[26] = 1;
 8017f50:	f88d a022 	strb.w	sl, [sp, #34]	; 0x22
	header[38] = (uint8_t)((2835 & 0XFF));
 8017f54:	f8cd c02e 	str.w	ip, [sp, #46]	; 0x2e
 8017f58:	f8cd c032 	str.w	ip, [sp, #50]	; 0x32
	res = f_write(fp, header, 14, &bytesWritten);
 8017f5c:	f7fe fbf2 	bl	8016744 <f_write>
	if (res != FR_OK || bytesWritten != 14)
 8017f60:	b980      	cbnz	r0, 8017f84 <writeBmpHeader+0xe0>
 8017f62:	9b01      	ldr	r3, [sp, #4]
 8017f64:	2b0e      	cmp	r3, #14
 8017f66:	d10d      	bne.n	8017f84 <writeBmpHeader+0xe0>
		return stm32ipl_err_WritingFile;

	res = f_write(fp, header + 14, 40, &bytesWritten);
 8017f68:	ab01      	add	r3, sp, #4
 8017f6a:	4642      	mov	r2, r8
 8017f6c:	4630      	mov	r0, r6
 8017f6e:	f10d 0116 	add.w	r1, sp, #22
 8017f72:	f7fe fbe7 	bl	8016744 <f_write>
	if (res != FR_OK || bytesWritten != 40)
 8017f76:	b928      	cbnz	r0, 8017f84 <writeBmpHeader+0xe0>
 8017f78:	9b01      	ldr	r3, [sp, #4]
 8017f7a:	4543      	cmp	r3, r8
 8017f7c:	d102      	bne.n	8017f84 <writeBmpHeader+0xe0>
		return stm32ipl_err_WritingFile;

	return stm32ipl_err_Ok;
}
 8017f7e:	b011      	add	sp, #68	; 0x44
 8017f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return stm32ipl_err_WritingFile;
 8017f84:	f06f 0008 	mvn.w	r0, #8
 8017f88:	e7f9      	b.n	8017f7e <writeBmpHeader+0xda>
 8017f8a:	bf00      	nop

08017f8c <saveBmp>:
 * img		Image to be saved.
 * filename	Name of the output file.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t saveBmp(const image_t *img, const char *filename)
{
 8017f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f90:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8017f94:	4605      	mov	r5, r0
	UINT bytesWritten;

	width = img->w;
	height = img->h;

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8017f96:	220a      	movs	r2, #10
 8017f98:	a808      	add	r0, sp, #32
	height = img->h;
 8017f9a:	e9d5 6900 	ldrd	r6, r9, [r5]
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8017f9e:	f7fe f81b 	bl	8015fd8 <f_open>
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	f040 81a7 	bne.w	80182f6 <saveBmp+0x36a>
		return stm32ipl_err_OpeningFile;

	switch (img->bpp) {
 8017fa8:	68ab      	ldr	r3, [r5, #8]
 8017faa:	2b04      	cmp	r3, #4
 8017fac:	f200 815f 	bhi.w	801826e <saveBmp+0x2e2>
 8017fb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017fb4:	00b40048 	.word	0x00b40048
 8017fb8:	015d00eb 	.word	0x015d00eb
 8017fbc:	0005      	.short	0x0005

			break;
		}

		case IMAGE_BPP_RGB888: {
			uint32_t dataLen = width * 3;
 8017fbe:	eb06 0846 	add.w	r8, r6, r6, lsl #1
			lineSize = (((width * 24) + 31) / 32) * 4;
			padding = lineSize - dataLen;

			/* Header. */
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	2218      	movs	r2, #24
 8017fc6:	4631      	mov	r1, r6
			lineSize = (((width * 24) + 31) / 32) * 4;
 8017fc8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8017fcc:	a808      	add	r0, sp, #32
 8017fce:	9201      	str	r2, [sp, #4]
 8017fd0:	464a      	mov	r2, r9
			lineSize = (((width * 24) + 31) / 32) * 4;
 8017fd2:	371f      	adds	r7, #31
 8017fd4:	097f      	lsrs	r7, r7, #5
 8017fd6:	00bc      	lsls	r4, r7, #2
			padding = lineSize - dataLen;
 8017fd8:	ebc8 0787 	rsb	r7, r8, r7, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8017fdc:	9400      	str	r4, [sp, #0]
 8017fde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017fe2:	2336      	movs	r3, #54	; 0x36
 8017fe4:	f7ff ff5e 	bl	8017ea4 <writeBmpHeader>
 8017fe8:	bb18      	cbnz	r0, 8018032 <saveBmp+0xa6>
				f_close(&fp);
				return stm32ipl_err_WritingFile;
			}

			for (int32_t i = height - 1; i >= 0; i--) {
 8017fea:	f1b9 0601 	subs.w	r6, r9, #1
 8017fee:	f100 8090 	bmi.w	8018112 <saveBmp+0x186>
 8017ff2:	fb08 f906 	mul.w	r9, r8, r6
 8017ff6:	f10d 0a18 	add.w	sl, sp, #24
				uint8_t *data = img->data + i * dataLen;
 8017ffa:	68e9      	ldr	r1, [r5, #12]

				/* Image data. */
				res = f_write(&fp, data, dataLen, &bytesWritten);
 8017ffc:	4653      	mov	r3, sl
 8017ffe:	4642      	mov	r2, r8
 8018000:	a808      	add	r0, sp, #32
 8018002:	4449      	add	r1, r9
 8018004:	f7fe fb9e 	bl	8016744 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8018008:	b998      	cbnz	r0, 8018032 <saveBmp+0xa6>
 801800a:	f8da 3000 	ldr.w	r3, [sl]
 801800e:	4543      	cmp	r3, r8
 8018010:	d10f      	bne.n	8018032 <saveBmp+0xa6>
					f_close(&fp);
					return stm32ipl_err_WritingFile;
				}

				/* Padding. */
				for (uint32_t j = 0; j < padding; j++) {
 8018012:	2f00      	cmp	r7, #0
 8018014:	f000 8134 	beq.w	8018280 <saveBmp+0x2f4>
 8018018:	4604      	mov	r4, r0
 801801a:	e002      	b.n	8018022 <saveBmp+0x96>
 801801c:	42a7      	cmp	r7, r4
 801801e:	f000 812f 	beq.w	8018280 <saveBmp+0x2f4>
					if (1 != f_putc(0, &fp)) {
 8018022:	a908      	add	r1, sp, #32
 8018024:	2000      	movs	r0, #0
 8018026:	f7ff fa43 	bl	80174b0 <f_putc>
 801802a:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 801802c:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8018030:	d0f4      	beq.n	801801c <saveBmp+0x90>
				f_close(&fp);
 8018032:	a808      	add	r0, sp, #32
 8018034:	f7fe fce6 	bl	8016a04 <f_close>
				return stm32ipl_err_WritingFile;
 8018038:	f06f 0008 	mvn.w	r0, #8
	};

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 801803c:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8018040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lineSize = (((width) + 31) / 32) * 4;
 8018044:	f106 081f 	add.w	r8, r6, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018048:	2202      	movs	r2, #2
			uint32_t palette = 0;
 801804a:	2400      	movs	r4, #0
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 801804c:	2301      	movs	r3, #1
			lineSize = (((width) + 31) / 32) * 4;
 801804e:	ea4f 1858 	mov.w	r8, r8, lsr #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018052:	9203      	str	r2, [sp, #12]
 8018054:	9301      	str	r3, [sp, #4]
 8018056:	4631      	mov	r1, r6
			lineSize = (((width) + 31) / 32) * 4;
 8018058:	fa08 f802 	lsl.w	r8, r8, r2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 801805c:	233e      	movs	r3, #62	; 0x3e
 801805e:	464a      	mov	r2, r9
 8018060:	a808      	add	r0, sp, #32
 8018062:	9402      	str	r4, [sp, #8]
 8018064:	f8cd 8000 	str.w	r8, [sp]
			uint32_t palette = 0;
 8018068:	9407      	str	r4, [sp, #28]
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 801806a:	f7ff ff1b 	bl	8017ea4 <writeBmpHeader>
 801806e:	2800      	cmp	r0, #0
 8018070:	d1df      	bne.n	8018032 <saveBmp+0xa6>
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8018072:	f10d 0a18 	add.w	sl, sp, #24
 8018076:	2204      	movs	r2, #4
 8018078:	a907      	add	r1, sp, #28
 801807a:	a808      	add	r0, sp, #32
 801807c:	4653      	mov	r3, sl
 801807e:	f7fe fb61 	bl	8016744 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 8018082:	2800      	cmp	r0, #0
 8018084:	d1d5      	bne.n	8018032 <saveBmp+0xa6>
 8018086:	f8da 2000 	ldr.w	r2, [sl]
 801808a:	2a04      	cmp	r2, #4
 801808c:	d1d1      	bne.n	8018032 <saveBmp+0xa6>
			palette = 0xFFFFFF;
 801808e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8018092:	a907      	add	r1, sp, #28
 8018094:	4653      	mov	r3, sl
			palette = 0xFFFFFF;
 8018096:	9007      	str	r0, [sp, #28]
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8018098:	a808      	add	r0, sp, #32
 801809a:	f7fe fb53 	bl	8016744 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 801809e:	2800      	cmp	r0, #0
 80180a0:	d1c7      	bne.n	8018032 <saveBmp+0xa6>
 80180a2:	f8da 3000 	ldr.w	r3, [sl]
 80180a6:	2b04      	cmp	r3, #4
 80180a8:	d1c3      	bne.n	8018032 <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 80180aa:	f1b9 0601 	subs.w	r6, r9, #1
 80180ae:	d430      	bmi.n	8018112 <saveBmp+0x186>
 80180b0:	fb08 f906 	mul.w	r9, r8, r6
				uint8_t *srcData = img->data + offset;
 80180b4:	68ec      	ldr	r4, [r5, #12]
				for (uint32_t j = 0; j < lineSize; j++) {
 80180b6:	f1b8 0f00 	cmp.w	r8, #0
 80180ba:	d025      	beq.n	8018108 <saveBmp+0x17c>
 80180bc:	eb04 0708 	add.w	r7, r4, r8
 80180c0:	444c      	add	r4, r9
 80180c2:	444f      	add	r7, r9
					uint8_t dstData = reverse8(*(srcData + j));
 80180c4:	f814 2b01 	ldrb.w	r2, [r4], #1
	int size = sizeof(val) * CHAR_BIT - 1;
 80180c8:	f04f 0c07 	mov.w	ip, #7
	for (val >>= 1; val; val >>= 1) {
 80180cc:	0853      	lsrs	r3, r2, #1
 80180ce:	d008      	beq.n	80180e2 <saveBmp+0x156>
		rev |= val & 1;
 80180d0:	f003 0101 	and.w	r1, r3, #1
	for (val >>= 1; val; val >>= 1) {
 80180d4:	085b      	lsrs	r3, r3, #1
		size--;
 80180d6:	f10c 3cff 	add.w	ip, ip, #4294967295
		rev |= val & 1;
 80180da:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
 80180de:	b2d2      	uxtb	r2, r2
	for (val >>= 1; val; val >>= 1) {
 80180e0:	d1f6      	bne.n	80180d0 <saveBmp+0x144>
	rev <<= size;
 80180e2:	fa02 fc0c 	lsl.w	ip, r2, ip
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 80180e6:	4653      	mov	r3, sl
 80180e8:	2201      	movs	r2, #1
 80180ea:	f10d 0117 	add.w	r1, sp, #23
 80180ee:	a808      	add	r0, sp, #32
	rev <<= size;
 80180f0:	f88d c017 	strb.w	ip, [sp, #23]
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 80180f4:	f7fe fb26 	bl	8016744 <f_write>
					if (res != FR_OK || bytesWritten != 1) {
 80180f8:	2800      	cmp	r0, #0
 80180fa:	d19a      	bne.n	8018032 <saveBmp+0xa6>
 80180fc:	f8da 3000 	ldr.w	r3, [sl]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d196      	bne.n	8018032 <saveBmp+0xa6>
				for (uint32_t j = 0; j < lineSize; j++) {
 8018104:	42bc      	cmp	r4, r7
 8018106:	d1dd      	bne.n	80180c4 <saveBmp+0x138>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018108:	3e01      	subs	r6, #1
 801810a:	eba9 0908 	sub.w	r9, r9, r8
 801810e:	1c72      	adds	r2, r6, #1
 8018110:	d1d0      	bne.n	80180b4 <saveBmp+0x128>
	f_close(&fp);
 8018112:	a808      	add	r0, sp, #32
 8018114:	f7fe fc76 	bl	8016a04 <f_close>
	return stm32ipl_err_Ok;
 8018118:	2000      	movs	r0, #0
 801811a:	e78f      	b.n	801803c <saveBmp+0xb0>
			lineSize = (((width * 8) + 31) / 32) * 4;
 801811c:	ea4f 08c6 	mov.w	r8, r6, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018124:	2300      	movs	r3, #0
 8018126:	2208      	movs	r2, #8
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018128:	f108 081f 	add.w	r8, r8, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 801812c:	a808      	add	r0, sp, #32
 801812e:	9201      	str	r2, [sp, #4]
 8018130:	464a      	mov	r2, r9
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018132:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018136:	ea4f 0888 	mov.w	r8, r8, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 801813a:	e9cd 3102 	strd	r3, r1, [sp, #8]
 801813e:	f8cd 8000 	str.w	r8, [sp]
 8018142:	f240 4336 	movw	r3, #1078	; 0x436
 8018146:	4631      	mov	r1, r6
 8018148:	f7ff feac 	bl	8017ea4 <writeBmpHeader>
 801814c:	2800      	cmp	r0, #0
 801814e:	f47f af70 	bne.w	8018032 <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 8018152:	4604      	mov	r4, r0
 8018154:	f10d 0a18 	add.w	sl, sp, #24
 8018158:	e008      	b.n	801816c <saveBmp+0x1e0>
				if (res != FR_OK || bytesWritten != 4) {
 801815a:	f8da 3000 	ldr.w	r3, [sl]
 801815e:	2b04      	cmp	r3, #4
 8018160:	f47f af67 	bne.w	8018032 <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 8018164:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8018168:	f000 8098 	beq.w	801829c <saveBmp+0x310>
				uint32_t value = (i << 16) | (i << 8) | i;
 801816c:	0427      	lsls	r7, r4, #16
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 801816e:	4653      	mov	r3, sl
 8018170:	2204      	movs	r2, #4
 8018172:	a907      	add	r1, sp, #28
				uint32_t value = (i << 16) | (i << 8) | i;
 8018174:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8018178:	a808      	add	r0, sp, #32
				uint32_t value = (i << 16) | (i << 8) | i;
 801817a:	4327      	orrs	r7, r4
			for (uint32_t i = 0; i < 256; i++) {
 801817c:	3401      	adds	r4, #1
				uint32_t value = (i << 16) | (i << 8) | i;
 801817e:	9707      	str	r7, [sp, #28]
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8018180:	f7fe fae0 	bl	8016744 <f_write>
				if (res != FR_OK || bytesWritten != 4) {
 8018184:	2800      	cmp	r0, #0
 8018186:	d0e8      	beq.n	801815a <saveBmp+0x1ce>
 8018188:	e753      	b.n	8018032 <saveBmp+0xa6>
			lineSize = (((width * 16) + 31) / 32) * 4;
 801818a:	0137      	lsls	r7, r6, #4
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 801818c:	2100      	movs	r1, #0
 801818e:	2303      	movs	r3, #3
 8018190:	2210      	movs	r2, #16
			lineSize = (((width * 16) + 31) / 32) * 4;
 8018192:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8018194:	a808      	add	r0, sp, #32
 8018196:	9201      	str	r2, [sp, #4]
 8018198:	464a      	mov	r2, r9
			lineSize = (((width * 16) + 31) / 32) * 4;
 801819a:	097f      	lsrs	r7, r7, #5
			uint32_t dataLen = width << 1;
 801819c:	ea4f 0b46 	mov.w	fp, r6, lsl #1
			lineSize = (((width * 16) + 31) / 32) * 4;
 80181a0:	00bf      	lsls	r7, r7, #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80181a2:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80181a6:	9700      	str	r7, [sp, #0]
 80181a8:	2342      	movs	r3, #66	; 0x42
 80181aa:	4631      	mov	r1, r6
			padding = lineSize - dataLen;
 80181ac:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80181b0:	f7ff fe78 	bl	8017ea4 <writeBmpHeader>
 80181b4:	2800      	cmp	r0, #0
 80181b6:	f47f af3c 	bne.w	8018032 <saveBmp+0xa6>
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80181ba:	f10d 0a18 	add.w	sl, sp, #24
			mask = 0xF800;
 80181be:	f44f 4478 	mov.w	r4, #63488	; 0xf800
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80181c2:	2204      	movs	r2, #4
 80181c4:	a907      	add	r1, sp, #28
 80181c6:	4653      	mov	r3, sl
 80181c8:	a808      	add	r0, sp, #32
			mask = 0xF800;
 80181ca:	9407      	str	r4, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80181cc:	f7fe faba 	bl	8016744 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 80181d0:	2800      	cmp	r0, #0
 80181d2:	f47f af2e 	bne.w	8018032 <saveBmp+0xa6>
 80181d6:	f8da 2000 	ldr.w	r2, [sl]
 80181da:	2a04      	cmp	r2, #4
 80181dc:	f47f af29 	bne.w	8018032 <saveBmp+0xa6>
			mask = 0x7E0;
 80181e0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80181e4:	4653      	mov	r3, sl
 80181e6:	a907      	add	r1, sp, #28
 80181e8:	a808      	add	r0, sp, #32
			mask = 0x7E0;
 80181ea:	9407      	str	r4, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80181ec:	f7fe faaa 	bl	8016744 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 80181f0:	2800      	cmp	r0, #0
 80181f2:	f47f af1e 	bne.w	8018032 <saveBmp+0xa6>
 80181f6:	f8da 2000 	ldr.w	r2, [sl]
 80181fa:	2a04      	cmp	r2, #4
 80181fc:	f47f af19 	bne.w	8018032 <saveBmp+0xa6>
			mask = 0x1F;
 8018200:	201f      	movs	r0, #31
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018202:	a907      	add	r1, sp, #28
 8018204:	4653      	mov	r3, sl
			mask = 0x1F;
 8018206:	9007      	str	r0, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018208:	a808      	add	r0, sp, #32
 801820a:	f7fe fa9b 	bl	8016744 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 801820e:	2800      	cmp	r0, #0
 8018210:	f47f af0f 	bne.w	8018032 <saveBmp+0xa6>
 8018214:	f8da 3000 	ldr.w	r3, [sl]
 8018218:	2b04      	cmp	r3, #4
 801821a:	f47f af0a 	bne.w	8018032 <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 801821e:	f1b9 0901 	subs.w	r9, r9, #1
 8018222:	f53f af76 	bmi.w	8018112 <saveBmp+0x186>
 8018226:	fb06 f809 	mul.w	r8, r6, r9
 801822a:	ebc6 73c6 	rsb	r3, r6, r6, lsl #31
 801822e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018232:	005e      	lsls	r6, r3, #1
				res = f_write(&fp, ((uint16_t*)img->data) + offset, dataLen, &bytesWritten);
 8018234:	68e9      	ldr	r1, [r5, #12]
 8018236:	4653      	mov	r3, sl
 8018238:	465a      	mov	r2, fp
 801823a:	a808      	add	r0, sp, #32
 801823c:	4441      	add	r1, r8
 801823e:	f7fe fa81 	bl	8016744 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8018242:	2800      	cmp	r0, #0
 8018244:	f47f aef5 	bne.w	8018032 <saveBmp+0xa6>
 8018248:	f8da 3000 	ldr.w	r3, [sl]
 801824c:	455b      	cmp	r3, fp
 801824e:	f47f aef0 	bne.w	8018032 <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 8018252:	b1e7      	cbz	r7, 801828e <saveBmp+0x302>
 8018254:	4604      	mov	r4, r0
 8018256:	e001      	b.n	801825c <saveBmp+0x2d0>
 8018258:	42a7      	cmp	r7, r4
 801825a:	d018      	beq.n	801828e <saveBmp+0x302>
					if (1 != f_putc(0, &fp)) {
 801825c:	a908      	add	r1, sp, #32
 801825e:	2000      	movs	r0, #0
 8018260:	f7ff f926 	bl	80174b0 <f_putc>
 8018264:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8018266:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 801826a:	d0f5      	beq.n	8018258 <saveBmp+0x2cc>
 801826c:	e6e1      	b.n	8018032 <saveBmp+0xa6>
			f_close(&fp);
 801826e:	a808      	add	r0, sp, #32
 8018270:	f7fe fbc8 	bl	8016a04 <f_close>
			return stm32ipl_err_InvalidParameter;
 8018274:	f06f 0001 	mvn.w	r0, #1
}
 8018278:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 801827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int32_t i = height - 1; i >= 0; i--) {
 8018280:	3e01      	subs	r6, #1
 8018282:	eba9 0908 	sub.w	r9, r9, r8
 8018286:	1c73      	adds	r3, r6, #1
 8018288:	f47f aeb7 	bne.w	8017ffa <saveBmp+0x6e>
 801828c:	e741      	b.n	8018112 <saveBmp+0x186>
			for (int32_t i = height - 1; i >= 0; i--) {
 801828e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018292:	44b0      	add	r8, r6
 8018294:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018298:	d1cc      	bne.n	8018234 <saveBmp+0x2a8>
 801829a:	e73a      	b.n	8018112 <saveBmp+0x186>
			for (int32_t i = height - 1; i >= 0; i--) {
 801829c:	f1b9 0901 	subs.w	r9, r9, #1
 80182a0:	f53f af37 	bmi.w	8018112 <saveBmp+0x186>
			padding = lineSize - width;
 80182a4:	eba8 0706 	sub.w	r7, r8, r6
 80182a8:	fb06 f809 	mul.w	r8, r6, r9
				res = f_write(&fp, img->data + offset, width, &bytesWritten);
 80182ac:	68e9      	ldr	r1, [r5, #12]
 80182ae:	4653      	mov	r3, sl
 80182b0:	4632      	mov	r2, r6
 80182b2:	a808      	add	r0, sp, #32
 80182b4:	4441      	add	r1, r8
 80182b6:	f7fe fa45 	bl	8016744 <f_write>
				if (res != FR_OK || bytesWritten != width) {
 80182ba:	2800      	cmp	r0, #0
 80182bc:	f47f aeb9 	bne.w	8018032 <saveBmp+0xa6>
 80182c0:	f8da 3000 	ldr.w	r3, [sl]
 80182c4:	42b3      	cmp	r3, r6
 80182c6:	f47f aeb4 	bne.w	8018032 <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 80182ca:	b167      	cbz	r7, 80182e6 <saveBmp+0x35a>
 80182cc:	4604      	mov	r4, r0
 80182ce:	e001      	b.n	80182d4 <saveBmp+0x348>
 80182d0:	42a7      	cmp	r7, r4
 80182d2:	d008      	beq.n	80182e6 <saveBmp+0x35a>
					if (1 != f_putc(0, &fp)) {
 80182d4:	a908      	add	r1, sp, #32
 80182d6:	2000      	movs	r0, #0
 80182d8:	f7ff f8ea 	bl	80174b0 <f_putc>
 80182dc:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 80182de:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 80182e2:	d0f5      	beq.n	80182d0 <saveBmp+0x344>
 80182e4:	e6a5      	b.n	8018032 <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 80182e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80182ea:	eba8 0806 	sub.w	r8, r8, r6
 80182ee:	f1b9 3fff 	cmp.w	r9, #4294967295
 80182f2:	d1db      	bne.n	80182ac <saveBmp+0x320>
 80182f4:	e70d      	b.n	8018112 <saveBmp+0x186>
		return stm32ipl_err_OpeningFile;
 80182f6:	f06f 0005 	mvn.w	r0, #5
 80182fa:	e69f      	b.n	801803c <saveBmp+0xb0>

080182fc <savePnm>:
 * filename	Name of the output file.
 * format	Format of the PNM file (6 if the input image is RGB565 or RGB888, 5 if it's Grayscale).
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t savePnm(const image_t *img, const char *filename, uint8_t format)
{
 80182fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018300:	4605      	mov	r5, r0
 8018302:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8018306:	460e      	mov	r6, r1
 8018308:	4613      	mov	r3, r2
	int32_t height;
	char text[64];
	UINT bytesWritten;
	uint32_t offset;

	width = img->w;
 801830a:	682f      	ldr	r7, [r5, #0]
	height = img->h;

	/* Write header. */
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 801830c:	2140      	movs	r1, #64	; 0x40
	height = img->h;
 801830e:	f8d5 8004 	ldr.w	r8, [r5, #4]
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018312:	a804      	add	r0, sp, #16
 8018314:	4a56      	ldr	r2, [pc, #344]	; (8018470 <savePnm+0x174>)
 8018316:	e9cd 7800 	strd	r7, r8, [sp]
 801831a:	f009 f907 	bl	802152c <sniprintf>

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 801831e:	4631      	mov	r1, r6
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018320:	4604      	mov	r4, r0
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018322:	220a      	movs	r2, #10
 8018324:	a814      	add	r0, sp, #80	; 0x50
 8018326:	f7fd fe57 	bl	8015fd8 <f_open>
 801832a:	2800      	cmp	r0, #0
 801832c:	f040 809c 	bne.w	8018468 <savePnm+0x16c>
		return stm32ipl_err_OpeningFile;

	res = f_write(&fp, text, size, &bytesWritten);
 8018330:	a904      	add	r1, sp, #16
 8018332:	4622      	mov	r2, r4
 8018334:	a814      	add	r0, sp, #80	; 0x50
 8018336:	ab03      	add	r3, sp, #12
 8018338:	f7fe fa04 	bl	8016744 <f_write>
	if (res != FR_OK || bytesWritten != size) {
 801833c:	2800      	cmp	r0, #0
 801833e:	d136      	bne.n	80183ae <savePnm+0xb2>
 8018340:	9b03      	ldr	r3, [sp, #12]
 8018342:	42a3      	cmp	r3, r4
 8018344:	d133      	bne.n	80183ae <savePnm+0xb2>
		f_close(&fp);
		return stm32ipl_err_WritingFile;
	}

	switch (img->bpp) {
 8018346:	68ab      	ldr	r3, [r5, #8]
 8018348:	2b02      	cmp	r3, #2
 801834a:	d04e      	beq.n	80183ea <savePnm+0xee>
 801834c:	2b04      	cmp	r3, #4
 801834e:	d00a      	beq.n	8018366 <savePnm+0x6a>
 8018350:	2b01      	cmp	r3, #1
 8018352:	d035      	beq.n	80183c0 <savePnm+0xc4>

			break;
		}

		default: {
			f_close(&fp);
 8018354:	a814      	add	r0, sp, #80	; 0x50
 8018356:	f7fe fb55 	bl	8016a04 <f_close>
			return stm32ipl_err_UnsupportedFormat;
 801835a:	f06f 0004 	mvn.w	r0, #4
	}

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 801835e:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8018362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 8018366:	fb08 f707 	mul.w	r7, r8, r7
			uint8_t *data = img->data;
 801836a:	68ec      	ldr	r4, [r5, #12]
			for (uint32_t i = 0; i < size; i++) {
 801836c:	2f00      	cmp	r7, #0
 801836e:	d034      	beq.n	80183da <savePnm+0xde>
 8018370:	3403      	adds	r4, #3
 8018372:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018376:	4427      	add	r7, r4
 8018378:	e004      	b.n	8018384 <savePnm+0x88>
				if (res != FR_OK || bytesWritten != 3) {
 801837a:	9b03      	ldr	r3, [sp, #12]
 801837c:	2b03      	cmp	r3, #3
 801837e:	d116      	bne.n	80183ae <savePnm+0xb2>
			for (uint32_t i = 0; i < size; i++) {
 8018380:	42a7      	cmp	r7, r4
 8018382:	d02a      	beq.n	80183da <savePnm+0xde>
				rgb888.r = *data++;
 8018384:	f814 0c03 	ldrb.w	r0, [r4, #-3]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8018388:	2203      	movs	r2, #3
 801838a:	ab03      	add	r3, sp, #12
 801838c:	a902      	add	r1, sp, #8
				rgb888.r = *data++;
 801838e:	f88d 000a 	strb.w	r0, [sp, #10]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8018392:	a814      	add	r0, sp, #80	; 0x50
				rgb888.g = *data++;
 8018394:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 8018398:	f88d 5009 	strb.w	r5, [sp, #9]
				rgb888.b = *data++;
 801839c:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 80183a0:	4414      	add	r4, r2
 80183a2:	f88d 5008 	strb.w	r5, [sp, #8]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80183a6:	f7fe f9cd 	bl	8016744 <f_write>
				if (res != FR_OK || bytesWritten != 3) {
 80183aa:	2800      	cmp	r0, #0
 80183ac:	d0e5      	beq.n	801837a <savePnm+0x7e>
					f_close(&fp);
 80183ae:	a814      	add	r0, sp, #80	; 0x50
 80183b0:	f7fe fb28 	bl	8016a04 <f_close>
					return stm32ipl_err_WritingFile;
 80183b4:	f06f 0008 	mvn.w	r0, #8
}
 80183b8:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 80183bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 80183c0:	fb08 f707 	mul.w	r7, r8, r7
			res = f_write(&fp, img->data, size, &bytesWritten);
 80183c4:	68e9      	ldr	r1, [r5, #12]
 80183c6:	ab03      	add	r3, sp, #12
 80183c8:	a814      	add	r0, sp, #80	; 0x50
 80183ca:	463a      	mov	r2, r7
 80183cc:	f7fe f9ba 	bl	8016744 <f_write>
			if (res != FR_OK || bytesWritten != size) {
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d1ec      	bne.n	80183ae <savePnm+0xb2>
 80183d4:	9b03      	ldr	r3, [sp, #12]
 80183d6:	42bb      	cmp	r3, r7
 80183d8:	d1e9      	bne.n	80183ae <savePnm+0xb2>
	f_close(&fp);
 80183da:	a814      	add	r0, sp, #80	; 0x50
 80183dc:	f7fe fb12 	bl	8016a04 <f_close>
	return stm32ipl_err_Ok;
 80183e0:	2000      	movs	r0, #0
}
 80183e2:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 80183e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint32_t i = 0; i < height; i++) {
 80183ea:	f1b8 0f00 	cmp.w	r8, #0
 80183ee:	d0f4      	beq.n	80183da <savePnm+0xde>
				offset = i * width;
 80183f0:	4681      	mov	r9, r0
			for (uint32_t i = 0; i < height; i++) {
 80183f2:	4682      	mov	sl, r0
				for (uint32_t j = 0; j < width; j++) {
 80183f4:	b397      	cbz	r7, 801845c <savePnm+0x160>
 80183f6:	ea4f 0449 	mov.w	r4, r9, lsl #1
 80183fa:	2600      	movs	r6, #0
 80183fc:	e004      	b.n	8018408 <savePnm+0x10c>
					if (res != FR_OK || bytesWritten != 3) {
 80183fe:	9b03      	ldr	r3, [sp, #12]
 8018400:	2b03      	cmp	r3, #3
 8018402:	d1d4      	bne.n	80183ae <savePnm+0xb2>
				for (uint32_t j = 0; j < width; j++) {
 8018404:	42b7      	cmp	r7, r6
 8018406:	d029      	beq.n	801845c <savePnm+0x160>
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 8018408:	68e9      	ldr	r1, [r5, #12]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801840a:	2203      	movs	r2, #3
 801840c:	ab03      	add	r3, sp, #12
				for (uint32_t j = 0; j < width; j++) {
 801840e:	3601      	adds	r6, #1
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 8018410:	5b08      	ldrh	r0, [r1, r4]
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8018412:	3402      	adds	r4, #2
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8018414:	fa20 f102 	lsr.w	r1, r0, r2
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8018418:	ea4f 2e10 	mov.w	lr, r0, lsr #8
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 801841c:	f3c0 0c82 	ubfx	ip, r0, #2, #3
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8018420:	f001 0bfc 	and.w	fp, r1, #252	; 0xfc
 8018424:	f3c1 1181 	ubfx	r1, r1, #6, #2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8018428:	ea4c 00c0 	orr.w	r0, ip, r0, lsl #3
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 801842c:	f00e 0cf8 	and.w	ip, lr, #248	; 0xf8
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8018430:	ea4b 0b01 	orr.w	fp, fp, r1
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8018434:	a902      	add	r1, sp, #8
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8018436:	ea4c 1c5e 	orr.w	ip, ip, lr, lsr #5
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 801843a:	f88d 000a 	strb.w	r0, [sp, #10]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801843e:	a814      	add	r0, sp, #80	; 0x50
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8018440:	f88d b009 	strb.w	fp, [sp, #9]
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8018444:	f88d c008 	strb.w	ip, [sp, #8]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8018448:	f7fe f97c 	bl	8016744 <f_write>
					if (res != FR_OK || bytesWritten != 3) {
 801844c:	2800      	cmp	r0, #0
 801844e:	d0d6      	beq.n	80183fe <savePnm+0x102>
					f_close(&fp);
 8018450:	a814      	add	r0, sp, #80	; 0x50
 8018452:	f7fe fad7 	bl	8016a04 <f_close>
					return stm32ipl_err_WritingFile;
 8018456:	f06f 0008 	mvn.w	r0, #8
 801845a:	e7ad      	b.n	80183b8 <savePnm+0xbc>
			for (uint32_t i = 0; i < height; i++) {
 801845c:	f10a 0a01 	add.w	sl, sl, #1
 8018460:	44b9      	add	r9, r7
 8018462:	45c2      	cmp	sl, r8
 8018464:	d1c6      	bne.n	80183f4 <savePnm+0xf8>
 8018466:	e7b8      	b.n	80183da <savePnm+0xde>
		return stm32ipl_err_OpeningFile;
 8018468:	f06f 0005 	mvn.w	r0, #5
 801846c:	e777      	b.n	801835e <savePnm+0x62>
 801846e:	bf00      	nop
 8018470:	08046bb8 	.word	0x08046bb8

08018474 <STM32Ipl_ReadImage>:
{
 8018474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 8018478:	f243 3250 	movw	r2, #13136	; 0x3350
	uint32_t bytesRead = 0;
 801847c:	2600      	movs	r6, #0
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 801847e:	f644 5542 	movw	r5, #19778	; 0x4d42
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 8018482:	f243 2450 	movw	r4, #12880	; 0x3250
	if (!img || !filename)
 8018486:	4607      	mov	r7, r0
{
 8018488:	ed2d 8b02 	vpush	{d8}
 801848c:	f2ad 6ddc 	subw	sp, sp, #1756	; 0x6dc
	if (!img || !filename)
 8018490:	9003      	str	r0, [sp, #12]
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 8018492:	f243 5050 	movw	r0, #13648	; 0x3550
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 8018496:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 801849a:	f243 6250 	movw	r2, #13904	; 0x3650
	uint32_t bytesRead = 0;
 801849e:	961a      	str	r6, [sp, #104]	; 0x68
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 80184a0:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 80184a4:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 80184a8:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 80184ac:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
	if (!img || !filename)
 80184b0:	2f00      	cmp	r7, #0
 80184b2:	f000 85a0 	beq.w	8018ff6 <STM32Ipl_ReadImage+0xb82>
 80184b6:	2900      	cmp	r1, #0
 80184b8:	f000 859d 	beq.w	8018ff6 <STM32Ipl_ReadImage+0xb82>
	if (f_open(&fp, (const TCHAR*)filename, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 80184bc:	2201      	movs	r2, #1
 80184be:	a82a      	add	r0, sp, #168	; 0xa8
 80184c0:	f7fd fd8a 	bl	8015fd8 <f_open>
 80184c4:	2800      	cmp	r0, #0
 80184c6:	f040 86a1 	bne.w	801920c <STM32Ipl_ReadImage+0xd98>
	if ((f_read(&fp, magic, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2) {
 80184ca:	ab1a      	add	r3, sp, #104	; 0x68
 80184cc:	2202      	movs	r2, #2
 80184ce:	a82a      	add	r0, sp, #168	; 0xa8
 80184d0:	a914      	add	r1, sp, #80	; 0x50
 80184d2:	f7fe f801 	bl	80164d8 <f_read>
 80184d6:	4604      	mov	r4, r0
 80184d8:	2800      	cmp	r0, #0
 80184da:	f040 8561 	bne.w	8018fa0 <STM32Ipl_ReadImage+0xb2c>
 80184de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80184e0:	2b02      	cmp	r3, #2
 80184e2:	f040 855d 	bne.w	8018fa0 <STM32Ipl_ReadImage+0xb2c>
	if (memcmp(bmp, magic, 2) == 0)
 80184e6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80184ea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80184ee:	4293      	cmp	r3, r2
 80184f0:	d060      	beq.n	80185b4 <STM32Ipl_ReadImage+0x140>
		if ((memcmp(p2, magic, 1) == 0)
 80184f2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80184f6:	2a50      	cmp	r2, #80	; 0x50
 80184f8:	d00b      	beq.n	8018512 <STM32Ipl_ReadImage+0x9e>
				res = stm32ipl_err_UnsupportedFormat;
 80184fa:	f06f 0704 	mvn.w	r7, #4
	f_close(&fp);
 80184fe:	a82a      	add	r0, sp, #168	; 0xa8
 8018500:	f7fe fa80 	bl	8016a04 <f_close>
}
 8018504:	4638      	mov	r0, r7
 8018506:	f20d 6ddc 	addw	sp, sp, #1756	; 0x6dc
 801850a:	ecbd 8b02 	vpop	{d8}
 801850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((memcmp(p2, magic, 2) == 0) || (memcmp(p3, magic, 2) == 0) || (memcmp(p5, magic, 2) == 0)
 8018512:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8018516:	429a      	cmp	r2, r3
 8018518:	d008      	beq.n	801852c <STM32Ipl_ReadImage+0xb8>
 801851a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801851e:	429a      	cmp	r2, r3
 8018520:	d004      	beq.n	801852c <STM32Ipl_ReadImage+0xb8>
 8018522:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8018526:	429a      	cmp	r2, r3
 8018528:	f040 847a 	bne.w	8018e20 <STM32Ipl_ReadImage+0x9ac>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 801852c:	2100      	movs	r1, #0
 801852e:	9803      	ldr	r0, [sp, #12]
 8018530:	460b      	mov	r3, r1
 8018532:	460a      	mov	r2, r1
 8018534:	9100      	str	r1, [sp, #0]
 8018536:	f7ff fc11 	bl	8017d5c <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 801853a:	2100      	movs	r1, #0
 801853c:	a82a      	add	r0, sp, #168	; 0xa8
 801853e:	f7fe faf1 	bl	8016b24 <f_lseek>
 8018542:	2800      	cmp	r0, #0
 8018544:	f040 81c1 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
	if ((f_read(fp, sector, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2)
 8018548:	ac1c      	add	r4, sp, #112	; 0x70
 801854a:	adb6      	add	r5, sp, #728	; 0x2d8
 801854c:	2202      	movs	r2, #2
 801854e:	a82a      	add	r0, sp, #168	; 0xa8
 8018550:	4623      	mov	r3, r4
 8018552:	4629      	mov	r1, r5
 8018554:	f7fd ffc0 	bl	80164d8 <f_read>
 8018558:	4607      	mov	r7, r0
 801855a:	2800      	cmp	r0, #0
 801855c:	f040 81b2 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018560:	6823      	ldr	r3, [r4, #0]
 8018562:	2b02      	cmp	r3, #2
 8018564:	f040 81ae 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
	number_ppm = sector[1];
 8018568:	786b      	ldrb	r3, [r5, #1]
	if ((number_ppm != '2') && (number_ppm != '3') && (number_ppm != '5') && (number_ppm != '6'))
 801856a:	f1a3 0832 	sub.w	r8, r3, #50	; 0x32
 801856e:	fa5f f288 	uxtb.w	r2, r8
 8018572:	2a01      	cmp	r2, #1
 8018574:	d902      	bls.n	801857c <STM32Ipl_ReadImage+0x108>
 8018576:	3b35      	subs	r3, #53	; 0x35
 8018578:	2b01      	cmp	r3, #1
 801857a:	d8be      	bhi.n	80184fa <STM32Ipl_ReadImage+0x86>
 801857c:	2600      	movs	r6, #0
		if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801857e:	4623      	mov	r3, r4
 8018580:	2201      	movs	r2, #1
 8018582:	4629      	mov	r1, r5
 8018584:	a82a      	add	r0, sp, #168	; 0xa8
 8018586:	f7fd ffa7 	bl	80164d8 <f_read>
 801858a:	2800      	cmp	r0, #0
 801858c:	f040 819a 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018590:	6823      	ldr	r3, [r4, #0]
 8018592:	2b01      	cmp	r3, #1
 8018594:	f040 8196 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
		if (mode == EAT_WHITESPACE) {
 8018598:	2f00      	cmp	r7, #0
 801859a:	f040 81d7 	bne.w	801894c <STM32Ipl_ReadImage+0x4d8>
			if (sector[0] == '#') {
 801859e:	782a      	ldrb	r2, [r5, #0]
 80185a0:	2a23      	cmp	r2, #35	; 0x23
 80185a2:	f000 81e1 	beq.w	8018968 <STM32Ipl_ReadImage+0x4f4>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80185a6:	3a30      	subs	r2, #48	; 0x30
 80185a8:	b2d3      	uxtb	r3, r2
 80185aa:	2b09      	cmp	r3, #9
 80185ac:	d8e7      	bhi.n	801857e <STM32Ipl_ReadImage+0x10a>
					number = sector[0] - '0';
 80185ae:	4616      	mov	r6, r2
					mode = EAT_NUMBER;
 80185b0:	2702      	movs	r7, #2
 80185b2:	e7e4      	b.n	801857e <STM32Ipl_ReadImage+0x10a>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 80185b4:	4601      	mov	r1, r0
 80185b6:	4603      	mov	r3, r0
 80185b8:	4602      	mov	r2, r0
 80185ba:	9000      	str	r0, [sp, #0]
 80185bc:	9803      	ldr	r0, [sp, #12]
 80185be:	f7ff fbcd 	bl	8017d5c <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 80185c2:	4621      	mov	r1, r4
 80185c4:	a82a      	add	r0, sp, #168	; 0xa8
 80185c6:	f7fe faad 	bl	8016b24 <f_lseek>
 80185ca:	2800      	cmp	r0, #0
 80185cc:	f040 817d 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
	if ((f_read(fp, header, sizeof(header), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(header))
 80185d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 80185d4:	ac1c      	add	r4, sp, #112	; 0x70
 80185d6:	2236      	movs	r2, #54	; 0x36
 80185d8:	a82a      	add	r0, sp, #168	; 0xa8
 80185da:	464b      	mov	r3, r9
 80185dc:	4621      	mov	r1, r4
 80185de:	f7fd ff7b 	bl	80164d8 <f_read>
 80185e2:	2800      	cmp	r0, #0
 80185e4:	f040 816e 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 80185e8:	f8d9 3000 	ldr.w	r3, [r9]
 80185ec:	2b36      	cmp	r3, #54	; 0x36
 80185ee:	f040 8169 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 80185f2:	7be2      	ldrb	r2, [r4, #15]
 80185f4:	7ba3      	ldrb	r3, [r4, #14]
 80185f6:	7c20      	ldrb	r0, [r4, #16]
 80185f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 80185fc:	7ae1      	ldrb	r1, [r4, #11]
 80185fe:	7aa2      	ldrb	r2, [r4, #10]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8018600:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8018604:	7c60      	ldrb	r0, [r4, #17]
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8018606:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 801860a:	7b21      	ldrb	r1, [r4, #12]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 801860c:	eb03 6300 	add.w	r3, r3, r0, lsl #24
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8018610:	7b60      	ldrb	r0, [r4, #13]
 8018612:	eb02 4201 	add.w	r2, r2, r1, lsl #16
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8018616:	2b34      	cmp	r3, #52	; 0x34
 8018618:	f023 0110 	bic.w	r1, r3, #16
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 801861c:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8018620:	9206      	str	r2, [sp, #24]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8018622:	d004      	beq.n	801862e <STM32Ipl_ReadImage+0x1ba>
 8018624:	2928      	cmp	r1, #40	; 0x28
 8018626:	d002      	beq.n	801862e <STM32Ipl_ReadImage+0x1ba>
	&& (infoHeaderSize != 124)) /* BITMAPV5HEADER */
 8018628:	296c      	cmp	r1, #108	; 0x6c
 801862a:	f47f af66 	bne.w	80184fa <STM32Ipl_ReadImage+0x86>
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 801862e:	7ce3      	ldrb	r3, [r4, #19]
 8018630:	f894 b012 	ldrb.w	fp, [r4, #18]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8018634:	7de0      	ldrb	r0, [r4, #23]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8018636:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
	bitCount = pHeader[28] + (pHeader[29] << 8);
 801863a:	7f61      	ldrb	r1, [r4, #29]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 801863c:	7da2      	ldrb	r2, [r4, #22]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 801863e:	7f23      	ldrb	r3, [r4, #28]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8018640:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8018644:	7d20      	ldrb	r0, [r4, #20]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8018646:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 801864a:	7e21      	ldrb	r1, [r4, #24]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 801864c:	eb0b 4b00 	add.w	fp, fp, r0, lsl #16
 8018650:	7d60      	ldrb	r0, [r4, #21]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8018652:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8018656:	7e61      	ldrb	r1, [r4, #25]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8018658:	b29b      	uxth	r3, r3
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 801865a:	eb02 6201 	add.w	r2, r2, r1, lsl #24
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 801865e:	2b18      	cmp	r3, #24
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8018660:	eb0b 6b00 	add.w	fp, fp, r0, lsl #24
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8018664:	9204      	str	r2, [sp, #16]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 8018666:	f63f af48 	bhi.w	80184fa <STM32Ipl_ReadImage+0x86>
 801866a:	4ac5      	ldr	r2, [pc, #788]	; (8018980 <STM32Ipl_ReadImage+0x50c>)
 801866c:	40da      	lsrs	r2, r3
 801866e:	07d2      	lsls	r2, r2, #31
 8018670:	f57f af43 	bpl.w	80184fa <STM32Ipl_ReadImage+0x86>
	compression = pHeader[30] + (pHeader[31] << 8) + (pHeader[32] << 16) + (pHeader[33] << 24);
 8018674:	7fe1      	ldrb	r1, [r4, #31]
 8018676:	7fa2      	ldrb	r2, [r4, #30]
 8018678:	f894 0020 	ldrb.w	r0, [r4, #32]
 801867c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8018680:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8018684:	eb02 4200 	add.w	r2, r2, r0, lsl #16
	if (compression != BI_RGB && compression != BI_BITFIELDS)
 8018688:	eb12 6201 	adds.w	r2, r2, r1, lsl #24
 801868c:	bf14      	ite	ne
 801868e:	2701      	movne	r7, #1
 8018690:	2700      	moveq	r7, #0
 8018692:	2a03      	cmp	r2, #3
 8018694:	d002      	beq.n	801869c <STM32Ipl_ReadImage+0x228>
 8018696:	2f00      	cmp	r7, #0
 8018698:	f47f af2f 	bne.w	80184fa <STM32Ipl_ReadImage+0x86>
	colorUsed = pHeader[46] + (pHeader[47] << 8) + (pHeader[48] << 16) + (pHeader[49] << 24);
 801869c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80186a0:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80186a4:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 80186a8:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80186ac:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 80186b0:	eb01 4405 	add.w	r4, r1, r5, lsl #16
	if (colorUsed == 0)
 80186b4:	eb14 6400 	adds.w	r4, r4, r0, lsl #24
 80186b8:	d101      	bne.n	80186be <STM32Ipl_ReadImage+0x24a>
		colorUsed = 1 << bitCount;
 80186ba:	2401      	movs	r4, #1
 80186bc:	409c      	lsls	r4, r3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 80186be:	fb03 f00b 	mul.w	r0, r3, fp
 80186c2:	f110 011f 	adds.w	r1, r0, #31
 80186c6:	bf48      	it	mi
 80186c8:	f100 013e 	addmi.w	r1, r0, #62	; 0x3e
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 80186cc:	2a03      	cmp	r2, #3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 80186ce:	ea4f 1161 	mov.w	r1, r1, asr #5
 80186d2:	ea4f 0a81 	mov.w	sl, r1, lsl #2
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 80186d6:	f040 80fb 	bne.w	80188d0 <STM32Ipl_ReadImage+0x45c>
 80186da:	2b10      	cmp	r3, #16
 80186dc:	f040 80f8 	bne.w	80188d0 <STM32Ipl_ReadImage+0x45c>
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80186e0:	464b      	mov	r3, r9
 80186e2:	2204      	movs	r2, #4
 80186e4:	a82a      	add	r0, sp, #168	; 0xa8
 80186e6:	a9b6      	add	r1, sp, #728	; 0x2d8
 80186e8:	f7fd fef6 	bl	80164d8 <f_read>
 80186ec:	2800      	cmp	r0, #0
 80186ee:	f040 80e9 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 80186f2:	f8d9 2000 	ldr.w	r2, [r9]
 80186f6:	2a04      	cmp	r2, #4
 80186f8:	f040 80e4 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80186fc:	f89d 42d9 	ldrb.w	r4, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018700:	464b      	mov	r3, r9
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018702:	f89d 62d8 	ldrb.w	r6, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018706:	a9b6      	add	r1, sp, #728	; 0x2d8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018708:	f89d 02da 	ldrb.w	r0, [sp, #730]	; 0x2da
 801870c:	eb06 2604 	add.w	r6, r6, r4, lsl #8
 8018710:	f89d 42db 	ldrb.w	r4, [sp, #731]	; 0x2db
 8018714:	eb06 4600 	add.w	r6, r6, r0, lsl #16
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018718:	a82a      	add	r0, sp, #168	; 0xa8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 801871a:	eb06 6604 	add.w	r6, r6, r4, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801871e:	f7fd fedb 	bl	80164d8 <f_read>
 8018722:	2800      	cmp	r0, #0
 8018724:	f040 80ce 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018728:	f8d9 2000 	ldr.w	r2, [r9]
 801872c:	2a04      	cmp	r2, #4
 801872e:	f040 80c9 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018732:	f89d 52d9 	ldrb.w	r5, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018736:	464b      	mov	r3, r9
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018738:	f89d 42d8 	ldrb.w	r4, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801873c:	a9b6      	add	r1, sp, #728	; 0x2d8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 801873e:	f89d 02da 	ldrb.w	r0, [sp, #730]	; 0x2da
 8018742:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8018746:	f89d 52db 	ldrb.w	r5, [sp, #731]	; 0x2db
 801874a:	eb04 4400 	add.w	r4, r4, r0, lsl #16
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801874e:	a82a      	add	r0, sp, #168	; 0xa8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018750:	eb04 6405 	add.w	r4, r4, r5, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018754:	f7fd fec0 	bl	80164d8 <f_read>
 8018758:	2800      	cmp	r0, #0
 801875a:	f040 80b3 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 801875e:	f8d9 3000 	ldr.w	r3, [r9]
 8018762:	2b04      	cmp	r3, #4
 8018764:	f040 80ae 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
		bMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018768:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
 801876c:	f89d 52d8 	ldrb.w	r5, [sp, #728]	; 0x2d8
 8018770:	f89d 22da 	ldrb.w	r2, [sp, #730]	; 0x2da
 8018774:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8018778:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 801877c:	eb05 4502 	add.w	r5, r5, r2, lsl #16
 8018780:	eb05 6503 	add.w	r5, r5, r3, lsl #24
			if (f_lseek(fp, dataOffset) != FR_OK)
 8018784:	9906      	ldr	r1, [sp, #24]
 8018786:	a82a      	add	r0, sp, #168	; 0xa8
 8018788:	f7fe f9cc 	bl	8016b24 <f_lseek>
 801878c:	2800      	cmp	r0, #0
 801878e:	f040 809c 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
			outData = xalloc(width * abs(height) * 2);
 8018792:	9b04      	ldr	r3, [sp, #16]
 8018794:	2b00      	cmp	r3, #0
 8018796:	bfb8      	it	lt
 8018798:	425b      	neglt	r3, r3
 801879a:	fb03 f00b 	mul.w	r0, r3, fp
 801879e:	9307      	str	r3, [sp, #28]
 80187a0:	0040      	lsls	r0, r0, #1
 80187a2:	f001 f837 	bl	8019814 <xalloc>
			if (!outData)
 80187a6:	9010      	str	r0, [sp, #64]	; 0x40
 80187a8:	2800      	cmp	r0, #0
 80187aa:	f000 8579 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 80187ae:	4650      	mov	r0, sl
 80187b0:	f001 f830 	bl	8019814 <xalloc>
			if (!lineData) {
 80187b4:	4680      	mov	r8, r0
 80187b6:	2800      	cmp	r0, #0
 80187b8:	f000 877a 	beq.w	80196b0 <STM32Ipl_ReadImage+0x123c>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80187bc:	9b04      	ldr	r3, [sp, #16]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	f340 8528 	ble.w	8019214 <STM32Ipl_ReadImage+0xda0>
 80187c4:	3b01      	subs	r3, #1
 80187c6:	9a06      	ldr	r2, [sp, #24]
 80187c8:	fb0a 2303 	mla	r3, sl, r3, r2
 80187cc:	4619      	mov	r1, r3
 80187ce:	9305      	str	r3, [sp, #20]
			if (f_lseek(fp, line) != FR_OK) {
 80187d0:	a82a      	add	r0, sp, #168	; 0xa8
 80187d2:	f7fe f9a7 	bl	8016b24 <f_lseek>
 80187d6:	2800      	cmp	r0, #0
 80187d8:	f040 8761 	bne.w	801969e <STM32Ipl_ReadImage+0x122a>
			for (uint32_t i = 0; i < abs(height); i++) {
 80187dc:	9b07      	ldr	r3, [sp, #28]
 80187de:	9313      	str	r3, [sp, #76]	; 0x4c
 80187e0:	9b04      	ldr	r3, [sp, #16]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	f000 871d 	beq.w	8019622 <STM32Ipl_ReadImage+0x11ae>
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 80187e8:	463a      	mov	r2, r7
 80187ea:	f02b 0301 	bic.w	r3, fp, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 80187ee:	960d      	str	r6, [sp, #52]	; 0x34
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 80187f0:	f5b6 4f78 	cmp.w	r6, #63488	; 0xf800
 80187f4:	bf14      	ite	ne
 80187f6:	2200      	movne	r2, #0
 80187f8:	f002 0201 	andeq.w	r2, r2, #1
							&& (bMask == RGB565_BLUE_MASK))
 80187fc:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
 8018800:	bf08      	it	eq
 8018802:	2d1f      	cmpeq	r5, #31
 8018804:	9311      	str	r3, [sp, #68]	; 0x44
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018806:	465e      	mov	r6, fp
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8018808:	920a      	str	r2, [sp, #40]	; 0x28
							&& (bMask == RGB565_BLUE_MASK))
 801880a:	bf0c      	ite	eq
 801880c:	2201      	moveq	r2, #1
 801880e:	2200      	movne	r2, #0
 8018810:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018812:	920c      	str	r2, [sp, #48]	; 0x30
 8018814:	005a      	lsls	r2, r3, #1
 8018816:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801881a:	9208      	str	r2, [sp, #32]
 801881c:	9309      	str	r3, [sp, #36]	; 0x24
 801881e:	f108 0303 	add.w	r3, r8, #3
 8018822:	930e      	str	r3, [sp, #56]	; 0x38
 8018824:	ea4f 035b 	mov.w	r3, fp, lsr #1
 8018828:	9312      	str	r3, [sp, #72]	; 0x48
 801882a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801882e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018830:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018834:	4683      	mov	fp, r0
 8018836:	930b      	str	r3, [sp, #44]	; 0x2c
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018838:	464b      	mov	r3, r9
 801883a:	4652      	mov	r2, sl
 801883c:	4641      	mov	r1, r8
 801883e:	a82a      	add	r0, sp, #168	; 0xa8
 8018840:	f7fd fe4a 	bl	80164d8 <f_read>
 8018844:	2800      	cmp	r0, #0
 8018846:	f040 837b 	bne.w	8018f40 <STM32Ipl_ReadImage+0xacc>
 801884a:	f8d9 3000 	ldr.w	r3, [r9]
 801884e:	459a      	cmp	sl, r3
 8018850:	f040 8376 	bne.w	8018f40 <STM32Ipl_ReadImage+0xacc>
				for (uint32_t j = 0; j < width; j++) {
 8018854:	b1be      	cbz	r6, 8018886 <STM32Ipl_ReadImage+0x412>
 8018856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018858:	2900      	cmp	r1, #0
 801885a:	f040 82ea 	bne.w	8018e32 <STM32Ipl_ReadImage+0x9be>
 801885e:	f1a8 0c02 	sub.w	ip, r8, #2
 8018862:	4638      	mov	r0, r7
 8018864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
					uint16_t value = *inPixel;
 8018866:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801886a:	ea42 0e04 	orr.w	lr, r2, r4
				for (uint32_t j = 0; j < width; j++) {
 801886e:	3101      	adds	r1, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018870:	ea0e 0e03 	and.w	lr, lr, r3
 8018874:	402b      	ands	r3, r5
				for (uint32_t j = 0; j < width; j++) {
 8018876:	428e      	cmp	r6, r1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018878:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 801887c:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8018880:	d1f1      	bne.n	8018866 <STM32Ipl_ReadImage+0x3f2>
 8018882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018884:	441f      	add	r7, r3
				if (height > 0) {
 8018886:	9b04      	ldr	r3, [sp, #16]
 8018888:	2b00      	cmp	r3, #0
					line -= lineSize;
 801888a:	9b05      	ldr	r3, [sp, #20]
				if (height > 0) {
 801888c:	f340 82e9 	ble.w	8018e62 <STM32Ipl_ReadImage+0x9ee>
					line -= lineSize;
 8018890:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8018894:	9a06      	ldr	r2, [sp, #24]
 8018896:	429a      	cmp	r2, r3
					line -= lineSize;
 8018898:	9305      	str	r3, [sp, #20]
					if (line >= dataOffset) {
 801889a:	f240 8302 	bls.w	8018ea2 <STM32Ipl_ReadImage+0xa2e>
			for (uint32_t i = 0; i < abs(height); i++) {
 801889e:	f10b 0b01 	add.w	fp, fp, #1
 80188a2:	9b07      	ldr	r3, [sp, #28]
 80188a4:	459b      	cmp	fp, r3
 80188a6:	d1c7      	bne.n	8018838 <STM32Ipl_ReadImage+0x3c4>
 80188a8:	46b3      	mov	fp, r6
			xfree(lineData);
 80188aa:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 80188ac:	2700      	movs	r7, #0
			xfree(lineData);
 80188ae:	f000 ffbf 	bl	8019830 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 80188b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80188b6:	4659      	mov	r1, fp
 80188b8:	9300      	str	r3, [sp, #0]
 80188ba:	2302      	movs	r3, #2
 80188bc:	9803      	ldr	r0, [sp, #12]
 80188be:	f7ff fa4d 	bl	8017d5c <STM32Ipl_Init>
			break;
 80188c2:	e61c      	b.n	80184fe <STM32Ipl_ReadImage+0x8a>
									return stm32ipl_err_ReadingFile;
 80188c4:	f06f 0707 	mvn.w	r7, #7
 80188c8:	e619      	b.n	80184fe <STM32Ipl_ReadImage+0x8a>
		return stm32ipl_err_SeekingFile;
 80188ca:	f06f 0709 	mvn.w	r7, #9
 80188ce:	e616      	b.n	80184fe <STM32Ipl_ReadImage+0x8a>
	switch (bitCount) {
 80188d0:	3b01      	subs	r3, #1
 80188d2:	2b17      	cmp	r3, #23
 80188d4:	f63f ae11 	bhi.w	80184fa <STM32Ipl_ReadImage+0x86>
 80188d8:	a201      	add	r2, pc, #4	; (adr r2, 80188e0 <STM32Ipl_ReadImage+0x46c>)
 80188da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188de:	bf00      	nop
 80188e0:	08018cf3 	.word	0x08018cf3
 80188e4:	080184fb 	.word	0x080184fb
 80188e8:	080184fb 	.word	0x080184fb
 80188ec:	08018be3 	.word	0x08018be3
 80188f0:	080184fb 	.word	0x080184fb
 80188f4:	080184fb 	.word	0x080184fb
 80188f8:	080184fb 	.word	0x080184fb
 80188fc:	08018ab9 	.word	0x08018ab9
 8018900:	080184fb 	.word	0x080184fb
 8018904:	080184fb 	.word	0x080184fb
 8018908:	080184fb 	.word	0x080184fb
 801890c:	080184fb 	.word	0x080184fb
 8018910:	080184fb 	.word	0x080184fb
 8018914:	080184fb 	.word	0x080184fb
 8018918:	080184fb 	.word	0x080184fb
 801891c:	08018941 	.word	0x08018941
 8018920:	080184fb 	.word	0x080184fb
 8018924:	080184fb 	.word	0x080184fb
 8018928:	080184fb 	.word	0x080184fb
 801892c:	080184fb 	.word	0x080184fb
 8018930:	080184fb 	.word	0x080184fb
 8018934:	080184fb 	.word	0x080184fb
 8018938:	080184fb 	.word	0x080184fb
 801893c:	080189ed 	.word	0x080189ed
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8018940:	251f      	movs	r5, #31
 8018942:	f44f 7478 	mov.w	r4, #992	; 0x3e0
 8018946:	f44f 46f8 	mov.w	r6, #31744	; 0x7c00
 801894a:	e71b      	b.n	8018784 <STM32Ipl_ReadImage+0x310>
			if (mode == EAT_COMMENT) {
 801894c:	2f01      	cmp	r7, #1
 801894e:	d00d      	beq.n	801896c <STM32Ipl_ReadImage+0x4f8>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018950:	782b      	ldrb	r3, [r5, #0]
 8018952:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018956:	b2d1      	uxtb	r1, r2
 8018958:	2909      	cmp	r1, #9
 801895a:	d813      	bhi.n	8018984 <STM32Ipl_ReadImage+0x510>
						number = (number * 10) + sector[0] - '0';
 801895c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8018960:	2702      	movs	r7, #2
 8018962:	eb02 0646 	add.w	r6, r2, r6, lsl #1
	} while (!valid);
 8018966:	e60a      	b.n	801857e <STM32Ipl_ReadImage+0x10a>
				mode = EAT_COMMENT;
 8018968:	461f      	mov	r7, r3
 801896a:	e608      	b.n	801857e <STM32Ipl_ReadImage+0x10a>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801896c:	782f      	ldrb	r7, [r5, #0]
 801896e:	2f0d      	cmp	r7, #13
 8018970:	bf18      	it	ne
 8018972:	2f0a      	cmpne	r7, #10
 8018974:	bf0c      	ite	eq
 8018976:	2701      	moveq	r7, #1
 8018978:	2700      	movne	r7, #0
				mode = EAT_COMMENT;
 801897a:	f087 0701 	eor.w	r7, r7, #1
 801897e:	e5fe      	b.n	801857e <STM32Ipl_ReadImage+0x10a>
 8018980:	01010112 	.word	0x01010112
	mode = EAT_WHITESPACE;
 8018984:	4607      	mov	r7, r0
	number = 0;
 8018986:	4683      	mov	fp, r0
 8018988:	461a      	mov	r2, r3
		if (mode == EAT_WHITESPACE) {
 801898a:	b9af      	cbnz	r7, 80189b8 <STM32Ipl_ReadImage+0x544>
			if (sector[0] == '#') {
 801898c:	2a23      	cmp	r2, #35	; 0x23
 801898e:	d022      	beq.n	80189d6 <STM32Ipl_ReadImage+0x562>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018990:	3a30      	subs	r2, #48	; 0x30
 8018992:	b2d3      	uxtb	r3, r2
 8018994:	2b09      	cmp	r3, #9
 8018996:	d801      	bhi.n	801899c <STM32Ipl_ReadImage+0x528>
					number = sector[0] - '0';
 8018998:	4693      	mov	fp, r2
					mode = EAT_NUMBER;
 801899a:	2702      	movs	r7, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801899c:	4623      	mov	r3, r4
 801899e:	2201      	movs	r2, #1
 80189a0:	4629      	mov	r1, r5
 80189a2:	a82a      	add	r0, sp, #168	; 0xa8
 80189a4:	f7fd fd98 	bl	80164d8 <f_read>
 80189a8:	2800      	cmp	r0, #0
 80189aa:	d18b      	bne.n	80188c4 <STM32Ipl_ReadImage+0x450>
 80189ac:	6823      	ldr	r3, [r4, #0]
 80189ae:	2b01      	cmp	r3, #1
 80189b0:	d188      	bne.n	80188c4 <STM32Ipl_ReadImage+0x450>
 80189b2:	782a      	ldrb	r2, [r5, #0]
		if (mode == EAT_WHITESPACE) {
 80189b4:	2f00      	cmp	r7, #0
 80189b6:	d0e9      	beq.n	801898c <STM32Ipl_ReadImage+0x518>
			if (mode == EAT_COMMENT) {
 80189b8:	2f01      	cmp	r7, #1
 80189ba:	d00e      	beq.n	80189da <STM32Ipl_ReadImage+0x566>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80189bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80189c0:	2b09      	cmp	r3, #9
 80189c2:	f200 827f 	bhi.w	8018ec4 <STM32Ipl_ReadImage+0xa50>
						number = (number * 10) + sector[0] - '0';
 80189c6:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 80189ca:	2702      	movs	r7, #2
 80189cc:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 80189d0:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
	} while (!valid);
 80189d4:	e7e2      	b.n	801899c <STM32Ipl_ReadImage+0x528>
				mode = EAT_COMMENT;
 80189d6:	2701      	movs	r7, #1
 80189d8:	e7e0      	b.n	801899c <STM32Ipl_ReadImage+0x528>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 80189da:	2a0d      	cmp	r2, #13
 80189dc:	bf18      	it	ne
 80189de:	2a0a      	cmpne	r2, #10
 80189e0:	bf0c      	ite	eq
 80189e2:	2201      	moveq	r2, #1
 80189e4:	2200      	movne	r2, #0
				mode = EAT_COMMENT;
 80189e6:	f082 0701 	eor.w	r7, r2, #1
 80189ea:	e7d7      	b.n	801899c <STM32Ipl_ReadImage+0x528>
			if (f_lseek(fp, dataOffset) != FR_OK)
 80189ec:	9906      	ldr	r1, [sp, #24]
 80189ee:	a82a      	add	r0, sp, #168	; 0xa8
			uint32_t outLineSize = width * 3;
 80189f0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
			if (f_lseek(fp, dataOffset) != FR_OK)
 80189f4:	f7fe f896 	bl	8016b24 <f_lseek>
 80189f8:	2800      	cmp	r0, #0
 80189fa:	f47f af66 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
			outData = xalloc(outLineSize * abs(height));
 80189fe:	9b04      	ldr	r3, [sp, #16]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	bfb8      	it	lt
 8018a04:	425b      	neglt	r3, r3
 8018a06:	fb03 f006 	mul.w	r0, r3, r6
 8018a0a:	9305      	str	r3, [sp, #20]
 8018a0c:	f000 ff02 	bl	8019814 <xalloc>
			if (!outData)
 8018a10:	9007      	str	r0, [sp, #28]
 8018a12:	2800      	cmp	r0, #0
 8018a14:	f000 8444 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 8018a18:	4650      	mov	r0, sl
 8018a1a:	f000 fefb 	bl	8019814 <xalloc>
			if (!lineData) {
 8018a1e:	4605      	mov	r5, r0
 8018a20:	2800      	cmp	r0, #0
 8018a22:	f000 8631 	beq.w	8019688 <STM32Ipl_ReadImage+0x1214>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018a26:	9b04      	ldr	r3, [sp, #16]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	f340 83f8 	ble.w	801921e <STM32Ipl_ReadImage+0xdaa>
 8018a2e:	1e5f      	subs	r7, r3, #1
 8018a30:	9b06      	ldr	r3, [sp, #24]
 8018a32:	fb0a 3707 	mla	r7, sl, r7, r3
			if (f_lseek(fp, line) != FR_OK) {
 8018a36:	4639      	mov	r1, r7
 8018a38:	a82a      	add	r0, sp, #168	; 0xa8
 8018a3a:	f7fe f873 	bl	8016b24 <f_lseek>
 8018a3e:	bb90      	cbnz	r0, 8018aa6 <STM32Ipl_ReadImage+0x632>
			for (uint32_t i = 0; i < abs(height); i++) {
 8018a40:	9b04      	ldr	r3, [sp, #16]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	f000 8416 	beq.w	8019274 <STM32Ipl_ReadImage+0xe00>
 8018a48:	4604      	mov	r4, r0
 8018a4a:	f340 83ea 	ble.w	8019222 <STM32Ipl_ReadImage+0xdae>
 8018a4e:	f8cd b010 	str.w	fp, [sp, #16]
 8018a52:	46ab      	mov	fp, r5
 8018a54:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018a58:	9d06      	ldr	r5, [sp, #24]
 8018a5a:	e003      	b.n	8018a64 <STM32Ipl_ReadImage+0x5f0>
 8018a5c:	9b05      	ldr	r3, [sp, #20]
 8018a5e:	42a3      	cmp	r3, r4
 8018a60:	f000 8405 	beq.w	801926e <STM32Ipl_ReadImage+0xdfa>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018a64:	464b      	mov	r3, r9
 8018a66:	4652      	mov	r2, sl
 8018a68:	4659      	mov	r1, fp
 8018a6a:	a82a      	add	r0, sp, #168	; 0xa8
 8018a6c:	f7fd fd34 	bl	80164d8 <f_read>
 8018a70:	4603      	mov	r3, r0
					line -= lineSize;
 8018a72:	eba7 070a 	sub.w	r7, r7, sl
				memcpy(outPixel, lineData, outLineSize);
 8018a76:	4640      	mov	r0, r8
			for (uint32_t i = 0; i < abs(height); i++) {
 8018a78:	3401      	adds	r4, #1
				memcpy(outPixel, lineData, outLineSize);
 8018a7a:	4632      	mov	r2, r6
 8018a7c:	4659      	mov	r1, fp
				outPixel += outLineSize;
 8018a7e:	44b0      	add	r8, r6
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f040 83f2 	bne.w	801926a <STM32Ipl_ReadImage+0xdf6>
 8018a86:	f8d9 3000 	ldr.w	r3, [r9]
 8018a8a:	459a      	cmp	sl, r3
 8018a8c:	f040 83ed 	bne.w	801926a <STM32Ipl_ReadImage+0xdf6>
				memcpy(outPixel, lineData, outLineSize);
 8018a90:	f008 f820 	bl	8020ad4 <memcpy>
					if (line >= dataOffset) {
 8018a94:	42bd      	cmp	r5, r7
 8018a96:	d8e1      	bhi.n	8018a5c <STM32Ipl_ReadImage+0x5e8>
						if (f_lseek(fp, line) != FR_OK) {
 8018a98:	4639      	mov	r1, r7
 8018a9a:	a82a      	add	r0, sp, #168	; 0xa8
 8018a9c:	f7fe f842 	bl	8016b24 <f_lseek>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d0db      	beq.n	8018a5c <STM32Ipl_ReadImage+0x5e8>
 8018aa4:	465d      	mov	r5, fp
							xfree(lineData);
 8018aa6:	4628      	mov	r0, r5
							return stm32ipl_err_SeekingFile;
 8018aa8:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 8018aac:	f000 fec0 	bl	8019830 <xfree>
							xfree(outData);
 8018ab0:	9807      	ldr	r0, [sp, #28]
 8018ab2:	f000 febd 	bl	8019830 <xfree>
							return stm32ipl_err_SeekingFile;
 8018ab6:	e522      	b.n	80184fe <STM32Ipl_ReadImage+0x8a>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018ab8:	9b06      	ldr	r3, [sp, #24]
 8018aba:	a82a      	add	r0, sp, #168	; 0xa8
			paletteSize = colorUsed * sizeof(uint32_t);
 8018abc:	00a6      	lsls	r6, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018abe:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8018ac2:	f7fe f82f 	bl	8016b24 <f_lseek>
 8018ac6:	2800      	cmp	r0, #0
 8018ac8:	f47f aeff 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8018acc:	adb6      	add	r5, sp, #728	; 0x2d8
 8018ace:	464b      	mov	r3, r9
 8018ad0:	4632      	mov	r2, r6
 8018ad2:	a82a      	add	r0, sp, #168	; 0xa8
 8018ad4:	4629      	mov	r1, r5
 8018ad6:	f7fd fcff 	bl	80164d8 <f_read>
 8018ada:	2800      	cmp	r0, #0
 8018adc:	f47f aef2 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018ae0:	f8d9 3000 	ldr.w	r3, [r9]
 8018ae4:	429e      	cmp	r6, r3
 8018ae6:	f47f aeed 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8018aea:	4602      	mov	r2, r0
 8018aec:	4629      	mov	r1, r5
		uint8_t b = palette[i];
 8018aee:	f851 3b04 	ldr.w	r3, [r1], #4
	for (uint32_t i = 0; i < colorUsed; i++) {
 8018af2:	3201      	adds	r2, #1
		uint8_t b = palette[i];
 8018af4:	b2d8      	uxtb	r0, r3
		if ((b != g) | (b != r))
 8018af6:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8018afa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8018afe:	4286      	cmp	r6, r0
 8018b00:	f040 844d 	bne.w	801939e <STM32Ipl_ReadImage+0xf2a>
 8018b04:	1a1b      	subs	r3, r3, r0
 8018b06:	bf18      	it	ne
 8018b08:	2301      	movne	r3, #1
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	f040 8447 	bne.w	801939e <STM32Ipl_ReadImage+0xf2a>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8018b10:	4294      	cmp	r4, r2
 8018b12:	d1ec      	bne.n	8018aee <STM32Ipl_ReadImage+0x67a>
				outData = xalloc(width * abs(height));
 8018b14:	461f      	mov	r7, r3
 8018b16:	9b04      	ldr	r3, [sp, #16]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	bfb8      	it	lt
 8018b1c:	425b      	neglt	r3, r3
 8018b1e:	fb03 f00b 	mul.w	r0, r3, fp
 8018b22:	9305      	str	r3, [sp, #20]
 8018b24:	f000 fe76 	bl	8019814 <xalloc>
				if (!outData)
 8018b28:	9007      	str	r0, [sp, #28]
 8018b2a:	2800      	cmp	r0, #0
 8018b2c:	f000 83b8 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 8018b30:	4650      	mov	r0, sl
 8018b32:	f000 fe6f 	bl	8019814 <xalloc>
				if (!lineData) {
 8018b36:	4606      	mov	r6, r0
 8018b38:	2800      	cmp	r0, #0
 8018b3a:	f000 85a5 	beq.w	8019688 <STM32Ipl_ReadImage+0x1214>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018b3e:	9b04      	ldr	r3, [sp, #16]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	dd02      	ble.n	8018b4a <STM32Ipl_ReadImage+0x6d6>
 8018b44:	1e5f      	subs	r7, r3, #1
 8018b46:	fb0a f707 	mul.w	r7, sl, r7
 8018b4a:	9b06      	ldr	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 8018b4c:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018b4e:	441f      	add	r7, r3
				if (f_lseek(fp, line) != FR_OK) {
 8018b50:	4639      	mov	r1, r7
 8018b52:	f7fd ffe7 	bl	8016b24 <f_lseek>
 8018b56:	2800      	cmp	r0, #0
 8018b58:	f040 8417 	bne.w	801938a <STM32Ipl_ReadImage+0xf16>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018b5c:	9b05      	ldr	r3, [sp, #20]
 8018b5e:	9308      	str	r3, [sp, #32]
 8018b60:	9b04      	ldr	r3, [sp, #16]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	f000 85ad 	beq.w	80196c2 <STM32Ipl_ReadImage+0x124e>
					for (uint32_t j = 0; j < width; j++)
 8018b68:	464b      	mov	r3, r9
				for (uint32_t i = 0; i < abs(height); i++) {
 8018b6a:	4680      	mov	r8, r0
					for (uint32_t j = 0; j < width; j++)
 8018b6c:	46d1      	mov	r9, sl
 8018b6e:	9c07      	ldr	r4, [sp, #28]
 8018b70:	469a      	mov	sl, r3
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018b72:	4653      	mov	r3, sl
 8018b74:	464a      	mov	r2, r9
 8018b76:	4631      	mov	r1, r6
 8018b78:	a82a      	add	r0, sp, #168	; 0xa8
 8018b7a:	f7fd fcad 	bl	80164d8 <f_read>
 8018b7e:	2800      	cmp	r0, #0
 8018b80:	f040 8552 	bne.w	8019628 <STM32Ipl_ReadImage+0x11b4>
 8018b84:	f8da 1000 	ldr.w	r1, [sl]
 8018b88:	4589      	cmp	r9, r1
 8018b8a:	f040 854d 	bne.w	8019628 <STM32Ipl_ReadImage+0x11b4>
					for (uint32_t j = 0; j < width; j++)
 8018b8e:	f1bb 0f00 	cmp.w	fp, #0
 8018b92:	d00a      	beq.n	8018baa <STM32Ipl_ReadImage+0x736>
 8018b94:	eb04 0c0b 	add.w	ip, r4, fp
 8018b98:	4631      	mov	r1, r6
						*outPixel++ = palette[*ptr++];
 8018b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b9e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018ba2:	f804 3b01 	strb.w	r3, [r4], #1
					for (uint32_t j = 0; j < width; j++)
 8018ba6:	4564      	cmp	r4, ip
 8018ba8:	d1f7      	bne.n	8018b9a <STM32Ipl_ReadImage+0x726>
					if (height > 0) {
 8018baa:	9b04      	ldr	r3, [sp, #16]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	f340 8375 	ble.w	801929c <STM32Ipl_ReadImage+0xe28>
						line -= lineSize;
 8018bb2:	eba7 0709 	sub.w	r7, r7, r9
						if (line >= dataOffset) {
 8018bb6:	9b06      	ldr	r3, [sp, #24]
 8018bb8:	42bb      	cmp	r3, r7
 8018bba:	f240 83df 	bls.w	801937c <STM32Ipl_ReadImage+0xf08>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018bbe:	f108 0801 	add.w	r8, r8, #1
 8018bc2:	9b05      	ldr	r3, [sp, #20]
 8018bc4:	4598      	cmp	r8, r3
 8018bc6:	d1d4      	bne.n	8018b72 <STM32Ipl_ReadImage+0x6fe>
				xfree(lineData);
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f000 fe31 	bl	8019830 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_GRAYSCALE, outData);
 8018bce:	9b07      	ldr	r3, [sp, #28]
 8018bd0:	9a08      	ldr	r2, [sp, #32]
 8018bd2:	4659      	mov	r1, fp
 8018bd4:	9300      	str	r3, [sp, #0]
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	9803      	ldr	r0, [sp, #12]
 8018bda:	f7ff f8bf 	bl	8017d5c <STM32Ipl_Init>
	return stm32ipl_err_Ok;
 8018bde:	2700      	movs	r7, #0
 8018be0:	e48d      	b.n	80184fe <STM32Ipl_ReadImage+0x8a>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018be2:	9b06      	ldr	r3, [sp, #24]
 8018be4:	a82a      	add	r0, sp, #168	; 0xa8
 8018be6:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8018bea:	f7fd ff9b 	bl	8016b24 <f_lseek>
			paletteSize = colorUsed * sizeof(uint32_t);
 8018bee:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	f47f ae6a 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8018bf6:	adb6      	add	r5, sp, #728	; 0x2d8
 8018bf8:	464b      	mov	r3, r9
 8018bfa:	4622      	mov	r2, r4
 8018bfc:	a82a      	add	r0, sp, #168	; 0xa8
 8018bfe:	4629      	mov	r1, r5
 8018c00:	f7fd fc6a 	bl	80164d8 <f_read>
 8018c04:	2800      	cmp	r0, #0
 8018c06:	f47f ae5d 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8018c0e:	429c      	cmp	r4, r3
 8018c10:	f47f ae58 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
			outData = xalloc(width * abs(height) * 2);
 8018c14:	9b04      	ldr	r3, [sp, #16]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	bfb8      	it	lt
 8018c1a:	425b      	neglt	r3, r3
 8018c1c:	fb03 f00b 	mul.w	r0, r3, fp
 8018c20:	9308      	str	r3, [sp, #32]
 8018c22:	0040      	lsls	r0, r0, #1
 8018c24:	f000 fdf6 	bl	8019814 <xalloc>
			if (!outData)
 8018c28:	9009      	str	r0, [sp, #36]	; 0x24
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	f000 8338 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 8018c30:	4650      	mov	r0, sl
 8018c32:	f000 fdef 	bl	8019814 <xalloc>
			if (!lineData) {
 8018c36:	4680      	mov	r8, r0
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	f000 851e 	beq.w	801967a <STM32Ipl_ReadImage+0x1206>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018c3e:	9b04      	ldr	r3, [sp, #16]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	f340 84e9 	ble.w	8019618 <STM32Ipl_ReadImage+0x11a4>
 8018c46:	3b01      	subs	r3, #1
 8018c48:	9a06      	ldr	r2, [sp, #24]
 8018c4a:	fb0a 2303 	mla	r3, sl, r3, r2
 8018c4e:	4619      	mov	r1, r3
 8018c50:	9305      	str	r3, [sp, #20]
			if (f_lseek(fp, line) != FR_OK) {
 8018c52:	a82a      	add	r0, sp, #168	; 0xa8
 8018c54:	f7fd ff66 	bl	8016b24 <f_lseek>
 8018c58:	2800      	cmp	r0, #0
 8018c5a:	f040 8373 	bne.w	8019344 <STM32Ipl_ReadImage+0xed0>
			for (uint32_t i = 0; i < abs(height); i++) {
 8018c5e:	9b08      	ldr	r3, [sp, #32]
 8018c60:	930a      	str	r3, [sp, #40]	; 0x28
 8018c62:	9b04      	ldr	r3, [sp, #16]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	f000 8521 	beq.w	80196ac <STM32Ipl_ReadImage+0x1238>
				for (uint32_t j = 0; j < width;) {
 8018c6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018c6c:	465f      	mov	r7, fp
 8018c6e:	4eca      	ldr	r6, [pc, #808]	; (8018f98 <STM32Ipl_ReadImage+0xb24>)
			for (uint32_t i = 0; i < abs(height); i++) {
 8018c70:	9007      	str	r0, [sp, #28]
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018c72:	464b      	mov	r3, r9
 8018c74:	4652      	mov	r2, sl
 8018c76:	4641      	mov	r1, r8
 8018c78:	a82a      	add	r0, sp, #168	; 0xa8
 8018c7a:	f7fd fc2d 	bl	80164d8 <f_read>
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	f040 84c0 	bne.w	8019604 <STM32Ipl_ReadImage+0x1190>
 8018c84:	f8d9 3000 	ldr.w	r3, [r9]
 8018c88:	459a      	cmp	sl, r3
 8018c8a:	f040 84bb 	bne.w	8019604 <STM32Ipl_ReadImage+0x1190>
				for (uint32_t j = 0; j < width;) {
 8018c8e:	2f00      	cmp	r7, #0
 8018c90:	f000 8160 	beq.w	8018f54 <STM32Ipl_ReadImage+0xae0>
 8018c94:	4603      	mov	r3, r0
 8018c96:	46c6      	mov	lr, r8
 8018c98:	e004      	b.n	8018ca4 <STM32Ipl_ReadImage+0x830>
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018c9a:	3402      	adds	r4, #2
					j++;
 8018c9c:	3302      	adds	r3, #2
				for (uint32_t j = 0; j < width;) {
 8018c9e:	42bb      	cmp	r3, r7
 8018ca0:	f080 8158 	bcs.w	8018f54 <STM32Ipl_ReadImage+0xae0>
					uint8_t value = (*ptr++);
 8018ca4:	f81e 0b01 	ldrb.w	r0, [lr], #1
					if (j < width) {
 8018ca8:	f103 0c01 	add.w	ip, r3, #1
					uint8_t r = palette[index] >> 16;
 8018cac:	0902      	lsrs	r2, r0, #4
					if (j < width) {
 8018cae:	45bc      	cmp	ip, r7
						r = palette[index] >> 16;
 8018cb0:	f000 000f 	and.w	r0, r0, #15
					uint8_t r = palette[index] >> 16;
 8018cb4:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018cb8:	ea06 2b11 	and.w	fp, r6, r1, lsr #8
 8018cbc:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 8018cc0:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8018cc4:	ea42 020b 	orr.w	r2, r2, fp
 8018cc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018ccc:	ea42 0201 	orr.w	r2, r2, r1
 8018cd0:	8022      	strh	r2, [r4, #0]
					if (j < width) {
 8018cd2:	d2e2      	bcs.n	8018c9a <STM32Ipl_ReadImage+0x826>
						r = palette[index] >> 16;
 8018cd4:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018cd8:	3404      	adds	r4, #4
 8018cda:	ea06 2012 	and.w	r0, r6, r2, lsr #8
 8018cde:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8018ce2:	0952      	lsrs	r2, r2, #5
 8018ce4:	4301      	orrs	r1, r0
 8018ce6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018cea:	430a      	orrs	r2, r1
 8018cec:	f824 2c02 	strh.w	r2, [r4, #-2]
 8018cf0:	e7d4      	b.n	8018c9c <STM32Ipl_ReadImage+0x828>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018cf2:	9b06      	ldr	r3, [sp, #24]
 8018cf4:	a82a      	add	r0, sp, #168	; 0xa8
 8018cf6:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8018cfa:	f7fd ff13 	bl	8016b24 <f_lseek>
			paletteSize = colorUsed * sizeof(uint32_t);
 8018cfe:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018d00:	2800      	cmp	r0, #0
 8018d02:	f47f ade2 	bne.w	80188ca <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8018d06:	adb6      	add	r5, sp, #728	; 0x2d8
 8018d08:	464b      	mov	r3, r9
 8018d0a:	4622      	mov	r2, r4
 8018d0c:	a82a      	add	r0, sp, #168	; 0xa8
 8018d0e:	4629      	mov	r1, r5
 8018d10:	f7fd fbe2 	bl	80164d8 <f_read>
 8018d14:	2800      	cmp	r0, #0
 8018d16:	f47f add5 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018d1a:	f8d9 3000 	ldr.w	r3, [r9]
 8018d1e:	429c      	cmp	r4, r3
 8018d20:	f47f add0 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 8018d24:	682b      	ldr	r3, [r5, #0]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	f040 83bd 	bne.w	80194a6 <STM32Ipl_ReadImage+0x1032>
 8018d2c:	686a      	ldr	r2, [r5, #4]
 8018d2e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018d32:	429a      	cmp	r2, r3
 8018d34:	f000 83c0 	beq.w	80194b8 <STM32Ipl_ReadImage+0x1044>
				outData = xalloc(width * abs(height) * 2);
 8018d38:	9b04      	ldr	r3, [sp, #16]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	bfb8      	it	lt
 8018d3e:	425b      	neglt	r3, r3
 8018d40:	fb03 f00b 	mul.w	r0, r3, fp
 8018d44:	9308      	str	r3, [sp, #32]
 8018d46:	0040      	lsls	r0, r0, #1
 8018d48:	f000 fd64 	bl	8019814 <xalloc>
				if (!outData)
 8018d4c:	900a      	str	r0, [sp, #40]	; 0x28
 8018d4e:	2800      	cmp	r0, #0
 8018d50:	f000 82a6 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 8018d54:	4650      	mov	r0, sl
 8018d56:	f000 fd5d 	bl	8019814 <xalloc>
				if (!lineData) {
 8018d5a:	ee08 0a10 	vmov	s16, r0
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	f000 847e 	beq.w	8019660 <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018d64:	9b04      	ldr	r3, [sp, #16]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	f340 8472 	ble.w	8019650 <STM32Ipl_ReadImage+0x11dc>
 8018d6c:	3b01      	subs	r3, #1
 8018d6e:	9a06      	ldr	r2, [sp, #24]
 8018d70:	fb0a 2303 	mla	r3, sl, r3, r2
 8018d74:	4619      	mov	r1, r3
 8018d76:	9307      	str	r3, [sp, #28]
				if (f_lseek(fp, line) != FR_OK) {
 8018d78:	a82a      	add	r0, sp, #168	; 0xa8
 8018d7a:	f7fd fed3 	bl	8016b24 <f_lseek>
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	f040 82f1 	bne.w	8019366 <STM32Ipl_ReadImage+0xef2>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018d84:	9b08      	ldr	r3, [sp, #32]
 8018d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d88:	9b04      	ldr	r3, [sp, #16]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	f000 8497 	beq.w	80196be <STM32Ipl_ReadImage+0x124a>
 8018d90:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018d94:	465f      	mov	r7, fp
 8018d96:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8018f98 <STM32Ipl_ReadImage+0xb24>
 8018d9a:	4683      	mov	fp, r0
 8018d9c:	9309      	str	r3, [sp, #36]	; 0x24
					for (uint32_t j = 0; j < width; k--, j++) {
 8018d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018da0:	9305      	str	r3, [sp, #20]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018da2:	464b      	mov	r3, r9
 8018da4:	4652      	mov	r2, sl
 8018da6:	ee18 1a10 	vmov	r1, s16
 8018daa:	a82a      	add	r0, sp, #168	; 0xa8
 8018dac:	f7fd fb94 	bl	80164d8 <f_read>
 8018db0:	2800      	cmp	r0, #0
 8018db2:	f040 841c 	bne.w	80195ee <STM32Ipl_ReadImage+0x117a>
 8018db6:	f8d9 3000 	ldr.w	r3, [r9]
 8018dba:	459a      	cmp	sl, r3
 8018dbc:	f040 8417 	bne.w	80195ee <STM32Ipl_ReadImage+0x117a>
					for (uint32_t j = 0; j < width; k--, j++) {
 8018dc0:	2f00      	cmp	r7, #0
 8018dc2:	f000 80f8 	beq.w	8018fb6 <STM32Ipl_ReadImage+0xb42>
					uint8_t value = 0;
 8018dc6:	4686      	mov	lr, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 8018dc8:	9b05      	ldr	r3, [sp, #20]
 8018dca:	ee18 ca10 	vmov	ip, s16
 8018dce:	4606      	mov	r6, r0
 8018dd0:	e019      	b.n	8018e06 <STM32Ipl_ReadImage+0x992>
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	b2e0      	uxtb	r0, r4
						index = (value >> k) & 0x1;
 8018dd6:	fa4e f202 	asr.w	r2, lr, r2
					for (uint32_t j = 0; j < width; k--, j++) {
 8018dda:	3601      	adds	r6, #1
						r = palette[index] >> 16;
 8018ddc:	f002 0201 	and.w	r2, r2, #1
					for (uint32_t j = 0; j < width; k--, j++) {
 8018de0:	42be      	cmp	r6, r7
						r = palette[index] >> 16;
 8018de2:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018de6:	ea08 2411 	and.w	r4, r8, r1, lsr #8
 8018dea:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 8018dee:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8018df2:	ea42 0204 	orr.w	r2, r2, r4
 8018df6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018dfa:	ea42 0201 	orr.w	r2, r2, r1
 8018dfe:	f823 2b02 	strh.w	r2, [r3], #2
					for (uint32_t j = 0; j < width; k--, j++) {
 8018e02:	f000 80d4 	beq.w	8018fae <STM32Ipl_ReadImage+0xb3a>
						if (!(j % 8)) {
 8018e06:	f016 0f07 	tst.w	r6, #7
							value = (*ptr++);
 8018e0a:	4661      	mov	r1, ip
 8018e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8018e10:	f04f 0207 	mov.w	r2, #7
						if (!(j % 8)) {
 8018e14:	d1dd      	bne.n	8018dd2 <STM32Ipl_ReadImage+0x95e>
							value = (*ptr++);
 8018e16:	f811 eb01 	ldrb.w	lr, [r1], #1
 8018e1a:	2006      	movs	r0, #6
 8018e1c:	468c      	mov	ip, r1
 8018e1e:	e7da      	b.n	8018dd6 <STM32Ipl_ReadImage+0x962>
						|| (memcmp(p6, magic, 2) == 0)))
 8018e20:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8018e24:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	f47f ab66 	bne.w	80184fa <STM32Ipl_ReadImage+0x86>
 8018e2e:	f7ff bb7d 	b.w	801852c <STM32Ipl_ReadImage+0xb8>
 8018e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e34:	b9c2      	cbnz	r2, 8018e68 <STM32Ipl_ReadImage+0x9f4>
 8018e36:	f1a8 0c02 	sub.w	ip, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 8018e3a:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 8018e3c:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8018e40:	3201      	adds	r2, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018e42:	4b56      	ldr	r3, [pc, #344]	; (8018f9c <STM32Ipl_ReadImage+0xb28>)
 8018e44:	ea01 0e04 	and.w	lr, r1, r4
				for (uint32_t j = 0; j < width; j++) {
 8018e48:	4296      	cmp	r6, r2
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018e4a:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 8018e4e:	ea01 0105 	and.w	r1, r1, r5
 8018e52:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8018e56:	ea43 0301 	orr.w	r3, r3, r1
 8018e5a:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8018e5e:	d1ed      	bne.n	8018e3c <STM32Ipl_ReadImage+0x9c8>
 8018e60:	e50f      	b.n	8018882 <STM32Ipl_ReadImage+0x40e>
					line += lineSize;
 8018e62:	4453      	add	r3, sl
 8018e64:	9305      	str	r3, [sp, #20]
 8018e66:	e51a      	b.n	801889e <STM32Ipl_ReadImage+0x42a>
 8018e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e6a:	1bdb      	subs	r3, r3, r7
 8018e6c:	2b06      	cmp	r3, #6
 8018e6e:	f240 81c0 	bls.w	80191f2 <STM32Ipl_ReadImage+0xd7e>
 8018e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e74:	2b09      	cmp	r3, #9
 8018e76:	f240 81bc 	bls.w	80191f2 <STM32Ipl_ReadImage+0xd7e>
 8018e7a:	463a      	mov	r2, r7
 8018e7c:	4643      	mov	r3, r8
 8018e7e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
					uint16_t value = *inPixel;
 8018e82:	3001      	adds	r0, #1
 8018e84:	f853 1b04 	ldr.w	r1, [r3], #4
						*outPixel++ = value;
 8018e88:	4560      	cmp	r0, ip
 8018e8a:	f842 1b04 	str.w	r1, [r2], #4
				for (uint32_t j = 0; j < width; j++) {
 8018e8e:	d1f8      	bne.n	8018e82 <STM32Ipl_ReadImage+0xa0e>
 8018e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018e92:	429e      	cmp	r6, r3
 8018e94:	f43f acf5 	beq.w	8018882 <STM32Ipl_ReadImage+0x40e>
					uint16_t value = *inPixel;
 8018e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e9a:	9a08      	ldr	r2, [sp, #32]
 8018e9c:	881b      	ldrh	r3, [r3, #0]
						*outPixel++ = value;
 8018e9e:	52bb      	strh	r3, [r7, r2]
				for (uint32_t j = 0; j < width; j++) {
 8018ea0:	e4ef      	b.n	8018882 <STM32Ipl_ReadImage+0x40e>
						if (f_lseek(fp, line) != FR_OK) {
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	a82a      	add	r0, sp, #168	; 0xa8
 8018ea6:	f7fd fe3d 	bl	8016b24 <f_lseek>
 8018eaa:	2800      	cmp	r0, #0
 8018eac:	f43f acf7 	beq.w	801889e <STM32Ipl_ReadImage+0x42a>
							xfree(lineData);
 8018eb0:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 8018eb2:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 8018eb6:	f000 fcbb 	bl	8019830 <xfree>
							xfree(outData);
 8018eba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018ebc:	f000 fcb8 	bl	8019830 <xfree>
							return stm32ipl_err_SeekingFile;
 8018ec0:	f7ff bb1d 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
	if (height == 0 || width == 0)
 8018ec4:	f1bb 0f00 	cmp.w	fp, #0
 8018ec8:	f000 83d3 	beq.w	8019672 <STM32Ipl_ReadImage+0x11fe>
 8018ecc:	fab6 f986 	clz	r9, r6
 8018ed0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018ed4:	2e00      	cmp	r6, #0
 8018ed6:	f000 83cc 	beq.w	8019672 <STM32Ipl_ReadImage+0x11fe>
			if (sector[0] == '#') {
 8018eda:	2a23      	cmp	r2, #35	; 0x23
 8018edc:	d024      	beq.n	8018f28 <STM32Ipl_ReadImage+0xab4>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018ede:	3a30      	subs	r2, #48	; 0x30
 8018ee0:	b2d3      	uxtb	r3, r2
					number = sector[0] - '0';
 8018ee2:	2b09      	cmp	r3, #9
 8018ee4:	bf96      	itet	ls
 8018ee6:	4691      	movls	r9, r2
 8018ee8:	2700      	movhi	r7, #0
 8018eea:	2702      	movls	r7, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8018eec:	4623      	mov	r3, r4
 8018eee:	2201      	movs	r2, #1
 8018ef0:	4629      	mov	r1, r5
 8018ef2:	a82a      	add	r0, sp, #168	; 0xa8
 8018ef4:	f7fd faf0 	bl	80164d8 <f_read>
 8018ef8:	2800      	cmp	r0, #0
 8018efa:	f47f ace3 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8018efe:	6823      	ldr	r3, [r4, #0]
 8018f00:	2b01      	cmp	r3, #1
 8018f02:	f47f acdf 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
		if (mode == EAT_WHITESPACE) {
 8018f06:	b16f      	cbz	r7, 8018f24 <STM32Ipl_ReadImage+0xab0>
			if (mode == EAT_COMMENT) {
 8018f08:	2f01      	cmp	r7, #1
						number = (number * 10) + sector[0] - '0';
 8018f0a:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8018f0e:	f04f 0702 	mov.w	r7, #2
			if (mode == EAT_COMMENT) {
 8018f12:	d00b      	beq.n	8018f2c <STM32Ipl_ReadImage+0xab8>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018f14:	782a      	ldrb	r2, [r5, #0]
 8018f16:	3a30      	subs	r2, #48	; 0x30
 8018f18:	b2d1      	uxtb	r1, r2
 8018f1a:	2909      	cmp	r1, #9
 8018f1c:	d86f      	bhi.n	8018ffe <STM32Ipl_ReadImage+0xb8a>
						number = (number * 10) + sector[0] - '0';
 8018f1e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
	} while (!valid);
 8018f22:	e7e3      	b.n	8018eec <STM32Ipl_ReadImage+0xa78>
 8018f24:	782a      	ldrb	r2, [r5, #0]
 8018f26:	e7d8      	b.n	8018eda <STM32Ipl_ReadImage+0xa66>
				mode = EAT_COMMENT;
 8018f28:	2701      	movs	r7, #1
 8018f2a:	e7df      	b.n	8018eec <STM32Ipl_ReadImage+0xa78>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8018f2c:	782f      	ldrb	r7, [r5, #0]
 8018f2e:	2f0d      	cmp	r7, #13
 8018f30:	bf18      	it	ne
 8018f32:	2f0a      	cmpne	r7, #10
 8018f34:	bf0c      	ite	eq
 8018f36:	2701      	moveq	r7, #1
 8018f38:	2700      	movne	r7, #0
					mode = EAT_NUMBER;
 8018f3a:	f087 0701 	eor.w	r7, r7, #1
 8018f3e:	e7d5      	b.n	8018eec <STM32Ipl_ReadImage+0xa78>
					xfree(lineData);
 8018f40:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 8018f42:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 8018f46:	f000 fc73 	bl	8019830 <xfree>
					xfree(outData);
 8018f4a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018f4c:	f000 fc70 	bl	8019830 <xfree>
					return stm32ipl_err_ReadingFile;
 8018f50:	f7ff bad5 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				if (height > 0) {
 8018f54:	9b04      	ldr	r3, [sp, #16]
 8018f56:	2b00      	cmp	r3, #0
					line -= lineSize;
 8018f58:	9b05      	ldr	r3, [sp, #20]
				if (height > 0) {
 8018f5a:	f340 8199 	ble.w	8019290 <STM32Ipl_ReadImage+0xe1c>
					line -= lineSize;
 8018f5e:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8018f62:	9a06      	ldr	r2, [sp, #24]
 8018f64:	429a      	cmp	r2, r3
					line -= lineSize;
 8018f66:	9305      	str	r3, [sp, #20]
					if (line >= dataOffset) {
 8018f68:	f240 81e5 	bls.w	8019336 <STM32Ipl_ReadImage+0xec2>
			for (uint32_t i = 0; i < abs(height); i++) {
 8018f6c:	9b07      	ldr	r3, [sp, #28]
 8018f6e:	9a08      	ldr	r2, [sp, #32]
 8018f70:	3301      	adds	r3, #1
 8018f72:	4293      	cmp	r3, r2
 8018f74:	9307      	str	r3, [sp, #28]
 8018f76:	f47f ae7c 	bne.w	8018c72 <STM32Ipl_ReadImage+0x7fe>
 8018f7a:	46bb      	mov	fp, r7
			xfree(lineData);
 8018f7c:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8018f7e:	2700      	movs	r7, #0
			xfree(lineData);
 8018f80:	f000 fc56 	bl	8019830 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8018f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f88:	4659      	mov	r1, fp
 8018f8a:	9300      	str	r3, [sp, #0]
 8018f8c:	2302      	movs	r3, #2
 8018f8e:	9803      	ldr	r0, [sp, #12]
 8018f90:	f7fe fee4 	bl	8017d5c <STM32Ipl_Init>
			break;
 8018f94:	f7ff bab3 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
 8018f98:	fffff800 	.word	0xfffff800
 8018f9c:	fffff000 	.word	0xfffff000
		f_close(&fp);
 8018fa0:	a82a      	add	r0, sp, #168	; 0xa8
		return stm32ipl_err_ReadingFile;
 8018fa2:	f06f 0707 	mvn.w	r7, #7
		f_close(&fp);
 8018fa6:	f7fd fd2d 	bl	8016a04 <f_close>
		return stm32ipl_err_ReadingFile;
 8018faa:	f7ff baab 	b.w	8018504 <STM32Ipl_ReadImage+0x90>
 8018fae:	9b05      	ldr	r3, [sp, #20]
 8018fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fb2:	4413      	add	r3, r2
 8018fb4:	9305      	str	r3, [sp, #20]
					if (height > 0) {
 8018fb6:	9b04      	ldr	r3, [sp, #16]
 8018fb8:	2b00      	cmp	r3, #0
						line -= lineSize;
 8018fba:	9b07      	ldr	r3, [sp, #28]
					if (height > 0) {
 8018fbc:	f340 816b 	ble.w	8019296 <STM32Ipl_ReadImage+0xe22>
						line -= lineSize;
 8018fc0:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 8018fc4:	9a06      	ldr	r2, [sp, #24]
 8018fc6:	429a      	cmp	r2, r3
						line -= lineSize;
 8018fc8:	9307      	str	r3, [sp, #28]
						if (line >= dataOffset) {
 8018fca:	f240 81c5 	bls.w	8019358 <STM32Ipl_ReadImage+0xee4>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018fce:	f10b 0b01 	add.w	fp, fp, #1
 8018fd2:	9b08      	ldr	r3, [sp, #32]
 8018fd4:	459b      	cmp	fp, r3
 8018fd6:	f47f aee4 	bne.w	8018da2 <STM32Ipl_ReadImage+0x92e>
 8018fda:	46bb      	mov	fp, r7
				xfree(lineData);
 8018fdc:	ee18 0a10 	vmov	r0, s16
				xfree(lineData);
 8018fe0:	f000 fc26 	bl	8019830 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8018fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018fe8:	4659      	mov	r1, fp
 8018fea:	9300      	str	r3, [sp, #0]
 8018fec:	2302      	movs	r3, #2
 8018fee:	9803      	ldr	r0, [sp, #12]
 8018ff0:	f7fe feb4 	bl	8017d5c <STM32Ipl_Init>
 8018ff4:	e5f3      	b.n	8018bde <STM32Ipl_ReadImage+0x76a>
		return stm32ipl_err_InvalidParameter;
 8018ff6:	f06f 0701 	mvn.w	r7, #1
 8018ffa:	f7ff ba83 	b.w	8018504 <STM32Ipl_ReadImage+0x90>
	if (number > 255)
 8018ffe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019002:	f200 8348 	bhi.w	8019696 <STM32Ipl_ReadImage+0x1222>
	switch (number_ppm) {
 8019006:	f1b8 0f04 	cmp.w	r8, #4
 801900a:	f63f aa76 	bhi.w	80184fa <STM32Ipl_ReadImage+0x86>
 801900e:	a301      	add	r3, pc, #4	; (adr r3, 8019014 <STM32Ipl_ReadImage+0xba0>)
 8019010:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 8019014:	08019149 	.word	0x08019149
 8019018:	080190c1 	.word	0x080190c1
 801901c:	080184fb 	.word	0x080184fb
 8019020:	08019081 	.word	0x08019081
 8019024:	08019029 	.word	0x08019029
			size = width * height * 3;
 8019028:	fb0b f706 	mul.w	r7, fp, r6
 801902c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
			outData = xalloc(size);
 8019030:	4638      	mov	r0, r7
 8019032:	f000 fbef 	bl	8019814 <xalloc>
			if (!outData)
 8019036:	4605      	mov	r5, r0
 8019038:	2800      	cmp	r0, #0
 801903a:	f000 8131 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 801903e:	4623      	mov	r3, r4
 8019040:	4601      	mov	r1, r0
 8019042:	463a      	mov	r2, r7
 8019044:	a82a      	add	r0, sp, #168	; 0xa8
 8019046:	f7fd fa47 	bl	80164d8 <f_read>
 801904a:	4603      	mov	r3, r0
 801904c:	2800      	cmp	r0, #0
 801904e:	f47f ac39 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8019052:	6822      	ldr	r2, [r4, #0]
 8019054:	4297      	cmp	r7, r2
 8019056:	f47f ac35 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
			for (uint32_t i = 0; i < size; i += 3) {
 801905a:	b13f      	cbz	r7, 801906c <STM32Ipl_ReadImage+0xbf8>
 801905c:	1caa      	adds	r2, r5, #2
				uint8_t tmp = outData[i];
 801905e:	5ce9      	ldrb	r1, [r5, r3]
				outData[i] = outData[i + 2];
 8019060:	5cd0      	ldrb	r0, [r2, r3]
 8019062:	54e8      	strb	r0, [r5, r3]
				outData[i + 2] = tmp;
 8019064:	54d1      	strb	r1, [r2, r3]
			for (uint32_t i = 0; i < size; i += 3) {
 8019066:	3303      	adds	r3, #3
 8019068:	429f      	cmp	r7, r3
 801906a:	d8f8      	bhi.n	801905e <STM32Ipl_ReadImage+0xbea>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801906c:	9500      	str	r5, [sp, #0]
 801906e:	465a      	mov	r2, fp
 8019070:	4631      	mov	r1, r6
 8019072:	9803      	ldr	r0, [sp, #12]
 8019074:	2304      	movs	r3, #4
	return stm32ipl_err_Ok;
 8019076:	2700      	movs	r7, #0
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8019078:	f7fe fe70 	bl	8017d5c <STM32Ipl_Init>
			break;
 801907c:	f7ff ba3f 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
			size = width * height;
 8019080:	fb0b f806 	mul.w	r8, fp, r6
			outData = xalloc(size);
 8019084:	4640      	mov	r0, r8
 8019086:	f000 fbc5 	bl	8019814 <xalloc>
			if (!outData)
 801908a:	4605      	mov	r5, r0
 801908c:	2800      	cmp	r0, #0
 801908e:	f000 8107 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 8019092:	4601      	mov	r1, r0
 8019094:	4623      	mov	r3, r4
 8019096:	4642      	mov	r2, r8
 8019098:	a82a      	add	r0, sp, #168	; 0xa8
 801909a:	f7fd fa1d 	bl	80164d8 <f_read>
 801909e:	4607      	mov	r7, r0
 80190a0:	2800      	cmp	r0, #0
 80190a2:	f47f ac0f 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 80190a6:	6823      	ldr	r3, [r4, #0]
 80190a8:	4598      	cmp	r8, r3
 80190aa:	f47f ac0b 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 80190ae:	465a      	mov	r2, fp
 80190b0:	4631      	mov	r1, r6
 80190b2:	9803      	ldr	r0, [sp, #12]
 80190b4:	2301      	movs	r3, #1
 80190b6:	9500      	str	r5, [sp, #0]
 80190b8:	f7fe fe50 	bl	8017d5c <STM32Ipl_Init>
			break;
 80190bc:	f7ff ba1f 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
			outData = xalloc(width * height * 3);
 80190c0:	fb0b f006 	mul.w	r0, fp, r6
 80190c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80190c8:	f000 fba4 	bl	8019814 <xalloc>
			if (!outData)
 80190cc:	9007      	str	r0, [sp, #28]
 80190ce:	2800      	cmp	r0, #0
 80190d0:	f000 80e6 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
			for (uint32_t i = 0; i < height; i++) {
 80190d4:	2200      	movs	r2, #0
 80190d6:	9604      	str	r6, [sp, #16]
 80190d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 80190dc:	4626      	mov	r6, r4
 80190de:	9205      	str	r2, [sp, #20]
 80190e0:	4602      	mov	r2, r0
 80190e2:	f8cd b018 	str.w	fp, [sp, #24]
				for (uint32_t j = 0; j < width; j++) {
 80190e6:	f102 0a03 	add.w	sl, r2, #3
 80190ea:	2400      	movs	r4, #0
 80190ec:	782b      	ldrb	r3, [r5, #0]
 80190ee:	46cb      	mov	fp, r9
						number = 0;
 80190f0:	f04f 0800 	mov.w	r8, #0
								if (sector[0] == '#') {
 80190f4:	2b23      	cmp	r3, #35	; 0x23
 80190f6:	d070      	beq.n	80191da <STM32Ipl_ReadImage+0xd66>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80190f8:	3b30      	subs	r3, #48	; 0x30
 80190fa:	b2da      	uxtb	r2, r3
										number = sector[0] - '0';
 80190fc:	2a09      	cmp	r2, #9
 80190fe:	bf96      	itet	ls
 8019100:	4698      	movls	r8, r3
 8019102:	2700      	movhi	r7, #0
 8019104:	2702      	movls	r7, #2
								if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019106:	4633      	mov	r3, r6
 8019108:	2201      	movs	r2, #1
 801910a:	4629      	mov	r1, r5
 801910c:	a82a      	add	r0, sp, #168	; 0xa8
 801910e:	f7fd f9e3 	bl	80164d8 <f_read>
 8019112:	2800      	cmp	r0, #0
 8019114:	f47f abd6 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8019118:	6833      	ldr	r3, [r6, #0]
 801911a:	2b01      	cmp	r3, #1
 801911c:	f47f abd2 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
							if (mode == EAT_WHITESPACE) {
 8019120:	2f00      	cmp	r7, #0
 8019122:	d04c      	beq.n	80191be <STM32Ipl_ReadImage+0xd4a>
								if (mode == EAT_COMMENT) {
 8019124:	2f01      	cmp	r7, #1
											number = (number * 10) + sector[0] - '0';
 8019126:	eb08 0288 	add.w	r2, r8, r8, lsl #2
 801912a:	f04f 0702 	mov.w	r7, #2
								if (mode == EAT_COMMENT) {
 801912e:	d056      	beq.n	80191de <STM32Ipl_ReadImage+0xd6a>
										if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019130:	782b      	ldrb	r3, [r5, #0]
 8019132:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019136:	fa5f fc81 	uxtb.w	ip, r1
 801913a:	f1bc 0f09 	cmp.w	ip, #9
 801913e:	f200 80d3 	bhi.w	80192e8 <STM32Ipl_ReadImage+0xe74>
											number = (number * 10) + sector[0] - '0';
 8019142:	eb01 0842 	add.w	r8, r1, r2, lsl #1
						} while (!valid);
 8019146:	e7de      	b.n	8019106 <STM32Ipl_ReadImage+0xc92>
			outData = xalloc(width * height);
 8019148:	fb0b f006 	mul.w	r0, fp, r6
 801914c:	f000 fb62 	bl	8019814 <xalloc>
			if (!outData)
 8019150:	4682      	mov	sl, r0
 8019152:	2800      	cmp	r0, #0
 8019154:	f000 80a4 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
 8019158:	2300      	movs	r3, #0
 801915a:	4242      	negs	r2, r0
 801915c:	9305      	str	r3, [sp, #20]
 801915e:	9204      	str	r2, [sp, #16]
			for (uint32_t i = 0; i < height; i++) {
 8019160:	9306      	str	r3, [sp, #24]
				for (uint32_t j = 0; j < width; j++) {
 8019162:	9b05      	ldr	r3, [sp, #20]
 8019164:	eb0a 0903 	add.w	r9, sl, r3
					number = 0;
 8019168:	f04f 0800 	mov.w	r8, #0
							if (sector[0] == '#') {
 801916c:	782b      	ldrb	r3, [r5, #0]
 801916e:	2b23      	cmp	r3, #35	; 0x23
 8019170:	d031      	beq.n	80191d6 <STM32Ipl_ReadImage+0xd62>
								if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019172:	3b30      	subs	r3, #48	; 0x30
 8019174:	b2da      	uxtb	r2, r3
									number = sector[0] - '0';
 8019176:	2a09      	cmp	r2, #9
 8019178:	bf96      	itet	ls
 801917a:	4698      	movls	r8, r3
 801917c:	2700      	movhi	r7, #0
 801917e:	2702      	movls	r7, #2
							if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019180:	4623      	mov	r3, r4
 8019182:	2201      	movs	r2, #1
 8019184:	4629      	mov	r1, r5
 8019186:	a82a      	add	r0, sp, #168	; 0xa8
 8019188:	f7fd f9a6 	bl	80164d8 <f_read>
 801918c:	2800      	cmp	r0, #0
 801918e:	f47f ab99 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
 8019192:	6822      	ldr	r2, [r4, #0]
 8019194:	2a01      	cmp	r2, #1
 8019196:	f47f ab95 	bne.w	80188c4 <STM32Ipl_ReadImage+0x450>
						if (mode == EAT_WHITESPACE) {
 801919a:	2f00      	cmp	r7, #0
 801919c:	d0e6      	beq.n	801916c <STM32Ipl_ReadImage+0xcf8>
							if (mode == EAT_COMMENT) {
 801919e:	2f01      	cmp	r7, #1
										number = (number * 10) + sector[0] - '0';
 80191a0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80191a4:	f04f 0702 	mov.w	r7, #2
							if (mode == EAT_COMMENT) {
 80191a8:	d00b      	beq.n	80191c2 <STM32Ipl_ReadImage+0xd4e>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80191aa:	7829      	ldrb	r1, [r5, #0]
 80191ac:	3930      	subs	r1, #48	; 0x30
 80191ae:	fa5f fc81 	uxtb.w	ip, r1
 80191b2:	f1bc 0f09 	cmp.w	ip, #9
 80191b6:	d877      	bhi.n	80192a8 <STM32Ipl_ReadImage+0xe34>
										number = (number * 10) + sector[0] - '0';
 80191b8:	eb01 0843 	add.w	r8, r1, r3, lsl #1
					} while (!valid);
 80191bc:	e7e0      	b.n	8019180 <STM32Ipl_ReadImage+0xd0c>
 80191be:	782b      	ldrb	r3, [r5, #0]
 80191c0:	e798      	b.n	80190f4 <STM32Ipl_ReadImage+0xc80>
								if ((sector[0] == '\n') || (sector[0] == '\r')) {
 80191c2:	782f      	ldrb	r7, [r5, #0]
 80191c4:	2f0d      	cmp	r7, #13
 80191c6:	bf18      	it	ne
 80191c8:	2f0a      	cmpne	r7, #10
 80191ca:	bf0c      	ite	eq
 80191cc:	2701      	moveq	r7, #1
 80191ce:	2700      	movne	r7, #0
									mode = EAT_NUMBER;
 80191d0:	f087 0701 	eor.w	r7, r7, #1
 80191d4:	e7d4      	b.n	8019180 <STM32Ipl_ReadImage+0xd0c>
								mode = EAT_COMMENT;
 80191d6:	2701      	movs	r7, #1
 80191d8:	e7d2      	b.n	8019180 <STM32Ipl_ReadImage+0xd0c>
									mode = EAT_COMMENT;
 80191da:	2701      	movs	r7, #1
 80191dc:	e793      	b.n	8019106 <STM32Ipl_ReadImage+0xc92>
									if ((sector[0] == '\n') || (sector[0] == '\r')) {
 80191de:	782f      	ldrb	r7, [r5, #0]
 80191e0:	2f0d      	cmp	r7, #13
 80191e2:	bf18      	it	ne
 80191e4:	2f0a      	cmpne	r7, #10
 80191e6:	bf0c      	ite	eq
 80191e8:	2701      	moveq	r7, #1
 80191ea:	2700      	movne	r7, #0
										mode = EAT_NUMBER;
 80191ec:	f087 0701 	eor.w	r7, r7, #1
 80191f0:	e789      	b.n	8019106 <STM32Ipl_ReadImage+0xc92>
 80191f2:	f1a8 0102 	sub.w	r1, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 80191f6:	463a      	mov	r2, r7
 80191f8:	2300      	movs	r3, #0
 80191fa:	3301      	adds	r3, #1
					uint16_t value = *inPixel;
 80191fc:	f831 0f02 	ldrh.w	r0, [r1, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8019200:	429e      	cmp	r6, r3
 8019202:	f822 0b02 	strh.w	r0, [r2], #2
 8019206:	d1f8      	bne.n	80191fa <STM32Ipl_ReadImage+0xd86>
 8019208:	f7ff bb3b 	b.w	8018882 <STM32Ipl_ReadImage+0x40e>
		return stm32ipl_err_OpeningFile;
 801920c:	f06f 0705 	mvn.w	r7, #5
 8019210:	f7ff b978 	b.w	8018504 <STM32Ipl_ReadImage+0x90>
 8019214:	9b06      	ldr	r3, [sp, #24]
 8019216:	4619      	mov	r1, r3
 8019218:	9305      	str	r3, [sp, #20]
 801921a:	f7ff bad9 	b.w	80187d0 <STM32Ipl_ReadImage+0x35c>
 801921e:	9f06      	ldr	r7, [sp, #24]
 8019220:	e409      	b.n	8018a36 <STM32Ipl_ReadImage+0x5c2>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019222:	9f07      	ldr	r7, [sp, #28]
 8019224:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019228:	e007      	b.n	801923a <STM32Ipl_ReadImage+0xdc6>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801922a:	f8d9 3000 	ldr.w	r3, [r9]
 801922e:	459a      	cmp	sl, r3
 8019230:	d111      	bne.n	8019256 <STM32Ipl_ReadImage+0xde2>
				memcpy(outPixel, lineData, outLineSize);
 8019232:	f007 fc4f 	bl	8020ad4 <memcpy>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019236:	45a0      	cmp	r8, r4
 8019238:	d01c      	beq.n	8019274 <STM32Ipl_ReadImage+0xe00>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801923a:	464b      	mov	r3, r9
 801923c:	4652      	mov	r2, sl
 801923e:	4629      	mov	r1, r5
 8019240:	a82a      	add	r0, sp, #168	; 0xa8
 8019242:	f7fd f949 	bl	80164d8 <f_read>
 8019246:	4603      	mov	r3, r0
			for (uint32_t i = 0; i < abs(height); i++) {
 8019248:	3401      	adds	r4, #1
				memcpy(outPixel, lineData, outLineSize);
 801924a:	4638      	mov	r0, r7
 801924c:	4632      	mov	r2, r6
 801924e:	4629      	mov	r1, r5
				outPixel += outLineSize;
 8019250:	4437      	add	r7, r6
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019252:	2b00      	cmp	r3, #0
 8019254:	d0e9      	beq.n	801922a <STM32Ipl_ReadImage+0xdb6>
					xfree(lineData);
 8019256:	4628      	mov	r0, r5
					return stm32ipl_err_ReadingFile;
 8019258:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 801925c:	f000 fae8 	bl	8019830 <xfree>
					xfree(outData);
 8019260:	9807      	ldr	r0, [sp, #28]
 8019262:	f000 fae5 	bl	8019830 <xfree>
					return stm32ipl_err_ReadingFile;
 8019266:	f7ff b94a 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
 801926a:	465d      	mov	r5, fp
 801926c:	e7f3      	b.n	8019256 <STM32Ipl_ReadImage+0xde2>
 801926e:	465d      	mov	r5, fp
 8019270:	f8dd b010 	ldr.w	fp, [sp, #16]
			xfree(lineData);
 8019274:	4628      	mov	r0, r5
	return stm32ipl_err_Ok;
 8019276:	2700      	movs	r7, #0
			xfree(lineData);
 8019278:	f000 fada 	bl	8019830 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB888, outData);
 801927c:	9b07      	ldr	r3, [sp, #28]
 801927e:	9a05      	ldr	r2, [sp, #20]
 8019280:	4659      	mov	r1, fp
 8019282:	9300      	str	r3, [sp, #0]
 8019284:	2304      	movs	r3, #4
 8019286:	9803      	ldr	r0, [sp, #12]
 8019288:	f7fe fd68 	bl	8017d5c <STM32Ipl_Init>
			break;
 801928c:	f7ff b937 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
					line += lineSize;
 8019290:	4453      	add	r3, sl
 8019292:	9305      	str	r3, [sp, #20]
 8019294:	e66a      	b.n	8018f6c <STM32Ipl_ReadImage+0xaf8>
						line += lineSize;
 8019296:	4453      	add	r3, sl
 8019298:	9307      	str	r3, [sp, #28]
 801929a:	e698      	b.n	8018fce <STM32Ipl_ReadImage+0xb5a>
						line += lineSize;
 801929c:	444f      	add	r7, r9
 801929e:	e48e      	b.n	8018bbe <STM32Ipl_ReadImage+0x74a>
					return stm32ipl_err_OutOfMemory;
 80192a0:	f06f 0702 	mvn.w	r7, #2
 80192a4:	f7ff b92b 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				for (uint32_t j = 0; j < width; j++) {
 80192a8:	9b04      	ldr	r3, [sp, #16]
					outData[offset + j] = (uint8_t)number;
 80192aa:	f809 8b01 	strb.w	r8, [r9], #1
				for (uint32_t j = 0; j < width; j++) {
 80192ae:	444b      	add	r3, r9
 80192b0:	429e      	cmp	r6, r3
 80192b2:	f63f af59 	bhi.w	8019168 <STM32Ipl_ReadImage+0xcf4>
			for (uint32_t i = 0; i < height; i++) {
 80192b6:	9905      	ldr	r1, [sp, #20]
 80192b8:	9b06      	ldr	r3, [sp, #24]
 80192ba:	4431      	add	r1, r6
 80192bc:	3301      	adds	r3, #1
 80192be:	9105      	str	r1, [sp, #20]
 80192c0:	9904      	ldr	r1, [sp, #16]
 80192c2:	455b      	cmp	r3, fp
 80192c4:	9306      	str	r3, [sp, #24]
 80192c6:	eba1 0106 	sub.w	r1, r1, r6
 80192ca:	9104      	str	r1, [sp, #16]
 80192cc:	f4ff af49 	bcc.w	8019162 <STM32Ipl_ReadImage+0xcee>
 80192d0:	4684      	mov	ip, r0
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 80192d2:	4613      	mov	r3, r2
 80192d4:	4631      	mov	r1, r6
 80192d6:	465a      	mov	r2, fp
 80192d8:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 80192da:	4667      	mov	r7, ip
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 80192dc:	f8cd a000 	str.w	sl, [sp]
 80192e0:	f7fe fd3c 	bl	8017d5c <STM32Ipl_Init>
			break;
 80192e4:	f7ff b90b 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
					for (uint8_t counter = 0; counter < 3; counter++) {
 80192e8:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
						pixel[counter] = number;
 80192ec:	f80b 8b01 	strb.w	r8, [fp], #1
					for (uint8_t counter = 0; counter < 3; counter++) {
 80192f0:	455a      	cmp	r2, fp
 80192f2:	f47f aefd 	bne.w	80190f0 <STM32Ipl_ReadImage+0xc7c>
					*outPixel++ = pixel[2];
 80192f6:	f899 3002 	ldrb.w	r3, [r9, #2]
				for (uint32_t j = 0; j < width; j++) {
 80192fa:	3401      	adds	r4, #1
 80192fc:	4652      	mov	r2, sl
 80192fe:	f10a 0a03 	add.w	sl, sl, #3
					*outPixel++ = pixel[2];
 8019302:	f80a 3c06 	strb.w	r3, [sl, #-6]
					*outPixel++ = pixel[1];
 8019306:	f899 3001 	ldrb.w	r3, [r9, #1]
 801930a:	f80a 3c05 	strb.w	r3, [sl, #-5]
					*outPixel++ = pixel[0];
 801930e:	f899 3000 	ldrb.w	r3, [r9]
 8019312:	f80a 3c04 	strb.w	r3, [sl, #-4]
				for (uint32_t j = 0; j < width; j++) {
 8019316:	9b04      	ldr	r3, [sp, #16]
 8019318:	42a3      	cmp	r3, r4
 801931a:	f63f aee7 	bhi.w	80190ec <STM32Ipl_ReadImage+0xc78>
			for (uint32_t i = 0; i < height; i++) {
 801931e:	9b05      	ldr	r3, [sp, #20]
 8019320:	9906      	ldr	r1, [sp, #24]
 8019322:	3301      	adds	r3, #1
 8019324:	428b      	cmp	r3, r1
 8019326:	9305      	str	r3, [sp, #20]
 8019328:	f4ff aedd 	bcc.w	80190e6 <STM32Ipl_ReadImage+0xc72>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801932c:	e9dd b306 	ldrd	fp, r3, [sp, #24]
 8019330:	9e04      	ldr	r6, [sp, #16]
 8019332:	9300      	str	r3, [sp, #0]
 8019334:	e69b      	b.n	801906e <STM32Ipl_ReadImage+0xbfa>
						if (f_lseek(fp, line) != FR_OK) {
 8019336:	4619      	mov	r1, r3
 8019338:	a82a      	add	r0, sp, #168	; 0xa8
 801933a:	f7fd fbf3 	bl	8016b24 <f_lseek>
 801933e:	2800      	cmp	r0, #0
 8019340:	f43f ae14 	beq.w	8018f6c <STM32Ipl_ReadImage+0xaf8>
							xfree(lineData);
 8019344:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 8019346:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 801934a:	f000 fa71 	bl	8019830 <xfree>
							xfree(outData);
 801934e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019350:	f000 fa6e 	bl	8019830 <xfree>
							return stm32ipl_err_SeekingFile;
 8019354:	f7ff b8d3 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
							if (f_lseek(fp, line) != FR_OK) {
 8019358:	4619      	mov	r1, r3
 801935a:	a82a      	add	r0, sp, #168	; 0xa8
 801935c:	f7fd fbe2 	bl	8016b24 <f_lseek>
 8019360:	2800      	cmp	r0, #0
 8019362:	f43f ae34 	beq.w	8018fce <STM32Ipl_ReadImage+0xb5a>
								xfree(lineData);
 8019366:	ee18 0a10 	vmov	r0, s16
								return stm32ipl_err_SeekingFile;
 801936a:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 801936e:	f000 fa5f 	bl	8019830 <xfree>
								xfree(outData);
 8019372:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019374:	f000 fa5c 	bl	8019830 <xfree>
								return stm32ipl_err_SeekingFile;
 8019378:	f7ff b8c1 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
							if (f_lseek(fp, line) != FR_OK) {
 801937c:	4639      	mov	r1, r7
 801937e:	a82a      	add	r0, sp, #168	; 0xa8
 8019380:	f7fd fbd0 	bl	8016b24 <f_lseek>
 8019384:	2800      	cmp	r0, #0
 8019386:	f43f ac1a 	beq.w	8018bbe <STM32Ipl_ReadImage+0x74a>
								xfree(lineData);
 801938a:	4630      	mov	r0, r6
								return stm32ipl_err_SeekingFile;
 801938c:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 8019390:	f000 fa4e 	bl	8019830 <xfree>
								xfree(outData);
 8019394:	9807      	ldr	r0, [sp, #28]
 8019396:	f000 fa4b 	bl	8019830 <xfree>
								return stm32ipl_err_SeekingFile;
 801939a:	f7ff b8b0 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				outData = xalloc(width * abs(height) * 2);
 801939e:	9b04      	ldr	r3, [sp, #16]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	bfb8      	it	lt
 80193a4:	425b      	neglt	r3, r3
 80193a6:	fb03 f00b 	mul.w	r0, r3, fp
 80193aa:	9307      	str	r3, [sp, #28]
 80193ac:	0040      	lsls	r0, r0, #1
 80193ae:	f000 fa31 	bl	8019814 <xalloc>
				if (!outData)
 80193b2:	900a      	str	r0, [sp, #40]	; 0x28
 80193b4:	2800      	cmp	r0, #0
 80193b6:	f43f af73 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 80193ba:	4650      	mov	r0, sl
 80193bc:	f000 fa2a 	bl	8019814 <xalloc>
				if (!lineData) {
 80193c0:	4607      	mov	r7, r0
 80193c2:	2800      	cmp	r0, #0
 80193c4:	f000 814c 	beq.w	8019660 <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80193c8:	9b04      	ldr	r3, [sp, #16]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	f340 8145 	ble.w	801965a <STM32Ipl_ReadImage+0x11e6>
 80193d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80193d4:	fb0a f808 	mul.w	r8, sl, r8
 80193d8:	9b06      	ldr	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 80193da:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80193dc:	4498      	add	r8, r3
				if (f_lseek(fp, line) != FR_OK) {
 80193de:	4641      	mov	r1, r8
 80193e0:	f7fd fba0 	bl	8016b24 <f_lseek>
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d154      	bne.n	8019492 <STM32Ipl_ReadImage+0x101e>
				for (uint32_t i = 0; i < abs(height); i++) {
 80193e8:	9b07      	ldr	r3, [sp, #28]
 80193ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80193ec:	9b04      	ldr	r3, [sp, #16]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	f000 816a 	beq.w	80196c8 <STM32Ipl_ReadImage+0x1254>
 80193f4:	ea4f 034b 	mov.w	r3, fp, lsl #1
					for (uint32_t j = 0; j < width; j++) {
 80193f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80193fa:	eb07 040b 	add.w	r4, r7, fp
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 80193fe:	f8cd b020 	str.w	fp, [sp, #32]
 8019402:	9309      	str	r3, [sp, #36]	; 0x24
 8019404:	4683      	mov	fp, r0
 8019406:	464b      	mov	r3, r9
 8019408:	4eb1      	ldr	r6, [pc, #708]	; (80196d0 <STM32Ipl_ReadImage+0x125c>)
 801940a:	4691      	mov	r9, r2
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801940c:	4652      	mov	r2, sl
 801940e:	4639      	mov	r1, r7
 8019410:	a82a      	add	r0, sp, #168	; 0xa8
 8019412:	9305      	str	r3, [sp, #20]
 8019414:	f7fd f860 	bl	80164d8 <f_read>
 8019418:	2800      	cmp	r0, #0
 801941a:	f040 810f 	bne.w	801963c <STM32Ipl_ReadImage+0x11c8>
 801941e:	9b05      	ldr	r3, [sp, #20]
 8019420:	681a      	ldr	r2, [r3, #0]
 8019422:	4592      	cmp	sl, r2
 8019424:	f040 810a 	bne.w	801963c <STM32Ipl_ReadImage+0x11c8>
					for (uint32_t j = 0; j < width; j++) {
 8019428:	9a08      	ldr	r2, [sp, #32]
 801942a:	b1ba      	cbz	r2, 801945c <STM32Ipl_ReadImage+0xfe8>
 801942c:	46cc      	mov	ip, r9
 801942e:	4638      	mov	r0, r7
						uint8_t r = palette[index] >> 16;
 8019430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019434:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
					for (uint32_t j = 0; j < width; j++) {
 8019438:	42a0      	cmp	r0, r4
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801943a:	ea06 2e11 	and.w	lr, r6, r1, lsr #8
 801943e:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 8019442:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8019446:	ea42 020e 	orr.w	r2, r2, lr
 801944a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801944e:	ea42 0201 	orr.w	r2, r2, r1
 8019452:	f82c 2b02 	strh.w	r2, [ip], #2
					for (uint32_t j = 0; j < width; j++) {
 8019456:	d1eb      	bne.n	8019430 <STM32Ipl_ReadImage+0xfbc>
 8019458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801945a:	4491      	add	r9, r2
					if (height > 0) {
 801945c:	9a04      	ldr	r2, [sp, #16]
 801945e:	2a00      	cmp	r2, #0
 8019460:	dd0d      	ble.n	801947e <STM32Ipl_ReadImage+0x100a>
						line -= lineSize;
 8019462:	eba8 080a 	sub.w	r8, r8, sl
						if (line >= dataOffset) {
 8019466:	9a06      	ldr	r2, [sp, #24]
 8019468:	4542      	cmp	r2, r8
 801946a:	d90a      	bls.n	8019482 <STM32Ipl_ReadImage+0x100e>
				for (uint32_t i = 0; i < abs(height); i++) {
 801946c:	f10b 0b01 	add.w	fp, fp, #1
 8019470:	9a07      	ldr	r2, [sp, #28]
 8019472:	4593      	cmp	fp, r2
 8019474:	d1ca      	bne.n	801940c <STM32Ipl_ReadImage+0xf98>
 8019476:	f8dd b020 	ldr.w	fp, [sp, #32]
				xfree(lineData);
 801947a:	4638      	mov	r0, r7
 801947c:	e5b0      	b.n	8018fe0 <STM32Ipl_ReadImage+0xb6c>
						line += lineSize;
 801947e:	44d0      	add	r8, sl
 8019480:	e7f4      	b.n	801946c <STM32Ipl_ReadImage+0xff8>
							if (f_lseek(fp, line) != FR_OK) {
 8019482:	4641      	mov	r1, r8
 8019484:	a82a      	add	r0, sp, #168	; 0xa8
 8019486:	9305      	str	r3, [sp, #20]
 8019488:	f7fd fb4c 	bl	8016b24 <f_lseek>
 801948c:	9b05      	ldr	r3, [sp, #20]
 801948e:	2800      	cmp	r0, #0
 8019490:	d0ec      	beq.n	801946c <STM32Ipl_ReadImage+0xff8>
								xfree(lineData);
 8019492:	4638      	mov	r0, r7
								return stm32ipl_err_SeekingFile;
 8019494:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 8019498:	f000 f9ca 	bl	8019830 <xfree>
								xfree(outData);
 801949c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801949e:	f000 f9c7 	bl	8019830 <xfree>
								return stm32ipl_err_SeekingFile;
 80194a2:	f7ff b82c 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 80194a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80194aa:	4293      	cmp	r3, r2
 80194ac:	f47f ac44 	bne.w	8018d38 <STM32Ipl_ReadImage+0x8c4>
 80194b0:	686b      	ldr	r3, [r5, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	f47f ac40 	bne.w	8018d38 <STM32Ipl_ReadImage+0x8c4>
				outData = xalloc0(STM32Ipl_DataSize(width, abs(height), IMAGE_BPP_BINARY));
 80194b8:	9b04      	ldr	r3, [sp, #16]
 80194ba:	2200      	movs	r2, #0
 80194bc:	4658      	mov	r0, fp
 80194be:	2b00      	cmp	r3, #0
 80194c0:	bfb8      	it	lt
 80194c2:	425b      	neglt	r3, r3
 80194c4:	4619      	mov	r1, r3
 80194c6:	9309      	str	r3, [sp, #36]	; 0x24
 80194c8:	f7fe fc5e 	bl	8017d88 <STM32Ipl_DataSize>
 80194cc:	f000 f9a4 	bl	8019818 <xalloc0>
				if (!outData)
 80194d0:	900a      	str	r0, [sp, #40]	; 0x28
 80194d2:	2800      	cmp	r0, #0
 80194d4:	f43f aee4 	beq.w	80192a0 <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 80194d8:	4650      	mov	r0, sl
 80194da:	f000 f99b 	bl	8019814 <xalloc>
				if (!lineData) {
 80194de:	ee08 0a10 	vmov	s16, r0
 80194e2:	2800      	cmp	r0, #0
 80194e4:	f000 80bc 	beq.w	8019660 <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80194e8:	9b04      	ldr	r3, [sp, #16]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	f340 80bf 	ble.w	801966e <STM32Ipl_ReadImage+0x11fa>
 80194f0:	3b01      	subs	r3, #1
 80194f2:	fb0a f303 	mul.w	r3, sl, r3
 80194f6:	9a06      	ldr	r2, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 80194f8:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80194fa:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 80194fc:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80194fe:	9305      	str	r3, [sp, #20]
				if (f_lseek(fp, line) != FR_OK) {
 8019500:	f7fd fb10 	bl	8016b24 <f_lseek>
 8019504:	2800      	cmp	r0, #0
 8019506:	f47f af2e 	bne.w	8019366 <STM32Ipl_ReadImage+0xef2>
				for (uint32_t i = 0; i < abs(height); i++) {
 801950a:	9b04      	ldr	r3, [sp, #16]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d055      	beq.n	80195bc <STM32Ipl_ReadImage+0x1148>
 8019510:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8019514:	465f      	mov	r7, fp
 8019516:	464e      	mov	r6, r9
 8019518:	9007      	str	r0, [sp, #28]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801951a:	4633      	mov	r3, r6
 801951c:	4652      	mov	r2, sl
 801951e:	ee18 1a10 	vmov	r1, s16
 8019522:	a82a      	add	r0, sp, #168	; 0xa8
 8019524:	f7fc ffd8 	bl	80164d8 <f_read>
 8019528:	2800      	cmp	r0, #0
 801952a:	d160      	bne.n	80195ee <STM32Ipl_ReadImage+0x117a>
 801952c:	6833      	ldr	r3, [r6, #0]
 801952e:	459a      	cmp	sl, r3
 8019530:	d15d      	bne.n	80195ee <STM32Ipl_ReadImage+0x117a>
					for (uint32_t j = 0; j < width; k--, j++) {
 8019532:	b38f      	cbz	r7, 8019598 <STM32Ipl_ReadImage+0x1124>
					value = 0;
 8019534:	4681      	mov	r9, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 8019536:	ee18 ea10 	vmov	lr, s16
 801953a:	4601      	mov	r1, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801953c:	f04f 0b01 	mov.w	fp, #1
 8019540:	9608      	str	r6, [sp, #32]
 8019542:	e01b      	b.n	801957c <STM32Ipl_ReadImage+0x1108>
 8019544:	4603      	mov	r3, r0
 8019546:	b2e0      	uxtb	r0, r4
 8019548:	fa49 f303 	asr.w	r3, r9, r3
 801954c:	f001 0c1f 	and.w	ip, r1, #31
 8019550:	094c      	lsrs	r4, r1, #5
					for (uint32_t j = 0; j < width; k--, j++) {
 8019552:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 8019554:	f003 0301 	and.w	r3, r3, #1
 8019558:	fa0b f20c 	lsl.w	r2, fp, ip
 801955c:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 8019560:	428f      	cmp	r7, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 8019562:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8019566:	ea26 0202 	bic.w	r2, r6, r2
 801956a:	f003 0301 	and.w	r3, r3, #1
 801956e:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019572:	ea4c 0202 	orr.w	r2, ip, r2
 8019576:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 801957a:	d00c      	beq.n	8019596 <STM32Ipl_ReadImage+0x1122>
						if (!(j % 8)) {
 801957c:	f011 0f07 	tst.w	r1, #7
							value = (*inData++);
 8019580:	4672      	mov	r2, lr
 8019582:	f100 34ff 	add.w	r4, r0, #4294967295
 8019586:	f04f 0307 	mov.w	r3, #7
						if (!(j % 8)) {
 801958a:	d1db      	bne.n	8019544 <STM32Ipl_ReadImage+0x10d0>
							value = (*inData++);
 801958c:	f812 9b01 	ldrb.w	r9, [r2], #1
 8019590:	2006      	movs	r0, #6
 8019592:	4696      	mov	lr, r2
 8019594:	e7d8      	b.n	8019548 <STM32Ipl_ReadImage+0x10d4>
 8019596:	9e08      	ldr	r6, [sp, #32]
					if (height > 0) {
 8019598:	9b04      	ldr	r3, [sp, #16]
					outRow += offset;
 801959a:	44d0      	add	r8, sl
					if (height > 0) {
 801959c:	2b00      	cmp	r3, #0
 801959e:	dd1b      	ble.n	80195d8 <STM32Ipl_ReadImage+0x1164>
						line -= lineSize;
 80195a0:	9b05      	ldr	r3, [sp, #20]
						if (line >= dataOffset) {
 80195a2:	9a06      	ldr	r2, [sp, #24]
						line -= lineSize;
 80195a4:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 80195a8:	429a      	cmp	r2, r3
						line -= lineSize;
 80195aa:	9305      	str	r3, [sp, #20]
						if (line >= dataOffset) {
 80195ac:	d918      	bls.n	80195e0 <STM32Ipl_ReadImage+0x116c>
				for (uint32_t i = 0; i < abs(height); i++) {
 80195ae:	9b07      	ldr	r3, [sp, #28]
 80195b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195b2:	3301      	adds	r3, #1
 80195b4:	429a      	cmp	r2, r3
 80195b6:	9307      	str	r3, [sp, #28]
 80195b8:	d1af      	bne.n	801951a <STM32Ipl_ReadImage+0x10a6>
 80195ba:	46bb      	mov	fp, r7
				xfree(lineData);
 80195bc:	ee18 0a10 	vmov	r0, s16
 80195c0:	f000 f936 	bl	8019830 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_BINARY, outData);
 80195c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195c8:	4659      	mov	r1, fp
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	2300      	movs	r3, #0
 80195ce:	9803      	ldr	r0, [sp, #12]
 80195d0:	f7fe fbc4 	bl	8017d5c <STM32Ipl_Init>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 80195d4:	f7ff bb03 	b.w	8018bde <STM32Ipl_ReadImage+0x76a>
						line += lineSize;
 80195d8:	9b05      	ldr	r3, [sp, #20]
 80195da:	4453      	add	r3, sl
 80195dc:	9305      	str	r3, [sp, #20]
 80195de:	e7e6      	b.n	80195ae <STM32Ipl_ReadImage+0x113a>
							if (f_lseek(fp, line) != FR_OK) {
 80195e0:	4619      	mov	r1, r3
 80195e2:	a82a      	add	r0, sp, #168	; 0xa8
 80195e4:	f7fd fa9e 	bl	8016b24 <f_lseek>
 80195e8:	2800      	cmp	r0, #0
 80195ea:	d0e0      	beq.n	80195ae <STM32Ipl_ReadImage+0x113a>
 80195ec:	e6bb      	b.n	8019366 <STM32Ipl_ReadImage+0xef2>
						xfree(lineData);
 80195ee:	ee18 0a10 	vmov	r0, s16
						return stm32ipl_err_ReadingFile;
 80195f2:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 80195f6:	f000 f91b 	bl	8019830 <xfree>
						xfree(outData);
 80195fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80195fc:	f000 f918 	bl	8019830 <xfree>
						return stm32ipl_err_ReadingFile;
 8019600:	f7fe bf7d 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
					xfree(lineData);
 8019604:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 8019606:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 801960a:	f000 f911 	bl	8019830 <xfree>
					xfree(outData);
 801960e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019610:	f000 f90e 	bl	8019830 <xfree>
					return stm32ipl_err_ReadingFile;
 8019614:	f7fe bf73 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
 8019618:	9b06      	ldr	r3, [sp, #24]
 801961a:	4619      	mov	r1, r3
 801961c:	9305      	str	r3, [sp, #20]
 801961e:	f7ff bb18 	b.w	8018c52 <STM32Ipl_ReadImage+0x7de>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019622:	9313      	str	r3, [sp, #76]	; 0x4c
 8019624:	f7ff b941 	b.w	80188aa <STM32Ipl_ReadImage+0x436>
						xfree(lineData);
 8019628:	4630      	mov	r0, r6
						return stm32ipl_err_ReadingFile;
 801962a:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 801962e:	f000 f8ff 	bl	8019830 <xfree>
						xfree(outData);
 8019632:	9807      	ldr	r0, [sp, #28]
 8019634:	f000 f8fc 	bl	8019830 <xfree>
						return stm32ipl_err_ReadingFile;
 8019638:	f7fe bf61 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
						xfree(lineData);
 801963c:	4638      	mov	r0, r7
						return stm32ipl_err_ReadingFile;
 801963e:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 8019642:	f000 f8f5 	bl	8019830 <xfree>
						xfree(outData);
 8019646:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019648:	f000 f8f2 	bl	8019830 <xfree>
						return stm32ipl_err_ReadingFile;
 801964c:	f7fe bf57 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
 8019650:	9b06      	ldr	r3, [sp, #24]
 8019652:	4619      	mov	r1, r3
 8019654:	9307      	str	r3, [sp, #28]
 8019656:	f7ff bb8f 	b.w	8018d78 <STM32Ipl_ReadImage+0x904>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801965a:	f04f 0800 	mov.w	r8, #0
 801965e:	e6bb      	b.n	80193d8 <STM32Ipl_ReadImage+0xf64>
					xfree(outData);
 8019660:	980a      	ldr	r0, [sp, #40]	; 0x28
					return stm32ipl_err_OutOfMemory;
 8019662:	f06f 0702 	mvn.w	r7, #2
					xfree(outData);
 8019666:	f000 f8e3 	bl	8019830 <xfree>
					return stm32ipl_err_OutOfMemory;
 801966a:	f7fe bf48 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801966e:	2300      	movs	r3, #0
 8019670:	e741      	b.n	80194f6 <STM32Ipl_ReadImage+0x1082>
		return stm32ipl_err_InvalidParameter;
 8019672:	f06f 0701 	mvn.w	r7, #1
 8019676:	f7fe bf42 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 801967a:	9809      	ldr	r0, [sp, #36]	; 0x24
				return stm32ipl_err_OutOfMemory;
 801967c:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 8019680:	f000 f8d6 	bl	8019830 <xfree>
				return stm32ipl_err_OutOfMemory;
 8019684:	f7fe bf3b 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 8019688:	9807      	ldr	r0, [sp, #28]
				return stm32ipl_err_OutOfMemory;
 801968a:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 801968e:	f000 f8cf 	bl	8019830 <xfree>
				return stm32ipl_err_OutOfMemory;
 8019692:	f7fe bf34 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
		return stm32ipl_err_Generic;
 8019696:	f04f 37ff 	mov.w	r7, #4294967295
 801969a:	f7fe bf30 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 801969e:	9810      	ldr	r0, [sp, #64]	; 0x40
				return stm32ipl_err_SeekingFile;
 80196a0:	f06f 0709 	mvn.w	r7, #9
				xfree(outData);
 80196a4:	f000 f8c4 	bl	8019830 <xfree>
				return stm32ipl_err_SeekingFile;
 80196a8:	f7fe bf29 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
			for (uint32_t i = 0; i < abs(height); i++) {
 80196ac:	930a      	str	r3, [sp, #40]	; 0x28
 80196ae:	e465      	b.n	8018f7c <STM32Ipl_ReadImage+0xb08>
				xfree(outData);
 80196b0:	9810      	ldr	r0, [sp, #64]	; 0x40
				return stm32ipl_err_OutOfMemory;
 80196b2:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 80196b6:	f000 f8bb 	bl	8019830 <xfree>
				return stm32ipl_err_OutOfMemory;
 80196ba:	f7fe bf20 	b.w	80184fe <STM32Ipl_ReadImage+0x8a>
				for (uint32_t i = 0; i < abs(height); i++) {
 80196be:	930b      	str	r3, [sp, #44]	; 0x2c
 80196c0:	e48c      	b.n	8018fdc <STM32Ipl_ReadImage+0xb68>
				for (uint32_t i = 0; i < abs(height); i++) {
 80196c2:	9308      	str	r3, [sp, #32]
 80196c4:	f7ff ba80 	b.w	8018bc8 <STM32Ipl_ReadImage+0x754>
				xfree(lineData);
 80196c8:	4638      	mov	r0, r7
				for (uint32_t i = 0; i < abs(height); i++) {
 80196ca:	930b      	str	r3, [sp, #44]	; 0x2c
				xfree(lineData);
 80196cc:	e488      	b.n	8018fe0 <STM32Ipl_ReadImage+0xb6c>
 80196ce:	bf00      	nop
 80196d0:	fffff800 	.word	0xfffff800

080196d4 <STM32Ipl_WriteImage>:
 * filename	Name of the output file; if it is not valid, an error is returned.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_WriteImage(const image_t *img, const char *filename)
{
	if (!img || !img->data || !filename)
 80196d4:	2800      	cmp	r0, #0
 80196d6:	f000 8098 	beq.w	801980a <STM32Ipl_WriteImage+0x136>
{
 80196da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!img || !img->data || !filename)
 80196dc:	68c3      	ldr	r3, [r0, #12]
 80196de:	4604      	mov	r4, r0
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	f000 808f 	beq.w	8019804 <STM32Ipl_WriteImage+0x130>
 80196e6:	460d      	mov	r5, r1
 80196e8:	2900      	cmp	r1, #0
 80196ea:	f000 808b 	beq.w	8019804 <STM32Ipl_WriteImage+0x130>
		return stm32ipl_err_InvalidParameter;

	if (img->bpp != IMAGE_BPP_BINARY && img->bpp != IMAGE_BPP_GRAYSCALE && img->bpp != IMAGE_BPP_RGB565
 80196ee:	6883      	ldr	r3, [r0, #8]
 80196f0:	2b02      	cmp	r3, #2
 80196f2:	d901      	bls.n	80196f8 <STM32Ipl_WriteImage+0x24>
 80196f4:	2b04      	cmp	r3, #4
 80196f6:	d12a      	bne.n	801974e <STM32Ipl_WriteImage+0x7a>
	len = strlen(filename);
 80196f8:	4628      	mov	r0, r5
 80196fa:	f7e6 fdfb 	bl	80002f4 <strlen>
 80196fe:	4607      	mov	r7, r0
	upFilename = xalloc(len);
 8019700:	f000 f888 	bl	8019814 <xalloc>
	strcpy(upFilename, filename);
 8019704:	4629      	mov	r1, r5
	upFilename = xalloc(len);
 8019706:	4606      	mov	r6, r0
	strcpy(upFilename, filename);
 8019708:	f007 ff6d 	bl	80215e6 <strcpy>
	for (size_t i = 0; i < len; i++)
 801970c:	b1e7      	cbz	r7, 8019748 <STM32Ipl_WriteImage+0x74>
 801970e:	1e79      	subs	r1, r7, #1
 8019710:	1e73      	subs	r3, r6, #1
 8019712:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8019810 <STM32Ipl_WriteImage+0x13c>
 8019716:	4431      	add	r1, r6
		upFilename[i] = toupper(upFilename[i]);
 8019718:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801971c:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8019720:	f000 0003 	and.w	r0, r0, #3
 8019724:	2802      	cmp	r0, #2
 8019726:	d015      	beq.n	8019754 <STM32Ipl_WriteImage+0x80>
	for (size_t i = 0; i < len; i++)
 8019728:	4299      	cmp	r1, r3
 801972a:	d1f5      	bne.n	8019718 <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 801972c:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 801972e:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 8019732:	d917      	bls.n	8019764 <STM32Ipl_WriteImage+0x90>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 8019734:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8019738:	2a47      	cmp	r2, #71	; 0x47
 801973a:	d036      	beq.n	80197aa <STM32Ipl_WriteImage+0xd6>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 801973c:	2a50      	cmp	r2, #80	; 0x50
 801973e:	d117      	bne.n	8019770 <STM32Ipl_WriteImage+0x9c>
 8019740:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8019744:	2a4d      	cmp	r2, #77	; 0x4d
 8019746:	d035      	beq.n	80197b4 <STM32Ipl_WriteImage+0xe0>
	xfree(upFilename);
 8019748:	4630      	mov	r0, r6
 801974a:	f000 f871 	bl	8019830 <xfree>

		default:
			break;
	}

	return stm32ipl_err_UnsupportedFormat;
 801974e:	f06f 0004 	mvn.w	r0, #4
}
 8019752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		upFilename[i] = toupper(upFilename[i]);
 8019754:	3a20      	subs	r2, #32
	for (size_t i = 0; i < len; i++)
 8019756:	4299      	cmp	r1, r3
		upFilename[i] = toupper(upFilename[i]);
 8019758:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < len; i++)
 801975a:	d1dd      	bne.n	8019718 <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 801975c:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 801975e:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 8019762:	d8e7      	bhi.n	8019734 <STM32Ipl_WriteImage+0x60>
	if (len >= 4) {
 8019764:	d1f0      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'P') && (ptr[-3] == 'J') && (ptr[-4] == '.'))
 8019766:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801976a:	2a47      	cmp	r2, #71	; 0x47
 801976c:	d1e6      	bne.n	801973c <STM32Ipl_WriteImage+0x68>
 801976e:	e7eb      	b.n	8019748 <STM32Ipl_WriteImage+0x74>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 8019770:	2a4d      	cmp	r2, #77	; 0x4d
 8019772:	d1e9      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
 8019774:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8019778:	2a50      	cmp	r2, #80	; 0x50
 801977a:	d02c      	beq.n	80197d6 <STM32Ipl_WriteImage+0x102>
					if ((ptr[-1] == 'M') && (ptr[-2] == 'G') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801977c:	2a47      	cmp	r2, #71	; 0x47
 801977e:	d1e3      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
 8019780:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8019784:	2a50      	cmp	r2, #80	; 0x50
 8019786:	d1df      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
 8019788:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801978c:	2b2e      	cmp	r3, #46	; 0x2e
 801978e:	d1db      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 8019790:	4630      	mov	r0, r6
 8019792:	f000 f84d 	bl	8019830 <xfree>
	switch (img->bpp) {
 8019796:	68a3      	ldr	r3, [r4, #8]
 8019798:	2b01      	cmp	r3, #1
 801979a:	d1d8      	bne.n	801974e <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 801979c:	4629      	mov	r1, r5
 801979e:	4620      	mov	r0, r4
 80197a0:	2205      	movs	r2, #5
}
 80197a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 80197a6:	f7fe bda9 	b.w	80182fc <savePnm>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 80197aa:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80197ae:	2a45      	cmp	r2, #69	; 0x45
 80197b0:	d0ca      	beq.n	8019748 <STM32Ipl_WriteImage+0x74>
 80197b2:	e7c9      	b.n	8019748 <STM32Ipl_WriteImage+0x74>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 80197b4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80197b8:	2a42      	cmp	r2, #66	; 0x42
 80197ba:	d1c5      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
 80197bc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80197c0:	2b2e      	cmp	r3, #46	; 0x2e
 80197c2:	d1c1      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 80197c4:	4630      	mov	r0, r6
 80197c6:	f000 f833 	bl	8019830 <xfree>
			return saveBmp(img, filename);
 80197ca:	4629      	mov	r1, r5
 80197cc:	4620      	mov	r0, r4
}
 80197ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return saveBmp(img, filename);
 80197d2:	f7fe bbdb 	b.w	8017f8c <saveBmp>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 80197d6:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80197da:	2a50      	cmp	r2, #80	; 0x50
 80197dc:	d1b4      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
 80197de:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80197e2:	2b2e      	cmp	r3, #46	; 0x2e
 80197e4:	d1b0      	bne.n	8019748 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 80197e6:	4630      	mov	r0, r6
 80197e8:	f000 f822 	bl	8019830 <xfree>
	switch (img->bpp) {
 80197ec:	68a3      	ldr	r3, [r4, #8]
 80197ee:	2b02      	cmp	r3, #2
 80197f0:	d001      	beq.n	80197f6 <STM32Ipl_WriteImage+0x122>
 80197f2:	2b04      	cmp	r3, #4
 80197f4:	d1ab      	bne.n	801974e <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 80197f6:	4629      	mov	r1, r5
 80197f8:	4620      	mov	r0, r4
 80197fa:	2206      	movs	r2, #6
}
 80197fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 8019800:	f7fe bd7c 	b.w	80182fc <savePnm>
		return stm32ipl_err_InvalidParameter;
 8019804:	f06f 0001 	mvn.w	r0, #1
}
 8019808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return stm32ipl_err_InvalidParameter;
 801980a:	f06f 0001 	mvn.w	r0, #1
}
 801980e:	4770      	bx	lr
 8019810:	080499f1 	.word	0x080499f1

08019814 <xalloc>:
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc(uint32_t size)
{
	return umm_malloc(size);
 8019814:	f000 baf8 	b.w	8019e08 <umm_malloc>

08019818 <xalloc0>:
 * Such buffer must be released with xfree().
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc0(uint32_t size)
{
 8019818:	b538      	push	{r3, r4, r5, lr}
 801981a:	4605      	mov	r5, r0
	void *mem = umm_malloc(size);
 801981c:	f000 faf4 	bl	8019e08 <umm_malloc>

	if (mem == NULL)
 8019820:	4604      	mov	r4, r0
 8019822:	b118      	cbz	r0, 801982c <xalloc0+0x14>
		return NULL;

	memset(mem, 0, size);
 8019824:	462a      	mov	r2, r5
 8019826:	2100      	movs	r1, #0
 8019828:	f007 f97c 	bl	8020b24 <memset>

	return mem;
}
 801982c:	4620      	mov	r0, r4
 801982e:	bd38      	pop	{r3, r4, r5, pc}

08019830 <xfree>:
 * @param mem	Pointer to the the memory buffer to be released.
 * @return		void
 */
void xfree(void *mem)
{
	umm_free(mem);
 8019830:	f000 ba92 	b.w	8019d58 <umm_free>

08019834 <fb_init>:
 * hood, uses heap memory .
 * @return		void.
 */
void fb_init(void)
{
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 8019834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019838:	2100      	movs	r1, #0
 801983a:	4805      	ldr	r0, [pc, #20]	; (8019850 <fb_init+0x1c>)
{
 801983c:	b508      	push	{r3, lr}
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 801983e:	f007 f971 	bl	8020b24 <memset>
	g_fb_alloc_inext = 0;
 8019842:	2300      	movs	r3, #0
 8019844:	4903      	ldr	r1, [pc, #12]	; (8019854 <fb_init+0x20>)
	g_fb_alloc_imark = 0;
 8019846:	4a04      	ldr	r2, [pc, #16]	; (8019858 <fb_init+0x24>)
	g_fb_alloc_inext = 0;
 8019848:	600b      	str	r3, [r1, #0]
	g_fb_alloc_imark = 0;
 801984a:	6013      	str	r3, [r2, #0]
}
 801984c:	bd08      	pop	{r3, pc}
 801984e:	bf00      	nop
 8019850:	24005264 	.word	0x24005264
 8019854:	24005260 	.word	0x24005260
 8019858:	2400525c 	.word	0x2400525c

0801985c <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 801985c:	2800      	cmp	r0, #0
 801985e:	f000 81dd 	beq.w	8019c1c <STM32Ipl_Downscale+0x3c0>
 8019862:	68c3      	ldr	r3, [r0, #12]
{
 8019864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019868:	4681      	mov	r9, r0
 801986a:	b089      	sub	sp, #36	; 0x24
	STM32IPL_CHECK_VALID_IMAGE(dst)
 801986c:	2b00      	cmp	r3, #0
 801986e:	f000 81d2 	beq.w	8019c16 <STM32Ipl_Downscale+0x3ba>
 8019872:	460e      	mov	r6, r1
 8019874:	2900      	cmp	r1, #0
 8019876:	f000 81ce 	beq.w	8019c16 <STM32Ipl_Downscale+0x3ba>
 801987a:	68cb      	ldr	r3, [r1, #12]
 801987c:	2b00      	cmp	r3, #0
 801987e:	f000 81ca 	beq.w	8019c16 <STM32Ipl_Downscale+0x3ba>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 8019882:	210f      	movs	r1, #15
 8019884:	4617      	mov	r7, r2
 8019886:	f7fe fabb 	bl	8017e00 <STM32Ipl_ImageFormatSupported>
 801988a:	b378      	cbz	r0, 80198ec <STM32Ipl_Downscale+0x90>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 801988c:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8019890:	68b3      	ldr	r3, [r6, #8]
 8019892:	429c      	cmp	r4, r3
 8019894:	f040 81bf 	bne.w	8019c16 <STM32Ipl_Downscale+0x3ba>

	if ((dst->w < 1) || (dst->h < 1))
 8019898:	f8d6 8000 	ldr.w	r8, [r6]
 801989c:	f1b8 0f00 	cmp.w	r8, #0
 80198a0:	f340 81b9 	ble.w	8019c16 <STM32Ipl_Downscale+0x3ba>
 80198a4:	6871      	ldr	r1, [r6, #4]
 80198a6:	2900      	cmp	r1, #0
 80198a8:	9101      	str	r1, [sp, #4]
 80198aa:	f340 81b4 	ble.w	8019c16 <STM32Ipl_Downscale+0x3ba>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 80198ae:	e9d9 b200 	ldrd	fp, r2, [r9]
 80198b2:	0412      	lsls	r2, r2, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 80198b4:	ea4f 430b 	mov.w	r3, fp, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 80198b8:	fb92 f2f1 	sdiv	r2, r2, r1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 80198bc:	fb93 f3f8 	sdiv	r3, r3, r8
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 80198c0:	1c51      	adds	r1, r2, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 80198c2:	1c5d      	adds	r5, r3, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 80198c4:	9102      	str	r1, [sp, #8]

	if (reversed) {
 80198c6:	b147      	cbz	r7, 80198da <STM32Ipl_Downscale+0x7e>
		switch (src->bpp) {
 80198c8:	2c04      	cmp	r4, #4
 80198ca:	d80f      	bhi.n	80198ec <STM32Ipl_Downscale+0x90>
 80198cc:	e8df f014 	tbh	[pc, r4, lsl #1]
 80198d0:	00e8011d 	.word	0x00e8011d
 80198d4:	000e016c 	.word	0x000e016c
 80198d8:	0013      	.short	0x0013

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 80198da:	2c04      	cmp	r4, #4
 80198dc:	d806      	bhi.n	80198ec <STM32Ipl_Downscale+0x90>
 80198de:	e8df f014 	tbh	[pc, r4, lsl #1]
 80198e2:	0049      	.short	0x0049
 80198e4:	00ef00bd 	.word	0x00ef00bd
 80198e8:	008e0005 	.word	0x008e0005
	if (reversed) {
 80198ec:	f06f 0004 	mvn.w	r0, #4
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
}
 80198f0:	b009      	add	sp, #36	; 0x24
 80198f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 80198f6:	9901      	ldr	r1, [sp, #4]
 80198f8:	f108 30ff 	add.w	r0, r8, #4294967295
 80198fc:	9c02      	ldr	r4, [sp, #8]
 80198fe:	43d2      	mvns	r2, r2
 8019900:	f101 3eff 	add.w	lr, r1, #4294967295
 8019904:	fb05 f000 	mul.w	r0, r5, r0
 8019908:	68f1      	ldr	r1, [r6, #12]
 801990a:	43db      	mvns	r3, r3
 801990c:	fb0e fa08 	mul.w	sl, lr, r8
 8019910:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8019914:	9002      	str	r0, [sp, #8]
 8019916:	eba8 0088 	sub.w	r0, r8, r8, lsl #2
 801991a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801991e:	fb0e f904 	mul.w	r9, lr, r4
 8019922:	448a      	add	sl, r1
 8019924:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 8019928:	9101      	str	r1, [sp, #4]
 801992a:	0041      	lsls	r1, r0, #1
 801992c:	9103      	str	r1, [sp, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801992e:	9901      	ldr	r1, [sp, #4]
 8019930:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8019934:	9c02      	ldr	r4, [sp, #8]
 8019936:	eb01 080a 	add.w	r8, r1, sl
 801993a:	fb0b fc0c 	mul.w	ip, fp, ip
 801993e:	4640      	mov	r0, r8
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019940:	eb0c 4124 	add.w	r1, ip, r4, asr #16
 8019944:	1ec5      	subs	r5, r0, #3
 8019946:	441c      	add	r4, r3
 8019948:	eb01 0141 	add.w	r1, r1, r1, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 801994c:	45aa      	cmp	sl, r5
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801994e:	eb06 0701 	add.w	r7, r6, r1
 8019952:	5a71      	ldrh	r1, [r6, r1]
 8019954:	78bf      	ldrb	r7, [r7, #2]
 8019956:	f820 1c03 	strh.w	r1, [r0, #-3]
 801995a:	4628      	mov	r0, r5
 801995c:	70af      	strb	r7, [r5, #2]
					for (int x = dstW - 1; x >= 0; x--)
 801995e:	d1ef      	bne.n	8019940 <STM32Ipl_Downscale+0xe4>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019960:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019964:	9903      	ldr	r1, [sp, #12]
 8019966:	4491      	add	r9, r2
 8019968:	f1be 3fff 	cmp.w	lr, #4294967295
 801996c:	eb01 0a08 	add.w	sl, r1, r8
 8019970:	d1dd      	bne.n	801992e <STM32Ipl_Downscale+0xd2>
 8019972:	e14c      	b.n	8019c0e <STM32Ipl_Downscale+0x3b2>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019974:	f10b 021f 	add.w	r2, fp, #31
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019978:	f108 031f 	add.w	r3, r8, #31
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801997c:	f8d9 100c 	ldr.w	r1, [r9, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019980:	f04f 0a00 	mov.w	sl, #0
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019984:	0952      	lsrs	r2, r2, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019986:	f04f 0b01 	mov.w	fp, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801998a:	095b      	lsrs	r3, r3, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801998c:	4689      	mov	r9, r1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801998e:	9205      	str	r2, [sp, #20]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019990:	68f2      	ldr	r2, [r6, #12]
 8019992:	9306      	str	r3, [sp, #24]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019994:	9407      	str	r4, [sp, #28]
				for (int32_t y = 0; y < dstH; y++) {
 8019996:	e9cd a403 	strd	sl, r4, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801999a:	9b03      	ldr	r3, [sp, #12]
 801999c:	2000      	movs	r0, #0
					for (int32_t x = 0; x < dstW; x++)
 801999e:	9907      	ldr	r1, [sp, #28]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 80199a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80199a4:	9b05      	ldr	r3, [sp, #20]
 80199a6:	fb03 fe0e 	mul.w	lr, r3, lr
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 80199aa:	eb0e 5360 	add.w	r3, lr, r0, asr #21
 80199ae:	f3c0 4404 	ubfx	r4, r0, #16, #5
 80199b2:	f001 071f 	and.w	r7, r1, #31
 80199b6:	eb0a 1661 	add.w	r6, sl, r1, asr #5
 80199ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 80199be:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 80199c0:	fa0b fc07 	lsl.w	ip, fp, r7
 80199c4:	4428      	add	r0, r5
 80199c6:	40e3      	lsrs	r3, r4
 80199c8:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 80199cc:	4588      	cmp	r8, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 80199ce:	f003 0301 	and.w	r3, r3, #1
 80199d2:	ea24 040c 	bic.w	r4, r4, ip
 80199d6:	fa03 f307 	lsl.w	r3, r3, r7
 80199da:	ea43 0304 	orr.w	r3, r3, r4
 80199de:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 80199e2:	d1e2      	bne.n	80199aa <STM32Ipl_Downscale+0x14e>
				for (int32_t y = 0; y < dstH; y++) {
 80199e4:	9b04      	ldr	r3, [sp, #16]
 80199e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199ea:	3301      	adds	r3, #1
 80199ec:	4401      	add	r1, r0
 80199ee:	9304      	str	r3, [sp, #16]
 80199f0:	9103      	str	r1, [sp, #12]
 80199f2:	9906      	ldr	r1, [sp, #24]
 80199f4:	448a      	add	sl, r1
 80199f6:	9901      	ldr	r1, [sp, #4]
 80199f8:	4299      	cmp	r1, r3
 80199fa:	d1ce      	bne.n	801999a <STM32Ipl_Downscale+0x13e>
 80199fc:	e107      	b.n	8019c0e <STM32Ipl_Downscale+0x3b2>
 80199fe:	eb08 0348 	add.w	r3, r8, r8, lsl #1
	if (reversed) {
 8019a02:	f04f 0c00 	mov.w	ip, #0
 8019a06:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8019a0a:	f8d9 000c 	ldr.w	r0, [r9, #12]
				for (int32_t y = 0; y < dstH; y++) {
 8019a0e:	46e6      	mov	lr, ip
 8019a10:	eb0a 0703 	add.w	r7, sl, r3
	if (reversed) {
 8019a14:	46e1      	mov	r9, ip
 8019a16:	9303      	str	r3, [sp, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019a18:	ea4f 4629 	mov.w	r6, r9, asr #16
 8019a1c:	2100      	movs	r1, #0
 8019a1e:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8019a22:	fb0b f606 	mul.w	r6, fp, r6
					for (int32_t x = 0; x < dstW; x++)
 8019a26:	4452      	add	r2, sl
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019a28:	eb06 4321 	add.w	r3, r6, r1, asr #16
 8019a2c:	3203      	adds	r2, #3
 8019a2e:	4429      	add	r1, r5
 8019a30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a34:	18c4      	adds	r4, r0, r3
 8019a36:	5ac3      	ldrh	r3, [r0, r3]
 8019a38:	78a4      	ldrb	r4, [r4, #2]
 8019a3a:	f822 3c03 	strh.w	r3, [r2, #-3]
 8019a3e:	f802 4c01 	strb.w	r4, [r2, #-1]
					for (int32_t x = 0; x < dstW; x++)
 8019a42:	4297      	cmp	r7, r2
 8019a44:	d1f0      	bne.n	8019a28 <STM32Ipl_Downscale+0x1cc>
				for (int32_t y = 0; y < dstH; y++) {
 8019a46:	9b02      	ldr	r3, [sp, #8]
 8019a48:	f10e 0e01 	add.w	lr, lr, #1
 8019a4c:	44c4      	add	ip, r8
 8019a4e:	4499      	add	r9, r3
 8019a50:	9b03      	ldr	r3, [sp, #12]
 8019a52:	441f      	add	r7, r3
 8019a54:	9b01      	ldr	r3, [sp, #4]
 8019a56:	4573      	cmp	r3, lr
 8019a58:	d1de      	bne.n	8019a18 <STM32Ipl_Downscale+0x1bc>
 8019a5a:	e0d8      	b.n	8019c0e <STM32Ipl_Downscale+0x3b2>
	if (reversed) {
 8019a5c:	2700      	movs	r7, #0
 8019a5e:	4641      	mov	r1, r8
				for (int32_t y = 0; y < dstH; y++) {
 8019a60:	463c      	mov	r4, r7
 8019a62:	e9dd ce01 	ldrd	ip, lr, [sp, #4]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019a66:	68f3      	ldr	r3, [r6, #12]
 8019a68:	fb01 f104 	mul.w	r1, r1, r4
 8019a6c:	f8d9 200c 	ldr.w	r2, [r9, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019a70:	1438      	asrs	r0, r7, #16
					for (int32_t x = 0; x < dstW; x++)
 8019a72:	eb03 0a08 	add.w	sl, r3, r8
 8019a76:	440b      	add	r3, r1
 8019a78:	fb0b 2000 	mla	r0, fp, r0, r2
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	448a      	add	sl, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8019a80:	1411      	asrs	r1, r2, #16
 8019a82:	442a      	add	r2, r5
 8019a84:	5c41      	ldrb	r1, [r0, r1]
 8019a86:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 8019a8a:	459a      	cmp	sl, r3
 8019a8c:	d1f8      	bne.n	8019a80 <STM32Ipl_Downscale+0x224>
				for (int32_t y = 0; y < dstH; y++) {
 8019a8e:	3401      	adds	r4, #1
 8019a90:	4477      	add	r7, lr
 8019a92:	45a4      	cmp	ip, r4
 8019a94:	f000 80bb 	beq.w	8019c0e <STM32Ipl_Downscale+0x3b2>
 8019a98:	f8d9 b000 	ldr.w	fp, [r9]
 8019a9c:	6831      	ldr	r1, [r6, #0]
 8019a9e:	e7e2      	b.n	8019a66 <STM32Ipl_Downscale+0x20a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019aa0:	9b01      	ldr	r3, [sp, #4]
 8019aa2:	4640      	mov	r0, r8
 8019aa4:	1e5c      	subs	r4, r3, #1
 8019aa6:	e000      	b.n	8019aaa <STM32Ipl_Downscale+0x24e>
 8019aa8:	6830      	ldr	r0, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8019aaa:	68f3      	ldr	r3, [r6, #12]
 8019aac:	4642      	mov	r2, r8
 8019aae:	2100      	movs	r1, #0
 8019ab0:	fb00 3004 	mla	r0, r0, r4, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019ab4:	3c01      	subs	r4, #1
 8019ab6:	f007 f835 	bl	8020b24 <memset>
 8019aba:	1c63      	adds	r3, r4, #1
 8019abc:	d1f4      	bne.n	8019aa8 <STM32Ipl_Downscale+0x24c>
 8019abe:	e0a6      	b.n	8019c0e <STM32Ipl_Downscale+0x3b2>
 8019ac0:	f8d6 e00c 	ldr.w	lr, [r6, #12]
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 8019ac4:	2700      	movs	r7, #0
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019ac6:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8019aca:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8019ace:	eb0e 0448 	add.w	r4, lr, r8, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 8019ad2:	46b9      	mov	r9, r7
				for (int32_t y = 0; y < dstH; y++) {
 8019ad4:	46bc      	mov	ip, r7
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019ad6:	ea4f 4029 	mov.w	r0, r9, asr #16
 8019ada:	2200      	movs	r2, #0
 8019adc:	eb0e 0347 	add.w	r3, lr, r7, lsl #1
 8019ae0:	fb0b f000 	mul.w	r0, fp, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 8019ae4:	eb00 4122 	add.w	r1, r0, r2, asr #16
 8019ae8:	442a      	add	r2, r5
 8019aea:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8019aee:	f823 1b02 	strh.w	r1, [r3], #2
					for (int32_t x = 0; x < dstW; x++)
 8019af2:	429c      	cmp	r4, r3
 8019af4:	d1f6      	bne.n	8019ae4 <STM32Ipl_Downscale+0x288>
				for (int32_t y = 0; y < dstH; y++) {
 8019af6:	9b02      	ldr	r3, [sp, #8]
 8019af8:	f10c 0c01 	add.w	ip, ip, #1
 8019afc:	4447      	add	r7, r8
 8019afe:	4454      	add	r4, sl
 8019b00:	4499      	add	r9, r3
 8019b02:	9b01      	ldr	r3, [sp, #4]
 8019b04:	4563      	cmp	r3, ip
 8019b06:	d1e6      	bne.n	8019ad6 <STM32Ipl_Downscale+0x27a>
 8019b08:	e081      	b.n	8019c0e <STM32Ipl_Downscale+0x3b2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b0a:	9901      	ldr	r1, [sp, #4]
 8019b0c:	1c57      	adds	r7, r2, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019b0e:	f108 001f 	add.w	r0, r8, #31
 8019b12:	f108 34ff 	add.w	r4, r8, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b16:	f101 3eff 	add.w	lr, r1, #4294967295
 8019b1a:	43d2      	mvns	r2, r2
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b1c:	f10b 011f 	add.w	r1, fp, #31
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019b20:	0940      	lsrs	r0, r0, #5
 8019b22:	fb0e f707 	mul.w	r7, lr, r7
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b26:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8019b2a:	0949      	lsrs	r1, r1, #5
 8019b2c:	9205      	str	r2, [sp, #20]
 8019b2e:	9701      	str	r7, [sp, #4]
 8019b30:	43db      	mvns	r3, r3
 8019b32:	fb04 f205 	mul.w	r2, r4, r5
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019b36:	68f7      	ldr	r7, [r6, #12]
 8019b38:	fb00 fa0e 	mul.w	sl, r0, lr
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019b3c:	f04f 0b01 	mov.w	fp, #1
 8019b40:	9406      	str	r4, [sp, #24]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019b42:	9003      	str	r0, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b44:	9102      	str	r1, [sp, #8]
 8019b46:	9204      	str	r2, [sp, #16]
 8019b48:	9a01      	ldr	r2, [sp, #4]
 8019b4a:	9804      	ldr	r0, [sp, #16]
 8019b4c:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019b50:	9a02      	ldr	r2, [sp, #8]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019b52:	9906      	ldr	r1, [sp, #24]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b54:	fb02 f909 	mul.w	r9, r2, r9
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019b58:	eb09 5260 	add.w	r2, r9, r0, asr #21
 8019b5c:	f3c0 4404 	ubfx	r4, r0, #16, #5
 8019b60:	f001 061f 	and.w	r6, r1, #31
 8019b64:	eb0a 1561 	add.w	r5, sl, r1, asr #5
 8019b68:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019b6c:	3901      	subs	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019b6e:	fa0b f806 	lsl.w	r8, fp, r6
 8019b72:	4418      	add	r0, r3
 8019b74:	40e2      	lsrs	r2, r4
 8019b76:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 8019b7a:	f002 0201 	and.w	r2, r2, #1
 8019b7e:	ea24 0408 	bic.w	r4, r4, r8
 8019b82:	40b2      	lsls	r2, r6
 8019b84:	4322      	orrs	r2, r4
 8019b86:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019b8a:	1c4a      	adds	r2, r1, #1
 8019b8c:	d1e4      	bne.n	8019b58 <STM32Ipl_Downscale+0x2fc>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b8e:	9a01      	ldr	r2, [sp, #4]
 8019b90:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019b94:	9905      	ldr	r1, [sp, #20]
 8019b96:	f1be 3fff 	cmp.w	lr, #4294967295
 8019b9a:	440a      	add	r2, r1
 8019b9c:	9201      	str	r2, [sp, #4]
 8019b9e:	9a03      	ldr	r2, [sp, #12]
 8019ba0:	ebaa 0a02 	sub.w	sl, sl, r2
 8019ba4:	d1d0      	bne.n	8019b48 <STM32Ipl_Downscale+0x2ec>
 8019ba6:	e032      	b.n	8019c0e <STM32Ipl_Downscale+0x3b2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019ba8:	9901      	ldr	r1, [sp, #4]
 8019baa:	f108 30ff 	add.w	r0, r8, #4294967295
 8019bae:	ebc8 7a88 	rsb	sl, r8, r8, lsl #30
 8019bb2:	1c54      	adds	r4, r2, #1
 8019bb4:	f101 3eff 	add.w	lr, r1, #4294967295
 8019bb8:	68f6      	ldr	r6, [r6, #12]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019bba:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8019bbe:	43d7      	mvns	r7, r2
 8019bc0:	fb0e f108 	mul.w	r1, lr, r8
 8019bc4:	43db      	mvns	r3, r3
 8019bc6:	fb05 f200 	mul.w	r2, r5, r0
 8019bca:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8019bce:	fb0e f904 	mul.w	r9, lr, r4
 8019bd2:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8019bd6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019bda:	9201      	str	r2, [sp, #4]
 8019bdc:	ea4f 4429 	mov.w	r4, r9, asr #16
 8019be0:	eb08 0506 	add.w	r5, r8, r6
 8019be4:	9901      	ldr	r1, [sp, #4]
 8019be6:	fb0b f404 	mul.w	r4, fp, r4
 8019bea:	462a      	mov	r2, r5
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 8019bec:	eb04 4021 	add.w	r0, r4, r1, asr #16
 8019bf0:	4419      	add	r1, r3
 8019bf2:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
 8019bf6:	f822 0d02 	strh.w	r0, [r2, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 8019bfa:	4296      	cmp	r6, r2
 8019bfc:	d1f6      	bne.n	8019bec <STM32Ipl_Downscale+0x390>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019bfe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019c02:	44b9      	add	r9, r7
 8019c04:	eb0a 0605 	add.w	r6, sl, r5
 8019c08:	f1be 3fff 	cmp.w	lr, #4294967295
 8019c0c:	d1e6      	bne.n	8019bdc <STM32Ipl_Downscale+0x380>
	return stm32ipl_err_Ok;
 8019c0e:	2000      	movs	r0, #0
}
 8019c10:	b009      	add	sp, #36	; 0x24
 8019c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8019c16:	f06f 0001 	mvn.w	r0, #1
 8019c1a:	e669      	b.n	80198f0 <STM32Ipl_Downscale+0x94>
 8019c1c:	f06f 0001 	mvn.w	r0, #1
}
 8019c20:	4770      	bx	lr
 8019c22:	bf00      	nop

08019c24 <umm_malloc_core>:
   * When a block removed from the free list, the space used by the free
   * pointers is available for data. That's what the first calculation
   * of size is doing.
   */

  if( size <= (sizeof(((umm_block *)0)->body)) )
 8019c24:	287c      	cmp	r0, #124	; 0x7c
/* ------------------------------------------------------------------------
 * Must be called only from within critical sections guarded by
 * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
 */

static void *umm_malloc_core( size_t size ) {
 8019c26:	b4f0      	push	{r4, r5, r6, r7}
  if( size <= (sizeof(((umm_block *)0)->body)) )
 8019c28:	d96c      	bls.n	8019d04 <umm_malloc_core+0xe0>
  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 8019c2a:	f1a0 047d 	sub.w	r4, r0, #125	; 0x7d
  return( 2 + size/(sizeof(umm_block)) );
 8019c2e:	09e4      	lsrs	r4, r4, #7
 8019c30:	3402      	adds	r4, #2
 8019c32:	b2a4      	uxth	r4, r4
   *
   * This part may be customized to be a best-fit, worst-fit, or first-fit
   * algorithm
   */

  cf = UMM_NFREE(0);
 8019c34:	4b34      	ldr	r3, [pc, #208]	; (8019d08 <umm_malloc_core+0xe4>)
 8019c36:	681f      	ldr	r7, [r3, #0]
 8019c38:	88b8      	ldrh	r0, [r7, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( cf ) {
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	d053      	beq.n	8019ce6 <umm_malloc_core+0xc2>
 8019c3e:	4602      	mov	r2, r0
  bestSize  = 0x7FFF;
 8019c40:	f647 76ff 	movw	r6, #32767	; 0x7fff
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 8019c44:	eb07 11c2 	add.w	r1, r7, r2, lsl #7
 8019c48:	880b      	ldrh	r3, [r1, #0]
 8019c4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019c4e:	1a9b      	subs	r3, r3, r2
 8019c50:	b29b      	uxth	r3, r3

    DBGLOG_TRACE( "Looking at block %6i size %6i\n", cf, blockSize );

#if defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 8019c52:	429c      	cmp	r4, r3
 8019c54:	bf8c      	ite	hi
 8019c56:	2500      	movhi	r5, #0
 8019c58:	2501      	movls	r5, #1
 8019c5a:	42b3      	cmp	r3, r6
 8019c5c:	d202      	bcs.n	8019c64 <umm_malloc_core+0x40>
 8019c5e:	b10d      	cbz	r5, 8019c64 <umm_malloc_core+0x40>
 8019c60:	4610      	mov	r0, r2
 8019c62:	461e      	mov	r6, r3
      break;
#else
#  error "No UMM_*_FIT is defined - check umm_malloc_cfg.h"
#endif

    cf = UMM_NFREE(cf);
 8019c64:	888a      	ldrh	r2, [r1, #4]
  while( cf ) {
 8019c66:	2a00      	cmp	r2, #0
 8019c68:	d1ec      	bne.n	8019c44 <umm_malloc_core+0x20>
  }

  if( 0x7FFF != bestSize ) {
 8019c6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019c6e:	4296      	cmp	r6, r2
 8019c70:	d03d      	beq.n	8019cee <umm_malloc_core+0xca>
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 8019c72:	eb07 12c0 	add.w	r2, r7, r0, lsl #7
 8019c76:	42b4      	cmp	r4, r6
 8019c78:	8813      	ldrh	r3, [r2, #0]
 8019c7a:	bf8c      	ite	hi
 8019c7c:	2500      	movhi	r5, #0
 8019c7e:	2501      	movls	r5, #1
 8019c80:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8019c84:	2900      	cmp	r1, #0
 8019c86:	d03a      	beq.n	8019cfe <umm_malloc_core+0xda>
 8019c88:	b3cd      	cbz	r5, 8019cfe <umm_malloc_core+0xda>
     * what we need, unlink it from the free list and mark it as in use, and
     * link the rest of the block back into the freelist as if it was a new
     * block on the free list...
     */

    if( blockSize == blocks ) {
 8019c8a:	42a6      	cmp	r6, r4
 8019c8c:	d01f      	beq.n	8019cce <umm_malloc_core+0xaa>
  UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) | new_freemask;
 8019c8e:	4404      	add	r4, r0
 8019c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8019c94:	eb07 11c4 	add.w	r1, r7, r4, lsl #7
 8019c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8019c9c:	01e5      	lsls	r5, r4, #7
 8019c9e:	537b      	strh	r3, [r7, r5]
  UMM_PBLOCK(c+blocks) = c;
 8019ca0:	8048      	strh	r0, [r1, #2]
  UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 8019ca2:	8813      	ldrh	r3, [r2, #0]
 8019ca4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019ca8:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 8019cac:	805c      	strh	r4, [r3, #2]
       * free block from `cf` to `cf + blocks`. So we have to adjust pointers
       * to and from adjacent free blocks.
       */

      /* previous free block */
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 8019cae:	88d0      	ldrh	r0, [r2, #6]
  UMM_NBLOCK(c)                                = (c+blocks);
 8019cb0:	8014      	strh	r4, [r2, #0]
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 8019cb2:	b283      	uxth	r3, r0
 8019cb4:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 8019cb8:	809c      	strh	r4, [r3, #4]
      UMM_PFREE( cf + blocks ) = UMM_PFREE(cf);
 8019cba:	80c8      	strh	r0, [r1, #6]

      /* next free block */
      UMM_PFREE( UMM_NFREE(cf) ) = cf + blocks;
 8019cbc:	8890      	ldrh	r0, [r2, #4]
 8019cbe:	b283      	uxth	r3, r0
 8019cc0:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 8019cc4:	80dc      	strh	r4, [r3, #6]
      UMM_NFREE( cf + blocks ) = UMM_NFREE(cf);
 8019cc6:	8088      	strh	r0, [r1, #4]
    DBGLOG_DEBUG(  "Can't allocate %5i blocks\n", blocks );

    return( (void *)NULL );
  }

  return( (void *)&UMM_DATA(cf) );
 8019cc8:	1d10      	adds	r0, r2, #4
}
 8019cca:	bcf0      	pop	{r4, r5, r6, r7}
 8019ccc:	4770      	bx	lr
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8019cce:	88d0      	ldrh	r0, [r2, #6]
 8019cd0:	8894      	ldrh	r4, [r2, #4]
 8019cd2:	b283      	uxth	r3, r0
 8019cd4:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 8019cd8:	809c      	strh	r4, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 8019cda:	8893      	ldrh	r3, [r2, #4]
 8019cdc:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 8019ce0:	80d8      	strh	r0, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8019ce2:	8011      	strh	r1, [r2, #0]
}
 8019ce4:	e7f0      	b.n	8019cc8 <umm_malloc_core+0xa4>
  if( 0x7FFF != bestSize ) {
 8019ce6:	fab4 f584 	clz	r5, r4
  uint16_t blockSize = 0;
 8019cea:	4603      	mov	r3, r0
 8019cec:	096d      	lsrs	r5, r5, #5
 8019cee:	463a      	mov	r2, r7
 8019cf0:	461e      	mov	r6, r3
 8019cf2:	2000      	movs	r0, #0
  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 8019cf4:	8813      	ldrh	r3, [r2, #0]
 8019cf6:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8019cfa:	2900      	cmp	r1, #0
 8019cfc:	d1c4      	bne.n	8019c88 <umm_malloc_core+0x64>
    return( (void *)NULL );
 8019cfe:	2000      	movs	r0, #0
}
 8019d00:	bcf0      	pop	{r4, r5, r6, r7}
 8019d02:	4770      	bx	lr
    return( 1 );
 8019d04:	2401      	movs	r4, #1
 8019d06:	e795      	b.n	8019c34 <umm_malloc_core+0x10>
 8019d08:	24005364 	.word	0x24005364

08019d0c <umm_init>:
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 8019d0c:	460a      	mov	r2, r1
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 8019d0e:	2100      	movs	r1, #0
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 8019d10:	b538      	push	{r3, r4, r5, lr}
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 8019d12:	09d3      	lsrs	r3, r2, #7
 8019d14:	4d0e      	ldr	r5, [pc, #56]	; (8019d50 <umm_init+0x44>)
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 8019d16:	4c0f      	ldr	r4, [pc, #60]	; (8019d54 <umm_init+0x48>)
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 8019d18:	802b      	strh	r3, [r5, #0]
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 8019d1a:	6020      	str	r0, [r4, #0]
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 8019d1c:	f006 ff02 	bl	8020b24 <memset>
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019d20:	8828      	ldrh	r0, [r5, #0]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019d22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    UMM_NBLOCK(0) = 1;
 8019d26:	6822      	ldr	r2, [r4, #0]
    UMM_NFREE(0)  = 1;
 8019d28:	f04f 1501 	mov.w	r5, #65537	; 0x10001
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019d2c:	1e41      	subs	r1, r0, #1
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019d2e:	4403      	add	r3, r0
    UMM_NBLOCK(0) = 1;
 8019d30:	2401      	movs	r4, #1
 8019d32:	2000      	movs	r0, #0
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019d34:	ea6f 4141 	mvn.w	r1, r1, lsl #17
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019d38:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    UMM_NFREE(0)  = 1;
 8019d3c:	6055      	str	r5, [r2, #4]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019d3e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
    UMM_NBLOCK(0) = 1;
 8019d42:	7014      	strb	r4, [r2, #0]
 8019d44:	7050      	strb	r0, [r2, #1]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019d46:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019d4a:	709c      	strb	r4, [r3, #2]
 8019d4c:	70d8      	strb	r0, [r3, #3]
}
 8019d4e:	bd38      	pop	{r3, r4, r5, pc}
 8019d50:	24005368 	.word	0x24005368
 8019d54:	24005364 	.word	0x24005364

08019d58 <umm_free>:
  if (umm_heap == NULL) {
 8019d58:	4b2a      	ldr	r3, [pc, #168]	; (8019e04 <umm_free+0xac>)
 8019d5a:	6819      	ldr	r1, [r3, #0]
  if( (void *)0 == ptr ) {
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	d050      	beq.n	8019e02 <umm_free+0xaa>
 8019d60:	2900      	cmp	r1, #0
 8019d62:	d04e      	beq.n	8019e02 <umm_free+0xaa>
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 8019d64:	1a40      	subs	r0, r0, r1
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019d66:	f3c0 13cf 	ubfx	r3, r0, #7, #16
void umm_free( void *ptr ) {
 8019d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019d6c:	eb01 14c3 	add.w	r4, r1, r3, lsl #7
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 8019d70:	4618      	mov	r0, r3
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019d72:	01de      	lsls	r6, r3, #7
 8019d74:	8823      	ldrh	r3, [r4, #0]
 8019d76:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
 8019d7a:	ea4f 1cc3 	mov.w	ip, r3, lsl #7
 8019d7e:	8815      	ldrh	r5, [r2, #0]
 8019d80:	b2af      	uxth	r7, r5
 8019d82:	042d      	lsls	r5, r5, #16
 8019d84:	d422      	bmi.n	8019dcc <umm_free+0x74>
  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019d86:	8865      	ldrh	r5, [r4, #2]
 8019d88:	b2aa      	uxth	r2, r5
 8019d8a:	eb01 17c2 	add.w	r7, r1, r2, lsl #7
 8019d8e:	01d2      	lsls	r2, r2, #7
 8019d90:	f9b7 7000 	ldrsh.w	r7, [r7]
 8019d94:	2f00      	cmp	r7, #0
 8019d96:	db0f      	blt.n	8019db8 <umm_free+0x60>
    UMM_PFREE(UMM_NFREE(0)) = c;
 8019d98:	888f      	ldrh	r7, [r1, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8019d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    UMM_PFREE(c)            = 0;
 8019d9e:	2500      	movs	r5, #0
    UMM_PFREE(UMM_NFREE(0)) = c;
 8019da0:	b2ba      	uxth	r2, r7
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8019da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    UMM_PFREE(UMM_NFREE(0)) = c;
 8019da6:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
 8019daa:	80d0      	strh	r0, [r2, #6]
    UMM_NFREE(c)            = UMM_NFREE(0);
 8019dac:	80a7      	strh	r7, [r4, #4]
    UMM_PFREE(c)            = 0;
 8019dae:	71a5      	strb	r5, [r4, #6]
 8019db0:	71e5      	strb	r5, [r4, #7]
    UMM_NFREE(0)            = c;
 8019db2:	8088      	strh	r0, [r1, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8019db4:	538b      	strh	r3, [r1, r6]
}
 8019db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 8019db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8019dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8019dc0:	528b      	strh	r3, [r1, r2]
  UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 8019dc2:	8823      	ldrh	r3, [r4, #0]
 8019dc4:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
 8019dc8:	804d      	strh	r5, [r1, #2]
}
 8019dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8019dcc:	88d5      	ldrh	r5, [r2, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8019dce:	f3c7 070e 	ubfx	r7, r7, #0, #15
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8019dd2:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 8019dd6:	b2ab      	uxth	r3, r5
 8019dd8:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 8019ddc:	f8a3 e004 	strh.w	lr, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 8019de0:	8893      	ldrh	r3, [r2, #4]
 8019de2:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 8019de6:	80dd      	strh	r5, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8019de8:	f821 700c 	strh.w	r7, [r1, ip]
    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 8019dec:	8823      	ldrh	r3, [r4, #0]
 8019dee:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 8019df2:	881b      	ldrh	r3, [r3, #0]
 8019df4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019df8:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
 8019dfc:	8050      	strh	r0, [r2, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 8019dfe:	538b      	strh	r3, [r1, r6]
 8019e00:	e7c1      	b.n	8019d86 <umm_free+0x2e>
 8019e02:	4770      	bx	lr
 8019e04:	24005364 	.word	0x24005364

08019e08 <umm_malloc>:

void *umm_malloc( size_t size ) {

  void *ptr = NULL;

  if (umm_heap == NULL) {
 8019e08:	4b03      	ldr	r3, [pc, #12]	; (8019e18 <umm_malloc+0x10>)
 8019e0a:	681a      	ldr	r2, [r3, #0]
   * a size of 0 - and if we are we'll simply return a null pointer. if not
   * then reduce the size by 1 byte so that the subsequent calculations on
   * the number of blocks to allocate are easier...
   */

  if( 0 == size ) {
 8019e0c:	b112      	cbz	r2, 8019e14 <umm_malloc+0xc>
 8019e0e:	b108      	cbz	r0, 8019e14 <umm_malloc+0xc>

  /* Allocate the memory withing a protected critical section */

  UMM_CRITICAL_ENTRY();

  ptr = umm_malloc_core( size );
 8019e10:	f7ff bf08 	b.w	8019c24 <umm_malloc_core>

  UMM_CRITICAL_EXIT();

  return( ptr );
}
 8019e14:	2000      	movs	r0, #0
 8019e16:	4770      	bx	lr
 8019e18:	24005364 	.word	0x24005364

08019e1c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8019e22:	4c15      	ldr	r4, [pc, #84]	; (8019e78 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8019e24:	2500      	movs	r5, #0
 8019e26:	4e15      	ldr	r6, [pc, #84]	; (8019e7c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8019e28:	4628      	mov	r0, r5
 8019e2a:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8019e2e:	e9d3 7200 	ldrd	r7, r2, [r3]
 8019e32:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8019e36:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 8019e3a:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8019e3c:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8019e40:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 8019e42:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 8019e44:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8019e46:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 8019e4a:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8019e4e:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8019e52:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8019e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8019e58:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8019e5a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8019e5c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8019e5e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8019e60:	6a23      	ldr	r3, [r4, #32]
 8019e62:	f106 0118 	add.w	r1, r6, #24
 8019e66:	4628      	mov	r0, r5
 8019e68:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8019e6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019e6c:	f106 011c 	add.w	r1, r6, #28
 8019e70:	4628      	mov	r0, r5
}
 8019e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8019e76:	4718      	bx	r3
 8019e78:	240053ac 	.word	0x240053ac
 8019e7c:	2400536c 	.word	0x2400536c

08019e80 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8019e80:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8019e82:	4b05      	ldr	r3, [pc, #20]	; (8019e98 <UTIL_LCD_SetLayer+0x18>)
 8019e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e86:	b133      	cbz	r3, 8019e96 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8019e88:	4d04      	ldr	r5, [pc, #16]	; (8019e9c <UTIL_LCD_SetLayer+0x1c>)
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	4601      	mov	r1, r0
 8019e8e:	6928      	ldr	r0, [r5, #16]
 8019e90:	4798      	blx	r3
 8019e92:	b900      	cbnz	r0, 8019e96 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8019e94:	60ec      	str	r4, [r5, #12]
    }
  }
}
 8019e96:	bd38      	pop	{r3, r4, r5, pc}
 8019e98:	240053ac 	.word	0x240053ac
 8019e9c:	2400536c 	.word	0x2400536c

08019ea0 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8019ea0:	4a02      	ldr	r2, [pc, #8]	; (8019eac <UTIL_LCD_SetTextColor+0xc>)
 8019ea2:	68d3      	ldr	r3, [r2, #12]
 8019ea4:	015b      	lsls	r3, r3, #5
 8019ea6:	50d0      	str	r0, [r2, r3]
}
 8019ea8:	4770      	bx	lr
 8019eaa:	bf00      	nop
 8019eac:	2400536c 	.word	0x2400536c

08019eb0 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8019eb0:	4b02      	ldr	r3, [pc, #8]	; (8019ebc <UTIL_LCD_SetBackColor+0xc>)
 8019eb2:	68da      	ldr	r2, [r3, #12]
 8019eb4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019eb8:	6058      	str	r0, [r3, #4]
}
 8019eba:	4770      	bx	lr
 8019ebc:	2400536c 	.word	0x2400536c

08019ec0 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8019ec0:	4b02      	ldr	r3, [pc, #8]	; (8019ecc <UTIL_LCD_SetFont+0xc>)
 8019ec2:	68da      	ldr	r2, [r3, #12]
 8019ec4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019ec8:	6098      	str	r0, [r3, #8]
}
 8019eca:	4770      	bx	lr
 8019ecc:	2400536c 	.word	0x2400536c

08019ed0 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 8019ed0:	4b02      	ldr	r3, [pc, #8]	; (8019edc <UTIL_LCD_GetFont+0xc>)
 8019ed2:	68da      	ldr	r2, [r3, #12]
 8019ed4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 8019ed8:	6898      	ldr	r0, [r3, #8]
 8019eda:	4770      	bx	lr
 8019edc:	2400536c 	.word	0x2400536c

08019ee0 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8019ee0:	b570      	push	{r4, r5, r6, lr}
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8019ee2:	4c13      	ldr	r4, [pc, #76]	; (8019f30 <UTIL_LCD_Clear+0x50>)
{
 8019ee4:	b082      	sub	sp, #8
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019ee6:	69e2      	ldr	r2, [r4, #28]
 8019ee8:	2a02      	cmp	r2, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8019eea:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019eee:	d009      	beq.n	8019f04 <UTIL_LCD_Clear+0x24>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	4d10      	ldr	r5, [pc, #64]	; (8019f34 <UTIL_LCD_Clear+0x54>)
 8019ef4:	e9cd 1000 	strd	r1, r0, [sp]
 8019ef8:	4611      	mov	r1, r2
 8019efa:	6920      	ldr	r0, [r4, #16]
 8019efc:	692c      	ldr	r4, [r5, #16]
 8019efe:	47a0      	blx	r4
}
 8019f00:	b002      	add	sp, #8
 8019f02:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8019f04:	0942      	lsrs	r2, r0, #5
 8019f06:	9100      	str	r1, [sp, #0]
 8019f08:	0a05      	lsrs	r5, r0, #8
 8019f0a:	f3c0 01c4 	ubfx	r1, r0, #3, #5
 8019f0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019f12:	6920      	ldr	r0, [r4, #16]
 8019f14:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8019f18:	4e06      	ldr	r6, [pc, #24]	; (8019f34 <UTIL_LCD_Clear+0x54>)
 8019f1a:	ea42 0405 	orr.w	r4, r2, r5
 8019f1e:	2200      	movs	r2, #0
 8019f20:	6935      	ldr	r5, [r6, #16]
 8019f22:	430c      	orrs	r4, r1
 8019f24:	4611      	mov	r1, r2
 8019f26:	9401      	str	r4, [sp, #4]
 8019f28:	47a8      	blx	r5
}
 8019f2a:	b002      	add	sp, #8
 8019f2c:	bd70      	pop	{r4, r5, r6, pc}
 8019f2e:	bf00      	nop
 8019f30:	2400536c 	.word	0x2400536c
 8019f34:	240053ac 	.word	0x240053ac

08019f38 <UTIL_LCD_DisplayChar>:
{
 8019f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8019f3c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801a0a8 <UTIL_LCD_DisplayChar+0x170>
{
 8019f40:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8019f42:	3a20      	subs	r2, #32
{
 8019f44:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8019f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019f4a:	eb08 1043 	add.w	r0, r8, r3, lsl #5
 8019f4e:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 8019f52:	6880      	ldr	r0, [r0, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8019f54:	8886      	ldrh	r6, [r0, #4]
 8019f56:	88c5      	ldrh	r5, [r0, #6]
 8019f58:	1df7      	adds	r7, r6, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8019f5a:	6804      	ldr	r4, [r0, #0]
 8019f5c:	fb05 f202 	mul.w	r2, r5, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8019f60:	10f8      	asrs	r0, r7, #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8019f62:	f027 0307 	bic.w	r3, r7, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8019f66:	fb00 f202 	mul.w	r2, r0, r2
  offset =  8 *((width + 7)/8) -  width ;
 8019f6a:	9302      	str	r3, [sp, #8]

  for(i = 0; i < height; i++)
 8019f6c:	2d00      	cmp	r5, #0
 8019f6e:	f000 808d 	beq.w	801a08c <UTIL_LCD_DisplayChar+0x154>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8019f72:	08fb      	lsrs	r3, r7, #3
 8019f74:	4414      	add	r4, r2
 8019f76:	f8df a134 	ldr.w	sl, [pc, #308]	; 801a0ac <UTIL_LCD_DisplayChar+0x174>

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 8019f7a:	f04f 0901 	mov.w	r9, #1
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8019f7e:	9303      	str	r3, [sp, #12]
 8019f80:	194b      	adds	r3, r1, r5
 8019f82:	1c4d      	adds	r5, r1, #1
    switch(((width + 7)/8))
 8019f84:	9903      	ldr	r1, [sp, #12]
 8019f86:	9307      	str	r3, [sp, #28]
 8019f88:	ab14      	add	r3, sp, #80	; 0x50
 8019f8a:	2901      	cmp	r1, #1
 8019f8c:	f105 32ff 	add.w	r2, r5, #4294967295
 8019f90:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8019f94:	9304      	str	r3, [sp, #16]
 8019f96:	ab08      	add	r3, sp, #32
 8019f98:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8019f9c:	9305      	str	r3, [sp, #20]
        if(line & (1 << (width- j + offset- 1)))
 8019f9e:	4663      	mov	r3, ip
    switch(((width + 7)/8))
 8019fa0:	d038      	beq.n	801a014 <UTIL_LCD_DisplayChar+0xdc>
 8019fa2:	2902      	cmp	r1, #2
 8019fa4:	d075      	beq.n	801a092 <UTIL_LCD_DisplayChar+0x15a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8019fa6:	7861      	ldrb	r1, [r4, #1]
 8019fa8:	7827      	ldrb	r7, [r4, #0]
 8019faa:	0209      	lsls	r1, r1, #8
 8019fac:	78a0      	ldrb	r0, [r4, #2]
 8019fae:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8019fb2:	4301      	orrs	r1, r0
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019fb4:	4443      	add	r3, r8
 8019fb6:	69d8      	ldr	r0, [r3, #28]
 8019fb8:	2802      	cmp	r0, #2
 8019fba:	d030      	beq.n	801a01e <UTIL_LCD_DisplayChar+0xe6>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 8019fbc:	b196      	cbz	r6, 8019fe4 <UTIL_LCD_DisplayChar+0xac>
 8019fbe:	9802      	ldr	r0, [sp, #8]
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8019fc0:	f8d3 c000 	ldr.w	ip, [r3]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8019fc4:	685f      	ldr	r7, [r3, #4]
 8019fc6:	3801      	subs	r0, #1
 8019fc8:	ab14      	add	r3, sp, #80	; 0x50
 8019fca:	9106      	str	r1, [sp, #24]
        if(line & (1 << (width- j + offset- 1)))
 8019fcc:	fa09 fe00 	lsl.w	lr, r9, r0
 8019fd0:	9906      	ldr	r1, [sp, #24]
 8019fd2:	ea1e 0f01 	tst.w	lr, r1
 8019fd6:	d060      	beq.n	801a09a <UTIL_LCD_DisplayChar+0x162>
      for (j = 0; j < width; j++)
 8019fd8:	9904      	ldr	r1, [sp, #16]
 8019fda:	3801      	subs	r0, #1
 8019fdc:	f843 cb04 	str.w	ip, [r3], #4
 8019fe0:	4299      	cmp	r1, r3
 8019fe2:	d1f3      	bne.n	8019fcc <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8019fe4:	ab14      	add	r3, sp, #80	; 0x50
 8019fe6:	f8da 7004 	ldr.w	r7, [sl, #4]
 8019fea:	4659      	mov	r1, fp
 8019fec:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019ff0:	e9cd 6900 	strd	r6, r9, [sp]
 8019ff4:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 8019ff6:	9b03      	ldr	r3, [sp, #12]
 8019ff8:	441c      	add	r4, r3
 8019ffa:	9b07      	ldr	r3, [sp, #28]
 8019ffc:	429d      	cmp	r5, r3
 8019ffe:	d045      	beq.n	801a08c <UTIL_LCD_DisplayChar+0x154>
    switch(((width + 7)/8))
 801a000:	9903      	ldr	r1, [sp, #12]
 801a002:	3501      	adds	r5, #1
 801a004:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a008:	2901      	cmp	r1, #1
 801a00a:	f105 32ff 	add.w	r2, r5, #4294967295
 801a00e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801a012:	d1c6      	bne.n	8019fa2 <UTIL_LCD_DisplayChar+0x6a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a014:	4443      	add	r3, r8
      line =  pchar[0];
 801a016:	7821      	ldrb	r1, [r4, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a018:	69d8      	ldr	r0, [r3, #28]
 801a01a:	2802      	cmp	r0, #2
 801a01c:	d1ce      	bne.n	8019fbc <UTIL_LCD_DisplayChar+0x84>
      for (j = 0; j < width; j++)
 801a01e:	b33e      	cbz	r6, 801a070 <UTIL_LCD_DisplayChar+0x138>
 801a020:	9802      	ldr	r0, [sp, #8]
 801a022:	af08      	add	r7, sp, #32
 801a024:	9106      	str	r1, [sp, #24]
 801a026:	f100 3cff 	add.w	ip, r0, #4294967295
 801a02a:	e015      	b.n	801a058 <UTIL_LCD_DisplayChar+0x120>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801a02c:	f8d3 e000 	ldr.w	lr, [r3]
 801a030:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a034:	ea4f 40de 	mov.w	r0, lr, lsr #19
 801a038:	4601      	mov	r1, r0
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801a03a:	f3ce 00c4 	ubfx	r0, lr, #3, #5
 801a03e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801a042:	ea40 20c1 	orr.w	r0, r0, r1, lsl #11
 801a046:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
      for (j = 0; j < width; j++)
 801a04a:	9905      	ldr	r1, [sp, #20]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801a04c:	ea40 000e 	orr.w	r0, r0, lr
 801a050:	f827 0b02 	strh.w	r0, [r7], #2
      for (j = 0; j < width; j++)
 801a054:	428f      	cmp	r7, r1
 801a056:	d00b      	beq.n	801a070 <UTIL_LCD_DisplayChar+0x138>
        if(line & (1 << (width- j + offset- 1)))
 801a058:	fa09 f00c 	lsl.w	r0, r9, ip
 801a05c:	9906      	ldr	r1, [sp, #24]
 801a05e:	4208      	tst	r0, r1
 801a060:	d1e4      	bne.n	801a02c <UTIL_LCD_DisplayChar+0xf4>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801a062:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801a066:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a06a:	ea4f 41de 	mov.w	r1, lr, lsr #19
 801a06e:	e7e4      	b.n	801a03a <UTIL_LCD_DisplayChar+0x102>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801a070:	ab08      	add	r3, sp, #32
 801a072:	f8da 7004 	ldr.w	r7, [sl, #4]
 801a076:	4659      	mov	r1, fp
 801a078:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a07c:	e9cd 6900 	strd	r6, r9, [sp]
 801a080:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 801a082:	9b03      	ldr	r3, [sp, #12]
 801a084:	441c      	add	r4, r3
 801a086:	9b07      	ldr	r3, [sp, #28]
 801a088:	429d      	cmp	r5, r3
 801a08a:	d1b9      	bne.n	801a000 <UTIL_LCD_DisplayChar+0xc8>
}
 801a08c:	b02d      	add	sp, #180	; 0xb4
 801a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 8) | pchar[1];
 801a092:	8821      	ldrh	r1, [r4, #0]
 801a094:	ba49      	rev16	r1, r1
 801a096:	b289      	uxth	r1, r1
      break;
 801a098:	e78c      	b.n	8019fb4 <UTIL_LCD_DisplayChar+0x7c>
      for (j = 0; j < width; j++)
 801a09a:	9904      	ldr	r1, [sp, #16]
 801a09c:	3801      	subs	r0, #1
 801a09e:	f843 7b04 	str.w	r7, [r3], #4
 801a0a2:	428b      	cmp	r3, r1
 801a0a4:	d192      	bne.n	8019fcc <UTIL_LCD_DisplayChar+0x94>
 801a0a6:	e79d      	b.n	8019fe4 <UTIL_LCD_DisplayChar+0xac>
 801a0a8:	2400536c 	.word	0x2400536c
 801a0ac:	240053ac 	.word	0x240053ac

0801a0b0 <UTIL_LCD_DisplayStringAt>:
{
 801a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0b4:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 801a0b6:	4611      	mov	r1, r2
{
 801a0b8:	4616      	mov	r6, r2
 801a0ba:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
 801a0bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0c0:	2a00      	cmp	r2, #0
 801a0c2:	d041      	beq.n	801a148 <UTIL_LCD_DisplayStringAt+0x98>
  uint32_t size = 0, xsize = 0;
 801a0c4:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 801a0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a0ca:	3001      	adds	r0, #1
 801a0cc:	2c00      	cmp	r4, #0
 801a0ce:	d1fa      	bne.n	801a0c6 <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801a0d0:	4f1e      	ldr	r7, [pc, #120]	; (801a14c <UTIL_LCD_DisplayStringAt+0x9c>)
  switch (Mode)
 801a0d2:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801a0d4:	68fc      	ldr	r4, [r7, #12]
 801a0d6:	6979      	ldr	r1, [r7, #20]
 801a0d8:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 801a0dc:	68a4      	ldr	r4, [r4, #8]
 801a0de:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a0e2:	fbb1 f4fc 	udiv	r4, r1, ip
  switch (Mode)
 801a0e6:	d029      	beq.n	801a13c <UTIL_LCD_DisplayStringAt+0x8c>
 801a0e8:	2b02      	cmp	r3, #2
 801a0ea:	d103      	bne.n	801a0f4 <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801a0ec:	1a20      	subs	r0, r4, r0
 801a0ee:	fb0c f000 	mul.w	r0, ip, r0
 801a0f2:	1b45      	subs	r5, r0, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a0f4:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801a0f6:	1e68      	subs	r0, r5, #1
 801a0f8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 801a0fc:	4298      	cmp	r0, r3
 801a0fe:	bf88      	it	hi
 801a100:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a102:	458c      	cmp	ip, r1
 801a104:	d818      	bhi.n	801a138 <UTIL_LCD_DisplayStringAt+0x88>
 801a106:	b1ba      	cbz	r2, 801a138 <UTIL_LCD_DisplayStringAt+0x88>
 801a108:	f1c6 0801 	rsb	r8, r6, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801a10c:	4628      	mov	r0, r5
 801a10e:	4649      	mov	r1, r9
 801a110:	f7ff ff12 	bl	8019f38 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a114:	68fa      	ldr	r2, [r7, #12]
 801a116:	eb08 0306 	add.w	r3, r8, r6
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a11a:	6979      	ldr	r1, [r7, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a11c:	eb07 1042 	add.w	r0, r7, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a120:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a124:	6880      	ldr	r0, [r0, #8]
 801a126:	8884      	ldrh	r4, [r0, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a128:	fb03 1314 	mls	r3, r3, r4, r1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a12c:	4425      	add	r5, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a12e:	b29b      	uxth	r3, r3
 801a130:	429c      	cmp	r4, r3
 801a132:	d801      	bhi.n	801a138 <UTIL_LCD_DisplayStringAt+0x88>
 801a134:	2a00      	cmp	r2, #0
 801a136:	d1e9      	bne.n	801a10c <UTIL_LCD_DisplayStringAt+0x5c>
}
 801a138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801a13c:	1a20      	subs	r0, r4, r0
 801a13e:	fb0c f000 	mul.w	r0, ip, r0
 801a142:	eb05 0550 	add.w	r5, r5, r0, lsr #1
      break;
 801a146:	e7d5      	b.n	801a0f4 <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 801a148:	4610      	mov	r0, r2
 801a14a:	e7c1      	b.n	801a0d0 <UTIL_LCD_DisplayStringAt+0x20>
 801a14c:	2400536c 	.word	0x2400536c

0801a150 <UTIL_LCD_DrawLine>:
{
 801a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801a154:	f64f 77ff 	movw	r7, #65535	; 0xffff
  x_diff = Xpos2 - Xpos1;
 801a158:	1a16      	subs	r6, r2, r0
  y_diff = Ypos2 - Ypos1;
 801a15a:	1a5c      	subs	r4, r3, r1
  x = Xpos1;                       /* Start x off at the first pixel */
 801a15c:	b205      	sxth	r5, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801a15e:	4282      	cmp	r2, r0
 801a160:	bf34      	ite	cc
 801a162:	463a      	movcc	r2, r7
 801a164:	2201      	movcs	r2, #1
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801a166:	428b      	cmp	r3, r1
 801a168:	bf28      	it	cs
 801a16a:	2701      	movcs	r7, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801a16c:	2e00      	cmp	r6, #0
  y = Ypos1;                       /* Start y off at the first pixel */
 801a16e:	b20b      	sxth	r3, r1
{
 801a170:	ed2d 8b02 	vpush	{d8}
 801a174:	b085      	sub	sp, #20
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801a176:	bfb8      	it	lt
 801a178:	4276      	neglt	r6, r6
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801a17a:	9200      	str	r2, [sp, #0]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801a17c:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801a180:	b236      	sxth	r6, r6
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801a182:	9701      	str	r7, [sp, #4]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801a184:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801a188:	b212      	sxth	r2, r2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801a18a:	4296      	cmp	r6, r2
 801a18c:	db64      	blt.n	801a258 <UTIL_LCD_DrawLine+0x108>
    num = deltax / 2;
 801a18e:	2e00      	cmp	r6, #0
 801a190:	46b0      	mov	r8, r6
 801a192:	f04f 0100 	mov.w	r1, #0
 801a196:	9f00      	ldr	r7, [sp, #0]
 801a198:	bfb8      	it	lt
 801a19a:	f106 0801 	addlt.w	r8, r6, #1
 801a19e:	468b      	mov	fp, r1
 801a1a0:	9100      	str	r1, [sp, #0]
 801a1a2:	ea4f 0868 	mov.w	r8, r8, asr #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a1a6:	2e00      	cmp	r6, #0
 801a1a8:	db41      	blt.n	801a22e <UTIL_LCD_DrawLine+0xde>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801a1aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a1ac:	b292      	uxth	r2, r2
 801a1ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a1b0:	f04f 0900 	mov.w	r9, #0
 801a1b4:	0949      	lsrs	r1, r1, #5
 801a1b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a1b8:	0a24      	lsrs	r4, r4, #8
 801a1ba:	9202      	str	r2, [sp, #8]
 801a1bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a1c0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a1c4:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 801a1c8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801a27c <UTIL_LCD_DrawLine+0x12c>
 801a1cc:	9703      	str	r7, [sp, #12]
 801a1ce:	430a      	orrs	r2, r1
 801a1d0:	4302      	orrs	r2, r0
 801a1d2:	ee08 2a10 	vmov	s16, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a1d6:	f8da 201c 	ldr.w	r2, [sl, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801a1da:	b29c      	uxth	r4, r3
 801a1dc:	b2ad      	uxth	r5, r5
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a1de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a1e0:	2a02      	cmp	r2, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a1e2:	4622      	mov	r2, r4
 801a1e4:	4629      	mov	r1, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a1e6:	d02e      	beq.n	801a246 <UTIL_LCD_DrawLine+0xf6>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a1e8:	4823      	ldr	r0, [pc, #140]	; (801a278 <UTIL_LCD_DrawLine+0x128>)
 801a1ea:	6980      	ldr	r0, [r0, #24]
 801a1ec:	4607      	mov	r7, r0
 801a1ee:	f8da 0010 	ldr.w	r0, [sl, #16]
 801a1f2:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a1f4:	9b02      	ldr	r3, [sp, #8]
 801a1f6:	f109 0901 	add.w	r9, r9, #1
    x += xinc2;                               /* Change the x as appropriate */
 801a1fa:	9f03      	ldr	r7, [sp, #12]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a1fc:	eb03 0208 	add.w	r2, r3, r8
      x += xinc1;                             /* Change the x as appropriate */
 801a200:	9b00      	ldr	r3, [sp, #0]
    x += xinc2;                               /* Change the x as appropriate */
 801a202:	19e9      	adds	r1, r5, r7
      x += xinc1;                             /* Change the x as appropriate */
 801a204:	18e8      	adds	r0, r5, r3
      y += yinc1;                             /* Change the y as appropriate */
 801a206:	9b01      	ldr	r3, [sp, #4]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a208:	fa0f f882 	sxth.w	r8, r2
      y += yinc1;                             /* Change the y as appropriate */
 801a20c:	18e3      	adds	r3, r4, r3
    x += xinc2;                               /* Change the x as appropriate */
 801a20e:	183d      	adds	r5, r7, r0
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a210:	b292      	uxth	r2, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 801a212:	4546      	cmp	r6, r8
    y += yinc2;                               /* Change the y as appropriate */
 801a214:	445b      	add	r3, fp
 801a216:	445c      	add	r4, fp
    x += xinc2;                               /* Change the x as appropriate */
 801a218:	b22d      	sxth	r5, r5
      num -= den;                             /* Calculate the new numerator value */
 801a21a:	eba2 0206 	sub.w	r2, r2, r6
    y += yinc2;                               /* Change the y as appropriate */
 801a21e:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 801a220:	dc0a      	bgt.n	801a238 <UTIL_LCD_DrawLine+0xe8>
      num -= den;                             /* Calculate the new numerator value */
 801a222:	fa0f f882 	sxth.w	r8, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a226:	fa0f f289 	sxth.w	r2, r9
 801a22a:	42b2      	cmp	r2, r6
 801a22c:	ddd3      	ble.n	801a1d6 <UTIL_LCD_DrawLine+0x86>
}
 801a22e:	b005      	add	sp, #20
 801a230:	ecbd 8b02 	vpop	{d8}
 801a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a238:	fa0f f289 	sxth.w	r2, r9
    x += xinc2;                               /* Change the x as appropriate */
 801a23c:	b20d      	sxth	r5, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a23e:	42b2      	cmp	r2, r6
    y += yinc2;                               /* Change the y as appropriate */
 801a240:	b223      	sxth	r3, r4
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a242:	ddc8      	ble.n	801a1d6 <UTIL_LCD_DrawLine+0x86>
 801a244:	e7f3      	b.n	801a22e <UTIL_LCD_DrawLine+0xde>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801a246:	4b0c      	ldr	r3, [pc, #48]	; (801a278 <UTIL_LCD_DrawLine+0x128>)
 801a248:	f8da 0010 	ldr.w	r0, [sl, #16]
 801a24c:	699b      	ldr	r3, [r3, #24]
 801a24e:	461f      	mov	r7, r3
 801a250:	ee18 3a10 	vmov	r3, s16
 801a254:	47b8      	blx	r7
}
 801a256:	e7cd      	b.n	801a1f4 <UTIL_LCD_DrawLine+0xa4>
    num = deltay / 2;
 801a258:	2a00      	cmp	r2, #0
 801a25a:	4690      	mov	r8, r2
 801a25c:	4631      	mov	r1, r6
 801a25e:	f04f 0700 	mov.w	r7, #0
 801a262:	bfb8      	it	lt
 801a264:	f102 0801 	addlt.w	r8, r2, #1
 801a268:	f8dd b004 	ldr.w	fp, [sp, #4]
 801a26c:	4616      	mov	r6, r2
 801a26e:	9701      	str	r7, [sp, #4]
 801a270:	f348 084f 	sbfx	r8, r8, #1, #16
 801a274:	460a      	mov	r2, r1
 801a276:	e796      	b.n	801a1a6 <UTIL_LCD_DrawLine+0x56>
 801a278:	240053ac 	.word	0x240053ac
 801a27c:	2400536c 	.word	0x2400536c

0801a280 <UTIL_LCD_DrawRect>:
{
 801a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a284:	4c52      	ldr	r4, [pc, #328]	; (801a3d0 <UTIL_LCD_DrawRect+0x150>)
{
 801a286:	4683      	mov	fp, r0
 801a288:	460d      	mov	r5, r1
 801a28a:	4692      	mov	sl, r2
 801a28c:	ed2d 8b02 	vpush	{d8}
 801a290:	ee08 3a10 	vmov	s16, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a294:	69e3      	ldr	r3, [r4, #28]
{
 801a296:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a298:	2b02      	cmp	r3, #2
{
 801a29a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a29c:	d037      	beq.n	801a30e <UTIL_LCD_DrawRect+0x8e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a29e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 801a3d4 <UTIL_LCD_DrawRect+0x154>
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	9700      	str	r7, [sp, #0]
 801a2a6:	460a      	mov	r2, r1
 801a2a8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a2ac:	4601      	mov	r1, r0
 801a2ae:	6920      	ldr	r0, [r4, #16]
 801a2b0:	47b0      	blx	r6
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801a2b2:	ee18 3a10 	vmov	r3, s16
 801a2b6:	1e5a      	subs	r2, r3, #1
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a2b8:	69e3      	ldr	r3, [r4, #28]
 801a2ba:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801a2bc:	442a      	add	r2, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a2be:	d070      	beq.n	801a3a2 <UTIL_LCD_DrawRect+0x122>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a2c0:	4653      	mov	r3, sl
 801a2c2:	4659      	mov	r1, fp
 801a2c4:	6920      	ldr	r0, [r4, #16]
 801a2c6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a2ca:	9700      	str	r7, [sp, #0]
 801a2cc:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a2ce:	69e3      	ldr	r3, [r4, #28]
 801a2d0:	2b02      	cmp	r3, #2
 801a2d2:	d04e      	beq.n	801a372 <UTIL_LCD_DrawRect+0xf2>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a2d4:	ee18 3a10 	vmov	r3, s16
 801a2d8:	462a      	mov	r2, r5
 801a2da:	4659      	mov	r1, fp
 801a2dc:	6920      	ldr	r0, [r4, #16]
 801a2de:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801a2e2:	9700      	str	r7, [sp, #0]
 801a2e4:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a2e6:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801a2e8:	f10a 31ff 	add.w	r1, sl, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a2ec:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801a2ee:	4459      	add	r1, fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a2f0:	d026      	beq.n	801a340 <UTIL_LCD_DrawRect+0xc0>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a2f2:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801a2f6:	ee18 3a10 	vmov	r3, s16
 801a2fa:	462a      	mov	r2, r5
 801a2fc:	6920      	ldr	r0, [r4, #16]
 801a2fe:	46b4      	mov	ip, r6
 801a300:	970e      	str	r7, [sp, #56]	; 0x38
}
 801a302:	b003      	add	sp, #12
 801a304:	ecbd 8b02 	vpop	{d8}
 801a308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a30c:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a30e:	0978      	lsrs	r0, r7, #5
 801a310:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801a314:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a318:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801a3d4 <UTIL_LCD_DrawRect+0x154>
 801a31c:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 801a320:	4613      	mov	r3, r2
 801a322:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a326:	462a      	mov	r2, r5
 801a328:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a32c:	ea41 000c 	orr.w	r0, r1, ip
 801a330:	4659      	mov	r1, fp
 801a332:	ea40 0e0e 	orr.w	lr, r0, lr
 801a336:	6920      	ldr	r0, [r4, #16]
 801a338:	f8cd e000 	str.w	lr, [sp]
 801a33c:	47b0      	blx	r6
}
 801a33e:	e7b8      	b.n	801a2b2 <UTIL_LCD_DrawRect+0x32>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a340:	0a3a      	lsrs	r2, r7, #8
 801a342:	f3c7 09c4 	ubfx	r9, r7, #3, #5
 801a346:	097b      	lsrs	r3, r7, #5
 801a348:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 801a34c:	f402 4678 	and.w	r6, r2, #63488	; 0xf800
 801a350:	6920      	ldr	r0, [r4, #16]
 801a352:	f403 67fc 	and.w	r7, r3, #2016	; 0x7e0
 801a356:	462a      	mov	r2, r5
 801a358:	ee18 3a10 	vmov	r3, s16
 801a35c:	46f4      	mov	ip, lr
 801a35e:	4337      	orrs	r7, r6
 801a360:	ea47 0709 	orr.w	r7, r7, r9
 801a364:	970e      	str	r7, [sp, #56]	; 0x38
}
 801a366:	b003      	add	sp, #12
 801a368:	ecbd 8b02 	vpop	{d8}
 801a36c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a370:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a372:	0978      	lsrs	r0, r7, #5
 801a374:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801a378:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a37c:	ee18 3a10 	vmov	r3, s16
 801a380:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 801a384:	462a      	mov	r2, r5
 801a386:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a38a:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801a38e:	ea41 000c 	orr.w	r0, r1, ip
 801a392:	4659      	mov	r1, fp
 801a394:	ea40 0e0e 	orr.w	lr, r0, lr
 801a398:	6920      	ldr	r0, [r4, #16]
 801a39a:	f8cd e000 	str.w	lr, [sp]
 801a39e:	47b0      	blx	r6
}
 801a3a0:	e7a1      	b.n	801a2e6 <UTIL_LCD_DrawRect+0x66>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a3a2:	0978      	lsrs	r0, r7, #5
 801a3a4:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801a3a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a3ac:	4653      	mov	r3, sl
 801a3ae:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 801a3b2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a3b6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a3ba:	ea41 000c 	orr.w	r0, r1, ip
 801a3be:	4659      	mov	r1, fp
 801a3c0:	ea40 0e0e 	orr.w	lr, r0, lr
 801a3c4:	6920      	ldr	r0, [r4, #16]
 801a3c6:	f8cd e000 	str.w	lr, [sp]
 801a3ca:	47b0      	blx	r6
}
 801a3cc:	e77f      	b.n	801a2ce <UTIL_LCD_DrawRect+0x4e>
 801a3ce:	bf00      	nop
 801a3d0:	2400536c 	.word	0x2400536c
 801a3d4:	240053ac 	.word	0x240053ac

0801a3d8 <ai_buffer_get_size>:
 801a3d8:	b340      	cbz	r0, 801a42c <ai_buffer_get_size+0x54>
 801a3da:	4b15      	ldr	r3, [pc, #84]	; (801a430 <ai_buffer_get_size+0x58>)
 801a3dc:	b430      	push	{r4, r5}
 801a3de:	6802      	ldr	r2, [r0, #0]
 801a3e0:	4d14      	ldr	r5, [pc, #80]	; (801a434 <ai_buffer_get_size+0x5c>)
 801a3e2:	4013      	ands	r3, r2
 801a3e4:	6984      	ldr	r4, [r0, #24]
 801a3e6:	42ab      	cmp	r3, r5
 801a3e8:	6862      	ldr	r2, [r4, #4]
 801a3ea:	d103      	bne.n	801a3f4 <ai_buffer_get_size+0x1c>
 801a3ec:	b111      	cbz	r1, 801a3f4 <ai_buffer_get_size+0x1c>
 801a3ee:	321f      	adds	r2, #31
 801a3f0:	f022 021f 	bic.w	r2, r2, #31
 801a3f4:	7d03      	ldrb	r3, [r0, #20]
 801a3f6:	6941      	ldr	r1, [r0, #20]
 801a3f8:	f1a3 0301 	sub.w	r3, r3, #1
 801a3fc:	f3c1 2117 	ubfx	r1, r1, #8, #24
 801a400:	fab3 f383 	clz	r3, r3
 801a404:	095b      	lsrs	r3, r3, #5
 801a406:	428b      	cmp	r3, r1
 801a408:	da0c      	bge.n	801a424 <ai_buffer_get_size+0x4c>
 801a40a:	2b01      	cmp	r3, #1
 801a40c:	d103      	bne.n	801a416 <ai_buffer_get_size+0x3e>
 801a40e:	2902      	cmp	r1, #2
 801a410:	f04f 0302 	mov.w	r3, #2
 801a414:	d006      	beq.n	801a424 <ai_buffer_get_size+0x4c>
 801a416:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801a41a:	3301      	adds	r3, #1
 801a41c:	428b      	cmp	r3, r1
 801a41e:	fb00 f202 	mul.w	r2, r0, r2
 801a422:	d1f2      	bne.n	801a40a <ai_buffer_get_size+0x32>
 801a424:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801a428:	bc30      	pop	{r4, r5}
 801a42a:	4770      	bx	lr
 801a42c:	4770      	bx	lr
 801a42e:	bf00      	nop
 801a430:	017fffff 	.word	0x017fffff
 801a434:	000400c0 	.word	0x000400c0

0801a438 <ai_buffer_array_sane>:
 801a438:	b138      	cbz	r0, 801a44a <ai_buffer_array_sane+0x12>
 801a43a:	6843      	ldr	r3, [r0, #4]
 801a43c:	b123      	cbz	r3, 801a448 <ai_buffer_array_sane+0x10>
 801a43e:	8840      	ldrh	r0, [r0, #2]
 801a440:	3000      	adds	r0, #0
 801a442:	bf18      	it	ne
 801a444:	2001      	movne	r0, #1
 801a446:	4770      	bx	lr
 801a448:	4618      	mov	r0, r3
 801a44a:	4770      	bx	lr

0801a44c <_ai_platform_acquire_crc>:
 801a44c:	2001      	movs	r0, #1
 801a44e:	4770      	bx	lr

0801a450 <_ai_platform_release_crc>:
 801a450:	4770      	bx	lr
 801a452:	bf00      	nop

0801a454 <ai_platform_get_weights_map>:
 801a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a456:	fab1 f381 	clz	r3, r1
 801a45a:	095b      	lsrs	r3, r3, #5
 801a45c:	2800      	cmp	r0, #0
 801a45e:	bf08      	it	eq
 801a460:	2301      	moveq	r3, #1
 801a462:	2a00      	cmp	r2, #0
 801a464:	bf14      	ite	ne
 801a466:	461c      	movne	r4, r3
 801a468:	2401      	moveq	r4, #1
 801a46a:	b114      	cbz	r4, 801a472 <ai_platform_get_weights_map+0x1e>
 801a46c:	2400      	movs	r4, #0
 801a46e:	4620      	mov	r0, r4
 801a470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a472:	4b22      	ldr	r3, [pc, #136]	; (801a4fc <ai_platform_get_weights_map+0xa8>)
 801a474:	6815      	ldr	r5, [r2, #0]
 801a476:	429d      	cmp	r5, r3
 801a478:	d00c      	beq.n	801a494 <ai_platform_get_weights_map+0x40>
 801a47a:	6855      	ldr	r5, [r2, #4]
 801a47c:	2d00      	cmp	r5, #0
 801a47e:	d0f5      	beq.n	801a46c <ai_platform_get_weights_map+0x18>
 801a480:	682e      	ldr	r6, [r5, #0]
 801a482:	429e      	cmp	r6, r3
 801a484:	d022      	beq.n	801a4cc <ai_platform_get_weights_map+0x78>
 801a486:	f1a1 0401 	sub.w	r4, r1, #1
 801a48a:	6005      	str	r5, [r0, #0]
 801a48c:	fab4 f484 	clz	r4, r4
 801a490:	0964      	lsrs	r4, r4, #5
 801a492:	e7ec      	b.n	801a46e <ai_platform_get_weights_map+0x1a>
 801a494:	4606      	mov	r6, r0
 801a496:	1d10      	adds	r0, r2, #4
 801a498:	4615      	mov	r5, r2
 801a49a:	460f      	mov	r7, r1
 801a49c:	f7ff ffcc 	bl	801a438 <ai_buffer_array_sane>
 801a4a0:	2800      	cmp	r0, #0
 801a4a2:	d0e3      	beq.n	801a46c <ai_platform_get_weights_map+0x18>
 801a4a4:	88eb      	ldrh	r3, [r5, #6]
 801a4a6:	429f      	cmp	r7, r3
 801a4a8:	d1e0      	bne.n	801a46c <ai_platform_get_weights_map+0x18>
 801a4aa:	1f33      	subs	r3, r6, #4
 801a4ac:	4620      	mov	r0, r4
 801a4ae:	68aa      	ldr	r2, [r5, #8]
 801a4b0:	4422      	add	r2, r4
 801a4b2:	341c      	adds	r4, #28
 801a4b4:	6852      	ldr	r2, [r2, #4]
 801a4b6:	b122      	cbz	r2, 801a4c2 <ai_platform_get_weights_map+0x6e>
 801a4b8:	3001      	adds	r0, #1
 801a4ba:	f843 2f04 	str.w	r2, [r3, #4]!
 801a4be:	4287      	cmp	r7, r0
 801a4c0:	d8f5      	bhi.n	801a4ae <ai_platform_get_weights_map+0x5a>
 801a4c2:	1a3c      	subs	r4, r7, r0
 801a4c4:	fab4 f484 	clz	r4, r4
 801a4c8:	0964      	lsrs	r4, r4, #5
 801a4ca:	e7d0      	b.n	801a46e <ai_platform_get_weights_map+0x1a>
 801a4cc:	686b      	ldr	r3, [r5, #4]
 801a4ce:	3504      	adds	r5, #4
 801a4d0:	42b3      	cmp	r3, r6
 801a4d2:	d0cc      	beq.n	801a46e <ai_platform_get_weights_map+0x1a>
 801a4d4:	3804      	subs	r0, #4
 801a4d6:	462f      	mov	r7, r5
 801a4d8:	4622      	mov	r2, r4
 801a4da:	e003      	b.n	801a4e4 <ai_platform_get_weights_map+0x90>
 801a4dc:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801a4e0:	42b3      	cmp	r3, r6
 801a4e2:	d0c4      	beq.n	801a46e <ai_platform_get_weights_map+0x1a>
 801a4e4:	3201      	adds	r2, #1
 801a4e6:	f840 3f04 	str.w	r3, [r0, #4]!
 801a4ea:	4291      	cmp	r1, r2
 801a4ec:	d1f6      	bne.n	801a4dc <ai_platform_get_weights_map+0x88>
 801a4ee:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 801a4f2:	4b02      	ldr	r3, [pc, #8]	; (801a4fc <ai_platform_get_weights_map+0xa8>)
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	bf08      	it	eq
 801a4f8:	2401      	moveq	r4, #1
 801a4fa:	e7b8      	b.n	801a46e <ai_platform_get_weights_map+0x1a>
 801a4fc:	a1facade 	.word	0xa1facade

0801a500 <ai_platform_get_activations_map>:
 801a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a502:	fab1 f381 	clz	r3, r1
 801a506:	095b      	lsrs	r3, r3, #5
 801a508:	2800      	cmp	r0, #0
 801a50a:	bf08      	it	eq
 801a50c:	2301      	moveq	r3, #1
 801a50e:	2a00      	cmp	r2, #0
 801a510:	bf14      	ite	ne
 801a512:	461c      	movne	r4, r3
 801a514:	2401      	moveq	r4, #1
 801a516:	b114      	cbz	r4, 801a51e <ai_platform_get_activations_map+0x1e>
 801a518:	2400      	movs	r4, #0
 801a51a:	4620      	mov	r0, r4
 801a51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a51e:	4b23      	ldr	r3, [pc, #140]	; (801a5ac <ai_platform_get_activations_map+0xac>)
 801a520:	6815      	ldr	r5, [r2, #0]
 801a522:	429d      	cmp	r5, r3
 801a524:	d00c      	beq.n	801a540 <ai_platform_get_activations_map+0x40>
 801a526:	6a15      	ldr	r5, [r2, #32]
 801a528:	2d00      	cmp	r5, #0
 801a52a:	d0f5      	beq.n	801a518 <ai_platform_get_activations_map+0x18>
 801a52c:	682e      	ldr	r6, [r5, #0]
 801a52e:	429e      	cmp	r6, r3
 801a530:	d023      	beq.n	801a57a <ai_platform_get_activations_map+0x7a>
 801a532:	f1a1 0401 	sub.w	r4, r1, #1
 801a536:	6005      	str	r5, [r0, #0]
 801a538:	fab4 f484 	clz	r4, r4
 801a53c:	0964      	lsrs	r4, r4, #5
 801a53e:	e7ec      	b.n	801a51a <ai_platform_get_activations_map+0x1a>
 801a540:	4606      	mov	r6, r0
 801a542:	f102 000c 	add.w	r0, r2, #12
 801a546:	4615      	mov	r5, r2
 801a548:	460f      	mov	r7, r1
 801a54a:	f7ff ff75 	bl	801a438 <ai_buffer_array_sane>
 801a54e:	2800      	cmp	r0, #0
 801a550:	d0e2      	beq.n	801a518 <ai_platform_get_activations_map+0x18>
 801a552:	89eb      	ldrh	r3, [r5, #14]
 801a554:	429f      	cmp	r7, r3
 801a556:	d1df      	bne.n	801a518 <ai_platform_get_activations_map+0x18>
 801a558:	1f33      	subs	r3, r6, #4
 801a55a:	4620      	mov	r0, r4
 801a55c:	692a      	ldr	r2, [r5, #16]
 801a55e:	4422      	add	r2, r4
 801a560:	341c      	adds	r4, #28
 801a562:	6852      	ldr	r2, [r2, #4]
 801a564:	b122      	cbz	r2, 801a570 <ai_platform_get_activations_map+0x70>
 801a566:	3001      	adds	r0, #1
 801a568:	f843 2f04 	str.w	r2, [r3, #4]!
 801a56c:	4287      	cmp	r7, r0
 801a56e:	d8f5      	bhi.n	801a55c <ai_platform_get_activations_map+0x5c>
 801a570:	1a3c      	subs	r4, r7, r0
 801a572:	fab4 f484 	clz	r4, r4
 801a576:	0964      	lsrs	r4, r4, #5
 801a578:	e7cf      	b.n	801a51a <ai_platform_get_activations_map+0x1a>
 801a57a:	686b      	ldr	r3, [r5, #4]
 801a57c:	3504      	adds	r5, #4
 801a57e:	42b3      	cmp	r3, r6
 801a580:	d0cb      	beq.n	801a51a <ai_platform_get_activations_map+0x1a>
 801a582:	3804      	subs	r0, #4
 801a584:	462f      	mov	r7, r5
 801a586:	4622      	mov	r2, r4
 801a588:	e003      	b.n	801a592 <ai_platform_get_activations_map+0x92>
 801a58a:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801a58e:	42b3      	cmp	r3, r6
 801a590:	d0c3      	beq.n	801a51a <ai_platform_get_activations_map+0x1a>
 801a592:	3201      	adds	r2, #1
 801a594:	f840 3f04 	str.w	r3, [r0, #4]!
 801a598:	4291      	cmp	r1, r2
 801a59a:	d1f6      	bne.n	801a58a <ai_platform_get_activations_map+0x8a>
 801a59c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 801a5a0:	4b02      	ldr	r3, [pc, #8]	; (801a5ac <ai_platform_get_activations_map+0xac>)
 801a5a2:	429a      	cmp	r2, r3
 801a5a4:	bf08      	it	eq
 801a5a6:	2401      	moveq	r4, #1
 801a5a8:	e7b7      	b.n	801a51a <ai_platform_get_activations_map+0x1a>
 801a5aa:	bf00      	nop
 801a5ac:	a1facade 	.word	0xa1facade

0801a5b0 <ai_platform_runtime_get_revision>:
 801a5b0:	4a34      	ldr	r2, [pc, #208]	; (801a684 <ai_platform_runtime_get_revision+0xd4>)
 801a5b2:	b508      	push	{r3, lr}
 801a5b4:	6813      	ldr	r3, [r2, #0]
 801a5b6:	f023 0301 	bic.w	r3, r3, #1
 801a5ba:	6013      	str	r3, [r2, #0]
 801a5bc:	f7ff ff46 	bl	801a44c <_ai_platform_acquire_crc>
 801a5c0:	4b31      	ldr	r3, [pc, #196]	; (801a688 <ai_platform_runtime_get_revision+0xd8>)
 801a5c2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a5cc:	189a      	adds	r2, r3, r2
 801a5ce:	2a01      	cmp	r2, #1
 801a5d0:	d91b      	bls.n	801a60a <ai_platform_runtime_get_revision+0x5a>
 801a5d2:	f240 4249 	movw	r2, #1097	; 0x449
 801a5d6:	4293      	cmp	r3, r2
 801a5d8:	d017      	beq.n	801a60a <ai_platform_runtime_get_revision+0x5a>
 801a5da:	4b2c      	ldr	r3, [pc, #176]	; (801a68c <ai_platform_runtime_get_revision+0xdc>)
 801a5dc:	681a      	ldr	r2, [r3, #0]
 801a5de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a5e2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a5e6:	d01f      	beq.n	801a628 <ai_platform_runtime_get_revision+0x78>
 801a5e8:	681a      	ldr	r2, [r3, #0]
 801a5ea:	f240 4183 	movw	r1, #1155	; 0x483
 801a5ee:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a5f2:	428a      	cmp	r2, r1
 801a5f4:	d036      	beq.n	801a664 <ai_platform_runtime_get_revision+0xb4>
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a5fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a600:	d021      	beq.n	801a646 <ai_platform_runtime_get_revision+0x96>
 801a602:	f7ff ff25 	bl	801a450 <_ai_platform_release_crc>
 801a606:	4822      	ldr	r0, [pc, #136]	; (801a690 <ai_platform_runtime_get_revision+0xe0>)
 801a608:	bd08      	pop	{r3, pc}
 801a60a:	4b22      	ldr	r3, [pc, #136]	; (801a694 <ai_platform_runtime_get_revision+0xe4>)
 801a60c:	2201      	movs	r2, #1
 801a60e:	4619      	mov	r1, r3
 801a610:	601a      	str	r2, [r3, #0]
 801a612:	680b      	ldr	r3, [r1, #0]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d1fc      	bne.n	801a612 <ai_platform_runtime_get_revision+0x62>
 801a618:	4b1f      	ldr	r3, [pc, #124]	; (801a698 <ai_platform_runtime_get_revision+0xe8>)
 801a61a:	4920      	ldr	r1, [pc, #128]	; (801a69c <ai_platform_runtime_get_revision+0xec>)
 801a61c:	4a20      	ldr	r2, [pc, #128]	; (801a6a0 <ai_platform_runtime_get_revision+0xf0>)
 801a61e:	6019      	str	r1, [r3, #0]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4293      	cmp	r3, r2
 801a624:	d0ed      	beq.n	801a602 <ai_platform_runtime_get_revision+0x52>
 801a626:	e7fe      	b.n	801a626 <ai_platform_runtime_get_revision+0x76>
 801a628:	4b1e      	ldr	r3, [pc, #120]	; (801a6a4 <ai_platform_runtime_get_revision+0xf4>)
 801a62a:	2201      	movs	r2, #1
 801a62c:	4619      	mov	r1, r3
 801a62e:	601a      	str	r2, [r3, #0]
 801a630:	680b      	ldr	r3, [r1, #0]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d1fc      	bne.n	801a630 <ai_platform_runtime_get_revision+0x80>
 801a636:	4b1c      	ldr	r3, [pc, #112]	; (801a6a8 <ai_platform_runtime_get_revision+0xf8>)
 801a638:	4918      	ldr	r1, [pc, #96]	; (801a69c <ai_platform_runtime_get_revision+0xec>)
 801a63a:	4a19      	ldr	r2, [pc, #100]	; (801a6a0 <ai_platform_runtime_get_revision+0xf0>)
 801a63c:	6019      	str	r1, [r3, #0]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	4293      	cmp	r3, r2
 801a642:	d0de      	beq.n	801a602 <ai_platform_runtime_get_revision+0x52>
 801a644:	e7fe      	b.n	801a644 <ai_platform_runtime_get_revision+0x94>
 801a646:	4b13      	ldr	r3, [pc, #76]	; (801a694 <ai_platform_runtime_get_revision+0xe4>)
 801a648:	2201      	movs	r2, #1
 801a64a:	4619      	mov	r1, r3
 801a64c:	601a      	str	r2, [r3, #0]
 801a64e:	680b      	ldr	r3, [r1, #0]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d1fc      	bne.n	801a64e <ai_platform_runtime_get_revision+0x9e>
 801a654:	4b10      	ldr	r3, [pc, #64]	; (801a698 <ai_platform_runtime_get_revision+0xe8>)
 801a656:	4911      	ldr	r1, [pc, #68]	; (801a69c <ai_platform_runtime_get_revision+0xec>)
 801a658:	4a11      	ldr	r2, [pc, #68]	; (801a6a0 <ai_platform_runtime_get_revision+0xf0>)
 801a65a:	6019      	str	r1, [r3, #0]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	4293      	cmp	r3, r2
 801a660:	d0cf      	beq.n	801a602 <ai_platform_runtime_get_revision+0x52>
 801a662:	e7fe      	b.n	801a662 <ai_platform_runtime_get_revision+0xb2>
 801a664:	4b0f      	ldr	r3, [pc, #60]	; (801a6a4 <ai_platform_runtime_get_revision+0xf4>)
 801a666:	2201      	movs	r2, #1
 801a668:	4619      	mov	r1, r3
 801a66a:	601a      	str	r2, [r3, #0]
 801a66c:	680b      	ldr	r3, [r1, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d1fc      	bne.n	801a66c <ai_platform_runtime_get_revision+0xbc>
 801a672:	4b0d      	ldr	r3, [pc, #52]	; (801a6a8 <ai_platform_runtime_get_revision+0xf8>)
 801a674:	4909      	ldr	r1, [pc, #36]	; (801a69c <ai_platform_runtime_get_revision+0xec>)
 801a676:	4a0a      	ldr	r2, [pc, #40]	; (801a6a0 <ai_platform_runtime_get_revision+0xf0>)
 801a678:	6019      	str	r1, [r3, #0]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	4293      	cmp	r3, r2
 801a67e:	d0c0      	beq.n	801a602 <ai_platform_runtime_get_revision+0x52>
 801a680:	e7fe      	b.n	801a680 <ai_platform_runtime_get_revision+0xd0>
 801a682:	bf00      	nop
 801a684:	e0002000 	.word	0xe0002000
 801a688:	e0042000 	.word	0xe0042000
 801a68c:	5c001000 	.word	0x5c001000
 801a690:	080246c0 	.word	0x080246c0
 801a694:	40023008 	.word	0x40023008
 801a698:	40023000 	.word	0x40023000
 801a69c:	f407a5c2 	.word	0xf407a5c2
 801a6a0:	b5e8b5cd 	.word	0xb5e8b5cd
 801a6a4:	58024c08 	.word	0x58024c08
 801a6a8:	58024c00 	.word	0x58024c00

0801a6ac <ai_platform_runtime_get_version>:
 801a6ac:	4a3d      	ldr	r2, [pc, #244]	; (801a7a4 <ai_platform_runtime_get_version+0xf8>)
 801a6ae:	b510      	push	{r4, lr}
 801a6b0:	6813      	ldr	r3, [r2, #0]
 801a6b2:	b082      	sub	sp, #8
 801a6b4:	f023 0301 	bic.w	r3, r3, #1
 801a6b8:	6013      	str	r3, [r2, #0]
 801a6ba:	f7ff fec7 	bl	801a44c <_ai_platform_acquire_crc>
 801a6be:	4b3a      	ldr	r3, [pc, #232]	; (801a7a8 <ai_platform_runtime_get_version+0xfc>)
 801a6c0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a6ca:	189a      	adds	r2, r3, r2
 801a6cc:	2a01      	cmp	r2, #1
 801a6ce:	d92c      	bls.n	801a72a <ai_platform_runtime_get_version+0x7e>
 801a6d0:	f240 4249 	movw	r2, #1097	; 0x449
 801a6d4:	4293      	cmp	r3, r2
 801a6d6:	d028      	beq.n	801a72a <ai_platform_runtime_get_version+0x7e>
 801a6d8:	4b34      	ldr	r3, [pc, #208]	; (801a7ac <ai_platform_runtime_get_version+0x100>)
 801a6da:	681a      	ldr	r2, [r3, #0]
 801a6dc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a6e0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a6e4:	d030      	beq.n	801a748 <ai_platform_runtime_get_version+0x9c>
 801a6e6:	681a      	ldr	r2, [r3, #0]
 801a6e8:	f240 4183 	movw	r1, #1155	; 0x483
 801a6ec:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a6f0:	428a      	cmp	r2, r1
 801a6f2:	d047      	beq.n	801a784 <ai_platform_runtime_get_version+0xd8>
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a6fa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a6fe:	d032      	beq.n	801a766 <ai_platform_runtime_get_version+0xba>
 801a700:	f7ff fea6 	bl	801a450 <_ai_platform_release_crc>
 801a704:	4b2a      	ldr	r3, [pc, #168]	; (801a7b0 <ai_platform_runtime_get_version+0x104>)
 801a706:	2000      	movs	r0, #0
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	b2dc      	uxtb	r4, r3
 801a70c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a710:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a714:	0e1b      	lsrs	r3, r3, #24
 801a716:	f364 0007 	bfi	r0, r4, #0, #8
 801a71a:	f361 200f 	bfi	r0, r1, #8, #8
 801a71e:	f362 4017 	bfi	r0, r2, #16, #8
 801a722:	f363 601f 	bfi	r0, r3, #24, #8
 801a726:	b002      	add	sp, #8
 801a728:	bd10      	pop	{r4, pc}
 801a72a:	4b22      	ldr	r3, [pc, #136]	; (801a7b4 <ai_platform_runtime_get_version+0x108>)
 801a72c:	2201      	movs	r2, #1
 801a72e:	4619      	mov	r1, r3
 801a730:	601a      	str	r2, [r3, #0]
 801a732:	680b      	ldr	r3, [r1, #0]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d1fc      	bne.n	801a732 <ai_platform_runtime_get_version+0x86>
 801a738:	4b1f      	ldr	r3, [pc, #124]	; (801a7b8 <ai_platform_runtime_get_version+0x10c>)
 801a73a:	4920      	ldr	r1, [pc, #128]	; (801a7bc <ai_platform_runtime_get_version+0x110>)
 801a73c:	4a20      	ldr	r2, [pc, #128]	; (801a7c0 <ai_platform_runtime_get_version+0x114>)
 801a73e:	6019      	str	r1, [r3, #0]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	4293      	cmp	r3, r2
 801a744:	d0dc      	beq.n	801a700 <ai_platform_runtime_get_version+0x54>
 801a746:	e7fe      	b.n	801a746 <ai_platform_runtime_get_version+0x9a>
 801a748:	4b1e      	ldr	r3, [pc, #120]	; (801a7c4 <ai_platform_runtime_get_version+0x118>)
 801a74a:	2201      	movs	r2, #1
 801a74c:	4619      	mov	r1, r3
 801a74e:	601a      	str	r2, [r3, #0]
 801a750:	680b      	ldr	r3, [r1, #0]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d1fc      	bne.n	801a750 <ai_platform_runtime_get_version+0xa4>
 801a756:	4b1c      	ldr	r3, [pc, #112]	; (801a7c8 <ai_platform_runtime_get_version+0x11c>)
 801a758:	4918      	ldr	r1, [pc, #96]	; (801a7bc <ai_platform_runtime_get_version+0x110>)
 801a75a:	4a19      	ldr	r2, [pc, #100]	; (801a7c0 <ai_platform_runtime_get_version+0x114>)
 801a75c:	6019      	str	r1, [r3, #0]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	4293      	cmp	r3, r2
 801a762:	d0cd      	beq.n	801a700 <ai_platform_runtime_get_version+0x54>
 801a764:	e7fe      	b.n	801a764 <ai_platform_runtime_get_version+0xb8>
 801a766:	4b13      	ldr	r3, [pc, #76]	; (801a7b4 <ai_platform_runtime_get_version+0x108>)
 801a768:	2201      	movs	r2, #1
 801a76a:	4619      	mov	r1, r3
 801a76c:	601a      	str	r2, [r3, #0]
 801a76e:	680b      	ldr	r3, [r1, #0]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d1fc      	bne.n	801a76e <ai_platform_runtime_get_version+0xc2>
 801a774:	4b10      	ldr	r3, [pc, #64]	; (801a7b8 <ai_platform_runtime_get_version+0x10c>)
 801a776:	4911      	ldr	r1, [pc, #68]	; (801a7bc <ai_platform_runtime_get_version+0x110>)
 801a778:	4a11      	ldr	r2, [pc, #68]	; (801a7c0 <ai_platform_runtime_get_version+0x114>)
 801a77a:	6019      	str	r1, [r3, #0]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	4293      	cmp	r3, r2
 801a780:	d0be      	beq.n	801a700 <ai_platform_runtime_get_version+0x54>
 801a782:	e7fe      	b.n	801a782 <ai_platform_runtime_get_version+0xd6>
 801a784:	4b0f      	ldr	r3, [pc, #60]	; (801a7c4 <ai_platform_runtime_get_version+0x118>)
 801a786:	2201      	movs	r2, #1
 801a788:	4619      	mov	r1, r3
 801a78a:	601a      	str	r2, [r3, #0]
 801a78c:	680b      	ldr	r3, [r1, #0]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d1fc      	bne.n	801a78c <ai_platform_runtime_get_version+0xe0>
 801a792:	4b0d      	ldr	r3, [pc, #52]	; (801a7c8 <ai_platform_runtime_get_version+0x11c>)
 801a794:	4909      	ldr	r1, [pc, #36]	; (801a7bc <ai_platform_runtime_get_version+0x110>)
 801a796:	4a0a      	ldr	r2, [pc, #40]	; (801a7c0 <ai_platform_runtime_get_version+0x114>)
 801a798:	6019      	str	r1, [r3, #0]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	4293      	cmp	r3, r2
 801a79e:	d0af      	beq.n	801a700 <ai_platform_runtime_get_version+0x54>
 801a7a0:	e7fe      	b.n	801a7a0 <ai_platform_runtime_get_version+0xf4>
 801a7a2:	bf00      	nop
 801a7a4:	e0002000 	.word	0xe0002000
 801a7a8:	e0042000 	.word	0xe0042000
 801a7ac:	5c001000 	.word	0x5c001000
 801a7b0:	080499e4 	.word	0x080499e4
 801a7b4:	40023008 	.word	0x40023008
 801a7b8:	40023000 	.word	0x40023000
 801a7bc:	f407a5c2 	.word	0xf407a5c2
 801a7c0:	b5e8b5cd 	.word	0xb5e8b5cd
 801a7c4:	58024c08 	.word	0x58024c08
 801a7c8:	58024c00 	.word	0x58024c00

0801a7cc <ai_platform_api_get_version>:
 801a7cc:	4a3d      	ldr	r2, [pc, #244]	; (801a8c4 <ai_platform_api_get_version+0xf8>)
 801a7ce:	b510      	push	{r4, lr}
 801a7d0:	6813      	ldr	r3, [r2, #0]
 801a7d2:	b082      	sub	sp, #8
 801a7d4:	f023 0301 	bic.w	r3, r3, #1
 801a7d8:	6013      	str	r3, [r2, #0]
 801a7da:	f7ff fe37 	bl	801a44c <_ai_platform_acquire_crc>
 801a7de:	4b3a      	ldr	r3, [pc, #232]	; (801a8c8 <ai_platform_api_get_version+0xfc>)
 801a7e0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a7ea:	189a      	adds	r2, r3, r2
 801a7ec:	2a01      	cmp	r2, #1
 801a7ee:	d92c      	bls.n	801a84a <ai_platform_api_get_version+0x7e>
 801a7f0:	f240 4249 	movw	r2, #1097	; 0x449
 801a7f4:	4293      	cmp	r3, r2
 801a7f6:	d028      	beq.n	801a84a <ai_platform_api_get_version+0x7e>
 801a7f8:	4b34      	ldr	r3, [pc, #208]	; (801a8cc <ai_platform_api_get_version+0x100>)
 801a7fa:	681a      	ldr	r2, [r3, #0]
 801a7fc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a800:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a804:	d030      	beq.n	801a868 <ai_platform_api_get_version+0x9c>
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	f240 4183 	movw	r1, #1155	; 0x483
 801a80c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a810:	428a      	cmp	r2, r1
 801a812:	d047      	beq.n	801a8a4 <ai_platform_api_get_version+0xd8>
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a81a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a81e:	d032      	beq.n	801a886 <ai_platform_api_get_version+0xba>
 801a820:	f7ff fe16 	bl	801a450 <_ai_platform_release_crc>
 801a824:	4b2a      	ldr	r3, [pc, #168]	; (801a8d0 <ai_platform_api_get_version+0x104>)
 801a826:	2000      	movs	r0, #0
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	b2dc      	uxtb	r4, r3
 801a82c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a830:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a834:	0e1b      	lsrs	r3, r3, #24
 801a836:	f364 0007 	bfi	r0, r4, #0, #8
 801a83a:	f361 200f 	bfi	r0, r1, #8, #8
 801a83e:	f362 4017 	bfi	r0, r2, #16, #8
 801a842:	f363 601f 	bfi	r0, r3, #24, #8
 801a846:	b002      	add	sp, #8
 801a848:	bd10      	pop	{r4, pc}
 801a84a:	4b22      	ldr	r3, [pc, #136]	; (801a8d4 <ai_platform_api_get_version+0x108>)
 801a84c:	2201      	movs	r2, #1
 801a84e:	4619      	mov	r1, r3
 801a850:	601a      	str	r2, [r3, #0]
 801a852:	680b      	ldr	r3, [r1, #0]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d1fc      	bne.n	801a852 <ai_platform_api_get_version+0x86>
 801a858:	4b1f      	ldr	r3, [pc, #124]	; (801a8d8 <ai_platform_api_get_version+0x10c>)
 801a85a:	4920      	ldr	r1, [pc, #128]	; (801a8dc <ai_platform_api_get_version+0x110>)
 801a85c:	4a20      	ldr	r2, [pc, #128]	; (801a8e0 <ai_platform_api_get_version+0x114>)
 801a85e:	6019      	str	r1, [r3, #0]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	4293      	cmp	r3, r2
 801a864:	d0dc      	beq.n	801a820 <ai_platform_api_get_version+0x54>
 801a866:	e7fe      	b.n	801a866 <ai_platform_api_get_version+0x9a>
 801a868:	4b1e      	ldr	r3, [pc, #120]	; (801a8e4 <ai_platform_api_get_version+0x118>)
 801a86a:	2201      	movs	r2, #1
 801a86c:	4619      	mov	r1, r3
 801a86e:	601a      	str	r2, [r3, #0]
 801a870:	680b      	ldr	r3, [r1, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d1fc      	bne.n	801a870 <ai_platform_api_get_version+0xa4>
 801a876:	4b1c      	ldr	r3, [pc, #112]	; (801a8e8 <ai_platform_api_get_version+0x11c>)
 801a878:	4918      	ldr	r1, [pc, #96]	; (801a8dc <ai_platform_api_get_version+0x110>)
 801a87a:	4a19      	ldr	r2, [pc, #100]	; (801a8e0 <ai_platform_api_get_version+0x114>)
 801a87c:	6019      	str	r1, [r3, #0]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	4293      	cmp	r3, r2
 801a882:	d0cd      	beq.n	801a820 <ai_platform_api_get_version+0x54>
 801a884:	e7fe      	b.n	801a884 <ai_platform_api_get_version+0xb8>
 801a886:	4b13      	ldr	r3, [pc, #76]	; (801a8d4 <ai_platform_api_get_version+0x108>)
 801a888:	2201      	movs	r2, #1
 801a88a:	4619      	mov	r1, r3
 801a88c:	601a      	str	r2, [r3, #0]
 801a88e:	680b      	ldr	r3, [r1, #0]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d1fc      	bne.n	801a88e <ai_platform_api_get_version+0xc2>
 801a894:	4b10      	ldr	r3, [pc, #64]	; (801a8d8 <ai_platform_api_get_version+0x10c>)
 801a896:	4911      	ldr	r1, [pc, #68]	; (801a8dc <ai_platform_api_get_version+0x110>)
 801a898:	4a11      	ldr	r2, [pc, #68]	; (801a8e0 <ai_platform_api_get_version+0x114>)
 801a89a:	6019      	str	r1, [r3, #0]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	4293      	cmp	r3, r2
 801a8a0:	d0be      	beq.n	801a820 <ai_platform_api_get_version+0x54>
 801a8a2:	e7fe      	b.n	801a8a2 <ai_platform_api_get_version+0xd6>
 801a8a4:	4b0f      	ldr	r3, [pc, #60]	; (801a8e4 <ai_platform_api_get_version+0x118>)
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	601a      	str	r2, [r3, #0]
 801a8ac:	680b      	ldr	r3, [r1, #0]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d1fc      	bne.n	801a8ac <ai_platform_api_get_version+0xe0>
 801a8b2:	4b0d      	ldr	r3, [pc, #52]	; (801a8e8 <ai_platform_api_get_version+0x11c>)
 801a8b4:	4909      	ldr	r1, [pc, #36]	; (801a8dc <ai_platform_api_get_version+0x110>)
 801a8b6:	4a0a      	ldr	r2, [pc, #40]	; (801a8e0 <ai_platform_api_get_version+0x114>)
 801a8b8:	6019      	str	r1, [r3, #0]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	4293      	cmp	r3, r2
 801a8be:	d0af      	beq.n	801a820 <ai_platform_api_get_version+0x54>
 801a8c0:	e7fe      	b.n	801a8c0 <ai_platform_api_get_version+0xf4>
 801a8c2:	bf00      	nop
 801a8c4:	e0002000 	.word	0xe0002000
 801a8c8:	e0042000 	.word	0xe0042000
 801a8cc:	5c001000 	.word	0x5c001000
 801a8d0:	080499e8 	.word	0x080499e8
 801a8d4:	40023008 	.word	0x40023008
 801a8d8:	40023000 	.word	0x40023000
 801a8dc:	f407a5c2 	.word	0xf407a5c2
 801a8e0:	b5e8b5cd 	.word	0xb5e8b5cd
 801a8e4:	58024c08 	.word	0x58024c08
 801a8e8:	58024c00 	.word	0x58024c00

0801a8ec <ai_platform_interface_api_get_version>:
 801a8ec:	4a3d      	ldr	r2, [pc, #244]	; (801a9e4 <ai_platform_interface_api_get_version+0xf8>)
 801a8ee:	b510      	push	{r4, lr}
 801a8f0:	6813      	ldr	r3, [r2, #0]
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	f023 0301 	bic.w	r3, r3, #1
 801a8f8:	6013      	str	r3, [r2, #0]
 801a8fa:	f7ff fda7 	bl	801a44c <_ai_platform_acquire_crc>
 801a8fe:	4b3a      	ldr	r3, [pc, #232]	; (801a9e8 <ai_platform_interface_api_get_version+0xfc>)
 801a900:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a90a:	189a      	adds	r2, r3, r2
 801a90c:	2a01      	cmp	r2, #1
 801a90e:	d92c      	bls.n	801a96a <ai_platform_interface_api_get_version+0x7e>
 801a910:	f240 4249 	movw	r2, #1097	; 0x449
 801a914:	4293      	cmp	r3, r2
 801a916:	d028      	beq.n	801a96a <ai_platform_interface_api_get_version+0x7e>
 801a918:	4b34      	ldr	r3, [pc, #208]	; (801a9ec <ai_platform_interface_api_get_version+0x100>)
 801a91a:	681a      	ldr	r2, [r3, #0]
 801a91c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a920:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a924:	d030      	beq.n	801a988 <ai_platform_interface_api_get_version+0x9c>
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	f240 4183 	movw	r1, #1155	; 0x483
 801a92c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a930:	428a      	cmp	r2, r1
 801a932:	d047      	beq.n	801a9c4 <ai_platform_interface_api_get_version+0xd8>
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a93a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a93e:	d032      	beq.n	801a9a6 <ai_platform_interface_api_get_version+0xba>
 801a940:	f7ff fd86 	bl	801a450 <_ai_platform_release_crc>
 801a944:	4b2a      	ldr	r3, [pc, #168]	; (801a9f0 <ai_platform_interface_api_get_version+0x104>)
 801a946:	2000      	movs	r0, #0
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	b2dc      	uxtb	r4, r3
 801a94c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a950:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a954:	0e1b      	lsrs	r3, r3, #24
 801a956:	f364 0007 	bfi	r0, r4, #0, #8
 801a95a:	f361 200f 	bfi	r0, r1, #8, #8
 801a95e:	f362 4017 	bfi	r0, r2, #16, #8
 801a962:	f363 601f 	bfi	r0, r3, #24, #8
 801a966:	b002      	add	sp, #8
 801a968:	bd10      	pop	{r4, pc}
 801a96a:	4b22      	ldr	r3, [pc, #136]	; (801a9f4 <ai_platform_interface_api_get_version+0x108>)
 801a96c:	2201      	movs	r2, #1
 801a96e:	4619      	mov	r1, r3
 801a970:	601a      	str	r2, [r3, #0]
 801a972:	680b      	ldr	r3, [r1, #0]
 801a974:	2b00      	cmp	r3, #0
 801a976:	d1fc      	bne.n	801a972 <ai_platform_interface_api_get_version+0x86>
 801a978:	4b1f      	ldr	r3, [pc, #124]	; (801a9f8 <ai_platform_interface_api_get_version+0x10c>)
 801a97a:	4920      	ldr	r1, [pc, #128]	; (801a9fc <ai_platform_interface_api_get_version+0x110>)
 801a97c:	4a20      	ldr	r2, [pc, #128]	; (801aa00 <ai_platform_interface_api_get_version+0x114>)
 801a97e:	6019      	str	r1, [r3, #0]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	4293      	cmp	r3, r2
 801a984:	d0dc      	beq.n	801a940 <ai_platform_interface_api_get_version+0x54>
 801a986:	e7fe      	b.n	801a986 <ai_platform_interface_api_get_version+0x9a>
 801a988:	4b1e      	ldr	r3, [pc, #120]	; (801aa04 <ai_platform_interface_api_get_version+0x118>)
 801a98a:	2201      	movs	r2, #1
 801a98c:	4619      	mov	r1, r3
 801a98e:	601a      	str	r2, [r3, #0]
 801a990:	680b      	ldr	r3, [r1, #0]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d1fc      	bne.n	801a990 <ai_platform_interface_api_get_version+0xa4>
 801a996:	4b1c      	ldr	r3, [pc, #112]	; (801aa08 <ai_platform_interface_api_get_version+0x11c>)
 801a998:	4918      	ldr	r1, [pc, #96]	; (801a9fc <ai_platform_interface_api_get_version+0x110>)
 801a99a:	4a19      	ldr	r2, [pc, #100]	; (801aa00 <ai_platform_interface_api_get_version+0x114>)
 801a99c:	6019      	str	r1, [r3, #0]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	4293      	cmp	r3, r2
 801a9a2:	d0cd      	beq.n	801a940 <ai_platform_interface_api_get_version+0x54>
 801a9a4:	e7fe      	b.n	801a9a4 <ai_platform_interface_api_get_version+0xb8>
 801a9a6:	4b13      	ldr	r3, [pc, #76]	; (801a9f4 <ai_platform_interface_api_get_version+0x108>)
 801a9a8:	2201      	movs	r2, #1
 801a9aa:	4619      	mov	r1, r3
 801a9ac:	601a      	str	r2, [r3, #0]
 801a9ae:	680b      	ldr	r3, [r1, #0]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d1fc      	bne.n	801a9ae <ai_platform_interface_api_get_version+0xc2>
 801a9b4:	4b10      	ldr	r3, [pc, #64]	; (801a9f8 <ai_platform_interface_api_get_version+0x10c>)
 801a9b6:	4911      	ldr	r1, [pc, #68]	; (801a9fc <ai_platform_interface_api_get_version+0x110>)
 801a9b8:	4a11      	ldr	r2, [pc, #68]	; (801aa00 <ai_platform_interface_api_get_version+0x114>)
 801a9ba:	6019      	str	r1, [r3, #0]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d0be      	beq.n	801a940 <ai_platform_interface_api_get_version+0x54>
 801a9c2:	e7fe      	b.n	801a9c2 <ai_platform_interface_api_get_version+0xd6>
 801a9c4:	4b0f      	ldr	r3, [pc, #60]	; (801aa04 <ai_platform_interface_api_get_version+0x118>)
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	601a      	str	r2, [r3, #0]
 801a9cc:	680b      	ldr	r3, [r1, #0]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d1fc      	bne.n	801a9cc <ai_platform_interface_api_get_version+0xe0>
 801a9d2:	4b0d      	ldr	r3, [pc, #52]	; (801aa08 <ai_platform_interface_api_get_version+0x11c>)
 801a9d4:	4909      	ldr	r1, [pc, #36]	; (801a9fc <ai_platform_interface_api_get_version+0x110>)
 801a9d6:	4a0a      	ldr	r2, [pc, #40]	; (801aa00 <ai_platform_interface_api_get_version+0x114>)
 801a9d8:	6019      	str	r1, [r3, #0]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d0af      	beq.n	801a940 <ai_platform_interface_api_get_version+0x54>
 801a9e0:	e7fe      	b.n	801a9e0 <ai_platform_interface_api_get_version+0xf4>
 801a9e2:	bf00      	nop
 801a9e4:	e0002000 	.word	0xe0002000
 801a9e8:	e0042000 	.word	0xe0042000
 801a9ec:	5c001000 	.word	0x5c001000
 801a9f0:	080499ec 	.word	0x080499ec
 801a9f4:	40023008 	.word	0x40023008
 801a9f8:	40023000 	.word	0x40023000
 801a9fc:	f407a5c2 	.word	0xf407a5c2
 801aa00:	b5e8b5cd 	.word	0xb5e8b5cd
 801aa04:	58024c08 	.word	0x58024c08
 801aa08:	58024c00 	.word	0x58024c00

0801aa0c <ai_platform_context_acquire>:
 801aa0c:	b510      	push	{r4, lr}
 801aa0e:	4604      	mov	r4, r0
 801aa10:	b120      	cbz	r0, 801aa1c <ai_platform_context_acquire+0x10>
 801aa12:	4b36      	ldr	r3, [pc, #216]	; (801aaec <ai_platform_context_acquire+0xe0>)
 801aa14:	6802      	ldr	r2, [r0, #0]
 801aa16:	429a      	cmp	r2, r3
 801aa18:	bf18      	it	ne
 801aa1a:	2400      	movne	r4, #0
 801aa1c:	4a34      	ldr	r2, [pc, #208]	; (801aaf0 <ai_platform_context_acquire+0xe4>)
 801aa1e:	6813      	ldr	r3, [r2, #0]
 801aa20:	f023 0301 	bic.w	r3, r3, #1
 801aa24:	6013      	str	r3, [r2, #0]
 801aa26:	f7ff fd11 	bl	801a44c <_ai_platform_acquire_crc>
 801aa2a:	4b32      	ldr	r3, [pc, #200]	; (801aaf4 <ai_platform_context_acquire+0xe8>)
 801aa2c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aa36:	189a      	adds	r2, r3, r2
 801aa38:	2a01      	cmp	r2, #1
 801aa3a:	d91b      	bls.n	801aa74 <ai_platform_context_acquire+0x68>
 801aa3c:	f240 4249 	movw	r2, #1097	; 0x449
 801aa40:	4293      	cmp	r3, r2
 801aa42:	d017      	beq.n	801aa74 <ai_platform_context_acquire+0x68>
 801aa44:	4b2c      	ldr	r3, [pc, #176]	; (801aaf8 <ai_platform_context_acquire+0xec>)
 801aa46:	681a      	ldr	r2, [r3, #0]
 801aa48:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801aa4c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801aa50:	d01f      	beq.n	801aa92 <ai_platform_context_acquire+0x86>
 801aa52:	681a      	ldr	r2, [r3, #0]
 801aa54:	f240 4183 	movw	r1, #1155	; 0x483
 801aa58:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801aa5c:	428a      	cmp	r2, r1
 801aa5e:	d036      	beq.n	801aace <ai_platform_context_acquire+0xc2>
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aa66:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801aa6a:	d021      	beq.n	801aab0 <ai_platform_context_acquire+0xa4>
 801aa6c:	f7ff fcf0 	bl	801a450 <_ai_platform_release_crc>
 801aa70:	4620      	mov	r0, r4
 801aa72:	bd10      	pop	{r4, pc}
 801aa74:	4b21      	ldr	r3, [pc, #132]	; (801aafc <ai_platform_context_acquire+0xf0>)
 801aa76:	2201      	movs	r2, #1
 801aa78:	4619      	mov	r1, r3
 801aa7a:	601a      	str	r2, [r3, #0]
 801aa7c:	680b      	ldr	r3, [r1, #0]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d1fc      	bne.n	801aa7c <ai_platform_context_acquire+0x70>
 801aa82:	4b1f      	ldr	r3, [pc, #124]	; (801ab00 <ai_platform_context_acquire+0xf4>)
 801aa84:	491f      	ldr	r1, [pc, #124]	; (801ab04 <ai_platform_context_acquire+0xf8>)
 801aa86:	4a20      	ldr	r2, [pc, #128]	; (801ab08 <ai_platform_context_acquire+0xfc>)
 801aa88:	6019      	str	r1, [r3, #0]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	d0ed      	beq.n	801aa6c <ai_platform_context_acquire+0x60>
 801aa90:	e7fe      	b.n	801aa90 <ai_platform_context_acquire+0x84>
 801aa92:	4b1e      	ldr	r3, [pc, #120]	; (801ab0c <ai_platform_context_acquire+0x100>)
 801aa94:	2201      	movs	r2, #1
 801aa96:	4619      	mov	r1, r3
 801aa98:	601a      	str	r2, [r3, #0]
 801aa9a:	680b      	ldr	r3, [r1, #0]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d1fc      	bne.n	801aa9a <ai_platform_context_acquire+0x8e>
 801aaa0:	4b1b      	ldr	r3, [pc, #108]	; (801ab10 <ai_platform_context_acquire+0x104>)
 801aaa2:	4918      	ldr	r1, [pc, #96]	; (801ab04 <ai_platform_context_acquire+0xf8>)
 801aaa4:	4a18      	ldr	r2, [pc, #96]	; (801ab08 <ai_platform_context_acquire+0xfc>)
 801aaa6:	6019      	str	r1, [r3, #0]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	4293      	cmp	r3, r2
 801aaac:	d0de      	beq.n	801aa6c <ai_platform_context_acquire+0x60>
 801aaae:	e7fe      	b.n	801aaae <ai_platform_context_acquire+0xa2>
 801aab0:	4b12      	ldr	r3, [pc, #72]	; (801aafc <ai_platform_context_acquire+0xf0>)
 801aab2:	2201      	movs	r2, #1
 801aab4:	4619      	mov	r1, r3
 801aab6:	601a      	str	r2, [r3, #0]
 801aab8:	680b      	ldr	r3, [r1, #0]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d1fc      	bne.n	801aab8 <ai_platform_context_acquire+0xac>
 801aabe:	4b10      	ldr	r3, [pc, #64]	; (801ab00 <ai_platform_context_acquire+0xf4>)
 801aac0:	4910      	ldr	r1, [pc, #64]	; (801ab04 <ai_platform_context_acquire+0xf8>)
 801aac2:	4a11      	ldr	r2, [pc, #68]	; (801ab08 <ai_platform_context_acquire+0xfc>)
 801aac4:	6019      	str	r1, [r3, #0]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	4293      	cmp	r3, r2
 801aaca:	d0cf      	beq.n	801aa6c <ai_platform_context_acquire+0x60>
 801aacc:	e7fe      	b.n	801aacc <ai_platform_context_acquire+0xc0>
 801aace:	4b0f      	ldr	r3, [pc, #60]	; (801ab0c <ai_platform_context_acquire+0x100>)
 801aad0:	2201      	movs	r2, #1
 801aad2:	4619      	mov	r1, r3
 801aad4:	601a      	str	r2, [r3, #0]
 801aad6:	680b      	ldr	r3, [r1, #0]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d1fc      	bne.n	801aad6 <ai_platform_context_acquire+0xca>
 801aadc:	4b0c      	ldr	r3, [pc, #48]	; (801ab10 <ai_platform_context_acquire+0x104>)
 801aade:	4909      	ldr	r1, [pc, #36]	; (801ab04 <ai_platform_context_acquire+0xf8>)
 801aae0:	4a09      	ldr	r2, [pc, #36]	; (801ab08 <ai_platform_context_acquire+0xfc>)
 801aae2:	6019      	str	r1, [r3, #0]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	4293      	cmp	r3, r2
 801aae8:	d0c0      	beq.n	801aa6c <ai_platform_context_acquire+0x60>
 801aaea:	e7fe      	b.n	801aaea <ai_platform_context_acquire+0xde>
 801aaec:	a1c00100 	.word	0xa1c00100
 801aaf0:	e0002000 	.word	0xe0002000
 801aaf4:	e0042000 	.word	0xe0042000
 801aaf8:	5c001000 	.word	0x5c001000
 801aafc:	40023008 	.word	0x40023008
 801ab00:	40023000 	.word	0x40023000
 801ab04:	f407a5c2 	.word	0xf407a5c2
 801ab08:	b5e8b5cd 	.word	0xb5e8b5cd
 801ab0c:	58024c08 	.word	0x58024c08
 801ab10:	58024c00 	.word	0x58024c00

0801ab14 <ai_platform_network_set_error>:
 801ab14:	b110      	cbz	r0, 801ab1c <ai_platform_network_set_error+0x8>
 801ab16:	3010      	adds	r0, #16
 801ab18:	f001 bd9a 	b.w	801c650 <core_set_error>
 801ab1c:	4770      	bx	lr
 801ab1e:	bf00      	nop

0801ab20 <ai_platform_api_get_network_report>:
 801ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab24:	460c      	mov	r4, r1
 801ab26:	b089      	sub	sp, #36	; 0x24
 801ab28:	4605      	mov	r5, r0
 801ab2a:	b120      	cbz	r0, 801ab36 <ai_platform_api_get_network_report+0x16>
 801ab2c:	4bae      	ldr	r3, [pc, #696]	; (801ade8 <ai_platform_api_get_network_report+0x2c8>)
 801ab2e:	6802      	ldr	r2, [r0, #0]
 801ab30:	429a      	cmp	r2, r3
 801ab32:	bf18      	it	ne
 801ab34:	2500      	movne	r5, #0
 801ab36:	4aad      	ldr	r2, [pc, #692]	; (801adec <ai_platform_api_get_network_report+0x2cc>)
 801ab38:	6813      	ldr	r3, [r2, #0]
 801ab3a:	f023 0301 	bic.w	r3, r3, #1
 801ab3e:	6013      	str	r3, [r2, #0]
 801ab40:	f7ff fc84 	bl	801a44c <_ai_platform_acquire_crc>
 801ab44:	4baa      	ldr	r3, [pc, #680]	; (801adf0 <ai_platform_api_get_network_report+0x2d0>)
 801ab46:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab50:	eb03 020e 	add.w	r2, r3, lr
 801ab54:	2a01      	cmp	r2, #1
 801ab56:	f240 80a6 	bls.w	801aca6 <ai_platform_api_get_network_report+0x186>
 801ab5a:	f240 4249 	movw	r2, #1097	; 0x449
 801ab5e:	4293      	cmp	r3, r2
 801ab60:	f000 80a1 	beq.w	801aca6 <ai_platform_api_get_network_report+0x186>
 801ab64:	4ba3      	ldr	r3, [pc, #652]	; (801adf4 <ai_platform_api_get_network_report+0x2d4>)
 801ab66:	681a      	ldr	r2, [r3, #0]
 801ab68:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ab6c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ab70:	f000 80a9 	beq.w	801acc6 <ai_platform_api_get_network_report+0x1a6>
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	f240 4183 	movw	r1, #1155	; 0x483
 801ab7a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ab7e:	428a      	cmp	r2, r1
 801ab80:	f000 83e0 	beq.w	801b344 <ai_platform_api_get_network_report+0x824>
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab8a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ab8e:	f000 83c9 	beq.w	801b324 <ai_platform_api_get_network_report+0x804>
 801ab92:	f7ff fc5d 	bl	801a450 <_ai_platform_release_crc>
 801ab96:	2d00      	cmp	r5, #0
 801ab98:	f000 83c2 	beq.w	801b320 <ai_platform_api_get_network_report+0x800>
 801ab9c:	fab4 f384 	clz	r3, r4
 801aba0:	095b      	lsrs	r3, r3, #5
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	f040 83bc 	bne.w	801b320 <ai_platform_api_get_network_report+0x800>
 801aba8:	6763      	str	r3, [r4, #116]	; 0x74
 801abaa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801abac:	2a00      	cmp	r2, #0
 801abae:	f000 83af 	beq.w	801b310 <ai_platform_api_get_network_report+0x7f0>
 801abb2:	2301      	movs	r3, #1
 801abb4:	6763      	str	r3, [r4, #116]	; 0x74
 801abb6:	6913      	ldr	r3, [r2, #16]
 801abb8:	b183      	cbz	r3, 801abdc <ai_platform_api_get_network_report+0xbc>
 801abba:	429a      	cmp	r2, r3
 801abbc:	d00e      	beq.n	801abdc <ai_platform_api_get_network_report+0xbc>
 801abbe:	2202      	movs	r2, #2
 801abc0:	e003      	b.n	801abca <ai_platform_api_get_network_report+0xaa>
 801abc2:	4299      	cmp	r1, r3
 801abc4:	d006      	beq.n	801abd4 <ai_platform_api_get_network_report+0xb4>
 801abc6:	460b      	mov	r3, r1
 801abc8:	b121      	cbz	r1, 801abd4 <ai_platform_api_get_network_report+0xb4>
 801abca:	6762      	str	r2, [r4, #116]	; 0x74
 801abcc:	3201      	adds	r2, #1
 801abce:	6919      	ldr	r1, [r3, #16]
 801abd0:	2900      	cmp	r1, #0
 801abd2:	d1f6      	bne.n	801abc2 <ai_platform_api_get_network_report+0xa2>
 801abd4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	f000 839a 	beq.w	801b310 <ai_platform_api_get_network_report+0x7f0>
 801abdc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801abde:	2b00      	cmp	r3, #0
 801abe0:	f000 8081 	beq.w	801ace6 <ai_platform_api_get_network_report+0x1c6>
 801abe4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801abe8:	f1b8 0f00 	cmp.w	r8, #0
 801abec:	d07b      	beq.n	801ace6 <ai_platform_api_get_network_report+0x1c6>
 801abee:	f8b8 3000 	ldrh.w	r3, [r8]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d077      	beq.n	801ace6 <ai_platform_api_get_network_report+0x1c6>
 801abf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d073      	beq.n	801ace6 <ai_platform_api_get_network_report+0x1c6>
 801abfe:	681f      	ldr	r7, [r3, #0]
 801ac00:	2f00      	cmp	r7, #0
 801ac02:	d070      	beq.n	801ace6 <ai_platform_api_get_network_report+0x1c6>
 801ac04:	f04f 0b00 	mov.w	fp, #0
 801ac08:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801ac0c:	46d9      	mov	r9, fp
 801ac0e:	e029      	b.n	801ac64 <ai_platform_api_get_network_report+0x144>
 801ac10:	885b      	ldrh	r3, [r3, #2]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d044      	beq.n	801aca0 <ai_platform_api_get_network_report+0x180>
 801ac16:	2301      	movs	r3, #1
 801ac18:	f84a 3005 	str.w	r3, [sl, r5]
 801ac1c:	69bb      	ldr	r3, [r7, #24]
 801ac1e:	685d      	ldr	r5, [r3, #4]
 801ac20:	f04f 0301 	mov.w	r3, #1
 801ac24:	9900      	ldr	r1, [sp, #0]
 801ac26:	f109 0701 	add.w	r7, r9, #1
 801ac2a:	7533      	strb	r3, [r6, #20]
 801ac2c:	6973      	ldr	r3, [r6, #20]
 801ac2e:	46b9      	mov	r9, r7
 801ac30:	6135      	str	r5, [r6, #16]
 801ac32:	f361 231f 	bfi	r3, r1, #8, #24
 801ac36:	60b4      	str	r4, [r6, #8]
 801ac38:	e9c6 0200 	strd	r0, r2, [r6]
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	b2b8      	uxth	r0, r7
 801ac40:	60f2      	str	r2, [r6, #12]
 801ac42:	9a01      	ldr	r2, [sp, #4]
 801ac44:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801ac48:	f8b8 3000 	ldrh.w	r3, [r8]
 801ac4c:	429f      	cmp	r7, r3
 801ac4e:	d256      	bcs.n	801acfe <ai_platform_api_get_network_report+0x1de>
 801ac50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d052      	beq.n	801acfe <ai_platform_api_get_network_report+0x1de>
 801ac58:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801ac5c:	f10b 0b1c 	add.w	fp, fp, #28
 801ac60:	2f00      	cmp	r7, #0
 801ac62:	d04c      	beq.n	801acfe <ai_platform_api_get_network_report+0x1de>
 801ac64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ac68:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801ac6c:	69b8      	ldr	r0, [r7, #24]
 801ac6e:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	6800      	ldr	r0, [r0, #0]
 801ac76:	eb0a 0405 	add.w	r4, sl, r5
 801ac7a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801ac7e:	445e      	add	r6, fp
 801ac80:	9300      	str	r3, [sp, #0]
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	9301      	str	r3, [sp, #4]
 801ac86:	f005 fe51 	bl	802092c <ai_array_to_buffer_fmt>
 801ac8a:	69bb      	ldr	r3, [r7, #24]
 801ac8c:	689a      	ldr	r2, [r3, #8]
 801ac8e:	2c00      	cmp	r4, #0
 801ac90:	d0c5      	beq.n	801ac1e <ai_platform_api_get_network_report+0xfe>
 801ac92:	2300      	movs	r3, #0
 801ac94:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801ac98:	683b      	ldr	r3, [r7, #0]
 801ac9a:	6063      	str	r3, [r4, #4]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d1b7      	bne.n	801ac10 <ai_platform_api_get_network_report+0xf0>
 801aca0:	69bb      	ldr	r3, [r7, #24]
 801aca2:	2400      	movs	r4, #0
 801aca4:	e7bb      	b.n	801ac1e <ai_platform_api_get_network_report+0xfe>
 801aca6:	4b54      	ldr	r3, [pc, #336]	; (801adf8 <ai_platform_api_get_network_report+0x2d8>)
 801aca8:	2201      	movs	r2, #1
 801acaa:	4619      	mov	r1, r3
 801acac:	601a      	str	r2, [r3, #0]
 801acae:	680b      	ldr	r3, [r1, #0]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d1fc      	bne.n	801acae <ai_platform_api_get_network_report+0x18e>
 801acb4:	4b51      	ldr	r3, [pc, #324]	; (801adfc <ai_platform_api_get_network_report+0x2dc>)
 801acb6:	4952      	ldr	r1, [pc, #328]	; (801ae00 <ai_platform_api_get_network_report+0x2e0>)
 801acb8:	4a52      	ldr	r2, [pc, #328]	; (801ae04 <ai_platform_api_get_network_report+0x2e4>)
 801acba:	6019      	str	r1, [r3, #0]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	4293      	cmp	r3, r2
 801acc0:	f43f af67 	beq.w	801ab92 <ai_platform_api_get_network_report+0x72>
 801acc4:	e7fe      	b.n	801acc4 <ai_platform_api_get_network_report+0x1a4>
 801acc6:	4b50      	ldr	r3, [pc, #320]	; (801ae08 <ai_platform_api_get_network_report+0x2e8>)
 801acc8:	2201      	movs	r2, #1
 801acca:	4619      	mov	r1, r3
 801accc:	601a      	str	r2, [r3, #0]
 801acce:	680b      	ldr	r3, [r1, #0]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d1fc      	bne.n	801acce <ai_platform_api_get_network_report+0x1ae>
 801acd4:	4b4d      	ldr	r3, [pc, #308]	; (801ae0c <ai_platform_api_get_network_report+0x2ec>)
 801acd6:	494a      	ldr	r1, [pc, #296]	; (801ae00 <ai_platform_api_get_network_report+0x2e0>)
 801acd8:	4a4a      	ldr	r2, [pc, #296]	; (801ae04 <ai_platform_api_get_network_report+0x2e4>)
 801acda:	6019      	str	r1, [r3, #0]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	4293      	cmp	r3, r2
 801ace0:	f43f af57 	beq.w	801ab92 <ai_platform_api_get_network_report+0x72>
 801ace4:	e7fe      	b.n	801ace4 <ai_platform_api_get_network_report+0x1c4>
 801ace6:	2600      	movs	r6, #0
 801ace8:	f105 0010 	add.w	r0, r5, #16
 801acec:	2218      	movs	r2, #24
 801acee:	2112      	movs	r1, #18
 801acf0:	8626      	strh	r6, [r4, #48]	; 0x30
 801acf2:	f001 fcad 	bl	801c650 <core_set_error>
 801acf6:	4630      	mov	r0, r6
 801acf8:	b009      	add	sp, #36	; 0x24
 801acfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acfe:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801ad02:	2800      	cmp	r0, #0
 801ad04:	d0ef      	beq.n	801ace6 <ai_platform_api_get_network_report+0x1c6>
 801ad06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	8620      	strh	r0, [r4, #48]	; 0x30
 801ad0e:	6363      	str	r3, [r4, #52]	; 0x34
 801ad10:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d95e      	bls.n	801add4 <ai_platform_api_get_network_report+0x2b4>
 801ad16:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801ad1a:	f118 0f0c 	cmn.w	r8, #12
 801ad1e:	d059      	beq.n	801add4 <ai_platform_api_get_network_report+0x2b4>
 801ad20:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d055      	beq.n	801add4 <ai_platform_api_get_network_report+0x2b4>
 801ad28:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d051      	beq.n	801add4 <ai_platform_api_get_network_report+0x2b4>
 801ad30:	681f      	ldr	r7, [r3, #0]
 801ad32:	2f00      	cmp	r7, #0
 801ad34:	d04e      	beq.n	801add4 <ai_platform_api_get_network_report+0x2b4>
 801ad36:	f04f 0b00 	mov.w	fp, #0
 801ad3a:	46d9      	mov	r9, fp
 801ad3c:	e027      	b.n	801ad8e <ai_platform_api_get_network_report+0x26e>
 801ad3e:	2301      	movs	r3, #1
 801ad40:	f84a 3005 	str.w	r3, [sl, r5]
 801ad44:	69bb      	ldr	r3, [r7, #24]
 801ad46:	685d      	ldr	r5, [r3, #4]
 801ad48:	f04f 0301 	mov.w	r3, #1
 801ad4c:	9900      	ldr	r1, [sp, #0]
 801ad4e:	f109 0701 	add.w	r7, r9, #1
 801ad52:	7533      	strb	r3, [r6, #20]
 801ad54:	6973      	ldr	r3, [r6, #20]
 801ad56:	46b9      	mov	r9, r7
 801ad58:	6135      	str	r5, [r6, #16]
 801ad5a:	fa1f fc87 	uxth.w	ip, r7
 801ad5e:	f361 231f 	bfi	r3, r1, #8, #24
 801ad62:	60b4      	str	r4, [r6, #8]
 801ad64:	e9c6 0200 	strd	r0, r2, [r6]
 801ad68:	2200      	movs	r2, #0
 801ad6a:	60f2      	str	r2, [r6, #12]
 801ad6c:	9a01      	ldr	r2, [sp, #4]
 801ad6e:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801ad72:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801ad76:	429f      	cmp	r7, r3
 801ad78:	d24a      	bcs.n	801ae10 <ai_platform_api_get_network_report+0x2f0>
 801ad7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d046      	beq.n	801ae10 <ai_platform_api_get_network_report+0x2f0>
 801ad82:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801ad86:	f10b 0b1c 	add.w	fp, fp, #28
 801ad8a:	2f00      	cmp	r7, #0
 801ad8c:	d040      	beq.n	801ae10 <ai_platform_api_get_network_report+0x2f0>
 801ad8e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801ad92:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801ad96:	69b8      	ldr	r0, [r7, #24]
 801ad98:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	6800      	ldr	r0, [r0, #0]
 801ada0:	eb0a 0405 	add.w	r4, sl, r5
 801ada4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801ada8:	445e      	add	r6, fp
 801adaa:	9300      	str	r3, [sp, #0]
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	9301      	str	r3, [sp, #4]
 801adb0:	f005 fdbc 	bl	802092c <ai_array_to_buffer_fmt>
 801adb4:	69bb      	ldr	r3, [r7, #24]
 801adb6:	689a      	ldr	r2, [r3, #8]
 801adb8:	2c00      	cmp	r4, #0
 801adba:	d0c4      	beq.n	801ad46 <ai_platform_api_get_network_report+0x226>
 801adbc:	2300      	movs	r3, #0
 801adbe:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801adc2:	683b      	ldr	r3, [r7, #0]
 801adc4:	6063      	str	r3, [r4, #4]
 801adc6:	b113      	cbz	r3, 801adce <ai_platform_api_get_network_report+0x2ae>
 801adc8:	885b      	ldrh	r3, [r3, #2]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d1b7      	bne.n	801ad3e <ai_platform_api_get_network_report+0x21e>
 801adce:	69bb      	ldr	r3, [r7, #24]
 801add0:	2400      	movs	r4, #0
 801add2:	e7b8      	b.n	801ad46 <ai_platform_api_get_network_report+0x226>
 801add4:	2600      	movs	r6, #0
 801add6:	f105 0010 	add.w	r0, r5, #16
 801adda:	2218      	movs	r2, #24
 801addc:	2113      	movs	r1, #19
 801adde:	8666      	strh	r6, [r4, #50]	; 0x32
 801ade0:	f001 fc36 	bl	801c650 <core_set_error>
 801ade4:	e787      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801ade6:	bf00      	nop
 801ade8:	a1c00100 	.word	0xa1c00100
 801adec:	e0002000 	.word	0xe0002000
 801adf0:	e0042000 	.word	0xe0042000
 801adf4:	5c001000 	.word	0x5c001000
 801adf8:	40023008 	.word	0x40023008
 801adfc:	40023000 	.word	0x40023000
 801ae00:	f407a5c2 	.word	0xf407a5c2
 801ae04:	b5e8b5cd 	.word	0xb5e8b5cd
 801ae08:	58024c08 	.word	0x58024c08
 801ae0c:	58024c00 	.word	0x58024c00
 801ae10:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801ae14:	f1bc 0f00 	cmp.w	ip, #0
 801ae18:	d0dc      	beq.n	801add4 <ai_platform_api_get_network_report+0x2b4>
 801ae1a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801ae1e:	f105 0724 	add.w	r7, r5, #36	; 0x24
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	4638      	mov	r0, r7
 801ae26:	f8a4 c032 	strh.w	ip, [r4, #50]	; 0x32
 801ae2a:	63a3      	str	r3, [r4, #56]	; 0x38
 801ae2c:	f7ff fb04 	bl	801a438 <ai_buffer_array_sane>
 801ae30:	4606      	mov	r6, r0
 801ae32:	b938      	cbnz	r0, 801ae44 <ai_platform_api_get_network_report+0x324>
 801ae34:	4638      	mov	r0, r7
 801ae36:	f7ff faff 	bl	801a438 <ai_buffer_array_sane>
 801ae3a:	b118      	cbz	r0, 801ae44 <ai_platform_api_get_network_report+0x324>
 801ae3c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	f040 8109 	bne.w	801b056 <ai_platform_api_get_network_report+0x536>
 801ae44:	f105 081c 	add.w	r8, r5, #28
 801ae48:	4640      	mov	r0, r8
 801ae4a:	f7ff faf5 	bl	801a438 <ai_buffer_array_sane>
 801ae4e:	4606      	mov	r6, r0
 801ae50:	b938      	cbnz	r0, 801ae62 <ai_platform_api_get_network_report+0x342>
 801ae52:	4640      	mov	r0, r8
 801ae54:	f7ff faf0 	bl	801a438 <ai_buffer_array_sane>
 801ae58:	b118      	cbz	r0, 801ae62 <ai_platform_api_get_network_report+0x342>
 801ae5a:	8beb      	ldrh	r3, [r5, #30]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	f040 8101 	bne.w	801b064 <ai_platform_api_get_network_report+0x544>
 801ae62:	686b      	ldr	r3, [r5, #4]
 801ae64:	4abd      	ldr	r2, [pc, #756]	; (801b15c <ai_platform_api_get_network_report+0x63c>)
 801ae66:	67a3      	str	r3, [r4, #120]	; 0x78
 801ae68:	6813      	ldr	r3, [r2, #0]
 801ae6a:	f023 0301 	bic.w	r3, r3, #1
 801ae6e:	6013      	str	r3, [r2, #0]
 801ae70:	f7ff faec 	bl	801a44c <_ai_platform_acquire_crc>
 801ae74:	4bba      	ldr	r3, [pc, #744]	; (801b160 <ai_platform_api_get_network_report+0x640>)
 801ae76:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ae80:	eb03 020c 	add.w	r2, r3, ip
 801ae84:	2a01      	cmp	r2, #1
 801ae86:	f240 8233 	bls.w	801b2f0 <ai_platform_api_get_network_report+0x7d0>
 801ae8a:	f240 4249 	movw	r2, #1097	; 0x449
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	f000 822e 	beq.w	801b2f0 <ai_platform_api_get_network_report+0x7d0>
 801ae94:	4bb3      	ldr	r3, [pc, #716]	; (801b164 <ai_platform_api_get_network_report+0x644>)
 801ae96:	681a      	ldr	r2, [r3, #0]
 801ae98:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ae9c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801aea0:	f000 8216 	beq.w	801b2d0 <ai_platform_api_get_network_report+0x7b0>
 801aea4:	681a      	ldr	r2, [r3, #0]
 801aea6:	f240 4183 	movw	r1, #1155	; 0x483
 801aeaa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801aeae:	428a      	cmp	r2, r1
 801aeb0:	f000 81fe 	beq.w	801b2b0 <ai_platform_api_get_network_report+0x790>
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aeba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801aebe:	f000 81e7 	beq.w	801b290 <ai_platform_api_get_network_report+0x770>
 801aec2:	f7ff fac5 	bl	801a450 <_ai_platform_release_crc>
 801aec6:	4aa5      	ldr	r2, [pc, #660]	; (801b15c <ai_platform_api_get_network_report+0x63c>)
 801aec8:	4ba7      	ldr	r3, [pc, #668]	; (801b168 <ai_platform_api_get_network_report+0x648>)
 801aeca:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801aece:	6123      	str	r3, [r4, #16]
 801aed0:	6813      	ldr	r3, [r2, #0]
 801aed2:	f023 0301 	bic.w	r3, r3, #1
 801aed6:	6013      	str	r3, [r2, #0]
 801aed8:	f7ff fab8 	bl	801a44c <_ai_platform_acquire_crc>
 801aedc:	4ba0      	ldr	r3, [pc, #640]	; (801b160 <ai_platform_api_get_network_report+0x640>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aee4:	199a      	adds	r2, r3, r6
 801aee6:	2a01      	cmp	r2, #1
 801aee8:	f240 81c2 	bls.w	801b270 <ai_platform_api_get_network_report+0x750>
 801aeec:	f240 4249 	movw	r2, #1097	; 0x449
 801aef0:	4293      	cmp	r3, r2
 801aef2:	f000 81bd 	beq.w	801b270 <ai_platform_api_get_network_report+0x750>
 801aef6:	4b9b      	ldr	r3, [pc, #620]	; (801b164 <ai_platform_api_get_network_report+0x644>)
 801aef8:	681a      	ldr	r2, [r3, #0]
 801aefa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801aefe:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801af02:	f000 81a5 	beq.w	801b250 <ai_platform_api_get_network_report+0x730>
 801af06:	681a      	ldr	r2, [r3, #0]
 801af08:	f240 4183 	movw	r1, #1155	; 0x483
 801af0c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801af10:	428a      	cmp	r2, r1
 801af12:	f000 818d 	beq.w	801b230 <ai_platform_api_get_network_report+0x710>
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801af1c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801af20:	f000 8176 	beq.w	801b210 <ai_platform_api_get_network_report+0x6f0>
 801af24:	f7ff fa94 	bl	801a450 <_ai_platform_release_crc>
 801af28:	4a8c      	ldr	r2, [pc, #560]	; (801b15c <ai_platform_api_get_network_report+0x63c>)
 801af2a:	f240 1307 	movw	r3, #263	; 0x107
 801af2e:	6163      	str	r3, [r4, #20]
 801af30:	6813      	ldr	r3, [r2, #0]
 801af32:	f023 0301 	bic.w	r3, r3, #1
 801af36:	6013      	str	r3, [r2, #0]
 801af38:	f7ff fa88 	bl	801a44c <_ai_platform_acquire_crc>
 801af3c:	4b88      	ldr	r3, [pc, #544]	; (801b160 <ai_platform_api_get_network_report+0x640>)
 801af3e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801af48:	185a      	adds	r2, r3, r1
 801af4a:	2a01      	cmp	r2, #1
 801af4c:	f240 8150 	bls.w	801b1f0 <ai_platform_api_get_network_report+0x6d0>
 801af50:	f240 4249 	movw	r2, #1097	; 0x449
 801af54:	4293      	cmp	r3, r2
 801af56:	f000 814b 	beq.w	801b1f0 <ai_platform_api_get_network_report+0x6d0>
 801af5a:	4b82      	ldr	r3, [pc, #520]	; (801b164 <ai_platform_api_get_network_report+0x644>)
 801af5c:	681a      	ldr	r2, [r3, #0]
 801af5e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801af62:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801af66:	f000 8133 	beq.w	801b1d0 <ai_platform_api_get_network_report+0x6b0>
 801af6a:	681a      	ldr	r2, [r3, #0]
 801af6c:	f240 4183 	movw	r1, #1155	; 0x483
 801af70:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801af74:	428a      	cmp	r2, r1
 801af76:	f000 811b 	beq.w	801b1b0 <ai_platform_api_get_network_report+0x690>
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801af80:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801af84:	f000 8104 	beq.w	801b190 <ai_platform_api_get_network_report+0x670>
 801af88:	f7ff fa62 	bl	801a450 <_ai_platform_release_crc>
 801af8c:	4a73      	ldr	r2, [pc, #460]	; (801b15c <ai_platform_api_get_network_report+0x63c>)
 801af8e:	f240 2301 	movw	r3, #513	; 0x201
 801af92:	6263      	str	r3, [r4, #36]	; 0x24
 801af94:	6813      	ldr	r3, [r2, #0]
 801af96:	f023 0301 	bic.w	r3, r3, #1
 801af9a:	6013      	str	r3, [r2, #0]
 801af9c:	f7ff fa56 	bl	801a44c <_ai_platform_acquire_crc>
 801afa0:	4b6f      	ldr	r3, [pc, #444]	; (801b160 <ai_platform_api_get_network_report+0x640>)
 801afa2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801afac:	189a      	adds	r2, r3, r2
 801afae:	2a01      	cmp	r2, #1
 801afb0:	f240 80c3 	bls.w	801b13a <ai_platform_api_get_network_report+0x61a>
 801afb4:	f240 4249 	movw	r2, #1097	; 0x449
 801afb8:	4293      	cmp	r3, r2
 801afba:	f000 80be 	beq.w	801b13a <ai_platform_api_get_network_report+0x61a>
 801afbe:	4b69      	ldr	r3, [pc, #420]	; (801b164 <ai_platform_api_get_network_report+0x644>)
 801afc0:	681a      	ldr	r2, [r3, #0]
 801afc2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801afc6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801afca:	f000 80a6 	beq.w	801b11a <ai_platform_api_get_network_report+0x5fa>
 801afce:	681a      	ldr	r2, [r3, #0]
 801afd0:	f240 4183 	movw	r1, #1155	; 0x483
 801afd4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801afd8:	428a      	cmp	r2, r1
 801afda:	f000 808e 	beq.w	801b0fa <ai_platform_api_get_network_report+0x5da>
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801afe4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801afe8:	d077      	beq.n	801b0da <ai_platform_api_get_network_report+0x5ba>
 801afea:	f7ff fa31 	bl	801a450 <_ai_platform_release_crc>
 801afee:	f240 5301 	movw	r3, #1281	; 0x501
 801aff2:	62a3      	str	r3, [r4, #40]	; 0x28
 801aff4:	6c68      	ldr	r0, [r5, #68]	; 0x44
 801aff6:	f005 fc6f 	bl	80208d8 <ai_platform_version_get>
 801affa:	4b5c      	ldr	r3, [pc, #368]	; (801b16c <ai_platform_api_get_network_report+0x64c>)
 801affc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801affe:	6220      	str	r0, [r4, #32]
 801b000:	429a      	cmp	r2, r3
 801b002:	d051      	beq.n	801b0a8 <ai_platform_api_get_network_report+0x588>
 801b004:	495a      	ldr	r1, [pc, #360]	; (801b170 <ai_platform_api_get_network_report+0x650>)
 801b006:	2200      	movs	r2, #0
 801b008:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 801b00c:	4b59      	ldr	r3, [pc, #356]	; (801b174 <ai_platform_api_get_network_report+0x654>)
 801b00e:	63e1      	str	r1, [r4, #60]	; 0x3c
 801b010:	f240 4101 	movw	r1, #1025	; 0x401
 801b014:	f10d 0e10 	add.w	lr, sp, #16
 801b018:	46b4      	mov	ip, r6
 801b01a:	6521      	str	r1, [r4, #80]	; 0x50
 801b01c:	f104 0958 	add.w	r9, r4, #88	; 0x58
 801b020:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 801b024:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 801b028:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 801b02c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b02e:	464c      	mov	r4, r9
 801b030:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801b034:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b03a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801b03e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b042:	4638      	mov	r0, r7
 801b044:	f7ff f9f8 	bl	801a438 <ai_buffer_array_sane>
 801b048:	bb08      	cbnz	r0, 801b08e <ai_platform_api_get_network_report+0x56e>
 801b04a:	4640      	mov	r0, r8
 801b04c:	f7ff f9f4 	bl	801a438 <ai_buffer_array_sane>
 801b050:	b978      	cbnz	r0, 801b072 <ai_platform_api_get_network_report+0x552>
 801b052:	2601      	movs	r6, #1
 801b054:	e64f      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b056:	f105 0010 	add.w	r0, r5, #16
 801b05a:	2213      	movs	r2, #19
 801b05c:	2111      	movs	r1, #17
 801b05e:	f001 faf7 	bl	801c650 <core_set_error>
 801b062:	e648      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b064:	f105 0010 	add.w	r0, r5, #16
 801b068:	2212      	movs	r2, #18
 801b06a:	2111      	movs	r1, #17
 801b06c:	f001 faf0 	bl	801c650 <core_set_error>
 801b070:	e641      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b072:	4640      	mov	r0, r8
 801b074:	f7ff f9e0 	bl	801a438 <ai_buffer_array_sane>
 801b078:	b318      	cbz	r0, 801b0c2 <ai_platform_api_get_network_report+0x5a2>
 801b07a:	6a2f      	ldr	r7, [r5, #32]
 801b07c:	4634      	mov	r4, r6
 801b07e:	2601      	movs	r6, #1
 801b080:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b084:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b08c:	e633      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b08e:	4638      	mov	r0, r7
 801b090:	f7ff f9d2 	bl	801a438 <ai_buffer_array_sane>
 801b094:	b1f0      	cbz	r0, 801b0d4 <ai_platform_api_get_network_report+0x5b4>
 801b096:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801b098:	464c      	mov	r4, r9
 801b09a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b09c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b09e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b0a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b0a6:	e7d0      	b.n	801b04a <ai_platform_api_get_network_report+0x52a>
 801b0a8:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b0ac:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801b0b0:	3440      	adds	r4, #64	; 0x40
 801b0b2:	2601      	movs	r6, #1
 801b0b4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b0b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b0bc:	e884 0003 	stmia.w	r4, {r0, r1}
 801b0c0:	e619      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b0c2:	4605      	mov	r5, r0
 801b0c4:	4634      	mov	r4, r6
 801b0c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b0ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b0d2:	deff      	udf	#255	; 0xff
 801b0d4:	4605      	mov	r5, r0
 801b0d6:	464c      	mov	r4, r9
 801b0d8:	e7f5      	b.n	801b0c6 <ai_platform_api_get_network_report+0x5a6>
 801b0da:	4b27      	ldr	r3, [pc, #156]	; (801b178 <ai_platform_api_get_network_report+0x658>)
 801b0dc:	2201      	movs	r2, #1
 801b0de:	4619      	mov	r1, r3
 801b0e0:	601a      	str	r2, [r3, #0]
 801b0e2:	680b      	ldr	r3, [r1, #0]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d1fc      	bne.n	801b0e2 <ai_platform_api_get_network_report+0x5c2>
 801b0e8:	4b24      	ldr	r3, [pc, #144]	; (801b17c <ai_platform_api_get_network_report+0x65c>)
 801b0ea:	4925      	ldr	r1, [pc, #148]	; (801b180 <ai_platform_api_get_network_report+0x660>)
 801b0ec:	4a25      	ldr	r2, [pc, #148]	; (801b184 <ai_platform_api_get_network_report+0x664>)
 801b0ee:	6019      	str	r1, [r3, #0]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	4293      	cmp	r3, r2
 801b0f4:	f43f af79 	beq.w	801afea <ai_platform_api_get_network_report+0x4ca>
 801b0f8:	e7fe      	b.n	801b0f8 <ai_platform_api_get_network_report+0x5d8>
 801b0fa:	4b23      	ldr	r3, [pc, #140]	; (801b188 <ai_platform_api_get_network_report+0x668>)
 801b0fc:	2201      	movs	r2, #1
 801b0fe:	4619      	mov	r1, r3
 801b100:	601a      	str	r2, [r3, #0]
 801b102:	680b      	ldr	r3, [r1, #0]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d1fc      	bne.n	801b102 <ai_platform_api_get_network_report+0x5e2>
 801b108:	4b20      	ldr	r3, [pc, #128]	; (801b18c <ai_platform_api_get_network_report+0x66c>)
 801b10a:	491d      	ldr	r1, [pc, #116]	; (801b180 <ai_platform_api_get_network_report+0x660>)
 801b10c:	4a1d      	ldr	r2, [pc, #116]	; (801b184 <ai_platform_api_get_network_report+0x664>)
 801b10e:	6019      	str	r1, [r3, #0]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	4293      	cmp	r3, r2
 801b114:	f43f af69 	beq.w	801afea <ai_platform_api_get_network_report+0x4ca>
 801b118:	e7fe      	b.n	801b118 <ai_platform_api_get_network_report+0x5f8>
 801b11a:	4b1b      	ldr	r3, [pc, #108]	; (801b188 <ai_platform_api_get_network_report+0x668>)
 801b11c:	2201      	movs	r2, #1
 801b11e:	4619      	mov	r1, r3
 801b120:	601a      	str	r2, [r3, #0]
 801b122:	680b      	ldr	r3, [r1, #0]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d1fc      	bne.n	801b122 <ai_platform_api_get_network_report+0x602>
 801b128:	4b18      	ldr	r3, [pc, #96]	; (801b18c <ai_platform_api_get_network_report+0x66c>)
 801b12a:	4915      	ldr	r1, [pc, #84]	; (801b180 <ai_platform_api_get_network_report+0x660>)
 801b12c:	4a15      	ldr	r2, [pc, #84]	; (801b184 <ai_platform_api_get_network_report+0x664>)
 801b12e:	6019      	str	r1, [r3, #0]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	4293      	cmp	r3, r2
 801b134:	f43f af59 	beq.w	801afea <ai_platform_api_get_network_report+0x4ca>
 801b138:	e7fe      	b.n	801b138 <ai_platform_api_get_network_report+0x618>
 801b13a:	4b0f      	ldr	r3, [pc, #60]	; (801b178 <ai_platform_api_get_network_report+0x658>)
 801b13c:	2201      	movs	r2, #1
 801b13e:	4619      	mov	r1, r3
 801b140:	601a      	str	r2, [r3, #0]
 801b142:	680b      	ldr	r3, [r1, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d1fc      	bne.n	801b142 <ai_platform_api_get_network_report+0x622>
 801b148:	4b0c      	ldr	r3, [pc, #48]	; (801b17c <ai_platform_api_get_network_report+0x65c>)
 801b14a:	490d      	ldr	r1, [pc, #52]	; (801b180 <ai_platform_api_get_network_report+0x660>)
 801b14c:	4a0d      	ldr	r2, [pc, #52]	; (801b184 <ai_platform_api_get_network_report+0x664>)
 801b14e:	6019      	str	r1, [r3, #0]
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	4293      	cmp	r3, r2
 801b154:	f43f af49 	beq.w	801afea <ai_platform_api_get_network_report+0x4ca>
 801b158:	e7fe      	b.n	801b158 <ai_platform_api_get_network_report+0x638>
 801b15a:	bf00      	nop
 801b15c:	e0002000 	.word	0xe0002000
 801b160:	e0042000 	.word	0xe0042000
 801b164:	5c001000 	.word	0x5c001000
 801b168:	080246c0 	.word	0x080246c0
 801b16c:	a1facade 	.word	0xa1facade
 801b170:	00040440 	.word	0x00040440
 801b174:	08023ffc 	.word	0x08023ffc
 801b178:	40023008 	.word	0x40023008
 801b17c:	40023000 	.word	0x40023000
 801b180:	f407a5c2 	.word	0xf407a5c2
 801b184:	b5e8b5cd 	.word	0xb5e8b5cd
 801b188:	58024c08 	.word	0x58024c08
 801b18c:	58024c00 	.word	0x58024c00
 801b190:	4b74      	ldr	r3, [pc, #464]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b192:	2201      	movs	r2, #1
 801b194:	4619      	mov	r1, r3
 801b196:	601a      	str	r2, [r3, #0]
 801b198:	680b      	ldr	r3, [r1, #0]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d1fc      	bne.n	801b198 <ai_platform_api_get_network_report+0x678>
 801b19e:	4b72      	ldr	r3, [pc, #456]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b1a0:	4972      	ldr	r1, [pc, #456]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b1a2:	4a73      	ldr	r2, [pc, #460]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b1a4:	6019      	str	r1, [r3, #0]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	4293      	cmp	r3, r2
 801b1aa:	f43f aeed 	beq.w	801af88 <ai_platform_api_get_network_report+0x468>
 801b1ae:	e7fe      	b.n	801b1ae <ai_platform_api_get_network_report+0x68e>
 801b1b0:	4b70      	ldr	r3, [pc, #448]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b1b2:	2201      	movs	r2, #1
 801b1b4:	4619      	mov	r1, r3
 801b1b6:	601a      	str	r2, [r3, #0]
 801b1b8:	680b      	ldr	r3, [r1, #0]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d1fc      	bne.n	801b1b8 <ai_platform_api_get_network_report+0x698>
 801b1be:	4b6e      	ldr	r3, [pc, #440]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b1c0:	496a      	ldr	r1, [pc, #424]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b1c2:	4a6b      	ldr	r2, [pc, #428]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b1c4:	6019      	str	r1, [r3, #0]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	4293      	cmp	r3, r2
 801b1ca:	f43f aedd 	beq.w	801af88 <ai_platform_api_get_network_report+0x468>
 801b1ce:	e7fe      	b.n	801b1ce <ai_platform_api_get_network_report+0x6ae>
 801b1d0:	4b68      	ldr	r3, [pc, #416]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b1d2:	2201      	movs	r2, #1
 801b1d4:	4619      	mov	r1, r3
 801b1d6:	601a      	str	r2, [r3, #0]
 801b1d8:	680b      	ldr	r3, [r1, #0]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d1fc      	bne.n	801b1d8 <ai_platform_api_get_network_report+0x6b8>
 801b1de:	4b66      	ldr	r3, [pc, #408]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b1e0:	4962      	ldr	r1, [pc, #392]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b1e2:	4a63      	ldr	r2, [pc, #396]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b1e4:	6019      	str	r1, [r3, #0]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	4293      	cmp	r3, r2
 801b1ea:	f43f aecd 	beq.w	801af88 <ai_platform_api_get_network_report+0x468>
 801b1ee:	e7fe      	b.n	801b1ee <ai_platform_api_get_network_report+0x6ce>
 801b1f0:	4b5c      	ldr	r3, [pc, #368]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b1f2:	2201      	movs	r2, #1
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	601a      	str	r2, [r3, #0]
 801b1f8:	680b      	ldr	r3, [r1, #0]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d1fc      	bne.n	801b1f8 <ai_platform_api_get_network_report+0x6d8>
 801b1fe:	4b5a      	ldr	r3, [pc, #360]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b200:	495a      	ldr	r1, [pc, #360]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b202:	4a5b      	ldr	r2, [pc, #364]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b204:	6019      	str	r1, [r3, #0]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	4293      	cmp	r3, r2
 801b20a:	f43f aebd 	beq.w	801af88 <ai_platform_api_get_network_report+0x468>
 801b20e:	e7fe      	b.n	801b20e <ai_platform_api_get_network_report+0x6ee>
 801b210:	4b54      	ldr	r3, [pc, #336]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b212:	2201      	movs	r2, #1
 801b214:	4619      	mov	r1, r3
 801b216:	601a      	str	r2, [r3, #0]
 801b218:	680b      	ldr	r3, [r1, #0]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d1fc      	bne.n	801b218 <ai_platform_api_get_network_report+0x6f8>
 801b21e:	4b52      	ldr	r3, [pc, #328]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b220:	4952      	ldr	r1, [pc, #328]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b222:	4a53      	ldr	r2, [pc, #332]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b224:	6019      	str	r1, [r3, #0]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	4293      	cmp	r3, r2
 801b22a:	f43f ae7b 	beq.w	801af24 <ai_platform_api_get_network_report+0x404>
 801b22e:	e7fe      	b.n	801b22e <ai_platform_api_get_network_report+0x70e>
 801b230:	4b50      	ldr	r3, [pc, #320]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b232:	2201      	movs	r2, #1
 801b234:	4619      	mov	r1, r3
 801b236:	601a      	str	r2, [r3, #0]
 801b238:	680b      	ldr	r3, [r1, #0]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d1fc      	bne.n	801b238 <ai_platform_api_get_network_report+0x718>
 801b23e:	4b4e      	ldr	r3, [pc, #312]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b240:	494a      	ldr	r1, [pc, #296]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b242:	4a4b      	ldr	r2, [pc, #300]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b244:	6019      	str	r1, [r3, #0]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	4293      	cmp	r3, r2
 801b24a:	f43f ae6b 	beq.w	801af24 <ai_platform_api_get_network_report+0x404>
 801b24e:	e7fe      	b.n	801b24e <ai_platform_api_get_network_report+0x72e>
 801b250:	4b48      	ldr	r3, [pc, #288]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b252:	2201      	movs	r2, #1
 801b254:	4619      	mov	r1, r3
 801b256:	601a      	str	r2, [r3, #0]
 801b258:	680b      	ldr	r3, [r1, #0]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d1fc      	bne.n	801b258 <ai_platform_api_get_network_report+0x738>
 801b25e:	4b46      	ldr	r3, [pc, #280]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b260:	4942      	ldr	r1, [pc, #264]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b262:	4a43      	ldr	r2, [pc, #268]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b264:	6019      	str	r1, [r3, #0]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	4293      	cmp	r3, r2
 801b26a:	f43f ae5b 	beq.w	801af24 <ai_platform_api_get_network_report+0x404>
 801b26e:	e7fe      	b.n	801b26e <ai_platform_api_get_network_report+0x74e>
 801b270:	4b3c      	ldr	r3, [pc, #240]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b272:	2201      	movs	r2, #1
 801b274:	4619      	mov	r1, r3
 801b276:	601a      	str	r2, [r3, #0]
 801b278:	680b      	ldr	r3, [r1, #0]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d1fc      	bne.n	801b278 <ai_platform_api_get_network_report+0x758>
 801b27e:	4b3a      	ldr	r3, [pc, #232]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b280:	493a      	ldr	r1, [pc, #232]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b282:	4a3b      	ldr	r2, [pc, #236]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b284:	6019      	str	r1, [r3, #0]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	4293      	cmp	r3, r2
 801b28a:	f43f ae4b 	beq.w	801af24 <ai_platform_api_get_network_report+0x404>
 801b28e:	e7fe      	b.n	801b28e <ai_platform_api_get_network_report+0x76e>
 801b290:	4b34      	ldr	r3, [pc, #208]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b292:	2201      	movs	r2, #1
 801b294:	4619      	mov	r1, r3
 801b296:	601a      	str	r2, [r3, #0]
 801b298:	680b      	ldr	r3, [r1, #0]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d1fc      	bne.n	801b298 <ai_platform_api_get_network_report+0x778>
 801b29e:	4b32      	ldr	r3, [pc, #200]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b2a0:	4932      	ldr	r1, [pc, #200]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b2a2:	4a33      	ldr	r2, [pc, #204]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b2a4:	6019      	str	r1, [r3, #0]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	4293      	cmp	r3, r2
 801b2aa:	f43f ae0a 	beq.w	801aec2 <ai_platform_api_get_network_report+0x3a2>
 801b2ae:	e7fe      	b.n	801b2ae <ai_platform_api_get_network_report+0x78e>
 801b2b0:	4b30      	ldr	r3, [pc, #192]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b2b2:	2201      	movs	r2, #1
 801b2b4:	4619      	mov	r1, r3
 801b2b6:	601a      	str	r2, [r3, #0]
 801b2b8:	680b      	ldr	r3, [r1, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d1fc      	bne.n	801b2b8 <ai_platform_api_get_network_report+0x798>
 801b2be:	4b2e      	ldr	r3, [pc, #184]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b2c0:	492a      	ldr	r1, [pc, #168]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b2c2:	4a2b      	ldr	r2, [pc, #172]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b2c4:	6019      	str	r1, [r3, #0]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	f43f adfa 	beq.w	801aec2 <ai_platform_api_get_network_report+0x3a2>
 801b2ce:	e7fe      	b.n	801b2ce <ai_platform_api_get_network_report+0x7ae>
 801b2d0:	4b28      	ldr	r3, [pc, #160]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b2d2:	2201      	movs	r2, #1
 801b2d4:	4619      	mov	r1, r3
 801b2d6:	601a      	str	r2, [r3, #0]
 801b2d8:	680b      	ldr	r3, [r1, #0]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d1fc      	bne.n	801b2d8 <ai_platform_api_get_network_report+0x7b8>
 801b2de:	4b26      	ldr	r3, [pc, #152]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b2e0:	4922      	ldr	r1, [pc, #136]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b2e2:	4a23      	ldr	r2, [pc, #140]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b2e4:	6019      	str	r1, [r3, #0]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	4293      	cmp	r3, r2
 801b2ea:	f43f adea 	beq.w	801aec2 <ai_platform_api_get_network_report+0x3a2>
 801b2ee:	e7fe      	b.n	801b2ee <ai_platform_api_get_network_report+0x7ce>
 801b2f0:	4b1c      	ldr	r3, [pc, #112]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b2f2:	2201      	movs	r2, #1
 801b2f4:	4619      	mov	r1, r3
 801b2f6:	601a      	str	r2, [r3, #0]
 801b2f8:	680b      	ldr	r3, [r1, #0]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d1fc      	bne.n	801b2f8 <ai_platform_api_get_network_report+0x7d8>
 801b2fe:	4b1a      	ldr	r3, [pc, #104]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b300:	491a      	ldr	r1, [pc, #104]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b302:	4a1b      	ldr	r2, [pc, #108]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b304:	6019      	str	r1, [r3, #0]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	4293      	cmp	r3, r2
 801b30a:	f43f adda 	beq.w	801aec2 <ai_platform_api_get_network_report+0x3a2>
 801b30e:	e7fe      	b.n	801b30e <ai_platform_api_get_network_report+0x7ee>
 801b310:	f105 0010 	add.w	r0, r5, #16
 801b314:	2218      	movs	r2, #24
 801b316:	2111      	movs	r1, #17
 801b318:	2600      	movs	r6, #0
 801b31a:	f001 f999 	bl	801c650 <core_set_error>
 801b31e:	e4ea      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b320:	2600      	movs	r6, #0
 801b322:	e4e8      	b.n	801acf6 <ai_platform_api_get_network_report+0x1d6>
 801b324:	4b0f      	ldr	r3, [pc, #60]	; (801b364 <ai_platform_api_get_network_report+0x844>)
 801b326:	2201      	movs	r2, #1
 801b328:	4619      	mov	r1, r3
 801b32a:	601a      	str	r2, [r3, #0]
 801b32c:	680b      	ldr	r3, [r1, #0]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d1fc      	bne.n	801b32c <ai_platform_api_get_network_report+0x80c>
 801b332:	4b0d      	ldr	r3, [pc, #52]	; (801b368 <ai_platform_api_get_network_report+0x848>)
 801b334:	490d      	ldr	r1, [pc, #52]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b336:	4a0e      	ldr	r2, [pc, #56]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b338:	6019      	str	r1, [r3, #0]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	4293      	cmp	r3, r2
 801b33e:	f43f ac28 	beq.w	801ab92 <ai_platform_api_get_network_report+0x72>
 801b342:	e7fe      	b.n	801b342 <ai_platform_api_get_network_report+0x822>
 801b344:	4b0b      	ldr	r3, [pc, #44]	; (801b374 <ai_platform_api_get_network_report+0x854>)
 801b346:	2201      	movs	r2, #1
 801b348:	4619      	mov	r1, r3
 801b34a:	601a      	str	r2, [r3, #0]
 801b34c:	680b      	ldr	r3, [r1, #0]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d1fc      	bne.n	801b34c <ai_platform_api_get_network_report+0x82c>
 801b352:	4b09      	ldr	r3, [pc, #36]	; (801b378 <ai_platform_api_get_network_report+0x858>)
 801b354:	4905      	ldr	r1, [pc, #20]	; (801b36c <ai_platform_api_get_network_report+0x84c>)
 801b356:	4a06      	ldr	r2, [pc, #24]	; (801b370 <ai_platform_api_get_network_report+0x850>)
 801b358:	6019      	str	r1, [r3, #0]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	4293      	cmp	r3, r2
 801b35e:	f43f ac18 	beq.w	801ab92 <ai_platform_api_get_network_report+0x72>
 801b362:	e7fe      	b.n	801b362 <ai_platform_api_get_network_report+0x842>
 801b364:	40023008 	.word	0x40023008
 801b368:	40023000 	.word	0x40023000
 801b36c:	f407a5c2 	.word	0xf407a5c2
 801b370:	b5e8b5cd 	.word	0xb5e8b5cd
 801b374:	58024c08 	.word	0x58024c08
 801b378:	58024c00 	.word	0x58024c00

0801b37c <ai_platform_network_create>:
 801b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b380:	b082      	sub	sp, #8
 801b382:	4606      	mov	r6, r0
 801b384:	4615      	mov	r5, r2
 801b386:	461f      	mov	r7, r3
 801b388:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 801b38c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801b390:	f7ff f85c 	bl	801a44c <_ai_platform_acquire_crc>
 801b394:	b328      	cbz	r0, 801b3e2 <ai_platform_network_create+0x66>
 801b396:	4baa      	ldr	r3, [pc, #680]	; (801b640 <ai_platform_network_create+0x2c4>)
 801b398:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 801b39c:	4602      	mov	r2, r0
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b3a4:	1919      	adds	r1, r3, r4
 801b3a6:	2901      	cmp	r1, #1
 801b3a8:	d921      	bls.n	801b3ee <ai_platform_network_create+0x72>
 801b3aa:	f240 4149 	movw	r1, #1097	; 0x449
 801b3ae:	428b      	cmp	r3, r1
 801b3b0:	d01d      	beq.n	801b3ee <ai_platform_network_create+0x72>
 801b3b2:	4ba4      	ldr	r3, [pc, #656]	; (801b644 <ai_platform_network_create+0x2c8>)
 801b3b4:	6819      	ldr	r1, [r3, #0]
 801b3b6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801b3ba:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801b3be:	d01e      	beq.n	801b3fe <ai_platform_network_create+0x82>
 801b3c0:	6819      	ldr	r1, [r3, #0]
 801b3c2:	f240 4483 	movw	r4, #1155	; 0x483
 801b3c6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801b3ca:	42a1      	cmp	r1, r4
 801b3cc:	f000 8085 	beq.w	801b4da <ai_platform_network_create+0x15e>
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b3d6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b3da:	f000 8157 	beq.w	801b68c <ai_platform_network_create+0x310>
 801b3de:	f7ff f837 	bl	801a450 <_ai_platform_release_crc>
 801b3e2:	f244 1333 	movw	r3, #16691	; 0x4133
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	b002      	add	sp, #8
 801b3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3ee:	4b96      	ldr	r3, [pc, #600]	; (801b648 <ai_platform_network_create+0x2cc>)
 801b3f0:	2118      	movs	r1, #24
 801b3f2:	6019      	str	r1, [r3, #0]
 801b3f4:	6819      	ldr	r1, [r3, #0]
 801b3f6:	2918      	cmp	r1, #24
 801b3f8:	d059      	beq.n	801b4ae <ai_platform_network_create+0x132>
 801b3fa:	4610      	mov	r0, r2
 801b3fc:	e7ef      	b.n	801b3de <ai_platform_network_create+0x62>
 801b3fe:	4b93      	ldr	r3, [pc, #588]	; (801b64c <ai_platform_network_create+0x2d0>)
 801b400:	2118      	movs	r1, #24
 801b402:	6019      	str	r1, [r3, #0]
 801b404:	6819      	ldr	r1, [r3, #0]
 801b406:	2918      	cmp	r1, #24
 801b408:	d1e9      	bne.n	801b3de <ai_platform_network_create+0x62>
 801b40a:	2101      	movs	r1, #1
 801b40c:	4618      	mov	r0, r3
 801b40e:	6019      	str	r1, [r3, #0]
 801b410:	6803      	ldr	r3, [r0, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d1fc      	bne.n	801b410 <ai_platform_network_create+0x94>
 801b416:	4610      	mov	r0, r2
 801b418:	f7ff f81a 	bl	801a450 <_ai_platform_release_crc>
 801b41c:	4a8c      	ldr	r2, [pc, #560]	; (801b650 <ai_platform_network_create+0x2d4>)
 801b41e:	6813      	ldr	r3, [r2, #0]
 801b420:	f023 0301 	bic.w	r3, r3, #1
 801b424:	6013      	str	r3, [r2, #0]
 801b426:	f7ff f811 	bl	801a44c <_ai_platform_acquire_crc>
 801b42a:	4b85      	ldr	r3, [pc, #532]	; (801b640 <ai_platform_network_create+0x2c4>)
 801b42c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b436:	185a      	adds	r2, r3, r1
 801b438:	2a01      	cmp	r2, #1
 801b43a:	d93f      	bls.n	801b4bc <ai_platform_network_create+0x140>
 801b43c:	f240 4249 	movw	r2, #1097	; 0x449
 801b440:	4293      	cmp	r3, r2
 801b442:	d03b      	beq.n	801b4bc <ai_platform_network_create+0x140>
 801b444:	4b7f      	ldr	r3, [pc, #508]	; (801b644 <ai_platform_network_create+0x2c8>)
 801b446:	681a      	ldr	r2, [r3, #0]
 801b448:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b44c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b450:	f000 810c 	beq.w	801b66c <ai_platform_network_create+0x2f0>
 801b454:	681a      	ldr	r2, [r3, #0]
 801b456:	f240 4183 	movw	r1, #1155	; 0x483
 801b45a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b45e:	428a      	cmp	r2, r1
 801b460:	f000 80de 	beq.w	801b620 <ai_platform_network_create+0x2a4>
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b46a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b46e:	d07e      	beq.n	801b56e <ai_platform_network_create+0x1f2>
 801b470:	f7fe ffee 	bl	801a450 <_ai_platform_release_crc>
 801b474:	2e00      	cmp	r6, #0
 801b476:	d077      	beq.n	801b568 <ai_platform_network_create+0x1ec>
 801b478:	4b76      	ldr	r3, [pc, #472]	; (801b654 <ai_platform_network_create+0x2d8>)
 801b47a:	602b      	str	r3, [r5, #0]
 801b47c:	6035      	str	r5, [r6, #0]
 801b47e:	f001 f8e5 	bl	801c64c <core_init>
 801b482:	2800      	cmp	r0, #0
 801b484:	d137      	bne.n	801b4f6 <ai_platform_network_create+0x17a>
 801b486:	2430      	movs	r4, #48	; 0x30
 801b488:	2300      	movs	r3, #0
 801b48a:	f04f 0a10 	mov.w	sl, #16
 801b48e:	6033      	str	r3, [r6, #0]
 801b490:	464a      	mov	r2, r9
 801b492:	4641      	mov	r1, r8
 801b494:	4638      	mov	r0, r7
 801b496:	f005 fa19 	bl	80208cc <ai_version_get>
 801b49a:	2300      	movs	r3, #0
 801b49c:	6468      	str	r0, [r5, #68]	; 0x44
 801b49e:	f364 0307 	bfi	r3, r4, #0, #8
 801b4a2:	f36a 231f 	bfi	r3, sl, #8, #24
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	b002      	add	sp, #8
 801b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4ae:	2101      	movs	r1, #1
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	6019      	str	r1, [r3, #0]
 801b4b4:	6803      	ldr	r3, [r0, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d1fc      	bne.n	801b4b4 <ai_platform_network_create+0x138>
 801b4ba:	e7ac      	b.n	801b416 <ai_platform_network_create+0x9a>
 801b4bc:	4b62      	ldr	r3, [pc, #392]	; (801b648 <ai_platform_network_create+0x2cc>)
 801b4be:	2201      	movs	r2, #1
 801b4c0:	4619      	mov	r1, r3
 801b4c2:	601a      	str	r2, [r3, #0]
 801b4c4:	680b      	ldr	r3, [r1, #0]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d1fc      	bne.n	801b4c4 <ai_platform_network_create+0x148>
 801b4ca:	4b63      	ldr	r3, [pc, #396]	; (801b658 <ai_platform_network_create+0x2dc>)
 801b4cc:	4963      	ldr	r1, [pc, #396]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b4ce:	4a64      	ldr	r2, [pc, #400]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b4d0:	6019      	str	r1, [r3, #0]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	4293      	cmp	r3, r2
 801b4d6:	d0cb      	beq.n	801b470 <ai_platform_network_create+0xf4>
 801b4d8:	e7fe      	b.n	801b4d8 <ai_platform_network_create+0x15c>
 801b4da:	4b5c      	ldr	r3, [pc, #368]	; (801b64c <ai_platform_network_create+0x2d0>)
 801b4dc:	2118      	movs	r1, #24
 801b4de:	6019      	str	r1, [r3, #0]
 801b4e0:	6819      	ldr	r1, [r3, #0]
 801b4e2:	2918      	cmp	r1, #24
 801b4e4:	f47f af7b 	bne.w	801b3de <ai_platform_network_create+0x62>
 801b4e8:	2101      	movs	r1, #1
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	6019      	str	r1, [r3, #0]
 801b4ee:	6803      	ldr	r3, [r0, #0]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d1fc      	bne.n	801b4ee <ai_platform_network_create+0x172>
 801b4f4:	e78f      	b.n	801b416 <ai_platform_network_create+0x9a>
 801b4f6:	4a56      	ldr	r2, [pc, #344]	; (801b650 <ai_platform_network_create+0x2d4>)
 801b4f8:	6813      	ldr	r3, [r2, #0]
 801b4fa:	f023 0301 	bic.w	r3, r3, #1
 801b4fe:	6013      	str	r3, [r2, #0]
 801b500:	f7fe ffa4 	bl	801a44c <_ai_platform_acquire_crc>
 801b504:	4b4e      	ldr	r3, [pc, #312]	; (801b640 <ai_platform_network_create+0x2c4>)
 801b506:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b510:	189a      	adds	r2, r3, r2
 801b512:	2a01      	cmp	r2, #1
 801b514:	d975      	bls.n	801b602 <ai_platform_network_create+0x286>
 801b516:	f240 4249 	movw	r2, #1097	; 0x449
 801b51a:	4293      	cmp	r3, r2
 801b51c:	d071      	beq.n	801b602 <ai_platform_network_create+0x286>
 801b51e:	4b49      	ldr	r3, [pc, #292]	; (801b644 <ai_platform_network_create+0x2c8>)
 801b520:	681a      	ldr	r2, [r3, #0]
 801b522:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b526:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b52a:	d05b      	beq.n	801b5e4 <ai_platform_network_create+0x268>
 801b52c:	681a      	ldr	r2, [r3, #0]
 801b52e:	f240 4183 	movw	r1, #1155	; 0x483
 801b532:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b536:	428a      	cmp	r2, r1
 801b538:	d045      	beq.n	801b5c6 <ai_platform_network_create+0x24a>
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b540:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b544:	d030      	beq.n	801b5a8 <ai_platform_network_create+0x22c>
 801b546:	f7fe ff83 	bl	801a450 <_ai_platform_release_crc>
 801b54a:	2200      	movs	r2, #0
 801b54c:	4641      	mov	r1, r8
 801b54e:	4638      	mov	r0, r7
 801b550:	f005 f9bc 	bl	80208cc <ai_version_get>
 801b554:	4604      	mov	r4, r0
 801b556:	2200      	movs	r2, #0
 801b558:	2105      	movs	r1, #5
 801b55a:	2001      	movs	r0, #1
 801b55c:	f005 f9b6 	bl	80208cc <ai_version_get>
 801b560:	4284      	cmp	r4, r0
 801b562:	d014      	beq.n	801b58e <ai_platform_network_create+0x212>
 801b564:	2401      	movs	r4, #1
 801b566:	e78f      	b.n	801b488 <ai_platform_network_create+0x10c>
 801b568:	f241 0310 	movw	r3, #4112	; 0x1010
 801b56c:	e73b      	b.n	801b3e6 <ai_platform_network_create+0x6a>
 801b56e:	4b36      	ldr	r3, [pc, #216]	; (801b648 <ai_platform_network_create+0x2cc>)
 801b570:	2201      	movs	r2, #1
 801b572:	4619      	mov	r1, r3
 801b574:	601a      	str	r2, [r3, #0]
 801b576:	680b      	ldr	r3, [r1, #0]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d1fc      	bne.n	801b576 <ai_platform_network_create+0x1fa>
 801b57c:	4b36      	ldr	r3, [pc, #216]	; (801b658 <ai_platform_network_create+0x2dc>)
 801b57e:	4937      	ldr	r1, [pc, #220]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b580:	4a37      	ldr	r2, [pc, #220]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b582:	6019      	str	r1, [r3, #0]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	4293      	cmp	r3, r2
 801b588:	f43f af72 	beq.w	801b470 <ai_platform_network_create+0xf4>
 801b58c:	e7fe      	b.n	801b58c <ai_platform_network_create+0x210>
 801b58e:	4b35      	ldr	r3, [pc, #212]	; (801b664 <ai_platform_network_create+0x2e8>)
 801b590:	a802      	add	r0, sp, #8
 801b592:	f840 3d04 	str.w	r3, [r0, #-4]!
 801b596:	f001 fef3 	bl	801d380 <ai_check_custom_types>
 801b59a:	b118      	cbz	r0, 801b5a4 <ai_platform_network_create+0x228>
 801b59c:	f04f 0a00 	mov.w	sl, #0
 801b5a0:	4654      	mov	r4, sl
 801b5a2:	e775      	b.n	801b490 <ai_platform_network_create+0x114>
 801b5a4:	2402      	movs	r4, #2
 801b5a6:	e76f      	b.n	801b488 <ai_platform_network_create+0x10c>
 801b5a8:	4b27      	ldr	r3, [pc, #156]	; (801b648 <ai_platform_network_create+0x2cc>)
 801b5aa:	2201      	movs	r2, #1
 801b5ac:	4619      	mov	r1, r3
 801b5ae:	601a      	str	r2, [r3, #0]
 801b5b0:	680b      	ldr	r3, [r1, #0]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d1fc      	bne.n	801b5b0 <ai_platform_network_create+0x234>
 801b5b6:	4b28      	ldr	r3, [pc, #160]	; (801b658 <ai_platform_network_create+0x2dc>)
 801b5b8:	4928      	ldr	r1, [pc, #160]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b5ba:	4a29      	ldr	r2, [pc, #164]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b5bc:	6019      	str	r1, [r3, #0]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	4293      	cmp	r3, r2
 801b5c2:	d0c0      	beq.n	801b546 <ai_platform_network_create+0x1ca>
 801b5c4:	e7fe      	b.n	801b5c4 <ai_platform_network_create+0x248>
 801b5c6:	4b21      	ldr	r3, [pc, #132]	; (801b64c <ai_platform_network_create+0x2d0>)
 801b5c8:	2201      	movs	r2, #1
 801b5ca:	4619      	mov	r1, r3
 801b5cc:	601a      	str	r2, [r3, #0]
 801b5ce:	680b      	ldr	r3, [r1, #0]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d1fc      	bne.n	801b5ce <ai_platform_network_create+0x252>
 801b5d4:	4b24      	ldr	r3, [pc, #144]	; (801b668 <ai_platform_network_create+0x2ec>)
 801b5d6:	4921      	ldr	r1, [pc, #132]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b5d8:	4a21      	ldr	r2, [pc, #132]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b5da:	6019      	str	r1, [r3, #0]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	4293      	cmp	r3, r2
 801b5e0:	d0b1      	beq.n	801b546 <ai_platform_network_create+0x1ca>
 801b5e2:	e7fe      	b.n	801b5e2 <ai_platform_network_create+0x266>
 801b5e4:	4b19      	ldr	r3, [pc, #100]	; (801b64c <ai_platform_network_create+0x2d0>)
 801b5e6:	2201      	movs	r2, #1
 801b5e8:	4619      	mov	r1, r3
 801b5ea:	601a      	str	r2, [r3, #0]
 801b5ec:	680b      	ldr	r3, [r1, #0]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d1fc      	bne.n	801b5ec <ai_platform_network_create+0x270>
 801b5f2:	4b1d      	ldr	r3, [pc, #116]	; (801b668 <ai_platform_network_create+0x2ec>)
 801b5f4:	4919      	ldr	r1, [pc, #100]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b5f6:	4a1a      	ldr	r2, [pc, #104]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b5f8:	6019      	str	r1, [r3, #0]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	4293      	cmp	r3, r2
 801b5fe:	d0a2      	beq.n	801b546 <ai_platform_network_create+0x1ca>
 801b600:	e7fe      	b.n	801b600 <ai_platform_network_create+0x284>
 801b602:	4b11      	ldr	r3, [pc, #68]	; (801b648 <ai_platform_network_create+0x2cc>)
 801b604:	2201      	movs	r2, #1
 801b606:	4619      	mov	r1, r3
 801b608:	601a      	str	r2, [r3, #0]
 801b60a:	680b      	ldr	r3, [r1, #0]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d1fc      	bne.n	801b60a <ai_platform_network_create+0x28e>
 801b610:	4b11      	ldr	r3, [pc, #68]	; (801b658 <ai_platform_network_create+0x2dc>)
 801b612:	4912      	ldr	r1, [pc, #72]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b614:	4a12      	ldr	r2, [pc, #72]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b616:	6019      	str	r1, [r3, #0]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	4293      	cmp	r3, r2
 801b61c:	d093      	beq.n	801b546 <ai_platform_network_create+0x1ca>
 801b61e:	e7fe      	b.n	801b61e <ai_platform_network_create+0x2a2>
 801b620:	4b0a      	ldr	r3, [pc, #40]	; (801b64c <ai_platform_network_create+0x2d0>)
 801b622:	2201      	movs	r2, #1
 801b624:	4619      	mov	r1, r3
 801b626:	601a      	str	r2, [r3, #0]
 801b628:	680b      	ldr	r3, [r1, #0]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d1fc      	bne.n	801b628 <ai_platform_network_create+0x2ac>
 801b62e:	4b0e      	ldr	r3, [pc, #56]	; (801b668 <ai_platform_network_create+0x2ec>)
 801b630:	490a      	ldr	r1, [pc, #40]	; (801b65c <ai_platform_network_create+0x2e0>)
 801b632:	4a0b      	ldr	r2, [pc, #44]	; (801b660 <ai_platform_network_create+0x2e4>)
 801b634:	6019      	str	r1, [r3, #0]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	4293      	cmp	r3, r2
 801b63a:	f43f af19 	beq.w	801b470 <ai_platform_network_create+0xf4>
 801b63e:	e7fe      	b.n	801b63e <ai_platform_network_create+0x2c2>
 801b640:	e0042000 	.word	0xe0042000
 801b644:	5c001000 	.word	0x5c001000
 801b648:	40023008 	.word	0x40023008
 801b64c:	58024c08 	.word	0x58024c08
 801b650:	e0002000 	.word	0xe0002000
 801b654:	a1c00100 	.word	0xa1c00100
 801b658:	40023000 	.word	0x40023000
 801b65c:	f407a5c2 	.word	0xf407a5c2
 801b660:	b5e8b5cd 	.word	0xb5e8b5cd
 801b664:	84048403 	.word	0x84048403
 801b668:	58024c00 	.word	0x58024c00
 801b66c:	4b0e      	ldr	r3, [pc, #56]	; (801b6a8 <ai_platform_network_create+0x32c>)
 801b66e:	2201      	movs	r2, #1
 801b670:	4619      	mov	r1, r3
 801b672:	601a      	str	r2, [r3, #0]
 801b674:	680b      	ldr	r3, [r1, #0]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d1fc      	bne.n	801b674 <ai_platform_network_create+0x2f8>
 801b67a:	4b0c      	ldr	r3, [pc, #48]	; (801b6ac <ai_platform_network_create+0x330>)
 801b67c:	490c      	ldr	r1, [pc, #48]	; (801b6b0 <ai_platform_network_create+0x334>)
 801b67e:	4a0d      	ldr	r2, [pc, #52]	; (801b6b4 <ai_platform_network_create+0x338>)
 801b680:	6019      	str	r1, [r3, #0]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	4293      	cmp	r3, r2
 801b686:	f43f aef3 	beq.w	801b470 <ai_platform_network_create+0xf4>
 801b68a:	e7fe      	b.n	801b68a <ai_platform_network_create+0x30e>
 801b68c:	4b0a      	ldr	r3, [pc, #40]	; (801b6b8 <ai_platform_network_create+0x33c>)
 801b68e:	2118      	movs	r1, #24
 801b690:	6019      	str	r1, [r3, #0]
 801b692:	6819      	ldr	r1, [r3, #0]
 801b694:	2918      	cmp	r1, #24
 801b696:	f47f aea2 	bne.w	801b3de <ai_platform_network_create+0x62>
 801b69a:	2101      	movs	r1, #1
 801b69c:	4618      	mov	r0, r3
 801b69e:	6019      	str	r1, [r3, #0]
 801b6a0:	6803      	ldr	r3, [r0, #0]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d1fc      	bne.n	801b6a0 <ai_platform_network_create+0x324>
 801b6a6:	e6b6      	b.n	801b416 <ai_platform_network_create+0x9a>
 801b6a8:	58024c08 	.word	0x58024c08
 801b6ac:	58024c00 	.word	0x58024c00
 801b6b0:	f407a5c2 	.word	0xf407a5c2
 801b6b4:	b5e8b5cd 	.word	0xb5e8b5cd
 801b6b8:	40023008 	.word	0x40023008

0801b6bc <ai_platform_network_destroy>:
 801b6bc:	b510      	push	{r4, lr}
 801b6be:	4604      	mov	r4, r0
 801b6c0:	b118      	cbz	r0, 801b6ca <ai_platform_network_destroy+0xe>
 801b6c2:	4b6d      	ldr	r3, [pc, #436]	; (801b878 <ai_platform_network_destroy+0x1bc>)
 801b6c4:	6802      	ldr	r2, [r0, #0]
 801b6c6:	429a      	cmp	r2, r3
 801b6c8:	d03c      	beq.n	801b744 <ai_platform_network_destroy+0x88>
 801b6ca:	4a6c      	ldr	r2, [pc, #432]	; (801b87c <ai_platform_network_destroy+0x1c0>)
 801b6cc:	6813      	ldr	r3, [r2, #0]
 801b6ce:	f023 0301 	bic.w	r3, r3, #1
 801b6d2:	6013      	str	r3, [r2, #0]
 801b6d4:	f7fe feba 	bl	801a44c <_ai_platform_acquire_crc>
 801b6d8:	4b69      	ldr	r3, [pc, #420]	; (801b880 <ai_platform_network_destroy+0x1c4>)
 801b6da:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b6e4:	185a      	adds	r2, r3, r1
 801b6e6:	2a01      	cmp	r2, #1
 801b6e8:	d91d      	bls.n	801b726 <ai_platform_network_destroy+0x6a>
 801b6ea:	f240 4249 	movw	r2, #1097	; 0x449
 801b6ee:	4293      	cmp	r3, r2
 801b6f0:	d019      	beq.n	801b726 <ai_platform_network_destroy+0x6a>
 801b6f2:	4b64      	ldr	r3, [pc, #400]	; (801b884 <ai_platform_network_destroy+0x1c8>)
 801b6f4:	681a      	ldr	r2, [r3, #0]
 801b6f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b6fa:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b6fe:	f000 80ab 	beq.w	801b858 <ai_platform_network_destroy+0x19c>
 801b702:	681a      	ldr	r2, [r3, #0]
 801b704:	f240 4183 	movw	r1, #1155	; 0x483
 801b708:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b70c:	428a      	cmp	r2, r1
 801b70e:	f000 8093 	beq.w	801b838 <ai_platform_network_destroy+0x17c>
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b718:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b71c:	d041      	beq.n	801b7a2 <ai_platform_network_destroy+0xe6>
 801b71e:	f7fe fe97 	bl	801a450 <_ai_platform_release_crc>
 801b722:	4620      	mov	r0, r4
 801b724:	bd10      	pop	{r4, pc}
 801b726:	4b58      	ldr	r3, [pc, #352]	; (801b888 <ai_platform_network_destroy+0x1cc>)
 801b728:	2201      	movs	r2, #1
 801b72a:	4619      	mov	r1, r3
 801b72c:	601a      	str	r2, [r3, #0]
 801b72e:	680b      	ldr	r3, [r1, #0]
 801b730:	2b00      	cmp	r3, #0
 801b732:	d1fc      	bne.n	801b72e <ai_platform_network_destroy+0x72>
 801b734:	4b55      	ldr	r3, [pc, #340]	; (801b88c <ai_platform_network_destroy+0x1d0>)
 801b736:	4956      	ldr	r1, [pc, #344]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b738:	4a56      	ldr	r2, [pc, #344]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b73a:	6019      	str	r1, [r3, #0]
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	4293      	cmp	r3, r2
 801b740:	d0ed      	beq.n	801b71e <ai_platform_network_destroy+0x62>
 801b742:	e7fe      	b.n	801b742 <ai_platform_network_destroy+0x86>
 801b744:	4a4d      	ldr	r2, [pc, #308]	; (801b87c <ai_platform_network_destroy+0x1c0>)
 801b746:	6813      	ldr	r3, [r2, #0]
 801b748:	f023 0301 	bic.w	r3, r3, #1
 801b74c:	6013      	str	r3, [r2, #0]
 801b74e:	f7fe fe7d 	bl	801a44c <_ai_platform_acquire_crc>
 801b752:	4b4b      	ldr	r3, [pc, #300]	; (801b880 <ai_platform_network_destroy+0x1c4>)
 801b754:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b75e:	189a      	adds	r2, r3, r2
 801b760:	2a01      	cmp	r2, #1
 801b762:	d95a      	bls.n	801b81a <ai_platform_network_destroy+0x15e>
 801b764:	f240 4249 	movw	r2, #1097	; 0x449
 801b768:	4293      	cmp	r3, r2
 801b76a:	d056      	beq.n	801b81a <ai_platform_network_destroy+0x15e>
 801b76c:	4b45      	ldr	r3, [pc, #276]	; (801b884 <ai_platform_network_destroy+0x1c8>)
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b774:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b778:	d040      	beq.n	801b7fc <ai_platform_network_destroy+0x140>
 801b77a:	681a      	ldr	r2, [r3, #0]
 801b77c:	f240 4183 	movw	r1, #1155	; 0x483
 801b780:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b784:	428a      	cmp	r2, r1
 801b786:	d02a      	beq.n	801b7de <ai_platform_network_destroy+0x122>
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b78e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b792:	d015      	beq.n	801b7c0 <ai_platform_network_destroy+0x104>
 801b794:	f7fe fe5c 	bl	801a450 <_ai_platform_release_crc>
 801b798:	4620      	mov	r0, r4
 801b79a:	2400      	movs	r4, #0
 801b79c:	f001 fe90 	bl	801d4c0 <ai_layers_destroy_all>
 801b7a0:	e7bf      	b.n	801b722 <ai_platform_network_destroy+0x66>
 801b7a2:	4b39      	ldr	r3, [pc, #228]	; (801b888 <ai_platform_network_destroy+0x1cc>)
 801b7a4:	2201      	movs	r2, #1
 801b7a6:	4619      	mov	r1, r3
 801b7a8:	601a      	str	r2, [r3, #0]
 801b7aa:	680b      	ldr	r3, [r1, #0]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d1fc      	bne.n	801b7aa <ai_platform_network_destroy+0xee>
 801b7b0:	4b36      	ldr	r3, [pc, #216]	; (801b88c <ai_platform_network_destroy+0x1d0>)
 801b7b2:	4937      	ldr	r1, [pc, #220]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b7b4:	4a37      	ldr	r2, [pc, #220]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b7b6:	6019      	str	r1, [r3, #0]
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	4293      	cmp	r3, r2
 801b7bc:	d0af      	beq.n	801b71e <ai_platform_network_destroy+0x62>
 801b7be:	e7fe      	b.n	801b7be <ai_platform_network_destroy+0x102>
 801b7c0:	4b31      	ldr	r3, [pc, #196]	; (801b888 <ai_platform_network_destroy+0x1cc>)
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	601a      	str	r2, [r3, #0]
 801b7c8:	680b      	ldr	r3, [r1, #0]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d1fc      	bne.n	801b7c8 <ai_platform_network_destroy+0x10c>
 801b7ce:	4b2f      	ldr	r3, [pc, #188]	; (801b88c <ai_platform_network_destroy+0x1d0>)
 801b7d0:	492f      	ldr	r1, [pc, #188]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b7d2:	4a30      	ldr	r2, [pc, #192]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b7d4:	6019      	str	r1, [r3, #0]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	4293      	cmp	r3, r2
 801b7da:	d0db      	beq.n	801b794 <ai_platform_network_destroy+0xd8>
 801b7dc:	e7fe      	b.n	801b7dc <ai_platform_network_destroy+0x120>
 801b7de:	4b2e      	ldr	r3, [pc, #184]	; (801b898 <ai_platform_network_destroy+0x1dc>)
 801b7e0:	2201      	movs	r2, #1
 801b7e2:	4619      	mov	r1, r3
 801b7e4:	601a      	str	r2, [r3, #0]
 801b7e6:	680b      	ldr	r3, [r1, #0]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d1fc      	bne.n	801b7e6 <ai_platform_network_destroy+0x12a>
 801b7ec:	4b2b      	ldr	r3, [pc, #172]	; (801b89c <ai_platform_network_destroy+0x1e0>)
 801b7ee:	4928      	ldr	r1, [pc, #160]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b7f0:	4a28      	ldr	r2, [pc, #160]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b7f2:	6019      	str	r1, [r3, #0]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	4293      	cmp	r3, r2
 801b7f8:	d0cc      	beq.n	801b794 <ai_platform_network_destroy+0xd8>
 801b7fa:	e7fe      	b.n	801b7fa <ai_platform_network_destroy+0x13e>
 801b7fc:	4b26      	ldr	r3, [pc, #152]	; (801b898 <ai_platform_network_destroy+0x1dc>)
 801b7fe:	2201      	movs	r2, #1
 801b800:	4619      	mov	r1, r3
 801b802:	601a      	str	r2, [r3, #0]
 801b804:	680b      	ldr	r3, [r1, #0]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d1fc      	bne.n	801b804 <ai_platform_network_destroy+0x148>
 801b80a:	4b24      	ldr	r3, [pc, #144]	; (801b89c <ai_platform_network_destroy+0x1e0>)
 801b80c:	4920      	ldr	r1, [pc, #128]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b80e:	4a21      	ldr	r2, [pc, #132]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b810:	6019      	str	r1, [r3, #0]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	4293      	cmp	r3, r2
 801b816:	d0bd      	beq.n	801b794 <ai_platform_network_destroy+0xd8>
 801b818:	e7fe      	b.n	801b818 <ai_platform_network_destroy+0x15c>
 801b81a:	4b1b      	ldr	r3, [pc, #108]	; (801b888 <ai_platform_network_destroy+0x1cc>)
 801b81c:	2201      	movs	r2, #1
 801b81e:	4619      	mov	r1, r3
 801b820:	601a      	str	r2, [r3, #0]
 801b822:	680b      	ldr	r3, [r1, #0]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d1fc      	bne.n	801b822 <ai_platform_network_destroy+0x166>
 801b828:	4b18      	ldr	r3, [pc, #96]	; (801b88c <ai_platform_network_destroy+0x1d0>)
 801b82a:	4919      	ldr	r1, [pc, #100]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b82c:	4a19      	ldr	r2, [pc, #100]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b82e:	6019      	str	r1, [r3, #0]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	4293      	cmp	r3, r2
 801b834:	d0ae      	beq.n	801b794 <ai_platform_network_destroy+0xd8>
 801b836:	e7fe      	b.n	801b836 <ai_platform_network_destroy+0x17a>
 801b838:	4b17      	ldr	r3, [pc, #92]	; (801b898 <ai_platform_network_destroy+0x1dc>)
 801b83a:	2201      	movs	r2, #1
 801b83c:	4619      	mov	r1, r3
 801b83e:	601a      	str	r2, [r3, #0]
 801b840:	680b      	ldr	r3, [r1, #0]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d1fc      	bne.n	801b840 <ai_platform_network_destroy+0x184>
 801b846:	4b15      	ldr	r3, [pc, #84]	; (801b89c <ai_platform_network_destroy+0x1e0>)
 801b848:	4911      	ldr	r1, [pc, #68]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b84a:	4a12      	ldr	r2, [pc, #72]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b84c:	6019      	str	r1, [r3, #0]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	4293      	cmp	r3, r2
 801b852:	f43f af64 	beq.w	801b71e <ai_platform_network_destroy+0x62>
 801b856:	e7fe      	b.n	801b856 <ai_platform_network_destroy+0x19a>
 801b858:	4b0f      	ldr	r3, [pc, #60]	; (801b898 <ai_platform_network_destroy+0x1dc>)
 801b85a:	2201      	movs	r2, #1
 801b85c:	4619      	mov	r1, r3
 801b85e:	601a      	str	r2, [r3, #0]
 801b860:	680b      	ldr	r3, [r1, #0]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d1fc      	bne.n	801b860 <ai_platform_network_destroy+0x1a4>
 801b866:	4b0d      	ldr	r3, [pc, #52]	; (801b89c <ai_platform_network_destroy+0x1e0>)
 801b868:	4909      	ldr	r1, [pc, #36]	; (801b890 <ai_platform_network_destroy+0x1d4>)
 801b86a:	4a0a      	ldr	r2, [pc, #40]	; (801b894 <ai_platform_network_destroy+0x1d8>)
 801b86c:	6019      	str	r1, [r3, #0]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	4293      	cmp	r3, r2
 801b872:	f43f af54 	beq.w	801b71e <ai_platform_network_destroy+0x62>
 801b876:	e7fe      	b.n	801b876 <ai_platform_network_destroy+0x1ba>
 801b878:	a1c00100 	.word	0xa1c00100
 801b87c:	e0002000 	.word	0xe0002000
 801b880:	e0042000 	.word	0xe0042000
 801b884:	5c001000 	.word	0x5c001000
 801b888:	40023008 	.word	0x40023008
 801b88c:	40023000 	.word	0x40023000
 801b890:	f407a5c2 	.word	0xf407a5c2
 801b894:	b5e8b5cd 	.word	0xb5e8b5cd
 801b898:	58024c08 	.word	0x58024c08
 801b89c:	58024c00 	.word	0x58024c00

0801b8a0 <ai_platform_network_init>:
 801b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	d05a      	beq.n	801b95e <ai_platform_network_init+0xbe>
 801b8a8:	4ba7      	ldr	r3, [pc, #668]	; (801bb48 <ai_platform_network_init+0x2a8>)
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	6802      	ldr	r2, [r0, #0]
 801b8ae:	429a      	cmp	r2, r3
 801b8b0:	d155      	bne.n	801b95e <ai_platform_network_init+0xbe>
 801b8b2:	4aa6      	ldr	r2, [pc, #664]	; (801bb4c <ai_platform_network_init+0x2ac>)
 801b8b4:	460d      	mov	r5, r1
 801b8b6:	6813      	ldr	r3, [r2, #0]
 801b8b8:	f023 0301 	bic.w	r3, r3, #1
 801b8bc:	6013      	str	r3, [r2, #0]
 801b8be:	f7fe fdc5 	bl	801a44c <_ai_platform_acquire_crc>
 801b8c2:	4ba3      	ldr	r3, [pc, #652]	; (801bb50 <ai_platform_network_init+0x2b0>)
 801b8c4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b8ce:	189a      	adds	r2, r3, r2
 801b8d0:	2a01      	cmp	r2, #1
 801b8d2:	d935      	bls.n	801b940 <ai_platform_network_init+0xa0>
 801b8d4:	f240 4249 	movw	r2, #1097	; 0x449
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d031      	beq.n	801b940 <ai_platform_network_init+0xa0>
 801b8dc:	4b9d      	ldr	r3, [pc, #628]	; (801bb54 <ai_platform_network_init+0x2b4>)
 801b8de:	681a      	ldr	r2, [r3, #0]
 801b8e0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b8e4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b8e8:	f000 8154 	beq.w	801bb94 <ai_platform_network_init+0x2f4>
 801b8ec:	681a      	ldr	r2, [r3, #0]
 801b8ee:	f240 4183 	movw	r1, #1155	; 0x483
 801b8f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b8f6:	428a      	cmp	r2, r1
 801b8f8:	f000 813c 	beq.w	801bb74 <ai_platform_network_init+0x2d4>
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b902:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b906:	f000 8107 	beq.w	801bb18 <ai_platform_network_init+0x278>
 801b90a:	f7fe fda1 	bl	801a450 <_ai_platform_release_crc>
 801b90e:	2d00      	cmp	r5, #0
 801b910:	f000 8112 	beq.w	801bb38 <ai_platform_network_init+0x298>
 801b914:	4b90      	ldr	r3, [pc, #576]	; (801bb58 <ai_platform_network_init+0x2b8>)
 801b916:	682a      	ldr	r2, [r5, #0]
 801b918:	429a      	cmp	r2, r3
 801b91a:	d14e      	bne.n	801b9ba <ai_platform_network_init+0x11a>
 801b91c:	6928      	ldr	r0, [r5, #16]
 801b91e:	89ab      	ldrh	r3, [r5, #12]
 801b920:	89ee      	ldrh	r6, [r5, #14]
 801b922:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 801b926:	62a0      	str	r0, [r4, #40]	; 0x28
 801b928:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801b92c:	2203      	movs	r2, #3
 801b92e:	84e6      	strh	r6, [r4, #38]	; 0x26
 801b930:	84a3      	strh	r3, [r4, #36]	; 0x24
 801b932:	4620      	mov	r0, r4
 801b934:	60e2      	str	r2, [r4, #12]
 801b936:	f001 fd4d 	bl	801d3d4 <ai_layers_init_all>
 801b93a:	4620      	mov	r0, r4
 801b93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b940:	4b86      	ldr	r3, [pc, #536]	; (801bb5c <ai_platform_network_init+0x2bc>)
 801b942:	2201      	movs	r2, #1
 801b944:	4619      	mov	r1, r3
 801b946:	601a      	str	r2, [r3, #0]
 801b948:	680b      	ldr	r3, [r1, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d1fc      	bne.n	801b948 <ai_platform_network_init+0xa8>
 801b94e:	4b84      	ldr	r3, [pc, #528]	; (801bb60 <ai_platform_network_init+0x2c0>)
 801b950:	4984      	ldr	r1, [pc, #528]	; (801bb64 <ai_platform_network_init+0x2c4>)
 801b952:	4a85      	ldr	r2, [pc, #532]	; (801bb68 <ai_platform_network_init+0x2c8>)
 801b954:	6019      	str	r1, [r3, #0]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	4293      	cmp	r3, r2
 801b95a:	d0d6      	beq.n	801b90a <ai_platform_network_init+0x6a>
 801b95c:	e7fe      	b.n	801b95c <ai_platform_network_init+0xbc>
 801b95e:	4a7b      	ldr	r2, [pc, #492]	; (801bb4c <ai_platform_network_init+0x2ac>)
 801b960:	6813      	ldr	r3, [r2, #0]
 801b962:	f023 0301 	bic.w	r3, r3, #1
 801b966:	6013      	str	r3, [r2, #0]
 801b968:	f7fe fd70 	bl	801a44c <_ai_platform_acquire_crc>
 801b96c:	4b78      	ldr	r3, [pc, #480]	; (801bb50 <ai_platform_network_init+0x2b0>)
 801b96e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b978:	185a      	adds	r2, r3, r1
 801b97a:	2a01      	cmp	r2, #1
 801b97c:	d93f      	bls.n	801b9fe <ai_platform_network_init+0x15e>
 801b97e:	f240 4249 	movw	r2, #1097	; 0x449
 801b982:	4293      	cmp	r3, r2
 801b984:	d03b      	beq.n	801b9fe <ai_platform_network_init+0x15e>
 801b986:	4b73      	ldr	r3, [pc, #460]	; (801bb54 <ai_platform_network_init+0x2b4>)
 801b988:	681a      	ldr	r2, [r3, #0]
 801b98a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b98e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b992:	f000 80a5 	beq.w	801bae0 <ai_platform_network_init+0x240>
 801b996:	681a      	ldr	r2, [r3, #0]
 801b998:	f240 4183 	movw	r1, #1155	; 0x483
 801b99c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b9a0:	428a      	cmp	r2, r1
 801b9a2:	f000 808d 	beq.w	801bac0 <ai_platform_network_init+0x220>
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b9ac:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b9b0:	d076      	beq.n	801baa0 <ai_platform_network_init+0x200>
 801b9b2:	f7fe fd4d 	bl	801a450 <_ai_platform_release_crc>
 801b9b6:	2000      	movs	r0, #0
 801b9b8:	e7c0      	b.n	801b93c <ai_platform_network_init+0x9c>
 801b9ba:	2101      	movs	r1, #1
 801b9bc:	4628      	mov	r0, r5
 801b9be:	f105 081c 	add.w	r8, r5, #28
 801b9c2:	686f      	ldr	r7, [r5, #4]
 801b9c4:	f7fe fd08 	bl	801a3d8 <ai_buffer_get_size>
 801b9c8:	4681      	mov	r9, r0
 801b9ca:	2101      	movs	r1, #1
 801b9cc:	4640      	mov	r0, r8
 801b9ce:	6a2e      	ldr	r6, [r5, #32]
 801b9d0:	f7fe fd02 	bl	801a3d8 <ai_buffer_get_size>
 801b9d4:	f1b9 0f00 	cmp.w	r9, #0
 801b9d8:	d020      	beq.n	801ba1c <ai_platform_network_init+0x17c>
 801b9da:	2800      	cmp	r0, #0
 801b9dc:	f040 8090 	bne.w	801bb00 <ai_platform_network_init+0x260>
 801b9e0:	4680      	mov	r8, r0
 801b9e2:	4606      	mov	r6, r0
 801b9e4:	2f00      	cmp	r7, #0
 801b9e6:	f000 808f 	beq.w	801bb08 <ai_platform_network_init+0x268>
 801b9ea:	8be7      	ldrh	r7, [r4, #30]
 801b9ec:	bb7f      	cbnz	r7, 801ba4e <ai_platform_network_init+0x1ae>
 801b9ee:	f104 0010 	add.w	r0, r4, #16
 801b9f2:	2212      	movs	r2, #18
 801b9f4:	2116      	movs	r1, #22
 801b9f6:	f000 fe2b 	bl	801c650 <core_set_error>
 801b9fa:	4638      	mov	r0, r7
 801b9fc:	e79e      	b.n	801b93c <ai_platform_network_init+0x9c>
 801b9fe:	4b57      	ldr	r3, [pc, #348]	; (801bb5c <ai_platform_network_init+0x2bc>)
 801ba00:	2201      	movs	r2, #1
 801ba02:	4619      	mov	r1, r3
 801ba04:	601a      	str	r2, [r3, #0]
 801ba06:	680b      	ldr	r3, [r1, #0]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d1fc      	bne.n	801ba06 <ai_platform_network_init+0x166>
 801ba0c:	4b54      	ldr	r3, [pc, #336]	; (801bb60 <ai_platform_network_init+0x2c0>)
 801ba0e:	4955      	ldr	r1, [pc, #340]	; (801bb64 <ai_platform_network_init+0x2c4>)
 801ba10:	4a55      	ldr	r2, [pc, #340]	; (801bb68 <ai_platform_network_init+0x2c8>)
 801ba12:	6019      	str	r1, [r3, #0]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	4293      	cmp	r3, r2
 801ba18:	d0cb      	beq.n	801b9b2 <ai_platform_network_init+0x112>
 801ba1a:	e7fe      	b.n	801ba1a <ai_platform_network_init+0x17a>
 801ba1c:	b970      	cbnz	r0, 801ba3c <ai_platform_network_init+0x19c>
 801ba1e:	4680      	mov	r8, r0
 801ba20:	4606      	mov	r6, r0
 801ba22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ba24:	2200      	movs	r2, #0
 801ba26:	42b3      	cmp	r3, r6
 801ba28:	61e2      	str	r2, [r4, #28]
 801ba2a:	d21e      	bcs.n	801ba6a <ai_platform_network_init+0x1ca>
 801ba2c:	f104 0010 	add.w	r0, r4, #16
 801ba30:	2213      	movs	r2, #19
 801ba32:	2116      	movs	r1, #22
 801ba34:	f000 fe0c 	bl	801c650 <core_set_error>
 801ba38:	2000      	movs	r0, #0
 801ba3a:	e77f      	b.n	801b93c <ai_platform_network_init+0x9c>
 801ba3c:	bb66      	cbnz	r6, 801ba98 <ai_platform_network_init+0x1f8>
 801ba3e:	f104 0010 	add.w	r0, r4, #16
 801ba42:	2213      	movs	r2, #19
 801ba44:	2110      	movs	r1, #16
 801ba46:	f000 fe03 	bl	801c650 <core_set_error>
 801ba4a:	2000      	movs	r0, #0
 801ba4c:	e776      	b.n	801b93c <ai_platform_network_init+0x9c>
 801ba4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba50:	6a27      	ldr	r7, [r4, #32]
 801ba52:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801ba56:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ba58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ba5c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ba60:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ba62:	f8c4 c01c 	str.w	ip, [r4, #28]
 801ba66:	42b3      	cmp	r3, r6
 801ba68:	d3e0      	bcc.n	801ba2c <ai_platform_network_init+0x18c>
 801ba6a:	b1be      	cbz	r6, 801ba9c <ai_platform_network_init+0x1fc>
 801ba6c:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801ba70:	f04f 0e00 	mov.w	lr, #0
 801ba74:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801ba78:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801ba7a:	eb08 070e 	add.w	r7, r8, lr
 801ba7e:	4475      	add	r5, lr
 801ba80:	f10e 0e1c 	add.w	lr, lr, #28
 801ba84:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801ba86:	45f4      	cmp	ip, lr
 801ba88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ba8a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801ba8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801ba92:	d1f1      	bne.n	801ba78 <ai_platform_network_init+0x1d8>
 801ba94:	2300      	movs	r3, #0
 801ba96:	e749      	b.n	801b92c <ai_platform_network_init+0x8c>
 801ba98:	2601      	movs	r6, #1
 801ba9a:	e7c2      	b.n	801ba22 <ai_platform_network_init+0x182>
 801ba9c:	4633      	mov	r3, r6
 801ba9e:	e745      	b.n	801b92c <ai_platform_network_init+0x8c>
 801baa0:	4b2e      	ldr	r3, [pc, #184]	; (801bb5c <ai_platform_network_init+0x2bc>)
 801baa2:	2201      	movs	r2, #1
 801baa4:	4619      	mov	r1, r3
 801baa6:	601a      	str	r2, [r3, #0]
 801baa8:	680b      	ldr	r3, [r1, #0]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d1fc      	bne.n	801baa8 <ai_platform_network_init+0x208>
 801baae:	4b2c      	ldr	r3, [pc, #176]	; (801bb60 <ai_platform_network_init+0x2c0>)
 801bab0:	492c      	ldr	r1, [pc, #176]	; (801bb64 <ai_platform_network_init+0x2c4>)
 801bab2:	4a2d      	ldr	r2, [pc, #180]	; (801bb68 <ai_platform_network_init+0x2c8>)
 801bab4:	6019      	str	r1, [r3, #0]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	4293      	cmp	r3, r2
 801baba:	f43f af7a 	beq.w	801b9b2 <ai_platform_network_init+0x112>
 801babe:	e7fe      	b.n	801babe <ai_platform_network_init+0x21e>
 801bac0:	4b2a      	ldr	r3, [pc, #168]	; (801bb6c <ai_platform_network_init+0x2cc>)
 801bac2:	2201      	movs	r2, #1
 801bac4:	4619      	mov	r1, r3
 801bac6:	601a      	str	r2, [r3, #0]
 801bac8:	680b      	ldr	r3, [r1, #0]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d1fc      	bne.n	801bac8 <ai_platform_network_init+0x228>
 801bace:	4b28      	ldr	r3, [pc, #160]	; (801bb70 <ai_platform_network_init+0x2d0>)
 801bad0:	4924      	ldr	r1, [pc, #144]	; (801bb64 <ai_platform_network_init+0x2c4>)
 801bad2:	4a25      	ldr	r2, [pc, #148]	; (801bb68 <ai_platform_network_init+0x2c8>)
 801bad4:	6019      	str	r1, [r3, #0]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	4293      	cmp	r3, r2
 801bada:	f43f af6a 	beq.w	801b9b2 <ai_platform_network_init+0x112>
 801bade:	e7fe      	b.n	801bade <ai_platform_network_init+0x23e>
 801bae0:	4b22      	ldr	r3, [pc, #136]	; (801bb6c <ai_platform_network_init+0x2cc>)
 801bae2:	2201      	movs	r2, #1
 801bae4:	4619      	mov	r1, r3
 801bae6:	601a      	str	r2, [r3, #0]
 801bae8:	680b      	ldr	r3, [r1, #0]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d1fc      	bne.n	801bae8 <ai_platform_network_init+0x248>
 801baee:	4b20      	ldr	r3, [pc, #128]	; (801bb70 <ai_platform_network_init+0x2d0>)
 801baf0:	491c      	ldr	r1, [pc, #112]	; (801bb64 <ai_platform_network_init+0x2c4>)
 801baf2:	4a1d      	ldr	r2, [pc, #116]	; (801bb68 <ai_platform_network_init+0x2c8>)
 801baf4:	6019      	str	r1, [r3, #0]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	4293      	cmp	r3, r2
 801bafa:	f43f af5a 	beq.w	801b9b2 <ai_platform_network_init+0x112>
 801bafe:	e7fe      	b.n	801bafe <ai_platform_network_init+0x25e>
 801bb00:	2e00      	cmp	r6, #0
 801bb02:	d09c      	beq.n	801ba3e <ai_platform_network_init+0x19e>
 801bb04:	2601      	movs	r6, #1
 801bb06:	e76d      	b.n	801b9e4 <ai_platform_network_init+0x144>
 801bb08:	f104 0010 	add.w	r0, r4, #16
 801bb0c:	2212      	movs	r2, #18
 801bb0e:	2110      	movs	r1, #16
 801bb10:	f000 fd9e 	bl	801c650 <core_set_error>
 801bb14:	4638      	mov	r0, r7
 801bb16:	e711      	b.n	801b93c <ai_platform_network_init+0x9c>
 801bb18:	4b10      	ldr	r3, [pc, #64]	; (801bb5c <ai_platform_network_init+0x2bc>)
 801bb1a:	2201      	movs	r2, #1
 801bb1c:	4619      	mov	r1, r3
 801bb1e:	601a      	str	r2, [r3, #0]
 801bb20:	680b      	ldr	r3, [r1, #0]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d1fc      	bne.n	801bb20 <ai_platform_network_init+0x280>
 801bb26:	4b0e      	ldr	r3, [pc, #56]	; (801bb60 <ai_platform_network_init+0x2c0>)
 801bb28:	490e      	ldr	r1, [pc, #56]	; (801bb64 <ai_platform_network_init+0x2c4>)
 801bb2a:	4a0f      	ldr	r2, [pc, #60]	; (801bb68 <ai_platform_network_init+0x2c8>)
 801bb2c:	6019      	str	r1, [r3, #0]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4293      	cmp	r3, r2
 801bb32:	f43f aeea 	beq.w	801b90a <ai_platform_network_init+0x6a>
 801bb36:	e7fe      	b.n	801bb36 <ai_platform_network_init+0x296>
 801bb38:	f104 0010 	add.w	r0, r4, #16
 801bb3c:	2211      	movs	r2, #17
 801bb3e:	2110      	movs	r1, #16
 801bb40:	f000 fd86 	bl	801c650 <core_set_error>
 801bb44:	4628      	mov	r0, r5
 801bb46:	e6f9      	b.n	801b93c <ai_platform_network_init+0x9c>
 801bb48:	a1c00100 	.word	0xa1c00100
 801bb4c:	e0002000 	.word	0xe0002000
 801bb50:	e0042000 	.word	0xe0042000
 801bb54:	5c001000 	.word	0x5c001000
 801bb58:	a1facade 	.word	0xa1facade
 801bb5c:	40023008 	.word	0x40023008
 801bb60:	40023000 	.word	0x40023000
 801bb64:	f407a5c2 	.word	0xf407a5c2
 801bb68:	b5e8b5cd 	.word	0xb5e8b5cd
 801bb6c:	58024c08 	.word	0x58024c08
 801bb70:	58024c00 	.word	0x58024c00
 801bb74:	4b0f      	ldr	r3, [pc, #60]	; (801bbb4 <ai_platform_network_init+0x314>)
 801bb76:	2201      	movs	r2, #1
 801bb78:	4619      	mov	r1, r3
 801bb7a:	601a      	str	r2, [r3, #0]
 801bb7c:	680b      	ldr	r3, [r1, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d1fc      	bne.n	801bb7c <ai_platform_network_init+0x2dc>
 801bb82:	4b0d      	ldr	r3, [pc, #52]	; (801bbb8 <ai_platform_network_init+0x318>)
 801bb84:	490d      	ldr	r1, [pc, #52]	; (801bbbc <ai_platform_network_init+0x31c>)
 801bb86:	4a0e      	ldr	r2, [pc, #56]	; (801bbc0 <ai_platform_network_init+0x320>)
 801bb88:	6019      	str	r1, [r3, #0]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	f43f aebc 	beq.w	801b90a <ai_platform_network_init+0x6a>
 801bb92:	e7fe      	b.n	801bb92 <ai_platform_network_init+0x2f2>
 801bb94:	4b07      	ldr	r3, [pc, #28]	; (801bbb4 <ai_platform_network_init+0x314>)
 801bb96:	2201      	movs	r2, #1
 801bb98:	4619      	mov	r1, r3
 801bb9a:	601a      	str	r2, [r3, #0]
 801bb9c:	680b      	ldr	r3, [r1, #0]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d1fc      	bne.n	801bb9c <ai_platform_network_init+0x2fc>
 801bba2:	4b05      	ldr	r3, [pc, #20]	; (801bbb8 <ai_platform_network_init+0x318>)
 801bba4:	4905      	ldr	r1, [pc, #20]	; (801bbbc <ai_platform_network_init+0x31c>)
 801bba6:	4a06      	ldr	r2, [pc, #24]	; (801bbc0 <ai_platform_network_init+0x320>)
 801bba8:	6019      	str	r1, [r3, #0]
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	4293      	cmp	r3, r2
 801bbae:	f43f aeac 	beq.w	801b90a <ai_platform_network_init+0x6a>
 801bbb2:	e7fe      	b.n	801bbb2 <ai_platform_network_init+0x312>
 801bbb4:	58024c08 	.word	0x58024c08
 801bbb8:	58024c00 	.word	0x58024c00
 801bbbc:	f407a5c2 	.word	0xf407a5c2
 801bbc0:	b5e8b5cd 	.word	0xb5e8b5cd

0801bbc4 <ai_platform_network_post_init>:
 801bbc4:	b538      	push	{r3, r4, r5, lr}
 801bbc6:	b120      	cbz	r0, 801bbd2 <ai_platform_network_post_init+0xe>
 801bbc8:	4b7f      	ldr	r3, [pc, #508]	; (801bdc8 <ai_platform_network_post_init+0x204>)
 801bbca:	4604      	mov	r4, r0
 801bbcc:	6802      	ldr	r2, [r0, #0]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d03c      	beq.n	801bc4c <ai_platform_network_post_init+0x88>
 801bbd2:	4a7e      	ldr	r2, [pc, #504]	; (801bdcc <ai_platform_network_post_init+0x208>)
 801bbd4:	6813      	ldr	r3, [r2, #0]
 801bbd6:	f023 0301 	bic.w	r3, r3, #1
 801bbda:	6013      	str	r3, [r2, #0]
 801bbdc:	f7fe fc36 	bl	801a44c <_ai_platform_acquire_crc>
 801bbe0:	4b7b      	ldr	r3, [pc, #492]	; (801bdd0 <ai_platform_network_post_init+0x20c>)
 801bbe2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bbec:	185a      	adds	r2, r3, r1
 801bbee:	2a01      	cmp	r2, #1
 801bbf0:	d91d      	bls.n	801bc2e <ai_platform_network_post_init+0x6a>
 801bbf2:	f240 4249 	movw	r2, #1097	; 0x449
 801bbf6:	4293      	cmp	r3, r2
 801bbf8:	d019      	beq.n	801bc2e <ai_platform_network_post_init+0x6a>
 801bbfa:	4b76      	ldr	r3, [pc, #472]	; (801bdd4 <ai_platform_network_post_init+0x210>)
 801bbfc:	681a      	ldr	r2, [r3, #0]
 801bbfe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc02:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bc06:	f000 80a7 	beq.w	801bd58 <ai_platform_network_post_init+0x194>
 801bc0a:	681a      	ldr	r2, [r3, #0]
 801bc0c:	f240 4183 	movw	r1, #1155	; 0x483
 801bc10:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc14:	428a      	cmp	r2, r1
 801bc16:	f000 808f 	beq.w	801bd38 <ai_platform_network_post_init+0x174>
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc20:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bc24:	d05b      	beq.n	801bcde <ai_platform_network_post_init+0x11a>
 801bc26:	f7fe fc13 	bl	801a450 <_ai_platform_release_crc>
 801bc2a:	2000      	movs	r0, #0
 801bc2c:	bd38      	pop	{r3, r4, r5, pc}
 801bc2e:	4b6a      	ldr	r3, [pc, #424]	; (801bdd8 <ai_platform_network_post_init+0x214>)
 801bc30:	2201      	movs	r2, #1
 801bc32:	4619      	mov	r1, r3
 801bc34:	601a      	str	r2, [r3, #0]
 801bc36:	680b      	ldr	r3, [r1, #0]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d1fc      	bne.n	801bc36 <ai_platform_network_post_init+0x72>
 801bc3c:	4b67      	ldr	r3, [pc, #412]	; (801bddc <ai_platform_network_post_init+0x218>)
 801bc3e:	4968      	ldr	r1, [pc, #416]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bc40:	4a68      	ldr	r2, [pc, #416]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bc42:	6019      	str	r1, [r3, #0]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	4293      	cmp	r3, r2
 801bc48:	d0ed      	beq.n	801bc26 <ai_platform_network_post_init+0x62>
 801bc4a:	e7fe      	b.n	801bc4a <ai_platform_network_post_init+0x86>
 801bc4c:	4a5f      	ldr	r2, [pc, #380]	; (801bdcc <ai_platform_network_post_init+0x208>)
 801bc4e:	6813      	ldr	r3, [r2, #0]
 801bc50:	f023 0301 	bic.w	r3, r3, #1
 801bc54:	6013      	str	r3, [r2, #0]
 801bc56:	f7fe fbf9 	bl	801a44c <_ai_platform_acquire_crc>
 801bc5a:	4b5d      	ldr	r3, [pc, #372]	; (801bdd0 <ai_platform_network_post_init+0x20c>)
 801bc5c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc66:	189a      	adds	r2, r3, r2
 801bc68:	2a01      	cmp	r2, #1
 801bc6a:	d956      	bls.n	801bd1a <ai_platform_network_post_init+0x156>
 801bc6c:	f240 4249 	movw	r2, #1097	; 0x449
 801bc70:	4293      	cmp	r3, r2
 801bc72:	d052      	beq.n	801bd1a <ai_platform_network_post_init+0x156>
 801bc74:	4b57      	ldr	r3, [pc, #348]	; (801bdd4 <ai_platform_network_post_init+0x210>)
 801bc76:	681a      	ldr	r2, [r3, #0]
 801bc78:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc7c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bc80:	d03c      	beq.n	801bcfc <ai_platform_network_post_init+0x138>
 801bc82:	681a      	ldr	r2, [r3, #0]
 801bc84:	f240 4183 	movw	r1, #1155	; 0x483
 801bc88:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc8c:	428a      	cmp	r2, r1
 801bc8e:	f000 8082 	beq.w	801bd96 <ai_platform_network_post_init+0x1d2>
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc98:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bc9c:	d06c      	beq.n	801bd78 <ai_platform_network_post_init+0x1b4>
 801bc9e:	f7fe fbd7 	bl	801a450 <_ai_platform_release_crc>
 801bca2:	68e3      	ldr	r3, [r4, #12]
 801bca4:	f013 0502 	ands.w	r5, r3, #2
 801bca8:	f000 8085 	beq.w	801bdb6 <ai_platform_network_post_init+0x1f2>
 801bcac:	4620      	mov	r0, r4
 801bcae:	f001 fba5 	bl	801d3fc <ai_layers_post_init_all>
 801bcb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bcb4:	b18b      	cbz	r3, 801bcda <ai_platform_network_post_init+0x116>
 801bcb6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801bcb8:	b90d      	cbnz	r5, 801bcbe <ai_platform_network_post_init+0xfa>
 801bcba:	e00e      	b.n	801bcda <ai_platform_network_post_init+0x116>
 801bcbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bcbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801bcc0:	4629      	mov	r1, r5
 801bcc2:	2000      	movs	r0, #0
 801bcc4:	4798      	blx	r3
 801bcc6:	692a      	ldr	r2, [r5, #16]
 801bcc8:	1b53      	subs	r3, r2, r5
 801bcca:	4615      	mov	r5, r2
 801bccc:	bf18      	it	ne
 801bcce:	2301      	movne	r3, #1
 801bcd0:	2a00      	cmp	r2, #0
 801bcd2:	bf08      	it	eq
 801bcd4:	2300      	moveq	r3, #0
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d1f0      	bne.n	801bcbc <ai_platform_network_post_init+0xf8>
 801bcda:	2001      	movs	r0, #1
 801bcdc:	bd38      	pop	{r3, r4, r5, pc}
 801bcde:	4b3e      	ldr	r3, [pc, #248]	; (801bdd8 <ai_platform_network_post_init+0x214>)
 801bce0:	2201      	movs	r2, #1
 801bce2:	4619      	mov	r1, r3
 801bce4:	601a      	str	r2, [r3, #0]
 801bce6:	680b      	ldr	r3, [r1, #0]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d1fc      	bne.n	801bce6 <ai_platform_network_post_init+0x122>
 801bcec:	4b3b      	ldr	r3, [pc, #236]	; (801bddc <ai_platform_network_post_init+0x218>)
 801bcee:	493c      	ldr	r1, [pc, #240]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bcf0:	4a3c      	ldr	r2, [pc, #240]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bcf2:	6019      	str	r1, [r3, #0]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	4293      	cmp	r3, r2
 801bcf8:	d095      	beq.n	801bc26 <ai_platform_network_post_init+0x62>
 801bcfa:	e7fe      	b.n	801bcfa <ai_platform_network_post_init+0x136>
 801bcfc:	4b3a      	ldr	r3, [pc, #232]	; (801bde8 <ai_platform_network_post_init+0x224>)
 801bcfe:	2201      	movs	r2, #1
 801bd00:	4619      	mov	r1, r3
 801bd02:	601a      	str	r2, [r3, #0]
 801bd04:	680b      	ldr	r3, [r1, #0]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d1fc      	bne.n	801bd04 <ai_platform_network_post_init+0x140>
 801bd0a:	4b38      	ldr	r3, [pc, #224]	; (801bdec <ai_platform_network_post_init+0x228>)
 801bd0c:	4934      	ldr	r1, [pc, #208]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bd0e:	4a35      	ldr	r2, [pc, #212]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bd10:	6019      	str	r1, [r3, #0]
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	4293      	cmp	r3, r2
 801bd16:	d0c2      	beq.n	801bc9e <ai_platform_network_post_init+0xda>
 801bd18:	e7fe      	b.n	801bd18 <ai_platform_network_post_init+0x154>
 801bd1a:	4b2f      	ldr	r3, [pc, #188]	; (801bdd8 <ai_platform_network_post_init+0x214>)
 801bd1c:	2201      	movs	r2, #1
 801bd1e:	4619      	mov	r1, r3
 801bd20:	601a      	str	r2, [r3, #0]
 801bd22:	680b      	ldr	r3, [r1, #0]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d1fc      	bne.n	801bd22 <ai_platform_network_post_init+0x15e>
 801bd28:	4b2c      	ldr	r3, [pc, #176]	; (801bddc <ai_platform_network_post_init+0x218>)
 801bd2a:	492d      	ldr	r1, [pc, #180]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bd2c:	4a2d      	ldr	r2, [pc, #180]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bd2e:	6019      	str	r1, [r3, #0]
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	4293      	cmp	r3, r2
 801bd34:	d0b3      	beq.n	801bc9e <ai_platform_network_post_init+0xda>
 801bd36:	e7fe      	b.n	801bd36 <ai_platform_network_post_init+0x172>
 801bd38:	4b2b      	ldr	r3, [pc, #172]	; (801bde8 <ai_platform_network_post_init+0x224>)
 801bd3a:	2201      	movs	r2, #1
 801bd3c:	4619      	mov	r1, r3
 801bd3e:	601a      	str	r2, [r3, #0]
 801bd40:	680b      	ldr	r3, [r1, #0]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d1fc      	bne.n	801bd40 <ai_platform_network_post_init+0x17c>
 801bd46:	4b29      	ldr	r3, [pc, #164]	; (801bdec <ai_platform_network_post_init+0x228>)
 801bd48:	4925      	ldr	r1, [pc, #148]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bd4a:	4a26      	ldr	r2, [pc, #152]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bd4c:	6019      	str	r1, [r3, #0]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	4293      	cmp	r3, r2
 801bd52:	f43f af68 	beq.w	801bc26 <ai_platform_network_post_init+0x62>
 801bd56:	e7fe      	b.n	801bd56 <ai_platform_network_post_init+0x192>
 801bd58:	4b23      	ldr	r3, [pc, #140]	; (801bde8 <ai_platform_network_post_init+0x224>)
 801bd5a:	2201      	movs	r2, #1
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	601a      	str	r2, [r3, #0]
 801bd60:	680b      	ldr	r3, [r1, #0]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d1fc      	bne.n	801bd60 <ai_platform_network_post_init+0x19c>
 801bd66:	4b21      	ldr	r3, [pc, #132]	; (801bdec <ai_platform_network_post_init+0x228>)
 801bd68:	491d      	ldr	r1, [pc, #116]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bd6a:	4a1e      	ldr	r2, [pc, #120]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bd6c:	6019      	str	r1, [r3, #0]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	4293      	cmp	r3, r2
 801bd72:	f43f af58 	beq.w	801bc26 <ai_platform_network_post_init+0x62>
 801bd76:	e7fe      	b.n	801bd76 <ai_platform_network_post_init+0x1b2>
 801bd78:	4b17      	ldr	r3, [pc, #92]	; (801bdd8 <ai_platform_network_post_init+0x214>)
 801bd7a:	2201      	movs	r2, #1
 801bd7c:	4619      	mov	r1, r3
 801bd7e:	601a      	str	r2, [r3, #0]
 801bd80:	680b      	ldr	r3, [r1, #0]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d1fc      	bne.n	801bd80 <ai_platform_network_post_init+0x1bc>
 801bd86:	4b15      	ldr	r3, [pc, #84]	; (801bddc <ai_platform_network_post_init+0x218>)
 801bd88:	4915      	ldr	r1, [pc, #84]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bd8a:	4a16      	ldr	r2, [pc, #88]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bd8c:	6019      	str	r1, [r3, #0]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	4293      	cmp	r3, r2
 801bd92:	d084      	beq.n	801bc9e <ai_platform_network_post_init+0xda>
 801bd94:	e7fe      	b.n	801bd94 <ai_platform_network_post_init+0x1d0>
 801bd96:	4b14      	ldr	r3, [pc, #80]	; (801bde8 <ai_platform_network_post_init+0x224>)
 801bd98:	2201      	movs	r2, #1
 801bd9a:	4619      	mov	r1, r3
 801bd9c:	601a      	str	r2, [r3, #0]
 801bd9e:	680b      	ldr	r3, [r1, #0]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d1fc      	bne.n	801bd9e <ai_platform_network_post_init+0x1da>
 801bda4:	4b11      	ldr	r3, [pc, #68]	; (801bdec <ai_platform_network_post_init+0x228>)
 801bda6:	490e      	ldr	r1, [pc, #56]	; (801bde0 <ai_platform_network_post_init+0x21c>)
 801bda8:	4a0e      	ldr	r2, [pc, #56]	; (801bde4 <ai_platform_network_post_init+0x220>)
 801bdaa:	6019      	str	r1, [r3, #0]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4293      	cmp	r3, r2
 801bdb0:	f43f af75 	beq.w	801bc9e <ai_platform_network_post_init+0xda>
 801bdb4:	e7fe      	b.n	801bdb4 <ai_platform_network_post_init+0x1f0>
 801bdb6:	f104 0010 	add.w	r0, r4, #16
 801bdba:	2210      	movs	r2, #16
 801bdbc:	2111      	movs	r1, #17
 801bdbe:	f000 fc47 	bl	801c650 <core_set_error>
 801bdc2:	4628      	mov	r0, r5
 801bdc4:	bd38      	pop	{r3, r4, r5, pc}
 801bdc6:	bf00      	nop
 801bdc8:	a1c00100 	.word	0xa1c00100
 801bdcc:	e0002000 	.word	0xe0002000
 801bdd0:	e0042000 	.word	0xe0042000
 801bdd4:	5c001000 	.word	0x5c001000
 801bdd8:	40023008 	.word	0x40023008
 801bddc:	40023000 	.word	0x40023000
 801bde0:	f407a5c2 	.word	0xf407a5c2
 801bde4:	b5e8b5cd 	.word	0xb5e8b5cd
 801bde8:	58024c08 	.word	0x58024c08
 801bdec:	58024c00 	.word	0x58024c00

0801bdf0 <ai_platform_network_process>:
 801bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf4:	460f      	mov	r7, r1
 801bdf6:	b083      	sub	sp, #12
 801bdf8:	4615      	mov	r5, r2
 801bdfa:	4604      	mov	r4, r0
 801bdfc:	b120      	cbz	r0, 801be08 <ai_platform_network_process+0x18>
 801bdfe:	4ba8      	ldr	r3, [pc, #672]	; (801c0a0 <ai_platform_network_process+0x2b0>)
 801be00:	6802      	ldr	r2, [r0, #0]
 801be02:	429a      	cmp	r2, r3
 801be04:	bf18      	it	ne
 801be06:	2400      	movne	r4, #0
 801be08:	4aa6      	ldr	r2, [pc, #664]	; (801c0a4 <ai_platform_network_process+0x2b4>)
 801be0a:	6813      	ldr	r3, [r2, #0]
 801be0c:	f023 0301 	bic.w	r3, r3, #1
 801be10:	6013      	str	r3, [r2, #0]
 801be12:	f7fe fb1b 	bl	801a44c <_ai_platform_acquire_crc>
 801be16:	4ba4      	ldr	r3, [pc, #656]	; (801c0a8 <ai_platform_network_process+0x2b8>)
 801be18:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801be22:	185a      	adds	r2, r3, r1
 801be24:	2a01      	cmp	r2, #1
 801be26:	f240 80d3 	bls.w	801bfd0 <ai_platform_network_process+0x1e0>
 801be2a:	f240 4249 	movw	r2, #1097	; 0x449
 801be2e:	4293      	cmp	r3, r2
 801be30:	f000 80ce 	beq.w	801bfd0 <ai_platform_network_process+0x1e0>
 801be34:	4b9d      	ldr	r3, [pc, #628]	; (801c0ac <ai_platform_network_process+0x2bc>)
 801be36:	681a      	ldr	r2, [r3, #0]
 801be38:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801be3c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801be40:	f000 80e4 	beq.w	801c00c <ai_platform_network_process+0x21c>
 801be44:	681a      	ldr	r2, [r3, #0]
 801be46:	f240 4183 	movw	r1, #1155	; 0x483
 801be4a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801be4e:	428a      	cmp	r2, r1
 801be50:	f000 8104 	beq.w	801c05c <ai_platform_network_process+0x26c>
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801be5a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801be5e:	f000 80ed 	beq.w	801c03c <ai_platform_network_process+0x24c>
 801be62:	f7fe faf5 	bl	801a450 <_ai_platform_release_crc>
 801be66:	2c00      	cmp	r4, #0
 801be68:	f000 80cb 	beq.w	801c002 <ai_platform_network_process+0x212>
 801be6c:	68e2      	ldr	r2, [r4, #12]
 801be6e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801be70:	f002 0203 	and.w	r2, r2, #3
 801be74:	2b00      	cmp	r3, #0
 801be76:	f000 80bb 	beq.w	801bff0 <ai_platform_network_process+0x200>
 801be7a:	2100      	movs	r1, #0
 801be7c:	2a03      	cmp	r2, #3
 801be7e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801be82:	6161      	str	r1, [r4, #20]
 801be84:	f040 80b7 	bne.w	801bff6 <ai_platform_network_process+0x206>
 801be88:	2f00      	cmp	r7, #0
 801be8a:	f000 80cf 	beq.w	801c02c <ai_platform_network_process+0x23c>
 801be8e:	faba f28a 	clz	r2, sl
 801be92:	0952      	lsrs	r2, r2, #5
 801be94:	2a00      	cmp	r2, #0
 801be96:	f040 80c9 	bne.w	801c02c <ai_platform_network_process+0x23c>
 801be9a:	f8ba 1000 	ldrh.w	r1, [sl]
 801be9e:	2900      	cmp	r1, #0
 801bea0:	f000 80c4 	beq.w	801c02c <ai_platform_network_process+0x23c>
 801bea4:	69b8      	ldr	r0, [r7, #24]
 801bea6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801beaa:	6806      	ldr	r6, [r0, #0]
 801beac:	2900      	cmp	r1, #0
 801beae:	f000 810c 	beq.w	801c0ca <ai_platform_network_process+0x2da>
 801beb2:	f8d1 9000 	ldr.w	r9, [r1]
 801beb6:	f1b9 0f00 	cmp.w	r9, #0
 801beba:	f000 8106 	beq.w	801c0ca <ai_platform_network_process+0x2da>
 801bebe:	f8da 3008 	ldr.w	r3, [sl, #8]
 801bec2:	4690      	mov	r8, r2
 801bec4:	f8d3 b000 	ldr.w	fp, [r3]
 801bec8:	f1bb 0f00 	cmp.w	fp, #0
 801becc:	d16d      	bne.n	801bfaa <ai_platform_network_process+0x1ba>
 801bece:	e0ad      	b.n	801c02c <ai_platform_network_process+0x23c>
 801bed0:	f8d9 000c 	ldr.w	r0, [r9, #12]
 801bed4:	69b9      	ldr	r1, [r7, #24]
 801bed6:	68c2      	ldr	r2, [r0, #12]
 801bed8:	68cb      	ldr	r3, [r1, #12]
 801beda:	429a      	cmp	r2, r3
 801bedc:	d170      	bne.n	801bfc0 <ai_platform_network_process+0x1d0>
 801bede:	6882      	ldr	r2, [r0, #8]
 801bee0:	688b      	ldr	r3, [r1, #8]
 801bee2:	429a      	cmp	r2, r3
 801bee4:	d16c      	bne.n	801bfc0 <ai_platform_network_process+0x1d0>
 801bee6:	6842      	ldr	r2, [r0, #4]
 801bee8:	684b      	ldr	r3, [r1, #4]
 801beea:	429a      	cmp	r2, r3
 801beec:	d168      	bne.n	801bfc0 <ai_platform_network_process+0x1d0>
 801beee:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801bef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bef6:	f004 fd6f 	bl	80209d8 <ai_array_get_data_byte_size>
 801befa:	9000      	str	r0, [sp, #0]
 801befc:	4648      	mov	r0, r9
 801befe:	f004 fcfd 	bl	80208fc <get_tensor_byte_size>
 801bf02:	9b00      	ldr	r3, [sp, #0]
 801bf04:	4283      	cmp	r3, r0
 801bf06:	d35b      	bcc.n	801bfc0 <ai_platform_network_process+0x1d0>
 801bf08:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801bf0c:	6818      	ldr	r0, [r3, #0]
 801bf0e:	f004 fd0d 	bl	802092c <ai_array_to_buffer_fmt>
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	4043      	eors	r3, r0
 801bf16:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801bf1a:	f040 823c 	bne.w	801c396 <ai_platform_network_process+0x5a6>
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	f000 80b4 	beq.w	801c08e <ai_platform_network_process+0x29e>
 801bf26:	69bb      	ldr	r3, [r7, #24]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	f000 80a6 	beq.w	801c07c <ai_platform_network_process+0x28c>
 801bf30:	429e      	cmp	r6, r3
 801bf32:	4648      	mov	r0, r9
 801bf34:	bf38      	it	cc
 801bf36:	461e      	movcc	r6, r3
 801bf38:	f004 fce0 	bl	80208fc <get_tensor_byte_size>
 801bf3c:	f8cb 0008 	str.w	r0, [fp, #8]
 801bf40:	69bb      	ldr	r3, [r7, #24]
 801bf42:	681a      	ldr	r2, [r3, #0]
 801bf44:	fb02 f200 	mul.w	r2, r2, r0
 801bf48:	f8cb 200c 	str.w	r2, [fp, #12]
 801bf4c:	6878      	ldr	r0, [r7, #4]
 801bf4e:	f8cb 0004 	str.w	r0, [fp, #4]
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	4413      	add	r3, r2
 801bf56:	f8cb 3000 	str.w	r3, [fp]
 801bf5a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801bf5e:	680b      	ldr	r3, [r1, #0]
 801bf60:	009a      	lsls	r2, r3, #2
 801bf62:	d409      	bmi.n	801bf78 <ai_platform_network_process+0x188>
 801bf64:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801bf68:	1a9b      	subs	r3, r3, r2
 801bf6a:	4418      	add	r0, r3
 801bf6c:	6088      	str	r0, [r1, #8]
 801bf6e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801bf72:	f8db 2004 	ldr.w	r2, [fp, #4]
 801bf76:	60da      	str	r2, [r3, #12]
 801bf78:	f108 0801 	add.w	r8, r8, #1
 801bf7c:	f8ba 3000 	ldrh.w	r3, [sl]
 801bf80:	4598      	cmp	r8, r3
 801bf82:	f080 80a1 	bcs.w	801c0c8 <ai_platform_network_process+0x2d8>
 801bf86:	f8da 3004 	ldr.w	r3, [sl, #4]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	f000 809c 	beq.w	801c0c8 <ai_platform_network_process+0x2d8>
 801bf90:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 801bf94:	f1b9 0f00 	cmp.w	r9, #0
 801bf98:	f000 8096 	beq.w	801c0c8 <ai_platform_network_process+0x2d8>
 801bf9c:	f8da 3008 	ldr.w	r3, [sl, #8]
 801bfa0:	371c      	adds	r7, #28
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 801bfa8:	d040      	beq.n	801c02c <ai_platform_network_process+0x23c>
 801bfaa:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801bfae:	2101      	movs	r1, #1
 801bfb0:	4638      	mov	r0, r7
 801bfb2:	685b      	ldr	r3, [r3, #4]
 801bfb4:	9300      	str	r3, [sp, #0]
 801bfb6:	f7fe fa0f 	bl	801a3d8 <ai_buffer_get_size>
 801bfba:	9b00      	ldr	r3, [sp, #0]
 801bfbc:	4283      	cmp	r3, r0
 801bfbe:	d287      	bcs.n	801bed0 <ai_platform_network_process+0xe0>
 801bfc0:	f104 0010 	add.w	r0, r4, #16
 801bfc4:	2218      	movs	r2, #24
 801bfc6:	2112      	movs	r1, #18
 801bfc8:	f000 fb42 	bl	801c650 <core_set_error>
 801bfcc:	2300      	movs	r3, #0
 801bfce:	e019      	b.n	801c004 <ai_platform_network_process+0x214>
 801bfd0:	4b37      	ldr	r3, [pc, #220]	; (801c0b0 <ai_platform_network_process+0x2c0>)
 801bfd2:	2201      	movs	r2, #1
 801bfd4:	4619      	mov	r1, r3
 801bfd6:	601a      	str	r2, [r3, #0]
 801bfd8:	680b      	ldr	r3, [r1, #0]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d1fc      	bne.n	801bfd8 <ai_platform_network_process+0x1e8>
 801bfde:	4b35      	ldr	r3, [pc, #212]	; (801c0b4 <ai_platform_network_process+0x2c4>)
 801bfe0:	4935      	ldr	r1, [pc, #212]	; (801c0b8 <ai_platform_network_process+0x2c8>)
 801bfe2:	4a36      	ldr	r2, [pc, #216]	; (801c0bc <ai_platform_network_process+0x2cc>)
 801bfe4:	6019      	str	r1, [r3, #0]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	4293      	cmp	r3, r2
 801bfea:	f43f af3a 	beq.w	801be62 <ai_platform_network_process+0x72>
 801bfee:	e7fe      	b.n	801bfee <ai_platform_network_process+0x1fe>
 801bff0:	2a03      	cmp	r2, #3
 801bff2:	6163      	str	r3, [r4, #20]
 801bff4:	d01a      	beq.n	801c02c <ai_platform_network_process+0x23c>
 801bff6:	f104 0010 	add.w	r0, r4, #16
 801bffa:	2230      	movs	r2, #48	; 0x30
 801bffc:	2111      	movs	r1, #17
 801bffe:	f000 fb27 	bl	801c650 <core_set_error>
 801c002:	2300      	movs	r3, #0
 801c004:	4618      	mov	r0, r3
 801c006:	b003      	add	sp, #12
 801c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c00c:	4b2c      	ldr	r3, [pc, #176]	; (801c0c0 <ai_platform_network_process+0x2d0>)
 801c00e:	2201      	movs	r2, #1
 801c010:	4619      	mov	r1, r3
 801c012:	601a      	str	r2, [r3, #0]
 801c014:	680b      	ldr	r3, [r1, #0]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d1fc      	bne.n	801c014 <ai_platform_network_process+0x224>
 801c01a:	4b2a      	ldr	r3, [pc, #168]	; (801c0c4 <ai_platform_network_process+0x2d4>)
 801c01c:	4926      	ldr	r1, [pc, #152]	; (801c0b8 <ai_platform_network_process+0x2c8>)
 801c01e:	4a27      	ldr	r2, [pc, #156]	; (801c0bc <ai_platform_network_process+0x2cc>)
 801c020:	6019      	str	r1, [r3, #0]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4293      	cmp	r3, r2
 801c026:	f43f af1c 	beq.w	801be62 <ai_platform_network_process+0x72>
 801c02a:	e7fe      	b.n	801c02a <ai_platform_network_process+0x23a>
 801c02c:	f104 0010 	add.w	r0, r4, #16
 801c030:	2217      	movs	r2, #23
 801c032:	2112      	movs	r1, #18
 801c034:	f000 fb0c 	bl	801c650 <core_set_error>
 801c038:	2300      	movs	r3, #0
 801c03a:	e7e3      	b.n	801c004 <ai_platform_network_process+0x214>
 801c03c:	4b1c      	ldr	r3, [pc, #112]	; (801c0b0 <ai_platform_network_process+0x2c0>)
 801c03e:	2201      	movs	r2, #1
 801c040:	4619      	mov	r1, r3
 801c042:	601a      	str	r2, [r3, #0]
 801c044:	680b      	ldr	r3, [r1, #0]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d1fc      	bne.n	801c044 <ai_platform_network_process+0x254>
 801c04a:	4b1a      	ldr	r3, [pc, #104]	; (801c0b4 <ai_platform_network_process+0x2c4>)
 801c04c:	491a      	ldr	r1, [pc, #104]	; (801c0b8 <ai_platform_network_process+0x2c8>)
 801c04e:	4a1b      	ldr	r2, [pc, #108]	; (801c0bc <ai_platform_network_process+0x2cc>)
 801c050:	6019      	str	r1, [r3, #0]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	4293      	cmp	r3, r2
 801c056:	f43f af04 	beq.w	801be62 <ai_platform_network_process+0x72>
 801c05a:	e7fe      	b.n	801c05a <ai_platform_network_process+0x26a>
 801c05c:	4b18      	ldr	r3, [pc, #96]	; (801c0c0 <ai_platform_network_process+0x2d0>)
 801c05e:	2201      	movs	r2, #1
 801c060:	4619      	mov	r1, r3
 801c062:	601a      	str	r2, [r3, #0]
 801c064:	680b      	ldr	r3, [r1, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d1fc      	bne.n	801c064 <ai_platform_network_process+0x274>
 801c06a:	4b16      	ldr	r3, [pc, #88]	; (801c0c4 <ai_platform_network_process+0x2d4>)
 801c06c:	4912      	ldr	r1, [pc, #72]	; (801c0b8 <ai_platform_network_process+0x2c8>)
 801c06e:	4a13      	ldr	r2, [pc, #76]	; (801c0bc <ai_platform_network_process+0x2cc>)
 801c070:	6019      	str	r1, [r3, #0]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4293      	cmp	r3, r2
 801c076:	f43f aef4 	beq.w	801be62 <ai_platform_network_process+0x72>
 801c07a:	e7fe      	b.n	801c07a <ai_platform_network_process+0x28a>
 801c07c:	f104 0010 	add.w	r0, r4, #16
 801c080:	2221      	movs	r2, #33	; 0x21
 801c082:	2112      	movs	r1, #18
 801c084:	9300      	str	r3, [sp, #0]
 801c086:	f000 fae3 	bl	801c650 <core_set_error>
 801c08a:	9b00      	ldr	r3, [sp, #0]
 801c08c:	e7ba      	b.n	801c004 <ai_platform_network_process+0x214>
 801c08e:	f104 0010 	add.w	r0, r4, #16
 801c092:	2217      	movs	r2, #23
 801c094:	2112      	movs	r1, #18
 801c096:	9300      	str	r3, [sp, #0]
 801c098:	f000 fada 	bl	801c650 <core_set_error>
 801c09c:	9b00      	ldr	r3, [sp, #0]
 801c09e:	e7b1      	b.n	801c004 <ai_platform_network_process+0x214>
 801c0a0:	a1c00100 	.word	0xa1c00100
 801c0a4:	e0002000 	.word	0xe0002000
 801c0a8:	e0042000 	.word	0xe0042000
 801c0ac:	5c001000 	.word	0x5c001000
 801c0b0:	40023008 	.word	0x40023008
 801c0b4:	40023000 	.word	0x40023000
 801c0b8:	f407a5c2 	.word	0xf407a5c2
 801c0bc:	b5e8b5cd 	.word	0xb5e8b5cd
 801c0c0:	58024c08 	.word	0x58024c08
 801c0c4:	58024c00 	.word	0x58024c00
 801c0c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801c0ca:	2d00      	cmp	r5, #0
 801c0cc:	f000 80ad 	beq.w	801c22a <ai_platform_network_process+0x43a>
 801c0d0:	2b01      	cmp	r3, #1
 801c0d2:	f240 8158 	bls.w	801c386 <ai_platform_network_process+0x596>
 801c0d6:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 801c0da:	f119 0f0c 	cmn.w	r9, #12
 801c0de:	f000 8152 	beq.w	801c386 <ai_platform_network_process+0x596>
 801c0e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	f000 814d 	beq.w	801c386 <ai_platform_network_process+0x596>
 801c0ec:	f04f 0800 	mov.w	r8, #0
 801c0f0:	4598      	cmp	r8, r3
 801c0f2:	f080 8099 	bcs.w	801c228 <ai_platform_network_process+0x438>
 801c0f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	f000 8094 	beq.w	801c228 <ai_platform_network_process+0x438>
 801c100:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 801c104:	f1bb 0f00 	cmp.w	fp, #0
 801c108:	f000 808e 	beq.w	801c228 <ai_platform_network_process+0x438>
 801c10c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801c110:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	eb13 070a 	adds.w	r7, r3, sl
 801c11a:	9300      	str	r3, [sp, #0]
 801c11c:	d07c      	beq.n	801c218 <ai_platform_network_process+0x428>
 801c11e:	f8db 3018 	ldr.w	r3, [fp, #24]
 801c122:	2101      	movs	r1, #1
 801c124:	4628      	mov	r0, r5
 801c126:	685b      	ldr	r3, [r3, #4]
 801c128:	9301      	str	r3, [sp, #4]
 801c12a:	f7fe f955 	bl	801a3d8 <ai_buffer_get_size>
 801c12e:	9b01      	ldr	r3, [sp, #4]
 801c130:	4283      	cmp	r3, r0
 801c132:	f0c0 8128 	bcc.w	801c386 <ai_platform_network_process+0x596>
 801c136:	f8db 000c 	ldr.w	r0, [fp, #12]
 801c13a:	69a9      	ldr	r1, [r5, #24]
 801c13c:	68c2      	ldr	r2, [r0, #12]
 801c13e:	68cb      	ldr	r3, [r1, #12]
 801c140:	429a      	cmp	r2, r3
 801c142:	f040 8120 	bne.w	801c386 <ai_platform_network_process+0x596>
 801c146:	6882      	ldr	r2, [r0, #8]
 801c148:	688b      	ldr	r3, [r1, #8]
 801c14a:	429a      	cmp	r2, r3
 801c14c:	f040 811b 	bne.w	801c386 <ai_platform_network_process+0x596>
 801c150:	6842      	ldr	r2, [r0, #4]
 801c152:	684b      	ldr	r3, [r1, #4]
 801c154:	429a      	cmp	r2, r3
 801c156:	f040 8116 	bne.w	801c386 <ai_platform_network_process+0x596>
 801c15a:	f8db 3018 	ldr.w	r3, [fp, #24]
 801c15e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c162:	f004 fc39 	bl	80209d8 <ai_array_get_data_byte_size>
 801c166:	9001      	str	r0, [sp, #4]
 801c168:	4658      	mov	r0, fp
 801c16a:	f004 fbc7 	bl	80208fc <get_tensor_byte_size>
 801c16e:	9b01      	ldr	r3, [sp, #4]
 801c170:	4283      	cmp	r3, r0
 801c172:	f0c0 8108 	bcc.w	801c386 <ai_platform_network_process+0x596>
 801c176:	f8db 3018 	ldr.w	r3, [fp, #24]
 801c17a:	6818      	ldr	r0, [r3, #0]
 801c17c:	f004 fbd6 	bl	802092c <ai_array_to_buffer_fmt>
 801c180:	682b      	ldr	r3, [r5, #0]
 801c182:	4043      	eors	r3, r0
 801c184:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801c188:	d13e      	bne.n	801c208 <ai_platform_network_process+0x418>
 801c18a:	686b      	ldr	r3, [r5, #4]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d032      	beq.n	801c1f6 <ai_platform_network_process+0x406>
 801c190:	69ab      	ldr	r3, [r5, #24]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	b333      	cbz	r3, 801c1e4 <ai_platform_network_process+0x3f4>
 801c196:	429e      	cmp	r6, r3
 801c198:	4658      	mov	r0, fp
 801c19a:	bf38      	it	cc
 801c19c:	461e      	movcc	r6, r3
 801c19e:	f004 fbad 	bl	80208fc <get_tensor_byte_size>
 801c1a2:	60b8      	str	r0, [r7, #8]
 801c1a4:	69ab      	ldr	r3, [r5, #24]
 801c1a6:	681a      	ldr	r2, [r3, #0]
 801c1a8:	fb02 f200 	mul.w	r2, r2, r0
 801c1ac:	60fa      	str	r2, [r7, #12]
 801c1ae:	6868      	ldr	r0, [r5, #4]
 801c1b0:	6078      	str	r0, [r7, #4]
 801c1b2:	686b      	ldr	r3, [r5, #4]
 801c1b4:	4413      	add	r3, r2
 801c1b6:	9a00      	ldr	r2, [sp, #0]
 801c1b8:	f842 300a 	str.w	r3, [r2, sl]
 801c1bc:	f8db 1018 	ldr.w	r1, [fp, #24]
 801c1c0:	680b      	ldr	r3, [r1, #0]
 801c1c2:	009b      	lsls	r3, r3, #2
 801c1c4:	d408      	bmi.n	801c1d8 <ai_platform_network_process+0x3e8>
 801c1c6:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801c1ca:	1a9b      	subs	r3, r3, r2
 801c1cc:	4418      	add	r0, r3
 801c1ce:	6088      	str	r0, [r1, #8]
 801c1d0:	687a      	ldr	r2, [r7, #4]
 801c1d2:	f8db 3018 	ldr.w	r3, [fp, #24]
 801c1d6:	60da      	str	r2, [r3, #12]
 801c1d8:	f108 0801 	add.w	r8, r8, #1
 801c1dc:	351c      	adds	r5, #28
 801c1de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c1e2:	e785      	b.n	801c0f0 <ai_platform_network_process+0x300>
 801c1e4:	f104 0010 	add.w	r0, r4, #16
 801c1e8:	2221      	movs	r2, #33	; 0x21
 801c1ea:	2113      	movs	r1, #19
 801c1ec:	9300      	str	r3, [sp, #0]
 801c1ee:	f000 fa2f 	bl	801c650 <core_set_error>
 801c1f2:	9b00      	ldr	r3, [sp, #0]
 801c1f4:	e706      	b.n	801c004 <ai_platform_network_process+0x214>
 801c1f6:	f104 0010 	add.w	r0, r4, #16
 801c1fa:	2217      	movs	r2, #23
 801c1fc:	2113      	movs	r1, #19
 801c1fe:	9300      	str	r3, [sp, #0]
 801c200:	f000 fa26 	bl	801c650 <core_set_error>
 801c204:	9b00      	ldr	r3, [sp, #0]
 801c206:	e6fd      	b.n	801c004 <ai_platform_network_process+0x214>
 801c208:	f104 0010 	add.w	r0, r4, #16
 801c20c:	2219      	movs	r2, #25
 801c20e:	2113      	movs	r1, #19
 801c210:	f000 fa1e 	bl	801c650 <core_set_error>
 801c214:	2300      	movs	r3, #0
 801c216:	e6f5      	b.n	801c004 <ai_platform_network_process+0x214>
 801c218:	f104 0010 	add.w	r0, r4, #16
 801c21c:	2217      	movs	r2, #23
 801c21e:	2113      	movs	r1, #19
 801c220:	f000 fa16 	bl	801c650 <core_set_error>
 801c224:	463b      	mov	r3, r7
 801c226:	e6ed      	b.n	801c004 <ai_platform_network_process+0x214>
 801c228:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801c22a:	82a6      	strh	r6, [r4, #20]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	f000 80a5 	beq.w	801c37c <ai_platform_network_process+0x58c>
 801c232:	2b01      	cmp	r3, #1
 801c234:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c236:	f240 80a4 	bls.w	801c382 <ai_platform_network_process+0x592>
 801c23a:	f105 070c 	add.w	r7, r5, #12
 801c23e:	8ae3      	ldrh	r3, [r4, #22]
 801c240:	8aa2      	ldrh	r2, [r4, #20]
 801c242:	429a      	cmp	r2, r3
 801c244:	f67f aede 	bls.w	801c004 <ai_platform_network_process+0x214>
 801c248:	2d00      	cmp	r5, #0
 801c24a:	d03a      	beq.n	801c2c2 <ai_platform_network_process+0x4d2>
 801c24c:	882b      	ldrh	r3, [r5, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d037      	beq.n	801c2c2 <ai_platform_network_process+0x4d2>
 801c252:	686b      	ldr	r3, [r5, #4]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d034      	beq.n	801c2c2 <ai_platform_network_process+0x4d2>
 801c258:	681a      	ldr	r2, [r3, #0]
 801c25a:	2a00      	cmp	r2, #0
 801c25c:	d031      	beq.n	801c2c2 <ai_platform_network_process+0x4d2>
 801c25e:	f04f 0800 	mov.w	r8, #0
 801c262:	e01b      	b.n	801c29c <ai_platform_network_process+0x4ac>
 801c264:	68d9      	ldr	r1, [r3, #12]
 801c266:	1a40      	subs	r0, r0, r1
 801c268:	eb0c 0100 	add.w	r1, ip, r0
 801c26c:	6099      	str	r1, [r3, #8]
 801c26e:	6993      	ldr	r3, [r2, #24]
 801c270:	6872      	ldr	r2, [r6, #4]
 801c272:	60da      	str	r2, [r3, #12]
 801c274:	6873      	ldr	r3, [r6, #4]
 801c276:	f108 0801 	add.w	r8, r8, #1
 801c27a:	68b1      	ldr	r1, [r6, #8]
 801c27c:	f85a 2009 	ldr.w	r2, [sl, r9]
 801c280:	440b      	add	r3, r1
 801c282:	4293      	cmp	r3, r2
 801c284:	d301      	bcc.n	801c28a <ai_platform_network_process+0x49a>
 801c286:	68f3      	ldr	r3, [r6, #12]
 801c288:	1ad3      	subs	r3, r2, r3
 801c28a:	6073      	str	r3, [r6, #4]
 801c28c:	882b      	ldrh	r3, [r5, #0]
 801c28e:	4598      	cmp	r8, r3
 801c290:	d217      	bcs.n	801c2c2 <ai_platform_network_process+0x4d2>
 801c292:	686b      	ldr	r3, [r5, #4]
 801c294:	b1ab      	cbz	r3, 801c2c2 <ai_platform_network_process+0x4d2>
 801c296:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801c29a:	b192      	cbz	r2, 801c2c2 <ai_platform_network_process+0x4d2>
 801c29c:	68a9      	ldr	r1, [r5, #8]
 801c29e:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801c2a2:	6993      	ldr	r3, [r2, #24]
 801c2a4:	f8d1 a000 	ldr.w	sl, [r1]
 801c2a8:	6819      	ldr	r1, [r3, #0]
 801c2aa:	eb0a 0609 	add.w	r6, sl, r9
 801c2ae:	6898      	ldr	r0, [r3, #8]
 801c2b0:	0089      	lsls	r1, r1, #2
 801c2b2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801c2b6:	d5d5      	bpl.n	801c264 <ai_platform_network_process+0x474>
 801c2b8:	4661      	mov	r1, ip
 801c2ba:	68b2      	ldr	r2, [r6, #8]
 801c2bc:	f004 fc0a 	bl	8020ad4 <memcpy>
 801c2c0:	e7d8      	b.n	801c274 <ai_platform_network_process+0x484>
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	f001 f8b0 	bl	801d428 <ai_layers_forward_all>
 801c2c8:	2f00      	cmp	r7, #0
 801c2ca:	d04b      	beq.n	801c364 <ai_platform_network_process+0x574>
 801c2cc:	883b      	ldrh	r3, [r7, #0]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d048      	beq.n	801c364 <ai_platform_network_process+0x574>
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d045      	beq.n	801c364 <ai_platform_network_process+0x574>
 801c2d8:	6818      	ldr	r0, [r3, #0]
 801c2da:	2800      	cmp	r0, #0
 801c2dc:	d042      	beq.n	801c364 <ai_platform_network_process+0x574>
 801c2de:	f04f 0800 	mov.w	r8, #0
 801c2e2:	e01c      	b.n	801c31e <ai_platform_network_process+0x52e>
 801c2e4:	f85a 2009 	ldr.w	r2, [sl, r9]
 801c2e8:	4596      	cmp	lr, r2
 801c2ea:	d302      	bcc.n	801c2f2 <ai_platform_network_process+0x502>
 801c2ec:	68f3      	ldr	r3, [r6, #12]
 801c2ee:	eba2 0e03 	sub.w	lr, r2, r3
 801c2f2:	f8c6 e004 	str.w	lr, [r6, #4]
 801c2f6:	f108 0801 	add.w	r8, r8, #1
 801c2fa:	6981      	ldr	r1, [r0, #24]
 801c2fc:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801c300:	1ad2      	subs	r2, r2, r3
 801c302:	eb0e 0302 	add.w	r3, lr, r2
 801c306:	608b      	str	r3, [r1, #8]
 801c308:	6983      	ldr	r3, [r0, #24]
 801c30a:	6872      	ldr	r2, [r6, #4]
 801c30c:	60da      	str	r2, [r3, #12]
 801c30e:	883b      	ldrh	r3, [r7, #0]
 801c310:	4598      	cmp	r8, r3
 801c312:	d227      	bcs.n	801c364 <ai_platform_network_process+0x574>
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	b32b      	cbz	r3, 801c364 <ai_platform_network_process+0x574>
 801c318:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801c31c:	b310      	cbz	r0, 801c364 <ai_platform_network_process+0x574>
 801c31e:	68bb      	ldr	r3, [r7, #8]
 801c320:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801c324:	6981      	ldr	r1, [r0, #24]
 801c326:	f8d3 a000 	ldr.w	sl, [r3]
 801c32a:	680b      	ldr	r3, [r1, #0]
 801c32c:	eb0a 0609 	add.w	r6, sl, r9
 801c330:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 801c334:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 801c338:	eb0c 0e02 	add.w	lr, ip, r2
 801c33c:	d0d2      	beq.n	801c2e4 <ai_platform_network_process+0x4f4>
 801c33e:	6889      	ldr	r1, [r1, #8]
 801c340:	4660      	mov	r0, ip
 801c342:	f004 fbc7 	bl	8020ad4 <memcpy>
 801c346:	f85a 2009 	ldr.w	r2, [sl, r9]
 801c34a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801c34e:	440b      	add	r3, r1
 801c350:	4293      	cmp	r3, r2
 801c352:	d301      	bcc.n	801c358 <ai_platform_network_process+0x568>
 801c354:	68f3      	ldr	r3, [r6, #12]
 801c356:	1ad3      	subs	r3, r2, r3
 801c358:	6073      	str	r3, [r6, #4]
 801c35a:	f108 0801 	add.w	r8, r8, #1
 801c35e:	883b      	ldrh	r3, [r7, #0]
 801c360:	4598      	cmp	r8, r3
 801c362:	d3d7      	bcc.n	801c314 <ai_platform_network_process+0x524>
 801c364:	8ae3      	ldrh	r3, [r4, #22]
 801c366:	8aa2      	ldrh	r2, [r4, #20]
 801c368:	3301      	adds	r3, #1
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	429a      	cmp	r2, r3
 801c36e:	82e3      	strh	r3, [r4, #22]
 801c370:	f63f af6a 	bhi.w	801c248 <ai_platform_network_process+0x458>
 801c374:	4618      	mov	r0, r3
 801c376:	b003      	add	sp, #12
 801c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c37c:	461d      	mov	r5, r3
 801c37e:	461f      	mov	r7, r3
 801c380:	e75d      	b.n	801c23e <ai_platform_network_process+0x44e>
 801c382:	2700      	movs	r7, #0
 801c384:	e75b      	b.n	801c23e <ai_platform_network_process+0x44e>
 801c386:	f104 0010 	add.w	r0, r4, #16
 801c38a:	2218      	movs	r2, #24
 801c38c:	2113      	movs	r1, #19
 801c38e:	f000 f95f 	bl	801c650 <core_set_error>
 801c392:	2300      	movs	r3, #0
 801c394:	e636      	b.n	801c004 <ai_platform_network_process+0x214>
 801c396:	f104 0010 	add.w	r0, r4, #16
 801c39a:	2219      	movs	r2, #25
 801c39c:	2112      	movs	r1, #18
 801c39e:	f000 f957 	bl	801c650 <core_set_error>
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	e62e      	b.n	801c004 <ai_platform_network_process+0x214>
 801c3a6:	bf00      	nop

0801c3a8 <node_convert>:
 801c3a8:	6982      	ldr	r2, [r0, #24]
 801c3aa:	8813      	ldrh	r3, [r2, #0]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d04b      	beq.n	801c448 <node_convert+0xa0>
 801c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3b2:	6852      	ldr	r2, [r2, #4]
 801c3b4:	b083      	sub	sp, #12
 801c3b6:	6855      	ldr	r5, [r2, #4]
 801c3b8:	b105      	cbz	r5, 801c3bc <node_convert+0x14>
 801c3ba:	682d      	ldr	r5, [r5, #0]
 801c3bc:	2b01      	cmp	r3, #1
 801c3be:	d940      	bls.n	801c442 <node_convert+0x9a>
 801c3c0:	6916      	ldr	r6, [r2, #16]
 801c3c2:	b106      	cbz	r6, 801c3c6 <node_convert+0x1e>
 801c3c4:	6836      	ldr	r6, [r6, #0]
 801c3c6:	68ab      	ldr	r3, [r5, #8]
 801c3c8:	0a1b      	lsrs	r3, r3, #8
 801c3ca:	f000 80e3 	beq.w	801c594 <node_convert+0x1ec>
 801c3ce:	68e9      	ldr	r1, [r5, #12]
 801c3d0:	2401      	movs	r4, #1
 801c3d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c3d6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c3da:	428b      	cmp	r3, r1
 801c3dc:	fb02 f404 	mul.w	r4, r2, r4
 801c3e0:	d1f9      	bne.n	801c3d6 <node_convert+0x2e>
 801c3e2:	69aa      	ldr	r2, [r5, #24]
 801c3e4:	69b7      	ldr	r7, [r6, #24]
 801c3e6:	6813      	ldr	r3, [r2, #0]
 801c3e8:	6890      	ldr	r0, [r2, #8]
 801c3ea:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801c3ee:	2a01      	cmp	r2, #1
 801c3f0:	d055      	beq.n	801c49e <node_convert+0xf6>
 801c3f2:	6829      	ldr	r1, [r5, #0]
 801c3f4:	15da      	asrs	r2, r3, #23
 801c3f6:	68bd      	ldr	r5, [r7, #8]
 801c3f8:	b341      	cbz	r1, 801c44c <node_convert+0xa4>
 801c3fa:	684e      	ldr	r6, [r1, #4]
 801c3fc:	f002 0201 	and.w	r2, r2, #1
 801c400:	2e00      	cmp	r6, #0
 801c402:	f000 80c9 	beq.w	801c598 <node_convert+0x1f0>
 801c406:	884b      	ldrh	r3, [r1, #2]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	f000 8087 	beq.w	801c51c <node_convert+0x174>
 801c40e:	6833      	ldr	r3, [r6, #0]
 801c410:	ed93 7a00 	vldr	s14, [r3]
 801c414:	6873      	ldr	r3, [r6, #4]
 801c416:	2a00      	cmp	r2, #0
 801c418:	f000 80d5 	beq.w	801c5c6 <node_convert+0x21e>
 801c41c:	f993 2000 	ldrsb.w	r2, [r3]
 801c420:	b16c      	cbz	r4, 801c43e <node_convert+0x96>
 801c422:	4404      	add	r4, r0
 801c424:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801c428:	1a9b      	subs	r3, r3, r2
 801c42a:	42a0      	cmp	r0, r4
 801c42c:	ee07 3a90 	vmov	s15, r3
 801c430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c434:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c438:	ece5 7a01 	vstmia	r5!, {s15}
 801c43c:	d1f2      	bne.n	801c424 <node_convert+0x7c>
 801c43e:	b003      	add	sp, #12
 801c440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c442:	2300      	movs	r3, #0
 801c444:	685b      	ldr	r3, [r3, #4]
 801c446:	deff      	udf	#255	; 0xff
 801c448:	685b      	ldr	r3, [r3, #4]
 801c44a:	deff      	udf	#255	; 0xff
 801c44c:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801c450:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801c454:	f002 0201 	and.w	r2, r2, #1
 801c458:	1b8e      	subs	r6, r1, r6
 801c45a:	2908      	cmp	r1, #8
 801c45c:	4629      	mov	r1, r5
 801c45e:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801c462:	eba6 0602 	sub.w	r6, r6, r2
 801c466:	4622      	mov	r2, r4
 801c468:	d05e      	beq.n	801c528 <node_convert+0x180>
 801c46a:	f004 f961 	bl	8020730 <st_dsp_arm_q15_to_float>
 801c46e:	2e00      	cmp	r6, #0
 801c470:	d0e5      	beq.n	801c43e <node_convert+0x96>
 801c472:	ee07 6a90 	vmov	s15, r6
 801c476:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801c47a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c47e:	f007 fb97 	bl	8023bb0 <powf>
 801c482:	2c00      	cmp	r4, #0
 801c484:	d0db      	beq.n	801c43e <node_convert+0x96>
 801c486:	2300      	movs	r3, #0
 801c488:	ecf5 7a01 	vldmia	r5!, {s15}
 801c48c:	3301      	adds	r3, #1
 801c48e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c492:	429c      	cmp	r4, r3
 801c494:	ed45 7a01 	vstr	s15, [r5, #-4]
 801c498:	d1f6      	bne.n	801c488 <node_convert+0xe0>
 801c49a:	b003      	add	sp, #12
 801c49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	6835      	ldr	r5, [r6, #0]
 801c4a2:	15da      	asrs	r2, r3, #23
 801c4a4:	2d00      	cmp	r5, #0
 801c4a6:	f000 8090 	beq.w	801c5ca <node_convert+0x222>
 801c4aa:	6869      	ldr	r1, [r5, #4]
 801c4ac:	f002 0301 	and.w	r3, r2, #1
 801c4b0:	68ba      	ldr	r2, [r7, #8]
 801c4b2:	2900      	cmp	r1, #0
 801c4b4:	d03b      	beq.n	801c52e <node_convert+0x186>
 801c4b6:	886d      	ldrh	r5, [r5, #2]
 801c4b8:	2d00      	cmp	r5, #0
 801c4ba:	d03e      	beq.n	801c53a <node_convert+0x192>
 801c4bc:	680d      	ldr	r5, [r1, #0]
 801c4be:	edd5 7a00 	vldr	s15, [r5]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	f000 80b3 	beq.w	801c62e <node_convert+0x286>
 801c4c8:	684b      	ldr	r3, [r1, #4]
 801c4ca:	f993 3000 	ldrsb.w	r3, [r3]
 801c4ce:	ee07 3a10 	vmov	s14, r3
 801c4d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c4d6:	2c00      	cmp	r4, #0
 801c4d8:	d0b1      	beq.n	801c43e <node_convert+0x96>
 801c4da:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801c4de:	4414      	add	r4, r2
 801c4e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c4e4:	eddf 5a57 	vldr	s11, [pc, #348]	; 801c644 <node_convert+0x29c>
 801c4e8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 801c4ec:	ecf0 7a01 	vldmia	r0!, {s15}
 801c4f0:	eeb0 5a47 	vmov.f32	s10, s14
 801c4f4:	eea7 5aa6 	vfma.f32	s10, s15, s13
 801c4f8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801c4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c500:	db3b      	blt.n	801c57a <node_convert+0x1d2>
 801c502:	ee75 7a06 	vadd.f32	s15, s10, s12
 801c506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c50a:	ee17 3a90 	vmov	r3, s15
 801c50e:	f303 0307 	ssat	r3, #8, r3
 801c512:	f802 3b01 	strb.w	r3, [r2], #1
 801c516:	42a2      	cmp	r2, r4
 801c518:	d1e8      	bne.n	801c4ec <node_convert+0x144>
 801c51a:	e790      	b.n	801c43e <node_convert+0x96>
 801c51c:	2a00      	cmp	r2, #0
 801c51e:	d03d      	beq.n	801c59c <node_convert+0x1f4>
 801c520:	461a      	mov	r2, r3
 801c522:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801c648 <node_convert+0x2a0>
 801c526:	e77b      	b.n	801c420 <node_convert+0x78>
 801c528:	f004 f96a 	bl	8020800 <st_dsp_arm_q7_to_float>
 801c52c:	e79f      	b.n	801c46e <node_convert+0xc6>
 801c52e:	b133      	cbz	r3, 801c53e <node_convert+0x196>
 801c530:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801c648 <node_convert+0x2a0>
 801c534:	eef0 7a47 	vmov.f32	s15, s14
 801c538:	e7cd      	b.n	801c4d6 <node_convert+0x12e>
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d1f8      	bne.n	801c530 <node_convert+0x188>
 801c53e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c542:	eddf 7a41 	vldr	s15, [pc, #260]	; 801c648 <node_convert+0x2a0>
 801c546:	2c00      	cmp	r4, #0
 801c548:	f43f af79 	beq.w	801c43e <node_convert+0x96>
 801c54c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c550:	4414      	add	r4, r2
 801c552:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801c556:	ecf0 7a01 	vldmia	r0!, {s15}
 801c55a:	eeb0 6a47 	vmov.f32	s12, s14
 801c55e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801c562:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801c566:	ee17 3a90 	vmov	r3, s15
 801c56a:	f383 0308 	usat	r3, #8, r3
 801c56e:	f802 3b01 	strb.w	r3, [r2], #1
 801c572:	42a2      	cmp	r2, r4
 801c574:	d1ef      	bne.n	801c556 <node_convert+0x1ae>
 801c576:	b003      	add	sp, #12
 801c578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c57a:	ee75 7a65 	vsub.f32	s15, s10, s11
 801c57e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c582:	ee17 3a90 	vmov	r3, s15
 801c586:	f303 0307 	ssat	r3, #8, r3
 801c58a:	f802 3b01 	strb.w	r3, [r2], #1
 801c58e:	4294      	cmp	r4, r2
 801c590:	d1ac      	bne.n	801c4ec <node_convert+0x144>
 801c592:	e754      	b.n	801c43e <node_convert+0x96>
 801c594:	2401      	movs	r4, #1
 801c596:	e724      	b.n	801c3e2 <node_convert+0x3a>
 801c598:	2a00      	cmp	r2, #0
 801c59a:	d13f      	bne.n	801c61c <node_convert+0x274>
 801c59c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 801c648 <node_convert+0x2a0>
 801c5a0:	2c00      	cmp	r4, #0
 801c5a2:	f43f af4c 	beq.w	801c43e <node_convert+0x96>
 801c5a6:	4404      	add	r4, r0
 801c5a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c5ac:	1a9b      	subs	r3, r3, r2
 801c5ae:	42a0      	cmp	r0, r4
 801c5b0:	ee07 3a90 	vmov	s15, r3
 801c5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c5bc:	ece5 7a01 	vstmia	r5!, {s15}
 801c5c0:	d1f2      	bne.n	801c5a8 <node_convert+0x200>
 801c5c2:	b003      	add	sp, #12
 801c5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5c6:	781a      	ldrb	r2, [r3, #0]
 801c5c8:	e7ea      	b.n	801c5a0 <node_convert+0x1f8>
 801c5ca:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801c5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c5d2:	f002 0201 	and.w	r2, r2, #1
 801c5d6:	1af3      	subs	r3, r6, r3
 801c5d8:	3340      	adds	r3, #64	; 0x40
 801c5da:	1a9b      	subs	r3, r3, r2
 801c5dc:	d015      	beq.n	801c60a <node_convert+0x262>
 801c5de:	425b      	negs	r3, r3
 801c5e0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801c5e4:	9001      	str	r0, [sp, #4]
 801c5e6:	ee00 3a90 	vmov	s1, r3
 801c5ea:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c5ee:	f007 fadf 	bl	8023bb0 <powf>
 801c5f2:	9801      	ldr	r0, [sp, #4]
 801c5f4:	b14c      	cbz	r4, 801c60a <node_convert+0x262>
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	ecf3 7a01 	vldmia	r3!, {s15}
 801c5fc:	3501      	adds	r5, #1
 801c5fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c602:	42ac      	cmp	r4, r5
 801c604:	ed43 7a01 	vstr	s15, [r3, #-4]
 801c608:	d1f6      	bne.n	801c5f8 <node_convert+0x250>
 801c60a:	2e08      	cmp	r6, #8
 801c60c:	68b9      	ldr	r1, [r7, #8]
 801c60e:	4622      	mov	r2, r4
 801c610:	d008      	beq.n	801c624 <node_convert+0x27c>
 801c612:	b003      	add	sp, #12
 801c614:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c618:	f003 bf08 	b.w	802042c <st_dsp_arm_float_to_q15>
 801c61c:	4632      	mov	r2, r6
 801c61e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801c648 <node_convert+0x2a0>
 801c622:	e6fd      	b.n	801c420 <node_convert+0x78>
 801c624:	b003      	add	sp, #12
 801c626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c62a:	f003 bfb9 	b.w	80205a0 <st_dsp_arm_float_to_q7>
 801c62e:	684b      	ldr	r3, [r1, #4]
 801c630:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801c634:	781b      	ldrb	r3, [r3, #0]
 801c636:	ee07 3a10 	vmov	s14, r3
 801c63a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c63e:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c642:	e780      	b.n	801c546 <node_convert+0x19e>
 801c644:	3efffffc 	.word	0x3efffffc
 801c648:	00000000 	.word	0x00000000

0801c64c <core_init>:
 801c64c:	2001      	movs	r0, #1
 801c64e:	4770      	bx	lr

0801c650 <core_set_error>:
 801c650:	4603      	mov	r3, r0
 801c652:	7800      	ldrb	r0, [r0, #0]
 801c654:	b930      	cbnz	r0, 801c664 <core_set_error+0x14>
 801c656:	7019      	strb	r1, [r3, #0]
 801c658:	2001      	movs	r0, #1
 801c65a:	6819      	ldr	r1, [r3, #0]
 801c65c:	f362 211f 	bfi	r1, r2, #8, #24
 801c660:	6019      	str	r1, [r3, #0]
 801c662:	4770      	bx	lr
 801c664:	2000      	movs	r0, #0
 801c666:	4770      	bx	lr

0801c668 <func_dummy>:
 801c668:	4770      	bx	lr
 801c66a:	bf00      	nop

0801c66c <forward_conv2d_integer_UAUA>:
 801c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c670:	6983      	ldr	r3, [r0, #24]
 801c672:	b0ab      	sub	sp, #172	; 0xac
 801c674:	881d      	ldrh	r5, [r3, #0]
 801c676:	2d00      	cmp	r5, #0
 801c678:	f000 812b 	beq.w	801c8d2 <forward_conv2d_integer_UAUA+0x266>
 801c67c:	685c      	ldr	r4, [r3, #4]
 801c67e:	6863      	ldr	r3, [r4, #4]
 801c680:	b103      	cbz	r3, 801c684 <forward_conv2d_integer_UAUA+0x18>
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	2d01      	cmp	r5, #1
 801c686:	f240 811f 	bls.w	801c8c8 <forward_conv2d_integer_UAUA+0x25c>
 801c68a:	6922      	ldr	r2, [r4, #16]
 801c68c:	2a00      	cmp	r2, #0
 801c68e:	f000 8130 	beq.w	801c8f2 <forward_conv2d_integer_UAUA+0x286>
 801c692:	6812      	ldr	r2, [r2, #0]
 801c694:	9222      	str	r2, [sp, #136]	; 0x88
 801c696:	2d02      	cmp	r5, #2
 801c698:	f000 8116 	beq.w	801c8c8 <forward_conv2d_integer_UAUA+0x25c>
 801c69c:	69e2      	ldr	r2, [r4, #28]
 801c69e:	2a00      	cmp	r2, #0
 801c6a0:	f040 811f 	bne.w	801c8e2 <forward_conv2d_integer_UAUA+0x276>
 801c6a4:	4611      	mov	r1, r2
 801c6a6:	f114 0618 	adds.w	r6, r4, #24
 801c6aa:	d007      	beq.n	801c6bc <forward_conv2d_integer_UAUA+0x50>
 801c6ac:	8b26      	ldrh	r6, [r4, #24]
 801c6ae:	2e01      	cmp	r6, #1
 801c6b0:	f240 8129 	bls.w	801c906 <forward_conv2d_integer_UAUA+0x29a>
 801c6b4:	2a00      	cmp	r2, #0
 801c6b6:	f000 824f 	beq.w	801cb58 <forward_conv2d_integer_UAUA+0x4ec>
 801c6ba:	6856      	ldr	r6, [r2, #4]
 801c6bc:	2d03      	cmp	r5, #3
 801c6be:	f000 8103 	beq.w	801c8c8 <forward_conv2d_integer_UAUA+0x25c>
 801c6c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c6c4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 801c6c6:	9521      	str	r5, [sp, #132]	; 0x84
 801c6c8:	2c00      	cmp	r4, #0
 801c6ca:	f000 810c 	beq.w	801c8e6 <forward_conv2d_integer_UAUA+0x27a>
 801c6ce:	f8d4 c000 	ldr.w	ip, [r4]
 801c6d2:	2d00      	cmp	r5, #0
 801c6d4:	f000 8236 	beq.w	801cb44 <forward_conv2d_integer_UAUA+0x4d8>
 801c6d8:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801c6dc:	68dc      	ldr	r4, [r3, #12]
 801c6de:	f8da 500c 	ldr.w	r5, [sl, #12]
 801c6e2:	69b7      	ldr	r7, [r6, #24]
 801c6e4:	6866      	ldr	r6, [r4, #4]
 801c6e6:	f8dc 8018 	ldr.w	r8, [ip, #24]
 801c6ea:	9624      	str	r6, [sp, #144]	; 0x90
 801c6ec:	686e      	ldr	r6, [r5, #4]
 801c6ee:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801c6f2:	9625      	str	r6, [sp, #148]	; 0x94
 801c6f4:	b2b6      	uxth	r6, r6
 801c6f6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 801c6fa:	9615      	str	r6, [sp, #84]	; 0x54
 801c6fc:	68be      	ldr	r6, [r7, #8]
 801c6fe:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 801c702:	961b      	str	r6, [sp, #108]	; 0x6c
 801c704:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801c708:	e9d4 4702 	ldrd	r4, r7, [r4, #8]
 801c70c:	9616      	str	r6, [sp, #88]	; 0x58
 801c70e:	941e      	str	r4, [sp, #120]	; 0x78
 801c710:	f8bc 4000 	ldrh.w	r4, [ip]
 801c714:	68ee      	ldr	r6, [r5, #12]
 801c716:	9420      	str	r4, [sp, #128]	; 0x80
 801c718:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 801c71c:	68ad      	ldr	r5, [r5, #8]
 801c71e:	941a      	str	r4, [sp, #104]	; 0x68
 801c720:	9618      	str	r6, [sp, #96]	; 0x60
 801c722:	951d      	str	r5, [sp, #116]	; 0x74
 801c724:	e9de 4c01 	ldrd	r4, ip, [lr, #4]
 801c728:	941c      	str	r4, [sp, #112]	; 0x70
 801c72a:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 801c72c:	9419      	str	r4, [sp, #100]	; 0x64
 801c72e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
 801c730:	941f      	str	r4, [sp, #124]	; 0x7c
 801c732:	69c4      	ldr	r4, [r0, #28]
 801c734:	9423      	str	r4, [sp, #140]	; 0x8c
 801c736:	2a00      	cmp	r2, #0
 801c738:	f000 80cd 	beq.w	801c8d6 <forward_conv2d_integer_UAUA+0x26a>
 801c73c:	6896      	ldr	r6, [r2, #8]
 801c73e:	2e00      	cmp	r6, #0
 801c740:	f000 80c9 	beq.w	801c8d6 <forward_conv2d_integer_UAUA+0x26a>
 801c744:	69b2      	ldr	r2, [r6, #24]
 801c746:	2a00      	cmp	r2, #0
 801c748:	bf08      	it	eq
 801c74a:	2600      	moveq	r6, #0
 801c74c:	6808      	ldr	r0, [r1, #0]
 801c74e:	681c      	ldr	r4, [r3, #0]
 801c750:	f8da 2000 	ldr.w	r2, [sl]
 801c754:	9014      	str	r0, [sp, #80]	; 0x50
 801c756:	2c00      	cmp	r4, #0
 801c758:	f000 8099 	beq.w	801c88e <forward_conv2d_integer_UAUA+0x222>
 801c75c:	6860      	ldr	r0, [r4, #4]
 801c75e:	2800      	cmp	r0, #0
 801c760:	f000 8095 	beq.w	801c88e <forward_conv2d_integer_UAUA+0x222>
 801c764:	8865      	ldrh	r5, [r4, #2]
 801c766:	2d00      	cmp	r5, #0
 801c768:	f000 8091 	beq.w	801c88e <forward_conv2d_integer_UAUA+0x222>
 801c76c:	6800      	ldr	r0, [r0, #0]
 801c76e:	edd0 7a00 	vldr	s15, [r0]
 801c772:	b12a      	cbz	r2, 801c780 <forward_conv2d_integer_UAUA+0x114>
 801c774:	6850      	ldr	r0, [r2, #4]
 801c776:	b118      	cbz	r0, 801c780 <forward_conv2d_integer_UAUA+0x114>
 801c778:	8855      	ldrh	r5, [r2, #2]
 801c77a:	2d00      	cmp	r5, #0
 801c77c:	f040 81dc 	bne.w	801cb38 <forward_conv2d_integer_UAUA+0x4cc>
 801c780:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 801c9b0 <forward_conv2d_integer_UAUA+0x344>
 801c784:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c786:	4584      	cmp	ip, r0
 801c788:	f040 8084 	bne.w	801c894 <forward_conv2d_integer_UAUA+0x228>
 801c78c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c78e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801c790:	42a8      	cmp	r0, r5
 801c792:	d17f      	bne.n	801c894 <forward_conv2d_integer_UAUA+0x228>
 801c794:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c796:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c798:	42a8      	cmp	r0, r5
 801c79a:	d17b      	bne.n	801c894 <forward_conv2d_integer_UAUA+0x228>
 801c79c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c79e:	4287      	cmp	r7, r0
 801c7a0:	d178      	bne.n	801c894 <forward_conv2d_integer_UAUA+0x228>
 801c7a2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c7a4:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c7a6:	42a8      	cmp	r0, r5
 801c7a8:	bf08      	it	eq
 801c7aa:	f1bb 0f03 	cmpeq.w	fp, #3
 801c7ae:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c7b0:	bf0c      	ite	eq
 801c7b2:	2501      	moveq	r5, #1
 801c7b4:	2500      	movne	r5, #0
 801c7b6:	2801      	cmp	r0, #1
 801c7b8:	d070      	beq.n	801c89c <forward_conv2d_integer_UAUA+0x230>
 801c7ba:	f04f 0e00 	mov.w	lr, #0
 801c7be:	6989      	ldr	r1, [r1, #24]
 801c7c0:	6998      	ldr	r0, [r3, #24]
 801c7c2:	6889      	ldr	r1, [r1, #8]
 801c7c4:	f8da 3018 	ldr.w	r3, [sl, #24]
 801c7c8:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801c7cc:	9117      	str	r1, [sp, #92]	; 0x5c
 801c7ce:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c7d2:	b13c      	cbz	r4, 801c7e4 <forward_conv2d_integer_UAUA+0x178>
 801c7d4:	6863      	ldr	r3, [r4, #4]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	f000 81b2 	beq.w	801cb40 <forward_conv2d_integer_UAUA+0x4d4>
 801c7dc:	8864      	ldrh	r4, [r4, #2]
 801c7de:	2c00      	cmp	r4, #0
 801c7e0:	f040 81a7 	bne.w	801cb32 <forward_conv2d_integer_UAUA+0x4c6>
 801c7e4:	b13a      	cbz	r2, 801c7f6 <forward_conv2d_integer_UAUA+0x18a>
 801c7e6:	6853      	ldr	r3, [r2, #4]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	f000 81b3 	beq.w	801cb54 <forward_conv2d_integer_UAUA+0x4e8>
 801c7ee:	8852      	ldrh	r2, [r2, #2]
 801c7f0:	2a00      	cmp	r2, #0
 801c7f2:	f040 819a 	bne.w	801cb2a <forward_conv2d_integer_UAUA+0x4be>
 801c7f6:	9213      	str	r2, [sp, #76]	; 0x4c
 801c7f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c7fa:	b133      	cbz	r3, 801c80a <forward_conv2d_integer_UAUA+0x19e>
 801c7fc:	685a      	ldr	r2, [r3, #4]
 801c7fe:	2a00      	cmp	r2, #0
 801c800:	f000 81a5 	beq.w	801cb4e <forward_conv2d_integer_UAUA+0x4e2>
 801c804:	e9d2 3200 	ldrd	r3, r2, [r2]
 801c808:	9214      	str	r2, [sp, #80]	; 0x50
 801c80a:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 801c80e:	9224      	str	r2, [sp, #144]	; 0x90
 801c810:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c812:	2a01      	cmp	r2, #1
 801c814:	d06f      	beq.n	801c8f6 <forward_conv2d_integer_UAUA+0x28a>
 801c816:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c818:	428a      	cmp	r2, r1
 801c81a:	bf0c      	ite	eq
 801c81c:	2203      	moveq	r2, #3
 801c81e:	2200      	movne	r2, #0
 801c820:	991d      	ldr	r1, [sp, #116]	; 0x74
 801c822:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c824:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 801c828:	fb01 f105 	mul.w	r1, r1, r5
 801c82c:	9026      	str	r0, [sp, #152]	; 0x98
 801c82e:	fb00 8101 	mla	r1, r0, r1, r8
 801c832:	4589      	cmp	r9, r1
 801c834:	d24b      	bcs.n	801c8ce <forward_conv2d_integer_UAUA+0x262>
 801c836:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c838:	9824      	ldr	r0, [sp, #144]	; 0x90
 801c83a:	fb01 f107 	mul.w	r1, r1, r7
 801c83e:	fb00 9101 	mla	r1, r0, r1, r9
 801c842:	4588      	cmp	r8, r1
 801c844:	bf2c      	ite	cs
 801c846:	2100      	movcs	r1, #0
 801c848:	2101      	movcc	r1, #1
 801c84a:	2000      	movs	r0, #0
 801c84c:	9225      	str	r2, [sp, #148]	; 0x94
 801c84e:	fa1f f28c 	uxth.w	r2, ip
 801c852:	9123      	str	r1, [sp, #140]	; 0x8c
 801c854:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
 801c858:	9029      	str	r0, [sp, #164]	; 0xa4
 801c85a:	f10d 00a2 	add.w	r0, sp, #162	; 0xa2
 801c85e:	ed93 7a00 	vldr	s14, [r3]
 801c862:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801c866:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c86a:	921c      	str	r2, [sp, #112]	; 0x70
 801c86c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801c870:	f001 f9cc 	bl	801dc0c <align_factor>
 801c874:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c876:	9029      	str	r0, [sp, #164]	; 0xa4
 801c878:	3a01      	subs	r2, #1
 801c87a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801c87c:	2a03      	cmp	r2, #3
 801c87e:	f200 816d 	bhi.w	801cb5c <forward_conv2d_integer_UAUA+0x4f0>
 801c882:	e8df f012 	tbh	[pc, r2, lsl #1]
 801c886:	0123      	.short	0x0123
 801c888:	009700d6 	.word	0x009700d6
 801c88c:	0042      	.short	0x0042
 801c88e:	eddf 7a48 	vldr	s15, [pc, #288]	; 801c9b0 <forward_conv2d_integer_UAUA+0x344>
 801c892:	e76e      	b.n	801c772 <forward_conv2d_integer_UAUA+0x106>
 801c894:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c896:	2500      	movs	r5, #0
 801c898:	2801      	cmp	r0, #1
 801c89a:	d18e      	bne.n	801c7ba <forward_conv2d_integer_UAUA+0x14e>
 801c89c:	f1bc 0f01 	cmp.w	ip, #1
 801c8a0:	d18b      	bne.n	801c7ba <forward_conv2d_integer_UAUA+0x14e>
 801c8a2:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c8a4:	4686      	mov	lr, r0
 801c8a6:	981a      	ldr	r0, [sp, #104]	; 0x68
 801c8a8:	ea5e 0000 	orrs.w	r0, lr, r0
 801c8ac:	d185      	bne.n	801c7ba <forward_conv2d_integer_UAUA+0x14e>
 801c8ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c8b0:	4686      	mov	lr, r0
 801c8b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c8b4:	f1be 0f01 	cmp.w	lr, #1
 801c8b8:	bf08      	it	eq
 801c8ba:	2801      	cmpeq	r0, #1
 801c8bc:	bf0c      	ite	eq
 801c8be:	f04f 0e01 	moveq.w	lr, #1
 801c8c2:	f04f 0e00 	movne.w	lr, #0
 801c8c6:	e77a      	b.n	801c7be <forward_conv2d_integer_UAUA+0x152>
 801c8c8:	2300      	movs	r3, #0
 801c8ca:	685b      	ldr	r3, [r3, #4]
 801c8cc:	deff      	udf	#255	; 0xff
 801c8ce:	2100      	movs	r1, #0
 801c8d0:	e7bb      	b.n	801c84a <forward_conv2d_integer_UAUA+0x1de>
 801c8d2:	686b      	ldr	r3, [r5, #4]
 801c8d4:	deff      	udf	#255	; 0xff
 801c8d6:	6a06      	ldr	r6, [r0, #32]
 801c8d8:	2e00      	cmp	r6, #0
 801c8da:	f43f af37 	beq.w	801c74c <forward_conv2d_integer_UAUA+0xe0>
 801c8de:	68b6      	ldr	r6, [r6, #8]
 801c8e0:	e734      	b.n	801c74c <forward_conv2d_integer_UAUA+0xe0>
 801c8e2:	6811      	ldr	r1, [r2, #0]
 801c8e4:	e6df      	b.n	801c6a6 <forward_conv2d_integer_UAUA+0x3a>
 801c8e6:	462b      	mov	r3, r5
 801c8e8:	b90d      	cbnz	r5, 801c8ee <forward_conv2d_integer_UAUA+0x282>
 801c8ea:	699b      	ldr	r3, [r3, #24]
 801c8ec:	deff      	udf	#255	; 0xff
 801c8ee:	68e3      	ldr	r3, [r4, #12]
 801c8f0:	deff      	udf	#255	; 0xff
 801c8f2:	9222      	str	r2, [sp, #136]	; 0x88
 801c8f4:	e6cf      	b.n	801c696 <forward_conv2d_integer_UAUA+0x2a>
 801c8f6:	2d00      	cmp	r5, #0
 801c8f8:	d192      	bne.n	801c820 <forward_conv2d_integer_UAUA+0x1b4>
 801c8fa:	f1be 0f00 	cmp.w	lr, #0
 801c8fe:	bf0c      	ite	eq
 801c900:	2204      	moveq	r2, #4
 801c902:	2202      	movne	r2, #2
 801c904:	e78c      	b.n	801c820 <forward_conv2d_integer_UAUA+0x1b4>
 801c906:	2600      	movs	r6, #0
 801c908:	e6d8      	b.n	801c6bc <forward_conv2d_integer_UAUA+0x50>
 801c90a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c90c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c90e:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c910:	9303      	str	r3, [sp, #12]
 801c912:	462b      	mov	r3, r5
 801c914:	9402      	str	r4, [sp, #8]
 801c916:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c918:	9101      	str	r1, [sp, #4]
 801c91a:	9000      	str	r0, [sp, #0]
 801c91c:	4658      	mov	r0, fp
 801c91e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801c920:	f000 fe92 	bl	801d648 <st_uaua8_convolve_rank1upd>
 801c924:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801c928:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c92a:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
 801c92e:	9210      	str	r2, [sp, #64]	; 0x40
 801c930:	465b      	mov	r3, fp
 801c932:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c934:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c936:	920d      	str	r2, [sp, #52]	; 0x34
 801c938:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c93a:	f8bd c074 	ldrh.w	ip, [sp, #116]	; 0x74
 801c93e:	9108      	str	r1, [sp, #32]
 801c940:	9007      	str	r0, [sp, #28]
 801c942:	4648      	mov	r0, r9
 801c944:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 801c948:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801c94c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801c950:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c954:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
 801c958:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
 801c95c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801c95e:	920a      	str	r2, [sp, #40]	; 0x28
 801c960:	b2ba      	uxth	r2, r7
 801c962:	9406      	str	r4, [sp, #24]
 801c964:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801c966:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801c968:	e9cd 5702 	strd	r5, r7, [sp, #8]
 801c96c:	9405      	str	r4, [sp, #20]
 801c96e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c970:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c972:	9501      	str	r5, [sp, #4]
 801c974:	9404      	str	r4, [sp, #16]
 801c976:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801c978:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c97a:	9500      	str	r5, [sp, #0]
 801c97c:	9411      	str	r4, [sp, #68]	; 0x44
 801c97e:	f000 fee5 	bl	801d74c <st_uaua8_convolve>
 801c982:	f8da 3008 	ldr.w	r3, [sl, #8]
 801c986:	0a1b      	lsrs	r3, r3, #8
 801c988:	d051      	beq.n	801ca2e <forward_conv2d_integer_UAUA+0x3c2>
 801c98a:	f8da 100c 	ldr.w	r1, [sl, #12]
 801c98e:	2201      	movs	r2, #1
 801c990:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c994:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801c998:	4299      	cmp	r1, r3
 801c99a:	fb00 f202 	mul.w	r2, r0, r2
 801c99e:	d1f9      	bne.n	801c994 <forward_conv2d_integer_UAUA+0x328>
 801c9a0:	4633      	mov	r3, r6
 801c9a2:	4651      	mov	r1, sl
 801c9a4:	e9dd 4021 	ldrd	r4, r0, [sp, #132]	; 0x84
 801c9a8:	47a0      	blx	r4
 801c9aa:	b02b      	add	sp, #172	; 0xac
 801c9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9b0:	00000000 	.word	0x00000000
 801c9b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c9b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9b8:	9301      	str	r3, [sp, #4]
 801c9ba:	9200      	str	r2, [sp, #0]
 801c9bc:	462a      	mov	r2, r5
 801c9be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c9c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c9c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c9c4:	f001 fc08 	bl	801e1d8 <st_uaua8_conv_dw_Wadapt>
 801c9c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9ca:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801c9ce:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
 801c9d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c9d4:	465b      	mov	r3, fp
 801c9d6:	9110      	str	r1, [sp, #64]	; 0x40
 801c9d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c9da:	f8bd c074 	ldrh.w	ip, [sp, #116]	; 0x74
 801c9de:	910d      	str	r1, [sp, #52]	; 0x34
 801c9e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c9e2:	9007      	str	r0, [sp, #28]
 801c9e4:	4648      	mov	r0, r9
 801c9e6:	9108      	str	r1, [sp, #32]
 801c9e8:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 801c9ec:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801c9f0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801c9f4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c9f8:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
 801c9fc:	f10d 02a2 	add.w	r2, sp, #162	; 0xa2
 801ca00:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ca02:	920a      	str	r2, [sp, #40]	; 0x28
 801ca04:	b2ba      	uxth	r2, r7
 801ca06:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ca08:	9411      	str	r4, [sp, #68]	; 0x44
 801ca0a:	9706      	str	r7, [sp, #24]
 801ca0c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801ca0e:	9705      	str	r7, [sp, #20]
 801ca10:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801ca12:	9704      	str	r7, [sp, #16]
 801ca14:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801ca16:	e9cd 5702 	strd	r5, r7, [sp, #8]
 801ca1a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ca1c:	9501      	str	r5, [sp, #4]
 801ca1e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801ca20:	9500      	str	r5, [sp, #0]
 801ca22:	f001 fca5 	bl	801e370 <st_uaua8_convolve_dw>
 801ca26:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ca2a:	0a1b      	lsrs	r3, r3, #8
 801ca2c:	d1ad      	bne.n	801c98a <forward_conv2d_integer_UAUA+0x31e>
 801ca2e:	2201      	movs	r2, #1
 801ca30:	e7b6      	b.n	801c9a0 <forward_conv2d_integer_UAUA+0x334>
 801ca32:	2900      	cmp	r1, #0
 801ca34:	f040 8093 	bne.w	801cb5e <forward_conv2d_integer_UAUA+0x4f2>
 801ca38:	b2bb      	uxth	r3, r7
 801ca3a:	2701      	movs	r7, #1
 801ca3c:	9323      	str	r3, [sp, #140]	; 0x8c
 801ca3e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801ca42:	9325      	str	r3, [sp, #148]	; 0x94
 801ca44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ca46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ca48:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ca4a:	fb02 f303 	mul.w	r3, r2, r3
 801ca4e:	9427      	str	r4, [sp, #156]	; 0x9c
 801ca50:	931d      	str	r3, [sp, #116]	; 0x74
 801ca52:	b28b      	uxth	r3, r1
 801ca54:	9326      	str	r3, [sp, #152]	; 0x98
 801ca56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca58:	fb03 f301 	mul.w	r3, r3, r1
 801ca5c:	931e      	str	r3, [sp, #120]	; 0x78
 801ca5e:	b293      	uxth	r3, r2
 801ca60:	9324      	str	r3, [sp, #144]	; 0x90
 801ca62:	2300      	movs	r3, #0
 801ca64:	9318      	str	r3, [sp, #96]	; 0x60
 801ca66:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801ca68:	a829      	add	r0, sp, #164	; 0xa4
 801ca6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca6c:	3301      	adds	r3, #1
 801ca6e:	9408      	str	r4, [sp, #32]
 801ca70:	f10d 01a2 	add.w	r1, sp, #162	; 0xa2
 801ca74:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801ca76:	9009      	str	r0, [sp, #36]	; 0x24
 801ca78:	4648      	mov	r0, r9
 801ca7a:	44a1      	add	r9, r4
 801ca7c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801ca7e:	920d      	str	r2, [sp, #52]	; 0x34
 801ca80:	9407      	str	r4, [sp, #28]
 801ca82:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801ca84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca86:	9406      	str	r4, [sp, #24]
 801ca88:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801ca8a:	920c      	str	r2, [sp, #48]	; 0x30
 801ca8c:	9405      	str	r4, [sp, #20]
 801ca8e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ca90:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ca92:	9404      	str	r4, [sp, #16]
 801ca94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ca96:	9318      	str	r3, [sp, #96]	; 0x60
 801ca98:	465b      	mov	r3, fp
 801ca9a:	920b      	str	r2, [sp, #44]	; 0x2c
 801ca9c:	910a      	str	r1, [sp, #40]	; 0x28
 801ca9e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801caa0:	9926      	ldr	r1, [sp, #152]	; 0x98
 801caa2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801caa6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801caa8:	9401      	str	r4, [sp, #4]
 801caaa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801caac:	9400      	str	r4, [sp, #0]
 801caae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cab0:	9411      	str	r4, [sp, #68]	; 0x44
 801cab2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801cab4:	9410      	str	r4, [sp, #64]	; 0x40
 801cab6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801cab8:	e9cd 840e 	strd	r8, r4, [sp, #56]	; 0x38
 801cabc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801cabe:	f001 fb3f 	bl	801e140 <st_uaua8_convolve_1x1>
 801cac2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cac4:	44a0      	add	r8, r4
 801cac6:	42bb      	cmp	r3, r7
 801cac8:	d3cd      	bcc.n	801ca66 <forward_conv2d_integer_UAUA+0x3fa>
 801caca:	e75a      	b.n	801c982 <forward_conv2d_integer_UAUA+0x316>
 801cacc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801cace:	4658      	mov	r0, fp
 801cad0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801cad2:	9303      	str	r3, [sp, #12]
 801cad4:	462b      	mov	r3, r5
 801cad6:	9402      	str	r4, [sp, #8]
 801cad8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cada:	9101      	str	r1, [sp, #4]
 801cadc:	9500      	str	r5, [sp, #0]
 801cade:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801cae0:	f000 fdb2 	bl	801d648 <st_uaua8_convolve_rank1upd>
 801cae4:	9407      	str	r4, [sp, #28]
 801cae6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801cae8:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
 801caec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801caee:	b2b9      	uxth	r1, r7
 801caf0:	9404      	str	r4, [sp, #16]
 801caf2:	f10d 07a2 	add.w	r7, sp, #162	; 0xa2
 801caf6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801caf8:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801cafc:	9403      	str	r4, [sp, #12]
 801cafe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801cb00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801cb02:	9009      	str	r0, [sp, #36]	; 0x24
 801cb04:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cb06:	930c      	str	r3, [sp, #48]	; 0x30
 801cb08:	920b      	str	r2, [sp, #44]	; 0x2c
 801cb0a:	465a      	mov	r2, fp
 801cb0c:	9008      	str	r0, [sp, #32]
 801cb0e:	4648      	mov	r0, r9
 801cb10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cb12:	9706      	str	r7, [sp, #24]
 801cb14:	f8cd c014 	str.w	ip, [sp, #20]
 801cb18:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801cb1c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801cb20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cb22:	9400      	str	r4, [sp, #0]
 801cb24:	f001 f8d6 	bl	801dcd4 <st_uaua8_convolve_rgb>
 801cb28:	e72b      	b.n	801c982 <forward_conv2d_integer_UAUA+0x316>
 801cb2a:	685b      	ldr	r3, [r3, #4]
 801cb2c:	781b      	ldrb	r3, [r3, #0]
 801cb2e:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb30:	e662      	b.n	801c7f8 <forward_conv2d_integer_UAUA+0x18c>
 801cb32:	685b      	ldr	r3, [r3, #4]
 801cb34:	781c      	ldrb	r4, [r3, #0]
 801cb36:	e655      	b.n	801c7e4 <forward_conv2d_integer_UAUA+0x178>
 801cb38:	6800      	ldr	r0, [r0, #0]
 801cb3a:	ed90 0a00 	vldr	s0, [r0]
 801cb3e:	e621      	b.n	801c784 <forward_conv2d_integer_UAUA+0x118>
 801cb40:	461c      	mov	r4, r3
 801cb42:	e64f      	b.n	801c7e4 <forward_conv2d_integer_UAUA+0x178>
 801cb44:	4c09      	ldr	r4, [pc, #36]	; (801cb6c <forward_conv2d_integer_UAUA+0x500>)
 801cb46:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 801cb4a:	9421      	str	r4, [sp, #132]	; 0x84
 801cb4c:	e5c6      	b.n	801c6dc <forward_conv2d_integer_UAUA+0x70>
 801cb4e:	4613      	mov	r3, r2
 801cb50:	9214      	str	r2, [sp, #80]	; 0x50
 801cb52:	e65a      	b.n	801c80a <forward_conv2d_integer_UAUA+0x19e>
 801cb54:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb56:	e64f      	b.n	801c7f8 <forward_conv2d_integer_UAUA+0x18c>
 801cb58:	4616      	mov	r6, r2
 801cb5a:	e5af      	b.n	801c6bc <forward_conv2d_integer_UAUA+0x50>
 801cb5c:	e7fe      	b.n	801cb5c <forward_conv2d_integer_UAUA+0x4f0>
 801cb5e:	2f00      	cmp	r7, #0
 801cb60:	f43f af0f 	beq.w	801c982 <forward_conv2d_integer_UAUA+0x316>
 801cb64:	9125      	str	r1, [sp, #148]	; 0x94
 801cb66:	9123      	str	r1, [sp, #140]	; 0x8c
 801cb68:	e76c      	b.n	801ca44 <forward_conv2d_integer_UAUA+0x3d8>
 801cb6a:	bf00      	nop
 801cb6c:	0801c669 	.word	0x0801c669

0801cb70 <forward_conv2d_nl_pool_integer_UAUA>:
 801cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb74:	6983      	ldr	r3, [r0, #24]
 801cb76:	b0d5      	sub	sp, #340	; 0x154
 801cb78:	881e      	ldrh	r6, [r3, #0]
 801cb7a:	2e00      	cmp	r6, #0
 801cb7c:	f000 819e 	beq.w	801cebc <forward_conv2d_nl_pool_integer_UAUA+0x34c>
 801cb80:	6859      	ldr	r1, [r3, #4]
 801cb82:	684d      	ldr	r5, [r1, #4]
 801cb84:	2d00      	cmp	r5, #0
 801cb86:	f000 8323 	beq.w	801d1d0 <forward_conv2d_nl_pool_integer_UAUA+0x660>
 801cb8a:	682b      	ldr	r3, [r5, #0]
 801cb8c:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb8e:	2e01      	cmp	r6, #1
 801cb90:	f240 8191 	bls.w	801ceb6 <forward_conv2d_nl_pool_integer_UAUA+0x346>
 801cb94:	690b      	ldr	r3, [r1, #16]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f000 8318 	beq.w	801d1cc <forward_conv2d_nl_pool_integer_UAUA+0x65c>
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	931a      	str	r3, [sp, #104]	; 0x68
 801cba0:	2e02      	cmp	r6, #2
 801cba2:	f000 8188 	beq.w	801ceb6 <forward_conv2d_nl_pool_integer_UAUA+0x346>
 801cba6:	69cc      	ldr	r4, [r1, #28]
 801cba8:	2c00      	cmp	r4, #0
 801cbaa:	f040 830d 	bne.w	801d1c8 <forward_conv2d_nl_pool_integer_UAUA+0x658>
 801cbae:	4623      	mov	r3, r4
 801cbb0:	f111 0218 	adds.w	r2, r1, #24
 801cbb4:	d007      	beq.n	801cbc6 <forward_conv2d_nl_pool_integer_UAUA+0x56>
 801cbb6:	8b0a      	ldrh	r2, [r1, #24]
 801cbb8:	2a01      	cmp	r2, #1
 801cbba:	f240 8333 	bls.w	801d224 <forward_conv2d_nl_pool_integer_UAUA+0x6b4>
 801cbbe:	2c00      	cmp	r4, #0
 801cbc0:	f000 832e 	beq.w	801d220 <forward_conv2d_nl_pool_integer_UAUA+0x6b0>
 801cbc4:	6862      	ldr	r2, [r4, #4]
 801cbc6:	2e03      	cmp	r6, #3
 801cbc8:	f000 8175 	beq.w	801ceb6 <forward_conv2d_nl_pool_integer_UAUA+0x346>
 801cbcc:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801cbce:	2900      	cmp	r1, #0
 801cbd0:	f000 8176 	beq.w	801cec0 <forward_conv2d_nl_pool_integer_UAUA+0x350>
 801cbd4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cbd6:	680d      	ldr	r5, [r1, #0]
 801cbd8:	962f      	str	r6, [sp, #188]	; 0xbc
 801cbda:	9514      	str	r5, [sp, #80]	; 0x50
 801cbdc:	f8d1 b004 	ldr.w	fp, [r1, #4]
 801cbe0:	2e00      	cmp	r6, #0
 801cbe2:	f000 8318 	beq.w	801d216 <forward_conv2d_nl_pool_integer_UAUA+0x6a6>
 801cbe6:	6889      	ldr	r1, [r1, #8]
 801cbe8:	911d      	str	r1, [sp, #116]	; 0x74
 801cbea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801cbec:	f8db 600c 	ldr.w	r6, [fp, #12]
 801cbf0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 801cbf4:	6876      	ldr	r6, [r6, #4]
 801cbf6:	f8de 7004 	ldr.w	r7, [lr, #4]
 801cbfa:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 801cbfe:	463d      	mov	r5, r7
 801cc00:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801cc02:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801cc06:	b2ad      	uxth	r5, r5
 801cc08:	9718      	str	r7, [sp, #96]	; 0x60
 801cc0a:	9619      	str	r6, [sp, #100]	; 0x64
 801cc0c:	951f      	str	r5, [sp, #124]	; 0x7c
 801cc0e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cc10:	680f      	ldr	r7, [r1, #0]
 801cc12:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801cc16:	b2b5      	uxth	r5, r6
 801cc18:	b2be      	uxth	r6, r7
 801cc1a:	9515      	str	r5, [sp, #84]	; 0x54
 801cc1c:	fa1f f58c 	uxth.w	r5, ip
 801cc20:	9521      	str	r5, [sp, #132]	; 0x84
 801cc22:	e9de 5802 	ldrd	r5, r8, [lr, #8]
 801cc26:	9524      	str	r5, [sp, #144]	; 0x90
 801cc28:	888d      	ldrh	r5, [r1, #4]
 801cc2a:	6889      	ldr	r1, [r1, #8]
 801cc2c:	9522      	str	r5, [sp, #136]	; 0x88
 801cc2e:	f8d9 500c 	ldr.w	r5, [r9, #12]
 801cc32:	9530      	str	r5, [sp, #192]	; 0xc0
 801cc34:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801cc38:	9537      	str	r5, [sp, #220]	; 0xdc
 801cc3a:	e9da 5901 	ldrd	r5, r9, [sl, #4]
 801cc3e:	9516      	str	r5, [sp, #88]	; 0x58
 801cc40:	6d45      	ldr	r5, [r0, #84]	; 0x54
 801cc42:	682d      	ldr	r5, [r5, #0]
 801cc44:	9529      	str	r5, [sp, #164]	; 0xa4
 801cc46:	6d45      	ldr	r5, [r0, #84]	; 0x54
 801cc48:	686d      	ldr	r5, [r5, #4]
 801cc4a:	953a      	str	r5, [sp, #232]	; 0xe8
 801cc4c:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 801cc4e:	9520      	str	r5, [sp, #128]	; 0x80
 801cc50:	69c5      	ldr	r5, [r0, #28]
 801cc52:	9517      	str	r5, [sp, #92]	; 0x5c
 801cc54:	6c05      	ldr	r5, [r0, #64]	; 0x40
 801cc56:	9538      	str	r5, [sp, #224]	; 0xe0
 801cc58:	6c85      	ldr	r5, [r0, #72]	; 0x48
 801cc5a:	9539      	str	r5, [sp, #228]	; 0xe4
 801cc5c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 801cc5e:	9528      	str	r5, [sp, #160]	; 0xa0
 801cc60:	2c00      	cmp	r4, #0
 801cc62:	f000 82a6 	beq.w	801d1b2 <forward_conv2d_nl_pool_integer_UAUA+0x642>
 801cc66:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801cc6a:	f1ba 0f00 	cmp.w	sl, #0
 801cc6e:	f000 82a0 	beq.w	801d1b2 <forward_conv2d_nl_pool_integer_UAUA+0x642>
 801cc72:	f8da 4018 	ldr.w	r4, [sl, #24]
 801cc76:	2c00      	cmp	r4, #0
 801cc78:	bf08      	it	eq
 801cc7a:	f04f 0a00 	moveq.w	sl, #0
 801cc7e:	fa1f fe87 	uxth.w	lr, r7
 801cc82:	902d      	str	r0, [sp, #180]	; 0xb4
 801cc84:	921c      	str	r2, [sp, #112]	; 0x70
 801cc86:	2400      	movs	r4, #0
 801cc88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801cc8a:	fa1e f081 	uxtah	r0, lr, r1
 801cc8e:	a941      	add	r1, sp, #260	; 0x104
 801cc90:	44c6      	add	lr, r8
 801cc92:	6997      	ldr	r7, [r2, #24]
 801cc94:	4440      	add	r0, r8
 801cc96:	9150      	str	r1, [sp, #320]	; 0x140
 801cc98:	4611      	mov	r1, r2
 801cc9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801cc9e:	eba0 0509 	sub.w	r5, r0, r9
 801cca2:	9323      	str	r3, [sp, #140]	; 0x8c
 801cca4:	fa1f f38c 	uxth.w	r3, ip
 801cca8:	924e      	str	r2, [sp, #312]	; 0x138
 801ccaa:	f240 4201 	movw	r2, #1025	; 0x401
 801ccae:	951b      	str	r5, [sp, #108]	; 0x6c
 801ccb0:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 801ccb4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801ccb6:	a84d      	add	r0, sp, #308	; 0x134
 801ccb8:	924f      	str	r2, [sp, #316]	; 0x13c
 801ccba:	f240 4202 	movw	r2, #1026	; 0x402
 801ccbe:	69ad      	ldr	r5, [r5, #24]
 801ccc0:	9251      	str	r2, [sp, #324]	; 0x144
 801ccc2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ccc4:	9531      	str	r5, [sp, #196]	; 0xc4
 801ccc6:	6c55      	ldr	r5, [r2, #68]	; 0x44
 801ccc8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801ccca:	f8db 8018 	ldr.w	r8, [fp, #24]
 801ccce:	f8cd e094 	str.w	lr, [sp, #148]	; 0x94
 801ccd2:	931e      	str	r3, [sp, #120]	; 0x78
 801ccd4:	944d      	str	r4, [sp, #308]	; 0x134
 801ccd6:	9441      	str	r4, [sp, #260]	; 0x104
 801ccd8:	9445      	str	r4, [sp, #276]	; 0x114
 801ccda:	9442      	str	r4, [sp, #264]	; 0x108
 801ccdc:	9443      	str	r4, [sp, #268]	; 0x10c
 801ccde:	9446      	str	r4, [sp, #280]	; 0x118
 801cce0:	9444      	str	r4, [sp, #272]	; 0x110
 801cce2:	9453      	str	r4, [sp, #332]	; 0x14c
 801cce4:	9447      	str	r4, [sp, #284]	; 0x11c
 801cce6:	9448      	str	r4, [sp, #288]	; 0x120
 801cce8:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 801ccec:	952a      	str	r5, [sp, #168]	; 0xa8
 801ccee:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
 801ccf2:	923b      	str	r2, [sp, #236]	; 0xec
 801ccf4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801ccf6:	fbb5 fcf3 	udiv	ip, r5, r3
 801ccfa:	f10c 0301 	add.w	r3, ip, #1
 801ccfe:	932b      	str	r3, [sp, #172]	; 0xac
 801cd00:	f003 fe7a 	bl	80209f8 <core_tensor_clone>
 801cd04:	4639      	mov	r1, r7
 801cd06:	a849      	add	r0, sp, #292	; 0x124
 801cd08:	f003 fea8 	bl	8020a5c <core_array_clone>
 801cd0c:	ab49      	add	r3, sp, #292	; 0x124
 801cd0e:	9353      	str	r3, [sp, #332]	; 0x14c
 801cd10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cd12:	6999      	ldr	r1, [r3, #24]
 801cd14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd16:	6818      	ldr	r0, [r3, #0]
 801cd18:	688b      	ldr	r3, [r1, #8]
 801cd1a:	f8db 1000 	ldr.w	r1, [fp]
 801cd1e:	931b      	str	r3, [sp, #108]	; 0x6c
 801cd20:	f8db 300c 	ldr.w	r3, [fp, #12]
 801cd24:	689b      	ldr	r3, [r3, #8]
 801cd26:	9326      	str	r3, [sp, #152]	; 0x98
 801cd28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd2a:	681a      	ldr	r2, [r3, #0]
 801cd2c:	9214      	str	r2, [sp, #80]	; 0x50
 801cd2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cd30:	2800      	cmp	r0, #0
 801cd32:	f000 80c7 	beq.w	801cec4 <forward_conv2d_nl_pool_integer_UAUA+0x354>
 801cd36:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801cd3a:	f1bc 0f00 	cmp.w	ip, #0
 801cd3e:	f000 80c1 	beq.w	801cec4 <forward_conv2d_nl_pool_integer_UAUA+0x354>
 801cd42:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 801cd46:	f1be 0f00 	cmp.w	lr, #0
 801cd4a:	f000 80bb 	beq.w	801cec4 <forward_conv2d_nl_pool_integer_UAUA+0x354>
 801cd4e:	f8dc c000 	ldr.w	ip, [ip]
 801cd52:	eddc 7a00 	vldr	s15, [ip]
 801cd56:	2900      	cmp	r1, #0
 801cd58:	f000 80b9 	beq.w	801cece <forward_conv2d_nl_pool_integer_UAUA+0x35e>
 801cd5c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801cd60:	f1bc 0f00 	cmp.w	ip, #0
 801cd64:	f000 80b3 	beq.w	801cece <forward_conv2d_nl_pool_integer_UAUA+0x35e>
 801cd68:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 801cd6c:	f1be 0f00 	cmp.w	lr, #0
 801cd70:	f000 80ad 	beq.w	801cece <forward_conv2d_nl_pool_integer_UAUA+0x35e>
 801cd74:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cd76:	f8dc c000 	ldr.w	ip, [ip]
 801cd7a:	2d01      	cmp	r5, #1
 801cd7c:	ed9c 0a00 	vldr	s0, [ip]
 801cd80:	f040 80ab 	bne.w	801ceda <forward_conv2d_nl_pool_integer_UAUA+0x36a>
 801cd84:	f1b9 0f01 	cmp.w	r9, #1
 801cd88:	f040 80a7 	bne.w	801ceda <forward_conv2d_nl_pool_integer_UAUA+0x36a>
 801cd8c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801cd8e:	4335      	orrs	r5, r6
 801cd90:	f040 80a3 	bne.w	801ceda <forward_conv2d_nl_pool_integer_UAUA+0x36a>
 801cd94:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801cd96:	46ac      	mov	ip, r5
 801cd98:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801cd9a:	f1bc 0f01 	cmp.w	ip, #1
 801cd9e:	bf08      	it	eq
 801cda0:	2d01      	cmpeq	r5, #1
 801cda2:	bf0c      	ite	eq
 801cda4:	f04f 0c01 	moveq.w	ip, #1
 801cda8:	f04f 0c00 	movne.w	ip, #0
 801cdac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cdae:	699b      	ldr	r3, [r3, #24]
 801cdb0:	69ad      	ldr	r5, [r5, #24]
 801cdb2:	689b      	ldr	r3, [r3, #8]
 801cdb4:	6992      	ldr	r2, [r2, #24]
 801cdb6:	68ad      	ldr	r5, [r5, #8]
 801cdb8:	931c      	str	r3, [sp, #112]	; 0x70
 801cdba:	6893      	ldr	r3, [r2, #8]
 801cdbc:	9536      	str	r5, [sp, #216]	; 0xd8
 801cdbe:	9323      	str	r3, [sp, #140]	; 0x8c
 801cdc0:	2800      	cmp	r0, #0
 801cdc2:	f000 81ff 	beq.w	801d1c4 <forward_conv2d_nl_pool_integer_UAUA+0x654>
 801cdc6:	6843      	ldr	r3, [r0, #4]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	f000 8222 	beq.w	801d212 <forward_conv2d_nl_pool_integer_UAUA+0x6a2>
 801cdce:	8845      	ldrh	r5, [r0, #2]
 801cdd0:	b10d      	cbz	r5, 801cdd6 <forward_conv2d_nl_pool_integer_UAUA+0x266>
 801cdd2:	685b      	ldr	r3, [r3, #4]
 801cdd4:	781d      	ldrb	r5, [r3, #0]
 801cdd6:	2900      	cmp	r1, #0
 801cdd8:	f000 81e9 	beq.w	801d1ae <forward_conv2d_nl_pool_integer_UAUA+0x63e>
 801cddc:	684b      	ldr	r3, [r1, #4]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	f000 8215 	beq.w	801d20e <forward_conv2d_nl_pool_integer_UAUA+0x69e>
 801cde4:	884a      	ldrh	r2, [r1, #2]
 801cde6:	2a00      	cmp	r2, #0
 801cde8:	f000 81df 	beq.w	801d1aa <forward_conv2d_nl_pool_integer_UAUA+0x63a>
 801cdec:	685b      	ldr	r3, [r3, #4]
 801cdee:	781b      	ldrb	r3, [r3, #0]
 801cdf0:	9313      	str	r3, [sp, #76]	; 0x4c
 801cdf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	f000 81d6 	beq.w	801d1a6 <forward_conv2d_nl_pool_integer_UAUA+0x636>
 801cdfa:	685b      	ldr	r3, [r3, #4]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	f000 8203 	beq.w	801d208 <forward_conv2d_nl_pool_integer_UAUA+0x698>
 801ce02:	e9d3 1300 	ldrd	r1, r3, [r3]
 801ce06:	9314      	str	r3, [sp, #80]	; 0x50
 801ce08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ce0a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801ce0e:	2a01      	cmp	r2, #1
 801ce10:	f000 81c2 	beq.w	801d198 <forward_conv2d_nl_pool_integer_UAUA+0x628>
 801ce14:	429a      	cmp	r2, r3
 801ce16:	bf0c      	ite	eq
 801ce18:	2203      	moveq	r2, #3
 801ce1a:	2200      	movne	r2, #0
 801ce1c:	9232      	str	r2, [sp, #200]	; 0xc8
 801ce1e:	2200      	movs	r2, #0
 801ce20:	932c      	str	r3, [sp, #176]	; 0xb0
 801ce22:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801ce26:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 801ce2a:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 801ce2e:	9240      	str	r2, [sp, #256]	; 0x100
 801ce30:	ed91 7a00 	vldr	s14, [r1]
 801ce34:	9317      	str	r3, [sp, #92]	; 0x5c
 801ce36:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ce3a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ce3e:	9219      	str	r2, [sp, #100]	; 0x64
 801ce40:	fa1f f289 	uxth.w	r2, r9
 801ce44:	9316      	str	r3, [sp, #88]	; 0x58
 801ce46:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ce4a:	9218      	str	r2, [sp, #96]	; 0x60
 801ce4c:	f000 fede 	bl	801dc0c <align_factor>
 801ce50:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ce52:	9040      	str	r0, [sp, #256]	; 0x100
 801ce54:	2a00      	cmp	r2, #0
 801ce56:	f000 80ef 	beq.w	801d038 <forward_conv2d_nl_pool_integer_UAUA+0x4c8>
 801ce5a:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ce5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ce5e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ce60:	4694      	mov	ip, r2
 801ce62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ce64:	fb01 f200 	mul.w	r2, r1, r0
 801ce68:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ce6a:	f8cd a0f0 	str.w	sl, [sp, #240]	; 0xf0
 801ce6e:	fb00 f303 	mul.w	r3, r0, r3
 801ce72:	f8dd a0d8 	ldr.w	sl, [sp, #216]	; 0xd8
 801ce76:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 801ce7a:	932e      	str	r3, [sp, #184]	; 0xb8
 801ce7c:	b283      	uxth	r3, r0
 801ce7e:	9426      	str	r4, [sp, #152]	; 0x98
 801ce80:	9324      	str	r3, [sp, #144]	; 0x90
 801ce82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ce84:	9516      	str	r5, [sp, #88]	; 0x58
 801ce86:	fb03 f202 	mul.w	r2, r3, r2
 801ce8a:	fb03 f301 	mul.w	r3, r3, r1
 801ce8e:	9234      	str	r2, [sp, #208]	; 0xd0
 801ce90:	9335      	str	r3, [sp, #212]	; 0xd4
 801ce92:	b28b      	uxth	r3, r1
 801ce94:	932c      	str	r3, [sp, #176]	; 0xb0
 801ce96:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 801ce9a:	9333      	str	r3, [sp, #204]	; 0xcc
 801ce9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	dd62      	ble.n	801cf68 <forward_conv2d_nl_pool_integer_UAUA+0x3f8>
 801cea2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801cea4:	2b03      	cmp	r3, #3
 801cea6:	f000 8145 	beq.w	801d134 <forward_conv2d_nl_pool_integer_UAUA+0x5c4>
 801ceaa:	2b04      	cmp	r3, #4
 801ceac:	f000 810c 	beq.w	801d0c8 <forward_conv2d_nl_pool_integer_UAUA+0x558>
 801ceb0:	2b02      	cmp	r3, #2
 801ceb2:	d015      	beq.n	801cee0 <forward_conv2d_nl_pool_integer_UAUA+0x370>
 801ceb4:	e7fe      	b.n	801ceb4 <forward_conv2d_nl_pool_integer_UAUA+0x344>
 801ceb6:	2300      	movs	r3, #0
 801ceb8:	685b      	ldr	r3, [r3, #4]
 801ceba:	deff      	udf	#255	; 0xff
 801cebc:	6873      	ldr	r3, [r6, #4]
 801cebe:	deff      	udf	#255	; 0xff
 801cec0:	68cb      	ldr	r3, [r1, #12]
 801cec2:	deff      	udf	#255	; 0xff
 801cec4:	eddf 7a9a 	vldr	s15, [pc, #616]	; 801d130 <forward_conv2d_nl_pool_integer_UAUA+0x5c0>
 801cec8:	2900      	cmp	r1, #0
 801ceca:	f47f af47 	bne.w	801cd5c <forward_conv2d_nl_pool_integer_UAUA+0x1ec>
 801cece:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ced0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801d130 <forward_conv2d_nl_pool_integer_UAUA+0x5c0>
 801ced4:	2d01      	cmp	r5, #1
 801ced6:	f43f af55 	beq.w	801cd84 <forward_conv2d_nl_pool_integer_UAUA+0x214>
 801ceda:	f04f 0c00 	mov.w	ip, #0
 801cede:	e765      	b.n	801cdac <forward_conv2d_nl_pool_integer_UAUA+0x23c>
 801cee0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cee2:	a840      	add	r0, sp, #256	; 0x100
 801cee4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cee6:	9311      	str	r3, [sp, #68]	; 0x44
 801cee8:	2301      	movs	r3, #1
 801ceea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ceec:	9310      	str	r3, [sp, #64]	; 0x40
 801ceee:	920f      	str	r2, [sp, #60]	; 0x3c
 801cef0:	fa1f f289 	uxth.w	r2, r9
 801cef4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801cef8:	950c      	str	r5, [sp, #48]	; 0x30
 801cefa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cefc:	910e      	str	r1, [sp, #56]	; 0x38
 801cefe:	950b      	str	r5, [sp, #44]	; 0x2c
 801cf00:	f10d 05fe 	add.w	r5, sp, #254	; 0xfe
 801cf04:	9009      	str	r0, [sp, #36]	; 0x24
 801cf06:	4650      	mov	r0, sl
 801cf08:	950a      	str	r5, [sp, #40]	; 0x28
 801cf0a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801cf0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cf0e:	9508      	str	r5, [sp, #32]
 801cf10:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801cf12:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801cf14:	9507      	str	r5, [sp, #28]
 801cf16:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801cf18:	e9cd 6505 	strd	r6, r5, [sp, #20]
 801cf1c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801cf1e:	9504      	str	r5, [sp, #16]
 801cf20:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801cf22:	9503      	str	r5, [sp, #12]
 801cf24:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801cf26:	9502      	str	r5, [sp, #8]
 801cf28:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801cf2a:	9501      	str	r5, [sp, #4]
 801cf2c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cf2e:	9500      	str	r5, [sp, #0]
 801cf30:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cf32:	950d      	str	r5, [sp, #52]	; 0x34
 801cf34:	f001 f904 	bl	801e140 <st_uaua8_convolve_1x1>
 801cf38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cf3a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801cf3c:	428b      	cmp	r3, r1
 801cf3e:	f000 80b0 	beq.w	801d0a2 <forward_conv2d_nl_pool_integer_UAUA+0x532>
 801cf42:	1acb      	subs	r3, r1, r3
 801cf44:	4599      	cmp	r9, r3
 801cf46:	9325      	str	r3, [sp, #148]	; 0x94
 801cf48:	bf28      	it	cs
 801cf4a:	4699      	movcs	r9, r3
 801cf4c:	2e00      	cmp	r6, #0
 801cf4e:	f040 80af 	bne.w	801d0b0 <forward_conv2d_nl_pool_integer_UAUA+0x540>
 801cf52:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801cf54:	449a      	add	sl, r3
 801cf56:	3401      	adds	r4, #1
 801cf58:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801cf5a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801cf5c:	4659      	mov	r1, fp
 801cf5e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cf60:	b224      	sxth	r4, r4
 801cf62:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 801cf64:	47a8      	blx	r5
 801cf66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cf68:	3b01      	subs	r3, #1
 801cf6a:	932b      	str	r3, [sp, #172]	; 0xac
 801cf6c:	d470      	bmi.n	801d050 <forward_conv2d_nl_pool_integer_UAUA+0x4e0>
 801cf6e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801cf70:	429c      	cmp	r4, r3
 801cf72:	db34      	blt.n	801cfde <forward_conv2d_nl_pool_integer_UAUA+0x46e>
 801cf74:	2001      	movs	r0, #1
 801cf76:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 801cf7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cf7c:	9007      	str	r0, [sp, #28]
 801cf7e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801cf80:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 801cf84:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801cf86:	9208      	str	r2, [sp, #32]
 801cf88:	1a1a      	subs	r2, r3, r0
 801cf8a:	f8bd 00dc 	ldrh.w	r0, [sp, #220]	; 0xdc
 801cf8e:	1a64      	subs	r4, r4, r1
 801cf90:	f8bd c0e4 	ldrh.w	ip, [sp, #228]	; 0xe4
 801cf94:	3501      	adds	r5, #1
 801cf96:	9301      	str	r3, [sp, #4]
 801cf98:	b292      	uxth	r2, r2
 801cf9a:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 801cf9e:	b224      	sxth	r4, r4
 801cfa0:	9105      	str	r1, [sp, #20]
 801cfa2:	9006      	str	r0, [sp, #24]
 801cfa4:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
 801cfa8:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
 801cfac:	9102      	str	r1, [sp, #8]
 801cfae:	9000      	str	r0, [sp, #0]
 801cfb0:	a84d      	add	r0, sp, #308	; 0x134
 801cfb2:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cfb4:	9519      	str	r5, [sp, #100]	; 0x64
 801cfb6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 801cfb8:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 801cfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cfbe:	47a8      	blx	r5
 801cfc0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cfc2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801cfc4:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801cfc8:	6951      	ldr	r1, [r2, #20]
 801cfca:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801cfcc:	1aeb      	subs	r3, r5, r3
 801cfce:	68c9      	ldr	r1, [r1, #12]
 801cfd0:	6882      	ldr	r2, [r0, #8]
 801cfd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfd6:	440a      	add	r2, r1
 801cfd8:	b21b      	sxth	r3, r3
 801cfda:	6082      	str	r2, [r0, #8]
 801cfdc:	9326      	str	r3, [sp, #152]	; 0x98
 801cfde:	f8db 3014 	ldr.w	r3, [fp, #20]
 801cfe2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801cfe6:	68db      	ldr	r3, [r3, #12]
 801cfe8:	4413      	add	r3, r2
 801cfea:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801cfec:	f8c8 3008 	str.w	r3, [r8, #8]
 801cff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801cff2:	b13a      	cbz	r2, 801d004 <forward_conv2d_nl_pool_integer_UAUA+0x494>
 801cff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cff6:	695a      	ldr	r2, [r3, #20]
 801cff8:	68bb      	ldr	r3, [r7, #8]
 801cffa:	68d2      	ldr	r2, [r2, #12]
 801cffc:	4413      	add	r3, r2
 801cffe:	60bb      	str	r3, [r7, #8]
 801d000:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d004:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801d008:	4658      	mov	r0, fp
 801d00a:	933d      	str	r3, [sp, #244]	; 0xf4
 801d00c:	9236      	str	r2, [sp, #216]	; 0xd8
 801d00e:	f003 fc75 	bl	80208fc <get_tensor_byte_size>
 801d012:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801d014:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 801d016:	4402      	add	r2, r0
 801d018:	4293      	cmp	r3, r2
 801d01a:	d308      	bcc.n	801d02e <forward_conv2d_nl_pool_integer_UAUA+0x4be>
 801d01c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d020:	f8c8 3008 	str.w	r3, [r8, #8]
 801d024:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d028:	b10b      	cbz	r3, 801d02e <forward_conv2d_nl_pool_integer_UAUA+0x4be>
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	60bb      	str	r3, [r7, #8]
 801d02e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d030:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d032:	4293      	cmp	r3, r2
 801d034:	f4ff af32 	bcc.w	801ce9c <forward_conv2d_nl_pool_integer_UAUA+0x32c>
 801d038:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d03c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801d03e:	f8c8 3008 	str.w	r3, [r8, #8]
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	60bb      	str	r3, [r7, #8]
 801d046:	68d3      	ldr	r3, [r2, #12]
 801d048:	6093      	str	r3, [r2, #8]
 801d04a:	b055      	add	sp, #340	; 0x154
 801d04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d050:	e9d7 2102 	ldrd	r2, r1, [r7, #8]
 801d054:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d056:	fb03 2314 	mls	r3, r3, r4, r2
 801d05a:	4299      	cmp	r1, r3
 801d05c:	d901      	bls.n	801d062 <forward_conv2d_nl_pool_integer_UAUA+0x4f2>
 801d05e:	6878      	ldr	r0, [r7, #4]
 801d060:	4403      	add	r3, r0
 801d062:	4299      	cmp	r1, r3
 801d064:	d212      	bcs.n	801d08c <forward_conv2d_nl_pool_integer_UAUA+0x51c>
 801d066:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801d068:	4284      	cmp	r4, r0
 801d06a:	d00f      	beq.n	801d08c <forward_conv2d_nl_pool_integer_UAUA+0x51c>
 801d06c:	6878      	ldr	r0, [r7, #4]
 801d06e:	4401      	add	r1, r0
 801d070:	428b      	cmp	r3, r1
 801d072:	d20b      	bcs.n	801d08c <forward_conv2d_nl_pool_integer_UAUA+0x51c>
 801d074:	3a01      	subs	r2, #1
 801d076:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d078:	f813 1b01 	ldrb.w	r1, [r3], #1
 801d07c:	f802 1f01 	strb.w	r1, [r2, #1]!
 801d080:	68f9      	ldr	r1, [r7, #12]
 801d082:	6878      	ldr	r0, [r7, #4]
 801d084:	4401      	add	r1, r0
 801d086:	428b      	cmp	r3, r1
 801d088:	d3f6      	bcc.n	801d078 <forward_conv2d_nl_pool_integer_UAUA+0x508>
 801d08a:	9516      	str	r5, [sp, #88]	; 0x58
 801d08c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d08e:	b2a4      	uxth	r4, r4
 801d090:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d092:	4413      	add	r3, r2
 801d094:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d096:	1b1b      	subs	r3, r3, r4
 801d098:	4414      	add	r4, r2
 801d09a:	b21b      	sxth	r3, r3
 801d09c:	b224      	sxth	r4, r4
 801d09e:	9327      	str	r3, [sp, #156]	; 0x9c
 801d0a0:	e765      	b.n	801cf6e <forward_conv2d_nl_pool_integer_UAUA+0x3fe>
 801d0a2:	f04f 0900 	mov.w	r9, #0
 801d0a6:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 801d0aa:	2e00      	cmp	r6, #0
 801d0ac:	f43f af51 	beq.w	801cf52 <forward_conv2d_nl_pool_integer_UAUA+0x3e2>
 801d0b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d0b2:	1af3      	subs	r3, r6, r3
 801d0b4:	d504      	bpl.n	801d0c0 <forward_conv2d_nl_pool_integer_UAUA+0x550>
 801d0b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d0b8:	1b96      	subs	r6, r2, r6
 801d0ba:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d0bc:	fb02 aa06 	mla	sl, r2, r6, sl
 801d0c0:	ea23 76e3 	bic.w	r6, r3, r3, asr #31
 801d0c4:	b2b6      	uxth	r6, r6
 801d0c6:	e746      	b.n	801cf56 <forward_conv2d_nl_pool_integer_UAUA+0x3e6>
 801d0c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d0ca:	b91b      	cbnz	r3, 801d0d4 <forward_conv2d_nl_pool_integer_UAUA+0x564>
 801d0cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d0ce:	429c      	cmp	r4, r3
 801d0d0:	f000 808b 	beq.w	801d1ea <forward_conv2d_nl_pool_integer_UAUA+0x67a>
 801d0d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d0d6:	a840      	add	r0, sp, #256	; 0x100
 801d0d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d0da:	9311      	str	r3, [sp, #68]	; 0x44
 801d0dc:	2301      	movs	r3, #1
 801d0de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d0e0:	9310      	str	r3, [sp, #64]	; 0x40
 801d0e2:	920f      	str	r2, [sp, #60]	; 0x3c
 801d0e4:	fa1f f289 	uxth.w	r2, r9
 801d0e8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801d0ec:	950c      	str	r5, [sp, #48]	; 0x30
 801d0ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d0f0:	910e      	str	r1, [sp, #56]	; 0x38
 801d0f2:	950b      	str	r5, [sp, #44]	; 0x2c
 801d0f4:	f10d 05fe 	add.w	r5, sp, #254	; 0xfe
 801d0f8:	9009      	str	r0, [sp, #36]	; 0x24
 801d0fa:	4650      	mov	r0, sl
 801d0fc:	950a      	str	r5, [sp, #40]	; 0x28
 801d0fe:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801d100:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d102:	9508      	str	r5, [sp, #32]
 801d104:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801d106:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d108:	9507      	str	r5, [sp, #28]
 801d10a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801d10c:	e9cd 6505 	strd	r6, r5, [sp, #20]
 801d110:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801d112:	9504      	str	r5, [sp, #16]
 801d114:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d116:	9503      	str	r5, [sp, #12]
 801d118:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801d11a:	9502      	str	r5, [sp, #8]
 801d11c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d11e:	9501      	str	r5, [sp, #4]
 801d120:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d122:	9500      	str	r5, [sp, #0]
 801d124:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d126:	950d      	str	r5, [sp, #52]	; 0x34
 801d128:	f000 fb10 	bl	801d74c <st_uaua8_convolve>
 801d12c:	e704      	b.n	801cf38 <forward_conv2d_nl_pool_integer_UAUA+0x3c8>
 801d12e:	bf00      	nop
 801d130:	00000000 	.word	0x00000000
 801d134:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d136:	b913      	cbnz	r3, 801d13e <forward_conv2d_nl_pool_integer_UAUA+0x5ce>
 801d138:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d13a:	429c      	cmp	r4, r3
 801d13c:	d04a      	beq.n	801d1d4 <forward_conv2d_nl_pool_integer_UAUA+0x664>
 801d13e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d140:	a840      	add	r0, sp, #256	; 0x100
 801d142:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d144:	9311      	str	r3, [sp, #68]	; 0x44
 801d146:	2301      	movs	r3, #1
 801d148:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d14a:	9310      	str	r3, [sp, #64]	; 0x40
 801d14c:	920f      	str	r2, [sp, #60]	; 0x3c
 801d14e:	fa1f f289 	uxth.w	r2, r9
 801d152:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801d156:	950c      	str	r5, [sp, #48]	; 0x30
 801d158:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d15a:	910e      	str	r1, [sp, #56]	; 0x38
 801d15c:	950b      	str	r5, [sp, #44]	; 0x2c
 801d15e:	f10d 05fe 	add.w	r5, sp, #254	; 0xfe
 801d162:	9009      	str	r0, [sp, #36]	; 0x24
 801d164:	4650      	mov	r0, sl
 801d166:	950a      	str	r5, [sp, #40]	; 0x28
 801d168:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801d16a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d16c:	9508      	str	r5, [sp, #32]
 801d16e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801d170:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d172:	9507      	str	r5, [sp, #28]
 801d174:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801d176:	e9cd 6505 	strd	r6, r5, [sp, #20]
 801d17a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801d17c:	9504      	str	r5, [sp, #16]
 801d17e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d180:	9503      	str	r5, [sp, #12]
 801d182:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801d184:	9502      	str	r5, [sp, #8]
 801d186:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d188:	9501      	str	r5, [sp, #4]
 801d18a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d18c:	9500      	str	r5, [sp, #0]
 801d18e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d190:	950d      	str	r5, [sp, #52]	; 0x34
 801d192:	f001 f8ed 	bl	801e370 <st_uaua8_convolve_dw>
 801d196:	e6cf      	b.n	801cf38 <forward_conv2d_nl_pool_integer_UAUA+0x3c8>
 801d198:	f1bc 0f00 	cmp.w	ip, #0
 801d19c:	bf0c      	ite	eq
 801d19e:	2204      	moveq	r2, #4
 801d1a0:	2202      	movne	r2, #2
 801d1a2:	9232      	str	r2, [sp, #200]	; 0xc8
 801d1a4:	e63b      	b.n	801ce1e <forward_conv2d_nl_pool_integer_UAUA+0x2ae>
 801d1a6:	4619      	mov	r1, r3
 801d1a8:	e62e      	b.n	801ce08 <forward_conv2d_nl_pool_integer_UAUA+0x298>
 801d1aa:	9213      	str	r2, [sp, #76]	; 0x4c
 801d1ac:	e621      	b.n	801cdf2 <forward_conv2d_nl_pool_integer_UAUA+0x282>
 801d1ae:	9113      	str	r1, [sp, #76]	; 0x4c
 801d1b0:	e61f      	b.n	801cdf2 <forward_conv2d_nl_pool_integer_UAUA+0x282>
 801d1b2:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801d1b6:	f1ba 0f00 	cmp.w	sl, #0
 801d1ba:	f43f ad60 	beq.w	801cc7e <forward_conv2d_nl_pool_integer_UAUA+0x10e>
 801d1be:	f8da a008 	ldr.w	sl, [sl, #8]
 801d1c2:	e55c      	b.n	801cc7e <forward_conv2d_nl_pool_integer_UAUA+0x10e>
 801d1c4:	4605      	mov	r5, r0
 801d1c6:	e606      	b.n	801cdd6 <forward_conv2d_nl_pool_integer_UAUA+0x266>
 801d1c8:	6823      	ldr	r3, [r4, #0]
 801d1ca:	e4f1      	b.n	801cbb0 <forward_conv2d_nl_pool_integer_UAUA+0x40>
 801d1cc:	931a      	str	r3, [sp, #104]	; 0x68
 801d1ce:	e4e7      	b.n	801cba0 <forward_conv2d_nl_pool_integer_UAUA+0x30>
 801d1d0:	9513      	str	r5, [sp, #76]	; 0x4c
 801d1d2:	e4dc      	b.n	801cb8e <forward_conv2d_nl_pool_integer_UAUA+0x1e>
 801d1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d1d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d1d8:	9301      	str	r3, [sp, #4]
 801d1da:	9200      	str	r2, [sp, #0]
 801d1dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d1de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d1e0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801d1e2:	981c      	ldr	r0, [sp, #112]	; 0x70
 801d1e4:	f000 fff8 	bl	801e1d8 <st_uaua8_conv_dw_Wadapt>
 801d1e8:	e7a9      	b.n	801d13e <forward_conv2d_nl_pool_integer_UAUA+0x5ce>
 801d1ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d1ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801d1ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d1f0:	9303      	str	r3, [sp, #12]
 801d1f2:	9101      	str	r1, [sp, #4]
 801d1f4:	9000      	str	r0, [sp, #0]
 801d1f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801d1f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d1fa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801d1fe:	9202      	str	r2, [sp, #8]
 801d200:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d202:	f000 fa21 	bl	801d648 <st_uaua8_convolve_rank1upd>
 801d206:	e765      	b.n	801d0d4 <forward_conv2d_nl_pool_integer_UAUA+0x564>
 801d208:	4619      	mov	r1, r3
 801d20a:	9314      	str	r3, [sp, #80]	; 0x50
 801d20c:	e5fc      	b.n	801ce08 <forward_conv2d_nl_pool_integer_UAUA+0x298>
 801d20e:	9313      	str	r3, [sp, #76]	; 0x4c
 801d210:	e5ef      	b.n	801cdf2 <forward_conv2d_nl_pool_integer_UAUA+0x282>
 801d212:	461d      	mov	r5, r3
 801d214:	e5df      	b.n	801cdd6 <forward_conv2d_nl_pool_integer_UAUA+0x266>
 801d216:	4904      	ldr	r1, [pc, #16]	; (801d228 <forward_conv2d_nl_pool_integer_UAUA+0x6b8>)
 801d218:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 801d21c:	912f      	str	r1, [sp, #188]	; 0xbc
 801d21e:	e4e4      	b.n	801cbea <forward_conv2d_nl_pool_integer_UAUA+0x7a>
 801d220:	4622      	mov	r2, r4
 801d222:	e4d0      	b.n	801cbc6 <forward_conv2d_nl_pool_integer_UAUA+0x56>
 801d224:	2200      	movs	r2, #0
 801d226:	e4ce      	b.n	801cbc6 <forward_conv2d_nl_pool_integer_UAUA+0x56>
 801d228:	0801c669 	.word	0x0801c669

0801d22c <nl_func_sm_array_f32>:
 801d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d230:	ed2d 8b04 	vpush	{d8-d9}
 801d234:	b089      	sub	sp, #36	; 0x24
 801d236:	698f      	ldr	r7, [r1, #24]
 801d238:	6986      	ldr	r6, [r0, #24]
 801d23a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801d23e:	68bd      	ldr	r5, [r7, #8]
 801d240:	eba2 040e 	sub.w	r4, r2, lr
 801d244:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 801d248:	9602      	str	r6, [sp, #8]
 801d24a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801d24e:	68fc      	ldr	r4, [r7, #12]
 801d250:	68b6      	ldr	r6, [r6, #8]
 801d252:	eba2 020c 	sub.w	r2, r2, ip
 801d256:	42a5      	cmp	r5, r4
 801d258:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 801d25c:	d351      	bcc.n	801d302 <nl_func_sm_array_f32+0xd6>
 801d25e:	9303      	str	r3, [sp, #12]
 801d260:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801d264:	009b      	lsls	r3, r3, #2
 801d266:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801d26a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801d26e:	f1ce 0200 	rsb	r2, lr, #0
 801d272:	9301      	str	r3, [sp, #4]
 801d274:	f1cc 0300 	rsb	r3, ip, #0
 801d278:	9204      	str	r2, [sp, #16]
 801d27a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801d27e:	9305      	str	r3, [sp, #20]
 801d280:	9b02      	ldr	r3, [sp, #8]
 801d282:	9a07      	ldr	r2, [sp, #28]
 801d284:	60bd      	str	r5, [r7, #8]
 801d286:	609e      	str	r6, [r3, #8]
 801d288:	9b06      	ldr	r3, [sp, #24]
 801d28a:	6992      	ldr	r2, [r2, #24]
 801d28c:	699b      	ldr	r3, [r3, #24]
 801d28e:	6894      	ldr	r4, [r2, #8]
 801d290:	9a03      	ldr	r2, [sp, #12]
 801d292:	689b      	ldr	r3, [r3, #8]
 801d294:	2a01      	cmp	r2, #1
 801d296:	ed93 8a00 	vldr	s16, [r3]
 801d29a:	d93b      	bls.n	801d314 <nl_func_sm_array_f32+0xe8>
 801d29c:	9901      	ldr	r1, [sp, #4]
 801d29e:	1d1a      	adds	r2, r3, #4
 801d2a0:	eb03 0b01 	add.w	fp, r3, r1
 801d2a4:	ecf2 7a01 	vldmia	r2!, {s15}
 801d2a8:	4593      	cmp	fp, r2
 801d2aa:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801d2ae:	d1f9      	bne.n	801d2a4 <nl_func_sm_array_f32+0x78>
 801d2b0:	469a      	mov	sl, r3
 801d2b2:	46a1      	mov	r9, r4
 801d2b4:	46a0      	mov	r8, r4
 801d2b6:	eddf 8a1a 	vldr	s17, [pc, #104]	; 801d320 <nl_func_sm_array_f32+0xf4>
 801d2ba:	ecba 0a01 	vldmia	sl!, {s0}
 801d2be:	ee30 0a48 	vsub.f32	s0, s0, s16
 801d2c2:	f006 fbe5 	bl	8023a90 <expf>
 801d2c6:	45d3      	cmp	fp, sl
 801d2c8:	eca8 0a01 	vstmia	r8!, {s0}
 801d2cc:	ee78 8a80 	vadd.f32	s17, s17, s0
 801d2d0:	d1f3      	bne.n	801d2ba <nl_func_sm_array_f32+0x8e>
 801d2d2:	eef5 8a40 	vcmp.f32	s17, #0.0
 801d2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2da:	d00b      	beq.n	801d2f4 <nl_func_sm_array_f32+0xc8>
 801d2dc:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801d2e0:	9b01      	ldr	r3, [sp, #4]
 801d2e2:	441c      	add	r4, r3
 801d2e4:	edd9 7a00 	vldr	s15, [r9]
 801d2e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d2ec:	ece9 7a01 	vstmia	r9!, {s15}
 801d2f0:	454c      	cmp	r4, r9
 801d2f2:	d1f7      	bne.n	801d2e4 <nl_func_sm_array_f32+0xb8>
 801d2f4:	9b04      	ldr	r3, [sp, #16]
 801d2f6:	68fc      	ldr	r4, [r7, #12]
 801d2f8:	441d      	add	r5, r3
 801d2fa:	9b05      	ldr	r3, [sp, #20]
 801d2fc:	42ac      	cmp	r4, r5
 801d2fe:	441e      	add	r6, r3
 801d300:	d9be      	bls.n	801d280 <nl_func_sm_array_f32+0x54>
 801d302:	9a02      	ldr	r2, [sp, #8]
 801d304:	60bc      	str	r4, [r7, #8]
 801d306:	68d3      	ldr	r3, [r2, #12]
 801d308:	6093      	str	r3, [r2, #8]
 801d30a:	b009      	add	sp, #36	; 0x24
 801d30c:	ecbd 8b04 	vpop	{d8-d9}
 801d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d314:	2a00      	cmp	r2, #0
 801d316:	d0ed      	beq.n	801d2f4 <nl_func_sm_array_f32+0xc8>
 801d318:	9a01      	ldr	r2, [sp, #4]
 801d31a:	eb03 0b02 	add.w	fp, r3, r2
 801d31e:	e7c7      	b.n	801d2b0 <nl_func_sm_array_f32+0x84>
 801d320:	00000000 	.word	0x00000000

0801d324 <forward_sm>:
 801d324:	6982      	ldr	r2, [r0, #24]
 801d326:	8813      	ldrh	r3, [r2, #0]
 801d328:	b333      	cbz	r3, 801d378 <forward_sm+0x54>
 801d32a:	6852      	ldr	r2, [r2, #4]
 801d32c:	6851      	ldr	r1, [r2, #4]
 801d32e:	b101      	cbz	r1, 801d332 <forward_sm+0xe>
 801d330:	6809      	ldr	r1, [r1, #0]
 801d332:	2b01      	cmp	r3, #1
 801d334:	d91d      	bls.n	801d372 <forward_sm+0x4e>
 801d336:	6913      	ldr	r3, [r2, #16]
 801d338:	b1cb      	cbz	r3, 801d36e <forward_sm+0x4a>
 801d33a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d33c:	6818      	ldr	r0, [r3, #0]
 801d33e:	b083      	sub	sp, #12
 801d340:	688b      	ldr	r3, [r1, #8]
 801d342:	68cd      	ldr	r5, [r1, #12]
 801d344:	68c2      	ldr	r2, [r0, #12]
 801d346:	0a1b      	lsrs	r3, r3, #8
 801d348:	686e      	ldr	r6, [r5, #4]
 801d34a:	6857      	ldr	r7, [r2, #4]
 801d34c:	d016      	beq.n	801d37c <forward_sm+0x58>
 801d34e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801d352:	2201      	movs	r2, #1
 801d354:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801d358:	429d      	cmp	r5, r3
 801d35a:	fb04 f202 	mul.w	r2, r4, r2
 801d35e:	d1f9      	bne.n	801d354 <forward_sm+0x30>
 801d360:	4633      	mov	r3, r6
 801d362:	9701      	str	r7, [sp, #4]
 801d364:	9600      	str	r6, [sp, #0]
 801d366:	f7ff ff61 	bl	801d22c <nl_func_sm_array_f32>
 801d36a:	b003      	add	sp, #12
 801d36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d36e:	68db      	ldr	r3, [r3, #12]
 801d370:	deff      	udf	#255	; 0xff
 801d372:	2300      	movs	r3, #0
 801d374:	685b      	ldr	r3, [r3, #4]
 801d376:	deff      	udf	#255	; 0xff
 801d378:	685b      	ldr	r3, [r3, #4]
 801d37a:	deff      	udf	#255	; 0xff
 801d37c:	2201      	movs	r2, #1
 801d37e:	e7ef      	b.n	801d360 <forward_sm+0x3c>

0801d380 <ai_check_custom_types>:
 801d380:	4b13      	ldr	r3, [pc, #76]	; (801d3d0 <ai_check_custom_types+0x50>)
 801d382:	b082      	sub	sp, #8
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	9301      	str	r3, [sp, #4]
 801d388:	b118      	cbz	r0, 801d392 <ai_check_custom_types+0x12>
 801d38a:	7803      	ldrb	r3, [r0, #0]
 801d38c:	2b03      	cmp	r3, #3
 801d38e:	d002      	beq.n	801d396 <ai_check_custom_types+0x16>
 801d390:	2000      	movs	r0, #0
 801d392:	b002      	add	sp, #8
 801d394:	4770      	bx	lr
 801d396:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801d39a:	4293      	cmp	r3, r2
 801d39c:	d004      	beq.n	801d3a8 <ai_check_custom_types+0x28>
 801d39e:	2001      	movs	r0, #1
 801d3a0:	f080 0001 	eor.w	r0, r0, #1
 801d3a4:	b002      	add	sp, #8
 801d3a6:	4770      	bx	lr
 801d3a8:	7842      	ldrb	r2, [r0, #1]
 801d3aa:	3001      	adds	r0, #1
 801d3ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801d3b0:	429a      	cmp	r2, r3
 801d3b2:	d1f4      	bne.n	801d39e <ai_check_custom_types+0x1e>
 801d3b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801d3b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d3bc:	429a      	cmp	r2, r3
 801d3be:	d1ee      	bne.n	801d39e <ai_check_custom_types+0x1e>
 801d3c0:	7842      	ldrb	r2, [r0, #1]
 801d3c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d3c6:	429a      	cmp	r2, r3
 801d3c8:	d1e9      	bne.n	801d39e <ai_check_custom_types+0x1e>
 801d3ca:	2000      	movs	r0, #0
 801d3cc:	e7e8      	b.n	801d3a0 <ai_check_custom_types+0x20>
 801d3ce:	bf00      	nop
 801d3d0:	0802400c 	.word	0x0802400c

0801d3d4 <ai_layers_init_all>:
 801d3d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801d3d6:	b16a      	cbz	r2, 801d3f4 <ai_layers_init_all+0x20>
 801d3d8:	6913      	ldr	r3, [r2, #16]
 801d3da:	60d0      	str	r0, [r2, #12]
 801d3dc:	429a      	cmp	r2, r3
 801d3de:	f04f 0201 	mov.w	r2, #1
 801d3e2:	d007      	beq.n	801d3f4 <ai_layers_init_all+0x20>
 801d3e4:	b133      	cbz	r3, 801d3f4 <ai_layers_init_all+0x20>
 801d3e6:	6919      	ldr	r1, [r3, #16]
 801d3e8:	3201      	adds	r2, #1
 801d3ea:	60d8      	str	r0, [r3, #12]
 801d3ec:	4299      	cmp	r1, r3
 801d3ee:	bf18      	it	ne
 801d3f0:	2900      	cmpne	r1, #0
 801d3f2:	d101      	bne.n	801d3f8 <ai_layers_init_all+0x24>
 801d3f4:	4610      	mov	r0, r2
 801d3f6:	4770      	bx	lr
 801d3f8:	460b      	mov	r3, r1
 801d3fa:	e7f4      	b.n	801d3e6 <ai_layers_init_all+0x12>

0801d3fc <ai_layers_post_init_all>:
 801d3fc:	b538      	push	{r3, r4, r5, lr}
 801d3fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801d400:	b184      	cbz	r4, 801d424 <ai_layers_post_init_all+0x28>
 801d402:	2500      	movs	r5, #0
 801d404:	6863      	ldr	r3, [r4, #4]
 801d406:	4620      	mov	r0, r4
 801d408:	07db      	lsls	r3, r3, #31
 801d40a:	d503      	bpl.n	801d414 <ai_layers_post_init_all+0x18>
 801d40c:	6a23      	ldr	r3, [r4, #32]
 801d40e:	b10b      	cbz	r3, 801d414 <ai_layers_post_init_all+0x18>
 801d410:	3501      	adds	r5, #1
 801d412:	4798      	blx	r3
 801d414:	6923      	ldr	r3, [r4, #16]
 801d416:	429c      	cmp	r4, r3
 801d418:	bf18      	it	ne
 801d41a:	2b00      	cmpne	r3, #0
 801d41c:	461c      	mov	r4, r3
 801d41e:	d1f1      	bne.n	801d404 <ai_layers_post_init_all+0x8>
 801d420:	4628      	mov	r0, r5
 801d422:	bd38      	pop	{r3, r4, r5, pc}
 801d424:	4625      	mov	r5, r4
 801d426:	e7fb      	b.n	801d420 <ai_layers_post_init_all+0x24>

0801d428 <ai_layers_forward_all>:
 801d428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d42c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801d42e:	4604      	mov	r4, r0
 801d430:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801d432:	2f00      	cmp	r7, #0
 801d434:	d02b      	beq.n	801d48e <ai_layers_forward_all+0x66>
 801d436:	2d00      	cmp	r5, #0
 801d438:	d03d      	beq.n	801d4b6 <ai_layers_forward_all+0x8e>
 801d43a:	2600      	movs	r6, #0
 801d43c:	6385      	str	r5, [r0, #56]	; 0x38
 801d43e:	4629      	mov	r1, r5
 801d440:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801d442:	2001      	movs	r0, #1
 801d444:	46b0      	mov	r8, r6
 801d446:	47b8      	blx	r7
 801d448:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d44a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d44c:	2002      	movs	r0, #2
 801d44e:	47b8      	blx	r7
 801d450:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801d452:	696b      	ldr	r3, [r5, #20]
 801d454:	4628      	mov	r0, r5
 801d456:	4798      	blx	r3
 801d458:	692b      	ldr	r3, [r5, #16]
 801d45a:	2003      	movs	r0, #3
 801d45c:	429d      	cmp	r5, r3
 801d45e:	4619      	mov	r1, r3
 801d460:	d009      	beq.n	801d476 <ai_layers_forward_all+0x4e>
 801d462:	63a3      	str	r3, [r4, #56]	; 0x38
 801d464:	3601      	adds	r6, #1
 801d466:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d468:	47b8      	blx	r7
 801d46a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d46c:	2900      	cmp	r1, #0
 801d46e:	d1ec      	bne.n	801d44a <ai_layers_forward_all+0x22>
 801d470:	4630      	mov	r0, r6
 801d472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d476:	2100      	movs	r1, #0
 801d478:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801d47c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d47e:	3601      	adds	r6, #1
 801d480:	47b8      	blx	r7
 801d482:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d484:	2900      	cmp	r1, #0
 801d486:	d1e0      	bne.n	801d44a <ai_layers_forward_all+0x22>
 801d488:	4630      	mov	r0, r6
 801d48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d48e:	b195      	cbz	r5, 801d4b6 <ai_layers_forward_all+0x8e>
 801d490:	463e      	mov	r6, r7
 801d492:	6385      	str	r5, [r0, #56]	; 0x38
 801d494:	696b      	ldr	r3, [r5, #20]
 801d496:	4628      	mov	r0, r5
 801d498:	4798      	blx	r3
 801d49a:	692b      	ldr	r3, [r5, #16]
 801d49c:	3601      	adds	r6, #1
 801d49e:	42ab      	cmp	r3, r5
 801d4a0:	461d      	mov	r5, r3
 801d4a2:	d003      	beq.n	801d4ac <ai_layers_forward_all+0x84>
 801d4a4:	63a3      	str	r3, [r4, #56]	; 0x38
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d1f4      	bne.n	801d494 <ai_layers_forward_all+0x6c>
 801d4aa:	e7e1      	b.n	801d470 <ai_layers_forward_all+0x48>
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	4630      	mov	r0, r6
 801d4b0:	63a3      	str	r3, [r4, #56]	; 0x38
 801d4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4b6:	462e      	mov	r6, r5
 801d4b8:	4630      	mov	r0, r6
 801d4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4be:	bf00      	nop

0801d4c0 <ai_layers_destroy_all>:
 801d4c0:	b538      	push	{r3, r4, r5, lr}
 801d4c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801d4c4:	b184      	cbz	r4, 801d4e8 <ai_layers_destroy_all+0x28>
 801d4c6:	2500      	movs	r5, #0
 801d4c8:	6863      	ldr	r3, [r4, #4]
 801d4ca:	4620      	mov	r0, r4
 801d4cc:	075b      	lsls	r3, r3, #29
 801d4ce:	d503      	bpl.n	801d4d8 <ai_layers_destroy_all+0x18>
 801d4d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d4d2:	b10b      	cbz	r3, 801d4d8 <ai_layers_destroy_all+0x18>
 801d4d4:	3501      	adds	r5, #1
 801d4d6:	4798      	blx	r3
 801d4d8:	6923      	ldr	r3, [r4, #16]
 801d4da:	429c      	cmp	r4, r3
 801d4dc:	bf18      	it	ne
 801d4de:	2b00      	cmpne	r3, #0
 801d4e0:	461c      	mov	r4, r3
 801d4e2:	d1f1      	bne.n	801d4c8 <ai_layers_destroy_all+0x8>
 801d4e4:	4628      	mov	r0, r5
 801d4e6:	bd38      	pop	{r3, r4, r5, pc}
 801d4e8:	4625      	mov	r5, r4
 801d4ea:	e7fb      	b.n	801d4e4 <ai_layers_destroy_all+0x24>

0801d4ec <pool_func_ap_array_integer_UINT8>:
 801d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4f0:	b093      	sub	sp, #76	; 0x4c
 801d4f2:	6985      	ldr	r5, [r0, #24]
 801d4f4:	460f      	mov	r7, r1
 801d4f6:	469c      	mov	ip, r3
 801d4f8:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801d4fa:	6803      	ldr	r3, [r0, #0]
 801d4fc:	69a1      	ldr	r1, [r4, #24]
 801d4fe:	68a8      	ldr	r0, [r5, #8]
 801d500:	6825      	ldr	r5, [r4, #0]
 801d502:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801d506:	6889      	ldr	r1, [r1, #8]
 801d508:	940d      	str	r4, [sp, #52]	; 0x34
 801d50a:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 801d50e:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 801d512:	940e      	str	r4, [sp, #56]	; 0x38
 801d514:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 801d518:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 801d51c:	940f      	str	r4, [sp, #60]	; 0x3c
 801d51e:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 801d522:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801d526:	9410      	str	r4, [sp, #64]	; 0x40
 801d528:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d03b      	beq.n	801d5a8 <pool_func_ap_array_integer_UINT8+0xbc>
 801d530:	685e      	ldr	r6, [r3, #4]
 801d532:	46b3      	mov	fp, r6
 801d534:	2e00      	cmp	r6, #0
 801d536:	d030      	beq.n	801d59a <pool_func_ap_array_integer_UINT8+0xae>
 801d538:	885c      	ldrh	r4, [r3, #2]
 801d53a:	9411      	str	r4, [sp, #68]	; 0x44
 801d53c:	2c00      	cmp	r4, #0
 801d53e:	d050      	beq.n	801d5e2 <pool_func_ap_array_integer_UINT8+0xf6>
 801d540:	6834      	ldr	r4, [r6, #0]
 801d542:	ed94 0a00 	vldr	s0, [r4]
 801d546:	2d00      	cmp	r5, #0
 801d548:	d067      	beq.n	801d61a <pool_func_ap_array_integer_UINT8+0x12e>
 801d54a:	686c      	ldr	r4, [r5, #4]
 801d54c:	2c00      	cmp	r4, #0
 801d54e:	d052      	beq.n	801d5f6 <pool_func_ap_array_integer_UINT8+0x10a>
 801d550:	886e      	ldrh	r6, [r5, #2]
 801d552:	9611      	str	r6, [sp, #68]	; 0x44
 801d554:	2e00      	cmp	r6, #0
 801d556:	d032      	beq.n	801d5be <pool_func_ap_array_integer_UINT8+0xd2>
 801d558:	6826      	ldr	r6, [r4, #0]
 801d55a:	edd6 0a00 	vldr	s1, [r6]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d153      	bne.n	801d60a <pool_func_ap_array_integer_UINT8+0x11e>
 801d562:	6864      	ldr	r4, [r4, #4]
 801d564:	7824      	ldrb	r4, [r4, #0]
 801d566:	f8cd 9020 	str.w	r9, [sp, #32]
 801d56a:	f8cd 801c 	str.w	r8, [sp, #28]
 801d56e:	f8cd e018 	str.w	lr, [sp, #24]
 801d572:	f8cd c000 	str.w	ip, [sp]
 801d576:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 801d57a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d57c:	4613      	mov	r3, r2
 801d57e:	463a      	mov	r2, r7
 801d580:	9405      	str	r4, [sp, #20]
 801d582:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d584:	9404      	str	r4, [sp, #16]
 801d586:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d588:	9403      	str	r4, [sp, #12]
 801d58a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d58c:	e9cd a401 	strd	sl, r4, [sp, #4]
 801d590:	f002 fe08 	bl	80201a4 <st_uint8_avepool>
 801d594:	b013      	add	sp, #76	; 0x4c
 801d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d59a:	2d00      	cmp	r5, #0
 801d59c:	d02e      	beq.n	801d5fc <pool_func_ap_array_integer_UINT8+0x110>
 801d59e:	686c      	ldr	r4, [r5, #4]
 801d5a0:	b93c      	cbnz	r4, 801d5b2 <pool_func_ap_array_integer_UINT8+0xc6>
 801d5a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d5a6:	e00d      	b.n	801d5c4 <pool_func_ap_array_integer_UINT8+0xd8>
 801d5a8:	2d00      	cmp	r5, #0
 801d5aa:	d027      	beq.n	801d5fc <pool_func_ap_array_integer_UINT8+0x110>
 801d5ac:	686c      	ldr	r4, [r5, #4]
 801d5ae:	2c00      	cmp	r4, #0
 801d5b0:	d03e      	beq.n	801d630 <pool_func_ap_array_integer_UINT8+0x144>
 801d5b2:	886e      	ldrh	r6, [r5, #2]
 801d5b4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d5b8:	9611      	str	r6, [sp, #68]	; 0x44
 801d5ba:	2e00      	cmp	r6, #0
 801d5bc:	d1cc      	bne.n	801d558 <pool_func_ap_array_integer_UINT8+0x6c>
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d03d      	beq.n	801d63e <pool_func_ap_array_integer_UINT8+0x152>
 801d5c2:	685e      	ldr	r6, [r3, #4]
 801d5c4:	46b3      	mov	fp, r6
 801d5c6:	2e00      	cmp	r6, #0
 801d5c8:	d02e      	beq.n	801d628 <pool_func_ap_array_integer_UINT8+0x13c>
 801d5ca:	eddf 0a1e 	vldr	s1, [pc, #120]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d5ce:	885b      	ldrh	r3, [r3, #2]
 801d5d0:	b953      	cbnz	r3, 801d5e8 <pool_func_ap_array_integer_UINT8+0xfc>
 801d5d2:	2c00      	cmp	r4, #0
 801d5d4:	d0c7      	beq.n	801d566 <pool_func_ap_array_integer_UINT8+0x7a>
 801d5d6:	886d      	ldrh	r5, [r5, #2]
 801d5d8:	9511      	str	r5, [sp, #68]	; 0x44
 801d5da:	2d00      	cmp	r5, #0
 801d5dc:	d1c1      	bne.n	801d562 <pool_func_ap_array_integer_UINT8+0x76>
 801d5de:	2400      	movs	r4, #0
 801d5e0:	e7c1      	b.n	801d566 <pool_func_ap_array_integer_UINT8+0x7a>
 801d5e2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d5e6:	e7ae      	b.n	801d546 <pool_func_ap_array_integer_UINT8+0x5a>
 801d5e8:	f8db 3004 	ldr.w	r3, [fp, #4]
 801d5ec:	781b      	ldrb	r3, [r3, #0]
 801d5ee:	2d00      	cmp	r5, #0
 801d5f0:	d0f5      	beq.n	801d5de <pool_func_ap_array_integer_UINT8+0xf2>
 801d5f2:	686c      	ldr	r4, [r5, #4]
 801d5f4:	e7ed      	b.n	801d5d2 <pool_func_ap_array_integer_UINT8+0xe6>
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d1e4      	bne.n	801d5c4 <pool_func_ap_array_integer_UINT8+0xd8>
 801d5fa:	e01b      	b.n	801d634 <pool_func_ap_array_integer_UINT8+0x148>
 801d5fc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d600:	462b      	mov	r3, r5
 801d602:	462c      	mov	r4, r5
 801d604:	eef0 0a40 	vmov.f32	s1, s0
 801d608:	e7ad      	b.n	801d566 <pool_func_ap_array_integer_UINT8+0x7a>
 801d60a:	f8d3 b004 	ldr.w	fp, [r3, #4]
 801d60e:	f1bb 0f00 	cmp.w	fp, #0
 801d612:	d1dc      	bne.n	801d5ce <pool_func_ap_array_integer_UINT8+0xe2>
 801d614:	465b      	mov	r3, fp
 801d616:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d618:	e7df      	b.n	801d5da <pool_func_ap_array_integer_UINT8+0xee>
 801d61a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d61c:	eddf 0a09 	vldr	s1, [pc, #36]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d620:	2b00      	cmp	r3, #0
 801d622:	d1e1      	bne.n	801d5e8 <pool_func_ap_array_integer_UINT8+0xfc>
 801d624:	461c      	mov	r4, r3
 801d626:	e79e      	b.n	801d566 <pool_func_ap_array_integer_UINT8+0x7a>
 801d628:	4633      	mov	r3, r6
 801d62a:	eddf 0a06 	vldr	s1, [pc, #24]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d62e:	e7d0      	b.n	801d5d2 <pool_func_ap_array_integer_UINT8+0xe6>
 801d630:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d634:	2300      	movs	r3, #0
 801d636:	eddf 0a03 	vldr	s1, [pc, #12]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d63a:	461c      	mov	r4, r3
 801d63c:	e793      	b.n	801d566 <pool_func_ap_array_integer_UINT8+0x7a>
 801d63e:	eddf 0a01 	vldr	s1, [pc, #4]	; 801d644 <pool_func_ap_array_integer_UINT8+0x158>
 801d642:	e7cc      	b.n	801d5de <pool_func_ap_array_integer_UINT8+0xf2>
 801d644:	00000000 	.word	0x00000000

0801d648 <st_uaua8_convolve_rank1upd>:
 801d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d64c:	b083      	sub	sp, #12
 801d64e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801d652:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 801d656:	fb13 f304 	smulbb	r3, r3, r4
 801d65a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d65c:	fb13 f600 	smulbb	r6, r3, r0
 801d660:	2a00      	cmp	r2, #0
 801d662:	d068      	beq.n	801d736 <st_uaua8_convolve_rank1upd+0xee>
 801d664:	b2b6      	uxth	r6, r6
 801d666:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801d66a:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 801d66e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801d672:	f006 0603 	and.w	r6, r6, #3
 801d676:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 801d67a:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 801d67e:	eb0e 0882 	add.w	r8, lr, r2, lsl #2
 801d682:	f1a9 0904 	sub.w	r9, r9, #4
 801d686:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 801d68a:	44a9      	add	r9, r5
 801d68c:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 801d690:	3301      	adds	r3, #1
 801d692:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 801d696:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 801d69a:	b293      	uxth	r3, r2
 801d69c:	9301      	str	r3, [sp, #4]
 801d69e:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 801d6a2:	d94b      	bls.n	801d73c <st_uaua8_convolve_rank1upd+0xf4>
 801d6a4:	eb01 050c 	add.w	r5, r1, ip
 801d6a8:	2400      	movs	r4, #0
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	f501 7000 	add.w	r0, r1, #512	; 0x200
 801d6b0:	461f      	mov	r7, r3
 801d6b2:	f851 2b04 	ldr.w	r2, [r1], #4
 801d6b6:	fa3f f382 	uxtb16	r3, r2
 801d6ba:	4281      	cmp	r1, r0
 801d6bc:	ea4f 2232 	mov.w	r2, r2, ror #8
 801d6c0:	fa97 f353 	uqadd16	r3, r7, r3
 801d6c4:	fa3f f282 	uxtb16	r2, r2
 801d6c8:	fa93 f752 	uqadd16	r7, r3, r2
 801d6cc:	d1f1      	bne.n	801d6b2 <st_uaua8_convolve_rank1upd+0x6a>
 801d6ce:	b2ba      	uxth	r2, r7
 801d6d0:	42a9      	cmp	r1, r5
 801d6d2:	eb02 4317 	add.w	r3, r2, r7, lsr #16
 801d6d6:	441c      	add	r4, r3
 801d6d8:	d1e7      	bne.n	801d6aa <st_uaua8_convolve_rank1upd+0x62>
 801d6da:	9801      	ldr	r0, [sp, #4]
 801d6dc:	b1b8      	cbz	r0, 801d70e <st_uaua8_convolve_rank1upd+0xc6>
 801d6de:	3801      	subs	r0, #1
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	b280      	uxth	r0, r0
 801d6e4:	3001      	adds	r0, #1
 801d6e6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801d6ea:	f851 3b04 	ldr.w	r3, [r1], #4
 801d6ee:	fa3f f583 	uxtb16	r5, r3
 801d6f2:	4281      	cmp	r1, r0
 801d6f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 801d6f8:	fa92 f255 	uqadd16	r2, r2, r5
 801d6fc:	fa3f f383 	uxtb16	r3, r3
 801d700:	fa92 f253 	uqadd16	r2, r2, r3
 801d704:	d1f1      	bne.n	801d6ea <st_uaua8_convolve_rank1upd+0xa2>
 801d706:	b293      	uxth	r3, r2
 801d708:	eb03 4212 	add.w	r2, r3, r2, lsr #16
 801d70c:	4414      	add	r4, r2
 801d70e:	b156      	cbz	r6, 801d726 <st_uaua8_convolve_rank1upd+0xde>
 801d710:	780b      	ldrb	r3, [r1, #0]
 801d712:	2e01      	cmp	r6, #1
 801d714:	441c      	add	r4, r3
 801d716:	d016      	beq.n	801d746 <st_uaua8_convolve_rank1upd+0xfe>
 801d718:	784b      	ldrb	r3, [r1, #1]
 801d71a:	2e02      	cmp	r6, #2
 801d71c:	441c      	add	r4, r3
 801d71e:	d010      	beq.n	801d742 <st_uaua8_convolve_rank1upd+0xfa>
 801d720:	788b      	ldrb	r3, [r1, #2]
 801d722:	3103      	adds	r1, #3
 801d724:	441c      	add	r4, r3
 801d726:	f85e 3b04 	ldr.w	r3, [lr], #4
 801d72a:	fb0a 3414 	mls	r4, sl, r4, r3
 801d72e:	45f0      	cmp	r8, lr
 801d730:	f849 4f04 	str.w	r4, [r9, #4]!
 801d734:	d1b3      	bne.n	801d69e <st_uaua8_convolve_rank1upd+0x56>
 801d736:	b003      	add	sp, #12
 801d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d73c:	4658      	mov	r0, fp
 801d73e:	2400      	movs	r4, #0
 801d740:	e7cc      	b.n	801d6dc <st_uaua8_convolve_rank1upd+0x94>
 801d742:	3102      	adds	r1, #2
 801d744:	e7ef      	b.n	801d726 <st_uaua8_convolve_rank1upd+0xde>
 801d746:	3101      	adds	r1, #1
 801d748:	e7ed      	b.n	801d726 <st_uaua8_convolve_rank1upd+0xde>
 801d74a:	bf00      	nop

0801d74c <st_uaua8_convolve>:
 801d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d750:	b0c5      	sub	sp, #276	; 0x114
 801d752:	4698      	mov	r8, r3
 801d754:	f8bd 4140 	ldrh.w	r4, [sp, #320]	; 0x140
 801d758:	f8bd 3144 	ldrh.w	r3, [sp, #324]	; 0x144
 801d75c:	920e      	str	r2, [sp, #56]	; 0x38
 801d75e:	9322      	str	r3, [sp, #136]	; 0x88
 801d760:	fb14 f303 	smulbb	r3, r4, r3
 801d764:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 801d766:	fb13 f308 	smulbb	r3, r3, r8
 801d76a:	9010      	str	r0, [sp, #64]	; 0x40
 801d76c:	9107      	str	r1, [sp, #28]
 801d76e:	b29b      	uxth	r3, r3
 801d770:	9858      	ldr	r0, [sp, #352]	; 0x160
 801d772:	9957      	ldr	r1, [sp, #348]	; 0x15c
 801d774:	931c      	str	r3, [sp, #112]	; 0x70
 801d776:	7813      	ldrb	r3, [r2, #0]
 801d778:	f9b0 0000 	ldrsh.w	r0, [r0]
 801d77c:	9320      	str	r3, [sp, #128]	; 0x80
 801d77e:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 801d782:	2800      	cmp	r0, #0
 801d784:	6809      	ldr	r1, [r1, #0]
 801d786:	9321      	str	r3, [sp, #132]	; 0x84
 801d788:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
 801d78c:	f8bd 2174 	ldrh.w	r2, [sp, #372]	; 0x174
 801d790:	9316      	str	r3, [sp, #88]	; 0x58
 801d792:	f8bd 314c 	ldrh.w	r3, [sp, #332]	; 0x14c
 801d796:	9419      	str	r4, [sp, #100]	; 0x64
 801d798:	9323      	str	r3, [sp, #140]	; 0x8c
 801d79a:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 801d79e:	901f      	str	r0, [sp, #124]	; 0x7c
 801d7a0:	9311      	str	r3, [sp, #68]	; 0x44
 801d7a2:	f8bd 3154 	ldrh.w	r3, [sp, #340]	; 0x154
 801d7a6:	911b      	str	r1, [sp, #108]	; 0x6c
 801d7a8:	9318      	str	r3, [sp, #96]	; 0x60
 801d7aa:	f89d 3164 	ldrb.w	r3, [sp, #356]	; 0x164
 801d7ae:	931d      	str	r3, [sp, #116]	; 0x74
 801d7b0:	f89d 316c 	ldrb.w	r3, [sp, #364]	; 0x16c
 801d7b4:	9212      	str	r2, [sp, #72]	; 0x48
 801d7b6:	f8bd 2178 	ldrh.w	r2, [sp, #376]	; 0x178
 801d7ba:	921e      	str	r2, [sp, #120]	; 0x78
 801d7bc:	f340 821c 	ble.w	801dbf8 <st_uaua8_convolve+0x4ac>
 801d7c0:	2201      	movs	r2, #1
 801d7c2:	4083      	lsls	r3, r0
 801d7c4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801d7c6:	4082      	lsls	r2, r0
 801d7c8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801d7cc:	931a      	str	r3, [sp, #104]	; 0x68
 801d7ce:	9c07      	ldr	r4, [sp, #28]
 801d7d0:	a92c      	add	r1, sp, #176	; 0xb0
 801d7d2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801d7d4:	ab28      	add	r3, sp, #160	; 0xa0
 801d7d6:	9426      	str	r4, [sp, #152]	; 0x98
 801d7d8:	aa24      	add	r2, sp, #144	; 0x90
 801d7da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d7dc:	a830      	add	r0, sp, #192	; 0xc0
 801d7de:	973c      	str	r7, [sp, #240]	; 0xf0
 801d7e0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801d7e2:	9425      	str	r4, [sp, #148]	; 0x94
 801d7e4:	973d      	str	r7, [sp, #244]	; 0xf4
 801d7e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d7e8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801d7ea:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801d7ec:	973e      	str	r7, [sp, #248]	; 0xf8
 801d7ee:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801d7f0:	9100      	str	r1, [sp, #0]
 801d7f2:	a93a      	add	r1, sp, #232	; 0xe8
 801d7f4:	962d      	str	r6, [sp, #180]	; 0xb4
 801d7f6:	973f      	str	r7, [sp, #252]	; 0xfc
 801d7f8:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
 801d7fc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801d7fe:	942e      	str	r4, [sp, #184]	; 0xb8
 801d800:	f001 fb6c 	bl	801eedc <ai_padding_opt_init>
 801d804:	2d00      	cmp	r5, #0
 801d806:	f000 8171 	beq.w	801daec <st_uaua8_convolve+0x3a0>
 801d80a:	0073      	lsls	r3, r6, #1
 801d80c:	f8dd b17c 	ldr.w	fp, [sp, #380]	; 0x17c
 801d810:	ea4f 0948 	mov.w	r9, r8, lsl #1
 801d814:	fb08 f104 	mul.w	r1, r8, r4
 801d818:	fb04 f303 	mul.w	r3, r4, r3
 801d81c:	427a      	negs	r2, r7
 801d81e:	f9bd a074 	ldrsh.w	sl, [sp, #116]	; 0x74
 801d822:	2400      	movs	r4, #0
 801d824:	fb09 b303 	mla	r3, r9, r3, fp
 801d828:	9f07      	ldr	r7, [sp, #28]
 801d82a:	9114      	str	r1, [sp, #80]	; 0x50
 801d82c:	0049      	lsls	r1, r1, #1
 801d82e:	9313      	str	r3, [sp, #76]	; 0x4c
 801d830:	b293      	uxth	r3, r2
 801d832:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801d836:	46da      	mov	sl, fp
 801d838:	46cb      	mov	fp, r9
 801d83a:	9417      	str	r4, [sp, #92]	; 0x5c
 801d83c:	9106      	str	r1, [sp, #24]
 801d83e:	9315      	str	r3, [sp, #84]	; 0x54
 801d840:	a830      	add	r0, sp, #192	; 0xc0
 801d842:	f001 fba5 	bl	801ef90 <ai_padding_opt_phase1>
 801d846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d074      	beq.n	801d936 <st_uaua8_convolve+0x1ea>
 801d84c:	2600      	movs	r6, #0
 801d84e:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 801d852:	960c      	str	r6, [sp, #48]	; 0x30
 801d854:	1a99      	subs	r1, r3, r2
 801d856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d858:	425a      	negs	r2, r3
 801d85a:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 801d85e:	930d      	str	r3, [sp, #52]	; 0x34
 801d860:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d862:	fb04 1303 	mla	r3, r4, r3, r1
 801d866:	9307      	str	r3, [sp, #28]
 801d868:	b293      	uxth	r3, r2
 801d86a:	9309      	str	r3, [sp, #36]	; 0x24
 801d86c:	4653      	mov	r3, sl
 801d86e:	46da      	mov	sl, fp
 801d870:	469b      	mov	fp, r3
 801d872:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d874:	2a00      	cmp	r2, #0
 801d876:	f000 8146 	beq.w	801db06 <st_uaua8_convolve+0x3ba>
 801d87a:	3a01      	subs	r2, #1
 801d87c:	2101      	movs	r1, #1
 801d87e:	9230      	str	r2, [sp, #192]	; 0xc0
 801d880:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
 801d884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d886:	9a07      	ldr	r2, [sp, #28]
 801d888:	4293      	cmp	r3, r2
 801d88a:	da3f      	bge.n	801d90c <st_uaua8_convolve+0x1c0>
 801d88c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d88e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d890:	fb06 2603 	mla	r6, r6, r3, r2
 801d894:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d89a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d89c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d89e:	4691      	mov	r9, r2
 801d8a0:	1af6      	subs	r6, r6, r3
 801d8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8a4:	42b3      	cmp	r3, r6
 801d8a6:	da29      	bge.n	801d8fc <st_uaua8_convolve+0x1b0>
 801d8a8:	ea4f 75d9 	mov.w	r5, r9, lsr #31
 801d8ac:	461c      	mov	r4, r3
 801d8ae:	469c      	mov	ip, r3
 801d8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8b2:	fb07 f102 	mul.w	r1, r7, r2
 801d8b6:	4293      	cmp	r3, r2
 801d8b8:	bfd8      	it	le
 801d8ba:	f045 0501 	orrle.w	r5, r5, #1
 801d8be:	f8cd 9020 	str.w	r9, [sp, #32]
 801d8c2:	910a      	str	r1, [sp, #40]	; 0x28
 801d8c4:	46a9      	mov	r9, r5
 801d8c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d8c8:	4567      	cmp	r7, ip
 801d8ca:	4642      	mov	r2, r8
 801d8cc:	4659      	mov	r1, fp
 801d8ce:	4628      	mov	r0, r5
 801d8d0:	bfcc      	ite	gt
 801d8d2:	f04f 0e00 	movgt.w	lr, #0
 801d8d6:	f04f 0e01 	movle.w	lr, #1
 801d8da:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 801d8de:	d103      	bne.n	801d8e8 <st_uaua8_convolve+0x19c>
 801d8e0:	f1b9 0f00 	cmp.w	r9, #0
 801d8e4:	f000 8106 	beq.w	801daf4 <st_uaua8_convolve+0x3a8>
 801d8e8:	f002 fd84 	bl	80203f4 <st_dsp_arm_fill_q15>
 801d8ec:	3401      	adds	r4, #1
 801d8ee:	44d3      	add	fp, sl
 801d8f0:	b224      	sxth	r4, r4
 801d8f2:	42b4      	cmp	r4, r6
 801d8f4:	46a4      	mov	ip, r4
 801d8f6:	dbe7      	blt.n	801d8c8 <st_uaua8_convolve+0x17c>
 801d8f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d8fc:	f109 0901 	add.w	r9, r9, #1
 801d900:	9b07      	ldr	r3, [sp, #28]
 801d902:	fa0f f989 	sxth.w	r9, r9
 801d906:	4599      	cmp	r9, r3
 801d908:	464a      	mov	r2, r9
 801d90a:	dbca      	blt.n	801d8a2 <st_uaua8_convolve+0x156>
 801d90c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d90e:	455b      	cmp	r3, fp
 801d910:	f000 812f 	beq.w	801db72 <st_uaua8_convolve+0x426>
 801d914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d916:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d918:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d91a:	4403      	add	r3, r0
 801d91c:	3101      	adds	r1, #1
 801d91e:	461a      	mov	r2, r3
 801d920:	b20b      	sxth	r3, r1
 801d922:	b292      	uxth	r2, r2
 801d924:	930c      	str	r3, [sp, #48]	; 0x30
 801d926:	461e      	mov	r6, r3
 801d928:	9209      	str	r2, [sp, #36]	; 0x24
 801d92a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d92c:	429a      	cmp	r2, r3
 801d92e:	dca0      	bgt.n	801d872 <st_uaua8_convolve+0x126>
 801d930:	465b      	mov	r3, fp
 801d932:	46d3      	mov	fp, sl
 801d934:	469a      	mov	sl, r3
 801d936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d938:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d93a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d93c:	4403      	add	r3, r0
 801d93e:	3101      	adds	r1, #1
 801d940:	461a      	mov	r2, r3
 801d942:	b20b      	sxth	r3, r1
 801d944:	b292      	uxth	r2, r2
 801d946:	9317      	str	r3, [sp, #92]	; 0x5c
 801d948:	461c      	mov	r4, r3
 801d94a:	9215      	str	r2, [sp, #84]	; 0x54
 801d94c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d94e:	429a      	cmp	r2, r3
 801d950:	f73f af76 	bgt.w	801d840 <st_uaua8_convolve+0xf4>
 801d954:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801d956:	4553      	cmp	r3, sl
 801d958:	f000 80c8 	beq.w	801daec <st_uaua8_convolve+0x3a0>
 801d95c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d95e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801d962:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 801d966:	f240 814a 	bls.w	801dbfe <st_uaua8_convolve+0x4b2>
 801d96a:	f1a8 0781 	sub.w	r7, r8, #129	; 0x81
 801d96e:	995f      	ldr	r1, [sp, #380]	; 0x17c
 801d970:	2500      	movs	r5, #0
 801d972:	f3c7 17c8 	ubfx	r7, r7, #7, #9
 801d976:	1c7e      	adds	r6, r7, #1
 801d978:	eb01 2686 	add.w	r6, r1, r6, lsl #10
 801d97c:	f501 6480 	add.w	r4, r1, #1024	; 0x400
 801d980:	2300      	movs	r3, #0
 801d982:	6808      	ldr	r0, [r1, #0]
 801d984:	3108      	adds	r1, #8
 801d986:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801d98a:	428c      	cmp	r4, r1
 801d98c:	fa93 f350 	uqadd16	r3, r3, r0
 801d990:	fa93 f352 	uqadd16	r3, r3, r2
 801d994:	d1f5      	bne.n	801d982 <st_uaua8_convolve+0x236>
 801d996:	0c1a      	lsrs	r2, r3, #16
 801d998:	42b4      	cmp	r4, r6
 801d99a:	4621      	mov	r1, r4
 801d99c:	fa12 f383 	uxtah	r3, r2, r3
 801d9a0:	441d      	add	r5, r3
 801d9a2:	d1eb      	bne.n	801d97c <st_uaua8_convolve+0x230>
 801d9a4:	ebc7 2747 	rsb	r7, r7, r7, lsl #9
 801d9a8:	f1a8 0380 	sub.w	r3, r8, #128	; 0x80
 801d9ac:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
 801d9b0:	b29b      	uxth	r3, r3
 801d9b2:	b19b      	cbz	r3, 801d9dc <st_uaua8_convolve+0x290>
 801d9b4:	1e58      	subs	r0, r3, #1
 801d9b6:	2300      	movs	r3, #0
 801d9b8:	b280      	uxth	r0, r0
 801d9ba:	3001      	adds	r0, #1
 801d9bc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d9c0:	680c      	ldr	r4, [r1, #0]
 801d9c2:	3108      	adds	r1, #8
 801d9c4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801d9c8:	4281      	cmp	r1, r0
 801d9ca:	fa93 f354 	uqadd16	r3, r3, r4
 801d9ce:	fa93 f352 	uqadd16	r3, r3, r2
 801d9d2:	d1f5      	bne.n	801d9c0 <st_uaua8_convolve+0x274>
 801d9d4:	0c1a      	lsrs	r2, r3, #16
 801d9d6:	fa12 f383 	uxtah	r3, r2, r3
 801d9da:	441d      	add	r5, r3
 801d9dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d9de:	f013 0c03 	ands.w	ip, r3, #3
 801d9e2:	d00b      	beq.n	801d9fc <st_uaua8_convolve+0x2b0>
 801d9e4:	880b      	ldrh	r3, [r1, #0]
 801d9e6:	f1bc 0f01 	cmp.w	ip, #1
 801d9ea:	441d      	add	r5, r3
 801d9ec:	d006      	beq.n	801d9fc <st_uaua8_convolve+0x2b0>
 801d9ee:	884b      	ldrh	r3, [r1, #2]
 801d9f0:	f1bc 0f02 	cmp.w	ip, #2
 801d9f4:	441d      	add	r5, r3
 801d9f6:	d001      	beq.n	801d9fc <st_uaua8_convolve+0x2b0>
 801d9f8:	888b      	ldrh	r3, [r1, #4]
 801d9fa:	441d      	add	r5, r3
 801d9fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d9fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801da00:	4619      	mov	r1, r3
 801da02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801da04:	fb11 f903 	smulbb	r9, r1, r3
 801da08:	9921      	ldr	r1, [sp, #132]	; 0x84
 801da0a:	fb02 f909 	mul.w	r9, r2, r9
 801da0e:	fb05 9913 	mls	r9, r5, r3, r9
 801da12:	2900      	cmp	r1, #0
 801da14:	d06a      	beq.n	801daec <st_uaua8_convolve+0x3a0>
 801da16:	f108 33ff 	add.w	r3, r8, #4294967295
 801da1a:	985f      	ldr	r0, [sp, #380]	; 0x17c
 801da1c:	4f7a      	ldr	r7, [pc, #488]	; (801dc08 <st_uaua8_convolve+0x4bc>)
 801da1e:	b29b      	uxth	r3, r3
 801da20:	9e4e      	ldr	r6, [sp, #312]	; 0x138
 801da22:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 801da26:	9a5c      	ldr	r2, [sp, #368]	; 0x170
 801da28:	3301      	adds	r3, #1
 801da2a:	4411      	add	r1, r2
 801da2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801da2e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 801da32:	468a      	mov	sl, r1
 801da34:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801da38:	f1c2 0101 	rsb	r1, r2, #1
 801da3c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801da40:	f8dd b170 	ldr.w	fp, [sp, #368]	; 0x170
 801da44:	910a      	str	r1, [sp, #40]	; 0x28
 801da46:	9308      	str	r3, [sp, #32]
 801da48:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801da4c:	4691      	mov	r9, r2
 801da4e:	9b07      	ldr	r3, [sp, #28]
 801da50:	f85e 1b04 	ldr.w	r1, [lr], #4
 801da54:	4419      	add	r1, r3
 801da56:	9b06      	ldr	r3, [sp, #24]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	f000 80c9 	beq.w	801dbf0 <st_uaua8_convolve+0x4a4>
 801da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da60:	9d5f      	ldr	r5, [sp, #380]	; 0x17c
 801da62:	eb06 0803 	add.w	r8, r6, r3
 801da66:	f856 3b04 	ldr.w	r3, [r6], #4
 801da6a:	fa3f f083 	uxtb16	r0, r3
 801da6e:	b282      	uxth	r2, r0
 801da70:	682c      	ldr	r4, [r5, #0]
 801da72:	ea4f 2333 	mov.w	r3, r3, ror #8
 801da76:	fa3f f383 	uxtb16	r3, r3
 801da7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801da7e:	fb22 1104 	smlad	r1, r2, r4, r1
 801da82:	403b      	ands	r3, r7
 801da84:	686a      	ldr	r2, [r5, #4]
 801da86:	3508      	adds	r5, #8
 801da88:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 801da8c:	fb23 1102 	smlad	r1, r3, r2, r1
 801da90:	4546      	cmp	r6, r8
 801da92:	d1e8      	bne.n	801da66 <st_uaua8_convolve+0x31a>
 801da94:	9b08      	ldr	r3, [sp, #32]
 801da96:	f1bc 0f00 	cmp.w	ip, #0
 801da9a:	d015      	beq.n	801dac8 <st_uaua8_convolve+0x37c>
 801da9c:	7832      	ldrb	r2, [r6, #0]
 801da9e:	f1bc 0f01 	cmp.w	ip, #1
 801daa2:	8818      	ldrh	r0, [r3, #0]
 801daa4:	fb00 1102 	mla	r1, r0, r2, r1
 801daa8:	f000 80a0 	beq.w	801dbec <st_uaua8_convolve+0x4a0>
 801daac:	7872      	ldrb	r2, [r6, #1]
 801daae:	f1bc 0f02 	cmp.w	ip, #2
 801dab2:	8858      	ldrh	r0, [r3, #2]
 801dab4:	fb00 1102 	mla	r1, r0, r2, r1
 801dab8:	f000 809c 	beq.w	801dbf4 <st_uaua8_convolve+0x4a8>
 801dabc:	889a      	ldrh	r2, [r3, #4]
 801dabe:	3603      	adds	r6, #3
 801dac0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dac4:	fb02 1103 	mla	r1, r2, r3, r1
 801dac8:	f1b9 0f00 	cmp.w	r9, #0
 801dacc:	f10b 0b01 	add.w	fp, fp, #1
 801dad0:	dd79      	ble.n	801dbc6 <st_uaua8_convolve+0x47a>
 801dad2:	004b      	lsls	r3, r1, #1
 801dad4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801dad8:	fb53 1302 	smmla	r3, r3, r2, r1
 801dadc:	fa43 f309 	asr.w	r3, r3, r9
 801dae0:	f383 0308 	usat	r3, #8, r3
 801dae4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801dae8:	45da      	cmp	sl, fp
 801daea:	d1b0      	bne.n	801da4e <st_uaua8_convolve+0x302>
 801daec:	2000      	movs	r0, #0
 801daee:	b045      	add	sp, #276	; 0x114
 801daf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daf6:	eb03 000c 	add.w	r0, r3, ip
 801dafa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dafc:	fb08 3000 	mla	r0, r8, r0, r3
 801db00:	f002 faae 	bl	8020060 <st_uint8_to16_no_shift>
 801db04:	e6f2      	b.n	801d8ec <st_uaua8_convolve+0x1a0>
 801db06:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801db08:	2a00      	cmp	r2, #0
 801db0a:	d055      	beq.n	801dbb8 <st_uaua8_convolve+0x46c>
 801db0c:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 801db10:	3a01      	subs	r2, #1
 801db12:	2901      	cmp	r1, #1
 801db14:	9231      	str	r2, [sp, #196]	; 0xc4
 801db16:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
 801db1a:	f43f aeb3 	beq.w	801d884 <st_uaua8_convolve+0x138>
 801db1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db20:	9907      	ldr	r1, [sp, #28]
 801db22:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801db26:	428b      	cmp	r3, r1
 801db28:	f6bf aef0 	bge.w	801d90c <st_uaua8_convolve+0x1c0>
 801db2c:	f8cd a020 	str.w	sl, [sp, #32]
 801db30:	465e      	mov	r6, fp
 801db32:	46c2      	mov	sl, r8
 801db34:	461d      	mov	r5, r3
 801db36:	46b8      	mov	r8, r7
 801db38:	4618      	mov	r0, r3
 801db3a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 801db3e:	4689      	mov	r9, r1
 801db40:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801db42:	3501      	adds	r5, #1
 801db44:	fb00 4008 	mla	r0, r0, r8, r4
 801db48:	9b06      	ldr	r3, [sp, #24]
 801db4a:	4631      	mov	r1, r6
 801db4c:	b22d      	sxth	r5, r5
 801db4e:	fb0a 7000 	mla	r0, sl, r0, r7
 801db52:	465a      	mov	r2, fp
 801db54:	441e      	add	r6, r3
 801db56:	f002 fa83 	bl	8020060 <st_uint8_to16_no_shift>
 801db5a:	454d      	cmp	r5, r9
 801db5c:	4628      	mov	r0, r5
 801db5e:	dbf0      	blt.n	801db42 <st_uaua8_convolve+0x3f6>
 801db60:	46b3      	mov	fp, r6
 801db62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db64:	4647      	mov	r7, r8
 801db66:	46d0      	mov	r8, sl
 801db68:	455b      	cmp	r3, fp
 801db6a:	f8dd a020 	ldr.w	sl, [sp, #32]
 801db6e:	f47f aed1 	bne.w	801d914 <st_uaua8_convolve+0x1c8>
 801db72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801db74:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801db76:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801db78:	981d      	ldr	r0, [sp, #116]	; 0x74
 801db7a:	9204      	str	r2, [sp, #16]
 801db7c:	9401      	str	r4, [sp, #4]
 801db7e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801db80:	9305      	str	r3, [sp, #20]
 801db82:	9002      	str	r0, [sp, #8]
 801db84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801db86:	984e      	ldr	r0, [sp, #312]	; 0x138
 801db88:	9400      	str	r4, [sp, #0]
 801db8a:	e9dd 1220 	ldrd	r1, r2, [sp, #128]	; 0x80
 801db8e:	9103      	str	r1, [sp, #12]
 801db90:	995f      	ldr	r1, [sp, #380]	; 0x17c
 801db92:	f001 fe85 	bl	801f8a0 <st_uaua8_nn_mat_mult_kernel>
 801db96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db98:	9911      	ldr	r1, [sp, #68]	; 0x44
 801db9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801db9c:	440b      	add	r3, r1
 801db9e:	905c      	str	r0, [sp, #368]	; 0x170
 801dba0:	3201      	adds	r2, #1
 801dba2:	b29b      	uxth	r3, r3
 801dba4:	b212      	sxth	r2, r2
 801dba6:	9309      	str	r3, [sp, #36]	; 0x24
 801dba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dbaa:	4616      	mov	r6, r2
 801dbac:	920c      	str	r2, [sp, #48]	; 0x30
 801dbae:	4293      	cmp	r3, r2
 801dbb0:	dd18      	ble.n	801dbe4 <st_uaua8_convolve+0x498>
 801dbb2:	f8dd b17c 	ldr.w	fp, [sp, #380]	; 0x17c
 801dbb6:	e65c      	b.n	801d872 <st_uaua8_convolve+0x126>
 801dbb8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801dbba:	2101      	movs	r1, #1
 801dbbc:	3a01      	subs	r2, #1
 801dbbe:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
 801dbc2:	9232      	str	r2, [sp, #200]	; 0xc8
 801dbc4:	e65e      	b.n	801d884 <st_uaua8_convolve+0x138>
 801dbc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dbc8:	fa01 f303 	lsl.w	r3, r1, r3
 801dbcc:	f303 031f 	ssat	r3, #32, r3
 801dbd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801dbd2:	fb53 f312 	smmulr	r3, r3, r2
 801dbd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801dbd8:	4413      	add	r3, r2
 801dbda:	f383 0308 	usat	r3, #8, r3
 801dbde:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801dbe2:	e781      	b.n	801dae8 <st_uaua8_convolve+0x39c>
 801dbe4:	46d3      	mov	fp, sl
 801dbe6:	f8dd a17c 	ldr.w	sl, [sp, #380]	; 0x17c
 801dbea:	e6a4      	b.n	801d936 <st_uaua8_convolve+0x1ea>
 801dbec:	3601      	adds	r6, #1
 801dbee:	e76b      	b.n	801dac8 <st_uaua8_convolve+0x37c>
 801dbf0:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801dbf2:	e750      	b.n	801da96 <st_uaua8_convolve+0x34a>
 801dbf4:	3602      	adds	r6, #2
 801dbf6:	e767      	b.n	801dac8 <st_uaua8_convolve+0x37c>
 801dbf8:	931a      	str	r3, [sp, #104]	; 0x68
 801dbfa:	4615      	mov	r5, r2
 801dbfc:	e5e7      	b.n	801d7ce <st_uaua8_convolve+0x82>
 801dbfe:	995f      	ldr	r1, [sp, #380]	; 0x17c
 801dc00:	4643      	mov	r3, r8
 801dc02:	2500      	movs	r5, #0
 801dc04:	e6d5      	b.n	801d9b2 <st_uaua8_convolve+0x266>
 801dc06:	bf00      	nop
 801dc08:	ffff0000 	.word	0xffff0000

0801dc0c <align_factor>:
 801dc0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dc10:	b508      	push	{r3, lr}
 801dc12:	eeb4 0a67 	vcmp.f32	s0, s15
 801dc16:	2300      	movs	r3, #0
 801dc18:	8003      	strh	r3, [r0, #0]
 801dc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc1e:	d52d      	bpl.n	801dc7c <align_factor+0x70>
 801dc20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801dc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc28:	dd28      	ble.n	801dc7c <align_factor+0x70>
 801dc2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dc2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc36:	d511      	bpl.n	801dc5c <align_factor+0x50>
 801dc38:	2201      	movs	r2, #1
 801dc3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dc3e:	2302      	movs	r3, #2
 801dc40:	8002      	strh	r2, [r0, #0]
 801dc42:	e005      	b.n	801dc50 <align_factor+0x44>
 801dc44:	8003      	strh	r3, [r0, #0]
 801dc46:	b293      	uxth	r3, r2
 801dc48:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dc4c:	2b21      	cmp	r3, #33	; 0x21
 801dc4e:	d035      	beq.n	801dcbc <align_factor+0xb0>
 801dc50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dc54:	1c5a      	adds	r2, r3, #1
 801dc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc5a:	d4f3      	bmi.n	801dc44 <align_factor+0x38>
 801dc5c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801dcd0 <align_factor+0xc4>
 801dc60:	ee60 7a27 	vmul.f32	s15, s0, s15
 801dc64:	ee17 0a90 	vmov	r0, s15
 801dc68:	f7e2 fbba 	bl	80003e0 <__aeabi_f2lz>
 801dc6c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 801dc70:	d003      	beq.n	801dc7a <align_factor+0x6e>
 801dc72:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801dc76:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 801dc7a:	bd08      	pop	{r3, pc}
 801dc7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dc80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc88:	dde8      	ble.n	801dc5c <align_factor+0x50>
 801dc8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801dc8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dc92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801dc96:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 801dc9a:	8002      	strh	r2, [r0, #0]
 801dc9c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801dca0:	e005      	b.n	801dcae <align_factor+0xa2>
 801dca2:	8003      	strh	r3, [r0, #0]
 801dca4:	b293      	uxth	r3, r2
 801dca6:	ee20 0a07 	vmul.f32	s0, s0, s14
 801dcaa:	428b      	cmp	r3, r1
 801dcac:	d00a      	beq.n	801dcc4 <align_factor+0xb8>
 801dcae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dcb2:	1e5a      	subs	r2, r3, #1
 801dcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcb8:	dcf3      	bgt.n	801dca2 <align_factor+0x96>
 801dcba:	e7cf      	b.n	801dc5c <align_factor+0x50>
 801dcbc:	2300      	movs	r3, #0
 801dcbe:	8003      	strh	r3, [r0, #0]
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	bd08      	pop	{r3, pc}
 801dcc4:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 801dcc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dccc:	8003      	strh	r3, [r0, #0]
 801dcce:	e7c5      	b.n	801dc5c <align_factor+0x50>
 801dcd0:	4f000000 	.word	0x4f000000

0801dcd4 <st_uaua8_convolve_rgb>:
 801dcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcd8:	b0bf      	sub	sp, #252	; 0xfc
 801dcda:	460d      	mov	r5, r1
 801dcdc:	2a03      	cmp	r2, #3
 801dcde:	4683      	mov	fp, r0
 801dce0:	f8bd 1128 	ldrh.w	r1, [sp, #296]	; 0x128
 801dce4:	931a      	str	r3, [sp, #104]	; 0x68
 801dce6:	9111      	str	r1, [sp, #68]	; 0x44
 801dce8:	f8bd 3120 	ldrh.w	r3, [sp, #288]	; 0x120
 801dcec:	f8bd 112c 	ldrh.w	r1, [sp, #300]	; 0x12c
 801dcf0:	931b      	str	r3, [sp, #108]	; 0x6c
 801dcf2:	910a      	str	r1, [sp, #40]	; 0x28
 801dcf4:	f8bd 3124 	ldrh.w	r3, [sp, #292]	; 0x124
 801dcf8:	f89d 113c 	ldrb.w	r1, [sp, #316]	; 0x13c
 801dcfc:	f8bd 714c 	ldrh.w	r7, [sp, #332]	; 0x14c
 801dd00:	9113      	str	r1, [sp, #76]	; 0x4c
 801dd02:	9310      	str	r3, [sp, #64]	; 0x40
 801dd04:	984d      	ldr	r0, [sp, #308]	; 0x134
 801dd06:	9c4e      	ldr	r4, [sp, #312]	; 0x138
 801dd08:	9e50      	ldr	r6, [sp, #320]	; 0x140
 801dd0a:	f89d 1144 	ldrb.w	r1, [sp, #324]	; 0x144
 801dd0e:	970e      	str	r7, [sp, #56]	; 0x38
 801dd10:	f040 8212 	bne.w	801e138 <st_uaua8_convolve_rgb+0x464>
 801dd14:	fb13 f303 	smulbb	r3, r3, r3
 801dd18:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dd1c:	6800      	ldr	r0, [r0, #0]
 801dd1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd22:	2a00      	cmp	r2, #0
 801dd24:	9017      	str	r0, [sp, #92]	; 0x5c
 801dd26:	b29b      	uxth	r3, r3
 801dd28:	7830      	ldrb	r0, [r6, #0]
 801dd2a:	9215      	str	r2, [sp, #84]	; 0x54
 801dd2c:	9019      	str	r0, [sp, #100]	; 0x64
 801dd2e:	9318      	str	r3, [sp, #96]	; 0x60
 801dd30:	f340 81fc 	ble.w	801e12c <st_uaua8_convolve_rgb+0x458>
 801dd34:	4610      	mov	r0, r2
 801dd36:	2301      	movs	r3, #1
 801dd38:	fa01 f202 	lsl.w	r2, r1, r2
 801dd3c:	463c      	mov	r4, r7
 801dd3e:	4083      	lsls	r3, r0
 801dd40:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 801dd44:	9316      	str	r3, [sp, #88]	; 0x58
 801dd46:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dd48:	a926      	add	r1, sp, #152	; 0x98
 801dd4a:	ab22      	add	r3, sp, #136	; 0x88
 801dd4c:	aa1e      	add	r2, sp, #120	; 0x78
 801dd4e:	9100      	str	r1, [sp, #0]
 801dd50:	a82a      	add	r0, sp, #168	; 0xa8
 801dd52:	a934      	add	r1, sp, #208	; 0xd0
 801dd54:	e9cd 6627 	strd	r6, r6, [sp, #156]	; 0x9c
 801dd58:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dd5a:	e9cd 6638 	strd	r6, r6, [sp, #224]	; 0xe0
 801dd5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801dd60:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
 801dd64:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 801dd68:	e9cd 6636 	strd	r6, r6, [sp, #216]	; 0xd8
 801dd6c:	f001 f8b6 	bl	801eedc <ai_padding_opt_init>
 801dd70:	2c00      	cmp	r4, #0
 801dd72:	f000 814f 	beq.w	801e014 <st_uaua8_convolve_rgb+0x340>
 801dd76:	9910      	ldr	r1, [sp, #64]	; 0x40
 801dd78:	2400      	movs	r4, #0
 801dd7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dd7c:	46aa      	mov	sl, r5
 801dd7e:	460b      	mov	r3, r1
 801dd80:	9f54      	ldr	r7, [sp, #336]	; 0x150
 801dd82:	4242      	negs	r2, r0
 801dd84:	4ea5      	ldr	r6, [pc, #660]	; (801e01c <st_uaua8_convolve_rgb+0x348>)
 801dd86:	fb03 f301 	mul.w	r3, r3, r1
 801dd8a:	1a09      	subs	r1, r1, r0
 801dd8c:	b292      	uxth	r2, r2
 801dd8e:	9414      	str	r4, [sp, #80]	; 0x50
 801dd90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd94:	911d      	str	r1, [sp, #116]	; 0x74
 801dd96:	921c      	str	r2, [sp, #112]	; 0x70
 801dd98:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801dd9c:	9212      	str	r2, [sp, #72]	; 0x48
 801dd9e:	930f      	str	r3, [sp, #60]	; 0x3c
 801dda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dda2:	2500      	movs	r5, #0
 801dda4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801dda6:	a82a      	add	r0, sp, #168	; 0xa8
 801dda8:	950b      	str	r5, [sp, #44]	; 0x2c
 801ddaa:	fb03 2904 	mla	r9, r3, r4, r2
 801ddae:	f001 f8ef 	bl	801ef90 <ai_padding_opt_phase1>
 801ddb2:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801ddb6:	930c      	str	r3, [sp, #48]	; 0x30
 801ddb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ddba:	9307      	str	r3, [sp, #28]
 801ddbc:	4653      	mov	r3, sl
 801ddbe:	46ca      	mov	sl, r9
 801ddc0:	4699      	mov	r9, r3
 801ddc2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	f000 812b 	beq.w	801e020 <st_uaua8_convolve_rgb+0x34c>
 801ddca:	3b01      	subs	r3, #1
 801ddcc:	2201      	movs	r2, #1
 801ddce:	932a      	str	r3, [sp, #168]	; 0xa8
 801ddd0:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
 801ddd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddd6:	4553      	cmp	r3, sl
 801ddd8:	da5c      	bge.n	801de94 <st_uaua8_convolve_rgb+0x1c0>
 801ddda:	4619      	mov	r1, r3
 801dddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ddde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dde0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dde2:	468e      	mov	lr, r1
 801dde4:	fb05 2203 	mla	r2, r5, r3, r2
 801dde8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ddec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ddf0:	1a12      	subs	r2, r2, r0
 801ddf2:	469a      	mov	sl, r3
 801ddf4:	f8bd 004c 	ldrh.w	r0, [sp, #76]	; 0x4c
 801ddf8:	4694      	mov	ip, r2
 801ddfa:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801ddfe:	45d4      	cmp	ip, sl
 801de00:	dd3d      	ble.n	801de7e <st_uaua8_convolve_rgb+0x1aa>
 801de02:	fb01 f309 	mul.w	r3, r1, r9
 801de06:	ea4f 72de 	mov.w	r2, lr, lsr #31
 801de0a:	46b8      	mov	r8, r7
 801de0c:	9308      	str	r3, [sp, #32]
 801de0e:	4589      	cmp	r9, r1
 801de10:	bfd8      	it	le
 801de12:	f042 0201 	orrle.w	r2, r2, #1
 801de16:	4653      	mov	r3, sl
 801de18:	4651      	mov	r1, sl
 801de1a:	4589      	cmp	r9, r1
 801de1c:	f103 0501 	add.w	r5, r3, #1
 801de20:	f107 0706 	add.w	r7, r7, #6
 801de24:	bfcc      	ite	gt
 801de26:	2400      	movgt	r4, #0
 801de28:	2401      	movle	r4, #1
 801de2a:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 801de2e:	d100      	bne.n	801de32 <st_uaua8_convolve_rgb+0x15e>
 801de30:	b15a      	cbz	r2, 801de4a <st_uaua8_convolve_rgb+0x176>
 801de32:	b22b      	sxth	r3, r5
 801de34:	f827 0c04 	strh.w	r0, [r7, #-4]
 801de38:	f827 0c02 	strh.w	r0, [r7, #-2]
 801de3c:	4563      	cmp	r3, ip
 801de3e:	f827 0c06 	strh.w	r0, [r7, #-6]
 801de42:	4619      	mov	r1, r3
 801de44:	da1b      	bge.n	801de7e <st_uaua8_convolve_rgb+0x1aa>
 801de46:	46b8      	mov	r8, r7
 801de48:	e7e7      	b.n	801de1a <st_uaua8_convolve_rgb+0x146>
 801de4a:	9c08      	ldr	r4, [sp, #32]
 801de4c:	3301      	adds	r3, #1
 801de4e:	4421      	add	r1, r4
 801de50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801de52:	b21b      	sxth	r3, r3
 801de54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801de58:	4563      	cmp	r3, ip
 801de5a:	5861      	ldr	r1, [r4, r1]
 801de5c:	fa3f f581 	uxtb16	r5, r1
 801de60:	ea4f 2431 	mov.w	r4, r1, ror #8
 801de64:	ea05 0b06 	and.w	fp, r5, r6
 801de68:	fa3f f484 	uxtb16	r4, r4
 801de6c:	b2a4      	uxth	r4, r4
 801de6e:	4619      	mov	r1, r3
 801de70:	ea44 040b 	orr.w	r4, r4, fp
 801de74:	f8c8 4002 	str.w	r4, [r8, #2]
 801de78:	f827 5c06 	strh.w	r5, [r7, #-6]
 801de7c:	dbe3      	blt.n	801de46 <st_uaua8_convolve_rgb+0x172>
 801de7e:	f10e 0e01 	add.w	lr, lr, #1
 801de82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de84:	fa0f fe8e 	sxth.w	lr, lr
 801de88:	459e      	cmp	lr, r3
 801de8a:	4671      	mov	r1, lr
 801de8c:	dbb7      	blt.n	801ddfe <st_uaua8_convolve_rgb+0x12a>
 801de8e:	469a      	mov	sl, r3
 801de90:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801de94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801de96:	42bb      	cmp	r3, r7
 801de98:	f000 8107 	beq.w	801e0aa <st_uaua8_convolve_rgb+0x3d6>
 801de9c:	9b07      	ldr	r3, [sp, #28]
 801de9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dea2:	440b      	add	r3, r1
 801dea4:	3201      	adds	r2, #1
 801dea6:	b29b      	uxth	r3, r3
 801dea8:	b212      	sxth	r2, r2
 801deaa:	9307      	str	r3, [sp, #28]
 801deac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801deae:	4615      	mov	r5, r2
 801deb0:	920b      	str	r2, [sp, #44]	; 0x2c
 801deb2:	4293      	cmp	r3, r2
 801deb4:	dc85      	bgt.n	801ddc2 <st_uaua8_convolve_rgb+0xee>
 801deb6:	46ca      	mov	sl, r9
 801deb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801deba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801debc:	440b      	add	r3, r1
 801debe:	3201      	adds	r2, #1
 801dec0:	b29b      	uxth	r3, r3
 801dec2:	b212      	sxth	r2, r2
 801dec4:	9312      	str	r3, [sp, #72]	; 0x48
 801dec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dec8:	4614      	mov	r4, r2
 801deca:	9214      	str	r2, [sp, #80]	; 0x50
 801decc:	4293      	cmp	r3, r2
 801dece:	f73f af67 	bgt.w	801dda0 <st_uaua8_convolve_rgb+0xcc>
 801ded2:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801ded4:	42bb      	cmp	r3, r7
 801ded6:	f000 809d 	beq.w	801e014 <st_uaua8_convolve_rgb+0x340>
 801deda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dedc:	ea5f 0893 	movs.w	r8, r3, lsr #2
 801dee0:	f000 8127 	beq.w	801e132 <st_uaua8_convolve_rgb+0x45e>
 801dee4:	f108 31ff 	add.w	r1, r8, #4294967295
 801dee8:	9a54      	ldr	r2, [sp, #336]	; 0x150
 801deea:	2300      	movs	r3, #0
 801deec:	b289      	uxth	r1, r1
 801deee:	3101      	adds	r1, #1
 801def0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801def4:	6814      	ldr	r4, [r2, #0]
 801def6:	3208      	adds	r2, #8
 801def8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801defc:	428a      	cmp	r2, r1
 801defe:	fa93 f354 	uqadd16	r3, r3, r4
 801df02:	fa93 f350 	uqadd16	r3, r3, r0
 801df06:	d1f5      	bne.n	801def4 <st_uaua8_convolve_rgb+0x220>
 801df08:	fa1f fa83 	uxth.w	sl, r3
 801df0c:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
 801df10:	9918      	ldr	r1, [sp, #96]	; 0x60
 801df12:	f011 0703 	ands.w	r7, r1, #3
 801df16:	d009      	beq.n	801df2c <st_uaua8_convolve_rgb+0x258>
 801df18:	8811      	ldrh	r1, [r2, #0]
 801df1a:	2f01      	cmp	r7, #1
 801df1c:	440b      	add	r3, r1
 801df1e:	d005      	beq.n	801df2c <st_uaua8_convolve_rgb+0x258>
 801df20:	8851      	ldrh	r1, [r2, #2]
 801df22:	2f02      	cmp	r7, #2
 801df24:	440b      	add	r3, r1
 801df26:	d001      	beq.n	801df2c <st_uaua8_convolve_rgb+0x258>
 801df28:	8892      	ldrh	r2, [r2, #4]
 801df2a:	4413      	add	r3, r2
 801df2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801df2e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801df30:	4610      	mov	r0, r2
 801df32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801df34:	fb10 f902 	smulbb	r9, r0, r2
 801df38:	fb03 fa02 	mul.w	sl, r3, r2
 801df3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801df3e:	fb02 f909 	mul.w	r9, r2, r9
 801df42:	2900      	cmp	r1, #0
 801df44:	d066      	beq.n	801e014 <st_uaua8_convolve_rgb+0x340>
 801df46:	9854      	ldr	r0, [sp, #336]	; 0x150
 801df48:	f108 33ff 	add.w	r3, r8, #4294967295
 801df4c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 801e01c <st_uaua8_convolve_rgb+0x348>
 801df50:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 801df54:	9a52      	ldr	r2, [sp, #328]	; 0x148
 801df56:	b29b      	uxth	r3, r3
 801df58:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801df5a:	4411      	add	r1, r2
 801df5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801df5e:	3301      	adds	r3, #1
 801df60:	f1c2 0201 	rsb	r2, r2, #1
 801df64:	468b      	mov	fp, r1
 801df66:	920b      	str	r2, [sp, #44]	; 0x2c
 801df68:	009a      	lsls	r2, r3, #2
 801df6a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801df6e:	9209      	str	r2, [sp, #36]	; 0x24
 801df70:	930a      	str	r3, [sp, #40]	; 0x28
 801df72:	e9cd 8a07 	strd	r8, sl, [sp, #28]
 801df76:	f8dd a148 	ldr.w	sl, [sp, #328]	; 0x148
 801df7a:	f85e 1b04 	ldr.w	r1, [lr], #4
 801df7e:	9b08      	ldr	r3, [sp, #32]
 801df80:	4449      	add	r1, r9
 801df82:	1ac9      	subs	r1, r1, r3
 801df84:	9b07      	ldr	r3, [sp, #28]
 801df86:	2b00      	cmp	r3, #0
 801df88:	f000 80cc 	beq.w	801e124 <st_uaua8_convolve_rgb+0x450>
 801df8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df8e:	9d54      	ldr	r5, [sp, #336]	; 0x150
 801df90:	eb06 0803 	add.w	r8, r6, r3
 801df94:	f856 3b04 	ldr.w	r3, [r6], #4
 801df98:	fa3f f483 	uxtb16	r4, r3
 801df9c:	b2a0      	uxth	r0, r4
 801df9e:	682a      	ldr	r2, [r5, #0]
 801dfa0:	ea4f 2333 	mov.w	r3, r3, ror #8
 801dfa4:	fa3f f383 	uxtb16	r3, r3
 801dfa8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801dfac:	fb20 1202 	smlad	r2, r0, r2, r1
 801dfb0:	ea03 030c 	and.w	r3, r3, ip
 801dfb4:	6869      	ldr	r1, [r5, #4]
 801dfb6:	3508      	adds	r5, #8
 801dfb8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 801dfbc:	fb23 2101 	smlad	r1, r3, r1, r2
 801dfc0:	4546      	cmp	r6, r8
 801dfc2:	d1e7      	bne.n	801df94 <st_uaua8_convolve_rgb+0x2c0>
 801dfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfc6:	b19f      	cbz	r7, 801dff0 <st_uaua8_convolve_rgb+0x31c>
 801dfc8:	7832      	ldrb	r2, [r6, #0]
 801dfca:	2f01      	cmp	r7, #1
 801dfcc:	8818      	ldrh	r0, [r3, #0]
 801dfce:	fb00 1102 	mla	r1, r0, r2, r1
 801dfd2:	f000 80a5 	beq.w	801e120 <st_uaua8_convolve_rgb+0x44c>
 801dfd6:	7872      	ldrb	r2, [r6, #1]
 801dfd8:	2f02      	cmp	r7, #2
 801dfda:	8858      	ldrh	r0, [r3, #2]
 801dfdc:	fb00 1102 	mla	r1, r0, r2, r1
 801dfe0:	f000 80a2 	beq.w	801e128 <st_uaua8_convolve_rgb+0x454>
 801dfe4:	889a      	ldrh	r2, [r3, #4]
 801dfe6:	3603      	adds	r6, #3
 801dfe8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dfec:	fb02 1103 	mla	r1, r2, r3, r1
 801dff0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dff2:	f10a 0a01 	add.w	sl, sl, #1
 801dff6:	2a00      	cmp	r2, #0
 801dff8:	f340 8080 	ble.w	801e0fc <st_uaua8_convolve_rgb+0x428>
 801dffc:	004b      	lsls	r3, r1, #1
 801dffe:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801e002:	fb53 0301 	smmla	r3, r3, r1, r0
 801e006:	4113      	asrs	r3, r2
 801e008:	f383 0308 	usat	r3, #8, r3
 801e00c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801e010:	45d3      	cmp	fp, sl
 801e012:	d1b2      	bne.n	801df7a <st_uaua8_convolve_rgb+0x2a6>
 801e014:	2000      	movs	r0, #0
 801e016:	b03f      	add	sp, #252	; 0xfc
 801e018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e01c:	ffff0000 	.word	0xffff0000
 801e020:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e022:	2b00      	cmp	r3, #0
 801e024:	d063      	beq.n	801e0ee <st_uaua8_convolve_rgb+0x41a>
 801e026:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
 801e02a:	3b01      	subs	r3, #1
 801e02c:	2a01      	cmp	r2, #1
 801e02e:	932b      	str	r3, [sp, #172]	; 0xac
 801e030:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
 801e034:	f43f aece 	beq.w	801ddd4 <st_uaua8_convolve_rgb+0x100>
 801e038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e03a:	4553      	cmp	r3, sl
 801e03c:	f6bf af2a 	bge.w	801de94 <st_uaua8_convolve_rgb+0x1c0>
 801e040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e042:	469c      	mov	ip, r3
 801e044:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e046:	461c      	mov	r4, r3
 801e048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e04a:	fb05 1502 	mla	r5, r5, r2, r1
 801e04e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801e052:	1aed      	subs	r5, r5, r3
 801e054:	45ae      	cmp	lr, r5
 801e056:	da1d      	bge.n	801e094 <st_uaua8_convolve_rgb+0x3c0>
 801e058:	fb04 f009 	mul.w	r0, r4, r9
 801e05c:	4671      	mov	r1, lr
 801e05e:	4674      	mov	r4, lr
 801e060:	4404      	add	r4, r0
 801e062:	3101      	adds	r1, #1
 801e064:	3706      	adds	r7, #6
 801e066:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e06a:	b209      	sxth	r1, r1
 801e06c:	f85b 3004 	ldr.w	r3, [fp, r4]
 801e070:	fa3f f283 	uxtb16	r2, r3
 801e074:	ea4f 2333 	mov.w	r3, r3, ror #8
 801e078:	ea02 0806 	and.w	r8, r2, r6
 801e07c:	fa3f f383 	uxtb16	r3, r3
 801e080:	b29b      	uxth	r3, r3
 801e082:	42a9      	cmp	r1, r5
 801e084:	f827 2c06 	strh.w	r2, [r7, #-6]
 801e088:	460c      	mov	r4, r1
 801e08a:	ea43 0308 	orr.w	r3, r3, r8
 801e08e:	f847 3c04 	str.w	r3, [r7, #-4]
 801e092:	dbe5      	blt.n	801e060 <st_uaua8_convolve_rgb+0x38c>
 801e094:	f10c 0c01 	add.w	ip, ip, #1
 801e098:	fa0f fc8c 	sxth.w	ip, ip
 801e09c:	45d4      	cmp	ip, sl
 801e09e:	4664      	mov	r4, ip
 801e0a0:	dbd8      	blt.n	801e054 <st_uaua8_convolve_rgb+0x380>
 801e0a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e0a4:	42bb      	cmp	r3, r7
 801e0a6:	f47f aef9 	bne.w	801de9c <st_uaua8_convolve_rgb+0x1c8>
 801e0aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e0ac:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801e0ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e0b0:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e0b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e0b4:	9401      	str	r4, [sp, #4]
 801e0b6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e0b8:	9305      	str	r3, [sp, #20]
 801e0ba:	9204      	str	r2, [sp, #16]
 801e0bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e0be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e0c0:	9103      	str	r1, [sp, #12]
 801e0c2:	9002      	str	r0, [sp, #8]
 801e0c4:	9954      	ldr	r1, [sp, #336]	; 0x150
 801e0c6:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e0c8:	9400      	str	r4, [sp, #0]
 801e0ca:	f001 fbe9 	bl	801f8a0 <st_uaua8_nn_mat_mult_kernel>
 801e0ce:	9b07      	ldr	r3, [sp, #28]
 801e0d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e0d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e0d4:	440b      	add	r3, r1
 801e0d6:	9052      	str	r0, [sp, #328]	; 0x148
 801e0d8:	3201      	adds	r2, #1
 801e0da:	b29b      	uxth	r3, r3
 801e0dc:	b212      	sxth	r2, r2
 801e0de:	9307      	str	r3, [sp, #28]
 801e0e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0e2:	4615      	mov	r5, r2
 801e0e4:	920b      	str	r2, [sp, #44]	; 0x2c
 801e0e6:	4293      	cmp	r3, r2
 801e0e8:	dd17      	ble.n	801e11a <st_uaua8_convolve_rgb+0x446>
 801e0ea:	9f54      	ldr	r7, [sp, #336]	; 0x150
 801e0ec:	e669      	b.n	801ddc2 <st_uaua8_convolve_rgb+0xee>
 801e0ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e0f0:	2201      	movs	r2, #1
 801e0f2:	3b01      	subs	r3, #1
 801e0f4:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
 801e0f8:	932c      	str	r3, [sp, #176]	; 0xb0
 801e0fa:	e66b      	b.n	801ddd4 <st_uaua8_convolve_rgb+0x100>
 801e0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0fe:	fa01 f303 	lsl.w	r3, r1, r3
 801e102:	f303 031f 	ssat	r3, #32, r3
 801e106:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e108:	fb53 f312 	smmulr	r3, r3, r2
 801e10c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e10e:	4413      	add	r3, r2
 801e110:	f383 0308 	usat	r3, #8, r3
 801e114:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801e118:	e77a      	b.n	801e010 <st_uaua8_convolve_rgb+0x33c>
 801e11a:	46ca      	mov	sl, r9
 801e11c:	9f54      	ldr	r7, [sp, #336]	; 0x150
 801e11e:	e6cb      	b.n	801deb8 <st_uaua8_convolve_rgb+0x1e4>
 801e120:	3601      	adds	r6, #1
 801e122:	e765      	b.n	801dff0 <st_uaua8_convolve_rgb+0x31c>
 801e124:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801e126:	e74e      	b.n	801dfc6 <st_uaua8_convolve_rgb+0x2f2>
 801e128:	3602      	adds	r6, #2
 801e12a:	e761      	b.n	801dff0 <st_uaua8_convolve_rgb+0x31c>
 801e12c:	9116      	str	r1, [sp, #88]	; 0x58
 801e12e:	463c      	mov	r4, r7
 801e130:	e609      	b.n	801dd46 <st_uaua8_convolve_rgb+0x72>
 801e132:	9a54      	ldr	r2, [sp, #336]	; 0x150
 801e134:	4643      	mov	r3, r8
 801e136:	e6eb      	b.n	801df10 <st_uaua8_convolve_rgb+0x23c>
 801e138:	f06f 0002 	mvn.w	r0, #2
 801e13c:	e76b      	b.n	801e016 <st_uaua8_convolve_rgb+0x342>
 801e13e:	bf00      	nop

0801e140 <st_uaua8_convolve_1x1>:
 801e140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e144:	b08a      	sub	sp, #40	; 0x28
 801e146:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801e14a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801e14e:	2d01      	cmp	r5, #1
 801e150:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
 801e154:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
 801e158:	f8bd e05c 	ldrh.w	lr, [sp, #92]	; 0x5c
 801e15c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801e160:	f8bd a064 	ldrh.w	sl, [sp, #100]	; 0x64
 801e164:	f89d c074 	ldrb.w	ip, [sp, #116]	; 0x74
 801e168:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 801e16c:	d131      	bne.n	801e1d2 <st_uaua8_convolve_1x1+0x92>
 801e16e:	2e01      	cmp	r6, #1
 801e170:	d12f      	bne.n	801e1d2 <st_uaua8_convolve_1x1+0x92>
 801e172:	ea58 050e 	orrs.w	r5, r8, lr
 801e176:	d12c      	bne.n	801e1d2 <st_uaua8_convolve_1x1+0x92>
 801e178:	f1b9 0f01 	cmp.w	r9, #1
 801e17c:	d129      	bne.n	801e1d2 <st_uaua8_convolve_1x1+0x92>
 801e17e:	f1ba 0f01 	cmp.w	sl, #1
 801e182:	d126      	bne.n	801e1d2 <st_uaua8_convolve_1x1+0x92>
 801e184:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e186:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801e188:	f9b5 5000 	ldrsh.w	r5, [r5]
 801e18c:	f8d6 e000 	ldr.w	lr, [r6]
 801e190:	2d00      	cmp	r5, #0
 801e192:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801e194:	f896 8000 	ldrb.w	r8, [r6]
 801e198:	dd04      	ble.n	801e1a4 <st_uaua8_convolve_1x1+0x64>
 801e19a:	40ac      	lsls	r4, r5
 801e19c:	fa09 f905 	lsl.w	r9, r9, r5
 801e1a0:	eb04 0459 	add.w	r4, r4, r9, lsr #1
 801e1a4:	fb02 f101 	mul.w	r1, r2, r1
 801e1a8:	461e      	mov	r6, r3
 801e1aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e1ac:	9102      	str	r1, [sp, #8]
 801e1ae:	9308      	str	r3, [sp, #32]
 801e1b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e1b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e1b4:	f8cd 801c 	str.w	r8, [sp, #28]
 801e1b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e1ba:	e9cd c405 	strd	ip, r4, [sp, #20]
 801e1be:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801e1c2:	e9cd e500 	strd	lr, r5, [sp]
 801e1c6:	f000 ff2b 	bl	801f020 <st_uaua8_nn_mat_mult_nt_t>
 801e1ca:	2000      	movs	r0, #0
 801e1cc:	b00a      	add	sp, #40	; 0x28
 801e1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1d2:	f06f 0002 	mvn.w	r0, #2
 801e1d6:	e7f9      	b.n	801e1cc <st_uaua8_convolve_1x1+0x8c>

0801e1d8 <st_uaua8_conv_dw_Wadapt>:
 801e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1dc:	b08b      	sub	sp, #44	; 0x2c
 801e1de:	4616      	mov	r6, r2
 801e1e0:	461d      	mov	r5, r3
 801e1e2:	ea5f 0b91 	movs.w	fp, r1, lsr #2
 801e1e6:	9206      	str	r2, [sp, #24]
 801e1e8:	fb03 f202 	mul.w	r2, r3, r2
 801e1ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e1ee:	9307      	str	r3, [sp, #28]
 801e1f0:	fb02 fc01 	mul.w	ip, r2, r1
 801e1f4:	7824      	ldrb	r4, [r4, #0]
 801e1f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e1f8:	f10c 0c01 	add.w	ip, ip, #1
 801e1fc:	9409      	str	r4, [sp, #36]	; 0x24
 801e1fe:	9005      	str	r0, [sp, #20]
 801e200:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 801e204:	f02c 0c01 	bic.w	ip, ip, #1
 801e208:	449c      	add	ip, r3
 801e20a:	f000 8082 	beq.w	801e312 <st_uaua8_conv_dw_Wadapt+0x13a>
 801e20e:	f3c2 034f 	ubfx	r3, r2, #1, #16
 801e212:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e216:	1d04      	adds	r4, r0, #4
 801e218:	4682      	mov	sl, r0
 801e21a:	b292      	uxth	r2, r2
 801e21c:	9300      	str	r3, [sp, #0]
 801e21e:	fb16 f005 	smulbb	r0, r6, r5
 801e222:	3b01      	subs	r3, #1
 801e224:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e228:	f8cd b020 	str.w	fp, [sp, #32]
 801e22c:	b29b      	uxth	r3, r3
 801e22e:	f000 0201 	and.w	r2, r0, #1
 801e232:	ea4f 0941 	mov.w	r9, r1, lsl #1
 801e236:	f8df e134 	ldr.w	lr, [pc, #308]	; 801e36c <st_uaua8_conv_dw_Wadapt+0x194>
 801e23a:	9201      	str	r2, [sp, #4]
 801e23c:	011a      	lsls	r2, r3, #4
 801e23e:	3301      	adds	r3, #1
 801e240:	46a3      	mov	fp, r4
 801e242:	3220      	adds	r2, #32
 801e244:	9204      	str	r2, [sp, #16]
 801e246:	fb03 f209 	mul.w	r2, r3, r9
 801e24a:	011b      	lsls	r3, r3, #4
 801e24c:	9202      	str	r2, [sp, #8]
 801e24e:	9303      	str	r3, [sp, #12]
 801e250:	9b00      	ldr	r3, [sp, #0]
 801e252:	4656      	mov	r6, sl
 801e254:	b393      	cbz	r3, 801e2bc <st_uaua8_conv_dw_Wadapt+0xe4>
 801e256:	9b04      	ldr	r3, [sp, #16]
 801e258:	f10c 0510 	add.w	r5, ip, #16
 801e25c:	eb0c 0803 	add.w	r8, ip, r3
 801e260:	6833      	ldr	r3, [r6, #0]
 801e262:	5872      	ldr	r2, [r6, r1]
 801e264:	b29c      	uxth	r4, r3
 801e266:	ea02 000e 	and.w	r0, r2, lr
 801e26a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 801e26e:	ea40 4313 	orr.w	r3, r0, r3, lsr #16
 801e272:	fa3f f082 	uxtb16	r0, r2
 801e276:	fad0 f007 	ssub16	r0, r0, r7
 801e27a:	ea4f 2232 	mov.w	r2, r2, ror #8
 801e27e:	f845 0c10 	str.w	r0, [r5, #-16]
 801e282:	fa3f f282 	uxtb16	r2, r2
 801e286:	fad2 f207 	ssub16	r2, r2, r7
 801e28a:	f845 2c0c 	str.w	r2, [r5, #-12]
 801e28e:	fa3f f283 	uxtb16	r2, r3
 801e292:	fad2 f207 	ssub16	r2, r2, r7
 801e296:	ea4f 2333 	mov.w	r3, r3, ror #8
 801e29a:	f845 2c08 	str.w	r2, [r5, #-8]
 801e29e:	fa3f f383 	uxtb16	r3, r3
 801e2a2:	fad3 f307 	ssub16	r3, r3, r7
 801e2a6:	f845 3c04 	str.w	r3, [r5, #-4]
 801e2aa:	3510      	adds	r5, #16
 801e2ac:	444e      	add	r6, r9
 801e2ae:	45a8      	cmp	r8, r5
 801e2b0:	d1d6      	bne.n	801e260 <st_uaua8_conv_dw_Wadapt+0x88>
 801e2b2:	9b03      	ldr	r3, [sp, #12]
 801e2b4:	449c      	add	ip, r3
 801e2b6:	9b02      	ldr	r3, [sp, #8]
 801e2b8:	eb0a 0603 	add.w	r6, sl, r3
 801e2bc:	9b01      	ldr	r3, [sp, #4]
 801e2be:	b1f3      	cbz	r3, 801e2fe <st_uaua8_conv_dw_Wadapt+0x126>
 801e2c0:	6830      	ldr	r0, [r6, #0]
 801e2c2:	ea0e 2200 	and.w	r2, lr, r0, lsl #8
 801e2c6:	b283      	uxth	r3, r0
 801e2c8:	431a      	orrs	r2, r3
 801e2ca:	fa3f f282 	uxtb16	r2, r2
 801e2ce:	fad2 f207 	ssub16	r2, r2, r7
 801e2d2:	ea00 030e 	and.w	r3, r0, lr
 801e2d6:	0c14      	lsrs	r4, r2, #16
 801e2d8:	f8ac 2000 	strh.w	r2, [ip]
 801e2dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e2e0:	f8ac 4002 	strh.w	r4, [ip, #2]
 801e2e4:	ea4f 4333 	mov.w	r3, r3, ror #16
 801e2e8:	fa3f f383 	uxtb16	r3, r3
 801e2ec:	fad3 f307 	ssub16	r3, r3, r7
 801e2f0:	0c1a      	lsrs	r2, r3, #16
 801e2f2:	f8ac 3004 	strh.w	r3, [ip, #4]
 801e2f6:	f10c 0c08 	add.w	ip, ip, #8
 801e2fa:	f82c 2c02 	strh.w	r2, [ip, #-2]
 801e2fe:	f10a 0a04 	add.w	sl, sl, #4
 801e302:	45d3      	cmp	fp, sl
 801e304:	d1a4      	bne.n	801e250 <st_uaua8_conv_dw_Wadapt+0x78>
 801e306:	f8dd b020 	ldr.w	fp, [sp, #32]
 801e30a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801e30e:	fa1f fb8b 	uxth.w	fp, fp
 801e312:	f011 0703 	ands.w	r7, r1, #3
 801e316:	d026      	beq.n	801e366 <st_uaua8_conv_dw_Wadapt+0x18e>
 801e318:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e31c:	fb13 f302 	smulbb	r3, r3, r2
 801e320:	b29b      	uxth	r3, r3
 801e322:	b303      	cbz	r3, 801e366 <st_uaua8_conv_dw_Wadapt+0x18e>
 801e324:	3b01      	subs	r3, #1
 801e326:	445f      	add	r7, fp
 801e328:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801e32c:	b29b      	uxth	r3, r3
 801e32e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e332:	b2bf      	uxth	r7, r7
 801e334:	f103 0e01 	add.w	lr, r3, #1
 801e338:	005b      	lsls	r3, r3, #1
 801e33a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801e33e:	1c9e      	adds	r6, r3, #2
 801e340:	f10b 0301 	add.w	r3, fp, #1
 801e344:	eb08 000b 	add.w	r0, r8, fp
 801e348:	eb0c 0406 	add.w	r4, ip, r6
 801e34c:	4662      	mov	r2, ip
 801e34e:	fa1f fb83 	uxth.w	fp, r3
 801e352:	7803      	ldrb	r3, [r0, #0]
 801e354:	4408      	add	r0, r1
 801e356:	1b5b      	subs	r3, r3, r5
 801e358:	f822 3b02 	strh.w	r3, [r2], #2
 801e35c:	42a2      	cmp	r2, r4
 801e35e:	d1f8      	bne.n	801e352 <st_uaua8_conv_dw_Wadapt+0x17a>
 801e360:	45bb      	cmp	fp, r7
 801e362:	44f4      	add	ip, lr
 801e364:	d1ec      	bne.n	801e340 <st_uaua8_conv_dw_Wadapt+0x168>
 801e366:	b00b      	add	sp, #44	; 0x2c
 801e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e36c:	ffff0000 	.word	0xffff0000

0801e370 <st_uaua8_convolve_dw>:
 801e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e374:	b0d9      	sub	sp, #356	; 0x164
 801e376:	901c      	str	r0, [sp, #112]	; 0x70
 801e378:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 801e37a:	931b      	str	r3, [sp, #108]	; 0x6c
 801e37c:	6803      	ldr	r3, [r0, #0]
 801e37e:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
 801e380:	9306      	str	r3, [sp, #24]
 801e382:	f8bd 3190 	ldrh.w	r3, [sp, #400]	; 0x190
 801e386:	9105      	str	r1, [sp, #20]
 801e388:	932e      	str	r3, [sp, #184]	; 0xb8
 801e38a:	f8bd 3194 	ldrh.w	r3, [sp, #404]	; 0x194
 801e38e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e392:	9335      	str	r3, [sp, #212]	; 0xd4
 801e394:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801e398:	2900      	cmp	r1, #0
 801e39a:	9214      	str	r2, [sp, #80]	; 0x50
 801e39c:	932d      	str	r3, [sp, #180]	; 0xb4
 801e39e:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
 801e3a2:	f8bd 21c4 	ldrh.w	r2, [sp, #452]	; 0x1c4
 801e3a6:	9336      	str	r3, [sp, #216]	; 0xd8
 801e3a8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801e3ac:	9225      	str	r2, [sp, #148]	; 0x94
 801e3ae:	9320      	str	r3, [sp, #128]	; 0x80
 801e3b0:	f8bd 31a4 	ldrh.w	r3, [sp, #420]	; 0x1a4
 801e3b4:	f8bd 21c8 	ldrh.w	r2, [sp, #456]	; 0x1c8
 801e3b8:	9333      	str	r3, [sp, #204]	; 0xcc
 801e3ba:	f89d 31b4 	ldrb.w	r3, [sp, #436]	; 0x1b4
 801e3be:	9109      	str	r1, [sp, #36]	; 0x24
 801e3c0:	9307      	str	r3, [sp, #28]
 801e3c2:	f8bd 818c 	ldrh.w	r8, [sp, #396]	; 0x18c
 801e3c6:	f89d 31bc 	ldrb.w	r3, [sp, #444]	; 0x1bc
 801e3ca:	9234      	str	r2, [sp, #208]	; 0xd0
 801e3cc:	f340 8580 	ble.w	801eed0 <st_uaua8_convolve_dw+0xb60>
 801e3d0:	2201      	movs	r2, #1
 801e3d2:	408b      	lsls	r3, r1
 801e3d4:	408a      	lsls	r2, r1
 801e3d6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801e3da:	9304      	str	r3, [sp, #16]
 801e3dc:	9c05      	ldr	r4, [sp, #20]
 801e3de:	a940      	add	r1, sp, #256	; 0x100
 801e3e0:	ab3c      	add	r3, sp, #240	; 0xf0
 801e3e2:	aa38      	add	r2, sp, #224	; 0xe0
 801e3e4:	943a      	str	r4, [sp, #232]	; 0xe8
 801e3e6:	a844      	add	r0, sp, #272	; 0x110
 801e3e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e3ea:	9100      	str	r1, [sp, #0]
 801e3ec:	a94e      	add	r1, sp, #312	; 0x138
 801e3ee:	9439      	str	r4, [sp, #228]	; 0xe4
 801e3f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e3f2:	943e      	str	r4, [sp, #248]	; 0xf8
 801e3f4:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 801e3f6:	943d      	str	r4, [sp, #244]	; 0xf4
 801e3f8:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 801e3fa:	9442      	str	r4, [sp, #264]	; 0x108
 801e3fc:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 801e3fe:	9441      	str	r4, [sp, #260]	; 0x104
 801e400:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801e402:	9450      	str	r4, [sp, #320]	; 0x140
 801e404:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 801e406:	9451      	str	r4, [sp, #324]	; 0x144
 801e408:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e40a:	9452      	str	r4, [sp, #328]	; 0x148
 801e40c:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 801e40e:	9453      	str	r4, [sp, #332]	; 0x14c
 801e410:	f000 fd64 	bl	801eedc <ai_padding_opt_init>
 801e414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e416:	fbb8 f3f3 	udiv	r3, r8, r3
 801e41a:	079a      	lsls	r2, r3, #30
 801e41c:	9316      	str	r3, [sp, #88]	; 0x58
 801e41e:	f040 8554 	bne.w	801eeca <st_uaua8_convolve_dw+0xb5a>
 801e422:	109d      	asrs	r5, r3, #2
 801e424:	2304      	movs	r3, #4
 801e426:	9316      	str	r3, [sp, #88]	; 0x58
 801e428:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	f000 81e9 	beq.w	801e802 <st_uaua8_convolve_dw+0x492>
 801e430:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e432:	ea4f 0198 	mov.w	r1, r8, lsr #2
 801e436:	9835      	ldr	r0, [sp, #212]	; 0xd4
 801e438:	4613      	mov	r3, r2
 801e43a:	9126      	str	r1, [sp, #152]	; 0x98
 801e43c:	fb12 f200 	smulbb	r2, r2, r0
 801e440:	3901      	subs	r1, #1
 801e442:	fb00 f303 	mul.w	r3, r0, r3
 801e446:	ea4f 0048 	mov.w	r0, r8, lsl #1
 801e44a:	b294      	uxth	r4, r2
 801e44c:	f3c3 064f 	ubfx	r6, r3, #1, #16
 801e450:	fb08 f303 	mul.w	r3, r8, r3
 801e454:	900f      	str	r0, [sp, #60]	; 0x3c
 801e456:	1e62      	subs	r2, r4, #1
 801e458:	3301      	adds	r3, #1
 801e45a:	1e70      	subs	r0, r6, #1
 801e45c:	9417      	str	r4, [sp, #92]	; 0x5c
 801e45e:	b292      	uxth	r2, r2
 801e460:	f023 0e01 	bic.w	lr, r3, #1
 801e464:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 801e466:	b280      	uxth	r0, r0
 801e468:	3201      	adds	r2, #1
 801e46a:	f103 0920 	add.w	r9, r3, #32
 801e46e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e470:	1c44      	adds	r4, r0, #1
 801e472:	b289      	uxth	r1, r1
 801e474:	f1c3 0c00 	rsb	ip, r3, #0
 801e478:	2300      	movs	r3, #0
 801e47a:	960b      	str	r6, [sp, #44]	; 0x2c
 801e47c:	1c4e      	adds	r6, r1, #1
 801e47e:	9331      	str	r3, [sp, #196]	; 0xc4
 801e480:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e482:	fb03 f505 	mul.w	r5, r3, r5
 801e486:	9532      	str	r5, [sp, #200]	; 0xc8
 801e488:	9d73      	ldr	r5, [sp, #460]	; 0x1cc
 801e48a:	4475      	add	r5, lr
 801e48c:	9528      	str	r5, [sp, #160]	; 0xa0
 801e48e:	0105      	lsls	r5, r0, #4
 801e490:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e492:	9529      	str	r5, [sp, #164]	; 0xa4
 801e494:	0125      	lsls	r5, r4, #4
 801e496:	fb04 f000 	mul.w	r0, r4, r0
 801e49a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e49c:	9511      	str	r5, [sp, #68]	; 0x44
 801e49e:	9010      	str	r0, [sp, #64]	; 0x40
 801e4a0:	0050      	lsls	r0, r2, #1
 801e4a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e4a4:	901a      	str	r0, [sp, #104]	; 0x68
 801e4a6:	f004 0001 	and.w	r0, r4, #1
 801e4aa:	fb03 f302 	mul.w	r3, r3, r2
 801e4ae:	2400      	movs	r4, #0
 801e4b0:	900c      	str	r0, [sp, #48]	; 0x30
 801e4b2:	eb09 1001 	add.w	r0, r9, r1, lsl #4
 801e4b6:	9337      	str	r3, [sp, #220]	; 0xdc
 801e4b8:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 801e4ba:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e4bc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 801e4c0:	900d      	str	r0, [sp, #52]	; 0x34
 801e4c2:	00b0      	lsls	r0, r6, #2
 801e4c4:	932b      	str	r3, [sp, #172]	; 0xac
 801e4c6:	f008 0303 	and.w	r3, r8, #3
 801e4ca:	902a      	str	r0, [sp, #168]	; 0xa8
 801e4cc:	931f      	str	r3, [sp, #124]	; 0x7c
 801e4ce:	008b      	lsls	r3, r1, #2
 801e4d0:	932c      	str	r3, [sp, #176]	; 0xb0
 801e4d2:	fa1f f38c 	uxth.w	r3, ip
 801e4d6:	932f      	str	r3, [sp, #188]	; 0xbc
 801e4d8:	9b07      	ldr	r3, [sp, #28]
 801e4da:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801e4de:	9330      	str	r3, [sp, #192]	; 0xc0
 801e4e0:	a844      	add	r0, sp, #272	; 0x110
 801e4e2:	f000 fd55 	bl	801ef90 <ai_padding_opt_phase1>
 801e4e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	f000 817c 	beq.w	801e7e6 <st_uaua8_convolve_dw+0x476>
 801e4ee:	f9bd 00bc 	ldrsh.w	r0, [sp, #188]	; 0xbc
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	46c3      	mov	fp, r8
 801e4f6:	9027      	str	r0, [sp, #156]	; 0x9c
 801e4f8:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801e4fa:	911d      	str	r1, [sp, #116]	; 0x74
 801e4fc:	e9dd 3235 	ldrd	r3, r2, [sp, #212]	; 0xd4
 801e500:	1a9a      	subs	r2, r3, r2
 801e502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e504:	425b      	negs	r3, r3
 801e506:	fb00 2204 	mla	r2, r0, r4, r2
 801e50a:	b29b      	uxth	r3, r3
 801e50c:	9213      	str	r2, [sp, #76]	; 0x4c
 801e50e:	460a      	mov	r2, r1
 801e510:	9318      	str	r3, [sp, #96]	; 0x60
 801e512:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e514:	3b01      	subs	r3, #1
 801e516:	930e      	str	r3, [sp, #56]	; 0x38
 801e518:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	f000 838a 	beq.w	801ec34 <st_uaua8_convolve_dw+0x8c4>
 801e520:	3b01      	subs	r3, #1
 801e522:	2101      	movs	r1, #1
 801e524:	9344      	str	r3, [sp, #272]	; 0x110
 801e526:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e528:	f8ad 1136 	strh.w	r1, [sp, #310]	; 0x136
 801e52c:	2b01      	cmp	r3, #1
 801e52e:	f000 83c1 	beq.w	801ecb4 <st_uaua8_convolve_dw+0x944>
 801e532:	2b04      	cmp	r3, #4
 801e534:	f000 8455 	beq.w	801ede2 <st_uaua8_convolve_dw+0xa72>
 801e538:	2b02      	cmp	r3, #2
 801e53a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e53c:	4618      	mov	r0, r3
 801e53e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e540:	f000 83fb 	beq.w	801ed3a <st_uaua8_convolve_dw+0x9ca>
 801e544:	4298      	cmp	r0, r3
 801e546:	dd44      	ble.n	801e5d2 <st_uaua8_convolve_dw+0x262>
 801e548:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e54a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801e54c:	fb02 0201 	mla	r2, r2, r1, r0
 801e550:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801e552:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 801e556:	1a12      	subs	r2, r2, r0
 801e558:	9119      	str	r1, [sp, #100]	; 0x64
 801e55a:	4291      	cmp	r1, r2
 801e55c:	9202      	str	r2, [sp, #8]
 801e55e:	da38      	bge.n	801e5d2 <st_uaua8_convolve_dw+0x262>
 801e560:	f8dd a1cc 	ldr.w	sl, [sp, #460]	; 0x1cc
 801e564:	46d9      	mov	r9, fp
 801e566:	461a      	mov	r2, r3
 801e568:	9308      	str	r3, [sp, #32]
 801e56a:	9905      	ldr	r1, [sp, #20]
 801e56c:	0fd2      	lsrs	r2, r2, #31
 801e56e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e570:	f1ca 0b00 	rsb	fp, sl, #0
 801e574:	fb01 f103 	mul.w	r1, r1, r3
 801e578:	4298      	cmp	r0, r3
 801e57a:	bfd8      	it	le
 801e57c:	f042 0201 	orrle.w	r2, r2, #1
 801e580:	9112      	str	r1, [sp, #72]	; 0x48
 801e582:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e584:	9203      	str	r2, [sp, #12]
 801e586:	4688      	mov	r8, r1
 801e588:	9b05      	ldr	r3, [sp, #20]
 801e58a:	428b      	cmp	r3, r1
 801e58c:	bfcc      	ite	gt
 801e58e:	2300      	movgt	r3, #0
 801e590:	2301      	movle	r3, #1
 801e592:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 801e596:	d103      	bne.n	801e5a0 <st_uaua8_convolve_dw+0x230>
 801e598:	9b03      	ldr	r3, [sp, #12]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	f000 816a 	beq.w	801e874 <st_uaua8_convolve_dw+0x504>
 801e5a0:	464a      	mov	r2, r9
 801e5a2:	4651      	mov	r1, sl
 801e5a4:	9807      	ldr	r0, [sp, #28]
 801e5a6:	f000 fd0f 	bl	801efc8 <st_uint8_fill>
 801e5aa:	f108 0801 	add.w	r8, r8, #1
 801e5ae:	9b02      	ldr	r3, [sp, #8]
 801e5b0:	44ca      	add	sl, r9
 801e5b2:	ebab 0b09 	sub.w	fp, fp, r9
 801e5b6:	fa0f f888 	sxth.w	r8, r8
 801e5ba:	4598      	cmp	r8, r3
 801e5bc:	4641      	mov	r1, r8
 801e5be:	dbe3      	blt.n	801e588 <st_uaua8_convolve_dw+0x218>
 801e5c0:	9b08      	ldr	r3, [sp, #32]
 801e5c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e5c4:	3301      	adds	r3, #1
 801e5c6:	b21b      	sxth	r3, r3
 801e5c8:	428b      	cmp	r3, r1
 801e5ca:	461a      	mov	r2, r3
 801e5cc:	9308      	str	r3, [sp, #32]
 801e5ce:	dbcc      	blt.n	801e56a <st_uaua8_convolve_dw+0x1fa>
 801e5d0:	46cb      	mov	fp, r9
 801e5d2:	9b07      	ldr	r3, [sp, #28]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	f040 81ea 	bne.w	801e9ae <st_uaua8_convolve_dw+0x63e>
 801e5da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	f000 846f 	beq.w	801eec0 <st_uaua8_convolve_dw+0xb50>
 801e5e2:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 801e5e4:	46da      	mov	sl, fp
 801e5e6:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 801e5ea:	f103 0e10 	add.w	lr, r3, #16
 801e5ee:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 801e5f0:	9308      	str	r3, [sp, #32]
 801e5f2:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 801e5f4:	930a      	str	r3, [sp, #40]	; 0x28
 801e5f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e5f8:	3320      	adds	r3, #32
 801e5fa:	9315      	str	r3, [sp, #84]	; 0x54
 801e5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5fe:	f1c3 0301 	rsb	r3, r3, #1
 801e602:	9319      	str	r3, [sp, #100]	; 0x64
 801e604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e606:	f85e 6c10 	ldr.w	r6, [lr, #-16]
 801e60a:	9908      	ldr	r1, [sp, #32]
 801e60c:	f85e 0c04 	ldr.w	r0, [lr, #-4]
 801e610:	e95e 5403 	ldrd	r5, r4, [lr, #-12]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d048      	beq.n	801e6aa <st_uaua8_convolve_dw+0x33a>
 801e618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e61a:	f10c 0210 	add.w	r2, ip, #16
 801e61e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 801e622:	46e3      	mov	fp, ip
 801e624:	eb0c 0803 	add.w	r8, ip, r3
 801e628:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 801e62c:	4657      	mov	r7, sl
 801e62e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801e632:	f8d1 9000 	ldr.w	r9, [r1]
 801e636:	f851 a007 	ldr.w	sl, [r1, r7]
 801e63a:	4b8d      	ldr	r3, [pc, #564]	; (801e870 <st_uaua8_convolve_dw+0x500>)
 801e63c:	fa1f fc89 	uxth.w	ip, r9
 801e640:	f852 0c10 	ldr.w	r0, [r2, #-16]
 801e644:	ea0a 0303 	and.w	r3, sl, r3
 801e648:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
 801e64c:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 801e650:	fa3f f98c 	uxtb16	r9, ip
 801e654:	fb20 6609 	smlad	r6, r0, r9, r6
 801e658:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 801e65c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 801e660:	fa3f fc8c 	uxtb16	ip, ip
 801e664:	fb20 550c 	smlad	r5, r0, ip, r5
 801e668:	fa3f fc83 	uxtb16	ip, r3
 801e66c:	f852 0c08 	ldr.w	r0, [r2, #-8]
 801e670:	9c02      	ldr	r4, [sp, #8]
 801e672:	fb20 400c 	smlad	r0, r0, ip, r4
 801e676:	9002      	str	r0, [sp, #8]
 801e678:	ea4f 2333 	mov.w	r3, r3, ror #8
 801e67c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801e680:	fa3f f383 	uxtb16	r3, r3
 801e684:	9c03      	ldr	r4, [sp, #12]
 801e686:	fb20 4303 	smlad	r3, r0, r3, r4
 801e68a:	3210      	adds	r2, #16
 801e68c:	9303      	str	r3, [sp, #12]
 801e68e:	4471      	add	r1, lr
 801e690:	4590      	cmp	r8, r2
 801e692:	d1ce      	bne.n	801e632 <st_uaua8_convolve_dw+0x2c2>
 801e694:	46dc      	mov	ip, fp
 801e696:	4618      	mov	r0, r3
 801e698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e69a:	46ba      	mov	sl, r7
 801e69c:	9a08      	ldr	r2, [sp, #32]
 801e69e:	449c      	add	ip, r3
 801e6a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6a2:	9c02      	ldr	r4, [sp, #8]
 801e6a4:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 801e6a8:	1899      	adds	r1, r3, r2
 801e6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6ac:	b1cb      	cbz	r3, 801e6e2 <st_uaua8_convolve_dw+0x372>
 801e6ae:	680b      	ldr	r3, [r1, #0]
 801e6b0:	f10c 0c08 	add.w	ip, ip, #8
 801e6b4:	f93c 1c08 	ldrsh.w	r1, [ip, #-8]
 801e6b8:	fa5f f883 	uxtb.w	r8, r3
 801e6bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801e6c0:	f83c 9c06 	ldrh.w	r9, [ip, #-6]
 801e6c4:	fb08 6601 	mla	r6, r8, r1, r6
 801e6c8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801e6cc:	f83c 8c04 	ldrh.w	r8, [ip, #-4]
 801e6d0:	0e1b      	lsrs	r3, r3, #24
 801e6d2:	fb19 5502 	smlabb	r5, r9, r2, r5
 801e6d6:	f83c 2c02 	ldrh.w	r2, [ip, #-2]
 801e6da:	fb18 4401 	smlabb	r4, r8, r1, r4
 801e6de:	fb12 0003 	smlabb	r0, r2, r3, r0
 801e6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e6e6:	3304      	adds	r3, #4
 801e6e8:	2900      	cmp	r1, #0
 801e6ea:	930a      	str	r3, [sp, #40]	; 0x28
 801e6ec:	f340 808d 	ble.w	801e80a <st_uaua8_convolve_dw+0x49a>
 801e6f0:	9a06      	ldr	r2, [sp, #24]
 801e6f2:	0076      	lsls	r6, r6, #1
 801e6f4:	9b04      	ldr	r3, [sp, #16]
 801e6f6:	006d      	lsls	r5, r5, #1
 801e6f8:	fb56 3602 	smmla	r6, r6, r2, r3
 801e6fc:	fb55 3502 	smmla	r5, r5, r2, r3
 801e700:	410e      	asrs	r6, r1
 801e702:	0064      	lsls	r4, r4, #1
 801e704:	0040      	lsls	r0, r0, #1
 801e706:	fb54 3402 	smmla	r4, r4, r2, r3
 801e70a:	fb50 3002 	smmla	r0, r0, r2, r3
 801e70e:	f386 0608 	usat	r6, #8, r6
 801e712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e714:	410d      	asrs	r5, r1
 801e716:	f803 6c04 	strb.w	r6, [r3, #-4]
 801e71a:	f385 0508 	usat	r5, #8, r5
 801e71e:	f803 5c03 	strb.w	r5, [r3, #-3]
 801e722:	410c      	asrs	r4, r1
 801e724:	f384 0408 	usat	r4, #8, r4
 801e728:	f803 4c02 	strb.w	r4, [r3, #-2]
 801e72c:	4108      	asrs	r0, r1
 801e72e:	f380 0008 	usat	r0, #8, r0
 801e732:	f803 0c01 	strb.w	r0, [r3, #-1]
 801e736:	9b08      	ldr	r3, [sp, #32]
 801e738:	f10e 0e10 	add.w	lr, lr, #16
 801e73c:	3304      	adds	r3, #4
 801e73e:	9308      	str	r3, [sp, #32]
 801e740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e742:	4573      	cmp	r3, lr
 801e744:	f47f af5e 	bne.w	801e604 <st_uaua8_convolve_dw+0x294>
 801e748:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 801e74a:	46d3      	mov	fp, sl
 801e74c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e74e:	e9dd 752b 	ldrd	r7, r5, [sp, #172]	; 0xac
 801e752:	4413      	add	r3, r2
 801e754:	9370      	str	r3, [sp, #448]	; 0x1c0
 801e756:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d036      	beq.n	801e7ca <st_uaua8_convolve_dw+0x45a>
 801e75c:	eb03 0e05 	add.w	lr, r3, r5
 801e760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e762:	9e70      	ldr	r6, [sp, #448]	; 0x1c0
 801e764:	f1c3 0801 	rsb	r8, r3, #1
 801e768:	fa1f fe8e 	uxth.w	lr, lr
 801e76c:	4699      	mov	r9, r3
 801e76e:	f8dd a1cc 	ldr.w	sl, [sp, #460]	; 0x1cc
 801e772:	1c69      	adds	r1, r5, #1
 801e774:	eb0a 0205 	add.w	r2, sl, r5
 801e778:	f857 3b04 	ldr.w	r3, [r7], #4
 801e77c:	b28d      	uxth	r5, r1
 801e77e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e780:	b151      	cbz	r1, 801e798 <st_uaua8_convolve_dw+0x428>
 801e782:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e784:	eb0c 0401 	add.w	r4, ip, r1
 801e788:	f83c 0b02 	ldrh.w	r0, [ip], #2
 801e78c:	7811      	ldrb	r1, [r2, #0]
 801e78e:	445a      	add	r2, fp
 801e790:	45a4      	cmp	ip, r4
 801e792:	fb10 3301 	smlabb	r3, r0, r1, r3
 801e796:	d1f7      	bne.n	801e788 <st_uaua8_convolve_dw+0x418>
 801e798:	f1b9 0f00 	cmp.w	r9, #0
 801e79c:	f340 80fa 	ble.w	801e994 <st_uaua8_convolve_dw+0x624>
 801e7a0:	9a06      	ldr	r2, [sp, #24]
 801e7a2:	005b      	lsls	r3, r3, #1
 801e7a4:	9904      	ldr	r1, [sp, #16]
 801e7a6:	fb53 1302 	smmla	r3, r3, r2, r1
 801e7aa:	fa43 f309 	asr.w	r3, r3, r9
 801e7ae:	f383 0308 	usat	r3, #8, r3
 801e7b2:	7033      	strb	r3, [r6, #0]
 801e7b4:	4575      	cmp	r5, lr
 801e7b6:	f106 0601 	add.w	r6, r6, #1
 801e7ba:	d1da      	bne.n	801e772 <st_uaua8_convolve_dw+0x402>
 801e7bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e7be:	9a70      	ldr	r2, [sp, #448]	; 0x1c0
 801e7c0:	3b01      	subs	r3, #1
 801e7c2:	b29b      	uxth	r3, r3
 801e7c4:	3301      	adds	r3, #1
 801e7c6:	441a      	add	r2, r3
 801e7c8:	9270      	str	r2, [sp, #448]	; 0x1c0
 801e7ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e7cc:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e7ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e7d0:	440b      	add	r3, r1
 801e7d2:	3201      	adds	r2, #1
 801e7d4:	b29b      	uxth	r3, r3
 801e7d6:	b212      	sxth	r2, r2
 801e7d8:	9318      	str	r3, [sp, #96]	; 0x60
 801e7da:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e7dc:	921d      	str	r2, [sp, #116]	; 0x74
 801e7de:	4293      	cmp	r3, r2
 801e7e0:	f73f ae9a 	bgt.w	801e518 <st_uaua8_convolve_dw+0x1a8>
 801e7e4:	46d8      	mov	r8, fp
 801e7e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e7e8:	9933      	ldr	r1, [sp, #204]	; 0xcc
 801e7ea:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e7ec:	440b      	add	r3, r1
 801e7ee:	3201      	adds	r2, #1
 801e7f0:	b29b      	uxth	r3, r3
 801e7f2:	b212      	sxth	r2, r2
 801e7f4:	932f      	str	r3, [sp, #188]	; 0xbc
 801e7f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e7f8:	4614      	mov	r4, r2
 801e7fa:	9231      	str	r2, [sp, #196]	; 0xc4
 801e7fc:	4293      	cmp	r3, r2
 801e7fe:	f73f ae6f 	bgt.w	801e4e0 <st_uaua8_convolve_dw+0x170>
 801e802:	2000      	movs	r0, #0
 801e804:	b059      	add	sp, #356	; 0x164
 801e806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e80a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e80c:	fa06 f301 	lsl.w	r3, r6, r1
 801e810:	f303 031f 	ssat	r3, #32, r3
 801e814:	9e06      	ldr	r6, [sp, #24]
 801e816:	fb53 f316 	smmulr	r3, r3, r6
 801e81a:	fa05 f201 	lsl.w	r2, r5, r1
 801e81e:	f302 021f 	ssat	r2, #32, r2
 801e822:	fb52 f216 	smmulr	r2, r2, r6
 801e826:	460d      	mov	r5, r1
 801e828:	fa04 f101 	lsl.w	r1, r4, r1
 801e82c:	f301 011f 	ssat	r1, #32, r1
 801e830:	fb51 f116 	smmulr	r1, r1, r6
 801e834:	40a8      	lsls	r0, r5
 801e836:	f300 001f 	ssat	r0, #32, r0
 801e83a:	fb50 f016 	smmulr	r0, r0, r6
 801e83e:	9c04      	ldr	r4, [sp, #16]
 801e840:	4423      	add	r3, r4
 801e842:	f383 0308 	usat	r3, #8, r3
 801e846:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e848:	4422      	add	r2, r4
 801e84a:	f805 3c04 	strb.w	r3, [r5, #-4]
 801e84e:	4623      	mov	r3, r4
 801e850:	f382 0208 	usat	r2, #8, r2
 801e854:	f805 2c03 	strb.w	r2, [r5, #-3]
 801e858:	4419      	add	r1, r3
 801e85a:	f381 0108 	usat	r1, #8, r1
 801e85e:	f805 1c02 	strb.w	r1, [r5, #-2]
 801e862:	4418      	add	r0, r3
 801e864:	f380 0008 	usat	r0, #8, r0
 801e868:	f805 0c01 	strb.w	r0, [r5, #-1]
 801e86c:	e763      	b.n	801e736 <st_uaua8_convolve_dw+0x3c6>
 801e86e:	bf00      	nop
 801e870:	ffff0000 	.word	0xffff0000
 801e874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e876:	981c      	ldr	r0, [sp, #112]	; 0x70
 801e878:	4419      	add	r1, r3
 801e87a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e87c:	fb03 0101 	mla	r1, r3, r1, r0
 801e880:	2b00      	cmp	r3, #0
 801e882:	f43f ae92 	beq.w	801e5aa <st_uaua8_convolve_dw+0x23a>
 801e886:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801e888:	2f00      	cmp	r7, #0
 801e88a:	f43f ae8e 	beq.w	801e5aa <st_uaua8_convolve_dw+0x23a>
 801e88e:	18ca      	adds	r2, r1, r3
 801e890:	1ebb      	subs	r3, r7, #2
 801e892:	465c      	mov	r4, fp
 801e894:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801e898:	930a      	str	r3, [sp, #40]	; 0x28
 801e89a:	1efb      	subs	r3, r7, #3
 801e89c:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 801e8a0:	4650      	mov	r0, sl
 801e8a2:	9315      	str	r3, [sp, #84]	; 0x54
 801e8a4:	4693      	mov	fp, r2
 801e8a6:	1f3b      	subs	r3, r7, #4
 801e8a8:	46a1      	mov	r9, r4
 801e8aa:	931e      	str	r3, [sp, #120]	; 0x78
 801e8ac:	e9cd a821 	strd	sl, r8, [sp, #132]	; 0x84
 801e8b0:	19c6      	adds	r6, r0, r7
 801e8b2:	f101 0e01 	add.w	lr, r1, #1
 801e8b6:	42b1      	cmp	r1, r6
 801e8b8:	bf38      	it	cc
 801e8ba:	4570      	cmpcc	r0, lr
 801e8bc:	d360      	bcc.n	801e980 <st_uaua8_convolve_dw+0x610>
 801e8be:	2f0b      	cmp	r7, #11
 801e8c0:	d95e      	bls.n	801e980 <st_uaua8_convolve_dw+0x610>
 801e8c2:	f009 0303 	and.w	r3, r9, #3
 801e8c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e8c8:	1cda      	adds	r2, r3, #3
 801e8ca:	42a2      	cmp	r2, r4
 801e8cc:	f200 81e5 	bhi.w	801ec9a <st_uaua8_convolve_dw+0x92a>
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d05c      	beq.n	801e98e <st_uaua8_convolve_dw+0x61e>
 801e8d4:	780a      	ldrb	r2, [r1, #0]
 801e8d6:	2b01      	cmp	r3, #1
 801e8d8:	f100 0a01 	add.w	sl, r0, #1
 801e8dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e8de:	7002      	strb	r2, [r0, #0]
 801e8e0:	d00b      	beq.n	801e8fa <st_uaua8_convolve_dw+0x58a>
 801e8e2:	780a      	ldrb	r2, [r1, #0]
 801e8e4:	2b03      	cmp	r3, #3
 801e8e6:	f100 0a02 	add.w	sl, r0, #2
 801e8ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e8ec:	7042      	strb	r2, [r0, #1]
 801e8ee:	d104      	bne.n	801e8fa <st_uaua8_convolve_dw+0x58a>
 801e8f0:	780a      	ldrb	r2, [r1, #0]
 801e8f2:	f100 0a03 	add.w	sl, r0, #3
 801e8f6:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801e8f8:	7082      	strb	r2, [r0, #2]
 801e8fa:	f891 c000 	ldrb.w	ip, [r1]
 801e8fe:	2400      	movs	r4, #0
 801e900:	eba7 0803 	sub.w	r8, r7, r3
 801e904:	2200      	movs	r2, #0
 801e906:	f36c 0407 	bfi	r4, ip, #0, #8
 801e90a:	4403      	add	r3, r0
 801e90c:	ea4f 0098 	mov.w	r0, r8, lsr #2
 801e910:	f36c 240f 	bfi	r4, ip, #8, #8
 801e914:	f36c 4417 	bfi	r4, ip, #16, #8
 801e918:	f36c 641f 	bfi	r4, ip, #24, #8
 801e91c:	3201      	adds	r2, #1
 801e91e:	f843 4b04 	str.w	r4, [r3], #4
 801e922:	4282      	cmp	r2, r0
 801e924:	d3fa      	bcc.n	801e91c <st_uaua8_convolve_dw+0x5ac>
 801e926:	f028 0203 	bic.w	r2, r8, #3
 801e92a:	4542      	cmp	r2, r8
 801e92c:	4492      	add	sl, r2
 801e92e:	eba5 0502 	sub.w	r5, r5, r2
 801e932:	d01a      	beq.n	801e96a <st_uaua8_convolve_dw+0x5fa>
 801e934:	780b      	ldrb	r3, [r1, #0]
 801e936:	f88a 3000 	strb.w	r3, [sl]
 801e93a:	b1b5      	cbz	r5, 801e96a <st_uaua8_convolve_dw+0x5fa>
 801e93c:	780b      	ldrb	r3, [r1, #0]
 801e93e:	2d01      	cmp	r5, #1
 801e940:	f88a 3001 	strb.w	r3, [sl, #1]
 801e944:	d011      	beq.n	801e96a <st_uaua8_convolve_dw+0x5fa>
 801e946:	780b      	ldrb	r3, [r1, #0]
 801e948:	2d02      	cmp	r5, #2
 801e94a:	f88a 3002 	strb.w	r3, [sl, #2]
 801e94e:	d00c      	beq.n	801e96a <st_uaua8_convolve_dw+0x5fa>
 801e950:	780b      	ldrb	r3, [r1, #0]
 801e952:	2d03      	cmp	r5, #3
 801e954:	f88a 3003 	strb.w	r3, [sl, #3]
 801e958:	d007      	beq.n	801e96a <st_uaua8_convolve_dw+0x5fa>
 801e95a:	780b      	ldrb	r3, [r1, #0]
 801e95c:	2d04      	cmp	r5, #4
 801e95e:	f88a 3004 	strb.w	r3, [sl, #4]
 801e962:	d002      	beq.n	801e96a <st_uaua8_convolve_dw+0x5fa>
 801e964:	780b      	ldrb	r3, [r1, #0]
 801e966:	f88a 3005 	strb.w	r3, [sl, #5]
 801e96a:	45de      	cmp	lr, fp
 801e96c:	4671      	mov	r1, lr
 801e96e:	4630      	mov	r0, r6
 801e970:	eba9 0907 	sub.w	r9, r9, r7
 801e974:	d19c      	bne.n	801e8b0 <st_uaua8_convolve_dw+0x540>
 801e976:	e9dd a821 	ldrd	sl, r8, [sp, #132]	; 0x84
 801e97a:	e9dd b923 	ldrd	fp, r9, [sp, #140]	; 0x8c
 801e97e:	e614      	b.n	801e5aa <st_uaua8_convolve_dw+0x23a>
 801e980:	4603      	mov	r3, r0
 801e982:	780a      	ldrb	r2, [r1, #0]
 801e984:	f803 2b01 	strb.w	r2, [r3], #1
 801e988:	429e      	cmp	r6, r3
 801e98a:	d1fa      	bne.n	801e982 <st_uaua8_convolve_dw+0x612>
 801e98c:	e7ed      	b.n	801e96a <st_uaua8_convolve_dw+0x5fa>
 801e98e:	4625      	mov	r5, r4
 801e990:	4682      	mov	sl, r0
 801e992:	e7b2      	b.n	801e8fa <st_uaua8_convolve_dw+0x58a>
 801e994:	fa03 f308 	lsl.w	r3, r3, r8
 801e998:	f303 031f 	ssat	r3, #32, r3
 801e99c:	9a06      	ldr	r2, [sp, #24]
 801e99e:	fb53 f312 	smmulr	r3, r3, r2
 801e9a2:	9a04      	ldr	r2, [sp, #16]
 801e9a4:	4413      	add	r3, r2
 801e9a6:	f383 0308 	usat	r3, #8, r3
 801e9aa:	7033      	strb	r3, [r6, #0]
 801e9ac:	e702      	b.n	801e7b4 <st_uaua8_convolve_dw+0x444>
 801e9ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	f000 8280 	beq.w	801eeb6 <st_uaua8_convolve_dw+0xb46>
 801e9b6:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 801e9b8:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801e9ba:	f103 0c10 	add.w	ip, r3, #16
 801e9be:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 801e9c0:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
 801e9c4:	9303      	str	r3, [sp, #12]
 801e9c6:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 801e9c8:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 801e9cc:	9308      	str	r3, [sp, #32]
 801e9ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e9d0:	3320      	adds	r3, #32
 801e9d2:	9319      	str	r3, [sp, #100]	; 0x64
 801e9d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e9d8:	931e      	str	r3, [sp, #120]	; 0x78
 801e9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9dc:	f1c3 0301 	rsb	r3, r3, #1
 801e9e0:	9321      	str	r3, [sp, #132]	; 0x84
 801e9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9e4:	f85c 5c10 	ldr.w	r5, [ip, #-16]
 801e9e8:	9a03      	ldr	r2, [sp, #12]
 801e9ea:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801e9ee:	e95c 4003 	ldrd	r4, r0, [ip, #-12]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d04b      	beq.n	801ea8e <st_uaua8_convolve_dw+0x71e>
 801e9f6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801e9f8:	f107 0310 	add.w	r3, r7, #16
 801e9fc:	970a      	str	r7, [sp, #40]	; 0x28
 801e9fe:	eb07 0e06 	add.w	lr, r7, r6
 801ea02:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801ea06:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ea08:	4656      	mov	r6, sl
 801ea0a:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 801ea0e:	9702      	str	r7, [sp, #8]
 801ea10:	f8d2 8000 	ldr.w	r8, [r2]
 801ea14:	f852 900c 	ldr.w	r9, [r2, ip]
 801ea18:	f8df a4bc 	ldr.w	sl, [pc, #1212]	; 801eed8 <st_uaua8_convolve_dw+0xb68>
 801ea1c:	fa1f fb88 	uxth.w	fp, r8
 801ea20:	ea09 0a0a 	and.w	sl, r9, sl
 801ea24:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 801ea28:	ea4a 4818 	orr.w	r8, sl, r8, lsr #16
 801ea2c:	fa3f fa89 	uxtb16	sl, r9
 801ea30:	fada fa06 	ssub16	sl, sl, r6
 801ea34:	f853 7c10 	ldr.w	r7, [r3, #-16]
 801ea38:	fb27 550a 	smlad	r5, r7, sl, r5
 801ea3c:	ea4f 2939 	mov.w	r9, r9, ror #8
 801ea40:	fa3f f989 	uxtb16	r9, r9
 801ea44:	fad9 f906 	ssub16	r9, r9, r6
 801ea48:	f853 7c0c 	ldr.w	r7, [r3, #-12]
 801ea4c:	fb27 4409 	smlad	r4, r7, r9, r4
 801ea50:	fa3f f988 	uxtb16	r9, r8
 801ea54:	fad9 f906 	ssub16	r9, r9, r6
 801ea58:	f853 7c08 	ldr.w	r7, [r3, #-8]
 801ea5c:	fb27 0009 	smlad	r0, r7, r9, r0
 801ea60:	ea4f 2838 	mov.w	r8, r8, ror #8
 801ea64:	fa3f f888 	uxtb16	r8, r8
 801ea68:	fad8 f806 	ssub16	r8, r8, r6
 801ea6c:	f853 7c04 	ldr.w	r7, [r3, #-4]
 801ea70:	fb27 1108 	smlad	r1, r7, r8, r1
 801ea74:	3310      	adds	r3, #16
 801ea76:	9f02      	ldr	r7, [sp, #8]
 801ea78:	459e      	cmp	lr, r3
 801ea7a:	443a      	add	r2, r7
 801ea7c:	d1c8      	bne.n	801ea10 <st_uaua8_convolve_dw+0x6a0>
 801ea7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ea80:	46b2      	mov	sl, r6
 801ea82:	9a03      	ldr	r2, [sp, #12]
 801ea84:	e9dd 3c11 	ldrd	r3, ip, [sp, #68]	; 0x44
 801ea88:	441f      	add	r7, r3
 801ea8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea8c:	189a      	adds	r2, r3, r2
 801ea8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea90:	b303      	cbz	r3, 801ead4 <st_uaua8_convolve_dw+0x764>
 801ea92:	6813      	ldr	r3, [r2, #0]
 801ea94:	3708      	adds	r7, #8
 801ea96:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801ea98:	fa5f f883 	uxtb.w	r8, r3
 801ea9c:	f837 9c08 	ldrh.w	r9, [r7, #-8]
 801eaa0:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 801eaa4:	f3c3 4b07 	ubfx	fp, r3, #16, #8
 801eaa8:	eba8 0806 	sub.w	r8, r8, r6
 801eaac:	ebc6 6313 	rsb	r3, r6, r3, lsr #24
 801eab0:	ebae 0e06 	sub.w	lr, lr, r6
 801eab4:	ebab 0206 	sub.w	r2, fp, r6
 801eab8:	fb19 5508 	smlabb	r5, r9, r8, r5
 801eabc:	f837 8c06 	ldrh.w	r8, [r7, #-6]
 801eac0:	f837 9c04 	ldrh.w	r9, [r7, #-4]
 801eac4:	fb18 440e 	smlabb	r4, r8, lr, r4
 801eac8:	f837 ec02 	ldrh.w	lr, [r7, #-2]
 801eacc:	fb19 0002 	smlabb	r0, r9, r2, r0
 801ead0:	fb1e 1103 	smlabb	r1, lr, r3, r1
 801ead4:	9b08      	ldr	r3, [sp, #32]
 801ead6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ead8:	3304      	adds	r3, #4
 801eada:	2a00      	cmp	r2, #0
 801eadc:	9308      	str	r3, [sp, #32]
 801eade:	dd6a      	ble.n	801ebb6 <st_uaua8_convolve_dw+0x846>
 801eae0:	9e06      	ldr	r6, [sp, #24]
 801eae2:	006d      	lsls	r5, r5, #1
 801eae4:	0064      	lsls	r4, r4, #1
 801eae6:	46b6      	mov	lr, r6
 801eae8:	0040      	lsls	r0, r0, #1
 801eaea:	9e04      	ldr	r6, [sp, #16]
 801eaec:	0049      	lsls	r1, r1, #1
 801eaee:	fb55 650e 	smmla	r5, r5, lr, r6
 801eaf2:	fb54 640e 	smmla	r4, r4, lr, r6
 801eaf6:	4115      	asrs	r5, r2
 801eaf8:	fb50 600e 	smmla	r0, r0, lr, r6
 801eafc:	fb51 610e 	smmla	r1, r1, lr, r6
 801eb00:	f385 0508 	usat	r5, #8, r5
 801eb04:	f803 5c04 	strb.w	r5, [r3, #-4]
 801eb08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801eb0a:	412c      	asrs	r4, r5
 801eb0c:	f384 0408 	usat	r4, #8, r4
 801eb10:	f803 4c03 	strb.w	r4, [r3, #-3]
 801eb14:	4128      	asrs	r0, r5
 801eb16:	f380 0008 	usat	r0, #8, r0
 801eb1a:	f803 0c02 	strb.w	r0, [r3, #-2]
 801eb1e:	4129      	asrs	r1, r5
 801eb20:	f381 0108 	usat	r1, #8, r1
 801eb24:	f803 1c01 	strb.w	r1, [r3, #-1]
 801eb28:	9b03      	ldr	r3, [sp, #12]
 801eb2a:	f10c 0c10 	add.w	ip, ip, #16
 801eb2e:	3304      	adds	r3, #4
 801eb30:	9303      	str	r3, [sp, #12]
 801eb32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb34:	4563      	cmp	r3, ip
 801eb36:	f47f af54 	bne.w	801e9e2 <st_uaua8_convolve_dw+0x672>
 801eb3a:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 801eb3c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eb3e:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 801eb42:	4413      	add	r3, r2
 801eb44:	e9dd e62b 	ldrd	lr, r6, [sp, #172]	; 0xac
 801eb48:	9370      	str	r3, [sp, #448]	; 0x1c0
 801eb4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	f43f ae3c 	beq.w	801e7ca <st_uaua8_convolve_dw+0x45a>
 801eb52:	eb03 0806 	add.w	r8, r3, r6
 801eb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb58:	f8dd c1c0 	ldr.w	ip, [sp, #448]	; 0x1c0
 801eb5c:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801eb60:	f1c3 0901 	rsb	r9, r3, #1
 801eb64:	fa1f f888 	uxth.w	r8, r8
 801eb68:	469a      	mov	sl, r3
 801eb6a:	1c73      	adds	r3, r6, #1
 801eb6c:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 801eb6e:	1991      	adds	r1, r2, r6
 801eb70:	b29e      	uxth	r6, r3
 801eb72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eb74:	f85e 2b04 	ldr.w	r2, [lr], #4
 801eb78:	b153      	cbz	r3, 801eb90 <st_uaua8_convolve_dw+0x820>
 801eb7a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801eb7c:	18fc      	adds	r4, r7, r3
 801eb7e:	780b      	ldrb	r3, [r1, #0]
 801eb80:	4459      	add	r1, fp
 801eb82:	f837 0b02 	ldrh.w	r0, [r7], #2
 801eb86:	1b5b      	subs	r3, r3, r5
 801eb88:	42a7      	cmp	r7, r4
 801eb8a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801eb8e:	d1f6      	bne.n	801eb7e <st_uaua8_convolve_dw+0x80e>
 801eb90:	f1ba 0f00 	cmp.w	sl, #0
 801eb94:	dd40      	ble.n	801ec18 <st_uaua8_convolve_dw+0x8a8>
 801eb96:	0053      	lsls	r3, r2, #1
 801eb98:	9904      	ldr	r1, [sp, #16]
 801eb9a:	9a06      	ldr	r2, [sp, #24]
 801eb9c:	fb53 1302 	smmla	r3, r3, r2, r1
 801eba0:	fa43 f30a 	asr.w	r3, r3, sl
 801eba4:	f383 0308 	usat	r3, #8, r3
 801eba8:	f88c 3000 	strb.w	r3, [ip]
 801ebac:	4546      	cmp	r6, r8
 801ebae:	f10c 0c01 	add.w	ip, ip, #1
 801ebb2:	d1da      	bne.n	801eb6a <st_uaua8_convolve_dw+0x7fa>
 801ebb4:	e602      	b.n	801e7bc <st_uaua8_convolve_dw+0x44c>
 801ebb6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ebb8:	fa05 f302 	lsl.w	r3, r5, r2
 801ebbc:	f303 031f 	ssat	r3, #32, r3
 801ebc0:	9e06      	ldr	r6, [sp, #24]
 801ebc2:	fb53 f316 	smmulr	r3, r3, r6
 801ebc6:	4615      	mov	r5, r2
 801ebc8:	fa04 f202 	lsl.w	r2, r4, r2
 801ebcc:	f302 021f 	ssat	r2, #32, r2
 801ebd0:	fb52 f216 	smmulr	r2, r2, r6
 801ebd4:	40a8      	lsls	r0, r5
 801ebd6:	f300 001f 	ssat	r0, #32, r0
 801ebda:	fb50 f016 	smmulr	r0, r0, r6
 801ebde:	40a9      	lsls	r1, r5
 801ebe0:	f301 011f 	ssat	r1, #32, r1
 801ebe4:	fb51 f116 	smmulr	r1, r1, r6
 801ebe8:	9c04      	ldr	r4, [sp, #16]
 801ebea:	4423      	add	r3, r4
 801ebec:	f383 0308 	usat	r3, #8, r3
 801ebf0:	9d08      	ldr	r5, [sp, #32]
 801ebf2:	4422      	add	r2, r4
 801ebf4:	f805 3c04 	strb.w	r3, [r5, #-4]
 801ebf8:	4623      	mov	r3, r4
 801ebfa:	f382 0208 	usat	r2, #8, r2
 801ebfe:	f805 2c03 	strb.w	r2, [r5, #-3]
 801ec02:	4418      	add	r0, r3
 801ec04:	f380 0008 	usat	r0, #8, r0
 801ec08:	f805 0c02 	strb.w	r0, [r5, #-2]
 801ec0c:	4419      	add	r1, r3
 801ec0e:	f381 0108 	usat	r1, #8, r1
 801ec12:	f805 1c01 	strb.w	r1, [r5, #-1]
 801ec16:	e787      	b.n	801eb28 <st_uaua8_convolve_dw+0x7b8>
 801ec18:	fa02 f309 	lsl.w	r3, r2, r9
 801ec1c:	f303 031f 	ssat	r3, #32, r3
 801ec20:	9a06      	ldr	r2, [sp, #24]
 801ec22:	fb53 f312 	smmulr	r3, r3, r2
 801ec26:	9a04      	ldr	r2, [sp, #16]
 801ec28:	4413      	add	r3, r2
 801ec2a:	f383 0308 	usat	r3, #8, r3
 801ec2e:	f88c 3000 	strb.w	r3, [ip]
 801ec32:	e7bb      	b.n	801ebac <st_uaua8_convolve_dw+0x83c>
 801ec34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ec36:	b39b      	cbz	r3, 801eca0 <st_uaua8_convolve_dw+0x930>
 801ec38:	3b01      	subs	r3, #1
 801ec3a:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 801ec3e:	9345      	str	r3, [sp, #276]	; 0x114
 801ec40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ec42:	f8ad 1136 	strh.w	r1, [sp, #310]	; 0x136
 801ec46:	2b01      	cmp	r3, #1
 801ec48:	f47f ac73 	bne.w	801e532 <st_uaua8_convolve_dw+0x1c2>
 801ec4c:	2901      	cmp	r1, #1
 801ec4e:	d031      	beq.n	801ecb4 <st_uaua8_convolve_dw+0x944>
 801ec50:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801ec52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ec54:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 801ec58:	4608      	mov	r0, r1
 801ec5a:	428b      	cmp	r3, r1
 801ec5c:	f77f acb9 	ble.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ec60:	9e73      	ldr	r6, [sp, #460]	; 0x1cc
 801ec62:	460c      	mov	r4, r1
 801ec64:	f8cd b008 	str.w	fp, [sp, #8]
 801ec68:	4698      	mov	r8, r3
 801ec6a:	46b3      	mov	fp, r6
 801ec6c:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 801ec6e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 801ec72:	f8dd a014 	ldr.w	sl, [sp, #20]
 801ec76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801ec78:	3401      	adds	r4, #1
 801ec7a:	fb00 500a 	mla	r0, r0, sl, r5
 801ec7e:	4659      	mov	r1, fp
 801ec80:	463a      	mov	r2, r7
 801ec82:	b224      	sxth	r4, r4
 801ec84:	fb06 9000 	mla	r0, r6, r0, r9
 801ec88:	f001 fb92 	bl	80203b0 <st_dsp_arm_copy_q7>
 801ec8c:	44bb      	add	fp, r7
 801ec8e:	4544      	cmp	r4, r8
 801ec90:	4620      	mov	r0, r4
 801ec92:	dbf1      	blt.n	801ec78 <st_uaua8_convolve_dw+0x908>
 801ec94:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ec98:	e49b      	b.n	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ec9a:	4625      	mov	r5, r4
 801ec9c:	4682      	mov	sl, r0
 801ec9e:	e649      	b.n	801e934 <st_uaua8_convolve_dw+0x5c4>
 801eca0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 801eca2:	2101      	movs	r1, #1
 801eca4:	3b01      	subs	r3, #1
 801eca6:	f8ad 1136 	strh.w	r1, [sp, #310]	; 0x136
 801ecaa:	9346      	str	r3, [sp, #280]	; 0x118
 801ecac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ecae:	2b01      	cmp	r3, #1
 801ecb0:	f47f ac3f 	bne.w	801e532 <st_uaua8_convolve_dw+0x1c2>
 801ecb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ecba:	4298      	cmp	r0, r3
 801ecbc:	f77f ac89 	ble.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ecc0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ecc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801ecc4:	f9bd a060 	ldrsh.w	sl, [sp, #96]	; 0x60
 801ecc8:	fb02 0201 	mla	r2, r2, r1, r0
 801eccc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ecce:	1a55      	subs	r5, r2, r1
 801ecd0:	4555      	cmp	r5, sl
 801ecd2:	f77f ac7e 	ble.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ecd6:	f8cd a00c 	str.w	sl, [sp, #12]
 801ecda:	461f      	mov	r7, r3
 801ecdc:	f8dd 91cc 	ldr.w	r9, [sp, #460]	; 0x1cc
 801ece0:	461a      	mov	r2, r3
 801ece2:	46a8      	mov	r8, r5
 801ece4:	9e05      	ldr	r6, [sp, #20]
 801ece6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ecea:	fb02 f306 	mul.w	r3, r2, r6
 801ecee:	0ffd      	lsrs	r5, r7, #31
 801ecf0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801ecf4:	9302      	str	r3, [sp, #8]
 801ecf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ecf8:	4664      	mov	r4, ip
 801ecfa:	4293      	cmp	r3, r2
 801ecfc:	bfd8      	it	le
 801ecfe:	f045 0501 	orrle.w	r5, r5, #1
 801ed02:	4566      	cmp	r6, ip
 801ed04:	465a      	mov	r2, fp
 801ed06:	4649      	mov	r1, r9
 801ed08:	4650      	mov	r0, sl
 801ed0a:	bfcc      	ite	gt
 801ed0c:	2300      	movgt	r3, #0
 801ed0e:	2301      	movle	r3, #1
 801ed10:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 801ed14:	d102      	bne.n	801ed1c <st_uaua8_convolve_dw+0x9ac>
 801ed16:	2d00      	cmp	r5, #0
 801ed18:	f000 80c2 	beq.w	801eea0 <st_uaua8_convolve_dw+0xb30>
 801ed1c:	f000 f954 	bl	801efc8 <st_uint8_fill>
 801ed20:	3401      	adds	r4, #1
 801ed22:	44d9      	add	r9, fp
 801ed24:	b224      	sxth	r4, r4
 801ed26:	4544      	cmp	r4, r8
 801ed28:	46a4      	mov	ip, r4
 801ed2a:	dbea      	blt.n	801ed02 <st_uaua8_convolve_dw+0x992>
 801ed2c:	3701      	adds	r7, #1
 801ed2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed30:	b23f      	sxth	r7, r7
 801ed32:	429f      	cmp	r7, r3
 801ed34:	463a      	mov	r2, r7
 801ed36:	dbd8      	blt.n	801ecea <st_uaua8_convolve_dw+0x97a>
 801ed38:	e44b      	b.n	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ed3a:	4298      	cmp	r0, r3
 801ed3c:	f77f ac49 	ble.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ed40:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ed42:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801ed44:	f9bd a060 	ldrsh.w	sl, [sp, #96]	; 0x60
 801ed48:	fb02 0201 	mla	r2, r2, r1, r0
 801ed4c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ed4e:	1a55      	subs	r5, r2, r1
 801ed50:	45aa      	cmp	sl, r5
 801ed52:	f6bf ac3e 	bge.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ed56:	f8cd a00c 	str.w	sl, [sp, #12]
 801ed5a:	461f      	mov	r7, r3
 801ed5c:	f8dd 91cc 	ldr.w	r9, [sp, #460]	; 0x1cc
 801ed60:	461a      	mov	r2, r3
 801ed62:	46a8      	mov	r8, r5
 801ed64:	9e05      	ldr	r6, [sp, #20]
 801ed66:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ed6a:	fb02 f306 	mul.w	r3, r2, r6
 801ed6e:	0ffd      	lsrs	r5, r7, #31
 801ed70:	9903      	ldr	r1, [sp, #12]
 801ed72:	9302      	str	r3, [sp, #8]
 801ed74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ed76:	460c      	mov	r4, r1
 801ed78:	4293      	cmp	r3, r2
 801ed7a:	bfd8      	it	le
 801ed7c:	f045 0501 	orrle.w	r5, r5, #1
 801ed80:	428e      	cmp	r6, r1
 801ed82:	bfcc      	ite	gt
 801ed84:	2300      	movgt	r3, #0
 801ed86:	2301      	movle	r3, #1
 801ed88:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 801ed8c:	d100      	bne.n	801ed90 <st_uaua8_convolve_dw+0xa20>
 801ed8e:	b18d      	cbz	r5, 801edb4 <st_uaua8_convolve_dw+0xa44>
 801ed90:	465a      	mov	r2, fp
 801ed92:	4649      	mov	r1, r9
 801ed94:	4650      	mov	r0, sl
 801ed96:	f000 f917 	bl	801efc8 <st_uint8_fill>
 801ed9a:	3401      	adds	r4, #1
 801ed9c:	44d9      	add	r9, fp
 801ed9e:	b224      	sxth	r4, r4
 801eda0:	4544      	cmp	r4, r8
 801eda2:	4621      	mov	r1, r4
 801eda4:	dbec      	blt.n	801ed80 <st_uaua8_convolve_dw+0xa10>
 801eda6:	3701      	adds	r7, #1
 801eda8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801edaa:	b23f      	sxth	r7, r7
 801edac:	429f      	cmp	r7, r3
 801edae:	463a      	mov	r2, r7
 801edb0:	dbdb      	blt.n	801ed6a <st_uaua8_convolve_dw+0x9fa>
 801edb2:	e40e      	b.n	801e5d2 <st_uaua8_convolve_dw+0x262>
 801edb4:	9b02      	ldr	r3, [sp, #8]
 801edb6:	981c      	ldr	r0, [sp, #112]	; 0x70
 801edb8:	4419      	add	r1, r3
 801edba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801edbc:	fb03 0101 	mla	r1, r3, r1, r0
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d0ea      	beq.n	801ed9a <st_uaua8_convolve_dw+0xa2a>
 801edc4:	eb01 0c03 	add.w	ip, r1, r3
 801edc8:	4648      	mov	r0, r9
 801edca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801edce:	021b      	lsls	r3, r3, #8
 801edd0:	4561      	cmp	r1, ip
 801edd2:	ea4f 2233 	mov.w	r2, r3, ror #8
 801edd6:	fa33 f382 	uxtab16	r3, r3, r2
 801edda:	f820 3b02 	strh.w	r3, [r0], #2
 801edde:	d1f4      	bne.n	801edca <st_uaua8_convolve_dw+0xa5a>
 801ede0:	e7db      	b.n	801ed9a <st_uaua8_convolve_dw+0xa2a>
 801ede2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ede4:	4618      	mov	r0, r3
 801ede6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ede8:	4298      	cmp	r0, r3
 801edea:	f77f abf2 	ble.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801edee:	9920      	ldr	r1, [sp, #128]	; 0x80
 801edf0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801edf2:	f9bd a060 	ldrsh.w	sl, [sp, #96]	; 0x60
 801edf6:	fb02 0201 	mla	r2, r2, r1, r0
 801edfa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801edfc:	1a55      	subs	r5, r2, r1
 801edfe:	4555      	cmp	r5, sl
 801ee00:	f77f abe7 	ble.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ee04:	f8cd a00c 	str.w	sl, [sp, #12]
 801ee08:	461e      	mov	r6, r3
 801ee0a:	f8dd 91cc 	ldr.w	r9, [sp, #460]	; 0x1cc
 801ee0e:	4698      	mov	r8, r3
 801ee10:	9f05      	ldr	r7, [sp, #20]
 801ee12:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ee16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ee18:	9a03      	ldr	r2, [sp, #12]
 801ee1a:	4543      	cmp	r3, r8
 801ee1c:	fb08 f307 	mul.w	r3, r8, r7
 801ee20:	4614      	mov	r4, r2
 801ee22:	bfcc      	ite	gt
 801ee24:	2100      	movgt	r1, #0
 801ee26:	2101      	movle	r1, #1
 801ee28:	9302      	str	r3, [sp, #8]
 801ee2a:	ea41 78d6 	orr.w	r8, r1, r6, lsr #31
 801ee2e:	4643      	mov	r3, r8
 801ee30:	46b0      	mov	r8, r6
 801ee32:	461e      	mov	r6, r3
 801ee34:	4297      	cmp	r7, r2
 801ee36:	bfcc      	ite	gt
 801ee38:	2300      	movgt	r3, #0
 801ee3a:	2301      	movle	r3, #1
 801ee3c:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 801ee40:	d100      	bne.n	801ee44 <st_uaua8_convolve_dw+0xad4>
 801ee42:	b19e      	cbz	r6, 801ee6c <st_uaua8_convolve_dw+0xafc>
 801ee44:	465a      	mov	r2, fp
 801ee46:	4649      	mov	r1, r9
 801ee48:	4650      	mov	r0, sl
 801ee4a:	f000 f8bd 	bl	801efc8 <st_uint8_fill>
 801ee4e:	3401      	adds	r4, #1
 801ee50:	44d9      	add	r9, fp
 801ee52:	b224      	sxth	r4, r4
 801ee54:	42ac      	cmp	r4, r5
 801ee56:	4622      	mov	r2, r4
 801ee58:	dbec      	blt.n	801ee34 <st_uaua8_convolve_dw+0xac4>
 801ee5a:	4646      	mov	r6, r8
 801ee5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ee5e:	3601      	adds	r6, #1
 801ee60:	b236      	sxth	r6, r6
 801ee62:	429e      	cmp	r6, r3
 801ee64:	46b0      	mov	r8, r6
 801ee66:	dbd6      	blt.n	801ee16 <st_uaua8_convolve_dw+0xaa6>
 801ee68:	f7ff bbb3 	b.w	801e5d2 <st_uaua8_convolve_dw+0x262>
 801ee6c:	9b02      	ldr	r3, [sp, #8]
 801ee6e:	441a      	add	r2, r3
 801ee70:	e9dd 311b 	ldrd	r3, r1, [sp, #108]	; 0x6c
 801ee74:	fb03 1202 	mla	r2, r3, r2, r1
 801ee78:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	d0e7      	beq.n	801ee4e <st_uaua8_convolve_dw+0xade>
 801ee7e:	18d0      	adds	r0, r2, r3
 801ee80:	4649      	mov	r1, r9
 801ee82:	f812 cb01 	ldrb.w	ip, [r2], #1
 801ee86:	ea4f 630c 	mov.w	r3, ip, lsl #24
 801ee8a:	4282      	cmp	r2, r0
 801ee8c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 801ee90:	ea4f 2c33 	mov.w	ip, r3, ror #8
 801ee94:	fa33 f38c 	uxtab16	r3, r3, ip
 801ee98:	f841 3b04 	str.w	r3, [r1], #4
 801ee9c:	d1f1      	bne.n	801ee82 <st_uaua8_convolve_dw+0xb12>
 801ee9e:	e7d6      	b.n	801ee4e <st_uaua8_convolve_dw+0xade>
 801eea0:	9b02      	ldr	r3, [sp, #8]
 801eea2:	eb03 000c 	add.w	r0, r3, ip
 801eea6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eea8:	461a      	mov	r2, r3
 801eeaa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eeac:	fb02 3000 	mla	r0, r2, r0, r3
 801eeb0:	f001 fa7e 	bl	80203b0 <st_dsp_arm_copy_q7>
 801eeb4:	e734      	b.n	801ed20 <st_uaua8_convolve_dw+0x9b0>
 801eeb6:	461e      	mov	r6, r3
 801eeb8:	f8dd e1a8 	ldr.w	lr, [sp, #424]	; 0x1a8
 801eebc:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801eebe:	e644      	b.n	801eb4a <st_uaua8_convolve_dw+0x7da>
 801eec0:	461d      	mov	r5, r3
 801eec2:	9f6a      	ldr	r7, [sp, #424]	; 0x1a8
 801eec4:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 801eec8:	e445      	b.n	801e756 <st_uaua8_convolve_dw+0x3e6>
 801eeca:	2501      	movs	r5, #1
 801eecc:	f7ff baac 	b.w	801e428 <st_uaua8_convolve_dw+0xb8>
 801eed0:	9304      	str	r3, [sp, #16]
 801eed2:	f7ff ba83 	b.w	801e3dc <st_uaua8_convolve_dw+0x6c>
 801eed6:	bf00      	nop
 801eed8:	ffff0000 	.word	0xffff0000

0801eedc <ai_padding_opt_init>:
 801eedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eee0:	2600      	movs	r6, #0
 801eee2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801eee6:	e9c0 6600 	strd	r6, r6, [r0]
 801eeea:	6086      	str	r6, [r0, #8]
 801eeec:	689d      	ldr	r5, [r3, #8]
 801eeee:	690c      	ldr	r4, [r1, #16]
 801eef0:	42b5      	cmp	r5, r6
 801eef2:	dd21      	ble.n	801ef38 <ai_padding_opt_init+0x5c>
 801eef4:	4264      	negs	r4, r4
 801eef6:	46b0      	mov	r8, r6
 801eef8:	46b6      	mov	lr, r6
 801eefa:	46b1      	mov	r9, r6
 801eefc:	4637      	mov	r7, r6
 801eefe:	e00f      	b.n	801ef20 <ai_padding_opt_init+0x44>
 801ef00:	6895      	ldr	r5, [r2, #8]
 801ef02:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ef06:	1b2d      	subs	r5, r5, r4
 801ef08:	42b5      	cmp	r5, r6
 801ef0a:	da10      	bge.n	801ef2e <ai_padding_opt_init+0x52>
 801ef0c:	f10e 0e01 	add.w	lr, lr, #1
 801ef10:	f8c0 e008 	str.w	lr, [r0, #8]
 801ef14:	3701      	adds	r7, #1
 801ef16:	689d      	ldr	r5, [r3, #8]
 801ef18:	688e      	ldr	r6, [r1, #8]
 801ef1a:	42bd      	cmp	r5, r7
 801ef1c:	4434      	add	r4, r6
 801ef1e:	dd0e      	ble.n	801ef3e <ai_padding_opt_init+0x62>
 801ef20:	2c00      	cmp	r4, #0
 801ef22:	daed      	bge.n	801ef00 <ai_padding_opt_init+0x24>
 801ef24:	f109 0901 	add.w	r9, r9, #1
 801ef28:	f8c0 9000 	str.w	r9, [r0]
 801ef2c:	e7f2      	b.n	801ef14 <ai_padding_opt_init+0x38>
 801ef2e:	f108 0801 	add.w	r8, r8, #1
 801ef32:	f8c0 8004 	str.w	r8, [r0, #4]
 801ef36:	e7ed      	b.n	801ef14 <ai_padding_opt_init+0x38>
 801ef38:	46b6      	mov	lr, r6
 801ef3a:	46b0      	mov	r8, r6
 801ef3c:	46b1      	mov	r9, r6
 801ef3e:	2500      	movs	r5, #0
 801ef40:	e9c0 9803 	strd	r9, r8, [r0, #12]
 801ef44:	e9c0 e505 	strd	lr, r5, [r0, #20]
 801ef48:	e9c0 5507 	strd	r5, r5, [r0, #28]
 801ef4c:	685e      	ldr	r6, [r3, #4]
 801ef4e:	694c      	ldr	r4, [r1, #20]
 801ef50:	42ae      	cmp	r6, r5
 801ef52:	f1c4 0400 	rsb	r4, r4, #0
 801ef56:	dc0f      	bgt.n	801ef78 <ai_padding_opt_init+0x9c>
 801ef58:	e018      	b.n	801ef8c <ai_padding_opt_init+0xb0>
 801ef5a:	6856      	ldr	r6, [r2, #4]
 801ef5c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801ef60:	1b36      	subs	r6, r6, r4
 801ef62:	42be      	cmp	r6, r7
 801ef64:	da0e      	bge.n	801ef84 <ai_padding_opt_init+0xa8>
 801ef66:	6a06      	ldr	r6, [r0, #32]
 801ef68:	3601      	adds	r6, #1
 801ef6a:	6206      	str	r6, [r0, #32]
 801ef6c:	3501      	adds	r5, #1
 801ef6e:	685e      	ldr	r6, [r3, #4]
 801ef70:	68cf      	ldr	r7, [r1, #12]
 801ef72:	42ae      	cmp	r6, r5
 801ef74:	443c      	add	r4, r7
 801ef76:	dd09      	ble.n	801ef8c <ai_padding_opt_init+0xb0>
 801ef78:	2c00      	cmp	r4, #0
 801ef7a:	daee      	bge.n	801ef5a <ai_padding_opt_init+0x7e>
 801ef7c:	6986      	ldr	r6, [r0, #24]
 801ef7e:	3601      	adds	r6, #1
 801ef80:	6186      	str	r6, [r0, #24]
 801ef82:	e7f3      	b.n	801ef6c <ai_padding_opt_init+0x90>
 801ef84:	69c6      	ldr	r6, [r0, #28]
 801ef86:	3601      	adds	r6, #1
 801ef88:	61c6      	str	r6, [r0, #28]
 801ef8a:	e7ef      	b.n	801ef6c <ai_padding_opt_init+0x90>
 801ef8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ef90 <ai_padding_opt_phase1>:
 801ef90:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 801ef94:	b933      	cbnz	r3, 801efa4 <ai_padding_opt_phase1+0x14>
 801ef96:	b992      	cbnz	r2, 801efbe <ai_padding_opt_phase1+0x2e>
 801ef98:	6a03      	ldr	r3, [r0, #32]
 801ef9a:	2201      	movs	r2, #1
 801ef9c:	3b01      	subs	r3, #1
 801ef9e:	8482      	strh	r2, [r0, #36]	; 0x24
 801efa0:	6203      	str	r3, [r0, #32]
 801efa2:	e005      	b.n	801efb0 <ai_padding_opt_phase1+0x20>
 801efa4:	2a00      	cmp	r2, #0
 801efa6:	d0f7      	beq.n	801ef98 <ai_padding_opt_phase1+0x8>
 801efa8:	3b01      	subs	r3, #1
 801efaa:	2201      	movs	r2, #1
 801efac:	6183      	str	r3, [r0, #24]
 801efae:	8482      	strh	r2, [r0, #36]	; 0x24
 801efb0:	6943      	ldr	r3, [r0, #20]
 801efb2:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 801efb6:	6083      	str	r3, [r0, #8]
 801efb8:	e9c0 1200 	strd	r1, r2, [r0]
 801efbc:	4770      	bx	lr
 801efbe:	3a01      	subs	r2, #1
 801efc0:	8483      	strh	r3, [r0, #36]	; 0x24
 801efc2:	61c2      	str	r2, [r0, #28]
 801efc4:	e7f4      	b.n	801efb0 <ai_padding_opt_phase1+0x20>
 801efc6:	bf00      	nop

0801efc8 <st_uint8_fill>:
 801efc8:	078b      	lsls	r3, r1, #30
 801efca:	d008      	beq.n	801efde <st_uint8_fill+0x16>
 801efcc:	b90a      	cbnz	r2, 801efd2 <st_uint8_fill+0xa>
 801efce:	e01f      	b.n	801f010 <st_uint8_fill+0x48>
 801efd0:	b1fa      	cbz	r2, 801f012 <st_uint8_fill+0x4a>
 801efd2:	f801 0b01 	strb.w	r0, [r1], #1
 801efd6:	078b      	lsls	r3, r1, #30
 801efd8:	f102 32ff 	add.w	r2, r2, #4294967295
 801efdc:	d1f8      	bne.n	801efd0 <st_uint8_fill+0x8>
 801efde:	b430      	push	{r4, r5}
 801efe0:	0404      	lsls	r4, r0, #16
 801efe2:	f002 0503 	and.w	r5, r2, #3
 801efe6:	0893      	lsrs	r3, r2, #2
 801efe8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 801efec:	ea44 0400 	orr.w	r4, r4, r0
 801eff0:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 801eff4:	d010      	beq.n	801f018 <st_uint8_fill+0x50>
 801eff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801effa:	f841 4b04 	str.w	r4, [r1], #4
 801effe:	4299      	cmp	r1, r3
 801f000:	d1fb      	bne.n	801effa <st_uint8_fill+0x32>
 801f002:	b13d      	cbz	r5, 801f014 <st_uint8_fill+0x4c>
 801f004:	462a      	mov	r2, r5
 801f006:	4601      	mov	r1, r0
 801f008:	4618      	mov	r0, r3
 801f00a:	bc30      	pop	{r4, r5}
 801f00c:	f001 bd8a 	b.w	8020b24 <memset>
 801f010:	4770      	bx	lr
 801f012:	4770      	bx	lr
 801f014:	bc30      	pop	{r4, r5}
 801f016:	4770      	bx	lr
 801f018:	460b      	mov	r3, r1
 801f01a:	2d00      	cmp	r5, #0
 801f01c:	d1f2      	bne.n	801f004 <st_uint8_fill+0x3c>
 801f01e:	e7f9      	b.n	801f014 <st_uint8_fill+0x4c>

0801f020 <st_uaua8_nn_mat_mult_nt_t>:
 801f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f024:	b0a5      	sub	sp, #148	; 0x94
 801f026:	f89d 40d4 	ldrb.w	r4, [sp, #212]	; 0xd4
 801f02a:	9018      	str	r0, [sp, #96]	; 0x60
 801f02c:	ea44 4004 	orr.w	r0, r4, r4, lsl #16
 801f030:	9420      	str	r4, [sp, #128]	; 0x80
 801f032:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 801f036:	901c      	str	r0, [sp, #112]	; 0x70
 801f038:	9121      	str	r1, [sp, #132]	; 0x84
 801f03a:	9223      	str	r2, [sp, #140]	; 0x8c
 801f03c:	9311      	str	r3, [sp, #68]	; 0x44
 801f03e:	940b      	str	r4, [sp, #44]	; 0x2c
 801f040:	e9dd 0b31 	ldrd	r0, fp, [sp, #196]	; 0xc4
 801f044:	2801      	cmp	r0, #1
 801f046:	f340 8239 	ble.w	801f4bc <st_uaua8_nn_mat_mult_nt_t+0x49c>
 801f04a:	f00b 0503 	and.w	r5, fp, #3
 801f04e:	4696      	mov	lr, r2
 801f050:	1e82      	subs	r2, r0, #2
 801f052:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 801f054:	9515      	str	r5, [sp, #84]	; 0x54
 801f056:	f1ab 050f 	sub.w	r5, fp, #15
 801f05a:	0852      	lsrs	r2, r2, #1
 801f05c:	469c      	mov	ip, r3
 801f05e:	950c      	str	r5, [sp, #48]	; 0x30
 801f060:	107f      	asrs	r7, r7, #1
 801f062:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801f064:	f1ab 0310 	sub.w	r3, fp, #16
 801f068:	ea4f 00ab 	mov.w	r0, fp, asr #2
 801f06c:	971a      	str	r7, [sp, #104]	; 0x68
 801f06e:	f005 0501 	and.w	r5, r5, #1
 801f072:	091b      	lsrs	r3, r3, #4
 801f074:	0086      	lsls	r6, r0, #2
 801f076:	9014      	str	r0, [sp, #80]	; 0x50
 801f078:	9519      	str	r5, [sp, #100]	; 0x64
 801f07a:	1c55      	adds	r5, r2, #1
 801f07c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f07e:	3301      	adds	r3, #1
 801f080:	9522      	str	r5, [sp, #136]	; 0x88
 801f082:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 801f086:	0052      	lsls	r2, r2, #1
 801f088:	961e      	str	r6, [sp, #120]	; 0x78
 801f08a:	951b      	str	r5, [sp, #108]	; 0x6c
 801f08c:	011d      	lsls	r5, r3, #4
 801f08e:	920d      	str	r2, [sp, #52]	; 0x34
 801f090:	445e      	add	r6, fp
 801f092:	fb02 f207 	mul.w	r2, r2, r7
 801f096:	961d      	str	r6, [sp, #116]	; 0x74
 801f098:	921f      	str	r2, [sp, #124]	; 0x7c
 801f09a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f09c:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 801f0a0:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 801f0a4:	9503      	str	r5, [sp, #12]
 801f0a6:	9110      	str	r1, [sp, #64]	; 0x40
 801f0a8:	930e      	str	r3, [sp, #56]	; 0x38
 801f0aa:	eb02 1300 	add.w	r3, r2, r0, lsl #4
 801f0ae:	9317      	str	r3, [sp, #92]	; 0x5c
 801f0b0:	f1ab 0304 	sub.w	r3, fp, #4
 801f0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 801f0b6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801f0ba:	9316      	str	r3, [sp, #88]	; 0x58
 801f0bc:	f10b 0301 	add.w	r3, fp, #1
 801f0c0:	9309      	str	r3, [sp, #36]	; 0x24
 801f0c2:	f1c4 0301 	rsb	r3, r4, #1
 801f0c6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f0ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f0cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f0ce:	18fe      	adds	r6, r7, r3
 801f0d0:	2d00      	cmp	r5, #0
 801f0d2:	f000 83ac 	beq.w	801f82e <st_uaua8_nn_mat_mult_nt_t+0x80e>
 801f0d6:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801f0d8:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 801f0dc:	f857 2b04 	ldr.w	r2, [r7], #4
 801f0e0:	f856 3b04 	ldr.w	r3, [r6], #4
 801f0e4:	ea4f 2432 	mov.w	r4, r2, ror #8
 801f0e8:	fa3f f484 	uxtb16	r4, r4
 801f0ec:	fad4 f40c 	ssub16	r4, r4, ip
 801f0f0:	fa3f f282 	uxtb16	r2, r2
 801f0f4:	fad2 f20c 	ssub16	r2, r2, ip
 801f0f8:	ea4f 2033 	mov.w	r0, r3, ror #8
 801f0fc:	fa3f f080 	uxtb16	r0, r0
 801f100:	fad0 f00c 	ssub16	r0, r0, ip
 801f104:	fa3f f383 	uxtb16	r3, r3
 801f108:	fad3 f30c 	ssub16	r3, r3, ip
 801f10c:	3d01      	subs	r5, #1
 801f10e:	600a      	str	r2, [r1, #0]
 801f110:	604c      	str	r4, [r1, #4]
 801f112:	f101 0110 	add.w	r1, r1, #16
 801f116:	f841 3c08 	str.w	r3, [r1, #-8]
 801f11a:	f841 0c04 	str.w	r0, [r1, #-4]
 801f11e:	d1dd      	bne.n	801f0dc <st_uaua8_nn_mat_mult_nt_t+0xbc>
 801f120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f122:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f124:	1898      	adds	r0, r3, r2
 801f126:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f128:	189e      	adds	r6, r3, r2
 801f12a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f12c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f12e:	b1dc      	cbz	r4, 801f168 <st_uaua8_nn_mat_mult_nt_t+0x148>
 801f130:	7801      	ldrb	r1, [r0, #0]
 801f132:	2c01      	cmp	r4, #1
 801f134:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 801f138:	eba1 0102 	sub.w	r1, r1, r2
 801f13c:	8019      	strh	r1, [r3, #0]
 801f13e:	7831      	ldrb	r1, [r6, #0]
 801f140:	eba1 0102 	sub.w	r1, r1, r2
 801f144:	8059      	strh	r1, [r3, #2]
 801f146:	d00f      	beq.n	801f168 <st_uaua8_nn_mat_mult_nt_t+0x148>
 801f148:	7841      	ldrb	r1, [r0, #1]
 801f14a:	2c02      	cmp	r4, #2
 801f14c:	eba1 0102 	sub.w	r1, r1, r2
 801f150:	8099      	strh	r1, [r3, #4]
 801f152:	7871      	ldrb	r1, [r6, #1]
 801f154:	eba1 0102 	sub.w	r1, r1, r2
 801f158:	80d9      	strh	r1, [r3, #6]
 801f15a:	d005      	beq.n	801f168 <st_uaua8_nn_mat_mult_nt_t+0x148>
 801f15c:	7881      	ldrb	r1, [r0, #2]
 801f15e:	1a89      	subs	r1, r1, r2
 801f160:	8119      	strh	r1, [r3, #8]
 801f162:	78b1      	ldrb	r1, [r6, #2]
 801f164:	1a8a      	subs	r2, r1, r2
 801f166:	815a      	strh	r2, [r3, #10]
 801f168:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	f040 8310 	bne.w	801f790 <st_uaua8_nn_mat_mult_nt_t+0x770>
 801f170:	4618      	mov	r0, r3
 801f172:	4619      	mov	r1, r3
 801f174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f176:	681a      	ldr	r2, [r3, #0]
 801f178:	685b      	ldr	r3, [r3, #4]
 801f17a:	188a      	adds	r2, r1, r2
 801f17c:	18c3      	adds	r3, r0, r3
 801f17e:	9207      	str	r2, [sp, #28]
 801f180:	9308      	str	r3, [sp, #32]
 801f182:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f184:	2b00      	cmp	r3, #0
 801f186:	f000 8355 	beq.w	801f834 <st_uaua8_nn_mat_mult_nt_t+0x814>
 801f18a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f18c:	9302      	str	r3, [sp, #8]
 801f18e:	3a03      	subs	r2, #3
 801f190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f192:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801f196:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 801f19a:	920a      	str	r2, [sp, #40]	; 0x28
 801f19c:	9301      	str	r3, [sp, #4]
 801f19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	f340 820a 	ble.w	801f5ba <st_uaua8_nn_mat_mult_nt_t+0x59a>
 801f1a6:	9b03      	ldr	r3, [sp, #12]
 801f1a8:	eb0a 090b 	add.w	r9, sl, fp
 801f1ac:	9808      	ldr	r0, [sp, #32]
 801f1ae:	4453      	add	r3, sl
 801f1b0:	9e07      	ldr	r6, [sp, #28]
 801f1b2:	f8dd 80d8 	ldr.w	r8, [sp, #216]	; 0xd8
 801f1b6:	9300      	str	r3, [sp, #0]
 801f1b8:	4634      	mov	r4, r6
 801f1ba:	4603      	mov	r3, r0
 801f1bc:	f8da 5000 	ldr.w	r5, [sl]
 801f1c0:	f8d8 2000 	ldr.w	r2, [r8]
 801f1c4:	fa3f f185 	uxtb16	r1, r5
 801f1c8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f1cc:	f8d8 e008 	ldr.w	lr, [r8, #8]
 801f1d0:	f8d8 700c 	ldr.w	r7, [r8, #12]
 801f1d4:	fa3f f595 	uxtb16	r5, r5, ror #8
 801f1d8:	fb21 6602 	smlad	r6, r1, r2, r6
 801f1dc:	fb25 660c 	smlad	r6, r5, ip, r6
 801f1e0:	fb21 000e 	smlad	r0, r1, lr, r0
 801f1e4:	fb25 0007 	smlad	r0, r5, r7, r0
 801f1e8:	f85a 100b 	ldr.w	r1, [sl, fp]
 801f1ec:	fa3f f581 	uxtb16	r5, r1
 801f1f0:	fa3f f191 	uxtb16	r1, r1, ror #8
 801f1f4:	fb25 4202 	smlad	r2, r5, r2, r4
 801f1f8:	fb25 330e 	smlad	r3, r5, lr, r3
 801f1fc:	fb21 220c 	smlad	r2, r1, ip, r2
 801f200:	f8d8 c010 	ldr.w	ip, [r8, #16]
 801f204:	f8d8 4014 	ldr.w	r4, [r8, #20]
 801f208:	fb21 3707 	smlad	r7, r1, r7, r3
 801f20c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f210:	f8d8 e018 	ldr.w	lr, [r8, #24]
 801f214:	fa3f f583 	uxtb16	r5, r3
 801f218:	f8d8 101c 	ldr.w	r1, [r8, #28]
 801f21c:	fa3f f393 	uxtb16	r3, r3, ror #8
 801f220:	fb25 660c 	smlad	r6, r5, ip, r6
 801f224:	fb23 6604 	smlad	r6, r3, r4, r6
 801f228:	fb25 050e 	smlad	r5, r5, lr, r0
 801f22c:	fb23 5501 	smlad	r5, r3, r1, r5
 801f230:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f234:	fa3f f380 	uxtb16	r3, r0
 801f238:	fa3f f090 	uxtb16	r0, r0, ror #8
 801f23c:	fb23 2c0c 	smlad	ip, r3, ip, r2
 801f240:	fb23 770e 	smlad	r7, r3, lr, r7
 801f244:	fb20 cc04 	smlad	ip, r0, r4, ip
 801f248:	f8d8 4020 	ldr.w	r4, [r8, #32]
 801f24c:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 801f250:	fb20 7101 	smlad	r1, r0, r1, r7
 801f254:	f8da 2008 	ldr.w	r2, [sl, #8]
 801f258:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801f25c:	fa3f f382 	uxtb16	r3, r2
 801f260:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 801f264:	fa3f f292 	uxtb16	r2, r2, ror #8
 801f268:	fb23 6604 	smlad	r6, r3, r4, r6
 801f26c:	fb22 660e 	smlad	r6, r2, lr, r6
 801f270:	fb23 5300 	smlad	r3, r3, r0, r5
 801f274:	fb22 3207 	smlad	r2, r2, r7, r3
 801f278:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801f27c:	fa3f f985 	uxtb16	r9, r5
 801f280:	fa3f f595 	uxtb16	r5, r5, ror #8
 801f284:	fb29 c404 	smlad	r4, r9, r4, ip
 801f288:	fb29 1100 	smlad	r1, r9, r0, r1
 801f28c:	fb25 4e0e 	smlad	lr, r5, lr, r4
 801f290:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 801f294:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 801f298:	fb25 1707 	smlad	r7, r5, r7, r1
 801f29c:	f8da 000c 	ldr.w	r0, [sl, #12]
 801f2a0:	f108 0840 	add.w	r8, r8, #64	; 0x40
 801f2a4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801f2a8:	f10a 0a10 	add.w	sl, sl, #16
 801f2ac:	f858 5c04 	ldr.w	r5, [r8, #-4]
 801f2b0:	fa3f f380 	uxtb16	r3, r0
 801f2b4:	fa3f f090 	uxtb16	r0, r0, ror #8
 801f2b8:	fb23 660c 	smlad	r6, r3, ip, r6
 801f2bc:	fb20 6604 	smlad	r6, r0, r4, r6
 801f2c0:	fb23 2201 	smlad	r2, r3, r1, r2
 801f2c4:	fb20 2005 	smlad	r0, r0, r5, r2
 801f2c8:	eb0a 090b 	add.w	r9, sl, fp
 801f2cc:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801f2d0:	fa3f f283 	uxtb16	r2, r3
 801f2d4:	fa3f f393 	uxtb16	r3, r3, ror #8
 801f2d8:	fb22 ee0c 	smlad	lr, r2, ip, lr
 801f2dc:	fb22 7701 	smlad	r7, r2, r1, r7
 801f2e0:	fb23 e404 	smlad	r4, r3, r4, lr
 801f2e4:	fb23 7305 	smlad	r3, r3, r5, r7
 801f2e8:	9a00      	ldr	r2, [sp, #0]
 801f2ea:	4592      	cmp	sl, r2
 801f2ec:	f47f af66 	bne.w	801f1bc <st_uaua8_nn_mat_mult_nt_t+0x19c>
 801f2f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f2f2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801f2f6:	9200      	str	r2, [sp, #0]
 801f2f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f2fa:	4591      	cmp	r9, r2
 801f2fc:	da43      	bge.n	801f386 <st_uaua8_nn_mat_mult_nt_t+0x366>
 801f2fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f300:	f8cd 9018 	str.w	r9, [sp, #24]
 801f304:	eba1 0209 	sub.w	r2, r1, r9
 801f308:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
 801f30c:	9f00      	ldr	r7, [sp, #0]
 801f30e:	468b      	mov	fp, r1
 801f310:	0892      	lsrs	r2, r2, #2
 801f312:	9205      	str	r2, [sp, #20]
 801f314:	3201      	adds	r2, #1
 801f316:	9204      	str	r2, [sp, #16]
 801f318:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801f31c:	4691      	mov	r9, r2
 801f31e:	683d      	ldr	r5, [r7, #0]
 801f320:	3710      	adds	r7, #16
 801f322:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 801f326:	f85a 2b04 	ldr.w	r2, [sl], #4
 801f32a:	f857 8c08 	ldr.w	r8, [r7, #-8]
 801f32e:	f857 cc04 	ldr.w	ip, [r7, #-4]
 801f332:	fa3f f182 	uxtb16	r1, r2
 801f336:	fa3f f292 	uxtb16	r2, r2, ror #8
 801f33a:	fb21 6605 	smlad	r6, r1, r5, r6
 801f33e:	fb22 660e 	smlad	r6, r2, lr, r6
 801f342:	fb21 0008 	smlad	r0, r1, r8, r0
 801f346:	fb22 000c 	smlad	r0, r2, ip, r0
 801f34a:	f85a 200b 	ldr.w	r2, [sl, fp]
 801f34e:	fa3f f182 	uxtb16	r1, r2
 801f352:	fa3f f292 	uxtb16	r2, r2, ror #8
 801f356:	fb21 4405 	smlad	r4, r1, r5, r4
 801f35a:	fb21 3308 	smlad	r3, r1, r8, r3
 801f35e:	fb22 440e 	smlad	r4, r2, lr, r4
 801f362:	fb22 330c 	smlad	r3, r2, ip, r3
 801f366:	45ca      	cmp	sl, r9
 801f368:	d1d9      	bne.n	801f31e <st_uaua8_nn_mat_mult_nt_t+0x2fe>
 801f36a:	9a00      	ldr	r2, [sp, #0]
 801f36c:	9904      	ldr	r1, [sp, #16]
 801f36e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801f372:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801f376:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 801f37a:	f109 0904 	add.w	r9, r9, #4
 801f37e:	9200      	str	r2, [sp, #0]
 801f380:	9a05      	ldr	r2, [sp, #20]
 801f382:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 801f386:	45cb      	cmp	fp, r9
 801f388:	eb0a 020b 	add.w	r2, sl, fp
 801f38c:	f340 8111 	ble.w	801f5b2 <st_uaua8_nn_mat_mult_nt_t+0x592>
 801f390:	9900      	ldr	r1, [sp, #0]
 801f392:	f109 0201 	add.w	r2, r9, #1
 801f396:	f89a c000 	ldrb.w	ip, [sl]
 801f39a:	f9b1 7000 	ldrsh.w	r7, [r1]
 801f39e:	4593      	cmp	fp, r2
 801f3a0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801f3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f3a6:	fb17 660c 	smlabb	r6, r7, ip, r6
 801f3aa:	fb15 000c 	smlabb	r0, r5, ip, r0
 801f3ae:	eb0a 0e01 	add.w	lr, sl, r1
 801f3b2:	f81a 100b 	ldrb.w	r1, [sl, fp]
 801f3b6:	fb17 4401 	smlabb	r4, r7, r1, r4
 801f3ba:	fb15 3301 	smlabb	r3, r5, r1, r3
 801f3be:	f340 80fa 	ble.w	801f5b6 <st_uaua8_nn_mat_mult_nt_t+0x596>
 801f3c2:	9a00      	ldr	r2, [sp, #0]
 801f3c4:	f109 0902 	add.w	r9, r9, #2
 801f3c8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f3cc:	f10a 0c02 	add.w	ip, sl, #2
 801f3d0:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801f3d4:	45cb      	cmp	fp, r9
 801f3d6:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 801f3da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3dc:	fb15 6607 	smlabb	r6, r5, r7, r6
 801f3e0:	fb11 0007 	smlabb	r0, r1, r7, r0
 801f3e4:	4696      	mov	lr, r2
 801f3e6:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801f3ea:	fb15 4402 	smlabb	r4, r5, r2, r4
 801f3ee:	eb0c 050b 	add.w	r5, ip, fp
 801f3f2:	fb11 3302 	smlabb	r3, r1, r2, r3
 801f3f6:	f340 80e9 	ble.w	801f5cc <st_uaua8_nn_mat_mult_nt_t+0x5ac>
 801f3fa:	9a00      	ldr	r2, [sp, #0]
 801f3fc:	f10a 0703 	add.w	r7, sl, #3
 801f400:	f81c 500b 	ldrb.w	r5, [ip, fp]
 801f404:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 801f408:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 801f40c:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801f410:	fb11 4405 	smlabb	r4, r1, r5, r4
 801f414:	fb1c 3305 	smlabb	r3, ip, r5, r3
 801f418:	eb07 0a0b 	add.w	sl, r7, fp
 801f41c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801f420:	fb1c 0002 	smlabb	r0, ip, r2, r0
 801f424:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f426:	2a00      	cmp	r2, #0
 801f428:	f340 808f 	ble.w	801f54a <st_uaua8_nn_mat_mult_nt_t+0x52a>
 801f42c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f42e:	0076      	lsls	r6, r6, #1
 801f430:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 801f432:	0064      	lsls	r4, r4, #1
 801f434:	fb56 5601 	smmla	r6, r6, r1, r5
 801f438:	fb54 5401 	smmla	r4, r4, r1, r5
 801f43c:	4116      	asrs	r6, r2
 801f43e:	0040      	lsls	r0, r0, #1
 801f440:	005b      	lsls	r3, r3, #1
 801f442:	fb50 5001 	smmla	r0, r0, r1, r5
 801f446:	fb53 5301 	smmla	r3, r3, r1, r5
 801f44a:	f386 0608 	usat	r6, #8, r6
 801f44e:	9901      	ldr	r1, [sp, #4]
 801f450:	4110      	asrs	r0, r2
 801f452:	700e      	strb	r6, [r1, #0]
 801f454:	f380 0008 	usat	r0, #8, r0
 801f458:	7048      	strb	r0, [r1, #1]
 801f45a:	4114      	asrs	r4, r2
 801f45c:	f384 0408 	usat	r4, #8, r4
 801f460:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f462:	4113      	asrs	r3, r2
 801f464:	554c      	strb	r4, [r1, r5]
 801f466:	f383 0308 	usat	r3, #8, r3
 801f46a:	194a      	adds	r2, r1, r5
 801f46c:	7053      	strb	r3, [r2, #1]
 801f46e:	460b      	mov	r3, r1
 801f470:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f472:	4413      	add	r3, r2
 801f474:	9301      	str	r3, [sp, #4]
 801f476:	9b02      	ldr	r3, [sp, #8]
 801f478:	3b01      	subs	r3, #1
 801f47a:	9302      	str	r3, [sp, #8]
 801f47c:	f47f ae8f 	bne.w	801f19e <st_uaua8_nn_mat_mult_nt_t+0x17e>
 801f480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f482:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f484:	eb03 0b02 	add.w	fp, r3, r2
 801f488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	f040 80a0 	bne.w	801f5d0 <st_uaua8_nn_mat_mult_nt_t+0x5b0>
 801f490:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f492:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f496:	440a      	add	r2, r1
 801f498:	3302      	adds	r3, #2
 801f49a:	9210      	str	r2, [sp, #64]	; 0x40
 801f49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f49e:	9311      	str	r3, [sp, #68]	; 0x44
 801f4a0:	3208      	adds	r2, #8
 801f4a2:	9212      	str	r2, [sp, #72]	; 0x48
 801f4a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f4a6:	4293      	cmp	r3, r2
 801f4a8:	f47f ae0e 	bne.w	801f0c8 <st_uaua8_nn_mat_mult_nt_t+0xa8>
 801f4ac:	460b      	mov	r3, r1
 801f4ae:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
 801f4b2:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
 801f4b6:	fb02 1303 	mla	r3, r2, r3, r1
 801f4ba:	9321      	str	r3, [sp, #132]	; 0x84
 801f4bc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f4be:	07db      	lsls	r3, r3, #31
 801f4c0:	d53f      	bpl.n	801f542 <st_uaua8_nn_mat_mult_nt_t+0x522>
 801f4c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	dd3c      	ble.n	801f542 <st_uaua8_nn_mat_mult_nt_t+0x522>
 801f4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4ca:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801f4ce:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f4d0:	2500      	movs	r5, #0
 801f4d2:	f1c3 0701 	rsb	r7, r3, #1
 801f4d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f4d8:	4416      	add	r6, r2
 801f4da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f4dc:	9700      	str	r7, [sp, #0]
 801f4de:	469a      	mov	sl, r3
 801f4e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f4e4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801f4e8:	f8dd e0cc 	ldr.w	lr, [sp, #204]	; 0xcc
 801f4ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801f4f0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801f4f2:	f1bb 0f00 	cmp.w	fp, #0
 801f4f6:	6831      	ldr	r1, [r6, #0]
 801f4f8:	dd0f      	ble.n	801f51a <st_uaua8_nn_mat_mult_nt_t+0x4fa>
 801f4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f4fc:	eb00 0c0b 	add.w	ip, r0, fp
 801f500:	1e5c      	subs	r4, r3, #1
 801f502:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f506:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801f50a:	eba2 020e 	sub.w	r2, r2, lr
 801f50e:	4560      	cmp	r0, ip
 801f510:	eba3 0308 	sub.w	r3, r3, r8
 801f514:	fb02 1103 	mla	r1, r2, r3, r1
 801f518:	d1f3      	bne.n	801f502 <st_uaua8_nn_mat_mult_nt_t+0x4e2>
 801f51a:	f1ba 0f00 	cmp.w	sl, #0
 801f51e:	f340 81a8 	ble.w	801f872 <st_uaua8_nn_mat_mult_nt_t+0x852>
 801f522:	004b      	lsls	r3, r1, #1
 801f524:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f526:	fb53 2307 	smmla	r3, r3, r7, r2
 801f52a:	fa43 f30a 	asr.w	r3, r3, sl
 801f52e:	f383 0308 	usat	r3, #8, r3
 801f532:	f889 3000 	strb.w	r3, [r9]
 801f536:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f538:	3501      	adds	r5, #1
 801f53a:	4499      	add	r9, r3
 801f53c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f53e:	42ab      	cmp	r3, r5
 801f540:	d1d7      	bne.n	801f4f2 <st_uaua8_nn_mat_mult_nt_t+0x4d2>
 801f542:	2000      	movs	r0, #0
 801f544:	b025      	add	sp, #148	; 0x94
 801f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f54a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f54c:	fa06 f205 	lsl.w	r2, r6, r5
 801f550:	f302 021f 	ssat	r2, #32, r2
 801f554:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f556:	fb52 f211 	smmulr	r2, r2, r1
 801f55a:	fa04 f105 	lsl.w	r1, r4, r5
 801f55e:	f301 011f 	ssat	r1, #32, r1
 801f562:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 801f564:	fb51 f114 	smmulr	r1, r1, r4
 801f568:	40a8      	lsls	r0, r5
 801f56a:	f300 001f 	ssat	r0, #32, r0
 801f56e:	fb50 f014 	smmulr	r0, r0, r4
 801f572:	40ab      	lsls	r3, r5
 801f574:	f303 031f 	ssat	r3, #32, r3
 801f578:	fb53 f314 	smmulr	r3, r3, r4
 801f57c:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 801f57e:	4422      	add	r2, r4
 801f580:	f382 0208 	usat	r2, #8, r2
 801f584:	9c01      	ldr	r4, [sp, #4]
 801f586:	7022      	strb	r2, [r4, #0]
 801f588:	4625      	mov	r5, r4
 801f58a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f58c:	4410      	add	r0, r2
 801f58e:	f380 0008 	usat	r0, #8, r0
 801f592:	7060      	strb	r0, [r4, #1]
 801f594:	4622      	mov	r2, r4
 801f596:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801f598:	4401      	add	r1, r0
 801f59a:	f381 0108 	usat	r1, #8, r1
 801f59e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801f5a0:	5529      	strb	r1, [r5, r4]
 801f5a2:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801f5a4:	440b      	add	r3, r1
 801f5a6:	f383 0308 	usat	r3, #8, r3
 801f5aa:	4422      	add	r2, r4
 801f5ac:	7053      	strb	r3, [r2, #1]
 801f5ae:	9b01      	ldr	r3, [sp, #4]
 801f5b0:	e75e      	b.n	801f470 <st_uaua8_nn_mat_mult_nt_t+0x450>
 801f5b2:	4692      	mov	sl, r2
 801f5b4:	e736      	b.n	801f424 <st_uaua8_nn_mat_mult_nt_t+0x404>
 801f5b6:	46f2      	mov	sl, lr
 801f5b8:	e734      	b.n	801f424 <st_uaua8_nn_mat_mult_nt_t+0x404>
 801f5ba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f5bc:	f04f 0900 	mov.w	r9, #0
 801f5c0:	9808      	ldr	r0, [sp, #32]
 801f5c2:	9e07      	ldr	r6, [sp, #28]
 801f5c4:	9300      	str	r3, [sp, #0]
 801f5c6:	4603      	mov	r3, r0
 801f5c8:	4634      	mov	r4, r6
 801f5ca:	e695      	b.n	801f2f8 <st_uaua8_nn_mat_mult_nt_t+0x2d8>
 801f5cc:	46aa      	mov	sl, r5
 801f5ce:	e729      	b.n	801f424 <st_uaua8_nn_mat_mult_nt_t+0x404>
 801f5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	f340 815f 	ble.w	801f896 <st_uaua8_nn_mat_mult_nt_t+0x876>
 801f5d8:	9b03      	ldr	r3, [sp, #12]
 801f5da:	9d36      	ldr	r5, [sp, #216]	; 0xd8
 801f5dc:	eb0a 0e03 	add.w	lr, sl, r3
 801f5e0:	e9dd 4307 	ldrd	r4, r3, [sp, #28]
 801f5e4:	f8da 2000 	ldr.w	r2, [sl]
 801f5e8:	fa3f f182 	uxtb16	r1, r2
 801f5ec:	fa3f f292 	uxtb16	r2, r2, ror #8
 801f5f0:	6828      	ldr	r0, [r5, #0]
 801f5f2:	fb21 4000 	smlad	r0, r1, r0, r4
 801f5f6:	686c      	ldr	r4, [r5, #4]
 801f5f8:	fb22 0404 	smlad	r4, r2, r4, r0
 801f5fc:	68a8      	ldr	r0, [r5, #8]
 801f5fe:	fb21 3300 	smlad	r3, r1, r0, r3
 801f602:	68e9      	ldr	r1, [r5, #12]
 801f604:	fb22 3201 	smlad	r2, r2, r1, r3
 801f608:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f60c:	fa3f f183 	uxtb16	r1, r3
 801f610:	fa3f f393 	uxtb16	r3, r3, ror #8
 801f614:	6928      	ldr	r0, [r5, #16]
 801f616:	fb21 4000 	smlad	r0, r1, r0, r4
 801f61a:	696c      	ldr	r4, [r5, #20]
 801f61c:	fb23 0404 	smlad	r4, r3, r4, r0
 801f620:	69a8      	ldr	r0, [r5, #24]
 801f622:	fb21 2100 	smlad	r1, r1, r0, r2
 801f626:	69ea      	ldr	r2, [r5, #28]
 801f628:	fb23 1302 	smlad	r3, r3, r2, r1
 801f62c:	f8da 2008 	ldr.w	r2, [sl, #8]
 801f630:	fa3f f182 	uxtb16	r1, r2
 801f634:	fa3f f292 	uxtb16	r2, r2, ror #8
 801f638:	6a28      	ldr	r0, [r5, #32]
 801f63a:	fb21 4000 	smlad	r0, r1, r0, r4
 801f63e:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 801f640:	fb22 0606 	smlad	r6, r2, r6, r0
 801f644:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801f646:	fb21 3100 	smlad	r1, r1, r0, r3
 801f64a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801f64c:	fb22 1203 	smlad	r2, r2, r3, r1
 801f650:	f8da 400c 	ldr.w	r4, [sl, #12]
 801f654:	3540      	adds	r5, #64	; 0x40
 801f656:	f855 0c10 	ldr.w	r0, [r5, #-16]
 801f65a:	f10a 0a10 	add.w	sl, sl, #16
 801f65e:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 801f662:	f855 cc08 	ldr.w	ip, [r5, #-8]
 801f666:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801f66a:	fa3f f184 	uxtb16	r1, r4
 801f66e:	fa3f f394 	uxtb16	r3, r4, ror #8
 801f672:	fb21 6000 	smlad	r0, r1, r0, r6
 801f676:	fb23 0408 	smlad	r4, r3, r8, r0
 801f67a:	fb21 220c 	smlad	r2, r1, ip, r2
 801f67e:	fb23 2307 	smlad	r3, r3, r7, r2
 801f682:	45f2      	cmp	sl, lr
 801f684:	d1ae      	bne.n	801f5e4 <st_uaua8_nn_mat_mult_nt_t+0x5c4>
 801f686:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 801f68a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 801f68e:	e9cd 4307 	strd	r4, r3, [sp, #28]
 801f692:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f694:	3b03      	subs	r3, #3
 801f696:	459e      	cmp	lr, r3
 801f698:	da2f      	bge.n	801f6fa <st_uaua8_nn_mat_mult_nt_t+0x6da>
 801f69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f69c:	4661      	mov	r1, ip
 801f69e:	eba3 090e 	sub.w	r9, r3, lr
 801f6a2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801f6a6:	f109 0801 	add.w	r8, r9, #1
 801f6aa:	e9dd 4507 	ldrd	r4, r5, [sp, #28]
 801f6ae:	eb0a 0788 	add.w	r7, sl, r8, lsl #2
 801f6b2:	e9cd cb00 	strd	ip, fp, [sp]
 801f6b6:	6808      	ldr	r0, [r1, #0]
 801f6b8:	3110      	adds	r1, #16
 801f6ba:	f851 bc0c 	ldr.w	fp, [r1, #-12]
 801f6be:	f851 cc08 	ldr.w	ip, [r1, #-8]
 801f6c2:	f851 6c04 	ldr.w	r6, [r1, #-4]
 801f6c6:	f85a 3b04 	ldr.w	r3, [sl], #4
 801f6ca:	fa3f f283 	uxtb16	r2, r3
 801f6ce:	fa3f f393 	uxtb16	r3, r3, ror #8
 801f6d2:	fb22 4400 	smlad	r4, r2, r0, r4
 801f6d6:	fb23 440b 	smlad	r4, r3, fp, r4
 801f6da:	fb22 550c 	smlad	r5, r2, ip, r5
 801f6de:	fb23 5506 	smlad	r5, r3, r6, r5
 801f6e2:	45ba      	cmp	sl, r7
 801f6e4:	d1e7      	bne.n	801f6b6 <st_uaua8_nn_mat_mult_nt_t+0x696>
 801f6e6:	f10e 0e04 	add.w	lr, lr, #4
 801f6ea:	e9dd cb00 	ldrd	ip, fp, [sp]
 801f6ee:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801f6f2:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 801f6f6:	e9cd 4507 	strd	r4, r5, [sp, #28]
 801f6fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f6fc:	4573      	cmp	r3, lr
 801f6fe:	dd2f      	ble.n	801f760 <st_uaua8_nn_mat_mult_nt_t+0x740>
 801f700:	f89a 2000 	ldrb.w	r2, [sl]
 801f704:	f10e 0301 	add.w	r3, lr, #1
 801f708:	9c07      	ldr	r4, [sp, #28]
 801f70a:	f8bc 0000 	ldrh.w	r0, [ip]
 801f70e:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801f712:	fb10 4002 	smlabb	r0, r0, r2, r4
 801f716:	9c08      	ldr	r4, [sp, #32]
 801f718:	fb11 4402 	smlabb	r4, r1, r2, r4
 801f71c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f71e:	9007      	str	r0, [sp, #28]
 801f720:	429a      	cmp	r2, r3
 801f722:	9408      	str	r4, [sp, #32]
 801f724:	dd1c      	ble.n	801f760 <st_uaua8_nn_mat_mult_nt_t+0x740>
 801f726:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801f72a:	f10e 0e02 	add.w	lr, lr, #2
 801f72e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801f732:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 801f736:	fb11 0003 	smlabb	r0, r1, r3, r0
 801f73a:	fb12 4403 	smlabb	r4, r2, r3, r4
 801f73e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f740:	9007      	str	r0, [sp, #28]
 801f742:	4573      	cmp	r3, lr
 801f744:	9408      	str	r4, [sp, #32]
 801f746:	dd0b      	ble.n	801f760 <st_uaua8_nn_mat_mult_nt_t+0x740>
 801f748:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801f74c:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 801f750:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 801f754:	fb12 0203 	smlabb	r2, r2, r3, r0
 801f758:	fb11 4303 	smlabb	r3, r1, r3, r4
 801f75c:	9207      	str	r2, [sp, #28]
 801f75e:	9308      	str	r3, [sp, #32]
 801f760:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f762:	9b07      	ldr	r3, [sp, #28]
 801f764:	2900      	cmp	r1, #0
 801f766:	dd6a      	ble.n	801f83e <st_uaua8_nn_mat_mult_nt_t+0x81e>
 801f768:	9a08      	ldr	r2, [sp, #32]
 801f76a:	005b      	lsls	r3, r3, #1
 801f76c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801f76e:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 801f770:	0052      	lsls	r2, r2, #1
 801f772:	fb53 4300 	smmla	r3, r3, r0, r4
 801f776:	fb52 4200 	smmla	r2, r2, r0, r4
 801f77a:	410b      	asrs	r3, r1
 801f77c:	f383 0308 	usat	r3, #8, r3
 801f780:	f88b 3000 	strb.w	r3, [fp]
 801f784:	410a      	asrs	r2, r1
 801f786:	f382 0308 	usat	r3, #8, r2
 801f78a:	f88b 3001 	strb.w	r3, [fp, #1]
 801f78e:	e67f      	b.n	801f490 <st_uaua8_nn_mat_mult_nt_t+0x470>
 801f790:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f792:	2c00      	cmp	r4, #0
 801f794:	d07b      	beq.n	801f88e <st_uaua8_nn_mat_mult_nt_t+0x86e>
 801f796:	2300      	movs	r3, #0
 801f798:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f79a:	4619      	mov	r1, r3
 801f79c:	f102 0010 	add.w	r0, r2, #16
 801f7a0:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 801f7a4:	3c01      	subs	r4, #1
 801f7a6:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 801f7aa:	f100 0010 	add.w	r0, r0, #16
 801f7ae:	eba1 0105 	sub.w	r1, r1, r5
 801f7b2:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 801f7b6:	eba3 0302 	sub.w	r3, r3, r2
 801f7ba:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 801f7be:	eba1 0105 	sub.w	r1, r1, r5
 801f7c2:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 801f7c6:	eba3 0302 	sub.w	r3, r3, r2
 801f7ca:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 801f7ce:	eba1 0105 	sub.w	r1, r1, r5
 801f7d2:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 801f7d6:	eba3 0302 	sub.w	r3, r3, r2
 801f7da:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 801f7de:	eba1 0105 	sub.w	r1, r1, r5
 801f7e2:	eba3 0302 	sub.w	r3, r3, r2
 801f7e6:	d1db      	bne.n	801f7a0 <st_uaua8_nn_mat_mult_nt_t+0x780>
 801f7e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f7ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f7ec:	b1cd      	cbz	r5, 801f822 <st_uaua8_nn_mat_mult_nt_t+0x802>
 801f7ee:	f9b2 4000 	ldrsh.w	r4, [r2]
 801f7f2:	2d01      	cmp	r5, #1
 801f7f4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 801f7f8:	eba1 0104 	sub.w	r1, r1, r4
 801f7fc:	eba3 0300 	sub.w	r3, r3, r0
 801f800:	d00f      	beq.n	801f822 <st_uaua8_nn_mat_mult_nt_t+0x802>
 801f802:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 801f806:	2d02      	cmp	r5, #2
 801f808:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 801f80c:	eba1 0104 	sub.w	r1, r1, r4
 801f810:	eba3 0300 	sub.w	r3, r3, r0
 801f814:	d005      	beq.n	801f822 <st_uaua8_nn_mat_mult_nt_t+0x802>
 801f816:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 801f81a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801f81e:	1a09      	subs	r1, r1, r0
 801f820:	1a9b      	subs	r3, r3, r2
 801f822:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801f824:	fb02 f101 	mul.w	r1, r2, r1
 801f828:	fb02 f003 	mul.w	r0, r2, r3
 801f82c:	e4a2      	b.n	801f174 <st_uaua8_nn_mat_mult_nt_t+0x154>
 801f82e:	4638      	mov	r0, r7
 801f830:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f832:	e47b      	b.n	801f12c <st_uaua8_nn_mat_mult_nt_t+0x10c>
 801f834:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801f838:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801f83c:	e624      	b.n	801f488 <st_uaua8_nn_mat_mult_nt_t+0x468>
 801f83e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f840:	408b      	lsls	r3, r1
 801f842:	f303 031f 	ssat	r3, #32, r3
 801f846:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f848:	fb53 f312 	smmulr	r3, r3, r2
 801f84c:	9a08      	ldr	r2, [sp, #32]
 801f84e:	408a      	lsls	r2, r1
 801f850:	f302 021f 	ssat	r2, #32, r2
 801f854:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f856:	fb52 f211 	smmulr	r2, r2, r1
 801f85a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801f85c:	440b      	add	r3, r1
 801f85e:	f383 0308 	usat	r3, #8, r3
 801f862:	f88b 3000 	strb.w	r3, [fp]
 801f866:	1853      	adds	r3, r2, r1
 801f868:	f383 0308 	usat	r3, #8, r3
 801f86c:	f88b 3001 	strb.w	r3, [fp, #1]
 801f870:	e60e      	b.n	801f490 <st_uaua8_nn_mat_mult_nt_t+0x470>
 801f872:	9b00      	ldr	r3, [sp, #0]
 801f874:	fa01 f303 	lsl.w	r3, r1, r3
 801f878:	f303 031f 	ssat	r3, #32, r3
 801f87c:	fb53 f317 	smmulr	r3, r3, r7
 801f880:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f882:	4413      	add	r3, r2
 801f884:	f383 0308 	usat	r3, #8, r3
 801f888:	f889 3000 	strb.w	r3, [r9]
 801f88c:	e653      	b.n	801f536 <st_uaua8_nn_mat_mult_nt_t+0x516>
 801f88e:	4621      	mov	r1, r4
 801f890:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f892:	4623      	mov	r3, r4
 801f894:	e7a9      	b.n	801f7ea <st_uaua8_nn_mat_mult_nt_t+0x7ca>
 801f896:	f8dd c0d8 	ldr.w	ip, [sp, #216]	; 0xd8
 801f89a:	f04f 0e00 	mov.w	lr, #0
 801f89e:	e6f8      	b.n	801f692 <st_uaua8_nn_mat_mult_nt_t+0x672>

0801f8a0 <st_uaua8_nn_mat_mult_kernel>:
 801f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8a4:	b0a3      	sub	sp, #140	; 0x8c
 801f8a6:	461c      	mov	r4, r3
 801f8a8:	4615      	mov	r5, r2
 801f8aa:	4683      	mov	fp, r0
 801f8ac:	9308      	str	r3, [sp, #32]
 801f8ae:	f89d a0bc 	ldrb.w	sl, [sp, #188]	; 0xbc
 801f8b2:	0868      	lsrs	r0, r5, #1
 801f8b4:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 801f8b8:	921f      	str	r2, [sp, #124]	; 0x7c
 801f8ba:	4622      	mov	r2, r4
 801f8bc:	fb13 f30a 	smulbb	r3, r3, sl
 801f8c0:	9001      	str	r0, [sp, #4]
 801f8c2:	4610      	mov	r0, r2
 801f8c4:	08a4      	lsrs	r4, r4, #2
 801f8c6:	fb02 f303 	mul.w	r3, r2, r3
 801f8ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f8ce:	2c80      	cmp	r4, #128	; 0x80
 801f8d0:	9111      	str	r1, [sp, #68]	; 0x44
 801f8d2:	9313      	str	r3, [sp, #76]	; 0x4c
 801f8d4:	921c      	str	r2, [sp, #112]	; 0x70
 801f8d6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801f8d8:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 801f8dc:	442b      	add	r3, r5
 801f8de:	941d      	str	r4, [sp, #116]	; 0x74
 801f8e0:	9212      	str	r2, [sp, #72]	; 0x48
 801f8e2:	eb01 0240 	add.w	r2, r1, r0, lsl #1
 801f8e6:	931b      	str	r3, [sp, #108]	; 0x6c
 801f8e8:	920d      	str	r2, [sp, #52]	; 0x34
 801f8ea:	f240 83b1 	bls.w	8020050 <st_uaua8_nn_mat_mult_kernel+0x7b0>
 801f8ee:	f1a4 0381 	sub.w	r3, r4, #129	; 0x81
 801f8f2:	2700      	movs	r7, #0
 801f8f4:	4696      	mov	lr, r2
 801f8f6:	4608      	mov	r0, r1
 801f8f8:	f3c3 19c8 	ubfx	r9, r3, #7, #9
 801f8fc:	46bc      	mov	ip, r7
 801f8fe:	f109 0301 	add.w	r3, r9, #1
 801f902:	029b      	lsls	r3, r3, #10
 801f904:	eb01 0803 	add.w	r8, r1, r3
 801f908:	9302      	str	r3, [sp, #8]
 801f90a:	2200      	movs	r2, #0
 801f90c:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 801f910:	4674      	mov	r4, lr
 801f912:	4613      	mov	r3, r2
 801f914:	6806      	ldr	r6, [r0, #0]
 801f916:	fa93 f646 	uadd16	r6, r3, r6
 801f91a:	6823      	ldr	r3, [r4, #0]
 801f91c:	fa92 f243 	uadd16	r2, r2, r3
 801f920:	6843      	ldr	r3, [r0, #4]
 801f922:	3408      	adds	r4, #8
 801f924:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801f928:	3008      	adds	r0, #8
 801f92a:	fa96 f343 	uadd16	r3, r6, r3
 801f92e:	fa92 f241 	uadd16	r2, r2, r1
 801f932:	4285      	cmp	r5, r0
 801f934:	d1ee      	bne.n	801f914 <st_uaua8_nn_mat_mult_kernel+0x74>
 801f936:	0c1c      	lsrs	r4, r3, #16
 801f938:	45a8      	cmp	r8, r5
 801f93a:	ea4f 4112 	mov.w	r1, r2, lsr #16
 801f93e:	4628      	mov	r0, r5
 801f940:	fa14 f383 	uxtah	r3, r4, r3
 801f944:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 801f948:	fa11 f282 	uxtah	r2, r1, r2
 801f94c:	449c      	add	ip, r3
 801f94e:	4417      	add	r7, r2
 801f950:	d1db      	bne.n	801f90a <st_uaua8_nn_mat_mult_kernel+0x6a>
 801f952:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f954:	ebc9 2249 	rsb	r2, r9, r9, lsl #9
 801f958:	9902      	ldr	r1, [sp, #8]
 801f95a:	462c      	mov	r4, r5
 801f95c:	3b80      	subs	r3, #128	; 0x80
 801f95e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f960:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 801f964:	4401      	add	r1, r0
 801f966:	b292      	uxth	r2, r2
 801f968:	468e      	mov	lr, r1
 801f96a:	b31a      	cbz	r2, 801f9b4 <st_uaua8_nn_mat_mult_kernel+0x114>
 801f96c:	3a01      	subs	r2, #1
 801f96e:	2300      	movs	r3, #0
 801f970:	4675      	mov	r5, lr
 801f972:	b292      	uxth	r2, r2
 801f974:	4619      	mov	r1, r3
 801f976:	3201      	adds	r2, #1
 801f978:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801f97c:	eb04 0608 	add.w	r6, r4, r8
 801f980:	6822      	ldr	r2, [r4, #0]
 801f982:	fa91 f142 	uadd16	r1, r1, r2
 801f986:	682a      	ldr	r2, [r5, #0]
 801f988:	fa93 f342 	uadd16	r3, r3, r2
 801f98c:	6860      	ldr	r0, [r4, #4]
 801f98e:	3508      	adds	r5, #8
 801f990:	f855 2c04 	ldr.w	r2, [r5, #-4]
 801f994:	3408      	adds	r4, #8
 801f996:	fa91 f140 	uadd16	r1, r1, r0
 801f99a:	fa93 f342 	uadd16	r3, r3, r2
 801f99e:	42b4      	cmp	r4, r6
 801f9a0:	d1ee      	bne.n	801f980 <st_uaua8_nn_mat_mult_kernel+0xe0>
 801f9a2:	0c08      	lsrs	r0, r1, #16
 801f9a4:	44c6      	add	lr, r8
 801f9a6:	0c1a      	lsrs	r2, r3, #16
 801f9a8:	fa10 f181 	uxtah	r1, r0, r1
 801f9ac:	fa12 f383 	uxtah	r3, r2, r3
 801f9b0:	448c      	add	ip, r1
 801f9b2:	441f      	add	r7, r3
 801f9b4:	9b08      	ldr	r3, [sp, #32]
 801f9b6:	f013 0103 	ands.w	r1, r3, #3
 801f9ba:	9121      	str	r1, [sp, #132]	; 0x84
 801f9bc:	d012      	beq.n	801f9e4 <st_uaua8_nn_mat_mult_kernel+0x144>
 801f9be:	8822      	ldrh	r2, [r4, #0]
 801f9c0:	2901      	cmp	r1, #1
 801f9c2:	f8be 3000 	ldrh.w	r3, [lr]
 801f9c6:	4494      	add	ip, r2
 801f9c8:	441f      	add	r7, r3
 801f9ca:	d00b      	beq.n	801f9e4 <st_uaua8_nn_mat_mult_kernel+0x144>
 801f9cc:	8862      	ldrh	r2, [r4, #2]
 801f9ce:	2902      	cmp	r1, #2
 801f9d0:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801f9d4:	4494      	add	ip, r2
 801f9d6:	441f      	add	r7, r3
 801f9d8:	d004      	beq.n	801f9e4 <st_uaua8_nn_mat_mult_kernel+0x144>
 801f9da:	88a3      	ldrh	r3, [r4, #4]
 801f9dc:	f8be 2004 	ldrh.w	r2, [lr, #4]
 801f9e0:	449c      	add	ip, r3
 801f9e2:	4417      	add	r7, r2
 801f9e4:	fb0c f30a 	mul.w	r3, ip, sl
 801f9e8:	9901      	ldr	r1, [sp, #4]
 801f9ea:	9314      	str	r3, [sp, #80]	; 0x50
 801f9ec:	fb07 f30a 	mul.w	r3, r7, sl
 801f9f0:	9315      	str	r3, [sp, #84]	; 0x54
 801f9f2:	2900      	cmp	r1, #0
 801f9f4:	f000 8242 	beq.w	801fe7c <st_uaua8_nn_mat_mult_kernel+0x5dc>
 801f9f8:	9808      	ldr	r0, [sp, #32]
 801f9fa:	3901      	subs	r1, #1
 801f9fc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f9fe:	f1a0 0210 	sub.w	r2, r0, #16
 801fa02:	b289      	uxth	r1, r1
 801fa04:	462b      	mov	r3, r5
 801fa06:	1ec4      	subs	r4, r0, #3
 801fa08:	0912      	lsrs	r2, r2, #4
 801fa0a:	9120      	str	r1, [sp, #128]	; 0x80
 801fa0c:	3310      	adds	r3, #16
 801fa0e:	9417      	str	r4, [sp, #92]	; 0x5c
 801fa10:	3201      	adds	r2, #1
 801fa12:	f105 0408 	add.w	r4, r5, #8
 801fa16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801fa1a:	1f01      	subs	r1, r0, #4
 801fa1c:	9409      	str	r4, [sp, #36]	; 0x24
 801fa1e:	9316      	str	r3, [sp, #88]	; 0x58
 801fa20:	0153      	lsls	r3, r2, #5
 801fa22:	0112      	lsls	r2, r2, #4
 801fa24:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801fa26:	911a      	str	r1, [sp, #104]	; 0x68
 801fa28:	920c      	str	r2, [sp, #48]	; 0x30
 801fa2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa2c:	940a      	str	r4, [sp, #40]	; 0x28
 801fa2e:	f1c2 0201 	rsb	r2, r2, #1
 801fa32:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801fa34:	f8cd b004 	str.w	fp, [sp, #4]
 801fa38:	921e      	str	r2, [sp, #120]	; 0x78
 801fa3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa3c:	940b      	str	r4, [sp, #44]	; 0x2c
 801fa3e:	441a      	add	r2, r3
 801fa40:	9219      	str	r2, [sp, #100]	; 0x64
 801fa42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fa44:	18d3      	adds	r3, r2, r3
 801fa46:	9318      	str	r3, [sp, #96]	; 0x60
 801fa48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa4a:	9901      	ldr	r1, [sp, #4]
 801fa4c:	9808      	ldr	r0, [sp, #32]
 801fa4e:	f852 3c08 	ldr.w	r3, [r2, #-8]
 801fa52:	180f      	adds	r7, r1, r0
 801fa54:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801fa58:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fa5a:	280f      	cmp	r0, #15
 801fa5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa5e:	440a      	add	r2, r1
 801fa60:	440b      	add	r3, r1
 801fa62:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fa64:	9703      	str	r7, [sp, #12]
 801fa66:	eba3 0a04 	sub.w	sl, r3, r4
 801fa6a:	eba3 0105 	sub.w	r1, r3, r5
 801fa6e:	eba2 0604 	sub.w	r6, r2, r4
 801fa72:	eba2 0905 	sub.w	r9, r2, r5
 801fa76:	f340 82bf 	ble.w	801fff8 <st_uaua8_nn_mat_mult_kernel+0x758>
 801fa7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fa7c:	9b01      	ldr	r3, [sp, #4]
 801fa7e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801fa82:	4413      	add	r3, r2
 801fa84:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801fa88:	9a01      	ldr	r2, [sp, #4]
 801fa8a:	9304      	str	r3, [sp, #16]
 801fa8c:	9702      	str	r7, [sp, #8]
 801fa8e:	6817      	ldr	r7, [r2, #0]
 801fa90:	f8df c3b0 	ldr.w	ip, [pc, #944]	; 801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>
 801fa94:	9802      	ldr	r0, [sp, #8]
 801fa96:	ea4f 2237 	mov.w	r2, r7, ror #8
 801fa9a:	fa3f f282 	uxtb16	r2, r2
 801fa9e:	ea02 0c0c 	and.w	ip, r2, ip
 801faa2:	6800      	ldr	r0, [r0, #0]
 801faa4:	fa3f f787 	uxtb16	r7, r7
 801faa8:	fa1f fb87 	uxth.w	fp, r7
 801faac:	f8de 4000 	ldr.w	r4, [lr]
 801fab0:	ea4c 4717 	orr.w	r7, ip, r7, lsr #16
 801fab4:	f8df c38c 	ldr.w	ip, [pc, #908]	; 801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>
 801fab8:	ea4f 2530 	mov.w	r5, r0, ror #8
 801fabc:	fa3f f080 	uxtb16	r0, r0
 801fac0:	fa3f f585 	uxtb16	r5, r5
 801fac4:	b283      	uxth	r3, r0
 801fac6:	ea05 0c0c 	and.w	ip, r5, ip
 801faca:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 801face:	f8d8 b000 	ldr.w	fp, [r8]
 801fad2:	ea4c 4010 	orr.w	r0, ip, r0, lsr #16
 801fad6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801fada:	fb22 aa04 	smlad	sl, r2, r4, sl
 801fade:	fb22 120b 	smlad	r2, r2, fp, r1
 801fae2:	fb23 6404 	smlad	r4, r3, r4, r6
 801fae6:	fb23 930b 	smlad	r3, r3, fp, r9
 801faea:	f8de 6004 	ldr.w	r6, [lr, #4]
 801faee:	f8d8 9004 	ldr.w	r9, [r8, #4]
 801faf2:	fb27 aa06 	smlad	sl, r7, r6, sl
 801faf6:	fb27 2c09 	smlad	ip, r7, r9, r2
 801fafa:	fb20 4406 	smlad	r4, r0, r6, r4
 801fafe:	fb20 3909 	smlad	r9, r0, r9, r3
 801fb02:	9901      	ldr	r1, [sp, #4]
 801fb04:	9a02      	ldr	r2, [sp, #8]
 801fb06:	684e      	ldr	r6, [r1, #4]
 801fb08:	6851      	ldr	r1, [r2, #4]
 801fb0a:	fa3f f586 	uxtb16	r5, r6
 801fb0e:	ea4f 2236 	mov.w	r2, r6, ror #8
 801fb12:	4ecc      	ldr	r6, [pc, #816]	; (801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>)
 801fb14:	fa3f f282 	uxtb16	r2, r2
 801fb18:	4016      	ands	r6, r2
 801fb1a:	fa1f fb85 	uxth.w	fp, r5
 801fb1e:	ea4f 2731 	mov.w	r7, r1, ror #8
 801fb22:	f8de 0008 	ldr.w	r0, [lr, #8]
 801fb26:	ea46 4615 	orr.w	r6, r6, r5, lsr #16
 801fb2a:	4dc6      	ldr	r5, [pc, #792]	; (801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>)
 801fb2c:	fa3f f787 	uxtb16	r7, r7
 801fb30:	fa3f f181 	uxtb16	r1, r1
 801fb34:	403d      	ands	r5, r7
 801fb36:	b28b      	uxth	r3, r1
 801fb38:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 801fb3c:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801fb40:	ea45 4111 	orr.w	r1, r5, r1, lsr #16
 801fb44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fb48:	fb22 aa00 	smlad	sl, r2, r0, sl
 801fb4c:	fb22 c20b 	smlad	r2, r2, fp, ip
 801fb50:	fb23 4000 	smlad	r0, r3, r0, r4
 801fb54:	fb23 930b 	smlad	r3, r3, fp, r9
 801fb58:	f8de b00c 	ldr.w	fp, [lr, #12]
 801fb5c:	f8d8 500c 	ldr.w	r5, [r8, #12]
 801fb60:	fb26 aa0b 	smlad	sl, r6, fp, sl
 801fb64:	fb26 2705 	smlad	r7, r6, r5, r2
 801fb68:	fb21 0b0b 	smlad	fp, r1, fp, r0
 801fb6c:	fb21 3505 	smlad	r5, r1, r5, r3
 801fb70:	9a01      	ldr	r2, [sp, #4]
 801fb72:	9902      	ldr	r1, [sp, #8]
 801fb74:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801fb78:	fa3f f48c 	uxtb16	r4, ip
 801fb7c:	ea4f 223c 	mov.w	r2, ip, ror #8
 801fb80:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>
 801fb84:	fa3f f282 	uxtb16	r2, r2
 801fb88:	ea02 0c0c 	and.w	ip, r2, ip
 801fb8c:	6889      	ldr	r1, [r1, #8]
 801fb8e:	fa1f f984 	uxth.w	r9, r4
 801fb92:	f8de 0010 	ldr.w	r0, [lr, #16]
 801fb96:	ea4c 4c14 	orr.w	ip, ip, r4, lsr #16
 801fb9a:	4caa      	ldr	r4, [pc, #680]	; (801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>)
 801fb9c:	ea4f 2631 	mov.w	r6, r1, ror #8
 801fba0:	fa3f f181 	uxtb16	r1, r1
 801fba4:	fa3f f686 	uxtb16	r6, r6
 801fba8:	b28b      	uxth	r3, r1
 801fbaa:	4034      	ands	r4, r6
 801fbac:	ea49 4202 	orr.w	r2, r9, r2, lsl #16
 801fbb0:	f8d8 9010 	ldr.w	r9, [r8, #16]
 801fbb4:	ea44 4111 	orr.w	r1, r4, r1, lsr #16
 801fbb8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801fbbc:	fb22 aa00 	smlad	sl, r2, r0, sl
 801fbc0:	fb22 7209 	smlad	r2, r2, r9, r7
 801fbc4:	fb23 b000 	smlad	r0, r3, r0, fp
 801fbc8:	fb23 5309 	smlad	r3, r3, r9, r5
 801fbcc:	f8de 7014 	ldr.w	r7, [lr, #20]
 801fbd0:	f8d8 4014 	ldr.w	r4, [r8, #20]
 801fbd4:	fb2c aa07 	smlad	sl, ip, r7, sl
 801fbd8:	fb2c 2c04 	smlad	ip, ip, r4, r2
 801fbdc:	fb21 0707 	smlad	r7, r1, r7, r0
 801fbe0:	fb21 3404 	smlad	r4, r1, r4, r3
 801fbe4:	9b01      	ldr	r3, [sp, #4]
 801fbe6:	f8df 925c 	ldr.w	r9, [pc, #604]	; 801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>
 801fbea:	68d9      	ldr	r1, [r3, #12]
 801fbec:	f103 0210 	add.w	r2, r3, #16
 801fbf0:	9b02      	ldr	r3, [sp, #8]
 801fbf2:	9201      	str	r2, [sp, #4]
 801fbf4:	ea4f 2231 	mov.w	r2, r1, ror #8
 801fbf8:	fa3f f282 	uxtb16	r2, r2
 801fbfc:	ea02 0909 	and.w	r9, r2, r9
 801fc00:	68d8      	ldr	r0, [r3, #12]
 801fc02:	fa3f f181 	uxtb16	r1, r1
 801fc06:	3310      	adds	r3, #16
 801fc08:	fa1f fb81 	uxth.w	fp, r1
 801fc0c:	ea49 4111 	orr.w	r1, r9, r1, lsr #16
 801fc10:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>
 801fc14:	9302      	str	r3, [sp, #8]
 801fc16:	ea4f 2530 	mov.w	r5, r0, ror #8
 801fc1a:	fa3f f080 	uxtb16	r0, r0
 801fc1e:	fa3f f585 	uxtb16	r5, r5
 801fc22:	b283      	uxth	r3, r0
 801fc24:	ea05 0909 	and.w	r9, r5, r9
 801fc28:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 801fc2c:	f8de 6018 	ldr.w	r6, [lr, #24]
 801fc30:	f8d8 b018 	ldr.w	fp, [r8, #24]
 801fc34:	ea49 4010 	orr.w	r0, r9, r0, lsr #16
 801fc38:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801fc3c:	fb22 aa06 	smlad	sl, r2, r6, sl
 801fc40:	fb22 cc0b 	smlad	ip, r2, fp, ip
 801fc44:	fb23 7606 	smlad	r6, r3, r6, r7
 801fc48:	fb23 430b 	smlad	r3, r3, fp, r4
 801fc4c:	f8de 201c 	ldr.w	r2, [lr, #28]
 801fc50:	f108 0820 	add.w	r8, r8, #32
 801fc54:	f858 9c04 	ldr.w	r9, [r8, #-4]
 801fc58:	f10e 0e20 	add.w	lr, lr, #32
 801fc5c:	fb21 aa02 	smlad	sl, r1, r2, sl
 801fc60:	fb21 c109 	smlad	r1, r1, r9, ip
 801fc64:	fb20 6602 	smlad	r6, r0, r2, r6
 801fc68:	fb20 3909 	smlad	r9, r0, r9, r3
 801fc6c:	9a01      	ldr	r2, [sp, #4]
 801fc6e:	9b04      	ldr	r3, [sp, #16]
 801fc70:	429a      	cmp	r2, r3
 801fc72:	f47f af0c 	bne.w	801fa8e <st_uaua8_nn_mat_mult_kernel+0x1ee>
 801fc76:	9a03      	ldr	r2, [sp, #12]
 801fc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc7a:	4610      	mov	r0, r2
 801fc7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc7e:	4418      	add	r0, r3
 801fc80:	9207      	str	r2, [sp, #28]
 801fc82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fc84:	9003      	str	r0, [sp, #12]
 801fc86:	e9cd 3205 	strd	r3, r2, [sp, #20]
 801fc8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801fc8c:	4283      	cmp	r3, r0
 801fc8e:	da65      	bge.n	801fd5c <st_uaua8_nn_mat_mult_kernel+0x4bc>
 801fc90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fc92:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801fc96:	1ad3      	subs	r3, r2, r3
 801fc98:	9a01      	ldr	r2, [sp, #4]
 801fc9a:	f8cd c008 	str.w	ip, [sp, #8]
 801fc9e:	089b      	lsrs	r3, r3, #2
 801fca0:	9310      	str	r3, [sp, #64]	; 0x40
 801fca2:	3301      	adds	r3, #1
 801fca4:	930f      	str	r3, [sp, #60]	; 0x3c
 801fca6:	009b      	lsls	r3, r3, #2
 801fca8:	930e      	str	r3, [sp, #56]	; 0x38
 801fcaa:	18d3      	adds	r3, r2, r3
 801fcac:	e9dd 8b06 	ldrd	r8, fp, [sp, #24]
 801fcb0:	9304      	str	r3, [sp, #16]
 801fcb2:	4613      	mov	r3, r2
 801fcb4:	9802      	ldr	r0, [sp, #8]
 801fcb6:	f853 4b04 	ldr.w	r4, [r3], #4
 801fcba:	f850 2b04 	ldr.w	r2, [r0], #4
 801fcbe:	ea4f 2534 	mov.w	r5, r4, ror #8
 801fcc2:	9301      	str	r3, [sp, #4]
 801fcc4:	9002      	str	r0, [sp, #8]
 801fcc6:	ea4f 2732 	mov.w	r7, r2, ror #8
 801fcca:	fa3f f084 	uxtb16	r0, r4
 801fcce:	4c5d      	ldr	r4, [pc, #372]	; (801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>)
 801fcd0:	fa1f fc80 	uxth.w	ip, r0
 801fcd4:	fa3f f585 	uxtb16	r5, r5
 801fcd8:	402c      	ands	r4, r5
 801fcda:	f8d8 e000 	ldr.w	lr, [r8]
 801fcde:	fa3f f787 	uxtb16	r7, r7
 801fce2:	ea44 4410 	orr.w	r4, r4, r0, lsr #16
 801fce6:	4857      	ldr	r0, [pc, #348]	; (801fe44 <st_uaua8_nn_mat_mult_kernel+0x5a4>)
 801fce8:	fa3f f282 	uxtb16	r2, r2
 801fcec:	4038      	ands	r0, r7
 801fcee:	b293      	uxth	r3, r2
 801fcf0:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 801fcf4:	f8db c000 	ldr.w	ip, [fp]
 801fcf8:	ea40 4212 	orr.w	r2, r0, r2, lsr #16
 801fcfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fd00:	fb25 aa0e 	smlad	sl, r5, lr, sl
 801fd04:	fb25 110c 	smlad	r1, r5, ip, r1
 801fd08:	fb23 660e 	smlad	r6, r3, lr, r6
 801fd0c:	fb23 930c 	smlad	r3, r3, ip, r9
 801fd10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fd14:	f10b 0b08 	add.w	fp, fp, #8
 801fd18:	f85b 9c04 	ldr.w	r9, [fp, #-4]
 801fd1c:	f108 0808 	add.w	r8, r8, #8
 801fd20:	fb24 aa00 	smlad	sl, r4, r0, sl
 801fd24:	fb24 1109 	smlad	r1, r4, r9, r1
 801fd28:	fb22 6600 	smlad	r6, r2, r0, r6
 801fd2c:	fb22 3909 	smlad	r9, r2, r9, r3
 801fd30:	9a04      	ldr	r2, [sp, #16]
 801fd32:	9b01      	ldr	r3, [sp, #4]
 801fd34:	429a      	cmp	r2, r3
 801fd36:	d1bd      	bne.n	801fcb4 <st_uaua8_nn_mat_mult_kernel+0x414>
 801fd38:	9803      	ldr	r0, [sp, #12]
 801fd3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fd3c:	9a05      	ldr	r2, [sp, #20]
 801fd3e:	4420      	add	r0, r4
 801fd40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fd42:	3204      	adds	r2, #4
 801fd44:	9003      	str	r0, [sp, #12]
 801fd46:	00db      	lsls	r3, r3, #3
 801fd48:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fd4a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801fd4e:	9205      	str	r2, [sp, #20]
 801fd50:	9a06      	ldr	r2, [sp, #24]
 801fd52:	441a      	add	r2, r3
 801fd54:	9206      	str	r2, [sp, #24]
 801fd56:	9a07      	ldr	r2, [sp, #28]
 801fd58:	441a      	add	r2, r3
 801fd5a:	9207      	str	r2, [sp, #28]
 801fd5c:	9f08      	ldr	r7, [sp, #32]
 801fd5e:	9a05      	ldr	r2, [sp, #20]
 801fd60:	4297      	cmp	r7, r2
 801fd62:	dd3c      	ble.n	801fdde <st_uaua8_nn_mat_mult_kernel+0x53e>
 801fd64:	9b01      	ldr	r3, [sp, #4]
 801fd66:	9803      	ldr	r0, [sp, #12]
 801fd68:	781d      	ldrb	r5, [r3, #0]
 801fd6a:	1c53      	adds	r3, r2, #1
 801fd6c:	9a06      	ldr	r2, [sp, #24]
 801fd6e:	7800      	ldrb	r0, [r0, #0]
 801fd70:	429f      	cmp	r7, r3
 801fd72:	8814      	ldrh	r4, [r2, #0]
 801fd74:	9a07      	ldr	r2, [sp, #28]
 801fd76:	fb04 aa05 	mla	sl, r4, r5, sl
 801fd7a:	8812      	ldrh	r2, [r2, #0]
 801fd7c:	fb00 6604 	mla	r6, r0, r4, r6
 801fd80:	fb02 1105 	mla	r1, r2, r5, r1
 801fd84:	fb00 9902 	mla	r9, r0, r2, r9
 801fd88:	f340 8132 	ble.w	801fff0 <st_uaua8_nn_mat_mult_kernel+0x750>
 801fd8c:	9a01      	ldr	r2, [sp, #4]
 801fd8e:	9803      	ldr	r0, [sp, #12]
 801fd90:	7855      	ldrb	r5, [r2, #1]
 801fd92:	9a06      	ldr	r2, [sp, #24]
 801fd94:	7840      	ldrb	r0, [r0, #1]
 801fd96:	8854      	ldrh	r4, [r2, #2]
 801fd98:	9a07      	ldr	r2, [sp, #28]
 801fd9a:	9b05      	ldr	r3, [sp, #20]
 801fd9c:	fb04 aa05 	mla	sl, r4, r5, sl
 801fda0:	8852      	ldrh	r2, [r2, #2]
 801fda2:	fb00 6604 	mla	r6, r0, r4, r6
 801fda6:	3302      	adds	r3, #2
 801fda8:	fb02 1105 	mla	r1, r2, r5, r1
 801fdac:	fb00 9902 	mla	r9, r0, r2, r9
 801fdb0:	9a08      	ldr	r2, [sp, #32]
 801fdb2:	429a      	cmp	r2, r3
 801fdb4:	f340 8127 	ble.w	8020006 <st_uaua8_nn_mat_mult_kernel+0x766>
 801fdb8:	9b06      	ldr	r3, [sp, #24]
 801fdba:	9d01      	ldr	r5, [sp, #4]
 801fdbc:	889a      	ldrh	r2, [r3, #4]
 801fdbe:	9b07      	ldr	r3, [sp, #28]
 801fdc0:	3503      	adds	r5, #3
 801fdc2:	8898      	ldrh	r0, [r3, #4]
 801fdc4:	9b03      	ldr	r3, [sp, #12]
 801fdc6:	789c      	ldrb	r4, [r3, #2]
 801fdc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801fdcc:	fb04 6602 	mla	r6, r4, r2, r6
 801fdd0:	fb04 9900 	mla	r9, r4, r0, r9
 801fdd4:	fb02 aa03 	mla	sl, r2, r3, sl
 801fdd8:	fb00 1103 	mla	r1, r0, r3, r1
 801fddc:	9501      	str	r5, [sp, #4]
 801fdde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fde0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fde2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fde4:	3002      	adds	r0, #2
 801fde6:	3502      	adds	r5, #2
 801fde8:	2a00      	cmp	r2, #0
 801fdea:	900b      	str	r0, [sp, #44]	; 0x2c
 801fdec:	950a      	str	r5, [sp, #40]	; 0x28
 801fdee:	f340 80c8 	ble.w	801ff82 <st_uaua8_nn_mat_mult_kernel+0x6e2>
 801fdf2:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 801fdf4:	004b      	lsls	r3, r1, #1
 801fdf6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 801fdfa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801fdfc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801fe00:	fb53 4301 	smmla	r3, r3, r1, r4
 801fe04:	fb5a 4a01 	smmla	sl, sl, r1, r4
 801fe08:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801fe0a:	4611      	mov	r1, r2
 801fe0c:	fa4a fa02 	asr.w	sl, sl, r2
 801fe10:	0072      	lsls	r2, r6, #1
 801fe12:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 801fe14:	fb52 6204 	smmla	r2, r2, r4, r6
 801fe18:	fb57 6704 	smmla	r7, r7, r4, r6
 801fe1c:	f38a 0a08 	usat	sl, #8, sl
 801fe20:	f800 ac02 	strb.w	sl, [r0, #-2]
 801fe24:	410a      	asrs	r2, r1
 801fe26:	f382 0208 	usat	r2, #8, r2
 801fe2a:	f800 2c01 	strb.w	r2, [r0, #-1]
 801fe2e:	410b      	asrs	r3, r1
 801fe30:	f383 0308 	usat	r3, #8, r3
 801fe34:	f805 3c02 	strb.w	r3, [r5, #-2]
 801fe38:	410f      	asrs	r7, r1
 801fe3a:	f387 0308 	usat	r3, #8, r7
 801fe3e:	f805 3c01 	strb.w	r3, [r5, #-1]
 801fe42:	e001      	b.n	801fe48 <st_uaua8_nn_mat_mult_kernel+0x5a8>
 801fe44:	ffff0000 	.word	0xffff0000
 801fe48:	9a01      	ldr	r2, [sp, #4]
 801fe4a:	9908      	ldr	r1, [sp, #32]
 801fe4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe4e:	440a      	add	r2, r1
 801fe50:	3308      	adds	r3, #8
 801fe52:	9201      	str	r2, [sp, #4]
 801fe54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fe56:	9309      	str	r3, [sp, #36]	; 0x24
 801fe58:	429a      	cmp	r2, r3
 801fe5a:	f47f adf5 	bne.w	801fa48 <st_uaua8_nn_mat_mult_kernel+0x1a8>
 801fe5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe60:	991c      	ldr	r1, [sp, #112]	; 0x70
 801fe62:	3301      	adds	r3, #1
 801fe64:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fe68:	005a      	lsls	r2, r3, #1
 801fe6a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801fe6e:	931c      	str	r3, [sp, #112]	; 0x70
 801fe70:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801fe72:	4413      	add	r3, r2
 801fe74:	9331      	str	r3, [sp, #196]	; 0xc4
 801fe76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fe78:	4413      	add	r3, r2
 801fe7a:	931b      	str	r3, [sp, #108]	; 0x6c
 801fe7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fe7e:	07da      	lsls	r2, r3, #31
 801fe80:	d579      	bpl.n	801ff76 <st_uaua8_nn_mat_mult_kernel+0x6d6>
 801fe82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fe84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	441a      	add	r2, r3
 801fe8a:	4613      	mov	r3, r2
 801fe8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe8e:	1a98      	subs	r0, r3, r2
 801fe90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fe92:	1a9b      	subs	r3, r3, r2
 801fe94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801fe96:	b3a2      	cbz	r2, 801ff02 <st_uaua8_nn_mat_mult_kernel+0x662>
 801fe98:	3a01      	subs	r2, #1
 801fe9a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 801fe9e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fea0:	b292      	uxth	r2, r2
 801fea2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 802005c <st_uaua8_nn_mat_mult_kernel+0x7bc>
 801fea6:	f102 0901 	add.w	r9, r2, #1
 801feaa:	eb0b 0e89 	add.w	lr, fp, r9, lsl #2
 801feae:	f85b 2b04 	ldr.w	r2, [fp], #4
 801feb2:	fa3f f482 	uxtb16	r4, r2
 801feb6:	ea4f 2232 	mov.w	r2, r2, ror #8
 801feba:	683d      	ldr	r5, [r7, #0]
 801febc:	b2a1      	uxth	r1, r4
 801febe:	fa3f f282 	uxtb16	r2, r2
 801fec2:	ea02 0608 	and.w	r6, r2, r8
 801fec6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 801feca:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 801fece:	fb22 0005 	smlad	r0, r2, r5, r0
 801fed2:	f8dc 1000 	ldr.w	r1, [ip]
 801fed6:	fb22 3201 	smlad	r2, r2, r1, r3
 801feda:	6879      	ldr	r1, [r7, #4]
 801fedc:	f10c 0c08 	add.w	ip, ip, #8
 801fee0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801fee4:	3708      	adds	r7, #8
 801fee6:	fb24 0001 	smlad	r0, r4, r1, r0
 801feea:	fb24 2303 	smlad	r3, r4, r3, r2
 801feee:	45de      	cmp	lr, fp
 801fef0:	d1dd      	bne.n	801feae <st_uaua8_nn_mat_mult_kernel+0x60e>
 801fef2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801fef6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fef8:	4411      	add	r1, r2
 801fefa:	9111      	str	r1, [sp, #68]	; 0x44
 801fefc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fefe:	4411      	add	r1, r2
 801ff00:	910d      	str	r1, [sp, #52]	; 0x34
 801ff02:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801ff04:	b1ed      	cbz	r5, 801ff42 <st_uaua8_nn_mat_mult_kernel+0x6a2>
 801ff06:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ff08:	2d01      	cmp	r5, #1
 801ff0a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff0c:	f89b 2000 	ldrb.w	r2, [fp]
 801ff10:	8834      	ldrh	r4, [r6, #0]
 801ff12:	8839      	ldrh	r1, [r7, #0]
 801ff14:	fb02 0004 	mla	r0, r2, r4, r0
 801ff18:	fb02 3301 	mla	r3, r2, r1, r3
 801ff1c:	d011      	beq.n	801ff42 <st_uaua8_nn_mat_mult_kernel+0x6a2>
 801ff1e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801ff22:	2d02      	cmp	r5, #2
 801ff24:	8874      	ldrh	r4, [r6, #2]
 801ff26:	8879      	ldrh	r1, [r7, #2]
 801ff28:	fb02 0004 	mla	r0, r2, r4, r0
 801ff2c:	fb02 3301 	mla	r3, r2, r1, r3
 801ff30:	d007      	beq.n	801ff42 <st_uaua8_nn_mat_mult_kernel+0x6a2>
 801ff32:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801ff36:	88b4      	ldrh	r4, [r6, #4]
 801ff38:	88b9      	ldrh	r1, [r7, #4]
 801ff3a:	fb02 0004 	mla	r0, r2, r4, r0
 801ff3e:	fb02 3301 	mla	r3, r2, r1, r3
 801ff42:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ff44:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801ff46:	2c00      	cmp	r4, #0
 801ff48:	f102 0101 	add.w	r1, r2, #1
 801ff4c:	dd5f      	ble.n	802000e <st_uaua8_nn_mat_mult_kernel+0x76e>
 801ff4e:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801ff50:	0042      	lsls	r2, r0, #1
 801ff52:	005b      	lsls	r3, r3, #1
 801ff54:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801ff56:	fb52 5200 	smmla	r2, r2, r0, r5
 801ff5a:	fb53 5300 	smmla	r3, r3, r0, r5
 801ff5e:	4122      	asrs	r2, r4
 801ff60:	f382 0208 	usat	r2, #8, r2
 801ff64:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801ff66:	4123      	asrs	r3, r4
 801ff68:	7002      	strb	r2, [r0, #0]
 801ff6a:	f383 0308 	usat	r3, #8, r3
 801ff6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ff70:	9131      	str	r1, [sp, #196]	; 0xc4
 801ff72:	7013      	strb	r3, [r2, #0]
 801ff74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ff76:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801ff78:	4413      	add	r3, r2
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	b023      	add	sp, #140	; 0x8c
 801ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff82:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ff84:	fa0a f200 	lsl.w	r2, sl, r0
 801ff88:	f302 021f 	ssat	r2, #32, r2
 801ff8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ff8e:	fb52 f213 	smmulr	r2, r2, r3
 801ff92:	fa01 f300 	lsl.w	r3, r1, r0
 801ff96:	f303 031f 	ssat	r3, #32, r3
 801ff9a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ff9c:	fb53 f311 	smmulr	r3, r3, r1
 801ffa0:	fa06 f100 	lsl.w	r1, r6, r0
 801ffa4:	f301 011f 	ssat	r1, #32, r1
 801ffa8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801ffaa:	fb51 f114 	smmulr	r1, r1, r4
 801ffae:	fa09 f000 	lsl.w	r0, r9, r0
 801ffb2:	f300 001f 	ssat	r0, #32, r0
 801ffb6:	fb50 f014 	smmulr	r0, r0, r4
 801ffba:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 801ffbc:	4422      	add	r2, r4
 801ffbe:	f382 0208 	usat	r2, #8, r2
 801ffc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ffc4:	f804 2c02 	strb.w	r2, [r4, #-2]
 801ffc8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ffca:	188a      	adds	r2, r1, r2
 801ffcc:	f382 0208 	usat	r2, #8, r2
 801ffd0:	f804 2c01 	strb.w	r2, [r4, #-1]
 801ffd4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ffd6:	4413      	add	r3, r2
 801ffd8:	f383 0308 	usat	r3, #8, r3
 801ffdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ffde:	f802 3c02 	strb.w	r3, [r2, #-2]
 801ffe2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ffe4:	18c3      	adds	r3, r0, r3
 801ffe6:	f383 0308 	usat	r3, #8, r3
 801ffea:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ffee:	e72b      	b.n	801fe48 <st_uaua8_nn_mat_mult_kernel+0x5a8>
 801fff0:	9b01      	ldr	r3, [sp, #4]
 801fff2:	3301      	adds	r3, #1
 801fff4:	9301      	str	r3, [sp, #4]
 801fff6:	e6f2      	b.n	801fdde <st_uaua8_nn_mat_mult_kernel+0x53e>
 801fff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fffa:	9307      	str	r3, [sp, #28]
 801fffc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fffe:	9306      	str	r3, [sp, #24]
 8020000:	2300      	movs	r3, #0
 8020002:	9305      	str	r3, [sp, #20]
 8020004:	e641      	b.n	801fc8a <st_uaua8_nn_mat_mult_kernel+0x3ea>
 8020006:	9b01      	ldr	r3, [sp, #4]
 8020008:	3302      	adds	r3, #2
 802000a:	9301      	str	r3, [sp, #4]
 802000c:	e6e7      	b.n	801fdde <st_uaua8_nn_mat_mult_kernel+0x53e>
 802000e:	f1c4 0201 	rsb	r2, r4, #1
 8020012:	4090      	lsls	r0, r2
 8020014:	f300 001f 	ssat	r0, #32, r0
 8020018:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802001a:	fb50 f014 	smmulr	r0, r0, r4
 802001e:	4093      	lsls	r3, r2
 8020020:	f303 031f 	ssat	r3, #32, r3
 8020024:	fb53 f314 	smmulr	r3, r3, r4
 8020028:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802002a:	1882      	adds	r2, r0, r2
 802002c:	f382 0208 	usat	r2, #8, r2
 8020030:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8020032:	7002      	strb	r2, [r0, #0]
 8020034:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020036:	4413      	add	r3, r2
 8020038:	f383 0308 	usat	r3, #8, r3
 802003c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802003e:	9131      	str	r1, [sp, #196]	; 0xc4
 8020040:	7013      	strb	r3, [r2, #0]
 8020042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020044:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020046:	4413      	add	r3, r2
 8020048:	4618      	mov	r0, r3
 802004a:	b023      	add	sp, #140	; 0x8c
 802004c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020050:	2700      	movs	r7, #0
 8020052:	4696      	mov	lr, r2
 8020054:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020056:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020058:	46bc      	mov	ip, r7
 802005a:	e486      	b.n	801f96a <st_uaua8_nn_mat_mult_kernel+0xca>
 802005c:	ffff0000 	.word	0xffff0000

08020060 <st_uint8_to16_no_shift>:
 8020060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020064:	f1b2 0610 	subs.w	r6, r2, #16
 8020068:	f100 8092 	bmi.w	8020190 <st_uint8_to16_no_shift+0x130>
 802006c:	0936      	lsrs	r6, r6, #4
 802006e:	4603      	mov	r3, r0
 8020070:	4f4b      	ldr	r7, [pc, #300]	; (80201a0 <st_uint8_to16_no_shift+0x140>)
 8020072:	f106 0801 	add.w	r8, r6, #1
 8020076:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 802007a:	681d      	ldr	r5, [r3, #0]
 802007c:	3120      	adds	r1, #32
 802007e:	685e      	ldr	r6, [r3, #4]
 8020080:	3310      	adds	r3, #16
 8020082:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8020086:	fa3f fc8c 	uxtb16	ip, ip
 802008a:	ea0c 0a07 	and.w	sl, ip, r7
 802008e:	ea4f 2e36 	mov.w	lr, r6, ror #8
 8020092:	fa3f f585 	uxtb16	r5, r5
 8020096:	fa3f fe8e 	uxtb16	lr, lr
 802009a:	fa1f fb85 	uxth.w	fp, r5
 802009e:	ea0e 0907 	and.w	r9, lr, r7
 80200a2:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 80200a6:	fa3f f686 	uxtb16	r6, r6
 80200aa:	b2b5      	uxth	r5, r6
 80200ac:	f841 ac1c 	str.w	sl, [r1, #-28]
 80200b0:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 80200b4:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 80200b8:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 80200bc:	f841 cc20 	str.w	ip, [r1, #-32]
 80200c0:	f841 6c14 	str.w	r6, [r1, #-20]
 80200c4:	f841 5c18 	str.w	r5, [r1, #-24]
 80200c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80200cc:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80200d0:	ea4f 2e36 	mov.w	lr, r6, ror #8
 80200d4:	fa3f fe8e 	uxtb16	lr, lr
 80200d8:	ea0e 0a07 	and.w	sl, lr, r7
 80200dc:	ea4f 2c35 	mov.w	ip, r5, ror #8
 80200e0:	fa3f f686 	uxtb16	r6, r6
 80200e4:	fa3f f98c 	uxtb16	r9, ip
 80200e8:	fa1f fb86 	uxth.w	fp, r6
 80200ec:	fa3f f585 	uxtb16	r5, r5
 80200f0:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 80200f4:	ea09 0a07 	and.w	sl, r9, r7
 80200f8:	fa1f fc85 	uxth.w	ip, r5
 80200fc:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8020100:	f841 6c0c 	str.w	r6, [r1, #-12]
 8020104:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 8020108:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 802010c:	f841 ec10 	str.w	lr, [r1, #-16]
 8020110:	f841 5c04 	str.w	r5, [r1, #-4]
 8020114:	f841 cc08 	str.w	ip, [r1, #-8]
 8020118:	428c      	cmp	r4, r1
 802011a:	d1ae      	bne.n	802007a <st_uint8_to16_no_shift+0x1a>
 802011c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8020120:	f1a2 0c04 	sub.w	ip, r2, #4
 8020124:	45b4      	cmp	ip, r6
 8020126:	4430      	add	r0, r6
 8020128:	db38      	blt.n	802019c <st_uint8_to16_no_shift+0x13c>
 802012a:	ebac 0c06 	sub.w	ip, ip, r6
 802012e:	4607      	mov	r7, r0
 8020130:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80201a0 <st_uint8_to16_no_shift+0x140>
 8020134:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8020138:	f10c 0801 	add.w	r8, ip, #1
 802013c:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 8020140:	f857 3b04 	ldr.w	r3, [r7], #4
 8020144:	3408      	adds	r4, #8
 8020146:	fa3f f983 	uxtb16	r9, r3
 802014a:	ea4f 2333 	mov.w	r3, r3, ror #8
 802014e:	fa1f f189 	uxth.w	r1, r9
 8020152:	fa3f f383 	uxtb16	r3, r3
 8020156:	ea03 0a0e 	and.w	sl, r3, lr
 802015a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802015e:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 8020162:	f844 3c08 	str.w	r3, [r4, #-8]
 8020166:	f844 9c04 	str.w	r9, [r4, #-4]
 802016a:	42a5      	cmp	r5, r4
 802016c:	d1e8      	bne.n	8020140 <st_uint8_to16_no_shift+0xe0>
 802016e:	3604      	adds	r6, #4
 8020170:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8020174:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8020178:	42b2      	cmp	r2, r6
 802017a:	dd07      	ble.n	802018c <st_uint8_to16_no_shift+0x12c>
 802017c:	1b92      	subs	r2, r2, r6
 802017e:	4402      	add	r2, r0
 8020180:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020184:	4290      	cmp	r0, r2
 8020186:	f825 3b02 	strh.w	r3, [r5], #2
 802018a:	d1f9      	bne.n	8020180 <st_uint8_to16_no_shift+0x120>
 802018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020190:	2600      	movs	r6, #0
 8020192:	f1a2 0c04 	sub.w	ip, r2, #4
 8020196:	460c      	mov	r4, r1
 8020198:	45b4      	cmp	ip, r6
 802019a:	dac6      	bge.n	802012a <st_uint8_to16_no_shift+0xca>
 802019c:	4625      	mov	r5, r4
 802019e:	e7eb      	b.n	8020178 <st_uint8_to16_no_shift+0x118>
 80201a0:	ffff0000 	.word	0xffff0000

080201a4 <st_uint8_avepool>:
 80201a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a8:	b099      	sub	sp, #100	; 0x64
 80201aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80201ae:	4694      	mov	ip, r2
 80201b0:	ee80 5a20 	vdiv.f32	s10, s0, s1
 80201b4:	f89d 50b0 	ldrb.w	r5, [sp, #176]	; 0xb0
 80201b8:	900a      	str	r0, [sp, #40]	; 0x28
 80201ba:	ee07 5a10 	vmov	s14, r5
 80201be:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80201c2:	f8bd 60a8 	ldrh.w	r6, [sp, #168]	; 0xa8
 80201c6:	eef8 5a47 	vcvt.f32.u32	s11, s14
 80201ca:	9011      	str	r0, [sp, #68]	; 0x44
 80201cc:	f8bd 70a4 	ldrh.w	r7, [sp, #164]	; 0xa4
 80201d0:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 80201d4:	9108      	str	r1, [sp, #32]
 80201d6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80201da:	9616      	str	r6, [sp, #88]	; 0x58
 80201dc:	f8bd b088 	ldrh.w	fp, [sp, #136]	; 0x88
 80201e0:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 80201e4:	9015      	str	r0, [sp, #84]	; 0x54
 80201e6:	970d      	str	r7, [sp, #52]	; 0x34
 80201e8:	f89d 40ac 	ldrb.w	r4, [sp, #172]	; 0xac
 80201ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80201f0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80201f4:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 80201f8:	9310      	str	r3, [sp, #64]	; 0x40
 80201fa:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80201fe:	2e00      	cmp	r6, #0
 8020200:	f000 80b5 	beq.w	802036e <st_uint8_avepool+0x1ca>
 8020204:	eeb4 0a60 	vcmp.f32	s0, s1
 8020208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802020c:	bf0c      	ite	eq
 802020e:	2001      	moveq	r0, #1
 8020210:	2000      	movne	r0, #0
 8020212:	42a5      	cmp	r5, r4
 8020214:	bf14      	ite	ne
 8020216:	2000      	movne	r0, #0
 8020218:	f000 0001 	andeq.w	r0, r0, #1
 802021c:	9006      	str	r0, [sp, #24]
 802021e:	2f00      	cmp	r7, #0
 8020220:	f000 80a5 	beq.w	802036e <st_uint8_avepool+0x1ca>
 8020224:	f1bb 0f00 	cmp.w	fp, #0
 8020228:	f000 80a1 	beq.w	802036e <st_uint8_avepool+0x1ca>
 802022c:	1a89      	subs	r1, r1, r2
 802022e:	4252      	negs	r2, r2
 8020230:	ee07 4a90 	vmov	s15, r4
 8020234:	2000      	movs	r0, #0
 8020236:	b289      	uxth	r1, r1
 8020238:	425b      	negs	r3, r3
 802023a:	b292      	uxth	r2, r2
 802023c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8020240:	9112      	str	r1, [sp, #72]	; 0x48
 8020242:	b29b      	uxth	r3, r3
 8020244:	fb0c f10b 	mul.w	r1, ip, fp
 8020248:	46da      	mov	sl, fp
 802024a:	9200      	str	r2, [sp, #0]
 802024c:	4602      	mov	r2, r0
 802024e:	9013      	str	r0, [sp, #76]	; 0x4c
 8020250:	9114      	str	r1, [sp, #80]	; 0x50
 8020252:	9317      	str	r3, [sp, #92]	; 0x5c
 8020254:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020256:	2000      	movs	r0, #0
 8020258:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802025a:	1e4b      	subs	r3, r1, #1
 802025c:	9d00      	ldr	r5, [sp, #0]
 802025e:	fb04 f202 	mul.w	r2, r4, r2
 8020262:	b209      	sxth	r1, r1
 8020264:	fa0f fb85 	sxth.w	fp, r5
 8020268:	1b5b      	subs	r3, r3, r5
 802026a:	920e      	str	r2, [sp, #56]	; 0x38
 802026c:	9a02      	ldr	r2, [sp, #8]
 802026e:	b29b      	uxth	r3, r3
 8020270:	9107      	str	r1, [sp, #28]
 8020272:	fb02 f20b 	mul.w	r2, r2, fp
 8020276:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020278:	f103 0901 	add.w	r9, r3, #1
 802027c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8020280:	920f      	str	r2, [sp, #60]	; 0x3c
 8020282:	4602      	mov	r2, r0
 8020284:	900c      	str	r0, [sp, #48]	; 0x30
 8020286:	910b      	str	r1, [sp, #44]	; 0x2c
 8020288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802028a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802028c:	fa0f fe81 	sxth.w	lr, r1
 8020290:	441a      	add	r2, r3
 8020292:	460b      	mov	r3, r1
 8020294:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020296:	fb0a f202 	mul.w	r2, sl, r2
 802029a:	185d      	adds	r5, r3, r1
 802029c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802029e:	2100      	movs	r1, #0
 80202a0:	9205      	str	r2, [sp, #20]
 80202a2:	4473      	add	r3, lr
 80202a4:	b22d      	sxth	r5, r5
 80202a6:	9104      	str	r1, [sp, #16]
 80202a8:	fb0a f303 	mul.w	r3, sl, r3
 80202ac:	9103      	str	r1, [sp, #12]
 80202ae:	9309      	str	r3, [sp, #36]	; 0x24
 80202b0:	9b07      	ldr	r3, [sp, #28]
 80202b2:	459b      	cmp	fp, r3
 80202b4:	da77      	bge.n	80203a6 <st_uint8_avepool+0x202>
 80202b6:	9b03      	ldr	r3, [sp, #12]
 80202b8:	2400      	movs	r4, #0
 80202ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202bc:	46a4      	mov	ip, r4
 80202be:	4627      	mov	r7, r4
 80202c0:	189e      	adds	r6, r3, r2
 80202c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202c4:	441e      	add	r6, r3
 80202c6:	45ae      	cmp	lr, r5
 80202c8:	da1a      	bge.n	8020300 <st_uint8_avepool+0x15c>
 80202ca:	9b00      	ldr	r3, [sp, #0]
 80202cc:	9901      	ldr	r1, [sp, #4]
 80202ce:	191a      	adds	r2, r3, r4
 80202d0:	eb0b 0304 	add.w	r3, fp, r4
 80202d4:	43d2      	mvns	r2, r2
 80202d6:	4299      	cmp	r1, r3
 80202d8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80202dc:	dd10      	ble.n	8020300 <st_uint8_avepool+0x15c>
 80202de:	4631      	mov	r1, r6
 80202e0:	4673      	mov	r3, lr
 80202e2:	0418      	lsls	r0, r3, #16
 80202e4:	d407      	bmi.n	80202f6 <st_uint8_avepool+0x152>
 80202e6:	b132      	cbz	r2, 80202f6 <st_uint8_avepool+0x152>
 80202e8:	9802      	ldr	r0, [sp, #8]
 80202ea:	4298      	cmp	r0, r3
 80202ec:	dd03      	ble.n	80202f6 <st_uint8_avepool+0x152>
 80202ee:	7808      	ldrb	r0, [r1, #0]
 80202f0:	f10c 0c01 	add.w	ip, ip, #1
 80202f4:	4407      	add	r7, r0
 80202f6:	3301      	adds	r3, #1
 80202f8:	4451      	add	r1, sl
 80202fa:	b218      	sxth	r0, r3
 80202fc:	4285      	cmp	r5, r0
 80202fe:	dcf0      	bgt.n	80202e2 <st_uint8_avepool+0x13e>
 8020300:	3401      	adds	r4, #1
 8020302:	4446      	add	r6, r8
 8020304:	45a1      	cmp	r9, r4
 8020306:	d1de      	bne.n	80202c6 <st_uint8_avepool+0x122>
 8020308:	9a05      	ldr	r2, [sp, #20]
 802030a:	9b03      	ldr	r3, [sp, #12]
 802030c:	4413      	add	r3, r2
 802030e:	9a06      	ldr	r2, [sp, #24]
 8020310:	2a00      	cmp	r2, #0
 8020312:	d02f      	beq.n	8020374 <st_uint8_avepool+0x1d0>
 8020314:	eb07 076c 	add.w	r7, r7, ip, asr #1
 8020318:	fb97 f7fc 	sdiv	r7, r7, ip
 802031c:	f387 0208 	usat	r2, #8, r7
 8020320:	9908      	ldr	r1, [sp, #32]
 8020322:	54ca      	strb	r2, [r1, r3]
 8020324:	9b04      	ldr	r3, [sp, #16]
 8020326:	3301      	adds	r3, #1
 8020328:	b21b      	sxth	r3, r3
 802032a:	4553      	cmp	r3, sl
 802032c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8020330:	dbbe      	blt.n	80202b0 <st_uint8_avepool+0x10c>
 8020332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020336:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020338:	3201      	adds	r2, #1
 802033a:	440b      	add	r3, r1
 802033c:	b212      	sxth	r2, r2
 802033e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020340:	b29b      	uxth	r3, r3
 8020342:	920c      	str	r2, [sp, #48]	; 0x30
 8020344:	428a      	cmp	r2, r1
 8020346:	930b      	str	r3, [sp, #44]	; 0x2c
 8020348:	db9e      	blt.n	8020288 <st_uint8_avepool+0xe4>
 802034a:	9b00      	ldr	r3, [sp, #0]
 802034c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802034e:	4619      	mov	r1, r3
 8020350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020352:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020354:	4403      	add	r3, r0
 8020356:	4401      	add	r1, r0
 8020358:	3201      	adds	r2, #1
 802035a:	b29b      	uxth	r3, r3
 802035c:	b212      	sxth	r2, r2
 802035e:	9312      	str	r3, [sp, #72]	; 0x48
 8020360:	b289      	uxth	r1, r1
 8020362:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020364:	9213      	str	r2, [sp, #76]	; 0x4c
 8020366:	4293      	cmp	r3, r2
 8020368:	9100      	str	r1, [sp, #0]
 802036a:	f73f af73 	bgt.w	8020254 <st_uint8_avepool+0xb0>
 802036e:	b019      	add	sp, #100	; 0x64
 8020370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020374:	ee07 7a90 	vmov	s15, r7
 8020378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802037c:	ee07 ca90 	vmov	s15, ip
 8020380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020384:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020388:	eeb0 7a65 	vmov.f32	s14, s11
 802038c:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8020390:	eea7 7a85 	vfma.f32	s14, s15, s10
 8020394:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8020398:	ee17 2a90 	vmov	r2, s15
 802039c:	f382 0208 	usat	r2, #8, r2
 80203a0:	9908      	ldr	r1, [sp, #32]
 80203a2:	54ca      	strb	r2, [r1, r3]
 80203a4:	e7be      	b.n	8020324 <st_uint8_avepool+0x180>
 80203a6:	f04f 0c00 	mov.w	ip, #0
 80203aa:	4667      	mov	r7, ip
 80203ac:	e7ac      	b.n	8020308 <st_uint8_avepool+0x164>
 80203ae:	bf00      	nop

080203b0 <st_dsp_arm_copy_q7>:
 80203b0:	b470      	push	{r4, r5, r6}
 80203b2:	0896      	lsrs	r6, r2, #2
 80203b4:	d01b      	beq.n	80203ee <st_dsp_arm_copy_q7+0x3e>
 80203b6:	00b6      	lsls	r6, r6, #2
 80203b8:	460b      	mov	r3, r1
 80203ba:	1985      	adds	r5, r0, r6
 80203bc:	f850 4b04 	ldr.w	r4, [r0], #4
 80203c0:	42a8      	cmp	r0, r5
 80203c2:	f843 4b04 	str.w	r4, [r3], #4
 80203c6:	d1f9      	bne.n	80203bc <st_dsp_arm_copy_q7+0xc>
 80203c8:	4431      	add	r1, r6
 80203ca:	f012 0203 	ands.w	r2, r2, #3
 80203ce:	d00c      	beq.n	80203ea <st_dsp_arm_copy_q7+0x3a>
 80203d0:	f995 3000 	ldrsb.w	r3, [r5]
 80203d4:	2a01      	cmp	r2, #1
 80203d6:	700b      	strb	r3, [r1, #0]
 80203d8:	d007      	beq.n	80203ea <st_dsp_arm_copy_q7+0x3a>
 80203da:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80203de:	2a02      	cmp	r2, #2
 80203e0:	704b      	strb	r3, [r1, #1]
 80203e2:	d002      	beq.n	80203ea <st_dsp_arm_copy_q7+0x3a>
 80203e4:	f995 3002 	ldrsb.w	r3, [r5, #2]
 80203e8:	708b      	strb	r3, [r1, #2]
 80203ea:	bc70      	pop	{r4, r5, r6}
 80203ec:	4770      	bx	lr
 80203ee:	4605      	mov	r5, r0
 80203f0:	e7eb      	b.n	80203ca <st_dsp_arm_copy_q7+0x1a>
 80203f2:	bf00      	nop

080203f4 <st_dsp_arm_fill_q15>:
 80203f4:	b470      	push	{r4, r5, r6}
 80203f6:	b285      	uxth	r5, r0
 80203f8:	0896      	lsrs	r6, r2, #2
 80203fa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80203fe:	d009      	beq.n	8020414 <st_dsp_arm_fill_q15+0x20>
 8020400:	460b      	mov	r3, r1
 8020402:	4634      	mov	r4, r6
 8020404:	3c01      	subs	r4, #1
 8020406:	601d      	str	r5, [r3, #0]
 8020408:	605d      	str	r5, [r3, #4]
 802040a:	f103 0308 	add.w	r3, r3, #8
 802040e:	d1f9      	bne.n	8020404 <st_dsp_arm_fill_q15+0x10>
 8020410:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020414:	f012 0203 	ands.w	r2, r2, #3
 8020418:	d006      	beq.n	8020428 <st_dsp_arm_fill_q15+0x34>
 802041a:	2a01      	cmp	r2, #1
 802041c:	8008      	strh	r0, [r1, #0]
 802041e:	d003      	beq.n	8020428 <st_dsp_arm_fill_q15+0x34>
 8020420:	2a02      	cmp	r2, #2
 8020422:	8048      	strh	r0, [r1, #2]
 8020424:	bf18      	it	ne
 8020426:	8088      	strhne	r0, [r1, #4]
 8020428:	bc70      	pop	{r4, r5, r6}
 802042a:	4770      	bx	lr

0802042c <st_dsp_arm_float_to_q15>:
 802042c:	b4f0      	push	{r4, r5, r6, r7}
 802042e:	0897      	lsrs	r7, r2, #2
 8020430:	d06b      	beq.n	802050a <st_dsp_arm_float_to_q15+0xde>
 8020432:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8020436:	f100 0510 	add.w	r5, r0, #16
 802043a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 802043e:	f101 0408 	add.w	r4, r1, #8
 8020442:	463e      	mov	r6, r7
 8020444:	ed9f 6a55 	vldr	s12, [pc, #340]	; 802059c <st_dsp_arm_float_to_q15+0x170>
 8020448:	e00b      	b.n	8020462 <st_dsp_arm_float_to_q15+0x36>
 802044a:	ee17 3a10 	vmov	r3, s14
 802044e:	f303 030f 	ssat	r3, #16, r3
 8020452:	3e01      	subs	r6, #1
 8020454:	f824 3c02 	strh.w	r3, [r4, #-2]
 8020458:	f105 0510 	add.w	r5, r5, #16
 802045c:	f104 0408 	add.w	r4, r4, #8
 8020460:	d04f      	beq.n	8020502 <st_dsp_arm_float_to_q15+0xd6>
 8020462:	ed55 7a04 	vldr	s15, [r5, #-16]
 8020466:	ee27 7a86 	vmul.f32	s14, s15, s12
 802046a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020472:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020476:	ee77 7a87 	vadd.f32	s15, s15, s14
 802047a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802047e:	ee17 3a90 	vmov	r3, s15
 8020482:	f303 030f 	ssat	r3, #16, r3
 8020486:	f824 3c08 	strh.w	r3, [r4, #-8]
 802048a:	ed55 7a03 	vldr	s15, [r5, #-12]
 802048e:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020492:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802049a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802049e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80204a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80204a6:	ee17 3a90 	vmov	r3, s15
 80204aa:	f303 030f 	ssat	r3, #16, r3
 80204ae:	f824 3c06 	strh.w	r3, [r4, #-6]
 80204b2:	ed55 7a02 	vldr	s15, [r5, #-8]
 80204b6:	ee27 7a86 	vmul.f32	s14, s15, s12
 80204ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80204be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204c2:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80204c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80204ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80204ce:	ee17 3a90 	vmov	r3, s15
 80204d2:	f303 030f 	ssat	r3, #16, r3
 80204d6:	f824 3c04 	strh.w	r3, [r4, #-4]
 80204da:	ed55 7a01 	vldr	s15, [r5, #-4]
 80204de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80204e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80204e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80204ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80204f2:	dcaa      	bgt.n	802044a <st_dsp_arm_float_to_q15+0x1e>
 80204f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80204f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80204fc:	ee17 3a90 	vmov	r3, s15
 8020500:	e7a5      	b.n	802044e <st_dsp_arm_float_to_q15+0x22>
 8020502:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8020506:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 802050a:	f012 0203 	ands.w	r2, r2, #3
 802050e:	d042      	beq.n	8020596 <st_dsp_arm_float_to_q15+0x16a>
 8020510:	edd0 7a00 	vldr	s15, [r0]
 8020514:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020518:	eddf 5a20 	vldr	s11, [pc, #128]	; 802059c <st_dsp_arm_float_to_q15+0x170>
 802051c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8020520:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8020524:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8020528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802052c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8020530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020538:	ee17 3a90 	vmov	r3, s15
 802053c:	f303 030f 	ssat	r3, #16, r3
 8020540:	2a01      	cmp	r2, #1
 8020542:	800b      	strh	r3, [r1, #0]
 8020544:	d027      	beq.n	8020596 <st_dsp_arm_float_to_q15+0x16a>
 8020546:	edd0 7a01 	vldr	s15, [r0, #4]
 802054a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 802054e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020556:	fe77 6a06 	vselgt.f32	s13, s14, s12
 802055a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802055e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020562:	ee17 3a90 	vmov	r3, s15
 8020566:	f303 030f 	ssat	r3, #16, r3
 802056a:	2a02      	cmp	r2, #2
 802056c:	804b      	strh	r3, [r1, #2]
 802056e:	d012      	beq.n	8020596 <st_dsp_arm_float_to_q15+0x16a>
 8020570:	edd0 7a02 	vldr	s15, [r0, #8]
 8020574:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8020578:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 802057c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020580:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8020584:	ee37 7a25 	vadd.f32	s14, s14, s11
 8020588:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802058c:	ee17 3a10 	vmov	r3, s14
 8020590:	f303 030f 	ssat	r3, #16, r3
 8020594:	808b      	strh	r3, [r1, #4]
 8020596:	bcf0      	pop	{r4, r5, r6, r7}
 8020598:	4770      	bx	lr
 802059a:	bf00      	nop
 802059c:	47000000 	.word	0x47000000

080205a0 <st_dsp_arm_float_to_q7>:
 80205a0:	b4f0      	push	{r4, r5, r6, r7}
 80205a2:	0897      	lsrs	r7, r2, #2
 80205a4:	d066      	beq.n	8020674 <st_dsp_arm_float_to_q7+0xd4>
 80205a6:	1d0c      	adds	r4, r1, #4
 80205a8:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80205ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80205b0:	f100 0510 	add.w	r5, r0, #16
 80205b4:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80205b8:	eb04 060c 	add.w	r6, r4, ip
 80205bc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 802072c <st_dsp_arm_float_to_q7+0x18c>
 80205c0:	ed55 7a04 	vldr	s15, [r5, #-16]
 80205c4:	ee27 7a86 	vmul.f32	s14, s15, s12
 80205c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80205cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205d0:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80205d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80205d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80205dc:	ee17 3a90 	vmov	r3, s15
 80205e0:	b21b      	sxth	r3, r3
 80205e2:	f303 0307 	ssat	r3, #8, r3
 80205e6:	f804 3c04 	strb.w	r3, [r4, #-4]
 80205ea:	ed55 7a03 	vldr	s15, [r5, #-12]
 80205ee:	ee27 7a86 	vmul.f32	s14, s15, s12
 80205f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80205f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205fa:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80205fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020606:	ee17 3a90 	vmov	r3, s15
 802060a:	b21b      	sxth	r3, r3
 802060c:	f303 0307 	ssat	r3, #8, r3
 8020610:	f804 3c03 	strb.w	r3, [r4, #-3]
 8020614:	ed55 7a02 	vldr	s15, [r5, #-8]
 8020618:	ee27 7a86 	vmul.f32	s14, s15, s12
 802061c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020624:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020628:	ee77 7a87 	vadd.f32	s15, s15, s14
 802062c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020630:	ee17 3a90 	vmov	r3, s15
 8020634:	b21b      	sxth	r3, r3
 8020636:	f303 0307 	ssat	r3, #8, r3
 802063a:	f804 3c02 	strb.w	r3, [r4, #-2]
 802063e:	ed55 7a01 	vldr	s15, [r5, #-4]
 8020642:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020646:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802064a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802064e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020656:	ee17 3a10 	vmov	r3, s14
 802065a:	b21b      	sxth	r3, r3
 802065c:	dd55      	ble.n	802070a <st_dsp_arm_float_to_q7+0x16a>
 802065e:	f303 0307 	ssat	r3, #8, r3
 8020662:	f804 3c01 	strb.w	r3, [r4, #-1]
 8020666:	3404      	adds	r4, #4
 8020668:	3510      	adds	r5, #16
 802066a:	42a6      	cmp	r6, r4
 802066c:	d1a8      	bne.n	80205c0 <st_dsp_arm_float_to_q7+0x20>
 802066e:	4461      	add	r1, ip
 8020670:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8020674:	f012 0203 	ands.w	r2, r2, #3
 8020678:	d045      	beq.n	8020706 <st_dsp_arm_float_to_q7+0x166>
 802067a:	edd0 7a00 	vldr	s15, [r0]
 802067e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020682:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 802072c <st_dsp_arm_float_to_q7+0x18c>
 8020686:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 802068a:	ee67 6a85 	vmul.f32	s13, s15, s10
 802068e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8020692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020696:	fe77 7a25 	vselgt.f32	s15, s14, s11
 802069a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802069e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80206a2:	ee17 3a90 	vmov	r3, s15
 80206a6:	b21b      	sxth	r3, r3
 80206a8:	f303 0307 	ssat	r3, #8, r3
 80206ac:	2a01      	cmp	r2, #1
 80206ae:	700b      	strb	r3, [r1, #0]
 80206b0:	d029      	beq.n	8020706 <st_dsp_arm_float_to_q7+0x166>
 80206b2:	edd0 6a01 	vldr	s13, [r0, #4]
 80206b6:	ee26 6a85 	vmul.f32	s12, s13, s10
 80206ba:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80206be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206c2:	fe77 6a25 	vselgt.f32	s13, s14, s11
 80206c6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80206ca:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80206ce:	ee16 3a90 	vmov	r3, s13
 80206d2:	b21b      	sxth	r3, r3
 80206d4:	f303 0307 	ssat	r3, #8, r3
 80206d8:	2a02      	cmp	r2, #2
 80206da:	704b      	strb	r3, [r1, #1]
 80206dc:	d013      	beq.n	8020706 <st_dsp_arm_float_to_q7+0x166>
 80206de:	edd0 7a02 	vldr	s15, [r0, #8]
 80206e2:	ee27 5a85 	vmul.f32	s10, s15, s10
 80206e6:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80206ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206ee:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80206f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80206f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80206fa:	ee17 3a90 	vmov	r3, s15
 80206fe:	b21b      	sxth	r3, r3
 8020700:	f303 0307 	ssat	r3, #8, r3
 8020704:	708b      	strb	r3, [r1, #2]
 8020706:	bcf0      	pop	{r4, r5, r6, r7}
 8020708:	4770      	bx	lr
 802070a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802070e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020712:	ee17 3a90 	vmov	r3, s15
 8020716:	b21b      	sxth	r3, r3
 8020718:	f303 0307 	ssat	r3, #8, r3
 802071c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8020720:	3404      	adds	r4, #4
 8020722:	3510      	adds	r5, #16
 8020724:	42b4      	cmp	r4, r6
 8020726:	f47f af4b 	bne.w	80205c0 <st_dsp_arm_float_to_q7+0x20>
 802072a:	e7a0      	b.n	802066e <st_dsp_arm_float_to_q7+0xce>
 802072c:	43000000 	.word	0x43000000

08020730 <st_dsp_arm_q15_to_float>:
 8020730:	b470      	push	{r4, r5, r6}
 8020732:	0896      	lsrs	r6, r2, #2
 8020734:	d038      	beq.n	80207a8 <st_dsp_arm_q15_to_float+0x78>
 8020736:	f100 0408 	add.w	r4, r0, #8
 802073a:	f101 0310 	add.w	r3, r1, #16
 802073e:	4635      	mov	r5, r6
 8020740:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80207fc <st_dsp_arm_q15_to_float+0xcc>
 8020744:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8020748:	3d01      	subs	r5, #1
 802074a:	f104 0408 	add.w	r4, r4, #8
 802074e:	f103 0310 	add.w	r3, r3, #16
 8020752:	ee07 ca90 	vmov	s15, ip
 8020756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802075a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802075e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8020762:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8020766:	ee07 ca90 	vmov	s15, ip
 802076a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802076e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020772:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8020776:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 802077a:	ee07 ca90 	vmov	s15, ip
 802077e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020786:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 802078a:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 802078e:	ee07 ca90 	vmov	s15, ip
 8020792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020796:	ee67 7a87 	vmul.f32	s15, s15, s14
 802079a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 802079e:	d1d1      	bne.n	8020744 <st_dsp_arm_q15_to_float+0x14>
 80207a0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80207a4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80207a8:	f012 0203 	ands.w	r2, r2, #3
 80207ac:	d023      	beq.n	80207f6 <st_dsp_arm_q15_to_float+0xc6>
 80207ae:	f9b0 3000 	ldrsh.w	r3, [r0]
 80207b2:	2a01      	cmp	r2, #1
 80207b4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80207fc <st_dsp_arm_q15_to_float+0xcc>
 80207b8:	ee07 3a90 	vmov	s15, r3
 80207bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80207c4:	edc1 7a00 	vstr	s15, [r1]
 80207c8:	d015      	beq.n	80207f6 <st_dsp_arm_q15_to_float+0xc6>
 80207ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80207ce:	2a02      	cmp	r2, #2
 80207d0:	ee07 3a90 	vmov	s15, r3
 80207d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80207dc:	edc1 7a01 	vstr	s15, [r1, #4]
 80207e0:	d009      	beq.n	80207f6 <st_dsp_arm_q15_to_float+0xc6>
 80207e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80207e6:	ee07 3a90 	vmov	s15, r3
 80207ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80207ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80207f2:	edc1 7a02 	vstr	s15, [r1, #8]
 80207f6:	bc70      	pop	{r4, r5, r6}
 80207f8:	4770      	bx	lr
 80207fa:	bf00      	nop
 80207fc:	38000000 	.word	0x38000000

08020800 <st_dsp_arm_q7_to_float>:
 8020800:	b470      	push	{r4, r5, r6}
 8020802:	0895      	lsrs	r5, r2, #2
 8020804:	d036      	beq.n	8020874 <st_dsp_arm_q7_to_float+0x74>
 8020806:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 802080a:	f101 0310 	add.w	r3, r1, #16
 802080e:	3004      	adds	r0, #4
 8020810:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80208c8 <st_dsp_arm_q7_to_float+0xc8>
 8020814:	1d34      	adds	r4, r6, #4
 8020816:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 802081a:	3004      	adds	r0, #4
 802081c:	3310      	adds	r3, #16
 802081e:	ee07 ca90 	vmov	s15, ip
 8020822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020826:	ee67 7a87 	vmul.f32	s15, s15, s14
 802082a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 802082e:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 8020832:	ee07 ca90 	vmov	s15, ip
 8020836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802083a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802083e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8020842:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 8020846:	ee07 ca90 	vmov	s15, ip
 802084a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020852:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8020856:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 802085a:	42a0      	cmp	r0, r4
 802085c:	ee07 ca90 	vmov	s15, ip
 8020860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020868:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 802086c:	d1d3      	bne.n	8020816 <st_dsp_arm_q7_to_float+0x16>
 802086e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8020872:	4630      	mov	r0, r6
 8020874:	f012 0203 	ands.w	r2, r2, #3
 8020878:	d023      	beq.n	80208c2 <st_dsp_arm_q7_to_float+0xc2>
 802087a:	f990 3000 	ldrsb.w	r3, [r0]
 802087e:	2a01      	cmp	r2, #1
 8020880:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80208c8 <st_dsp_arm_q7_to_float+0xc8>
 8020884:	ee07 3a90 	vmov	s15, r3
 8020888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802088c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020890:	edc1 7a00 	vstr	s15, [r1]
 8020894:	d015      	beq.n	80208c2 <st_dsp_arm_q7_to_float+0xc2>
 8020896:	f990 3001 	ldrsb.w	r3, [r0, #1]
 802089a:	2a02      	cmp	r2, #2
 802089c:	ee07 3a90 	vmov	s15, r3
 80208a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80208a8:	edc1 7a01 	vstr	s15, [r1, #4]
 80208ac:	d009      	beq.n	80208c2 <st_dsp_arm_q7_to_float+0xc2>
 80208ae:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80208b2:	ee07 3a90 	vmov	s15, r3
 80208b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80208be:	edc1 7a02 	vstr	s15, [r1, #8]
 80208c2:	bc70      	pop	{r4, r5, r6}
 80208c4:	4770      	bx	lr
 80208c6:	bf00      	nop
 80208c8:	3c000000 	.word	0x3c000000

080208cc <ai_version_get>:
 80208cc:	0212      	lsls	r2, r2, #8
 80208ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80208d2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80208d6:	4770      	bx	lr

080208d8 <ai_platform_version_get>:
 80208d8:	0e01      	lsrs	r1, r0, #24
 80208da:	2300      	movs	r3, #0
 80208dc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80208e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80208e4:	f361 0307 	bfi	r3, r1, #0, #8
 80208e8:	b082      	sub	sp, #8
 80208ea:	f362 230f 	bfi	r3, r2, #8, #8
 80208ee:	f360 4317 	bfi	r3, r0, #16, #8
 80208f2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80208f6:	b002      	add	sp, #8
 80208f8:	4770      	bx	lr
 80208fa:	bf00      	nop

080208fc <get_tensor_byte_size>:
 80208fc:	b410      	push	{r4}
 80208fe:	6984      	ldr	r4, [r0, #24]
 8020900:	4b08      	ldr	r3, [pc, #32]	; (8020924 <get_tensor_byte_size+0x28>)
 8020902:	6824      	ldr	r4, [r4, #0]
 8020904:	68c1      	ldr	r1, [r0, #12]
 8020906:	4a08      	ldr	r2, [pc, #32]	; (8020928 <get_tensor_byte_size+0x2c>)
 8020908:	4023      	ands	r3, r4
 802090a:	6940      	ldr	r0, [r0, #20]
 802090c:	68c9      	ldr	r1, [r1, #12]
 802090e:	4293      	cmp	r3, r2
 8020910:	68c0      	ldr	r0, [r0, #12]
 8020912:	fb00 f001 	mul.w	r0, r0, r1
 8020916:	d101      	bne.n	802091c <get_tensor_byte_size+0x20>
 8020918:	3007      	adds	r0, #7
 802091a:	08c0      	lsrs	r0, r0, #3
 802091c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020920:	4770      	bx	lr
 8020922:	bf00      	nop
 8020924:	017fffff 	.word	0x017fffff
 8020928:	000400c0 	.word	0x000400c0

0802092c <ai_array_to_buffer_fmt>:
 802092c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8020930:	2b02      	cmp	r3, #2
 8020932:	d036      	beq.n	80209a2 <ai_array_to_buffer_fmt+0x76>
 8020934:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8020938:	4a20      	ldr	r2, [pc, #128]	; (80209bc <ai_array_to_buffer_fmt+0x90>)
 802093a:	4293      	cmp	r3, r2
 802093c:	d00f      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 802093e:	dd12      	ble.n	8020966 <ai_array_to_buffer_fmt+0x3a>
 8020940:	4a1f      	ldr	r2, [pc, #124]	; (80209c0 <ai_array_to_buffer_fmt+0x94>)
 8020942:	4293      	cmp	r3, r2
 8020944:	d00b      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 8020946:	dd1e      	ble.n	8020986 <ai_array_to_buffer_fmt+0x5a>
 8020948:	4a1e      	ldr	r2, [pc, #120]	; (80209c4 <ai_array_to_buffer_fmt+0x98>)
 802094a:	4293      	cmp	r3, r2
 802094c:	d007      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 802094e:	dd30      	ble.n	80209b2 <ai_array_to_buffer_fmt+0x86>
 8020950:	4a1d      	ldr	r2, [pc, #116]	; (80209c8 <ai_array_to_buffer_fmt+0x9c>)
 8020952:	4293      	cmp	r3, r2
 8020954:	d003      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 8020956:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 802095a:	4293      	cmp	r3, r2
 802095c:	d11f      	bne.n	802099e <ai_array_to_buffer_fmt+0x72>
 802095e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8020962:	4318      	orrs	r0, r3
 8020964:	4770      	bx	lr
 8020966:	4a19      	ldr	r2, [pc, #100]	; (80209cc <ai_array_to_buffer_fmt+0xa0>)
 8020968:	4293      	cmp	r3, r2
 802096a:	d0f8      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 802096c:	dd0b      	ble.n	8020986 <ai_array_to_buffer_fmt+0x5a>
 802096e:	4a18      	ldr	r2, [pc, #96]	; (80209d0 <ai_array_to_buffer_fmt+0xa4>)
 8020970:	4293      	cmp	r3, r2
 8020972:	d0f4      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 8020974:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8020978:	4293      	cmp	r3, r2
 802097a:	d0f0      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 802097c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8020980:	4293      	cmp	r3, r2
 8020982:	d10c      	bne.n	802099e <ai_array_to_buffer_fmt+0x72>
 8020984:	e7eb      	b.n	802095e <ai_array_to_buffer_fmt+0x32>
 8020986:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 802098a:	4293      	cmp	r3, r2
 802098c:	d0e7      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 802098e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8020992:	4293      	cmp	r3, r2
 8020994:	d0e3      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 8020996:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 802099a:	4293      	cmp	r3, r2
 802099c:	d0df      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 802099e:	2340      	movs	r3, #64	; 0x40
 80209a0:	e7dd      	b.n	802095e <ai_array_to_buffer_fmt+0x32>
 80209a2:	4b0c      	ldr	r3, [pc, #48]	; (80209d4 <ai_array_to_buffer_fmt+0xa8>)
 80209a4:	4003      	ands	r3, r0
 80209a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80209aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80209ae:	4318      	orrs	r0, r3
 80209b0:	4770      	bx	lr
 80209b2:	3a0f      	subs	r2, #15
 80209b4:	4293      	cmp	r3, r2
 80209b6:	d0d2      	beq.n	802095e <ai_array_to_buffer_fmt+0x32>
 80209b8:	e7f1      	b.n	802099e <ai_array_to_buffer_fmt+0x72>
 80209ba:	bf00      	nop
 80209bc:	00060440 	.word	0x00060440
 80209c0:	00840447 	.word	0x00840447
 80209c4:	0084084f 	.word	0x0084084f
 80209c8:	00841040 	.word	0x00841040
 80209cc:	00040447 	.word	0x00040447
 80209d0:	0004084f 	.word	0x0004084f
 80209d4:	00803fff 	.word	0x00803fff

080209d8 <ai_array_get_data_byte_size>:
 80209d8:	b161      	cbz	r1, 80209f4 <ai_array_get_data_byte_size+0x1c>
 80209da:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80209de:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80209e2:	fb01 f103 	mul.w	r1, r1, r3
 80209e6:	3107      	adds	r1, #7
 80209e8:	f021 0107 	bic.w	r1, r1, #7
 80209ec:	40c1      	lsrs	r1, r0
 80209ee:	3107      	adds	r1, #7
 80209f0:	08c8      	lsrs	r0, r1, #3
 80209f2:	4770      	bx	lr
 80209f4:	4608      	mov	r0, r1
 80209f6:	4770      	bx	lr

080209f8 <core_tensor_clone>:
 80209f8:	680b      	ldr	r3, [r1, #0]
 80209fa:	6882      	ldr	r2, [r0, #8]
 80209fc:	6003      	str	r3, [r0, #0]
 80209fe:	684b      	ldr	r3, [r1, #4]
 8020a00:	6043      	str	r3, [r0, #4]
 8020a02:	698b      	ldr	r3, [r1, #24]
 8020a04:	6183      	str	r3, [r0, #24]
 8020a06:	688b      	ldr	r3, [r1, #8]
 8020a08:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8020a0c:	f363 221f 	bfi	r2, r3, #8, #24
 8020a10:	b410      	push	{r4}
 8020a12:	6082      	str	r2, [r0, #8]
 8020a14:	b15b      	cbz	r3, 8020a2e <core_tensor_clone+0x36>
 8020a16:	2300      	movs	r3, #0
 8020a18:	68cc      	ldr	r4, [r1, #12]
 8020a1a:	68c2      	ldr	r2, [r0, #12]
 8020a1c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8020a20:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8020a24:	3301      	adds	r3, #1
 8020a26:	6882      	ldr	r2, [r0, #8]
 8020a28:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8020a2c:	d3f4      	bcc.n	8020a18 <core_tensor_clone+0x20>
 8020a2e:	690b      	ldr	r3, [r1, #16]
 8020a30:	6902      	ldr	r2, [r0, #16]
 8020a32:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8020a36:	f363 221f 	bfi	r2, r3, #8, #24
 8020a3a:	6102      	str	r2, [r0, #16]
 8020a3c:	b15b      	cbz	r3, 8020a56 <core_tensor_clone+0x5e>
 8020a3e:	2300      	movs	r3, #0
 8020a40:	694c      	ldr	r4, [r1, #20]
 8020a42:	6942      	ldr	r2, [r0, #20]
 8020a44:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8020a48:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8020a4c:	3301      	adds	r3, #1
 8020a4e:	6902      	ldr	r2, [r0, #16]
 8020a50:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8020a54:	d3f4      	bcc.n	8020a40 <core_tensor_clone+0x48>
 8020a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a5a:	4770      	bx	lr

08020a5c <core_array_clone>:
 8020a5c:	b410      	push	{r4}
 8020a5e:	4604      	mov	r4, r0
 8020a60:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8020a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8020a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a6a:	4770      	bx	lr

08020a6c <__libc_init_array>:
 8020a6c:	b570      	push	{r4, r5, r6, lr}
 8020a6e:	4d0d      	ldr	r5, [pc, #52]	; (8020aa4 <__libc_init_array+0x38>)
 8020a70:	4c0d      	ldr	r4, [pc, #52]	; (8020aa8 <__libc_init_array+0x3c>)
 8020a72:	1b64      	subs	r4, r4, r5
 8020a74:	10a4      	asrs	r4, r4, #2
 8020a76:	2600      	movs	r6, #0
 8020a78:	42a6      	cmp	r6, r4
 8020a7a:	d109      	bne.n	8020a90 <__libc_init_array+0x24>
 8020a7c:	4d0b      	ldr	r5, [pc, #44]	; (8020aac <__libc_init_array+0x40>)
 8020a7e:	4c0c      	ldr	r4, [pc, #48]	; (8020ab0 <__libc_init_array+0x44>)
 8020a80:	f003 fa50 	bl	8023f24 <_init>
 8020a84:	1b64      	subs	r4, r4, r5
 8020a86:	10a4      	asrs	r4, r4, #2
 8020a88:	2600      	movs	r6, #0
 8020a8a:	42a6      	cmp	r6, r4
 8020a8c:	d105      	bne.n	8020a9a <__libc_init_array+0x2e>
 8020a8e:	bd70      	pop	{r4, r5, r6, pc}
 8020a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a94:	4798      	blx	r3
 8020a96:	3601      	adds	r6, #1
 8020a98:	e7ee      	b.n	8020a78 <__libc_init_array+0xc>
 8020a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8020a9e:	4798      	blx	r3
 8020aa0:	3601      	adds	r6, #1
 8020aa2:	e7f2      	b.n	8020a8a <__libc_init_array+0x1e>
 8020aa4:	0804a8e0 	.word	0x0804a8e0
 8020aa8:	0804a8e0 	.word	0x0804a8e0
 8020aac:	0804a8e0 	.word	0x0804a8e0
 8020ab0:	0804a8e4 	.word	0x0804a8e4

08020ab4 <malloc>:
 8020ab4:	4b02      	ldr	r3, [pc, #8]	; (8020ac0 <malloc+0xc>)
 8020ab6:	4601      	mov	r1, r0
 8020ab8:	6818      	ldr	r0, [r3, #0]
 8020aba:	f000 b88b 	b.w	8020bd4 <_malloc_r>
 8020abe:	bf00      	nop
 8020ac0:	24003050 	.word	0x24003050

08020ac4 <free>:
 8020ac4:	4b02      	ldr	r3, [pc, #8]	; (8020ad0 <free+0xc>)
 8020ac6:	4601      	mov	r1, r0
 8020ac8:	6818      	ldr	r0, [r3, #0]
 8020aca:	f000 b833 	b.w	8020b34 <_free_r>
 8020ace:	bf00      	nop
 8020ad0:	24003050 	.word	0x24003050

08020ad4 <memcpy>:
 8020ad4:	440a      	add	r2, r1
 8020ad6:	4291      	cmp	r1, r2
 8020ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8020adc:	d100      	bne.n	8020ae0 <memcpy+0xc>
 8020ade:	4770      	bx	lr
 8020ae0:	b510      	push	{r4, lr}
 8020ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020aea:	4291      	cmp	r1, r2
 8020aec:	d1f9      	bne.n	8020ae2 <memcpy+0xe>
 8020aee:	bd10      	pop	{r4, pc}

08020af0 <memmove>:
 8020af0:	4288      	cmp	r0, r1
 8020af2:	b510      	push	{r4, lr}
 8020af4:	eb01 0402 	add.w	r4, r1, r2
 8020af8:	d902      	bls.n	8020b00 <memmove+0x10>
 8020afa:	4284      	cmp	r4, r0
 8020afc:	4623      	mov	r3, r4
 8020afe:	d807      	bhi.n	8020b10 <memmove+0x20>
 8020b00:	1e43      	subs	r3, r0, #1
 8020b02:	42a1      	cmp	r1, r4
 8020b04:	d008      	beq.n	8020b18 <memmove+0x28>
 8020b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020b0e:	e7f8      	b.n	8020b02 <memmove+0x12>
 8020b10:	4402      	add	r2, r0
 8020b12:	4601      	mov	r1, r0
 8020b14:	428a      	cmp	r2, r1
 8020b16:	d100      	bne.n	8020b1a <memmove+0x2a>
 8020b18:	bd10      	pop	{r4, pc}
 8020b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020b22:	e7f7      	b.n	8020b14 <memmove+0x24>

08020b24 <memset>:
 8020b24:	4402      	add	r2, r0
 8020b26:	4603      	mov	r3, r0
 8020b28:	4293      	cmp	r3, r2
 8020b2a:	d100      	bne.n	8020b2e <memset+0xa>
 8020b2c:	4770      	bx	lr
 8020b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8020b32:	e7f9      	b.n	8020b28 <memset+0x4>

08020b34 <_free_r>:
 8020b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020b36:	2900      	cmp	r1, #0
 8020b38:	d048      	beq.n	8020bcc <_free_r+0x98>
 8020b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b3e:	9001      	str	r0, [sp, #4]
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	f1a1 0404 	sub.w	r4, r1, #4
 8020b46:	bfb8      	it	lt
 8020b48:	18e4      	addlt	r4, r4, r3
 8020b4a:	f001 fb67 	bl	802221c <__malloc_lock>
 8020b4e:	4a20      	ldr	r2, [pc, #128]	; (8020bd0 <_free_r+0x9c>)
 8020b50:	9801      	ldr	r0, [sp, #4]
 8020b52:	6813      	ldr	r3, [r2, #0]
 8020b54:	4615      	mov	r5, r2
 8020b56:	b933      	cbnz	r3, 8020b66 <_free_r+0x32>
 8020b58:	6063      	str	r3, [r4, #4]
 8020b5a:	6014      	str	r4, [r2, #0]
 8020b5c:	b003      	add	sp, #12
 8020b5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020b62:	f001 bb61 	b.w	8022228 <__malloc_unlock>
 8020b66:	42a3      	cmp	r3, r4
 8020b68:	d90b      	bls.n	8020b82 <_free_r+0x4e>
 8020b6a:	6821      	ldr	r1, [r4, #0]
 8020b6c:	1862      	adds	r2, r4, r1
 8020b6e:	4293      	cmp	r3, r2
 8020b70:	bf04      	itt	eq
 8020b72:	681a      	ldreq	r2, [r3, #0]
 8020b74:	685b      	ldreq	r3, [r3, #4]
 8020b76:	6063      	str	r3, [r4, #4]
 8020b78:	bf04      	itt	eq
 8020b7a:	1852      	addeq	r2, r2, r1
 8020b7c:	6022      	streq	r2, [r4, #0]
 8020b7e:	602c      	str	r4, [r5, #0]
 8020b80:	e7ec      	b.n	8020b5c <_free_r+0x28>
 8020b82:	461a      	mov	r2, r3
 8020b84:	685b      	ldr	r3, [r3, #4]
 8020b86:	b10b      	cbz	r3, 8020b8c <_free_r+0x58>
 8020b88:	42a3      	cmp	r3, r4
 8020b8a:	d9fa      	bls.n	8020b82 <_free_r+0x4e>
 8020b8c:	6811      	ldr	r1, [r2, #0]
 8020b8e:	1855      	adds	r5, r2, r1
 8020b90:	42a5      	cmp	r5, r4
 8020b92:	d10b      	bne.n	8020bac <_free_r+0x78>
 8020b94:	6824      	ldr	r4, [r4, #0]
 8020b96:	4421      	add	r1, r4
 8020b98:	1854      	adds	r4, r2, r1
 8020b9a:	42a3      	cmp	r3, r4
 8020b9c:	6011      	str	r1, [r2, #0]
 8020b9e:	d1dd      	bne.n	8020b5c <_free_r+0x28>
 8020ba0:	681c      	ldr	r4, [r3, #0]
 8020ba2:	685b      	ldr	r3, [r3, #4]
 8020ba4:	6053      	str	r3, [r2, #4]
 8020ba6:	4421      	add	r1, r4
 8020ba8:	6011      	str	r1, [r2, #0]
 8020baa:	e7d7      	b.n	8020b5c <_free_r+0x28>
 8020bac:	d902      	bls.n	8020bb4 <_free_r+0x80>
 8020bae:	230c      	movs	r3, #12
 8020bb0:	6003      	str	r3, [r0, #0]
 8020bb2:	e7d3      	b.n	8020b5c <_free_r+0x28>
 8020bb4:	6825      	ldr	r5, [r4, #0]
 8020bb6:	1961      	adds	r1, r4, r5
 8020bb8:	428b      	cmp	r3, r1
 8020bba:	bf04      	itt	eq
 8020bbc:	6819      	ldreq	r1, [r3, #0]
 8020bbe:	685b      	ldreq	r3, [r3, #4]
 8020bc0:	6063      	str	r3, [r4, #4]
 8020bc2:	bf04      	itt	eq
 8020bc4:	1949      	addeq	r1, r1, r5
 8020bc6:	6021      	streq	r1, [r4, #0]
 8020bc8:	6054      	str	r4, [r2, #4]
 8020bca:	e7c7      	b.n	8020b5c <_free_r+0x28>
 8020bcc:	b003      	add	sp, #12
 8020bce:	bd30      	pop	{r4, r5, pc}
 8020bd0:	240053d8 	.word	0x240053d8

08020bd4 <_malloc_r>:
 8020bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bd6:	1ccd      	adds	r5, r1, #3
 8020bd8:	f025 0503 	bic.w	r5, r5, #3
 8020bdc:	3508      	adds	r5, #8
 8020bde:	2d0c      	cmp	r5, #12
 8020be0:	bf38      	it	cc
 8020be2:	250c      	movcc	r5, #12
 8020be4:	2d00      	cmp	r5, #0
 8020be6:	4606      	mov	r6, r0
 8020be8:	db01      	blt.n	8020bee <_malloc_r+0x1a>
 8020bea:	42a9      	cmp	r1, r5
 8020bec:	d903      	bls.n	8020bf6 <_malloc_r+0x22>
 8020bee:	230c      	movs	r3, #12
 8020bf0:	6033      	str	r3, [r6, #0]
 8020bf2:	2000      	movs	r0, #0
 8020bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bf6:	f001 fb11 	bl	802221c <__malloc_lock>
 8020bfa:	4921      	ldr	r1, [pc, #132]	; (8020c80 <_malloc_r+0xac>)
 8020bfc:	680a      	ldr	r2, [r1, #0]
 8020bfe:	4614      	mov	r4, r2
 8020c00:	b99c      	cbnz	r4, 8020c2a <_malloc_r+0x56>
 8020c02:	4f20      	ldr	r7, [pc, #128]	; (8020c84 <_malloc_r+0xb0>)
 8020c04:	683b      	ldr	r3, [r7, #0]
 8020c06:	b923      	cbnz	r3, 8020c12 <_malloc_r+0x3e>
 8020c08:	4621      	mov	r1, r4
 8020c0a:	4630      	mov	r0, r6
 8020c0c:	f000 fc7e 	bl	802150c <_sbrk_r>
 8020c10:	6038      	str	r0, [r7, #0]
 8020c12:	4629      	mov	r1, r5
 8020c14:	4630      	mov	r0, r6
 8020c16:	f000 fc79 	bl	802150c <_sbrk_r>
 8020c1a:	1c43      	adds	r3, r0, #1
 8020c1c:	d123      	bne.n	8020c66 <_malloc_r+0x92>
 8020c1e:	230c      	movs	r3, #12
 8020c20:	6033      	str	r3, [r6, #0]
 8020c22:	4630      	mov	r0, r6
 8020c24:	f001 fb00 	bl	8022228 <__malloc_unlock>
 8020c28:	e7e3      	b.n	8020bf2 <_malloc_r+0x1e>
 8020c2a:	6823      	ldr	r3, [r4, #0]
 8020c2c:	1b5b      	subs	r3, r3, r5
 8020c2e:	d417      	bmi.n	8020c60 <_malloc_r+0x8c>
 8020c30:	2b0b      	cmp	r3, #11
 8020c32:	d903      	bls.n	8020c3c <_malloc_r+0x68>
 8020c34:	6023      	str	r3, [r4, #0]
 8020c36:	441c      	add	r4, r3
 8020c38:	6025      	str	r5, [r4, #0]
 8020c3a:	e004      	b.n	8020c46 <_malloc_r+0x72>
 8020c3c:	6863      	ldr	r3, [r4, #4]
 8020c3e:	42a2      	cmp	r2, r4
 8020c40:	bf0c      	ite	eq
 8020c42:	600b      	streq	r3, [r1, #0]
 8020c44:	6053      	strne	r3, [r2, #4]
 8020c46:	4630      	mov	r0, r6
 8020c48:	f001 faee 	bl	8022228 <__malloc_unlock>
 8020c4c:	f104 000b 	add.w	r0, r4, #11
 8020c50:	1d23      	adds	r3, r4, #4
 8020c52:	f020 0007 	bic.w	r0, r0, #7
 8020c56:	1ac2      	subs	r2, r0, r3
 8020c58:	d0cc      	beq.n	8020bf4 <_malloc_r+0x20>
 8020c5a:	1a1b      	subs	r3, r3, r0
 8020c5c:	50a3      	str	r3, [r4, r2]
 8020c5e:	e7c9      	b.n	8020bf4 <_malloc_r+0x20>
 8020c60:	4622      	mov	r2, r4
 8020c62:	6864      	ldr	r4, [r4, #4]
 8020c64:	e7cc      	b.n	8020c00 <_malloc_r+0x2c>
 8020c66:	1cc4      	adds	r4, r0, #3
 8020c68:	f024 0403 	bic.w	r4, r4, #3
 8020c6c:	42a0      	cmp	r0, r4
 8020c6e:	d0e3      	beq.n	8020c38 <_malloc_r+0x64>
 8020c70:	1a21      	subs	r1, r4, r0
 8020c72:	4630      	mov	r0, r6
 8020c74:	f000 fc4a 	bl	802150c <_sbrk_r>
 8020c78:	3001      	adds	r0, #1
 8020c7a:	d1dd      	bne.n	8020c38 <_malloc_r+0x64>
 8020c7c:	e7cf      	b.n	8020c1e <_malloc_r+0x4a>
 8020c7e:	bf00      	nop
 8020c80:	240053d8 	.word	0x240053d8
 8020c84:	240053dc 	.word	0x240053dc

08020c88 <__cvt>:
 8020c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c8a:	ed2d 8b02 	vpush	{d8}
 8020c8e:	eeb0 8b40 	vmov.f64	d8, d0
 8020c92:	b085      	sub	sp, #20
 8020c94:	4617      	mov	r7, r2
 8020c96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020c98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020c9a:	ee18 2a90 	vmov	r2, s17
 8020c9e:	f025 0520 	bic.w	r5, r5, #32
 8020ca2:	2a00      	cmp	r2, #0
 8020ca4:	bfb6      	itet	lt
 8020ca6:	222d      	movlt	r2, #45	; 0x2d
 8020ca8:	2200      	movge	r2, #0
 8020caa:	eeb1 8b40 	vneglt.f64	d8, d0
 8020cae:	2d46      	cmp	r5, #70	; 0x46
 8020cb0:	460c      	mov	r4, r1
 8020cb2:	701a      	strb	r2, [r3, #0]
 8020cb4:	d004      	beq.n	8020cc0 <__cvt+0x38>
 8020cb6:	2d45      	cmp	r5, #69	; 0x45
 8020cb8:	d100      	bne.n	8020cbc <__cvt+0x34>
 8020cba:	3401      	adds	r4, #1
 8020cbc:	2102      	movs	r1, #2
 8020cbe:	e000      	b.n	8020cc2 <__cvt+0x3a>
 8020cc0:	2103      	movs	r1, #3
 8020cc2:	ab03      	add	r3, sp, #12
 8020cc4:	9301      	str	r3, [sp, #4]
 8020cc6:	ab02      	add	r3, sp, #8
 8020cc8:	9300      	str	r3, [sp, #0]
 8020cca:	4622      	mov	r2, r4
 8020ccc:	4633      	mov	r3, r6
 8020cce:	eeb0 0b48 	vmov.f64	d0, d8
 8020cd2:	f000 fd1d 	bl	8021710 <_dtoa_r>
 8020cd6:	2d47      	cmp	r5, #71	; 0x47
 8020cd8:	d109      	bne.n	8020cee <__cvt+0x66>
 8020cda:	07fb      	lsls	r3, r7, #31
 8020cdc:	d407      	bmi.n	8020cee <__cvt+0x66>
 8020cde:	9b03      	ldr	r3, [sp, #12]
 8020ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ce2:	1a1b      	subs	r3, r3, r0
 8020ce4:	6013      	str	r3, [r2, #0]
 8020ce6:	b005      	add	sp, #20
 8020ce8:	ecbd 8b02 	vpop	{d8}
 8020cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020cee:	2d46      	cmp	r5, #70	; 0x46
 8020cf0:	eb00 0204 	add.w	r2, r0, r4
 8020cf4:	d10c      	bne.n	8020d10 <__cvt+0x88>
 8020cf6:	7803      	ldrb	r3, [r0, #0]
 8020cf8:	2b30      	cmp	r3, #48	; 0x30
 8020cfa:	d107      	bne.n	8020d0c <__cvt+0x84>
 8020cfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d04:	bf1c      	itt	ne
 8020d06:	f1c4 0401 	rsbne	r4, r4, #1
 8020d0a:	6034      	strne	r4, [r6, #0]
 8020d0c:	6833      	ldr	r3, [r6, #0]
 8020d0e:	441a      	add	r2, r3
 8020d10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d18:	bf08      	it	eq
 8020d1a:	9203      	streq	r2, [sp, #12]
 8020d1c:	2130      	movs	r1, #48	; 0x30
 8020d1e:	9b03      	ldr	r3, [sp, #12]
 8020d20:	4293      	cmp	r3, r2
 8020d22:	d2dc      	bcs.n	8020cde <__cvt+0x56>
 8020d24:	1c5c      	adds	r4, r3, #1
 8020d26:	9403      	str	r4, [sp, #12]
 8020d28:	7019      	strb	r1, [r3, #0]
 8020d2a:	e7f8      	b.n	8020d1e <__cvt+0x96>

08020d2c <__exponent>:
 8020d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020d2e:	4603      	mov	r3, r0
 8020d30:	2900      	cmp	r1, #0
 8020d32:	bfb8      	it	lt
 8020d34:	4249      	neglt	r1, r1
 8020d36:	f803 2b02 	strb.w	r2, [r3], #2
 8020d3a:	bfb4      	ite	lt
 8020d3c:	222d      	movlt	r2, #45	; 0x2d
 8020d3e:	222b      	movge	r2, #43	; 0x2b
 8020d40:	2909      	cmp	r1, #9
 8020d42:	7042      	strb	r2, [r0, #1]
 8020d44:	dd2a      	ble.n	8020d9c <__exponent+0x70>
 8020d46:	f10d 0407 	add.w	r4, sp, #7
 8020d4a:	46a4      	mov	ip, r4
 8020d4c:	270a      	movs	r7, #10
 8020d4e:	46a6      	mov	lr, r4
 8020d50:	460a      	mov	r2, r1
 8020d52:	fb91 f6f7 	sdiv	r6, r1, r7
 8020d56:	fb07 1516 	mls	r5, r7, r6, r1
 8020d5a:	3530      	adds	r5, #48	; 0x30
 8020d5c:	2a63      	cmp	r2, #99	; 0x63
 8020d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8020d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020d66:	4631      	mov	r1, r6
 8020d68:	dcf1      	bgt.n	8020d4e <__exponent+0x22>
 8020d6a:	3130      	adds	r1, #48	; 0x30
 8020d6c:	f1ae 0502 	sub.w	r5, lr, #2
 8020d70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020d74:	1c44      	adds	r4, r0, #1
 8020d76:	4629      	mov	r1, r5
 8020d78:	4561      	cmp	r1, ip
 8020d7a:	d30a      	bcc.n	8020d92 <__exponent+0x66>
 8020d7c:	f10d 0209 	add.w	r2, sp, #9
 8020d80:	eba2 020e 	sub.w	r2, r2, lr
 8020d84:	4565      	cmp	r5, ip
 8020d86:	bf88      	it	hi
 8020d88:	2200      	movhi	r2, #0
 8020d8a:	4413      	add	r3, r2
 8020d8c:	1a18      	subs	r0, r3, r0
 8020d8e:	b003      	add	sp, #12
 8020d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8020d9a:	e7ed      	b.n	8020d78 <__exponent+0x4c>
 8020d9c:	2330      	movs	r3, #48	; 0x30
 8020d9e:	3130      	adds	r1, #48	; 0x30
 8020da0:	7083      	strb	r3, [r0, #2]
 8020da2:	70c1      	strb	r1, [r0, #3]
 8020da4:	1d03      	adds	r3, r0, #4
 8020da6:	e7f1      	b.n	8020d8c <__exponent+0x60>

08020da8 <_printf_float>:
 8020da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dac:	b08b      	sub	sp, #44	; 0x2c
 8020dae:	460c      	mov	r4, r1
 8020db0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8020db4:	4616      	mov	r6, r2
 8020db6:	461f      	mov	r7, r3
 8020db8:	4605      	mov	r5, r0
 8020dba:	f001 fa2b 	bl	8022214 <_localeconv_r>
 8020dbe:	f8d0 b000 	ldr.w	fp, [r0]
 8020dc2:	4658      	mov	r0, fp
 8020dc4:	f7df fa96 	bl	80002f4 <strlen>
 8020dc8:	2300      	movs	r3, #0
 8020dca:	9308      	str	r3, [sp, #32]
 8020dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8020dd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020dd4:	6822      	ldr	r2, [r4, #0]
 8020dd6:	3307      	adds	r3, #7
 8020dd8:	f023 0307 	bic.w	r3, r3, #7
 8020ddc:	f103 0108 	add.w	r1, r3, #8
 8020de0:	f8c8 1000 	str.w	r1, [r8]
 8020de4:	4682      	mov	sl, r0
 8020de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020dea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8020dee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8021050 <_printf_float+0x2a8>
 8020df2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8020df6:	eeb0 6bc0 	vabs.f64	d6, d0
 8020dfa:	eeb4 6b47 	vcmp.f64	d6, d7
 8020dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e02:	dd24      	ble.n	8020e4e <_printf_float+0xa6>
 8020e04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e0c:	d502      	bpl.n	8020e14 <_printf_float+0x6c>
 8020e0e:	232d      	movs	r3, #45	; 0x2d
 8020e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e14:	4b90      	ldr	r3, [pc, #576]	; (8021058 <_printf_float+0x2b0>)
 8020e16:	4891      	ldr	r0, [pc, #580]	; (802105c <_printf_float+0x2b4>)
 8020e18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8020e1c:	bf94      	ite	ls
 8020e1e:	4698      	movls	r8, r3
 8020e20:	4680      	movhi	r8, r0
 8020e22:	2303      	movs	r3, #3
 8020e24:	6123      	str	r3, [r4, #16]
 8020e26:	f022 0204 	bic.w	r2, r2, #4
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	6022      	str	r2, [r4, #0]
 8020e2e:	9304      	str	r3, [sp, #16]
 8020e30:	9700      	str	r7, [sp, #0]
 8020e32:	4633      	mov	r3, r6
 8020e34:	aa09      	add	r2, sp, #36	; 0x24
 8020e36:	4621      	mov	r1, r4
 8020e38:	4628      	mov	r0, r5
 8020e3a:	f000 f9d3 	bl	80211e4 <_printf_common>
 8020e3e:	3001      	adds	r0, #1
 8020e40:	f040 808a 	bne.w	8020f58 <_printf_float+0x1b0>
 8020e44:	f04f 30ff 	mov.w	r0, #4294967295
 8020e48:	b00b      	add	sp, #44	; 0x2c
 8020e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e4e:	eeb4 0b40 	vcmp.f64	d0, d0
 8020e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e56:	d709      	bvc.n	8020e6c <_printf_float+0xc4>
 8020e58:	ee10 3a90 	vmov	r3, s1
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	bfbc      	itt	lt
 8020e60:	232d      	movlt	r3, #45	; 0x2d
 8020e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020e66:	487e      	ldr	r0, [pc, #504]	; (8021060 <_printf_float+0x2b8>)
 8020e68:	4b7e      	ldr	r3, [pc, #504]	; (8021064 <_printf_float+0x2bc>)
 8020e6a:	e7d5      	b.n	8020e18 <_printf_float+0x70>
 8020e6c:	6863      	ldr	r3, [r4, #4]
 8020e6e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8020e72:	9104      	str	r1, [sp, #16]
 8020e74:	1c59      	adds	r1, r3, #1
 8020e76:	d13c      	bne.n	8020ef2 <_printf_float+0x14a>
 8020e78:	2306      	movs	r3, #6
 8020e7a:	6063      	str	r3, [r4, #4]
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	9303      	str	r3, [sp, #12]
 8020e80:	ab08      	add	r3, sp, #32
 8020e82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8020e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020e8a:	ab07      	add	r3, sp, #28
 8020e8c:	6861      	ldr	r1, [r4, #4]
 8020e8e:	9300      	str	r3, [sp, #0]
 8020e90:	6022      	str	r2, [r4, #0]
 8020e92:	f10d 031b 	add.w	r3, sp, #27
 8020e96:	4628      	mov	r0, r5
 8020e98:	f7ff fef6 	bl	8020c88 <__cvt>
 8020e9c:	9b04      	ldr	r3, [sp, #16]
 8020e9e:	9907      	ldr	r1, [sp, #28]
 8020ea0:	2b47      	cmp	r3, #71	; 0x47
 8020ea2:	4680      	mov	r8, r0
 8020ea4:	d108      	bne.n	8020eb8 <_printf_float+0x110>
 8020ea6:	1cc8      	adds	r0, r1, #3
 8020ea8:	db02      	blt.n	8020eb0 <_printf_float+0x108>
 8020eaa:	6863      	ldr	r3, [r4, #4]
 8020eac:	4299      	cmp	r1, r3
 8020eae:	dd41      	ble.n	8020f34 <_printf_float+0x18c>
 8020eb0:	f1a9 0902 	sub.w	r9, r9, #2
 8020eb4:	fa5f f989 	uxtb.w	r9, r9
 8020eb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020ebc:	d820      	bhi.n	8020f00 <_printf_float+0x158>
 8020ebe:	3901      	subs	r1, #1
 8020ec0:	464a      	mov	r2, r9
 8020ec2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020ec6:	9107      	str	r1, [sp, #28]
 8020ec8:	f7ff ff30 	bl	8020d2c <__exponent>
 8020ecc:	9a08      	ldr	r2, [sp, #32]
 8020ece:	9004      	str	r0, [sp, #16]
 8020ed0:	1813      	adds	r3, r2, r0
 8020ed2:	2a01      	cmp	r2, #1
 8020ed4:	6123      	str	r3, [r4, #16]
 8020ed6:	dc02      	bgt.n	8020ede <_printf_float+0x136>
 8020ed8:	6822      	ldr	r2, [r4, #0]
 8020eda:	07d2      	lsls	r2, r2, #31
 8020edc:	d501      	bpl.n	8020ee2 <_printf_float+0x13a>
 8020ede:	3301      	adds	r3, #1
 8020ee0:	6123      	str	r3, [r4, #16]
 8020ee2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d0a2      	beq.n	8020e30 <_printf_float+0x88>
 8020eea:	232d      	movs	r3, #45	; 0x2d
 8020eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020ef0:	e79e      	b.n	8020e30 <_printf_float+0x88>
 8020ef2:	9904      	ldr	r1, [sp, #16]
 8020ef4:	2947      	cmp	r1, #71	; 0x47
 8020ef6:	d1c1      	bne.n	8020e7c <_printf_float+0xd4>
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d1bf      	bne.n	8020e7c <_printf_float+0xd4>
 8020efc:	2301      	movs	r3, #1
 8020efe:	e7bc      	b.n	8020e7a <_printf_float+0xd2>
 8020f00:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8020f04:	d118      	bne.n	8020f38 <_printf_float+0x190>
 8020f06:	2900      	cmp	r1, #0
 8020f08:	6863      	ldr	r3, [r4, #4]
 8020f0a:	dd0b      	ble.n	8020f24 <_printf_float+0x17c>
 8020f0c:	6121      	str	r1, [r4, #16]
 8020f0e:	b913      	cbnz	r3, 8020f16 <_printf_float+0x16e>
 8020f10:	6822      	ldr	r2, [r4, #0]
 8020f12:	07d0      	lsls	r0, r2, #31
 8020f14:	d502      	bpl.n	8020f1c <_printf_float+0x174>
 8020f16:	3301      	adds	r3, #1
 8020f18:	440b      	add	r3, r1
 8020f1a:	6123      	str	r3, [r4, #16]
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8020f20:	9304      	str	r3, [sp, #16]
 8020f22:	e7de      	b.n	8020ee2 <_printf_float+0x13a>
 8020f24:	b913      	cbnz	r3, 8020f2c <_printf_float+0x184>
 8020f26:	6822      	ldr	r2, [r4, #0]
 8020f28:	07d2      	lsls	r2, r2, #31
 8020f2a:	d501      	bpl.n	8020f30 <_printf_float+0x188>
 8020f2c:	3302      	adds	r3, #2
 8020f2e:	e7f4      	b.n	8020f1a <_printf_float+0x172>
 8020f30:	2301      	movs	r3, #1
 8020f32:	e7f2      	b.n	8020f1a <_printf_float+0x172>
 8020f34:	f04f 0967 	mov.w	r9, #103	; 0x67
 8020f38:	9b08      	ldr	r3, [sp, #32]
 8020f3a:	4299      	cmp	r1, r3
 8020f3c:	db05      	blt.n	8020f4a <_printf_float+0x1a2>
 8020f3e:	6823      	ldr	r3, [r4, #0]
 8020f40:	6121      	str	r1, [r4, #16]
 8020f42:	07d8      	lsls	r0, r3, #31
 8020f44:	d5ea      	bpl.n	8020f1c <_printf_float+0x174>
 8020f46:	1c4b      	adds	r3, r1, #1
 8020f48:	e7e7      	b.n	8020f1a <_printf_float+0x172>
 8020f4a:	2900      	cmp	r1, #0
 8020f4c:	bfd4      	ite	le
 8020f4e:	f1c1 0202 	rsble	r2, r1, #2
 8020f52:	2201      	movgt	r2, #1
 8020f54:	4413      	add	r3, r2
 8020f56:	e7e0      	b.n	8020f1a <_printf_float+0x172>
 8020f58:	6823      	ldr	r3, [r4, #0]
 8020f5a:	055a      	lsls	r2, r3, #21
 8020f5c:	d407      	bmi.n	8020f6e <_printf_float+0x1c6>
 8020f5e:	6923      	ldr	r3, [r4, #16]
 8020f60:	4642      	mov	r2, r8
 8020f62:	4631      	mov	r1, r6
 8020f64:	4628      	mov	r0, r5
 8020f66:	47b8      	blx	r7
 8020f68:	3001      	adds	r0, #1
 8020f6a:	d12a      	bne.n	8020fc2 <_printf_float+0x21a>
 8020f6c:	e76a      	b.n	8020e44 <_printf_float+0x9c>
 8020f6e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8020f72:	f240 80e2 	bls.w	802113a <_printf_float+0x392>
 8020f76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020f7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f82:	d133      	bne.n	8020fec <_printf_float+0x244>
 8020f84:	4a38      	ldr	r2, [pc, #224]	; (8021068 <_printf_float+0x2c0>)
 8020f86:	2301      	movs	r3, #1
 8020f88:	4631      	mov	r1, r6
 8020f8a:	4628      	mov	r0, r5
 8020f8c:	47b8      	blx	r7
 8020f8e:	3001      	adds	r0, #1
 8020f90:	f43f af58 	beq.w	8020e44 <_printf_float+0x9c>
 8020f94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020f98:	429a      	cmp	r2, r3
 8020f9a:	db02      	blt.n	8020fa2 <_printf_float+0x1fa>
 8020f9c:	6823      	ldr	r3, [r4, #0]
 8020f9e:	07d8      	lsls	r0, r3, #31
 8020fa0:	d50f      	bpl.n	8020fc2 <_printf_float+0x21a>
 8020fa2:	4653      	mov	r3, sl
 8020fa4:	465a      	mov	r2, fp
 8020fa6:	4631      	mov	r1, r6
 8020fa8:	4628      	mov	r0, r5
 8020faa:	47b8      	blx	r7
 8020fac:	3001      	adds	r0, #1
 8020fae:	f43f af49 	beq.w	8020e44 <_printf_float+0x9c>
 8020fb2:	f04f 0800 	mov.w	r8, #0
 8020fb6:	f104 091a 	add.w	r9, r4, #26
 8020fba:	9b08      	ldr	r3, [sp, #32]
 8020fbc:	3b01      	subs	r3, #1
 8020fbe:	4543      	cmp	r3, r8
 8020fc0:	dc09      	bgt.n	8020fd6 <_printf_float+0x22e>
 8020fc2:	6823      	ldr	r3, [r4, #0]
 8020fc4:	079b      	lsls	r3, r3, #30
 8020fc6:	f100 8108 	bmi.w	80211da <_printf_float+0x432>
 8020fca:	68e0      	ldr	r0, [r4, #12]
 8020fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fce:	4298      	cmp	r0, r3
 8020fd0:	bfb8      	it	lt
 8020fd2:	4618      	movlt	r0, r3
 8020fd4:	e738      	b.n	8020e48 <_printf_float+0xa0>
 8020fd6:	2301      	movs	r3, #1
 8020fd8:	464a      	mov	r2, r9
 8020fda:	4631      	mov	r1, r6
 8020fdc:	4628      	mov	r0, r5
 8020fde:	47b8      	blx	r7
 8020fe0:	3001      	adds	r0, #1
 8020fe2:	f43f af2f 	beq.w	8020e44 <_printf_float+0x9c>
 8020fe6:	f108 0801 	add.w	r8, r8, #1
 8020fea:	e7e6      	b.n	8020fba <_printf_float+0x212>
 8020fec:	9b07      	ldr	r3, [sp, #28]
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	dc3c      	bgt.n	802106c <_printf_float+0x2c4>
 8020ff2:	4a1d      	ldr	r2, [pc, #116]	; (8021068 <_printf_float+0x2c0>)
 8020ff4:	2301      	movs	r3, #1
 8020ff6:	4631      	mov	r1, r6
 8020ff8:	4628      	mov	r0, r5
 8020ffa:	47b8      	blx	r7
 8020ffc:	3001      	adds	r0, #1
 8020ffe:	f43f af21 	beq.w	8020e44 <_printf_float+0x9c>
 8021002:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021006:	4313      	orrs	r3, r2
 8021008:	d102      	bne.n	8021010 <_printf_float+0x268>
 802100a:	6823      	ldr	r3, [r4, #0]
 802100c:	07d9      	lsls	r1, r3, #31
 802100e:	d5d8      	bpl.n	8020fc2 <_printf_float+0x21a>
 8021010:	4653      	mov	r3, sl
 8021012:	465a      	mov	r2, fp
 8021014:	4631      	mov	r1, r6
 8021016:	4628      	mov	r0, r5
 8021018:	47b8      	blx	r7
 802101a:	3001      	adds	r0, #1
 802101c:	f43f af12 	beq.w	8020e44 <_printf_float+0x9c>
 8021020:	f04f 0900 	mov.w	r9, #0
 8021024:	f104 0a1a 	add.w	sl, r4, #26
 8021028:	9b07      	ldr	r3, [sp, #28]
 802102a:	425b      	negs	r3, r3
 802102c:	454b      	cmp	r3, r9
 802102e:	dc01      	bgt.n	8021034 <_printf_float+0x28c>
 8021030:	9b08      	ldr	r3, [sp, #32]
 8021032:	e795      	b.n	8020f60 <_printf_float+0x1b8>
 8021034:	2301      	movs	r3, #1
 8021036:	4652      	mov	r2, sl
 8021038:	4631      	mov	r1, r6
 802103a:	4628      	mov	r0, r5
 802103c:	47b8      	blx	r7
 802103e:	3001      	adds	r0, #1
 8021040:	f43f af00 	beq.w	8020e44 <_printf_float+0x9c>
 8021044:	f109 0901 	add.w	r9, r9, #1
 8021048:	e7ee      	b.n	8021028 <_printf_float+0x280>
 802104a:	bf00      	nop
 802104c:	f3af 8000 	nop.w
 8021050:	ffffffff 	.word	0xffffffff
 8021054:	7fefffff 	.word	0x7fefffff
 8021058:	08049af8 	.word	0x08049af8
 802105c:	08049afc 	.word	0x08049afc
 8021060:	08049b04 	.word	0x08049b04
 8021064:	08049b00 	.word	0x08049b00
 8021068:	08049b08 	.word	0x08049b08
 802106c:	9a08      	ldr	r2, [sp, #32]
 802106e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021070:	429a      	cmp	r2, r3
 8021072:	bfa8      	it	ge
 8021074:	461a      	movge	r2, r3
 8021076:	2a00      	cmp	r2, #0
 8021078:	4691      	mov	r9, r2
 802107a:	dc38      	bgt.n	80210ee <_printf_float+0x346>
 802107c:	2300      	movs	r3, #0
 802107e:	9305      	str	r3, [sp, #20]
 8021080:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021084:	f104 021a 	add.w	r2, r4, #26
 8021088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802108a:	9905      	ldr	r1, [sp, #20]
 802108c:	9304      	str	r3, [sp, #16]
 802108e:	eba3 0309 	sub.w	r3, r3, r9
 8021092:	428b      	cmp	r3, r1
 8021094:	dc33      	bgt.n	80210fe <_printf_float+0x356>
 8021096:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802109a:	429a      	cmp	r2, r3
 802109c:	db3c      	blt.n	8021118 <_printf_float+0x370>
 802109e:	6823      	ldr	r3, [r4, #0]
 80210a0:	07da      	lsls	r2, r3, #31
 80210a2:	d439      	bmi.n	8021118 <_printf_float+0x370>
 80210a4:	9a08      	ldr	r2, [sp, #32]
 80210a6:	9b04      	ldr	r3, [sp, #16]
 80210a8:	9907      	ldr	r1, [sp, #28]
 80210aa:	1ad3      	subs	r3, r2, r3
 80210ac:	eba2 0901 	sub.w	r9, r2, r1
 80210b0:	4599      	cmp	r9, r3
 80210b2:	bfa8      	it	ge
 80210b4:	4699      	movge	r9, r3
 80210b6:	f1b9 0f00 	cmp.w	r9, #0
 80210ba:	dc35      	bgt.n	8021128 <_printf_float+0x380>
 80210bc:	f04f 0800 	mov.w	r8, #0
 80210c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80210c4:	f104 0a1a 	add.w	sl, r4, #26
 80210c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80210cc:	1a9b      	subs	r3, r3, r2
 80210ce:	eba3 0309 	sub.w	r3, r3, r9
 80210d2:	4543      	cmp	r3, r8
 80210d4:	f77f af75 	ble.w	8020fc2 <_printf_float+0x21a>
 80210d8:	2301      	movs	r3, #1
 80210da:	4652      	mov	r2, sl
 80210dc:	4631      	mov	r1, r6
 80210de:	4628      	mov	r0, r5
 80210e0:	47b8      	blx	r7
 80210e2:	3001      	adds	r0, #1
 80210e4:	f43f aeae 	beq.w	8020e44 <_printf_float+0x9c>
 80210e8:	f108 0801 	add.w	r8, r8, #1
 80210ec:	e7ec      	b.n	80210c8 <_printf_float+0x320>
 80210ee:	4613      	mov	r3, r2
 80210f0:	4631      	mov	r1, r6
 80210f2:	4642      	mov	r2, r8
 80210f4:	4628      	mov	r0, r5
 80210f6:	47b8      	blx	r7
 80210f8:	3001      	adds	r0, #1
 80210fa:	d1bf      	bne.n	802107c <_printf_float+0x2d4>
 80210fc:	e6a2      	b.n	8020e44 <_printf_float+0x9c>
 80210fe:	2301      	movs	r3, #1
 8021100:	4631      	mov	r1, r6
 8021102:	4628      	mov	r0, r5
 8021104:	9204      	str	r2, [sp, #16]
 8021106:	47b8      	blx	r7
 8021108:	3001      	adds	r0, #1
 802110a:	f43f ae9b 	beq.w	8020e44 <_printf_float+0x9c>
 802110e:	9b05      	ldr	r3, [sp, #20]
 8021110:	9a04      	ldr	r2, [sp, #16]
 8021112:	3301      	adds	r3, #1
 8021114:	9305      	str	r3, [sp, #20]
 8021116:	e7b7      	b.n	8021088 <_printf_float+0x2e0>
 8021118:	4653      	mov	r3, sl
 802111a:	465a      	mov	r2, fp
 802111c:	4631      	mov	r1, r6
 802111e:	4628      	mov	r0, r5
 8021120:	47b8      	blx	r7
 8021122:	3001      	adds	r0, #1
 8021124:	d1be      	bne.n	80210a4 <_printf_float+0x2fc>
 8021126:	e68d      	b.n	8020e44 <_printf_float+0x9c>
 8021128:	9a04      	ldr	r2, [sp, #16]
 802112a:	464b      	mov	r3, r9
 802112c:	4442      	add	r2, r8
 802112e:	4631      	mov	r1, r6
 8021130:	4628      	mov	r0, r5
 8021132:	47b8      	blx	r7
 8021134:	3001      	adds	r0, #1
 8021136:	d1c1      	bne.n	80210bc <_printf_float+0x314>
 8021138:	e684      	b.n	8020e44 <_printf_float+0x9c>
 802113a:	9a08      	ldr	r2, [sp, #32]
 802113c:	2a01      	cmp	r2, #1
 802113e:	dc01      	bgt.n	8021144 <_printf_float+0x39c>
 8021140:	07db      	lsls	r3, r3, #31
 8021142:	d537      	bpl.n	80211b4 <_printf_float+0x40c>
 8021144:	2301      	movs	r3, #1
 8021146:	4642      	mov	r2, r8
 8021148:	4631      	mov	r1, r6
 802114a:	4628      	mov	r0, r5
 802114c:	47b8      	blx	r7
 802114e:	3001      	adds	r0, #1
 8021150:	f43f ae78 	beq.w	8020e44 <_printf_float+0x9c>
 8021154:	4653      	mov	r3, sl
 8021156:	465a      	mov	r2, fp
 8021158:	4631      	mov	r1, r6
 802115a:	4628      	mov	r0, r5
 802115c:	47b8      	blx	r7
 802115e:	3001      	adds	r0, #1
 8021160:	f43f ae70 	beq.w	8020e44 <_printf_float+0x9c>
 8021164:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021168:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021170:	d01b      	beq.n	80211aa <_printf_float+0x402>
 8021172:	9b08      	ldr	r3, [sp, #32]
 8021174:	f108 0201 	add.w	r2, r8, #1
 8021178:	3b01      	subs	r3, #1
 802117a:	4631      	mov	r1, r6
 802117c:	4628      	mov	r0, r5
 802117e:	47b8      	blx	r7
 8021180:	3001      	adds	r0, #1
 8021182:	d10e      	bne.n	80211a2 <_printf_float+0x3fa>
 8021184:	e65e      	b.n	8020e44 <_printf_float+0x9c>
 8021186:	2301      	movs	r3, #1
 8021188:	464a      	mov	r2, r9
 802118a:	4631      	mov	r1, r6
 802118c:	4628      	mov	r0, r5
 802118e:	47b8      	blx	r7
 8021190:	3001      	adds	r0, #1
 8021192:	f43f ae57 	beq.w	8020e44 <_printf_float+0x9c>
 8021196:	f108 0801 	add.w	r8, r8, #1
 802119a:	9b08      	ldr	r3, [sp, #32]
 802119c:	3b01      	subs	r3, #1
 802119e:	4543      	cmp	r3, r8
 80211a0:	dcf1      	bgt.n	8021186 <_printf_float+0x3de>
 80211a2:	9b04      	ldr	r3, [sp, #16]
 80211a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80211a8:	e6db      	b.n	8020f62 <_printf_float+0x1ba>
 80211aa:	f04f 0800 	mov.w	r8, #0
 80211ae:	f104 091a 	add.w	r9, r4, #26
 80211b2:	e7f2      	b.n	802119a <_printf_float+0x3f2>
 80211b4:	2301      	movs	r3, #1
 80211b6:	4642      	mov	r2, r8
 80211b8:	e7df      	b.n	802117a <_printf_float+0x3d2>
 80211ba:	2301      	movs	r3, #1
 80211bc:	464a      	mov	r2, r9
 80211be:	4631      	mov	r1, r6
 80211c0:	4628      	mov	r0, r5
 80211c2:	47b8      	blx	r7
 80211c4:	3001      	adds	r0, #1
 80211c6:	f43f ae3d 	beq.w	8020e44 <_printf_float+0x9c>
 80211ca:	f108 0801 	add.w	r8, r8, #1
 80211ce:	68e3      	ldr	r3, [r4, #12]
 80211d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80211d2:	1a5b      	subs	r3, r3, r1
 80211d4:	4543      	cmp	r3, r8
 80211d6:	dcf0      	bgt.n	80211ba <_printf_float+0x412>
 80211d8:	e6f7      	b.n	8020fca <_printf_float+0x222>
 80211da:	f04f 0800 	mov.w	r8, #0
 80211de:	f104 0919 	add.w	r9, r4, #25
 80211e2:	e7f4      	b.n	80211ce <_printf_float+0x426>

080211e4 <_printf_common>:
 80211e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211e8:	4616      	mov	r6, r2
 80211ea:	4699      	mov	r9, r3
 80211ec:	688a      	ldr	r2, [r1, #8]
 80211ee:	690b      	ldr	r3, [r1, #16]
 80211f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80211f4:	4293      	cmp	r3, r2
 80211f6:	bfb8      	it	lt
 80211f8:	4613      	movlt	r3, r2
 80211fa:	6033      	str	r3, [r6, #0]
 80211fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021200:	4607      	mov	r7, r0
 8021202:	460c      	mov	r4, r1
 8021204:	b10a      	cbz	r2, 802120a <_printf_common+0x26>
 8021206:	3301      	adds	r3, #1
 8021208:	6033      	str	r3, [r6, #0]
 802120a:	6823      	ldr	r3, [r4, #0]
 802120c:	0699      	lsls	r1, r3, #26
 802120e:	bf42      	ittt	mi
 8021210:	6833      	ldrmi	r3, [r6, #0]
 8021212:	3302      	addmi	r3, #2
 8021214:	6033      	strmi	r3, [r6, #0]
 8021216:	6825      	ldr	r5, [r4, #0]
 8021218:	f015 0506 	ands.w	r5, r5, #6
 802121c:	d106      	bne.n	802122c <_printf_common+0x48>
 802121e:	f104 0a19 	add.w	sl, r4, #25
 8021222:	68e3      	ldr	r3, [r4, #12]
 8021224:	6832      	ldr	r2, [r6, #0]
 8021226:	1a9b      	subs	r3, r3, r2
 8021228:	42ab      	cmp	r3, r5
 802122a:	dc26      	bgt.n	802127a <_printf_common+0x96>
 802122c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021230:	1e13      	subs	r3, r2, #0
 8021232:	6822      	ldr	r2, [r4, #0]
 8021234:	bf18      	it	ne
 8021236:	2301      	movne	r3, #1
 8021238:	0692      	lsls	r2, r2, #26
 802123a:	d42b      	bmi.n	8021294 <_printf_common+0xb0>
 802123c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021240:	4649      	mov	r1, r9
 8021242:	4638      	mov	r0, r7
 8021244:	47c0      	blx	r8
 8021246:	3001      	adds	r0, #1
 8021248:	d01e      	beq.n	8021288 <_printf_common+0xa4>
 802124a:	6823      	ldr	r3, [r4, #0]
 802124c:	68e5      	ldr	r5, [r4, #12]
 802124e:	6832      	ldr	r2, [r6, #0]
 8021250:	f003 0306 	and.w	r3, r3, #6
 8021254:	2b04      	cmp	r3, #4
 8021256:	bf08      	it	eq
 8021258:	1aad      	subeq	r5, r5, r2
 802125a:	68a3      	ldr	r3, [r4, #8]
 802125c:	6922      	ldr	r2, [r4, #16]
 802125e:	bf0c      	ite	eq
 8021260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021264:	2500      	movne	r5, #0
 8021266:	4293      	cmp	r3, r2
 8021268:	bfc4      	itt	gt
 802126a:	1a9b      	subgt	r3, r3, r2
 802126c:	18ed      	addgt	r5, r5, r3
 802126e:	2600      	movs	r6, #0
 8021270:	341a      	adds	r4, #26
 8021272:	42b5      	cmp	r5, r6
 8021274:	d11a      	bne.n	80212ac <_printf_common+0xc8>
 8021276:	2000      	movs	r0, #0
 8021278:	e008      	b.n	802128c <_printf_common+0xa8>
 802127a:	2301      	movs	r3, #1
 802127c:	4652      	mov	r2, sl
 802127e:	4649      	mov	r1, r9
 8021280:	4638      	mov	r0, r7
 8021282:	47c0      	blx	r8
 8021284:	3001      	adds	r0, #1
 8021286:	d103      	bne.n	8021290 <_printf_common+0xac>
 8021288:	f04f 30ff 	mov.w	r0, #4294967295
 802128c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021290:	3501      	adds	r5, #1
 8021292:	e7c6      	b.n	8021222 <_printf_common+0x3e>
 8021294:	18e1      	adds	r1, r4, r3
 8021296:	1c5a      	adds	r2, r3, #1
 8021298:	2030      	movs	r0, #48	; 0x30
 802129a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802129e:	4422      	add	r2, r4
 80212a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80212a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80212a8:	3302      	adds	r3, #2
 80212aa:	e7c7      	b.n	802123c <_printf_common+0x58>
 80212ac:	2301      	movs	r3, #1
 80212ae:	4622      	mov	r2, r4
 80212b0:	4649      	mov	r1, r9
 80212b2:	4638      	mov	r0, r7
 80212b4:	47c0      	blx	r8
 80212b6:	3001      	adds	r0, #1
 80212b8:	d0e6      	beq.n	8021288 <_printf_common+0xa4>
 80212ba:	3601      	adds	r6, #1
 80212bc:	e7d9      	b.n	8021272 <_printf_common+0x8e>
	...

080212c0 <_printf_i>:
 80212c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80212c4:	460c      	mov	r4, r1
 80212c6:	4691      	mov	r9, r2
 80212c8:	7e27      	ldrb	r7, [r4, #24]
 80212ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80212cc:	2f78      	cmp	r7, #120	; 0x78
 80212ce:	4680      	mov	r8, r0
 80212d0:	469a      	mov	sl, r3
 80212d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80212d6:	d807      	bhi.n	80212e8 <_printf_i+0x28>
 80212d8:	2f62      	cmp	r7, #98	; 0x62
 80212da:	d80a      	bhi.n	80212f2 <_printf_i+0x32>
 80212dc:	2f00      	cmp	r7, #0
 80212de:	f000 80d8 	beq.w	8021492 <_printf_i+0x1d2>
 80212e2:	2f58      	cmp	r7, #88	; 0x58
 80212e4:	f000 80a3 	beq.w	802142e <_printf_i+0x16e>
 80212e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80212ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80212f0:	e03a      	b.n	8021368 <_printf_i+0xa8>
 80212f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80212f6:	2b15      	cmp	r3, #21
 80212f8:	d8f6      	bhi.n	80212e8 <_printf_i+0x28>
 80212fa:	a001      	add	r0, pc, #4	; (adr r0, 8021300 <_printf_i+0x40>)
 80212fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021300:	08021359 	.word	0x08021359
 8021304:	0802136d 	.word	0x0802136d
 8021308:	080212e9 	.word	0x080212e9
 802130c:	080212e9 	.word	0x080212e9
 8021310:	080212e9 	.word	0x080212e9
 8021314:	080212e9 	.word	0x080212e9
 8021318:	0802136d 	.word	0x0802136d
 802131c:	080212e9 	.word	0x080212e9
 8021320:	080212e9 	.word	0x080212e9
 8021324:	080212e9 	.word	0x080212e9
 8021328:	080212e9 	.word	0x080212e9
 802132c:	08021479 	.word	0x08021479
 8021330:	0802139d 	.word	0x0802139d
 8021334:	0802145b 	.word	0x0802145b
 8021338:	080212e9 	.word	0x080212e9
 802133c:	080212e9 	.word	0x080212e9
 8021340:	0802149b 	.word	0x0802149b
 8021344:	080212e9 	.word	0x080212e9
 8021348:	0802139d 	.word	0x0802139d
 802134c:	080212e9 	.word	0x080212e9
 8021350:	080212e9 	.word	0x080212e9
 8021354:	08021463 	.word	0x08021463
 8021358:	680b      	ldr	r3, [r1, #0]
 802135a:	1d1a      	adds	r2, r3, #4
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	600a      	str	r2, [r1, #0]
 8021360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021368:	2301      	movs	r3, #1
 802136a:	e0a3      	b.n	80214b4 <_printf_i+0x1f4>
 802136c:	6825      	ldr	r5, [r4, #0]
 802136e:	6808      	ldr	r0, [r1, #0]
 8021370:	062e      	lsls	r6, r5, #24
 8021372:	f100 0304 	add.w	r3, r0, #4
 8021376:	d50a      	bpl.n	802138e <_printf_i+0xce>
 8021378:	6805      	ldr	r5, [r0, #0]
 802137a:	600b      	str	r3, [r1, #0]
 802137c:	2d00      	cmp	r5, #0
 802137e:	da03      	bge.n	8021388 <_printf_i+0xc8>
 8021380:	232d      	movs	r3, #45	; 0x2d
 8021382:	426d      	negs	r5, r5
 8021384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021388:	485e      	ldr	r0, [pc, #376]	; (8021504 <_printf_i+0x244>)
 802138a:	230a      	movs	r3, #10
 802138c:	e019      	b.n	80213c2 <_printf_i+0x102>
 802138e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021392:	6805      	ldr	r5, [r0, #0]
 8021394:	600b      	str	r3, [r1, #0]
 8021396:	bf18      	it	ne
 8021398:	b22d      	sxthne	r5, r5
 802139a:	e7ef      	b.n	802137c <_printf_i+0xbc>
 802139c:	680b      	ldr	r3, [r1, #0]
 802139e:	6825      	ldr	r5, [r4, #0]
 80213a0:	1d18      	adds	r0, r3, #4
 80213a2:	6008      	str	r0, [r1, #0]
 80213a4:	0628      	lsls	r0, r5, #24
 80213a6:	d501      	bpl.n	80213ac <_printf_i+0xec>
 80213a8:	681d      	ldr	r5, [r3, #0]
 80213aa:	e002      	b.n	80213b2 <_printf_i+0xf2>
 80213ac:	0669      	lsls	r1, r5, #25
 80213ae:	d5fb      	bpl.n	80213a8 <_printf_i+0xe8>
 80213b0:	881d      	ldrh	r5, [r3, #0]
 80213b2:	4854      	ldr	r0, [pc, #336]	; (8021504 <_printf_i+0x244>)
 80213b4:	2f6f      	cmp	r7, #111	; 0x6f
 80213b6:	bf0c      	ite	eq
 80213b8:	2308      	moveq	r3, #8
 80213ba:	230a      	movne	r3, #10
 80213bc:	2100      	movs	r1, #0
 80213be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80213c2:	6866      	ldr	r6, [r4, #4]
 80213c4:	60a6      	str	r6, [r4, #8]
 80213c6:	2e00      	cmp	r6, #0
 80213c8:	bfa2      	ittt	ge
 80213ca:	6821      	ldrge	r1, [r4, #0]
 80213cc:	f021 0104 	bicge.w	r1, r1, #4
 80213d0:	6021      	strge	r1, [r4, #0]
 80213d2:	b90d      	cbnz	r5, 80213d8 <_printf_i+0x118>
 80213d4:	2e00      	cmp	r6, #0
 80213d6:	d04d      	beq.n	8021474 <_printf_i+0x1b4>
 80213d8:	4616      	mov	r6, r2
 80213da:	fbb5 f1f3 	udiv	r1, r5, r3
 80213de:	fb03 5711 	mls	r7, r3, r1, r5
 80213e2:	5dc7      	ldrb	r7, [r0, r7]
 80213e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80213e8:	462f      	mov	r7, r5
 80213ea:	42bb      	cmp	r3, r7
 80213ec:	460d      	mov	r5, r1
 80213ee:	d9f4      	bls.n	80213da <_printf_i+0x11a>
 80213f0:	2b08      	cmp	r3, #8
 80213f2:	d10b      	bne.n	802140c <_printf_i+0x14c>
 80213f4:	6823      	ldr	r3, [r4, #0]
 80213f6:	07df      	lsls	r7, r3, #31
 80213f8:	d508      	bpl.n	802140c <_printf_i+0x14c>
 80213fa:	6923      	ldr	r3, [r4, #16]
 80213fc:	6861      	ldr	r1, [r4, #4]
 80213fe:	4299      	cmp	r1, r3
 8021400:	bfde      	ittt	le
 8021402:	2330      	movle	r3, #48	; 0x30
 8021404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021408:	f106 36ff 	addle.w	r6, r6, #4294967295
 802140c:	1b92      	subs	r2, r2, r6
 802140e:	6122      	str	r2, [r4, #16]
 8021410:	f8cd a000 	str.w	sl, [sp]
 8021414:	464b      	mov	r3, r9
 8021416:	aa03      	add	r2, sp, #12
 8021418:	4621      	mov	r1, r4
 802141a:	4640      	mov	r0, r8
 802141c:	f7ff fee2 	bl	80211e4 <_printf_common>
 8021420:	3001      	adds	r0, #1
 8021422:	d14c      	bne.n	80214be <_printf_i+0x1fe>
 8021424:	f04f 30ff 	mov.w	r0, #4294967295
 8021428:	b004      	add	sp, #16
 802142a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802142e:	4835      	ldr	r0, [pc, #212]	; (8021504 <_printf_i+0x244>)
 8021430:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021434:	6823      	ldr	r3, [r4, #0]
 8021436:	680e      	ldr	r6, [r1, #0]
 8021438:	061f      	lsls	r7, r3, #24
 802143a:	f856 5b04 	ldr.w	r5, [r6], #4
 802143e:	600e      	str	r6, [r1, #0]
 8021440:	d514      	bpl.n	802146c <_printf_i+0x1ac>
 8021442:	07d9      	lsls	r1, r3, #31
 8021444:	bf44      	itt	mi
 8021446:	f043 0320 	orrmi.w	r3, r3, #32
 802144a:	6023      	strmi	r3, [r4, #0]
 802144c:	b91d      	cbnz	r5, 8021456 <_printf_i+0x196>
 802144e:	6823      	ldr	r3, [r4, #0]
 8021450:	f023 0320 	bic.w	r3, r3, #32
 8021454:	6023      	str	r3, [r4, #0]
 8021456:	2310      	movs	r3, #16
 8021458:	e7b0      	b.n	80213bc <_printf_i+0xfc>
 802145a:	6823      	ldr	r3, [r4, #0]
 802145c:	f043 0320 	orr.w	r3, r3, #32
 8021460:	6023      	str	r3, [r4, #0]
 8021462:	2378      	movs	r3, #120	; 0x78
 8021464:	4828      	ldr	r0, [pc, #160]	; (8021508 <_printf_i+0x248>)
 8021466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802146a:	e7e3      	b.n	8021434 <_printf_i+0x174>
 802146c:	065e      	lsls	r6, r3, #25
 802146e:	bf48      	it	mi
 8021470:	b2ad      	uxthmi	r5, r5
 8021472:	e7e6      	b.n	8021442 <_printf_i+0x182>
 8021474:	4616      	mov	r6, r2
 8021476:	e7bb      	b.n	80213f0 <_printf_i+0x130>
 8021478:	680b      	ldr	r3, [r1, #0]
 802147a:	6826      	ldr	r6, [r4, #0]
 802147c:	6960      	ldr	r0, [r4, #20]
 802147e:	1d1d      	adds	r5, r3, #4
 8021480:	600d      	str	r5, [r1, #0]
 8021482:	0635      	lsls	r5, r6, #24
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	d501      	bpl.n	802148c <_printf_i+0x1cc>
 8021488:	6018      	str	r0, [r3, #0]
 802148a:	e002      	b.n	8021492 <_printf_i+0x1d2>
 802148c:	0671      	lsls	r1, r6, #25
 802148e:	d5fb      	bpl.n	8021488 <_printf_i+0x1c8>
 8021490:	8018      	strh	r0, [r3, #0]
 8021492:	2300      	movs	r3, #0
 8021494:	6123      	str	r3, [r4, #16]
 8021496:	4616      	mov	r6, r2
 8021498:	e7ba      	b.n	8021410 <_printf_i+0x150>
 802149a:	680b      	ldr	r3, [r1, #0]
 802149c:	1d1a      	adds	r2, r3, #4
 802149e:	600a      	str	r2, [r1, #0]
 80214a0:	681e      	ldr	r6, [r3, #0]
 80214a2:	6862      	ldr	r2, [r4, #4]
 80214a4:	2100      	movs	r1, #0
 80214a6:	4630      	mov	r0, r6
 80214a8:	f7de ff32 	bl	8000310 <memchr>
 80214ac:	b108      	cbz	r0, 80214b2 <_printf_i+0x1f2>
 80214ae:	1b80      	subs	r0, r0, r6
 80214b0:	6060      	str	r0, [r4, #4]
 80214b2:	6863      	ldr	r3, [r4, #4]
 80214b4:	6123      	str	r3, [r4, #16]
 80214b6:	2300      	movs	r3, #0
 80214b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80214bc:	e7a8      	b.n	8021410 <_printf_i+0x150>
 80214be:	6923      	ldr	r3, [r4, #16]
 80214c0:	4632      	mov	r2, r6
 80214c2:	4649      	mov	r1, r9
 80214c4:	4640      	mov	r0, r8
 80214c6:	47d0      	blx	sl
 80214c8:	3001      	adds	r0, #1
 80214ca:	d0ab      	beq.n	8021424 <_printf_i+0x164>
 80214cc:	6823      	ldr	r3, [r4, #0]
 80214ce:	079b      	lsls	r3, r3, #30
 80214d0:	d413      	bmi.n	80214fa <_printf_i+0x23a>
 80214d2:	68e0      	ldr	r0, [r4, #12]
 80214d4:	9b03      	ldr	r3, [sp, #12]
 80214d6:	4298      	cmp	r0, r3
 80214d8:	bfb8      	it	lt
 80214da:	4618      	movlt	r0, r3
 80214dc:	e7a4      	b.n	8021428 <_printf_i+0x168>
 80214de:	2301      	movs	r3, #1
 80214e0:	4632      	mov	r2, r6
 80214e2:	4649      	mov	r1, r9
 80214e4:	4640      	mov	r0, r8
 80214e6:	47d0      	blx	sl
 80214e8:	3001      	adds	r0, #1
 80214ea:	d09b      	beq.n	8021424 <_printf_i+0x164>
 80214ec:	3501      	adds	r5, #1
 80214ee:	68e3      	ldr	r3, [r4, #12]
 80214f0:	9903      	ldr	r1, [sp, #12]
 80214f2:	1a5b      	subs	r3, r3, r1
 80214f4:	42ab      	cmp	r3, r5
 80214f6:	dcf2      	bgt.n	80214de <_printf_i+0x21e>
 80214f8:	e7eb      	b.n	80214d2 <_printf_i+0x212>
 80214fa:	2500      	movs	r5, #0
 80214fc:	f104 0619 	add.w	r6, r4, #25
 8021500:	e7f5      	b.n	80214ee <_printf_i+0x22e>
 8021502:	bf00      	nop
 8021504:	08049b0a 	.word	0x08049b0a
 8021508:	08049b1b 	.word	0x08049b1b

0802150c <_sbrk_r>:
 802150c:	b538      	push	{r3, r4, r5, lr}
 802150e:	4d06      	ldr	r5, [pc, #24]	; (8021528 <_sbrk_r+0x1c>)
 8021510:	2300      	movs	r3, #0
 8021512:	4604      	mov	r4, r0
 8021514:	4608      	mov	r0, r1
 8021516:	602b      	str	r3, [r5, #0]
 8021518:	f002 fcec 	bl	8023ef4 <_sbrk>
 802151c:	1c43      	adds	r3, r0, #1
 802151e:	d102      	bne.n	8021526 <_sbrk_r+0x1a>
 8021520:	682b      	ldr	r3, [r5, #0]
 8021522:	b103      	cbz	r3, 8021526 <_sbrk_r+0x1a>
 8021524:	6023      	str	r3, [r4, #0]
 8021526:	bd38      	pop	{r3, r4, r5, pc}
 8021528:	240065b8 	.word	0x240065b8

0802152c <sniprintf>:
 802152c:	b40c      	push	{r2, r3}
 802152e:	b530      	push	{r4, r5, lr}
 8021530:	4b17      	ldr	r3, [pc, #92]	; (8021590 <sniprintf+0x64>)
 8021532:	1e0c      	subs	r4, r1, #0
 8021534:	681d      	ldr	r5, [r3, #0]
 8021536:	b09d      	sub	sp, #116	; 0x74
 8021538:	da08      	bge.n	802154c <sniprintf+0x20>
 802153a:	238b      	movs	r3, #139	; 0x8b
 802153c:	602b      	str	r3, [r5, #0]
 802153e:	f04f 30ff 	mov.w	r0, #4294967295
 8021542:	b01d      	add	sp, #116	; 0x74
 8021544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021548:	b002      	add	sp, #8
 802154a:	4770      	bx	lr
 802154c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021550:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021554:	bf14      	ite	ne
 8021556:	f104 33ff 	addne.w	r3, r4, #4294967295
 802155a:	4623      	moveq	r3, r4
 802155c:	9304      	str	r3, [sp, #16]
 802155e:	9307      	str	r3, [sp, #28]
 8021560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021564:	9002      	str	r0, [sp, #8]
 8021566:	9006      	str	r0, [sp, #24]
 8021568:	f8ad 3016 	strh.w	r3, [sp, #22]
 802156c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802156e:	ab21      	add	r3, sp, #132	; 0x84
 8021570:	a902      	add	r1, sp, #8
 8021572:	4628      	mov	r0, r5
 8021574:	9301      	str	r3, [sp, #4]
 8021576:	f001 fa6b 	bl	8022a50 <_svfiprintf_r>
 802157a:	1c43      	adds	r3, r0, #1
 802157c:	bfbc      	itt	lt
 802157e:	238b      	movlt	r3, #139	; 0x8b
 8021580:	602b      	strlt	r3, [r5, #0]
 8021582:	2c00      	cmp	r4, #0
 8021584:	d0dd      	beq.n	8021542 <sniprintf+0x16>
 8021586:	9b02      	ldr	r3, [sp, #8]
 8021588:	2200      	movs	r2, #0
 802158a:	701a      	strb	r2, [r3, #0]
 802158c:	e7d9      	b.n	8021542 <sniprintf+0x16>
 802158e:	bf00      	nop
 8021590:	24003050 	.word	0x24003050

08021594 <siprintf>:
 8021594:	b40e      	push	{r1, r2, r3}
 8021596:	b500      	push	{lr}
 8021598:	b09c      	sub	sp, #112	; 0x70
 802159a:	ab1d      	add	r3, sp, #116	; 0x74
 802159c:	9002      	str	r0, [sp, #8]
 802159e:	9006      	str	r0, [sp, #24]
 80215a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80215a4:	4809      	ldr	r0, [pc, #36]	; (80215cc <siprintf+0x38>)
 80215a6:	9107      	str	r1, [sp, #28]
 80215a8:	9104      	str	r1, [sp, #16]
 80215aa:	4909      	ldr	r1, [pc, #36]	; (80215d0 <siprintf+0x3c>)
 80215ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80215b0:	9105      	str	r1, [sp, #20]
 80215b2:	6800      	ldr	r0, [r0, #0]
 80215b4:	9301      	str	r3, [sp, #4]
 80215b6:	a902      	add	r1, sp, #8
 80215b8:	f001 fa4a 	bl	8022a50 <_svfiprintf_r>
 80215bc:	9b02      	ldr	r3, [sp, #8]
 80215be:	2200      	movs	r2, #0
 80215c0:	701a      	strb	r2, [r3, #0]
 80215c2:	b01c      	add	sp, #112	; 0x70
 80215c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80215c8:	b003      	add	sp, #12
 80215ca:	4770      	bx	lr
 80215cc:	24003050 	.word	0x24003050
 80215d0:	ffff0208 	.word	0xffff0208

080215d4 <stpcpy>:
 80215d4:	4603      	mov	r3, r0
 80215d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80215da:	4618      	mov	r0, r3
 80215dc:	f803 2b01 	strb.w	r2, [r3], #1
 80215e0:	2a00      	cmp	r2, #0
 80215e2:	d1f8      	bne.n	80215d6 <stpcpy+0x2>
 80215e4:	4770      	bx	lr

080215e6 <strcpy>:
 80215e6:	4603      	mov	r3, r0
 80215e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80215ec:	f803 2b01 	strb.w	r2, [r3], #1
 80215f0:	2a00      	cmp	r2, #0
 80215f2:	d1f9      	bne.n	80215e8 <strcpy+0x2>
 80215f4:	4770      	bx	lr

080215f6 <quorem>:
 80215f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215fa:	6903      	ldr	r3, [r0, #16]
 80215fc:	690c      	ldr	r4, [r1, #16]
 80215fe:	42a3      	cmp	r3, r4
 8021600:	4607      	mov	r7, r0
 8021602:	f2c0 8081 	blt.w	8021708 <quorem+0x112>
 8021606:	3c01      	subs	r4, #1
 8021608:	f101 0814 	add.w	r8, r1, #20
 802160c:	f100 0514 	add.w	r5, r0, #20
 8021610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021614:	9301      	str	r3, [sp, #4]
 8021616:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802161a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802161e:	3301      	adds	r3, #1
 8021620:	429a      	cmp	r2, r3
 8021622:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021626:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802162a:	fbb2 f6f3 	udiv	r6, r2, r3
 802162e:	d331      	bcc.n	8021694 <quorem+0x9e>
 8021630:	f04f 0e00 	mov.w	lr, #0
 8021634:	4640      	mov	r0, r8
 8021636:	46ac      	mov	ip, r5
 8021638:	46f2      	mov	sl, lr
 802163a:	f850 2b04 	ldr.w	r2, [r0], #4
 802163e:	b293      	uxth	r3, r2
 8021640:	fb06 e303 	mla	r3, r6, r3, lr
 8021644:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021648:	b29b      	uxth	r3, r3
 802164a:	ebaa 0303 	sub.w	r3, sl, r3
 802164e:	0c12      	lsrs	r2, r2, #16
 8021650:	f8dc a000 	ldr.w	sl, [ip]
 8021654:	fb06 e202 	mla	r2, r6, r2, lr
 8021658:	fa13 f38a 	uxtah	r3, r3, sl
 802165c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021660:	fa1f fa82 	uxth.w	sl, r2
 8021664:	f8dc 2000 	ldr.w	r2, [ip]
 8021668:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802166c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021670:	b29b      	uxth	r3, r3
 8021672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021676:	4581      	cmp	r9, r0
 8021678:	f84c 3b04 	str.w	r3, [ip], #4
 802167c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021680:	d2db      	bcs.n	802163a <quorem+0x44>
 8021682:	f855 300b 	ldr.w	r3, [r5, fp]
 8021686:	b92b      	cbnz	r3, 8021694 <quorem+0x9e>
 8021688:	9b01      	ldr	r3, [sp, #4]
 802168a:	3b04      	subs	r3, #4
 802168c:	429d      	cmp	r5, r3
 802168e:	461a      	mov	r2, r3
 8021690:	d32e      	bcc.n	80216f0 <quorem+0xfa>
 8021692:	613c      	str	r4, [r7, #16]
 8021694:	4638      	mov	r0, r7
 8021696:	f001 f84b 	bl	8022730 <__mcmp>
 802169a:	2800      	cmp	r0, #0
 802169c:	db24      	blt.n	80216e8 <quorem+0xf2>
 802169e:	3601      	adds	r6, #1
 80216a0:	4628      	mov	r0, r5
 80216a2:	f04f 0c00 	mov.w	ip, #0
 80216a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80216aa:	f8d0 e000 	ldr.w	lr, [r0]
 80216ae:	b293      	uxth	r3, r2
 80216b0:	ebac 0303 	sub.w	r3, ip, r3
 80216b4:	0c12      	lsrs	r2, r2, #16
 80216b6:	fa13 f38e 	uxtah	r3, r3, lr
 80216ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80216be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80216c2:	b29b      	uxth	r3, r3
 80216c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80216c8:	45c1      	cmp	r9, r8
 80216ca:	f840 3b04 	str.w	r3, [r0], #4
 80216ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80216d2:	d2e8      	bcs.n	80216a6 <quorem+0xb0>
 80216d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80216d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80216dc:	b922      	cbnz	r2, 80216e8 <quorem+0xf2>
 80216de:	3b04      	subs	r3, #4
 80216e0:	429d      	cmp	r5, r3
 80216e2:	461a      	mov	r2, r3
 80216e4:	d30a      	bcc.n	80216fc <quorem+0x106>
 80216e6:	613c      	str	r4, [r7, #16]
 80216e8:	4630      	mov	r0, r6
 80216ea:	b003      	add	sp, #12
 80216ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216f0:	6812      	ldr	r2, [r2, #0]
 80216f2:	3b04      	subs	r3, #4
 80216f4:	2a00      	cmp	r2, #0
 80216f6:	d1cc      	bne.n	8021692 <quorem+0x9c>
 80216f8:	3c01      	subs	r4, #1
 80216fa:	e7c7      	b.n	802168c <quorem+0x96>
 80216fc:	6812      	ldr	r2, [r2, #0]
 80216fe:	3b04      	subs	r3, #4
 8021700:	2a00      	cmp	r2, #0
 8021702:	d1f0      	bne.n	80216e6 <quorem+0xf0>
 8021704:	3c01      	subs	r4, #1
 8021706:	e7eb      	b.n	80216e0 <quorem+0xea>
 8021708:	2000      	movs	r0, #0
 802170a:	e7ee      	b.n	80216ea <quorem+0xf4>
 802170c:	0000      	movs	r0, r0
	...

08021710 <_dtoa_r>:
 8021710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021714:	ec59 8b10 	vmov	r8, r9, d0
 8021718:	b095      	sub	sp, #84	; 0x54
 802171a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802171c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802171e:	9107      	str	r1, [sp, #28]
 8021720:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8021724:	4606      	mov	r6, r0
 8021726:	9209      	str	r2, [sp, #36]	; 0x24
 8021728:	9310      	str	r3, [sp, #64]	; 0x40
 802172a:	b975      	cbnz	r5, 802174a <_dtoa_r+0x3a>
 802172c:	2010      	movs	r0, #16
 802172e:	f7ff f9c1 	bl	8020ab4 <malloc>
 8021732:	4602      	mov	r2, r0
 8021734:	6270      	str	r0, [r6, #36]	; 0x24
 8021736:	b920      	cbnz	r0, 8021742 <_dtoa_r+0x32>
 8021738:	4bab      	ldr	r3, [pc, #684]	; (80219e8 <_dtoa_r+0x2d8>)
 802173a:	21ea      	movs	r1, #234	; 0xea
 802173c:	48ab      	ldr	r0, [pc, #684]	; (80219ec <_dtoa_r+0x2dc>)
 802173e:	f001 fa87 	bl	8022c50 <__assert_func>
 8021742:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021746:	6005      	str	r5, [r0, #0]
 8021748:	60c5      	str	r5, [r0, #12]
 802174a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802174c:	6819      	ldr	r1, [r3, #0]
 802174e:	b151      	cbz	r1, 8021766 <_dtoa_r+0x56>
 8021750:	685a      	ldr	r2, [r3, #4]
 8021752:	604a      	str	r2, [r1, #4]
 8021754:	2301      	movs	r3, #1
 8021756:	4093      	lsls	r3, r2
 8021758:	608b      	str	r3, [r1, #8]
 802175a:	4630      	mov	r0, r6
 802175c:	f000 fdaa 	bl	80222b4 <_Bfree>
 8021760:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021762:	2200      	movs	r2, #0
 8021764:	601a      	str	r2, [r3, #0]
 8021766:	f1b9 0300 	subs.w	r3, r9, #0
 802176a:	bfbb      	ittet	lt
 802176c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021770:	9303      	strlt	r3, [sp, #12]
 8021772:	2300      	movge	r3, #0
 8021774:	2201      	movlt	r2, #1
 8021776:	bfac      	ite	ge
 8021778:	6023      	strge	r3, [r4, #0]
 802177a:	6022      	strlt	r2, [r4, #0]
 802177c:	4b9c      	ldr	r3, [pc, #624]	; (80219f0 <_dtoa_r+0x2e0>)
 802177e:	9c03      	ldr	r4, [sp, #12]
 8021780:	43a3      	bics	r3, r4
 8021782:	d11a      	bne.n	80217ba <_dtoa_r+0xaa>
 8021784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021786:	f242 730f 	movw	r3, #9999	; 0x270f
 802178a:	6013      	str	r3, [r2, #0]
 802178c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021790:	ea53 0308 	orrs.w	r3, r3, r8
 8021794:	f000 8512 	beq.w	80221bc <_dtoa_r+0xaac>
 8021798:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802179a:	b953      	cbnz	r3, 80217b2 <_dtoa_r+0xa2>
 802179c:	4b95      	ldr	r3, [pc, #596]	; (80219f4 <_dtoa_r+0x2e4>)
 802179e:	e01f      	b.n	80217e0 <_dtoa_r+0xd0>
 80217a0:	4b95      	ldr	r3, [pc, #596]	; (80219f8 <_dtoa_r+0x2e8>)
 80217a2:	9300      	str	r3, [sp, #0]
 80217a4:	3308      	adds	r3, #8
 80217a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80217a8:	6013      	str	r3, [r2, #0]
 80217aa:	9800      	ldr	r0, [sp, #0]
 80217ac:	b015      	add	sp, #84	; 0x54
 80217ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217b2:	4b90      	ldr	r3, [pc, #576]	; (80219f4 <_dtoa_r+0x2e4>)
 80217b4:	9300      	str	r3, [sp, #0]
 80217b6:	3303      	adds	r3, #3
 80217b8:	e7f5      	b.n	80217a6 <_dtoa_r+0x96>
 80217ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80217be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80217c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80217ca:	d10b      	bne.n	80217e4 <_dtoa_r+0xd4>
 80217cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217ce:	2301      	movs	r3, #1
 80217d0:	6013      	str	r3, [r2, #0]
 80217d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	f000 84ee 	beq.w	80221b6 <_dtoa_r+0xaa6>
 80217da:	4888      	ldr	r0, [pc, #544]	; (80219fc <_dtoa_r+0x2ec>)
 80217dc:	6018      	str	r0, [r3, #0]
 80217de:	1e43      	subs	r3, r0, #1
 80217e0:	9300      	str	r3, [sp, #0]
 80217e2:	e7e2      	b.n	80217aa <_dtoa_r+0x9a>
 80217e4:	a913      	add	r1, sp, #76	; 0x4c
 80217e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80217ea:	aa12      	add	r2, sp, #72	; 0x48
 80217ec:	4630      	mov	r0, r6
 80217ee:	f001 f843 	bl	8022878 <__d2b>
 80217f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80217f6:	4605      	mov	r5, r0
 80217f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80217fa:	2900      	cmp	r1, #0
 80217fc:	d047      	beq.n	802188e <_dtoa_r+0x17e>
 80217fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021800:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8021804:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021808:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802180c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021810:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021814:	2400      	movs	r4, #0
 8021816:	ec43 2b16 	vmov	d6, r2, r3
 802181a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802181e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80219d0 <_dtoa_r+0x2c0>
 8021822:	ee36 7b47 	vsub.f64	d7, d6, d7
 8021826:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80219d8 <_dtoa_r+0x2c8>
 802182a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802182e:	eeb0 7b46 	vmov.f64	d7, d6
 8021832:	ee06 1a90 	vmov	s13, r1
 8021836:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802183a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80219e0 <_dtoa_r+0x2d0>
 802183e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8021842:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021846:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802184e:	ee16 ba90 	vmov	fp, s13
 8021852:	9411      	str	r4, [sp, #68]	; 0x44
 8021854:	d508      	bpl.n	8021868 <_dtoa_r+0x158>
 8021856:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802185a:	eeb4 6b47 	vcmp.f64	d6, d7
 802185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021862:	bf18      	it	ne
 8021864:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8021868:	f1bb 0f16 	cmp.w	fp, #22
 802186c:	d832      	bhi.n	80218d4 <_dtoa_r+0x1c4>
 802186e:	4b64      	ldr	r3, [pc, #400]	; (8021a00 <_dtoa_r+0x2f0>)
 8021870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021874:	ed93 7b00 	vldr	d7, [r3]
 8021878:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802187c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021884:	d501      	bpl.n	802188a <_dtoa_r+0x17a>
 8021886:	f10b 3bff 	add.w	fp, fp, #4294967295
 802188a:	2300      	movs	r3, #0
 802188c:	e023      	b.n	80218d6 <_dtoa_r+0x1c6>
 802188e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021890:	4401      	add	r1, r0
 8021892:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8021896:	2b20      	cmp	r3, #32
 8021898:	bfc3      	ittte	gt
 802189a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802189e:	fa04 f303 	lslgt.w	r3, r4, r3
 80218a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80218a6:	f1c3 0320 	rsble	r3, r3, #32
 80218aa:	bfc6      	itte	gt
 80218ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 80218b0:	ea43 0308 	orrgt.w	r3, r3, r8
 80218b4:	fa08 f303 	lslle.w	r3, r8, r3
 80218b8:	ee07 3a90 	vmov	s15, r3
 80218bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80218c0:	3901      	subs	r1, #1
 80218c2:	ed8d 7b00 	vstr	d7, [sp]
 80218c6:	9c01      	ldr	r4, [sp, #4]
 80218c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80218cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80218d0:	2401      	movs	r4, #1
 80218d2:	e7a0      	b.n	8021816 <_dtoa_r+0x106>
 80218d4:	2301      	movs	r3, #1
 80218d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80218d8:	1a43      	subs	r3, r0, r1
 80218da:	1e5a      	subs	r2, r3, #1
 80218dc:	bf45      	ittet	mi
 80218de:	f1c3 0301 	rsbmi	r3, r3, #1
 80218e2:	9305      	strmi	r3, [sp, #20]
 80218e4:	2300      	movpl	r3, #0
 80218e6:	2300      	movmi	r3, #0
 80218e8:	9206      	str	r2, [sp, #24]
 80218ea:	bf54      	ite	pl
 80218ec:	9305      	strpl	r3, [sp, #20]
 80218ee:	9306      	strmi	r3, [sp, #24]
 80218f0:	f1bb 0f00 	cmp.w	fp, #0
 80218f4:	db18      	blt.n	8021928 <_dtoa_r+0x218>
 80218f6:	9b06      	ldr	r3, [sp, #24]
 80218f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80218fc:	445b      	add	r3, fp
 80218fe:	9306      	str	r3, [sp, #24]
 8021900:	2300      	movs	r3, #0
 8021902:	9a07      	ldr	r2, [sp, #28]
 8021904:	2a09      	cmp	r2, #9
 8021906:	d849      	bhi.n	802199c <_dtoa_r+0x28c>
 8021908:	2a05      	cmp	r2, #5
 802190a:	bfc4      	itt	gt
 802190c:	3a04      	subgt	r2, #4
 802190e:	9207      	strgt	r2, [sp, #28]
 8021910:	9a07      	ldr	r2, [sp, #28]
 8021912:	f1a2 0202 	sub.w	r2, r2, #2
 8021916:	bfcc      	ite	gt
 8021918:	2400      	movgt	r4, #0
 802191a:	2401      	movle	r4, #1
 802191c:	2a03      	cmp	r2, #3
 802191e:	d848      	bhi.n	80219b2 <_dtoa_r+0x2a2>
 8021920:	e8df f002 	tbb	[pc, r2]
 8021924:	3a2c2e0b 	.word	0x3a2c2e0b
 8021928:	9b05      	ldr	r3, [sp, #20]
 802192a:	2200      	movs	r2, #0
 802192c:	eba3 030b 	sub.w	r3, r3, fp
 8021930:	9305      	str	r3, [sp, #20]
 8021932:	920e      	str	r2, [sp, #56]	; 0x38
 8021934:	f1cb 0300 	rsb	r3, fp, #0
 8021938:	e7e3      	b.n	8021902 <_dtoa_r+0x1f2>
 802193a:	2200      	movs	r2, #0
 802193c:	9208      	str	r2, [sp, #32]
 802193e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021940:	2a00      	cmp	r2, #0
 8021942:	dc39      	bgt.n	80219b8 <_dtoa_r+0x2a8>
 8021944:	f04f 0a01 	mov.w	sl, #1
 8021948:	46d1      	mov	r9, sl
 802194a:	4652      	mov	r2, sl
 802194c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8021950:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8021952:	2100      	movs	r1, #0
 8021954:	6079      	str	r1, [r7, #4]
 8021956:	2004      	movs	r0, #4
 8021958:	f100 0c14 	add.w	ip, r0, #20
 802195c:	4594      	cmp	ip, r2
 802195e:	6879      	ldr	r1, [r7, #4]
 8021960:	d92f      	bls.n	80219c2 <_dtoa_r+0x2b2>
 8021962:	4630      	mov	r0, r6
 8021964:	930c      	str	r3, [sp, #48]	; 0x30
 8021966:	f000 fc65 	bl	8022234 <_Balloc>
 802196a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802196c:	9000      	str	r0, [sp, #0]
 802196e:	4602      	mov	r2, r0
 8021970:	2800      	cmp	r0, #0
 8021972:	d149      	bne.n	8021a08 <_dtoa_r+0x2f8>
 8021974:	4b23      	ldr	r3, [pc, #140]	; (8021a04 <_dtoa_r+0x2f4>)
 8021976:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802197a:	e6df      	b.n	802173c <_dtoa_r+0x2c>
 802197c:	2201      	movs	r2, #1
 802197e:	e7dd      	b.n	802193c <_dtoa_r+0x22c>
 8021980:	2200      	movs	r2, #0
 8021982:	9208      	str	r2, [sp, #32]
 8021984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021986:	eb0b 0a02 	add.w	sl, fp, r2
 802198a:	f10a 0901 	add.w	r9, sl, #1
 802198e:	464a      	mov	r2, r9
 8021990:	2a01      	cmp	r2, #1
 8021992:	bfb8      	it	lt
 8021994:	2201      	movlt	r2, #1
 8021996:	e7db      	b.n	8021950 <_dtoa_r+0x240>
 8021998:	2201      	movs	r2, #1
 802199a:	e7f2      	b.n	8021982 <_dtoa_r+0x272>
 802199c:	2401      	movs	r4, #1
 802199e:	2200      	movs	r2, #0
 80219a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80219a4:	f04f 3aff 	mov.w	sl, #4294967295
 80219a8:	2100      	movs	r1, #0
 80219aa:	46d1      	mov	r9, sl
 80219ac:	2212      	movs	r2, #18
 80219ae:	9109      	str	r1, [sp, #36]	; 0x24
 80219b0:	e7ce      	b.n	8021950 <_dtoa_r+0x240>
 80219b2:	2201      	movs	r2, #1
 80219b4:	9208      	str	r2, [sp, #32]
 80219b6:	e7f5      	b.n	80219a4 <_dtoa_r+0x294>
 80219b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80219bc:	46d1      	mov	r9, sl
 80219be:	4652      	mov	r2, sl
 80219c0:	e7c6      	b.n	8021950 <_dtoa_r+0x240>
 80219c2:	3101      	adds	r1, #1
 80219c4:	6079      	str	r1, [r7, #4]
 80219c6:	0040      	lsls	r0, r0, #1
 80219c8:	e7c6      	b.n	8021958 <_dtoa_r+0x248>
 80219ca:	bf00      	nop
 80219cc:	f3af 8000 	nop.w
 80219d0:	636f4361 	.word	0x636f4361
 80219d4:	3fd287a7 	.word	0x3fd287a7
 80219d8:	8b60c8b3 	.word	0x8b60c8b3
 80219dc:	3fc68a28 	.word	0x3fc68a28
 80219e0:	509f79fb 	.word	0x509f79fb
 80219e4:	3fd34413 	.word	0x3fd34413
 80219e8:	08049b39 	.word	0x08049b39
 80219ec:	08049b50 	.word	0x08049b50
 80219f0:	7ff00000 	.word	0x7ff00000
 80219f4:	08049b35 	.word	0x08049b35
 80219f8:	08049b2c 	.word	0x08049b2c
 80219fc:	08049b09 	.word	0x08049b09
 8021a00:	08049c48 	.word	0x08049c48
 8021a04:	08049baf 	.word	0x08049baf
 8021a08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8021a0a:	9900      	ldr	r1, [sp, #0]
 8021a0c:	6011      	str	r1, [r2, #0]
 8021a0e:	f1b9 0f0e 	cmp.w	r9, #14
 8021a12:	d872      	bhi.n	8021afa <_dtoa_r+0x3ea>
 8021a14:	2c00      	cmp	r4, #0
 8021a16:	d070      	beq.n	8021afa <_dtoa_r+0x3ea>
 8021a18:	f1bb 0f00 	cmp.w	fp, #0
 8021a1c:	f340 80a6 	ble.w	8021b6c <_dtoa_r+0x45c>
 8021a20:	49ca      	ldr	r1, [pc, #808]	; (8021d4c <_dtoa_r+0x63c>)
 8021a22:	f00b 020f 	and.w	r2, fp, #15
 8021a26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8021a2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8021a2e:	ed92 7b00 	vldr	d7, [r2]
 8021a32:	ea4f 112b 	mov.w	r1, fp, asr #4
 8021a36:	f000 808d 	beq.w	8021b54 <_dtoa_r+0x444>
 8021a3a:	4ac5      	ldr	r2, [pc, #788]	; (8021d50 <_dtoa_r+0x640>)
 8021a3c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8021a40:	ed92 6b08 	vldr	d6, [r2, #32]
 8021a44:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8021a48:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021a4c:	f001 010f 	and.w	r1, r1, #15
 8021a50:	2203      	movs	r2, #3
 8021a52:	48bf      	ldr	r0, [pc, #764]	; (8021d50 <_dtoa_r+0x640>)
 8021a54:	2900      	cmp	r1, #0
 8021a56:	d17f      	bne.n	8021b58 <_dtoa_r+0x448>
 8021a58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021a5c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021a60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021a64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021a66:	2900      	cmp	r1, #0
 8021a68:	f000 80b2 	beq.w	8021bd0 <_dtoa_r+0x4c0>
 8021a6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021a74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a7c:	f140 80a8 	bpl.w	8021bd0 <_dtoa_r+0x4c0>
 8021a80:	f1b9 0f00 	cmp.w	r9, #0
 8021a84:	f000 80a4 	beq.w	8021bd0 <_dtoa_r+0x4c0>
 8021a88:	f1ba 0f00 	cmp.w	sl, #0
 8021a8c:	dd31      	ble.n	8021af2 <_dtoa_r+0x3e2>
 8021a8e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8021a92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021a9a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8021a9e:	3201      	adds	r2, #1
 8021aa0:	4650      	mov	r0, sl
 8021aa2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021aa6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8021aaa:	ee07 2a90 	vmov	s15, r2
 8021aae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021ab2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021ab6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8021aba:	9c03      	ldr	r4, [sp, #12]
 8021abc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8021ac0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8021ac4:	2800      	cmp	r0, #0
 8021ac6:	f040 8086 	bne.w	8021bd6 <_dtoa_r+0x4c6>
 8021aca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021ace:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021ad2:	ec42 1b17 	vmov	d7, r1, r2
 8021ad6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ade:	f300 8272 	bgt.w	8021fc6 <_dtoa_r+0x8b6>
 8021ae2:	eeb1 7b47 	vneg.f64	d7, d7
 8021ae6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aee:	f100 8267 	bmi.w	8021fc0 <_dtoa_r+0x8b0>
 8021af2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8021af6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8021afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021afc:	2a00      	cmp	r2, #0
 8021afe:	f2c0 8129 	blt.w	8021d54 <_dtoa_r+0x644>
 8021b02:	f1bb 0f0e 	cmp.w	fp, #14
 8021b06:	f300 8125 	bgt.w	8021d54 <_dtoa_r+0x644>
 8021b0a:	4b90      	ldr	r3, [pc, #576]	; (8021d4c <_dtoa_r+0x63c>)
 8021b0c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021b10:	ed93 6b00 	vldr	d6, [r3]
 8021b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	f280 80c3 	bge.w	8021ca2 <_dtoa_r+0x592>
 8021b1c:	f1b9 0f00 	cmp.w	r9, #0
 8021b20:	f300 80bf 	bgt.w	8021ca2 <_dtoa_r+0x592>
 8021b24:	f040 824c 	bne.w	8021fc0 <_dtoa_r+0x8b0>
 8021b28:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021b2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8021b30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021b34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b3c:	464c      	mov	r4, r9
 8021b3e:	464f      	mov	r7, r9
 8021b40:	f280 8222 	bge.w	8021f88 <_dtoa_r+0x878>
 8021b44:	f8dd 8000 	ldr.w	r8, [sp]
 8021b48:	2331      	movs	r3, #49	; 0x31
 8021b4a:	f808 3b01 	strb.w	r3, [r8], #1
 8021b4e:	f10b 0b01 	add.w	fp, fp, #1
 8021b52:	e21e      	b.n	8021f92 <_dtoa_r+0x882>
 8021b54:	2202      	movs	r2, #2
 8021b56:	e77c      	b.n	8021a52 <_dtoa_r+0x342>
 8021b58:	07cc      	lsls	r4, r1, #31
 8021b5a:	d504      	bpl.n	8021b66 <_dtoa_r+0x456>
 8021b5c:	ed90 6b00 	vldr	d6, [r0]
 8021b60:	3201      	adds	r2, #1
 8021b62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021b66:	1049      	asrs	r1, r1, #1
 8021b68:	3008      	adds	r0, #8
 8021b6a:	e773      	b.n	8021a54 <_dtoa_r+0x344>
 8021b6c:	d02e      	beq.n	8021bcc <_dtoa_r+0x4bc>
 8021b6e:	f1cb 0100 	rsb	r1, fp, #0
 8021b72:	4a76      	ldr	r2, [pc, #472]	; (8021d4c <_dtoa_r+0x63c>)
 8021b74:	f001 000f 	and.w	r0, r1, #15
 8021b78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021b7c:	ed92 7b00 	vldr	d7, [r2]
 8021b80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8021b84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021b88:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021b8c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8021b90:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8021b94:	486e      	ldr	r0, [pc, #440]	; (8021d50 <_dtoa_r+0x640>)
 8021b96:	1109      	asrs	r1, r1, #4
 8021b98:	2400      	movs	r4, #0
 8021b9a:	2202      	movs	r2, #2
 8021b9c:	b939      	cbnz	r1, 8021bae <_dtoa_r+0x49e>
 8021b9e:	2c00      	cmp	r4, #0
 8021ba0:	f43f af60 	beq.w	8021a64 <_dtoa_r+0x354>
 8021ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021bac:	e75a      	b.n	8021a64 <_dtoa_r+0x354>
 8021bae:	07cf      	lsls	r7, r1, #31
 8021bb0:	d509      	bpl.n	8021bc6 <_dtoa_r+0x4b6>
 8021bb2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8021bb6:	ed90 7b00 	vldr	d7, [r0]
 8021bba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021bbe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021bc2:	3201      	adds	r2, #1
 8021bc4:	2401      	movs	r4, #1
 8021bc6:	1049      	asrs	r1, r1, #1
 8021bc8:	3008      	adds	r0, #8
 8021bca:	e7e7      	b.n	8021b9c <_dtoa_r+0x48c>
 8021bcc:	2202      	movs	r2, #2
 8021bce:	e749      	b.n	8021a64 <_dtoa_r+0x354>
 8021bd0:	465f      	mov	r7, fp
 8021bd2:	4648      	mov	r0, r9
 8021bd4:	e765      	b.n	8021aa2 <_dtoa_r+0x392>
 8021bd6:	ec42 1b17 	vmov	d7, r1, r2
 8021bda:	4a5c      	ldr	r2, [pc, #368]	; (8021d4c <_dtoa_r+0x63c>)
 8021bdc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021be0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8021be4:	9a00      	ldr	r2, [sp, #0]
 8021be6:	1814      	adds	r4, r2, r0
 8021be8:	9a08      	ldr	r2, [sp, #32]
 8021bea:	b352      	cbz	r2, 8021c42 <_dtoa_r+0x532>
 8021bec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8021bf0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021bf4:	f8dd 8000 	ldr.w	r8, [sp]
 8021bf8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021bfc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021c00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021c04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021c08:	ee14 2a90 	vmov	r2, s9
 8021c0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021c10:	3230      	adds	r2, #48	; 0x30
 8021c12:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021c16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c1e:	f808 2b01 	strb.w	r2, [r8], #1
 8021c22:	d439      	bmi.n	8021c98 <_dtoa_r+0x588>
 8021c24:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021c28:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c30:	d472      	bmi.n	8021d18 <_dtoa_r+0x608>
 8021c32:	45a0      	cmp	r8, r4
 8021c34:	f43f af5d 	beq.w	8021af2 <_dtoa_r+0x3e2>
 8021c38:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021c3c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021c40:	e7e0      	b.n	8021c04 <_dtoa_r+0x4f4>
 8021c42:	f8dd 8000 	ldr.w	r8, [sp]
 8021c46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021c4a:	4621      	mov	r1, r4
 8021c4c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021c50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021c54:	ee14 2a90 	vmov	r2, s9
 8021c58:	3230      	adds	r2, #48	; 0x30
 8021c5a:	f808 2b01 	strb.w	r2, [r8], #1
 8021c5e:	45a0      	cmp	r8, r4
 8021c60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021c64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021c68:	d118      	bne.n	8021c9c <_dtoa_r+0x58c>
 8021c6a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021c6e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021c72:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c7a:	dc4d      	bgt.n	8021d18 <_dtoa_r+0x608>
 8021c7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021c80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c88:	f57f af33 	bpl.w	8021af2 <_dtoa_r+0x3e2>
 8021c8c:	4688      	mov	r8, r1
 8021c8e:	3901      	subs	r1, #1
 8021c90:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021c94:	2b30      	cmp	r3, #48	; 0x30
 8021c96:	d0f9      	beq.n	8021c8c <_dtoa_r+0x57c>
 8021c98:	46bb      	mov	fp, r7
 8021c9a:	e02a      	b.n	8021cf2 <_dtoa_r+0x5e2>
 8021c9c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021ca0:	e7d6      	b.n	8021c50 <_dtoa_r+0x540>
 8021ca2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021ca6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8021caa:	f8dd 8000 	ldr.w	r8, [sp]
 8021cae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8021cb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8021cb6:	ee15 3a10 	vmov	r3, s10
 8021cba:	3330      	adds	r3, #48	; 0x30
 8021cbc:	f808 3b01 	strb.w	r3, [r8], #1
 8021cc0:	9b00      	ldr	r3, [sp, #0]
 8021cc2:	eba8 0303 	sub.w	r3, r8, r3
 8021cc6:	4599      	cmp	r9, r3
 8021cc8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021ccc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021cd0:	d133      	bne.n	8021d3a <_dtoa_r+0x62a>
 8021cd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021cd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cde:	dc1a      	bgt.n	8021d16 <_dtoa_r+0x606>
 8021ce0:	eeb4 7b46 	vcmp.f64	d7, d6
 8021ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ce8:	d103      	bne.n	8021cf2 <_dtoa_r+0x5e2>
 8021cea:	ee15 3a10 	vmov	r3, s10
 8021cee:	07d9      	lsls	r1, r3, #31
 8021cf0:	d411      	bmi.n	8021d16 <_dtoa_r+0x606>
 8021cf2:	4629      	mov	r1, r5
 8021cf4:	4630      	mov	r0, r6
 8021cf6:	f000 fadd 	bl	80222b4 <_Bfree>
 8021cfa:	2300      	movs	r3, #0
 8021cfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cfe:	f888 3000 	strb.w	r3, [r8]
 8021d02:	f10b 0301 	add.w	r3, fp, #1
 8021d06:	6013      	str	r3, [r2, #0]
 8021d08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	f43f ad4d 	beq.w	80217aa <_dtoa_r+0x9a>
 8021d10:	f8c3 8000 	str.w	r8, [r3]
 8021d14:	e549      	b.n	80217aa <_dtoa_r+0x9a>
 8021d16:	465f      	mov	r7, fp
 8021d18:	4643      	mov	r3, r8
 8021d1a:	4698      	mov	r8, r3
 8021d1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021d20:	2a39      	cmp	r2, #57	; 0x39
 8021d22:	d106      	bne.n	8021d32 <_dtoa_r+0x622>
 8021d24:	9a00      	ldr	r2, [sp, #0]
 8021d26:	429a      	cmp	r2, r3
 8021d28:	d1f7      	bne.n	8021d1a <_dtoa_r+0x60a>
 8021d2a:	9900      	ldr	r1, [sp, #0]
 8021d2c:	2230      	movs	r2, #48	; 0x30
 8021d2e:	3701      	adds	r7, #1
 8021d30:	700a      	strb	r2, [r1, #0]
 8021d32:	781a      	ldrb	r2, [r3, #0]
 8021d34:	3201      	adds	r2, #1
 8021d36:	701a      	strb	r2, [r3, #0]
 8021d38:	e7ae      	b.n	8021c98 <_dtoa_r+0x588>
 8021d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021d3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d46:	d1b2      	bne.n	8021cae <_dtoa_r+0x59e>
 8021d48:	e7d3      	b.n	8021cf2 <_dtoa_r+0x5e2>
 8021d4a:	bf00      	nop
 8021d4c:	08049c48 	.word	0x08049c48
 8021d50:	08049c20 	.word	0x08049c20
 8021d54:	9908      	ldr	r1, [sp, #32]
 8021d56:	2900      	cmp	r1, #0
 8021d58:	f000 80d1 	beq.w	8021efe <_dtoa_r+0x7ee>
 8021d5c:	9907      	ldr	r1, [sp, #28]
 8021d5e:	2901      	cmp	r1, #1
 8021d60:	f300 80b4 	bgt.w	8021ecc <_dtoa_r+0x7bc>
 8021d64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021d66:	2900      	cmp	r1, #0
 8021d68:	f000 80ac 	beq.w	8021ec4 <_dtoa_r+0x7b4>
 8021d6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021d70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021d74:	461c      	mov	r4, r3
 8021d76:	930a      	str	r3, [sp, #40]	; 0x28
 8021d78:	9b05      	ldr	r3, [sp, #20]
 8021d7a:	4413      	add	r3, r2
 8021d7c:	9305      	str	r3, [sp, #20]
 8021d7e:	9b06      	ldr	r3, [sp, #24]
 8021d80:	2101      	movs	r1, #1
 8021d82:	4413      	add	r3, r2
 8021d84:	4630      	mov	r0, r6
 8021d86:	9306      	str	r3, [sp, #24]
 8021d88:	f000 fb50 	bl	802242c <__i2b>
 8021d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d8e:	4607      	mov	r7, r0
 8021d90:	f1b8 0f00 	cmp.w	r8, #0
 8021d94:	dd0d      	ble.n	8021db2 <_dtoa_r+0x6a2>
 8021d96:	9a06      	ldr	r2, [sp, #24]
 8021d98:	2a00      	cmp	r2, #0
 8021d9a:	dd0a      	ble.n	8021db2 <_dtoa_r+0x6a2>
 8021d9c:	4542      	cmp	r2, r8
 8021d9e:	9905      	ldr	r1, [sp, #20]
 8021da0:	bfa8      	it	ge
 8021da2:	4642      	movge	r2, r8
 8021da4:	1a89      	subs	r1, r1, r2
 8021da6:	9105      	str	r1, [sp, #20]
 8021da8:	9906      	ldr	r1, [sp, #24]
 8021daa:	eba8 0802 	sub.w	r8, r8, r2
 8021dae:	1a8a      	subs	r2, r1, r2
 8021db0:	9206      	str	r2, [sp, #24]
 8021db2:	b303      	cbz	r3, 8021df6 <_dtoa_r+0x6e6>
 8021db4:	9a08      	ldr	r2, [sp, #32]
 8021db6:	2a00      	cmp	r2, #0
 8021db8:	f000 80a6 	beq.w	8021f08 <_dtoa_r+0x7f8>
 8021dbc:	2c00      	cmp	r4, #0
 8021dbe:	dd13      	ble.n	8021de8 <_dtoa_r+0x6d8>
 8021dc0:	4639      	mov	r1, r7
 8021dc2:	4622      	mov	r2, r4
 8021dc4:	4630      	mov	r0, r6
 8021dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8021dc8:	f000 fbec 	bl	80225a4 <__pow5mult>
 8021dcc:	462a      	mov	r2, r5
 8021dce:	4601      	mov	r1, r0
 8021dd0:	4607      	mov	r7, r0
 8021dd2:	4630      	mov	r0, r6
 8021dd4:	f000 fb40 	bl	8022458 <__multiply>
 8021dd8:	4629      	mov	r1, r5
 8021dda:	900a      	str	r0, [sp, #40]	; 0x28
 8021ddc:	4630      	mov	r0, r6
 8021dde:	f000 fa69 	bl	80222b4 <_Bfree>
 8021de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021de6:	4615      	mov	r5, r2
 8021de8:	1b1a      	subs	r2, r3, r4
 8021dea:	d004      	beq.n	8021df6 <_dtoa_r+0x6e6>
 8021dec:	4629      	mov	r1, r5
 8021dee:	4630      	mov	r0, r6
 8021df0:	f000 fbd8 	bl	80225a4 <__pow5mult>
 8021df4:	4605      	mov	r5, r0
 8021df6:	2101      	movs	r1, #1
 8021df8:	4630      	mov	r0, r6
 8021dfa:	f000 fb17 	bl	802242c <__i2b>
 8021dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	4604      	mov	r4, r0
 8021e04:	f340 8082 	ble.w	8021f0c <_dtoa_r+0x7fc>
 8021e08:	461a      	mov	r2, r3
 8021e0a:	4601      	mov	r1, r0
 8021e0c:	4630      	mov	r0, r6
 8021e0e:	f000 fbc9 	bl	80225a4 <__pow5mult>
 8021e12:	9b07      	ldr	r3, [sp, #28]
 8021e14:	2b01      	cmp	r3, #1
 8021e16:	4604      	mov	r4, r0
 8021e18:	dd7b      	ble.n	8021f12 <_dtoa_r+0x802>
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8021e1e:	6922      	ldr	r2, [r4, #16]
 8021e20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021e24:	6910      	ldr	r0, [r2, #16]
 8021e26:	f000 fab1 	bl	802238c <__hi0bits>
 8021e2a:	f1c0 0020 	rsb	r0, r0, #32
 8021e2e:	9b06      	ldr	r3, [sp, #24]
 8021e30:	4418      	add	r0, r3
 8021e32:	f010 001f 	ands.w	r0, r0, #31
 8021e36:	f000 808d 	beq.w	8021f54 <_dtoa_r+0x844>
 8021e3a:	f1c0 0220 	rsb	r2, r0, #32
 8021e3e:	2a04      	cmp	r2, #4
 8021e40:	f340 8086 	ble.w	8021f50 <_dtoa_r+0x840>
 8021e44:	f1c0 001c 	rsb	r0, r0, #28
 8021e48:	9b05      	ldr	r3, [sp, #20]
 8021e4a:	4403      	add	r3, r0
 8021e4c:	9305      	str	r3, [sp, #20]
 8021e4e:	9b06      	ldr	r3, [sp, #24]
 8021e50:	4403      	add	r3, r0
 8021e52:	4480      	add	r8, r0
 8021e54:	9306      	str	r3, [sp, #24]
 8021e56:	9b05      	ldr	r3, [sp, #20]
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	dd05      	ble.n	8021e68 <_dtoa_r+0x758>
 8021e5c:	4629      	mov	r1, r5
 8021e5e:	461a      	mov	r2, r3
 8021e60:	4630      	mov	r0, r6
 8021e62:	f000 fbf9 	bl	8022658 <__lshift>
 8021e66:	4605      	mov	r5, r0
 8021e68:	9b06      	ldr	r3, [sp, #24]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	dd05      	ble.n	8021e7a <_dtoa_r+0x76a>
 8021e6e:	4621      	mov	r1, r4
 8021e70:	461a      	mov	r2, r3
 8021e72:	4630      	mov	r0, r6
 8021e74:	f000 fbf0 	bl	8022658 <__lshift>
 8021e78:	4604      	mov	r4, r0
 8021e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d06b      	beq.n	8021f58 <_dtoa_r+0x848>
 8021e80:	4621      	mov	r1, r4
 8021e82:	4628      	mov	r0, r5
 8021e84:	f000 fc54 	bl	8022730 <__mcmp>
 8021e88:	2800      	cmp	r0, #0
 8021e8a:	da65      	bge.n	8021f58 <_dtoa_r+0x848>
 8021e8c:	2300      	movs	r3, #0
 8021e8e:	4629      	mov	r1, r5
 8021e90:	220a      	movs	r2, #10
 8021e92:	4630      	mov	r0, r6
 8021e94:	f000 fa30 	bl	80222f8 <__multadd>
 8021e98:	9b08      	ldr	r3, [sp, #32]
 8021e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e9e:	4605      	mov	r5, r0
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	f000 8192 	beq.w	80221ca <_dtoa_r+0xaba>
 8021ea6:	4639      	mov	r1, r7
 8021ea8:	2300      	movs	r3, #0
 8021eaa:	220a      	movs	r2, #10
 8021eac:	4630      	mov	r0, r6
 8021eae:	f000 fa23 	bl	80222f8 <__multadd>
 8021eb2:	f1ba 0f00 	cmp.w	sl, #0
 8021eb6:	4607      	mov	r7, r0
 8021eb8:	f300 808e 	bgt.w	8021fd8 <_dtoa_r+0x8c8>
 8021ebc:	9b07      	ldr	r3, [sp, #28]
 8021ebe:	2b02      	cmp	r3, #2
 8021ec0:	dc51      	bgt.n	8021f66 <_dtoa_r+0x856>
 8021ec2:	e089      	b.n	8021fd8 <_dtoa_r+0x8c8>
 8021ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021ec6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8021eca:	e751      	b.n	8021d70 <_dtoa_r+0x660>
 8021ecc:	f109 34ff 	add.w	r4, r9, #4294967295
 8021ed0:	42a3      	cmp	r3, r4
 8021ed2:	bfbf      	itttt	lt
 8021ed4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8021ed6:	1ae3      	sublt	r3, r4, r3
 8021ed8:	18d2      	addlt	r2, r2, r3
 8021eda:	4613      	movlt	r3, r2
 8021edc:	bfb7      	itett	lt
 8021ede:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021ee0:	1b1c      	subge	r4, r3, r4
 8021ee2:	4623      	movlt	r3, r4
 8021ee4:	2400      	movlt	r4, #0
 8021ee6:	f1b9 0f00 	cmp.w	r9, #0
 8021eea:	bfb5      	itete	lt
 8021eec:	9a05      	ldrlt	r2, [sp, #20]
 8021eee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8021ef2:	eba2 0809 	sublt.w	r8, r2, r9
 8021ef6:	464a      	movge	r2, r9
 8021ef8:	bfb8      	it	lt
 8021efa:	2200      	movlt	r2, #0
 8021efc:	e73b      	b.n	8021d76 <_dtoa_r+0x666>
 8021efe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021f02:	9f08      	ldr	r7, [sp, #32]
 8021f04:	461c      	mov	r4, r3
 8021f06:	e743      	b.n	8021d90 <_dtoa_r+0x680>
 8021f08:	461a      	mov	r2, r3
 8021f0a:	e76f      	b.n	8021dec <_dtoa_r+0x6dc>
 8021f0c:	9b07      	ldr	r3, [sp, #28]
 8021f0e:	2b01      	cmp	r3, #1
 8021f10:	dc18      	bgt.n	8021f44 <_dtoa_r+0x834>
 8021f12:	9b02      	ldr	r3, [sp, #8]
 8021f14:	b9b3      	cbnz	r3, 8021f44 <_dtoa_r+0x834>
 8021f16:	9b03      	ldr	r3, [sp, #12]
 8021f18:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021f1c:	b9a2      	cbnz	r2, 8021f48 <_dtoa_r+0x838>
 8021f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021f22:	0d12      	lsrs	r2, r2, #20
 8021f24:	0512      	lsls	r2, r2, #20
 8021f26:	b18a      	cbz	r2, 8021f4c <_dtoa_r+0x83c>
 8021f28:	9b05      	ldr	r3, [sp, #20]
 8021f2a:	3301      	adds	r3, #1
 8021f2c:	9305      	str	r3, [sp, #20]
 8021f2e:	9b06      	ldr	r3, [sp, #24]
 8021f30:	3301      	adds	r3, #1
 8021f32:	9306      	str	r3, [sp, #24]
 8021f34:	2301      	movs	r3, #1
 8021f36:	930a      	str	r3, [sp, #40]	; 0x28
 8021f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	f47f af6f 	bne.w	8021e1e <_dtoa_r+0x70e>
 8021f40:	2001      	movs	r0, #1
 8021f42:	e774      	b.n	8021e2e <_dtoa_r+0x71e>
 8021f44:	2300      	movs	r3, #0
 8021f46:	e7f6      	b.n	8021f36 <_dtoa_r+0x826>
 8021f48:	9b02      	ldr	r3, [sp, #8]
 8021f4a:	e7f4      	b.n	8021f36 <_dtoa_r+0x826>
 8021f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8021f4e:	e7f3      	b.n	8021f38 <_dtoa_r+0x828>
 8021f50:	d081      	beq.n	8021e56 <_dtoa_r+0x746>
 8021f52:	4610      	mov	r0, r2
 8021f54:	301c      	adds	r0, #28
 8021f56:	e777      	b.n	8021e48 <_dtoa_r+0x738>
 8021f58:	f1b9 0f00 	cmp.w	r9, #0
 8021f5c:	dc37      	bgt.n	8021fce <_dtoa_r+0x8be>
 8021f5e:	9b07      	ldr	r3, [sp, #28]
 8021f60:	2b02      	cmp	r3, #2
 8021f62:	dd34      	ble.n	8021fce <_dtoa_r+0x8be>
 8021f64:	46ca      	mov	sl, r9
 8021f66:	f1ba 0f00 	cmp.w	sl, #0
 8021f6a:	d10d      	bne.n	8021f88 <_dtoa_r+0x878>
 8021f6c:	4621      	mov	r1, r4
 8021f6e:	4653      	mov	r3, sl
 8021f70:	2205      	movs	r2, #5
 8021f72:	4630      	mov	r0, r6
 8021f74:	f000 f9c0 	bl	80222f8 <__multadd>
 8021f78:	4601      	mov	r1, r0
 8021f7a:	4604      	mov	r4, r0
 8021f7c:	4628      	mov	r0, r5
 8021f7e:	f000 fbd7 	bl	8022730 <__mcmp>
 8021f82:	2800      	cmp	r0, #0
 8021f84:	f73f adde 	bgt.w	8021b44 <_dtoa_r+0x434>
 8021f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f8a:	f8dd 8000 	ldr.w	r8, [sp]
 8021f8e:	ea6f 0b03 	mvn.w	fp, r3
 8021f92:	f04f 0900 	mov.w	r9, #0
 8021f96:	4621      	mov	r1, r4
 8021f98:	4630      	mov	r0, r6
 8021f9a:	f000 f98b 	bl	80222b4 <_Bfree>
 8021f9e:	2f00      	cmp	r7, #0
 8021fa0:	f43f aea7 	beq.w	8021cf2 <_dtoa_r+0x5e2>
 8021fa4:	f1b9 0f00 	cmp.w	r9, #0
 8021fa8:	d005      	beq.n	8021fb6 <_dtoa_r+0x8a6>
 8021faa:	45b9      	cmp	r9, r7
 8021fac:	d003      	beq.n	8021fb6 <_dtoa_r+0x8a6>
 8021fae:	4649      	mov	r1, r9
 8021fb0:	4630      	mov	r0, r6
 8021fb2:	f000 f97f 	bl	80222b4 <_Bfree>
 8021fb6:	4639      	mov	r1, r7
 8021fb8:	4630      	mov	r0, r6
 8021fba:	f000 f97b 	bl	80222b4 <_Bfree>
 8021fbe:	e698      	b.n	8021cf2 <_dtoa_r+0x5e2>
 8021fc0:	2400      	movs	r4, #0
 8021fc2:	4627      	mov	r7, r4
 8021fc4:	e7e0      	b.n	8021f88 <_dtoa_r+0x878>
 8021fc6:	46bb      	mov	fp, r7
 8021fc8:	4604      	mov	r4, r0
 8021fca:	4607      	mov	r7, r0
 8021fcc:	e5ba      	b.n	8021b44 <_dtoa_r+0x434>
 8021fce:	9b08      	ldr	r3, [sp, #32]
 8021fd0:	46ca      	mov	sl, r9
 8021fd2:	2b00      	cmp	r3, #0
 8021fd4:	f000 8100 	beq.w	80221d8 <_dtoa_r+0xac8>
 8021fd8:	f1b8 0f00 	cmp.w	r8, #0
 8021fdc:	dd05      	ble.n	8021fea <_dtoa_r+0x8da>
 8021fde:	4639      	mov	r1, r7
 8021fe0:	4642      	mov	r2, r8
 8021fe2:	4630      	mov	r0, r6
 8021fe4:	f000 fb38 	bl	8022658 <__lshift>
 8021fe8:	4607      	mov	r7, r0
 8021fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fec:	2b00      	cmp	r3, #0
 8021fee:	d05d      	beq.n	80220ac <_dtoa_r+0x99c>
 8021ff0:	6879      	ldr	r1, [r7, #4]
 8021ff2:	4630      	mov	r0, r6
 8021ff4:	f000 f91e 	bl	8022234 <_Balloc>
 8021ff8:	4680      	mov	r8, r0
 8021ffa:	b928      	cbnz	r0, 8022008 <_dtoa_r+0x8f8>
 8021ffc:	4b82      	ldr	r3, [pc, #520]	; (8022208 <_dtoa_r+0xaf8>)
 8021ffe:	4602      	mov	r2, r0
 8022000:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022004:	f7ff bb9a 	b.w	802173c <_dtoa_r+0x2c>
 8022008:	693a      	ldr	r2, [r7, #16]
 802200a:	3202      	adds	r2, #2
 802200c:	0092      	lsls	r2, r2, #2
 802200e:	f107 010c 	add.w	r1, r7, #12
 8022012:	300c      	adds	r0, #12
 8022014:	f7fe fd5e 	bl	8020ad4 <memcpy>
 8022018:	2201      	movs	r2, #1
 802201a:	4641      	mov	r1, r8
 802201c:	4630      	mov	r0, r6
 802201e:	f000 fb1b 	bl	8022658 <__lshift>
 8022022:	9b00      	ldr	r3, [sp, #0]
 8022024:	3301      	adds	r3, #1
 8022026:	9305      	str	r3, [sp, #20]
 8022028:	9b00      	ldr	r3, [sp, #0]
 802202a:	4453      	add	r3, sl
 802202c:	9309      	str	r3, [sp, #36]	; 0x24
 802202e:	9b02      	ldr	r3, [sp, #8]
 8022030:	f003 0301 	and.w	r3, r3, #1
 8022034:	46b9      	mov	r9, r7
 8022036:	9308      	str	r3, [sp, #32]
 8022038:	4607      	mov	r7, r0
 802203a:	9b05      	ldr	r3, [sp, #20]
 802203c:	4621      	mov	r1, r4
 802203e:	3b01      	subs	r3, #1
 8022040:	4628      	mov	r0, r5
 8022042:	9302      	str	r3, [sp, #8]
 8022044:	f7ff fad7 	bl	80215f6 <quorem>
 8022048:	4603      	mov	r3, r0
 802204a:	3330      	adds	r3, #48	; 0x30
 802204c:	9006      	str	r0, [sp, #24]
 802204e:	4649      	mov	r1, r9
 8022050:	4628      	mov	r0, r5
 8022052:	930a      	str	r3, [sp, #40]	; 0x28
 8022054:	f000 fb6c 	bl	8022730 <__mcmp>
 8022058:	463a      	mov	r2, r7
 802205a:	4682      	mov	sl, r0
 802205c:	4621      	mov	r1, r4
 802205e:	4630      	mov	r0, r6
 8022060:	f000 fb82 	bl	8022768 <__mdiff>
 8022064:	68c2      	ldr	r2, [r0, #12]
 8022066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022068:	4680      	mov	r8, r0
 802206a:	bb0a      	cbnz	r2, 80220b0 <_dtoa_r+0x9a0>
 802206c:	4601      	mov	r1, r0
 802206e:	4628      	mov	r0, r5
 8022070:	f000 fb5e 	bl	8022730 <__mcmp>
 8022074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022076:	4602      	mov	r2, r0
 8022078:	4641      	mov	r1, r8
 802207a:	4630      	mov	r0, r6
 802207c:	920e      	str	r2, [sp, #56]	; 0x38
 802207e:	930a      	str	r3, [sp, #40]	; 0x28
 8022080:	f000 f918 	bl	80222b4 <_Bfree>
 8022084:	9b07      	ldr	r3, [sp, #28]
 8022086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022088:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802208c:	ea43 0102 	orr.w	r1, r3, r2
 8022090:	9b08      	ldr	r3, [sp, #32]
 8022092:	430b      	orrs	r3, r1
 8022094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022096:	d10d      	bne.n	80220b4 <_dtoa_r+0x9a4>
 8022098:	2b39      	cmp	r3, #57	; 0x39
 802209a:	d029      	beq.n	80220f0 <_dtoa_r+0x9e0>
 802209c:	f1ba 0f00 	cmp.w	sl, #0
 80220a0:	dd01      	ble.n	80220a6 <_dtoa_r+0x996>
 80220a2:	9b06      	ldr	r3, [sp, #24]
 80220a4:	3331      	adds	r3, #49	; 0x31
 80220a6:	9a02      	ldr	r2, [sp, #8]
 80220a8:	7013      	strb	r3, [r2, #0]
 80220aa:	e774      	b.n	8021f96 <_dtoa_r+0x886>
 80220ac:	4638      	mov	r0, r7
 80220ae:	e7b8      	b.n	8022022 <_dtoa_r+0x912>
 80220b0:	2201      	movs	r2, #1
 80220b2:	e7e1      	b.n	8022078 <_dtoa_r+0x968>
 80220b4:	f1ba 0f00 	cmp.w	sl, #0
 80220b8:	db06      	blt.n	80220c8 <_dtoa_r+0x9b8>
 80220ba:	9907      	ldr	r1, [sp, #28]
 80220bc:	ea41 0a0a 	orr.w	sl, r1, sl
 80220c0:	9908      	ldr	r1, [sp, #32]
 80220c2:	ea5a 0101 	orrs.w	r1, sl, r1
 80220c6:	d120      	bne.n	802210a <_dtoa_r+0x9fa>
 80220c8:	2a00      	cmp	r2, #0
 80220ca:	ddec      	ble.n	80220a6 <_dtoa_r+0x996>
 80220cc:	4629      	mov	r1, r5
 80220ce:	2201      	movs	r2, #1
 80220d0:	4630      	mov	r0, r6
 80220d2:	9305      	str	r3, [sp, #20]
 80220d4:	f000 fac0 	bl	8022658 <__lshift>
 80220d8:	4621      	mov	r1, r4
 80220da:	4605      	mov	r5, r0
 80220dc:	f000 fb28 	bl	8022730 <__mcmp>
 80220e0:	2800      	cmp	r0, #0
 80220e2:	9b05      	ldr	r3, [sp, #20]
 80220e4:	dc02      	bgt.n	80220ec <_dtoa_r+0x9dc>
 80220e6:	d1de      	bne.n	80220a6 <_dtoa_r+0x996>
 80220e8:	07da      	lsls	r2, r3, #31
 80220ea:	d5dc      	bpl.n	80220a6 <_dtoa_r+0x996>
 80220ec:	2b39      	cmp	r3, #57	; 0x39
 80220ee:	d1d8      	bne.n	80220a2 <_dtoa_r+0x992>
 80220f0:	9a02      	ldr	r2, [sp, #8]
 80220f2:	2339      	movs	r3, #57	; 0x39
 80220f4:	7013      	strb	r3, [r2, #0]
 80220f6:	4643      	mov	r3, r8
 80220f8:	4698      	mov	r8, r3
 80220fa:	3b01      	subs	r3, #1
 80220fc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8022100:	2a39      	cmp	r2, #57	; 0x39
 8022102:	d051      	beq.n	80221a8 <_dtoa_r+0xa98>
 8022104:	3201      	adds	r2, #1
 8022106:	701a      	strb	r2, [r3, #0]
 8022108:	e745      	b.n	8021f96 <_dtoa_r+0x886>
 802210a:	2a00      	cmp	r2, #0
 802210c:	dd03      	ble.n	8022116 <_dtoa_r+0xa06>
 802210e:	2b39      	cmp	r3, #57	; 0x39
 8022110:	d0ee      	beq.n	80220f0 <_dtoa_r+0x9e0>
 8022112:	3301      	adds	r3, #1
 8022114:	e7c7      	b.n	80220a6 <_dtoa_r+0x996>
 8022116:	9a05      	ldr	r2, [sp, #20]
 8022118:	9909      	ldr	r1, [sp, #36]	; 0x24
 802211a:	f802 3c01 	strb.w	r3, [r2, #-1]
 802211e:	428a      	cmp	r2, r1
 8022120:	d02b      	beq.n	802217a <_dtoa_r+0xa6a>
 8022122:	4629      	mov	r1, r5
 8022124:	2300      	movs	r3, #0
 8022126:	220a      	movs	r2, #10
 8022128:	4630      	mov	r0, r6
 802212a:	f000 f8e5 	bl	80222f8 <__multadd>
 802212e:	45b9      	cmp	r9, r7
 8022130:	4605      	mov	r5, r0
 8022132:	f04f 0300 	mov.w	r3, #0
 8022136:	f04f 020a 	mov.w	r2, #10
 802213a:	4649      	mov	r1, r9
 802213c:	4630      	mov	r0, r6
 802213e:	d107      	bne.n	8022150 <_dtoa_r+0xa40>
 8022140:	f000 f8da 	bl	80222f8 <__multadd>
 8022144:	4681      	mov	r9, r0
 8022146:	4607      	mov	r7, r0
 8022148:	9b05      	ldr	r3, [sp, #20]
 802214a:	3301      	adds	r3, #1
 802214c:	9305      	str	r3, [sp, #20]
 802214e:	e774      	b.n	802203a <_dtoa_r+0x92a>
 8022150:	f000 f8d2 	bl	80222f8 <__multadd>
 8022154:	4639      	mov	r1, r7
 8022156:	4681      	mov	r9, r0
 8022158:	2300      	movs	r3, #0
 802215a:	220a      	movs	r2, #10
 802215c:	4630      	mov	r0, r6
 802215e:	f000 f8cb 	bl	80222f8 <__multadd>
 8022162:	4607      	mov	r7, r0
 8022164:	e7f0      	b.n	8022148 <_dtoa_r+0xa38>
 8022166:	f1ba 0f00 	cmp.w	sl, #0
 802216a:	9a00      	ldr	r2, [sp, #0]
 802216c:	bfcc      	ite	gt
 802216e:	46d0      	movgt	r8, sl
 8022170:	f04f 0801 	movle.w	r8, #1
 8022174:	4490      	add	r8, r2
 8022176:	f04f 0900 	mov.w	r9, #0
 802217a:	4629      	mov	r1, r5
 802217c:	2201      	movs	r2, #1
 802217e:	4630      	mov	r0, r6
 8022180:	9302      	str	r3, [sp, #8]
 8022182:	f000 fa69 	bl	8022658 <__lshift>
 8022186:	4621      	mov	r1, r4
 8022188:	4605      	mov	r5, r0
 802218a:	f000 fad1 	bl	8022730 <__mcmp>
 802218e:	2800      	cmp	r0, #0
 8022190:	dcb1      	bgt.n	80220f6 <_dtoa_r+0x9e6>
 8022192:	d102      	bne.n	802219a <_dtoa_r+0xa8a>
 8022194:	9b02      	ldr	r3, [sp, #8]
 8022196:	07db      	lsls	r3, r3, #31
 8022198:	d4ad      	bmi.n	80220f6 <_dtoa_r+0x9e6>
 802219a:	4643      	mov	r3, r8
 802219c:	4698      	mov	r8, r3
 802219e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80221a2:	2a30      	cmp	r2, #48	; 0x30
 80221a4:	d0fa      	beq.n	802219c <_dtoa_r+0xa8c>
 80221a6:	e6f6      	b.n	8021f96 <_dtoa_r+0x886>
 80221a8:	9a00      	ldr	r2, [sp, #0]
 80221aa:	429a      	cmp	r2, r3
 80221ac:	d1a4      	bne.n	80220f8 <_dtoa_r+0x9e8>
 80221ae:	f10b 0b01 	add.w	fp, fp, #1
 80221b2:	2331      	movs	r3, #49	; 0x31
 80221b4:	e778      	b.n	80220a8 <_dtoa_r+0x998>
 80221b6:	4b15      	ldr	r3, [pc, #84]	; (802220c <_dtoa_r+0xafc>)
 80221b8:	f7ff bb12 	b.w	80217e0 <_dtoa_r+0xd0>
 80221bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80221be:	2b00      	cmp	r3, #0
 80221c0:	f47f aaee 	bne.w	80217a0 <_dtoa_r+0x90>
 80221c4:	4b12      	ldr	r3, [pc, #72]	; (8022210 <_dtoa_r+0xb00>)
 80221c6:	f7ff bb0b 	b.w	80217e0 <_dtoa_r+0xd0>
 80221ca:	f1ba 0f00 	cmp.w	sl, #0
 80221ce:	dc03      	bgt.n	80221d8 <_dtoa_r+0xac8>
 80221d0:	9b07      	ldr	r3, [sp, #28]
 80221d2:	2b02      	cmp	r3, #2
 80221d4:	f73f aec7 	bgt.w	8021f66 <_dtoa_r+0x856>
 80221d8:	f8dd 8000 	ldr.w	r8, [sp]
 80221dc:	4621      	mov	r1, r4
 80221de:	4628      	mov	r0, r5
 80221e0:	f7ff fa09 	bl	80215f6 <quorem>
 80221e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80221e8:	f808 3b01 	strb.w	r3, [r8], #1
 80221ec:	9a00      	ldr	r2, [sp, #0]
 80221ee:	eba8 0202 	sub.w	r2, r8, r2
 80221f2:	4592      	cmp	sl, r2
 80221f4:	ddb7      	ble.n	8022166 <_dtoa_r+0xa56>
 80221f6:	4629      	mov	r1, r5
 80221f8:	2300      	movs	r3, #0
 80221fa:	220a      	movs	r2, #10
 80221fc:	4630      	mov	r0, r6
 80221fe:	f000 f87b 	bl	80222f8 <__multadd>
 8022202:	4605      	mov	r5, r0
 8022204:	e7ea      	b.n	80221dc <_dtoa_r+0xacc>
 8022206:	bf00      	nop
 8022208:	08049baf 	.word	0x08049baf
 802220c:	08049b08 	.word	0x08049b08
 8022210:	08049b2c 	.word	0x08049b2c

08022214 <_localeconv_r>:
 8022214:	4800      	ldr	r0, [pc, #0]	; (8022218 <_localeconv_r+0x4>)
 8022216:	4770      	bx	lr
 8022218:	240031a4 	.word	0x240031a4

0802221c <__malloc_lock>:
 802221c:	4801      	ldr	r0, [pc, #4]	; (8022224 <__malloc_lock+0x8>)
 802221e:	f000 bd48 	b.w	8022cb2 <__retarget_lock_acquire_recursive>
 8022222:	bf00      	nop
 8022224:	240065c0 	.word	0x240065c0

08022228 <__malloc_unlock>:
 8022228:	4801      	ldr	r0, [pc, #4]	; (8022230 <__malloc_unlock+0x8>)
 802222a:	f000 bd43 	b.w	8022cb4 <__retarget_lock_release_recursive>
 802222e:	bf00      	nop
 8022230:	240065c0 	.word	0x240065c0

08022234 <_Balloc>:
 8022234:	b570      	push	{r4, r5, r6, lr}
 8022236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022238:	4604      	mov	r4, r0
 802223a:	460d      	mov	r5, r1
 802223c:	b976      	cbnz	r6, 802225c <_Balloc+0x28>
 802223e:	2010      	movs	r0, #16
 8022240:	f7fe fc38 	bl	8020ab4 <malloc>
 8022244:	4602      	mov	r2, r0
 8022246:	6260      	str	r0, [r4, #36]	; 0x24
 8022248:	b920      	cbnz	r0, 8022254 <_Balloc+0x20>
 802224a:	4b18      	ldr	r3, [pc, #96]	; (80222ac <_Balloc+0x78>)
 802224c:	4818      	ldr	r0, [pc, #96]	; (80222b0 <_Balloc+0x7c>)
 802224e:	2166      	movs	r1, #102	; 0x66
 8022250:	f000 fcfe 	bl	8022c50 <__assert_func>
 8022254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022258:	6006      	str	r6, [r0, #0]
 802225a:	60c6      	str	r6, [r0, #12]
 802225c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802225e:	68f3      	ldr	r3, [r6, #12]
 8022260:	b183      	cbz	r3, 8022284 <_Balloc+0x50>
 8022262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022264:	68db      	ldr	r3, [r3, #12]
 8022266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802226a:	b9b8      	cbnz	r0, 802229c <_Balloc+0x68>
 802226c:	2101      	movs	r1, #1
 802226e:	fa01 f605 	lsl.w	r6, r1, r5
 8022272:	1d72      	adds	r2, r6, #5
 8022274:	0092      	lsls	r2, r2, #2
 8022276:	4620      	mov	r0, r4
 8022278:	f000 fb5a 	bl	8022930 <_calloc_r>
 802227c:	b160      	cbz	r0, 8022298 <_Balloc+0x64>
 802227e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8022282:	e00e      	b.n	80222a2 <_Balloc+0x6e>
 8022284:	2221      	movs	r2, #33	; 0x21
 8022286:	2104      	movs	r1, #4
 8022288:	4620      	mov	r0, r4
 802228a:	f000 fb51 	bl	8022930 <_calloc_r>
 802228e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022290:	60f0      	str	r0, [r6, #12]
 8022292:	68db      	ldr	r3, [r3, #12]
 8022294:	2b00      	cmp	r3, #0
 8022296:	d1e4      	bne.n	8022262 <_Balloc+0x2e>
 8022298:	2000      	movs	r0, #0
 802229a:	bd70      	pop	{r4, r5, r6, pc}
 802229c:	6802      	ldr	r2, [r0, #0]
 802229e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80222a2:	2300      	movs	r3, #0
 80222a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80222a8:	e7f7      	b.n	802229a <_Balloc+0x66>
 80222aa:	bf00      	nop
 80222ac:	08049b39 	.word	0x08049b39
 80222b0:	08049bc0 	.word	0x08049bc0

080222b4 <_Bfree>:
 80222b4:	b570      	push	{r4, r5, r6, lr}
 80222b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80222b8:	4605      	mov	r5, r0
 80222ba:	460c      	mov	r4, r1
 80222bc:	b976      	cbnz	r6, 80222dc <_Bfree+0x28>
 80222be:	2010      	movs	r0, #16
 80222c0:	f7fe fbf8 	bl	8020ab4 <malloc>
 80222c4:	4602      	mov	r2, r0
 80222c6:	6268      	str	r0, [r5, #36]	; 0x24
 80222c8:	b920      	cbnz	r0, 80222d4 <_Bfree+0x20>
 80222ca:	4b09      	ldr	r3, [pc, #36]	; (80222f0 <_Bfree+0x3c>)
 80222cc:	4809      	ldr	r0, [pc, #36]	; (80222f4 <_Bfree+0x40>)
 80222ce:	218a      	movs	r1, #138	; 0x8a
 80222d0:	f000 fcbe 	bl	8022c50 <__assert_func>
 80222d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80222d8:	6006      	str	r6, [r0, #0]
 80222da:	60c6      	str	r6, [r0, #12]
 80222dc:	b13c      	cbz	r4, 80222ee <_Bfree+0x3a>
 80222de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80222e0:	6862      	ldr	r2, [r4, #4]
 80222e2:	68db      	ldr	r3, [r3, #12]
 80222e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80222e8:	6021      	str	r1, [r4, #0]
 80222ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80222ee:	bd70      	pop	{r4, r5, r6, pc}
 80222f0:	08049b39 	.word	0x08049b39
 80222f4:	08049bc0 	.word	0x08049bc0

080222f8 <__multadd>:
 80222f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222fc:	690e      	ldr	r6, [r1, #16]
 80222fe:	4607      	mov	r7, r0
 8022300:	4698      	mov	r8, r3
 8022302:	460c      	mov	r4, r1
 8022304:	f101 0014 	add.w	r0, r1, #20
 8022308:	2300      	movs	r3, #0
 802230a:	6805      	ldr	r5, [r0, #0]
 802230c:	b2a9      	uxth	r1, r5
 802230e:	fb02 8101 	mla	r1, r2, r1, r8
 8022312:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8022316:	0c2d      	lsrs	r5, r5, #16
 8022318:	fb02 c505 	mla	r5, r2, r5, ip
 802231c:	b289      	uxth	r1, r1
 802231e:	3301      	adds	r3, #1
 8022320:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022324:	429e      	cmp	r6, r3
 8022326:	f840 1b04 	str.w	r1, [r0], #4
 802232a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802232e:	dcec      	bgt.n	802230a <__multadd+0x12>
 8022330:	f1b8 0f00 	cmp.w	r8, #0
 8022334:	d022      	beq.n	802237c <__multadd+0x84>
 8022336:	68a3      	ldr	r3, [r4, #8]
 8022338:	42b3      	cmp	r3, r6
 802233a:	dc19      	bgt.n	8022370 <__multadd+0x78>
 802233c:	6861      	ldr	r1, [r4, #4]
 802233e:	4638      	mov	r0, r7
 8022340:	3101      	adds	r1, #1
 8022342:	f7ff ff77 	bl	8022234 <_Balloc>
 8022346:	4605      	mov	r5, r0
 8022348:	b928      	cbnz	r0, 8022356 <__multadd+0x5e>
 802234a:	4602      	mov	r2, r0
 802234c:	4b0d      	ldr	r3, [pc, #52]	; (8022384 <__multadd+0x8c>)
 802234e:	480e      	ldr	r0, [pc, #56]	; (8022388 <__multadd+0x90>)
 8022350:	21b5      	movs	r1, #181	; 0xb5
 8022352:	f000 fc7d 	bl	8022c50 <__assert_func>
 8022356:	6922      	ldr	r2, [r4, #16]
 8022358:	3202      	adds	r2, #2
 802235a:	f104 010c 	add.w	r1, r4, #12
 802235e:	0092      	lsls	r2, r2, #2
 8022360:	300c      	adds	r0, #12
 8022362:	f7fe fbb7 	bl	8020ad4 <memcpy>
 8022366:	4621      	mov	r1, r4
 8022368:	4638      	mov	r0, r7
 802236a:	f7ff ffa3 	bl	80222b4 <_Bfree>
 802236e:	462c      	mov	r4, r5
 8022370:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8022374:	3601      	adds	r6, #1
 8022376:	f8c3 8014 	str.w	r8, [r3, #20]
 802237a:	6126      	str	r6, [r4, #16]
 802237c:	4620      	mov	r0, r4
 802237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022382:	bf00      	nop
 8022384:	08049baf 	.word	0x08049baf
 8022388:	08049bc0 	.word	0x08049bc0

0802238c <__hi0bits>:
 802238c:	0c03      	lsrs	r3, r0, #16
 802238e:	041b      	lsls	r3, r3, #16
 8022390:	b9d3      	cbnz	r3, 80223c8 <__hi0bits+0x3c>
 8022392:	0400      	lsls	r0, r0, #16
 8022394:	2310      	movs	r3, #16
 8022396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802239a:	bf04      	itt	eq
 802239c:	0200      	lsleq	r0, r0, #8
 802239e:	3308      	addeq	r3, #8
 80223a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80223a4:	bf04      	itt	eq
 80223a6:	0100      	lsleq	r0, r0, #4
 80223a8:	3304      	addeq	r3, #4
 80223aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80223ae:	bf04      	itt	eq
 80223b0:	0080      	lsleq	r0, r0, #2
 80223b2:	3302      	addeq	r3, #2
 80223b4:	2800      	cmp	r0, #0
 80223b6:	db05      	blt.n	80223c4 <__hi0bits+0x38>
 80223b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80223bc:	f103 0301 	add.w	r3, r3, #1
 80223c0:	bf08      	it	eq
 80223c2:	2320      	moveq	r3, #32
 80223c4:	4618      	mov	r0, r3
 80223c6:	4770      	bx	lr
 80223c8:	2300      	movs	r3, #0
 80223ca:	e7e4      	b.n	8022396 <__hi0bits+0xa>

080223cc <__lo0bits>:
 80223cc:	6803      	ldr	r3, [r0, #0]
 80223ce:	f013 0207 	ands.w	r2, r3, #7
 80223d2:	4601      	mov	r1, r0
 80223d4:	d00b      	beq.n	80223ee <__lo0bits+0x22>
 80223d6:	07da      	lsls	r2, r3, #31
 80223d8:	d424      	bmi.n	8022424 <__lo0bits+0x58>
 80223da:	0798      	lsls	r0, r3, #30
 80223dc:	bf49      	itett	mi
 80223de:	085b      	lsrmi	r3, r3, #1
 80223e0:	089b      	lsrpl	r3, r3, #2
 80223e2:	2001      	movmi	r0, #1
 80223e4:	600b      	strmi	r3, [r1, #0]
 80223e6:	bf5c      	itt	pl
 80223e8:	600b      	strpl	r3, [r1, #0]
 80223ea:	2002      	movpl	r0, #2
 80223ec:	4770      	bx	lr
 80223ee:	b298      	uxth	r0, r3
 80223f0:	b9b0      	cbnz	r0, 8022420 <__lo0bits+0x54>
 80223f2:	0c1b      	lsrs	r3, r3, #16
 80223f4:	2010      	movs	r0, #16
 80223f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80223fa:	bf04      	itt	eq
 80223fc:	0a1b      	lsreq	r3, r3, #8
 80223fe:	3008      	addeq	r0, #8
 8022400:	071a      	lsls	r2, r3, #28
 8022402:	bf04      	itt	eq
 8022404:	091b      	lsreq	r3, r3, #4
 8022406:	3004      	addeq	r0, #4
 8022408:	079a      	lsls	r2, r3, #30
 802240a:	bf04      	itt	eq
 802240c:	089b      	lsreq	r3, r3, #2
 802240e:	3002      	addeq	r0, #2
 8022410:	07da      	lsls	r2, r3, #31
 8022412:	d403      	bmi.n	802241c <__lo0bits+0x50>
 8022414:	085b      	lsrs	r3, r3, #1
 8022416:	f100 0001 	add.w	r0, r0, #1
 802241a:	d005      	beq.n	8022428 <__lo0bits+0x5c>
 802241c:	600b      	str	r3, [r1, #0]
 802241e:	4770      	bx	lr
 8022420:	4610      	mov	r0, r2
 8022422:	e7e8      	b.n	80223f6 <__lo0bits+0x2a>
 8022424:	2000      	movs	r0, #0
 8022426:	4770      	bx	lr
 8022428:	2020      	movs	r0, #32
 802242a:	4770      	bx	lr

0802242c <__i2b>:
 802242c:	b510      	push	{r4, lr}
 802242e:	460c      	mov	r4, r1
 8022430:	2101      	movs	r1, #1
 8022432:	f7ff feff 	bl	8022234 <_Balloc>
 8022436:	4602      	mov	r2, r0
 8022438:	b928      	cbnz	r0, 8022446 <__i2b+0x1a>
 802243a:	4b05      	ldr	r3, [pc, #20]	; (8022450 <__i2b+0x24>)
 802243c:	4805      	ldr	r0, [pc, #20]	; (8022454 <__i2b+0x28>)
 802243e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8022442:	f000 fc05 	bl	8022c50 <__assert_func>
 8022446:	2301      	movs	r3, #1
 8022448:	6144      	str	r4, [r0, #20]
 802244a:	6103      	str	r3, [r0, #16]
 802244c:	bd10      	pop	{r4, pc}
 802244e:	bf00      	nop
 8022450:	08049baf 	.word	0x08049baf
 8022454:	08049bc0 	.word	0x08049bc0

08022458 <__multiply>:
 8022458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802245c:	4614      	mov	r4, r2
 802245e:	690a      	ldr	r2, [r1, #16]
 8022460:	6923      	ldr	r3, [r4, #16]
 8022462:	429a      	cmp	r2, r3
 8022464:	bfb8      	it	lt
 8022466:	460b      	movlt	r3, r1
 8022468:	460d      	mov	r5, r1
 802246a:	bfbc      	itt	lt
 802246c:	4625      	movlt	r5, r4
 802246e:	461c      	movlt	r4, r3
 8022470:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8022474:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022478:	68ab      	ldr	r3, [r5, #8]
 802247a:	6869      	ldr	r1, [r5, #4]
 802247c:	eb0a 0709 	add.w	r7, sl, r9
 8022480:	42bb      	cmp	r3, r7
 8022482:	b085      	sub	sp, #20
 8022484:	bfb8      	it	lt
 8022486:	3101      	addlt	r1, #1
 8022488:	f7ff fed4 	bl	8022234 <_Balloc>
 802248c:	b930      	cbnz	r0, 802249c <__multiply+0x44>
 802248e:	4602      	mov	r2, r0
 8022490:	4b42      	ldr	r3, [pc, #264]	; (802259c <__multiply+0x144>)
 8022492:	4843      	ldr	r0, [pc, #268]	; (80225a0 <__multiply+0x148>)
 8022494:	f240 115d 	movw	r1, #349	; 0x15d
 8022498:	f000 fbda 	bl	8022c50 <__assert_func>
 802249c:	f100 0614 	add.w	r6, r0, #20
 80224a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80224a4:	4633      	mov	r3, r6
 80224a6:	2200      	movs	r2, #0
 80224a8:	4543      	cmp	r3, r8
 80224aa:	d31e      	bcc.n	80224ea <__multiply+0x92>
 80224ac:	f105 0c14 	add.w	ip, r5, #20
 80224b0:	f104 0314 	add.w	r3, r4, #20
 80224b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80224b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80224bc:	9202      	str	r2, [sp, #8]
 80224be:	ebac 0205 	sub.w	r2, ip, r5
 80224c2:	3a15      	subs	r2, #21
 80224c4:	f022 0203 	bic.w	r2, r2, #3
 80224c8:	3204      	adds	r2, #4
 80224ca:	f105 0115 	add.w	r1, r5, #21
 80224ce:	458c      	cmp	ip, r1
 80224d0:	bf38      	it	cc
 80224d2:	2204      	movcc	r2, #4
 80224d4:	9201      	str	r2, [sp, #4]
 80224d6:	9a02      	ldr	r2, [sp, #8]
 80224d8:	9303      	str	r3, [sp, #12]
 80224da:	429a      	cmp	r2, r3
 80224dc:	d808      	bhi.n	80224f0 <__multiply+0x98>
 80224de:	2f00      	cmp	r7, #0
 80224e0:	dc55      	bgt.n	802258e <__multiply+0x136>
 80224e2:	6107      	str	r7, [r0, #16]
 80224e4:	b005      	add	sp, #20
 80224e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224ea:	f843 2b04 	str.w	r2, [r3], #4
 80224ee:	e7db      	b.n	80224a8 <__multiply+0x50>
 80224f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80224f4:	f1ba 0f00 	cmp.w	sl, #0
 80224f8:	d020      	beq.n	802253c <__multiply+0xe4>
 80224fa:	f105 0e14 	add.w	lr, r5, #20
 80224fe:	46b1      	mov	r9, r6
 8022500:	2200      	movs	r2, #0
 8022502:	f85e 4b04 	ldr.w	r4, [lr], #4
 8022506:	f8d9 b000 	ldr.w	fp, [r9]
 802250a:	b2a1      	uxth	r1, r4
 802250c:	fa1f fb8b 	uxth.w	fp, fp
 8022510:	fb0a b101 	mla	r1, sl, r1, fp
 8022514:	4411      	add	r1, r2
 8022516:	f8d9 2000 	ldr.w	r2, [r9]
 802251a:	0c24      	lsrs	r4, r4, #16
 802251c:	0c12      	lsrs	r2, r2, #16
 802251e:	fb0a 2404 	mla	r4, sl, r4, r2
 8022522:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8022526:	b289      	uxth	r1, r1
 8022528:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802252c:	45f4      	cmp	ip, lr
 802252e:	f849 1b04 	str.w	r1, [r9], #4
 8022532:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8022536:	d8e4      	bhi.n	8022502 <__multiply+0xaa>
 8022538:	9901      	ldr	r1, [sp, #4]
 802253a:	5072      	str	r2, [r6, r1]
 802253c:	9a03      	ldr	r2, [sp, #12]
 802253e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022542:	3304      	adds	r3, #4
 8022544:	f1b9 0f00 	cmp.w	r9, #0
 8022548:	d01f      	beq.n	802258a <__multiply+0x132>
 802254a:	6834      	ldr	r4, [r6, #0]
 802254c:	f105 0114 	add.w	r1, r5, #20
 8022550:	46b6      	mov	lr, r6
 8022552:	f04f 0a00 	mov.w	sl, #0
 8022556:	880a      	ldrh	r2, [r1, #0]
 8022558:	f8be b002 	ldrh.w	fp, [lr, #2]
 802255c:	fb09 b202 	mla	r2, r9, r2, fp
 8022560:	4492      	add	sl, r2
 8022562:	b2a4      	uxth	r4, r4
 8022564:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022568:	f84e 4b04 	str.w	r4, [lr], #4
 802256c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022570:	f8be 2000 	ldrh.w	r2, [lr]
 8022574:	0c24      	lsrs	r4, r4, #16
 8022576:	fb09 2404 	mla	r4, r9, r4, r2
 802257a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802257e:	458c      	cmp	ip, r1
 8022580:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8022584:	d8e7      	bhi.n	8022556 <__multiply+0xfe>
 8022586:	9a01      	ldr	r2, [sp, #4]
 8022588:	50b4      	str	r4, [r6, r2]
 802258a:	3604      	adds	r6, #4
 802258c:	e7a3      	b.n	80224d6 <__multiply+0x7e>
 802258e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022592:	2b00      	cmp	r3, #0
 8022594:	d1a5      	bne.n	80224e2 <__multiply+0x8a>
 8022596:	3f01      	subs	r7, #1
 8022598:	e7a1      	b.n	80224de <__multiply+0x86>
 802259a:	bf00      	nop
 802259c:	08049baf 	.word	0x08049baf
 80225a0:	08049bc0 	.word	0x08049bc0

080225a4 <__pow5mult>:
 80225a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80225a8:	4615      	mov	r5, r2
 80225aa:	f012 0203 	ands.w	r2, r2, #3
 80225ae:	4606      	mov	r6, r0
 80225b0:	460f      	mov	r7, r1
 80225b2:	d007      	beq.n	80225c4 <__pow5mult+0x20>
 80225b4:	4c25      	ldr	r4, [pc, #148]	; (802264c <__pow5mult+0xa8>)
 80225b6:	3a01      	subs	r2, #1
 80225b8:	2300      	movs	r3, #0
 80225ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80225be:	f7ff fe9b 	bl	80222f8 <__multadd>
 80225c2:	4607      	mov	r7, r0
 80225c4:	10ad      	asrs	r5, r5, #2
 80225c6:	d03d      	beq.n	8022644 <__pow5mult+0xa0>
 80225c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80225ca:	b97c      	cbnz	r4, 80225ec <__pow5mult+0x48>
 80225cc:	2010      	movs	r0, #16
 80225ce:	f7fe fa71 	bl	8020ab4 <malloc>
 80225d2:	4602      	mov	r2, r0
 80225d4:	6270      	str	r0, [r6, #36]	; 0x24
 80225d6:	b928      	cbnz	r0, 80225e4 <__pow5mult+0x40>
 80225d8:	4b1d      	ldr	r3, [pc, #116]	; (8022650 <__pow5mult+0xac>)
 80225da:	481e      	ldr	r0, [pc, #120]	; (8022654 <__pow5mult+0xb0>)
 80225dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80225e0:	f000 fb36 	bl	8022c50 <__assert_func>
 80225e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80225e8:	6004      	str	r4, [r0, #0]
 80225ea:	60c4      	str	r4, [r0, #12]
 80225ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80225f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80225f4:	b94c      	cbnz	r4, 802260a <__pow5mult+0x66>
 80225f6:	f240 2171 	movw	r1, #625	; 0x271
 80225fa:	4630      	mov	r0, r6
 80225fc:	f7ff ff16 	bl	802242c <__i2b>
 8022600:	2300      	movs	r3, #0
 8022602:	f8c8 0008 	str.w	r0, [r8, #8]
 8022606:	4604      	mov	r4, r0
 8022608:	6003      	str	r3, [r0, #0]
 802260a:	f04f 0900 	mov.w	r9, #0
 802260e:	07eb      	lsls	r3, r5, #31
 8022610:	d50a      	bpl.n	8022628 <__pow5mult+0x84>
 8022612:	4639      	mov	r1, r7
 8022614:	4622      	mov	r2, r4
 8022616:	4630      	mov	r0, r6
 8022618:	f7ff ff1e 	bl	8022458 <__multiply>
 802261c:	4639      	mov	r1, r7
 802261e:	4680      	mov	r8, r0
 8022620:	4630      	mov	r0, r6
 8022622:	f7ff fe47 	bl	80222b4 <_Bfree>
 8022626:	4647      	mov	r7, r8
 8022628:	106d      	asrs	r5, r5, #1
 802262a:	d00b      	beq.n	8022644 <__pow5mult+0xa0>
 802262c:	6820      	ldr	r0, [r4, #0]
 802262e:	b938      	cbnz	r0, 8022640 <__pow5mult+0x9c>
 8022630:	4622      	mov	r2, r4
 8022632:	4621      	mov	r1, r4
 8022634:	4630      	mov	r0, r6
 8022636:	f7ff ff0f 	bl	8022458 <__multiply>
 802263a:	6020      	str	r0, [r4, #0]
 802263c:	f8c0 9000 	str.w	r9, [r0]
 8022640:	4604      	mov	r4, r0
 8022642:	e7e4      	b.n	802260e <__pow5mult+0x6a>
 8022644:	4638      	mov	r0, r7
 8022646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802264a:	bf00      	nop
 802264c:	08049d10 	.word	0x08049d10
 8022650:	08049b39 	.word	0x08049b39
 8022654:	08049bc0 	.word	0x08049bc0

08022658 <__lshift>:
 8022658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802265c:	460c      	mov	r4, r1
 802265e:	6849      	ldr	r1, [r1, #4]
 8022660:	6923      	ldr	r3, [r4, #16]
 8022662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022666:	68a3      	ldr	r3, [r4, #8]
 8022668:	4607      	mov	r7, r0
 802266a:	4691      	mov	r9, r2
 802266c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022670:	f108 0601 	add.w	r6, r8, #1
 8022674:	42b3      	cmp	r3, r6
 8022676:	db0b      	blt.n	8022690 <__lshift+0x38>
 8022678:	4638      	mov	r0, r7
 802267a:	f7ff fddb 	bl	8022234 <_Balloc>
 802267e:	4605      	mov	r5, r0
 8022680:	b948      	cbnz	r0, 8022696 <__lshift+0x3e>
 8022682:	4602      	mov	r2, r0
 8022684:	4b28      	ldr	r3, [pc, #160]	; (8022728 <__lshift+0xd0>)
 8022686:	4829      	ldr	r0, [pc, #164]	; (802272c <__lshift+0xd4>)
 8022688:	f240 11d9 	movw	r1, #473	; 0x1d9
 802268c:	f000 fae0 	bl	8022c50 <__assert_func>
 8022690:	3101      	adds	r1, #1
 8022692:	005b      	lsls	r3, r3, #1
 8022694:	e7ee      	b.n	8022674 <__lshift+0x1c>
 8022696:	2300      	movs	r3, #0
 8022698:	f100 0114 	add.w	r1, r0, #20
 802269c:	f100 0210 	add.w	r2, r0, #16
 80226a0:	4618      	mov	r0, r3
 80226a2:	4553      	cmp	r3, sl
 80226a4:	db33      	blt.n	802270e <__lshift+0xb6>
 80226a6:	6920      	ldr	r0, [r4, #16]
 80226a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80226ac:	f104 0314 	add.w	r3, r4, #20
 80226b0:	f019 091f 	ands.w	r9, r9, #31
 80226b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80226b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80226bc:	d02b      	beq.n	8022716 <__lshift+0xbe>
 80226be:	f1c9 0e20 	rsb	lr, r9, #32
 80226c2:	468a      	mov	sl, r1
 80226c4:	2200      	movs	r2, #0
 80226c6:	6818      	ldr	r0, [r3, #0]
 80226c8:	fa00 f009 	lsl.w	r0, r0, r9
 80226cc:	4302      	orrs	r2, r0
 80226ce:	f84a 2b04 	str.w	r2, [sl], #4
 80226d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80226d6:	459c      	cmp	ip, r3
 80226d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80226dc:	d8f3      	bhi.n	80226c6 <__lshift+0x6e>
 80226de:	ebac 0304 	sub.w	r3, ip, r4
 80226e2:	3b15      	subs	r3, #21
 80226e4:	f023 0303 	bic.w	r3, r3, #3
 80226e8:	3304      	adds	r3, #4
 80226ea:	f104 0015 	add.w	r0, r4, #21
 80226ee:	4584      	cmp	ip, r0
 80226f0:	bf38      	it	cc
 80226f2:	2304      	movcc	r3, #4
 80226f4:	50ca      	str	r2, [r1, r3]
 80226f6:	b10a      	cbz	r2, 80226fc <__lshift+0xa4>
 80226f8:	f108 0602 	add.w	r6, r8, #2
 80226fc:	3e01      	subs	r6, #1
 80226fe:	4638      	mov	r0, r7
 8022700:	612e      	str	r6, [r5, #16]
 8022702:	4621      	mov	r1, r4
 8022704:	f7ff fdd6 	bl	80222b4 <_Bfree>
 8022708:	4628      	mov	r0, r5
 802270a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802270e:	f842 0f04 	str.w	r0, [r2, #4]!
 8022712:	3301      	adds	r3, #1
 8022714:	e7c5      	b.n	80226a2 <__lshift+0x4a>
 8022716:	3904      	subs	r1, #4
 8022718:	f853 2b04 	ldr.w	r2, [r3], #4
 802271c:	f841 2f04 	str.w	r2, [r1, #4]!
 8022720:	459c      	cmp	ip, r3
 8022722:	d8f9      	bhi.n	8022718 <__lshift+0xc0>
 8022724:	e7ea      	b.n	80226fc <__lshift+0xa4>
 8022726:	bf00      	nop
 8022728:	08049baf 	.word	0x08049baf
 802272c:	08049bc0 	.word	0x08049bc0

08022730 <__mcmp>:
 8022730:	b530      	push	{r4, r5, lr}
 8022732:	6902      	ldr	r2, [r0, #16]
 8022734:	690c      	ldr	r4, [r1, #16]
 8022736:	1b12      	subs	r2, r2, r4
 8022738:	d10e      	bne.n	8022758 <__mcmp+0x28>
 802273a:	f100 0314 	add.w	r3, r0, #20
 802273e:	3114      	adds	r1, #20
 8022740:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022744:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022748:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802274c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022750:	42a5      	cmp	r5, r4
 8022752:	d003      	beq.n	802275c <__mcmp+0x2c>
 8022754:	d305      	bcc.n	8022762 <__mcmp+0x32>
 8022756:	2201      	movs	r2, #1
 8022758:	4610      	mov	r0, r2
 802275a:	bd30      	pop	{r4, r5, pc}
 802275c:	4283      	cmp	r3, r0
 802275e:	d3f3      	bcc.n	8022748 <__mcmp+0x18>
 8022760:	e7fa      	b.n	8022758 <__mcmp+0x28>
 8022762:	f04f 32ff 	mov.w	r2, #4294967295
 8022766:	e7f7      	b.n	8022758 <__mcmp+0x28>

08022768 <__mdiff>:
 8022768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802276c:	460c      	mov	r4, r1
 802276e:	4606      	mov	r6, r0
 8022770:	4611      	mov	r1, r2
 8022772:	4620      	mov	r0, r4
 8022774:	4617      	mov	r7, r2
 8022776:	f7ff ffdb 	bl	8022730 <__mcmp>
 802277a:	1e05      	subs	r5, r0, #0
 802277c:	d110      	bne.n	80227a0 <__mdiff+0x38>
 802277e:	4629      	mov	r1, r5
 8022780:	4630      	mov	r0, r6
 8022782:	f7ff fd57 	bl	8022234 <_Balloc>
 8022786:	b930      	cbnz	r0, 8022796 <__mdiff+0x2e>
 8022788:	4b39      	ldr	r3, [pc, #228]	; (8022870 <__mdiff+0x108>)
 802278a:	4602      	mov	r2, r0
 802278c:	f240 2132 	movw	r1, #562	; 0x232
 8022790:	4838      	ldr	r0, [pc, #224]	; (8022874 <__mdiff+0x10c>)
 8022792:	f000 fa5d 	bl	8022c50 <__assert_func>
 8022796:	2301      	movs	r3, #1
 8022798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802279c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227a0:	bfa4      	itt	ge
 80227a2:	463b      	movge	r3, r7
 80227a4:	4627      	movge	r7, r4
 80227a6:	4630      	mov	r0, r6
 80227a8:	6879      	ldr	r1, [r7, #4]
 80227aa:	bfa6      	itte	ge
 80227ac:	461c      	movge	r4, r3
 80227ae:	2500      	movge	r5, #0
 80227b0:	2501      	movlt	r5, #1
 80227b2:	f7ff fd3f 	bl	8022234 <_Balloc>
 80227b6:	b920      	cbnz	r0, 80227c2 <__mdiff+0x5a>
 80227b8:	4b2d      	ldr	r3, [pc, #180]	; (8022870 <__mdiff+0x108>)
 80227ba:	4602      	mov	r2, r0
 80227bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80227c0:	e7e6      	b.n	8022790 <__mdiff+0x28>
 80227c2:	693e      	ldr	r6, [r7, #16]
 80227c4:	60c5      	str	r5, [r0, #12]
 80227c6:	6925      	ldr	r5, [r4, #16]
 80227c8:	f107 0114 	add.w	r1, r7, #20
 80227cc:	f104 0914 	add.w	r9, r4, #20
 80227d0:	f100 0e14 	add.w	lr, r0, #20
 80227d4:	f107 0210 	add.w	r2, r7, #16
 80227d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80227dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80227e0:	46f2      	mov	sl, lr
 80227e2:	2700      	movs	r7, #0
 80227e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80227e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80227ec:	fa1f f883 	uxth.w	r8, r3
 80227f0:	fa17 f78b 	uxtah	r7, r7, fp
 80227f4:	0c1b      	lsrs	r3, r3, #16
 80227f6:	eba7 0808 	sub.w	r8, r7, r8
 80227fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80227fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022802:	fa1f f888 	uxth.w	r8, r8
 8022806:	141f      	asrs	r7, r3, #16
 8022808:	454d      	cmp	r5, r9
 802280a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802280e:	f84a 3b04 	str.w	r3, [sl], #4
 8022812:	d8e7      	bhi.n	80227e4 <__mdiff+0x7c>
 8022814:	1b2b      	subs	r3, r5, r4
 8022816:	3b15      	subs	r3, #21
 8022818:	f023 0303 	bic.w	r3, r3, #3
 802281c:	3304      	adds	r3, #4
 802281e:	3415      	adds	r4, #21
 8022820:	42a5      	cmp	r5, r4
 8022822:	bf38      	it	cc
 8022824:	2304      	movcc	r3, #4
 8022826:	4419      	add	r1, r3
 8022828:	4473      	add	r3, lr
 802282a:	469e      	mov	lr, r3
 802282c:	460d      	mov	r5, r1
 802282e:	4565      	cmp	r5, ip
 8022830:	d30e      	bcc.n	8022850 <__mdiff+0xe8>
 8022832:	f10c 0203 	add.w	r2, ip, #3
 8022836:	1a52      	subs	r2, r2, r1
 8022838:	f022 0203 	bic.w	r2, r2, #3
 802283c:	3903      	subs	r1, #3
 802283e:	458c      	cmp	ip, r1
 8022840:	bf38      	it	cc
 8022842:	2200      	movcc	r2, #0
 8022844:	441a      	add	r2, r3
 8022846:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802284a:	b17b      	cbz	r3, 802286c <__mdiff+0x104>
 802284c:	6106      	str	r6, [r0, #16]
 802284e:	e7a5      	b.n	802279c <__mdiff+0x34>
 8022850:	f855 8b04 	ldr.w	r8, [r5], #4
 8022854:	fa17 f488 	uxtah	r4, r7, r8
 8022858:	1422      	asrs	r2, r4, #16
 802285a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802285e:	b2a4      	uxth	r4, r4
 8022860:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022864:	f84e 4b04 	str.w	r4, [lr], #4
 8022868:	1417      	asrs	r7, r2, #16
 802286a:	e7e0      	b.n	802282e <__mdiff+0xc6>
 802286c:	3e01      	subs	r6, #1
 802286e:	e7ea      	b.n	8022846 <__mdiff+0xde>
 8022870:	08049baf 	.word	0x08049baf
 8022874:	08049bc0 	.word	0x08049bc0

08022878 <__d2b>:
 8022878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802287c:	4689      	mov	r9, r1
 802287e:	2101      	movs	r1, #1
 8022880:	ec57 6b10 	vmov	r6, r7, d0
 8022884:	4690      	mov	r8, r2
 8022886:	f7ff fcd5 	bl	8022234 <_Balloc>
 802288a:	4604      	mov	r4, r0
 802288c:	b930      	cbnz	r0, 802289c <__d2b+0x24>
 802288e:	4602      	mov	r2, r0
 8022890:	4b25      	ldr	r3, [pc, #148]	; (8022928 <__d2b+0xb0>)
 8022892:	4826      	ldr	r0, [pc, #152]	; (802292c <__d2b+0xb4>)
 8022894:	f240 310a 	movw	r1, #778	; 0x30a
 8022898:	f000 f9da 	bl	8022c50 <__assert_func>
 802289c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80228a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80228a4:	bb35      	cbnz	r5, 80228f4 <__d2b+0x7c>
 80228a6:	2e00      	cmp	r6, #0
 80228a8:	9301      	str	r3, [sp, #4]
 80228aa:	d028      	beq.n	80228fe <__d2b+0x86>
 80228ac:	4668      	mov	r0, sp
 80228ae:	9600      	str	r6, [sp, #0]
 80228b0:	f7ff fd8c 	bl	80223cc <__lo0bits>
 80228b4:	9900      	ldr	r1, [sp, #0]
 80228b6:	b300      	cbz	r0, 80228fa <__d2b+0x82>
 80228b8:	9a01      	ldr	r2, [sp, #4]
 80228ba:	f1c0 0320 	rsb	r3, r0, #32
 80228be:	fa02 f303 	lsl.w	r3, r2, r3
 80228c2:	430b      	orrs	r3, r1
 80228c4:	40c2      	lsrs	r2, r0
 80228c6:	6163      	str	r3, [r4, #20]
 80228c8:	9201      	str	r2, [sp, #4]
 80228ca:	9b01      	ldr	r3, [sp, #4]
 80228cc:	61a3      	str	r3, [r4, #24]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	bf14      	ite	ne
 80228d2:	2202      	movne	r2, #2
 80228d4:	2201      	moveq	r2, #1
 80228d6:	6122      	str	r2, [r4, #16]
 80228d8:	b1d5      	cbz	r5, 8022910 <__d2b+0x98>
 80228da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80228de:	4405      	add	r5, r0
 80228e0:	f8c9 5000 	str.w	r5, [r9]
 80228e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80228e8:	f8c8 0000 	str.w	r0, [r8]
 80228ec:	4620      	mov	r0, r4
 80228ee:	b003      	add	sp, #12
 80228f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80228f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80228f8:	e7d5      	b.n	80228a6 <__d2b+0x2e>
 80228fa:	6161      	str	r1, [r4, #20]
 80228fc:	e7e5      	b.n	80228ca <__d2b+0x52>
 80228fe:	a801      	add	r0, sp, #4
 8022900:	f7ff fd64 	bl	80223cc <__lo0bits>
 8022904:	9b01      	ldr	r3, [sp, #4]
 8022906:	6163      	str	r3, [r4, #20]
 8022908:	2201      	movs	r2, #1
 802290a:	6122      	str	r2, [r4, #16]
 802290c:	3020      	adds	r0, #32
 802290e:	e7e3      	b.n	80228d8 <__d2b+0x60>
 8022910:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022918:	f8c9 0000 	str.w	r0, [r9]
 802291c:	6918      	ldr	r0, [r3, #16]
 802291e:	f7ff fd35 	bl	802238c <__hi0bits>
 8022922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022926:	e7df      	b.n	80228e8 <__d2b+0x70>
 8022928:	08049baf 	.word	0x08049baf
 802292c:	08049bc0 	.word	0x08049bc0

08022930 <_calloc_r>:
 8022930:	b513      	push	{r0, r1, r4, lr}
 8022932:	434a      	muls	r2, r1
 8022934:	4611      	mov	r1, r2
 8022936:	9201      	str	r2, [sp, #4]
 8022938:	f7fe f94c 	bl	8020bd4 <_malloc_r>
 802293c:	4604      	mov	r4, r0
 802293e:	b118      	cbz	r0, 8022948 <_calloc_r+0x18>
 8022940:	9a01      	ldr	r2, [sp, #4]
 8022942:	2100      	movs	r1, #0
 8022944:	f7fe f8ee 	bl	8020b24 <memset>
 8022948:	4620      	mov	r0, r4
 802294a:	b002      	add	sp, #8
 802294c:	bd10      	pop	{r4, pc}

0802294e <_realloc_r>:
 802294e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022950:	4607      	mov	r7, r0
 8022952:	4614      	mov	r4, r2
 8022954:	460e      	mov	r6, r1
 8022956:	b921      	cbnz	r1, 8022962 <_realloc_r+0x14>
 8022958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802295c:	4611      	mov	r1, r2
 802295e:	f7fe b939 	b.w	8020bd4 <_malloc_r>
 8022962:	b922      	cbnz	r2, 802296e <_realloc_r+0x20>
 8022964:	f7fe f8e6 	bl	8020b34 <_free_r>
 8022968:	4625      	mov	r5, r4
 802296a:	4628      	mov	r0, r5
 802296c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802296e:	f000 f9b4 	bl	8022cda <_malloc_usable_size_r>
 8022972:	42a0      	cmp	r0, r4
 8022974:	d20f      	bcs.n	8022996 <_realloc_r+0x48>
 8022976:	4621      	mov	r1, r4
 8022978:	4638      	mov	r0, r7
 802297a:	f7fe f92b 	bl	8020bd4 <_malloc_r>
 802297e:	4605      	mov	r5, r0
 8022980:	2800      	cmp	r0, #0
 8022982:	d0f2      	beq.n	802296a <_realloc_r+0x1c>
 8022984:	4631      	mov	r1, r6
 8022986:	4622      	mov	r2, r4
 8022988:	f7fe f8a4 	bl	8020ad4 <memcpy>
 802298c:	4631      	mov	r1, r6
 802298e:	4638      	mov	r0, r7
 8022990:	f7fe f8d0 	bl	8020b34 <_free_r>
 8022994:	e7e9      	b.n	802296a <_realloc_r+0x1c>
 8022996:	4635      	mov	r5, r6
 8022998:	e7e7      	b.n	802296a <_realloc_r+0x1c>

0802299a <__ssputs_r>:
 802299a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802299e:	688e      	ldr	r6, [r1, #8]
 80229a0:	429e      	cmp	r6, r3
 80229a2:	4682      	mov	sl, r0
 80229a4:	460c      	mov	r4, r1
 80229a6:	4690      	mov	r8, r2
 80229a8:	461f      	mov	r7, r3
 80229aa:	d838      	bhi.n	8022a1e <__ssputs_r+0x84>
 80229ac:	898a      	ldrh	r2, [r1, #12]
 80229ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80229b2:	d032      	beq.n	8022a1a <__ssputs_r+0x80>
 80229b4:	6825      	ldr	r5, [r4, #0]
 80229b6:	6909      	ldr	r1, [r1, #16]
 80229b8:	eba5 0901 	sub.w	r9, r5, r1
 80229bc:	6965      	ldr	r5, [r4, #20]
 80229be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80229c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80229c6:	3301      	adds	r3, #1
 80229c8:	444b      	add	r3, r9
 80229ca:	106d      	asrs	r5, r5, #1
 80229cc:	429d      	cmp	r5, r3
 80229ce:	bf38      	it	cc
 80229d0:	461d      	movcc	r5, r3
 80229d2:	0553      	lsls	r3, r2, #21
 80229d4:	d531      	bpl.n	8022a3a <__ssputs_r+0xa0>
 80229d6:	4629      	mov	r1, r5
 80229d8:	f7fe f8fc 	bl	8020bd4 <_malloc_r>
 80229dc:	4606      	mov	r6, r0
 80229de:	b950      	cbnz	r0, 80229f6 <__ssputs_r+0x5c>
 80229e0:	230c      	movs	r3, #12
 80229e2:	f8ca 3000 	str.w	r3, [sl]
 80229e6:	89a3      	ldrh	r3, [r4, #12]
 80229e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80229ec:	81a3      	strh	r3, [r4, #12]
 80229ee:	f04f 30ff 	mov.w	r0, #4294967295
 80229f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229f6:	6921      	ldr	r1, [r4, #16]
 80229f8:	464a      	mov	r2, r9
 80229fa:	f7fe f86b 	bl	8020ad4 <memcpy>
 80229fe:	89a3      	ldrh	r3, [r4, #12]
 8022a00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022a08:	81a3      	strh	r3, [r4, #12]
 8022a0a:	6126      	str	r6, [r4, #16]
 8022a0c:	6165      	str	r5, [r4, #20]
 8022a0e:	444e      	add	r6, r9
 8022a10:	eba5 0509 	sub.w	r5, r5, r9
 8022a14:	6026      	str	r6, [r4, #0]
 8022a16:	60a5      	str	r5, [r4, #8]
 8022a18:	463e      	mov	r6, r7
 8022a1a:	42be      	cmp	r6, r7
 8022a1c:	d900      	bls.n	8022a20 <__ssputs_r+0x86>
 8022a1e:	463e      	mov	r6, r7
 8022a20:	4632      	mov	r2, r6
 8022a22:	6820      	ldr	r0, [r4, #0]
 8022a24:	4641      	mov	r1, r8
 8022a26:	f7fe f863 	bl	8020af0 <memmove>
 8022a2a:	68a3      	ldr	r3, [r4, #8]
 8022a2c:	6822      	ldr	r2, [r4, #0]
 8022a2e:	1b9b      	subs	r3, r3, r6
 8022a30:	4432      	add	r2, r6
 8022a32:	60a3      	str	r3, [r4, #8]
 8022a34:	6022      	str	r2, [r4, #0]
 8022a36:	2000      	movs	r0, #0
 8022a38:	e7db      	b.n	80229f2 <__ssputs_r+0x58>
 8022a3a:	462a      	mov	r2, r5
 8022a3c:	f7ff ff87 	bl	802294e <_realloc_r>
 8022a40:	4606      	mov	r6, r0
 8022a42:	2800      	cmp	r0, #0
 8022a44:	d1e1      	bne.n	8022a0a <__ssputs_r+0x70>
 8022a46:	6921      	ldr	r1, [r4, #16]
 8022a48:	4650      	mov	r0, sl
 8022a4a:	f7fe f873 	bl	8020b34 <_free_r>
 8022a4e:	e7c7      	b.n	80229e0 <__ssputs_r+0x46>

08022a50 <_svfiprintf_r>:
 8022a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a54:	4698      	mov	r8, r3
 8022a56:	898b      	ldrh	r3, [r1, #12]
 8022a58:	061b      	lsls	r3, r3, #24
 8022a5a:	b09d      	sub	sp, #116	; 0x74
 8022a5c:	4607      	mov	r7, r0
 8022a5e:	460d      	mov	r5, r1
 8022a60:	4614      	mov	r4, r2
 8022a62:	d50e      	bpl.n	8022a82 <_svfiprintf_r+0x32>
 8022a64:	690b      	ldr	r3, [r1, #16]
 8022a66:	b963      	cbnz	r3, 8022a82 <_svfiprintf_r+0x32>
 8022a68:	2140      	movs	r1, #64	; 0x40
 8022a6a:	f7fe f8b3 	bl	8020bd4 <_malloc_r>
 8022a6e:	6028      	str	r0, [r5, #0]
 8022a70:	6128      	str	r0, [r5, #16]
 8022a72:	b920      	cbnz	r0, 8022a7e <_svfiprintf_r+0x2e>
 8022a74:	230c      	movs	r3, #12
 8022a76:	603b      	str	r3, [r7, #0]
 8022a78:	f04f 30ff 	mov.w	r0, #4294967295
 8022a7c:	e0d1      	b.n	8022c22 <_svfiprintf_r+0x1d2>
 8022a7e:	2340      	movs	r3, #64	; 0x40
 8022a80:	616b      	str	r3, [r5, #20]
 8022a82:	2300      	movs	r3, #0
 8022a84:	9309      	str	r3, [sp, #36]	; 0x24
 8022a86:	2320      	movs	r3, #32
 8022a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a90:	2330      	movs	r3, #48	; 0x30
 8022a92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022c3c <_svfiprintf_r+0x1ec>
 8022a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a9a:	f04f 0901 	mov.w	r9, #1
 8022a9e:	4623      	mov	r3, r4
 8022aa0:	469a      	mov	sl, r3
 8022aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022aa6:	b10a      	cbz	r2, 8022aac <_svfiprintf_r+0x5c>
 8022aa8:	2a25      	cmp	r2, #37	; 0x25
 8022aaa:	d1f9      	bne.n	8022aa0 <_svfiprintf_r+0x50>
 8022aac:	ebba 0b04 	subs.w	fp, sl, r4
 8022ab0:	d00b      	beq.n	8022aca <_svfiprintf_r+0x7a>
 8022ab2:	465b      	mov	r3, fp
 8022ab4:	4622      	mov	r2, r4
 8022ab6:	4629      	mov	r1, r5
 8022ab8:	4638      	mov	r0, r7
 8022aba:	f7ff ff6e 	bl	802299a <__ssputs_r>
 8022abe:	3001      	adds	r0, #1
 8022ac0:	f000 80aa 	beq.w	8022c18 <_svfiprintf_r+0x1c8>
 8022ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ac6:	445a      	add	r2, fp
 8022ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8022aca:	f89a 3000 	ldrb.w	r3, [sl]
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	f000 80a2 	beq.w	8022c18 <_svfiprintf_r+0x1c8>
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8022ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022ade:	f10a 0a01 	add.w	sl, sl, #1
 8022ae2:	9304      	str	r3, [sp, #16]
 8022ae4:	9307      	str	r3, [sp, #28]
 8022ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022aea:	931a      	str	r3, [sp, #104]	; 0x68
 8022aec:	4654      	mov	r4, sl
 8022aee:	2205      	movs	r2, #5
 8022af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022af4:	4851      	ldr	r0, [pc, #324]	; (8022c3c <_svfiprintf_r+0x1ec>)
 8022af6:	f7dd fc0b 	bl	8000310 <memchr>
 8022afa:	9a04      	ldr	r2, [sp, #16]
 8022afc:	b9d8      	cbnz	r0, 8022b36 <_svfiprintf_r+0xe6>
 8022afe:	06d0      	lsls	r0, r2, #27
 8022b00:	bf44      	itt	mi
 8022b02:	2320      	movmi	r3, #32
 8022b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022b08:	0711      	lsls	r1, r2, #28
 8022b0a:	bf44      	itt	mi
 8022b0c:	232b      	movmi	r3, #43	; 0x2b
 8022b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022b12:	f89a 3000 	ldrb.w	r3, [sl]
 8022b16:	2b2a      	cmp	r3, #42	; 0x2a
 8022b18:	d015      	beq.n	8022b46 <_svfiprintf_r+0xf6>
 8022b1a:	9a07      	ldr	r2, [sp, #28]
 8022b1c:	4654      	mov	r4, sl
 8022b1e:	2000      	movs	r0, #0
 8022b20:	f04f 0c0a 	mov.w	ip, #10
 8022b24:	4621      	mov	r1, r4
 8022b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022b2a:	3b30      	subs	r3, #48	; 0x30
 8022b2c:	2b09      	cmp	r3, #9
 8022b2e:	d94e      	bls.n	8022bce <_svfiprintf_r+0x17e>
 8022b30:	b1b0      	cbz	r0, 8022b60 <_svfiprintf_r+0x110>
 8022b32:	9207      	str	r2, [sp, #28]
 8022b34:	e014      	b.n	8022b60 <_svfiprintf_r+0x110>
 8022b36:	eba0 0308 	sub.w	r3, r0, r8
 8022b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8022b3e:	4313      	orrs	r3, r2
 8022b40:	9304      	str	r3, [sp, #16]
 8022b42:	46a2      	mov	sl, r4
 8022b44:	e7d2      	b.n	8022aec <_svfiprintf_r+0x9c>
 8022b46:	9b03      	ldr	r3, [sp, #12]
 8022b48:	1d19      	adds	r1, r3, #4
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	9103      	str	r1, [sp, #12]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	bfbb      	ittet	lt
 8022b52:	425b      	neglt	r3, r3
 8022b54:	f042 0202 	orrlt.w	r2, r2, #2
 8022b58:	9307      	strge	r3, [sp, #28]
 8022b5a:	9307      	strlt	r3, [sp, #28]
 8022b5c:	bfb8      	it	lt
 8022b5e:	9204      	strlt	r2, [sp, #16]
 8022b60:	7823      	ldrb	r3, [r4, #0]
 8022b62:	2b2e      	cmp	r3, #46	; 0x2e
 8022b64:	d10c      	bne.n	8022b80 <_svfiprintf_r+0x130>
 8022b66:	7863      	ldrb	r3, [r4, #1]
 8022b68:	2b2a      	cmp	r3, #42	; 0x2a
 8022b6a:	d135      	bne.n	8022bd8 <_svfiprintf_r+0x188>
 8022b6c:	9b03      	ldr	r3, [sp, #12]
 8022b6e:	1d1a      	adds	r2, r3, #4
 8022b70:	681b      	ldr	r3, [r3, #0]
 8022b72:	9203      	str	r2, [sp, #12]
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	bfb8      	it	lt
 8022b78:	f04f 33ff 	movlt.w	r3, #4294967295
 8022b7c:	3402      	adds	r4, #2
 8022b7e:	9305      	str	r3, [sp, #20]
 8022b80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022c4c <_svfiprintf_r+0x1fc>
 8022b84:	7821      	ldrb	r1, [r4, #0]
 8022b86:	2203      	movs	r2, #3
 8022b88:	4650      	mov	r0, sl
 8022b8a:	f7dd fbc1 	bl	8000310 <memchr>
 8022b8e:	b140      	cbz	r0, 8022ba2 <_svfiprintf_r+0x152>
 8022b90:	2340      	movs	r3, #64	; 0x40
 8022b92:	eba0 000a 	sub.w	r0, r0, sl
 8022b96:	fa03 f000 	lsl.w	r0, r3, r0
 8022b9a:	9b04      	ldr	r3, [sp, #16]
 8022b9c:	4303      	orrs	r3, r0
 8022b9e:	3401      	adds	r4, #1
 8022ba0:	9304      	str	r3, [sp, #16]
 8022ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ba6:	4826      	ldr	r0, [pc, #152]	; (8022c40 <_svfiprintf_r+0x1f0>)
 8022ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022bac:	2206      	movs	r2, #6
 8022bae:	f7dd fbaf 	bl	8000310 <memchr>
 8022bb2:	2800      	cmp	r0, #0
 8022bb4:	d038      	beq.n	8022c28 <_svfiprintf_r+0x1d8>
 8022bb6:	4b23      	ldr	r3, [pc, #140]	; (8022c44 <_svfiprintf_r+0x1f4>)
 8022bb8:	bb1b      	cbnz	r3, 8022c02 <_svfiprintf_r+0x1b2>
 8022bba:	9b03      	ldr	r3, [sp, #12]
 8022bbc:	3307      	adds	r3, #7
 8022bbe:	f023 0307 	bic.w	r3, r3, #7
 8022bc2:	3308      	adds	r3, #8
 8022bc4:	9303      	str	r3, [sp, #12]
 8022bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bc8:	4433      	add	r3, r6
 8022bca:	9309      	str	r3, [sp, #36]	; 0x24
 8022bcc:	e767      	b.n	8022a9e <_svfiprintf_r+0x4e>
 8022bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8022bd2:	460c      	mov	r4, r1
 8022bd4:	2001      	movs	r0, #1
 8022bd6:	e7a5      	b.n	8022b24 <_svfiprintf_r+0xd4>
 8022bd8:	2300      	movs	r3, #0
 8022bda:	3401      	adds	r4, #1
 8022bdc:	9305      	str	r3, [sp, #20]
 8022bde:	4619      	mov	r1, r3
 8022be0:	f04f 0c0a 	mov.w	ip, #10
 8022be4:	4620      	mov	r0, r4
 8022be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022bea:	3a30      	subs	r2, #48	; 0x30
 8022bec:	2a09      	cmp	r2, #9
 8022bee:	d903      	bls.n	8022bf8 <_svfiprintf_r+0x1a8>
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d0c5      	beq.n	8022b80 <_svfiprintf_r+0x130>
 8022bf4:	9105      	str	r1, [sp, #20]
 8022bf6:	e7c3      	b.n	8022b80 <_svfiprintf_r+0x130>
 8022bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8022bfc:	4604      	mov	r4, r0
 8022bfe:	2301      	movs	r3, #1
 8022c00:	e7f0      	b.n	8022be4 <_svfiprintf_r+0x194>
 8022c02:	ab03      	add	r3, sp, #12
 8022c04:	9300      	str	r3, [sp, #0]
 8022c06:	462a      	mov	r2, r5
 8022c08:	4b0f      	ldr	r3, [pc, #60]	; (8022c48 <_svfiprintf_r+0x1f8>)
 8022c0a:	a904      	add	r1, sp, #16
 8022c0c:	4638      	mov	r0, r7
 8022c0e:	f7fe f8cb 	bl	8020da8 <_printf_float>
 8022c12:	1c42      	adds	r2, r0, #1
 8022c14:	4606      	mov	r6, r0
 8022c16:	d1d6      	bne.n	8022bc6 <_svfiprintf_r+0x176>
 8022c18:	89ab      	ldrh	r3, [r5, #12]
 8022c1a:	065b      	lsls	r3, r3, #25
 8022c1c:	f53f af2c 	bmi.w	8022a78 <_svfiprintf_r+0x28>
 8022c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022c22:	b01d      	add	sp, #116	; 0x74
 8022c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c28:	ab03      	add	r3, sp, #12
 8022c2a:	9300      	str	r3, [sp, #0]
 8022c2c:	462a      	mov	r2, r5
 8022c2e:	4b06      	ldr	r3, [pc, #24]	; (8022c48 <_svfiprintf_r+0x1f8>)
 8022c30:	a904      	add	r1, sp, #16
 8022c32:	4638      	mov	r0, r7
 8022c34:	f7fe fb44 	bl	80212c0 <_printf_i>
 8022c38:	e7eb      	b.n	8022c12 <_svfiprintf_r+0x1c2>
 8022c3a:	bf00      	nop
 8022c3c:	08049d1c 	.word	0x08049d1c
 8022c40:	08049d26 	.word	0x08049d26
 8022c44:	08020da9 	.word	0x08020da9
 8022c48:	0802299b 	.word	0x0802299b
 8022c4c:	08049d22 	.word	0x08049d22

08022c50 <__assert_func>:
 8022c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022c52:	4614      	mov	r4, r2
 8022c54:	461a      	mov	r2, r3
 8022c56:	4b09      	ldr	r3, [pc, #36]	; (8022c7c <__assert_func+0x2c>)
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	4605      	mov	r5, r0
 8022c5c:	68d8      	ldr	r0, [r3, #12]
 8022c5e:	b14c      	cbz	r4, 8022c74 <__assert_func+0x24>
 8022c60:	4b07      	ldr	r3, [pc, #28]	; (8022c80 <__assert_func+0x30>)
 8022c62:	9100      	str	r1, [sp, #0]
 8022c64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022c68:	4906      	ldr	r1, [pc, #24]	; (8022c84 <__assert_func+0x34>)
 8022c6a:	462b      	mov	r3, r5
 8022c6c:	f000 f80e 	bl	8022c8c <fiprintf>
 8022c70:	f000 fa62 	bl	8023138 <abort>
 8022c74:	4b04      	ldr	r3, [pc, #16]	; (8022c88 <__assert_func+0x38>)
 8022c76:	461c      	mov	r4, r3
 8022c78:	e7f3      	b.n	8022c62 <__assert_func+0x12>
 8022c7a:	bf00      	nop
 8022c7c:	24003050 	.word	0x24003050
 8022c80:	08049d2d 	.word	0x08049d2d
 8022c84:	08049d3a 	.word	0x08049d3a
 8022c88:	08049d68 	.word	0x08049d68

08022c8c <fiprintf>:
 8022c8c:	b40e      	push	{r1, r2, r3}
 8022c8e:	b503      	push	{r0, r1, lr}
 8022c90:	4601      	mov	r1, r0
 8022c92:	ab03      	add	r3, sp, #12
 8022c94:	4805      	ldr	r0, [pc, #20]	; (8022cac <fiprintf+0x20>)
 8022c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8022c9a:	6800      	ldr	r0, [r0, #0]
 8022c9c:	9301      	str	r3, [sp, #4]
 8022c9e:	f000 f84d 	bl	8022d3c <_vfiprintf_r>
 8022ca2:	b002      	add	sp, #8
 8022ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ca8:	b003      	add	sp, #12
 8022caa:	4770      	bx	lr
 8022cac:	24003050 	.word	0x24003050

08022cb0 <__retarget_lock_init_recursive>:
 8022cb0:	4770      	bx	lr

08022cb2 <__retarget_lock_acquire_recursive>:
 8022cb2:	4770      	bx	lr

08022cb4 <__retarget_lock_release_recursive>:
 8022cb4:	4770      	bx	lr

08022cb6 <__ascii_mbtowc>:
 8022cb6:	b082      	sub	sp, #8
 8022cb8:	b901      	cbnz	r1, 8022cbc <__ascii_mbtowc+0x6>
 8022cba:	a901      	add	r1, sp, #4
 8022cbc:	b142      	cbz	r2, 8022cd0 <__ascii_mbtowc+0x1a>
 8022cbe:	b14b      	cbz	r3, 8022cd4 <__ascii_mbtowc+0x1e>
 8022cc0:	7813      	ldrb	r3, [r2, #0]
 8022cc2:	600b      	str	r3, [r1, #0]
 8022cc4:	7812      	ldrb	r2, [r2, #0]
 8022cc6:	1e10      	subs	r0, r2, #0
 8022cc8:	bf18      	it	ne
 8022cca:	2001      	movne	r0, #1
 8022ccc:	b002      	add	sp, #8
 8022cce:	4770      	bx	lr
 8022cd0:	4610      	mov	r0, r2
 8022cd2:	e7fb      	b.n	8022ccc <__ascii_mbtowc+0x16>
 8022cd4:	f06f 0001 	mvn.w	r0, #1
 8022cd8:	e7f8      	b.n	8022ccc <__ascii_mbtowc+0x16>

08022cda <_malloc_usable_size_r>:
 8022cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022cde:	1f18      	subs	r0, r3, #4
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	bfbc      	itt	lt
 8022ce4:	580b      	ldrlt	r3, [r1, r0]
 8022ce6:	18c0      	addlt	r0, r0, r3
 8022ce8:	4770      	bx	lr

08022cea <__sfputc_r>:
 8022cea:	6893      	ldr	r3, [r2, #8]
 8022cec:	3b01      	subs	r3, #1
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	b410      	push	{r4}
 8022cf2:	6093      	str	r3, [r2, #8]
 8022cf4:	da08      	bge.n	8022d08 <__sfputc_r+0x1e>
 8022cf6:	6994      	ldr	r4, [r2, #24]
 8022cf8:	42a3      	cmp	r3, r4
 8022cfa:	db01      	blt.n	8022d00 <__sfputc_r+0x16>
 8022cfc:	290a      	cmp	r1, #10
 8022cfe:	d103      	bne.n	8022d08 <__sfputc_r+0x1e>
 8022d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022d04:	f000 b94a 	b.w	8022f9c <__swbuf_r>
 8022d08:	6813      	ldr	r3, [r2, #0]
 8022d0a:	1c58      	adds	r0, r3, #1
 8022d0c:	6010      	str	r0, [r2, #0]
 8022d0e:	7019      	strb	r1, [r3, #0]
 8022d10:	4608      	mov	r0, r1
 8022d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022d16:	4770      	bx	lr

08022d18 <__sfputs_r>:
 8022d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d1a:	4606      	mov	r6, r0
 8022d1c:	460f      	mov	r7, r1
 8022d1e:	4614      	mov	r4, r2
 8022d20:	18d5      	adds	r5, r2, r3
 8022d22:	42ac      	cmp	r4, r5
 8022d24:	d101      	bne.n	8022d2a <__sfputs_r+0x12>
 8022d26:	2000      	movs	r0, #0
 8022d28:	e007      	b.n	8022d3a <__sfputs_r+0x22>
 8022d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d2e:	463a      	mov	r2, r7
 8022d30:	4630      	mov	r0, r6
 8022d32:	f7ff ffda 	bl	8022cea <__sfputc_r>
 8022d36:	1c43      	adds	r3, r0, #1
 8022d38:	d1f3      	bne.n	8022d22 <__sfputs_r+0xa>
 8022d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022d3c <_vfiprintf_r>:
 8022d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d40:	460d      	mov	r5, r1
 8022d42:	b09d      	sub	sp, #116	; 0x74
 8022d44:	4614      	mov	r4, r2
 8022d46:	4698      	mov	r8, r3
 8022d48:	4606      	mov	r6, r0
 8022d4a:	b118      	cbz	r0, 8022d54 <_vfiprintf_r+0x18>
 8022d4c:	6983      	ldr	r3, [r0, #24]
 8022d4e:	b90b      	cbnz	r3, 8022d54 <_vfiprintf_r+0x18>
 8022d50:	f000 fb14 	bl	802337c <__sinit>
 8022d54:	4b89      	ldr	r3, [pc, #548]	; (8022f7c <_vfiprintf_r+0x240>)
 8022d56:	429d      	cmp	r5, r3
 8022d58:	d11b      	bne.n	8022d92 <_vfiprintf_r+0x56>
 8022d5a:	6875      	ldr	r5, [r6, #4]
 8022d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022d5e:	07d9      	lsls	r1, r3, #31
 8022d60:	d405      	bmi.n	8022d6e <_vfiprintf_r+0x32>
 8022d62:	89ab      	ldrh	r3, [r5, #12]
 8022d64:	059a      	lsls	r2, r3, #22
 8022d66:	d402      	bmi.n	8022d6e <_vfiprintf_r+0x32>
 8022d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022d6a:	f7ff ffa2 	bl	8022cb2 <__retarget_lock_acquire_recursive>
 8022d6e:	89ab      	ldrh	r3, [r5, #12]
 8022d70:	071b      	lsls	r3, r3, #28
 8022d72:	d501      	bpl.n	8022d78 <_vfiprintf_r+0x3c>
 8022d74:	692b      	ldr	r3, [r5, #16]
 8022d76:	b9eb      	cbnz	r3, 8022db4 <_vfiprintf_r+0x78>
 8022d78:	4629      	mov	r1, r5
 8022d7a:	4630      	mov	r0, r6
 8022d7c:	f000 f96e 	bl	802305c <__swsetup_r>
 8022d80:	b1c0      	cbz	r0, 8022db4 <_vfiprintf_r+0x78>
 8022d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022d84:	07dc      	lsls	r4, r3, #31
 8022d86:	d50e      	bpl.n	8022da6 <_vfiprintf_r+0x6a>
 8022d88:	f04f 30ff 	mov.w	r0, #4294967295
 8022d8c:	b01d      	add	sp, #116	; 0x74
 8022d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d92:	4b7b      	ldr	r3, [pc, #492]	; (8022f80 <_vfiprintf_r+0x244>)
 8022d94:	429d      	cmp	r5, r3
 8022d96:	d101      	bne.n	8022d9c <_vfiprintf_r+0x60>
 8022d98:	68b5      	ldr	r5, [r6, #8]
 8022d9a:	e7df      	b.n	8022d5c <_vfiprintf_r+0x20>
 8022d9c:	4b79      	ldr	r3, [pc, #484]	; (8022f84 <_vfiprintf_r+0x248>)
 8022d9e:	429d      	cmp	r5, r3
 8022da0:	bf08      	it	eq
 8022da2:	68f5      	ldreq	r5, [r6, #12]
 8022da4:	e7da      	b.n	8022d5c <_vfiprintf_r+0x20>
 8022da6:	89ab      	ldrh	r3, [r5, #12]
 8022da8:	0598      	lsls	r0, r3, #22
 8022daa:	d4ed      	bmi.n	8022d88 <_vfiprintf_r+0x4c>
 8022dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022dae:	f7ff ff81 	bl	8022cb4 <__retarget_lock_release_recursive>
 8022db2:	e7e9      	b.n	8022d88 <_vfiprintf_r+0x4c>
 8022db4:	2300      	movs	r3, #0
 8022db6:	9309      	str	r3, [sp, #36]	; 0x24
 8022db8:	2320      	movs	r3, #32
 8022dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8022dc2:	2330      	movs	r3, #48	; 0x30
 8022dc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022f88 <_vfiprintf_r+0x24c>
 8022dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022dcc:	f04f 0901 	mov.w	r9, #1
 8022dd0:	4623      	mov	r3, r4
 8022dd2:	469a      	mov	sl, r3
 8022dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022dd8:	b10a      	cbz	r2, 8022dde <_vfiprintf_r+0xa2>
 8022dda:	2a25      	cmp	r2, #37	; 0x25
 8022ddc:	d1f9      	bne.n	8022dd2 <_vfiprintf_r+0x96>
 8022dde:	ebba 0b04 	subs.w	fp, sl, r4
 8022de2:	d00b      	beq.n	8022dfc <_vfiprintf_r+0xc0>
 8022de4:	465b      	mov	r3, fp
 8022de6:	4622      	mov	r2, r4
 8022de8:	4629      	mov	r1, r5
 8022dea:	4630      	mov	r0, r6
 8022dec:	f7ff ff94 	bl	8022d18 <__sfputs_r>
 8022df0:	3001      	adds	r0, #1
 8022df2:	f000 80aa 	beq.w	8022f4a <_vfiprintf_r+0x20e>
 8022df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022df8:	445a      	add	r2, fp
 8022dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8022dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	f000 80a2 	beq.w	8022f4a <_vfiprintf_r+0x20e>
 8022e06:	2300      	movs	r3, #0
 8022e08:	f04f 32ff 	mov.w	r2, #4294967295
 8022e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022e10:	f10a 0a01 	add.w	sl, sl, #1
 8022e14:	9304      	str	r3, [sp, #16]
 8022e16:	9307      	str	r3, [sp, #28]
 8022e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8022e1e:	4654      	mov	r4, sl
 8022e20:	2205      	movs	r2, #5
 8022e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e26:	4858      	ldr	r0, [pc, #352]	; (8022f88 <_vfiprintf_r+0x24c>)
 8022e28:	f7dd fa72 	bl	8000310 <memchr>
 8022e2c:	9a04      	ldr	r2, [sp, #16]
 8022e2e:	b9d8      	cbnz	r0, 8022e68 <_vfiprintf_r+0x12c>
 8022e30:	06d1      	lsls	r1, r2, #27
 8022e32:	bf44      	itt	mi
 8022e34:	2320      	movmi	r3, #32
 8022e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e3a:	0713      	lsls	r3, r2, #28
 8022e3c:	bf44      	itt	mi
 8022e3e:	232b      	movmi	r3, #43	; 0x2b
 8022e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e44:	f89a 3000 	ldrb.w	r3, [sl]
 8022e48:	2b2a      	cmp	r3, #42	; 0x2a
 8022e4a:	d015      	beq.n	8022e78 <_vfiprintf_r+0x13c>
 8022e4c:	9a07      	ldr	r2, [sp, #28]
 8022e4e:	4654      	mov	r4, sl
 8022e50:	2000      	movs	r0, #0
 8022e52:	f04f 0c0a 	mov.w	ip, #10
 8022e56:	4621      	mov	r1, r4
 8022e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022e5c:	3b30      	subs	r3, #48	; 0x30
 8022e5e:	2b09      	cmp	r3, #9
 8022e60:	d94e      	bls.n	8022f00 <_vfiprintf_r+0x1c4>
 8022e62:	b1b0      	cbz	r0, 8022e92 <_vfiprintf_r+0x156>
 8022e64:	9207      	str	r2, [sp, #28]
 8022e66:	e014      	b.n	8022e92 <_vfiprintf_r+0x156>
 8022e68:	eba0 0308 	sub.w	r3, r0, r8
 8022e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8022e70:	4313      	orrs	r3, r2
 8022e72:	9304      	str	r3, [sp, #16]
 8022e74:	46a2      	mov	sl, r4
 8022e76:	e7d2      	b.n	8022e1e <_vfiprintf_r+0xe2>
 8022e78:	9b03      	ldr	r3, [sp, #12]
 8022e7a:	1d19      	adds	r1, r3, #4
 8022e7c:	681b      	ldr	r3, [r3, #0]
 8022e7e:	9103      	str	r1, [sp, #12]
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	bfbb      	ittet	lt
 8022e84:	425b      	neglt	r3, r3
 8022e86:	f042 0202 	orrlt.w	r2, r2, #2
 8022e8a:	9307      	strge	r3, [sp, #28]
 8022e8c:	9307      	strlt	r3, [sp, #28]
 8022e8e:	bfb8      	it	lt
 8022e90:	9204      	strlt	r2, [sp, #16]
 8022e92:	7823      	ldrb	r3, [r4, #0]
 8022e94:	2b2e      	cmp	r3, #46	; 0x2e
 8022e96:	d10c      	bne.n	8022eb2 <_vfiprintf_r+0x176>
 8022e98:	7863      	ldrb	r3, [r4, #1]
 8022e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8022e9c:	d135      	bne.n	8022f0a <_vfiprintf_r+0x1ce>
 8022e9e:	9b03      	ldr	r3, [sp, #12]
 8022ea0:	1d1a      	adds	r2, r3, #4
 8022ea2:	681b      	ldr	r3, [r3, #0]
 8022ea4:	9203      	str	r2, [sp, #12]
 8022ea6:	2b00      	cmp	r3, #0
 8022ea8:	bfb8      	it	lt
 8022eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8022eae:	3402      	adds	r4, #2
 8022eb0:	9305      	str	r3, [sp, #20]
 8022eb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022f98 <_vfiprintf_r+0x25c>
 8022eb6:	7821      	ldrb	r1, [r4, #0]
 8022eb8:	2203      	movs	r2, #3
 8022eba:	4650      	mov	r0, sl
 8022ebc:	f7dd fa28 	bl	8000310 <memchr>
 8022ec0:	b140      	cbz	r0, 8022ed4 <_vfiprintf_r+0x198>
 8022ec2:	2340      	movs	r3, #64	; 0x40
 8022ec4:	eba0 000a 	sub.w	r0, r0, sl
 8022ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8022ecc:	9b04      	ldr	r3, [sp, #16]
 8022ece:	4303      	orrs	r3, r0
 8022ed0:	3401      	adds	r4, #1
 8022ed2:	9304      	str	r3, [sp, #16]
 8022ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ed8:	482c      	ldr	r0, [pc, #176]	; (8022f8c <_vfiprintf_r+0x250>)
 8022eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022ede:	2206      	movs	r2, #6
 8022ee0:	f7dd fa16 	bl	8000310 <memchr>
 8022ee4:	2800      	cmp	r0, #0
 8022ee6:	d03f      	beq.n	8022f68 <_vfiprintf_r+0x22c>
 8022ee8:	4b29      	ldr	r3, [pc, #164]	; (8022f90 <_vfiprintf_r+0x254>)
 8022eea:	bb1b      	cbnz	r3, 8022f34 <_vfiprintf_r+0x1f8>
 8022eec:	9b03      	ldr	r3, [sp, #12]
 8022eee:	3307      	adds	r3, #7
 8022ef0:	f023 0307 	bic.w	r3, r3, #7
 8022ef4:	3308      	adds	r3, #8
 8022ef6:	9303      	str	r3, [sp, #12]
 8022ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022efa:	443b      	add	r3, r7
 8022efc:	9309      	str	r3, [sp, #36]	; 0x24
 8022efe:	e767      	b.n	8022dd0 <_vfiprintf_r+0x94>
 8022f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8022f04:	460c      	mov	r4, r1
 8022f06:	2001      	movs	r0, #1
 8022f08:	e7a5      	b.n	8022e56 <_vfiprintf_r+0x11a>
 8022f0a:	2300      	movs	r3, #0
 8022f0c:	3401      	adds	r4, #1
 8022f0e:	9305      	str	r3, [sp, #20]
 8022f10:	4619      	mov	r1, r3
 8022f12:	f04f 0c0a 	mov.w	ip, #10
 8022f16:	4620      	mov	r0, r4
 8022f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022f1c:	3a30      	subs	r2, #48	; 0x30
 8022f1e:	2a09      	cmp	r2, #9
 8022f20:	d903      	bls.n	8022f2a <_vfiprintf_r+0x1ee>
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d0c5      	beq.n	8022eb2 <_vfiprintf_r+0x176>
 8022f26:	9105      	str	r1, [sp, #20]
 8022f28:	e7c3      	b.n	8022eb2 <_vfiprintf_r+0x176>
 8022f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8022f2e:	4604      	mov	r4, r0
 8022f30:	2301      	movs	r3, #1
 8022f32:	e7f0      	b.n	8022f16 <_vfiprintf_r+0x1da>
 8022f34:	ab03      	add	r3, sp, #12
 8022f36:	9300      	str	r3, [sp, #0]
 8022f38:	462a      	mov	r2, r5
 8022f3a:	4b16      	ldr	r3, [pc, #88]	; (8022f94 <_vfiprintf_r+0x258>)
 8022f3c:	a904      	add	r1, sp, #16
 8022f3e:	4630      	mov	r0, r6
 8022f40:	f7fd ff32 	bl	8020da8 <_printf_float>
 8022f44:	4607      	mov	r7, r0
 8022f46:	1c78      	adds	r0, r7, #1
 8022f48:	d1d6      	bne.n	8022ef8 <_vfiprintf_r+0x1bc>
 8022f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022f4c:	07d9      	lsls	r1, r3, #31
 8022f4e:	d405      	bmi.n	8022f5c <_vfiprintf_r+0x220>
 8022f50:	89ab      	ldrh	r3, [r5, #12]
 8022f52:	059a      	lsls	r2, r3, #22
 8022f54:	d402      	bmi.n	8022f5c <_vfiprintf_r+0x220>
 8022f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022f58:	f7ff feac 	bl	8022cb4 <__retarget_lock_release_recursive>
 8022f5c:	89ab      	ldrh	r3, [r5, #12]
 8022f5e:	065b      	lsls	r3, r3, #25
 8022f60:	f53f af12 	bmi.w	8022d88 <_vfiprintf_r+0x4c>
 8022f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f66:	e711      	b.n	8022d8c <_vfiprintf_r+0x50>
 8022f68:	ab03      	add	r3, sp, #12
 8022f6a:	9300      	str	r3, [sp, #0]
 8022f6c:	462a      	mov	r2, r5
 8022f6e:	4b09      	ldr	r3, [pc, #36]	; (8022f94 <_vfiprintf_r+0x258>)
 8022f70:	a904      	add	r1, sp, #16
 8022f72:	4630      	mov	r0, r6
 8022f74:	f7fe f9a4 	bl	80212c0 <_printf_i>
 8022f78:	e7e4      	b.n	8022f44 <_vfiprintf_r+0x208>
 8022f7a:	bf00      	nop
 8022f7c:	08049d94 	.word	0x08049d94
 8022f80:	08049db4 	.word	0x08049db4
 8022f84:	08049d74 	.word	0x08049d74
 8022f88:	08049d1c 	.word	0x08049d1c
 8022f8c:	08049d26 	.word	0x08049d26
 8022f90:	08020da9 	.word	0x08020da9
 8022f94:	08022d19 	.word	0x08022d19
 8022f98:	08049d22 	.word	0x08049d22

08022f9c <__swbuf_r>:
 8022f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f9e:	460e      	mov	r6, r1
 8022fa0:	4614      	mov	r4, r2
 8022fa2:	4605      	mov	r5, r0
 8022fa4:	b118      	cbz	r0, 8022fae <__swbuf_r+0x12>
 8022fa6:	6983      	ldr	r3, [r0, #24]
 8022fa8:	b90b      	cbnz	r3, 8022fae <__swbuf_r+0x12>
 8022faa:	f000 f9e7 	bl	802337c <__sinit>
 8022fae:	4b21      	ldr	r3, [pc, #132]	; (8023034 <__swbuf_r+0x98>)
 8022fb0:	429c      	cmp	r4, r3
 8022fb2:	d12b      	bne.n	802300c <__swbuf_r+0x70>
 8022fb4:	686c      	ldr	r4, [r5, #4]
 8022fb6:	69a3      	ldr	r3, [r4, #24]
 8022fb8:	60a3      	str	r3, [r4, #8]
 8022fba:	89a3      	ldrh	r3, [r4, #12]
 8022fbc:	071a      	lsls	r2, r3, #28
 8022fbe:	d52f      	bpl.n	8023020 <__swbuf_r+0x84>
 8022fc0:	6923      	ldr	r3, [r4, #16]
 8022fc2:	b36b      	cbz	r3, 8023020 <__swbuf_r+0x84>
 8022fc4:	6923      	ldr	r3, [r4, #16]
 8022fc6:	6820      	ldr	r0, [r4, #0]
 8022fc8:	1ac0      	subs	r0, r0, r3
 8022fca:	6963      	ldr	r3, [r4, #20]
 8022fcc:	b2f6      	uxtb	r6, r6
 8022fce:	4283      	cmp	r3, r0
 8022fd0:	4637      	mov	r7, r6
 8022fd2:	dc04      	bgt.n	8022fde <__swbuf_r+0x42>
 8022fd4:	4621      	mov	r1, r4
 8022fd6:	4628      	mov	r0, r5
 8022fd8:	f000 f93c 	bl	8023254 <_fflush_r>
 8022fdc:	bb30      	cbnz	r0, 802302c <__swbuf_r+0x90>
 8022fde:	68a3      	ldr	r3, [r4, #8]
 8022fe0:	3b01      	subs	r3, #1
 8022fe2:	60a3      	str	r3, [r4, #8]
 8022fe4:	6823      	ldr	r3, [r4, #0]
 8022fe6:	1c5a      	adds	r2, r3, #1
 8022fe8:	6022      	str	r2, [r4, #0]
 8022fea:	701e      	strb	r6, [r3, #0]
 8022fec:	6963      	ldr	r3, [r4, #20]
 8022fee:	3001      	adds	r0, #1
 8022ff0:	4283      	cmp	r3, r0
 8022ff2:	d004      	beq.n	8022ffe <__swbuf_r+0x62>
 8022ff4:	89a3      	ldrh	r3, [r4, #12]
 8022ff6:	07db      	lsls	r3, r3, #31
 8022ff8:	d506      	bpl.n	8023008 <__swbuf_r+0x6c>
 8022ffa:	2e0a      	cmp	r6, #10
 8022ffc:	d104      	bne.n	8023008 <__swbuf_r+0x6c>
 8022ffe:	4621      	mov	r1, r4
 8023000:	4628      	mov	r0, r5
 8023002:	f000 f927 	bl	8023254 <_fflush_r>
 8023006:	b988      	cbnz	r0, 802302c <__swbuf_r+0x90>
 8023008:	4638      	mov	r0, r7
 802300a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802300c:	4b0a      	ldr	r3, [pc, #40]	; (8023038 <__swbuf_r+0x9c>)
 802300e:	429c      	cmp	r4, r3
 8023010:	d101      	bne.n	8023016 <__swbuf_r+0x7a>
 8023012:	68ac      	ldr	r4, [r5, #8]
 8023014:	e7cf      	b.n	8022fb6 <__swbuf_r+0x1a>
 8023016:	4b09      	ldr	r3, [pc, #36]	; (802303c <__swbuf_r+0xa0>)
 8023018:	429c      	cmp	r4, r3
 802301a:	bf08      	it	eq
 802301c:	68ec      	ldreq	r4, [r5, #12]
 802301e:	e7ca      	b.n	8022fb6 <__swbuf_r+0x1a>
 8023020:	4621      	mov	r1, r4
 8023022:	4628      	mov	r0, r5
 8023024:	f000 f81a 	bl	802305c <__swsetup_r>
 8023028:	2800      	cmp	r0, #0
 802302a:	d0cb      	beq.n	8022fc4 <__swbuf_r+0x28>
 802302c:	f04f 37ff 	mov.w	r7, #4294967295
 8023030:	e7ea      	b.n	8023008 <__swbuf_r+0x6c>
 8023032:	bf00      	nop
 8023034:	08049d94 	.word	0x08049d94
 8023038:	08049db4 	.word	0x08049db4
 802303c:	08049d74 	.word	0x08049d74

08023040 <__ascii_wctomb>:
 8023040:	b149      	cbz	r1, 8023056 <__ascii_wctomb+0x16>
 8023042:	2aff      	cmp	r2, #255	; 0xff
 8023044:	bf85      	ittet	hi
 8023046:	238a      	movhi	r3, #138	; 0x8a
 8023048:	6003      	strhi	r3, [r0, #0]
 802304a:	700a      	strbls	r2, [r1, #0]
 802304c:	f04f 30ff 	movhi.w	r0, #4294967295
 8023050:	bf98      	it	ls
 8023052:	2001      	movls	r0, #1
 8023054:	4770      	bx	lr
 8023056:	4608      	mov	r0, r1
 8023058:	4770      	bx	lr
	...

0802305c <__swsetup_r>:
 802305c:	4b32      	ldr	r3, [pc, #200]	; (8023128 <__swsetup_r+0xcc>)
 802305e:	b570      	push	{r4, r5, r6, lr}
 8023060:	681d      	ldr	r5, [r3, #0]
 8023062:	4606      	mov	r6, r0
 8023064:	460c      	mov	r4, r1
 8023066:	b125      	cbz	r5, 8023072 <__swsetup_r+0x16>
 8023068:	69ab      	ldr	r3, [r5, #24]
 802306a:	b913      	cbnz	r3, 8023072 <__swsetup_r+0x16>
 802306c:	4628      	mov	r0, r5
 802306e:	f000 f985 	bl	802337c <__sinit>
 8023072:	4b2e      	ldr	r3, [pc, #184]	; (802312c <__swsetup_r+0xd0>)
 8023074:	429c      	cmp	r4, r3
 8023076:	d10f      	bne.n	8023098 <__swsetup_r+0x3c>
 8023078:	686c      	ldr	r4, [r5, #4]
 802307a:	89a3      	ldrh	r3, [r4, #12]
 802307c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023080:	0719      	lsls	r1, r3, #28
 8023082:	d42c      	bmi.n	80230de <__swsetup_r+0x82>
 8023084:	06dd      	lsls	r5, r3, #27
 8023086:	d411      	bmi.n	80230ac <__swsetup_r+0x50>
 8023088:	2309      	movs	r3, #9
 802308a:	6033      	str	r3, [r6, #0]
 802308c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023090:	81a3      	strh	r3, [r4, #12]
 8023092:	f04f 30ff 	mov.w	r0, #4294967295
 8023096:	e03e      	b.n	8023116 <__swsetup_r+0xba>
 8023098:	4b25      	ldr	r3, [pc, #148]	; (8023130 <__swsetup_r+0xd4>)
 802309a:	429c      	cmp	r4, r3
 802309c:	d101      	bne.n	80230a2 <__swsetup_r+0x46>
 802309e:	68ac      	ldr	r4, [r5, #8]
 80230a0:	e7eb      	b.n	802307a <__swsetup_r+0x1e>
 80230a2:	4b24      	ldr	r3, [pc, #144]	; (8023134 <__swsetup_r+0xd8>)
 80230a4:	429c      	cmp	r4, r3
 80230a6:	bf08      	it	eq
 80230a8:	68ec      	ldreq	r4, [r5, #12]
 80230aa:	e7e6      	b.n	802307a <__swsetup_r+0x1e>
 80230ac:	0758      	lsls	r0, r3, #29
 80230ae:	d512      	bpl.n	80230d6 <__swsetup_r+0x7a>
 80230b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80230b2:	b141      	cbz	r1, 80230c6 <__swsetup_r+0x6a>
 80230b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230b8:	4299      	cmp	r1, r3
 80230ba:	d002      	beq.n	80230c2 <__swsetup_r+0x66>
 80230bc:	4630      	mov	r0, r6
 80230be:	f7fd fd39 	bl	8020b34 <_free_r>
 80230c2:	2300      	movs	r3, #0
 80230c4:	6363      	str	r3, [r4, #52]	; 0x34
 80230c6:	89a3      	ldrh	r3, [r4, #12]
 80230c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80230cc:	81a3      	strh	r3, [r4, #12]
 80230ce:	2300      	movs	r3, #0
 80230d0:	6063      	str	r3, [r4, #4]
 80230d2:	6923      	ldr	r3, [r4, #16]
 80230d4:	6023      	str	r3, [r4, #0]
 80230d6:	89a3      	ldrh	r3, [r4, #12]
 80230d8:	f043 0308 	orr.w	r3, r3, #8
 80230dc:	81a3      	strh	r3, [r4, #12]
 80230de:	6923      	ldr	r3, [r4, #16]
 80230e0:	b94b      	cbnz	r3, 80230f6 <__swsetup_r+0x9a>
 80230e2:	89a3      	ldrh	r3, [r4, #12]
 80230e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80230e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80230ec:	d003      	beq.n	80230f6 <__swsetup_r+0x9a>
 80230ee:	4621      	mov	r1, r4
 80230f0:	4630      	mov	r0, r6
 80230f2:	f000 fa05 	bl	8023500 <__smakebuf_r>
 80230f6:	89a0      	ldrh	r0, [r4, #12]
 80230f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80230fc:	f010 0301 	ands.w	r3, r0, #1
 8023100:	d00a      	beq.n	8023118 <__swsetup_r+0xbc>
 8023102:	2300      	movs	r3, #0
 8023104:	60a3      	str	r3, [r4, #8]
 8023106:	6963      	ldr	r3, [r4, #20]
 8023108:	425b      	negs	r3, r3
 802310a:	61a3      	str	r3, [r4, #24]
 802310c:	6923      	ldr	r3, [r4, #16]
 802310e:	b943      	cbnz	r3, 8023122 <__swsetup_r+0xc6>
 8023110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023114:	d1ba      	bne.n	802308c <__swsetup_r+0x30>
 8023116:	bd70      	pop	{r4, r5, r6, pc}
 8023118:	0781      	lsls	r1, r0, #30
 802311a:	bf58      	it	pl
 802311c:	6963      	ldrpl	r3, [r4, #20]
 802311e:	60a3      	str	r3, [r4, #8]
 8023120:	e7f4      	b.n	802310c <__swsetup_r+0xb0>
 8023122:	2000      	movs	r0, #0
 8023124:	e7f7      	b.n	8023116 <__swsetup_r+0xba>
 8023126:	bf00      	nop
 8023128:	24003050 	.word	0x24003050
 802312c:	08049d94 	.word	0x08049d94
 8023130:	08049db4 	.word	0x08049db4
 8023134:	08049d74 	.word	0x08049d74

08023138 <abort>:
 8023138:	b508      	push	{r3, lr}
 802313a:	2006      	movs	r0, #6
 802313c:	f000 fa48 	bl	80235d0 <raise>
 8023140:	2001      	movs	r0, #1
 8023142:	f000 feed 	bl	8023f20 <_exit>
	...

08023148 <__sflush_r>:
 8023148:	898a      	ldrh	r2, [r1, #12]
 802314a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802314e:	4605      	mov	r5, r0
 8023150:	0710      	lsls	r0, r2, #28
 8023152:	460c      	mov	r4, r1
 8023154:	d458      	bmi.n	8023208 <__sflush_r+0xc0>
 8023156:	684b      	ldr	r3, [r1, #4]
 8023158:	2b00      	cmp	r3, #0
 802315a:	dc05      	bgt.n	8023168 <__sflush_r+0x20>
 802315c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802315e:	2b00      	cmp	r3, #0
 8023160:	dc02      	bgt.n	8023168 <__sflush_r+0x20>
 8023162:	2000      	movs	r0, #0
 8023164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802316a:	2e00      	cmp	r6, #0
 802316c:	d0f9      	beq.n	8023162 <__sflush_r+0x1a>
 802316e:	2300      	movs	r3, #0
 8023170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023174:	682f      	ldr	r7, [r5, #0]
 8023176:	602b      	str	r3, [r5, #0]
 8023178:	d032      	beq.n	80231e0 <__sflush_r+0x98>
 802317a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802317c:	89a3      	ldrh	r3, [r4, #12]
 802317e:	075a      	lsls	r2, r3, #29
 8023180:	d505      	bpl.n	802318e <__sflush_r+0x46>
 8023182:	6863      	ldr	r3, [r4, #4]
 8023184:	1ac0      	subs	r0, r0, r3
 8023186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023188:	b10b      	cbz	r3, 802318e <__sflush_r+0x46>
 802318a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802318c:	1ac0      	subs	r0, r0, r3
 802318e:	2300      	movs	r3, #0
 8023190:	4602      	mov	r2, r0
 8023192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023194:	6a21      	ldr	r1, [r4, #32]
 8023196:	4628      	mov	r0, r5
 8023198:	47b0      	blx	r6
 802319a:	1c43      	adds	r3, r0, #1
 802319c:	89a3      	ldrh	r3, [r4, #12]
 802319e:	d106      	bne.n	80231ae <__sflush_r+0x66>
 80231a0:	6829      	ldr	r1, [r5, #0]
 80231a2:	291d      	cmp	r1, #29
 80231a4:	d82c      	bhi.n	8023200 <__sflush_r+0xb8>
 80231a6:	4a2a      	ldr	r2, [pc, #168]	; (8023250 <__sflush_r+0x108>)
 80231a8:	40ca      	lsrs	r2, r1
 80231aa:	07d6      	lsls	r6, r2, #31
 80231ac:	d528      	bpl.n	8023200 <__sflush_r+0xb8>
 80231ae:	2200      	movs	r2, #0
 80231b0:	6062      	str	r2, [r4, #4]
 80231b2:	04d9      	lsls	r1, r3, #19
 80231b4:	6922      	ldr	r2, [r4, #16]
 80231b6:	6022      	str	r2, [r4, #0]
 80231b8:	d504      	bpl.n	80231c4 <__sflush_r+0x7c>
 80231ba:	1c42      	adds	r2, r0, #1
 80231bc:	d101      	bne.n	80231c2 <__sflush_r+0x7a>
 80231be:	682b      	ldr	r3, [r5, #0]
 80231c0:	b903      	cbnz	r3, 80231c4 <__sflush_r+0x7c>
 80231c2:	6560      	str	r0, [r4, #84]	; 0x54
 80231c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80231c6:	602f      	str	r7, [r5, #0]
 80231c8:	2900      	cmp	r1, #0
 80231ca:	d0ca      	beq.n	8023162 <__sflush_r+0x1a>
 80231cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80231d0:	4299      	cmp	r1, r3
 80231d2:	d002      	beq.n	80231da <__sflush_r+0x92>
 80231d4:	4628      	mov	r0, r5
 80231d6:	f7fd fcad 	bl	8020b34 <_free_r>
 80231da:	2000      	movs	r0, #0
 80231dc:	6360      	str	r0, [r4, #52]	; 0x34
 80231de:	e7c1      	b.n	8023164 <__sflush_r+0x1c>
 80231e0:	6a21      	ldr	r1, [r4, #32]
 80231e2:	2301      	movs	r3, #1
 80231e4:	4628      	mov	r0, r5
 80231e6:	47b0      	blx	r6
 80231e8:	1c41      	adds	r1, r0, #1
 80231ea:	d1c7      	bne.n	802317c <__sflush_r+0x34>
 80231ec:	682b      	ldr	r3, [r5, #0]
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d0c4      	beq.n	802317c <__sflush_r+0x34>
 80231f2:	2b1d      	cmp	r3, #29
 80231f4:	d001      	beq.n	80231fa <__sflush_r+0xb2>
 80231f6:	2b16      	cmp	r3, #22
 80231f8:	d101      	bne.n	80231fe <__sflush_r+0xb6>
 80231fa:	602f      	str	r7, [r5, #0]
 80231fc:	e7b1      	b.n	8023162 <__sflush_r+0x1a>
 80231fe:	89a3      	ldrh	r3, [r4, #12]
 8023200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023204:	81a3      	strh	r3, [r4, #12]
 8023206:	e7ad      	b.n	8023164 <__sflush_r+0x1c>
 8023208:	690f      	ldr	r7, [r1, #16]
 802320a:	2f00      	cmp	r7, #0
 802320c:	d0a9      	beq.n	8023162 <__sflush_r+0x1a>
 802320e:	0793      	lsls	r3, r2, #30
 8023210:	680e      	ldr	r6, [r1, #0]
 8023212:	bf08      	it	eq
 8023214:	694b      	ldreq	r3, [r1, #20]
 8023216:	600f      	str	r7, [r1, #0]
 8023218:	bf18      	it	ne
 802321a:	2300      	movne	r3, #0
 802321c:	eba6 0807 	sub.w	r8, r6, r7
 8023220:	608b      	str	r3, [r1, #8]
 8023222:	f1b8 0f00 	cmp.w	r8, #0
 8023226:	dd9c      	ble.n	8023162 <__sflush_r+0x1a>
 8023228:	6a21      	ldr	r1, [r4, #32]
 802322a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802322c:	4643      	mov	r3, r8
 802322e:	463a      	mov	r2, r7
 8023230:	4628      	mov	r0, r5
 8023232:	47b0      	blx	r6
 8023234:	2800      	cmp	r0, #0
 8023236:	dc06      	bgt.n	8023246 <__sflush_r+0xfe>
 8023238:	89a3      	ldrh	r3, [r4, #12]
 802323a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802323e:	81a3      	strh	r3, [r4, #12]
 8023240:	f04f 30ff 	mov.w	r0, #4294967295
 8023244:	e78e      	b.n	8023164 <__sflush_r+0x1c>
 8023246:	4407      	add	r7, r0
 8023248:	eba8 0800 	sub.w	r8, r8, r0
 802324c:	e7e9      	b.n	8023222 <__sflush_r+0xda>
 802324e:	bf00      	nop
 8023250:	20400001 	.word	0x20400001

08023254 <_fflush_r>:
 8023254:	b538      	push	{r3, r4, r5, lr}
 8023256:	690b      	ldr	r3, [r1, #16]
 8023258:	4605      	mov	r5, r0
 802325a:	460c      	mov	r4, r1
 802325c:	b913      	cbnz	r3, 8023264 <_fflush_r+0x10>
 802325e:	2500      	movs	r5, #0
 8023260:	4628      	mov	r0, r5
 8023262:	bd38      	pop	{r3, r4, r5, pc}
 8023264:	b118      	cbz	r0, 802326e <_fflush_r+0x1a>
 8023266:	6983      	ldr	r3, [r0, #24]
 8023268:	b90b      	cbnz	r3, 802326e <_fflush_r+0x1a>
 802326a:	f000 f887 	bl	802337c <__sinit>
 802326e:	4b14      	ldr	r3, [pc, #80]	; (80232c0 <_fflush_r+0x6c>)
 8023270:	429c      	cmp	r4, r3
 8023272:	d11b      	bne.n	80232ac <_fflush_r+0x58>
 8023274:	686c      	ldr	r4, [r5, #4]
 8023276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802327a:	2b00      	cmp	r3, #0
 802327c:	d0ef      	beq.n	802325e <_fflush_r+0xa>
 802327e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023280:	07d0      	lsls	r0, r2, #31
 8023282:	d404      	bmi.n	802328e <_fflush_r+0x3a>
 8023284:	0599      	lsls	r1, r3, #22
 8023286:	d402      	bmi.n	802328e <_fflush_r+0x3a>
 8023288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802328a:	f7ff fd12 	bl	8022cb2 <__retarget_lock_acquire_recursive>
 802328e:	4628      	mov	r0, r5
 8023290:	4621      	mov	r1, r4
 8023292:	f7ff ff59 	bl	8023148 <__sflush_r>
 8023296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023298:	07da      	lsls	r2, r3, #31
 802329a:	4605      	mov	r5, r0
 802329c:	d4e0      	bmi.n	8023260 <_fflush_r+0xc>
 802329e:	89a3      	ldrh	r3, [r4, #12]
 80232a0:	059b      	lsls	r3, r3, #22
 80232a2:	d4dd      	bmi.n	8023260 <_fflush_r+0xc>
 80232a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80232a6:	f7ff fd05 	bl	8022cb4 <__retarget_lock_release_recursive>
 80232aa:	e7d9      	b.n	8023260 <_fflush_r+0xc>
 80232ac:	4b05      	ldr	r3, [pc, #20]	; (80232c4 <_fflush_r+0x70>)
 80232ae:	429c      	cmp	r4, r3
 80232b0:	d101      	bne.n	80232b6 <_fflush_r+0x62>
 80232b2:	68ac      	ldr	r4, [r5, #8]
 80232b4:	e7df      	b.n	8023276 <_fflush_r+0x22>
 80232b6:	4b04      	ldr	r3, [pc, #16]	; (80232c8 <_fflush_r+0x74>)
 80232b8:	429c      	cmp	r4, r3
 80232ba:	bf08      	it	eq
 80232bc:	68ec      	ldreq	r4, [r5, #12]
 80232be:	e7da      	b.n	8023276 <_fflush_r+0x22>
 80232c0:	08049d94 	.word	0x08049d94
 80232c4:	08049db4 	.word	0x08049db4
 80232c8:	08049d74 	.word	0x08049d74

080232cc <std>:
 80232cc:	2300      	movs	r3, #0
 80232ce:	b510      	push	{r4, lr}
 80232d0:	4604      	mov	r4, r0
 80232d2:	e9c0 3300 	strd	r3, r3, [r0]
 80232d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80232da:	6083      	str	r3, [r0, #8]
 80232dc:	8181      	strh	r1, [r0, #12]
 80232de:	6643      	str	r3, [r0, #100]	; 0x64
 80232e0:	81c2      	strh	r2, [r0, #14]
 80232e2:	6183      	str	r3, [r0, #24]
 80232e4:	4619      	mov	r1, r3
 80232e6:	2208      	movs	r2, #8
 80232e8:	305c      	adds	r0, #92	; 0x5c
 80232ea:	f7fd fc1b 	bl	8020b24 <memset>
 80232ee:	4b05      	ldr	r3, [pc, #20]	; (8023304 <std+0x38>)
 80232f0:	6263      	str	r3, [r4, #36]	; 0x24
 80232f2:	4b05      	ldr	r3, [pc, #20]	; (8023308 <std+0x3c>)
 80232f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80232f6:	4b05      	ldr	r3, [pc, #20]	; (802330c <std+0x40>)
 80232f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80232fa:	4b05      	ldr	r3, [pc, #20]	; (8023310 <std+0x44>)
 80232fc:	6224      	str	r4, [r4, #32]
 80232fe:	6323      	str	r3, [r4, #48]	; 0x30
 8023300:	bd10      	pop	{r4, pc}
 8023302:	bf00      	nop
 8023304:	08023609 	.word	0x08023609
 8023308:	0802362b 	.word	0x0802362b
 802330c:	08023663 	.word	0x08023663
 8023310:	08023687 	.word	0x08023687

08023314 <_cleanup_r>:
 8023314:	4901      	ldr	r1, [pc, #4]	; (802331c <_cleanup_r+0x8>)
 8023316:	f000 b8af 	b.w	8023478 <_fwalk_reent>
 802331a:	bf00      	nop
 802331c:	08023255 	.word	0x08023255

08023320 <__sfmoreglue>:
 8023320:	b570      	push	{r4, r5, r6, lr}
 8023322:	1e4a      	subs	r2, r1, #1
 8023324:	2568      	movs	r5, #104	; 0x68
 8023326:	4355      	muls	r5, r2
 8023328:	460e      	mov	r6, r1
 802332a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802332e:	f7fd fc51 	bl	8020bd4 <_malloc_r>
 8023332:	4604      	mov	r4, r0
 8023334:	b140      	cbz	r0, 8023348 <__sfmoreglue+0x28>
 8023336:	2100      	movs	r1, #0
 8023338:	e9c0 1600 	strd	r1, r6, [r0]
 802333c:	300c      	adds	r0, #12
 802333e:	60a0      	str	r0, [r4, #8]
 8023340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023344:	f7fd fbee 	bl	8020b24 <memset>
 8023348:	4620      	mov	r0, r4
 802334a:	bd70      	pop	{r4, r5, r6, pc}

0802334c <__sfp_lock_acquire>:
 802334c:	4801      	ldr	r0, [pc, #4]	; (8023354 <__sfp_lock_acquire+0x8>)
 802334e:	f7ff bcb0 	b.w	8022cb2 <__retarget_lock_acquire_recursive>
 8023352:	bf00      	nop
 8023354:	240065c4 	.word	0x240065c4

08023358 <__sfp_lock_release>:
 8023358:	4801      	ldr	r0, [pc, #4]	; (8023360 <__sfp_lock_release+0x8>)
 802335a:	f7ff bcab 	b.w	8022cb4 <__retarget_lock_release_recursive>
 802335e:	bf00      	nop
 8023360:	240065c4 	.word	0x240065c4

08023364 <__sinit_lock_acquire>:
 8023364:	4801      	ldr	r0, [pc, #4]	; (802336c <__sinit_lock_acquire+0x8>)
 8023366:	f7ff bca4 	b.w	8022cb2 <__retarget_lock_acquire_recursive>
 802336a:	bf00      	nop
 802336c:	240065bf 	.word	0x240065bf

08023370 <__sinit_lock_release>:
 8023370:	4801      	ldr	r0, [pc, #4]	; (8023378 <__sinit_lock_release+0x8>)
 8023372:	f7ff bc9f 	b.w	8022cb4 <__retarget_lock_release_recursive>
 8023376:	bf00      	nop
 8023378:	240065bf 	.word	0x240065bf

0802337c <__sinit>:
 802337c:	b510      	push	{r4, lr}
 802337e:	4604      	mov	r4, r0
 8023380:	f7ff fff0 	bl	8023364 <__sinit_lock_acquire>
 8023384:	69a3      	ldr	r3, [r4, #24]
 8023386:	b11b      	cbz	r3, 8023390 <__sinit+0x14>
 8023388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802338c:	f7ff bff0 	b.w	8023370 <__sinit_lock_release>
 8023390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023394:	6523      	str	r3, [r4, #80]	; 0x50
 8023396:	4b13      	ldr	r3, [pc, #76]	; (80233e4 <__sinit+0x68>)
 8023398:	4a13      	ldr	r2, [pc, #76]	; (80233e8 <__sinit+0x6c>)
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	62a2      	str	r2, [r4, #40]	; 0x28
 802339e:	42a3      	cmp	r3, r4
 80233a0:	bf04      	itt	eq
 80233a2:	2301      	moveq	r3, #1
 80233a4:	61a3      	streq	r3, [r4, #24]
 80233a6:	4620      	mov	r0, r4
 80233a8:	f000 f820 	bl	80233ec <__sfp>
 80233ac:	6060      	str	r0, [r4, #4]
 80233ae:	4620      	mov	r0, r4
 80233b0:	f000 f81c 	bl	80233ec <__sfp>
 80233b4:	60a0      	str	r0, [r4, #8]
 80233b6:	4620      	mov	r0, r4
 80233b8:	f000 f818 	bl	80233ec <__sfp>
 80233bc:	2200      	movs	r2, #0
 80233be:	60e0      	str	r0, [r4, #12]
 80233c0:	2104      	movs	r1, #4
 80233c2:	6860      	ldr	r0, [r4, #4]
 80233c4:	f7ff ff82 	bl	80232cc <std>
 80233c8:	68a0      	ldr	r0, [r4, #8]
 80233ca:	2201      	movs	r2, #1
 80233cc:	2109      	movs	r1, #9
 80233ce:	f7ff ff7d 	bl	80232cc <std>
 80233d2:	68e0      	ldr	r0, [r4, #12]
 80233d4:	2202      	movs	r2, #2
 80233d6:	2112      	movs	r1, #18
 80233d8:	f7ff ff78 	bl	80232cc <std>
 80233dc:	2301      	movs	r3, #1
 80233de:	61a3      	str	r3, [r4, #24]
 80233e0:	e7d2      	b.n	8023388 <__sinit+0xc>
 80233e2:	bf00      	nop
 80233e4:	08049af4 	.word	0x08049af4
 80233e8:	08023315 	.word	0x08023315

080233ec <__sfp>:
 80233ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233ee:	4607      	mov	r7, r0
 80233f0:	f7ff ffac 	bl	802334c <__sfp_lock_acquire>
 80233f4:	4b1e      	ldr	r3, [pc, #120]	; (8023470 <__sfp+0x84>)
 80233f6:	681e      	ldr	r6, [r3, #0]
 80233f8:	69b3      	ldr	r3, [r6, #24]
 80233fa:	b913      	cbnz	r3, 8023402 <__sfp+0x16>
 80233fc:	4630      	mov	r0, r6
 80233fe:	f7ff ffbd 	bl	802337c <__sinit>
 8023402:	3648      	adds	r6, #72	; 0x48
 8023404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023408:	3b01      	subs	r3, #1
 802340a:	d503      	bpl.n	8023414 <__sfp+0x28>
 802340c:	6833      	ldr	r3, [r6, #0]
 802340e:	b30b      	cbz	r3, 8023454 <__sfp+0x68>
 8023410:	6836      	ldr	r6, [r6, #0]
 8023412:	e7f7      	b.n	8023404 <__sfp+0x18>
 8023414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023418:	b9d5      	cbnz	r5, 8023450 <__sfp+0x64>
 802341a:	4b16      	ldr	r3, [pc, #88]	; (8023474 <__sfp+0x88>)
 802341c:	60e3      	str	r3, [r4, #12]
 802341e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023422:	6665      	str	r5, [r4, #100]	; 0x64
 8023424:	f7ff fc44 	bl	8022cb0 <__retarget_lock_init_recursive>
 8023428:	f7ff ff96 	bl	8023358 <__sfp_lock_release>
 802342c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023434:	6025      	str	r5, [r4, #0]
 8023436:	61a5      	str	r5, [r4, #24]
 8023438:	2208      	movs	r2, #8
 802343a:	4629      	mov	r1, r5
 802343c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023440:	f7fd fb70 	bl	8020b24 <memset>
 8023444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802344c:	4620      	mov	r0, r4
 802344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023450:	3468      	adds	r4, #104	; 0x68
 8023452:	e7d9      	b.n	8023408 <__sfp+0x1c>
 8023454:	2104      	movs	r1, #4
 8023456:	4638      	mov	r0, r7
 8023458:	f7ff ff62 	bl	8023320 <__sfmoreglue>
 802345c:	4604      	mov	r4, r0
 802345e:	6030      	str	r0, [r6, #0]
 8023460:	2800      	cmp	r0, #0
 8023462:	d1d5      	bne.n	8023410 <__sfp+0x24>
 8023464:	f7ff ff78 	bl	8023358 <__sfp_lock_release>
 8023468:	230c      	movs	r3, #12
 802346a:	603b      	str	r3, [r7, #0]
 802346c:	e7ee      	b.n	802344c <__sfp+0x60>
 802346e:	bf00      	nop
 8023470:	08049af4 	.word	0x08049af4
 8023474:	ffff0001 	.word	0xffff0001

08023478 <_fwalk_reent>:
 8023478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802347c:	4606      	mov	r6, r0
 802347e:	4688      	mov	r8, r1
 8023480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023484:	2700      	movs	r7, #0
 8023486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802348a:	f1b9 0901 	subs.w	r9, r9, #1
 802348e:	d505      	bpl.n	802349c <_fwalk_reent+0x24>
 8023490:	6824      	ldr	r4, [r4, #0]
 8023492:	2c00      	cmp	r4, #0
 8023494:	d1f7      	bne.n	8023486 <_fwalk_reent+0xe>
 8023496:	4638      	mov	r0, r7
 8023498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802349c:	89ab      	ldrh	r3, [r5, #12]
 802349e:	2b01      	cmp	r3, #1
 80234a0:	d907      	bls.n	80234b2 <_fwalk_reent+0x3a>
 80234a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80234a6:	3301      	adds	r3, #1
 80234a8:	d003      	beq.n	80234b2 <_fwalk_reent+0x3a>
 80234aa:	4629      	mov	r1, r5
 80234ac:	4630      	mov	r0, r6
 80234ae:	47c0      	blx	r8
 80234b0:	4307      	orrs	r7, r0
 80234b2:	3568      	adds	r5, #104	; 0x68
 80234b4:	e7e9      	b.n	802348a <_fwalk_reent+0x12>

080234b6 <__swhatbuf_r>:
 80234b6:	b570      	push	{r4, r5, r6, lr}
 80234b8:	460e      	mov	r6, r1
 80234ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234be:	2900      	cmp	r1, #0
 80234c0:	b096      	sub	sp, #88	; 0x58
 80234c2:	4614      	mov	r4, r2
 80234c4:	461d      	mov	r5, r3
 80234c6:	da07      	bge.n	80234d8 <__swhatbuf_r+0x22>
 80234c8:	2300      	movs	r3, #0
 80234ca:	602b      	str	r3, [r5, #0]
 80234cc:	89b3      	ldrh	r3, [r6, #12]
 80234ce:	061a      	lsls	r2, r3, #24
 80234d0:	d410      	bmi.n	80234f4 <__swhatbuf_r+0x3e>
 80234d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80234d6:	e00e      	b.n	80234f6 <__swhatbuf_r+0x40>
 80234d8:	466a      	mov	r2, sp
 80234da:	f000 f8fb 	bl	80236d4 <_fstat_r>
 80234de:	2800      	cmp	r0, #0
 80234e0:	dbf2      	blt.n	80234c8 <__swhatbuf_r+0x12>
 80234e2:	9a01      	ldr	r2, [sp, #4]
 80234e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80234e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80234ec:	425a      	negs	r2, r3
 80234ee:	415a      	adcs	r2, r3
 80234f0:	602a      	str	r2, [r5, #0]
 80234f2:	e7ee      	b.n	80234d2 <__swhatbuf_r+0x1c>
 80234f4:	2340      	movs	r3, #64	; 0x40
 80234f6:	2000      	movs	r0, #0
 80234f8:	6023      	str	r3, [r4, #0]
 80234fa:	b016      	add	sp, #88	; 0x58
 80234fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08023500 <__smakebuf_r>:
 8023500:	898b      	ldrh	r3, [r1, #12]
 8023502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023504:	079d      	lsls	r5, r3, #30
 8023506:	4606      	mov	r6, r0
 8023508:	460c      	mov	r4, r1
 802350a:	d507      	bpl.n	802351c <__smakebuf_r+0x1c>
 802350c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023510:	6023      	str	r3, [r4, #0]
 8023512:	6123      	str	r3, [r4, #16]
 8023514:	2301      	movs	r3, #1
 8023516:	6163      	str	r3, [r4, #20]
 8023518:	b002      	add	sp, #8
 802351a:	bd70      	pop	{r4, r5, r6, pc}
 802351c:	ab01      	add	r3, sp, #4
 802351e:	466a      	mov	r2, sp
 8023520:	f7ff ffc9 	bl	80234b6 <__swhatbuf_r>
 8023524:	9900      	ldr	r1, [sp, #0]
 8023526:	4605      	mov	r5, r0
 8023528:	4630      	mov	r0, r6
 802352a:	f7fd fb53 	bl	8020bd4 <_malloc_r>
 802352e:	b948      	cbnz	r0, 8023544 <__smakebuf_r+0x44>
 8023530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023534:	059a      	lsls	r2, r3, #22
 8023536:	d4ef      	bmi.n	8023518 <__smakebuf_r+0x18>
 8023538:	f023 0303 	bic.w	r3, r3, #3
 802353c:	f043 0302 	orr.w	r3, r3, #2
 8023540:	81a3      	strh	r3, [r4, #12]
 8023542:	e7e3      	b.n	802350c <__smakebuf_r+0xc>
 8023544:	4b0d      	ldr	r3, [pc, #52]	; (802357c <__smakebuf_r+0x7c>)
 8023546:	62b3      	str	r3, [r6, #40]	; 0x28
 8023548:	89a3      	ldrh	r3, [r4, #12]
 802354a:	6020      	str	r0, [r4, #0]
 802354c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023550:	81a3      	strh	r3, [r4, #12]
 8023552:	9b00      	ldr	r3, [sp, #0]
 8023554:	6163      	str	r3, [r4, #20]
 8023556:	9b01      	ldr	r3, [sp, #4]
 8023558:	6120      	str	r0, [r4, #16]
 802355a:	b15b      	cbz	r3, 8023574 <__smakebuf_r+0x74>
 802355c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023560:	4630      	mov	r0, r6
 8023562:	f000 f8c9 	bl	80236f8 <_isatty_r>
 8023566:	b128      	cbz	r0, 8023574 <__smakebuf_r+0x74>
 8023568:	89a3      	ldrh	r3, [r4, #12]
 802356a:	f023 0303 	bic.w	r3, r3, #3
 802356e:	f043 0301 	orr.w	r3, r3, #1
 8023572:	81a3      	strh	r3, [r4, #12]
 8023574:	89a0      	ldrh	r0, [r4, #12]
 8023576:	4305      	orrs	r5, r0
 8023578:	81a5      	strh	r5, [r4, #12]
 802357a:	e7cd      	b.n	8023518 <__smakebuf_r+0x18>
 802357c:	08023315 	.word	0x08023315

08023580 <_raise_r>:
 8023580:	291f      	cmp	r1, #31
 8023582:	b538      	push	{r3, r4, r5, lr}
 8023584:	4604      	mov	r4, r0
 8023586:	460d      	mov	r5, r1
 8023588:	d904      	bls.n	8023594 <_raise_r+0x14>
 802358a:	2316      	movs	r3, #22
 802358c:	6003      	str	r3, [r0, #0]
 802358e:	f04f 30ff 	mov.w	r0, #4294967295
 8023592:	bd38      	pop	{r3, r4, r5, pc}
 8023594:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023596:	b112      	cbz	r2, 802359e <_raise_r+0x1e>
 8023598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802359c:	b94b      	cbnz	r3, 80235b2 <_raise_r+0x32>
 802359e:	4620      	mov	r0, r4
 80235a0:	f000 f830 	bl	8023604 <_getpid_r>
 80235a4:	462a      	mov	r2, r5
 80235a6:	4601      	mov	r1, r0
 80235a8:	4620      	mov	r0, r4
 80235aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80235ae:	f000 b817 	b.w	80235e0 <_kill_r>
 80235b2:	2b01      	cmp	r3, #1
 80235b4:	d00a      	beq.n	80235cc <_raise_r+0x4c>
 80235b6:	1c59      	adds	r1, r3, #1
 80235b8:	d103      	bne.n	80235c2 <_raise_r+0x42>
 80235ba:	2316      	movs	r3, #22
 80235bc:	6003      	str	r3, [r0, #0]
 80235be:	2001      	movs	r0, #1
 80235c0:	e7e7      	b.n	8023592 <_raise_r+0x12>
 80235c2:	2400      	movs	r4, #0
 80235c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80235c8:	4628      	mov	r0, r5
 80235ca:	4798      	blx	r3
 80235cc:	2000      	movs	r0, #0
 80235ce:	e7e0      	b.n	8023592 <_raise_r+0x12>

080235d0 <raise>:
 80235d0:	4b02      	ldr	r3, [pc, #8]	; (80235dc <raise+0xc>)
 80235d2:	4601      	mov	r1, r0
 80235d4:	6818      	ldr	r0, [r3, #0]
 80235d6:	f7ff bfd3 	b.w	8023580 <_raise_r>
 80235da:	bf00      	nop
 80235dc:	24003050 	.word	0x24003050

080235e0 <_kill_r>:
 80235e0:	b538      	push	{r3, r4, r5, lr}
 80235e2:	4d07      	ldr	r5, [pc, #28]	; (8023600 <_kill_r+0x20>)
 80235e4:	2300      	movs	r3, #0
 80235e6:	4604      	mov	r4, r0
 80235e8:	4608      	mov	r0, r1
 80235ea:	4611      	mov	r1, r2
 80235ec:	602b      	str	r3, [r5, #0]
 80235ee:	f000 fc69 	bl	8023ec4 <_kill>
 80235f2:	1c43      	adds	r3, r0, #1
 80235f4:	d102      	bne.n	80235fc <_kill_r+0x1c>
 80235f6:	682b      	ldr	r3, [r5, #0]
 80235f8:	b103      	cbz	r3, 80235fc <_kill_r+0x1c>
 80235fa:	6023      	str	r3, [r4, #0]
 80235fc:	bd38      	pop	{r3, r4, r5, pc}
 80235fe:	bf00      	nop
 8023600:	240065b8 	.word	0x240065b8

08023604 <_getpid_r>:
 8023604:	f000 bc4e 	b.w	8023ea4 <_getpid>

08023608 <__sread>:
 8023608:	b510      	push	{r4, lr}
 802360a:	460c      	mov	r4, r1
 802360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023610:	f000 f894 	bl	802373c <_read_r>
 8023614:	2800      	cmp	r0, #0
 8023616:	bfab      	itete	ge
 8023618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802361a:	89a3      	ldrhlt	r3, [r4, #12]
 802361c:	181b      	addge	r3, r3, r0
 802361e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023622:	bfac      	ite	ge
 8023624:	6563      	strge	r3, [r4, #84]	; 0x54
 8023626:	81a3      	strhlt	r3, [r4, #12]
 8023628:	bd10      	pop	{r4, pc}

0802362a <__swrite>:
 802362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802362e:	461f      	mov	r7, r3
 8023630:	898b      	ldrh	r3, [r1, #12]
 8023632:	05db      	lsls	r3, r3, #23
 8023634:	4605      	mov	r5, r0
 8023636:	460c      	mov	r4, r1
 8023638:	4616      	mov	r6, r2
 802363a:	d505      	bpl.n	8023648 <__swrite+0x1e>
 802363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023640:	2302      	movs	r3, #2
 8023642:	2200      	movs	r2, #0
 8023644:	f000 f868 	bl	8023718 <_lseek_r>
 8023648:	89a3      	ldrh	r3, [r4, #12]
 802364a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802364e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023652:	81a3      	strh	r3, [r4, #12]
 8023654:	4632      	mov	r2, r6
 8023656:	463b      	mov	r3, r7
 8023658:	4628      	mov	r0, r5
 802365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802365e:	f000 b817 	b.w	8023690 <_write_r>

08023662 <__sseek>:
 8023662:	b510      	push	{r4, lr}
 8023664:	460c      	mov	r4, r1
 8023666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802366a:	f000 f855 	bl	8023718 <_lseek_r>
 802366e:	1c43      	adds	r3, r0, #1
 8023670:	89a3      	ldrh	r3, [r4, #12]
 8023672:	bf15      	itete	ne
 8023674:	6560      	strne	r0, [r4, #84]	; 0x54
 8023676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802367a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802367e:	81a3      	strheq	r3, [r4, #12]
 8023680:	bf18      	it	ne
 8023682:	81a3      	strhne	r3, [r4, #12]
 8023684:	bd10      	pop	{r4, pc}

08023686 <__sclose>:
 8023686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802368a:	f000 b813 	b.w	80236b4 <_close_r>
	...

08023690 <_write_r>:
 8023690:	b538      	push	{r3, r4, r5, lr}
 8023692:	4d07      	ldr	r5, [pc, #28]	; (80236b0 <_write_r+0x20>)
 8023694:	4604      	mov	r4, r0
 8023696:	4608      	mov	r0, r1
 8023698:	4611      	mov	r1, r2
 802369a:	2200      	movs	r2, #0
 802369c:	602a      	str	r2, [r5, #0]
 802369e:	461a      	mov	r2, r3
 80236a0:	f000 fc36 	bl	8023f10 <_write>
 80236a4:	1c43      	adds	r3, r0, #1
 80236a6:	d102      	bne.n	80236ae <_write_r+0x1e>
 80236a8:	682b      	ldr	r3, [r5, #0]
 80236aa:	b103      	cbz	r3, 80236ae <_write_r+0x1e>
 80236ac:	6023      	str	r3, [r4, #0]
 80236ae:	bd38      	pop	{r3, r4, r5, pc}
 80236b0:	240065b8 	.word	0x240065b8

080236b4 <_close_r>:
 80236b4:	b538      	push	{r3, r4, r5, lr}
 80236b6:	4d06      	ldr	r5, [pc, #24]	; (80236d0 <_close_r+0x1c>)
 80236b8:	2300      	movs	r3, #0
 80236ba:	4604      	mov	r4, r0
 80236bc:	4608      	mov	r0, r1
 80236be:	602b      	str	r3, [r5, #0]
 80236c0:	f000 fbe0 	bl	8023e84 <_close>
 80236c4:	1c43      	adds	r3, r0, #1
 80236c6:	d102      	bne.n	80236ce <_close_r+0x1a>
 80236c8:	682b      	ldr	r3, [r5, #0]
 80236ca:	b103      	cbz	r3, 80236ce <_close_r+0x1a>
 80236cc:	6023      	str	r3, [r4, #0]
 80236ce:	bd38      	pop	{r3, r4, r5, pc}
 80236d0:	240065b8 	.word	0x240065b8

080236d4 <_fstat_r>:
 80236d4:	b538      	push	{r3, r4, r5, lr}
 80236d6:	4d07      	ldr	r5, [pc, #28]	; (80236f4 <_fstat_r+0x20>)
 80236d8:	2300      	movs	r3, #0
 80236da:	4604      	mov	r4, r0
 80236dc:	4608      	mov	r0, r1
 80236de:	4611      	mov	r1, r2
 80236e0:	602b      	str	r3, [r5, #0]
 80236e2:	f000 fbd7 	bl	8023e94 <_fstat>
 80236e6:	1c43      	adds	r3, r0, #1
 80236e8:	d102      	bne.n	80236f0 <_fstat_r+0x1c>
 80236ea:	682b      	ldr	r3, [r5, #0]
 80236ec:	b103      	cbz	r3, 80236f0 <_fstat_r+0x1c>
 80236ee:	6023      	str	r3, [r4, #0]
 80236f0:	bd38      	pop	{r3, r4, r5, pc}
 80236f2:	bf00      	nop
 80236f4:	240065b8 	.word	0x240065b8

080236f8 <_isatty_r>:
 80236f8:	b538      	push	{r3, r4, r5, lr}
 80236fa:	4d06      	ldr	r5, [pc, #24]	; (8023714 <_isatty_r+0x1c>)
 80236fc:	2300      	movs	r3, #0
 80236fe:	4604      	mov	r4, r0
 8023700:	4608      	mov	r0, r1
 8023702:	602b      	str	r3, [r5, #0]
 8023704:	f000 fbd6 	bl	8023eb4 <_isatty>
 8023708:	1c43      	adds	r3, r0, #1
 802370a:	d102      	bne.n	8023712 <_isatty_r+0x1a>
 802370c:	682b      	ldr	r3, [r5, #0]
 802370e:	b103      	cbz	r3, 8023712 <_isatty_r+0x1a>
 8023710:	6023      	str	r3, [r4, #0]
 8023712:	bd38      	pop	{r3, r4, r5, pc}
 8023714:	240065b8 	.word	0x240065b8

08023718 <_lseek_r>:
 8023718:	b538      	push	{r3, r4, r5, lr}
 802371a:	4d07      	ldr	r5, [pc, #28]	; (8023738 <_lseek_r+0x20>)
 802371c:	4604      	mov	r4, r0
 802371e:	4608      	mov	r0, r1
 8023720:	4611      	mov	r1, r2
 8023722:	2200      	movs	r2, #0
 8023724:	602a      	str	r2, [r5, #0]
 8023726:	461a      	mov	r2, r3
 8023728:	f000 fbd4 	bl	8023ed4 <_lseek>
 802372c:	1c43      	adds	r3, r0, #1
 802372e:	d102      	bne.n	8023736 <_lseek_r+0x1e>
 8023730:	682b      	ldr	r3, [r5, #0]
 8023732:	b103      	cbz	r3, 8023736 <_lseek_r+0x1e>
 8023734:	6023      	str	r3, [r4, #0]
 8023736:	bd38      	pop	{r3, r4, r5, pc}
 8023738:	240065b8 	.word	0x240065b8

0802373c <_read_r>:
 802373c:	b538      	push	{r3, r4, r5, lr}
 802373e:	4d07      	ldr	r5, [pc, #28]	; (802375c <_read_r+0x20>)
 8023740:	4604      	mov	r4, r0
 8023742:	4608      	mov	r0, r1
 8023744:	4611      	mov	r1, r2
 8023746:	2200      	movs	r2, #0
 8023748:	602a      	str	r2, [r5, #0]
 802374a:	461a      	mov	r2, r3
 802374c:	f000 fbca 	bl	8023ee4 <_read>
 8023750:	1c43      	adds	r3, r0, #1
 8023752:	d102      	bne.n	802375a <_read_r+0x1e>
 8023754:	682b      	ldr	r3, [r5, #0]
 8023756:	b103      	cbz	r3, 802375a <_read_r+0x1e>
 8023758:	6023      	str	r3, [r4, #0]
 802375a:	bd38      	pop	{r3, r4, r5, pc}
 802375c:	240065b8 	.word	0x240065b8

08023760 <log>:
 8023760:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8023764:	ed2d 8b02 	vpush	{d8}
 8023768:	b082      	sub	sp, #8
 802376a:	ed8d 0b00 	vstr	d0, [sp]
 802376e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023772:	2600      	movs	r6, #0
 8023774:	1994      	adds	r4, r2, r6
 8023776:	4e80      	ldr	r6, [pc, #512]	; (8023978 <log+0x218>)
 8023778:	4f80      	ldr	r7, [pc, #512]	; (802397c <log+0x21c>)
 802377a:	eb43 0506 	adc.w	r5, r3, r6
 802377e:	42af      	cmp	r7, r5
 8023780:	f04f 36ff 	mov.w	r6, #4294967295
 8023784:	bf08      	it	eq
 8023786:	42a6      	cmpeq	r6, r4
 8023788:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802378c:	d363      	bcc.n	8023856 <log+0xf6>
 802378e:	497c      	ldr	r1, [pc, #496]	; (8023980 <log+0x220>)
 8023790:	2000      	movs	r0, #0
 8023792:	428b      	cmp	r3, r1
 8023794:	bf08      	it	eq
 8023796:	4282      	cmpeq	r2, r0
 8023798:	f000 80de 	beq.w	8023958 <log+0x1f8>
 802379c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80237a0:	ee30 7b47 	vsub.f64	d7, d0, d7
 80237a4:	4b77      	ldr	r3, [pc, #476]	; (8023984 <log+0x224>)
 80237a6:	ee27 1b07 	vmul.f64	d1, d7, d7
 80237aa:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80237ae:	ee27 3b01 	vmul.f64	d3, d7, d1
 80237b2:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 80237b6:	eea6 4b07 	vfma.f64	d4, d6, d7
 80237ba:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80237be:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80237c2:	eea6 4b01 	vfma.f64	d4, d6, d1
 80237c6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80237ca:	eea5 6b07 	vfma.f64	d6, d5, d7
 80237ce:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80237d2:	eea5 6b01 	vfma.f64	d6, d5, d1
 80237d6:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80237da:	eeb0 2b46 	vmov.f64	d2, d6
 80237de:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80237e2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80237e6:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 80237ea:	eea5 6b01 	vfma.f64	d6, d5, d1
 80237ee:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 80237f2:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 80237f6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80237fa:	eea6 2b03 	vfma.f64	d2, d6, d3
 80237fe:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8023960 <log+0x200>
 8023802:	eea2 4b03 	vfma.f64	d4, d2, d3
 8023806:	eeb0 2b47 	vmov.f64	d2, d7
 802380a:	eea7 2b06 	vfma.f64	d2, d7, d6
 802380e:	eea7 2b46 	vfms.f64	d2, d7, d6
 8023812:	eeb0 6b47 	vmov.f64	d6, d7
 8023816:	ee37 8b42 	vsub.f64	d8, d7, d2
 802381a:	ee22 0b02 	vmul.f64	d0, d2, d2
 802381e:	eea0 6b01 	vfma.f64	d6, d0, d1
 8023822:	ee37 5b46 	vsub.f64	d5, d7, d6
 8023826:	ee37 7b02 	vadd.f64	d7, d7, d2
 802382a:	eea0 5b01 	vfma.f64	d5, d0, d1
 802382e:	ee21 1b08 	vmul.f64	d1, d1, d8
 8023832:	eea1 5b07 	vfma.f64	d5, d1, d7
 8023836:	eeb0 7b45 	vmov.f64	d7, d5
 802383a:	eea4 7b03 	vfma.f64	d7, d4, d3
 802383e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8023842:	ed8d 7b00 	vstr	d7, [sp]
 8023846:	ed9d 0b00 	vldr	d0, [sp]
 802384a:	b002      	add	sp, #8
 802384c:	ecbd 8b02 	vpop	{d8}
 8023850:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8023854:	4770      	bx	lr
 8023856:	f1ac 0510 	sub.w	r5, ip, #16
 802385a:	f647 74df 	movw	r4, #32735	; 0x7fdf
 802385e:	42a5      	cmp	r5, r4
 8023860:	d930      	bls.n	80238c4 <log+0x164>
 8023862:	1890      	adds	r0, r2, r2
 8023864:	eb43 0103 	adc.w	r1, r3, r3
 8023868:	4301      	orrs	r1, r0
 802386a:	d107      	bne.n	802387c <log+0x11c>
 802386c:	2001      	movs	r0, #1
 802386e:	b002      	add	sp, #8
 8023870:	ecbd 8b02 	vpop	{d8}
 8023874:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8023878:	f000 b89a 	b.w	80239b0 <__math_divzero>
 802387c:	4942      	ldr	r1, [pc, #264]	; (8023988 <log+0x228>)
 802387e:	2000      	movs	r0, #0
 8023880:	428b      	cmp	r3, r1
 8023882:	bf08      	it	eq
 8023884:	4282      	cmpeq	r2, r0
 8023886:	d0de      	beq.n	8023846 <log+0xe6>
 8023888:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 802388c:	d104      	bne.n	8023898 <log+0x138>
 802388e:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8023892:	ea31 010c 	bics.w	r1, r1, ip
 8023896:	d108      	bne.n	80238aa <log+0x14a>
 8023898:	ed9d 0b00 	vldr	d0, [sp]
 802389c:	b002      	add	sp, #8
 802389e:	ecbd 8b02 	vpop	{d8}
 80238a2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80238a6:	f000 b89b 	b.w	80239e0 <__math_invalid>
 80238aa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8023968 <log+0x208>
 80238ae:	ed9d 6b00 	vldr	d6, [sp]
 80238b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80238b6:	ec56 5b17 	vmov	r5, r6, d7
 80238ba:	4834      	ldr	r0, [pc, #208]	; (802398c <log+0x22c>)
 80238bc:	2400      	movs	r4, #0
 80238be:	192a      	adds	r2, r5, r4
 80238c0:	eb46 0300 	adc.w	r3, r6, r0
 80238c4:	2100      	movs	r1, #0
 80238c6:	1851      	adds	r1, r2, r1
 80238c8:	4931      	ldr	r1, [pc, #196]	; (8023990 <log+0x230>)
 80238ca:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80238ce:	eb43 0101 	adc.w	r1, r3, r1
 80238d2:	0d0c      	lsrs	r4, r1, #20
 80238d4:	2500      	movs	r5, #0
 80238d6:	ebb2 0805 	subs.w	r8, r2, r5
 80238da:	ea4f 5404 	mov.w	r4, r4, lsl #20
 80238de:	eb63 0904 	sbc.w	r9, r3, r4
 80238e2:	4b28      	ldr	r3, [pc, #160]	; (8023984 <log+0x224>)
 80238e4:	f3c1 3046 	ubfx	r0, r1, #13, #7
 80238e8:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 80238ec:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 80238f0:	ec49 8b16 	vmov	d6, r8, r9
 80238f4:	1509      	asrs	r1, r1, #20
 80238f6:	eea6 4b07 	vfma.f64	d4, d6, d7
 80238fa:	ee07 1a90 	vmov	s15, r1
 80238fe:	ee24 1b04 	vmul.f64	d1, d4, d4
 8023902:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8023906:	ed93 5b00 	vldr	d5, [r3]
 802390a:	ee24 0b01 	vmul.f64	d0, d4, d1
 802390e:	ed93 3b02 	vldr	d3, [r3, #8]
 8023912:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 8023916:	eea5 7b06 	vfma.f64	d7, d5, d6
 802391a:	ee34 5b07 	vadd.f64	d5, d4, d7
 802391e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8023922:	ee37 7b04 	vadd.f64	d7, d7, d4
 8023926:	eea3 7b06 	vfma.f64	d7, d3, d6
 802392a:	ed93 6b04 	vldr	d6, [r3, #16]
 802392e:	ed93 3b08 	vldr	d3, [r3, #32]
 8023932:	eea6 7b01 	vfma.f64	d7, d6, d1
 8023936:	ed93 6b06 	vldr	d6, [r3, #24]
 802393a:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 802393e:	eea3 6b04 	vfma.f64	d6, d3, d4
 8023942:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8023946:	eea2 3b04 	vfma.f64	d3, d2, d4
 802394a:	eea3 6b01 	vfma.f64	d6, d3, d1
 802394e:	eea0 7b06 	vfma.f64	d7, d0, d6
 8023952:	ee37 7b05 	vadd.f64	d7, d7, d5
 8023956:	e774      	b.n	8023842 <log+0xe2>
 8023958:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8023970 <log+0x210>
 802395c:	e771      	b.n	8023842 <log+0xe2>
 802395e:	bf00      	nop
 8023960:	00000000 	.word	0x00000000
 8023964:	41a00000 	.word	0x41a00000
 8023968:	00000000 	.word	0x00000000
 802396c:	43300000 	.word	0x43300000
	...
 8023978:	c0120000 	.word	0xc0120000
 802397c:	000308ff 	.word	0x000308ff
 8023980:	3ff00000 	.word	0x3ff00000
 8023984:	08049dd8 	.word	0x08049dd8
 8023988:	7ff00000 	.word	0x7ff00000
 802398c:	fcc00000 	.word	0xfcc00000
 8023990:	c01a0000 	.word	0xc01a0000

08023994 <with_errno>:
 8023994:	b513      	push	{r0, r1, r4, lr}
 8023996:	4604      	mov	r4, r0
 8023998:	ed8d 0b00 	vstr	d0, [sp]
 802399c:	f000 fa6c 	bl	8023e78 <__errno>
 80239a0:	ed9d 0b00 	vldr	d0, [sp]
 80239a4:	6004      	str	r4, [r0, #0]
 80239a6:	b002      	add	sp, #8
 80239a8:	bd10      	pop	{r4, pc}
 80239aa:	0000      	movs	r0, r0
 80239ac:	0000      	movs	r0, r0
	...

080239b0 <__math_divzero>:
 80239b0:	b082      	sub	sp, #8
 80239b2:	2800      	cmp	r0, #0
 80239b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80239b8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80239bc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80239c0:	ed8d 7b00 	vstr	d7, [sp]
 80239c4:	ed9d 0b00 	vldr	d0, [sp]
 80239c8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80239d8 <__math_divzero+0x28>
 80239cc:	2022      	movs	r0, #34	; 0x22
 80239ce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80239d2:	b002      	add	sp, #8
 80239d4:	f7ff bfde 	b.w	8023994 <with_errno>
	...

080239e0 <__math_invalid>:
 80239e0:	eeb0 7b40 	vmov.f64	d7, d0
 80239e4:	eeb4 7b47 	vcmp.f64	d7, d7
 80239e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239ec:	ee30 6b40 	vsub.f64	d6, d0, d0
 80239f0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80239f4:	d602      	bvs.n	80239fc <__math_invalid+0x1c>
 80239f6:	2021      	movs	r0, #33	; 0x21
 80239f8:	f7ff bfcc 	b.w	8023994 <with_errno>
 80239fc:	4770      	bx	lr

080239fe <with_errnof>:
 80239fe:	b513      	push	{r0, r1, r4, lr}
 8023a00:	4604      	mov	r4, r0
 8023a02:	ed8d 0a01 	vstr	s0, [sp, #4]
 8023a06:	f000 fa37 	bl	8023e78 <__errno>
 8023a0a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8023a0e:	6004      	str	r4, [r0, #0]
 8023a10:	b002      	add	sp, #8
 8023a12:	bd10      	pop	{r4, pc}

08023a14 <xflowf>:
 8023a14:	b130      	cbz	r0, 8023a24 <xflowf+0x10>
 8023a16:	eef1 7a40 	vneg.f32	s15, s0
 8023a1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023a1e:	2022      	movs	r0, #34	; 0x22
 8023a20:	f7ff bfed 	b.w	80239fe <with_errnof>
 8023a24:	eef0 7a40 	vmov.f32	s15, s0
 8023a28:	e7f7      	b.n	8023a1a <xflowf+0x6>
	...

08023a2c <__math_uflowf>:
 8023a2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023a34 <__math_uflowf+0x8>
 8023a30:	f7ff bff0 	b.w	8023a14 <xflowf>
 8023a34:	10000000 	.word	0x10000000

08023a38 <__math_may_uflowf>:
 8023a38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023a40 <__math_may_uflowf+0x8>
 8023a3c:	f7ff bfea 	b.w	8023a14 <xflowf>
 8023a40:	1a200000 	.word	0x1a200000

08023a44 <__math_oflowf>:
 8023a44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023a4c <__math_oflowf+0x8>
 8023a48:	f7ff bfe4 	b.w	8023a14 <xflowf>
 8023a4c:	70000000 	.word	0x70000000

08023a50 <__math_divzerof>:
 8023a50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023a54:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8023a58:	2800      	cmp	r0, #0
 8023a5a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8023a5e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8023a6c <__math_divzerof+0x1c>
 8023a62:	2022      	movs	r0, #34	; 0x22
 8023a64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8023a68:	f7ff bfc9 	b.w	80239fe <with_errnof>
 8023a6c:	00000000 	.word	0x00000000

08023a70 <__math_invalidf>:
 8023a70:	eef0 7a40 	vmov.f32	s15, s0
 8023a74:	ee30 7a40 	vsub.f32	s14, s0, s0
 8023a78:	eef4 7a67 	vcmp.f32	s15, s15
 8023a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a80:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8023a84:	d602      	bvs.n	8023a8c <__math_invalidf+0x1c>
 8023a86:	2021      	movs	r0, #33	; 0x21
 8023a88:	f7ff bfb9 	b.w	80239fe <with_errnof>
 8023a8c:	4770      	bx	lr
	...

08023a90 <expf>:
 8023a90:	ee10 2a10 	vmov	r2, s0
 8023a94:	b470      	push	{r4, r5, r6}
 8023a96:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8023a9a:	f240 442a 	movw	r4, #1066	; 0x42a
 8023a9e:	42a3      	cmp	r3, r4
 8023aa0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8023aa4:	d92a      	bls.n	8023afc <expf+0x6c>
 8023aa6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8023aaa:	d059      	beq.n	8023b60 <expf+0xd0>
 8023aac:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8023ab0:	d303      	bcc.n	8023aba <expf+0x2a>
 8023ab2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023ab6:	bc70      	pop	{r4, r5, r6}
 8023ab8:	4770      	bx	lr
 8023aba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8023b68 <expf+0xd8>
 8023abe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ac6:	dd03      	ble.n	8023ad0 <expf+0x40>
 8023ac8:	bc70      	pop	{r4, r5, r6}
 8023aca:	2000      	movs	r0, #0
 8023acc:	f7ff bfba 	b.w	8023a44 <__math_oflowf>
 8023ad0:	eddf 7a26 	vldr	s15, [pc, #152]	; 8023b6c <expf+0xdc>
 8023ad4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023adc:	d503      	bpl.n	8023ae6 <expf+0x56>
 8023ade:	bc70      	pop	{r4, r5, r6}
 8023ae0:	2000      	movs	r0, #0
 8023ae2:	f7ff bfa3 	b.w	8023a2c <__math_uflowf>
 8023ae6:	eddf 7a22 	vldr	s15, [pc, #136]	; 8023b70 <expf+0xe0>
 8023aea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023af2:	d503      	bpl.n	8023afc <expf+0x6c>
 8023af4:	bc70      	pop	{r4, r5, r6}
 8023af6:	2000      	movs	r0, #0
 8023af8:	f7ff bf9e 	b.w	8023a38 <__math_may_uflowf>
 8023afc:	4b1d      	ldr	r3, [pc, #116]	; (8023b74 <expf+0xe4>)
 8023afe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023b02:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8023b06:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8023b0a:	eeb0 7b44 	vmov.f64	d7, d4
 8023b0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8023b12:	ee17 5a10 	vmov	r5, s14
 8023b16:	ee37 7b44 	vsub.f64	d7, d7, d4
 8023b1a:	f005 021f 	and.w	r2, r5, #31
 8023b1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8023b22:	e9d2 4600 	ldrd	r4, r6, [r2]
 8023b26:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8023b2a:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 8023b2e:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8023b32:	eea4 0b07 	vfma.f64	d0, d4, d7
 8023b36:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8023b3a:	2300      	movs	r3, #0
 8023b3c:	1918      	adds	r0, r3, r4
 8023b3e:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 8023b42:	eb42 0106 	adc.w	r1, r2, r6
 8023b46:	eea5 6b07 	vfma.f64	d6, d5, d7
 8023b4a:	ee27 5b07 	vmul.f64	d5, d7, d7
 8023b4e:	ec41 0b17 	vmov	d7, r0, r1
 8023b52:	eea6 0b05 	vfma.f64	d0, d6, d5
 8023b56:	ee20 0b07 	vmul.f64	d0, d0, d7
 8023b5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8023b5e:	e7aa      	b.n	8023ab6 <expf+0x26>
 8023b60:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8023b78 <expf+0xe8>
 8023b64:	e7a7      	b.n	8023ab6 <expf+0x26>
 8023b66:	bf00      	nop
 8023b68:	42b17217 	.word	0x42b17217
 8023b6c:	c2cff1b4 	.word	0xc2cff1b4
 8023b70:	c2ce8ecf 	.word	0xc2ce8ecf
 8023b74:	0804a668 	.word	0x0804a668
 8023b78:	00000000 	.word	0x00000000

08023b7c <checkint>:
 8023b7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8023b80:	2b7e      	cmp	r3, #126	; 0x7e
 8023b82:	dd10      	ble.n	8023ba6 <checkint+0x2a>
 8023b84:	2b96      	cmp	r3, #150	; 0x96
 8023b86:	dc0c      	bgt.n	8023ba2 <checkint+0x26>
 8023b88:	2201      	movs	r2, #1
 8023b8a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8023b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8023b92:	1e5a      	subs	r2, r3, #1
 8023b94:	4202      	tst	r2, r0
 8023b96:	d106      	bne.n	8023ba6 <checkint+0x2a>
 8023b98:	4203      	tst	r3, r0
 8023b9a:	bf0c      	ite	eq
 8023b9c:	2002      	moveq	r0, #2
 8023b9e:	2001      	movne	r0, #1
 8023ba0:	4770      	bx	lr
 8023ba2:	2002      	movs	r0, #2
 8023ba4:	4770      	bx	lr
 8023ba6:	2000      	movs	r0, #0
 8023ba8:	4770      	bx	lr
 8023baa:	0000      	movs	r0, r0
 8023bac:	0000      	movs	r0, r0
	...

08023bb0 <powf>:
 8023bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bb2:	ee10 1a10 	vmov	r1, s0
 8023bb6:	ee10 6a90 	vmov	r6, s1
 8023bba:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8023bbe:	0072      	lsls	r2, r6, #1
 8023bc0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8023bc4:	b085      	sub	sp, #20
 8023bc6:	f102 30ff 	add.w	r0, r2, #4294967295
 8023bca:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8023bce:	d256      	bcs.n	8023c7e <powf+0xce>
 8023bd0:	4298      	cmp	r0, r3
 8023bd2:	d256      	bcs.n	8023c82 <powf+0xd2>
 8023bd4:	2000      	movs	r0, #0
 8023bd6:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8023bda:	4ea3      	ldr	r6, [pc, #652]	; (8023e68 <powf+0x2b8>)
 8023bdc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8023be0:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8023be4:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8023be8:	0dd2      	lsrs	r2, r2, #23
 8023bea:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8023bee:	05d2      	lsls	r2, r2, #23
 8023bf0:	1a8b      	subs	r3, r1, r2
 8023bf2:	ed97 5b00 	vldr	d5, [r7]
 8023bf6:	ee07 3a90 	vmov	s15, r3
 8023bfa:	15d2      	asrs	r2, r2, #23
 8023bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8023c00:	eea5 6b07 	vfma.f64	d6, d5, d7
 8023c04:	ed97 5b02 	vldr	d5, [r7, #8]
 8023c08:	ee26 2b06 	vmul.f64	d2, d6, d6
 8023c0c:	ee22 1b02 	vmul.f64	d1, d2, d2
 8023c10:	ee07 2a90 	vmov	s15, r2
 8023c14:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8023c18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8023c1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8023c20:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8023c24:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8023c28:	eea6 5b04 	vfma.f64	d5, d6, d4
 8023c2c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8023c30:	eea6 4b03 	vfma.f64	d4, d6, d3
 8023c34:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8023c38:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8023c3c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8023c40:	eea2 7b04 	vfma.f64	d7, d2, d4
 8023c44:	eea5 7b01 	vfma.f64	d7, d5, d1
 8023c48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8023c4c:	ee10 1a90 	vmov	r1, s1
 8023c50:	2300      	movs	r3, #0
 8023c52:	2700      	movs	r7, #0
 8023c54:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8023c58:	f248 06be 	movw	r6, #32958	; 0x80be
 8023c5c:	429f      	cmp	r7, r3
 8023c5e:	bf08      	it	eq
 8023c60:	4296      	cmpeq	r6, r2
 8023c62:	f080 80b1 	bcs.w	8023dc8 <powf+0x218>
 8023c66:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8023e48 <powf+0x298>
 8023c6a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c72:	dd79      	ble.n	8023d68 <powf+0x1b8>
 8023c74:	b005      	add	sp, #20
 8023c76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023c7a:	f7ff bee3 	b.w	8023a44 <__math_oflowf>
 8023c7e:	4298      	cmp	r0, r3
 8023c80:	d32d      	bcc.n	8023cde <powf+0x12e>
 8023c82:	b952      	cbnz	r2, 8023c9a <powf+0xea>
 8023c84:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8023c88:	005b      	lsls	r3, r3, #1
 8023c8a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8023c8e:	f240 80cd 	bls.w	8023e2c <powf+0x27c>
 8023c92:	ee30 0a20 	vadd.f32	s0, s0, s1
 8023c96:	b005      	add	sp, #20
 8023c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c9a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8023c9e:	d105      	bne.n	8023cac <powf+0xfc>
 8023ca0:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8023ca4:	0076      	lsls	r6, r6, #1
 8023ca6:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8023caa:	e7f0      	b.n	8023c8e <powf+0xde>
 8023cac:	004b      	lsls	r3, r1, #1
 8023cae:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8023cb2:	d8ee      	bhi.n	8023c92 <powf+0xe2>
 8023cb4:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8023cb8:	d1eb      	bne.n	8023c92 <powf+0xe2>
 8023cba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8023cbe:	f000 80b5 	beq.w	8023e2c <powf+0x27c>
 8023cc2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8023cc6:	ea6f 0606 	mvn.w	r6, r6
 8023cca:	bf34      	ite	cc
 8023ccc:	2300      	movcc	r3, #0
 8023cce:	2301      	movcs	r3, #1
 8023cd0:	0ff6      	lsrs	r6, r6, #31
 8023cd2:	42b3      	cmp	r3, r6
 8023cd4:	f040 80ad 	bne.w	8023e32 <powf+0x282>
 8023cd8:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8023cdc:	e7db      	b.n	8023c96 <powf+0xe6>
 8023cde:	004f      	lsls	r7, r1, #1
 8023ce0:	1e7a      	subs	r2, r7, #1
 8023ce2:	429a      	cmp	r2, r3
 8023ce4:	d31c      	bcc.n	8023d20 <powf+0x170>
 8023ce6:	2900      	cmp	r1, #0
 8023ce8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023cec:	da0f      	bge.n	8023d0e <powf+0x15e>
 8023cee:	ee10 0a90 	vmov	r0, s1
 8023cf2:	f7ff ff43 	bl	8023b7c <checkint>
 8023cf6:	2801      	cmp	r0, #1
 8023cf8:	d109      	bne.n	8023d0e <powf+0x15e>
 8023cfa:	eeb1 0a40 	vneg.f32	s0, s0
 8023cfe:	b947      	cbnz	r7, 8023d12 <powf+0x162>
 8023d00:	2e00      	cmp	r6, #0
 8023d02:	dac8      	bge.n	8023c96 <powf+0xe6>
 8023d04:	b005      	add	sp, #20
 8023d06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023d0a:	f7ff bea1 	b.w	8023a50 <__math_divzerof>
 8023d0e:	2000      	movs	r0, #0
 8023d10:	e7f5      	b.n	8023cfe <powf+0x14e>
 8023d12:	2e00      	cmp	r6, #0
 8023d14:	dabf      	bge.n	8023c96 <powf+0xe6>
 8023d16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023d1a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8023d1e:	e7ba      	b.n	8023c96 <powf+0xe6>
 8023d20:	2900      	cmp	r1, #0
 8023d22:	da1f      	bge.n	8023d64 <powf+0x1b4>
 8023d24:	ee10 0a90 	vmov	r0, s1
 8023d28:	f7ff ff28 	bl	8023b7c <checkint>
 8023d2c:	b920      	cbnz	r0, 8023d38 <powf+0x188>
 8023d2e:	b005      	add	sp, #20
 8023d30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023d34:	f7ff be9c 	b.w	8023a70 <__math_invalidf>
 8023d38:	2801      	cmp	r0, #1
 8023d3a:	bf14      	ite	ne
 8023d3c:	2000      	movne	r0, #0
 8023d3e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8023d42:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8023d46:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8023d4a:	f4bf af44 	bcs.w	8023bd6 <powf+0x26>
 8023d4e:	eddf 7a47 	vldr	s15, [pc, #284]	; 8023e6c <powf+0x2bc>
 8023d52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023d56:	ee10 3a10 	vmov	r3, s0
 8023d5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023d5e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8023d62:	e738      	b.n	8023bd6 <powf+0x26>
 8023d64:	2000      	movs	r0, #0
 8023d66:	e7ee      	b.n	8023d46 <powf+0x196>
 8023d68:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8023e50 <powf+0x2a0>
 8023d6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d74:	dd10      	ble.n	8023d98 <powf+0x1e8>
 8023d76:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8023d7a:	2800      	cmp	r0, #0
 8023d7c:	d15c      	bne.n	8023e38 <powf+0x288>
 8023d7e:	9302      	str	r3, [sp, #8]
 8023d80:	eddd 7a02 	vldr	s15, [sp, #8]
 8023d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023d8c:	eef4 7a47 	vcmp.f32	s15, s14
 8023d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d94:	f47f af6e 	bne.w	8023c74 <powf+0xc4>
 8023d98:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8023e58 <powf+0x2a8>
 8023d9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023da4:	d804      	bhi.n	8023db0 <powf+0x200>
 8023da6:	b005      	add	sp, #20
 8023da8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023dac:	f7ff be3e 	b.w	8023a2c <__math_uflowf>
 8023db0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8023e60 <powf+0x2b0>
 8023db4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dbc:	d504      	bpl.n	8023dc8 <powf+0x218>
 8023dbe:	b005      	add	sp, #20
 8023dc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023dc4:	f7ff be38 	b.w	8023a38 <__math_may_uflowf>
 8023dc8:	4b29      	ldr	r3, [pc, #164]	; (8023e70 <powf+0x2c0>)
 8023dca:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8023dce:	ee30 6b07 	vadd.f64	d6, d0, d7
 8023dd2:	ed8d 6b00 	vstr	d6, [sp]
 8023dd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8023dda:	ee30 7b47 	vsub.f64	d7, d0, d7
 8023dde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8023de2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023de6:	f006 011f 	and.w	r1, r6, #31
 8023dea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8023dee:	e9d1 ce00 	ldrd	ip, lr, [r1]
 8023df2:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8023df6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8023dfa:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 8023dfe:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023e02:	ee27 5b07 	vmul.f64	d5, d7, d7
 8023e06:	1836      	adds	r6, r6, r0
 8023e08:	2300      	movs	r3, #0
 8023e0a:	eb13 040c 	adds.w	r4, r3, ip
 8023e0e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 8023e12:	eb41 050e 	adc.w	r5, r1, lr
 8023e16:	eea7 0b04 	vfma.f64	d0, d7, d4
 8023e1a:	ec45 4b17 	vmov	d7, r4, r5
 8023e1e:	eea6 0b05 	vfma.f64	d0, d6, d5
 8023e22:	ee20 0b07 	vmul.f64	d0, d0, d7
 8023e26:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8023e2a:	e734      	b.n	8023c96 <powf+0xe6>
 8023e2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023e30:	e731      	b.n	8023c96 <powf+0xe6>
 8023e32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8023e74 <powf+0x2c4>
 8023e36:	e72e      	b.n	8023c96 <powf+0xe6>
 8023e38:	9303      	str	r3, [sp, #12]
 8023e3a:	eddd 7a03 	vldr	s15, [sp, #12]
 8023e3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023e46:	e7a1      	b.n	8023d8c <powf+0x1dc>
 8023e48:	ffd1d571 	.word	0xffd1d571
 8023e4c:	405fffff 	.word	0x405fffff
 8023e50:	ffa3aae2 	.word	0xffa3aae2
 8023e54:	405fffff 	.word	0x405fffff
 8023e58:	00000000 	.word	0x00000000
 8023e5c:	c062c000 	.word	0xc062c000
 8023e60:	00000000 	.word	0x00000000
 8023e64:	c062a000 	.word	0xc062a000
 8023e68:	0804a7b0 	.word	0x0804a7b0
 8023e6c:	4b000000 	.word	0x4b000000
 8023e70:	0804a668 	.word	0x0804a668
 8023e74:	00000000 	.word	0x00000000

08023e78 <__errno>:
 8023e78:	4b01      	ldr	r3, [pc, #4]	; (8023e80 <__errno+0x8>)
 8023e7a:	6818      	ldr	r0, [r3, #0]
 8023e7c:	4770      	bx	lr
 8023e7e:	bf00      	nop
 8023e80:	24003050 	.word	0x24003050

08023e84 <_close>:
 8023e84:	4b02      	ldr	r3, [pc, #8]	; (8023e90 <_close+0xc>)
 8023e86:	2258      	movs	r2, #88	; 0x58
 8023e88:	601a      	str	r2, [r3, #0]
 8023e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8023e8e:	4770      	bx	lr
 8023e90:	240065b8 	.word	0x240065b8

08023e94 <_fstat>:
 8023e94:	4b02      	ldr	r3, [pc, #8]	; (8023ea0 <_fstat+0xc>)
 8023e96:	2258      	movs	r2, #88	; 0x58
 8023e98:	601a      	str	r2, [r3, #0]
 8023e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8023e9e:	4770      	bx	lr
 8023ea0:	240065b8 	.word	0x240065b8

08023ea4 <_getpid>:
 8023ea4:	4b02      	ldr	r3, [pc, #8]	; (8023eb0 <_getpid+0xc>)
 8023ea6:	2258      	movs	r2, #88	; 0x58
 8023ea8:	601a      	str	r2, [r3, #0]
 8023eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8023eae:	4770      	bx	lr
 8023eb0:	240065b8 	.word	0x240065b8

08023eb4 <_isatty>:
 8023eb4:	4b02      	ldr	r3, [pc, #8]	; (8023ec0 <_isatty+0xc>)
 8023eb6:	2258      	movs	r2, #88	; 0x58
 8023eb8:	601a      	str	r2, [r3, #0]
 8023eba:	2000      	movs	r0, #0
 8023ebc:	4770      	bx	lr
 8023ebe:	bf00      	nop
 8023ec0:	240065b8 	.word	0x240065b8

08023ec4 <_kill>:
 8023ec4:	4b02      	ldr	r3, [pc, #8]	; (8023ed0 <_kill+0xc>)
 8023ec6:	2258      	movs	r2, #88	; 0x58
 8023ec8:	601a      	str	r2, [r3, #0]
 8023eca:	f04f 30ff 	mov.w	r0, #4294967295
 8023ece:	4770      	bx	lr
 8023ed0:	240065b8 	.word	0x240065b8

08023ed4 <_lseek>:
 8023ed4:	4b02      	ldr	r3, [pc, #8]	; (8023ee0 <_lseek+0xc>)
 8023ed6:	2258      	movs	r2, #88	; 0x58
 8023ed8:	601a      	str	r2, [r3, #0]
 8023eda:	f04f 30ff 	mov.w	r0, #4294967295
 8023ede:	4770      	bx	lr
 8023ee0:	240065b8 	.word	0x240065b8

08023ee4 <_read>:
 8023ee4:	4b02      	ldr	r3, [pc, #8]	; (8023ef0 <_read+0xc>)
 8023ee6:	2258      	movs	r2, #88	; 0x58
 8023ee8:	601a      	str	r2, [r3, #0]
 8023eea:	f04f 30ff 	mov.w	r0, #4294967295
 8023eee:	4770      	bx	lr
 8023ef0:	240065b8 	.word	0x240065b8

08023ef4 <_sbrk>:
 8023ef4:	4b04      	ldr	r3, [pc, #16]	; (8023f08 <_sbrk+0x14>)
 8023ef6:	6819      	ldr	r1, [r3, #0]
 8023ef8:	4602      	mov	r2, r0
 8023efa:	b909      	cbnz	r1, 8023f00 <_sbrk+0xc>
 8023efc:	4903      	ldr	r1, [pc, #12]	; (8023f0c <_sbrk+0x18>)
 8023efe:	6019      	str	r1, [r3, #0]
 8023f00:	6818      	ldr	r0, [r3, #0]
 8023f02:	4402      	add	r2, r0
 8023f04:	601a      	str	r2, [r3, #0]
 8023f06:	4770      	bx	lr
 8023f08:	240053e0 	.word	0x240053e0
 8023f0c:	240065c8 	.word	0x240065c8

08023f10 <_write>:
 8023f10:	4b02      	ldr	r3, [pc, #8]	; (8023f1c <_write+0xc>)
 8023f12:	2258      	movs	r2, #88	; 0x58
 8023f14:	601a      	str	r2, [r3, #0]
 8023f16:	f04f 30ff 	mov.w	r0, #4294967295
 8023f1a:	4770      	bx	lr
 8023f1c:	240065b8 	.word	0x240065b8

08023f20 <_exit>:
 8023f20:	e7fe      	b.n	8023f20 <_exit>
	...

08023f24 <_init>:
 8023f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f26:	bf00      	nop
 8023f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f2a:	bc08      	pop	{r3}
 8023f2c:	469e      	mov	lr, r3
 8023f2e:	4770      	bx	lr

08023f30 <_fini>:
 8023f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f32:	bf00      	nop
 8023f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f36:	bc08      	pop	{r3}
 8023f38:	469e      	mov	lr, r3
 8023f3a:	4770      	bx	lr
